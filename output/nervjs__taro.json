{
    "repo": "NervJS/taro",
    "url": "https://github.com/NervJS/taro",
    "branch": "next",
    "configs": [
        {
            "package": "babel-plugin-transform-jsx-to-stylesheet",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-jsx-to-stylesheet/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-plugin-transform-react-jsx-to-rn-stylesheet",
            "lang": "js",
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-plugin-transform-taroapi",
            "lang": "ts",
            "dir": "packages/babel-plugin-transform-taroapi/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "babel-preset-taro",
            "lang": "js",
            "dir": "packages/babel-preset-taro/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "taro-css-to-react-native",
            "lang": "js",
            "dir": "packages/css-to-react-native/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "eslint-plugin-taro",
            "lang": "js",
            "dir": "packages/eslint-plugin-taro/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "postcss-pxtransform",
            "lang": "js",
            "dir": "packages/postcss-pxtransform/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/shared",
            "lang": "ts",
            "dir": "packages/shared/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "stylelint-config-taro-rn",
            "lang": "js",
            "dir": "packages/stylelint-config-taro-rn/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/cli",
            "lang": "ts",
            "dir": "packages/taro-cli/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/components-rn",
            "lang": "js",
            "dir": "packages/taro-components-rn/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@tarojs/components",
            "lang": "js",
            "dir": "packages/taro-components/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/extend",
            "lang": "js",
            "dir": "packages/taro-extend/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-h5",
            "lang": "js",
            "dir": "packages/taro-h5/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-loader",
            "lang": "js",
            "dir": "packages/taro-loader/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/mini-runner",
            "lang": "ts",
            "dir": "packages/taro-mini-runner/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/react",
            "lang": "js",
            "dir": "packages/taro-react/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-runner",
            "lang": "ts",
            "dir": "packages/taro-rn-runner/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-style-transformer",
            "lang": "js",
            "dir": "packages/taro-rn-style-transformer/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/rn-transformer",
            "lang": "js",
            "dir": "packages/taro-rn-transformer/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/taro-rn",
            "lang": "js",
            "dir": "packages/taro-rn/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/router",
            "lang": "js",
            "dir": "packages/taro-router/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@tarojs/runner-utils",
            "lang": "js",
            "dir": "packages/taro-runner-utils/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/runtime",
            "lang": "js",
            "dir": "packages/taro-runtime/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/webpack-runner",
            "lang": "ts",
            "dir": "packages/taro-webpack-runner/src/__tests__",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@tarojs/with-weapp",
            "lang": "js",
            "dir": "packages/taro-with-weapp/__tests__",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "no stylesheet import",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 25,
                "column": 26,
                "index": 713
            },
            "line": 25,
            "code": "  it('no stylesheet import', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toBe(`import { createElement, Component } from 'rax';\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform only one className to style as member",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 40,
                "column": 53,
                "index": 1098
            },
            "line": 40,
            "code": "  it('transform only one className to style as member', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform multiple classNames to style as array",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 51,
                "column": 53,
                "index": 1377
            },
            "line": 51,
            "code": "  it('transform multiple classNames to style as array', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform array, object and expressions",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 62,
                "column": 45,
                "index": 1657
            },
            "line": 62,
            "code": "  it('transform array, object and expressions', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className={'header'}>\n      <div className={{ active: props.isActive }} />\n      <div className={['header1 header2', 'header3', { active: props.isActive }]} />\n      <div className={props.visible ? 'show' : 'hide'} />\n      <div className={getClassName()} />\n    </div>;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple anonymous css file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 78,
                "column": 41,
                "index": 2172
            },
            "line": 78,
            "code": "  it('combine multiple anonymous css file', () => {\n    expect(getTransformCode(`import { createElement, Component } from 'rax';\nimport './app1.css';\nimport './app2.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine the same filename style source",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 89,
                "column": 44,
                "index": 2472
            },
            "line": 89,
            "code": "  it('combine the same filename style source', () => {\n    expect(getTransformCode(`import { createElement, Component } from 'rax';\nimport './app.css';\nimport '../a/app.css';\nimport '../b/app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header1 header2\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine one style and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 101,
                "column": 37,
                "index": 2789
            },
            "line": 101,
            "code": "  it('combine one style and className', () => {\n    expect(getTransformCode(`import { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={style.header1} />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine inline style object and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 112,
                "column": 47,
                "index": 3117
            },
            "line": 112,
            "code": "  it('combine inline style object and className', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport \"./app.css\";\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={{\n      height: 100\n    }} />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple styles and className",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 125,
                "column": 43,
                "index": 3420
            },
            "line": 125,
            "code": "  it('combine multiple styles and className', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\nimport style from './style.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header2\" style={[style.header1, style.header3]} />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "do not transform code when no css file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 137,
                "column": 44,
                "index": 3763
            },
            "line": 137,
            "code": "  it('do not transform code when no css file', () => {\n    const code = `import { createElement, Component } from 'rax';\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`;\n    expect(getTransformCode(code)).toBe(code);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform scss file",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 146,
                "column": 25,
                "index": 4008
            },
            "line": 146,
            "code": "  it('transform scss file', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform scss file with hyphen(-) in the filename",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 157,
                "column": 56,
                "index": 4291
            },
            "line": 157,
            "code": "  it('transform scss file with hyphen(-) in the filename', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app-style.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform constant elements in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 168,
                "column": 43,
                "index": 4567
            },
            "line": 168,
            "code": "  it('transform constant elements in render', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './app.css';\n\nrender(<div className=\"header\" />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform stylus in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 176,
                "column": 32,
                "index": 4771
            },
            "line": 176,
            "code": "  it('transform stylus in render', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './app.styl';\n\nrender(<div className=\"header\" />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform less in render",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 184,
                "column": 30,
                "index": 4974
            },
            "line": 184,
            "code": "  it('transform less in render', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\n\nrender(<div className=\"header\" />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "combine multiple different extension style sources",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 192,
                "column": 56,
                "index": 5203
            },
            "line": 192,
            "code": "  it('combine multiple different extension style sources', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './index.css'\nimport './index.scss'\nimport '../index.less'\nimport styl from './index.styl'\n\nrender(<div className=\"header\" />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute expression",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 203,
                "column": 41,
                "index": 5494
            },
            "line": 203,
            "code": "  it('transform styleAttribute expression', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\n\nrender(<div className=\"header\" style={{width: 100, height: 100}} />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute inline string",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 211,
                "column": 44,
                "index": 5745
            },
            "line": 211,
            "code": "  it('transform styleAttribute inline string', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\n\nrender(<div style=\"width:100px;height:100px;background-color:rgba(0, 0, 0, 0.5);border: 1px solid;\" />);\n`)).toBe(`import { createElement, render } from 'rax';\nrender(<div style={{\n  \"width\": 100,\n  \"height\": 100,\n  \"backgroundColor\": \"rgba(0, 0, 0, 0.5)\",\n  \"borderWidth\": 1,\n  \"borderStyle\": \"solid\",\n  \"borderColor\": \"black\"\n}} />);`);\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "transform styleAttribute inline string and exsit classNameAttribute",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 226,
                "column": 73,
                "index": 6250
            },
            "line": 226,
            "code": "  it('transform styleAttribute inline string and exsit classNameAttribute', () => {\n    expect(getTransformCode(`\nimport { createElement, render } from 'rax';\nimport './app.less';\nrender(<div className=\"header\" style=\"width:100px;height:100px;background-color:rgba(0, 0, 0, 0.5);border: 1px solid;\" />);\n`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Provide a default stylesheet object when css module enable and import css module sheet only",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 233,
                "column": 97,
                "index": 6607
            },
            "line": 233,
            "code": "  it('Provide a default stylesheet object when css module enable and import css module sheet only', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    return <div>\n      <div className={styleSheet.header} />\n      <div className=\"red\" />\n    </div>;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style assignment When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 249,
                "column": 63,
                "index": 7028
            },
            "line": 249,
            "code": "  it('Processing module style assignment When css module enable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = styleSheet.red\n    return <div className={a} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing multiple module style When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 264,
                "column": 61,
                "index": 7428
            },
            "line": 264,
            "code": "  it('Processing multiple module style When css module enable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport styleSheet from './app.module.scss';\nimport styleSheet2 from './app2.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = styleSheet.red\n    return <div className={\\`\\${a} \\${styleSheet2.b}\\`} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style spread and assign When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 279,
                "column": 70,
                "index": 7888
            },
            "line": 279,
            "code": "  it('Processing module style spread and assign When css module enable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = { ...styleSheet.red };\n    const b = a;\n    return <div className={{ ...b }} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style conditional expression When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 295,
                "column": 75,
                "index": 8334
            },
            "line": 295,
            "code": "  it('Processing module style conditional expression When css module enable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = 1 ? styleSheet.red : styleSheet.blue;\n    return <div className={a} />;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "Processing module style through call expression When css module enable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 310,
                "column": 76,
                "index": 8772
            },
            "line": 310,
            "code": "  it('Processing module style through call expression When css module enable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    const a = Object.assign({}, styleSheet.red);\n    const b = Object.assign({}, a);\n    return <div className={a}><span className={b} /><span className={Object.assign({}, b)} /></div>;\n  }\n}`, false, {\n      enableCSSModule: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "merge stylesheet when css module disable",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 325,
                "column": 46,
                "index": 9259
            },
            "line": 325,
            "code": "  it('merge stylesheet when css module disable', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.scss';\nimport styleSheet from './app.module.scss';\n\nclass App extends Component {\n  render() {\n    return <div className=\"header\" style={styleSheet.red} />;\n  }\n}`)).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "disableMultipleClassName and transform multiple className to multiple style",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 337,
                "column": 81,
                "index": 9634
            },
            "line": 337,
            "code": "  it('disableMultipleClassName and transform multiple className to multiple style', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" />;\n  }\n}`, false, {\n      enableMultipleClassName: false\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform multiple className to multiple style",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 350,
                "column": 80,
                "index": 10021
            },
            "line": 350,
            "code": "  it('enableMultipleClassName and transform multiple className to multiple style', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform multiple className to multiple style as array",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 363,
                "column": 89,
                "index": 10416
            },
            "line": 363,
            "code": "  it('enableMultipleClassName and transform multiple className to multiple style as array', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"container\" headerClassName=\"header\" style={{ color: \"red\" }} headerStyle={{ color: \"green\" }} />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "enableMultipleClassName and transform error css value",
            "suites": [
                "jsx style plugin"
            ],
            "updatePoint": {
                "line": 376,
                "column": 59,
                "index": 10839
            },
            "line": 376,
            "code": "  it('enableMultipleClassName and transform error css value', () => {\n    expect(getTransformCode(`\nimport { createElement, Component } from 'rax';\nimport './app.css';\n\nclass App extends Component {\n  render() {\n    return <StatusBar barStyle=\"dark-content\" />;\n  }\n}`, false, {\n      enableMultipleClassName: true\n    })).toMatchSnapshot();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__"
        },
        {
            "name": "preact",
            "suites": [
                "babel-preset-taro with h5"
            ],
            "updatePoint": {
                "line": 8,
                "column": 12,
                "index": 251
            },
            "line": 8,
            "code": "  it('preact', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'preact'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [, override] = config.overrides;\n    const [prefreshPlugin] = override.plugins;\n    expect(prefreshPlugin === require('@prefresh/babel-plugin')).toBeTruthy();\n  });",
            "file": "h5.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "not exist dynamic-import-node",
            "suites": [
                "babel-preset-taro with h5"
            ],
            "updatePoint": {
                "line": 17,
                "column": 35,
                "index": 598
            },
            "line": 17,
            "code": "  it('not exist dynamic-import-node', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [dynamicImportNode] = override.plugins[override.plugins.length - 2];\n    expect(dynamicImportNode === require('babel-plugin-dynamic-import-node')).toBeFalsy();\n  });",
            "file": "h5.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "enable dynamic-import-node",
            "suites": [
                "babel-preset-taro with h5"
            ],
            "updatePoint": {
                "line": 27,
                "column": 32,
                "index": 999
            },
            "line": 27,
            "code": "  it('enable dynamic-import-node', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      'dynamic-import-node': true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [dynamicImportNode] = override.plugins[override.plugins.length - 2];\n    expect(dynamicImportNode === require('babel-plugin-dynamic-import-node')).toBeTruthy();\n  });",
            "file": "h5.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 4,
                "column": 10,
                "index": 143
            },
            "line": 4,
            "code": "  it('nerv', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'nerv'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, [_, reactConfig]] = override.presets;\n    expect(reactConfig.pragma).toBe('Nerv.createElement');\n    expect(reactConfig.pragmaFrag).toBe('Nerv.Fragment');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 14,
                "column": 11,
                "index": 504
            },
            "line": 14,
            "code": "  it('react', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 20,
                "column": 9,
                "index": 655
            },
            "line": 20,
            "code": "  it('vue', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, [jsxPreset, jsxOptions]] = override.presets;\n    expect(jsxPreset === require('@vue/babel-preset-jsx')).toBeTruthy();\n    expect(jsxOptions).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue3",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 30,
                "column": 10,
                "index": 1013
            },
            "line": 30,
            "code": "  it('vue3', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue3'\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [[jsxPlugin, jsxOptions]] = override.plugins;\n    expect(jsxPlugin === require('@vue/babel-plugin-jsx')).toBeTruthy();\n    expect(jsxOptions).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue without jsx",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 40,
                "column": 21,
                "index": 1381
            },
            "line": 40,
            "code": "  it('vue without jsx', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue',\n      vueJsx: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, jsxPreset] = override.presets;\n    expect(jsxPreset).toBeUndefined();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "vue3 without jsx",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 50,
                "column": 22,
                "index": 1688
            },
            "line": 50,
            "code": "  it('vue3 without jsx', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue3',\n      vueJsx: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [[jsxPlugin, jsxOptions]] = override.plugins;\n    expect(jsxPlugin === require('@vue/babel-plugin-jsx')).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript react",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 60,
                "column": 22,
                "index": 2041
            },
            "line": 60,
            "code": "  it('typescript react', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [,, [ts, tsconfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsconfig.jsxPragma === 'React').toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript nerv",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 71,
                "column": 21,
                "index": 2427
            },
            "line": 71,
            "code": "  it('typescript nerv', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'nerv',\n      ts: true\n    });\n    const [override] = config.overrides;\n    const [,, [ts, tsconfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsconfig.jsxPragma === 'Nerv').toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "typescript vue",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 81,
                "column": 20,
                "index": 2759
            },
            "line": 81,
            "code": "  it('typescript vue', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'vue',\n      ts: true\n    });\n    const [override, vueOverride] = config.overrides;\n    const [,, [ts, tsconfig]] = override.presets;\n    expect(typeof ts.default === 'function').toBeTruthy();\n    expect(tsconfig.hasOwnProperty('jsxPragma') === false).toBeTruthy();\n    expect(vueOverride.include.test('a.vue')).toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "can change env options",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 92,
                "column": 28,
                "index": 3188
            },
            "line": 92,
            "code": "  it('can change env options', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      spec: false,\n      loose: false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, env] = override.presets[0];\n    expect(env.spec).toBeFalsy();\n    expect(env.loose).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "default env options",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 105,
                "column": 25,
                "index": 3561
            },
            "line": 105,
            "code": "  it('default env options', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      spec: true,\n      loose: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, env] = override.presets[0];\n    expect(env).toEqual({\n      spec: true,\n      loose: true,\n      debug: false,\n      modules: 'commonjs',\n      targets: {\n        node: 'current'\n      },\n      useBuiltIns: false,\n      ignoreBrowserslistConfig: true\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "has dynamic-import-node",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 127,
                "column": 29,
                "index": 4098
            },
            "line": 127,
            "code": "  it('has dynamic-import-node', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [dynamicImportNode] = override.plugins[override.plugins.length - 2];\n    expect(dynamicImportNode === require('babel-plugin-dynamic-import-node')).toBeTruthy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "disable dynamic-import-node",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 137,
                "column": 33,
                "index": 4501
            },
            "line": 137,
            "code": "  it('disable dynamic-import-node', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      'dynamic-import-node': false\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [dynamicImportNode] = override.plugins[override.plugins.length - 2];\n    expect(dynamicImportNode === require('babel-plugin-dynamic-import-node')).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "can react preset change",
            "suites": [
                "babel-preset-taro"
            ],
            "updatePoint": {
                "line": 148,
                "column": 29,
                "index": 4935
            },
            "line": 148,
            "code": "  it('can react preset change', () => {\n    const config = babelPresetTaro({}, {\n      framework: 'react',\n      ts: true,\n      react: {\n        throwIfNamespace: false\n      }\n    });\n    expect(config.sourceType).toBe('unambiguous');\n    const [override] = config.overrides;\n    const [, [, reactConfig]] = override.presets;\n    expect(reactConfig.throwIfNamespace).toBeFalsy();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/babel-preset-taro/__tests__"
        },
        {
            "name": "returns empty object when input is empty",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 3,
                "column": 46,
                "index": 110
            },
            "line": 3,
            "code": "  it('returns empty object when input is empty', () => {\n    expect(transform('')).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 6,
                "column": 21,
                "index": 187
            },
            "line": 6,
            "code": "  it('transforms flex', () => {\n    expect(transform(`\n      .test {\n        flex: 1;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 0,\n        flexGrow: 1,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms numbers",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 19,
                "column": 24,
                "index": 403
            },
            "line": 19,
            "code": "  it('transforms numbers', () => {\n    expect(transform(`\n      .test {\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n      }\n    `)).toEqual({\n      test: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores unsupported at-rules",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 36,
                "column": 34,
                "index": 686
            },
            "line": 36,
            "code": "  it('ignores unsupported at-rules', () => {\n    expect(transform('@charset \"utf-8\";')).toEqual({});\n    expect(transform(`\n      @supports (display: grid) {\n        div {\n          display: grid;\n        }\n      }\n    `)).toEqual({});\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows pixels in unspecialized transform",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 46,
                "column": 46,
                "index": 940
            },
            "line": 46,
            "code": "  it('allows pixels in unspecialized transform', () => {\n    expect(transform(`\n      .test {\n        top: 0px;\n      }\n    `)).toEqual({\n      test: {\n        top: 'scalePx2dp(0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows percent in unspecialized transform",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 57,
                "column": 47,
                "index": 1144
            },
            "line": 57,
            "code": "  it('allows percent in unspecialized transform', () => {\n    expect(transform(`\n      .test {\n        top: 0%;\n      }\n    `)).toEqual({\n      test: {\n        top: '0%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows decimal values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 68,
                "column": 27,
                "index": 1316
            },
            "line": 68,
            "code": "  it('allows decimal values', () => {\n    expect(transform(`\n      .test {\n        margin-top: 0.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: 100.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(100.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -0.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -100.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-100.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: .5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(0.5)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin-top: -.5px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(-0.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows PX or PX values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 124,
                "column": 28,
                "index": 2315
            },
            "line": 124,
            "code": "  it('allows PX or PX values', () => {\n    expect(transform(`\n      .test {\n        top: 1Px;\n        margin: 10Px 30px;\n      }\n    `)).toEqual({\n      test: {\n        marginBottom: 10,\n        marginLeft: 'scalePx2dp(30)',\n        marginRight: 'scalePx2dp(30)',\n        marginTop: 10,\n        top: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows PX or PX values scalePx2dp",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 140,
                "column": 39,
                "index": 2650
            },
            "line": 140,
            "code": "  it('allows PX or PX values scalePx2dp', () => {\n    expect(transform(`\n      .test {\n        top: 10Px;\n        left:10px;\n        margin: 10Px 30px;\n      }\n    `)).toEqual({\n      test: {\n        left: 'scalePx2dp(10)',\n        marginBottom: 10,\n        marginLeft: 'scalePx2dp(30)',\n        marginRight: 'scalePx2dp(30)',\n        marginTop: 10,\n        top: 10\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows decimal values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 158,
                "column": 49,
                "index": 3048
            },
            "line": 158,
            "code": "  it('allows decimal values in transformed values', () => {\n    expect(transform(`\n      .test {\n        border-radius: 1.5px;\n      }\n    `)).toEqual({\n      test: {\n        borderRadius: 'scalePx2dp(1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows negative values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 169,
                "column": 50,
                "index": 3278
            },
            "line": 169,
            "code": "  it('allows negative values in transformed values', () => {\n    expect(transform(`\n      .test {\n        border-radius: -1.5px;\n      }\n    `)).toEqual({\n      test: {\n        borderRadius: 'scalePx2dp(-1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows percent values in transformed values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 180,
                "column": 49,
                "index": 3509
            },
            "line": 180,
            "code": "  it('allows percent values in transformed values', () => {\n    expect(transform(`\n      .test {\n        margin: 10%;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: '10%',\n        marginRight: '10%',\n        marginBottom: '10%',\n        marginLeft: '10%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows color values in transformed border-color values",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 194,
                "column": 60,
                "index": 3809
            },
            "line": 194,
            "code": "  it('allows color values in transformed border-color values', () => {\n    expect(transform(`\n      .test {\n        border-color: red\n      }\n    `)).toEqual({\n      test: {\n        borderColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows omitting units for 0",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 205,
                "column": 33,
                "index": 4005
            },
            "line": 205,
            "code": "  it('allows omitting units for 0', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 0;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 0,\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "converts to camel-case",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 219,
                "column": 28,
                "index": 4290
            },
            "line": 219,
            "code": "  it('converts to camel-case', () => {\n    expect(transform(`\n      .test {\n        background-color: red;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms shadow offsets",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 230,
                "column": 31,
                "index": 4493
            },
            "line": 230,
            "code": "  it('transforms shadow offsets', () => {\n    expect(transform(`\n      .test {\n        shadow-offset: 10px 5px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          height: 'scalePx2dp(5)',\n          width: 'scalePx2dp(10)'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text shadow offsets",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 244,
                "column": 36,
                "index": 4775
            },
            "line": 244,
            "code": "  it('transforms text shadow offsets', () => {\n    expect(transform(`\n      .test {\n        text-shadow-offset: 10px 5px;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          height: 'scalePx2dp(5)',\n          width: 'scalePx2dp(10)'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a block of css",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 258,
                "column": 31,
                "index": 5061
            },
            "line": 258,
            "code": "  it('transforms a block of css', () => {\n    expect(transform(`\n    .description {\n      margin-bottom: 20px;\n      font-size: 18px;\n      text-align: center;\n      color: #656656;\n      box-shadow: 10px 20px 30px #fff;\n    }\n\n    .container {\n      padding: 30px;\n      margin-top: 65px;\n      align-items: center;\n      border: 2px dashed #f00;\n    }\n  `)).toEqual({\n      description: {\n        fontSize: 'scalePx2dp(18)',\n        marginBottom: 'scalePx2dp(20)',\n        textAlign: 'center',\n        color: '#656656',\n        shadowColor: '#fff',\n        shadowOffset: {\n          height: 'scalePx2dp(20)',\n          width: 'scalePx2dp(10)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowOpacity: 1\n      },\n      container: {\n        paddingBottom: 'scalePx2dp(30)',\n        paddingLeft: 'scalePx2dp(30)',\n        paddingRight: 'scalePx2dp(30)',\n        paddingTop: 'scalePx2dp(30)',\n        marginTop: 'scalePx2dp(65)',\n        alignItems: 'center',\n        borderColor: '#f00',\n        borderStyle: 'dashed',\n        borderWidth: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "throws useful errors",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 301,
                "column": 26,
                "index": 6149
            },
            "line": 301,
            "code": "  it('throws useful errors', () => {\n    expect(() => {\n      transform(`\n      .test {\n        margin: 10;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"margin: 10\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "when there are selectors with the same name, merges the common props",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 310,
                "column": 74,
                "index": 6392
            },
            "line": 310,
            "code": "  it('when there are selectors with the same name, merges the common props', () => {\n    expect(transform(`\n      .test {\n        margin: 10px;\n        background-color: #f00;\n      }\n      .test {\n        padding: 10px;\n        font-size: 20px;\n        margin: 5px;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: '#f00',\n        fontSize: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(5)',\n        marginLeft: 'scalePx2dp(5)',\n        marginRight: 'scalePx2dp(5)',\n        marginTop: 'scalePx2dp(5)',\n        paddingBottom: 'scalePx2dp(10)',\n        paddingLeft: 'scalePx2dp(10)',\n        paddingRight: 'scalePx2dp(10)',\n        paddingTop: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports group of selectors",
            "suites": [
                "misc"
            ],
            "updatePoint": {
                "line": 336,
                "column": 33,
                "index": 7056
            },
            "line": 336,
            "code": "  it('supports group of selectors', () => {\n    expect(transform(`\n      .test1, .test2 {\n        color: red;\n      }\n    `)).toEqual({\n      test1: {\n        color: 'red'\n      },\n      test2: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports dash in class names",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 352,
                "column": 34,
                "index": 7330
            },
            "line": 352,
            "code": "  it('supports dash in class names', () => {\n    expect(transform(`\n      .test-1-2 {\n        color: red;\n      }\n    `)).toEqual({\n      'test-1-2': {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports underscore in class names",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 363,
                "column": 40,
                "index": 7531
            },
            "line": 363,
            "code": "  it('supports underscore in class names', () => {\n    expect(transform(`\n      .test_1 {\n        color: red;\n      }\n    `)).toEqual({\n      test_1: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports grouping selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 374,
                "column": 33,
                "index": 7719
            },
            "line": 374,
            "code": "  it('supports grouping selectors', () => {\n    expect(transform(`\n      .test, .test2, .test3 {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      },\n      test2: {\n        color: 'red'\n      },\n      test3: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores grouping of ID selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 391,
                "column": 38,
                "index": 8014
            },
            "line": 391,
            "code": "  it('ignores grouping of ID selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      #test1, #test2, #test3 {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores grouping of element selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 405,
                "column": 43,
                "index": 8267
            },
            "line": 405,
            "code": "  it('ignores grouping of element selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p, h1, input {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores ID selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 419,
                "column": 26,
                "index": 8493
            },
            "line": 419,
            "code": "  it('ignores ID selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      #foo {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores type selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 433,
                "column": 28,
                "index": 8714
            },
            "line": 433,
            "code": "  it('ignores type selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      input[type=text] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      [class^=\"test\"] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo[class^=\"test\"] {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores universal selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 471,
                "column": 33,
                "index": 9330
            },
            "line": 471,
            "code": "  it('ignores universal selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      * {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores descendant selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 485,
                "column": 34,
                "index": 9554
            },
            "line": 485,
            "code": "  it('ignores descendant selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores direct child selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 499,
                "column": 36,
                "index": 9788
            },
            "line": 499,
            "code": "  it('ignores direct child selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo > .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores adjancent sibling selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 513,
                "column": 41,
                "index": 10029
            },
            "line": 513,
            "code": "  it('ignores adjancent sibling selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo + .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores general sibling selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 527,
                "column": 39,
                "index": 10268
            },
            "line": 527,
            "code": "  it('ignores general sibling selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .foo ~ .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores qualified selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 541,
                "column": 33,
                "index": 10501
            },
            "line": 541,
            "code": "  it('ignores qualified selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p.bar {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores element selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 555,
                "column": 31,
                "index": 10726
            },
            "line": 555,
            "code": "  it('ignores element selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      p {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignores pseudo selectors",
            "suites": [
                "selectors"
            ],
            "updatePoint": {
                "line": 569,
                "column": 30,
                "index": 10946
            },
            "line": 569,
            "code": "  it('ignores pseudo selectors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n      .test1:hover {\n        color: blue;\n      }\n      .test2::before {\n        color: blue;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms named colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 588,
                "column": 29,
                "index": 11259
            },
            "line": 588,
            "code": "  it('transforms named colors', () => {\n    expect(transform(`\n      .test {\n        color: red;\n      }\n    `)).toEqual({\n      test: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms hex colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 599,
                "column": 27,
                "index": 11437
            },
            "line": 599,
            "code": "  it('transforms hex colors', () => {\n    expect(transform(`\n      .test {\n        color: #f00;\n      }\n    `)).toEqual({\n      test: {\n        color: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms rgb colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 610,
                "column": 27,
                "index": 11617
            },
            "line": 610,
            "code": "  it('transforms rgb colors', () => {\n    expect(transform(`\n      .test {\n        color: rgb(255, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        color: 'rgb(255, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms rgba colors",
            "suites": [
                "colors"
            ],
            "updatePoint": {
                "line": 621,
                "column": 28,
                "index": 11818
            },
            "line": 621,
            "code": "  it('transforms rgba colors', () => {\n    expect(transform(`\n      .test {\n        color: rgba(255, 0, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        color: 'rgba(255, 0, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a single transform value with number",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 634,
                "column": 53,
                "index": 12086
            },
            "line": 634,
            "code": "  it('transforms a single transform value with number', () => {\n    expect(transform(`\n      .test {\n        transform: scaleX(5);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          scaleX: 5\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms a single transform value with string",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 647,
                "column": 53,
                "index": 12332
            },
            "line": 647,
            "code": "  it('transforms a single transform value with string', () => {\n    expect(transform(`\n      .test {\n        transform: rotate(5deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          rotate: '5deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms multiple transform values",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 660,
                "column": 42,
                "index": 12575
            },
            "line": 660,
            "code": "  it('transforms multiple transform values', () => {\n    expect(transform(`\n      .test {\n        transform: scaleX(5) skewX(1deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewX: '1deg'\n        }, {\n          scaleX: 5\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms scale(number, number) to scaleX and scaleY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 675,
                "column": 59,
                "index": 12876
            },
            "line": 675,
            "code": "  it('transforms scale(number, number) to scaleX and scaleY', () => {\n    expect(transform(`\n      .test {\n        transform: scale(2, 3);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          scaleY: 3\n        }, {\n          scaleX: 2\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms translate(length, length) to translateX and translateY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 690,
                "column": 71,
                "index": 13175
            },
            "line": 690,
            "code": "  it('transforms translate(length, length) to translateX and translateY', () => {\n    expect(transform(`\n      .test {\n        transform: translate(2px, 3px);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          translateY: 'scalePx2dp(3)'\n        }, {\n          translateX: 'scalePx2dp(2)'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms translate(length) to translateX and translateY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 705,
                "column": 63,
                "index": 13510
            },
            "line": 705,
            "code": "  it('transforms translate(length) to translateX and translateY', () => {\n    expect(transform(`\n      .test {\n        transform: translate(5px);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          translateY: 0\n        }, {\n          translateX: 'scalePx2dp(5)'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms skew(angle, angle) to skewX and skewY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 720,
                "column": 54,
                "index": 13817
            },
            "line": 720,
            "code": "  it('transforms skew(angle, angle) to skewX and skewY', () => {\n    expect(transform(`\n      .test {\n        transform: skew(2deg, 3deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewY: '3deg'\n        }, {\n          skewX: '2deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms skew(angle) to skewX and skewY",
            "suites": [
                "transform"
            ],
            "updatePoint": {
                "line": 735,
                "column": 47,
                "index": 14105
            },
            "line": 735,
            "code": "  it('transforms skew(angle) to skewX and skewY', () => {\n    expect(transform(`\n      .test {\n        transform: skew(5deg);\n      }\n    `)).toEqual({\n      test: {\n        transform: [{\n          skewY: '0deg'\n        }, {\n          skewX: '5deg'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 752,
                "column": 33,
                "index": 14404
            },
            "line": 752,
            "code": "  it('transforms border shorthand', () => {\n    expect(transform(`\n      .test {\n        border: 2px dashed #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand in other order",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 765,
                "column": 48,
                "index": 14692
            },
            "line": 765,
            "code": "  it('transforms border shorthand in other order', () => {\n    expect(transform(`\n      .test {\n        border: #f00 2px dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 778,
                "column": 47,
                "index": 14979
            },
            "line": 778,
            "code": "  it('transforms border shorthand missing color', () => {\n    expect(transform(`\n      .test {\n        border: 2px dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: 'black',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing style",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 791,
                "column": 47,
                "index": 15262
            },
            "line": 791,
            "code": "  it('transforms border shorthand missing style', () => {\n    expect(transform(`\n      .test {\n        border: 2px #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: '#f00',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 804,
                "column": 47,
                "index": 15541
            },
            "line": 804,
            "code": "  it('transforms border shorthand missing width', () => {\n    expect(transform(`\n      .test {\n        border: #f00 dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: '#f00',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color & width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 817,
                "column": 55,
                "index": 15818
            },
            "line": 817,
            "code": "  it('transforms border shorthand missing color & width', () => {\n    expect(transform(`\n      .test {\n        border: dashed;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'dashed'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing style & width",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 830,
                "column": 55,
                "index": 16091
            },
            "line": 830,
            "code": "  it('transforms border shorthand missing style & width', () => {\n    expect(transform(`\n      .test {\n        border: #f00;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 1,\n        borderColor: '#f00',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border shorthand missing color & style",
            "suites": [
                "border"
            ],
            "updatePoint": {
                "line": 843,
                "column": 55,
                "index": 16360
            },
            "line": 843,
            "code": "  it('transforms border shorthand missing color & style', () => {\n    expect(transform(`\n      .test {\n        border: 2px;\n      }\n    `)).toEqual({\n      test: {\n        borderWidth: 'scalePx2dp(2)',\n        borderColor: 'black',\n        borderStyle: 'solid'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-radius",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 857,
                "column": 32,
                "index": 16696
            },
            "line": 857,
            "code": "    it('transforms border-radius', () => {\n      expect(transform(`\n        .test {\n          border-radius: 6px;\n        }\n      `)).toEqual({\n        test: {\n          borderRadius: 'scalePx2dp(6)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-radius with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 868,
                "column": 53,
                "index": 16945
            },
            "line": 868,
            "code": "    it('transforms border-radius with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-radius: 10px 5%;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: '5%',\n          borderBottomRightRadius: 'scalePx2dp(10)',\n          borderTopLeftRadius: 'scalePx2dp(10)',\n          borderTopRightRadius: '5%'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-radius: 2px 4px 2px;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: 'scalePx2dp(4)',\n          borderBottomRightRadius: 'scalePx2dp(2)',\n          borderTopLeftRadius: 'scalePx2dp(2)',\n          borderTopRightRadius: 'scalePx2dp(4)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-radius: 1px 0 3px 4px;\n        }\n      `)).toEqual({\n        test: {\n          borderBottomLeftRadius: 'scalePx2dp(4)',\n          borderBottomRightRadius: 'scalePx2dp(3)',\n          borderTopLeftRadius: 'scalePx2dp(1)',\n          borderTopRightRadius: 0\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-color",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 906,
                "column": 31,
                "index": 17991
            },
            "line": 906,
            "code": "    it('transforms border-color', () => {\n      expect(transform(`\n        .test {\n          border-color: #fff;\n        }\n      `)).toEqual({\n        test: {\n          borderColor: '#fff'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-color with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 917,
                "column": 52,
                "index": 18229
            },
            "line": 917,
            "code": "    it('transforms border-color with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-color: red #f015ca;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: '#f015ca',\n          borderBottomColor: 'red',\n          borderLeftColor: '#f015ca'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-color: red yellow green;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: 'yellow',\n          borderBottomColor: 'green',\n          borderLeftColor: 'yellow'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-color: red yellow green blue;\n        }\n      `)).toEqual({\n        test: {\n          borderTopColor: 'red',\n          borderRightColor: 'yellow',\n          borderBottomColor: 'green',\n          borderLeftColor: 'blue'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform border-color with rgb(a) property",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 955,
                "column": 58,
                "index": 19186
            },
            "line": 955,
            "code": "    it('should transform border-color with rgb(a) property', () => {\n      expect(transform(`\n        .top {\n          border-color: rgba(65, 131, 196, 0.2);\n        }\n        .right {\n          border-color: RGBA(40, 42, 54, 75%);\n        }\n        .bottom {\n          border-color: rgba(65, 131, 196, 20%) yellow RGBA(40, 42, 54, .75);\n        }\n        .left {\n          border-color: rgb(65, 131, 196);\n        }\n      `, {\n        scalable: false\n      })).toEqual({\n        top: {\n          borderColor: 'rgba(65, 131, 196, 0.2)'\n        },\n        right: {\n          borderColor: 'RGBA(40, 42, 54, 75%)'\n        },\n        bottom: {\n          borderTopColor: 'rgba(65, 131, 196, 20%)',\n          borderLeftColor: 'yellow',\n          borderRightColor: 'yellow',\n          borderBottomColor: 'RGBA(40, 42, 54, .75)'\n        },\n        left: {\n          borderColor: 'rgb(65, 131, 196)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-width",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 989,
                "column": 31,
                "index": 20078
            },
            "line": 989,
            "code": "    it('transforms border-width', () => {\n      expect(transform(`\n        .test {\n          border-width: 4px;\n        }\n      `)).toEqual({\n        test: {\n          borderWidth: 'scalePx2dp(4)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-width with multiple values",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 1000,
                "column": 52,
                "index": 20324
            },
            "line": 1000,
            "code": "    it('transforms border-width with multiple values', () => {\n      expect(transform(`\n        .test {\n          border-width: 2px 1.5rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(2)',\n          borderRightWidth: 'scalePx2dp(24)',\n          borderBottomWidth: 'scalePx2dp(2)',\n          borderLeftWidth: 'scalePx2dp(24)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-width: 1px 2rem 1.5rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(1)',\n          borderRightWidth: 'scalePx2dp(32)',\n          borderBottomWidth: 'scalePx2dp(24)',\n          borderLeftWidth: 'scalePx2dp(32)'\n        }\n      });\n      expect(transform(`\n        .test {\n          border-width: 1px 2rem 0 4rem;\n        }\n      `)).toEqual({\n        test: {\n          borderTopWidth: 'scalePx2dp(1)',\n          borderRightWidth: 'scalePx2dp(32)',\n          borderBottomWidth: 0,\n          borderLeftWidth: 'scalePx2dp(64)'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms border-style",
            "suites": [
                "border",
                "shorthand border properties related to Image elements"
            ],
            "updatePoint": {
                "line": 1038,
                "column": 31,
                "index": 21337
            },
            "line": 1038,
            "code": "    it('transforms border-style', () => {\n      expect(transform(`\n        .test {\n          border-style: solid;\n        }\n      `)).toEqual({\n        test: {\n          borderStyle: 'solid'\n        }\n      });\n    });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font weights as strings",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1052,
                "column": 40,
                "index": 21600
            },
            "line": 1052,
            "code": "  it('transforms font weights as strings', () => {\n    expect(transform(`\n      .test {\n        font-weight: 400\n      }\n    `)).toEqual({\n      test: {\n        fontWeight: '400'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font variant as an array",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1063,
                "column": 41,
                "index": 21802
            },
            "line": 1063,
            "code": "  it('transforms font variant as an array', () => {\n    expect(transform(`\n      .test {\n        font-variant: tabular-nums;\n      }\n    `)).toEqual({\n      test: {\n        fontVariant: ['tabular-nums']\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1076,
                "column": 46,
                "index": 22067
            },
            "line": 1076,
            "code": "  it('transforms background to backgroundColor', () => {\n    expect(transform(`\n      .test {\n        background: #f00;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor with rgb",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1087,
                "column": 55,
                "index": 22290
            },
            "line": 1087,
            "code": "  it('transforms background to backgroundColor with rgb', () => {\n    expect(transform(`\n      .test {\n        background: rgb(255, 0, 0);\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'rgb(255, 0, 0)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms background to backgroundColor with named colour",
            "suites": [
                "background"
            ],
            "updatePoint": {
                "line": 1098,
                "column": 64,
                "index": 22542
            },
            "line": 1098,
            "code": "  it('transforms background to backgroundColor with named colour', () => {\n    expect(transform(`\n      .test {\n        background: red;\n      }\n    `)).toEqual({\n      test: {\n        backgroundColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with value and unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1111,
                "column": 48,
                "index": 22792
            },
            "line": 1111,
            "code": "  it('transforms line-height with value and unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 1.5px;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: 'scalePx2dp(1.5)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with rem unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1122,
                "column": 42,
                "index": 23010
            },
            "line": 1122,
            "code": "  it('transforms line-height with rem unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2rem;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: 'scalePx2dp(32)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with %",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1133,
                "column": 35,
                "index": 23219
            },
            "line": 1133,
            "code": "  it('transforms line-height with %', () => {\n    expect(transform(`\n      .test {\n        line-height: 150%;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: '150%'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with pt unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1144,
                "column": 41,
                "index": 23424
            },
            "line": 1144,
            "code": "  it('transforms line-height with pt unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2pt;\n      }\n    `)).toEqual({\n      test: {\n        lineHeight: '2pt'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms line-height with viewport unit",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1155,
                "column": 47,
                "index": 23633
            },
            "line": 1155,
            "code": "  it('transforms line-height with viewport unit', () => {\n    expect(transform(`\n      .test {\n        line-height: 2vh;\n      }\n    `)).toEqual({\n      __viewportUnits: true,\n      test: {\n        lineHeight: \"scaleVu2dp(2, 'vh')\"\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "ignore line-height value with a multiplier",
            "suites": [
                "line-height"
            ],
            "updatePoint": {
                "line": 1167,
                "column": 48,
                "index": 23888
            },
            "line": 1167,
            "code": "  it('ignore line-height value with a multiplier', () => {\n    expect(transform(`\n      .test {\n        line-height: 1.5;\n      }\n    `)).toEqual({\n      test: {}\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 4 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1178,
                "column": 49,
                "index": 24097
            },
            "line": 1178,
            "code": "  it('transforms margin shorthands using 4 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px 30px 40px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(30)',\n        marginLeft: 'scalePx2dp(40)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 3 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1192,
                "column": 49,
                "index": 24446
            },
            "line": 1192,
            "code": "  it('transforms margin shorthands using 3 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px 30px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(30)',\n        marginLeft: 'scalePx2dp(20)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 2 values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1206,
                "column": 49,
                "index": 24790
            },
            "line": 1206,
            "code": "  it('transforms margin shorthands using 2 values', () => {\n    expect(transform(`\n      .test {\n        margin: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(20)',\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 'scalePx2dp(20)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthands using 1 value",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1220,
                "column": 48,
                "index": 25128
            },
            "line": 1220,
            "code": "  it('transforms margin shorthands using 1 value', () => {\n    expect(transform(`\n      .test {\n        margin: 10px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'scalePx2dp(10)',\n        marginBottom: 'scalePx2dp(10)',\n        marginLeft: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "shorthand with 1 value should override previous values",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1234,
                "column": 60,
                "index": 25473
            },
            "line": 1234,
            "code": "  it('shorthand with 1 value should override previous values', () => {\n    expect(transform(`\n      .test {\n        margin-top: 2px;\n        margin: 1px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(1)',\n        marginRight: 'scalePx2dp(1)',\n        marginBottom: 'scalePx2dp(1)',\n        marginLeft: 'scalePx2dp(1)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms margin shorthand with auto",
            "suites": [
                "margin"
            ],
            "updatePoint": {
                "line": 1249,
                "column": 43,
                "index": 25821
            },
            "line": 1249,
            "code": "  it('transforms margin shorthand with auto', () => {\n    expect(transform(`\n      .test {\n        margin: auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'auto',\n        marginRight: 'auto',\n        marginBottom: 'auto',\n        marginLeft: 'auto'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 0 auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 0,\n        marginRight: 'auto',\n        marginBottom: 0,\n        marginLeft: 'auto'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: auto 0;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'auto',\n        marginRight: 0,\n        marginBottom: 'auto',\n        marginLeft: 0\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 2px 3px auto;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(2)',\n        marginRight: 'scalePx2dp(3)',\n        marginBottom: 'auto',\n        marginLeft: 'scalePx2dp(3)'\n      }\n    });\n    expect(transform(`\n      .test {\n        margin: 10px auto 4px;\n      }\n    `)).toEqual({\n      test: {\n        marginTop: 'scalePx2dp(10)',\n        marginRight: 'auto',\n        marginBottom: 'scalePx2dp(4)',\n        marginLeft: 'auto'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration into text-decoration- properties",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1313,
                "column": 65,
                "index": 27130
            },
            "line": 1313,
            "code": "  it('transforms text-decoration into text-decoration- properties', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline dotted red;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without color",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1326,
                "column": 46,
                "index": 27448
            },
            "line": 1326,
            "code": "  it('transforms text-decoration without color', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline dotted;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'dotted',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without style",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1339,
                "column": 46,
                "index": 27764
            },
            "line": 1339,
            "code": "  it('transforms text-decoration without style', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline red;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration without style and color",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1352,
                "column": 56,
                "index": 28084
            },
            "line": 1352,
            "code": "  it('transforms text-decoration without style and color', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with two line properties",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1365,
                "column": 57,
                "index": 28405
            },
            "line": 1365,
            "code": "  it('transforms text-decoration with two line properties', () => {\n    expect(transform(`\n      .test {\n        text-decoration: underline line-through dashed red;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration in different order",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1378,
                "column": 51,
                "index": 28756
            },
            "line": 1378,
            "code": "  it('transforms text-decoration in different order', () => {\n    expect(transform(`\n      .test {\n        text-decoration: dashed red underline line-through;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'dashed',\n        textDecorationColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with ine in different order",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1391,
                "column": 60,
                "index": 29114
            },
            "line": 1391,
            "code": "  it('transforms text-decoration with ine in different order', () => {\n    expect(transform(`\n      .test {\n        text-decoration: line-through underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1404,
                "column": 42,
                "index": 29446
            },
            "line": 1404,
            "code": "  it('transforms text-decoration with none', () => {\n    expect(transform(`\n      .test {\n        text-decoration: none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none as part of multiple terms",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1417,
                "column": 68,
                "index": 29768
            },
            "line": 1417,
            "code": "  it('transforms text-decoration with none as part of multiple terms', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with none in capitals",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1430,
                "column": 54,
                "index": 30084
            },
            "line": 1430,
            "code": "  it('transforms text-decoration with none in capitals', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow NONE;\n      }\n    `)).toEqual({\n      test: {\n        textDecorationLine: 'none',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration with style in capitals",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1443,
                "column": 55,
                "index": 30399
            },
            "line": 1443,
            "code": "  it('transforms text-decoration with style in capitals', () => {\n    expect(transform(`\n      .test {\n        text-decoration: yellow UNDERLINE LINE-THROUGH;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through',\n        textDecorationStyle: 'solid',\n        textDecorationColor: 'yellow'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform text-decoration if multiple colors are used",
            "suites": [
                "text-decoration"
            ],
            "updatePoint": {
                "line": 1456,
                "column": 68,
                "index": 30765
            },
            "line": 1456,
            "code": "  it('does not transform text-decoration if multiple colors are used', () => {\n    expect(() => transform(`\n      .test {\n        text-decoration: underline red yellow;\n      }\n      `)).toThrow('Failed to parse declaration \"textDecoration: underline red yellow\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with underline line-through",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1465,
                "column": 65,
                "index": 31079
            },
            "line": 1465,
            "code": "  it('transforms text-decoration-line with underline line-through', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: underline line-through;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with line-through underline",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1476,
                "column": 65,
                "index": 31363
            },
            "line": 1476,
            "code": "  it('transforms text-decoration-line with line-through underline', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: line-through underline;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'underline line-through'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms text-decoration-line with none",
            "suites": [
                "text-decoration-line"
            ],
            "updatePoint": {
                "line": 1487,
                "column": 47,
                "index": 31629
            },
            "line": 1487,
            "code": "  it('transforms text-decoration-line with none', () => {\n    expect(transform(`\n      .test {\n        text-decoration-line: none;\n      }\n      `)).toEqual({\n      test: {\n        textDecorationLine: 'none'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 3 values",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1500,
                "column": 45,
                "index": 31890
            },
            "line": 1500,
            "code": "  it('transforms flex shorthand with 3 values', () => {\n    expect(transform(`\n      .test {\n        flex: 1 2 3px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 'scalePx2dp(3)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 3 values in reverse order",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1513,
                "column": 62,
                "index": 32164
            },
            "line": 1513,
            "code": "  it('transforms flex shorthand with 3 values in reverse order', () => {\n    expect(transform(`\n      .test {\n        flex: 3px 1 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 'scalePx2dp(3)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-shrink",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1526,
                "column": 74,
                "index": 32450
            },
            "line": 1526,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-shrink', () => {\n    expect(transform(`\n      .test {\n        flex: 1 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 2,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1539,
                "column": 73,
                "index": 32717
            },
            "line": 1539,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-basis', () => {\n    expect(transform(`\n      .test {\n        flex: 2 2px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 2 values of flex-grow and flex-basis (reversed)",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1552,
                "column": 84,
                "index": 33011
            },
            "line": 1552,
            "code": "  it('transforms flex shorthand with 2 values of flex-grow and flex-basis (reversed)', () => {\n    expect(transform(`\n      .test {\n        flex: 2px 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(2)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 1 value of flex-grow",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1565,
                "column": 57,
                "index": 33278
            },
            "line": 1565,
            "code": "  it('transforms flex shorthand with 1 value of flex-grow', () => {\n    expect(transform(`\n      .test {\n        flex: 2;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 2,\n        flexShrink: 1,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with 1 value of flex-basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1578,
                "column": 58,
                "index": 33528
            },
            "line": 1578,
            "code": "  it('transforms flex shorthand with 1 value of flex-basis', () => {\n    expect(transform(`\n      .test {\n        flex: 10px;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'scalePx2dp(10)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-grow/shrink taking priority over basis",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1597,
                "column": 80,
                "index": 34096
            },
            "line": 1597,
            "code": "  it('transforms flex shorthand with flex-grow/shrink taking priority over basis', () => {\n    expect(transform(`\n      .test {\n        flex: 0 1 0;\n      }\n    `)).toEqual({\n      test: {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-basis set to auto",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1610,
                "column": 59,
                "index": 34351
            },
            "line": 1610,
            "code": "  it('transforms flex shorthand with flex-basis set to auto', () => {\n    expect(transform(`\n      .test {\n        flex: 0 1 auto;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex shorthand with flex-basis set to auto appearing first",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1623,
                "column": 75,
                "index": 34630
            },
            "line": 1623,
            "code": "  it('transforms flex shorthand with flex-basis set to auto appearing first', () => {\n    expect(transform(`\n      .test {\n        flex: auto 0 1;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex auto keyword",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1636,
                "column": 34,
                "index": 34868
            },
            "line": 1636,
            "code": "  it('transforms flex auto keyword', () => {\n    expect(transform(`\n      .test {\n        flex: auto;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 1,\n        flexShrink: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flex none keyword",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1649,
                "column": 34,
                "index": 35102
            },
            "line": 1649,
            "code": "  it('transforms flex none keyword', () => {\n    expect(transform(`\n      .test {\n        flex: none;\n      }\n    `)).toEqual({\n      test: {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand with two values",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1662,
                "column": 51,
                "index": 35353
            },
            "line": 1662,
            "code": "  it('transforms flexFlow shorthand with two values', () => {\n    expect(transform(`\n      .test {\n        flex-flow: column wrap;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'column',\n        flexWrap: 'wrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand missing flexDirection",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1674,
                "column": 57,
                "index": 35610
            },
            "line": 1674,
            "code": "  it('transforms flexFlow shorthand missing flexDirection', () => {\n    expect(transform(`\n      .test {\n        flex-flow: wrap;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'row',\n        flexWrap: 'wrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms flexFlow shorthand missing flexWrap",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1686,
                "column": 52,
                "index": 35852
            },
            "line": 1686,
            "code": "  it('transforms flexFlow shorthand missing flexWrap', () => {\n    expect(transform(`\n      .test {\n        flex-flow: column;\n      }\n    `)).toEqual({\n      test: {\n        flexDirection: 'column',\n        flexWrap: 'nowrap'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform invalid flex'",
            "suites": [
                "flex-box"
            ],
            "updatePoint": {
                "line": 1698,
                "column": 38,
                "index": 36087
            },
            "line": 1698,
            "code": "  it(\"does not transform invalid flex'\", () => {\n    expect(() => {\n      transform(`\n      .test {\n        flex: 1 2px 3;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"flex: 1 2px 3\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1709,
                "column": 21,
                "index": 36312
            },
            "line": 1709,
            "code": "  it('transforms font', () => {\n    expect(transform(`\n      .test {\n        font: bold italic small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-variant",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1725,
                "column": 42,
                "index": 36724
            },
            "line": 1725,
            "code": "  it('transforms font missing font-variant', () => {\n    expect(transform(`\n      .test {\n        font: bold italic 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-style",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1741,
                "column": 40,
                "index": 37111
            },
            "line": 1741,
            "code": "  it('transforms font missing font-style', () => {\n    expect(transform(`\n      .test {\n        font: bold small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font missing font-weight",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1757,
                "column": 41,
                "index": 37515
            },
            "line": 1757,
            "code": "  it('transforms font missing font-weight', () => {\n    expect(transform(`\n      .test {\n        font: italic small-caps 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with font-weight normal",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1773,
                "column": 45,
                "index": 37927
            },
            "line": 1773,
            "code": "  it('transforms font with font-weight normal', () => {\n    expect(transform(`\n      .test {\n        font: normal 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with font-weight and font-style normal",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1789,
                "column": 60,
                "index": 38331
            },
            "line": 1789,
            "code": "  it('transforms font with font-weight and font-style normal', () => {\n    expect(transform(`\n      .test {\n        font: normal normal 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font with no font-weight, font-style, and font-variant",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1805,
                "column": 71,
                "index": 38753
            },
            "line": 1805,
            "code": "  it('transforms font with no font-weight, font-style, and font-variant', () => {\n    expect(transform(`\n      .test {\n        font: 16px/18px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "omits line height if not specified",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1821,
                "column": 40,
                "index": 39130
            },
            "line": 1821,
            "code": "  it('omits line height if not specified', () => {\n    expect(transform(`\n      .test {\n        font: 16px \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: []\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "allows line height as multiple",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1836,
                "column": 36,
                "index": 39460
            },
            "line": 1836,
            "code": "  it('allows line height as multiple', () => {\n    expect(transform(`\n      .test {\n        font: 16px/1.5 \"Helvetica\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n        fontVariant: [],\n        lineHeight: 24\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font without quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1852,
                "column": 36,
                "index": 39818
            },
            "line": 1852,
            "code": "  it('transforms font without quotes', () => {\n    expect(transform(`\n      .test {\n        font: bold italic small-caps 16px/18px Helvetica Neue;\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue',\n        fontSize: 'scalePx2dp(16)',\n        fontWeight: 'bold',\n        fontStyle: 'italic',\n        fontVariant: ['small-caps'],\n        lineHeight: 'scalePx2dp(18)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with double quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1868,
                "column": 47,
                "index": 40243
            },
            "line": 1868,
            "code": "  it('transforms font-family with double quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: \"Helvetica Neue\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with single quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1879,
                "column": 47,
                "index": 40476
            },
            "line": 1879,
            "code": "  it('transforms font-family with single quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: 'Helvetica Neue';\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family without quotes",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1890,
                "column": 43,
                "index": 40705
            },
            "line": 1890,
            "code": "  it('transforms font-family without quotes', () => {\n    expect(transform(`\n      .test {\n        font-family: Helvetica Neue;\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Helvetica Neue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with otherwise invalid values",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1901,
                "column": 70,
                "index": 40959
            },
            "line": 1901,
            "code": "  it('transforms font-family with quotes with otherwise invalid values', () => {\n    expect(transform(`\n      .test {\n        font-family: \"Goudy Bookletter 1911\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'Goudy Bookletter 1911'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with escaped values",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1912,
                "column": 60,
                "index": 41219
            },
            "line": 1912,
            "code": "  it('transforms font-family with quotes with escaped values', () => {\n    expect(transform(`\n      .test {\n        font-family: \"test\\\\A test\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'test\\ntest'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms font-family with quotes with escaped quote",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1923,
                "column": 59,
                "index": 41458
            },
            "line": 1923,
            "code": "  it('transforms font-family with quotes with escaped quote', () => {\n    expect(transform(`\n      .test {\n        font-family: \"test\\\\\"test\";\n      }\n    `)).toEqual({\n      test: {\n        fontFamily: 'test\"test'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform invalid unquoted font-family",
            "suites": [
                "font"
            ],
            "updatePoint": {
                "line": 1934,
                "column": 53,
                "index": 41689
            },
            "line": 1934,
            "code": "  it('does not transform invalid unquoted font-family', () => {\n    expect(() => {\n      transform(`\n      .test {\n        font-family: Goudy Bookletter 1911;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"fontFamily: Goudy Bookletter 1911\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow into shadow- properties",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1945,
                "column": 51,
                "index": 41991
            },
            "line": 1945,
            "code": "  it('transforms box-shadow into shadow- properties', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px #f00;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px 30px #f00;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports rgb values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 1992,
                "column": 25,
                "index": 43035
            },
            "line": 1992,
            "code": "  it('supports rgb values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px rgb(100, 100, 100);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'rgb(100, 100, 100)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports rgba values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2009,
                "column": 26,
                "index": 43439
            },
            "line": 2009,
            "code": "  it('supports rgba values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px rgba(100, 100, 100, 0.5);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'rgba(100, 100, 100, 0.5)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports box-shadow with hsl color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2026,
                "column": 40,
                "index": 43869
            },
            "line": 2026,
            "code": "  it('supports box-shadow with hsl color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px hsl(120, 100%, 50%);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'hsl(120, 100%, 50%)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "supports box-shadow with hsla color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2043,
                "column": 41,
                "index": 44290
            },
            "line": 2043,
            "code": "  it('supports box-shadow with hsla color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px hsla(120, 100%, 50%, 0.7);\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'hsla(120, 100%, 50%, 0.7)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "trims values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2060,
                "column": 18,
                "index": 44700
            },
            "line": 2060,
            "code": "  it('trims values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px   20px   30px   #f00 ;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: '#f00',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow with 0 values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2077,
                "column": 41,
                "index": 45098
            },
            "line": 2077,
            "code": "  it('transforms box-shadow with 0 values', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 0 0 1px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 0,\n          height: 0\n        },\n        shadowRadius: 'scalePx2dp(1)',\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 0 0 0 red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 0,\n          height: 0\n        },\n        shadowRadius: 0,\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n    expect(transform(`\n      .test {\n        box-shadow: 1px 1px 0 #00f;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(1)',\n          height: 'scalePx2dp(1)'\n        },\n        shadowRadius: 0,\n        shadowColor: '#00f',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without blur-radius",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2124,
                "column": 47,
                "index": 46043
            },
            "line": 2124,
            "code": "  it('transforms box-shadow without blur-radius', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px red;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 0,\n        shadowColor: 'red',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2141,
                "column": 41,
                "index": 46412
            },
            "line": 2141,
            "code": "  it('transforms box-shadow without color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px 30px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 'scalePx2dp(30)',\n        shadowColor: 'black',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow without blur-radius, color",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2158,
                "column": 54,
                "index": 46812
            },
            "line": 2158,
            "code": "  it('transforms box-shadow without blur-radius, color', () => {\n    expect(transform(`\n      .test {\n        box-shadow: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        shadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        shadowRadius: 0,\n        shadowColor: 'black',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow enforces offset to be present",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2175,
                "column": 57,
                "index": 47195
            },
            "line": 2175,
            "code": "  it('transforms box-shadow enforces offset to be present', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: red;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: red\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and throws if multiple colors are used",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2184,
                "column": 66,
                "index": 47439
            },
            "line": 2184,
            "code": "  it('transforms box-shadow and throws if multiple colors are used', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 0 0 0 red yellow green blue;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 0 0 0 red yellow green blue\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and enforces offset-y if offset-x present",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2193,
                "column": 69,
                "index": 47734
            },
            "line": 2193,
            "code": "  it('transforms box-shadow and enforces offset-y if offset-x present', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10px;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10px\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms box-shadow and enforces units for non 0 values",
            "suites": [
                "box-shadow"
            ],
            "updatePoint": {
                "line": 2202,
                "column": 63,
                "index": 47977
            },
            "line": 2202,
            "code": "  it('transforms box-shadow and enforces units for non 0 values', () => {\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10 20px 30px #f00;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10 20px 30px #f00\"');\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 10px 20;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 10px 20\"');\n    expect(() => {\n      transform(`\n      .test {\n        box-shadow: 20;\n      }\n    `);\n    }).toThrowError('Failed to parse declaration \"boxShadow: 20\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow with all values",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2227,
                "column": 32,
                "index": 48579
            },
            "line": 2227,
            "code": "  it('textShadow with all values', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px 30px red;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 'scalePx2dp(30)',\n        textShadowColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow omitting blur",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2243,
                "column": 30,
                "index": 48944
            },
            "line": 2243,
            "code": "  it('textShadow omitting blur', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px red;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 0,\n        textShadowColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow omitting color",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2259,
                "column": 31,
                "index": 49290
            },
            "line": 2259,
            "code": "  it('textShadow omitting color', () => {\n    expect(transform(`\n      .test {\n        text-shadow: 10px 20px;\n      }\n    `)).toEqual({\n      test: {\n        textShadowOffset: {\n          width: 'scalePx2dp(10)',\n          height: 'scalePx2dp(20)'\n        },\n        textShadowRadius: 0,\n        textShadowColor: 'black'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "textShadow enforces offset-x and offset-y",
            "suites": [
                "text-shadow"
            ],
            "updatePoint": {
                "line": 2275,
                "column": 47,
                "index": 49650
            },
            "line": 2275,
            "code": "  it('textShadow enforces offset-x and offset-y', () => {\n    expect(() => transform(`\n      .test {\n        text-shadow: red;\n      }\n      `)).toThrow('Failed to parse declaration \"textShadow: red\"');\n    expect(() => transform(`\n      .test {\n        text-shadow: 10px red;\n      }\n      `)).toThrow('Failed to parse declaration \"textShadow: 10px red\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform a single rem value",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2289,
                "column": 41,
                "index": 50041
            },
            "line": 2289,
            "code": "  it('should transform a single rem value', () => {\n    expect(transform(`\n      .test1 {\n        padding: 2rem;\n      }\n      .test2 {\n        font-size: 1rem;\n      }\n    `)).toEqual({\n      test1: {\n        paddingBottom: 'scalePx2dp(32)',\n        paddingLeft: 'scalePx2dp(32)',\n        paddingRight: 'scalePx2dp(32)',\n        paddingTop: 'scalePx2dp(32)'\n      },\n      test2: {\n        fontSize: 'scalePx2dp(16)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform multiple rem values",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2309,
                "column": 42,
                "index": 50482
            },
            "line": 2309,
            "code": "  it('should transform multiple rem values', () => {\n    expect(transform(`\n      .test1 {\n        transform: translate(1rem, 2rem);\n      }\n      .test2 {\n        box-shadow: 1rem 2rem 3rem #fff;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(32)'\n        }, {\n          translateX: 'scalePx2dp(16)'\n        }]\n      },\n      test2: {\n        shadowColor: '#fff',\n        shadowOffset: {\n          height: 'scalePx2dp(32)',\n          width: 'scalePx2dp(16)'\n        },\n        shadowRadius: 'scalePx2dp(48)',\n        shadowOpacity: 1\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support decimal values",
            "suites": [
                "rem unit"
            ],
            "updatePoint": {
                "line": 2336,
                "column": 35,
                "index": 51082
            },
            "line": 2336,
            "code": "  it('should support decimal values', () => {\n    expect(transform(`\n      .test1 {\n        transform: translate(0.9375rem, 1.625rem);\n      }\n      .test2 {\n        border-radius: 0.5625rem;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(26)'\n        }, {\n          translateX: 'scalePx2dp(15)'\n        }]\n      },\n      test2: {\n        borderRadius: 'scalePx2dp(9)'\n      }\n    });\n    expect(transform(`\n      .test1 {\n        transform: translate(.9375rem, 1.625rem);\n      }\n      .test2 {\n        border-radius: .5625rem;\n      }\n    `)).toEqual({\n      test1: {\n        transform: [{\n          translateY: 'scalePx2dp(26)'\n        }, {\n          translateX: 'scalePx2dp(15)'\n        }]\n      },\n      test2: {\n        borderRadius: 'scalePx2dp(9)'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform viewport units",
            "suites": [
                "viewport units"
            ],
            "updatePoint": {
                "line": 2378,
                "column": 37,
                "index": 51951
            },
            "line": 2378,
            "code": "  it('should transform viewport units', () => {\n    expect(transform(`\n      .test {\n        font-size: 1vw;\n        line-height: 2vh;\n        padding: 1vmax;\n        margin: 1vmin;\n      }\n    `)).toEqual({\n      __viewportUnits: true,\n      test: {\n        fontSize: \"scaleVu2dp(1, 'vw')\",\n        lineHeight: \"scaleVu2dp(2, 'vh')\",\n        marginBottom: \"scaleVu2dp(1, 'vmin')\",\n        marginLeft: \"scaleVu2dp(1, 'vmin')\",\n        marginRight: \"scaleVu2dp(1, 'vmin')\",\n        marginTop: \"scaleVu2dp(1, 'vmin')\",\n        paddingBottom: \"scaleVu2dp(1, 'vmax')\",\n        paddingLeft: \"scaleVu2dp(1, 'vmax')\",\n        paddingRight: \"scaleVu2dp(1, 'vmax')\",\n        paddingTop: \"scaleVu2dp(1, 'vmax')\"\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "transforms media queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2404,
                "column": 30,
                "index": 52706
            },
            "line": 2404,
            "code": "  it('transforms media queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "merges media queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2439,
                "column": 26,
                "index": 53484
            },
            "line": 2439,
            "code": "  it('merges media queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n        .box {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        @media (orientation: landscape) {\n          .box {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      box: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        },\n        box: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform media queries without option enabled",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2488,
                "column": 61,
                "index": 54587
            },
            "line": 2488,
            "code": "  it('does not transform media queries without option enabled', () => {\n    expect(transform(`\n      .container {\n        background-color: #f00;\n      }\n\n      @media (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n  `)).toEqual({\n      container: {\n        backgroundColor: '#f00'\n      }\n    });\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: landscape) {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: false\n    })).toEqual({\n      container: {\n        backgroundColor: '#f00'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support screen type",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2522,
                "column": 32,
                "index": 55256
            },
            "line": 2522,
            "code": "  it('should support screen type', () => {\n    expect(transform(`\n        .foo {\n          color: blue;\n        }\n        @media screen and (min-height: 50px) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n        @media screen and (min-height: 150px) and (max-height: 200px) {\n          .foo {\n            color: green;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media screen and (min-height: 50px) and (max-height: 150px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '50px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '150px'\n          }],\n          inverse: false,\n          type: 'screen'\n        }],\n        '@media screen and (min-height: 150px) and (max-height: 200px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '150px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '200px'\n          }],\n          inverse: false,\n          type: 'screen'\n        }]\n      },\n      foo: {\n        color: 'blue'\n      },\n      '@media screen and (min-height: 50px) and (max-height: 150px)': {\n        foo: {\n          color: 'red'\n        }\n      },\n      '@media screen and (min-height: 150px) and (max-height: 200px)': {\n        foo: {\n          color: 'green'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support all type",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2583,
                "column": 29,
                "index": 56781
            },
            "line": 2583,
            "code": "  it('should support all type', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n      @media all and (min-height: 50px) and (max-height: 150px) {\n        .foo {\n          color: red;\n        }\n      }\n      @media all and (min-height: 150px) and (max-height: 200px) {\n        .foo {\n          color: green;\n        }\n      }\n    `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media all and (min-height: 50px) and (max-height: 150px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '50px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '150px'\n          }],\n          inverse: false,\n          type: 'all'\n        }],\n        '@media all and (min-height: 150px) and (max-height: 200px)': [{\n          expressions: [{\n            feature: 'height',\n            modifier: 'min',\n            value: '150px'\n          }, {\n            feature: 'height',\n            modifier: 'max',\n            value: '200px'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      foo: {\n        color: 'blue'\n      },\n      '@media all and (min-height: 50px) and (max-height: 150px)': {\n        foo: {\n          color: 'red'\n        }\n      },\n      '@media all and (min-height: 150px) and (max-height: 200px)': {\n        foo: {\n          color: 'green'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support platform types",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2644,
                "column": 35,
                "index": 58260
            },
            "line": 2644,
            "code": "  it('should support platform types', () => {\n    expect(transform(`\n      @media web and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media ios and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media android and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media windows and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media macos and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      @media dom and (orientation: landscape) {\n        .container {\n          background-color: #00f;\n        }\n      }\n      `, {\n      parseMediaQueries: true\n    })).toEqual({\n      '@media android and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media dom and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media ios and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media macos and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media web and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      '@media windows and (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      },\n      __mediaQueries: {\n        '@media android and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'android'\n        }],\n        '@media dom and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'dom'\n        }],\n        '@media ios and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'ios'\n        }],\n        '@media macos and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'macos'\n        }],\n        '@media web and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'web'\n        }],\n        '@media windows and (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'windows'\n        }]\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support NOT operator",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2767,
                "column": 33,
                "index": 61471
            },
            "line": 2767,
            "code": "  it('should support NOT operator', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media not screen and (device-width: 768px)  {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media not screen and (device-width: 768px)': [{\n          expressions: [{\n            feature: 'device-width',\n            modifier: undefined,\n            value: '768px'\n          }],\n          inverse: true,\n          type: 'screen'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media not screen and (device-width: 768px)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support OR queries",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2802,
                "column": 31,
                "index": 62290
            },
            "line": 2802,
            "code": "  it('should support OR queries', () => {\n    expect(transform(`\n        .container {\n          background-color: #f00;\n        }\n\n        @media (orientation: portrait), (orientation: landscape)  {\n          .container {\n            background-color: #00f;\n          }\n        }\n        `, {\n      parseMediaQueries: true\n    })).toEqual({\n      __mediaQueries: {\n        '@media (orientation: portrait), (orientation: landscape)': [{\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'portrait'\n          }],\n          inverse: false,\n          type: 'all'\n        }, {\n          expressions: [{\n            feature: 'orientation',\n            modifier: undefined,\n            value: 'landscape'\n          }],\n          inverse: false,\n          type: 'all'\n        }]\n      },\n      container: {\n        backgroundColor: '#f00'\n      },\n      '@media (orientation: portrait), (orientation: landscape)': {\n        container: {\n          backgroundColor: '#00f'\n        }\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for invalid types",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2845,
                "column": 36,
                "index": 63354
            },
            "line": 2845,
            "code": "  it('should throw for invalid types', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n\n        @media screens {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"screens\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media sdfgsdfg {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"sdfgsdfg\"');\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n      @media linux and (orientation: landscape) {\n        .foo {\n          color: red;\n        }\n      }\n    `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query type \"linux\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for invalid features",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2884,
                "column": 39,
                "index": 64227
            },
            "line": 2884,
            "code": "  it('should throw for invalid features', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-heigh: 50px) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query feature \"min-heigh\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (orientations: landscape) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query feature \"orientations\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for values without units",
            "suites": [
                "media queries"
            ],
            "updatePoint": {
                "line": 2910,
                "column": 43,
                "index": 64890
            },
            "line": 2910,
            "code": "  it('should throw for values without units', () => {\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-height: 50) and (max-height: 150px) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(min-height: 50)\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-height: 50px) and (max-height: 150) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(max-height: 150)\"');\n    expect(() => transform(`\n        .foo {\n          color: blue;\n        }\n        @media (min-width) {\n          .foo {\n            color: red;\n          }\n        }\n      `, {\n      parseMediaQueries: true\n    })).toThrow('Failed to parse media query expression \"(min-width)\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse ICSS :export pseudo-selectors",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2952,
                "column": 48,
                "index": 65975
            },
            "line": 2952,
            "code": "  it('should parse ICSS :export pseudo-selectors', () => {\n    expect(transform(`\n      :export {\n        whitecolor: #fcf5ed;\n        test: 1px;\n      }\n    `)).toEqual({\n      whitecolor: '#fcf5ed',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "if there is more than :export one in a file, the keys and values are combined and exported together",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2963,
                "column": 105,
                "index": 66265
            },
            "line": 2963,
            "code": "  it('if there is more than :export one in a file, the keys and values are combined and exported together', () => {\n    expect(transform(`\n\n      :export {\n        blackColor: #000;\n      }\n\n      .bar {\n        color: blue;\n      }\n\n      :export {\n        whitecolor: #fcf5ed;\n        test: 1px;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      blackColor: '#000',\n      whitecolor: '#fcf5ed',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should support exportedKey value with spaces",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 2987,
                "column": 50,
                "index": 66665
            },
            "line": 2987,
            "code": "  it('should support exportedKey value with spaces', () => {\n    expect(transform(`\n      :export {\n        blackColor: something is something;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      blackColor: 'something is something'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "an exportedValue does not need to be quoted, it is already treated as a literal string",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3003,
                "column": 92,
                "index": 67021
            },
            "line": 3003,
            "code": "  it('an exportedValue does not need to be quoted, it is already treated as a literal string', () => {\n    expect(transform(`\n      :export {\n        foo: something;\n        boo: 0;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toEqual({\n      bar: {\n        color: 'blue'\n      },\n      foo: 'something',\n      boo: '0'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse :export and support the same exportedKey with different case",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3021,
                "column": 79,
                "index": 67356
            },
            "line": 3021,
            "code": "  it('should parse :export and support the same exportedKey with different case', () => {\n    expect(transform(`\n      :export {\n        whitecolor: #fcf5ed;\n        WhiteColor: #fff;\n      }\n    `)).toEqual({\n      whitecolor: '#fcf5ed',\n      WhiteColor: '#fff'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should parse a selector and :export",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3032,
                "column": 41,
                "index": 67596
            },
            "line": 3032,
            "code": "  it('should parse a selector and :export', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        whitecolor: #fcf5ed;\n        b: 0;\n        test: 1px;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      whitecolor: '#fcf5ed',\n      b: '0',\n      test: '1px'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should do nothing with an empty :export block",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3052,
                "column": 51,
                "index": 67947
            },
            "line": 3052,
            "code": "  it('should do nothing with an empty :export block', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "if a particular exportedKey is duplicated, the last (in source order) takes precedence.",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3066,
                "column": 93,
                "index": 68216
            },
            "line": 3066,
            "code": "  it('if a particular exportedKey is duplicated, the last (in source order) takes precedence.', () => {\n    expect(transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      bar: '2'\n    });\n    expect(transform(`\n      :export {\n        bar: 3;\n      }\n\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      bar: '2'\n    });\n    expect(transform(`\n      :export {\n        baz: 1;\n        bar: 3;\n      }\n\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n    `)).toEqual({\n      foo: {\n        color: 'blue'\n      },\n      baz: '1',\n      bar: '2'\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "does not transform value to scalePx2dp when option scalable false",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3123,
                "column": 71,
                "index": 69039
            },
            "line": 3123,
            "code": "  it('does not transform value to scalePx2dp when option scalable false', () => {\n    expect(transform(`\n      .foo {\n        padding: 10px 20px;\n      }\n    `, {\n      scalable: false\n    })).toEqual({\n      foo: {\n        paddingTop: 10,\n        paddingRight: 20,\n        paddingBottom: 10,\n        paddingLeft: 20\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform border-[direction] property",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3139,
                "column": 50,
                "index": 69357
            },
            "line": 3139,
            "code": "  it('should transform border-[direction] property', () => {\n    expect(transform(`\n      .left {\n        border-left: red 1px solid;\n      }\n      .right {\n        border-right: solid 1px red;\n      }\n      .bottom {\n        border-bottom: solid red 1px;\n      }\n      .top {\n        border-top: 1px red solid;\n      }\n    `, {\n      scalable: false\n    })).toEqual({\n      top: {\n        borderTopWidth: 1,\n        borderStyle: 'solid',\n        borderTopColor: 'red'\n      },\n      right: {\n        borderRightWidth: 1,\n        borderStyle: 'solid',\n        borderRightColor: 'red'\n      },\n      bottom: {\n        borderBottomWidth: 1,\n        borderStyle: 'solid',\n        borderBottomColor: 'red'\n      },\n      left: {\n        borderLeftWidth: 1,\n        borderStyle: 'solid',\n        borderLeftColor: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should transform propertyValue remove !import key",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3178,
                "column": 55,
                "index": 70198
            },
            "line": 3178,
            "code": "  it('should transform propertyValue remove !import key', () => {\n    expect(transform(`\n      .foo {\n        color: red !import;\n      }\n    `, {\n      scalable: false\n    })).toEqual({\n      foo: {\n        color: 'red'\n      }\n    });\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw an error if exportedKey has the same name as a class and is defined twice",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3191,
                "column": 92,
                "index": 70478
            },
            "line": 3191,
            "code": "  it('should throw an error if exportedKey has the same name as a class and is defined twice', () => {\n    expect(() => transform(`\n      :export {\n        bar: 1;\n        bar: 2;\n      }\n\n      .bar {\n        color: blue;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"bar\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw an error if exportedKey has the same name as a class",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3203,
                "column": 71,
                "index": 70813
            },
            "line": 3203,
            "code": "  it('should throw an error if exportedKey has the same name as a class', () => {\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        foo: 1;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n    expect(() => transform(`\n      :export {\n        foo: 1;\n      }\n\n      .foo {\n        color: red;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n    expect(() => transform(`\n      .foo {\n        color: blue;\n      }\n\n      :export {\n        foo: 1;\n      }\n\n      .foo {\n        color: red;\n      }\n    `)).toThrow('Failed to parse :export block because a CSS class in the same file is already using the name \"foo\"');\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "should throw for :export that is not top level",
            "suites": [
                "ICSS :export pseudo-selector"
            ],
            "updatePoint": {
                "line": 3236,
                "column": 52,
                "index": 71616
            },
            "line": 3236,
            "code": "  it('should throw for :export that is not top level', () => {\n    expect(() => transform(`\n      .foo {\n        color: red;\n        :export {\n          bar: 1;\n        }\n      }\n    `)).toThrow();\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/css-to-react-native/__tests__"
        },
        {
            "name": "1 should work on the readme example",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 8,
                "column": 41,
                "index": 267
            },
            "line": 8,
            "code": "  it('1 should work on the readme example', function () {\n    const input = 'h1 { margin: 0 0 20px; font-size: 32px; line-height: 1.2; letter-spacing: 1px; }';\n    const output = 'h1 { margin: 0 0 0.585rem; font-size: 0.936rem; line-height: 1.2; letter-spacing: 0.02925rem; }';\n    const processed = postcss(px2rem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(input).css;\n    expect(processed).toBe(output);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace the px unit with rem",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 17,
                "column": 43,
                "index": 701
            },
            "line": 17,
            "code": "  it('2 should replace the px unit with rem', function () {\n    const processed = postcss(px2rem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(basicCSS).css;\n    const expected = '.rule { font-size: 0.43875rem }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should ignore non px properties",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 25,
                "column": 39,
                "index": 972
            },
            "line": 25,
            "code": "  it('3 should ignore non px properties', function () {\n    const expected = '.rule { font-size: 2em }';\n    const processed = postcss(px2rem({\n      platform: 'h5',\n      designWidth: 640\n    })).process(expected).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should handle < 1 values and values without a leading 0 - legacy",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 33,
                "column": 72,
                "index": 1269
            },
            "line": 33,
            "code": "  it('4 should handle < 1 values and values without a leading 0 - legacy', function () {\n    const rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n    const expected = '.rule { margin: 0.5rem 0.01463rem -0.00585rem -.2em }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['margin']\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should handle < 1 values and values without a leading 0",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 44,
                "column": 63,
                "index": 1709
            },
            "line": 44,
            "code": "  it('5 should handle < 1 values and values without a leading 0', function () {\n    const rules = '.rule { margin: 0.5rem .5px -0.2px -.2em }';\n    const expected = '.rule { margin: 0.5rem 0.01463rem -0.00585rem -.2em }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['margin']\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should not add properties that already exist",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 55,
                "column": 52,
                "index": 2133
            },
            "line": 55,
            "code": "  it('6 should not add properties that already exist', function () {\n    const expected = '.rule { font-size: 40px; font-size: 1rem; }';\n    const processed = postcss(px2rem({\n      platform: 'h5',\n      designWidth: 750\n    })).process(expected).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 属性值为\"0\"时不处理，为\"0px\"时仍然单位转换",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 63,
                "column": 33,
                "index": 2410
            },
            "line": 63,
            "code": "  it('7 属性值为\"0\"时不处理，为\"0px\"时仍然单位转换', function () {\n    const rule = '.rule { font-size: 0px; font-size: 0; }';\n    const expected = '.rule { font-size: 0rpx; font-size: 0; }';\n    const processed = postcss(px2rem()).process(rule).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "8 should work on custom baseFontSize",
            "suites": [
                "px2rem"
            ],
            "updatePoint": {
                "line": 69,
                "column": 42,
                "index": 2697
            },
            "line": 69,
            "code": "  it('8 should work on custom baseFontSize', function () {\n    const processed = postcss(px2rem({\n      platform: 'h5',\n      baseFontSize: 15\n    })).process(basicCSS).css;\n    const expected = '.rule { font-size: 0.5rem }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should not replace values in double quotes or single quotes - legacy",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 79,
                "column": 76,
                "index": 3045
            },
            "line": 79,
            "code": "  it('1 should not replace values in double quotes or single quotes - legacy', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n      // propWhiteList: []\n    };\n\n    const rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n    const expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 0.468rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should not replace values in double quotes or single quotes",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 91,
                "column": 67,
                "index": 3525
            },
            "line": 91,
            "code": "  it('2 should not replace values in double quotes or single quotes', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 16px; }';\n    const expected = '.rule { content: \\'16px\\'; font-family: \"16px\"; font-size: 0.468rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should not replace values in `url()` - legacy",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 102,
                "column": 53,
                "index": 3986
            },
            "line": 102,
            "code": "  it('3 should not replace values in `url()` - legacy', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n      // propWhiteList: []\n    };\n\n    const rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n    const expected = '.rule { background: url(16px.jpg); font-size: 0.468rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should not replace values in `url()`",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 114,
                "column": 44,
                "index": 4417
            },
            "line": 114,
            "code": "  it('4 should not replace values in `url()`', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { background: url(16px.jpg); font-size: 16px; }';\n    const expected = '.rule { background: url(16px.jpg); font-size: 0.468rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should not replace values with an uppercase P or X",
            "suites": [
                "value parsing"
            ],
            "updatePoint": {
                "line": 125,
                "column": 58,
                "index": 4857
            },
            "line": 125,
            "code": "  it('5 should not replace values with an uppercase P or X', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propList: ['*']\n    };\n    const rules = '.rule { margin: 12px calc(100% - 14PX); height: calc(100% - 20px); font-size: 12Px; line-height: 16px; }';\n    const expected = '.rule { margin: 0.351rem calc(100% - 14PX); height: calc(100% - 0.585rem); font-size: 12Px; line-height: 0.468rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should replace using a decimal of 2 places - legacy",
            "suites": [
                "unitPrecision"
            ],
            "updatePoint": {
                "line": 139,
                "column": 59,
                "index": 5467
            },
            "line": 139,
            "code": "  it('1 should replace using a decimal of 2 places - legacy', function () {\n    const expected = '.rule { font-size: 0.44rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      unit_precision: 2\n    };\n    const processed = postcss(px2rem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace using a decimal of 2 places",
            "suites": [
                "unitPrecision"
            ],
            "updatePoint": {
                "line": 149,
                "column": 50,
                "index": 5800
            },
            "line": 149,
            "code": "  it('2 should replace using a decimal of 2 places', function () {\n    const expected = '.rule { font-size: 0.44rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      unitPrecision: 2\n    };\n    const processed = postcss(px2rem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 162,
                "column": 65,
                "index": 6206
            },
            "line": 162,
            "code": "  it('3 should only replace properties in the white list - legacy', function () {\n    const expected = '.rule { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      prop_white_list: ['font']\n    };\n    const processed = postcss(px2rem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 172,
                "column": 65,
                "index": 6559
            },
            "line": 172,
            "code": "  it('4 should only replace properties in the white list - legacy', function () {\n    const expected = '.rule { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['font']\n    };\n    const processed = postcss(px2rem(options)).process(basicCSS).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should only replace properties in the white list - legacy",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 182,
                "column": 65,
                "index": 6910
            },
            "line": 182,
            "code": "  it('5 should only replace properties in the white list - legacy', function () {\n    const css = '.rule { margin: 16px; margin-left: 10px }';\n    const expected = '.rule { margin: 0.468rem; margin-left: 10px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['margin']\n    };\n    const processed = postcss(px2rem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should only replace properties in the prop list",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 193,
                "column": 55,
                "index": 7329
            },
            "line": 193,
            "code": "  it('6 should only replace properties in the prop list', function () {\n    const css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const expected = '.rule { font-size: 0.468rem; margin: 0.468rem; margin-left: 5px; padding: 5px; padding-right: 0.468rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['*font*', 'margin*', '!margin-left', '*-right', 'pad']\n    };\n    const processed = postcss(px2rem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 should only replace properties in the prop list with wildcard",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 204,
                "column": 69,
                "index": 7917
            },
            "line": 204,
            "code": "  it('7 should only replace properties in the prop list with wildcard', function () {\n    const css = '.rule { font-size: 16px; margin: 16px; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const expected = '.rule { font-size: 16px; margin: 0.468rem; margin-left: 5px; padding: 5px; padding-right: 16px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      propWhiteList: ['*', '!margin-left', '!*padding*', '!font*']\n    };\n    const processed = postcss(px2rem(options)).process(css).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "8 should replace all properties when white list is empty",
            "suites": [
                "propWhiteList"
            ],
            "updatePoint": {
                "line": 215,
                "column": 62,
                "index": 8480
            },
            "line": 215,
            "code": "  it('8 should replace all properties when white list is empty', function () {\n    const rules = '.rule { margin: 16px; font-size: 15px }';\n    const expected = '.rule { margin: 0.468rem; font-size: 0.43875rem }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n      // propWhiteList: []\n    };\n\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should ignore selectors in the selector black list - legacy",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 230,
                "column": 67,
                "index": 8975
            },
            "line": 230,
            "code": "  it('1 should ignore selectors in the selector black list - legacy', function () {\n    const rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n    const expected = '.rule { font-size: 0.43875rem } .rule2 { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selector_black_list: ['.rule2']\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should ignore selectors in the selector black list",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 241,
                "column": 58,
                "index": 9431
            },
            "line": 241,
            "code": "  it('2 should ignore selectors in the selector black list', function () {\n    const rules = '.rule { font-size: 15px } .rule2 { font-size: 15px }';\n    const expected = '.rule { font-size: 0.43875rem } .rule2 { font-size: 15px }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: ['.rule2']\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should ignore every selector with `body$`",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 252,
                "column": 49,
                "index": 9876
            },
            "line": 252,
            "code": "  it('3 should ignore every selector with `body$`', function () {\n    const rules = 'body { font-size: 16px; } .class-body$ { font-size: 16px; } .simple-class { font-size: 16px; }';\n    const expected = 'body { font-size: 0.468rem; } .class-body$ { font-size: 16px; } .simple-class { font-size: 0.468rem; }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: ['body$']\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should only ignore exactly `body`",
            "suites": [
                "selectorBlackList"
            ],
            "updatePoint": {
                "line": 263,
                "column": 41,
                "index": 10398
            },
            "line": 263,
            "code": "  it('4 should only ignore exactly `body`', function () {\n    const rules = 'body { font-size: 16px; } .class-body { font-size: 16px; } .simple-class { font-size: 16px; }';\n    const expected = 'body { font-size: 16px; } .class-body { font-size: 0.468rem; } .simple-class { font-size: 0.468rem; }';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      selectorBlackList: [/^body$/]\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should leave fallback pixel unit with root em value",
            "suites": [
                "replace"
            ],
            "updatePoint": {
                "line": 276,
                "column": 59,
                "index": 10975
            },
            "line": 276,
            "code": "  it('1 should leave fallback pixel unit with root em value', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      replace: false\n    };\n    const processed = postcss(px2rem(options)).process(basicCSS).css;\n    const expected = '.rule { font-size: 15px; font-size: 0.43875rem }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should replace px in media queries",
            "suites": [
                "mediaQuery"
            ],
            "updatePoint": {
                "line": 289,
                "column": 42,
                "index": 11373
            },
            "line": 289,
            "code": "  it('1 should replace px in media queries', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      media_query: true\n    };\n    const processed = postcss(px2rem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n    const expected = '@media (min-width: 14.625rem) { .rule { font-size: 0.468rem } }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should replace px in media queries",
            "suites": [
                "mediaQuery"
            ],
            "updatePoint": {
                "line": 299,
                "column": 42,
                "index": 11782
            },
            "line": 299,
            "code": "  it('2 should replace px in media queries', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      mediaQuery: true\n    };\n    const processed = postcss(px2rem(options)).process('@media (min-width: 500px) { .rule { font-size: 16px } }').css;\n    const expected = '@media (min-width: 14.625rem) { .rule { font-size: 0.468rem } }';\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should not replace values below minPixelValue",
            "suites": [
                "minPixelValue"
            ],
            "updatePoint": {
                "line": 311,
                "column": 53,
                "index": 12245
            },
            "line": 311,
            "code": "  it('1 should not replace values below minPixelValue', function () {\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      // propWhiteList: [],\n      minPixelValue: 2\n    };\n    const rules = '.rule { border: 1px solid #000; font-size: 16px; margin: 1px 10px; }';\n    const expected = '.rule { border: 1px solid #000; font-size: 0.468rem; margin: 1px 0.2925rem; }';\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "1 should find \"exact\" matches from propList",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 325,
                "column": 49,
                "index": 12787
            },
            "line": 325,
            "code": "  it('1 should find \"exact\" matches from propList', function () {\n    const propList = ['font-size', 'margin', '!padding', '*border*', '*', '*y', '!*font*'];\n    const expected = 'font-size,margin';\n    expect(filterPropList.exact(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "2 should find \"contain\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 330,
                "column": 72,
                "index": 13081
            },
            "line": 330,
            "code": "  it('2 should find \"contain\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '*border*', '*', '*y', '!*font*'];\n    const expected = 'margin,border';\n    expect(filterPropList.contain(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "3 should find \"start\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 335,
                "column": 70,
                "index": 13374
            },
            "line": 335,
            "code": "  it('3 should find \"start\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'border';\n    expect(filterPropList.startWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "4 should find \"end\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 340,
                "column": 68,
                "index": 13659
            },
            "line": 340,
            "code": "  it('4 should find \"end\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'y';\n    expect(filterPropList.endWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "5 should find \"not\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 345,
                "column": 68,
                "index": 13937
            },
            "line": 345,
            "code": "  it('5 should find \"not\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', 'border*', '*', '*y', '!*font*'];\n    const expected = 'padding';\n    expect(filterPropList.notExact(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "6 should find \"not contain\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 350,
                "column": 76,
                "index": 14230
            },
            "line": 350,
            "code": "  it('6 should find \"not contain\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n    const expected = 'font';\n    expect(filterPropList.notContain(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "7 should find \"not start\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 355,
                "column": 74,
                "index": 14521
            },
            "line": 355,
            "code": "  it('7 should find \"not start\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '*y', '!*font*'];\n    const expected = 'border';\n    expect(filterPropList.notStartWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "8 should find \"not end\" matches from propList and reduce to string",
            "suites": [
                "filter-prop-list"
            ],
            "updatePoint": {
                "line": 360,
                "column": 72,
                "index": 14814
            },
            "line": 360,
            "code": "  it('8 should find \"not end\" matches from propList and reduce to string', function () {\n    const propList = ['font-size', '*margin*', '!padding', '!border*', '*', '!*y', '!*font*'];\n    const expected = 'y';\n    expect(filterPropList.notEndWith(propList).join()).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "不传任何配置",
            "suites": [
                "不传任何配置"
            ],
            "updatePoint": {
                "line": 370,
                "column": 12,
                "index": 15085
            },
            "line": 370,
            "code": "  it('不传任何配置', function () {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 20rpx;font-size: 40rpx;line-height: 1.2;}';\n    const processed = postcss(px2rem()).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 750} ",
            "suites": [
                "platform 为 weapp"
            ],
            "updatePoint": {
                "line": 378,
                "column": 46,
                "index": 15452
            },
            "line": 378,
            "code": "  it('{platform: \\'weapp\\', designWidth: 750} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 20rpx;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 750\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 640} ",
            "suites": [
                "platform 为 weapp"
            ],
            "updatePoint": {
                "line": 388,
                "column": 46,
                "index": 15855
            },
            "line": 388,
            "code": "  it('{platform: \\'weapp\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 23.4rpx;font-size: 46.8rpx;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 750, targetUnit: 'rem'} ",
            "suites": [
                "platform 为 weapp, targetUnit 为 rem"
            ],
            "updatePoint": {
                "line": 400,
                "column": 67,
                "index": 16343
            },
            "line": 400,
            "code": "  it('{platform: \\'weapp\\', designWidth: 750, targetUnit: \\'rem\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.5rem;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 750,\n      targetUnit: 'rem'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 640, targetUnit: 'rem'} ",
            "suites": [
                "platform 为 weapp, targetUnit 为 rem"
            ],
            "updatePoint": {
                "line": 411,
                "column": 67,
                "index": 16793
            },
            "line": 411,
            "code": "  it('{platform: \\'weapp\\', designWidth: 640, targetUnit: \\'rem\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.585rem;font-size: 1.17rem;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 640,\n      targetUnit: 'rem'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 750, targetUnit: 'px'} ",
            "suites": [
                "platform 为 weapp, targetUnit 为 px"
            ],
            "updatePoint": {
                "line": 424,
                "column": 66,
                "index": 17305
            },
            "line": 424,
            "code": "  it('{platform: \\'weapp\\', designWidth: 750, targetUnit: \\'px\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 10px;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 750,\n      targetUnit: 'px'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 640, targetUnit: 'px'} ",
            "suites": [
                "platform 为 weapp, targetUnit 为 px"
            ],
            "updatePoint": {
                "line": 435,
                "column": 66,
                "index": 17751
            },
            "line": 435,
            "code": "  it('{platform: \\'weapp\\', designWidth: 640, targetUnit: \\'px\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 11.7px;font-size: 23.4px;line-height: 1.2;}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 640,\n      targetUnit: 'px'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 750} ",
            "suites": [
                "platform 为 h5"
            ],
            "updatePoint": {
                "line": 448,
                "column": 43,
                "index": 18216
            },
            "line": 448,
            "code": "  it('{platform: \\'h5\\', designWidth: 750} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.5rem;font-size: 1rem;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 750\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5"
            ],
            "updatePoint": {
                "line": 458,
                "column": 43,
                "index": 18614
            },
            "line": 458,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 0.585rem;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 750, targetUnit: 'px'} ",
            "suites": [
                "platform 为 h5, targetUnit 为 px"
            ],
            "updatePoint": {
                "line": 470,
                "column": 63,
                "index": 19089
            },
            "line": 470,
            "code": "  it('{platform: \\'h5\\', designWidth: 750, targetUnit: \\'px\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 10px;font-size: 20px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 750,\n      targetUnit: 'px'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640, targetUnit: 'px'} ",
            "suites": [
                "platform 为 h5, targetUnit 为 px"
            ],
            "updatePoint": {
                "line": 481,
                "column": 63,
                "index": 19529
            },
            "line": 481,
            "code": "  it('{platform: \\'h5\\', designWidth: 640, targetUnit: \\'px\\'} ', () => {\n    const rules = 'h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const expected = 'h1 {margin: 0 0 11.7px;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      targetUnit: 'px'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(expected);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，文件头部带注释的不转换"
            ],
            "updatePoint": {
                "line": 494,
                "column": 43,
                "index": 20001
            },
            "line": 494,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*postcss-pxtransform disable*/ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定 h5 平台保留"
            ],
            "updatePoint": {
                "line": 505,
                "column": 43,
                "index": 20395
            },
            "line": 505,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  h5  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 rn 平台保留"
            ],
            "updatePoint": {
                "line": 516,
                "column": 43,
                "index": 20792
            },
            "line": 516,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  rn  */ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('/*  #ifdef  rn  *//*  #endif  */ .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'rn', designWidth: 640} ",
            "suites": [
                "platform 为 rn，指定平台 h5 rn 平台保留"
            ],
            "updatePoint": {
                "line": 527,
                "column": 43,
                "index": 21237
            },
            "line": 527,
            "code": "  it('{platform: \\'rn\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifdef  h5 rn  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'rn',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 rn 平台剔除"
            ],
            "updatePoint": {
                "line": 538,
                "column": 43,
                "index": 21645
            },
            "line": 538,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifndef  rn  */ h1 {margin: 0 0 20Px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe(rules);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "platform 为 h5，指定平台 h5 平台剔除"
            ],
            "updatePoint": {
                "line": 549,
                "column": 43,
                "index": 22051
            },
            "line": 549,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = '/*  #ifndef  h5  */ h1 {margin: 0 0 20px;font-size: 40Px;line-height: 1.2;}/*  #endif  */ .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('/*  #ifndef  h5  *//*  #endif  */ .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'weapp', designWidth: 640} ",
            "suites": [
                "rpx 单位转换"
            ],
            "updatePoint": {
                "line": 560,
                "column": 46,
                "index": 22480
            },
            "line": 560,
            "code": "  it('{platform: \\'weapp\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20rpx;font-size: 40Px;line-height: 1.2;} .test{}';\n    const options = {\n      platform: 'weapp',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('h1 {margin: 0 0 20rpx;font-size: 40Px;line-height: 1.2;} .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "rpx 单位转换"
            ],
            "updatePoint": {
                "line": 569,
                "column": 43,
                "index": 22866
            },
            "line": 569,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 20rpx;font-size: 40Px;line-height: 1.2;} .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('h1 {margin: 0 0 0.585rem;font-size: 40Px;line-height: 1.2;} .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "vw 单位转换"
            ],
            "updatePoint": {
                "line": 580,
                "column": 43,
                "index": 23284
            },
            "line": 580,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 640px;font-size: 40Px;line-height: 1.2;} .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 750,\n      targetUnit: 'vw'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('h1 {margin: 0 0 85.33333vw;font-size: 40Px;line-height: 1.2;} .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 750} ",
            "suites": [
                "vw 单位转换"
            ],
            "updatePoint": {
                "line": 590,
                "column": 43,
                "index": 23696
            },
            "line": 590,
            "code": "  it('{platform: \\'h5\\', designWidth: 750} ', () => {\n    const rules = 'h1 {margin: 0 0 375px;font-size: 40Px;line-height: 1.2;} .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 750,\n      targetUnit: 'vw'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('h1 {margin: 0 0 50vw;font-size: 40Px;line-height: 1.2;} .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'h5', designWidth: 640} ",
            "suites": [
                "vw 单位转换"
            ],
            "updatePoint": {
                "line": 600,
                "column": 43,
                "index": 24102
            },
            "line": 600,
            "code": "  it('{platform: \\'h5\\', designWidth: 640} ', () => {\n    const rules = 'h1 {margin: 0 0 320px;font-size: 40Px;line-height: 1.2;} .test{}';\n    const options = {\n      platform: 'h5',\n      designWidth: 640,\n      targetUnit: 'vw'\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('h1 {margin: 0 0 50vw;font-size: 40Px;line-height: 1.2;} .test{}');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'rn', designWidth: 750} ",
            "suites": [
                "platform 为 rn，适配"
            ],
            "updatePoint": {
                "line": 612,
                "column": 43,
                "index": 24549
            },
            "line": 612,
            "code": "  it('{platform: \\'rn\\', designWidth: 750} ', () => {\n    const rules = 'view { width: 100px; }';\n    const options = {\n      platform: 'rn',\n      designWidth: 750,\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 1,\n        828: 1.81 / 2\n      }\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('view { width: 50px; }');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "{platform: 'harmony', designWidth: 640} ",
            "suites": [
                "platform 为 harmony，适配"
            ],
            "updatePoint": {
                "line": 628,
                "column": 48,
                "index": 24989
            },
            "line": 628,
            "code": "  it('{platform: \\'harmony\\', designWidth: 640} ', () => {\n    const rules = 'view { width: 100PX; }';\n    const options = {\n      platform: 'harmony',\n      designWidth: 640,\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 1,\n        828: 1.81 / 2\n      }\n    };\n    const processed = postcss(px2rem(options)).process(rules).css;\n    expect(processed).toBe('view { width: 100vp; }');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/postcss-pxtransform/__tests__"
        },
        {
            "name": "single",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 16,
                "column": 12
            },
            "line": 16,
            "code": "  it('single', () => {\n    hook.tap('hookA', () => {\n      return 'first'\n    })\n    hook.tap('hookA', () => {\n      return 'second'\n    })\n    const res = hook.call('hookA')\n    expect(res).toBe('second')\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "single with default",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 27,
                "column": 25
            },
            "line": 27,
            "code": "  it('single with default', () => {\n    let res = hook.call('hookAWithDefault', 'Ben')\n    expect(res).toBe('name: Ben')\n    hook.tap('hookAWithDefault', (name) => {\n      return name\n    })\n    res = hook.call('hookAWithDefault', 'JoJo')\n    expect(res).toBe('JoJo')\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "multi",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 37,
                "column": 11
            },
            "line": 37,
            "code": "  it('multi', () => {\n    const fnA = jest.fn()\n    const fnB = jest.fn()\n    hook.tap('hookB', fnA)\n    hook.tap('hookB', fnB)\n    hook.call('hookB')\n    expect(fnA).toBeCalled()\n    expect(fnB).toBeCalled()\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "multi default",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 47,
                "column": 19
            },
            "line": 47,
            "code": "  it('multi default', () => {\n    const fnA = jest.fn()\n    const fnB = jest.fn()\n    const fnC = jest.fn()\n    const hook = new TaroHooks({\n      hookBWithDefault: TaroHook(HOOK_TYPE.MULTI, fnA)\n    })\n    hook.tap('hookBWithDefault', fnB)\n    hook.tap('hookBWithDefault', fnC)\n    hook.call('hookBWithDefault')\n    expect(fnA).toBeCalledTimes(0)\n    expect(fnB).toBeCalled()\n    expect(fnC).toBeCalled()\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "waterfall",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 62,
                "column": 15
            },
            "line": 62,
            "code": "  it('waterfall', () => {\n    hook.tap('hookC', (obj) => {\n      obj.num += 1\n      return obj\n    })\n    hook.tap('hookC', (obj) => {\n      obj.num += 2\n      return obj\n    })\n    hook.tap('hookC', (obj) => {\n      obj.num += 3\n      return obj\n    })\n    const res = hook.call('hookC', { num: 10 })\n    expect(res).toEqual({ num: 16 })\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "plugin",
            "suites": [
                "taro hooks"
            ],
            "updatePoint": {
                "line": 79,
                "column": 12
            },
            "line": 79,
            "code": "  it('plugin', () => {\n    // shared\n    const hooks = new TaroHooks({\n      hookA: TaroHook(HOOK_TYPE.SINGLE, () => 'default'),\n      hookB: TaroHook(HOOK_TYPE.MULTI),\n      hookC: TaroHook(HOOK_TYPE.WATERFALL)\n    })\n\n    // pluginA\n    const fnA = jest.fn()\n    const reconcilerA = {\n      hookA: () => 'pluginA',\n      hookB: fnA,\n      hookC: [n => n + 1, n => n + 2]\n    }\n    mergeReconciler(reconcilerA, hooks)\n\n    // pluginB\n    const fnB = jest.fn()\n    const reconcilerB = {\n      hookA: () => 'pluginB',\n      hookB: fnB,\n      hookC: [n => n + 3, n => n + 4]\n    }\n    mergeReconciler(reconcilerB, hooks)\n\n    // runtime\n    const resA = hooks.call('hookA')\n    hooks.call('hookB')\n    const resC = hooks.call('hookC', 0)\n\n    expect(resA).toBe('pluginB')\n    expect(fnA).toBeCalled()\n    expect(fnB).toBeCalled()\n    expect(resC).toBe(10)\n  })",
            "file": "hooks.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "#indent",
            "suites": [
                "shared utils"
            ],
            "updatePoint": {
                "line": 4,
                "column": 13
            },
            "line": 4,
            "code": "  it('#indent', async () => {\n    const inner =\n`<text>\n  hello, world\n</text>`\n\n    const outer =\n`<view>\n  ${indent(inner, 2)}\n</view>`\n\n    const result =\n`<view>\n  <text>\n    hello, world\n  </text>\n</view>`\n\n    expect(outer).toBe(result)\n  })",
            "file": "shared.spec.ts",
            "skipped": false,
            "dir": "packages/shared/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in values",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 3,
                "column": 46,
                "index": 149
            },
            "line": 3,
            "code": "  it('does not allow vendor prefixes in values', () => {\n    const css = '.test { display: -webkit-flex; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('value-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in properties",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 17,
                "column": 50,
                "index": 565
            },
            "line": 17,
            "code": "  it('does not allow vendor prefixes in properties', () => {\n    const css = '.test { -webkit-transform: scale(1); }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('property-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in at-rules",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 31,
                "column": 48,
                "index": 988
            },
            "line": 31,
            "code": "  it('does not allow vendor prefixes in at-rules', () => {\n    const css = '.test { @-webkit-keyframes() { 0% { color: blue } 100% { color: red; } }  }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('at-rule-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow vendor prefixes in media features",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 45,
                "column": 54,
                "index": 1453
            },
            "line": 45,
            "code": "  it('does not allow vendor prefixes in media features', () => {\n    const css = '@media (-webkit-min-device-pixel-ratio: 1) { .foo { color: blue; } }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('media-feature-name-no-vendor-prefix')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow unknown properties",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 59,
                "column": 39,
                "index": 1907
            },
            "line": 59,
            "code": "  it('does not allow unknown properties', () => {\n    const css = '.test { word-wrap: break-word; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('taro-rn/css-property-no-unknown')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for id selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 73,
                "column": 28,
                "index": 2310
            },
            "line": 73,
            "code": "  it('warns for id selectors', () => {\n    const css = '#test { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-id')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for type selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 87,
                "column": 30,
                "index": 2685
            },
            "line": 87,
            "code": "  it('warns for type selectors', () => {\n    const css = 'input { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-type')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for universal selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 101,
                "column": 35,
                "index": 3067
            },
            "line": 101,
            "code": "  it('warns for universal selectors', () => {\n    const css = '* { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-universal')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for combinator selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 115,
                "column": 36,
                "index": 3451
            },
            "line": 115,
            "code": "  it('warns for combinator selectors', () => {\n    const css = '.foo + .bar { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-combinators')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for attribute selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 129,
                "column": 35,
                "index": 3846
            },
            "line": 129,
            "code": "  it('warns for attribute selectors', () => {\n    const css = '[type=\\'text\\'] { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-attribute')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for qualifying type selectors",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 143,
                "column": 41,
                "index": 4249
            },
            "line": 143,
            "code": "  it('warns for qualifying type selectors', () => {\n    const css = 'a.link { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-max-type')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for pseudo classes",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 157,
                "column": 30,
                "index": 4627
            },
            "line": 157,
            "code": "  it('warns for pseudo classes', () => {\n    const css = '.foo:before { flex: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('selector-pseudo-class-allowed-list')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not warn for ICSS :export pseudo-selector",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 171,
                "column": 52,
                "index": 5049
            },
            "line": 171,
            "code": "  it('does not warn for ICSS :export pseudo-selector', () => {\n    const css = ':export { color: red; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output).toBe('');\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not warn for :root pseudo-selector",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 185,
                "column": 45,
                "index": 5415
            },
            "line": 185,
            "code": "  it('does not warn for :root pseudo-selector', () => {\n    const css = ':root { --my-color: red; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output).toBe('');\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for font-weights that are not compatible with Android",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 199,
                "column": 65,
                "index": 5804
            },
            "line": 199,
            "code": "  it('warns for font-weights that are not compatible with Android', () => {\n    const css = '.foo { font-weight: 300 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('taro-rn/font-weight-no-ignored-values')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "does not allow for line-heights that are invalid",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 213,
                "column": 54,
                "index": 6233
            },
            "line": 213,
            "code": "  it('does not allow for line-heights that are invalid', () => {\n    const css = '.foo { line-height: 1 }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(true);\n      expect(result.output.includes('line-height \"1\"')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for incompatible @-rules",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 227,
                "column": 36,
                "index": 6619
            },
            "line": 227,
            "code": "  it('warns for incompatible @-rules', () => {\n    const css = '.foo { @keyframes() { 0% { color: blue } 100% { color: red; } } }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('at-rule-disallowed-list')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for @charset",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 241,
                "column": 24,
                "index": 7044
            },
            "line": 241,
            "code": "  it('warns for @charset', () => {\n    const css = '@charset \"utf-8\";';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('at-rule-disallowed-list')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "warns for incompatible units",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 255,
                "column": 34,
                "index": 7431
            },
            "line": 255,
            "code": "  it('warns for incompatible units', () => {\n    const css = '.foo { font-size: 1ch; }';\n    expect.assertions(2);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n      expect(result.output.includes('unit-allowed-list')).toBe(true);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "allows pseudo and type selectors (ignored by React Native CSS modules, but can be used for web when creating hybrid apps)",
            "suites": [
                "stylelint-config-react-native-css-modules"
            ],
            "updatePoint": {
                "line": 269,
                "column": 127,
                "index": 7912
            },
            "line": 269,
            "code": "  it('allows pseudo and type selectors (ignored by React Native CSS modules, but can be used for web when creating hybrid apps)', () => {\n    const css = '.test:hover { color: blue; } .test input[type=text] { color: red; }';\n    expect.assertions(1);\n    return stylelint.lint({\n      code: css,\n      formatter: 'string',\n      config: {\n        extends: './index'\n      }\n    }).then(result => {\n      expect(result.errored).toBe(false);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/stylelint-config-taro-rn/__tests__"
        },
        {
            "name": "项目 output.clean = clean: { keep: ['project.config.json'] } ==> 清空dist文件夹但保留指定文件",
            "suites": [
                "构建配置测试",
                "小程序"
            ],
            "updatePoint": {
                "line": 42,
                "column": 87
            },
            "line": 42,
            "code": "    it(`项目 output.clean = clean: { keep: ['project.config.json'] } ==> 清空dist文件夹但保留指定文件`, async () => {\n      const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n      const logSpy = jest.spyOn(console, 'log')\n      const errorSpy = jest.spyOn(console, 'error')\n      logSpy.mockImplementation(() => {})\n      errorSpy.mockImplementation(() => {})\n      exitSpy.mockImplementation(() => {\n        throw new Error()\n      })\n\n      try {\n        await runBuild(APP_PATH, {\n          options: {\n            type: 'weapp',\n            platform: 'weapp'\n          }\n        })\n      } catch (error) {\n        // no handler\n      }\n      expect(emptyDirectoryMocked).toBeCalledWith(OUTPUT_PATH, { excludes: ['project.config.json'] })\n\n      exitSpy.mockRestore()\n      logSpy.mockRestore()\n      errorSpy.mockRestore()\n    })",
            "file": "build-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "output.clean = false ==> 保留dist文件夹",
            "suites": [
                "构建配置测试",
                "h5"
            ],
            "updatePoint": {
                "line": 71,
                "column": 42
            },
            "line": 71,
            "code": "    it('output.clean = false ==> 保留dist文件夹', async () => {\n      const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n      const logSpy = jest.spyOn(console, 'log')\n      const errorSpy = jest.spyOn(console, 'error')\n      logSpy.mockImplementation(() => {})\n      errorSpy.mockImplementation(() => {})\n      exitSpy.mockImplementation(() => {\n        throw new Error()\n      })\n\n      try {\n        await runBuild(APP_PATH, {\n          options: {\n            type: 'h5',\n            platform: 'h5'\n          }\n        })\n      } catch (error) {\n        // no handler\n      }\n      expect(emptyDirectoryMocked).toBeCalledTimes(0)\n\n      exitSpy.mockRestore()\n      logSpy.mockRestore()\n      errorSpy.mockRestore()\n    })",
            "file": "build-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "build"
            ],
            "updatePoint": {
                "line": 59,
                "column": 27
            },
            "line": 59,
            "code": "    it('should make configs', async () => {\n      const platform = 'weapp'\n      setProcessArgv('taro build --type weapp --watch --port 8080')\n      await cli.run()\n      const ins = MockedKernel.mock.instances[0]\n\n      const opts = Object.assign({}, baseOpts)\n      opts.options = Object.assign({}, baseOpts.options, {\n        platform,\n        isWatch: true,\n        port: 8080,\n        deviceType: undefined,\n        resetCache: false,\n        qr: false\n      })\n\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'build',\n        opts\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should not set node env again",
            "suites": [
                "inspect",
                "build"
            ],
            "updatePoint": {
                "line": 81,
                "column": 37
            },
            "line": 81,
            "code": "    it('should not set node env again', async () => {\n      process.env.NODE_ENV = 'development'\n      setProcessArgv('taro build --type weapp')\n      await cli.run()\n      expect(process.env.NODE_ENV).toEqual('development')\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make plugin config",
            "suites": [
                "inspect",
                "build"
            ],
            "line": 88,
            "code": "    it.skip('should make plugin config', async () => {",
            "file": "cli.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "init"
            ],
            "updatePoint": {
                "line": 105,
                "column": 27
            },
            "line": 105,
            "code": "    it('should make configs', async () => {\n      const projectName = 'temp'\n      const templateSource = 'https://url'\n      const template = 'mobx'\n      const css = 'sass'\n      setProcessArgv('taro init temp --typescript --template-source=https://url --clone --template mobx --css sass')\n      await cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'init',\n        opts: {\n          _: [\n            'init',\n            'temp'\n          ],\n          options: {\n            appPath: APP_PATH,\n            projectName,\n            typescript: true,\n            templateSource,\n            description: undefined,\n            clone: true,\n            template,\n            css\n          },\n          isHelp: false\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set project name",
            "suites": [
                "inspect",
                "init"
            ],
            "updatePoint": {
                "line": 135,
                "column": 31
            },
            "line": 135,
            "code": "    it('should set project name', async () => {\n      const projectName = 'demo'\n      setProcessArgv('taro init --name demo')\n      await cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'init',\n        opts: {\n          _: [\n            'init'\n          ],\n          options: {\n            appPath: APP_PATH,\n            projectName,\n            typescript: undefined,\n            templateSource: undefined,\n            description: undefined,\n            clone: false,\n            template: undefined,\n            css: undefined\n          },\n          isHelp: false\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "convert"
            ],
            "updatePoint": {
                "line": 163,
                "column": 27
            },
            "line": 163,
            "code": "    it('should make configs', async () => {\n      setProcessArgv('taro convert')\n      await cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: 'convert',\n        opts: {\n          _: ['convert'],\n          options: {},\n          isHelp: false\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should make configs",
            "suites": [
                "inspect",
                "customCommand"
            ],
            "updatePoint": {
                "line": 179,
                "column": 27
            },
            "line": 179,
            "code": "    it('should make configs', async () => {\n      const cmd = 'inspect'\n      const _ = [cmd, 'entry']\n      const type = 'weapp'\n      setProcessArgv('taro inspect entry --type weapp -h --version')\n      await cli.run()\n      const ins = MockedKernel.mock.instances[0]\n      expect(ins.run).toHaveBeenCalledWith({\n        name: cmd,\n        opts: {\n          _,\n          options: {\n            type\n          },\n          isHelp: true\n        }\n      })\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log helps",
            "suites": [
                "inspect",
                "others"
            ],
            "updatePoint": {
                "line": 200,
                "column": 24
            },
            "line": 200,
            "code": "    it('should log helps', async () => {\n      const spy = jest.spyOn(console, 'log')\n      spy.mockImplementation(() => {})\n\n      setProcessArgv('taro -h')\n      await cli.run()\n      expect(spy).toBeCalledTimes(16)\n\n      spy.mockRestore()\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log version",
            "suites": [
                "inspect",
                "others"
            ],
            "updatePoint": {
                "line": 211,
                "column": 26
            },
            "line": 211,
            "code": "    it('should log version', async () => {\n      const spy = jest.spyOn(console, 'log')\n      spy.mockImplementation(() => {})\n\n      setProcessArgv('taro -v')\n      await cli.run()\n      expect(spy).toBeCalledWith(getPkgVersion())\n\n      spy.mockRestore()\n    })",
            "file": "cli.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because can't find home dir",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 55,
                "column": 46
            },
            "line": 55,
            "code": "  it('should exit because can\\'t find home dir', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    getUserHomeDirMocked.mockReturnValue('')\n\n    await runConfig(appPath)\n\n    expect(logSpy).toBeCalledWith('找不到用户根目录')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when getting config without args key",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 67,
                "column": 54
            },
            "line": 67,
            "code": "  it('should warn when getting config without args key', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig(appPath, { args: ['get'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config get <key>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should get config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 77,
                "column": 23
            },
            "line": 77,
            "code": "  it('should get config', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockImplementation(() => ({\n      [key]: value\n    }))\n\n    await runConfig(appPath, { args: ['get', key] })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when getting config without args value",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 98,
                "column": 56
            },
            "line": 98,
            "code": "  it('should warn when getting config without args value', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig(appPath, { args: ['set', 'k'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config set <key> <value>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 108,
                "column": 23
            },
            "line": 108,
            "code": "  it('should set config', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({ a: 1 })\n\n    await runConfig(appPath, { args: ['set', key, value] })\n\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, {\n      a: 1,\n      [key]: value\n    })\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `set key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should set config with init",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 132,
                "column": 33
            },
            "line": 132,
            "code": "  it('should set config with init', async () => {\n    const key = 'k'\n    const value = 'v'\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    existsSyncMocked.mockReturnValue(false)\n\n    await runConfig(appPath, { args: ['set', key, value] })\n\n    expect(ensureFileSyncMocked).toBeCalledWith(configPath)\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, { [key]: value })\n    expect(logSpy).toBeCalledWith(`set key: ${key}, value: ${value}`)\n\n    logSpy.mockRestore()\n    existsSyncMocked.mockReset()\n    ensureFileSyncMocked.mockClear()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when deleting config without args key",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 153,
                "column": 55
            },
            "line": 153,
            "code": "  it('should warn when deleting config without args key', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runConfig(appPath, { args: ['delete'] })\n\n    expect(logSpy).toBeCalledWith('Usage: taro config delete <key>')\n    logSpy.mockRestore()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should delete config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 163,
                "column": 26
            },
            "line": 163,
            "code": "  it('should delete config', async () => {\n    const key = 'k'\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      [key]: 'v'\n    })\n\n    await runConfig(appPath, { args: ['delete', key] })\n\n    expect(writeJSONSyncMocked).toBeCalledWith(configPath, { a: 1 })\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, `deleted: ${key}`)\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n    writeJSONSyncMocked.mockClear()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should list config",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 186,
                "column": 24
            },
            "line": 186,
            "code": "  it('should list config', async () => {\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      b: 2\n    })\n\n    await runConfig(appPath, { args: ['list'] })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, 'Config info:')\n    expect(logSpy).nthCalledWith(4, 'a=1')\n    expect(logSpy).nthCalledWith(5, 'b=2')\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should list config in json",
            "suites": [
                "config"
            ],
            "updatePoint": {
                "line": 207,
                "column": 32
            },
            "line": 207,
            "code": "  it('should list config in json', async () => {\n    const configPath = path.join('/', `${TARO_CONFIG_FOLDER}/${TARO_BASE_CONFIG}`)\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    readJSONSyncMocked.mockReturnValue({\n      a: 1,\n      b: 2\n    })\n\n    await runConfig(appPath, {\n      args: ['list'],\n      options: {\n        json: true\n      }\n    })\n\n    expect(logSpy).nthCalledWith(1, `Config path: ${configPath}`)\n    expect(logSpy).nthCalledWith(2)\n    expect(logSpy).nthCalledWith(3, 'Config info:')\n    expect(logSpy).nthCalledWith(4, JSON.stringify({ a: 1, b: 2 }, null, 2))\n\n    logSpy.mockRestore()\n    readJSONSyncMocked.mockReset()\n  })",
            "file": "config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should config include's all the required values",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 25,
                "column": 54
            },
            "line": 25,
            "code": "  it('should config include\\'s all the required values', async () => {\n    let { messages } = await validator({\n      projectConfig: {},\n      helper,\n      configPath: ''\n    })\n    expect(messages.length).toEqual(6)\n    let msgs = messages.map(line => line.content)\n    expect(msgs.includes('缺少 \"projectName\" 配置项')).toBeTruthy()\n    expect(msgs.includes('缺少 \"sourceRoot\" 配置项')).toBeTruthy()\n    expect(msgs.includes('缺少 \"outputRoot\" 配置项')).toBeTruthy()\n    expect(msgs.includes('缺少 \"framework\" 配置项')).toBeTruthy()\n\n    const res = await validator({\n      projectConfig: {\n        projectName: '',\n        sourceRoot: '',\n        outputRoot: '',\n        framework: ''\n      },\n      helper,\n      configPath: ''\n    })\n    messages = res.messages\n\n    expect(messages.length).toEqual(3)\n    msgs = messages.map(line => line.content)\n    expect(msgs.includes('framework 的值 \"\" 与任何指定选项 [\"nerv\",\"react\",\"preact\",\"vue\",\"vue3\"] 都不匹配')).toBeTruthy()\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "date",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 55,
                "column": 10
            },
            "line": 55,
            "code": "  it('date', async () => {\n    let { messages } = await validator(getConfig({\n      date: '2020-5-26'\n    }))\n\n    expect(messages.length).toEqual(3)\n\n    const res = await validator(getConfig({\n      date: 'abc'\n    }))\n    messages = res.messages\n\n    expect(messages.length).toEqual(3)\n    expect(messages[2].content).toEqual('date 的值 \"abc\" 与 \"\\\\d{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])\" 不匹配')\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "framework",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 71,
                "column": 15
            },
            "line": 71,
            "code": "  it('framework', async () => {\n    let res = await validator(getConfig({\n      framework: 'react'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      framework: 'vue'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      framework: 'nerv'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      framework: 'vue3'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      framework: 'other'\n    }))\n    expect(res.messages.length).toEqual(3)\n    expect(res.messages[2].content).toEqual('framework 的值 \"other\" 与任何指定选项 [\"nerv\",\"react\",\"preact\",\"vue\",\"vue3\"] 都不匹配')\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "designWidth",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 99,
                "column": 17
            },
            "line": 99,
            "code": "  it('designWidth', async () => {\n    let res = await validator(getConfig({\n      designWidth: '750'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      designWidth: 'a'\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      designWidth: 700.5\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      designWidth: -640\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "deviceRatio",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 121,
                "column": 17
            },
            "line": 121,
            "code": "  it('deviceRatio', async () => {\n    let res = await validator(getConfig({\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 1,\n        828: 1.81 / 2\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      deviceRatio: {\n        640: 2.34 / 2,\n        750: 'a',\n        828: 1.81 / 2\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "plugins",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 141,
                "column": 13
            },
            "line": 141,
            "code": "  it('plugins', async () => {\n    let res = await validator(getConfig({\n      plugins: [\n        '@tarojs/plugin-mock',\n        ['@tarojs/plugin-mock', {\n          mocks: {\n            '/api/user/1': {\n              name: 'judy',\n              desc: 'Mental guy'\n            }\n          }\n        }],\n        ['@tarojs/plugin-mock'],\n        '/absulute/path/plugin/filename'\n      ]\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      plugins: [\n        1,\n        {},\n        ['x', 1],\n        [{}, 'x'],\n        ['x', {}, 1],\n        ['']\n      ]\n    }))\n    expect(res.messages.length).toEqual(6)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "presets",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 172,
                "column": 13
            },
            "line": 172,
            "code": "  it('presets', async () => {\n    let res = await validator(getConfig({\n      presets: [\n        '@tarojs/plugin-mock',\n        ['@tarojs/plugin-mock', {\n          mocks: {\n            '/api/user/1': {\n              name: 'judy',\n              desc: 'Mental guy'\n            }\n          }\n        }],\n        ['@tarojs/plugin-mock'],\n        '/absulute/path/plugin/filename'\n      ]\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      presets: [\n        1,\n        {},\n        ['x', 1],\n        [{}, 'x'],\n        ['x', {}, 1],\n        ['']\n      ]\n    }))\n    expect(res.messages.length).toEqual(6)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "terser",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 203,
                "column": 12
            },
            "line": 203,
            "code": "  it('terser', async () => {\n    let res = await validator(getConfig({\n      terser: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      terser: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.messages.length).toEqual(5)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "csso",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 223,
                "column": 10
            },
            "line": 223,
            "code": "  it('csso', async () => {\n    let res = await validator(getConfig({\n      csso: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      csso: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.messages.length).toEqual(5)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "uglify",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 243,
                "column": 12
            },
            "line": 243,
            "code": "  it('uglify', async () => {\n    let res = await validator(getConfig({\n      uglify: {\n        enable: true,\n        config: {\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      uglify: {\n        enables: true,\n        enable: 1,\n        config: []\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "sass",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 263,
                "column": 10
            },
            "line": 263,
            "code": "  it('sass', async () => {\n    let res = await validator(getConfig({\n      sass: {\n        resource: '/src/styles/variable.scss'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      sass: {\n        resource: [\n          './src/styles/variable.scss',\n          './src/styles/mixins.scss'\n        ],\n        projectDirectory: '/root',\n        data: '$nav-height: 48px;'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      sass: {\n        resource: {},\n        projectDirectory: 1,\n        data: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(5)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "env",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 293,
                "column": 9
            },
            "line": 293,
            "code": "  it('env', async () => {\n    const res = await validator(getConfig({\n      env: {\n        NODE_ENV: '\"development\"'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "defineConstants",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 302,
                "column": 21
            },
            "line": 302,
            "code": "  it('defineConstants', async () => {\n    const res = await validator(getConfig({\n      defineConstants: {\n        A: '\"a\"'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "alias",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 311,
                "column": 11
            },
            "line": 311,
            "code": "  it('alias', async () => {\n    let res = await validator(getConfig({\n      alias: {\n        '@/components': 'src/components'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      alias: {\n        '@/components': ['src/components'],\n        '@/utils': 1,\n        '@/project': {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "copy",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 329,
                "column": 10
            },
            "line": 329,
            "code": "  it('copy', async () => {\n    let res = await validator(getConfig({\n      copy: {\n        patterns: [\n          { from: 'src/asset/tt/', to: 'dist/asset/tt/', ignore: ['*.js'] },\n          { from: 'src/asset/tt/sd.jpg', to: 'dist/asset/tt/sd.jpg' }\n        ]\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      copy: {\n        options: {\n          ignore: ['*.js', '*.css']\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      copy: {\n        patterns: [\n          { ignore: ['*.js'] },\n          { from: 'src/asset/tt/sd.jpg' },\n          { to: 'dist/asset/tt/sd.jpg' }\n        ],\n        options: {\n          ignore: [1, true, {}]\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(9)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.compile",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 364,
                "column": 18
            },
            "line": 364,
            "code": "  it('mini.compile', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        compile: {\n          exclude: [\n            'src/pages/index/vod-wx-sdk-v2.js',\n            modulePath => modulePath.indexOf('vod-wx-sdk-v2') >= 0\n          ],\n          include: [\n            'src/pages/index/vod-wx-sdk-v2.js',\n            modulePath => modulePath.indexOf('vod-wx-sdk-v2') >= 0\n          ]\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        compile: {\n          exclude: [null, []],\n          include: [1, {}]\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(6)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.webpackChain",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 392,
                "column": 23
            },
            "line": 392,
            "code": "  it('mini.webpackChain', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        webpackChain (chain, webpack) {\n          console.log(chain, webpack)\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        webpackChain: 'some'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.commonChunks",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 410,
                "column": 23
            },
            "line": 410,
            "code": "  it('mini.commonChunks', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        commonChunks: ['runtime', 'vendors', 'taro', 'common']\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        commonChunks (commonChunks) {\n          commonChunks.push('yourCustomCommonChunkName')\n          return commonChunks\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        commonChunks: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.addChunkPages",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 436,
                "column": 24
            },
            "line": 436,
            "code": "  it('mini.addChunkPages', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        addChunkPages (pages, pagesNames) {\n          console.log(pages, pagesNames)\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        addChunkPages: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.postcss",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 454,
                "column": 18
            },
            "line": 454,
            "code": "  it('mini.postcss', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        postcss: {\n          autoprefixer: {\n            enable: true,\n            config: {}\n          }\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        postcss: {\n          autoprefixer: {\n            enable: 1,\n            config: 'a'\n          },\n          pxtransform: true\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(5)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.output",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 481,
                "column": 17
            },
            "line": 481,
            "code": "  it('mini.output', async () => {\n    let res = await validator(getConfig({\n      mini: {\n        output: {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      mini: {\n        output: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini's third party options",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 497,
                "column": 33
            },
            "line": 497,
            "code": "  it('mini\\'s third party options', async () => {\n    const res = await validator(getConfig({\n      mini: {\n        cssLoaderOption: {},\n        styleLoaderOption: {},\n        sassLoaderOption: {},\n        lessLoaderOption: {},\n        stylusLoaderOption: {},\n        mediaUrlLoaderOption: {},\n        fontUrlLoaderOption: {},\n        imageUrlLoaderOption: {},\n        miniCssExtractPluginOption: {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.devServer",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 514,
                "column": 18
            },
            "line": 514,
            "code": "  it('h5.devServer', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        devServer: {\n          port: 10086\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        devServer: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.output",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 532,
                "column": 15
            },
            "line": 532,
            "code": "  it('h5.output', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        output: {\n          filename: 'js/[name].[hash:8].js',\n          chunkFilename: 'js/[name].[chunkhash:8].js'\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        output: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.publicPath",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 551,
                "column": 19
            },
            "line": 551,
            "code": "  it('h5.publicPath', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        publicPath: '/'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        publicPath: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.staticDirectory",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 567,
                "column": 24
            },
            "line": 567,
            "code": "  it('h5.staticDirectory', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        staticDirectory: '/'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        staticDirectory: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.chunkDirectory",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 583,
                "column": 23
            },
            "line": 583,
            "code": "  it('h5.chunkDirectory', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        chunkDirectory: '/'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        chunkDirectory: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.webpackChain",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 599,
                "column": 21
            },
            "line": 599,
            "code": "  it('h5.webpackChain', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        webpackChain (chain, webpack) {\n          console.log(chain, webpack)\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        webpackChain: 'some'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.router",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 627,
                "column": 15
            },
            "line": 627,
            "code": "  it('h5.router', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        router: {\n          mode: 'hash'\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        router: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.entry",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 645,
                "column": 14
            },
            "line": 645,
            "code": "  it('h5.entry', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        entry: './path/to/my/entry/file.js'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: ['./path/to/my/entry/file.js', './path/other/file.js']\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: {\n          main: './path/to/my/entry/file.js'\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: {\n          main: ['./path/to/my/entry/file.js', './path/other/file.js']\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        entry: () => './demo'\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.enableSourceMap",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 686,
                "column": 24
            },
            "line": 686,
            "code": "  it('h5.enableSourceMap', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        enableSourceMap: true\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        enableSourceMap: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.enableExtract",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 702,
                "column": 22
            },
            "line": 702,
            "code": "  it('h5.enableExtract', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        enableExtract: true\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        enableExtract: 1\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.esnextModules",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 718,
                "column": 22
            },
            "line": 718,
            "code": "  it('h5.esnextModules', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        esnextModules: ['taro-ui']\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        esnextModules: [1, true, {}]\n      }\n    }))\n    expect(res.messages.length).toEqual(4)\n\n    res = await validator(getConfig({ h5: 1 }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.postcss",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 737,
                "column": 16
            },
            "line": 737,
            "code": "  it('h5.postcss', async () => {\n    let res = await validator(getConfig({\n      h5: {\n        postcss: {\n          autoprefixer: {\n            enable: true,\n            config: {}\n          }\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n\n    res = await validator(getConfig({\n      h5: {\n        postcss: {\n          autoprefixer: {\n            enable: 1,\n            config: 'a'\n          },\n          pxtransform: true\n        }\n      }\n    }))\n    expect(res.messages.length).toEqual(5)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5's third party options",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 764,
                "column": 31
            },
            "line": 764,
            "code": "  it('h5\\'s third party options', async () => {\n    const res = await validator(getConfig({\n      h5: {\n        cssLoaderOption: {},\n        styleLoaderOption: {},\n        sassLoaderOption: {},\n        lessLoaderOption: {},\n        stylusLoaderOption: {},\n        mediaUrlLoaderOption: {},\n        fontUrlLoaderOption: {},\n        imageUrlLoaderOption: {},\n        miniCssExtractPluginOption: {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 781,
                "column": 12
            },
            "line": 781,
            "code": "  it('unknow', async () => {\n    const res = await validator(getConfig({\n      unknow: {}\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "mini.unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 788,
                "column": 17
            },
            "line": 788,
            "code": "  it('mini.unknow', async () => {\n    const res = await validator(getConfig({\n      mini: {\n        unknow: {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "h5.unknow",
            "suites": [
                "config validator of doctor"
            ],
            "updatePoint": {
                "line": 797,
                "column": 15
            },
            "line": 797,
            "code": "  it('h5.unknow', async () => {\n    const res = await validator(getConfig({\n      h5: {\n        unknow: {}\n      }\n    }))\n    expect(res.messages.length).toEqual(3)\n  })",
            "file": "doctor-config.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for react",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 18,
                "column": 27
            },
            "line": 18,
            "code": "  it('should lint for react', async () => {\n    process.chdir(path.join(__dirname, 'fixtures/default'))\n    const { isValid, messages } = await validator({\n      projectConfig: {\n        framework: 'react',\n        sourceRoot: 'src'\n      },\n      chalk\n    })\n    expect(isValid).toBe(true)\n    expect(messages.length).toBe(2)\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for nerv",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 31,
                "column": 26
            },
            "line": 31,
            "code": "  it('should lint for nerv', async () => {\n    process.chdir(path.join(__dirname, 'fixtures/nerv'))\n    const { isValid, messages } = await validator({\n      projectConfig: {\n        framework: 'nerv',\n        sourceRoot: 'src'\n      },\n      chalk\n    })\n    expect(isValid).toBe(false)\n    expect(messages[1].content.includes('\\'a\\' is assigned a value but never used'))\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should lint for vue",
            "suites": [
                "eslint validator of doctor"
            ],
            "updatePoint": {
                "line": 44,
                "column": 25
            },
            "line": 44,
            "code": "  it('should lint for vue', async () => {\n    process.chdir(path.join(__dirname, 'fixtures/vue'))\n    const { isValid, messages } = await validator({\n      projectConfig: {\n        framework: 'vue',\n        sourceRoot: 'src'\n      },\n      chalk\n    })\n\n    expect(isValid).toBe(true)\n    expect(messages.length).toBe(2)\n  })",
            "file": "doctor-eslint.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 33,
            "code": "  it.skip('should exit because there isn\\'t a Taro project', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when test framework not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 52,
            "code": "  it.skip('should warn when test framework not found', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when linters not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 70,
            "code": "  it.skip('should warn when linters not found', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when Readme not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 88,
            "code": "  it.skip('should warn when Readme not found', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when .gitignore not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 106,
            "code": "  it.skip('should warn when .gitignore not found', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should warn when .editorconfig not found",
            "suites": [
                "recommand validator of doctor"
            ],
            "line": 124,
            "code": "  it.skip('should warn when .editorconfig not found', async () => {",
            "file": "doctor-recommand.spec.ts",
            "skipped": true,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "doctor"
            ],
            "updatePoint": {
                "line": 59,
                "column": 53
            },
            "line": 59,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    try {\n      await runDoctor('', { options: { disableGlobalConfig: true } })\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "doctor.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "dotenvParse .env .env.dev should success",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 49,
                "column": 48
            },
            "line": 49,
            "code": "    it('dotenvParse .env .env.dev should success', async () => {\n      expect(process.env.TARO_test).toBeUndefined()\n      dotenvParse(path.resolve(__dirname, 'env'), 'TARO_', 'dev')\n      expect(process.env.TARO_test).toBe('123')\n      expect(process.env._TARO_test).toBeUndefined()\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "--watch true => 默认加载 .env.development",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 56,
                "column": 45
            },
            "line": 56,
            "code": "    it('--watch true => 默认加载 .env.development', async () => {\n      setProcessArgv('taro build --watch --type weapp')\n      await cli.run()\n      expect(process.env.TARO_APP_TEST).toEqual('env-development')\n      expect(process.env.TARO_APP_DEFAULT).toEqual('default')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "--watch false => 默认加载 .env.production",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 63,
                "column": 45
            },
            "line": 63,
            "code": "    it('--watch false => 默认加载 .env.production', async () => {\n      setProcessArgv('taro build --type weapp')\n      await cli.run()\n      expect(process.env.TARO_APP_TEST).toEqual('env-production')\n      expect(process.env.TARO_APP_DEFAULT).toEqual('default')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "指定加载 .env.pre",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 70,
                "column": 21
            },
            "line": 70,
            "code": "    it('指定加载 .env.pre', async () => {\n      setProcessArgv('taro build --type weapp --mode pre')\n      await cli.run()\n      expect(process.env.TARO_APP_TEST).toEqual('env-pre')\n      expect(process.env.TARO_APP_DEFAULT).toEqual('default')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "env.local 比 .env 优先级更高",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 77,
                "column": 30
            },
            "line": 77,
            "code": "    it('env.local 比 .env 优先级更高', async () => {\n      setProcessArgv('taro build --type weapp --mode find404')\n      await cli.run()\n      expect(process.env.TARO_APP_TEST).toEqual('env-local')\n      expect(process.env.TARO_APP_DEFAULT).toEqual('default')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "env.uat.local 比 .env.uat 优先级更高",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 84,
                "column": 38
            },
            "line": 84,
            "code": "    it('env.uat.local 比 .env.uat 优先级更高', async () => {\n      setProcessArgv('taro build --type weapp --mode uat')\n      await cli.run()\n      expect(process.env.TARO_APP_TEST).toEqual('env-uat-local')\n      expect(process.env.TARO_APP_DEFAULT).toEqual('default')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "自定义前缀: JD_APP_",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 91,
                "column": 22
            },
            "line": 91,
            "code": "    it('自定义前缀: JD_APP_', async () => {\n      setProcessArgv('taro build --type weapp --mode uat --env-prefix JD_APP_')\n      await cli.run()\n      expect(process.env.JD_APP_TEST).toEqual('env-uat')\n      expect(process.env.TARO_APP_TEST).toEqual(undefined)\n      expect(process.env.TARO_APP_ID).toEqual('特殊变量appid')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "环境变量可以相互引用",
            "suites": [
                "inspect",
                "cli mode env"
            ],
            "updatePoint": {
                "line": 99,
                "column": 18
            },
            "line": 99,
            "code": "    it('环境变量可以相互引用', async () => {\n      setProcessArgv('taro build --type weapp --mode pre')\n      await cli.run()\n      expect(process.env.TARO_APP_FOO).toEqual('env-pre-foo')\n    })",
            "file": "dotenv-parse.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "info"
            ],
            "updatePoint": {
                "line": 21,
                "column": 53
            },
            "line": 21,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInfo('')\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "info.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log information",
            "suites": [
                "info"
            ],
            "updatePoint": {
                "line": 41,
                "column": 28
            },
            "line": 41,
            "code": "  it('should log information', async () => {\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    await runInfo(appPath)\n\n    expect(logSpy).toBeCalledTimes(1)\n    const res = logSpy.mock.calls[0][0]\n    const title = `Taro CLI ${getPkgVersion()} environment info`\n    expect(res.hasOwnProperty(title)).toBeTruthy()\n    const info = res[title]\n    expect('System' in info).toBeTruthy()\n    expect('Binaries' in info).toBeTruthy()\n    // envinfo 还不支持 yarn workspace\n    // expect('npmPackages' in info).toBeTruthy()\n    expect(Object.keys(info.System)).toEqual(['OS', 'Shell'])\n    expect(Object.keys(info.Binaries)).toEqual(['Node', 'Yarn', 'npm'])\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/helper')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/mini-runner')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/service')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/taro')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/taroize')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('@tarojs/webpack-runner')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('babel-plugin-transform-taroapi')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('eslint-config-taro')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('eslint-plugin-taro')).toBeTruthy()\n    // expect(info.npmPackages.hasOwnProperty('postcss-pxtransform')).toBeTruthy()\n\n    logSpy.mockRestore()\n  })",
            "file": "info.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit because there isn't a Taro project",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 35,
                "column": 53
            },
            "line": 35,
            "code": "  it('should exit because there isn\\'t a Taro project', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInspect('')\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(1)\n    expect(logSpy).toBeCalledWith(chalk.red('找不到项目配置文件config/index，请确定当前目录是 Taro 项目根目录!'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should exit when user haven't pass correct type",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 55,
                "column": 54
            },
            "line": 55,
            "code": "  it('should exit when user haven\\'t pass correct type', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      await runInspect(path.resolve(__dirname, 'fixtures/default'))\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledWith(chalk.red('请传入正确的编译类型！'))\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 75,
                "column": 23
            },
            "line": 75,
            "code": "  it('should log config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'weapp'\n        }\n      })\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledTimes(1)\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log specific config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 100,
                "column": 32
            },
            "line": 100,
            "code": "  it('should log specific config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const logSpy = jest.spyOn(console, 'log')\n    const errorSpy = jest.spyOn(console, 'error')\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    errorSpy.mockImplementation(() => {})\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'h5'\n        },\n        args: ['resolve.mainFields.0']\n      })\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(logSpy).toBeCalledTimes(1)\n    expect(logSpy).toBeCalledWith('\\'main:h5\\'')\n\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n    errorSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should output config",
            "suites": [
                "inspect"
            ],
            "updatePoint": {
                "line": 130,
                "column": 26
            },
            "line": 130,
            "code": "  it('should output config', async () => {\n    const exitSpy = jest.spyOn(process, 'exit') as jest.SpyInstance<void, any>\n    const writeFileSync = fs.writeFileSync as jest.Mock<any>\n    const outputPath = 'project-config.js'\n\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n\n    try {\n      const appPath = path.resolve(__dirname, 'fixtures/default')\n      await runInspect(appPath, {\n        options: {\n          type: 'weapp',\n          output: outputPath\n        },\n        args: ['resolve.mainFields.0']\n      })\n    } catch (error) {} // eslint-disable-line no-empty\n\n    expect(exitSpy).toBeCalledWith(0)\n    expect(writeFileSync).toBeCalledWith(outputPath, '\\'browser\\'')\n\n    exitSpy.mockRestore()\n  })",
            "file": "inspect.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should log errors",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 129,
                "column": 23
            },
            "line": 129,
            "code": "  it('should log errors', async () => {\n    const spy = jest.spyOn(console, 'log')\n    spy.mockImplementation(() => {})\n    await runUpdate('', {\n      options: {\n        npm: 'npm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(spy).toBeCalledTimes(3)\n    spy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 142,
                "column": 24
            },
            "line": 142,
            "code": "  it('should update self', async () => {\n    await runUpdate('', {\n      args: ['self'],\n      options: {\n        npm: 'npm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith(`npm i -g @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self using yarn",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 153,
                "column": 35
            },
            "line": 153,
            "code": "  it('should update self using yarn', async () => {\n    shouldUseCnpmMocked.mockReturnValue(true)\n    await runUpdate('', {\n      args: ['self'],\n      options: {\n        npm: 'yarn',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith(`yarn global add @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self using pnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 165,
                "column": 35
            },
            "line": 165,
            "code": "  it('should update self using pnpm', async () => {\n    shouldUseCnpmMocked.mockReturnValue(true)\n    await runUpdate('', {\n      args: ['self'],\n      options: {\n        npm: 'pnpm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith(`pnpm add -g @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self using cnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 177,
                "column": 35
            },
            "line": 177,
            "code": "  it('should update self using cnpm', async () => {\n    shouldUseCnpmMocked.mockReturnValue(true)\n    await runUpdate('', {\n      args: ['self'],\n      options: {\n        npm: 'cnpm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith(`cnpm i -g @tarojs/cli@${lastestVersion}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update self to specific version",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 189,
                "column": 44
            },
            "line": 189,
            "code": "  it('should update self to specific version', async () => {\n    const version = '3.0.0-beta.0'\n    await runUpdate('', {\n      args: ['self', version],\n      options: {\n        npm: 'npm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith(`npm i -g @tarojs/cli@${version}`)\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should throw when there isn't a Taro project",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 201,
                "column": 51
            },
            "line": 201,
            "code": "  it('should throw when there isn\\'t a Taro project', async () => {\n    const chalkMocked = (chalk.red as unknown) as jest.Mock<any>\n    const exitSpy = jest.spyOn(process, 'exit')\n    const logSpy = jest.spyOn(console, 'log')\n    exitSpy.mockImplementation(() => {\n      throw new Error()\n    })\n    logSpy.mockImplementation(() => {})\n    try {\n      await runUpdate('', {\n        args: ['project'],\n        options: {\n          npm: 'npm',\n          disableGlobalConfig: true\n        }\n      })\n    } catch (error) {} // eslint-disable-line no-empty\n    expect(exitSpy).toBeCalledWith(1)\n    expect(chalkMocked).toBeCalledWith(`找不到项目配置文件 ${PROJECT_CONFIG}，请确定当前目录是 Taro 项目根目录!`)\n    exitSpy.mockRestore()\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 224,
                "column": 27
            },
            "line": 224,
            "code": "  it('should update project', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    const pkgPath = path.join(appPath, 'package.json')\n    const packageMap = updatePkg(pkgPath, lastestVersion)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runUpdate(appPath, {\n      args: ['project'],\n      options: {\n        npm: 'npm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(writeJson.mock.calls[0][0]).toEqual(pkgPath)\n    expect(writeJson.mock.calls[0][1]).toEqual(packageMap)\n    expect(execMocked).toBeCalledWith('npm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project to specific version",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 246,
                "column": 47
            },
            "line": 246,
            "code": "  it('should update project to specific version', async () => {\n    const version = '3.0.0-beta.4'\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n    const pkgPath = path.join(appPath, 'package.json')\n    const packageMap = updatePkg(pkgPath, version)\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n\n    await runUpdate(appPath, {\n      args: ['project', version],\n      options: {\n        npm: 'npm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(writeJson.mock.calls[0][0]).toEqual(pkgPath)\n    expect(writeJson.mock.calls[0][1]).toEqual(packageMap)\n    expect(execMocked).toBeCalledWith('npm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project with yarn",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 269,
                "column": 37
            },
            "line": 269,
            "code": "  it('should update project with yarn', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    shouldUseYarnMocked.mockReturnValue(true)\n\n    await runUpdate(appPath, {\n      args: ['project'],\n      options: {\n        npm: 'yarn',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith('yarn install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project with pnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 288,
                "column": 37
            },
            "line": 288,
            "code": "  it('should update project with pnpm', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    shouldUseCnpmMocked.mockReturnValue(true)\n\n    await runUpdate(appPath, {\n      args: ['project'],\n      options: {\n        npm: 'pnpm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith('pnpm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should update project with cnpm",
            "suites": [
                "update"
            ],
            "updatePoint": {
                "line": 307,
                "column": 37
            },
            "line": 307,
            "code": "  it('should update project with cnpm', async () => {\n    const appPath = path.resolve(__dirname, 'fixtures/default')\n\n    const logSpy = jest.spyOn(console, 'log')\n    logSpy.mockImplementation(() => {})\n    shouldUseCnpmMocked.mockReturnValue(true)\n\n    await runUpdate(appPath, {\n      args: ['project'],\n      options: {\n        npm: 'cnpm',\n        disableGlobalConfig: true\n      }\n    })\n    expect(execMocked).toBeCalledWith('cnpm install')\n\n    logSpy.mockRestore()\n  })",
            "file": "update.spec.ts",
            "skipped": false,
            "dir": "packages/taro-cli/src/__tests__"
        },
        {
            "name": "should work with ID",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 13,
                "column": 25,
                "index": 400
            },
            "line": 13,
            "code": "  it('should work with ID', () => {\n    const $dom = Sizzle('#test');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with tagName",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 17,
                "column": 30,
                "index": 512
            },
            "line": 17,
            "code": "  it('should work with tagName', () => {\n    const $dom = Sizzle('main');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with className",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 21,
                "column": 32,
                "index": 625
            },
            "line": 21,
            "code": "  it('should work with className', () => {\n    const $dom = Sizzle('.test');\n    expect($dom[0]).toBe(dom);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "should work with >",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 25,
                "column": 24,
                "index": 731
            },
            "line": 25,
            "code": "  it('should work with >', () => {\n    // console.log(dom)\n    dom.innerHTML = '<view class=\"t1\" id=\"t1\"></view>';\n    // console.log(dom.childNodes)\n    const $dom = Sizzle('main > .t1');\n    expect($dom[0]).toBe(dom.firstChild);\n  });",
            "file": "selectors.spec.js",
            "skipped": false,
            "dir": "packages/taro-extend/__tests__"
        },
        {
            "name": "test unit",
            "suites": [
                "createAnimation"
            ],
            "updatePoint": {
                "line": 3,
                "column": 15,
                "index": 93
            },
            "line": 3,
            "code": "  it('test unit', () => {\n    const ani = Taro.createAnimation();\n    const {\n      rules,\n      transform\n    } = ani;\n    ani.left(10);\n    expect(rules[0]).toEqual('left: 10px');\n    ani.top('10');\n    expect(rules[1]).toEqual('top: 10px');\n    ani.right('10%');\n    expect(rules[2]).toEqual('right: 10%');\n    ani.translate(10, '10%');\n    expect(transform[1]).toEqual('translate(10px, 10%)');\n    ani.translateX('10');\n    expect(transform[2]).toEqual('translateX(10px)');\n    ani.translate3d('10', 10, '20%');\n    expect(transform[3]).toEqual('translate3d(10px, 10px, 20%)');\n  });",
            "file": "ui/animation.test.ts",
            "skipped": false,
            "dir": "packages/taro-h5/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 3,
                "column": 10,
                "index": 72
            },
            "line": 3,
            "code": "  it('nerv', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'nerv'\n      },\n      request\n    });\n    const method = 'createReactApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 17,
                "column": 11,
                "index": 428
            },
            "line": 17,
            "code": "  it('react', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'react'\n      },\n      request\n    });\n    const method = 'createReactApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 31,
                "column": 9,
                "index": 783
            },
            "line": 31,
            "code": "  it('vue', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'vue'\n      },\n      request\n    });\n    const method = 'createVueApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "prerender",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 45,
                "column": 15,
                "index": 1140
            },
            "line": 45,
            "code": "  it('prerender', () => {\n    const request = '!request';\n    const result = app.call({\n      query: {\n        framework: 'vue',\n        prerender: true\n      },\n      request\n    });\n    const method = 'createVueApp';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = App(${method}(component))\n\nif (typeof PRERENDER !== 'undefined') {\n  global._prerender = inst\n}\n`);\n  });",
            "file": "app.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "nerv",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 4,
                "column": 10,
                "index": 110
            },
            "line": 4,
            "code": "  it('nerv', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const result = pageLoader.call({\n      query: {\n        framework: 'nerv',\n        name\n      },\n      request\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "react",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 20,
                "column": 11,
                "index": 532
            },
            "line": 20,
            "code": "  it('react', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const result = pageLoader.call({\n      query: {\n        framework: 'react',\n        name\n      },\n      request\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${request.slice(1)}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "vue",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 36,
                "column": 9,
                "index": 953
            },
            "line": 36,
            "code": "  it('vue', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const resourcePath = 'resourcePath';\n    const result = pageLoader.call({\n      query: {\n        framework: 'vue',\n        name\n      },\n      request,\n      resourcePath\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${path.resolve(__dirname, '..', 'src', 'raw.js')}!${resourcePath}'\nvar inst = Page(${method}(component, '${name}'))\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "prerender",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 54,
                "column": 15,
                "index": 1485
            },
            "line": 54,
            "code": "  it('prerender', () => {\n    const request = '!request';\n    const name = '/page/test';\n    const resourcePath = 'resourcePath';\n    const result = pageLoader.call({\n      query: {\n        framework: 'vue',\n        name,\n        prerender: true\n      },\n      request,\n      resourcePath\n    });\n    const method = 'createPageConfig';\n    expect(result).toMatch(`import { ${method} } from '@tarojs/runtime'\nimport component from '${path.resolve(__dirname, '..', 'src', 'raw.js')}!${resourcePath}'\nvar inst = Page(${method}(component, '${name}'))\n\nif (typeof PRERENDER !== 'undefined') {\n  global._prerender = inst\n}\n`);\n  });",
            "file": "page.spec.js",
            "skipped": false,
            "dir": "packages/taro-loader/__tests__"
        },
        {
            "name": "Context must be available in the consumer",
            "suites": [
                "Context"
            ],
            "updatePoint": {
                "line": 13,
                "column": 47,
                "index": 359
            },
            "line": 13,
            "code": "  it('Context must be available in the consumer', () => {\n    let actual = 0;\n    const Context = /*#__PURE__*/React.createContext();\n    function Consumer() {\n      return /*#__PURE__*/React.createElement(Context.Consumer, null, value => {\n        actual = value;\n        return /*#__PURE__*/React.createElement(\"text\", {\n          prop: 'Result: ' + value\n        });\n      });\n    }\n    class MyNode extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"view\", null, /*#__PURE__*/React.createElement(\"text\", null, \"Noise\"), /*#__PURE__*/React.createElement(Consumer, null));\n      }\n    }\n    const container = document.createElement('view');\n    render( /*#__PURE__*/React.createElement(Context.Provider, {\n      value: 5\n    }, /*#__PURE__*/React.createElement(MyNode, null)), container, function () {\n      expect(actual).toBe(5);\n    });\n  });",
            "file": "context.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should return null if passed null",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 22,
                "column": 51,
                "index": 710
            },
            "line": 22,
            "code": "  it('findDOMNode should return null if passed null', () => {\n    expect(findDOMNode(null)).toBe(null);\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should find dom element",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 25,
                "column": 41,
                "index": 810
            },
            "line": 25,
            "code": "  it('findDOMNode should find dom element', () => {\n    class MyNode extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", null, \"Noise\"));\n      }\n    }\n    const myNode = renderIntoDetachedNode( /*#__PURE__*/React.createElement(MyNode, null));\n    const myDiv = findDOMNode(myNode);\n    const mySameDiv = findDOMNode(myDiv);\n    expect(myDiv.tagName).toBe('DIV');\n    expect(mySameDiv).toBe(myDiv);\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should find dom element after an update from null",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 37,
                "column": 67,
                "index": 1334
            },
            "line": 37,
            "code": "  it('findDOMNode should find dom element after an update from null', () => {\n    function Bar({\n      flag\n    }) {\n      if (flag) {\n        return /*#__PURE__*/React.createElement(\"span\", null, \"A\");\n      }\n      return null;\n    }\n    class MyNode extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(Bar, {\n          flag: this.props.flag\n        });\n      }\n    }\n    const container = document.createElement('div');\n    const myNodeA = render( /*#__PURE__*/React.createElement(MyNode, null), container);\n    const a = findDOMNode(myNodeA);\n    expect(a).toBe(null);\n    const myNodeB = render( /*#__PURE__*/React.createElement(MyNode, {\n      flag: true\n    }), container);\n    expect(myNodeA === myNodeB).toBe(true);\n    const b = findDOMNode(myNodeB);\n    expect(b.tagName).toBe('SPAN');\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should reject random objects",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 64,
                "column": 46,
                "index": 2155
            },
            "line": 64,
            "code": "  it('findDOMNode should reject random objects', () => {\n    expect(function () {\n      findDOMNode({\n        foo: 'bar'\n      });\n    }).toThrowError('Argument appears to not be a ReactComponent. Keys: foo');\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should reject unmounted objects with render func",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 71,
                "column": 66,
                "index": 2391
            },
            "line": 71,
            "code": "  it('findDOMNode should reject unmounted objects with render func', () => {\n    class Foo extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", null);\n      }\n    }\n    const container = document.createElement('div');\n    const inst = render( /*#__PURE__*/React.createElement(Foo, null), container);\n    unmountComponentAtNode(container);\n    expect(() => findDOMNode(inst)).toThrowError('Unable to find node on an unmounted component.');\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "findDOMNode should not throw an error when called within a component that is not mounted",
            "suites": [
                "findDOMNode"
            ],
            "updatePoint": {
                "line": 82,
                "column": 94,
                "index": 2909
            },
            "line": 82,
            "code": "  it('findDOMNode should not throw an error when called within a component that is not mounted', () => {\n    class Bar extends React.Component {\n      UNSAFE_componentWillMount() {\n        expect(findDOMNode(this)).toBeNull();\n      }\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", null);\n      }\n    }\n    expect(() => renderIntoDetachedNode( /*#__PURE__*/React.createElement(Bar, null))).not.toThrow();\n  });",
            "file": "findDOMNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should set values as properties by default",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 17,
                "column": 50,
                "index": 500
            },
            "line": 17,
            "code": "    it('should set values as properties by default', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        title: \"Tip!\"\n      }), container);\n      expect(container.firstChild.getAttribute('title')).toBe('Tip!');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should set values as attributes if necessary",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 24,
                "column": 52,
                "index": 797
            },
            "line": 24,
            "code": "    it('should set values as attributes if necessary', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        role: \"#\"\n      }), container);\n      expect(container.firstChild.getAttribute('role')).toBe('#');\n      expect(container.firstChild.role).toBeUndefined();\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should set values as attributes for specific props",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 32,
                "column": 58,
                "index": 1149
            },
            "line": 32,
            "code": "    it('should set values as attributes for specific props', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"view\", {\n        type: \"button\",\n        id: \"test\"\n      }), container);\n      expect(container.firstChild.getAttribute('type')).toBe('button');\n      expect(container.firstChild.id).toBe('test');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "className should works as class",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 41,
                "column": 39,
                "index": 1508
            },
            "line": 41,
            "code": "    it('className should works as class', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"input\", {\n        type: \"button\",\n        className: \"test\"\n      }), container);\n      expect(container.firstChild.getAttribute('class')).toBe('test');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "string style",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 49,
                "column": 20,
                "index": 1803
            },
            "line": 49,
            "code": "    it('string style', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"input\", {\n        type: \"button\",\n        style: \"color: red\"\n      }), container);\n      expect(container.firstChild.getAttribute('style')).toBe('color: red;');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "object style",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 57,
                "column": 20,
                "index": 2107
            },
            "line": 57,
            "code": "    it('object style', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"input\", {\n        type: \"button\",\n        style: {\n          color: 'red'\n        }\n      }), container);\n      expect(container.firstChild.getAttribute('style')).toBe('color: red;');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "set style as number",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 67,
                "column": 27,
                "index": 2440
            },
            "line": 67,
            "code": "    it('set style as number', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"input\", {\n        type: \"button\",\n        style: {\n          fontSize: 14\n        }\n      }), container);\n      expect(container.firstChild.getAttribute('style')).toBe('font-size: 14px;');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "set css var as number should not add \"px\" suffix",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 77,
                "column": 56,
                "index": 2807
            },
            "line": 77,
            "code": "    it('set css var as number should not add \"px\" suffix', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"input\", {\n        type: \"button\",\n        style: {\n          '--taro': 14\n        }\n      }), container);\n      expect(container.firstChild.getAttribute('style')).toBe('--taro: 14;');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "set animation-iteration-count of style as number should not add \"px\" suffix",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 87,
                "column": 83,
                "index": 3196
            },
            "line": 87,
            "code": "    it('set animation-iteration-count of style as number should not add \"px\" suffix', async () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"view\", {\n        style: {\n          animationIterationCount: 1\n        }\n      }), container);\n      expect(container.firstChild.getAttribute('style')).toBe('animation-iteration-count: 1;');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "onClick should work like onTap",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 96,
                "column": 38,
                "index": 3553
            },
            "line": 96,
            "code": "    it('onClick should work like onTap', () => {\n      const container = document.createElement('div');\n      const spy = jest.fn();\n      render( /*#__PURE__*/React.createElement(\"view\", {\n        type: \"button\",\n        onClick: spy\n      }), container);\n      expect('tap' in container.firstChild.__handlers).toBe(true);\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "can dispatch event",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 105,
                "column": 26,
                "index": 3873
            },
            "line": 105,
            "code": "    it('can dispatch event', () => {\n      const createEvent = runtime.createEvent;\n      const container = document.createElement('div');\n      const spy = jest.fn();\n      render( /*#__PURE__*/React.createElement(\"view\", {\n        type: \"button\",\n        onClick: spy,\n        id: \"fork\"\n      }), container);\n      const event = createEvent({\n        type: 'tap',\n        currentTarget: {\n          id: container.firstChild.uid\n        },\n        target: {\n          id: container.firstChild.uid\n        }\n      });\n      container.firstChild.dispatchEvent(event);\n      expect(spy).toBeCalled();\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should patch properies properly",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 126,
                "column": 39,
                "index": 4494
            },
            "line": 126,
            "code": "    it('should patch properies properly', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        id: \"1\"\n      }), container);\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        id: \"2\"\n      }), container);\n      expect(container.firstChild.id).toBe('2');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should patch properies properly 2",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 136,
                "column": 41,
                "index": 4846
            },
            "line": 136,
            "code": "    it('should patch properies properly 2', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        id: \"1\",\n        a: \"a\"\n      }), container);\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        id: \"2\",\n        b: \"b\"\n      }), container);\n      expect(container.firstChild.id).toBe('2');\n      expect(container.firstChild.getAttribute('a')).toBe('');\n      expect(container.firstChild.getAttribute('b')).toBe('b');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should ignore ref",
            "suites": [
                "Context",
                "setValueOnElement"
            ],
            "updatePoint": {
                "line": 150,
                "column": 25,
                "index": 5341
            },
            "line": 150,
            "code": "    it('should ignore ref', () => {\n      const container = document.createElement('div');\n      render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: React.createRef\n      }), container);\n      expect(container.firstChild.getAttribute('ref')).toBe('');\n    });",
            "file": "props.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "throws when given a non-node",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 18,
                "column": 34,
                "index": 591
            },
            "line": 18,
            "code": "  it('throws when given a non-node', () => {\n    expect(function () {\n      unmountComponentAtNode(null);\n    }).toThrowError('unmountComponentAtNode(...): Target container is not a DOM element.');\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "returns false on non-React containers",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 23,
                "column": 43,
                "index": 804
            },
            "line": 23,
            "code": "  it('returns false on non-React containers', () => {\n    const d = document.createElement('div');\n    d.id = 'test';\n    expect(unmountComponentAtNode(d)).toBe(false);\n    expect(d.id).toBe('test');\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "returns true on React containers",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 29,
                "column": 38,
                "index": 1005
            },
            "line": 29,
            "code": "  it('returns true on React containers', () => {\n    const d = document.createElement('div');\n    render( /*#__PURE__*/React.createElement(\"b\", null, \"hellooo\"), d);\n    expect(d.textContent).toBe('hellooo');\n    expect(unmountComponentAtNode(d)).toBe(true);\n    expect(d.textContent).toBe('');\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should render different components in same root",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 36,
                "column": 53,
                "index": 1321
            },
            "line": 36,
            "code": "  it('should render different components in same root', () => {\n    const container = document.createElement('container');\n    render( /*#__PURE__*/React.createElement(\"div\", null), container);\n    expect(container.firstChild.tagName).toBe('DIV');\n    render( /*#__PURE__*/React.createElement(\"span\", null), container);\n    expect(container.firstChild.tagName).toBe('SPAN');\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should unmount and remount if the key changes",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 43,
                "column": 51,
                "index": 1700
            },
            "line": 43,
            "code": "  it('should unmount and remount if the key changes', () => {\n    const container = document.createElement('container');\n    const mockMount = jest.fn();\n    const mockUnmount = jest.fn();\n    class Component extends React.Component {\n      componentDidMount = mockMount;\n      componentWillUnmount = mockUnmount;\n      render() {\n        return /*#__PURE__*/React.createElement(\"span\", null, this.props.text);\n      }\n    }\n    expect(mockMount.mock.calls.length).toBe(0);\n    expect(mockUnmount.mock.calls.length).toBe(0);\n    render( /*#__PURE__*/React.createElement(Component, {\n      text: \"orange\",\n      key: \"A\"\n    }), container);\n    expect(container.firstChild.textContent).toBe('orange');\n    expect(mockMount.mock.calls.length).toBe(1);\n    expect(mockUnmount.mock.calls.length).toBe(0);\n\n    // If we change the key, the component is unmounted and remounted\n    render( /*#__PURE__*/React.createElement(Component, {\n      text: \"green\",\n      key: \"B\"\n    }), container);\n    expect(container.firstChild.textContent).toBe('green');\n    expect(mockMount.mock.calls.length).toBe(2);\n    expect(mockUnmount.mock.calls.length).toBe(1);\n\n    // But if we don't change the key, the component instance is reused\n    render( /*#__PURE__*/React.createElement(Component, {\n      text: \"blue\",\n      key: \"B\"\n    }), container);\n    expect(container.firstChild.textContent).toBe('blue');\n    expect(mockMount.mock.calls.length).toBe(2);\n    expect(mockUnmount.mock.calls.length).toBe(1);\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "should reuse markup if rendering to the same target twice",
            "suites": [
                "unmountComponentAtNode"
            ],
            "updatePoint": {
                "line": 82,
                "column": 63,
                "index": 3209
            },
            "line": 82,
            "code": "  it('should reuse markup if rendering to the same target twice', () => {\n    const container = document.createElement('container');\n    const instance1 = render( /*#__PURE__*/React.createElement(\"div\", null), container);\n    const instance2 = render( /*#__PURE__*/React.createElement(\"div\", null), container);\n    expect(instance1 === instance2).toBe(true);\n  });",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": false,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "initial mount is sync inside batchedUpdates, but task work is deferred until the end of the batch",
            "suites": [
                "unmountComponentAtNode"
            ],
            "line": 88,
            "code": "  it.skip('initial mount is sync inside batchedUpdates, but task work is deferred until the end of the batch', () => {",
            "file": "unmountComponentAtNode.spec.js",
            "skipped": true,
            "dir": "packages/taro-react/__tests__"
        },
        {
            "name": "single component",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 15,
                "column": 22
            },
            "line": 15,
            "code": "  it('single component', async () => {\n    const result = await runner(appPath, {\n      ...config,\n      nativeComponents: {\n        external: ['react', 'react-native', /@tarojs\\/components-rn/, /@babel\\/runtime/],\n        output: 'dist/single'\n      }\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "nativeComponents  not set",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 26,
                "column": 31
            },
            "line": 26,
            "code": "  it('nativeComponents  not set', async () => {\n    const result = await runner(appPath, {\n      ...config\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "multiple components",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 33,
                "column": 25
            },
            "line": 33,
            "code": "  it('multiple components', async () => {\n    const result = await build(config, {\n      input: ['components/cell/index', 'components/navbar/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      output: path.resolve(__dirname, './mock/dist/multiple'),\n      external: ['react', 'react-native', /@tarojs\\/components-rn/, /@tarojs\\/taro-rn/, /@babel\\/runtime/],\n      externalResolve: () => {}\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "modify rollup config",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 44,
                "column": 26
            },
            "line": 44,
            "code": "  it('modify rollup config', async () => {\n    const result = await build(config, {\n      input: ['components/cell/index', 'components/navbar/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      modifyRollupConfig: config => {\n        const { input, ...others } = config\n        return {\n          ...others,\n          input: Object.entries(input as Record<string, string>).reduce(\n            (pre, cur) => Object.assign(pre, { [cur[0].replace('components/', '')]: cur[1] }),\n            {}\n          ),\n          output: { dir: path.resolve(__dirname, './mock/dist/modify-config') }\n        }\n      }\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "svg transform",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 63,
                "column": 19
            },
            "line": 63,
            "code": "  it('svg transform', async () => {\n    const result = await build(config, {\n      input: ['components/svg/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      output: path.resolve(__dirname, './mock/dist/svg'),\n      external: ['react', 'react-native', /@tarojs\\/components-rn/, /@tarojs\\/taro-rn/, /@babel\\/runtime/],\n      externalResolve: () => {}\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "named export",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 74,
                "column": 18
            },
            "line": 74,
            "code": "  it('named export', async () => {\n    const result = await build(config, {\n      input: ['utils/namedExport/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      externalResolve: () => {},\n      output: path.resolve(__dirname, './mock/dist/named-export')\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "dynamic require",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 84,
                "column": 21
            },
            "line": 84,
            "code": "  it('dynamic require', async () => {\n    const result = await build(config, {\n      input: ['utils/dynamicImport/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      externalResolve: () => {},\n      output: path.resolve(__dirname, './mock/dist/dynamic-import')\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "require react-native component",
            "suites": [
                "build_components"
            ],
            "updatePoint": {
                "line": 94,
                "column": 36
            },
            "line": 94,
            "code": "  it('require react-native component', async () => {\n    const result = await build(config, {\n      input: ['utils/requireReactNative/index'],\n      sourceRootPath: path.resolve(__dirname, './mock/src'),\n      externalResolve: () => {},\n      output: path.resolve(__dirname, './mock/dist/require-native')\n    })\n    expect(getCode(result)).toMatchSnapshot()\n  })",
            "file": "components.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-runner/__tests__"
        },
        {
            "name": "config.sass option",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 63,
                "column": 24,
                "index": 1465
            },
            "line": 63,
            "code": "  it('config.sass option', async () => {\n    const css = await run({\n      src: `\n        .test {\n          color: $base-color;\n          height: 10px;\n        }\n      `,\n      config: {\n        sass: {\n          resource: ['__tests__/styles/variable.scss', '__tests__/styles/b.css'],\n          projectDirectory: path.resolve(__dirname, '..'),\n          data: '.data { width: 200px }'\n        }\n      },\n      filename: './__tests__/styles/a.scss'\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"brn\": {\n    \"color\": \"red\"\n  },\n  \"data\": {\n    \"width\": scalePx2dp(100)\n  },\n  \"test\": {\n    \"color\": \"#c6538c\",\n    \"height\": scalePx2dp(5)\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.sass option without projectDirectory",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 93,
                "column": 49,
                "index": 2147
            },
            "line": 93,
            "code": "  it('config.sass option without projectDirectory', async () => {\n    const css = await run({\n      src: `\n        .test {\n          color: $base-color;\n          height: 10px;\n        }\n      `,\n      filename: './__tests__/styles/a.scss',\n      config: {\n        sass: {\n          resource: [path.resolve(__dirname, 'styles/variable.scss'), path.resolve(__dirname, 'styles/b.css')],\n          projectDirectory: path.resolve(__dirname, '..'),\n          data: '.data { width: 200px }'\n        }\n      }\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"brn\": {\n    \"color\": \"red\"\n  },\n  \"data\": {\n    \"width\": scalePx2dp(100)\n  },\n  \"test\": {\n    \"color\": \"#c6538c\",\n    \"height\": scalePx2dp(5)\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.postcss disable pxTransform",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 123,
                "column": 40,
                "index": 2850
            },
            "line": 123,
            "code": "  it('config.postcss disable pxTransform', async () => {\n    const css = await run(`\n      .test {\n        height: 10px;\n      }\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"height\": scalePx2dp(5)\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.postcss disable scalePx2dp",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 135,
                "column": 39,
                "index": 3082
            },
            "line": 135,
            "code": "  it('config.postcss disable scalePx2dp', async () => {\n    const config = {\n      rn: {\n        postcss: {\n          options: {\n            plugins: []\n          },\n          scalable: false\n        }\n      }\n    };\n    const css = await run({\n      src: `\n        .test {\n          height: 10px;\n        }\n      `,\n      config\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"height\": 5\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.alias in css",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 160,
                "column": 25,
                "index": 3490
            },
            "line": 160,
            "code": "  it('config.alias in css', async () => {\n    const css = await run(\"@import '@/b.css';\");\n    expect(css).toEqual(getWrapedCSS(`{\n  \"brn\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.alias in sass",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 168,
                "column": 26,
                "index": 3668
            },
            "line": 168,
            "code": "  it('config.alias in sass', async () => {\n    const css = await run({\n      src: \"@import '@/b.scss';\",\n      filename: './__tests__/styles/a.scss'\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "config.alias in less",
            "suites": [
                "style transform with config options"
            ],
            "updatePoint": {
                "line": 179,
                "column": 26,
                "index": 3909
            },
            "line": 179,
            "code": "  it('config.alias in less', async () => {\n    const css = await run({\n      src: \"@import '@/b.less';\",\n      filename: './__tests__/styles/a.less'\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "config.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".css transform basic",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 29,
                "column": 26,
                "index": 751
            },
            "line": 29,
            "code": "  it('.css transform basic', async () => {\n    const css = await run(`\n      .test {\n        color: red;\n        height: 10px;\n      }\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\",\n    \"height\": scalePx2dp(5)\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".css transform viewport unit",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 43,
                "column": 34,
                "index": 1018
            },
            "line": 43,
            "code": "  it('.css transform viewport unit', async () => {\n    const css = await run(`\n      .test {\n        height: 10vh;\n      }\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"height\": scaleVu2dp(10, 'vh')\n  },\n  \"__viewportUnits\": true\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".css transform @import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 56,
                "column": 28,
                "index": 1273
            },
            "line": 56,
            "code": "  it('.css transform @import', async () => {\n    const css = await run(`\n      @import './b.css';\n      .test {\n        color: red;\n      }\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"brn\": {\n    \"color\": \"red\"\n  },\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".css import source omit extension",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 72,
                "column": 39,
                "index": 1554
            },
            "line": 72,
            "code": "  it('.css import source omit extension', async () => {\n    const css = await run(\"@import './b';\", './__tests__/styles/a.css');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"brn\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".sass transform basic",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 80,
                "column": 27,
                "index": 1757
            },
            "line": 80,
            "code": "  it('.sass transform basic', async () => {\n    const css = await run(`\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.scss');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".sass transform @import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 93,
                "column": 29,
                "index": 2002
            },
            "line": 93,
            "code": "  it('.sass transform @import', async () => {\n    const css = await run(`\n      @import './b.scss';\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.scss');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  },\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".sass transform @import css file",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 109,
                "column": 38,
                "index": 2310
            },
            "line": 109,
            "code": "  it('.sass transform @import css file', async () => {\n    const css = await run(`\n      @import './c.css';\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.scss');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"c\": {\n    \"color\": \"red\"\n  },\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".sass transform @import with mixins",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 125,
                "column": 41,
                "index": 2620
            },
            "line": 125,
            "code": "  it('.sass transform @import with mixins', async () => {\n    const css = await run(`\n      @import './mixins.scss';\n      .test {\n        color: red;\n        @include hairline(width);\n      }\n    `, './__tests__/styles/a.scss');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\",\n    \"width\": scalePx2dp(0.5)\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".sass import source omit extension",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 140,
                "column": 40,
                "index": 2966
            },
            "line": 140,
            "code": "  it('.sass import source omit extension', async () => {\n    const css = await run(\"@import './b';\", './__tests__/styles/a.scss');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".less transform basic",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 148,
                "column": 27,
                "index": 3168
            },
            "line": 148,
            "code": "  it('.less transform basic', async () => {\n    const css = await run(`\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.less');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".less transform @import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 160,
                "column": 29,
                "index": 3408
            },
            "line": 160,
            "code": "  it('.less transform @import', async () => {\n    const css = await run(`\n      @import './b.less';\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.less');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  },\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".less tranform nest import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 176,
                "column": 32,
                "index": 3710
            },
            "line": 176,
            "code": "  it('.less tranform nest import', async () => {\n    const css = await run(`\n      @import './c.less';\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.less');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"nest\": {\n    \"color\": \"red\"\n  },\n  \"c\": {\n    \"color\": \"red\"\n  },\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".less tranform node_modules file import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 195,
                "column": 45,
                "index": 4061
            },
            "line": 195,
            "code": "  it('.less tranform node_modules file import', async () => {\n    const css = await run(\"@import 'less/test/browser/css/global-vars/simple.css';\", './__tests__/styles/a.less');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".less import source omit extension",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 203,
                "column": 40,
                "index": 4320
            },
            "line": 203,
            "code": "  it('.less import source omit extension', async () => {\n    const css = await run(\"@import './b';\", './__tests__/styles/a.less');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".styl transform basic",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 211,
                "column": 27,
                "index": 4522
            },
            "line": 211,
            "code": "  it('.styl transform basic', async () => {\n    const css = await run(`\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.styl');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"#f00\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": ".styl transform @import",
            "suites": [
                "style transform"
            ],
            "updatePoint": {
                "line": 223,
                "column": 29,
                "index": 4763
            },
            "line": 223,
            "code": "  it('.styl transform @import', async () => {\n    const css = await run(`\n      @import './b.styl';\n      .test {\n        color: red;\n      }\n    `, './__tests__/styles/a.styl');\n    expect(css).toEqual(getWrapedCSS(`{\n  \"b\": {\n    \"color\": \"#f00\"\n  },\n  \"test\": {\n    \"color\": \"#f00\"\n  }\n}`));\n  });",
            "file": "index.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "postcss cross platform conditional compile",
            "suites": [
                "style transform in cross platform"
            ],
            "updatePoint": {
                "line": 28,
                "column": 48,
                "index": 787
            },
            "line": 28,
            "code": "  it('postcss cross platform conditional compile', async () => {\n    const css = await run(`\n      .test {\n        color: red;\n      }\n      /*  #ifdef  rn  */\n      .rn { width: 100px }\n      /*  #endif  */\n      /*  #ifndef  rn  */\n      .h5 { errSet: 100px }\n      /*  #endif  */\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"color\": \"red\"\n  },\n  \"rn\": {\n    \"width\": scalePx2dp(50)\n  }\n}`));\n  });",
            "file": "platform.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "not surport style",
            "suites": [
                "style transform in cross platform"
            ],
            "updatePoint": {
                "line": 49,
                "column": 23,
                "index": 1183
            },
            "line": 49,
            "code": "  it('not surport style', async () => {\n    const css = await run(`\n      .test {\n        o: 0.5;\n        background: red;\n      }\n    `);\n    expect(css).toEqual(getWrapedCSS(`{\n  \"test\": {\n    \"o\": 0.5,\n    \"backgroundColor\": \"red\"\n  }\n}`));\n  });",
            "file": "platform.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "nest sass import cross platform",
            "suites": [
                "style transform in cross platform"
            ],
            "updatePoint": {
                "line": 63,
                "column": 37,
                "index": 1447
            },
            "line": 63,
            "code": "  it('nest sass import cross platform', async () => {\n    const css = await run({\n      filename: './__tests__/styles/a.scss',\n      src: \"@import './c.scss';\"\n    });\n    expect(css).toEqual(getWrapedCSS(`{\n  \"drn\": {\n    \"color\": \"red\"\n  },\n  \"crn\": {\n    \"color\": \"red\"\n  }\n}`));\n  });",
            "file": "platform.spec.js",
            "skipped": false,
            "dir": "packages/taro-rn-style-transformer/__tests__"
        },
        {
            "name": "app",
            "suites": [
                "app-loader"
            ],
            "updatePoint": {
                "line": 28,
                "column": 9,
                "index": 530
            },
            "line": 28,
            "code": "  it('app', () => {\n    const result = run();\n    expect(result).toMatchSnapshot();\n  });",
            "file": "app.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-transformer/__tests__"
        },
        {
            "name": "page",
            "suites": [
                "page-loader"
            ],
            "updatePoint": {
                "line": 48,
                "column": 10,
                "index": 964
            },
            "line": 48,
            "code": "  it('page', () => {\n    const result = run();\n    expect(result).toMatch(Home);\n  });",
            "file": "page.spec.ts",
            "skipped": false,
            "dir": "packages/taro-rn-transformer/__tests__"
        },
        {
            "name": "should startDeviceMotionListening success",
            "suites": [
                "deviceMotion"
            ],
            "updatePoint": {
                "line": 4,
                "column": 47,
                "index": 173
            },
            "line": 4,
            "code": "  it('should startDeviceMotionListening success', () => {\n    const success = jest.fn();\n    const fail = jest.fn();\n    const complete = jest.fn();\n    Taro.startDeviceMotionListening({\n      success,\n      fail,\n      complete\n    });\n    expect(success.mock.calls.length).toBe(1);\n    expect(fail.mock.calls.length).toBe(0);\n    expect(success.mock.calls.length).toBe(1);\n  });",
            "file": "deviceMotion.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "should stopDeviceMotionListening success",
            "suites": [
                "deviceMotion"
            ],
            "updatePoint": {
                "line": 17,
                "column": 46,
                "index": 553
            },
            "line": 17,
            "code": "  it('should stopDeviceMotionListening success', () => {\n    const success = jest.fn();\n    const fail = jest.fn();\n    const complete = jest.fn();\n    Taro.stopDeviceMotionListening({\n      success,\n      fail,\n      complete\n    });\n    expect(success.mock.calls.length).toBe(1);\n    expect(fail.mock.calls.length).toBe(0);\n    expect(success.mock.calls.length).toBe(1);\n  });",
            "file": "deviceMotion.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "should hideKeyboard success",
            "suites": [
                "keyboard"
            ],
            "updatePoint": {
                "line": 4,
                "column": 33,
                "index": 155
            },
            "line": 4,
            "code": "  it('should hideKeyboard success', () => {\n    const success = jest.fn();\n    const fail = jest.fn();\n    const complete = jest.fn();\n    Taro.hideKeyboard({\n      success,\n      fail,\n      complete\n    });\n    expect(success.mock.calls.length).toBe(1);\n    expect(fail.mock.calls.length).toBe(0);\n    expect(success.mock.calls.length).toBe(1);\n  });",
            "file": "keyboard.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "should onKeyboardHeightChange success",
            "suites": [
                "keyboard"
            ],
            "updatePoint": {
                "line": 17,
                "column": 43,
                "index": 518
            },
            "line": 17,
            "code": "  it('should onKeyboardHeightChange success', () => {\n    expect.assertions(4);\n    const endCoordinates = {\n      height: 200\n    };\n    const change = jest.fn().mockImplementation(({\n      height\n    }) => expect(height).toBe(endCoordinates.height));\n    Taro.onKeyboardHeightChange(change);\n    DeviceEventEmitter.emit('keyboardDidShow', {\n      endCoordinates\n    });\n    expect(change.mock.calls.length).toBe(1);\n    endCoordinates.height = 0;\n    DeviceEventEmitter.emit('keyboardDidHide', {\n      endCoordinates\n    });\n    expect(change.mock.calls.length).toBe(2);\n    Taro.offKeyboardHeightChange(change);\n  });",
            "file": "keyboard.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "should offKeyboardHeightChange success",
            "suites": [
                "keyboard"
            ],
            "updatePoint": {
                "line": 37,
                "column": 44,
                "index": 1140
            },
            "line": 37,
            "code": "  it('should offKeyboardHeightChange success', () => {\n    expect.assertions(4);\n    const endCoordinates = {\n      height: 200\n    };\n    const firstChange = jest.fn();\n    const secondChange = jest.fn();\n    Taro.onKeyboardHeightChange(firstChange);\n    Taro.onKeyboardHeightChange(secondChange);\n    DeviceEventEmitter.emit('keyboardDidShow', {\n      endCoordinates\n    });\n    expect(firstChange.mock.calls.length).toBe(1);\n    expect(secondChange.mock.calls.length).toBe(1);\n    Taro.offKeyboardHeightChange(secondChange);\n    DeviceEventEmitter.emit('keyboardDidHide', {\n      endCoordinates\n    });\n    expect(firstChange.mock.calls.length).toBe(2);\n    expect(secondChange.mock.calls.length).toBe(1);\n  });",
            "file": "keyboard.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "RN请求入参同于微信小程序",
            "suites": [
                "request",
                "request"
            ],
            "updatePoint": {
                "line": 61,
                "column": 21,
                "index": 1538
            },
            "line": 61,
            "code": "    it('RN请求入参同于微信小程序', () => {\n      const url = 'https://test.taro.com/v1';\n      const expectData = JSON.stringify({\n        data: 'calorie'\n      });\n      const options = {\n        url,\n        dataType: 'json',\n        complete: jest.fn(),\n        success: res => {\n          expect(JSON.stringify(res.data)).toMatch(expectData);\n        },\n        fail: jest.fn()\n      };\n      Taro.request(options);\n    });",
            "file": "request.test.ts",
            "skipped": false,
            "dir": "packages/taro-rn/src/__tests__"
        },
        {
            "name": "setAttribute: class",
            "suites": [
                "Class",
                "attribute"
            ],
            "updatePoint": {
                "line": 8,
                "column": 27,
                "index": 288
            },
            "line": 8,
            "code": "    it('setAttribute: class', () => {\n      const div = document.createElement('div');\n      div.className = 'test';\n      expect(div.className).toBe('test');\n      div.className = 'test1 test2';\n      expect(div.className).toBe('test1 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "removeAttribute: class",
            "suites": [
                "Class",
                "attribute"
            ],
            "updatePoint": {
                "line": 15,
                "column": 30,
                "index": 544
            },
            "line": 15,
            "code": "    it('removeAttribute: class', () => {\n      const div = document.createElement('div');\n      div.className = 'test';\n      div.removeAttribute('class');\n      expect(div.className).toBe('');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "get value",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 23,
                "column": 17,
                "index": 771
            },
            "line": 23,
            "code": "    it('get value', () => {\n      const div = document.createElement('div');\n      expect(div.classList.value).toBe('');\n      div.classList.add('test1');\n      expect(div.classList.value).toBe('test1');\n      div.classList.add('test2');\n      expect(div.classList.value).toBe('test1 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "get init value",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 31,
                "column": 22,
                "index": 1077
            },
            "line": 31,
            "code": "    it('get init value', () => {\n      const div = document.createElement('div');\n      div.className = 'test1 test2';\n      expect(div.classList.value).toBe('test1 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "get length",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 36,
                "column": 18,
                "index": 1255
            },
            "line": 36,
            "code": "    it('get length', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      expect(div.classList.length).toBe(1);\n      div.classList.add('test2');\n      expect(div.classList.length).toBe(2);\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger add function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 43,
                "column": 28,
                "index": 1507
            },
            "line": 43,
            "code": "    it('trigger add function', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      expect(div.className).toBe('test1');\n      div.classList.add('test1');\n      expect(div.className).toBe('test1');\n      div.classList.add('test2');\n      expect(div.className).toBe('test1 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger remove function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 52,
                "column": 31,
                "index": 1843
            },
            "line": 52,
            "code": "    it('trigger remove function', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      div.classList.add('test2');\n      div.classList.remove('test2');\n      expect(div.className).toBe('test1');\n      div.classList.remove('test3');\n      expect(div.className).toBe('test1');\n      div.classList.remove('test1');\n      expect(div.className).toBe('');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger toggle function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 63,
                "column": 31,
                "index": 2245
            },
            "line": 63,
            "code": "    it('trigger toggle function', () => {\n      const div = document.createElement('div');\n      div.classList.toggle('test');\n      expect(div.className).toBe('test');\n      div.classList.toggle('test');\n      expect(div.className).toBe('');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger replace function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 70,
                "column": 32,
                "index": 2497
            },
            "line": 70,
            "code": "    it('trigger replace function', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      div.classList.add('test2');\n      div.classList.replace('test1', 'test3');\n      expect(div.className).toBe('test3 test2');\n      div.classList.replace('test4', 'test5');\n      expect(div.className).toBe('test3 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger contains function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 79,
                "column": 33,
                "index": 2858
            },
            "line": 79,
            "code": "    it('trigger contains function', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      div.classList.add('test2');\n      expect(div.classList.contains('test1')).toBe(true);\n      expect(div.classList.contains('test3')).toBe(false);\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "trigger toString function",
            "suites": [
                "Class",
                "classList"
            ],
            "updatePoint": {
                "line": 86,
                "column": 33,
                "index": 3144
            },
            "line": 86,
            "code": "    it('trigger toString function', () => {\n      const div = document.createElement('div');\n      div.classList.add('test1');\n      div.classList.add('test2');\n      expect(div.classList.toString()).toBe('test1 test2');\n    });",
            "file": "class.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "childeNodes 有任何类型",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 15,
                "column": 25,
                "index": 500
            },
            "line": 15,
            "code": "    it('childeNodes 有任何类型', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(container.childNodes.length).toBe(2);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "nextSibling",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 23,
                "column": 19,
                "index": 820
            },
            "line": 23,
            "code": "    it('nextSibling', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(div.nextSibling).toBe(text);\n      expect(text.nextSibling).toBe(null);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "previousSibling",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 32,
                "column": 23,
                "index": 1178
            },
            "line": 32,
            "code": "    it('previousSibling', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(div.previousSibling).toBe(null);\n      expect(text.previousSibling).toBe(div);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "insertBefore",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 41,
                "column": 20,
                "index": 1540
            },
            "line": 41,
            "code": "    it('insertBefore', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      const div2 = document.createElement('div');\n      container.appendChild(div);\n      container.insertBefore(text, div);\n      container.insertBefore(div2);\n      expect(text.nextSibling).toBe(div);\n      expect(div.previousSibling).toBe(text);\n      expect(div2.nextSibling).toBe(null);\n      expect(div.nextSibling).toBe(div2);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "appendChild",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 54,
                "column": 19,
                "index": 2074
            },
            "line": 54,
            "code": "    it('appendChild', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(div.previousSibling).toBe(null);\n      expect(text.previousSibling).toBe(div);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replaceChild",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 63,
                "column": 20,
                "index": 2436
            },
            "line": 63,
            "code": "    it('replaceChild', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      const div2 = document.createElement('div');\n      container.replaceChild(div2, div);\n      expect(container.childNodes.length).toBe(2);\n      expect(text.previousSibling).toBe(div2);\n      expect(div.parentNode).toBe(null);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "removeChild",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 75,
                "column": 19,
                "index": 2935
            },
            "line": 75,
            "code": "    it('removeChild', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      container.removeChild(div);\n      expect(div.parentNode).toBe(null);\n      expect(container.childNodes.length).toBe(1);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "firstChild",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 85,
                "column": 18,
                "index": 3329
            },
            "line": 85,
            "code": "    it('firstChild', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(container.firstChild).toBe(div);\n      container.textContent = '';\n      expect(container.firstChild).toBe(null);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "lastChild",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 95,
                "column": 17,
                "index": 3723
            },
            "line": 95,
            "code": "    it('lastChild', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(container.lastChild).toBe(text);\n      container.textContent = '';\n      expect(container.lastChild).toBe(null);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "hasChildNodes",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 105,
                "column": 21,
                "index": 4120
            },
            "line": 105,
            "code": "    it('hasChildNodes', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(container.hasChildNodes()).toBe(true);\n      container.textContent = '';\n      expect(container.hasChildNodes()).toBe(false);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "insertAdjacentHTML",
            "suites": [
                "DOM",
                "node"
            ],
            "updatePoint": {
                "line": 115,
                "column": 26,
                "index": 4535
            },
            "line": 115,
            "code": "    it('insertAdjacentHTML', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.firstChild.appendChild(text);\n      const divBeforeInsert = container.firstChild;\n      divBeforeInsert.insertAdjacentHTML('beforebegin', '<view />');\n      divBeforeInsert.insertAdjacentHTML('afterbegin', '<button />');\n      divBeforeInsert.insertAdjacentHTML('beforeend', '<input />');\n      divBeforeInsert.insertAdjacentHTML('afterend', '<image />');\n      expect(container.childNodes.length).toBe(3);\n      expect(container.childNodes[0].nodeName).toBe('view');\n      expect(container.childNodes[1].nodeName).toBe('div');\n      expect(container.childNodes[2].nodeName).toBe('image');\n      const divAfterInsert = container.childNodes[1];\n      expect(divAfterInsert.childNodes.length).toBe(3);\n      expect(divAfterInsert.firstChild.nodeName).toBe('button');\n      expect(divAfterInsert.lastChild.nodeName).toBe('input');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "nodeValue",
            "suites": [
                "DOM",
                "text"
            ],
            "updatePoint": {
                "line": 137,
                "column": 17,
                "index": 5644
            },
            "line": 137,
            "code": "    it('nodeValue', () => {\n      const t = document.createTextNode('t1');\n      expect(t.nodeValue).toBe('t1');\n      t.textContent = 't2';\n      expect(t.nodeValue).toBe('t2');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "textContext",
            "suites": [
                "DOM",
                "text"
            ],
            "updatePoint": {
                "line": 143,
                "column": 19,
                "index": 5833
            },
            "line": 143,
            "code": "    it('textContext', () => {\n      const t = document.createTextNode('t1');\n      expect(t.textContent).toBe('t1');\n      t.nodeValue = 't2';\n      expect(t.textContent).toBe('t2');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "nodeType",
            "suites": [
                "DOM",
                "text"
            ],
            "updatePoint": {
                "line": 149,
                "column": 16,
                "index": 6021
            },
            "line": 149,
            "code": "    it('nodeType', () => {\n      const t = document.createTextNode('t1');\n      expect(t.nodeType).toBe(3);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "tagName 是大写",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 155,
                "column": 19,
                "index": 6176
            },
            "line": 155,
            "code": "    it('tagName 是大写', () => {\n      const node = document.createElement('div');\n      expect(node.tagName).toBe('DIV');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "id 和 className 可以直接设置",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 159,
                "column": 29,
                "index": 6314
            },
            "line": 159,
            "code": "    it('id 和 className 可以直接设置', () => {\n      const node = document.createElement('div');\n      node.className = 'className';\n      node.id = 'id';\n      expect(node.getAttribute('class')).toBe('className');\n      expect(node.getAttribute('id')).toBe('id');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "children 只包括 Element",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 166,
                "column": 28,
                "index": 6579
            },
            "line": 166,
            "code": "    it('children 只包括 Element', () => {\n      const container = document.createElement('container');\n      const div = document.createElement('div');\n      const text = document.createTextNode('text');\n      container.appendChild(div);\n      container.appendChild(text);\n      expect(container.children.length).toBe(1);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "hasAttribute",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 174,
                "column": 20,
                "index": 6898
            },
            "line": 174,
            "code": "    it('hasAttribute', () => {\n      const div = document.createElement('div');\n      div.setAttribute('readOnly', true);\n      expect(div.hasAttribute('readOnly')).toBe(true);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "hasAttributes",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 179,
                "column": 21,
                "index": 7084
            },
            "line": 179,
            "code": "    it('hasAttributes', () => {\n      const div = document.createElement('div');\n      div.setAttribute('readOnly', true);\n      expect(div.hasAttributes()).toBe(true);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "focus",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 184,
                "column": 13,
                "index": 7253
            },
            "line": 184,
            "code": "    it('focus', () => {\n      const input = document.createElement('input');\n      input.focus();\n      expect(input.getAttribute('focus')).toBe(true);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "blur",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 189,
                "column": 12,
                "index": 7412
            },
            "line": 189,
            "code": "    it('blur', () => {\n      const input = document.createElement('input');\n      input.blur();\n      expect(input.getAttribute('focus')).toBe(false);\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "setAttribute: style",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 194,
                "column": 27,
                "index": 7586
            },
            "line": 194,
            "code": "    it('setAttribute: style', () => {\n      const div = document.createElement('div');\n      div.setAttribute('style', 'color: red');\n      expect(div.cssText).toBe('color: red;');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "setAttribute: id",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 199,
                "column": 24,
                "index": 7772
            },
            "line": 199,
            "code": "    it('setAttribute: id', () => {\n      const div = document.createElement('div');\n      div.setAttribute('id', '10080');\n      expect(div.getAttribute('id')).toBe('10080');\n      div.props.id = '10080';\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "setAttribute: data-set",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 205,
                "column": 30,
                "index": 7991
            },
            "line": 205,
            "code": "    it('setAttribute: data-set', () => {\n      const div = document.createElement('div');\n      div.setAttribute('data-test', '10080');\n      expect(div.getAttribute('data-test')).toBe('10080');\n      expect(div.dataset.test).toBe('10080');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "setAttribute: others",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 211,
                "column": 28,
                "index": 8238
            },
            "line": 211,
            "code": "    it('setAttribute: others', () => {\n      const div = document.createElement('div');\n      div.setAttribute('test', '10080');\n      expect(div.getAttribute('test')).toBe('10080');\n      div.props.test = '10080';\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "removeAttribute: style",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 217,
                "column": 30,
                "index": 8463
            },
            "line": 217,
            "code": "    it('removeAttribute: style', () => {\n      const div = document.createElement('div');\n      div.setAttribute('style', 'color: red');\n      div.removeAttribute('style');\n      expect(div.cssText).toBe('');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "removeAttribute: id",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 223,
                "column": 27,
                "index": 8677
            },
            "line": 223,
            "code": "    it('removeAttribute: id', () => {\n      const div = document.createElement('div');\n      div.id = 'test';\n      div.removeAttribute('id');\n      expect(div.id).toBe('');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "textContext",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 229,
                "column": 19,
                "index": 8851
            },
            "line": 229,
            "code": "    it('textContext', () => {\n      function App() {\n        return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", null, \" a \")), \"b\", /*#__PURE__*/React.createElement(\"span\", null, \"c\"));\n      }\n      const div = document.createElement('div');\n      // eslint-disable-next-line react/no-deprecated\n      ReactDOM.render( /*#__PURE__*/React.createElement(App, null), div);\n      expect(div.textContent).toBe(' a bc');\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "创建 A 标签",
            "suites": [
                "DOM",
                "element"
            ],
            "updatePoint": {
                "line": 238,
                "column": 15,
                "index": 9360
            },
            "line": 238,
            "code": "    it('创建 A 标签', () => {\n      const a = document.createElement('a');\n      expect(a.nodeName).toBe('a');\n      expect(a.tagName).toBe('A');\n      a.setAttribute('href', 'https://taro.com:8080/path/add?name=lizong');\n      expect({\n        href: a.href,\n        protocol: a.protocol,\n        host: a.host,\n        search: a.search,\n        hash: a.hash,\n        hostname: a.hostname,\n        port: a.port,\n        pathname: a.pathname\n      }).toEqual({\n        hash: '',\n        host: 'taro.com:8080',\n        hostname: 'taro.com',\n        href: 'https://taro.com:8080/path/add?name=lizong',\n        pathname: '/path/add',\n        port: '8080',\n        protocol: 'https:',\n        search: '?name=lizong'\n      });\n      a.href = 'https://taro.com:9090/path/index#id3';\n      expect({\n        href: a.href,\n        protocol: a.protocol,\n        host: a.host,\n        search: a.search,\n        hash: a.hash,\n        hostname: a.hostname,\n        port: a.port,\n        pathname: a.pathname\n      }).toEqual({\n        hash: '#id3',\n        host: 'taro.com:9090',\n        hostname: 'taro.com',\n        href: 'https://taro.com:9090/path/index#id3',\n        pathname: '/path/index',\n        port: '9090',\n        protocol: 'https:',\n        search: ''\n      });\n    });",
            "file": "dom.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "can addEventListener",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 7,
                "column": 26,
                "index": 200
            },
            "line": 7,
            "code": "  it('can addEventListener', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    div.addEventListener('tap', spy);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    // mini program event system will do this for us\n    div.dispatchEvent(event);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "event once should work",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 17,
                "column": 28,
                "index": 511
            },
            "line": 17,
            "code": "  it('event once should work', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    div.addEventListener('tap', spy, {\n      once: true\n    });\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "可以多次 dispatchEvent",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 30,
                "column": 24,
                "index": 857
            },
            "line": 30,
            "code": "  it('可以多次 dispatchEvent', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    div.addEventListener('tap', spy);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(2);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "同一事件可以添加多个 handlers",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 41,
                "column": 25,
                "index": 1178
            },
            "line": 41,
            "code": "  it('同一事件可以添加多个 handlers', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    const spy2 = jest.fn();\n    div.addEventListener('tap', spy);\n    div.addEventListener('tap', spy2);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(1);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove 一个 handler 不会影响其它 handler",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 54,
                "column": 38,
                "index": 1586
            },
            "line": 54,
            "code": "  it('remove 一个 handler 不会影响其它 handler', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    const spy2 = jest.fn();\n    div.addEventListener('tap', spy);\n    div.addEventListener('tap', spy2);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(1);\n    div.removeEventListener('tap', spy);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(2);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "添加事件名会被小写化",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 71,
                "column": 16,
                "index": 2116
            },
            "line": 71,
            "code": "  it('添加事件名会被小写化', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    const spy2 = jest.fn();\n    div.addEventListener('Tap', spy);\n    div.addEventListener('TAP', spy2);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(1);\n    div.removeEventListener('tap', spy);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(2);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove 空事件也不会报错",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 88,
                "column": 21,
                "index": 2651
            },
            "line": 88,
            "code": "  it('remove 空事件也不会报错', () => {\n    const div = document.createElement('div');\n    expect(() => {\n      div.removeEventListener('tap', jest.fn());\n    }).not.toThrow();\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "可以阻止冒泡",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 94,
                "column": 12,
                "index": 2817
            },
            "line": 94,
            "code": "  it('可以阻止冒泡', () => {\n    const container = document.createElement('container');\n    const div = document.createElement('div');\n    container.appendChild(div);\n    const containerSpy = jest.fn();\n    const divSpy = jest.fn();\n    container.addEventListener('tap', containerSpy);\n    div.addEventListener('tap', e => {\n      divSpy();\n      e.stopPropagation();\n    });\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    container.dispatchEvent(event); // buble event\n    expect(divSpy).toBeCalledTimes(1);\n    expect(containerSpy).toBeCalledTimes(0);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "非冒泡事件不会在父元素触发",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 113,
                "column": 19,
                "index": 3436
            },
            "line": 113,
            "code": "  it('非冒泡事件不会在父元素触发', () => {\n    const eventName = 'unknown';\n    const container = document.createElement('container');\n    const div = document.createElement('div');\n    container.appendChild(div);\n    const containerSpy = jest.fn();\n    const divSpy = jest.fn();\n    container.addEventListener(eventName, containerSpy);\n    div.addEventListener(eventName, divSpy);\n    const event = runtime.createEvent({\n      type: eventName\n    }, div);\n    div.dispatchEvent(event);\n    container.dispatchEvent(event); // buble event\n    expect(divSpy).toBeCalledTimes(1);\n    expect(containerSpy).toBeCalledTimes(1);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "preventDefault",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 130,
                "column": 20,
                "index": 4052
            },
            "line": 130,
            "code": "  it('preventDefault', () => {\n    const container = document.createElement('container');\n    const div = document.createElement('div');\n    container.appendChild(div);\n    const containerSpy = jest.fn();\n    const divSpy = jest.fn();\n    container.addEventListener('tap', containerSpy);\n    div.addEventListener('tap', e => {\n      divSpy();\n      e.preventDefault();\n    });\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(divSpy).toBeCalledTimes(1);\n    expect(event.defaultPrevented).toBe(true);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "stopImmediatePropagation()",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 148,
                "column": 32,
                "index": 4634
            },
            "line": 148,
            "code": "  it('stopImmediatePropagation()', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    const spy2 = jest.fn();\n    div.addEventListener('tap', spy2);\n    div.addEventListener('tap', e => {\n      spy();\n      e.stopImmediatePropagation();\n    });\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(0);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "dispatchEvent 也会被小写",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 164,
                "column": 25,
                "index": 5087
            },
            "line": 164,
            "code": "  it('dispatchEvent 也会被小写', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    const spy2 = jest.fn();\n    div.addEventListener('tap', spy2);\n    div.addEventListener('tap', e => {\n      spy();\n      e.stopImmediatePropagation();\n    });\n    const event = runtime.createEvent({\n      type: 'Tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n    expect(spy2).toBeCalledTimes(0);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "可以发送没有监听的事件",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 180,
                "column": 17,
                "index": 5532
            },
            "line": 180,
            "code": "  it('可以发送没有监听的事件', () => {\n    const container = document.createElement('container');\n    const div = document.createElement('div');\n    container.appendChild(div);\n    const containerSpy = jest.fn();\n    const divSpy = jest.fn();\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    container.dispatchEvent(event); // buble event\n    expect(divSpy).toBeCalledTimes(0);\n    expect(containerSpy).toBeCalledTimes(0);\n  });",
            "file": "event.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "eventSource.removeNode should remove node' sid & uid",
            "suites": [
                "eventSource"
            ],
            "updatePoint": {
                "line": 21,
                "column": 59,
                "index": 527
            },
            "line": 21,
            "code": "  it('eventSource.removeNode should remove node\\' sid & uid', () => {\n    const node = createDiv('target');\n    const {\n      sid,\n      uid\n    } = node;\n    expect(eventSource.has(sid)).toBeTruthy();\n    expect(eventSource.has(uid)).toBeTruthy();\n    eventSource.removeNode(node);\n    expect(eventSource.has(sid)).toBeFalsy();\n    expect(eventSource.has(uid)).toBeFalsy();\n  });",
            "file": "eventSource.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "eventSource.removeNodeTree should remove entire node tree",
            "suites": [
                "eventSource"
            ],
            "updatePoint": {
                "line": 44,
                "column": 63,
                "index": 1033
            },
            "line": 44,
            "code": "  it('eventSource.removeNodeTree should remove entire node tree', () => {\n    const container = createDiv();\n    const list = createDiv('list');\n    const target = createDiv();\n    target.appendChild(createDiv('target'));\n    list.appendChild(createDiv());\n    list.appendChild(target);\n    list.appendChild(createDiv());\n    container.appendChild(createDiv());\n    container.appendChild(list);\n    container.appendChild(createDiv());\n    expect(eventSource.size).toBe(10);\n    eventSource.removeNodeTree(list);\n    expect(eventSource.size).toBe(3);\n    expect(eventSource.has(list.sid)).toBeFalsy();\n    expect(eventSource.has(list.uid)).toBeFalsy();\n    expect(eventSource.has(target.sid)).toBeFalsy();\n    expect(eventSource.has('target')).toBeFalsy();\n  });",
            "file": "eventSource.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "bom",
            "suites": [
                "style"
            ],
            "updatePoint": {
                "line": 6,
                "column": 9,
                "index": 146
            },
            "line": 6,
            "code": "  it('bom', () => {\n    const window = runtime.window;\n    expect(window).not.toBeUndefined();\n    expect(window.navigator).not.toBeUndefined();\n    expect(window.document).not.toBeUndefined();\n    expect(runtime.document).toBe(window.document);\n    expect(runtime.navigator).toBe(window.navigator);\n  });",
            "file": "exports.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "dom",
            "suites": [
                "style"
            ],
            "updatePoint": {
                "line": 14,
                "column": 9,
                "index": 452
            },
            "line": 14,
            "code": "  it('dom', () => {\n    expect(runtime.TaroElement).not.toBeUndefined();\n    expect(runtime.TaroNode).not.toBeUndefined();\n    expect(runtime.TaroText).not.toBeUndefined();\n  });",
            "file": "exports.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "event",
            "suites": [
                "style"
            ],
            "updatePoint": {
                "line": 19,
                "column": 11,
                "index": 633
            },
            "line": 19,
            "code": "  it('event', () => {\n    expect(runtime.createEvent).not.toBeUndefined();\n    expect(runtime.TaroEvent).not.toBeUndefined();\n  });",
            "file": "exports.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "dsl",
            "suites": [
                "style"
            ],
            "updatePoint": {
                "line": 23,
                "column": 9,
                "index": 763
            },
            "line": 23,
            "code": "  it('dsl', () => {\n    expect(runtime.createComponentConfig).not.toBeUndefined();\n    expect(runtime.createPageConfig).not.toBeUndefined();\n  });",
            "file": "exports.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "tag selector",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 23,
                "column": 18,
                "index": 737
            },
            "line": 23,
            "code": "  it('tag selector', () => {\n    const html = `\n      <style>\n        span {\n          color: red;\n          font-size: 10;\n        }\n      </style>\n      <div class=\"parent\">\n        <span></span>\n        <span></span>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[0];\n    expect(el0.style.cssText).toBe('color: red; font-size: 10;');\n    expect(el1.style.cssText).toBe('color: red; font-size: 10;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "id selector",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 42,
                "column": 17,
                "index": 1226
            },
            "line": 42,
            "code": "  it('id selector', () => {\n    const html = `\n      <style>\n        #foo {\n          color: red;\n          font-size: 10;\n          transition: color ease-in 300ms;\n          border: 1px solid red;\n        }\n      </style>\n      <div class=\"parent\">\n        <div></div>\n        <div id=\"foo\"></div>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el = res[0].children[1];\n    expect(el.style.cssText).toBe('color: red; font-size: 10; transition: color ease-in 300ms; border: 1px solid red;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "class selector",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 61,
                "column": 20,
                "index": 1751
            },
            "line": 61,
            "code": "  it('class selector', () => {\n    const html = `\n      <style>\n        .parent {\n          background: red\n        }\n        .item {\n          font-weight: bold;\n        }\n        .child-1 {\n          color: red;\n          font-size: 10;\n        }\n        .item.child-2 {\n          margin: 10px;\n        }\n      </style>\n      <div class=\"parent\" style=\"border: 1px;padding: 10px;\">\n        <div class=\"item child-1\"></div>\n        <div class=\"item child-2\"></div>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0];\n    const el1 = res[0].children[0];\n    const el2 = res[0].children[1];\n    expect(el0.style.cssText).toBe('background: red; border: 1px; padding: 10px;');\n    expect(el1.style.cssText).toBe('font-weight: bold; color: red; font-size: 10;');\n    expect(el2.style.cssText).toBe('font-weight: bold; margin: 10px;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "attributes selector",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 91,
                "column": 25,
                "index": 2625
            },
            "line": 91,
            "code": "  it('attributes selector', () => {\n    const html = `\n      <style>\n        [name=\"title\"]   {\n          color: red;\n        }\n        [name=\"body\"][content='hello-world'] {\n          font-size: 10;\n        }\n      </style>\n      <div>\n        <div name=\"title\"></div>\n        <div name=\"body\" content=\"hello-world\"></div>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[1];\n    expect(el0.style.cssText).toBe('color: red;');\n    expect(el1.style.cssText).toBe('font-size: 10;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "attributes selector with space",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 112,
                "column": 36,
                "index": 3203
            },
            "line": 112,
            "code": "  it('attributes selector with space', () => {\n    const html = `\n      <style>\n        [    name = \"title\"]   {\n          color: red;\n        }\n        [name = \"body\"][content = 'hello-world'] {\n          font-size: 10;\n        }\n      </style>\n      <div>\n        <div name=\"title\"></div>\n        <div name=\"body\" content=\"hello-world\"></div>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[1];\n    expect(el0.style.cssText).toBe('color: red;');\n    expect(el1.style.cssText).toBe('font-size: 10;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "combination",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 133,
                "column": 17,
                "index": 3772
            },
            "line": 133,
            "code": "  it('combination', () => {\n    const html = `\n      <style>\n        div[name=\"top\"].wrapper#foo.title.fixed[size=\"large\"] {\n          background: red\n        }\n      </style>\n      <div id=\"foo\" class=\"wrapper title fixed\" name=\"top\" size=\"large\"></div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0];\n    expect(el0.style.cssText).toBe('background: red;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "selector list",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 146,
                "column": 19,
                "index": 4162
            },
            "line": 146,
            "code": "  it('selector list', () => {\n    const html = `\n      <style>\n        .item.child-1, #foo {\n          color: red;\n        }\n      </style>\n      <div class=\"parent\">\n        <div class=\"item child-1\"></div>\n        <div class=\"item child-2\"></div>\n        <div id=\"foo\"></div>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[2];\n    expect(el0.style.cssText).toBe('color: red;');\n    expect(el1.style.cssText).toBe('color: red;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "descendant combinator",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 165,
                "column": 27,
                "index": 4688
            },
            "line": 165,
            "code": "  it('descendant combinator', () => {\n    const html = `\n      <style>\n        div.parent span.item {\n          background: red\n        }\n        .parent .inner[name='title'] {\n          color: blue;\n        }\n        .ul .li {\n          width: 100%;\n        }\n      </style>\n      <div class=\"parent\" id=\"body\">\n        <span class=\"item child-1\"></span>\n        <div class=\"item child-2\">\n          <div name='title' class='inner'></div>\n        </div>\n        <div class='ul'>\n          <div class=\"li\"></div>\n          <div class=\"li\"></div>\n        </div>\n      </div>\n      <div>\n        <div name='title' class='inner'></div>\n        <div class=\"li\"></div>\n      </div>\n    `;\n    const res = parser(html, document).filter(isElement);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[1];\n    const el2 = res[0].children[1].children[0];\n    const el3 = res[1].children[0];\n    const el4 = res[0].children[2].children[0];\n    const el5 = res[0].children[2].children[1];\n    const el6 = res[1].children[1];\n    expect(el0.style.cssText).toBe('background: red;');\n    expect(el1.style.cssText).toBe('');\n    expect(el2.style.cssText).toBe('color: blue;');\n    expect(el3.style.cssText).toBe('');\n    expect(el4.style.cssText).toBe('width: 100%;');\n    expect(el5.style.cssText).toBe('width: 100%;');\n    expect(el6.style.cssText).toBe('');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "child combinator",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 209,
                "column": 22,
                "index": 6051
            },
            "line": 209,
            "code": "  it('child combinator', () => {\n    const html = `\n      <style>\n        .ul>.li {\n          width: 100%;\n        }\n        .inner .ul  >   .li {\n          color: red;\n        }\n      </style>\n      <div class='ul'>\n        <div class=\"li\"></div>\n        <div class='inner'>\n          <div class=\"li\">\n            <div class='ul'>\n              <div class=\"li\"></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class=\"ul li\">\n            <div class='li'></div>\n          </div>\n        </div>\n      </div>\n    `;\n    const res = parser(html, document).filter(isElement);\n    const el1 = res[0].children[0];\n    const el2 = res[0].children[1].children[0];\n    const el3 = res[0].children[1].children[0].children[0].children[0];\n    const el4 = res[0].children[2].children[0].children[0];\n    expect(el1.style.cssText).toBe('width: 100%;');\n    expect(el2.style.cssText).toBe('');\n    expect(el3.style.cssText).toBe('width: 100%; color: red;');\n    expect(el4.style.cssText).toBe('width: 100%;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "adjacent sibling combinator",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 245,
                "column": 33,
                "index": 7101
            },
            "line": 245,
            "code": "  it('adjacent sibling combinator', () => {\n    const html = `\n      <style>\n        .first+.li.second #inner {\n          width: 100%;\n        }\n        .first + .third {\n          color: red;\n        }\n        .second + .third {\n          color: blue;\n        }\n      </style>\n      <div class='ul'>\n        <div class=\"li first\"></div>\n        <div class='li second'>\n          <div id='inner'></div>\n        </div>\n        <div class='li third'></div>\n      </div>\n    `;\n    const res = parser(html, document).filter(isElement);\n    const el1 = res[0].children[0];\n    const el2 = res[0].children[1];\n    const el3 = res[0].children[1].children[0];\n    const el4 = res[0].children[2];\n    expect(el1.style.cssText).toBe('');\n    expect(el2.style.cssText).toBe('');\n    expect(el3.style.cssText).toBe('width: 100%;');\n    expect(el4.style.cssText).toBe('color: blue;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "general sibling combinator",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 276,
                "column": 32,
                "index": 7979
            },
            "line": 276,
            "code": "  it('general sibling combinator', () => {\n    const html = `\n      <style>\n        .third ~ .second {\n          font-size: 10px;\n        }\n        .first ~ .third {\n          color: red;\n        }\n        .first~.li.third #inner {\n          width: 100%;\n        }\n      </style>\n      <div class='ul'>\n        <div class=\"li first\"></div>\n        <div class='li second'></div>\n        <div class='li third'>\n          <div id='inner'></div>\n        </div>\n      </div>\n    `;\n    const res = parser(html, document).filter(isElement);\n    const el1 = res[0].children[0];\n    const el2 = res[0].children[1];\n    const el3 = res[0].children[2];\n    const el4 = res[0].children[2].children[0];\n    expect(el1.style.cssText).toBe('');\n    expect(el2.style.cssText).toBe('');\n    expect(el3.style.cssText).toBe('color: red;');\n    expect(el4.style.cssText).toBe('width: 100%;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "enter",
            "suites": [
                "html with <style>"
            ],
            "updatePoint": {
                "line": 307,
                "column": 11,
                "index": 8838
            },
            "line": 307,
            "code": "  it('enter', () => {\n    const html = `\n      <style>\n        span {\n          color: red;\n          font-size: 10;\n        }\n      </style>\n      <div class=\"parent\">\n        <span>测试换行\\nxxxx</span>\n        <span>测试换行xxxx</span>\n      </div>\n    `;\n    const res = parser(html, document);\n    const el0 = res[0].children[0];\n    const el1 = res[0].children[1];\n    expect(el0.style.cssText).toBe('color: red; font-size: 10;');\n    expect(el0.childNodes[0]._value).toBe('测试换行\\nxxxx');\n    expect(el1.style.cssText).toBe('color: red; font-size: 10;');\n    expect(el1.childNodes[0]._value).toBe('测试换行xxxx');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "scanSkipTag should skip script",
            "suites": [
                "html with tag should be skipped"
            ],
            "updatePoint": {
                "line": 330,
                "column": 36,
                "index": 9532
            },
            "line": 330,
            "code": "  it('scanSkipTag should skip script', () => {\n    const s = '<script type=\"text/javascript\"> </script><div></div>';\n    const tokens = new Scaner(s).scan();\n    expect(tokens[1].content).toBe('script');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "html should be rendered successfully",
            "suites": [
                "html with tag should be skipped"
            ],
            "updatePoint": {
                "line": 335,
                "column": 42,
                "index": 9748
            },
            "line": 335,
            "code": "  it('html should be rendered successfully', () => {\n    const s = '<script type=\"text/javascript\"> </script><div>hello world</div>';\n    const res = parser(s, document);\n    expect(res[0].props.class).toBe('h5-script');\n    expect(res[1].childNodes[0]._value).toBe('hello world');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "cssText should be sort",
            "suites": [
                "sort style"
            ],
            "updatePoint": {
                "line": 343,
                "column": 28,
                "index": 10057
            },
            "line": 343,
            "code": "  it('cssText should be sort', () => {\n    const html = `\n      <style>\n        #id {\n          color: blue;\n        }\n        .class {\n          font-size: 12px;\n        }\n        div {\n          color: red;\n          font-size: 14px;\n        }\n      </style>\n      <div id=\"id\" class=\"class\"></div>\n    `;\n    const res = parser(html, document);\n    const node = res[0];\n    expect(node.style.cssText).toBe('color: blue; font-size: 12px;');\n  });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "transformText function works",
            "suites": [
                "sort style",
                "html with transformText"
            ],
            "updatePoint": {
                "line": 364,
                "column": 36,
                "index": 10560
            },
            "line": 364,
            "code": "    it('transformText function works', () => {\n      options.html.transformText = taroText => {\n        taroText._value = 'c';\n        return taroText;\n      };\n      const html = '<span>a</span>';\n      const res = parser(html, document);\n      const node = res[0];\n      expect(node.childNodes[0]._value).toBe('c');\n    });",
            "file": "html.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "parseUrl",
            "suites": [
                "location"
            ],
            "updatePoint": {
                "line": 3,
                "column": 14,
                "index": 97
            },
            "line": 3,
            "code": "  it('parseUrl', () => {\n    const parseUrl = runtime.parseUrl;\n\n    // full url\n    {\n      const {\n        href,\n        origin,\n        protocol,\n        hostname,\n        host,\n        port,\n        pathname,\n        search,\n        hash\n      } = parseUrl('https://taro.com:8080/hello/world?name=hongxin&age=18#a=1&b=2');\n      expect(href).toBe('https://taro.com:8080/hello/world?name=hongxin&age=18#a=1&b=2');\n      expect(origin).toBe('https://taro.com');\n      expect(protocol).toBe('https:');\n      expect(hostname).toBe('taro.com');\n      expect(host).toBe('taro.com:8080');\n      expect(port).toBe('8080');\n      expect(pathname).toBe('/hello/world');\n      expect(search).toBe('?name=hongxin&age=18');\n      expect(hash).toBe('#a=1&b=2');\n    }\n    {\n      const {\n        href,\n        origin,\n        protocol,\n        hostname,\n        host,\n        port,\n        pathname,\n        search,\n        hash\n      } = parseUrl('http://taro.com/hello/world#a=1&b=2?name=hongxin&age=18');\n      expect(href).toBe('http://taro.com/hello/world#a=1&b=2?name=hongxin&age=18');\n      expect(origin).toBe('http://taro.com');\n      expect(protocol).toBe('http:');\n      expect(hostname).toBe('taro.com');\n      expect(host).toBe('taro.com');\n      expect(port).toBe('');\n      expect(pathname).toBe('/hello/world');\n      expect(search).toBe('');\n      expect(hash).toBe('#a=1&b=2?name=hongxin&age=18');\n    }\n\n    // the url should be correct\n    {\n      const {\n        href\n      } = parseUrl('/a/b');\n      expect(href).toBe('');\n    }\n\n    // pathname should be \"/\" if not exist in url\n    {\n      const {\n        protocol,\n        pathname,\n        search\n      } = parseUrl('//taro.com?a=1');\n      expect(protocol).toBe('https:');\n      expect(pathname).toBe('/');\n      expect(search).toBe('?a=1');\n    }\n  });",
            "file": "location.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "URLSearchParams",
            "suites": [
                "location"
            ],
            "updatePoint": {
                "line": 72,
                "column": 21,
                "index": 1926
            },
            "line": 72,
            "code": "  it('URLSearchParams', () => {\n    const URLSearchParams = runtime.URLSearchParams;\n\n    // query is empty\n    {\n      const searchParams = new URLSearchParams('');\n      expect(searchParams.keys()).toEqual([]);\n    }\n    // constructor\n    {\n      const searchParams = new URLSearchParams('?a=1&b=2');\n      expect(searchParams.keys()).toEqual(['a', 'b']);\n      expect(searchParams.get('a')).toBe('1');\n      expect(searchParams.get('b')).toBe('2');\n    }\n    {\n      const searchParams = new URLSearchParams('a=1&b=2');\n      expect(searchParams.keys()).toEqual(['a', 'b']);\n      expect(searchParams.get('a')).toBe('1');\n      expect(searchParams.get('b')).toBe('2');\n    }\n    {\n      const searchParams = new URLSearchParams([['a', '1'], ['b', '2']]);\n      expect(searchParams.keys()).toEqual(['a', 'b']);\n      expect(searchParams.get('a')).toBe('1');\n      expect(searchParams.get('b')).toBe('2');\n    }\n    {\n      const searchParams = new URLSearchParams({\n        a: '1',\n        b: '2'\n      });\n      expect(searchParams.keys()).toEqual(['a', 'b']);\n      expect(searchParams.get('a')).toBe('1');\n      expect(searchParams.get('b')).toBe('2');\n    }\n\n    // methods\n    {\n      const searchParams = new URLSearchParams({\n        a: '1'\n      });\n      expect(searchParams.get('a')).toBe('1');\n      searchParams.set('b', '2');\n      expect(searchParams.get('b')).toBe('2');\n      expect(searchParams.has('b')).toBe(true);\n      searchParams.delete('b');\n      expect(searchParams.has('b')).toBe(false);\n      searchParams.set('c', '3');\n      expect(searchParams.toString()).toBe('a=1&c=3');\n      searchParams.append('c', '4');\n      expect(searchParams.toString()).toBe('a=1&c=3&c=4');\n    }\n    {\n      const searchParams = new URLSearchParams('a=1&a=2');\n      expect(searchParams.getAll('a')).toEqual(['1', '2']);\n    }\n  });",
            "file": "location.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "URL",
            "suites": [
                "location"
            ],
            "updatePoint": {
                "line": 130,
                "column": 9,
                "index": 3760
            },
            "line": 130,
            "code": "  it('URL', () => {\n    const URL = runtime.URL;\n\n    // constructor\n    try {\n      // eslint-disable-next-line\n      new URL();\n    } catch (error) {\n      expect(error instanceof TypeError).toBe(true);\n      expect(error.message).toMatch('Invalid URL');\n    }\n    try {\n      // eslint-disable-next-line\n      new URL('//taro.com');\n    } catch (error) {\n      expect(error instanceof TypeError).toBe(true);\n      expect(error.message).toMatch('Invalid URL');\n    }\n    try {\n      // eslint-disable-next-line\n      new URL('/a/b', '/c/d');\n    } catch (error) {\n      expect(error instanceof TypeError).toBe(true);\n      expect(error.message).toMatch('Invalid base URL');\n    }\n    try {\n      // eslint-disable-next-line\n      new URL('http://taro.com', '');\n    } catch (error) {\n      expect(error instanceof TypeError).toBe(true);\n      expect(error.message).toMatch('Invalid base URL');\n    }\n    {\n      const url = new URL('http://taro.com');\n      expect(url.toString()).toBe('http://taro.com/');\n    }\n    {\n      const url = new URL('http://taro.com/');\n      expect(url.toString()).toBe('http://taro.com/');\n      expect(url.pathname).toBe('/');\n    }\n    {\n      const url = new URL('?a=1#b=2', 'https://taro.com');\n      expect(url.toString()).toBe('https://taro.com/?a=1#b=2');\n    }\n\n    // cases from https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n    {\n      const baseUrl = 'https://developer.mozilla.org';\n      const A = new URL('/', baseUrl);\n      expect(A.toString()).toBe('https://developer.mozilla.org/');\n      const B = new URL(baseUrl);\n      expect(B.toString()).toBe('https://developer.mozilla.org/');\n      const C = new URL('en-US/docs', B);\n      expect(C.toString()).toBe('https://developer.mozilla.org/en-US/docs');\n      const D = new URL('/en-US/docs', B);\n      expect(D.toString()).toBe('https://developer.mozilla.org/en-US/docs');\n      const E = new URL('/en-US/docs', D);\n      expect(E.toString()).toBe('https://developer.mozilla.org/en-US/docs');\n      const F = new URL('/en-US/docs', A);\n      expect(F.toString()).toBe('https://developer.mozilla.org/en-US/docs');\n      const G = new URL('/en-US/docs', 'https://developer.mozilla.org/fr-FR/toto');\n      expect(G.toString()).toBe('https://developer.mozilla.org/en-US/docs');\n      const H = new URL('', 'https://example.com/?query=1');\n      expect(H.toString()).toBe('https://example.com/?query=1');\n      const I = new URL('//foo.com', 'https://example.com');\n      expect(I.toString()).toBe('https://foo.com/');\n    }\n\n    // searchParams\n    {\n      const url = new URL('http://taro.com/?a=1&b=2');\n      url.searchParams.append('c', '3');\n      expect(url.searchParams.keys()).toEqual(['a', 'b', 'c']);\n      expect(url.searchParams.get('a')).toBe('1');\n      expect(url.searchParams.get('b')).toBe('2');\n      expect(url.searchParams.get('c')).toBe('3');\n      url.searchParams.append('d', '4');\n      expect(url.toString()).toBe('http://taro.com/?a=1&b=2&c=3&d=4');\n    }\n\n    // setters\n    {\n      const url = new URL('http://taro.com');\n      expect(url.toString()).toBe('http://taro.com/');\n      url.protocol = 'https:';\n      expect(url.toString()).toBe('https://taro.com/');\n      url.port = '8080';\n      expect(url.toString()).toBe('https://taro.com:8080/');\n      url.pathname = '/hello/world';\n      expect(url.toString()).toBe('https://taro.com:8080/hello/world');\n      url.hostname = 'example.com';\n      expect(url.toString()).toBe('https://example.com:8080/hello/world');\n      url.hostname = 'taro.com';\n      expect(url.toString()).toBe('https://taro.com:8080/hello/world');\n      url.search = '?a=1';\n      expect(url.toString()).toBe('https://taro.com:8080/hello/world?a=1');\n      url.hash = '#b=2';\n      expect(url.toString()).toBe('https://taro.com:8080/hello/world?a=1#b=2');\n      url.host = 'example.com:8081';\n      expect(url.toString()).toBe('https://example.com:8081/hello/world?a=1#b=2');\n      url.origin = 'http://taro.com:8080';\n      expect(url.toString()).toBe('http://taro.com:8080/hello/world?a=1#b=2');\n      url.href = 'https://taro.com/user?name=hongxin#age=18';\n      expect(url.toString()).toBe('https://taro.com/user?name=hongxin#age=18');\n      expect(url.search).toBe('?name=hongxin');\n    }\n  });",
            "file": "location.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "Location",
            "suites": [
                "location"
            ],
            "updatePoint": {
                "line": 238,
                "column": 14,
                "index": 8028
            },
            "line": 238,
            "code": "  it('Location', () => {\n    const Location = runtime.Location;\n    const Current = runtime.Current;\n    const raw = JSON.stringify(Current);\n    const fakerWindow = {\n      trigger() {}\n    };\n    {\n      Current.router = {\n        path: '',\n        params: {\n          a: '1',\n          b: '2'\n        }\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      expect(location.toString()).toBe('https://taro.com/?a=1&b=2');\n      expect(location.protocol).toBe('https:');\n      expect(location.host).toBe('taro.com');\n      expect(location.port).toBe('');\n      expect(location.pathname).toBe('/');\n      expect(location.search).toBe('?a=1&b=2');\n      expect(location.hash).toBe('');\n    }\n    {\n      Current.router = {\n        path: 'pages/index/index',\n        params: {\n          a: '1',\n          b: '2'\n        }\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      expect(location.toString()).toBe('https://taro.com/pages/index/index?a=1&b=2');\n      expect(location.protocol).toBe('https:');\n      expect(location.host).toBe('taro.com');\n      expect(location.port).toBe('');\n      expect(location.pathname).toBe('/pages/index/index');\n      expect(location.search).toBe('?a=1&b=2');\n      expect(location.hash).toBe('');\n      expect(location.hostname).toBe('taro.com');\n      expect(location.origin).toBe('https://taro.com');\n      expect(location.href).toBe('https://taro.com/pages/index/index?a=1&b=2');\n    }\n\n    // setters\n    {\n      Current.router = {\n        path: '',\n        params: {\n          a: '1',\n          b: '2'\n        }\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      expect(location.href).toBe('https://taro.com/?a=1&b=2');\n      location.protocol = 'http:';\n      expect(location.protocol).toBe('https:');\n      location.hostname = 'hongxin.com';\n      expect(location.hostname).toBe('taro.com');\n      location.port = '8080';\n      expect(location.port).toBe('');\n      location.pathname = '/hello/world';\n      expect(location.pathname).toBe('/hello/world');\n      location.search = '?c=3&d=4';\n      expect(location.search).toBe('?c=3&d=4');\n      location.hash = '#e=5&f=6';\n      expect(location.hash).toBe('#e=5&f=6');\n      location.origin = 'http://hongxin.com:8080';\n      expect(location.href).toBe('https://taro.com/hello/world?c=3&d=4#e=5&f=6');\n      location.href = 'https://taro.com/pages?name=hongxin#age=18';\n      expect(location.href).toBe('https://taro.com/pages?name=hongxin#age=18');\n    }\n\n    // more cases for pathname\n    {\n      Current.router = {\n        path: '',\n        params: {}\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      expect(location.pathname).toBe('/');\n      location.pathname = '/a/b';\n      expect(location.pathname).toBe('/a/b');\n      location.pathname = './c';\n      expect(location.pathname).toBe('/c');\n      location.pathname = '/a/b';\n      expect(location.pathname).toBe('/a/b');\n      location.pathname = '../d';\n      expect(location.pathname).toBe('/d');\n      location.pathname = '/a/b';\n      expect(location.pathname).toBe('/a/b');\n      location.pathname = '../../f';\n      expect(location.pathname).toBe('/f');\n      location.pathname = '../../';\n      expect(location.pathname).toBe('/');\n      location.pathname = 'a/b';\n      expect(location.pathname).toBe('/a/b');\n    }\n\n    // methods\n    {\n      Current.router = {\n        path: '',\n        params: {}\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      expect(location.href).toBe('https://taro.com/');\n      location.replace('https://taro.com/hello/world?name=hongxin#age=18');\n      expect(location.href).toBe('https://taro.com/hello/world?name=hongxin#age=18');\n    }\n\n    // hashchange\n    {\n      Current.router = {\n        path: '',\n        params: {}\n      };\n      const mockTrigger = jest.fn();\n      const location = new Location({\n        window: {\n          trigger: mockTrigger\n        }\n      });\n      expect(location.href).toBe('https://taro.com/');\n      location.hash = '#a=1';\n      expect(location.href).toBe('https://taro.com/#a=1');\n      expect(mockTrigger).toHaveBeenCalledTimes(1);\n      location.replace('https://taro.com/hello/world?name=hongxin#age=18');\n      expect(location.href).toBe('https://taro.com/hello/world?name=hongxin#age=18');\n      expect(mockTrigger).toHaveBeenCalledTimes(2);\n    }\n\n    // CONTEXT_ACTIONS\n    {\n      Current.router = {\n        path: '',\n        params: {\n          a: '1'\n        }\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      location.replace('https://taro.com/hello/world?b=2');\n      const cache = location.cache;\n\n      // CONTEXT_ACTIONS.INIT\n      location.trigger('0');\n      expect(location.href).toBe('https://taro.com/?a=1');\n\n      // CONTEXT_ACTIONS.RESTORE\n      const pageId = 'page_' + Date.now();\n      location.trigger('1', pageId);\n      location.replace('https://taro.com/hello/world?b=2');\n      expect(location.href).toBe('https://taro.com/hello/world?b=2');\n      expect(cache.has(pageId)).toBe(true);\n      expect(cache.get(pageId).lastHref).toBe('https://taro.com/?a=1');\n\n      // CONTEXT_ACTIONS.RECOVER\n      location.trigger('2', pageId);\n      expect(location.href).toBe('https://taro.com/?a=1');\n\n      // CONTEXT_ACTIONS.DESTORY\n      location.trigger('3', pageId);\n      expect(cache.has(pageId)).toBe(false);\n    }\n    Object.assign(Current, JSON.parse(raw));\n  });",
            "file": "location.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "History",
            "suites": [
                "location"
            ],
            "updatePoint": {
                "line": 417,
                "column": 13,
                "index": 13586
            },
            "line": 417,
            "code": "  it('History', () => {\n    const Location = runtime.Location;\n    const History = runtime.History;\n    const Current = runtime.Current;\n    const raw = JSON.stringify(Current);\n    const fakerWindow = {\n      trigger() {}\n    };\n    {\n      Current.router = {\n        path: '/1',\n        params: {}\n      };\n      const location = new Location({\n        window: fakerWindow\n      });\n      const history = new History(location, {\n        window: fakerWindow\n      });\n      expect(history.length).toBe(1);\n      expect(history.state).toBe(null);\n      location.href = 'https://taro.com/2';\n      expect(history.length).toBe(2);\n      expect(history.state).toBe(null);\n      location.pathname = '/3';\n      location.pathname = '/4';\n      location.pathname = '/5';\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      history.back();\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      history.go(-1);\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      history.go(-2);\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      history.forward();\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      history.go(3);\n      expect(history.length).toBe(5);\n      expect(history.state).toBe(null);\n      expect(location.href).toBe('https://taro.com/5');\n      history.pushState({\n        i: 6\n      }, '6', 'https://taro.com/6');\n      expect(history.length).toBe(6);\n      expect(history.state).toMatchObject({\n        i: 6\n      });\n      expect(location.href).toBe('https://taro.com/6');\n      history.replaceState({\n        i: 7\n      }, '7', 'https://taro.com/7');\n      expect(history.length).toBe(6);\n      expect(history.state).toMatchObject({\n        i: 7\n      });\n      expect(location.href).toBe('https://taro.com/7');\n    }\n\n    // CONTEXT_ACTIONS\n    {\n      Current.router = {\n        path: '/1',\n        params: {}\n      };\n      const mockTrigger = jest.fn();\n      const location = new Location({\n        window: fakerWindow\n      });\n      const history = new History(location, {\n        window: {\n          trigger: mockTrigger\n        }\n      });\n      const cache = history.cache;\n      history.pushState(null, '', 'https://taro.com/1');\n      expect(history.length).toBe(2);\n\n      // CONTEXT_ACTIONS.INIT\n      history.trigger('0');\n      expect(history.length).toBe(1);\n\n      // CONTEXT_ACTIONS.RESTORE\n      const pageId = 'page_' + Date.now();\n      history.pushState(null, '', 'https://taro.com/2');\n      history.trigger('1', pageId);\n      expect(cache.has(pageId)).toBe(true);\n      expect(Object.is(cache.get(pageId).location, location));\n      expect(cache.get(pageId).cur).toBe(1);\n\n      // CONTEXT_ACTIONS.RECOVER\n      history.trigger('2', pageId);\n      expect(history.length).toBe(2);\n      expect(location.href).toBe('https://taro.com/2');\n\n      // CONTEXT_ACTIONS.DESTORY\n      history.trigger('3', pageId);\n      expect(cache.has(pageId)).toBe(false);\n    }\n    Object.assign(Current, JSON.parse(raw));\n  });",
            "file": "location.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "first node",
            "suites": [
                "MutationObserver",
                "should observe appendChild mutations"
            ],
            "updatePoint": {
                "line": 18,
                "column": 18,
                "index": 545
            },
            "line": 18,
            "code": "    it('first node', async () => {\n      expect.assertions(2);\n      const target = document.createElement('div');\n      const child = document.createElement('div');\n      observer.observe(target, {\n        childList: true\n      });\n      target.appendChild(child);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          removedNodes: [],\n          addedNodes: [child]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "sibling node",
            "suites": [
                "MutationObserver",
                "should observe appendChild mutations"
            ],
            "updatePoint": {
                "line": 38,
                "column": 20,
                "index": 1142
            },
            "line": 38,
            "code": "    it('sibling node', async () => {\n      expect.assertions(2);\n      const target = document.createElement('div');\n      const sibling = document.createElement('div');\n      const child = document.createElement('view');\n      target.appendChild(sibling);\n      observer.observe(target, {\n        childList: true\n      });\n      target.appendChild(child);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: sibling,\n          nextSibling: null,\n          removedNodes: [],\n          addedNodes: [child]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "tree depth > 1",
            "suites": [
                "MutationObserver",
                "should observe appendChild mutations"
            ],
            "updatePoint": {
                "line": 60,
                "column": 22,
                "index": 1833
            },
            "line": 60,
            "code": "    it('tree depth > 1', async () => {\n      expect.assertions(2);\n      const target = document.createElement('div');\n      const div = document.createElement('div');\n      const child = document.createElement('view');\n      target.appendChild(child);\n      observer.observe(target, {\n        childList: true,\n        subtree: true\n      });\n      child.appendChild(div);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: child,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          removedNodes: [],\n          addedNodes: [div]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "only one node",
            "suites": [
                "MutationObserver",
                "should observe replaceChild mutation"
            ],
            "updatePoint": {
                "line": 85,
                "column": 21,
                "index": 2596
            },
            "line": 85,
            "code": "    it('only one node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const div = document.createElement('div');\n      const view = document.createElement('view');\n      target.appendChild(view);\n      observer.observe(target, {\n        childList: true\n      });\n      target.replaceChild(div, view);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          addedNodes: [div],\n          removedNodes: [view]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "multi nodes - replace first node with new node",
            "suites": [
                "MutationObserver",
                "should observe replaceChild mutation"
            ],
            "updatePoint": {
                "line": 108,
                "column": 54,
                "index": 3365
            },
            "line": 108,
            "code": "    it('multi nodes - replace first node with new node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      const last = document.createElement('view');\n      const newNode = document.createElement('view');\n      target.appendChild(first);\n      target.appendChild(last);\n      observer.observe(target, {\n        childList: true\n      });\n      target.replaceChild(newNode, first);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(2);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: last,\n          addedNodes: [newNode],\n          removedNodes: [first]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "multi nodes - replace last node with new node",
            "suites": [
                "MutationObserver",
                "should observe replaceChild mutation"
            ],
            "updatePoint": {
                "line": 133,
                "column": 53,
                "index": 4232
            },
            "line": 133,
            "code": "    it('multi nodes - replace last node with new node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      const last = document.createElement('view');\n      const newNode = document.createElement('view');\n      target.appendChild(first);\n      target.appendChild(last);\n      observer.observe(target, {\n        childList: true\n      });\n      target.replaceChild(newNode, last);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(2);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: first,\n          nextSibling: null,\n          addedNodes: [newNode],\n          removedNodes: [last]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "multi nodes - remove sibling node",
            "suites": [
                "MutationObserver",
                "should observe replaceChild mutation"
            ],
            "updatePoint": {
                "line": 158,
                "column": 41,
                "index": 5086
            },
            "line": 158,
            "code": "    it('multi nodes - remove sibling node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      const last = document.createElement('view');\n      target.appendChild(first);\n      target.appendChild(last);\n      observer.observe(target, {\n        childList: true\n      });\n      target.replaceChild(first, last);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          addedNodes: [first],\n          removedNodes: [last]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "first node",
            "suites": [
                "MutationObserver",
                "should observe removeChild mutations"
            ],
            "updatePoint": {
                "line": 184,
                "column": 18,
                "index": 5923
            },
            "line": 184,
            "code": "    it('first node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      target.appendChild(first);\n      observer.observe(target, {\n        childList: true\n      });\n      target.removeChild(first);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(0);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          removedNodes: [first]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "sibling node",
            "suites": [
                "MutationObserver",
                "should observe removeChild mutations"
            ],
            "updatePoint": {
                "line": 205,
                "column": 20,
                "index": 6577
            },
            "line": 205,
            "code": "    it('sibling node', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      const last = document.createElement('view');\n      target.appendChild(first);\n      target.appendChild(last);\n      observer.observe(target, {\n        childList: true\n      });\n      target.removeChild(first);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: last,\n          removedNodes: [first]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "multi sibling nodes",
            "suites": [
                "MutationObserver",
                "should observe removeChild mutations"
            ],
            "updatePoint": {
                "line": 228,
                "column": 27,
                "index": 7321
            },
            "line": 228,
            "code": "    it('multi sibling nodes', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const first = document.createElement('div');\n      const second = document.createElement('view');\n      const last = document.createElement('view');\n      target.appendChild(first);\n      target.appendChild(second);\n      target.appendChild(last);\n      observer.observe(target, {\n        childList: true\n      });\n      target.removeChild(second);\n      target.removeChild(last);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(2);\n        expect(target.childNodes.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: target,\n          type: 'childList',\n          previousSibling: first,\n          nextSibling: last,\n          removedNodes: [second]\n        }, {\n          target: target,\n          type: 'childList',\n          previousSibling: first,\n          nextSibling: null,\n          removedNodes: [last]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "tree depth > 1",
            "suites": [
                "MutationObserver",
                "should observe removeChild mutations"
            ],
            "updatePoint": {
                "line": 260,
                "column": 22,
                "index": 8344
            },
            "line": 260,
            "code": "    it('tree depth > 1', async () => {\n      expect.assertions(3);\n      const target = document.createElement('div');\n      const div = document.createElement('div');\n      const view = document.createElement('view');\n      target.appendChild(div);\n      div.appendChild(view);\n      observer.observe(target, {\n        childList: true,\n        subtree: true\n      });\n      div.removeChild(view);\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(target.childNodes.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: div,\n          type: 'childList',\n          previousSibling: null,\n          nextSibling: null,\n          removedNodes: [view]\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add a single class value",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 287,
                "column": 34,
                "index": 9200
            },
            "line": 287,
            "code": "      it('add a single class value', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.classList.add('bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add a single class value to existing values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 307,
                "column": 53,
                "index": 9853
            },
            "line": 307,
            "code": "      it('add a single class value to existing values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.classList.add('foo');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.classList.add('bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add multiple class values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 328,
                "column": 35,
                "index": 10521
            },
            "line": 328,
            "code": "      it('add multiple class values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.classList.add('foo');\n        el.classList.add('bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(2);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: ''\n          }, {\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add multiple class values to existing values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 355,
                "column": 54,
                "index": 11376
            },
            "line": 355,
            "code": "      it('add multiple class values to existing values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.classList.add('foo');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.classList.add('bar');\n        el.classList.add('baz');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(2);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo'\n          }, {\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo bar'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace single existing class value",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 383,
                "column": 45,
                "index": 12262
            },
            "line": 383,
            "code": "      it('replace single existing class value', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.classList.add('foo');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.classList.replace('foo', 'bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace multiple existing class values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 404,
                "column": 48,
                "index": 12954
            },
            "line": 404,
            "code": "      it('replace multiple existing class values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.classList.add('foo');\n        el.classList.add('bar');\n        el.classList.add('baz');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.classList.replace('foo', 'bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo bar baz'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "toggle to remove",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 428,
                "column": 26,
                "index": 13734
            },
            "line": 428,
            "code": "      it('toggle to remove', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.className = 'foo';\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.classList.toggle('foo');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "toggle to add",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "classList"
            ],
            "updatePoint": {
                "line": 450,
                "column": 23,
                "index": 14426
            },
            "line": 450,
            "code": "      it('toggle to add', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.className = 'foo';\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.classList.toggle('bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'class',\n            oldValue: 'foo'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add a single style value",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 474,
                "column": 34,
                "index": 15167
            },
            "line": 474,
            "code": "      it('add a single style value', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.width = '10px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add multiple style values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 494,
                "column": 35,
                "index": 15802
            },
            "line": 494,
            "code": "      it('add multiple style values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.style.width = '10px';\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.style.height = '12px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: 'width: 10px;'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add single style value via setProperty",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 516,
                "column": 48,
                "index": 16529
            },
            "line": 516,
            "code": "      it('add single style value via setProperty', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.setProperty('width', '12px');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add multiple style values via setProperty",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 536,
                "column": 51,
                "index": 17194
            },
            "line": 536,
            "code": "      it('add multiple style values via setProperty', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.setProperty('width', '10px');\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.setProperty('height', '12px');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add single style value via cssText",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 557,
                "column": 44,
                "index": 17900
            },
            "line": 557,
            "code": "      it('add single style value via cssText', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.cssText = 'width: 10px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "add multi style values via cssText",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 577,
                "column": 44,
                "index": 18553
            },
            "line": 577,
            "code": "      it('add multi style values via cssText', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.cssText = 'width: 10px; height: 12px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove singe style value",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 597,
                "column": 34,
                "index": 19210
            },
            "line": 597,
            "code": "      it('remove singe style value', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.width = '10px';\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.width = '';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove singe style value via setProperty",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 618,
                "column": 50,
                "index": 19889
            },
            "line": 618,
            "code": "      it('remove singe style value via setProperty', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.setProperty('width', '10px');\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.setProperty('width', '');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove singe style value via removeProperty",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 639,
                "column": 53,
                "index": 20599
            },
            "line": 639,
            "code": "      it('remove singe style value via removeProperty', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.setProperty('width', '10px');\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.removeProperty('width');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove singe style value via cssText",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 660,
                "column": 46,
                "index": 21301
            },
            "line": 660,
            "code": "      it('remove singe style value via cssText', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.cssText = 'width: 10px';\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.cssText = '';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace singe style value",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 681,
                "column": 35,
                "index": 21976
            },
            "line": 681,
            "code": "      it('replace singe style value', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.width = '10px';\n        observer.observe(target, {\n          attributes: true,\n          subtree: true\n        });\n        el.style.width = '12px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: null\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace multiple style values",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 702,
                "column": 39,
                "index": 22648
            },
            "line": 702,
            "code": "      it('replace multiple style values', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.width = '10px';\n        el.style.height = '12px';\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.style.width = '14px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: 'width: 10px; height: 12px;'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace singe style value setProperty",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 725,
                "column": 47,
                "index": 23421
            },
            "line": 725,
            "code": "      it('replace singe style value setProperty', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.setProperty('width', '10px');\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.style.setProperty('width', '12px');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: 'width: 10px;'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "replace multiple style values via cssText",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "style"
            ],
            "updatePoint": {
                "line": 750,
                "column": 51,
                "index": 24282
            },
            "line": 750,
            "code": "      it('replace multiple style values via cssText', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        el.style.cssText = 'width: 10px; height: 12px';\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.style.cssText = 'width: 12px; height: 14px';\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'style',\n            oldValue: 'width: 10px; height: 12px;'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "set new attribute",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "attributes"
            ],
            "updatePoint": {
                "line": 774,
                "column": 27,
                "index": 25090
            },
            "line": 774,
            "code": "      it('set new attribute', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.setAttribute('data-foo', 'bar');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'data-foo',\n            oldValue: ''\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "overwrite attribute",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "attributes"
            ],
            "updatePoint": {
                "line": 795,
                "column": 29,
                "index": 25766
            },
            "line": 795,
            "code": "      it('overwrite attribute', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.setAttribute('data-foo', 'bar');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.setAttribute('data-foo', 'baz');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'data-foo',\n            oldValue: 'bar'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "remove attribute",
            "suites": [
                "MutationObserver",
                "should observe attribute mutations",
                "attributes"
            ],
            "updatePoint": {
                "line": 817,
                "column": 26,
                "index": 26486
            },
            "line": 817,
            "code": "      it('remove attribute', async () => {\n        expect.assertions(2);\n        const target = document.createElement('div');\n        const el = document.createElement('div');\n        el.setAttribute('data-foo', 'bar');\n        target.appendChild(el);\n        observer.observe(target, {\n          attributes: true,\n          attributeOldValue: true,\n          subtree: true\n        });\n        el.removeAttribute('data-foo');\n        return Promise.resolve().then(() => {\n          expect(mutations.length).toBe(1);\n          expect(mutations).toEqual([{\n            target: el,\n            type: 'attributes',\n            attributeName: 'data-foo',\n            oldValue: 'bar'\n          }]);\n        });\n      });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "set textContent",
            "suites": [
                "MutationObserver",
                "should observe characterData mutations"
            ],
            "updatePoint": {
                "line": 842,
                "column": 23,
                "index": 27274
            },
            "line": 842,
            "code": "    it('set textContent', async () => {\n      expect.assertions(2);\n      const target = document.createElement('div');\n      const el = document.createTextNode('original text');\n      target.appendChild(el);\n      observer.observe(target, {\n        characterData: true,\n        characterDataOldValue: true,\n        subtree: true\n      });\n      el.textContent = 'new text';\n      return Promise.resolve().then(() => {\n        expect(mutations.length).toBe(1);\n        expect(mutations).toEqual([{\n          target: el,\n          type: 'characterData',\n          oldValue: 'original text'\n        }]);\n      });\n    });",
            "file": "mutation.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "App#onShow",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 107,
                "column": 18,
                "index": 2859
            },
            "line": 107,
            "code": "    it('App#onShow', () => {\n      const obj = {};\n      app.onShow(obj);\n      expect(appDidShow).toHaveBeenCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "App#onHide",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 112,
                "column": 18,
                "index": 2993
            },
            "line": 112,
            "code": "    it('App#onHide', () => {\n      const obj = {};\n      app.onHide(obj);\n      expect(appDidHide).toHaveBeenCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onLoad",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 117,
                "column": 14,
                "index": 3123
            },
            "line": 117,
            "code": "    it('onLoad', () => {\n      home.onLoad();\n      expect(onLoad).toBeCalled();\n      expect(homeContainer.current.textContent).toBe('home');\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onShow",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 122,
                "column": 14,
                "index": 3274
            },
            "line": 122,
            "code": "    it('onShow', () => {\n      home.onShow();\n      expect(onShow).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onPullDownRefresh",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 126,
                "column": 25,
                "index": 3374
            },
            "line": 126,
            "code": "    it('onPullDownRefresh', () => {\n      home.onPullDownRefresh();\n      expect(onPullDownRefresh).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onReachBottom",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 130,
                "column": 21,
                "index": 3492
            },
            "line": 130,
            "code": "    it('onReachBottom', () => {\n      home.onReachBottom();\n      expect(onReachBottom).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onPageScroll",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 134,
                "column": 20,
                "index": 3601
            },
            "line": 134,
            "code": "    it('onPageScroll', () => {\n      const obj = {};\n      home.onPageScroll({});\n      expect(onPageScroll).toBeCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onShareAppMessage",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 139,
                "column": 25,
                "index": 3744
            },
            "line": 139,
            "code": "    it('onShareAppMessage', () => {\n      const obj = {};\n      home.onShareAppMessage(obj);\n      expect(onShareAppMessage).toBeCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onResize",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 144,
                "column": 16,
                "index": 3889
            },
            "line": 144,
            "code": "    it('onResize', () => {\n      const obj = {};\n      home.onResize(obj);\n      expect(onResize).toBeCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onTabItemTap",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 149,
                "column": 20,
                "index": 4020
            },
            "line": 149,
            "code": "    it('onTabItemTap', () => {\n      const obj = {\n        a: 1\n      };\n      home.onTabItemTap(obj);\n      expect(onTabItemTap).toBeCalledWith(obj);\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onTitleClick",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 156,
                "column": 20,
                "index": 4179
            },
            "line": 156,
            "code": "    it('onTitleClick', () => {\n      home.onTitleClick();\n      expect(onTitleClick).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onOptionMenuClick",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 160,
                "column": 25,
                "index": 4291
            },
            "line": 160,
            "code": "    it('onOptionMenuClick', () => {\n      home.onOptionMenuClick();\n      expect(onOptionMenuClick).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onPopMenuClick",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 164,
                "column": 22,
                "index": 4410
            },
            "line": 164,
            "code": "    it('onPopMenuClick', () => {\n      home.onPopMenuClick();\n      expect(onPopMenuClick).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onPullIntercept",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 168,
                "column": 23,
                "index": 4524
            },
            "line": 168,
            "code": "    it('onPullIntercept', () => {\n      home.onPullIntercept();\n      expect(onPullIntercept).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onHide",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 172,
                "column": 14,
                "index": 4631
            },
            "line": 172,
            "code": "    it('onHide', () => {\n      home.onHide();\n      expect(homeContainer.current.textContent).toBe('home');\n      expect(onHide).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onUnload",
            "suites": [
                "nerv",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 177,
                "column": 16,
                "index": 4784
            },
            "line": 177,
            "code": "    it('onUnload', () => {\n      home.onUnload();\n      expect(homeContainer.current).toBeNull();\n      expect(onUnload).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "can fire event",
            "suites": [
                "nerv",
                "event"
            ],
            "updatePoint": {
                "line": 187,
                "column": 22,
                "index": 5041
            },
            "line": 187,
            "code": "    it('can fire event', done => {\n      homeContainer = /*#__PURE__*/React.createRef();\n      class Home extends React.Component {\n        state = {\n          render: 'home'\n        };\n        handleClick = () => {\n          eventSpy();\n        };\n        render() {\n          return /*#__PURE__*/React.createElement(\"view\", {\n            id: \"home\",\n            ref: homeContainer,\n            onClick: this.handleClick\n          }, this.state.render);\n        }\n      }\n      home = runtime.createPageConfig(Home, '/page/home');\n      const dataSpy = jest.fn();\n      home.setData = function (data, cb) {\n        dataSpy(data);\n        cb();\n      };\n      home.onLoad();\n      runtime.nextTick(() => {\n        const detail = {\n          a: 'a'\n        };\n        home.eh({\n          type: 'tap',\n          currentTarget: {\n            id: 'home'\n          },\n          detail\n        });\n        expect(eventSpy).toBeCalled();\n        done();\n      });\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "不阻止冒泡",
            "suites": [
                "nerv",
                "event"
            ],
            "updatePoint": {
                "line": 226,
                "column": 13,
                "index": 5997
            },
            "line": 226,
            "code": "    it('不阻止冒泡', async () => {\n      const r1 = /*#__PURE__*/React.createRef();\n      const r2 = /*#__PURE__*/React.createRef();\n      const s1 = jest.fn();\n      const s2 = jest.fn();\n      class Page extends React.Component {\n        f1() {\n          s1();\n        }\n        f2() {\n          s2();\n        }\n        render() {\n          return /*#__PURE__*/React.createElement(\"view\", {\n            onClick: this.f1,\n            ref: r1\n          }, /*#__PURE__*/React.createElement(\"view\", {\n            onClick: this.f2,\n            ref: r2\n          }));\n        }\n      }\n      const page = runtime.createPageConfig(Page, '/page/home');\n      page.setData = function () {};\n      page.onLoad();\n      await delay();\n      page.eh({\n        type: 'tap',\n        currentTarget: {\n          ...r2.current,\n          id: r2.current.uid\n        }\n      });\n      expect(s2).toBeCalled();\n      expect(s1).not.toBeCalled();\n      page.eh({\n        type: 'tap',\n        currentTarget: {\n          ...r1.current,\n          id: r1.current.uid\n        }\n      });\n      expect(s1).toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "阻止冒泡",
            "suites": [
                "nerv",
                "event"
            ],
            "updatePoint": {
                "line": 270,
                "column": 12,
                "index": 7094
            },
            "line": 270,
            "code": "    it('阻止冒泡', async () => {\n      const r1 = /*#__PURE__*/React.createRef();\n      const r2 = /*#__PURE__*/React.createRef();\n      const s1 = jest.fn();\n      const s2 = jest.fn();\n      class Page extends React.Component {\n        f1() {\n          s1();\n        }\n        f2(e) {\n          e.stopPropagation();\n          s2();\n        }\n        render() {\n          return /*#__PURE__*/React.createElement(\"view\", {\n            onClick: this.f1,\n            ref: r1\n          }, /*#__PURE__*/React.createElement(\"view\", {\n            onClick: this.f2,\n            ref: r2\n          }));\n        }\n      }\n      const page = runtime.createPageConfig(Page, '/page/home');\n      page.setData = function () {};\n      page.onLoad();\n      await delay();\n      page.eh({\n        type: 'tap',\n        currentTarget: {\n          ...r2.current,\n          id: r2.current.uid\n        }\n      });\n      expect(s2).toBeCalled();\n      expect(s1).not.toBeCalled();\n      page.eh({\n        type: 'tap',\n        currentTarget: {\n          ...r1.current,\n          id: r1.current.uid\n        }\n      });\n      expect(s1).not.toBeCalled();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "init data",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 348,
                "column": 17,
                "index": 9083
            },
            "line": 348,
            "code": "    it('init data', done => {\n      home.onLoad();\n      runtime.nextTick(() => {\n        expect(dataSpy).toHaveBeenCalledWith({\n          'root.uid': '/page/home',\n          'root.cn.[0]': runtime.hydrate(homeContainer.current)\n        });\n        done();\n      });\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "改变 text",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 358,
                "column": 15,
                "index": 9356
            },
            "line": 358,
            "code": "    it('改变 text', async () => {\n      homeInst.setState({\n        render: 'test'\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0].v': 'test'\n      });\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "改变 class",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 368,
                "column": 16,
                "index": 9605
            },
            "line": 368,
            "code": "    it('改变 class', async () => {\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          className: \"a\",\n          id: \"id1\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0]': {\n          cl: 'a',\n          nn: 'view',\n          uid: 'id1'\n        }\n      });\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          className: \"b\",\n          id: \"id1\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0].cl': 'b'\n      });\n      homeInst.setState({\n        render: 'home'\n      });\n      homeInst.forceUpdate();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "style",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 400,
                "column": 13,
                "index": 10397
            },
            "line": 400,
            "code": "    it('style', async () => {\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          style: {\n            color: 'red'\n          },\n          id: \"id2\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0]': {\n          st: 'color: red;',\n          nn: 'view',\n          uid: 'id2'\n        }\n      });\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          style: {\n            color: 'green'\n          },\n          id: \"id2\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0].st': 'color: green;'\n      });\n      homeInst.setState({\n        render: 'home'\n      });\n      homeInst.forceUpdate();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "props 可以传递对象",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 436,
                "column": 20,
                "index": 11282
            },
            "line": 436,
            "code": "    it('props 可以传递对象', async () => {\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          id: \"id5\",\n          a: {\n            a: 'a'\n          }\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0]': {\n          nn: 'view',\n          uid: 'id5',\n          a: {\n            a: 'a'\n          }\n        }\n      });\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"view\", {\n          id: \"id4\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0].a': '',\n        'root.cn.[0].cn.[0].uid': 'id4'\n      });\n      homeInst.setState({\n        render: 'home'\n      });\n      homeInst.forceUpdate();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "id",
            "suites": [
                "nerv",
                "data"
            ],
            "updatePoint": {
                "line": 472,
                "column": 10,
                "index": 12133
            },
            "line": 472,
            "code": "    it('id', async () => {\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"text\", {\n          id: \"id3\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0]': {\n          nn: 'text',\n          uid: 'id3'\n        }\n      });\n      homeInst.setState({\n        render: /*#__PURE__*/React.createElement(\"text\", {\n          id: \"id4\"\n        })\n      });\n      homeInst.forceUpdate();\n      await delay();\n      expect(dataSpy).toHaveBeenLastCalledWith({\n        'root.cn.[0].cn.[0].uid': 'id4'\n      });\n      homeInst.setState({\n        render: 'home'\n      });\n      homeInst.forceUpdate();\n    });",
            "file": "nerv.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "event should work",
            "suites": [
                "react"
            ],
            "updatePoint": {
                "line": 8,
                "column": 23,
                "index": 232
            },
            "line": 8,
            "code": "  it('event should work', () => {\n    const div = document.createElement('div');\n    const spy = jest.fn();\n    div.addEventListener('tap', spy);\n    const event = runtime.createEvent({\n      type: 'tap'\n    }, div);\n    div.dispatchEvent(event);\n    expect(spy).toBeCalledTimes(1);\n  });",
            "file": "react.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "works",
            "suites": [
                "style"
            ],
            "updatePoint": {
                "line": 9,
                "column": 11,
                "index": 221
            },
            "line": 9,
            "code": "  it('works', () => {\n    const root = document.createElement('root');\n    const style = new Style(root);\n    style.color = 'red';\n    expect(style._usedStyleProp.size).toBe(1);\n    expect(style.getPropertyValue('color')).toBe('red');\n    style.fontSize = '16';\n    expect(style._usedStyleProp.size).toBe(2);\n    expect(style.getPropertyValue('font-size')).toBe('16');\n    style.removeProperty('font-size');\n    expect(style._usedStyleProp.size).toBe(1);\n    expect(style.fontSize).toBe('');\n    style.setProperty('font-weight', 'bold');\n    expect(style._usedStyleProp.size).toBe(2);\n    expect(style.fontWeight).toBe('bold');\n    expect(style.cssText).toBe('color: red; font-weight: bold;');\n    style.cssText = '';\n    expect(style.cssText).toBe('');\n    expect(style._usedStyleProp.size).toBe(0);\n    expect(style.color).toBe('');\n    expect(style.fontWeight).toBe('');\n    style.textAlign = 'center';\n    expect(style.cssText).toBe('text-align: center;');\n    style.cssText = 'color: red; font-weight: bold;';\n    expect(style._usedStyleProp.size).toBe(2);\n    expect(style.fontWeight).toBe('bold');\n    expect(style.color).toBe('red');\n  });",
            "file": "style.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "App#onShow",
            "suites": [
                "vue",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 54,
                "column": 18,
                "index": 1645
            },
            "line": 54,
            "code": "    it('App#onShow', () => {\n      const obj = {};\n      app.onShow(obj);\n      expect(appDidShow).toHaveBeenCalledWith(obj);\n    });",
            "file": "vue.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "App#onHide",
            "suites": [
                "vue",
                "lifecycle"
            ],
            "updatePoint": {
                "line": 59,
                "column": 18,
                "index": 1779
            },
            "line": 59,
            "code": "    it('App#onHide', () => {\n      const obj = {};\n      app.onHide(obj);\n      expect(appDidHide).toHaveBeenCalledWith(obj);\n    });",
            "file": "vue.spec.js",
            "skipped": false,
            "dir": "packages/taro-runtime/src/__tests__"
        },
        {
            "name": "onLoad",
            "suites": [
                "vue",
                "lifecycle"
            ],
            "line": 64,
            "code": "    it.skip('onLoad', () => {",
            "file": "vue.spec.js",
            "skipped": true,
            "dir": "packages/taro-runtime/src/__tests__"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in nerv.spec.ts:3\nRemove `.only` to restore test checks"
}