{"repo":"cheeriojs/cheerio","url":"https://github.com/cheeriojs/cheerio","branch":"main","configs":[{"package":"cheerio","lang":"ts","dir":"src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"(html) : should preserve content","suites":["deprecated APIs","cheerio module",".parseHTML"],"updatePoint":{"line":26,"column":42},"line":26,"code":"      it('(html) : should preserve content', () => {\n        const html = '<div>test div</div>';\n        expect(cheerio(cheerio.parseHTML(html)[0]).html()).toBe('test div');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should be a function","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":55,"column":30},"line":55,"code":"      it('should be a function', () => {\n        expect(typeof cheerio.merge).toBe('function');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should be a able merge array and cheerio object","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":60,"column":57},"line":60,"code":"      it('should be a able merge array and cheerio object', () => {\n        const ret = cheerio.merge(cheerio(), ['elem1', 'elem2'] as any);\n        expect(typeof ret).toBe('object');\n        expect(ret).toHaveLength(2);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(arraylike, arraylike) : should return an array","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":66,"column":57},"line":66,"code":"      it('(arraylike, arraylike) : should return an array', () => {\n        const ret = cheerio.merge(arr1, arr2);\n        expect(typeof ret).toBe('object');\n        expect(Array.isArray(ret)).toBe(true);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(arraylike, arraylike) : should modify the first array","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":72,"column":64},"line":72,"code":"      it('(arraylike, arraylike) : should modify the first array', () => {\n        cheerio.merge(arr1, arr2);\n        expect(arr1).toHaveLength(6);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(arraylike, arraylike) : should not modify the second array","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":77,"column":69},"line":77,"code":"      it('(arraylike, arraylike) : should not modify the second array', () => {\n        cheerio.merge(arr1, arr2);\n        expect(arr2).toHaveLength(3);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(arraylike, arraylike) : should handle objects that arent arrays, but are arraylike","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":82,"column":93},"line":82,"code":"      it('(arraylike, arraylike) : should handle objects that arent arrays, but are arraylike', () => {\n        arr1 = {\n          length: 3,\n          [0]: 'a',\n          [1]: 'b',\n          [2]: 'c',\n        };\n        arr2 = {\n          length: 3,\n          [0]: 'd',\n          [1]: 'e',\n          [2]: 'f',\n        };\n\n        cheerio.merge(arr1, arr2);\n        expect(arr1).toHaveLength(6);\n        expect(arr1[3]).toBe('d');\n        expect(arr1[4]).toBe('e');\n        expect(arr1[5]).toBe('f');\n        expect(arr2).toHaveLength(3);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(?, ?) : should gracefully reject invalid inputs","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":104,"column":58},"line":104,"code":"      it('(?, ?) : should gracefully reject invalid inputs', () => {\n        let ret: ArrayLike<unknown> | undefined = cheerio.merge([4], 3 as any);\n        expect(ret).toBeFalsy();\n        ret = cheerio.merge({} as any, {} as any);\n        expect(ret).toBeFalsy();\n        ret = cheerio.merge([], {} as any);\n        expect(ret).toBeFalsy();\n        ret = cheerio.merge({} as any, []);\n        expect(ret).toBeFalsy();\n        let fakeArray1 = { length: 3, [0]: 'a', [1]: 'b', [3]: 'd' };\n        ret = cheerio.merge(fakeArray1, []);\n        expect(ret).toBeFalsy();\n        ret = cheerio.merge([], fakeArray1);\n        expect(ret).toBeFalsy();\n        fakeArray1 = {} as any;\n        fakeArray1.length = '7' as any;\n        ret = cheerio.merge(fakeArray1, []);\n        expect(ret).toBeFalsy();\n        fakeArray1.length = -1;\n        ret = cheerio.merge(fakeArray1, []);\n        expect(ret).toBeFalsy();\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(?, ?) : should no-op on invalid inputs","suites":["deprecated APIs","cheerio module",".merge"],"updatePoint":{"line":127,"column":49},"line":127,"code":"      it('(?, ?) : should no-op on invalid inputs', () => {\n        const fakeArray1 = { length: 3, [0]: 'a', [1]: 'b', [3]: 'd' };\n        cheerio.merge(fakeArray1, []);\n        expect(fakeArray1).toHaveLength(3);\n        expect(fakeArray1[0]).toBe('a');\n        expect(fakeArray1[1]).toBe('b');\n        expect(fakeArray1[3]).toBe('d');\n        cheerio.merge([], fakeArray1);\n        expect(fakeArray1).toHaveLength(3);\n        expect(fakeArray1[0]).toBe('a');\n        expect(fakeArray1[1]).toBe('b');\n        expect(fakeArray1[3]).toBe('d');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(container, contained) : should correctly detect the provided element","suites":["deprecated APIs","cheerio module",".contains"],"updatePoint":{"line":167,"column":79},"line":167,"code":"      it('(container, contained) : should correctly detect the provided element', () => {\n        const $food = $('#food');\n        const $fruits = $('#fruits');\n        const $apple = $('.apple');\n\n        expect(cheerio.contains($food[0], $fruits[0])).toBe(true);\n        expect(cheerio.contains($food[0], $apple[0])).toBe(true);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(container, other) : should not detect elements that are not contained","suites":["deprecated APIs","cheerio module",".contains"],"updatePoint":{"line":176,"column":80},"line":176,"code":"      it('(container, other) : should not detect elements that are not contained', () => {\n        const $fruits = $('#fruits');\n        const $vegetables = $('#vegetables');\n        const $apple = $('.apple');\n\n        expect(cheerio.contains($vegetables[0], $apple[0])).toBe(false);\n        expect(cheerio.contains($fruits[0], $vegetables[0])).toBe(false);\n        expect(cheerio.contains($vegetables[0], $fruits[0])).toBe(false);\n        expect(cheerio.contains($fruits[0], $fruits[0])).toBe(false);\n        expect(cheerio.contains($vegetables[0], $vegetables[0])).toBe(false);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"returns an empty selection","suites":["deprecated APIs","cheerio module",".root"],"updatePoint":{"line":203,"column":36},"line":203,"code":"      it('returns an empty selection', () => {\n        const $empty = cheerio.root();\n        expect($empty).toHaveLength(1);\n        expect($empty[0].children).toHaveLength(0);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":".load","suites":["deprecated APIs","Cheerio function"],"updatePoint":{"line":223,"column":13},"line":223,"code":"    it('.load', () => {\n      const $1 = cheerio.load(fixtures.fruits);\n      const $2 = $1.load('<div><p>Some <a>text</a>.</p></div>');\n\n      expect($2('a')).toHaveLength(1);\n    });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"() : of empty cheerio object should return null","suites":["deprecated APIs","Cheerio function",".html - deprecated API"],"updatePoint":{"line":256,"column":57},"line":256,"code":"      it('() : of empty cheerio object should return null', () => {\n        /*\n         * Note: the direct invocation of the Cheerio constructor function is\n         * also deprecated.\n         */\n        const $ = cheerio();\n        expect($.html()).toBe(null);\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(selector) : should return the outerHTML of the selected element","suites":["deprecated APIs","Cheerio function",".html - deprecated API"],"updatePoint":{"line":265,"column":74},"line":265,"code":"      it('(selector) : should return the outerHTML of the selected element', () => {\n        const $ = cheerio.load(fixtures.fruits);\n        expect($.html('.pear')).toBe('<li class=\"pear\">Pear</li>');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"() :  renders XML","suites":["deprecated APIs","Cheerio function",".xml  - deprecated API"],"updatePoint":{"line":283,"column":27},"line":283,"code":"      it('() :  renders XML', () => {\n        const $ = cheerio.load('<foo></foo>', { xmlMode: true });\n        expect($.xml()).toBe('<foo/>');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(cheerio object) : should return the text contents of the specified elements","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":314,"column":86},"line":314,"code":"      it('(cheerio object) : should return the text contents of the specified elements', () => {\n        const $ = cheerio.load('<a>This is <em>content</em>.</a>');\n        expect($.text($('a'))).toBe('This is content.');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(cheerio object) : should omit comment nodes","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":319,"column":54},"line":319,"code":"      it('(cheerio object) : should omit comment nodes', () => {\n        const $ = cheerio.load(\n          '<a>This is <!-- a comment --> not a comment.</a>'\n        );\n        expect($.text($('a'))).toBe('This is  not a comment.');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(cheerio object) : should include text contents of children recursively","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":326,"column":81},"line":326,"code":"      it('(cheerio object) : should include text contents of children recursively', () => {\n        const $ = cheerio.load(\n          '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n        );\n        expect($.text($('a'))).toBe(\n          'This is a child with another child and  not a comment followed by one last child and some final text.'\n        );\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"() : should return the rendered text content of the root","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":335,"column":66},"line":335,"code":"      it('() : should return the rendered text content of the root', () => {\n        const $ = cheerio.load(\n          '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n        );\n        expect($.text()).toBe(\n          'This is a child with another child and  not a comment followed by one last child and some final text.'\n        );\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(cheerio object) : should not omit script tags","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":344,"column":56},"line":344,"code":"      it('(cheerio object) : should not omit script tags', () => {\n        const $ = cheerio.load('<script>console.log(\"test\")</script>');\n        expect($.text()).toBe('console.log(\"test\")');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"(cheerio object) : should omit style tags","suites":["deprecated APIs","Cheerio function",".text  - deprecated API"],"updatePoint":{"line":349,"column":51},"line":349,"code":"      it('(cheerio object) : should omit style tags', () => {\n        const $ = cheerio.load(\n          '<style type=\"text/css\">.cf-hidden { display: none; }</style>'\n        );\n        expect($.text()).toBe('.cf-hidden { display: none; }');\n      });","file":"deprecated.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should render <media:thumbnail /> tags correctly","suites":["render","(xml)"],"updatePoint":{"line":17,"column":56},"line":17,"code":"    it('should render <media:thumbnail /> tags correctly', () => {\n      const str =\n        '<media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\" />';\n      expect(xml(str)).toBe(\n        '<media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\"/>'\n      );\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should render <link /> tags (RSS) correctly","suites":["render","(xml)"],"updatePoint":{"line":25,"column":51},"line":25,"code":"    it('should render <link /> tags (RSS) correctly', () => {\n      const str = '<link>http://www.github.com/</link>';\n      expect(xml(str)).toBe('<link>http://www.github.com/</link>');\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should escape entities","suites":["render","(xml)"],"updatePoint":{"line":30,"column":30},"line":30,"code":"    it('should escape entities', () => {\n      const str = '<tag attr=\"foo &amp; bar\"/>';\n      expect(xml(str)).toBe(str);\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should render HTML as XML","suites":["render","(xml)"],"updatePoint":{"line":35,"column":33},"line":35,"code":"    it('should render HTML as XML', () => {\n      const $ = cheerio.load('<foo></foo>', null, false);\n      expect($.xml()).toBe('<foo/>');\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should not keep camelCase for new nodes","suites":["render","(dom)"],"updatePoint":{"line":42,"column":47},"line":42,"code":"    it('should not keep camelCase for new nodes', () => {\n      const str = '<g><someElem someAttribute=\"something\">hello</someElem></g>';\n      expect(dom(str, { xml: false })).toBe(\n        '<someelem someattribute=\"something\">hello</someelem>'\n      );\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should keep camelCase for new nodes","suites":["render","(dom)"],"updatePoint":{"line":49,"column":43},"line":49,"code":"    it('should keep camelCase for new nodes', () => {\n      const str = '<g><someElem someAttribute=\"something\">hello</someElem></g>';\n      expect(dom(str, { xml: true })).toBe(\n        '<someElem someAttribute=\"something\">hello</someElem>'\n      );\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"},{"name":"should maintain the parsing options of distinct contexts independently","suites":["render","(dom)"],"updatePoint":{"line":56,"column":78},"line":56,"code":"    it('should maintain the parsing options of distinct contexts independently', () => {\n      const str = '<g><someElem someAttribute=\"something\">hello</someElem></g>';\n      const $ = cheerio.load('', { xml: false });\n\n      expect($(str).html()).toBe(\n        '<someelem someattribute=\"something\">hello</someelem>'\n      );\n    });","file":"xml.spec.ts","skipped":false,"dir":"src/__tests__"}]}