{"repo":"react-dnd/react-dnd","url":"https://github.com/react-dnd/react-dnd","branch":"main","configs":[{"package":"react-dnd-parent","lang":"ts","dir":"__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"react-dnd-html5-backend","lang":"ts","dir":"packages/backend-html5/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"react-dnd-touch-backend","lang":"ts","dir":"packages/backend-touch/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"dnd-core","lang":"ts","dir":"packages/dnd-core/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should detect firefox","suites":["BrowserDetector"],"updatePoint":{"line":4,"column":26},"line":4,"code":"\tit('should detect firefox', () => {\n\t\texpect(isFirefox()).toEqual(false)\n\t})","file":"BrowserDetector.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should check if the element is entered","suites":["EnterLeaveCounter"],"updatePoint":{"line":13,"column":43},"line":13,"code":"\tit('should check if the element is entered', () => {\n\t\tconst enterLeaveCounter: EnterLeaveCounter = new EnterLeaveCounter(\n\t\t\tisNodeInDocument,\n\t\t)\n\t\tconst hasEntered = enterLeaveCounter.enter(parentDiv)\n\t\texpect(hasEntered).toEqual(true)\n\t})","file":"EnterLeaveCounter.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should not falsely check child elements as new element entered","suites":["EnterLeaveCounter"],"updatePoint":{"line":21,"column":67},"line":21,"code":"\tit('should not falsely check child elements as new element entered', () => {\n\t\tconst enterLeaveCounter: EnterLeaveCounter = new EnterLeaveCounter(\n\t\t\tisNodeInDocument,\n\t\t)\n\t\tenterLeaveCounter.enter(parentDiv)\n\t\tconst hasEntered = enterLeaveCounter.enter(childDiv)\n\t\texpect(hasEntered).toEqual(false)\n\t})","file":"EnterLeaveCounter.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should check if leave element was entered","suites":["EnterLeaveCounter"],"updatePoint":{"line":30,"column":46},"line":30,"code":"\tit('should check if leave element was entered', () => {\n\t\tconst enterLeaveCounter: EnterLeaveCounter = new EnterLeaveCounter(\n\t\t\tisNodeInDocument,\n\t\t)\n\t\tenterLeaveCounter.enter(parentDiv)\n\t\tconst testElem = document.createElement('p')\n\t\tconst hasLeft = enterLeaveCounter.leave(testElem)\n\t\texpect(hasLeft).toEqual(false)\n\t})","file":"EnterLeaveCounter.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should leave element if it is entered","suites":["EnterLeaveCounter"],"updatePoint":{"line":40,"column":42},"line":40,"code":"\tit('should leave element if it is entered', () => {\n\t\tconst enterLeaveCounter: EnterLeaveCounter = new EnterLeaveCounter(\n\t\t\tisNodeInDocument,\n\t\t)\n\t\tenterLeaveCounter.enter(parentDiv)\n\t\tconst hasLeft = enterLeaveCounter.leave(parentDiv)\n\t\texpect(hasLeft).toEqual(true)\n\t})","file":"EnterLeaveCounter.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should return image","suites":["Get Empty Image"],"updatePoint":{"line":4,"column":24},"line":4,"code":"\tit('should return image', () => {\n\t\tconst image = getEmptyImage()\n\t\texpect(image.getAttribute('src')).toBeDefined()\n\t})","file":"getEmptyImage.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"uses an undefined window when no window is available","suites":["The HTML5 Backend","window injection"],"updatePoint":{"line":9,"column":58},"line":9,"code":"\t\tit('uses an undefined window when no window is available', () => {\n\t\t\tconst mockWindow = global.window\n\t\t\ttry {\n\t\t\t\tdelete global.window\n\t\t\t\tconst backend = HTML5Backend(mockManager()) as HTML5BackendImpl\n\t\t\t\texpect(backend).toBeDefined()\n\t\t\t\texpect(backend.window).toBeUndefined()\n\t\t\t} finally {\n\t\t\t\tglobal.window = mockWindow\n\t\t\t}\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"can generate a profiling object","suites":["The HTML5 Backend","window injection"],"updatePoint":{"line":21,"column":37},"line":21,"code":"\t\tit('can generate a profiling object', () => {\n\t\t\tconst backend = HTML5Backend(mockManager()) as HTML5BackendImpl\n\t\t\texpect(backend).toBeDefined()\n\n\t\t\t// Expect an initially empty profile\n\t\t\tconst profile = backend.profile()\n\t\t\texpect(profile).toBeDefined()\n\t\t\tObject.keys(profile).forEach((profilingKey) =>\n\t\t\t\texpect(profile[profilingKey]).toEqual(0),\n\t\t\t)\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"uses the ambient window global","suites":["The HTML5 Backend","window injection"],"updatePoint":{"line":33,"column":36},"line":33,"code":"\t\tit('uses the ambient window global', () => {\n\t\t\tconst backend = HTML5Backend(mockManager(), window) as HTML5BackendImpl\n\t\t\texpect(backend).toBeDefined()\n\t\t\texpect(backend.window).toBeDefined()\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"allows a window to be injected","suites":["The HTML5 Backend","window injection"],"updatePoint":{"line":39,"column":36},"line":39,"code":"\t\tit('allows a window to be injected', () => {\n\t\t\tconst fakeWindow = {\n\t\t\t\tx: 1,\n\t\t\t}\n\t\t\tconst backend = HTML5Backend(\n\t\t\t\tmockManager(),\n\t\t\t\tfakeWindow,\n\t\t\t) as HTML5BackendImpl\n\t\t\texpect(backend).toBeDefined()\n\t\t\texpect(backend.window).toBe(fakeWindow)\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should throw error if two instances of html5 backend are setup","suites":["The HTML5 Backend","setup and teardown"],"updatePoint":{"line":64,"column":68},"line":64,"code":"\t\tit('should throw error if two instances of html5 backend are setup', () => {\n\t\t\tbackend = HTML5Backend(mgr, {\n\t\t\t\twindow: fakeWindow,\n\t\t\t}) as HTML5BackendImpl\n\t\t\tbackend.setup()\n\t\t\ttry {\n\t\t\t\tbackend.setup()\n\t\t\t} catch (e: any) {\n\t\t\t\texpect(e.message).toEqual(\n\t\t\t\t\t'Cannot have two HTML5 backends at the same time.',\n\t\t\t\t)\n\t\t\t}\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should set __isReactDndBackendSetUp on setup","suites":["The HTML5 Backend","setup and teardown"],"updatePoint":{"line":78,"column":50},"line":78,"code":"\t\tit('should set __isReactDndBackendSetUp on setup', () => {\n\t\t\tbackend = HTML5Backend(mgr, fakeWindow) as HTML5BackendImpl\n\t\t\tbackend.setup()\n\t\t\texpect(fakeWindow.__isReactDndBackendSetUp).toBeTruthy()\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should unset ____isReactDndBackendSetUp on teardown","suites":["The HTML5 Backend","setup and teardown"],"updatePoint":{"line":84,"column":57},"line":84,"code":"\t\tit('should unset ____isReactDndBackendSetUp on teardown', () => {\n\t\t\tbackend = HTML5Backend(mgr, fakeWindow) as HTML5BackendImpl\n\t\t\tbackend.setup()\n\t\t\tbackend.teardown()\n\t\t\texpect(fakeWindow.__isReactDndBackendSetUp).toBeFalsy()\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should be able to call setup after teardown","suites":["The HTML5 Backend","setup and teardown"],"updatePoint":{"line":91,"column":49},"line":91,"code":"\t\tit('should be able to call setup after teardown', () => {\n\t\t\tbackend = HTML5Backend(mgr, fakeWindow) as HTML5BackendImpl\n\t\t\tbackend.setup()\n\t\t\tbackend.teardown()\n\t\t\tbackend.setup()\n\t\t\texpect(fakeWindow.__isReactDndBackendSetUp).toBeTruthy()\n\t\t})","file":"HTML5Backend.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should return HTML5 backend","suites":["index"],"updatePoint":{"line":5,"column":32},"line":5,"code":"\tit('should return HTML5 backend', () => {\n\t\tconst mockManager: DragDropManager = {\n\t\t\tgetActions: () => null,\n\t\t\tgetMonitor: () => null,\n\t\t\tgetRegistry: () => null,\n\t\t} as any\n\t\tconst backend = HTML5Backend(mockManager)\n\t\texpect(backend).toBeDefined()\n\t})","file":"index.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should match type for single source and single target","suites":["matchesType"],"updatePoint":{"line":4,"column":58},"line":4,"code":"\tit('should match type for single source and single target', () => {\n\t\tconst target = 'a'\n\t\tconst source = 'a'\n\t\texpect(matchesType(target, source)).toBeTruthy()\n\t})","file":"matchesType.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should match type for single source and multiple targets","suites":["matchesType"],"updatePoint":{"line":10,"column":61},"line":10,"code":"\tit('should match type for single source and multiple targets', () => {\n\t\tconst targets = ['a', 'b', 'c']\n\t\tconst source = 'a'\n\t\texpect(matchesType(targets, source)).toBeTruthy()\n\t})","file":"matchesType.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should match type when source and target are null","suites":["matchesType"],"updatePoint":{"line":16,"column":54},"line":16,"code":"\tit('should match type when source and target are null', () => {\n\t\tconst target = null\n\t\tconst source = null\n\t\texpect(matchesType(target, source)).toBeTruthy()\n\t})","file":"matchesType.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"can be constructed","suites":["The MonotonicInterpolant"],"updatePoint":{"line":4,"column":23},"line":4,"code":"\tit('can be constructed', () => {\n\t\tconst mi = new MonotonicInterpolant([0, 100], [100, 200])\n\t\texpect(mi).toBeDefined()\n\n\t\texpect(mi.interpolate(50)).toEqual(150)\n\t})","file":"MonotonicInterpolant.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should get node client offset for element node","suites":["OffsetUtils","getNodeClientOffset"],"updatePoint":{"line":10,"column":52},"line":10,"code":"\t\tit('should get node client offset for element node', () => {\n\t\t\tconst el = document.createElement('div')\n\t\t\texpect(getNodeClientOffset(el)).toEqual({\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t})\n\t\t})","file":"OffsetUtils.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should return get parent node client offset if element type is not ELEMENT NODE","suites":["OffsetUtils","getNodeClientOffset"],"updatePoint":{"line":18,"column":85},"line":18,"code":"\t\tit('should return get parent node client offset if element type is not ELEMENT NODE', () => {\n\t\t\tconst el = document.createElement('p')\n\t\t\tel.textContent = 'Text inside paragraph'\n\t\t\texpect(getNodeClientOffset(el.firstChild!)).toEqual({\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t})\n\t\t})","file":"OffsetUtils.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should return null if parent node is not of Node.ELEMENT_NODE","suites":["OffsetUtils","getNodeClientOffset"],"updatePoint":{"line":27,"column":67},"line":27,"code":"\t\tit('should return null if parent node is not of Node.ELEMENT_NODE', () => {\n\t\t\tconst el = document.createComment('this is comment node of type 3')\n\t\t\texpect(getNodeClientOffset(el)).toEqual(null)\n\t\t})","file":"OffsetUtils.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should return client offset","suites":["OffsetUtils","getEventClientOffset"],"updatePoint":{"line":34,"column":33},"line":34,"code":"\t\tit('should return client offset', () => {\n\t\t\tconst el = document.createEvent('MouseEvent')\n\t\t\texpect(getEventClientOffset(el)).toEqual({\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t})\n\t\t})","file":"OffsetUtils.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"should get offset of drag preview component","suites":["OffsetUtils","getDragPreviewOffset"],"updatePoint":{"line":44,"column":49},"line":44,"code":"\t\tit('should get offset of drag preview component', () => {\n\t\t\tconst sourceNode = document.createElement('div')\n\t\t\tconst dragPreview = document.createElement('div')\n\t\t\tconst clientOffset = {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t}\n\t\t\tconst anchorPoint = {\n\t\t\t\tanchorX: 0,\n\t\t\t\tanchorY: 0,\n\t\t\t}\n\t\t\tconst offsetPoint = {\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t}\n\t\t\texpect(\n\t\t\t\tgetDragPreviewOffset(\n\t\t\t\t\tsourceNode,\n\t\t\t\t\tdragPreview,\n\t\t\t\t\tclientOffset,\n\t\t\t\t\tanchorPoint,\n\t\t\t\t\toffsetPoint,\n\t\t\t\t),\n\t\t\t).toEqual({\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t})\n\t\t})","file":"OffsetUtils.spec.ts","skipped":false,"dir":"packages/backend-html5/src/__tests__"},{"name":"can be constructed and emits some defaults","suites":["The Touch Backend Options Reader"],"updatePoint":{"line":5,"column":47},"line":5,"code":"\tit('can be constructed and emits some defaults', () => {\n\t\tconst options = new (OptionsReader as any)({}) as TouchBackendOptions\n\t\texpect(options.delayTouchStart).toEqual(0)\n\t\texpect(options.delayMouseStart).toEqual(0)\n\t\texpect(options.enableMouseEvents).toEqual(false)\n\t\texpect(options.enableTouchEvents).toEqual(true)\n\t})","file":"OptionsReader.spec.ts","skipped":false,"dir":"packages/backend-touch/src/__tests__"},{"name":"can be constructed","suites":["TouchBackend"],"updatePoint":{"line":6,"column":23},"line":6,"code":"\tit('can be constructed', () => {\n\t\tconst backend = TouchBackend(mockManager(), {}, {})\n\t\texpect(backend).toBeDefined()\n\t})","file":"TouchBackend.spec.ts","skipped":false,"dir":"packages/backend-touch/src/__tests__"},{"name":"can be constructed","suites":["TouchBackend"],"updatePoint":{"line":11,"column":23},"line":11,"code":"\tit('can be constructed', () => {\n\t\tconst backend = TouchBackend(mockManager(), {}, {})\n\t\texpect(backend).toBeDefined()\n\t\tconst profile = backend.profile()\n\t\texpect(profile).toBeDefined()\n\t\tObject.keys(profile).forEach((profilingKey) =>\n\t\t\texpect(profile[profilingKey]).toEqual(0),\n\t\t)\n\t})","file":"TouchBackend.spec.ts","skipped":false,"dir":"packages/backend-touch/src/__tests__"},{"name":"can determine target ids","suites":["TouchBackend"],"updatePoint":{"line":21,"column":29},"line":21,"code":"\tit('can determine target ids', () => {\n\t\tconst mockNode1 = {} as HTMLElement\n\t\tconst mockNode2 = {} as HTMLElement\n\t\tconst backend = TouchBackend(mockManager(), {}, {}) as TouchBackendImpl\n\t\tbackend.targetNodes.set('abc', mockNode1)\n\t\tbackend.targetNodes.set('def', mockNode2)\n\n\t\texpect(backend._getDropTargetId(mockNode1)).toEqual('abc')\n\t\texpect(backend._getDropTargetId(mockNode2)).toEqual('def')\n\t\texpect(backend._getDropTargetId({} as Element)).toEqual(undefined)\n\t})","file":"TouchBackend.spec.ts","skipped":false,"dir":"packages/backend-touch/src/__tests__"},{"name":"registers and unregisters drag sources","suites":["DragDropManager","handler registration"],"updatePoint":{"line":29,"column":44},"line":29,"code":"\t\tit('registers and unregisters drag sources', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\texpect(registry.getSource(sourceId)).toEqual(source)\n\n\t\t\tregistry.removeSource(sourceId)\n\n\t\t\tsetImmediate(() => {\n\t\t\t\texpect(registry.getSource(sourceId)).toEqual(undefined)\n\t\t\t\texpect(() => registry.removeSource(sourceId)).toThrow()\n\t\t\t\tdone()\n\t\t\t})\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"registers and unregisters drop targets","suites":["DragDropManager","handler registration"],"updatePoint":{"line":43,"column":44},"line":43,"code":"\t\tit('registers and unregisters drop targets', (done) => {\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\t\t\texpect(registry.getTarget(targetId)).toEqual(target)\n\n\t\t\tregistry.removeTarget(targetId)\n\n\t\t\tsetImmediate(() => {\n\t\t\t\texpect(registry.getTarget(targetId)).toEqual(undefined)\n\t\t\t\texpect(() => registry.removeTarget(targetId)).toThrow()\n\t\t\t\tdone()\n\t\t\t})\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"registers and unregisters multi-type drop targets","suites":["DragDropManager","handler registration"],"updatePoint":{"line":57,"column":55},"line":57,"code":"\t\tit('registers and unregisters multi-type drop targets', (done) => {\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget([Types.FOO, Types.BAR], target)\n\t\t\texpect(registry.getTarget(targetId)).toEqual(target)\n\n\t\t\tregistry.removeTarget(targetId)\n\n\t\t\tsetImmediate(() => {\n\t\t\t\texpect(registry.getTarget(targetId)).toEqual(undefined)\n\t\t\t\texpect(() => registry.removeTarget(targetId)).toThrow()\n\t\t\t\tdone()\n\t\t\t})\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"knows the difference between sources and targets","suites":["DragDropManager","handler registration"],"updatePoint":{"line":71,"column":54},"line":71,"code":"\t\tit('knows the difference between sources and targets', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(() => registry.getSource(targetId)).toThrow()\n\t\t\texpect(() => registry.getTarget(sourceId)).toThrow()\n\t\t\texpect(() => registry.removeSource(targetId)).toThrow()\n\t\t\texpect(() => registry.removeTarget(sourceId)).toThrow()\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"accepts symbol types","suites":["DragDropManager","handler registration"],"updatePoint":{"line":83,"column":26},"line":83,"code":"\t\tit('accepts symbol types', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst target = new NormalTarget()\n\n\t\t\texpect(() => registry.addSource(Symbol('a'), source)).not.toThrow()\n\t\t\texpect(() => registry.addTarget(Symbol('b'), target)).not.toThrow()\n\t\t\texpect(() =>\n\t\t\t\tregistry.addTarget([Symbol('c'), Symbol('d')], target),\n\t\t\t).not.toThrow()\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on invalid type","suites":["DragDropManager","handler registration"],"updatePoint":{"line":94,"column":28},"line":94,"code":"\t\tit('throws on invalid type', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst target = new NormalTarget()\n\n\t\t\texpect(() => registry.addSource(null as any, source)).toThrow()\n\t\t\texpect(() => registry.addSource(undefined as any, source)).toThrow()\n\t\t\texpect(() => registry.addSource(23 as any, source)).toThrow()\n\t\t\texpect(() => registry.addSource(['yo'] as any, source)).toThrow()\n\t\t\texpect(() => registry.addTarget(null as any, target)).toThrow()\n\t\t\texpect(() => registry.addTarget(undefined as any, target)).toThrow()\n\t\t\texpect(() => registry.addTarget(23 as any, target)).toThrow()\n\t\t\texpect(() => registry.addTarget([23] as any, target)).toThrow()\n\t\t\texpect(() => registry.addTarget(['yo', null] as any, target)).toThrow()\n\t\t\texpect(() => registry.addTarget([['yo']] as any, target)).toThrow()\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"calls setup() and teardown() on backend","suites":["DragDropManager","handler registration"],"updatePoint":{"line":110,"column":45},"line":110,"code":"\t\tit('calls setup() and teardown() on backend', () => {\n\t\t\texpect(backend.didCallSetup).toEqual(false)\n\t\t\texpect(backend.didCallTeardown).toEqual(false)\n\n\t\t\tconst sourceId = registry.addSource(Types.FOO, new NormalSource())\n\t\t\texpect(backend.didCallSetup).toEqual(true)\n\t\t\texpect(backend.didCallTeardown).toEqual(false)\n\t\t\tbackend.didCallSetup = false\n\t\t\tbackend.didCallTeardown = false\n\n\t\t\tconst targetId = registry.addTarget(Types.FOO, new NormalTarget())\n\t\t\texpect(backend.didCallSetup).toEqual(false)\n\t\t\texpect(backend.didCallTeardown).toEqual(false)\n\t\t\tbackend.didCallSetup = false\n\t\t\tbackend.didCallTeardown = false\n\n\t\t\tregistry.removeSource(sourceId)\n\t\t\texpect(backend.didCallSetup).toEqual(false)\n\t\t\texpect(backend.didCallTeardown).toEqual(false)\n\t\t\tbackend.didCallSetup = false\n\t\t\tbackend.didCallTeardown = false\n\n\t\t\tregistry.removeTarget(targetId)\n\t\t\texpect(backend.didCallSetup).toEqual(false)\n\t\t\texpect(backend.didCallTeardown).toEqual(true)\n\t\t\tbackend.didCallSetup = false\n\t\t\tbackend.didCallTeardown = false\n\n\t\t\tregistry.addTarget(Types.BAR, new NormalTarget())\n\t\t\texpect(backend.didCallSetup).toEqual(true)\n\t\t\texpect(backend.didCallTeardown).toEqual(false)\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"returns string handles","suites":["DragDropManager","handler registration"],"updatePoint":{"line":143,"column":28},"line":143,"code":"\t\tit('returns string handles', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget([Types.FOO, Types.BAR], targetB)\n\n\t\t\texpect(isString(sourceId)).toEqual(true)\n\t\t\texpect(isString(targetAId)).toEqual(true)\n\t\t\texpect(isString(targetBId)).toEqual(true)\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"accurately reports handler role","suites":["DragDropManager","handler registration"],"updatePoint":{"line":156,"column":37},"line":156,"code":"\t\tit('accurately reports handler role', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(registry.isSourceId(sourceId)).toEqual(true)\n\t\t\texpect(registry.isSourceId(targetId)).toEqual(false)\n\t\t\texpect(() => registry.isSourceId('something else')).toThrow()\n\t\t\texpect(() => registry.isSourceId(null as any)).toThrow()\n\n\t\t\texpect(registry.isTargetId(sourceId)).toEqual(false)\n\t\t\texpect(registry.isTargetId(targetId)).toEqual(true)\n\t\t\texpect(() => registry.isTargetId('something else')).toThrow()\n\t\t\texpect(() => registry.isTargetId(null as any)).toThrow()\n\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores beginDrag() if canDrag() returns false","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":176,"column":53},"line":176,"code":"\t\t\tit('ignores beginDrag() if canDrag() returns false', () => {\n\t\t\t\tconst source = new NonDraggableSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(source.didCallBeginDrag).toEqual(false)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws if beginDrag() returns non-object","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":184,"column":47},"line":184,"code":"\t\t\tit('throws if beginDrag() returns non-object', () => {\n\t\t\t\tconst source = new BadItemSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\texpect(() => backend.simulateBeginDrag([sourceId])).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"begins drag if canDrag() returns true","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":191,"column":44},"line":191,"code":"\t\t\tit('begins drag if canDrag() returns true', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(source.didCallBeginDrag).toEqual(true)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in beginDrag() if it is called twice during one operation","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":199,"column":71},"line":199,"code":"\t\t\tit('throws in beginDrag() if it is called twice during one operation', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(() => backend.simulateBeginDrag([sourceId])).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in beginDrag() if it is called with an invalid handles","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":207,"column":68},"line":207,"code":"\t\t\tit('throws in beginDrag() if it is called with an invalid handles', (done) => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\texpect(() => (backend as any).simulateBeginDrag('yo')).toThrow()\n\t\t\t\texpect(() => (backend as any).simulateBeginDrag(null)).toThrow()\n\t\t\t\texpect(() => (backend as any).simulateBeginDrag(sourceId)).toThrow()\n\t\t\t\texpect(() => (backend as any).simulateBeginDrag([null])).toThrow()\n\t\t\t\texpect(() => backend.simulateBeginDrag(['yo'])).toThrow()\n\t\t\t\texpect(() => backend.simulateBeginDrag([targetId])).toThrow()\n\t\t\t\texpect(() =>\n\t\t\t\t\t(backend as any).simulateBeginDrag([null, sourceId]),\n\t\t\t\t).toThrow()\n\t\t\t\texpect(() => backend.simulateBeginDrag([targetId, sourceId])).toThrow()\n\n\t\t\t\tregistry.removeSource(sourceId)\n\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\texpect(() => backend.simulateBeginDrag([sourceId])).toThrow()\n\t\t\t\t\tdone()\n\t\t\t\t})\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"calls beginDrag() on the innermost handler with canDrag() returning true","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":232,"column":79},"line":232,"code":"\t\t\tit('calls beginDrag() on the innermost handler with canDrag() returning true', () => {\n\t\t\t\tconst sourceA = new NonDraggableSource()\n\t\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\t\tconst sourceB = new NormalSource()\n\t\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\t\tconst sourceC = new NormalSource()\n\t\t\t\tconst sourceCId = registry.addSource(Types.FOO, sourceC)\n\t\t\t\tconst sourceD = new NonDraggableSource()\n\t\t\t\tconst sourceDId = registry.addSource(Types.FOO, sourceD)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceAId, sourceBId, sourceCId, sourceDId])\n\t\t\t\texpect(sourceA.didCallBeginDrag).toEqual(false)\n\t\t\t\texpect(sourceB.didCallBeginDrag).toEqual(false)\n\t\t\t\texpect(sourceC.didCallBeginDrag).toEqual(true)\n\t\t\t\texpect(sourceD.didCallBeginDrag).toEqual(false)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"lets beginDrag() be called again in a next operation","suites":["DragDropManager","drag source and target contract","beginDrag() and canDrag()"],"updatePoint":{"line":249,"column":59},"line":249,"code":"\t\t\tit('lets beginDrag() be called again in a next operation', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateEndDrag()\n\n\t\t\t\tsource.didCallBeginDrag = false\n\t\t\t\texpect(() => backend.simulateBeginDrag([sourceId])).not.toThrow()\n\t\t\t\texpect(source.didCallBeginDrag).toEqual(true)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"endDrag() sees drop() return value as drop result if dropped on a target","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":263,"column":79},"line":263,"code":"\t\t\tit('endDrag() sees drop() return value as drop result if dropped on a target', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(target.didCallDrop).toEqual(true)\n\t\t\t\texpect(source.recordedDropResult).toEqual({ foo: 'bar' })\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"endDrag() sees {} as drop result by default if dropped on a target","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":277,"column":73},"line":277,"code":"\t\t\tit('endDrag() sees {} as drop result by default if dropped on a target', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new TargetWithNoDropResult()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(source.recordedDropResult).toEqual({})\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"endDrag() sees null as drop result if dropped outside a target","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":290,"column":69},"line":290,"code":"\t\t\tit('endDrag() sees null as drop result if dropped outside a target', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(source.recordedDropResult).toEqual(null)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"calls endDrag even if source was unregistered","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":299,"column":52},"line":299,"code":"\t\t\tit('calls endDrag even if source was unregistered', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tregistry.removeSource(sourceId)\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(source.recordedDropResult).toEqual(null)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in endDrag() if it is called outside a drag operation","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":309,"column":67},"line":309,"code":"\t\t\tit('throws in endDrag() if it is called outside a drag operation', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tregistry.addSource(Types.FOO, source)\n\t\t\t\texpect(() => backend.simulateEndDrag()).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores drop() if no drop targets entered","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":315,"column":48},"line":315,"code":"\t\t\tit('ignores drop() if no drop targets entered', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(source.recordedDropResult).toEqual(null)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores drop() if drop targets entered and left","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":325,"column":54},"line":325,"code":"\t\t\tit('ignores drop() if drop targets entered and left', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst targetA = new NormalTarget()\n\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\tconst targetB = new NormalTarget()\n\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetAId])\n\t\t\t\tbackend.simulateHover([targetAId, targetBId])\n\t\t\t\tbackend.simulateHover([targetAId])\n\t\t\t\tbackend.simulateHover([])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(targetA.didCallDrop).toEqual(false)\n\t\t\t\texpect(targetB.didCallDrop).toEqual(false)\n\t\t\t\texpect(source.recordedDropResult).toEqual(null)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores drop() if canDrop() returns false","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":345,"column":48},"line":345,"code":"\t\t\tit('ignores drop() if canDrop() returns false', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NonDroppableTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\texpect(target.didCallDrop).toEqual(false)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores drop() if target has a different type","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":357,"column":52},"line":357,"code":"\t\t\tit('ignores drop() if target has a different type', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.BAR, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\texpect(target.didCallDrop).toEqual(false)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in drop() if it is called outside a drag operation","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":369,"column":64},"line":369,"code":"\t\t\tit('throws in drop() if it is called outside a drag operation', () => {\n\t\t\t\texpect(() => backend.simulateDrop()).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in drop() if it returns something that is neither undefined nor an object","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":373,"column":87},"line":373,"code":"\t\t\tit('throws in drop() if it returns something that is neither undefined nor an object', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new BadResultTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\texpect(() => backend.simulateDrop()).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in drop() if called twice","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()"],"updatePoint":{"line":384,"column":39},"line":384,"code":"\t\t\tit('throws in drop() if called twice', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\texpect(() => backend.simulateDrop()).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"uses child result if parents have no drop result","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":397,"column":56},"line":397,"code":"\t\t\t\tit('uses child result if parents have no drop result', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new TargetWithNoDropResult()\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new NormalTarget({ number: 16 })\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\t\t\tconst targetC = new NormalTarget({ number: 42 })\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(source.recordedDropResult).toEqual({ number: 16 })\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"excludes targets of different type when dispatching drop","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":417,"column":64},"line":417,"code":"\t\t\t\tit('excludes targets of different type when dispatching drop', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new TargetWithNoDropResult()\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new NormalTarget({ number: 16 })\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.BAR, targetB)\n\t\t\t\t\tconst targetC = new NormalTarget({ number: 42 })\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(source.recordedDropResult).toEqual({ number: 42 })\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"excludes non-droppable targets when dispatching drop","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":437,"column":60},"line":437,"code":"\t\t\t\tit('excludes non-droppable targets when dispatching drop', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new TargetWithNoDropResult()\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new TargetWithNoDropResult()\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\t\t\tconst targetC = new NonDroppableTarget()\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.BAR, targetC)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(source.recordedDropResult).toEqual({})\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"lets parent drop targets transform child results","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":457,"column":56},"line":457,"code":"\t\t\t\tit('lets parent drop targets transform child results', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new TargetWithNoDropResult()\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number * 2,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\t\t\tconst targetC = new NonDroppableTarget()\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\t\t\t\t\tconst targetD = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number + 1,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetDId = registry.addTarget(Types.FOO, targetD)\n\t\t\t\t\tconst targetE = new NormalTarget({ number: 42 })\n\t\t\t\t\tconst targetEId = registry.addTarget(Types.FOO, targetE)\n\t\t\t\t\tconst targetF = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number / 2,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetFId = registry.addTarget(Types.BAR, targetF)\n\t\t\t\t\tconst targetG = new NormalTarget({ number: 100 })\n\t\t\t\t\tconst targetGId = registry.addTarget(Types.BAR, targetG)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([\n\t\t\t\t\t\ttargetAId,\n\t\t\t\t\t\ttargetBId,\n\t\t\t\t\t\ttargetCId,\n\t\t\t\t\t\ttargetDId,\n\t\t\t\t\t\ttargetEId,\n\t\t\t\t\t\ttargetFId,\n\t\t\t\t\t\ttargetGId,\n\t\t\t\t\t])\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetD.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetE.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetF.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetG.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(source.recordedDropResult).toEqual({ number: (42 + 1) * 2 })\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"always chooses parent drop result","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":503,"column":41},"line":503,"code":"\t\t\t\tit('always chooses parent drop result', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new NormalTarget({ number: 12345 })\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number * 2,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\t\t\tconst targetC = new NonDroppableTarget()\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\t\t\t\t\tconst targetD = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number + 1,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetDId = registry.addTarget(Types.FOO, targetD)\n\t\t\t\t\tconst targetE = new NormalTarget({ number: 42 })\n\t\t\t\t\tconst targetEId = registry.addTarget(Types.FOO, targetE)\n\t\t\t\t\tconst targetF = new TransformResultTarget((dropResult: any) => ({\n\t\t\t\t\t\tnumber: dropResult.number / 2,\n\t\t\t\t\t}))\n\t\t\t\t\tconst targetFId = registry.addTarget(Types.BAR, targetF)\n\t\t\t\t\tconst targetG = new NormalTarget({ number: 100 })\n\t\t\t\t\tconst targetGId = registry.addTarget(Types.BAR, targetG)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([\n\t\t\t\t\t\ttargetAId,\n\t\t\t\t\t\ttargetBId,\n\t\t\t\t\t\ttargetCId,\n\t\t\t\t\t\ttargetDId,\n\t\t\t\t\t\ttargetEId,\n\t\t\t\t\t\ttargetFId,\n\t\t\t\t\t\ttargetGId,\n\t\t\t\t\t])\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetD.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetE.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetF.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetG.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(source.recordedDropResult).toEqual({ number: 12345 })\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"excludes removed targets when dispatching drop","suites":["DragDropManager","drag source and target contract","drop(), canDrop() and endDrag()","nested drop targets"],"updatePoint":{"line":549,"column":54},"line":549,"code":"\t\t\t\tit('excludes removed targets when dispatching drop', () => {\n\t\t\t\t\tconst source = new NormalSource()\n\t\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\t\tconst targetA = new NormalTarget()\n\t\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\t\tconst targetB = new NormalTarget()\n\t\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\t\t\tconst targetC = new NormalTarget()\n\t\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\n\t\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\t\t\tregistry.removeTarget(targetBId)\n\t\t\t\t\tbackend.simulateDrop()\n\t\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\t\texpect(targetA.didCallDrop).toEqual(true)\n\t\t\t\t\texpect(targetB.didCallDrop).toEqual(false)\n\t\t\t\t\texpect(targetC.didCallDrop).toEqual(true)\n\t\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on hover after drop","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":572,"column":33},"line":572,"code":"\t\t\tit('throws on hover after drop', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\texpect(() => backend.simulateHover([targetId])).toThrow()\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\n\t\t\t\tbackend.simulateDrop()\n\t\t\t\texpect(() => backend.simulateHover([targetId])).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on hover outside dragging operation","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":586,"column":49},"line":586,"code":"\t\t\tit('throws on hover outside dragging operation', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\t\texpect(() => backend.simulateHover([targetId])).toThrow()\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetId])\n\n\t\t\t\tbackend.simulateEndDrag()\n\t\t\t\texpect(() => backend.simulateHover([targetId])).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"excludes targets of different type when dispatching hover","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":600,"column":64},"line":600,"code":"\t\t\tit('excludes targets of different type when dispatching hover', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst targetA = new NormalTarget()\n\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\tconst targetB = new NormalTarget()\n\t\t\t\tconst targetBId = registry.addTarget(Types.BAR, targetB)\n\t\t\t\tconst targetC = new NormalTarget()\n\t\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\t\t\t\tconst targetD = new NormalTarget()\n\t\t\t\tconst targetDId = registry.addTarget([Types.BAZ, Types.FOO], targetD)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId, targetDId])\n\t\t\t\texpect(targetA.didCallHover).toEqual(true)\n\t\t\t\texpect(targetB.didCallHover).toEqual(false)\n\t\t\t\texpect(targetC.didCallHover).toEqual(true)\n\t\t\t\texpect(targetD.didCallHover).toEqual(true)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"includes non-droppable targets when dispatching hover","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":620,"column":60},"line":620,"code":"\t\t\tit('includes non-droppable targets when dispatching hover', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst targetA = new TargetWithNoDropResult()\n\t\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\t\tconst targetB = new TargetWithNoDropResult()\n\t\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\tbackend.simulateHover([targetAId, targetBId])\n\t\t\t\texpect(targetA.didCallHover).toEqual(true)\n\t\t\t\texpect(targetB.didCallHover).toEqual(true)\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in hover() if it contains the same target twice","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":634,"column":61},"line":634,"code":"\t\t\tit('throws in hover() if it contains the same target twice', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.BAR, source)\n\t\t\t\tconst targetA = new NormalTarget()\n\t\t\t\tconst targetAId = registry.addTarget(Types.BAR, targetA)\n\t\t\t\tconst targetB = new NormalTarget()\n\t\t\t\tconst targetBId = registry.addTarget(Types.BAR, targetB)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(() =>\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetAId]),\n\t\t\t\t).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in hover() if it contains the same target twice (even if wrong type)","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":648,"column":82},"line":648,"code":"\t\t\tit('throws in hover() if it contains the same target twice (even if wrong type)', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst targetA = new NormalTarget()\n\t\t\t\tconst targetAId = registry.addTarget(Types.BAR, targetA)\n\t\t\t\tconst targetB = new NormalTarget()\n\t\t\t\tconst targetBId = registry.addTarget(Types.BAR, targetB)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(() =>\n\t\t\t\t\tbackend.simulateHover([targetAId, targetBId, targetAId]),\n\t\t\t\t).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in hover() if it is called with a non-array","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":662,"column":57},"line":662,"code":"\t\t\tit('throws in hover() if it is called with a non-array', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.BAR, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(() => (backend as any).simulateHover(null)).toThrow()\n\t\t\t\texpect(() => (backend as any).simulateHover('yo')).toThrow()\n\t\t\t\texpect(() => (backend as any).simulateHover(targetId)).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws in hover() if it contains an invalid drop target","suites":["DragDropManager","drag source and target contract","hover()"],"updatePoint":{"line":674,"column":62},"line":674,"code":"\t\t\tit('throws in hover() if it contains an invalid drop target', () => {\n\t\t\t\tconst source = new NormalSource()\n\t\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\t\tconst target = new NormalTarget()\n\t\t\t\tconst targetId = registry.addTarget(Types.BAR, target)\n\n\t\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\t\texpect(() => (backend as any).simulateHover([targetId, null])).toThrow()\n\t\t\t\texpect(() => backend.simulateHover([targetId, 'yo'])).toThrow()\n\t\t\t\texpect(() => backend.simulateHover([targetId, sourceId])).toThrow()\n\t\t\t})","file":"DragDropManager.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on bad listener","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":40,"column":28},"line":40,"code":"\t\tit('throws on bad listener', () => {\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToStateChange(() => {\n\t\t\t\t\t/* empty */\n\t\t\t\t}),\n\t\t\t).not.toThrow()\n\n\t\t\texpect(() => (monitor as any).subscribeToStateChange()).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToStateChange(42)).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToStateChange('hi')).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToStateChange({})).toThrow()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on bad handlerIds","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":53,"column":30},"line":53,"code":"\t\tit('throws on bad handlerIds', () => {\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t\t() => {\n\t\t\t\t\t\t/* empty */\n\t\t\t\t\t},\n\t\t\t\t\t{ handlerIds: [] },\n\t\t\t\t),\n\t\t\t).not.toThrow()\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t\t() => {\n\t\t\t\t\t\t/* empty */\n\t\t\t\t\t},\n\t\t\t\t\t{ handlerIds: ['hi'] },\n\t\t\t\t),\n\t\t\t).not.toThrow()\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t\t() => {\n\t\t\t\t\t\t/* empty */\n\t\t\t\t\t},\n\t\t\t\t\t{ handlerIds: {} as any },\n\t\t\t\t),\n\t\t\t).toThrow()\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t\t() => {\n\t\t\t\t\t\t/* empty */\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\thandlerIds: (() => {\n\t\t\t\t\t\t\t/* empty */\n\t\t\t\t\t\t}) as any,\n\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t).toThrow()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"allows to unsubscribe","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":92,"column":27},"line":92,"code":"\t\tit('allows to unsubscribe', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\tlet raisedChange = false\n\t\t\tconst unsubscribe = monitor.subscribeToStateChange(() => {\n\t\t\t\traisedChange = true\n\t\t\t})\n\n\t\t\tunsubscribe()\n\t\t\texpect(unsubscribe).not.toThrow()\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises global change event on beginDrag()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":108,"column":47},"line":108,"code":"\t\tit('raises global change event on beginDrag()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\tmonitor.subscribeToStateChange(onlyOnce(done))\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises global change event on beginDrag() even if a subscriber causes other changes","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":116,"column":89},"line":116,"code":"\t\tit('raises global change event on beginDrag() even if a subscriber causes other changes', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\n\t\t\tlet notified = false\n\t\t\tmonitor.subscribeToStateChange(() => {\n\t\t\t\tif (!notified) {\n\t\t\t\t\tnotified = true\n\t\t\t\t\tregistry.addTarget(Types.FOO, target)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tmonitor.subscribeToStateChange(onlyOnce(done))\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises local change event on sources and targets in beginDrag()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":133,"column":69},"line":133,"code":"\t\tit('raises local change event on sources and targets in beginDrag()', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\n\t\t\tlet raisedChangeForSourceA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceAAndB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceAAndB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId, sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(raisedChangeForSourceA).toEqual(true)\n\t\t\texpect(raisedChangeForSourceB).toEqual(true)\n\t\t\texpect(raisedChangeForSourceAAndB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises local change event on sources and targets in endDrag()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":188,"column":67},"line":188,"code":"\t\tit('raises local change event on sources and targets in endDrag()', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\n\t\t\tlet raisedChangeForSourceA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceAAndB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceAAndB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId, sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(raisedChangeForSourceA).toEqual(true)\n\t\t\texpect(raisedChangeForSourceB).toEqual(true)\n\t\t\texpect(raisedChangeForSourceAAndB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises local change event on sources and targets in drop()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":245,"column":64},"line":245,"code":"\t\tit('raises local change event on sources and targets in drop()', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\tbackend.simulateHover([targetAId])\n\n\t\t\tlet raisedChangeForSourceA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceAAndB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceAAndB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId, sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(raisedChangeForSourceA).toEqual(true)\n\t\t\texpect(raisedChangeForSourceB).toEqual(true)\n\t\t\texpect(raisedChangeForSourceAAndB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises local change event only on previous and next targets in hover()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":303,"column":76},"line":303,"code":"\t\tit('raises local change event only on previous and next targets in hover()', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\t\t\tconst targetD = new NormalTarget()\n\t\t\tconst targetDId = registry.addTarget(Types.FOO, targetD)\n\t\t\tconst targetE = new NormalTarget()\n\t\t\tconst targetEId = registry.addTarget(Types.FOO, targetE)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\tbackend.simulateHover([targetAId, targetBId])\n\n\t\t\tlet raisedChangeForSourceA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetC = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetC = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetCId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetD = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetD = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetDId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetE = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetE = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetEId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceBAndTargetC = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceBAndTargetC = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId, targetCId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForSourceBAndTargetE = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForSourceBAndTargetE = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [sourceBId, targetEId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tbackend.simulateHover([targetDId, targetEId])\n\t\t\texpect(raisedChangeForSourceA).toEqual(false)\n\t\t\texpect(raisedChangeForSourceB).toEqual(false)\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t\texpect(raisedChangeForTargetB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetC).toEqual(false)\n\t\t\texpect(raisedChangeForTargetD).toEqual(true)\n\t\t\texpect(raisedChangeForTargetE).toEqual(true)\n\t\t\texpect(raisedChangeForSourceBAndTargetC).toEqual(false)\n\t\t\texpect(raisedChangeForSourceBAndTargetE).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises local change event when target stops being or becomes innermost in hover()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":424,"column":87},"line":424,"code":"\t\tit('raises local change event when target stops being or becomes innermost in hover()', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\t\t\tconst targetD = new NormalTarget()\n\t\t\tconst targetDId = registry.addTarget(Types.FOO, targetD)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId, targetDId])\n\n\t\t\tlet raisedChangeForTargetA = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetA = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetAId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetB = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetB = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetBId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetC = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetC = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetCId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tlet raisedChangeForTargetD = false\n\t\t\tmonitor.subscribeToStateChange(\n\t\t\t\t() => {\n\t\t\t\t\traisedChangeForTargetD = true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thandlerIds: [targetDId],\n\t\t\t\t},\n\t\t\t)\n\n\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\texpect(raisedChangeForTargetA).toEqual(false)\n\t\t\texpect(raisedChangeForTargetB).toEqual(false)\n\t\t\texpect(raisedChangeForTargetC).toEqual(true)\n\t\t\texpect(raisedChangeForTargetD).toEqual(true)\n\n\t\t\traisedChangeForTargetA = false\n\t\t\traisedChangeForTargetB = false\n\t\t\traisedChangeForTargetC = false\n\t\t\traisedChangeForTargetD = false\n\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId, targetDId])\n\t\t\texpect(raisedChangeForTargetA).toEqual(false)\n\t\t\texpect(raisedChangeForTargetB).toEqual(false)\n\t\t\texpect(raisedChangeForTargetC).toEqual(true)\n\t\t\texpect(raisedChangeForTargetD).toEqual(true)\n\n\t\t\traisedChangeForTargetA = false\n\t\t\traisedChangeForTargetB = false\n\t\t\traisedChangeForTargetC = false\n\t\t\traisedChangeForTargetD = false\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t\texpect(raisedChangeForTargetB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetC).toEqual(true)\n\t\t\texpect(raisedChangeForTargetD).toEqual(true)\n\n\t\t\traisedChangeForTargetA = false\n\t\t\traisedChangeForTargetB = false\n\t\t\traisedChangeForTargetC = false\n\t\t\traisedChangeForTargetD = false\n\t\t\tbackend.simulateHover([targetAId, targetBId])\n\t\t\texpect(raisedChangeForTargetA).toEqual(true)\n\t\t\texpect(raisedChangeForTargetB).toEqual(true)\n\t\t\texpect(raisedChangeForTargetC).toEqual(false)\n\t\t\texpect(raisedChangeForTargetD).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises global change event on endDrag()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":516,"column":45},"line":516,"code":"\t\tit('raises global change event on endDrag()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tregistry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tmonitor.subscribeToStateChange(done)\n\t\t\tbackend.simulateEndDrag()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises global change event on drop()","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":527,"column":42},"line":527,"code":"\t\tit('raises global change event on drop()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetId])\n\n\t\t\tmonitor.subscribeToStateChange(done)\n\t\t\tbackend.simulateDrop()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"does not raise global change event if hover targets have not changed","suites":["DragDropMonitor","state change subscription"],"updatePoint":{"line":540,"column":74},"line":540,"code":"\t\tit('does not raise global change event if hover targets have not changed', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget({ a: 123 })\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new TargetWithNoDropResult()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\n\t\t\tlet raisedChange = false\n\t\t\tmonitor.subscribeToStateChange(() => {\n\t\t\t\traisedChange = true\n\t\t\t})\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t\traisedChange = false\n\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t\traisedChange = false\n\n\t\t\tbackend.simulateHover([targetBId])\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t\traisedChange = false\n\n\t\t\tbackend.simulateHover([targetBId])\n\t\t\texpect(raisedChange).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetBId, targetAId])\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t\traisedChange = false\n\n\t\t\tbackend.simulateHover([targetBId, targetAId])\n\t\t\texpect(raisedChange).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetAId, targetBId])\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t\traisedChange = false\n\n\t\t\tbackend.simulateHover([targetAId, targetBId])\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws on bad listener","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":585,"column":28},"line":585,"code":"\t\tit('throws on bad listener', () => {\n\t\t\texpect(() =>\n\t\t\t\tmonitor.subscribeToOffsetChange(() => {\n\t\t\t\t\t/* empty */\n\t\t\t\t}),\n\t\t\t).not.toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToOffsetChange()).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToOffsetChange(42)).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToOffsetChange('hi')).toThrow()\n\t\t\texpect(() => (monitor as any).subscribeToOffsetChange({})).toThrow()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"allows to unsubscribe","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":597,"column":27},"line":597,"code":"\t\tit('allows to unsubscribe', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\tlet raisedChange = false\n\t\t\tconst unsubscribe = monitor.subscribeToOffsetChange(() => {\n\t\t\t\traisedChange = true\n\t\t\t})\n\n\t\t\tunsubscribe()\n\t\t\texpect(unsubscribe).not.toThrow()\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 0, y: 0 }),\n\t\t\t})\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"throws when passing clientOffset without getSourceClientOffset","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":616,"column":68},"line":616,"code":"\t\tit('throws when passing clientOffset without getSourceClientOffset', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\texpect(() =>\n\t\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\t}),\n\t\t\t).toThrow()\n\n\t\t\texpect(() =>\n\t\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\t\tgetSourceClientOffset: { x: 0, y: 0 },\n\t\t\t\t}),\n\t\t\t).toThrow()\n\n\t\t\texpect(() =>\n\t\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\t\tgetSourceClientOffset: () => ({ x: 0, y: 0 }),\n\t\t\t\t}),\n\t\t\t).not.toThrow()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"sets source client offset from the innermost draggable source","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":641,"column":67},"line":641,"code":"\t\tit('sets source client offset from the innermost draggable source', () => {\n\t\t\tconst sourceA = new NonDraggableSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst sourceC = new NormalSource()\n\t\t\tconst sourceCId = registry.addSource(Types.FOO, sourceC)\n\t\t\tconst sourceD = new NonDraggableSource()\n\t\t\tconst sourceDId = registry.addSource(Types.FOO, sourceD)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId, sourceBId, sourceCId, sourceDId], {\n\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\tgetSourceClientOffset: (sourceId: string) =>\n\t\t\t\t\tsourceId === sourceCId ? { x: 42, y: 0 } : { x: 0, y: 0 },\n\t\t\t})\n\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 42, y: 0 })\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of offsets","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":660,"column":28},"line":660,"code":"\t\tit('keeps track of offsets', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 50, y: 40 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 20, y: 10 }),\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({ x: 0, y: 0 })\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 60, y: 70 },\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 60, y: 70 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: 30, y: 40 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({ x: 10, y: 30 })\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 0, y: 0 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: -30, y: -30 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({\n\t\t\t\tx: -50,\n\t\t\t\ty: -40,\n\t\t\t})\n\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 50, y: 40 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 20, y: 10 }),\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({ x: 0, y: 0 })\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of offsets when initial offset is not specified","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":735,"column":65},"line":735,"code":"\t\tit('keeps track of offsets when initial offset is not specified', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 60, y: 70 },\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 60, y: 70 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 60, y: 70 },\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 60, y: 70 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of offsets when current offset is not specified","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":794,"column":65},"line":794,"code":"\t\tit('keeps track of offsets when current offset is not specified', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 50, y: 40 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 20, y: 10 }),\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({ x: 0, y: 0 })\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 60, y: 70 },\n\t\t\t})\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual({ x: 20, y: 10 })\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual({ x: 50, y: 40 })\n\t\t\texpect(monitor.getClientOffset()).toEqual({ x: 60, y: 70 })\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual({ x: 30, y: 40 })\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual({ x: 10, y: 30 })\n\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.getInitialSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getInitialClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getSourceClientOffset()).toEqual(null)\n\t\t\texpect(monitor.getDifferenceFromInitialOffset()).toEqual(null)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises offset change event on beginDrag()","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":847,"column":47},"line":847,"code":"\t\tit('raises offset change event on beginDrag()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\tmonitor.subscribeToOffsetChange(onlyOnce(done))\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 0, y: 0 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 0, y: 0 }),\n\t\t\t})\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises offset change event on hover() if clientOffset changed","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":858,"column":67},"line":858,"code":"\t\tit('raises offset change event on hover() if clientOffset changed', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 10, y: 10 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 0, y: 0 }),\n\t\t\t})\n\n\t\t\tmonitor.subscribeToOffsetChange(done)\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 20, y: 10 },\n\t\t\t})\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"does not raise offset change event on hover() when not tracking offset","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":875,"column":76},"line":875,"code":"\t\tit('does not raise offset change event on hover() when not tracking offset', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\n\t\t\tlet raisedChange = false\n\t\t\tmonitor.subscribeToOffsetChange(() => {\n\t\t\t\traisedChange = true\n\t\t\t})\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"does not raise offset change event on hover() when clientOffset has not changed","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":892,"column":85},"line":892,"code":"\t\tit('does not raise offset change event on hover() when clientOffset has not changed', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], {\n\t\t\t\tclientOffset: { x: 100, y: 200 },\n\t\t\t\tgetSourceClientOffset: () => ({ x: 0, y: 0 }),\n\t\t\t})\n\n\t\t\tlet raisedChange = false\n\t\t\tmonitor.subscribeToOffsetChange(() => {\n\t\t\t\traisedChange = true\n\t\t\t})\n\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 100, y: 200 },\n\t\t\t})\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t\tbackend.simulateHover([], {\n\t\t\t\tclientOffset: { x: 100, y: 200 },\n\t\t\t})\n\t\t\texpect(raisedChange).toEqual(false)\n\t\t\tbackend.simulateHover([targetId], {\n\t\t\t\tclientOffset: { x: 101, y: 200 },\n\t\t\t})\n\t\t\texpect(raisedChange).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises offset change event on endDrag()","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":922,"column":45},"line":922,"code":"\t\tit('raises offset change event on endDrag()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tregistry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tmonitor.subscribeToOffsetChange(done)\n\t\t\tbackend.simulateEndDrag()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"raises offset change event on drop()","suites":["DragDropMonitor","offset change subscription"],"updatePoint":{"line":933,"column":42},"line":933,"code":"\t\tit('raises offset change event on drop()', (done) => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetId])\n\n\t\t\tmonitor.subscribeToOffsetChange(done)\n\t\t\tbackend.simulateDrop()\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"returns true from canDrag unless already dragging or drag source opts out","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":948,"column":79},"line":948,"code":"\t\tit('returns true from canDrag unless already dragging or drag source opts out', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst sourceC = new NormalSource()\n\t\t\tconst sourceCId = registry.addSource(Types.BAR, sourceC)\n\t\t\tconst sourceD = new NonDraggableSource()\n\t\t\tconst sourceDId = registry.addSource(Types.FOO, sourceD)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.canDragSource(sourceAId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceBId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceCId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(monitor.canDragSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.canDragSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.canDragSource(sourceAId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceBId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceCId)).toEqual(true)\n\t\t\texpect(monitor.canDragSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(monitor.canDragSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.canDragSource(sourceDId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"returns true from canDrop if dragging and type matches, unless target opts out","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":991,"column":84},"line":991,"code":"\t\tit('returns true from canDrop if dragging and type matches, unless target opts out', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(Types.BAR, targetC)\n\t\t\tconst targetD = new NonDroppableTarget()\n\t\t\tconst targetDId = registry.addTarget(Types.FOO, targetD)\n\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"treats symbol types just like string types","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":1034,"column":48},"line":1034,"code":"\t\tit('treats symbol types just like string types', () => {\n\t\t\tconst FooType = Symbol('foo')\n\t\t\tconst BarType = Symbol('bar')\n\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(FooType, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(FooType, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget(FooType, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(BarType, targetC)\n\t\t\tconst targetD = new NonDroppableTarget()\n\t\t\tconst targetDId = registry.addTarget(FooType, targetD)\n\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetDId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"returns true from isDragging only while dragging","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":1080,"column":54},"line":1080,"code":"\t\tit('returns true from isDragging only while dragging', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst other = new NormalSource()\n\t\t\tconst otherId = registry.addSource(Types.FOO, other)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(otherId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(otherId)).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(otherId)).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(otherId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([otherId])\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(otherId)).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of dragged item, type and source handle","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":1114,"column":57},"line":1114,"code":"\t\tit('keeps track of dragged item, type and source handle', () => {\n\t\t\tconst sourceA = new NormalSource({ a: 123 })\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource({ a: 456 })\n\t\t\tconst sourceBId = registry.addSource(Types.BAR, sourceB)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.getItem()).toEqual(null)\n\t\t\texpect(monitor.getItemType()).toEqual(null)\n\t\t\texpect(monitor.getSourceId()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(monitor.getItem().a).toEqual(123)\n\t\t\texpect(monitor.getItemType()).toEqual(Types.FOO)\n\t\t\texpect(monitor.getSourceId()).toEqual(sourceAId)\n\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.getItem().a).toEqual(123)\n\t\t\texpect(monitor.getItemType()).toEqual(Types.FOO)\n\t\t\texpect(monitor.getSourceId()).toEqual(sourceAId)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.getItem()).toEqual(null)\n\t\t\texpect(monitor.getItemType()).toEqual(null)\n\t\t\texpect(monitor.getSourceId()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceBId])\n\t\t\tregistry.removeSource(sourceBId)\n\t\t\texpect(monitor.getItem().a).toEqual(456)\n\t\t\texpect(monitor.getItemType()).toEqual(Types.BAR)\n\t\t\texpect(monitor.getSourceId()).toEqual(sourceBId)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of drop result and whether it occured","suites":["DragDropMonitor","state tracking"],"updatePoint":{"line":1149,"column":55},"line":1149,"code":"\t\tit('keeps track of drop result and whether it occured', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget({ a: 123 })\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new TargetWithNoDropResult()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\n\t\t\texpect(monitor.didDrop()).toEqual(false)\n\t\t\texpect(monitor.getDropResult()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.didDrop()).toEqual(false)\n\t\t\texpect(monitor.getDropResult()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.didDrop()).toEqual(true)\n\t\t\texpect(monitor.getDropResult()).toEqual({ a: 123 })\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.didDrop()).toEqual(false)\n\t\t\texpect(monitor.getDropResult()).toEqual(null)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\texpect(monitor.didDrop()).toEqual(false)\n\t\t\texpect(monitor.getDropResult()).toEqual(null)\n\n\t\t\tbackend.simulateHover([targetBId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.didDrop()).toEqual(true)\n\t\t\texpect(monitor.getDropResult()).toEqual({})\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.didDrop()).toEqual(false)\n\t\t\texpect(monitor.getDropResult()).toEqual(null)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"takes all types into consideration","suites":["DragDropMonitor","multi-type targets"],"updatePoint":{"line":1189,"column":40},"line":1189,"code":"\t\tit('takes all types into consideration', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.BAZ, sourceB)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget([Types.FOO, Types.BAR], targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget([Types.BAR, Types.BAZ], targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(\n\t\t\t\t[Types.FOO, Types.BAR, Types.BAZ],\n\t\t\t\ttargetC,\n\t\t\t)\n\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(true)\n\n\t\t\tbackend.simulateHover([targetAId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceBId])\n\t\t\texpect(monitor.canDropOnTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.canDropOnTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.canDropOnTarget(targetCId)).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"returns false from isDragging(sourceId) if source is not published","suites":["DragDropMonitor","multi-type targets"],"updatePoint":{"line":1230,"column":72},"line":1230,"code":"\t\tit('returns false from isDragging(sourceId) if source is not published', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], { publishSource: false })\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulatePublishDragSource()\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(true)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"ignores publishDragSource() outside dragging operation","suites":["DragDropMonitor","multi-type targets"],"updatePoint":{"line":1250,"column":60},"line":1250,"code":"\t\tit('ignores publishDragSource() outside dragging operation', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulatePublishDragSource()\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId], { publishSource: false })\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulatePublishDragSource()\n\t\t\texpect(monitor.isDragging()).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(true)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\n\t\t\tbackend.simulatePublishDragSource()\n\t\t\texpect(monitor.isDragging()).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"treats removing a hovered drop target as unhovering it","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1280,"column":60},"line":1280,"code":"\t\tit('treats removing a hovered drop target as unhovering it', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.getTargetIds().length).toEqual(1)\n\t\t\texpect(monitor.isOverTarget(targetId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetId, { shallow: true })).toEqual(true)\n\n\t\t\tregistry.removeTarget(targetId)\n\t\t\texpect(monitor.getTargetIds().length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetId, { shallow: true })).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"keeps track of target handles","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1298,"column":35},"line":1298,"code":"\t\tit('keeps track of target handles', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NormalTarget()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(Types.FOO, targetC)\n\n\t\t\tlet handles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateHover([])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(3)\n\t\t\texpect(handles[0]).toEqual(targetAId)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[1]).toEqual(targetBId)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[2]).toEqual(targetCId)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(true)\n\n\t\t\tbackend.simulateHover([targetCId, targetBId, targetAId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(3)\n\t\t\texpect(handles[0]).toEqual(targetCId)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[1]).toEqual(targetBId)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[2]).toEqual(targetAId)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(true)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"resets target handles on drop","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1358,"column":35},"line":1358,"code":"\t\tit('resets target handles on drop', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tlet handles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateDrop()\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"resets target handles on endDrag","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1379,"column":38},"line":1379,"code":"\t\tit('resets target handles on endDrag', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\tlet handles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateEndDrag()\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"counts non-droppable targets, but skips targets of another type","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1399,"column":69},"line":1399,"code":"\t\tit('counts non-droppable targets, but skips targets of another type', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst targetA = new NormalTarget()\n\t\t\tconst targetAId = registry.addTarget(Types.FOO, targetA)\n\t\t\tconst targetB = new NonDroppableTarget()\n\t\t\tconst targetBId = registry.addTarget(Types.FOO, targetB)\n\t\t\tconst targetC = new NormalTarget()\n\t\t\tconst targetCId = registry.addTarget(Types.BAR, targetC)\n\n\t\t\tlet handles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateHover([])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(0)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetAId, targetBId, targetCId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(2)\n\t\t\texpect(handles[0]).toEqual(targetAId)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[1]).toEqual(targetBId)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateHover([targetCId, targetBId, targetAId])\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles.length).toEqual(2)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[0]).toEqual(targetBId)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(handles[1]).toEqual(targetAId)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(true)\n\n\t\t\tbackend.simulateHover([targetBId])\n\t\t\tbackend.simulateDrop()\n\t\t\thandles = monitor.getTargetIds()\n\t\t\texpect(handles[0]).toEqual(targetBId)\n\t\t\texpect(handles.length).toEqual(1)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(handles[0]).toEqual(targetBId)\n\t\t\texpect(handles.length).toEqual(1)\n\t\t\texpect(monitor.isOverTarget(targetAId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetAId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetBId, { shallow: true })).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetCId, { shallow: true })).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"correctly handles isOverTarget() for multi-type targets","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1485,"column":61},"line":1485,"code":"\t\tit('correctly handles isOverTarget() for multi-type targets', () => {\n\t\t\tconst sourceA = new NormalSource()\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NormalSource()\n\t\t\tconst sourceBId = registry.addSource(Types.BAR, sourceB)\n\t\t\tconst sourceC = new NormalSource()\n\t\t\tconst sourceCId = registry.addSource(Types.BAZ, sourceC)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget([Types.FOO, Types.BAR], target)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.isOverTarget(targetId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetId, { shallow: true })).toEqual(true)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\tbackend.simulateBeginDrag([sourceBId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.isOverTarget(targetId)).toEqual(true)\n\t\t\texpect(monitor.isOverTarget(targetId, { shallow: true })).toEqual(true)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\tbackend.simulateBeginDrag([sourceCId])\n\t\t\tbackend.simulateHover([targetId])\n\t\t\texpect(monitor.isOverTarget(targetId)).toEqual(false)\n\t\t\texpect(monitor.isOverTarget(targetId, { shallow: true })).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"does not let array mutation corrupt internal state","suites":["DragDropMonitor","target handle tracking"],"updatePoint":{"line":1513,"column":56},"line":1513,"code":"\t\tit('does not let array mutation corrupt internal state', () => {\n\t\t\tconst source = new NormalSource()\n\t\t\tconst sourceId = registry.addSource(Types.FOO, source)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\t\t\tconst handles = [targetId]\n\n\t\t\tbackend.simulateBeginDrag([sourceId])\n\t\t\tbackend.simulateHover(handles)\n\t\t\texpect(monitor.getTargetIds().length).toEqual(1)\n\n\t\t\thandles.push(targetId)\n\t\t\texpect(monitor.getTargetIds().length).toEqual(1)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"},{"name":"uses custom isDragging functions","suites":["DragDropMonitor","mirror drag sources"],"updatePoint":{"line":1530,"column":38},"line":1530,"code":"\t\tit('uses custom isDragging functions', () => {\n\t\t\tconst sourceA = new NumberSource(1, true)\n\t\t\tconst sourceAId = registry.addSource(Types.FOO, sourceA)\n\t\t\tconst sourceB = new NumberSource(2, true)\n\t\t\tconst sourceBId = registry.addSource(Types.FOO, sourceB)\n\t\t\tconst sourceC = new NumberSource(3, true)\n\t\t\tconst sourceCId = registry.addSource(Types.BAR, sourceC)\n\t\t\tconst sourceD = new NumberSource(4, false)\n\t\t\tconst sourceDId = registry.addSource(Types.FOO, sourceD)\n\t\t\tconst target = new NormalTarget()\n\t\t\tconst targetId = registry.addTarget(Types.FOO, target)\n\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceAId])\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(false)\n\n\t\t\tsourceA.number = 3\n\t\t\tsourceB.number = 1\n\t\t\tsourceC.number = 1\n\t\t\tsourceD.number = 1\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(true)\n\n\t\t\tregistry.removeSource(sourceDId)\n\t\t\tbackend.simulateHover([targetId])\n\t\t\tbackend.simulateDrop()\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(true)\n\n\t\t\tbackend.simulateEndDrag()\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(false)\n\n\t\t\tbackend.simulateBeginDrag([sourceBId])\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(true)\n\t\t\texpect(monitor.isDraggingSource(sourceCId)).toEqual(false)\n\t\t\texpect(monitor.isDraggingSource(sourceDId)).toEqual(true)\n\n\t\t\tsourceA.number = 1\n\t\t\texpect(monitor.isDraggingSource(sourceAId)).toEqual(true)\n\n\t\t\tsourceB.number = 5\n\t\t\texpect(monitor.isDraggingSource(sourceBId)).toEqual(false)\n\t\t})","file":"DragDropMonitor.spec.ts","skipped":false,"dir":"packages/dnd-core/src/__tests__"}]}