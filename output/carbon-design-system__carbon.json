{"repo":"carbon-design-system/carbon","url":"https://github.com/carbon-design-system/carbon","branch":"main","configs":[{"package":"@carbon/react","lang":"js","dir":"packages/carbon-react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/colors","lang":"js","dir":"packages/colors/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components","lang":"js","dir":"packages/components/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/elements","lang":"js","dir":"packages/elements/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/feature-flags","lang":"js","dir":"packages/feature-flags/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/grid","lang":"js","dir":"packages/grid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-build-helpers","lang":"js","dir":"packages/icon-build-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/icon-helpers","lang":"js","dir":"packages/icon-helpers/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/layout","lang":"js","dir":"packages/layout/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/motion","lang":"js","dir":"packages/motion/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"carbon-components-react","lang":"js","dir":"packages/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/scss-generator","lang":"js","dir":"packages/scss-generator/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/styles","lang":"js","dir":"packages/styles/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/test-utils","lang":"js","dir":"packages/test-utils/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/themes","lang":"js","dir":"packages/themes/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@carbon/type","lang":"js","dir":"packages/type/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"colors","suites":[],"updatePoint":{"line":13,"column":12,"index":282},"line":13,"code":"test('colors', () => {\n  expect(colors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"hoverColors","suites":[],"updatePoint":{"line":16,"column":17,"index":350},"line":16,"code":"test('hoverColors', () => {\n  expect(hoverColors).toMatchSnapshot();\n});","file":"colors-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"Public API","suites":["@carbon/colors"],"updatePoint":{"line":19,"column":18,"index":393},"line":19,"code":"  test('Public API', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as colors;\n\n      $_: get-value(meta.module-variables('colors'));\n    `);\n    const variables = getValue(0);\n    expect(variables).toMatchSnapshot();\n  });","file":"scss-test.js","skipped":false,"dir":"packages/colors/__tests__"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":9,"column":56,"index":275},"line":9,"code":"test('Public API should only change with a semver change', () => {\n  expect(Object.keys(CarbonElements).sort()).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/elements/src/__tests__"},{"name":"should add the given flag and set whether its enabled","suites":["@carbon/feature-flags","add"],"updatePoint":{"line":20,"column":61,"index":469},"line":20,"code":"    it('should add the given flag and set whether its enabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `);\n\n      // flag-a\n      expect(getValue(0)).toBe(true);\n      // flag-b\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should enable the given feature flag","suites":["@carbon/feature-flags","enable"],"updatePoint":{"line":40,"column":44,"index":1007},"line":40,"code":"    it('should enable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.enable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(false);\n      expect(getValue(1)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should disable the given feature flag","suites":["@carbon/feature-flags","disable"],"updatePoint":{"line":59,"column":45,"index":1513},"line":59,"code":"    it('should disable the given feature flag', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n\n        @include feature-flags.disable(flag-a);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n      `);\n      expect(getValue(0)).toBe(true);\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should return whether a flag is enabled or disabled","suites":["@carbon/feature-flags","enabled"],"updatePoint":{"line":78,"column":59,"index":2033},"line":78,"code":"    it('should return whether a flag is enabled or disabled', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-a, true);\n        @include feature-flags.add(flag-b, false);\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n      `);\n\n      // flag-a\n      expect(getValue(0)).toBe(true);\n      // flag-b\n      expect(getValue(1)).toBe(false);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"should set each feature flag given","suites":["@carbon/feature-flags","merge"],"updatePoint":{"line":98,"column":42,"index":2568},"line":98,"code":"    it('should set each feature flag given', async () => {\n      const {\n        getValue\n      } = await render(`\n        @use '../index.scss' as feature-flags;\n\n        @include feature-flags.add(flag-c, false);\n        @include feature-flags.merge((\n          flag-a: true,\n          flag-b: false,\n          flag-c: true,\n        ));\n\n        $_: get-value(feature-flags.enabled(flag-a));\n        $_: get-value(feature-flags.enabled(flag-b));\n        $_: get-value(feature-flags.enabled(flag-c));\n      `);\n\n      // flag-a\n      expect(getValue(0)).toBe(true);\n      // flag-b\n      expect(getValue(1)).toBe(false);\n      // flag-c\n      expect(getValue(2)).toBe(true);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/feature-flags/__tests__"},{"name":"Public API","suites":["@carbon/grid"],"updatePoint":{"line":19,"column":18,"index":391},"line":19,"code":"  test('Public API', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as grid;\n\n      $_: get('variables', meta.module-variables('grid'));\n      $_: get('mixins', (\n        css-grid: meta.mixin-exists('css-grid', 'grid'),\n        flex-grid: meta.mixin-exists('flex-grid', 'grid'),\n      ));\n    `);\n    expect(Object.keys(unwrap('variables'))).toMatchSnapshot();\n    expect(unwrap('mixins')).toEqual({\n      'css-grid': true,\n      'flex-grid': true\n    });\n  });","file":"scss-test.js","skipped":false,"dir":"packages/grid/__tests__"},{"name":"should register each asset from a directory","suites":["registry"],"updatePoint":{"line":31,"column":49,"index":858},"line":31,"code":"  it('should register each asset from a directory', async () => {\n    const assets = ['a', 'b', 'c'];\n    const files = {};\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n    for (const [id] of registry) {\n      expect(assets.indexOf(id)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register each asset in nested directories","suites":["registry"],"updatePoint":{"line":44,"column":54,"index":1274},"line":44,"code":"  it('should register each asset in nested directories', async () => {\n    const assets = ['foo/a', 'foo/bar/b', 'baz/c'];\n    const files = {};\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n    for (const icon of registry.values()) {\n      const asset = icon.namespace.join('/') + '/' + icon.id;\n      expect(assets.indexOf(asset)).not.toBe(-1);\n    }\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should register assets with the same name under the same icon","suites":["registry"],"updatePoint":{"line":58,"column":67,"index":1793},"line":58,"code":"  it('should register assets with the same name under the same icon', async () => {\n    const assets = ['16/a', '20/a', '32/a'];\n    const files = {};\n    for (const asset of assets) {\n      const filepath = `/svg/${asset}.svg`;\n      files[filepath] = 'mock';\n    }\n    vol.fromJSON(files);\n    const registry = await Registry.create('/svg');\n    expect(registry.size).toBe(1);\n    const icon = registry.get('a');\n    expect(icon.assets.length).toBe(assets.length);\n    expect(icon.assets[0].size).toBe(16);\n    expect(icon.assets[1].size).toBe(20);\n    expect(icon.assets[2].size).toBe(32);\n  });","file":"registry-test.js","skipped":false,"dir":"packages/icon-build-helpers/src/__tests__"},{"name":"should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs","suites":["getAttributes"],"updatePoint":{"line":17,"column":74,"index":438},"line":17,"code":"  it('should default `aria-hidden=\"true\"` and `focusable=\"false\"` for SVGs', () => {\n    const attrs = getAttributes();\n    expect(attrs['aria-hidden']).toBe(true);\n    expect(attrs.focusable).toBe('false');\n    expect(attrs.role).not.toBeDefined();\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set `focusable=\"%s\"` when using %s","suites":["getAttributes"],"line":29,"code":"  test.each([['false', 'only tabindex', {\n    tabindex: 0\n  }], ['true', 'aria-label and tabindex', {\n    'aria-label': 'label',\n    tabindex: 0\n  }], ['false', 'only aria-label', {\n    'aria-label': 'label'\n  }], ['true', 'aria-labelledby and tabindex', {\n    'aria-labelledby': 'id',\n    tabindex: 0\n  }], ['false', 'only aria-labelledby', {\n    'aria-labelledby': 'id'\n  }], ['true', 'title and tabindex', {\n    title: 'title',\n    tabindex: 0\n  }], ['false', 'only title', {\n    title: 'title'\n  }]])('should set `focusable=\"%s\"` when using %s', (focusable, _, attributes) => {\n    const iconAttributes = getAttributes({\n      width: 16,\n      height: 16,\n      viewBox: '0 0 16 16',\n      ...attributes\n    });\n    expect(iconAttributes.focusable).toBe(focusable);\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should set role and remove aria-hidden if `%s` is set","suites":["getAttributes"],"line":55,"code":"  test.each(['aria-label', 'aria-labelledby', 'title'])('should set role and remove aria-hidden if `%s` is set', attr => {\n    const attrs = getAttributes({\n      [attr]: 'attribute'\n    });\n    expect(attrs.role).toBe('img');\n    expect(attrs['aria-hidden']).not.toBeDefined();\n  });","file":"getAttributes-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a string","suites":["toString"],"updatePoint":{"line":38,"column":51,"index":904},"line":38,"code":"  it('should convert a given descriptor to a string', () => {\n    expect(() => {\n      toString(defaultDescriptor);\n    }).not.toThrow();\n    expect(typeof toString(defaultDescriptor)).toBe('string');\n  });","file":"toString-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should convert a given descriptor to a valid DOM node","suites":["toSVG"],"updatePoint":{"line":38,"column":59,"index":900},"line":38,"code":"  it('should convert a given descriptor to a valid DOM node', () => {\n    expect(() => {\n      const node = toSVG(defaultDescriptor);\n      document.body.appendChild(node);\n      node.parentNode.removeChild(node);\n    }).not.toThrow();\n  });","file":"toSVG-test.js","skipped":false,"dir":"packages/icon-helpers/src/__tests__"},{"name":"should export spacing step `%s`","suites":["scss/layout.scss"],"line":35,"code":"  it.each(spacingScale)('should export spacing step `%s`', async (_index, id, value) => {\n    const {\n      get\n    } = await render(`\n        @use 'sass:map';\n        @use 'sass:meta';\n        @use '../index.scss' as layout;\n\n        $variables: meta.module-variables('layout');\n        $key: get('key', map.has-key($variables, '${id}'));\n        $value: get('value', map.get($variables, '${id}'));\n      `);\n    expect(get('key').value).toBe(true);\n    expect(get('value').value).toBe(value);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"should export fluid spacing step `%s`","suites":["scss/layout.scss"],"line":50,"code":"  it.each(fluidSpacingScale)('should export fluid spacing step `%s`', async (_index, id, value) => {\n    const {\n      get\n    } = await render(`\n        @use 'sass:map';\n        @use 'sass:meta';\n        @use '../index.scss' as layout;\n\n        $variables: meta.module-variables('layout');\n        $key: get('key', map.has-key($variables, '${id}'));\n        $value: get('value', map.get($variables, '${id}'));\n      `);\n    expect(get('key').value).toBe(true);\n    expect(get('value').value).toBe(value);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"should export container step `%s`","suites":["scss/layout.scss"],"line":65,"code":"  it.each(containerScale)('should export container step `%s`', async (_index, id, value) => {\n    const {\n      get\n    } = await render(`\n        @use 'sass:map';\n        @use 'sass:meta';\n        @use '../index.scss' as layout;\n\n        $variables: meta.module-variables('layout');\n        $key: get('key', map.has-key($variables, '${id}'));\n        $value: get('value', map.get($variables, '${id}'));\n      `);\n    expect(get('key').value).toBe(true);\n    expect(get('value').value).toBe(value);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"should export icon-size step `%s`","suites":["scss/layout.scss"],"line":80,"code":"  it.each(iconSizeScale)('should export icon-size step `%s`', async (_index, id, value) => {\n    const {\n      get\n    } = await render(`\n        @use 'sass:map';\n        @use 'sass:meta';\n        @use '../index.scss' as layout;\n\n        $variables: meta.module-variables('layout');\n        $key: get('key', map.has-key($variables, '${id}'));\n        $value: get('value', map.get($variables, '${id}'));\n      `);\n    expect(get('key').value).toBe(true);\n    expect(get('value').value).toBe(value);\n  });","file":"scss-test.js","skipped":false,"dir":"packages/layout/__tests__"},{"name":"Public API","suites":["@carbon/motion"],"updatePoint":{"line":16,"column":18,"index":411},"line":16,"code":"  test('Public API', () => {\n    expect(CarbonMotion).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"@carbon/motion/scss/motion.scss","suites":["@carbon/motion"],"updatePoint":{"line":19,"column":39,"index":511},"line":19,"code":"  test('@carbon/motion/scss/motion.scss', async () => {\n    const {\n      getValue\n    } = await render(`\n      @use 'sass:meta';\n      @use '../index.scss' as motion;\n\n      $_: get-value(meta.module-variables('motion'));\n    `);\n    const variables = getValue(0);\n    expect(Object.keys(variables)).toMatchSnapshot();\n  });","file":"motion-test.js","skipped":false,"dir":"packages/motion/__tests__"},{"name":"Public API should only change with a semver change","suites":[],"updatePoint":{"line":104,"column":56,"index":3706},"line":104,"code":"test('Public API should only change with a semver change', () => {\n  jest.mock('../src/internal/deprecateFieldOnObject');\n  const CarbonReact = require('../src');\n  const PublicAPI = new Map();\n\n  // Sort alphabetically\n  const CarbonReactOrdered = Object.keys(CarbonReact).sort().reduce((obj, key) => {\n    obj[key] = CarbonReact[key];\n    return obj;\n  }, {});\n  Object.keys(CarbonReactOrdered).forEach(name => {\n    const Component = CarbonReact[name];\n    PublicAPI.set(name, mapComponentToAPI(Component));\n  });\n  function mapComponentToAPI(Component) {\n    const api = {};\n\n    // Sort alphabetically\n    const ComponentOrdered = Object.keys(Component).sort().reduce((obj, key) => {\n      obj[key] = Component[key];\n      return obj;\n    }, {});\n    Object.keys(ComponentOrdered).forEach(key => {\n      // There are a couple of properties on components that we don't believe\n      // are part of our API, such as `_` prefixed variables, or capture details\n      // that are internal to a library-specific piece of functionality. For\n      // example, React's context functionality.\n      if (key[0] === '_') {\n        return;\n      }\n      if (key === 'Consumer') {\n        api[key] = 'React.Consumer';\n        return;\n      }\n      if (key === 'Provider') {\n        api[key] = 'React.Provider';\n        return;\n      }\n      if (key === 'contextType') {\n        api[key] = {\n          $$typeof: Component[key]['$$typeof']\n        };\n        return;\n      }\n\n      // Handle components defined as fields on a component, for example\n      // `MultiSelect.Filterable`\n      if (typeof Component[key] === 'function' && key !== 'render' && isValidElementType(Component[key])) {\n        api[key] = mapComponentToAPI(Component[key]);\n        return;\n      }\n      api[key] = Component[key];\n    });\n    return api;\n  }\n  expect(PublicAPI).toMatchSnapshot();\n});","file":"PublicAPI-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"%s","suites":["@carbon/react/scss"],"line":25,"code":"  describe.each(relativePaths)('%s', relativePath => {\n    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });\n  });","file":"scss-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should be importable","suites":["@carbon/react/scss"],"updatePoint":{"line":26,"column":28,"index":589},"line":26,"code":"    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });","file":"scss-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should load","suites":[],"updatePoint":{"line":10,"column":17,"index":226},"line":10,"code":"test('should load', () => {\n  expect(() => require('../lib')).not.toThrow();\n});","file":"ssr-test.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"%s","suites":["@carbon/scss","assignments"],"line":73,"code":"    test.each(assignment)('%s', (_, init, expected, options = {}) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [t.Assignment({\n          id: t.Identifier({\n            name: 'variable'\n          }),\n          init,\n          ...options\n        })]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","rules"],"line":118,"code":"    test.each(rules)('%s', (_, rule, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [rule]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","function"],"line":238,"code":"    test.each(functions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","mixin"],"line":338,"code":"    test.each(mixins)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","calls"],"line":387,"code":"    test.each(calls)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(t.StyleSheet({\n        children: [ast]\n      }));\n      expect(code).toEqual(prettier.format(expected.trim(), prettierOptions));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Control structures"],"line":419,"code":"    test.each(structures)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"%s","suites":["@carbon/scss","Expressions"],"line":445,"code":"    test.each(expressions)('%s', (_, ast, expected) => {\n      const {\n        code\n      } = generate(ast);\n      expect(code.trim()).toEqual(expected.trim());\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"newline","suites":["@carbon/scss","formatting"],"updatePoint":{"line":453,"column":17,"index":11208},"line":453,"code":"    test('newline', () => {\n      const {\n        code\n      } = generate(t.StyleSheet([t.Comment('start'), t.Newline(), t.Comment('end')]));\n      expect(code).toBe(`//start\n\n//end\n`);\n    });","file":"scss-test.js","skipped":false,"dir":"packages/scss-generator/__tests__"},{"name":"should export white, g10, g90, and g100 themes","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":19,"column":52,"index":439},"line":19,"code":"  it('should export white, g10, g90, and g100 themes', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:map';\n      @use 'sass:meta';\n      @use '../scss/compat/themes';\n\n      $_: get('variables', map.keys(meta.module-variables('themes')));\n    `);\n    const themes = unwrap('variables').sort();\n    expect(themes).toEqual(['white', 'g10', 'g90', 'g100'].sort());\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v10 tokens as Sass Variables","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":32,"column":48,"index":836},"line":32,"code":"  it('should export v10 tokens as Sass Variables', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/compat/themes';\n      @use '../scss/compat/theme' with (\n        $theme: themes.$white,\n      );\n\n      $_: get('theme', themes.$white);\n      $_: get('variable', theme.$interactive-01);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-interactive-01, ${theme['interactive-01']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should export v11 tokens that match the fallback theme","suites":["@carbon/styles/scss/compat"],"updatePoint":{"line":49,"column":60,"index":1398},"line":49,"code":"  it('should export v11 tokens that match the fallback theme', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/config' with ( $prefix: 'cds' );\n      @use '../scss/themes';\n      @use '../scss/compat/themes' as compat;\n      @use '../scss/compat/theme' with (\n        $theme: compat.$g100,\n      );\n\n      $_: get('theme', themes.$g100);\n      $_: get('variable', theme.$background);\n    `);\n    const theme = unwrap('theme');\n    const variable = unwrap('variable');\n    expect(variable).toEqual(`var(--cds-background, ${theme['background']})`);\n  });","file":"compat-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"%s","suites":["@carbon/styles"],"line":25,"code":"  describe.each(filepaths)('%s', (_filepath, relativePath) => {\n    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should be importable","suites":["@carbon/styles"],"updatePoint":{"line":26,"column":28,"index":595},"line":26,"code":"    it('should be importable', async () => {\n      await expect(render(`@use '../${relativePath}' as test;`)).resolves.toBeDefined();\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should have stable public scss entrypoints","suites":["@carbon/styles"],"updatePoint":{"line":30,"column":48,"index":763},"line":30,"code":"  it('should have stable public scss entrypoints', async () => {\n    expect(files).toMatchSnapshot();\n  });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"config overrides","suites":["@carbon/styles","scss/config"],"updatePoint":{"line":34,"column":26,"index":883},"line":34,"code":"    test('config overrides', async () => {\n      const {\n        get\n      } = await render(`\n        @use 'sass:meta';\n        @use '../scss/config' with (\n          $prefix: 'custom-prefix',\n          $css--font-face: false,\n        );\n\n        $_: get('config', (\n          prefix: config.$prefix,\n          css--font-face: config.$css--font-face,\n        ));\n      `);\n      expect(get('config').value).toEqual({\n        prefix: 'custom-prefix',\n        ['css--font-face']: false\n      });\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should support bringing in stylesheets independently","suites":["@carbon/styles","import order"],"updatePoint":{"line":56,"column":60,"index":1460},"line":56,"code":"    it('should support bringing in stylesheets independently', async () => {\n      await expect(render(`\n          @use '../scss/reset';\n          @use '../scss/grid';\n          @use '../scss/breakpoint';\n          @use '../scss/colors';\n          @use '../scss/components';\n        `)).resolves.not.toThrow();\n      await expect(render(`\n          @use '../scss/type';\n          @use '../scss/grid';\n        `)).resolves.not.toThrow();\n      await expect(render(`\n          @use '../scss/themes';\n          @use '../scss/theme';\n        `)).resolves.not.toThrow();\n    });","file":"styles-test.js","skipped":false,"dir":"packages/styles/__tests__"},{"name":"should get the matching node for the given text input","suites":["DOM test helpers","getByText"],"updatePoint":{"line":19,"column":61,"index":577},"line":19,"code":"    it('should get the matching node for the given text input', () => {\n      const nodes = ['<div>Text A</div>', '<button>Text B</button>', '<button>Text C <svg></svg></button>'];\n      container.innerHTML = nodes.join('');\n      expect(getByText(container, 'Text A')).toEqual(container.childNodes[0]);\n      expect(getByText(container, 'Text B')).toEqual(container.childNodes[1]);\n      expect(getByText(container, 'Text C')).toEqual(container.childNodes[2]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByText"],"updatePoint":{"line":26,"column":50,"index":1036},"line":26,"code":"    it('should return null if no matches are found', () => {\n      expect(getByText(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-label","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":31,"column":56,"index":1213},"line":31,"code":"    it('should get the matching node based on aria-label', () => {\n      container.innerHTML = '<button aria-label=\"test\">Test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should get the matching node based on aria-labelledby","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":35,"column":61,"index":1442},"line":35,"code":"    it('should get the matching node based on aria-labelledby', () => {\n      container.innerHTML = ['<span id=\"test\">label</span>', '<button aria-labelledby=\"test\">Test</button>'].join('');\n      expect(getByLabel(container, 'label')).toEqual(container.childNodes[1]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should support matching based on text if label is in an interactive node","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":39,"column":80,"index":1739},"line":39,"code":"    it('should support matching based on text if label is in an interactive node', () => {\n      container.innerHTML = '<button>test</button>';\n      expect(getByLabel(container, 'test')).toEqual(container.childNodes[0]);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should return null if no matches are found","suites":["DOM test helpers","getByLabel"],"updatePoint":{"line":43,"column":50,"index":1939},"line":43,"code":"    it('should return null if no matches are found', () => {\n      expect(getByLabel(container, 'Not found')).toEqual(null);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":48,"column":46,"index":2113},"line":48,"code":"    it('should detect if an element is visible', () => {\n      expect(isElementVisible(container)).toBe(true);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":51,"column":50,"index":2236},"line":51,"code":"    it('should detect if an element is not visible', () => {\n      const hidden = Array.from({\n        length: 6\n      }).map(() => document.createElement('div'));\n\n      // <div hidden></div>\n      hidden[0].setAttribute('hidden', '');\n\n      // <div style=\"display: none;\"></div>\n      hidden[1].style.display = 'none';\n\n      // <div style=\"visibility: hidden;\"></div>\n      hidden[2].style.visibility = 'hidden';\n\n      // <div style=\"visibility: collapse;\"></div>\n      hidden[3].style.visibility = 'collapse';\n\n      // <div style=\"opacity: 0;\"></div>\n      hidden[4].style.opacity = '0';\n\n      // <div style=\"opacity: 0;\"></div>\n      hidden[5].style.opacity = 0;\n      for (const node of hidden) {\n        container.appendChild(node);\n        expect(isElementVisible(node)).toBe(false);\n      }\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"should detect if an element has a parent that is not visible","suites":["DOM test helpers","isElementVisible"],"updatePoint":{"line":78,"column":68,"index":3066},"line":78,"code":"    it('should detect if an element has a parent that is not visible', () => {\n      const hiddenParent = document.createElement('div');\n      hiddenParent.style.display = 'none';\n      const visibleChild = document.createElement('div');\n      hiddenParent.appendChild(visibleChild);\n      expect(isElementVisible(hiddenParent)).toBe(false);\n      expect(isElementVisible(visibleChild)).toBe(false);\n    });","file":"dom-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressTab should shift focus to the next focusable element","suites":[],"updatePoint":{"line":13,"column":63,"index":448},"line":13,"code":"test('pressTab should shift focus to the next focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1);\n  // Add a non-interactive element in between our interactive elements. If this\n  // receives focus, something is wrong with how we determine tab order\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressTab();\n  expect(document.activeElement === button1).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressShiftTab should shift focus to the previous focusable element","suites":[],"updatePoint":{"line":31,"column":72,"index":1286},"line":31,"code":"test('pressShiftTab should shift focus to the previous focusable element', () => {\n  const button1 = document.createElement('button');\n  button1.textContent = 'Test button 1';\n  const button2 = document.createElement('button');\n  button2.textContent = 'Test button 2';\n  document.body.appendChild(button1);\n  document.body.appendChild(document.createElement('span'));\n  document.body.appendChild(button2);\n  expect(document.activeElement === document.body).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button1).toBe(true);\n  pressShiftTab();\n  expect(document.activeElement === button2).toBe(true);\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressEnter should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":47,"column":70,"index":1985},"line":47,"code":"test('pressEnter should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressEnter(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n  pressEnter(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Enter'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"pressSpace should dispatch an additional click event on a button","suites":[],"updatePoint":{"line":71,"column":70,"index":2952},"line":71,"code":"test('pressSpace should dispatch an additional click event on a button', () => {\n  const button = document.createElement('button');\n  const buttonOnClick = jest.fn();\n  const buttonOnKeyDown = jest.fn();\n  const span = document.createElement('span');\n  const spanOnClick = jest.fn();\n  const spanOnKeyDown = jest.fn();\n  button.addEventListener('click', buttonOnClick);\n  button.addEventListener('keydown', buttonOnKeyDown);\n  span.addEventListener('click', spanOnClick);\n  span.addEventListener('keydown', spanOnKeyDown);\n  pressSpace(button);\n  expect(buttonOnClick).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(buttonOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n  pressSpace(span);\n  expect(spanOnClick).not.toHaveBeenCalled();\n  expect(spanOnKeyDown).toHaveBeenCalledTimes(1);\n  expect(spanOnKeyDown).toHaveBeenLastCalledWith(expect.objectContaining({\n    key: 'Space'\n  }));\n});","file":"keyboard-test.js","skipped":false,"dir":"packages/test-utils/__tests__"},{"name":"index.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":26,"column":18,"index":518},"line":26,"code":"  test('index.scss', async () => {\n    const tokenVariables = tokens.map(token => {\n      const variable = `themes.$${token.name}`;\n      return `$_: get('${variable}', ${variable});`;\n    });\n    const {\n      unwrap\n    } = await render(`\n      @use 'sass:meta';\n      @use '../' as themes;\n\n      // Theme mixin\n      $_: get('themes.theme', meta.mixin-exists(theme, 'themes'));\n\n      // Get value from current theme\n      $_: get('themes.get', meta.function-exists(get, 'themes'));\n\n      // Current theme\n      $_: get('themes.$theme', themes.$theme);\n\n      // Theme variables\n      ${tokenVariables.join('\\n')}\n    `);\n\n    // Mixin\n    expect(unwrap('themes.theme')).toBe(true);\n    // Current theme\n    expect(unwrap('themes.$theme')).toBeDefined();\n    // Theme getter\n    expect(unwrap('themes.get')).toBe(true);\n\n    // All tokens should be available as variables\n    for (const token of tokens) {\n      const variable = `themes.$${token.name}`;\n      expect(unwrap(variable)).toBeDefined();\n    }\n  });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"scss/_themes.scss","suites":["@carbon/themes/scss"],"updatePoint":{"line":63,"column":25,"index":1542},"line":63,"code":"  test('scss/_themes.scss', async () => {\n    const {\n      unwrap\n    } = await render(`\n      @use '../scss/themes';\n\n      // Themes\n      $_: get('themes.$white', themes.$white);\n      $_: get('themes.$g10', themes.$g10);\n      $_: get('themes.$g90', themes.$g90);\n      $_: get('themes.$g100', themes.$g100);\n    `);\n\n    // Themes should be available\n    for (const theme of Object.keys(themes)) {\n      expect(unwrap(`themes.$${theme}`)).toBeDefined();\n    }\n  });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":83,"column":16,"index":2083},"line":83,"code":"    test('$theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/themes' as *;\n        @use '../' as themes with (\n          $theme: $g100\n        );\n\n        $_: get('theme.background', themes.get('background'));\n        $_: get('g100.background', map.get($g100, 'background'));\n      `);\n      expect(unwrap('theme.background')).toBe(unwrap('g100.background'));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"custom $theme","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":100,"column":23,"index":2575},"line":100,"code":"    test('custom $theme', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $theme: (\n            token-01: #ffffff\n          )\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n      `);\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBeDefined();\n    });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$fallback","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":118,"column":19,"index":3030},"line":118,"code":"    test('$fallback', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use 'sass:map';\n        @use '../scss/themes' as *;\n        @use '../' as themes with (\n          $fallback: $g100,\n          $theme: (\n            token-01: #ffffff,\n          ),\n        );\n\n        $_: get('token-01', themes.get('token-01'));\n        $_: get('background', themes.get('background'));\n        $_: get('gray100.background', map.get($g100, 'background'));\n      `);\n\n      // Should allow custom token to resolve and other tokens should resolve\n      // from the $fallback theme\n      expect(unwrap('token-01')).toBe('#ffffff');\n      expect(unwrap('background')).toBe(unwrap('gray100.background'));\n    });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$use-fallback-value","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":143,"column":29,"index":3815},"line":143,"code":"    test('$use-fallback-value', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $use-fallback-value: false,\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toBe('var(--cds-background)');\n    });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"$property-prefix","suites":["@carbon/themes/scss","configuration"],"updatePoint":{"line":157,"column":26,"index":4178},"line":157,"code":"    test('$property-prefix', async () => {\n      const {\n        unwrap\n      } = await render(`\n        @use '../' as themes with (\n          $prefix: 'test',\n        );\n\n        $_: get('background', themes.$background);\n      `);\n      expect(unwrap('background')).toEqual('var(--test-background, #ffffff)');\n    });","file":"scss-test.js","skipped":false,"dir":"packages/themes/__tests__"},{"name":"should emit the CSS properties and values for a type token","suites":["@carbon/type"],"updatePoint":{"line":27,"column":64,"index":579},"line":27,"code":"  it('should emit the CSS properties and values for a type token', async () => {\n    const {\n      result\n    } = await render(`\n        @import '../index';\n\n        .selector {\n          @include type-style('productive-heading-01');\n        }\n      `);\n    const {\n      stylesheet\n    } = css.parse(result.css.toString());\n    const {\n      declarations\n    } = stylesheet.rules[0];\n    expect(declarations.length).toBe(Object.keys(productiveHeading01).length);\n    Object.keys(productiveHeading01).forEach(key => {\n      const property = paramCase(key);\n      const match = declarations.find(declaration => {\n        if (declaration.property !== property) {\n          return false;\n        }\n        // Note: the value on the CSS side is a CSS Custom Property. This makes\n        // equality based on value hard so we do a substring check\n        return declaration.value.includes(productiveHeading01[key]);\n      });\n      expect(match).toBeDefined();\n    });\n  });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"},{"name":"should emit CSS Custom Properties","suites":["@carbon/type"],"updatePoint":{"line":57,"column":39,"index":1524},"line":57,"code":"  it('should emit CSS Custom Properties', async () => {\n    const {\n      result\n    } = await render(`\n        @import '../index';\n\n        .selector {\n          @include type-style('productive-heading-01');\n        }\n      `);\n    const {\n      stylesheet\n    } = css.parse(result.css.toString());\n    const {\n      declarations\n    } = stylesheet.rules[0];\n    for (const declaration of declarations) {\n      const {\n        property,\n        value\n      } = declaration;\n      const key = camelCase(property);\n\n      // Make sure it's a custom property\n      expect(value).toEqual(expect.stringContaining('var(--'));\n      // Make sure the fallback value is included\n      expect(value).toEqual(expect.stringContaining('' + productiveHeading01[key]));\n    }\n  });","file":"scss-test.js","skipped":false,"dir":"packages/type/__tests__"}]}