{"repo":"zenorocha/clipboard.js","url":"https://github.com/zenorocha/clipboard.js","branch":"master","configs":[{"package":"clipboard","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should select its value based on input target","suites":["ClipboardActionCopy","#selectText"],"updatePoint":{"line":17,"column":53},"line":17,"code":"    it('should select its value based on input target', () => {\n      const selectedText = ClipboardActionCopy(document.querySelector('#input'), {\n        container: document.body\n      });\n      assert.equal(selectedText, document.querySelector('#input').value);\n    });","file":"actions/copy.js","skipped":false,"dir":"test"},{"name":"should select its value based on element target","suites":["ClipboardActionCopy","#selectText"],"updatePoint":{"line":23,"column":55},"line":23,"code":"    it('should select its value based on element target', () => {\n      const selectedText = ClipboardActionCopy(document.querySelector('#paragraph'), {\n        container: document.body\n      });\n      assert.equal(selectedText, document.querySelector('#paragraph').textContent);\n    });","file":"actions/copy.js","skipped":false,"dir":"test"},{"name":"should select its value based on text","suites":["ClipboardActionCopy","#selectText"],"updatePoint":{"line":29,"column":45},"line":29,"code":"    it('should select its value based on text', () => {\n      const text = 'abc';\n      const selectedText = ClipboardActionCopy(text, {\n        container: document.body\n      });\n      assert.equal(selectedText, text);\n    });","file":"actions/copy.js","skipped":false,"dir":"test"},{"name":"should select its value","suites":["ClipboardActionCut","#selectText"],"updatePoint":{"line":17,"column":31},"line":17,"code":"    it('should select its value', () => {\n      const selectedText = ClipboardActionCut(document.querySelector('#input'), {\n        container: document.body\n      });\n      assert.equal(selectedText, document.querySelector('#input').value);\n    });","file":"actions/cut.js","skipped":false,"dir":"test"},{"name":"should set base properties","suites":["ClipboardActionDefault","#resolveOptions"],"updatePoint":{"line":17,"column":34},"line":17,"code":"    it('should set base properties', () => {\n      const selectedText = ClipboardActionDefault({\n        container: document.body,\n        text: 'foo'\n      });\n      assert.equal(selectedText, 'foo');\n    });","file":"actions/default.js","skipped":false,"dir":"test"},{"name":"should throw an error since \"action\" is invalid","suites":["ClipboardActionDefault","#set action"],"updatePoint":{"line":26,"column":55},"line":26,"code":"    it('should throw an error since \"action\" is invalid', done => {\n      try {\n        let clip = ClipboardActionDefault({\n          text: 'foo',\n          action: 'paste'\n        });\n      } catch (e) {\n        assert.equal(e.message, 'Invalid \"action\" value, use either \"copy\" or \"cut\"');\n        done();\n      }\n    });","file":"actions/default.js","skipped":false,"dir":"test"},{"name":"should throw an error since \"target\" do not match any element","suites":["ClipboardActionDefault","#set target"],"updatePoint":{"line":39,"column":69},"line":39,"code":"    it('should throw an error since \"target\" do not match any element', done => {\n      try {\n        let clip = ClipboardActionDefault({\n          target: document.querySelector('#foo')\n        });\n      } catch (e) {\n        assert.equal(e.message, 'Invalid \"target\" value, use a valid Element');\n        done();\n      }\n    });","file":"actions/default.js","skipped":false,"dir":"test"},{"name":"should select text from editable element","suites":["ClipboardActionDefault","#selectedText"],"updatePoint":{"line":51,"column":48},"line":51,"code":"    it('should select text from editable element', () => {\n      const selectedText = ClipboardActionDefault({\n        container: document.body,\n        target: document.querySelector('#input')\n      });\n      assert.equal(selectedText, 'abc');\n    });","file":"actions/default.js","skipped":false,"dir":"test"},{"name":"should select text from non-editable element","suites":["ClipboardActionDefault","#selectedText"],"updatePoint":{"line":58,"column":52},"line":58,"code":"    it('should select text from non-editable element', () => {\n      const selectedText = ClipboardActionDefault({\n        container: document.body,\n        target: document.querySelector('#paragraph')\n      });\n      assert.equal(selectedText, 'abc');\n    });","file":"actions/default.js","skipped":false,"dir":"test"},{"name":"should set action as a function","suites":["Clipboard","#resolveOptions"],"updatePoint":{"line":23,"column":39},"line":23,"code":"    it('should set action as a function', () => {\n      let clipboard = new Clipboard('.btn', {\n        action: global.fn\n      });\n      assert.equal(global.fn, clipboard.action);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should set target as a function","suites":["Clipboard","#resolveOptions"],"updatePoint":{"line":29,"column":39},"line":29,"code":"    it('should set target as a function', () => {\n      let clipboard = new Clipboard('.btn', {\n        target: global.fn\n      });\n      assert.equal(global.fn, clipboard.target);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should set text as a function","suites":["Clipboard","#resolveOptions"],"updatePoint":{"line":35,"column":37},"line":35,"code":"    it('should set text as a function', () => {\n      let clipboard = new Clipboard('.btn', {\n        text: global.fn\n      });\n      assert.equal(global.fn, clipboard.text);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should set container as an object","suites":["Clipboard","#resolveOptions"],"updatePoint":{"line":41,"column":41},"line":41,"code":"    it('should set container as an object', () => {\n      let clipboard = new Clipboard('.btn', {\n        container: document.body\n      });\n      assert.equal(document.body, clipboard.container);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should set container as body by default","suites":["Clipboard","#resolveOptions"],"updatePoint":{"line":47,"column":47},"line":47,"code":"    it('should set container as body by default', () => {\n      let clipboard = new Clipboard('.btn');\n      assert.equal(document.body, clipboard.container);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should add a click event listener to the passed selector","suites":["Clipboard","#listenClick"],"updatePoint":{"line":53,"column":64},"line":53,"code":"    it('should add a click event listener to the passed selector', () => {\n      let clipboard = new Clipboard('.btn');\n      assert.isObject(clipboard.listener);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should init when called","suites":["Clipboard","#onClick"],"updatePoint":{"line":59,"column":31},"line":59,"code":"    it('should init when called', done => {\n      let clipboard = new Clipboard('.btn');\n      clipboard.on('success', () => {\n        done();\n      });\n      clipboard.onClick(global.event);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should use an event's currentTarget when not equal to target","suites":["Clipboard","#onClick"],"updatePoint":{"line":66,"column":68},"line":66,"code":"    it(\"should use an event's currentTarget when not equal to target\", done => {\n      let clipboard = new Clipboard('.btn');\n      let bubbledEvent = {\n        target: global.span,\n        currentTarget: global.button\n      };\n      clipboard.on('success', () => {\n        done();\n      });\n      clipboard.onClick(bubbledEvent);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should throw an exception when target is invalid","suites":["Clipboard","#onClick"],"updatePoint":{"line":77,"column":56},"line":77,"code":"    it('should throw an exception when target is invalid', done => {\n      try {\n        const clipboard = new Clipboard('.btn', {\n          target() {\n            return null;\n          }\n\n        });\n        clipboard.onClick(global.event);\n      } catch (e) {\n        assert.equal(e.message, 'Invalid \"target\" value, use a valid Element');\n        done();\n      }\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should return the support of the given action","suites":["Clipboard","#static isSupported"],"updatePoint":{"line":93,"column":53},"line":93,"code":"    it('should return the support of the given action', () => {\n      assert.equal(Clipboard.isSupported('copy'), true);\n      assert.equal(Clipboard.isSupported('cut'), true);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should return the support of the cut and copy actions","suites":["Clipboard","#static isSupported"],"updatePoint":{"line":97,"column":61},"line":97,"code":"    it('should return the support of the cut and copy actions', () => {\n      assert.equal(Clipboard.isSupported(), true);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should copy in an programatic way based on text","suites":["Clipboard","#static copy"],"updatePoint":{"line":102,"column":55},"line":102,"code":"    it('should copy in an programatic way based on text', () => {\n      assert.equal(Clipboard.copy('lorem'), 'lorem');\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should copy in an programatic way based on target","suites":["Clipboard","#static copy"],"updatePoint":{"line":105,"column":57},"line":105,"code":"    it('should copy in an programatic way based on target', () => {\n      assert.equal(Clipboard.copy(document.querySelector('span')), 'bar');\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should cut in an programatic way based on text","suites":["Clipboard","#static cut"],"updatePoint":{"line":110,"column":54},"line":110,"code":"    it('should cut in an programatic way based on text', () => {\n      assert.equal(Clipboard.cut(document.querySelector('span')), 'bar');\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should destroy an existing instance of ClipboardActionDefault","suites":["Clipboard","#destroy"],"updatePoint":{"line":115,"column":69},"line":115,"code":"    it('should destroy an existing instance of ClipboardActionDefault', () => {\n      let clipboard = new Clipboard('.btn');\n      clipboard.onClick(global.event);\n      clipboard.destroy();\n      assert.equal(clipboard.clipboardAction, null);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should fire a success event with certain properties","suites":["Clipboard","#events"],"updatePoint":{"line":123,"column":59},"line":123,"code":"    it('should fire a success event with certain properties', done => {\n      let clipboard = new Clipboard('.btn');\n      clipboard.on('success', e => {\n        assert.property(e, 'action');\n        assert.property(e, 'text');\n        assert.property(e, 'trigger');\n        assert.property(e, 'clearSelection');\n        done();\n      });\n      clipboard.onClick(global.event);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should remove focus from target and text selection","suites":["Clipboard","#clearSelection"],"updatePoint":{"line":136,"column":58},"line":136,"code":"    it('should remove focus from target and text selection', done => {\n      let clipboard = new Clipboard('.btn');\n      clipboard.on('success', e => {\n        let selectedElem = document.activeElement;\n        let selectedText = window.getSelection().toString();\n        e.clearSelection();\n        assert.equal(selectedElem, document.body);\n        assert.equal(selectedText, '');\n        done();\n      });\n      clipboard.onClick(global.event);\n    });","file":"clipboard.js","skipped":false,"dir":"test"},{"name":"should execute cut","suites":["#command"],"updatePoint":{"line":15,"column":24},"line":15,"code":"  it('should execute cut', done => {\n    global.stub.returns(true);\n    select(document.querySelector('#input'));\n    assert.isTrue(command('cut'));\n    done();\n  });","file":"common/command.js","skipped":false,"dir":"test"},{"name":"should execute copy","suites":["#command"],"updatePoint":{"line":21,"column":25},"line":21,"code":"  it('should execute copy', done => {\n    global.stub.returns(true);\n    select(document.querySelector('#input'));\n    assert.isTrue(command('copy'));\n    done();\n  });","file":"common/command.js","skipped":false,"dir":"test"},{"name":"should not execute copy","suites":["#command"],"updatePoint":{"line":27,"column":29},"line":27,"code":"  it('should not execute copy', done => {\n    global.stub.returns(false);\n    select(document.querySelector('#input'));\n    assert.isFalse(command('copy'));\n    done();\n  });","file":"common/command.js","skipped":false,"dir":"test"},{"name":"should not execute cut","suites":["#command"],"updatePoint":{"line":33,"column":28},"line":33,"code":"  it('should not execute cut', done => {\n    global.stub.returns(false);\n    select(document.querySelector('#input'));\n    assert.isFalse(command('cut'));\n    done();\n  });","file":"common/command.js","skipped":false,"dir":"test"},{"name":"should define a fake element and set the position right style property","suites":["createFakeElement"],"updatePoint":{"line":3,"column":76},"line":3,"code":"  it('should define a fake element and set the position right style property', done => {\n    // Set document direction\n    document.documentElement.setAttribute('dir', 'rtl');\n    const el = createFakeElement(document.body);\n    assert.equal(el.style.right, '-9999px');\n    done();\n  });","file":"common/create-fake-element.js","skipped":false,"dir":"test"}]}