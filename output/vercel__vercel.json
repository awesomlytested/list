{"repo":"vercel/vercel","url":"https://github.com/vercel/vercel","branch":"main","configs":[{"package":"preact","lang":"js","dir":"examples/preact/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"TODO","lang":"js","dir":"examples/sapper/cypress","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"vercel-monorepo","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/build-utils","lang":"ts","dir":"packages/build-utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vercel","lang":"js","dir":"packages/cli/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"aurelia","lang":"js","dir":"packages/cli/test/dev/fixtures/03-aurelia/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"polymer-starter-kit","lang":"js","dir":"packages/cli/test/dev/fixtures/12-polymer-node/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"hello-world","lang":"js","dir":"packages/cli/test/dev/fixtures/24-ember/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/client","lang":"ts","dir":"packages/client/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/frameworks","lang":"ts","dir":"packages/frameworks/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/go","lang":"js","dir":"packages/go/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"vercel-plugin-middleware","lang":"ts","dir":"packages/middleware/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/node-bridge","lang":"js","dir":"packages/node-bridge/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/node","lang":"js","dir":"packages/node/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vercel-plugin-node","lang":"ts","dir":"packages/plugin-node/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/python","lang":"js","dir":"packages/python/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/routing-utils","lang":"js","dir":"packages/routing-utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/ruby","lang":"js","dir":"packages/ruby/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/static-config","lang":"ts","dir":"packages/static-config/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Header renders 3 nav items","suites":["Initial Test of the Header"],"updatePoint":{"line":6,"column":34,"index":254},"line":6,"code":"  test('Header renders 3 nav items', () => {\n    const context = shallow( /*#__PURE__*/React.createElement(Header, null));\n    expect(context.find('h1').text()).toBe('Preact App');\n    expect(context.find('Link').length).toBe(3);\n  });","file":"header.test.js","skipped":false,"dir":"examples/preact/tests"},{"name":"has the correct <h1>","suites":["Sapper template app"],"updatePoint":{"line":5,"column":26,"index":113},"line":5,"code":"  it('has the correct <h1>', () => {\n    cy.contains('h1', 'Great success!');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"navigates to /about","suites":["Sapper template app"],"updatePoint":{"line":8,"column":25,"index":196},"line":8,"code":"  it('navigates to /about', () => {\n    cy.get('nav a').contains('about').click();\n    cy.url().should('include', '/about');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"navigates to /blog","suites":["Sapper template app"],"updatePoint":{"line":12,"column":24,"index":326},"line":12,"code":"  it('navigates to /blog', () => {\n    cy.get('nav a').contains('blog').click();\n    cy.url().should('include', '/blog');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"should remove \"Publish\" commits","suites":["changelog","filter"],"updatePoint":{"line":4,"column":39,"index":161},"line":4,"code":"    it('should remove \"Publish\" commits', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Publish Stable [Nathan Rajlich]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should remove \"Revert\" and the revertted commits","suites":["changelog","filter"],"updatePoint":{"line":27,"column":56,"index":1045},"line":27,"code":"    it('should remove \"Revert\" and the revertted commits', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '17fd88e044a807adf4ee6ed662cdb7c7556e912d',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should NOT remove \"Revert\" if the reverted commit is not in the current changelog entry","suites":["changelog","filter"],"updatePoint":{"line":56,"column":95,"index":2382},"line":56,"code":"    it('should NOT remove \"Revert\" if the reverted commit is not in the current changelog entry', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '29a44db8d9377d7f16146817aded57ebfbcff752',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '29a44db8d9377d7f16146817aded57ebfbcff752',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should group commits by area","suites":["changelog","group"],"updatePoint":{"line":23,"column":36,"index":976},"line":23,"code":"    it('should group commits by area', async () => {\n      let groupedLogLines = groupLog(commits);\n      expect(groupedLogLines).toEqual({\n        UNCATEGORIZED: ['Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'],\n        frameworks: ['[frameworks][cli] Disable blank issues again [Leo Lamprecht]'],\n        cli: ['[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]', '[frameworks][cli] Disable blank issues again [Leo Lamprecht]']\n      });\n    });","file":"utils/changelog/group.test.js","skipped":false,"dir":"test"},{"name":"should group commits by area","suites":["changelog","parse"],"updatePoint":{"line":7,"column":36,"index":601},"line":7,"code":"    it('should group commits by area', async () => {\n      childProcess.execSync.mockReturnValue(`does some work`);\n      childProcess.execSync.mockReturnValueOnce(`This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.`);\n      let commits = parseCommits(logLines);\n      expect(commits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '17fd88e044a807adf4ee6ed662cdb7c7556e912d',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/parse.test.js","skipped":false,"dir":"test"},{"name":"should display welcome message","suites":["workspace-project App"],"updatePoint":{"line":11,"column":36},"line":11,"code":"  it('should display welcome message', () => {\n    page.navigateTo();\n    expect(page.getTitleText()).toEqual('angular app is running!');\n  });","file":"fixtures/03-zero-config-angular/e2e/src/app.e2e-spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create the app","suites":["AppComponent"],"updatePoint":{"line":11,"column":27},"line":11,"code":"  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should have as title 'angular'","suites":["AppComponent"],"updatePoint":{"line":17,"column":36},"line":17,"code":"  it(`should have as title 'angular'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app.title).toEqual('angular');\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should render title","suites":["AppComponent"],"updatePoint":{"line":23,"column":25},"line":23,"code":"  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('.content span').textContent).toContain(\n      'angular app is running!'\n    );\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Should build \"\"","suites":[],"updatePoint":{"line":35,"column":31},"line":35,"code":"  it(`Should build \"${fixture}\"`, async () => {\n    await expect(\n      testDeployment(path.join(fixturesPath, fixture))\n    ).resolves.toBeDefined();\n  });","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Should build \"/\"","suites":[],"updatePoint":{"line":58,"column":46},"line":58,"code":"      it(`Should build \"${builder}/${fixture}\"`, async () => {\n        await expect(\n          testDeployment(path.join(fixturesPath2, fixture))\n        ).resolves.toBeDefined();\n      });","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should clone env with Path","suites":[],"updatePoint":{"line":3,"column":30},"line":3,"code":"it('should clone env with Path', () => {\n  expect(\n    cloneEnv(\n      new Proxy(\n        {\n          foo: 'bar',\n          Path: 'baz',\n        },\n        {\n          get(target: typeof process.env, prop: string) {\n            if (prop === 'PATH') {\n              return target.PATH ?? target.Path;\n            }\n            return target[prop];\n          },\n        }\n      )\n    )\n  ).toEqual({\n    foo: 'bar',\n    PATH: 'baz',\n  });\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should clone env with PATH","suites":[],"updatePoint":{"line":27,"column":30},"line":27,"code":"it('should clone env with PATH', () => {\n  expect(\n    cloneEnv({\n      foo: 'bar',\n      PATH: 'baz',\n    })\n  ).toEqual({\n    foo: 'bar',\n    PATH: 'baz',\n  });\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should clone and merge multiple env objects","suites":[],"updatePoint":{"line":39,"column":47},"line":39,"code":"it('should clone and merge multiple env objects', () => {\n  // note: this also tests the last object doesn't overwrite `PATH` with\n  // `undefined`\n  expect(\n    cloneEnv(\n      {\n        foo: 'bar',\n      },\n      {\n        PATH: 'baz',\n      },\n      {\n        baz: 'wiz',\n      }\n    )\n  ).toEqual({\n    foo: 'bar',\n    PATH: 'baz',\n    baz: 'wiz',\n  });\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should clone the actual process.env object","suites":[],"updatePoint":{"line":61,"column":46},"line":61,"code":"it('should clone the actual process.env object', () => {\n  expect(cloneEnv(process.env).PATH).toEqual(process.env.PATH);\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should overwrite PATH with last value","suites":[],"updatePoint":{"line":65,"column":41},"line":65,"code":"it('should overwrite PATH with last value', () => {\n  expect(\n    cloneEnv(\n      new Proxy(\n        {\n          Path: 'foo',\n        },\n        {\n          get(target: typeof process.env, prop: string) {\n            if (prop === 'PATH') {\n              return target.PATH ?? target.Path;\n            }\n            return target[prop];\n          },\n        }\n      ),\n      {\n        PATH: 'bar',\n      },\n      {\n        PATH: undefined,\n      }\n    )\n  ).toEqual({\n    PATH: undefined,\n  });\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should handle process.env at any argument position","suites":[],"updatePoint":{"line":93,"column":54},"line":93,"code":"it('should handle process.env at any argument position', () => {\n  expect(\n    cloneEnv(\n      {\n        foo: 'bar',\n      },\n      new Proxy(\n        {\n          Path: 'baz',\n        },\n        {\n          get(target: typeof process.env, prop: string) {\n            if (prop === 'PATH') {\n              return target.PATH ?? target.Path;\n            }\n            return target[prop];\n          },\n        }\n      )\n    )\n  ).toEqual({\n    foo: 'bar',\n    PATH: 'baz',\n  });\n});","file":"unit.clone-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should execute a command","suites":[],"updatePoint":{"line":3,"column":28},"line":3,"code":"it('should execute a command', async () => {\n  const { code, stdout, stderr } = await execAsync('echo', ['hello']);\n\n  expect(code).toBe(0);\n  expect(stdout).toContain('hello');\n  expect(stderr).toBe('');\n});","file":"unit.exec-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw if the command exits with non-0 code","suites":[],"updatePoint":{"line":11,"column":53},"line":11,"code":"it('should throw if the command exits with non-0 code', async () => {\n  await expect(execAsync('find', ['unknown-file'])).rejects.toBeInstanceOf(\n    NowBuildError\n  );\n});","file":"unit.exec-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return if the command exits with non-0 code and ignoreNon0Exit=true","suites":[],"updatePoint":{"line":17,"column":78},"line":17,"code":"it('should return if the command exits with non-0 code and ignoreNon0Exit=true', async () => {\n  const { code, stdout, stderr } = await execAsync('find', ['unknown-file'], {\n    ignoreNon0Exit: true,\n  });\n\n  expect(code).toBe(process.platform === 'win32' ? 2 : 1);\n  expect(stdout).toBe('');\n  expect(stderr).toContain(\n    process.platform === 'win32'\n      ? 'Parameter format not correct'\n      : 'No such file or directory'\n  );\n});","file":"unit.exec-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with npm7","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":5,"column":27},"line":5,"code":"  it('should work with npm7', async () => {\n    const cwd = join(__dirname, 'fixtures', '20-npm-7');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with yarn","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":11,"column":27},"line":11,"code":"  it('should work with yarn', async () => {\n    const cwd = join(__dirname, 'fixtures', '19-yarn-v2');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with npm 6","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":17,"column":28},"line":17,"code":"  it('should work with npm 6', async () => {\n    const cwd = join(__dirname, 'fixtures', '08-yarn-npm/with-npm');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with npm workspaces","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":23,"column":37},"line":23,"code":"  it('should work with npm workspaces', async () => {\n    const cwd = join(__dirname, 'fixtures', '21-npm-workspaces/a');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, '..', 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with pnpm","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it('should work with pnpm', async () => {\n    const cwd = join(__dirname, 'fixtures', '22-pnpm');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should work with pnpm workspaces","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":35,"column":38},"line":35,"code":"  it('should work with pnpm workspaces', async () => {\n    const cwd = join(__dirname, 'fixtures', '23-pnpm-workspaces/c');\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, '..', 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should fallback to cwd if no lockfile found","suites":["Test `getNodeBinPath()`"],"updatePoint":{"line":41,"column":49},"line":41,"code":"  it('should fallback to cwd if no lockfile found', async () => {\n    const cwd = parse(process.cwd()).root;\n    const result = await getNodeBinPath({ cwd });\n    expect(result).toBe(join(cwd, 'node_modules', '.bin'));\n  });","file":"unit.get-npm-bin-path.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support `VERCEL_` prefix","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":5,"column":37},"line":5,"code":"  it('should support `VERCEL_` prefix', () => {\n    try {\n      assert.equal(undefined, getPlatformEnv('FOO'));\n\n      process.env.VERCEL_FOO = 'bar';\n      assert.equal('bar', getPlatformEnv('FOO'));\n    } finally {\n      delete process.env.VERCEL_FOO;\n    }\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support `NOW_` prefix","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":16,"column":34},"line":16,"code":"  it('should support `NOW_` prefix', () => {\n    try {\n      assert.equal(undefined, getPlatformEnv('FOO'));\n\n      process.env.NOW_FOO = 'bar';\n      assert.equal('bar', getPlatformEnv('FOO'));\n    } finally {\n      delete process.env.NOW_FOO;\n    }\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw an error if both env vars exist","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":27,"column":50},"line":27,"code":"  it('should throw an error if both env vars exist', () => {\n    let err: Error | null = null;\n    try {\n      process.env.NOW_FOO = 'bar';\n      process.env.VERCEL_FOO = 'baz';\n      getPlatformEnv('FOO');\n    } catch (_err) {\n      err = _err;\n    } finally {\n      delete process.env.NOW_FOO;\n      delete process.env.VERCEL_FOO;\n    }\n    assert(err);\n    assert.equal(\n      err!.message,\n      'Both \"VERCEL_FOO\" and \"NOW_FOO\" env vars are defined. Please only define the \"VERCEL_FOO\" env var.'\n    );\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return \"vercel-*\"","suites":["Test `getScriptName()`"],"updatePoint":{"line":5,"column":30},"line":5,"code":"  it('should return \"vercel-*\"', () => {\n    const pkg = {\n      scripts: {\n        'vercel-dev': '',\n        'vercel-build': '',\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(\n      getScriptName(pkg, ['vercel-dev', 'now-dev', 'dev']),\n      'vercel-dev'\n    );\n    assert.equal(\n      getScriptName(pkg, ['vercel-build', 'now-build', 'build']),\n      'vercel-build'\n    );\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return \"now-*\"","suites":["Test `getScriptName()`"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('should return \"now-*\"', () => {\n    const pkg = {\n      scripts: {\n        'now-dev': '',\n        'now-build': '',\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(\n      getScriptName(pkg, ['vercel-dev', 'now-dev', 'dev']),\n      'now-dev'\n    );\n    assert.equal(\n      getScriptName(pkg, ['vercel-build', 'now-build', 'build']),\n      'now-build'\n    );\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return base script name","suites":["Test `getScriptName()`"],"updatePoint":{"line":47,"column":36},"line":47,"code":"  it('should return base script name', () => {\n    const pkg = {\n      scripts: {\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return `null`","suites":["Test `getScriptName()`"],"updatePoint":{"line":58,"column":26},"line":58,"code":"  it('should return `null`', () => {\n    assert.equal(getScriptName(undefined, ['build']), null);\n    assert.equal(getScriptName({}, ['build']), null);\n    assert.equal(getScriptName({ scripts: {} }, ['build']), null);\n\n    const pkg = {\n      scripts: {\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(getScriptName(pkg, ['vercel-dev', 'now-dev']), null);\n    assert.equal(getScriptName(pkg, ['vercel-build', 'now-build']), null);\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create an instance","suites":["Test `NodejsLambda`"],"updatePoint":{"line":4,"column":31},"line":4,"code":"  it('should create an instance', () => {\n    const helloSrc = 'module.exports = (req, res) => res.end(\"hi\");';\n    const lambda = new NodejsLambda({\n      files: {\n        'api/hello.js': new FileBlob({ data: helloSrc }),\n      },\n      handler: 'api/hello.js',\n      runtime: 'node14.x',\n      shouldAddHelpers: true,\n      shouldAddSourcemapSupport: false,\n    });\n    expect(lambda.handler).toEqual('api/hello.js');\n    expect(lambda.runtime).toEqual('node14.x');\n    expect(lambda.shouldAddHelpers).toEqual(true);\n    expect(lambda.shouldAddSourcemapSupport).toEqual(false);\n    expect(lambda.awsLambdaHandler).toBeUndefined();\n  });","file":"unit.nodejs-lambda.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not include peer dependencies when missing VERCEL_NPM_LEGACY_PEER_DEPS on node16","suites":[],"updatePoint":{"line":33,"column":91},"line":33,"code":"it('should not include peer dependencies when missing VERCEL_NPM_LEGACY_PEER_DEPS on node16', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const meta: Meta = {};\n  const spawnOpts = getTestSpawnOpts({});\n  const nodeVersion = getNodeVersion(16);\n  await runNpmInstall(fixture, [], spawnOpts, meta, nodeVersion);\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('npm');\n  expect(args[1]).toEqual(['install', '--no-audit', '--unsafe-perm']);\n  expect(args[2]).toEqual({\n    cwd: fixture,\n    prettyCommand: 'npm install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node16","suites":[],"updatePoint":{"line":51,"column":81},"line":51,"code":"it('should include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node16', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const meta: Meta = {};\n  const spawnOpts = getTestSpawnOpts({ VERCEL_NPM_LEGACY_PEER_DEPS: '1' });\n  const nodeVersion = getNodeVersion(16);\n  await runNpmInstall(fixture, [], spawnOpts, meta, nodeVersion);\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('npm');\n  expect(args[1]).toEqual([\n    'install',\n    '--no-audit',\n    '--unsafe-perm',\n    '--legacy-peer-deps',\n  ]);\n  expect(args[2]).toEqual({\n    cwd: fixture,\n    prettyCommand: 'npm install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node14 and npm7+","suites":[],"updatePoint":{"line":74,"column":91},"line":74,"code":"it('should include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node14 and npm7+', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const meta: Meta = {};\n  const spawnOpts = getTestSpawnOpts({ VERCEL_NPM_LEGACY_PEER_DEPS: '1' });\n\n  const nodeVersion = getNodeVersion(14);\n  await runNpmInstall(fixture, [], spawnOpts, meta, nodeVersion);\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('npm');\n  expect(args[1]).toEqual([\n    'install',\n    '--no-audit',\n    '--unsafe-perm',\n    '--legacy-peer-deps',\n  ]);\n  expect(args[2]).toEqual({\n    cwd: fixture,\n    prettyCommand: 'npm install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node14 and npm6","suites":[],"updatePoint":{"line":98,"column":94},"line":98,"code":"it('should not include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node14 and npm6', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '14-npm-6-legacy-peer-deps');\n  const meta: Meta = {};\n  const spawnOpts = getTestSpawnOpts({ VERCEL_NPM_LEGACY_PEER_DEPS: '1' });\n\n  const nodeVersion = getNodeVersion(14);\n  await runNpmInstall(fixture, [], spawnOpts, meta, nodeVersion);\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('npm');\n  expect(args[1]).toEqual(['install', '--no-audit', '--unsafe-perm']);\n  expect(args[2]).toEqual({\n    cwd: fixture,\n    prettyCommand: 'npm install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node16 with corepack enabled","suites":[],"updatePoint":{"line":117,"column":107},"line":117,"code":"it('should not include peer dependencies when VERCEL_NPM_LEGACY_PEER_DEPS=1 on node16 with corepack enabled', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const meta: Meta = {};\n  const spawnOpts = getTestSpawnOpts({\n    VERCEL_NPM_LEGACY_PEER_DEPS: '1',\n    ENABLE_EXPERIMENTAL_COREPACK: '1',\n  });\n  const nodeVersion = getNodeVersion(16);\n  await runNpmInstall(fixture, [], spawnOpts, meta, nodeVersion);\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('npm');\n  expect(args[1]).toEqual(['install', '--no-audit', '--unsafe-perm']);\n  expect(args[2]).toEqual({\n    cwd: fixture,\n    prettyCommand: 'npm install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only invoke `runNpmInstall()` once per `package.json` file (serial)","suites":[],"updatePoint":{"line":138,"column":78},"line":138,"code":"it('should only invoke `runNpmInstall()` once per `package.json` file (serial)', async () => {\n  const meta: Meta = {};\n  const fixture = path.join(__dirname, 'fixtures', '02-zero-config-api');\n  const apiDir = path.join(fixture, 'api');\n\n  const run1 = await runNpmInstall(apiDir, [], undefined, meta);\n  expect(run1).toEqual(true);\n  expect(\n    (meta.runNpmInstallSet as Set<string>).has(\n      path.join(fixture, 'package.json')\n    )\n  ).toEqual(true);\n\n  const run2 = await runNpmInstall(apiDir, [], undefined, meta);\n  expect(run2).toEqual(false);\n\n  const run3 = await runNpmInstall(fixture, [], undefined, meta);\n  expect(run3).toEqual(false);\n\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('yarn');\n  expect(args[1]).toEqual(['install']);\n  expect(args[2]).toEqual({\n    cwd: apiDir,\n    prettyCommand: 'yarn install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only invoke `runNpmInstall()` once per `package.json` file (parallel)","suites":[],"updatePoint":{"line":169,"column":80},"line":169,"code":"it('should only invoke `runNpmInstall()` once per `package.json` file (parallel)', async () => {\n  const meta: Meta = {};\n  const fixture = path.join(__dirname, 'fixtures', '02-zero-config-api');\n  const apiDir = path.join(fixture, 'api');\n  const [run1, run2, run3] = await Promise.all([\n    runNpmInstall(apiDir, [], undefined, meta),\n    runNpmInstall(apiDir, [], undefined, meta),\n    runNpmInstall(fixture, [], undefined, meta),\n  ]);\n  expect(run1).toEqual(true);\n  expect(run2).toEqual(false);\n  expect(run3).toEqual(false);\n  expect(\n    (meta.runNpmInstallSet as Set<string>).has(\n      path.join(fixture, 'package.json')\n    )\n  ).toEqual(true);\n\n  expect(spawnMock.mock.calls.length).toBe(1);\n  const args = spawnMock.mock.calls[0];\n  expect(args[0]).toEqual('yarn');\n  expect(args[1]).toEqual(['install']);\n  expect(args[2]).toEqual({\n    cwd: apiDir,\n    prettyCommand: 'yarn install',\n    stdio: 'inherit',\n    env: expect.any(Object),\n  });\n});","file":"unit.run-npm-install.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should execute a command","suites":[],"updatePoint":{"line":3,"column":28},"line":3,"code":"it('should execute a command', async () => {\n  // should resolve (it doesn't return anything, so it resolves with \"undefined\")\n  await expect(spawnAsync('echo', ['hello'])).resolves.toBeUndefined();\n});","file":"unit.spawn-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw if the command exits with non-0 code","suites":[],"updatePoint":{"line":8,"column":53},"line":8,"code":"it('should throw if the command exits with non-0 code', async () => {\n  await expect(spawnAsync('find', ['unknown-file'])).rejects.toBeInstanceOf(\n    NowBuildError\n  );\n});","file":"unit.spawn-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return if the command exits with non-0 code and ignoreNon0Exit=true","suites":[],"updatePoint":{"line":14,"column":78},"line":14,"code":"it('should return if the command exits with non-0 code and ignoreNon0Exit=true', async () => {\n  // should resolve (it doesn't return anything, so it resolves with \"undefined\")\n  await expect(\n    spawnAsync('find', ['unknown-file'], {\n      ignoreNon0Exit: true,\n    })\n  ).resolves.toBeUndefined();\n});","file":"unit.spawn-async.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should re-create FileFsRef symlinks properly","suites":[],"updatePoint":{"line":53,"column":48},"line":53,"code":"it('should re-create FileFsRef symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n  const files = await glob('**', path.join(__dirname, 'symlinks'));\n  assert.equal(Object.keys(files).length, 4);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n\n  const files2 = await download(files, outDir);\n  assert.equal(Object.keys(files2).length, 4);\n\n  const [linkStat, linkDirStat, aStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n  ]);\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n\n  const [linkDirContents, linkTextContents] = await Promise.all([\n    readlink(path.join(outDir, 'link-dir')),\n    readlink(path.join(outDir, 'link.txt')),\n  ]);\n\n  strictEqual(linkDirContents, 'dir');\n  strictEqual(linkTextContents, './a.txt');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should re-create FileBlob symlinks properly","suites":[],"updatePoint":{"line":85,"column":47},"line":85,"code":"it('should re-create FileBlob symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n\n  const files = {\n    'a.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'a text',\n    }),\n    'dir/b.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'b text',\n    }),\n    'link-dir': new FileBlob({\n      mode: 41453,\n      contentType: undefined,\n      data: 'dir',\n    }),\n    'link.txt': new FileBlob({\n      mode: 41453,\n      contentType: undefined,\n      data: 'a.txt',\n    }),\n  };\n\n  strictEqual(Object.keys(files).length, 4);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n\n  const files2 = await download(files, outDir);\n  strictEqual(Object.keys(files2).length, 4);\n\n  const [linkStat, linkDirStat, aStat, dirStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n    fs.lstat(path.join(outDir, 'dir')),\n  ]);\n\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n  assert(dirStat.isDirectory());\n\n  const [linkDirContents, linkTextContents] = await Promise.all([\n    readlink(path.join(outDir, 'link-dir')),\n    readlink(path.join(outDir, 'link.txt')),\n  ]);\n\n  strictEqual(linkDirContents, 'dir');\n  strictEqual(linkTextContents, 'a.txt');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create zip files with symlinks properly","suites":[],"updatePoint":{"line":143,"column":50},"line":143,"code":"it('should create zip files with symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n  const files = await glob('**', path.join(__dirname, 'symlinks'));\n  assert.equal(Object.keys(files).length, 4);\n\n  const outFile = path.join(__dirname, 'symlinks.zip');\n  await fs.remove(outFile);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n  await fs.mkdirp(outDir);\n\n  await fs.writeFile(outFile, await createZip(files));\n  await spawnAsync('unzip', [outFile], { cwd: outDir });\n\n  const [linkStat, linkDirStat, aStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n  ]);\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should download symlinks even with incorrect file","suites":[],"updatePoint":{"line":171,"column":53},"line":171,"code":"it('should download symlinks even with incorrect file', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n  const files = {\n    'dir/file.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'file text',\n    }),\n    linkdir: new FileBlob({\n      mode: 41453,\n      contentType: undefined,\n      data: 'dir',\n    }),\n    'linkdir/file.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'this file should be discarded',\n    }),\n  };\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n  await fs.mkdirp(outDir);\n\n  await download(files, outDir);\n\n  const [dir, file, linkdir] = await Promise.all([\n    fs.lstat(path.join(outDir, 'dir')),\n    fs.lstat(path.join(outDir, 'dir/file.txt')),\n    fs.lstat(path.join(outDir, 'linkdir')),\n  ]);\n  expect(dir.isFile()).toBe(false);\n  expect(dir.isSymbolicLink()).toBe(false);\n\n  expect(file.isFile()).toBe(true);\n  expect(file.isSymbolicLink()).toBe(false);\n\n  expect(linkdir.isSymbolicLink()).toBe(true);\n\n  expect(warningMessages).toEqual([\n    'Warning: file \"linkdir/file.txt\" is within a symlinked directory \"linkdir\" and will be ignored',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only match supported node versions, otherwise throw an error","suites":[],"updatePoint":{"line":218,"column":71},"line":218,"code":"it('should only match supported node versions, otherwise throw an error', async () => {\n  expect(await getSupportedNodeVersion('14.x', false)).toHaveProperty(\n    'major',\n    14\n  );\n  expect(await getSupportedNodeVersion('16.x', false)).toHaveProperty(\n    'major',\n    16\n  );\n\n  const autoMessage =\n    'Please set Node.js Version to 16.x in your Project Settings to use Node.js 16.';\n  await expectBuilderError(\n    getSupportedNodeVersion('8.11.x', true),\n    autoMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('6.x', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('999.x', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('foo', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('=> 10', true), autoMessage);\n\n  expect(await getSupportedNodeVersion('14.x', true)).toHaveProperty(\n    'major',\n    14\n  );\n  expect(await getSupportedNodeVersion('16.x', true)).toHaveProperty(\n    'major',\n    16\n  );\n\n  const foundMessage =\n    'Please set \"engines\": { \"node\": \"16.x\" } in your `package.json` file to use Node.js 16.';\n  await expectBuilderError(\n    getSupportedNodeVersion('8.11.x', false),\n    foundMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('6.x', false), foundMessage);\n  await expectBuilderError(\n    getSupportedNodeVersion('999.x', false),\n    foundMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('foo', false), foundMessage);\n  await expectBuilderError(\n    getSupportedNodeVersion('=> 10', false),\n    foundMessage\n  );\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should match all semver ranges","suites":[],"updatePoint":{"line":266,"column":34},"line":266,"code":"it('should match all semver ranges', async () => {\n  // See https://docs.npmjs.com/files/package.json#engines\n  expect(await getSupportedNodeVersion('14.0.0')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('14.x')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('>=10')).toHaveProperty('major', 16);\n  expect(await getSupportedNodeVersion('>=10.3.0')).toHaveProperty('major', 16);\n  expect(await getSupportedNodeVersion('16.5.0 - 16.9.0')).toHaveProperty(\n    'major',\n    16\n  );\n  expect(await getSupportedNodeVersion('>=9.5.0 <=14.5.0')).toHaveProperty(\n    'major',\n    14\n  );\n  expect(await getSupportedNodeVersion('~14.5.0')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('^14.5.0')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('14.5.0 - 14.20.0')).toHaveProperty(\n    'major',\n    14\n  );\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only allow nodejs18.x when env var is set","suites":[],"updatePoint":{"line":288,"column":52},"line":288,"code":"it('should only allow nodejs18.x when env var is set', async () => {\n  try {\n    expect(getLatestNodeVersion()).toHaveProperty('major', 16);\n    expect(getSupportedNodeVersion('18.x')).rejects.toThrow();\n\n    process.env.VERCEL_ALLOW_NODEJS18 = '1';\n\n    expect(getLatestNodeVersion()).toHaveProperty('major', 18);\n    expect(await getSupportedNodeVersion('18.x')).toHaveProperty('major', 18);\n    expect(await getSupportedNodeVersion('18')).toHaveProperty('major', 18);\n    expect(await getSupportedNodeVersion('18.1.0')).toHaveProperty('major', 18);\n    expect(await getSupportedNodeVersion('>=16')).toHaveProperty('major', 18);\n  } finally {\n    delete process.env.VERCEL_ALLOW_NODEJS18;\n  }\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should ignore node version in vercel dev getNodeVersion()","suites":[],"updatePoint":{"line":305,"column":61},"line":305,"code":"it('should ignore node version in vercel dev getNodeVersion()', async () => {\n  expect(\n    await getNodeVersion(\n      '/tmp',\n      undefined,\n      { nodeVersion: '1' },\n      { isDev: true }\n    )\n  ).toHaveProperty('runtime', 'nodejs');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should select project setting from config when no package.json is found","suites":[],"updatePoint":{"line":316,"column":75},"line":316,"code":"it('should select project setting from config when no package.json is found', async () => {\n  expect(\n    await getNodeVersion('/tmp', undefined, { nodeVersion: '16.x' }, {})\n  ).toHaveProperty('range', '16.x');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should prefer package.json engines over project setting from config and warn","suites":[],"updatePoint":{"line":323,"column":80},"line":323,"code":"it('should prefer package.json engines over project setting from config and warn', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '12.x' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([\n    'Warning: Due to \"engines\": { \"node\": \"14.x\" } in your `package.json` file, the Node.js Version defined in your Project Settings (\"12.x\") will not apply. Learn More: http://vercel.link/node-version',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should warn when package.json engines is exact version","suites":[],"updatePoint":{"line":337,"column":58},"line":337,"code":"it('should warn when package.json engines is exact version', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node-exact'),\n      undefined,\n      {},\n      {}\n    )\n  ).toHaveProperty('range', '16.x');\n  expect(warningMessages).toStrictEqual([\n    'Warning: Detected \"engines\": { \"node\": \"16.14.0\" } in your `package.json` with major.minor.patch, but only major Node.js Version can be selected. Learn More: http://vercel.link/node-version',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should warn when package.json engines is greater than","suites":[],"updatePoint":{"line":351,"column":57},"line":351,"code":"it('should warn when package.json engines is greater than', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node-greaterthan'),\n      undefined,\n      {},\n      {}\n    )\n  ).toHaveProperty('range', '16.x');\n  expect(warningMessages).toStrictEqual([\n    'Warning: Detected \"engines\": { \"node\": \">=16\" } in your `package.json` that will automatically upgrade when a new major Node.js Version is released. Learn More: http://vercel.link/node-version',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not warn when package.json engines matches project setting from config","suites":[],"updatePoint":{"line":365,"column":81},"line":365,"code":"it('should not warn when package.json engines matches project setting from config', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '14' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([]);\n\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '14.x' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([]);\n\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '<15' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should get latest node version","suites":[],"updatePoint":{"line":397,"column":34},"line":397,"code":"it('should get latest node version', async () => {\n  expect(getLatestNodeVersion()).toHaveProperty('major', 16);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw for discontinued versions","suites":[],"updatePoint":{"line":401,"column":42},"line":401,"code":"it('should throw for discontinued versions', async () => {\n  // Mock a future date so that Node 8 and 10 become discontinued\n  const realDateNow = Date.now.bind(global.Date);\n  global.Date.now = () => new Date('2022-10-15').getTime();\n\n  expect(getSupportedNodeVersion('8.10.x', false)).rejects.toThrow();\n  expect(getSupportedNodeVersion('8.10.x', true)).rejects.toThrow();\n  expect(getSupportedNodeVersion('10.x', false)).rejects.toThrow();\n  expect(getSupportedNodeVersion('10.x', true)).rejects.toThrow();\n  expect(getSupportedNodeVersion('12.x', false)).rejects.toThrow();\n  expect(getSupportedNodeVersion('12.x', true)).rejects.toThrow();\n\n  const discontinued = getDiscontinuedNodeVersions();\n  expect(discontinued.length).toBe(3);\n  expect(discontinued[0]).toHaveProperty('range', '12.x');\n  expect(discontinued[1]).toHaveProperty('range', '10.x');\n  expect(discontinued[2]).toHaveProperty('range', '8.10.x');\n\n  global.Date.now = realDateNow;\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should warn for deprecated versions, soon to be discontinued","suites":[],"updatePoint":{"line":422,"column":64},"line":422,"code":"it('should warn for deprecated versions, soon to be discontinued', async () => {\n  // Mock a future date so that Node 10 warns\n  const realDateNow = Date.now.bind(global.Date);\n  global.Date.now = () => new Date('2021-02-23').getTime();\n\n  expect(await getSupportedNodeVersion('10.x', false)).toHaveProperty(\n    'major',\n    10\n  );\n  expect(await getSupportedNodeVersion('10.x', true)).toHaveProperty(\n    'major',\n    10\n  );\n  expect(await getSupportedNodeVersion('12.x', false)).toHaveProperty(\n    'major',\n    12\n  );\n  expect(await getSupportedNodeVersion('12.x', true)).toHaveProperty(\n    'major',\n    12\n  );\n  expect(warningMessages).toStrictEqual([\n    'Error: Node.js version 10.x has reached End-of-Life. Deployments created on or after 2021-04-20 will fail to build. Please set \"engines\": { \"node\": \"16.x\" } in your `package.json` file to use Node.js 16.',\n    'Error: Node.js version 10.x has reached End-of-Life. Deployments created on or after 2021-04-20 will fail to build. Please set Node.js Version to 16.x in your Project Settings to use Node.js 16.',\n    'Error: Node.js version 12.x has reached End-of-Life. Deployments created on or after 2022-10-03 will fail to build. Please set \"engines\": { \"node\": \"16.x\" } in your `package.json` file to use Node.js 16.',\n    'Error: Node.js version 12.x has reached End-of-Life. Deployments created on or after 2022-10-03 will fail to build. Please set Node.js Version to 16.x in your Project Settings to use Node.js 16.',\n  ]);\n\n  global.Date.now = realDateNow;\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support initialHeaders and initialStatus correctly","suites":[],"updatePoint":{"line":453,"column":61},"line":453,"code":"it('should support initialHeaders and initialStatus correctly', async () => {\n  const { Prerender } = require('@vercel/build-utils/dist/prerender.js');\n  new Prerender({\n    expiration: 1,\n    fallback: null,\n    group: 1,\n    bypassToken: 'some-long-bypass-token-to-make-it-work',\n    initialHeaders: {\n      'content-type': 'application/json',\n      'x-initial': 'true',\n    },\n    initialStatus: 308,\n  });\n  new Prerender({\n    expiration: 1,\n    fallback: null,\n    group: 1,\n    bypassToken: 'some-long-bypass-token-to-make-it-work',\n    initialStatus: 308,\n  });\n  new Prerender({\n    expiration: 1,\n    fallback: null,\n    group: 1,\n    bypassToken: 'some-long-bypass-token-to-make-it-work',\n    initialHeaders: {\n      'content-type': 'application/json',\n      'x-initial': 'true',\n    },\n  });\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support require by path for legacy builders","suites":[],"updatePoint":{"line":485,"column":54},"line":485,"code":"it('should support require by path for legacy builders', () => {\n  const index = require('@vercel/build-utils');\n\n  const download2 = require('@vercel/build-utils/fs/download.js');\n  const getWriteableDirectory2 = require('@vercel/build-utils/fs/get-writable-directory.js');\n  const glob2 = require('@vercel/build-utils/fs/glob.js');\n  const rename2 = require('@vercel/build-utils/fs/rename.js');\n  const {\n    runNpmInstall: runNpmInstall2,\n  } = require('@vercel/build-utils/fs/run-user-scripts.js');\n  const streamToBuffer2 = require('@vercel/build-utils/fs/stream-to-buffer.js');\n\n  const FileBlob2 = require('@vercel/build-utils/file-blob.js');\n  const FileFsRef2 = require('@vercel/build-utils/file-fs-ref.js');\n  const FileRef2 = require('@vercel/build-utils/file-ref.js');\n  const { Lambda: Lambda2 } = require('@vercel/build-utils/lambda.js');\n\n  expect(download2).toBe(index.download);\n  expect(getWriteableDirectory2).toBe(index.getWriteableDirectory);\n  expect(glob2).toBe(index.glob);\n  expect(rename2).toBe(index.rename);\n  expect(runNpmInstall2).toBe(index.runNpmInstall);\n  expect(streamToBuffer2).toBe(index.streamToBuffer);\n\n  expect(FileBlob2).toBe(index.FileBlob);\n  expect(FileFsRef2).toBe(index.FileFsRef);\n  expect(FileRef2).toBe(index.FileRef);\n  expect(Lambda2).toBe(index.Lambda);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should have correct $PATH when running `runPackageJsonScript()` with yarn","suites":[],"updatePoint":{"line":516,"column":76},"line":515,"code":"it(\n  'should have correct $PATH when running `runPackageJsonScript()` with yarn',\n  async () => {\n    if (process.platform === 'win32') {\n      console.log('Skipping test on windows');\n      return;\n    }\n    if (process.platform === 'darwin') {\n      console.log('Skipping test on macOS');\n      return;\n    }\n    const fixture = path.join(__dirname, 'fixtures', '19-yarn-v2');\n    await runNpmInstall(fixture);\n    await runPackageJsonScript(fixture, 'env');\n\n    // `yarn` was failing with ENOENT before, so as long as the\n    // script was invoked at all is enough to verify the fix\n    const out = await fs.readFile(path.join(fixture, 'env.txt'), 'utf8');\n    expect(out.trim()).toBeTruthy();\n  },\n  ms('1m')\n);","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return lockfileVersion 2 with npm7","suites":[],"updatePoint":{"line":538,"column":45},"line":538,"code":"it('should return lockfileVersion 2 with npm7', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(2);\n  expect(result.lockfilePath).toEqual(path.join(fixture, 'package-lock.json'));\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not return lockfileVersion with yarn","suites":[],"updatePoint":{"line":547,"column":47},"line":547,"code":"it('should not return lockfileVersion with yarn', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '19-yarn-v2');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('yarn');\n  expect(result.lockfileVersion).toEqual(undefined);\n  expect(result.lockfilePath).toEqual(path.join(fixture, 'yarn.lock'));\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return lockfileVersion 1 with older versions of npm","suites":[],"updatePoint":{"line":556,"column":62},"line":556,"code":"it('should return lockfileVersion 1 with older versions of npm', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '08-yarn-npm/with-npm');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(1);\n  expect(result.lockfilePath).toEqual(path.join(fixture, 'package-lock.json'));\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect npm Workspaces","suites":[],"updatePoint":{"line":565,"column":32},"line":565,"code":"it('should detect npm Workspaces', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '21-npm-workspaces/a');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(2);\n  expect(result.lockfilePath).toEqual(\n    path.join(fixture, '..', 'package-lock.json')\n  );\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect pnpm without workspace","suites":[],"updatePoint":{"line":576,"column":40},"line":576,"code":"it('should detect pnpm without workspace', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '22-pnpm');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('pnpm');\n  expect(result.lockfileVersion).toEqual(5.3);\n  expect(result.lockfilePath).toEqual(path.join(fixture, 'pnpm-lock.yaml'));\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect pnpm with workspaces","suites":[],"updatePoint":{"line":585,"column":38},"line":585,"code":"it('should detect pnpm with workspaces', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '23-pnpm-workspaces/c');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('pnpm');\n  expect(result.lockfileVersion).toEqual(5.3);\n  expect(result.lockfilePath).toEqual(\n    path.join(fixture, '..', 'pnpm-lock.yaml')\n  );\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect package.json in nested backend","suites":[],"updatePoint":{"line":596,"column":48},"line":596,"code":"it('should detect package.json in nested backend', async () => {\n  const fixture = path.join(\n    __dirname,\n    '../../node/test/fixtures/18.1-nested-packagejson/backend'\n  );\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('yarn');\n  expect(result.lockfileVersion).toEqual(undefined);\n  // There is no lockfile but this test will pick up vercel/vercel/yarn.lock\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect package.json in nested frontend","suites":[],"updatePoint":{"line":608,"column":49},"line":608,"code":"it('should detect package.json in nested frontend', async () => {\n  const fixture = path.join(\n    __dirname,\n    '../../node/test/fixtures/18.1-nested-packagejson/frontend'\n  );\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('yarn');\n  expect(result.lockfileVersion).toEqual(undefined);\n  // There is no lockfile but this test will pick up vercel/vercel/yarn.lock\n  expect(result.packageJsonPath).toEqual(path.join(fixture, 'package.json'));\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should retry npm install when peer deps invalid and npm@8 on node@16","suites":[],"updatePoint":{"line":620,"column":72},"line":620,"code":"it('should retry npm install when peer deps invalid and npm@8 on node@16', async () => {\n  const nodeMajor = Number(process.versions.node.split('.')[0]);\n  if (nodeMajor !== 16) {\n    console.log(`Skipping test on node@${nodeMajor}`);\n    return;\n  }\n  const fixture = path.join(__dirname, 'fixtures', '15-npm-8-legacy-peer-deps');\n  const nodeVersion = { major: nodeMajor } as any;\n  await runNpmInstall(fixture, [], {}, {}, nodeVersion);\n  expect(warningMessages).toStrictEqual([\n    'Warning: Retrying \"Install Command\" with `--legacy-peer-deps` which may accept a potentially broken dependency and slow install time.',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw when `base` is relative","suites":["Test `walkParentDirs`"],"updatePoint":{"line":17,"column":42},"line":17,"code":"  it('should throw when `base` is relative', async () => {\n    const base = './relative';\n    const start = __dirname;\n    try {\n      await walkParentDirs({ base, start, filename });\n      fail('Expected error');\n    } catch (error) {\n      deepEqual(\n        (error as Error).message,\n        'Expected \"base\" to be absolute path'\n      );\n    }\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw when `start` is relative","suites":["Test `walkParentDirs`"],"updatePoint":{"line":31,"column":43},"line":31,"code":"  it('should throw when `start` is relative', async () => {\n    const base = __dirname;\n    const start = './relative';\n    try {\n      await walkParentDirs({ base, start, filename });\n      fail('Expected error');\n    } catch (error) {\n      deepEqual(\n        (error as Error).message,\n        'Expected \"start\" to be absolute path'\n      );\n    }\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":45,"column":28},"line":45,"code":"  it('should find nested one', async () => {\n    const base = fixture('every-directory');\n    const start = base;\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'First');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":52,"column":28},"line":52,"code":"  it('should find nested two', async () => {\n    const base = fixture('every-directory');\n    const start = join(base, 'two');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Second');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":59,"column":30},"line":59,"code":"  it('should find nested three', async () => {\n    const base = fixture('every-directory');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Third');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":66,"column":32},"line":66,"code":"  it('should not find nested one', async () => {\n    const base = fixture('not-found');\n    const start = base;\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":73,"column":32},"line":73,"code":"  it('should not find nested two', async () => {\n    const base = fixture('not-found');\n    const start = join(base, 'two');\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":80,"column":34},"line":80,"code":"  it('should not find nested three', async () => {\n    const base = fixture('not-found');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":87,"column":26},"line":87,"code":"  it('should find only one', async () => {\n    const base = fixture('only-one');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'First');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":94,"column":26},"line":94,"code":"  it('should find only two', async () => {\n    const base = fixture('only-two');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Second');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":101,"column":28},"line":101,"code":"  it('should find only three', async () => {\n    const base = fixture('only-three');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Third');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create the app","suites":["AppComponent"],"updatePoint":{"line":9,"column":27,"index":299},"line":9,"code":"  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should have as title 'angular-node'","suites":["AppComponent"],"updatePoint":{"line":14,"column":41,"index":502},"line":14,"code":"  it(`should have as title 'angular-node'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app.title).toEqual('angular-node');\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render title in a h1 tag","suites":["AppComponent"],"updatePoint":{"line":19,"column":37,"index":718},"line":19,"code":"  it('should render title in a h1 tag', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('h1').textContent).toContain('Welcome to angular-node!');\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render message","suites":["Stage App Component"],"updatePoint":{"line":10,"column":27,"index":388},"line":10,"code":"  it('should render message', done => {\n    component.create(bootstrap).then(() => {\n      const view = component.element;\n      expect(view.textContent.trim()).toBe('Hello World!');\n      done();\n    }).catch(e => {\n      fail(e);\n      done();\n    });\n  });","file":"dev/fixtures/03-aurelia/test/unit/app.spec.js","skipped":false,"dir":"packages/cli/test"},{"name":"renders without crashing","suites":[],"updatePoint":{"line":4,"column":28,"index":115},"line":4,"code":"it('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render( /*#__PURE__*/React.createElement(App, null), div);\n  ReactDOM.unmountComponentAtNode(div);\n});","file":"dev/fixtures/04-create-react-app/src/App.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 02-angular-node","suites":[],"updatePoint":{"line":15,"column":34,"index":313},"line":15,"code":"test('[vercel dev] 02-angular-node', async () => {\n  if (shouldSkip('02-angular-node', '10.x')) return;\n  const directory = fixture('02-angular-node');\n  const {\n    dev,\n    port\n  } = await testFixture(directory, {\n    stdio: 'pipe'\n  }, ['--debug']);\n  let stderr = '';\n  try {\n    dev.stderr.on('data', async data => {\n      stderr += data.toString();\n    });\n\n    // start `vercel dev` detached in child_process\n    dev.unref();\n    const response = await fetchWithRetry(`http://localhost:${port}`, {\n      retries: 180,\n      status: 200\n    });\n    validateResponseHeaders(response);\n    const body = await response.text();\n    expect(body).toMatch(/Angular \\+ Node.js API/m);\n  } finally {\n    dev.kill('SIGTERM');\n  }\n  await sleep(5000);\n  if (isCanary()) {\n    stderr.includes('@now/build-utils@canary');\n  } else {\n    stderr.includes('@now/build-utils@latest');\n  }\n});","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 03-aurelia","suites":[],"updatePoint":{"line":49,"column":29,"index":1191},"line":49,"code":"test('[vercel dev] 03-aurelia', testFixtureStdio('03-aurelia', async testPath => {\n  await testPath(200, '/', /Aurelia Navigation Skeleton/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 04-create-react-app","suites":[],"updatePoint":{"line":54,"column":38,"index":1372},"line":54,"code":"test('[vercel dev] 04-create-react-app', testFixtureStdio('04-create-react-app', async testPath => {\n  await testPath(200, '/', /React App/m);\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 06-gridsome","suites":[],"updatePoint":{"line":65,"column":30,"index":1676},"line":65,"code":"test('[vercel dev] 06-gridsome', testFixtureStdio('06-gridsome', async testPath => {\n  await testPath(200, '/');\n  await testPath(200, '/about');\n  await testPath(308, '/support', 'Redirecting to /about?ref=support (308)', {\n    Location: '/about?ref=support'\n  });\n  // Bug with gridsome's dev server: https://github.com/gridsome/gridsome/issues/831\n  // Works in prod only so leave out for now\n  // await testPath(404, '/nothing');\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 07-hexo-node","suites":[],"updatePoint":{"line":76,"column":31,"index":2117},"line":76,"code":"test('[vercel dev] 07-hexo-node', testFixtureStdio('07-hexo-node', async testPath => {\n  await testPath(200, '/', /Hexo \\+ Node.js API/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n  await testPath(200, '/contact.html', /Contact Us/m);\n  await testPath(200, '/support', /Contact Us/m);\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 08-hugo","suites":[],"updatePoint":{"line":82,"column":26,"index":2440},"line":82,"code":"test('[vercel dev] 08-hugo', async () => {\n  if (process.platform === 'darwin') {\n    // Update PATH to find the Hugo executable installed via GH Actions\n    process.env.PATH = `${resolve(fixture('08-hugo'))}${delimiter}${process.env.PATH}`;\n    const tester = testFixtureStdio('08-hugo', async testPath => {\n      await testPath(200, '/', /Hugo/m);\n    });\n    await tester();\n  } else {\n    console.log(`Skipping 08-hugo on platform ${process.platform}`);\n  }\n});","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 10-nextjs-node","suites":[],"updatePoint":{"line":94,"column":33,"index":2913},"line":94,"code":"test('[vercel dev] 10-nextjs-node', testFixtureStdio('10-nextjs-node', async testPath => {\n  await testPath(200, '/', /Next.js \\+ Node.js API/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n  await testPath(200, '/contact', /Contact Page/);\n  await testPath(200, '/support', /Contact Page/);\n  // TODO: Fix this test assertion that fails intermittently\n  // await testPath(404, '/nothing', /Custom Next 404/);\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 10a-nextjs-routes","suites":[],"updatePoint":{"line":103,"column":36,"index":3367},"line":103,"code":"test('[vercel dev] 10a-nextjs-routes', testFixtureStdio('10a-nextjs-routes', async testPath => {\n  await testPath(200, '/', /Next.js with routes/m);\n  await testPath(200, '/hello', /Hello Routes/m);\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 12-polymer-node","suites":[],"updatePoint":{"line":107,"column":34,"index":3569},"line":107,"code":"test('[vercel dev] 12-polymer-node', testFixtureStdio('12-polymer-node', async testPath => {\n  await testPath(200, '/', /Polymer \\+ Node.js API/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 13-preact-node","suites":[],"updatePoint":{"line":113,"column":33,"index":3824},"line":113,"code":"test('[vercel dev] 13-preact-node', testFixtureStdio('13-preact-node', async testPath => {\n  await testPath(200, '/', /Preact/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 14-svelte-node","suites":[],"updatePoint":{"line":119,"column":33,"index":4062},"line":119,"code":"test('[vercel dev] 14-svelte-node', testFixtureStdio('14-svelte-node', async testPath => {\n  await testPath(200, '/', /Svelte/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 16-vue-node","suites":[],"updatePoint":{"line":125,"column":30,"index":4297},"line":125,"code":"test('[vercel dev] 16-vue-node', testFixtureStdio('16-vue-node', async testPath => {\n  await testPath(200, '/', /Vue.js \\+ Node.js API/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 17-vuepress-node","suites":[],"updatePoint":{"line":131,"column":35,"index":4549},"line":131,"code":"test('[vercel dev] 17-vuepress-node', testFixtureStdio('17-vuepress-node', async testPath => {\n  await testPath(200, '/', /VuePress \\+ Node.js API/m);\n  await testPath(200, '/api/date', new RegExp(new Date().getFullYear() + ''));\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] double slashes redirect","suites":[],"updatePoint":{"line":137,"column":42,"index":4815},"line":137,"code":"test('[vercel dev] double slashes redirect', testFixtureStdio('01-node', async (_testPath, port) => {\n  {\n    const res = await fetch(`http://localhost:${port}////?foo=bar`, {\n      redirect: 'manual'\n    });\n    validateResponseHeaders(res);\n    const body = await res.text();\n    expect(res.status).toBe(301);\n    expect(res.headers.get('location')).toBe(`http://localhost:${port}/?foo=bar`);\n    expect(body).toBe('Redirecting to /?foo=bar (301)\\n');\n  }\n  {\n    const res = await fetch(`http://localhost:${port}///api////date.js`, {\n      method: 'POST',\n      redirect: 'manual'\n    });\n    validateResponseHeaders(res);\n    const body = await res.text();\n    expect(res.status).toBe(200);\n    expect(body.startsWith('January') || body.startsWith('February') || body.startsWith('March') || body.startsWith('April') || body.startsWith('May') || body.startsWith('June') || body.startsWith('July') || body.startsWith('August') || body.startsWith('September') || body.startsWith('October') || body.startsWith('November') || body.startsWith('December')).toBeTruthy();\n  }\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 18-marko","suites":[],"updatePoint":{"line":161,"column":27,"index":5901},"line":161,"code":"test('[vercel dev] 18-marko', testFixtureStdio('18-marko', async testPath => {\n  await testPath(200, '/', /Marko Starter/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 19-mithril","suites":[],"updatePoint":{"line":166,"column":29,"index":6057},"line":166,"code":"test('[vercel dev] 19-mithril', testFixtureStdio('19-mithril', async testPath => {\n  await testPath(200, '/', /Mithril on Vercel/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 20-riot","suites":[],"updatePoint":{"line":171,"column":26,"index":6216},"line":171,"code":"test('[vercel dev] 20-riot', testFixtureStdio('20-riot', async testPath => {\n  await testPath(200, '/', /Riot on Vercel/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 21-charge","suites":[],"updatePoint":{"line":176,"column":28,"index":6371},"line":176,"code":"test('[vercel dev] 21-charge', testFixtureStdio('21-charge', async testPath => {\n  await testPath(200, '/', /Welcome to my new Charge site/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 22-brunch","suites":[],"updatePoint":{"line":181,"column":28,"index":6543},"line":181,"code":"test('[vercel dev] 22-brunch', testFixtureStdio('22-brunch', async testPath => {\n  await testPath(200, '/', /Bon Appétit./m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 23-docusaurus","suites":[],"updatePoint":{"line":186,"column":32,"index":6702},"line":186,"code":"test('[vercel dev] 23-docusaurus', testFixtureStdio('23-docusaurus', async testPath => {\n  await testPath(200, '/', /My Site/m);\n}, {\n  skipDeploy: true\n}));","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"[vercel dev] 24-ember","suites":[],"updatePoint":{"line":191,"column":27,"index":6855},"line":191,"code":"test('[vercel dev] 24-ember', async () => {\n  if (shouldSkip('24-ember', '>^6.14.0 || ^8.10.0 || >=9.10.0')) return;\n  const tester = testFixtureStdio('24-ember', async testPath => {\n    await testPath(200, '/', /HelloWorld/m);\n  }, {\n    skipDeploy: true\n  });\n  await tester();\n});","file":"dev/integration-3.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should find the bad deployment","suites":["bisect"],"updatePoint":{"line":6,"column":36,"index":260},"line":6,"code":"  it('should find the bad deployment', async () => {\n    const user = useUser();\n    const now = Date.now();\n    const deployment1 = useDeployment({\n      creator: user,\n      createdAt: now\n    });\n    const deployment2 = useDeployment({\n      creator: user,\n      createdAt: now + 10000\n    });\n    const deployment3 = useDeployment({\n      creator: user,\n      createdAt: now + 20000\n    });\n\n    // also create an extra deployment before the known good deployment\n    // to make sure the bisect pool doesn't include it\n    useDeployment({\n      creator: user,\n      createdAt: now - 30000\n    });\n    const bisectPromise = bisect(client);\n    await expect(client.stderr).toOutput('Specify a URL where the bug occurs:');\n    client.stdin.write(`https://${deployment3.url}\\n`);\n    await expect(client.stderr).toOutput('Specify a URL where the bug does not occur:');\n    client.stdin.write(`https://${deployment1.url}\\n`);\n    await expect(client.stderr).toOutput('Specify the URL subpath where the bug occurs:');\n    client.stdin.write('/docs\\n');\n    await expect(client.stderr).toOutput('Bisecting');\n    await expect(client.stderr).toOutput(`Deployment URL: https://${deployment2.url}`);\n    client.stdin.write('b\\n');\n    await expect(client.stderr).toOutput(`The first bad deployment is: https://${deployment2.url}`);\n    await expect(bisectPromise).resolves.toEqual(0);\n  });","file":"unit/commands/bisect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build with `@vercel/static`","suites":["build"],"updatePoint":{"line":14,"column":40,"index":609},"line":14,"code":"  it('should build with `@vercel/static`', async () => {\n    const cwd = fixture('static');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/static\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/static',\n          apiVersion: 2,\n          src: '**',\n          use: '@vercel/static'\n        }]\n      });\n\n      // \"static\" directory contains static files\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files.sort()).toEqual(['index.html']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build with `@now/static`","suites":["build"],"updatePoint":{"line":42,"column":37,"index":1484},"line":42,"code":"  it('should build with `@now/static`', async () => {\n    const cwd = fixture('now-static');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@now/static',\n          apiVersion: 2,\n          src: 'www/index.html',\n          use: '@now/static'\n        }]\n      });\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files).toEqual(['www']);\n      const www = await fs.readdir(join(output, 'static', 'www'));\n      expect(www).toEqual(['index.html']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build with `@vercel/node`","suites":["build"],"updatePoint":{"line":68,"column":38,"index":2356},"line":68,"code":"  it('should build with `@vercel/node`', async () => {\n    const cwd = fixture('node');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/node\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'api/es6.js',\n          config: {\n            zeroConfig: true\n          }\n        }, {\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'api/index.js',\n          config: {\n            zeroConfig: true\n          }\n        }, {\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'api/mjs.mjs',\n          config: {\n            zeroConfig: true\n          }\n        }, {\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'api/typescript.ts',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // \"static\" directory is empty\n      const hasStaticFiles = await fs.pathExists(join(output, 'static'));\n      expect(hasStaticFiles, 'Expected \".vercel/output/static\" to not exist').toEqual(false);\n\n      // \"functions/api\" directory has output Functions\n      const functions = await fs.readdir(join(output, 'functions/api'));\n      expect(functions.sort()).toEqual(['es6.func', 'index.func', 'mjs.func', 'typescript.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle symlinked static files","suites":["build"],"updatePoint":{"line":127,"column":42,"index":4160},"line":127,"code":"  it('should handle symlinked static files', async () => {\n    const cwd = fixture('static-symlink');\n    const output = join(cwd, '.vercel/output');\n\n    // try to create the symlink, if it fails (e.g. Windows), skip the test\n    try {\n      await fs.unlink(join(cwd, 'foo.html'));\n      await fs.symlink(join(cwd, 'index.html'), join(cwd, 'foo.html'));\n    } catch (e) {\n      console.log('Symlinks not available, skipping test');\n      return;\n    }\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/static\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/static',\n          apiVersion: 2,\n          src: '**',\n          use: '@vercel/static'\n        }]\n      });\n\n      // \"static\" directory contains static files\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files.sort()).toEqual(['foo.html', 'index.html']);\n      expect((await fs.lstat(join(output, 'static', 'foo.html'))).isSymbolicLink()).toEqual(true);\n      expect((await fs.lstat(join(output, 'static', 'index.html'))).isSymbolicLink()).toEqual(false);\n    } finally {\n      await fs.unlink(join(cwd, 'foo.html'));\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should normalize \"src\" path in `vercel.json`","suites":["build"],"updatePoint":{"line":167,"column":50,"index":5618},"line":167,"code":"  it('should normalize \"src\" path in `vercel.json`', async () => {\n    const cwd = fixture('normalize-src');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/node\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'server.js'\n        }]\n      });\n\n      // `config.json` includes \"route\" from `vercel.json`\n      const config = await fs.readJSON(join(output, 'config.json'));\n      expect(config).toMatchObject({\n        version: 3,\n        routes: [{\n          src: '^/(.*)$',\n          dest: '/server.js'\n        }]\n      });\n\n      // \"static\" directory is empty\n      const hasStaticFiles = await fs.pathExists(join(output, 'static'));\n      expect(hasStaticFiles, 'Expected \".vercel/output/static\" to not exist').toEqual(false);\n\n      // \"functions\" directory has output Function\n      const functions = await fs.readdir(join(output, 'functions'));\n      expect(functions.sort()).toEqual(['server.js.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build with 3rd party Builder","suites":["build"],"updatePoint":{"line":209,"column":41,"index":7008},"line":209,"code":"  it('should build with 3rd party Builder', async () => {\n    const cwd = fixture('third-party-builder');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"txt-builder\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: 'txt-builder',\n          apiVersion: 3,\n          use: 'txt-builder@0.0.0',\n          src: 'api/foo.txt',\n          config: {\n            zeroConfig: true,\n            functions: {\n              'api/*.txt': {\n                runtime: 'txt-builder@0.0.0'\n              }\n            }\n          }\n        }, {\n          require: '@vercel/static',\n          apiVersion: 2,\n          use: '@vercel/static',\n          src: '!{api/**,package.json,middleware.[jt]s}',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // \"static\" directory is empty\n      const hasStaticFiles = await fs.pathExists(join(output, 'static'));\n      expect(hasStaticFiles, 'Expected \".vercel/output/static\" to not exist').toEqual(false);\n\n      // \"functions/api\" directory has output Functions\n      const functions = await fs.readdir(join(output, 'functions/api'));\n      expect(functions.sort()).toEqual(['foo.func']);\n      const vcConfig = await fs.readJSON(join(output, 'functions/api/foo.func/.vc-config.json'));\n      expect(vcConfig).toMatchObject({\n        handler: 'api/foo.txt',\n        runtime: 'provided',\n        environment: {}\n      });\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should serialize `EdgeFunction` output in version 3 Builder","suites":["build"],"updatePoint":{"line":263,"column":65,"index":8806},"line":263,"code":"  it('should serialize `EdgeFunction` output in version 3 Builder', async () => {\n    const cwd = fixture('edge-function');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      client.setArgv('build', '--prod');\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"edge-function\" Builder was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'production',\n        builds: [{\n          require: 'edge-function',\n          apiVersion: 3,\n          use: 'edge-function@0.0.0',\n          src: 'api/edge.js',\n          config: {\n            zeroConfig: true,\n            functions: {\n              'api/*.js': {\n                runtime: 'edge-function@0.0.0'\n              }\n            }\n          }\n        }, {\n          require: '@vercel/static',\n          apiVersion: 2,\n          use: '@vercel/static',\n          src: '!{api/**,package.json,middleware.[jt]s}',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // \"static\" directory is empty\n      const hasStaticFiles = await fs.pathExists(join(output, 'static'));\n      expect(hasStaticFiles, 'Expected \".vercel/output/static\" to not exist').toEqual(false);\n\n      // \"functions/api\" directory has output Functions\n      const functions = await fs.readdir(join(output, 'functions/api'));\n      expect(functions.sort()).toEqual(['edge.func']);\n      const vcConfig = await fs.readJSON(join(output, 'functions/api/edge.func/.vc-config.json'));\n      expect(vcConfig).toMatchObject({\n        runtime: 'edge',\n        name: 'api/edge.js',\n        deploymentTarget: 'v8-worker',\n        entrypoint: 'api/edge.js'\n      });\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should pull \"preview\" env vars by default","suites":["build"],"updatePoint":{"line":319,"column":47,"index":10683},"line":319,"code":"  it('should pull \"preview\" env vars by default', async () => {\n    const cwd = fixture('static-pull');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    const envFilePath = join(cwd, '.vercel', '.env.preview.local');\n    const projectJsonPath = join(cwd, '.vercel', 'project.json');\n    const originalProjectJson = await fs.readJSON(join(cwd, '.vercel/project.json'));\n    try {\n      process.chdir(cwd);\n      client.setArgv('build', '--yes');\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const previewEnv = await fs.readFile(envFilePath, 'utf8');\n      const envFileHasPreviewEnv = previewEnv.includes('REDIS_CONNECTION_STRING');\n      expect(envFileHasPreviewEnv).toBeTruthy();\n    } finally {\n      await fs.remove(envFilePath);\n      await fs.writeJSON(projectJsonPath, originalProjectJson, {\n        spaces: 2\n      });\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should pull \"production\" env vars with `--prod`","suites":["build"],"updatePoint":{"line":348,"column":53,"index":11759},"line":348,"code":"  it('should pull \"production\" env vars with `--prod`', async () => {\n    const cwd = fixture('static-pull');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    const envFilePath = join(cwd, '.vercel', '.env.production.local');\n    const projectJsonPath = join(cwd, '.vercel', 'project.json');\n    const originalProjectJson = await fs.readJSON(join(cwd, '.vercel/project.json'));\n    try {\n      process.chdir(cwd);\n      client.setArgv('build', '--yes', '--prod');\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const prodEnv = await fs.readFile(envFilePath, 'utf8');\n      const envFileHasProductionEnv1 = prodEnv.includes('REDIS_CONNECTION_STRING');\n      expect(envFileHasProductionEnv1).toBeTruthy();\n      const envFileHasProductionEnv2 = prodEnv.includes('SQL_CONNECTION_STRING');\n      expect(envFileHasProductionEnv2).toBeTruthy();\n    } finally {\n      await fs.remove(envFilePath);\n      await fs.writeJSON(projectJsonPath, originalProjectJson, {\n        spaces: 2\n      });\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build root-level `middleware.js` and exclude from static files","suites":["build"],"updatePoint":{"line":379,"column":75,"index":13007},"line":379,"code":"  it('should build root-level `middleware.js` and exclude from static files', async () => {\n    const cwd = fixture('middleware');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/node\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'middleware.js',\n          config: {\n            zeroConfig: true,\n            middleware: true\n          }\n        }, {\n          require: '@vercel/static',\n          apiVersion: 2,\n          use: '@vercel/static',\n          src: '!{api/**,package.json,middleware.[jt]s}',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // `config.json` includes the \"middlewarePath\" route\n      const config = await fs.readJSON(join(output, 'config.json'));\n      expect(config).toMatchObject({\n        version: 3,\n        routes: [{\n          src: '^/.*$',\n          middlewarePath: 'middleware',\n          continue: true\n        }, {\n          handle: 'filesystem'\n        }, {\n          src: '^/api(/.*)?$',\n          status: 404\n        }, {\n          handle: 'error'\n        }, {\n          status: 404,\n          src: '^(?!/api).*$',\n          dest: '/404.html'\n        }]\n      });\n\n      // \"static\" directory contains `index.html`, but *not* `middleware.js`\n      const staticFiles = await fs.readdir(join(output, 'static'));\n      expect(staticFiles.sort()).toEqual(['index.html']);\n\n      // \"functions\" directory contains `middleware.func`\n      const functions = await fs.readdir(join(output, 'functions'));\n      expect(functions.sort()).toEqual(['middleware.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build root-level `middleware.js` with \"Root Directory\" setting","suites":["build"],"updatePoint":{"line":445,"column":75,"index":15035},"line":445,"code":"  it('should build root-level `middleware.js` with \"Root Directory\" setting', async () => {\n    const cwd = fixture('middleware-root-directory');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/static\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'middleware.js',\n          config: {\n            zeroConfig: true,\n            middleware: true\n          }\n        }, {\n          require: '@vercel/static',\n          apiVersion: 2,\n          use: '@vercel/static',\n          src: '!{api/**,package.json,middleware.[jt]s}',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // `config.json` includes the \"middlewarePath\" route\n      const config = await fs.readJSON(join(output, 'config.json'));\n      expect(config).toMatchObject({\n        version: 3,\n        routes: [{\n          src: '^/.*$',\n          middlewarePath: 'middleware',\n          continue: true\n        }, {\n          handle: 'filesystem'\n        }, {\n          src: '^/api(/.*)?$',\n          status: 404\n        }, {\n          handle: 'error'\n        }, {\n          status: 404,\n          src: '^(?!/api).*$',\n          dest: '/404.html'\n        }]\n      });\n\n      // \"static\" directory contains `index.html`, but *not* `middleware.js`\n      const staticFiles = await fs.readdir(join(output, 'static'));\n      expect(staticFiles.sort()).toEqual(['index.html']);\n\n      // \"functions\" directory contains `middleware.func`\n      const functions = await fs.readdir(join(output, 'functions'));\n      expect(functions.sort()).toEqual(['middleware.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should build root-level `middleware.js` with \"matcher\" config","suites":["build"],"updatePoint":{"line":511,"column":67,"index":17072},"line":511,"code":"  it('should build root-level `middleware.js` with \"matcher\" config', async () => {\n    const cwd = fixture('middleware-with-matcher');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/node\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/node',\n          apiVersion: 3,\n          use: '@vercel/node',\n          src: 'middleware.js',\n          config: {\n            zeroConfig: true,\n            middleware: true\n          }\n        }, {\n          require: '@vercel/static',\n          apiVersion: 2,\n          use: '@vercel/static',\n          src: '!{api/**,package.json,middleware.[jt]s}',\n          config: {\n            zeroConfig: true\n          }\n        }]\n      });\n\n      // `config.json` includes the \"middlewarePath\" route\n      const config = await fs.readJSON(join(output, 'config.json'));\n      expect(config).toMatchObject({\n        version: 3,\n        routes: [{\n          src: '^\\\\/about(?:\\\\/((?:[^\\\\/#\\\\?]+?)(?:\\\\/(?:[^\\\\/#\\\\?]+?))*))?[\\\\/#\\\\?]?$|^\\\\/dashboard(?:\\\\/((?:[^\\\\/#\\\\?]+?)(?:\\\\/(?:[^\\\\/#\\\\?]+?))*))?[\\\\/#\\\\?]?$',\n          middlewarePath: 'middleware',\n          continue: true\n        }, {\n          handle: 'filesystem'\n        }, {\n          src: '^/api(/.*)?$',\n          status: 404\n        }, {\n          handle: 'error'\n        }, {\n          status: 404,\n          src: '^(?!/api).*$',\n          dest: '/404.html'\n        }]\n      });\n\n      // \"static\" directory contains `index.html`, but *not* `middleware.js`\n      const staticFiles = await fs.readdir(join(output, 'static'));\n      expect(staticFiles.sort()).toEqual(['index.html']);\n\n      // \"functions\" directory contains `middleware.func`\n      const functions = await fs.readdir(join(output, 'functions'));\n      expect(functions.sort()).toEqual(['middleware.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should support `--output` parameter","suites":["build"],"updatePoint":{"line":577,"column":41,"index":19219},"line":577,"code":"  it('should support `--output` parameter', async () => {\n    const cwd = fixture('static');\n    const output = await getWriteableDirectory();\n    try {\n      process.chdir(cwd);\n      client.setArgv('build', '--output', output);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/static\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/static',\n          apiVersion: 2,\n          src: '**',\n          use: '@vercel/static'\n        }]\n      });\n\n      // \"static\" directory contains static files\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files.sort()).toEqual(['index.html']);\n    } finally {\n      await fs.remove(output);\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should support Builder that doesn't export `version`","suites":["build"],"updatePoint":{"line":610,"column":58,"index":20344},"line":610,"code":"  it(\"should support Builder that doesn't export `version`\", async () => {\n    const cwd = fixture('versionless-builder');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"versionless-builder\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: 'versionless-builder',\n          src: 'package.json',\n          use: 'versionless-builder@0.0.0'\n        }]\n      });\n\n      // \"static\" directory contains static files\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files.sort()).toEqual(['file']);\n      expect(await fs.readFile(join(output, 'static/file'), 'utf8')).toEqual('file contents');\n\n      // \"functions\" directory has output Functions\n      const functions = await fs.readdir(join(output, 'functions'));\n      expect(functions.sort()).toEqual(['withTrailingSlash.func']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should store `detectBuilders()` error in `builds.json`","suites":["build"],"updatePoint":{"line":642,"column":60,"index":21540},"line":642,"code":"  it('should store `detectBuilders()` error in `builds.json`', async () => {\n    const cwd = fixture('error-vercel-json-validation');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(1);\n\n      // Error gets printed to the terminal\n      await expect(client.stderr).toOutput('Error: Function must contain at least one property.');\n\n      // `builds.json` contains top-level \"error\" property\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds.builds).toBeUndefined();\n      expect(builds.error.code).toEqual('invalid_function');\n      expect(builds.error.message).toEqual('Function must contain at least one property.');\n\n      // `config.json` contains `version`\n      const configJson = await fs.readJSON(join(output, 'config.json'));\n      expect(configJson.version).toBe(3);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should store Builder error in `builds.json`","suites":["build"],"updatePoint":{"line":667,"column":49,"index":22566},"line":667,"code":"  it('should store Builder error in `builds.json`', async () => {\n    const cwd = fixture('node-error');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(1);\n\n      // Error gets printed to the terminal\n      await expect(client.stderr).toOutput(\"Duplicate identifier 'res'.\");\n\n      // `builds.json` contains \"error\" build\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds.builds).toHaveLength(4);\n      const errorBuilds = builds.builds.filter(b => 'error' in b);\n      expect(errorBuilds).toHaveLength(1);\n      expect(errorBuilds[0].error).toEqual({\n        name: 'Error',\n        message: expect.stringContaining('TS1005'),\n        stack: expect.stringContaining('api/typescript.ts'),\n        hideStackTrace: true,\n        code: 'NODE_TYPESCRIPT_ERROR'\n      });\n\n      // top level \"error\" also contains the same error\n      expect(builds.error).toEqual({\n        name: 'Error',\n        message: expect.stringContaining('TS1005'),\n        stack: expect.stringContaining('api/typescript.ts'),\n        hideStackTrace: true,\n        code: 'NODE_TYPESCRIPT_ERROR'\n      });\n\n      // `config.json` contains `version`\n      const configJson = await fs.readJSON(join(output, 'config.json'));\n      expect(configJson.version).toBe(3);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should error when \"functions\" has runtime that emits discontinued \"nodejs12.x\"","suites":["build"],"updatePoint":{"line":708,"column":84,"index":24096},"line":708,"code":"  it('should error when \"functions\" has runtime that emits discontinued \"nodejs12.x\"', async () => {\n    if (process.platform === 'win32') {\n      console.log('Skipping test on Windows');\n      return;\n    }\n    const cwd = fixture('discontinued-nodejs12.x');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(1);\n\n      // Error gets printed to the terminal\n      await expect(client.stderr).toOutput('The Runtime \"vercel-php@0.1.0\" is using \"nodejs12.x\", which is discontinued. Please upgrade your Runtime to a more recent version or consult the author for more details.');\n\n      // `builds.json` contains \"error\" build\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      const errorBuilds = builds.builds.filter(b => 'error' in b);\n      expect(errorBuilds).toHaveLength(1);\n      expect(errorBuilds[0].error).toEqual({\n        name: 'Error',\n        message: expect.stringContaining('Please upgrade your Runtime'),\n        stack: expect.stringContaining('Please upgrade your Runtime'),\n        hideStackTrace: true,\n        code: 'NODEJS_DISCONTINUED_VERSION',\n        link: 'https://github.com/vercel/vercel/blob/main/DEVELOPING_A_RUNTIME.md#lambdaruntime'\n      });\n\n      // top level \"error\" also contains the same error\n      expect(builds.error).toEqual({\n        name: 'Error',\n        message: expect.stringContaining('Please upgrade your Runtime'),\n        stack: expect.stringContaining('Please upgrade your Runtime'),\n        hideStackTrace: true,\n        code: 'NODEJS_DISCONTINUED_VERSION',\n        link: 'https://github.com/vercel/vercel/blob/main/DEVELOPING_A_RUNTIME.md#lambdaruntime'\n      });\n\n      // `config.json` contains `version`\n      const configJson = await fs.readJSON(join(output, 'config.json'));\n      expect(configJson.version).toBe(3);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should allow for missing \"build\" script","suites":["build"],"updatePoint":{"line":754,"column":45,"index":26074},"line":754,"code":"  it('should allow for missing \"build\" script', async () => {\n    const cwd = fixture('static-with-pkg');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `builds.json` says that \"@vercel/static\" was run\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds).toMatchObject({\n        target: 'preview',\n        builds: [{\n          require: '@vercel/static',\n          apiVersion: 2,\n          src: '**',\n          use: '@vercel/static'\n        }]\n      });\n\n      // \"static\" directory contains static files\n      const files = await fs.readdir(join(output, 'static'));\n      expect(files.sort()).toEqual(['index.html', 'package.json']);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should set `VERCEL_ANALYTICS_ID` environment variable","suites":["build"],"updatePoint":{"line":782,"column":59,"index":26996},"line":782,"code":"  it('should set `VERCEL_ANALYTICS_ID` environment variable', async () => {\n    const cwd = fixture('vercel-analytics');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const env = await fs.readJSON(join(output, 'static', 'env.json'));\n      expect(Object.keys(env).includes('VERCEL_ANALYTICS_ID')).toEqual(true);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should load environment variables from `.vercel/.env.preview.local`","suites":["build"],"updatePoint":{"line":796,"column":73,"index":27556},"line":796,"code":"  it('should load environment variables from `.vercel/.env.preview.local`', async () => {\n    const cwd = fixture('env-from-vc-pull');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const env = await fs.readJSON(join(output, 'static', 'env.json'));\n      expect(env['ENV_FILE']).toEqual('preview');\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should load environment variables from `.vercel/.env.production.local`","suites":["build"],"updatePoint":{"line":810,"column":76,"index":28091},"line":810,"code":"  it('should load environment variables from `.vercel/.env.production.local`', async () => {\n    const cwd = fixture('env-from-vc-pull');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      client.setArgv('build', '--prod');\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const env = await fs.readJSON(join(output, 'static', 'env.json'));\n      expect(env['ENV_FILE']).toEqual('production');\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should NOT load environment variables from `.env`","suites":["build"],"updatePoint":{"line":825,"column":55,"index":28649},"line":825,"code":"  it('should NOT load environment variables from `.env`', async () => {\n    const cwd = fixture('env-root-level');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n      const env = await fs.readJSON(join(output, 'static', 'env.json'));\n      // The `.env` in this fixture has `ENV_FILE=root\"`,\n      // so if that's not defined then we're good\n      expect(env['ENV_FILE']).toBeUndefined();\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should apply function configuration from \"vercel.json\" to Serverless Functions","suites":["build"],"updatePoint":{"line":841,"column":84,"index":29295},"line":841,"code":"  it('should apply function configuration from \"vercel.json\" to Serverless Functions', async () => {\n    const cwd = fixture('lambda-with-128-memory');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // \"functions/api\" directory has output Functions\n      const functions = await fs.readdir(join(output, 'functions/api'));\n      expect(functions.sort()).toEqual(['memory.func']);\n      const vcConfig = await fs.readJSON(join(output, 'functions/api/memory.func/.vc-config.json'));\n      expect(vcConfig).toMatchObject({\n        handler: 'api/memory.js',\n        runtime: 'nodejs16.x',\n        memory: 128,\n        environment: {},\n        launcherType: 'Nodejs',\n        shouldAddHelpers: true,\n        shouldAddSourcemapSupport: false,\n        awsLambdaHandler: ''\n      });\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should apply project settings overrides from \"vercel.json\"","suites":["build"],"updatePoint":{"line":868,"column":64,"index":30284},"line":868,"code":"  it('should apply project settings overrides from \"vercel.json\"', async () => {\n    if (process.platform === 'win32') {\n      // this test runs a build command with `mkdir -p` which is unsupported on Windows\n      console.log('Skipping test on Windows');\n      return;\n    }\n    const cwd = fixture('project-settings-override');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // The `buildCommand` override in \"vercel.json\" outputs \"3\" to the\n      // index.txt file, so verify that that was produced in the build output\n      const contents = await fs.readFile(join(output, 'static/index.txt'), 'utf8');\n      expect(contents.trim()).toEqual('3');\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should apply \"images\" configuration from `vercel.json`","suites":["build"],"updatePoint":{"line":890,"column":60,"index":31164},"line":890,"code":"  it('should apply \"images\" configuration from `vercel.json`', async () => {\n    const cwd = fixture('images');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(0);\n\n      // `config.json` includes \"images\" from `vercel.json`\n      const configJson = await fs.readJSON(join(output, 'config.json'));\n      expect(configJson).toMatchObject({\n        images: {\n          sizes: [256, 384, 600, 1000],\n          domains: [],\n          minimumCacheTTL: 60,\n          formats: ['image/avif', 'image/webp']\n        }\n      });\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail with invalid \"rewrites\" configuration from `vercel.json`","suites":["build"],"updatePoint":{"line":913,"column":74,"index":31919},"line":913,"code":"  it('should fail with invalid \"rewrites\" configuration from `vercel.json`', async () => {\n    const cwd = fixture('invalid-rewrites');\n    const output = join(cwd, '.vercel/output');\n    try {\n      process.chdir(cwd);\n      const exitCode = await build(client);\n      expect(exitCode).toEqual(1);\n      await expect(client.stderr).toOutput('Error: Invalid vercel.json - `rewrites[2]` should NOT have additional property `src`. Did you mean `source`?' + '\\n' + 'View Documentation: https://vercel.com/docs/configuration#project/rewrites');\n      const builds = await fs.readJSON(join(output, 'builds.json'));\n      expect(builds.builds).toBeUndefined();\n      expect(builds.error).toEqual({\n        name: 'Error',\n        message: 'Invalid vercel.json - `rewrites[2]` should NOT have additional property `src`. Did you mean `source`?',\n        stack: expect.stringContaining('at validateConfig'),\n        hideStackTrace: true,\n        code: 'INVALID_VERCEL_CONFIG',\n        link: 'https://vercel.com/docs/configuration#project/rewrites',\n        action: 'View Documentation'\n      });\n      const configJson = await fs.readJSON(join(output, 'config.json'));\n      expect(configJson.version).toBe(3);\n    } finally {\n      process.chdir(originalCwd);\n      delete process.env.__VERCEL_BUILD_RUNNING;\n    }\n  });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"use-classic","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":955,"column":19,"index":33945},"line":955,"code":"    it('use-classic', async function () {\n      const packageDir = join(output, 'functions/api', 'use-classic.func', 'packages', 'only-classic');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('index.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"use-main","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":960,"column":16,"index":34211},"line":960,"code":"    it('use-main', async function () {\n      const packageDir = join(output, 'functions/api', 'use-main.func', 'packages', 'only-main');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-main.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"use-module","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":965,"column":18,"index":34477},"line":965,"code":"    it('use-module', async function () {\n      const packageDir = join(output, 'functions/api', 'use-module.func', 'packages', 'only-module');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-module.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"use-browser","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":970,"column":19,"index":34750},"line":970,"code":"    it('use-browser', async function () {\n      const packageDir = join(output, 'functions/api', 'use-browser.func', 'packages', 'only-browser');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-browser.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"prefer-browser","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":975,"column":22,"index":35029},"line":975,"code":"    it('prefer-browser', async function () {\n      const packageDir = join(output, 'functions/api', 'prefer-browser.func', 'packages', 'prefer-browser');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-browser.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"prefer-main","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":980,"column":19,"index":35310},"line":980,"code":"    it('prefer-main', async function () {\n      const packageDir = join(output, 'functions/api', 'prefer-main.func', 'packages', 'prefer-main');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-main.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"prefer-module","suites":["build","should find packages with different main/module/browser keys"],"updatePoint":{"line":985,"column":21,"index":35584},"line":985,"code":"    it('prefer-module', async function () {\n      const packageDir = join(output, 'functions/api', 'prefer-module.func', 'packages', 'prefer-module');\n      const packageDistFiles = await fs.readdir(packageDir);\n      expect(packageDistFiles).toContain('dist-module.js');\n    });","file":"unit/commands/build.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a single file","suites":["deploy"],"updatePoint":{"line":13,"column":43,"index":552},"line":13,"code":"  it('should reject deploying a single file', async () => {\n    client.setArgv('deploy', __filename);\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput(`Error: Support for single file deployments has been removed.\\nLearn More: https://vercel.link/no-single-file-deployments\\n`);\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying multiple files","suites":["deploy"],"updatePoint":{"line":19,"column":44,"index":928},"line":19,"code":"  it('should reject deploying multiple files', async () => {\n    client.setArgv('deploy', __filename, join(__dirname, 'inspect.test.ts'));\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput(`Error: Can't deploy more than one path.\\n`);\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a directory that does not exist","suites":["deploy"],"updatePoint":{"line":25,"column":61,"index":1276},"line":25,"code":"  it('should reject deploying a directory that does not exist', async () => {\n    client.setArgv('deploy', 'does-not-exists');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput(`Error: The specified file or directory \"does-not-exists\" does not exist.\\n`);\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying when `--prebuilt` is used and `vc build` failed before Builders","suites":["deploy"],"updatePoint":{"line":31,"column":93,"index":1660},"line":31,"code":"  it('should reject deploying when `--prebuilt` is used and `vc build` failed before Builders', async () => {\n    const cwd = setupFixture('build-output-api-failed-before-builds');\n    client.setArgv('deploy', cwd, '--prebuilt');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('> Prebuilt deployment cannot be created because `vercel build` failed with error:\\n\\nError: The build failed (top-level)\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying when `--prebuilt` is used and `vc build` failed within a Builder","suites":["deploy"],"updatePoint":{"line":38,"column":94,"index":2164},"line":38,"code":"  it('should reject deploying when `--prebuilt` is used and `vc build` failed within a Builder', async () => {\n    const cwd = setupFixture('build-output-api-failed-within-build');\n    client.setArgv('deploy', cwd, '--prebuilt');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('> Prebuilt deployment cannot be created because `vercel build` failed with error:\\n\\nError: The build failed within a Builder\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a directory that does not contain \".vercel/output\" when `--prebuilt` is used","suites":["deploy"],"updatePoint":{"line":45,"column":106,"index":2684},"line":45,"code":"  it('should reject deploying a directory that does not contain \".vercel/output\" when `--prebuilt` is used', async () => {\n    client.setArgv('deploy', __dirname, '--prebuilt');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('Error: The \"--prebuilt\" option was used, but no prebuilt output found in \".vercel/output\". Run `vercel build` to generate a local build.\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a directory that was built with a different target environment when `--prebuilt --prod` is used on \"preview\" output","suites":["deploy"],"updatePoint":{"line":51,"column":145,"index":3190},"line":51,"code":"  it('should reject deploying a directory that was built with a different target environment when `--prebuilt --prod` is used on \"preview\" output', async () => {\n    const cwd = setupFixture('build-output-api-preview');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'build-output-api-preview',\n      name: 'build-output-api-preview'\n    });\n    client.setArgv('deploy', cwd, '--prebuilt', '--prod');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('Error: The \"--prebuilt\" option was used with the target environment \"production\",' + ' but the prebuilt output found in \".vercel/output\" was built with target environment \"preview\".' + ' Please run `vercel --prebuilt`.\\n' + 'Learn More: https://vercel.link/prebuilt-environment-mismatch\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a directory that was built with a different target environment when `--prebuilt` is used on \"production\" output","suites":["deploy"],"updatePoint":{"line":65,"column":141,"index":4074},"line":65,"code":"  it('should reject deploying a directory that was built with a different target environment when `--prebuilt` is used on \"production\" output', async () => {\n    const cwd = setupFixture('build-output-api-production');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'build-output-api-preview',\n      name: 'build-output-api-preview'\n    });\n    client.setArgv('deploy', cwd, '--prebuilt');\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('Error: The \"--prebuilt\" option was used with the target environment \"preview\",' + ' but the prebuilt output found in \".vercel/output\" was built with target environment \"production\".' + ' Please run `vercel --prebuilt --prod`.\\n' + 'Learn More: https://vercel.link/prebuilt-environment-mismatch\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying \"version: 1\"","suites":["deploy"],"updatePoint":{"line":79,"column":42,"index":4859},"line":79,"code":"  it('should reject deploying \"version: 1\"', async () => {\n    client.setArgv('deploy');\n    client.localConfig = {\n      [fileNameSymbol]: 'vercel.json',\n      version: 1\n    };\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('Error: The value of the `version` property within vercel.json can only be `2`.\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying \"version: {}\"","suites":["deploy"],"updatePoint":{"line":89,"column":43,"index":5270},"line":89,"code":"  it('should reject deploying \"version: {}\"', async () => {\n    client.setArgv('deploy');\n    client.localConfig = {\n      [fileNameSymbol]: 'vercel.json',\n      // @ts-ignore\n      version: {}\n    };\n    const exitCodePromise = deploy(client);\n    await expect(client.stderr).toOutput('Error: The `version` property inside your vercel.json file must be a number.\\n');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should send a tgz file when `--archive=tgz`","suites":["deploy"],"updatePoint":{"line":100,"column":49,"index":5706},"line":100,"code":"  it('should send a tgz file when `--archive=tgz`', async () => {\n    const cwd = setupFixture('commands/deploy/archive');\n    const originalCwd = process.cwd();\n    try {\n      process.chdir(cwd);\n      const user = useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        name: 'archive',\n        id: 'archive'\n      });\n      let body;\n      client.scenario.post(`/v13/deployments`, (req, res) => {\n        body = req.body;\n        res.json({\n          creator: {\n            uid: user.id,\n            username: user.username\n          },\n          id: 'dpl_archive_test'\n        });\n      });\n      client.scenario.get(`/v13/deployments/dpl_archive_test`, (req, res) => {\n        res.json({\n          creator: {\n            uid: user.id,\n            username: user.username\n          },\n          id: 'dpl_archive_test',\n          readyState: 'READY',\n          aliasAssigned: true,\n          alias: []\n        });\n      });\n      client.scenario.get(`/v10/now/deployments/dpl_archive_test`, (req, res) => {\n        res.json({\n          creator: {\n            uid: user.id,\n            username: user.username\n          },\n          id: 'dpl_archive_test',\n          readyState: 'READY',\n          aliasAssigned: true,\n          alias: []\n        });\n      });\n      client.setArgv('deploy', '--archive=tgz');\n      const exitCode = await deploy(client);\n      expect(exitCode).toEqual(0);\n      expect(body?.files?.length).toEqual(1);\n      expect(body?.files?.[0].file).toEqual('.vercel/source.tgz');\n    } finally {\n      process.chdir(originalCwd);\n    }\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should upload missing files","suites":["deploy"],"updatePoint":{"line":156,"column":33,"index":7297},"line":156,"code":"  it('should upload missing files', async () => {\n    const cwd = setupFixture('commands/deploy/archive');\n    const originalCwd = process.cwd();\n\n    // Add random 1mb file\n    await fs.writeFile(join(cwd, 'data'), randomBytes(bytes('1mb')));\n    try {\n      process.chdir(cwd);\n      const user = useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        name: 'archive',\n        id: 'archive'\n      });\n      let body;\n      let fileUploaded = false;\n      client.scenario.post(`/v13/deployments`, (req, res) => {\n        if (fileUploaded) {\n          body = req.body;\n          res.json({\n            creator: {\n              uid: user.id,\n              username: user.username\n            },\n            id: 'dpl_archive_test'\n          });\n        } else {\n          const sha = req.body.files[0].sha;\n          res.status(400).json({\n            error: {\n              code: 'missing_files',\n              message: 'Missing files',\n              missing: [sha]\n            }\n          });\n        }\n      });\n      client.scenario.post('/v2/files', (req, res) => {\n        // Wait for file to be finished uploading\n        req.on('data', () => {\n          // Noop\n        });\n        req.on('end', () => {\n          fileUploaded = true;\n          res.end();\n        });\n      });\n      client.scenario.get(`/v13/deployments/dpl_archive_test`, (req, res) => {\n        res.json({\n          creator: {\n            uid: user.id,\n            username: user.username\n          },\n          id: 'dpl_archive_test',\n          readyState: 'READY',\n          aliasAssigned: true,\n          alias: []\n        });\n      });\n      client.scenario.get(`/v10/now/deployments/dpl_archive_test`, (req, res) => {\n        res.json({\n          creator: {\n            uid: user.id,\n            username: user.username\n          },\n          id: 'dpl_archive_test',\n          readyState: 'READY',\n          aliasAssigned: true,\n          alias: []\n        });\n      });\n\n      // When stderr is not a TTY we expect 5 progress lines to be printed\n      client.stderr.isTTY = false;\n      client.setArgv('deploy', '--archive=tgz');\n      const uploadingLines = [];\n      client.stderr.on('data', data => {\n        if (data.startsWith('Uploading [')) {\n          uploadingLines.push(data);\n        }\n      });\n      client.stderr.resume();\n      const exitCode = await deploy(client);\n      expect(exitCode).toEqual(0);\n      expect(body?.files?.length).toEqual(1);\n      expect(body?.files?.[0].file).toEqual('.vercel/source.tgz');\n      expect(uploadingLines.length).toEqual(5);\n      expect(uploadingLines[0].startsWith('Uploading [--------------------]')).toEqual(true);\n      expect(uploadingLines[1].startsWith('Uploading [=====---------------]')).toEqual(true);\n      expect(uploadingLines[2].startsWith('Uploading [==========----------]')).toEqual(true);\n      expect(uploadingLines[3].startsWith('Uploading [===============-----]')).toEqual(true);\n      expect(uploadingLines[4].startsWith('Uploading [====================]')).toEqual(true);\n    } finally {\n      process.chdir(originalCwd);\n    }\n  });","file":"unit/commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle pulling","suites":["env","pull"],"updatePoint":{"line":11,"column":29,"index":438},"line":11,"code":"    it('should handle pulling', async () => {\n      const cwd = setupFixture('vercel-env-pull');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-env-pull',\n        name: 'vercel-env-pull'\n      });\n      client.setArgv('env', 'pull', '--yes', '--cwd', cwd);\n      const exitCodePromise = env(client);\n      await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project vercel-env-pull');\n      await expect(client.stderr).toOutput('Created .env file');\n      await expect(exitCodePromise).resolves.toEqual(0);\n      const rawDevEnv = await fs.readFile(path.join(cwd, '.env'));\n\n      // check for development env value\n      const devFileHasDevEnv = rawDevEnv.toString().includes('SPECIAL_FLAG');\n      expect(devFileHasDevEnv).toBeTruthy();\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle alternate filename","suites":["env","pull"],"updatePoint":{"line":31,"column":40,"index":1300},"line":31,"code":"    it('should handle alternate filename', async () => {\n      const cwd = setupFixture('vercel-env-pull');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-env-pull',\n        name: 'vercel-env-pull'\n      });\n      client.setArgv('env', 'pull', 'other.env', '--yes', '--cwd', cwd);\n      const exitCodePromise = env(client);\n      await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project vercel-env-pull');\n      await expect(client.stderr).toOutput('Created other.env file');\n      await expect(exitCodePromise).resolves.toEqual(0);\n      const rawDevEnv = await fs.readFile(path.join(cwd, 'other.env'));\n\n      // check for development env value\n      const devFileHasDevEnv = rawDevEnv.toString().includes('SPECIAL_FLAG');\n      expect(devFileHasDevEnv).toBeTruthy();\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should use given environment","suites":["env","pull"],"updatePoint":{"line":51,"column":36,"index":2181},"line":51,"code":"    it('should use given environment', async () => {\n      const cwd = setupFixture('vercel-env-pull');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-env-pull',\n        name: 'vercel-env-pull'\n      });\n      client.setArgv('env', 'pull', '--environment', 'production', '--cwd', cwd);\n      const exitCodePromise = env(client);\n      await expect(client.stderr).toOutput(`Downloading \\`production\\` Environment Variables for Project vercel-env-pull`);\n      await expect(client.stderr).toOutput('Created .env file');\n      await expect(exitCodePromise).resolves.toEqual(0);\n      const rawProdEnv = await fs.readFile(path.join(cwd, '.env'));\n\n      // check for development env value\n      const envFileHasEnv = rawProdEnv.toString().includes('REDIS_CONNECTION_STRING');\n      expect(envFileHasEnv).toBeTruthy();\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should throw an error when it does not recognize given environment","suites":["env","pull"],"updatePoint":{"line":71,"column":74,"index":3107},"line":71,"code":"    it('should throw an error when it does not recognize given environment', async () => {\n      const cwd = setupFixture('vercel-env-pull');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-env-pull',\n        name: 'vercel-env-pull'\n      });\n      client.setArgv('env', 'pull', '.env.production', '--environment', 'something-invalid', '--cwd', cwd);\n      const exitCodePromise = env(client);\n      await expect(client.stderr).toOutput(`Invalid environment \\`something-invalid\\`. Valid options: <production | preview | development>`);\n      await expect(exitCodePromise).resolves.toEqual(1);\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should expose production system env variables","suites":["env","pull"],"updatePoint":{"line":85,"column":53,"index":3752},"line":85,"code":"    it('should expose production system env variables', async () => {\n      const cwd = setupFixture('vercel-env-pull');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-env-pull',\n        name: 'vercel-env-pull',\n        autoExposeSystemEnvs: true\n      });\n      client.setArgv('env', 'pull', 'other.env', '--yes', '--cwd', cwd);\n      const exitCodePromise = env(client);\n      await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project vercel-env-pull');\n      await expect(client.stderr).toOutput('Created other.env file');\n      await expect(exitCodePromise).resolves.toEqual(0);\n      const rawDevEnv = await fs.readFile(path.join(cwd, 'other.env'));\n      const productionFileHasVercelEnv = rawDevEnv.toString().includes('VERCEL_ENV=\"development\"');\n      expect(productionFileHasVercelEnv).toBeTruthy();\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should show a delta string","suites":["env","pull"],"updatePoint":{"line":104,"column":34,"index":4657},"line":104,"code":"    it('should show a delta string', async () => {\n      const cwd = setupFixture('vercel-env-pull-delta');\n      try {\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'env-pull-delta',\n          name: 'env-pull-delta'\n        });\n        client.setArgv('env', 'add', 'NEW_VAR', '--cwd', cwd);\n        const addPromise = env(client);\n        await expect(client.stderr).toOutput('What’s the value of NEW_VAR?');\n        client.stdin.write('testvalue\\n');\n        await expect(client.stderr).toOutput('Add NEW_VAR to which Environments (select multiple)?');\n        client.stdin.write('\\x1B[B'); // Down arrow\n        client.stdin.write('\\x1B[B');\n        client.stdin.write(' ');\n        client.stdin.write('\\r');\n        await expect(addPromise).resolves.toEqual(0);\n        client.setArgv('env', 'pull', '--yes', '--cwd', cwd);\n        const pullPromise = env(client);\n        await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project env-pull-delta');\n        await expect(client.stderr).toOutput('+ SPECIAL_FLAG (Updated)\\n+ NEW_VAR\\n- TEST\\n');\n        await expect(client.stderr).toOutput('Updated .env file');\n        await expect(pullPromise).resolves.toEqual(0);\n      } finally {\n        client.setArgv('env', 'rm', 'NEW_VAR', '--yes', '--cwd', cwd);\n        await env(client);\n      }\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should not show a delta string when it fails to read a file","suites":["env","pull"],"updatePoint":{"line":135,"column":67,"index":6101},"line":135,"code":"    it('should not show a delta string when it fails to read a file', async () => {\n      const cwd = setupFixture('vercel-env-pull-delta-corrupt');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'env-pull-delta-corrupt',\n        name: 'env-pull-delta-corrupt'\n      });\n      client.setArgv('env', 'pull', '--yes', '--cwd', cwd);\n      const pullPromise = env(client);\n      await expect(client.stderr).toOutput('Updated .env file');\n      await expect(pullPromise).resolves.toEqual(0);\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should show that no changes were found","suites":["env","pull"],"updatePoint":{"line":149,"column":46,"index":6634},"line":149,"code":"    it('should show that no changes were found', async () => {\n      const cwd = setupFixture('vercel-env-pull-delta-no-changes');\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'env-pull-delta-no-changes',\n        name: 'env-pull-delta-no-changes'\n      });\n      client.setArgv('env', 'pull', '--yes', '--cwd', cwd);\n      const pullPromise = env(client);\n      await expect(client.stderr).toOutput('> No changes found.');\n      await expect(client.stderr).toOutput('Updated .env file');\n      await expect(pullPromise).resolves.toEqual(0);\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should correctly render delta string when env variable has quotes","suites":["env","pull"],"updatePoint":{"line":164,"column":73,"index":7270},"line":164,"code":"    it('should correctly render delta string when env variable has quotes', async () => {\n      const cwd = setupFixture('vercel-env-pull-delta-quotes');\n      try {\n        useUser();\n        useTeams('team_dummy');\n        defaultProject.env.push({\n          type: 'encrypted',\n          id: '781dt89g8r2h789g',\n          key: 'NEW_VAR',\n          value: '\"testvalue\"',\n          target: ['development'],\n          gitBranch: null,\n          configurationId: null,\n          updatedAt: 1557241361455,\n          createdAt: 1557241361455\n        });\n        useProject({\n          ...defaultProject,\n          id: 'env-pull-delta-quotes',\n          name: 'env-pull-delta-quotes'\n        });\n        client.setArgv('env', 'pull', '--yes', '--cwd', cwd);\n        const pullPromise = env(client);\n        await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project env-pull-delta');\n        await expect(client.stderr).toOutput('No changes found.\\n');\n        await expect(client.stderr).toOutput('Updated .env file');\n        await expect(pullPromise).resolves.toEqual(0);\n      } finally {\n        client.setArgv('env', 'rm', 'NEW_VAR', '--yes', '--cwd', cwd);\n        await env(client);\n        defaultProject.env.pop();\n      }\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should correctly render delta string when local env variable has quotes","suites":["env","pull"],"updatePoint":{"line":197,"column":79,"index":8551},"line":197,"code":"    it('should correctly render delta string when local env variable has quotes', async () => {\n      const cwd = setupFixture('vercel-env-pull-delta-quotes');\n      try {\n        useUser();\n        useTeams('team_dummy');\n        defaultProject.env.push({\n          type: 'encrypted',\n          id: '781dt89g8r2h789g',\n          key: 'NEW_VAR',\n          value: 'testvalue',\n          target: ['development'],\n          gitBranch: null,\n          configurationId: null,\n          updatedAt: 1557241361455,\n          createdAt: 1557241361455\n        });\n        useProject({\n          ...defaultProject,\n          id: 'env-pull-delta-quotes',\n          name: 'env-pull-delta-quotes'\n        });\n        client.setArgv('env', 'pull', '.env.testquotes', '--yes', '--cwd', cwd);\n        const pullPromise = env(client);\n        await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project env-pull-delta');\n        await expect(client.stderr).toOutput('No changes found.\\n');\n        await expect(client.stderr).toOutput('Updated .env.testquotes file');\n        await expect(pullPromise).resolves.toEqual(0);\n      } finally {\n        client.setArgv('env', 'rm', 'NEW_VAR', '--yes', '--cwd', cwd);\n        await env(client);\n        defaultProject.env.pop();\n      }\n    });","file":"unit/commands/env.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"connects an unlinked project","suites":["git","connect"],"updatePoint":{"line":13,"column":36,"index":572},"line":13,"code":"    it('connects an unlinked project', async () => {\n      const cwd = fixture('unlinked');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'unlinked',\n          name: 'unlinked'\n        });\n        client.setArgv('git', 'connect');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput('Set up');\n        client.stdin.write('y\\n');\n        await expect(client.stderr).toOutput('Which scope should contain your project?');\n        client.stdin.write('\\r');\n        await expect(client.stderr).toOutput('Found project');\n        client.stdin.write('y\\n');\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user/repo.git`);\n        const exitCode = await gitPromise;\n        await expect(client.stderr).toOutput('Connected GitHub repository user/repo!');\n        expect(exitCode).toEqual(0);\n        const project = await client.fetch(`/v8/projects/unlinked`);\n        expect(project.link).toMatchObject({\n          type: 'github',\n          repo: 'user/repo',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail when there is no git config","suites":["git","connect"],"updatePoint":{"line":52,"column":47,"index":2078},"line":52,"code":"    it('should fail when there is no git config', async () => {\n      const cwd = fixture('no-git-config');\n      try {\n        process.chdir(cwd);\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'no-git-config',\n          name: 'no-git-config'\n        });\n        client.setArgv('git', 'connect', '--yes');\n        const exitCode = await git(client);\n        expect(exitCode).toEqual(1);\n        await expect(client.stderr).toOutput(`Error: No local Git repository found. Run \\`git clone <url>\\` to clone a remote Git repository first.\\n`);\n      } finally {\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail when there is no remote url","suites":["git","connect"],"updatePoint":{"line":71,"column":47,"index":2757},"line":71,"code":"    it('should fail when there is no remote url', async () => {\n      const cwd = fixture('no-remote-url');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'no-remote-url',\n          name: 'no-remote-url'\n        });\n        client.setArgv('git', 'connect', '--yes');\n        const exitCode = await git(client);\n        expect(exitCode).toEqual(1);\n        await expect(client.stderr).toOutput(`Error: No remote URLs found in your Git config. Make sure you've configured a remote repo in your local Git config. Run \\`git remote --help\\` for more details.`);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail when the remote url is bad","suites":["git","connect"],"updatePoint":{"line":92,"column":46,"index":3615},"line":92,"code":"    it('should fail when the remote url is bad', async () => {\n      const cwd = fixture('bad-remote-url');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'bad-remote-url',\n          name: 'bad-remote-url'\n        });\n        client.setArgv('git', 'connect', '--yes');\n        const exitCode = await git(client);\n        expect(exitCode).toEqual(1);\n        await expect(client.stderr).toOutput(`Connecting Git remote: bababooey`);\n        await expect(client.stderr).toOutput(`Error: Failed to parse Git repo data from the following remote URL: bababooey\\n`);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should connect a repo to a project that is not already connected","suites":["git","connect"],"updatePoint":{"line":114,"column":72,"index":4504},"line":114,"code":"    it('should connect a repo to a project that is not already connected', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        client.setArgv('git', 'connect', '--yes');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user/repo`);\n        await expect(client.stderr).toOutput(`> Connected GitHub repository user/repo!\\n`);\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(0);\n        const project = await client.fetch(`/v8/projects/new-connection`);\n        expect(project.link).toMatchObject({\n          type: 'github',\n          repo: 'user/repo',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should replace an old connection with a new one","suites":["git","connect"],"updatePoint":{"line":147,"column":55,"index":5738},"line":147,"code":"    it('should replace an old connection with a new one', async () => {\n      const cwd = fixture('existing-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        const project = useProject({\n          ...defaultProject,\n          id: 'existing-connection',\n          name: 'existing-connection'\n        });\n        project.project.link = {\n          type: 'github',\n          repo: 'repo',\n          org: 'user',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        };\n        client.setArgv('git', 'connect', '--yes');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user2/repo2`);\n        await expect(client.stderr).toOutput(`> Connected GitHub repository user2/repo2!\\n`);\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(0);\n        const newProjectData = await client.fetch(`/v8/projects/existing-connection`);\n        expect(newProjectData.link).toMatchObject({\n          type: 'github',\n          repo: 'user2/repo2',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should exit when an already-connected repo is connected","suites":["git","connect"],"updatePoint":{"line":190,"column":63,"index":7307},"line":190,"code":"    it('should exit when an already-connected repo is connected', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        const project = useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        project.project.link = {\n          type: 'github',\n          repo: 'repo',\n          org: 'user',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        };\n        client.setArgv('git', 'connect', '--yes');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user/repo`);\n        await expect(client.stderr).toOutput(`> user/repo is already connected to your project.\\n`);\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(1);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail when it cannot find the repository","suites":["git","connect"],"updatePoint":{"line":223,"column":54,"index":8495},"line":223,"code":"    it('should fail when it cannot find the repository', async () => {\n      const cwd = fixture('invalid-repo');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'invalid-repo',\n          name: 'invalid-repo'\n        });\n        client.setArgv('git', 'connect', '--yes');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/laksfj/asdgklsadkl`);\n        await expect(client.stderr).toOutput(`Failed to connect laksfj/asdgklsadkl to project. Make sure there aren't any typos and that you have access to the repository if it's private.`);\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(1);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should connect the default option of multiple remotes","suites":["git","connect"],"updatePoint":{"line":246,"column":61,"index":9496},"line":246,"code":"    it('should connect the default option of multiple remotes', async () => {\n      const cwd = fixture('multiple-remotes');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'multiple-remotes',\n          name: 'multiple-remotes'\n        });\n        client.setArgv('git', 'connect');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput('Found multiple remote URLs.');\n        await expect(client.stderr).toOutput('Which remote do you want to connect?');\n        client.stdin.write('\\r');\n        await expect(client.stderr).toOutput('Connecting Git remote: https://github.com/user/repo.git');\n        await expect(client.stderr).toOutput('Connected GitHub repository user/repo!');\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(0);\n        const project = await client.fetch(`/v8/projects/multiple-remotes`);\n        expect(project.link).toMatchObject({\n          type: 'github',\n          repo: 'user/repo',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should disconnect a repository","suites":["git","disconnect"],"updatePoint":{"line":286,"column":38,"index":11082},"line":286,"code":"    it('should disconnect a repository', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        const project = useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        project.project.link = {\n          type: 'github',\n          repo: 'repo',\n          org: 'user',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        };\n        client.setArgv('git', 'disconnect');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Are you sure you want to disconnect user/repo from your project?`);\n        client.stdin.write('y\\n');\n        await expect(client.stderr).toOutput('Disconnected user/repo.');\n        const newProjectData = await client.fetch(`/v8/projects/new-connection`);\n        expect(newProjectData.link).toBeUndefined();\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(0);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail if there is no repository to disconnect","suites":["git","disconnect"],"updatePoint":{"line":322,"column":59,"index":12424},"line":322,"code":"    it('should fail if there is no repository to disconnect', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        client.setArgv('git', 'disconnect');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput('No Git repository connected. Run `vercel project connect` to connect one.');\n        const exitCode = await gitPromise;\n        expect(exitCode).toEqual(1);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should connect a given repository","suites":["git","disconnect"],"updatePoint":{"line":344,"column":41,"index":13227},"line":344,"code":"    it('should connect a given repository', async () => {\n      const cwd = fixture('no-remote-url');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'no-remote-url',\n          name: 'no-remote-url'\n        });\n        client.setArgv('git', 'connect', 'https://github.com/user2/repo2');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user2/repo2`);\n        await expect(client.stderr).toOutput(`Connected GitHub repository user2/repo2!`);\n        const newProjectData = await client.fetch(`/v8/projects/no-remote-url`);\n        expect(newProjectData.link).toMatchObject({\n          type: 'github',\n          repo: 'user2/repo2',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n        await expect(gitPromise).resolves.toEqual(0);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should prompt when it finds a repository","suites":["git","disconnect"],"updatePoint":{"line":376,"column":48,"index":14465},"line":376,"code":"    it('should prompt when it finds a repository', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        client.setArgv('git', 'connect', 'https://github.com/user2/repo2');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Found a repository in your local Git Config: https://github.com/user/repo`);\n        await expect(client.stderr).toOutput(`Do you still want to connect https://github.com/user2/repo2? [y/N]`);\n        client.stdin.write('y\\n');\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user2/repo2`);\n        await expect(client.stderr).toOutput(`Connected GitHub repository user2/repo2!`);\n        const newProjectData = await client.fetch(`/v8/projects/new-connection`);\n        expect(newProjectData.link).toMatchObject({\n          type: 'github',\n          repo: 'user2/repo2',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n        await expect(gitPromise).resolves.toEqual(0);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should prompt when it finds multiple remotes","suites":["git","disconnect"],"updatePoint":{"line":411,"column":52,"index":15985},"line":411,"code":"    it('should prompt when it finds multiple remotes', async () => {\n      const cwd = fixture('multiple-remotes');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'multiple-remotes',\n          name: 'multiple-remotes'\n        });\n        client.setArgv('git', 'connect', 'https://github.com/user3/repo3');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Found multiple Git repositories in your local Git config:\\n  • origin: https://github.com/user/repo.git\\n  • secondary: https://github.com/user/repo2.git`);\n        await expect(client.stderr).toOutput(`Do you still want to connect https://github.com/user3/repo3? [y/N]`);\n        client.stdin.write('y\\n');\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user3/repo3`);\n        await expect(client.stderr).toOutput(`Connected GitHub repository user3/repo3!`);\n        const newProjectData = await client.fetch(`/v8/projects/multiple-remotes`);\n        expect(newProjectData.link).toMatchObject({\n          type: 'github',\n          repo: 'user3/repo3',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n        await expect(gitPromise).resolves.toEqual(0);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should continue as normal when input matches single git remote","suites":["git","disconnect"],"updatePoint":{"line":446,"column":70,"index":17611},"line":446,"code":"    it('should continue as normal when input matches single git remote', async () => {\n      const cwd = fixture('new-connection');\n      try {\n        process.chdir(cwd);\n        await fs.rename(join(cwd, 'git'), join(cwd, '.git'));\n        useUser();\n        useTeams('team_dummy');\n        useProject({\n          ...defaultProject,\n          id: 'new-connection',\n          name: 'new-connection'\n        });\n        client.setArgv('git', 'connect', 'https://github.com/user/repo');\n        const gitPromise = git(client);\n        await expect(client.stderr).toOutput(`Connecting Git remote: https://github.com/user/repo`);\n        await expect(client.stderr).toOutput(`Connected GitHub repository user/repo!`);\n        const newProjectData = await client.fetch(`/v8/projects/new-connection`);\n        expect(newProjectData.link).toMatchObject({\n          type: 'github',\n          repo: 'user/repo',\n          repoId: 1010,\n          gitCredentialId: '',\n          sourceless: true,\n          createdAt: 1656109539791,\n          updatedAt: 1656109539791\n        });\n        await expect(gitPromise).resolves.toEqual(0);\n      } finally {\n        await fs.rename(join(cwd, '.git'), join(cwd, 'git'));\n        process.chdir(originalCwd);\n      }\n    });","file":"unit/commands/git.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print out deployment information","suites":["inspect"],"updatePoint":{"line":6,"column":45,"index":272},"line":6,"code":"  it('should print out deployment information', async () => {\n    const user = useUser();\n    const deployment = useDeployment({\n      creator: user\n    });\n    client.setArgv('inspect', deployment.url);\n    const exitCode = await inspect(client);\n    expect(exitCode).toEqual(0);\n    await expect(client.stderr).toOutput(`> Fetched deployment ${deployment.url} in ${user.username}`);\n  });","file":"unit/commands/inspect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should strip the scheme of a url","suites":["inspect"],"updatePoint":{"line":16,"column":38,"index":656},"line":16,"code":"  it('should strip the scheme of a url', async () => {\n    const user = useUser();\n    const deployment = useDeployment({\n      creator: user\n    });\n    client.setArgv('inspect', `http://${deployment.url}`);\n    const exitCode = await inspect(client);\n    expect(exitCode).toEqual(0);\n    await expect(client.stderr).toOutput(`> Fetched deployment ${deployment.url} in ${user.username}`);\n  });","file":"unit/commands/inspect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print error when deployment not found","suites":["inspect"],"updatePoint":{"line":26,"column":50,"index":1064},"line":26,"code":"  it('should print error when deployment not found', async () => {\n    const user = useUser();\n    useDeployment({\n      creator: user\n    });\n    client.setArgv('inspect', 'bad.com');\n    const exitCode = await inspect(client);\n    expect(exitCode).toEqual(1);\n    await expect(client.stderr).toOutput(`Error: Failed to find deployment \"bad.com\" in ${user.username}\\n`);\n  });","file":"unit/commands/inspect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should get deployments from a project linked by a directory","suites":["list"],"updatePoint":{"line":14,"column":65,"index":770},"line":14,"code":"  it('should get deployments from a project linked by a directory', async () => {\n    const cwd = fixture('with-team');\n    try {\n      process.chdir(cwd);\n      const user = useUser();\n      const team = useTeams('team_dummy');\n      teamSlug = team[0].slug;\n      useProject({\n        ...defaultProject,\n        id: 'with-team',\n        name: 'with-team'\n      });\n      const deployment = useDeployment({\n        creator: user\n      });\n      await list(client);\n      const output = await readOutputStream(client, 6);\n      const {\n        org\n      } = pluckIdentifiersFromDeploymentList(output.split('\\n')[2]);\n      const header = parseSpacedTableRow(output.split('\\n')[5]);\n      const data = parseSpacedTableRow(output.split('\\n')[6]);\n      data.shift();\n      expect(org).toEqual(team[0].slug);\n      expect(header).toEqual(['Age', 'Deployment', 'Status', 'Duration', 'Username']);\n      expect(data).toEqual([`https://${deployment.url}`, stateString(deployment.state || ''), getDeploymentDuration(deployment), user.username]);\n    } finally {\n      process.chdir(originalCwd);\n    }\n  });","file":"unit/commands/list.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should get deployments for linked project where the scope is a user","suites":["list"],"updatePoint":{"line":44,"column":73,"index":1879},"line":44,"code":"  it('should get deployments for linked project where the scope is a user', async () => {\n    const cwd = fixture('with-team');\n    try {\n      process.chdir(cwd);\n      const user = useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'with-team',\n        name: 'with-team'\n      });\n      const deployment = useDeployment({\n        creator: user\n      });\n      client.setArgv('-S', user.username);\n      await list(client);\n      const output = await readOutputStream(client, 6);\n      const {\n        org\n      } = pluckIdentifiersFromDeploymentList(output.split('\\n')[2]);\n      const header = parseSpacedTableRow(output.split('\\n')[5]);\n      const data = parseSpacedTableRow(output.split('\\n')[6]);\n      data.shift();\n      expect(org).toEqual(user.username);\n      expect(header).toEqual(['Age', 'Deployment', 'Status', 'Duration']);\n      expect(data).toEqual(['https://' + deployment.url, stateString(deployment.state || ''), getDeploymentDuration(deployment)]);\n    } finally {\n      process.chdir(originalCwd);\n    }\n  });","file":"unit/commands/list.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should get the deployments for a specified project","suites":["list"],"updatePoint":{"line":74,"column":56,"index":2944},"line":74,"code":"  it('should get the deployments for a specified project', async () => {\n    const cwd = fixture('with-team');\n    try {\n      process.chdir(cwd);\n      const user = useUser();\n      const team = useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'with-team',\n        name: 'with-team'\n      });\n      const deployment = useDeployment({\n        creator: user\n      });\n      client.setArgv(deployment.name);\n      await list(client);\n      const output = await readOutputStream(client, 6);\n      const {\n        org\n      } = pluckIdentifiersFromDeploymentList(output.split('\\n')[2]);\n      const header = parseSpacedTableRow(output.split('\\n')[5]);\n      const data = parseSpacedTableRow(output.split('\\n')[6]);\n      data.shift();\n      expect(org).toEqual(teamSlug || team[0].slug);\n      expect(header).toEqual(['Age', 'Deployment', 'Status', 'Duration', 'Username']);\n      expect(data).toEqual([`https://${deployment.url}`, stateString(deployment.state || ''), getDeploymentDuration(deployment), user.username]);\n    } finally {\n      process.chdir(originalCwd);\n    }\n  });","file":"unit/commands/list.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should not allow the `--token` flag","suites":["login"],"updatePoint":{"line":5,"column":41,"index":206},"line":5,"code":"  it('should not allow the `--token` flag', async () => {\n    client.setArgv('login', '--token', 'foo');\n    const exitCodePromise = login(client);\n    await expect(client.stderr).toOutput('Error: `--token` may not be used with the \"login\" command\\n');\n    await expect(exitCodePromise).resolves.toEqual(2);\n  });","file":"unit/commands/login.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should allow login via email as argument","suites":["login"],"updatePoint":{"line":11,"column":46,"index":525},"line":11,"code":"  it('should allow login via email as argument', async () => {\n    const user = useUser();\n    client.setArgv('login', user.email);\n    const exitCodePromise = login(client);\n    await expect(client.stderr).toOutput(`Success! Email authentication complete for ${user.email}`);\n    await expect(exitCodePromise).resolves.toEqual(0);\n  });","file":"unit/commands/login.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should allow login via email","suites":["login","interactive"],"updatePoint":{"line":19,"column":36,"index":887},"line":19,"code":"    it('should allow login via email', async () => {\n      const user = useUser();\n      client.setArgv('login');\n      const exitCodePromise = login(client);\n      await expect(client.stderr).toOutput(`> Log in to Vercel`);\n\n      // Move down to \"Email\" option\n      client.stdin.write('\\x1B[B'); // Down arrow\n      client.stdin.write('\\x1B[B'); // Down arrow\n      client.stdin.write('\\x1B[B'); // Down arrow\n      client.stdin.write('\\r'); // Return key\n\n      await expect(client.stderr).toOutput('> Enter your email address:');\n      client.stdin.write(`${user.email}\\n`);\n      await expect(client.stderr).toOutput(`Success! Email authentication complete for ${user.email}`);\n      await expect(exitCodePromise).resolves.toEqual(0);\n    });","file":"unit/commands/login.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should list projects","suites":["project","list"],"updatePoint":{"line":11,"column":28,"index":554},"line":11,"code":"    it('should list projects', async () => {\n      const user = useUser();\n      useTeams('team_dummy');\n      const project = useProject({\n        ...defaultProject\n      });\n      client.setArgv('project', 'ls');\n      await projects(client);\n      const output = await readOutputStream(client, 3);\n      const {\n        org\n      } = pluckIdentifiersFromDeploymentList(output.split('\\n')[1]);\n      const header = parseSpacedTableRow(output.split('\\n')[3]);\n      const data = parseSpacedTableRow(output.split('\\n')[4]);\n      data.pop();\n      expect(org).toEqual(user.username);\n      expect(header).toEqual(['Project Name', 'Latest Production URL', 'Updated']);\n      expect(data).toEqual([project.project.name, 'https://foobar.com']);\n    });","file":"unit/commands/project.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should list projects when there is no production deployment","suites":["project","list"],"updatePoint":{"line":30,"column":67,"index":1343},"line":30,"code":"    it('should list projects when there is no production deployment', async () => {\n      const user = useUser();\n      useTeams('team_dummy');\n      defaultProject.alias = [];\n      const project = useProject({\n        ...defaultProject\n      });\n      client.setArgv('project', 'ls');\n      await projects(client);\n      const output = await readOutputStream(client, 3);\n      const {\n        org\n      } = pluckIdentifiersFromDeploymentList(output.split('\\n')[1]);\n      const header = parseSpacedTableRow(output.split('\\n')[3]);\n      const data = parseSpacedTableRow(output.split('\\n')[4]);\n      data.pop();\n      expect(org).toEqual(user.username);\n      expect(header).toEqual(['Project Name', 'Latest Production URL', 'Updated']);\n      expect(data).toEqual([project.project.name, '--']);\n    });","file":"unit/commands/project.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should add a project","suites":["project","add"],"updatePoint":{"line":52,"column":28,"index":2142},"line":52,"code":"    it('should add a project', async () => {\n      const user = useUser();\n      useProject({\n        ...defaultProject,\n        id: 'test-project',\n        name: 'test-project'\n      });\n      client.setArgv('project', 'add', 'test-project');\n      await projects(client);\n      const project = await client.fetch(`/v8/projects/test-project`);\n      expect(project).toBeDefined();\n      expect(client.stderr).toOutput(`Success! Project test-project added (${user.username})`);\n    });","file":"unit/commands/project.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should remove a project","suites":["project","rm"],"updatePoint":{"line":67,"column":31,"index":2662},"line":67,"code":"    it('should remove a project', async () => {\n      useUser();\n      useProject({\n        ...defaultProject,\n        id: 'test-project',\n        name: 'test-project'\n      });\n      client.setArgv('project', 'rm', 'test-project');\n      const projectsPromise = projects(client);\n      await expect(client.stderr).toOutput(`The project test-project will be removed permanently.`);\n      client.stdin.write('y\\n');\n      const exitCode = await projectsPromise;\n      expect(exitCode).toEqual(0);\n    });","file":"unit/commands/project.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle pulling","suites":["pull"],"updatePoint":{"line":10,"column":27,"index":412},"line":10,"code":"  it('should handle pulling', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', cwd);\n    const exitCodePromise = pull(client);\n    await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project vercel-pull-next');\n    await expect(client.stderr).toOutput(`Created .vercel${path.sep}.env.development.local file`);\n    await expect(client.stderr).toOutput(`Downloaded project settings to .vercel${path.sep}project.json`);\n    await expect(exitCodePromise).resolves.toEqual(0);\n    const rawDevEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.development.local'));\n    const devFileHasDevEnv = rawDevEnv.toString().includes('SPECIAL_FLAG');\n    expect(devFileHasDevEnv).toBeTruthy();\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail with message to pull without a link and without --env","suites":["pull"],"updatePoint":{"line":29,"column":71,"index":1381},"line":29,"code":"  it('should fail with message to pull without a link and without --env', async () => {\n    client.stdin.isTTY = false;\n    const cwd = setupFixture('vercel-pull-unlinked');\n    useUser();\n    useTeams('team_dummy');\n    client.setArgv('pull', cwd);\n    const exitCodePromise = pull(client);\n    await expect(client.stderr).toOutput('Command `vercel pull` requires confirmation. Use option \"--yes\" to confirm.');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail without message to pull without a link and with --env","suites":["pull"],"updatePoint":{"line":39,"column":71,"index":1855},"line":39,"code":"  it('should fail without message to pull without a link and with --env', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams('team_dummy');\n    client.setArgv('pull', cwd, '--yes');\n    const exitCodePromise = pull(client);\n    await expect(client.stderr).not.toOutput('Command `vercel pull` requires confirmation. Use option \"--yes\" to confirm.');\n    await expect(exitCodePromise).resolves.toEqual(1);\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle pulling with env vars (headless mode)","suites":["pull"],"updatePoint":{"line":48,"column":57,"index":2292},"line":48,"code":"  it('should handle pulling with env vars (headless mode)', async () => {\n    try {\n      process.env.VERCEL_PROJECT_ID = 'vercel-pull-next';\n      process.env.VERCEL_ORG_ID = 'team_dummy';\n      const cwd = setupFixture('vercel-pull-next');\n\n      // Remove the `.vercel` dir to ensure that the `pull`\n      // command creates a new one based on env vars\n      await fs.remove(path.join(cwd, '.vercel'));\n      useUser();\n      useTeams('team_dummy');\n      useProject({\n        ...defaultProject,\n        id: 'vercel-pull-next',\n        name: 'vercel-pull-next'\n      });\n      client.setArgv('pull', cwd);\n      const exitCodePromise = pull(client);\n      await expect(client.stderr).toOutput('Downloading `development` Environment Variables for Project vercel-pull-next');\n      await expect(client.stderr).toOutput(`Created .vercel${path.sep}.env.development.local file`);\n      await expect(client.stderr).toOutput(`Downloaded project settings to .vercel${path.sep}project.json`);\n      await expect(exitCodePromise).resolves.toEqual(0);\n      const config = await fs.readJSON(path.join(cwd, '.vercel/project.json'));\n      expect(config).toMatchInlineSnapshot(`\n        Object {\n          \"orgId\": \"team_dummy\",\n          \"projectId\": \"vercel-pull-next\",\n          \"settings\": Object {\n            \"createdAt\": 1555413045188,\n          },\n        }\n      `);\n    } finally {\n      delete process.env.VERCEL_PROJECT_ID;\n      delete process.env.VERCEL_ORG_ID;\n    }\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle --environment=preview flag","suites":["pull"],"updatePoint":{"line":85,"column":46,"index":3759},"line":85,"code":"  it('should handle --environment=preview flag', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', '--environment=preview', cwd);\n    const exitCodePromise = pull(client);\n    await expect(client.stderr).toOutput('Downloading `preview` Environment Variables for Project vercel-pull-next');\n    await expect(client.stderr).toOutput(`Created .vercel${path.sep}.env.preview.local file`);\n    await expect(client.stderr).toOutput(`Downloaded project settings to .vercel${path.sep}project.json`);\n    await expect(exitCodePromise).resolves.toEqual(0);\n    const rawPreviewEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.preview.local'));\n    const previewFileHasPreviewEnv = rawPreviewEnv.toString().includes('REDIS_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv).toBeTruthy();\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle --environment=production flag","suites":["pull"],"updatePoint":{"line":104,"column":49,"index":4754},"line":104,"code":"  it('should handle --environment=production flag', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams('team_dummy');\n    useProject({\n      ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', '--environment=production', cwd);\n    const exitCodePromise = pull(client);\n    await expect(client.stderr).toOutput('Downloading `production` Environment Variables for Project vercel-pull-next');\n    await expect(client.stderr).toOutput(`Created .vercel${path.sep}.env.production.local file`);\n    await expect(client.stderr).toOutput(`Downloaded project settings to .vercel${path.sep}project.json`);\n    await expect(exitCodePromise).resolves.toEqual(0);\n    const rawProdEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.production.local'));\n    const previewFileHasPreviewEnv1 = rawProdEnv.toString().includes('REDIS_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv1).toBeTruthy();\n    const previewFileHasPreviewEnv2 = rawProdEnv.toString().includes('SQL_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv2).toBeTruthy();\n  });","file":"unit/commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject invalid arguments","suites":["whoami"],"updatePoint":{"line":5,"column":37,"index":205},"line":5,"code":"  it('should reject invalid arguments', async () => {\n    client.setArgv('--invalid');\n    await expect(whoami(client)).rejects.toThrow('unknown or unexpected option: --invalid');\n  });","file":"unit/commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print the Vercel username","suites":["whoami"],"updatePoint":{"line":9,"column":38,"index":392},"line":9,"code":"  it('should print the Vercel username', async () => {\n    const user = useUser();\n    const exitCode = await whoami(client);\n    expect(exitCode).toEqual(0);\n    await expect(client.stderr).toOutput(`> ${user.username}\\n`);\n  });","file":"unit/commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print only the Vercel username when output is not a TTY","suites":["whoami"],"updatePoint":{"line":15,"column":68,"index":653},"line":15,"code":"  it('should print only the Vercel username when output is not a TTY', async () => {\n    const user = useUser();\n    client.stdout.isTTY = false;\n    const exitCode = await whoami(client);\n    expect(exitCode).toEqual(0);\n    await expect(client.stdout).toOutput(`${user.username}\\n`);\n  });","file":"unit/commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should add https to url without scheme","suites":["normalize-url"],"updatePoint":{"line":3,"column":44,"index":153},"line":3,"code":"  it('should add https to url without scheme', () => {\n    const normalizedUrl = normalizeURL('vercel.com');\n    expect(normalizedUrl).toEqual('https://vercel.com');\n  });","file":"unit/util/bisect/normalize-url.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should not add anything to a url that starts with https","suites":["normalize-url"],"updatePoint":{"line":7,"column":61,"index":342},"line":7,"code":"  it('should not add anything to a url that starts with https', () => {\n    const normalizedUrl = normalizeURL('https://vercel.com');\n    expect(normalizedUrl).toEqual('https://vercel.com');\n  });","file":"unit/util/bisect/normalize-url.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should not add anything to a url that starts with http","suites":["normalize-url"],"updatePoint":{"line":11,"column":60,"index":538},"line":11,"code":"  it('should not add anything to a url that starts with http', () => {\n    const normalizedUrl = normalizeURL('http://vercel.com');\n    expect(normalizedUrl).toEqual('http://vercel.com');\n  });","file":"unit/util/bisect/normalize-url.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"$name","suites":["sortBuilders()"],"line":3,"code":"  test.each([{\n    name: 'should sort @vercel/next from middle to beginning',\n    input: ['@vercel/node', '@vercel/next', '@vercel/python'],\n    output: ['@vercel/next', '@vercel/node', '@vercel/python']\n  }, {\n    name: 'should sort @vercel/static-build from middle to beginning',\n    input: ['@vercel/node', '@vercel/static-build', '@vercel/python'],\n    output: ['@vercel/static-build', '@vercel/node', '@vercel/python']\n  }, {\n    name: 'should sort @vercel/remix from end to beginning',\n    input: ['@vercel/python', '@vercel/node', '@vercel/remix'],\n    output: ['@vercel/remix', '@vercel/python', '@vercel/node']\n  }, {\n    name: 'should sort @vercel/redwood from beginning to beginning',\n    input: ['@vercel/redwood', '@vercel/python', '@vercel/ruby'],\n    output: ['@vercel/redwood', '@vercel/python', '@vercel/ruby']\n  }, {\n    name: 'should sort @vercel/hydrogen from end to beginning',\n    input: ['@vercel/python', '@vercel/hydrogen'],\n    output: ['@vercel/hydrogen', '@vercel/python']\n  }, {\n    name: 'should sort @vercel/static-build to beginning with many @vercel/node',\n    input: ['@vercel/node', '@vercel/node', '@vercel/node', '@vercel/static-build', '@vercel/node'],\n    output: ['@vercel/static-build', '@vercel/node', '@vercel/node', '@vercel/node', '@vercel/node']\n  }])('$name', ({\n    input,\n    output\n  }) => {\n    const builders = sortBuilders(input.map(use => ({\n      use\n    })));\n    expect(builders.map(b => b.use)).toEqual(output);\n  });","file":"unit/util/build/sort-builders.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with multiple prompts","suites":["confirm()"],"updatePoint":{"line":4,"column":39,"index":170},"line":4,"code":"  it('should work with multiple prompts', async () => {\n    // true (explicit)\n    let confirmedPromise = confirm(client, 'Explictly true?', false);\n    await expect(client.stderr).toOutput('Explictly true? [y/N]');\n    client.stdin.write('yes\\n');\n    let confirmed = await confirmedPromise;\n    expect(confirmed).toEqual(true);\n\n    // false (explicit)\n    confirmedPromise = confirm(client, 'Explcitly false?', true);\n    await expect(client.stderr).toOutput('Explcitly false? [Y/n]');\n    client.stdin.write('no\\n');\n    confirmed = await confirmedPromise;\n    expect(confirmed).toEqual(false);\n\n    // true (default)\n    confirmedPromise = confirm(client, 'Default true?', true);\n    await expect(client.stderr).toOutput('Default true? [Y/n]');\n    client.stdin.write('\\n');\n    confirmed = await confirmedPromise;\n    expect(confirmed).toEqual(true);\n\n    // false (default)\n    confirmedPromise = confirm(client, 'Default false?', false);\n    await expect(client.stderr).toOutput('Default false? [y/N]');\n    client.stdin.write('\\n');\n    confirmed = await confirmedPromise;\n    expect(confirmed).toEqual(false);\n  });","file":"unit/util/confirm.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"do nothing if x-middleware-override-headers is not set","suites":["applyOverriddenHeaders"],"updatePoint":{"line":4,"column":60,"index":217},"line":4,"code":"  it('do nothing if x-middleware-override-headers is not set', async () => {\n    const reqHeaders = {\n      a: '1'\n    };\n    const respHeaders = new Headers();\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      a: '1'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"adds a new header","suites":["applyOverriddenHeaders"],"updatePoint":{"line":14,"column":23,"index":460},"line":14,"code":"  it('adds a new header', async () => {\n    const reqHeaders = {\n      a: '1'\n    };\n    const respHeaders = new Headers({\n      // Define a new header 'b' and keep the existing header 'a'\n      'x-middleware-override-headers': 'a,b',\n      'x-middleware-request-a': '1',\n      'x-middleware-request-b': '2'\n    });\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      a: '1',\n      b: '2'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"delete the header if x-middleware-request-* is undefined","suites":["applyOverriddenHeaders"],"updatePoint":{"line":30,"column":62,"index":948},"line":30,"code":"  it('delete the header if x-middleware-request-* is undefined', async () => {\n    const reqHeaders = {\n      a: '1',\n      b: '2'\n    };\n    const respHeaders = new Headers({\n      // Deletes a new header 'c' and keep the existing headers `a` and `b`\n      'x-middleware-override-headers': 'a,b,c',\n      'x-middleware-request-a': '1',\n      'x-middleware-request-b': '2'\n    });\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      a: '1',\n      b: '2'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"updates an existing header","suites":["applyOverriddenHeaders"],"updatePoint":{"line":47,"column":32,"index":1432},"line":47,"code":"  it('updates an existing header', async () => {\n    const reqHeaders = {\n      a: '1',\n      b: '2'\n    };\n    const respHeaders = new Headers({\n      // Modifies the header 'b' and keep the existing header 'a'\n      'x-middleware-override-headers': 'a,b',\n      'x-middleware-request-a': '1',\n      'x-middleware-request-b': 'modified'\n    });\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      a: '1',\n      b: 'modified'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"ignores headers listed in NONOVERRIDABLE_HEADERS","suites":["applyOverriddenHeaders"],"updatePoint":{"line":64,"column":54,"index":1940},"line":64,"code":"  it('ignores headers listed in NONOVERRIDABLE_HEADERS', async () => {\n    const reqHeaders = {\n      a: '1',\n      host: 'example.com'\n    };\n    const respHeaders = new Headers({\n      // Define a new header 'b' and 'content-length'\n      'x-middleware-override-headers': 'a,b,content-length',\n      'x-middleware-request-a': '1',\n      'x-middleware-request-b': '2',\n      'x-middleware-request-content-length': '128'\n    });\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      a: '1',\n      b: '2',\n      host: 'example.com'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"deletes an existing header","suites":["applyOverriddenHeaders"],"updatePoint":{"line":83,"column":32,"index":2507},"line":83,"code":"  it('deletes an existing header', async () => {\n    const reqHeaders = {\n      a: '1',\n      b: '2'\n    };\n    const respHeaders = new Headers({\n      // Deletes the header 'a' and keep the existing header 'b'\n      'x-middleware-override-headers': 'b',\n      'x-middleware-request-b': '2'\n    });\n    applyOverriddenHeaders(reqHeaders, respHeaders);\n    expect(reqHeaders).toStrictEqual({\n      b: '2'\n    });\n  });","file":"unit/util/dev/headers.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"0\" as port 0","suites":["parseListen"],"updatePoint":{"line":4,"column":32,"index":201},"line":4,"code":"  it('should parse \"0\" as port 0', () => {\n    const result = parseListen('0');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual(0);\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"3000\" as port 3000","suites":["parseListen"],"updatePoint":{"line":9,"column":38,"index":363},"line":9,"code":"  it('should parse \"3000\" as port 3000', () => {\n    const result = parseListen('3000');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual(3000);\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"0.0.0.0\" as IP address","suites":["parseListen"],"updatePoint":{"line":14,"column":42,"index":535},"line":14,"code":"  it('should parse \"0.0.0.0\" as IP address', () => {\n    const result = parseListen('0.0.0.0');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(3000);\n    expect(result[1]).toEqual('0.0.0.0');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"127.0.0.1:4000\" as IP address and port","suites":["parseListen"],"updatePoint":{"line":20,"column":58,"index":768},"line":20,"code":"  it('should parse \"127.0.0.1:4000\" as IP address and port', () => {\n    const result = parseListen('127.0.0.1:4000');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(4000);\n    expect(result[1]).toEqual('127.0.0.1');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"tcp://127.0.0.1:5000\" as IP address and port","suites":["parseListen"],"updatePoint":{"line":26,"column":64,"index":1016},"line":26,"code":"  it('should parse \"tcp://127.0.0.1:5000\" as IP address and port', () => {\n    const result = parseListen('tcp://127.0.0.1:5000');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(5000);\n    expect(result[1]).toEqual('127.0.0.1');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"unix:/home/user/server.sock\" as UNIX socket file","suites":["parseListen"],"updatePoint":{"line":32,"column":68,"index":1274},"line":32,"code":"  it('should parse \"unix:/home/user/server.sock\" as UNIX socket file', () => {\n    if (IS_WINDOWS) {\n      console.log('Skipping this test on Windows.');\n      return;\n    }\n    const result = parseListen('unix:/home/user/server.sock');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual('/home/user/server.sock');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"pipe:\\\\.\\pipe\\PipeName\" as UNIX pipe","suites":["parseListen"],"updatePoint":{"line":41,"column":60,"index":1602},"line":41,"code":"  it('should parse \"pipe:\\\\\\\\.\\\\pipe\\\\PipeName\" as UNIX pipe', () => {\n    if (IS_WINDOWS) {\n      console.log('Skipping this test on Windows.');\n      return;\n    }\n    const result = parseListen('pipe:\\\\\\\\.\\\\pipe\\\\PipeName');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual('\\\\\\\\.\\\\pipe\\\\PipeName');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail to parse \"bad://url\"","suites":["parseListen"],"updatePoint":{"line":50,"column":38,"index":1906},"line":50,"code":"  it('should fail to parse \"bad://url\"', () => {\n    let err;\n    try {\n      parseListen('bad://url');\n      throw new Error('Should not happen');\n    } catch (_err) {\n      err = _err;\n    }\n    expect(err.message).toEqual('Unknown `--listen` scheme (protocol): bad:');\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"\"$input\" → \"$output\"","suites":["replaceLocalhost"],"line":62,"code":"  test.each([{\n    input: 'http://192.168.0.1:1234',\n    output: 'http://192.168.0.1:1234'\n  }, {\n    input: 'http://127.0.0.1:4000',\n    output: 'http://127.0.0.1:4000'\n  }, {\n    input: 'http://[::1]:3001',\n    output: 'http://[::1]:3001'\n  }, {\n    input: 'http://0.0.0.0:3000',\n    output: 'http://localhost:3000'\n  }, {\n    input: 'http://[::]:3002',\n    output: 'http://localhost:3002'\n  }])('\"$input\" → \"$output\"', ({\n    input,\n    output\n  }) => {\n    expect(replaceLocalhost(input)).toEqual(output);\n  });","file":"unit/util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse to Map and format back to original String","suites":["parseQueryString"],"updatePoint":{"line":3,"column":60,"index":197},"line":3,"code":"  it('should parse to Map and format back to original String', async () => {\n    const querystring = '?a&a=&a&b=1&c=2&c=3&d=&d&d=&space%20bar=4&html=%3Ch1%3E';\n    const parsed = parseQueryString(querystring);\n    expect(parsed).toEqual({\n      a: [undefined, '', undefined],\n      b: ['1'],\n      c: ['2', '3'],\n      d: ['', undefined, ''],\n      'space bar': ['4'],\n      html: ['<h1>']\n    });\n    const format = formatQueryString(parsed);\n    expect(format).toEqual(querystring);\n  });","file":"unit/util/dev/parse-query-string.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with empty string","suites":["parseQueryString"],"updatePoint":{"line":17,"column":35,"index":663},"line":17,"code":"  it('should work with empty string', async () => {\n    const parsed = parseQueryString('');\n    expect(parsed).toEqual({});\n    const format = formatQueryString(parsed);\n    expect(format).toEqual(undefined);\n  });","file":"unit/util/dev/parse-query-string.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with question mark","suites":["parseQueryString"],"updatePoint":{"line":23,"column":36,"index":880},"line":23,"code":"  it('should work with question mark', async () => {\n    const parsed = parseQueryString('?');\n    expect(parsed).toEqual({});\n    const format = formatQueryString(parsed);\n    expect(format).toEqual(undefined);\n  });","file":"unit/util/dev/parse-query-string.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work without question mark","suites":["parseQueryString"],"updatePoint":{"line":29,"column":39,"index":1101},"line":29,"code":"  it('should work without question mark', async () => {\n    const parsed = parseQueryString('blarg');\n    expect(parsed).toEqual({});\n    const format = formatQueryString(parsed);\n    expect(format).toEqual(undefined);\n  });","file":"unit/util/dev/parse-query-string.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with undefined","suites":["parseQueryString"],"updatePoint":{"line":35,"column":32,"index":1319},"line":35,"code":"  it('should work with undefined', async () => {\n    const parsed = parseQueryString(undefined);\n    expect(parsed).toEqual({});\n    const format = formatQueryString(parsed);\n    expect(format).toEqual(undefined);\n  });","file":"unit/util/dev/parse-query-string.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle 301 redirection","suites":["devRouter"],"updatePoint":{"line":3,"column":35,"index":127},"line":3,"code":"  it('should handle 301 redirection', async () => {\n    const routesConfig = [{\n      src: '/redirect',\n      status: 301,\n      headers: {\n        Location: 'https://vercel.com'\n      }\n    }];\n    const result = await devRouter('/redirect', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/redirect',\n      continue: false,\n      status: 301,\n      headers: {\n        location: 'https://vercel.com'\n      },\n      query: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: false,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match captured groups","suites":["devRouter"],"updatePoint":{"line":28,"column":34,"index":744},"line":28,"code":"  it('should match captured groups', async () => {\n    const routesConfig = [{\n      src: '/api/(.*)',\n      dest: '/endpoints/$1.js'\n    }];\n    const result = await devRouter('/api/user', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/endpoints/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match named groups","suites":["devRouter"],"updatePoint":{"line":48,"column":31,"index":1274},"line":48,"code":"  it('should match named groups', async () => {\n    const routesConfig = [{\n      src: '/user/(?<id>.+)',\n      dest: '/user.js?id=$id'\n    }];\n    const result = await devRouter('/user/123', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {\n        id: ['123']\n      },\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match optional named groups","suites":["devRouter"],"updatePoint":{"line":70,"column":40,"index":1835},"line":70,"code":"  it('should match optional named groups', async () => {\n    const routesConfig = [{\n      src: '/api/hello(/(?<name>[^/]+))?',\n      dest: '/api/functions/hello/index.js?name=$name'\n    }];\n    const result = await devRouter('/api/hello', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/api/functions/hello/index.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {\n        name: ['']\n      },\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match proxy_pass","suites":["devRouter"],"updatePoint":{"line":92,"column":29,"index":2444},"line":92,"code":"  it('should match proxy_pass', async () => {\n    const routesConfig = [{\n      src: '/proxy',\n      dest: 'https://vercel.com'\n    }];\n    const result = await devRouter('/proxy', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: 'https://vercel.com',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: false,\n      isDestUrl: true,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `methods`","suites":["devRouter"],"updatePoint":{"line":112,"column":28,"index":2967},"line":112,"code":"  it('should match `methods`', async () => {\n    const routesConfig = [{\n      src: '/.*',\n      methods: ['POST'],\n      dest: '/post'\n    }, {\n      src: '/.*',\n      methods: ['GET'],\n      dest: '/get'\n    }];\n    let result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/get',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[1],\n      matched_route_idx: 1,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n    result = await devRouter('/', 'POST', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/post',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match without prefix slash","suites":["devRouter"],"updatePoint":{"line":151,"column":39,"index":3918},"line":151,"code":"  it('should match without prefix slash', async () => {\n    const routesConfig = [{\n      src: 'api/(.*)',\n      dest: 'endpoints/$1.js'\n    }];\n    const result = await devRouter('/api/user', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/endpoints/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with needed prefixed slash","suites":["devRouter"],"updatePoint":{"line":171,"column":45,"index":4460},"line":171,"code":"  it('should match with needed prefixed slash', async () => {\n    const routesConfig = [{\n      src: '^\\\\/([^\\\\/]+?)\\\\/comments(?:\\\\/)?$',\n      dest: '/some/dest'\n    }];\n    const result = await devRouter('/post-1/comments', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/some/dest',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: {\n        src: '^\\\\/([^\\\\/]+?)\\\\/comments(?:\\\\/)?$',\n        dest: '/some/dest'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with fallthrough","suites":["devRouter"],"updatePoint":{"line":194,"column":52,"index":5101},"line":194,"code":"  it('should match `continue: true` with fallthrough', async () => {\n    const routesConfig = [{\n      src: '/_next/static/(?:[^/]+/pages|chunks|runtime)/.+',\n      continue: true,\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    }];\n    const result = await devRouter('/_next/static/chunks/0.js', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: false,\n      dest: '/_next/static/chunks/0.js',\n      continue: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      query: {},\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with match","suites":["devRouter"],"updatePoint":{"line":216,"column":46,"index":5750},"line":216,"code":"  it('should match `continue: true` with match', async () => {\n    const routesConfig = [{\n      src: '/_next/static/(?:[^/]+/pages|chunks|runtime)/.+',\n      continue: true,\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    }, {\n      src: '/(.*)',\n      dest: '/hi'\n    }];\n    const result = await devRouter('/_next/static/chunks/0.js', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/hi',\n      continue: false,\n      status: undefined,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      query: {},\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      },\n      matched_route: {\n        src: '/(.*)',\n        dest: '/hi'\n      },\n      matched_route_idx: 1\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with catch-all with prefix slash","suites":["devRouter"],"updatePoint":{"line":247,"column":51,"index":6553},"line":247,"code":"  it('should match with catch-all with prefix slash', async () => {\n    const routesConfig = [{\n      src: '/(.*)',\n      dest: '/www/$1'\n    }];\n    const result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/www/',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: {\n        src: '/(.*)',\n        dest: '/www/$1'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with catch-all with no prefix slash","suites":["devRouter"],"updatePoint":{"line":270,"column":54,"index":7112},"line":270,"code":"  it('should match with catch-all with no prefix slash', async () => {\n    const routesConfig = [{\n      src: '(.*)',\n      dest: '/www$1'\n    }];\n    const result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/www/',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: {\n        src: '(.*)',\n        dest: '/www$1'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with `dest`","suites":["devRouter"],"updatePoint":{"line":293,"column":47,"index":7660},"line":293,"code":"  it('should match `continue: true` with `dest`', async () => {\n    const routesConfig = [{\n      src: '/(.*)',\n      dest: '/www/$1',\n      continue: true\n    }, {\n      src: '^/www/(a\\\\/([^\\\\/]+?)(?:\\\\/)?)$',\n      dest: 'http://localhost:5000/$1'\n    }];\n    const result = await devRouter('/a/foo', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: 'http://localhost:5000/a/foo',\n      continue: false,\n      status: undefined,\n      headers: {},\n      query: {},\n      matched_route: routesConfig[1],\n      matched_route_idx: 1,\n      userDest: false,\n      isDestUrl: true,\n      phase: undefined\n    });\n  });","file":"unit/util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error with fallback message","suites":["responseError()"],"updatePoint":{"line":23,"column":59,"index":857},"line":23,"code":"  it('should parse 4xx response error with fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 404, {});\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to load data');\n    expect(formatted.message).toEqual('Failed to load data (404)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error without fallback message","suites":["responseError()"],"updatePoint":{"line":31,"column":62,"index":1179},"line":31,"code":"  it('should parse 4xx response error without fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 404, {});\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('Response Error (404)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error without fallback message","suites":["responseError()"],"updatePoint":{"line":39,"column":62,"index":1473},"line":39,"code":"  it('should parse 5xx response error without fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 500, '');\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('Response Error (500)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error as correct JSON","suites":["responseError()"],"updatePoint":{"line":47,"column":53,"index":1758},"line":47,"code":"  it('should parse 4xx response error as correct JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 400, {\n        error: {\n          message: 'The request is not correct'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('The request is not correct (400)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error as HTML","suites":["responseError()"],"updatePoint":{"line":59,"column":45,"index":2129},"line":59,"code":"  it('should parse 5xx response error as HTML', async () => {\n    handler = (_req, res) => {\n      send(res, 500, 'This is a malformed error');\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to process data');\n    expect(formatted.message).toEqual('Failed to process data (500)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error with random JSON","suites":["responseError()"],"updatePoint":{"line":67,"column":54,"index":2474},"line":67,"code":"  it('should parse 5xx response error with random JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 500, {\n        wrong: 'property'\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to process data');\n    expect(formatted.message).toEqual('Failed to process data (500)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx error message with broken JSON","suites":["responseError()"],"updatePoint":{"line":77,"column":53,"index":2826},"line":77,"code":"  it('should parse 4xx error message with broken JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 403, `32puuuh2332`);\n    };\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res, 'Not authenticated');\n    expect(formatted).toEqual('Not authenticated (403)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx error message with proper message","suites":["responseError()"],"updatePoint":{"line":85,"column":56,"index":3148},"line":85,"code":"  it('should parse 4xx error message with proper message', async () => {\n    handler = (_req, res) => {\n      send(res, 403, {\n        error: {\n          message: 'This is a test'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res);\n    expect(formatted).toEqual('This is a test (403)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx error message with proper message","suites":["responseError()"],"updatePoint":{"line":97,"column":56,"index":3505},"line":97,"code":"  it('should parse 5xx error message with proper message', async () => {\n    handler = (_req, res) => {\n      send(res, 500, {\n        error: {\n          message: 'This is a test'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res);\n    expect(formatted).toEqual('Response Error (500)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error with broken JSON","suites":["responseError()"],"updatePoint":{"line":109,"column":54,"index":3860},"line":109,"code":"  it('should parse 4xx response error with broken JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 403, `122{\"sss\"`);\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Not authenticated');\n    expect(formatted.message).toEqual('Not authenticated (403)');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error as correct JSON with more properties","suites":["responseError()"],"updatePoint":{"line":117,"column":74,"index":4199},"line":117,"code":"  it('should parse 4xx response error as correct JSON with more properties', async () => {\n    handler = (_req, res) => {\n      send(res, 403, {\n        error: {\n          message: 'The request is not correct',\n          additionalProperty: 'test'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('The request is not correct (403)');\n    expect(formatted.additionalProperty).toEqual('test');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 429 response error with retry header","suites":["responseError()"],"updatePoint":{"line":131,"column":55,"index":4676},"line":131,"code":"  it('should parse 429 response error with retry header', async () => {\n    handler = (_req, res) => {\n      res.setHeader('Retry-After', '20');\n      send(res, 429, {\n        error: {\n          message: 'You were rate limited'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('You were rate limited (429)');\n    expect(formatted.retryAfter).toEqual(20);\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 429 response error without retry header","suites":["responseError()"],"updatePoint":{"line":145,"column":58,"index":5138},"line":145,"code":"  it('should parse 429 response error without retry header', async () => {\n    handler = (_req, res) => {\n      send(res, 429, {\n        error: {\n          message: 'You were rate limited'\n        }\n      });\n    };\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('You were rate limited (429)');\n    expect(formatted.retryAfter).toEqual(undefined);\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should JSON stringify Error","suites":["toEnumerableError()"],"updatePoint":{"line":160,"column":33,"index":5584},"line":160,"code":"  it('should JSON stringify Error', () => {\n    const err = new Error('An error');\n    const enumerable = toEnumerableError(err);\n    expect(JSON.stringify(err)).toEqual('{}');\n\n    // Delete `stack` since it makes stringify nondeterministic\n    // (due to filenames / line numbers)\n    expect(typeof enumerable.stack).toEqual('string');\n    delete enumerable.stack;\n    expect(JSON.stringify(enumerable)).toEqual('{\"name\":\"Error\",\"message\":\"An error\"}');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should JSON stringify Error with custom properties","suites":["toEnumerableError()"],"updatePoint":{"line":171,"column":56,"index":6069},"line":171,"code":"  it('should JSON stringify Error with custom properties', () => {\n    const err = new Error('An error');\n    Object.defineProperty(err, 'custom', {\n      enumerable: false,\n      value: 'value'\n    });\n    Object.defineProperty(err, 'userError', {\n      enumerable: false,\n      value: true\n    });\n    const enumerable = toEnumerableError(err);\n    expect(JSON.stringify(err)).toEqual('{}');\n\n    // Delete `stack` since it makes stringify undeterministinc\n    // (due to filenames / line numbers)\n    expect(typeof enumerable.stack).toEqual('string');\n    delete enumerable.stack;\n    expect(JSON.stringify(enumerable)).toEqual('{\"name\":\"Error\",\"message\":\"An error\",\"custom\":\"value\",\"userError\":true}');\n  });","file":"unit/util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should discover files for builds deployment","suites":["staticFiles"],"updatePoint":{"line":28,"column":49,"index":1121},"line":28,"code":"  it('should discover files for builds deployment', async () => {\n    const path = 'now-json-static-no-files';\n    let files = await getStaticFiles(fixture(path));\n    files = files.sort(alpha);\n    expect(files).toHaveLength(4);\n    expect(base(files[0])).toEqual(`${path}/a.js`);\n    expect(base(files[1])).toEqual(`${path}/b.js`);\n    expect(base(files[2])).toEqual(`${path}/build/a/c.js`);\n    expect(base(files[3])).toEqual(`${path}/package.json`);\n  });","file":"unit/util/get-files.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should respect `.vercelignore` file rules","suites":["staticFiles"],"updatePoint":{"line":38,"column":47,"index":1579},"line":38,"code":"  it('should respect `.vercelignore` file rules', async () => {\n    const path = 'vercelignore';\n    let files = await getStaticFiles(fixture(path));\n    files = files.sort(alpha);\n    expect(files).toHaveLength(6);\n    expect(base(files[0])).toEqual(`${path}/.vercelignore`);\n    expect(base(files[1])).toEqual(`${path}/a.js`);\n    expect(base(files[2])).toEqual(`${path}/build/sub/a.js`);\n    expect(base(files[3])).toEqual(`${path}/build/sub/c.js`);\n    expect(base(files[4])).toEqual(`${path}/c.js`);\n    expect(base(files[5])).toEqual(`${path}/package.json`);\n  });","file":"unit/util/get-files.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with argv","suites":["getProjectName"],"updatePoint":{"line":3,"column":27,"index":128},"line":3,"code":"  it('should work with argv', () => {\n    const project = getProjectName({\n      argv: {\n        '--name': 'abc'\n      }\n    });\n    expect(project).toEqual('abc');\n  });","file":"unit/util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with `vercel.json` config","suites":["getProjectName"],"updatePoint":{"line":11,"column":43,"index":315},"line":11,"code":"  it('should work with `vercel.json` config', () => {\n    const project = getProjectName({\n      argv: {},\n      nowConfig: {\n        name: 'abc'\n      }\n    });\n    expect(project).toEqual('abc');\n  });","file":"unit/util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with a directory","suites":["getProjectName"],"updatePoint":{"line":20,"column":34,"index":510},"line":20,"code":"  it('should work with a directory', () => {\n    const project = getProjectName({\n      argv: {},\n      nowConfig: {},\n      paths: ['/tmp/aa']\n    });\n    expect(project).toEqual('aa');\n  });","file":"unit/util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should detect update command","suites":["getUpdateCommand"],"updatePoint":{"line":4,"column":34,"index":197},"line":4,"code":"  it('should detect update command', async () => {\n    const updateCommand = await getUpdateCommand();\n    expect(updateCommand).toEqual(`npm i vercel@${isCanary() ? 'canary' : 'latest'}`);\n  });","file":"unit/util/get-update-command.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"mdx-deck\"","suites":["didYouMean"],"updatePoint":{"line":4,"column":29,"index":594},"line":4,"code":"  it('should guess \"mdx-deck\"', () => {\n    expect(didYouMean('md', examples, 0.7)).toEqual('mdx-deck');\n  });","file":"unit/util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"nodejs-koa\"","suites":["didYouMean"],"updatePoint":{"line":7,"column":31,"index":707},"line":7,"code":"  it('should guess \"nodejs-koa\"', () => {\n    expect(didYouMean('koa', examples, 0.7)).toEqual('nodejs-koa');\n  });","file":"unit/util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"nodejs\"","suites":["didYouMean"],"updatePoint":{"line":10,"column":27,"index":819},"line":10,"code":"  it('should guess \"nodejs\"', () => {\n    expect(didYouMean('node', examples, 0.7)).toEqual('nodejs');\n  });","file":"unit/util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail to guess with bad input","suites":["didYouMean"],"updatePoint":{"line":13,"column":41,"index":942},"line":13,"code":"  it('should fail to guess with bad input', () => {\n    expect(didYouMean('12345', examples, 0.7)).toBeUndefined();\n  });","file":"unit/util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should detect \"\" as \\`\\`","suites":["isValidName"],"updatePoint":{"line":15,"column":51,"index":367},"line":15,"code":"    it(`should detect \"${value}\" as \\`${expected}\\``, () => {\n      expect(isValidName(value)).toEqual(expected);\n    });","file":"unit/util/is-valid-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"$current / $total -> \"$expected\"","suites":["progress()"],"line":3,"code":"  test.each([{\n    current: 0,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '-----'\n  }, {\n    current: 1,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '=----'\n  }, {\n    current: 2,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '==---'\n  }, {\n    current: 3,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '===--'\n  }, {\n    current: 4,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '====-'\n  }, {\n    current: 5,\n    total: 5,\n    opts: {\n      width: 5\n    },\n    expected: '====='\n  }, {\n    current: 0,\n    total: 12,\n    expected: '--------------------'\n  }, {\n    current: 1,\n    total: 12,\n    expected: '=-------------------'\n  }, {\n    current: 2,\n    total: 12,\n    expected: '===-----------------'\n  }, {\n    current: 600,\n    total: 1200,\n    expected: '==========----------'\n  }, {\n    current: 9,\n    total: 10,\n    opts: {\n      complete: '.',\n      incomplete: ' ',\n      width: 10\n    },\n    expected: '......... '\n  }, {\n    current: 10,\n    total: 10,\n    expected: '===================='\n  }, {\n    current: 11,\n    total: 10,\n    expected: null\n  }, {\n    current: -1,\n    total: 10,\n    expected: null\n  }, {\n    current: 1,\n    total: 0,\n    expected: null\n  }])('$current / $total -> \"$expected\"', ({\n    current,\n    total,\n    opts,\n    expected\n  }) => {\n    expect(progress(current, total, opts)).toEqual(expected);\n  });","file":"unit/util/output/progress.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should return \".vercel\"","suites":["getVercelDirectory"],"updatePoint":{"line":5,"column":29,"index":254},"line":5,"code":"  it('should return \".vercel\"', () => {\n    const cwd = fixture('get-vercel-directory');\n    const dir = getVercelDirectory(cwd);\n    expect(basename(dir)).toEqual('.vercel');\n  });","file":"unit/util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should return \".now\"","suites":["getVercelDirectory"],"updatePoint":{"line":10,"column":26,"index":433},"line":10,"code":"  it('should return \".now\"', () => {\n    const cwd = fixture('get-vercel-directory-legacy');\n    const dir = getVercelDirectory(cwd);\n    expect(basename(dir)).toEqual('.now');\n  });","file":"unit/util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should throw an error if both \".vercel\" and \".now\" exist","suites":["getVercelDirectory"],"updatePoint":{"line":15,"column":62,"index":652},"line":15,"code":"  it('should throw an error if both \".vercel\" and \".now\" exist', () => {\n    let err;\n    const cwd = fixture('get-vercel-directory-error');\n    try {\n      getVercelDirectory(cwd);\n      throw new Error('Should not happen');\n    } catch (_err) {\n      err = _err;\n    }\n    expect(err.message).toEqual('Both `.vercel` and `.now` directories exist. Please remove the `.now` directory.');\n  });","file":"unit/util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse simple to host","suites":["toHost"],"updatePoint":{"line":3,"column":33,"index":109},"line":3,"code":"  it('should parse simple to host', () => {\n    expect(toHost('vercel.com')).toEqual('vercel.com');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading // to host","suites":["toHost"],"updatePoint":{"line":6,"column":37,"index":219},"line":6,"code":"  it('should parse leading // to host', () => {\n    expect(toHost('//zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading http:// to host","suites":["toHost"],"updatePoint":{"line":9,"column":42,"index":372},"line":9,"code":"  it('should parse leading http:// to host', () => {\n    expect(toHost('http://zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading https:// to host","suites":["toHost"],"updatePoint":{"line":12,"column":43,"index":531},"line":12,"code":"  it('should parse leading https:// to host', () => {\n    expect(toHost('https://zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading https:// and path to host","suites":["toHost"],"updatePoint":{"line":15,"column":52,"index":700},"line":15,"code":"  it('should parse leading https:// and path to host', () => {\n    expect(toHost('https://zeit-logos-rnemgaicnc.now.sh/path')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse simple and path to host","suites":["toHost"],"updatePoint":{"line":18,"column":42,"index":864},"line":18,"code":"  it('should parse simple and path to host', () => {\n    expect(toHost('vercel.com/test')).toEqual('vercel.com');\n  });","file":"unit/util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render message","suites":["Stage App Component"],"updatePoint":{"line":10,"column":27,"index":388},"line":10,"code":"  it('should render message', done => {\n    component.create(bootstrap).then(() => {\n      const view = component.element;\n      expect(view.textContent.trim()).toBe('Hello World!');\n      done();\n    }).catch(e => {\n      fail(e);\n      done();\n    });\n  });","file":"unit/app.spec.js","skipped":false,"dir":"packages/cli/test/dev/fixtures/03-aurelia/test"},{"name":"will display an empty deployment warning","suites":["create v2 deployment"],"updatePoint":{"line":29,"column":46},"line":29,"code":"  it('will display an empty deployment warning', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-clien-tests-v2',\n      }\n    )) {\n      if (event.type === 'warning') {\n        expect(event.payload).toEqual('READY');\n      }\n\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will report correct file count event","suites":["create v2 deployment"],"updatePoint":{"line":50,"column":42},"line":50,"code":"  it('will report correct file count event', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-client-tests-v2',\n      }\n    )) {\n      if (event.type === 'file-count') {\n        expect(event.payload.total).toEqual(0);\n      }\n\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment","suites":["create v2 deployment"],"updatePoint":{"line":71,"column":33},"line":71,"code":"  it('will create a v2 deployment', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-client-tests-v2',\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        expect(deployment.readyState).toEqual('READY');\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment with correct file permissions","suites":["create v2 deployment"],"updatePoint":{"line":89,"column":63},"line":89,"code":"  it('will create a v2 deployment with correct file permissions', async () => {\n    let error = null;\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2-file-permissions'),\n        skipAutoDetectionConfirmation: true,\n      },\n      {\n        name: 'now-client-tests-v2',\n        projectSettings: {\n          buildCommand: null,\n          devCommand: null,\n          outputDirectory: null,\n        },\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      } else if (event.type === 'error') {\n        error = event.payload;\n        console.error(error.message);\n        break;\n      }\n    }\n\n    expect(error).toBe(null);\n    expect(deployment.readyState).toEqual('READY');\n\n    const url = `https://${deployment.url}/api/index.js`;\n    console.log('testing url ' + url);\n    const response = await fetch_(url);\n    const text = await response.text();\n    expect(deployment.readyState).toEqual('READY');\n    expect(text).toContain('executed bash script');\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment and ignore files specified in .nowignore","suites":["create v2 deployment"],"updatePoint":{"line":127,"column":74},"line":127,"code":"  it('will create a v2 deployment and ignore files specified in .nowignore', async () => {\n    let error = null;\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'nowignore'),\n        skipAutoDetectionConfirmation: true,\n      },\n      {\n        name: 'now-client-tests-v2',\n        projectSettings: {\n          buildCommand: null,\n          devCommand: null,\n          outputDirectory: null,\n        },\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      } else if (event.type === 'error') {\n        error = event.payload;\n        console.error(error.message);\n        break;\n      }\n    }\n\n    expect(error).toBe(null);\n    expect(deployment.readyState).toEqual('READY');\n\n    const index = await fetch_(`https://${deployment.url}`);\n    expect(index.status).toBe(200);\n    expect(await index.text()).toBe('Hello World!');\n\n    const ignore1 = await fetch_(`https://${deployment.url}/ignore.txt`);\n    expect(ignore1.status).toBe(404);\n\n    const ignore2 = await fetch_(`https://${deployment.url}/folder/ignore.txt`);\n    expect(ignore2.status).toBe(404);\n\n    const ignore3 = await fetch_(\n      `https://${deployment.url}/node_modules/ignore.txt`\n    );\n    expect(ignore3.status).toBe(404);\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will fali with a relative path","suites":["path handling"],"updatePoint":{"line":11,"column":36},"line":11,"code":"  it('will fali with a relative path', async () => {\n    try {\n      await createDeployment(\n        {\n          token,\n          path: './fixtures/v2/now.json',\n        },\n        {\n          name: 'now-client-tests-v2',\n        }\n      );\n    } catch (e) {\n      expect(e.code).toEqual('invalid_path');\n    }\n  });","file":"paths.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will fali with an array of relative paths","suites":["path handling"],"updatePoint":{"line":27,"column":47},"line":27,"code":"  it('will fali with an array of relative paths', async () => {\n    try {\n      await createDeployment(\n        {\n          token,\n          path: ['./fixtures/v2/now.json'],\n        },\n        {\n          name: 'now-client-tests-v2',\n        }\n      );\n    } catch (e) {\n      expect(e.code).toEqual('invalid_path');\n    }\n  });","file":"paths.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should exclude files using `.nowignore` blocklist","suites":["buildFileTree()"],"updatePoint":{"line":19,"column":55},"line":19,"code":"  it('should exclude files using `.nowignore` blocklist', async () => {\n    const cwd = fixture('nowignore');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, ['.nowignore', 'index.txt']);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = [\n      'ignore.txt',\n      'folder/ignore.txt',\n      'node_modules',\n    ];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should include symlinked files and directories","suites":["buildFileTree()"],"updatePoint":{"line":42,"column":52},"line":42,"code":"  it('should include symlinked files and directories', async () => {\n    const cwd = fixture('symlinks');\n    const { fileList } = await buildFileTree(cwd, { isDirectory: true }, noop);\n\n    const expectedFileList = toAbsolutePaths(cwd, [\n      'folder-link',\n      'folder/text.txt',\n      'index.txt',\n      'index-link.txt',\n    ]);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const [folderLinkPath, indexLinkPath] = await Promise.all([\n      fs.lstat(join(cwd, 'folder-link')),\n      fs.lstat(join(cwd, 'index-link.txt')),\n    ]);\n    expect(folderLinkPath.isSymbolicLink());\n    expect(folderLinkPath.isDirectory());\n    expect(indexLinkPath.isSymbolicLink());\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should include the node_modules using `.vercelignore` allowlist","suites":["buildFileTree()"],"updatePoint":{"line":65,"column":69},"line":65,"code":"  it('should include the node_modules using `.vercelignore` allowlist', async () => {\n    const cwd = fixture('vercelignore-allow-nodemodules');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true },\n      noop\n    );\n\n    const expected = toAbsolutePaths(cwd, [\n      'node_modules/one.txt',\n      'sub/node_modules/two.txt',\n      'sub/include.txt',\n      '.vercelignore',\n      'hello.txt',\n    ]);\n    expect(normalizeWindowsPaths(expected).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['.env.local', 'exclude.txt'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should find root files but ignore `.vercel/output` files when prebuilt=false","suites":["buildFileTree()"],"updatePoint":{"line":90,"column":82},"line":90,"code":"  it('should find root files but ignore `.vercel/output` files when prebuilt=false', async () => {\n    const cwd = fixture('file-system-api');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true, prebuilt: false },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, ['foo.txt', 'sub/bar.txt']);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['.vercel'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should find `.vercel/output` files but ignore other files when prebuilt=true","suites":["buildFileTree()"],"updatePoint":{"line":109,"column":82},"line":109,"code":"  it('should find `.vercel/output` files but ignore other files when prebuilt=true', async () => {\n    const cwd = fixture('file-system-api');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true, prebuilt: true },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, [\n      '.vercel/output/static/baz.txt',\n      '.vercel/output/static/sub/qux.txt',\n    ]);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['foo.txt', 'sub'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"Should read `.nowignore`","suites":["Test `getVercelIgnore()`"],"updatePoint":{"line":6,"column":30},"line":6,"code":"  it('Should read `.nowignore`', async () => {\n    const fixture = join(__dirname, 'fixtures', 'nowignore');\n    const { ig } = await getVercelIgnore(fixture);\n    assert.equal(ig.ignores('ignore.txt'), true);\n    assert.equal(ig.ignores('keep.txt'), false);\n  });","file":"vercelignore.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"Should throw an error if `.vercelignore` and `.nowignore` exist","suites":["Test `getVercelIgnore()`"],"updatePoint":{"line":13,"column":69},"line":13,"code":"  it('Should throw an error if `.vercelignore` and `.nowignore` exist', async () => {\n    let err: Error | null = null;\n    const fixture = join(__dirname, 'fixtures', 'vercelignore-and-nowignore');\n    try {\n      await getVercelIgnore(fixture);\n    } catch (_err) {\n      err = _err;\n    }\n    assert(err);\n    assert.equal(\n      err!.message,\n      'Cannot use both a `.vercelignore` and `.nowignore` file. Please delete the `.nowignore` file.'\n    );\n  });","file":"vercelignore.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"ensure there is an example for every framework","suites":["frameworks"],"updatePoint":{"line":154,"column":52},"line":154,"code":"  it('ensure there is an example for every framework', async () => {\n    const root = join(__dirname, '..', '..', '..');\n    const getExample = (name: string) => join(root, 'examples', name);\n\n    const result = frameworkList\n      .map(f => f.slug)\n      .filter(isString)\n      .filter(f => existsSync(getExample(f)) === false);\n\n    expect(result).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure schema","suites":["frameworks"],"updatePoint":{"line":166,"column":19},"line":166,"code":"  it('ensure schema', async () => {\n    const ajv = new Ajv();\n    const result = ajv.validate(Schema, frameworkList);\n\n    if (ajv.errors) {\n      console.error(ajv.errors);\n    }\n\n    expect(result).toBe(true);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure logo starts with url prefix","suites":["frameworks"],"updatePoint":{"line":177,"column":40},"line":177,"code":"  it('ensure logo starts with url prefix', async () => {\n    const invalid = frameworkList\n      .map(f => f.logo)\n      .filter(logo => {\n        return logo && !logo.startsWith(logoPrefix);\n      });\n\n    expect(invalid).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure darkModeLogo starts with url prefix","suites":["frameworks"],"updatePoint":{"line":187,"column":48},"line":187,"code":"  it('ensure darkModeLogo starts with url prefix', async () => {\n    const invalid = frameworkList\n      .map(f => f.darkModeLogo)\n      .filter(darkModeLogo => {\n        return darkModeLogo && !darkModeLogo.startsWith(logoPrefix);\n      });\n\n    expect(invalid).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure logo file exists in ./packages/frameworks/logos/","suites":["frameworks"],"updatePoint":{"line":197,"column":61},"line":197,"code":"  it('ensure logo file exists in ./packages/frameworks/logos/', async () => {\n    const missing = frameworkList\n      .map(f => f.logo)\n      .filter(logo => {\n        const filename = logo.slice(logoPrefix.length);\n        const filepath = join(__dirname, '..', 'logos', filename);\n        return existsSync(filepath) === false;\n      });\n\n    expect(missing).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure unique sort number","suites":["frameworks"],"updatePoint":{"line":209,"column":31},"line":209,"code":"  it('ensure unique sort number', async () => {\n    const sortNumToSlug = new Map<number, string | null>();\n    frameworkList.forEach(f => {\n      if (f.sort) {\n        const duplicateSlug = sortNumToSlug.get(f.sort);\n        expect(duplicateSlug).toStrictEqual(undefined);\n        sortNumToSlug.set(f.sort, f.slug);\n      }\n    });\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure unique slug","suites":["frameworks"],"updatePoint":{"line":220,"column":24},"line":220,"code":"  it('ensure unique slug', async () => {\n    const slugs = new Set<string>();\n    for (const { slug } of frameworkList) {\n      if (typeof slug === 'string') {\n        assert(!slugs.has(slug), `Slug \"${slug}\" is not unique`);\n        slugs.add(slug);\n      }\n    }\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure all demo URLs are \"public\"","suites":["frameworks"],"updatePoint":{"line":230,"column":39},"line":230,"code":"  it('ensure all demo URLs are \"public\"', async () => {\n    await Promise.all(\n      frameworkList\n        .filter(f => typeof f.demo === 'string')\n        .map(async f => {\n          const url = new URL(f.demo!);\n          const deployment = await getDeployment(url.hostname);\n          assert.equal(\n            deployment.public,\n            true,\n            `Demo URL ${f.demo} is not \"public\"`\n          );\n        })\n    );\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"should build ","suites":[],"updatePoint":{"line":12,"column":29,"index":412},"line":12,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment(path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"fixtures.test.js","skipped":false,"dir":"packages/go/test"},{"name":"does nothing with empty original function name","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":3,"column":52,"index":159},"line":3,"code":"  it('does nothing with empty original function name', async () => {\n    let error;\n    try {\n      getNewHandlerFunctionName('', 'some/kind-of-file.js');\n    } catch (err) {\n      error = err;\n    }\n    expect(error).toBeDefined();\n    expect(error.message).toEqual('Handler function renaming failed because original function name was empty.');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"does nothing with empty original function name","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":13,"column":52,"index":511},"line":13,"code":"  it('does nothing with empty original function name', async () => {\n    let error;\n    try {\n      getNewHandlerFunctionName('Handler', '');\n    } catch (err) {\n      error = err;\n    }\n    expect(error).toBeDefined();\n    expect(error.message).toEqual('Handler function renaming failed because entrypoint was empty.');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with back slashes in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":23,"column":51,"index":837},"line":23,"code":"  it('generates slug with back slashes in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'some\\\\file.js');\n    expect(newFunctionName).toEqual('Handler_some_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with forward slashes in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":27,"column":54,"index":1058},"line":27,"code":"  it('generates slug with forward slashes in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'some/file.js');\n    expect(newFunctionName).toEqual('Handler_some_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with dashes in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":31,"column":45,"index":1269},"line":31,"code":"  it('generates slug with dashes in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'kind-of-file.js');\n    expect(newFunctionName).toEqual('Handler_kind_of_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with dashes in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":35,"column":45,"index":1486},"line":35,"code":"  it('generates slug with dashes in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'kind-of-file.js');\n    expect(newFunctionName).toEqual('Handler_kind_of_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with brackets in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":39,"column":47,"index":1705},"line":39,"code":"  it('generates slug with brackets in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', '[segment].js');\n    // this expects two underscores on each side intentionally\n    // left (1): there's an added separator between original function name and slug;\n    // left (2): the opening bracket is replaced\n    // right (1): the closing bracket is replaced\n    // right (2): the period is replaced\n    expect(newFunctionName).toEqual('Handler__segment__js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with space in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":48,"column":44,"index":2203},"line":48,"code":"  it('generates slug with space in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'kind of file.js');\n    expect(newFunctionName).toEqual('Handler_kind_of_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"generates slug with periods in file path","suites":["getNewHandlerFunctionName"],"updatePoint":{"line":52,"column":46,"index":2421},"line":52,"code":"  it('generates slug with periods in file path', async () => {\n    const newFunctionName = getNewHandlerFunctionName('Handler', 'kind.of.file.js');\n    expect(newFunctionName).toEqual('Handler_kind_of_file_js');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/go/test"},{"name":"port binding","suites":[],"updatePoint":{"line":16,"column":18,"index":319},"line":16,"code":"test('port binding', async () => {\n  const server = new Server();\n  const bridge = new Bridge(server);\n  bridge.listen();\n\n  // Test port binding\n  const info = await bridge.listening;\n  assert.equal(info.address, '127.0.0.1');\n  assert.equal(typeof info.port, 'number');\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`APIGatewayProxyEvent` normalizing","suites":[],"updatePoint":{"line":27,"column":40,"index":635},"line":27,"code":"test('`APIGatewayProxyEvent` normalizing', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {};\n  const result = await bridge.launcher({\n    httpMethod: 'GET',\n    headers: {\n      foo: 'bar'\n    },\n    path: '/apigateway',\n    body: null\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'GET');\n  assert.equal(body.path, '/apigateway');\n  assert.equal(body.headers.foo, 'bar');\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`NowProxyEvent` normalizing","suites":[],"updatePoint":{"line":53,"column":33,"index":1425},"line":53,"code":"test('`NowProxyEvent` normalizing', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'POST');\n  assert.equal(body.path, '/nowproxy');\n  assert.equal(body.headers.foo, 'baz');\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"multi-payload handling","suites":[],"updatePoint":{"line":84,"column":28,"index":2320},"line":84,"code":"test('multi-payload handling', async () => {\n  const server = new Server((req, res) => {\n    if (req.url === '/redirect') {\n      res.setHeader('Location', '/somewhere');\n      res.statusCode = 307;\n      res.end('/somewhere');\n      return;\n    }\n    res.setHeader('content-type', req.url.includes('_next/data') ? 'application/json' : 'text/html');\n    res.end(JSON.stringify({\n      method: req.method,\n      path: req.url,\n      headers: req.headers\n    }));\n  });\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      payloads: [{\n        method: 'GET',\n        headers: {\n          foo: 'baz'\n        },\n        path: '/nowproxy'\n      }, {\n        method: 'GET',\n        headers: {\n          foo: 'baz'\n        },\n        path: '/_next/data/build-id/nowproxy.json'\n      }, {\n        method: 'GET',\n        headers: {\n          foo: 'baz'\n        },\n        path: '/redirect'\n      }]\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  assert.equal(result.headers['content-type'], 'multipart/mixed; boundary=\"payload-separator\"');\n  const bodies = [];\n  const payloadParts = result.body.split('\\r\\n');\n  payloadParts.forEach(item => {\n    if (item.trim() && !item.startsWith('content-type:') && !item.startsWith('--payload')) {\n      const content = Buffer.from(item.split('--payload-separator')[0], 'base64').toString();\n      bodies.push(content.startsWith('{') ? JSON.parse(content) : content);\n    }\n  });\n\n  // ensure content-type is always specified as is required for\n  // proper parsing of the multipart body\n  assert(payloadParts.some(part => part.includes('content-type: text/plain')));\n  assert.equal(bodies[0].method, 'GET');\n  assert.equal(bodies[0].path, '/nowproxy');\n  assert.equal(bodies[0].headers.foo, 'baz');\n  assert.equal(bodies[1].method, 'GET');\n  assert.equal(bodies[1].path, '/_next/data/build-id/nowproxy.json');\n  assert.equal(bodies[1].headers.foo, 'baz');\n  assert.equal(bodies[2], '/somewhere');\n  assert.equal(result.headers['x-vercel-payload-3-status'], '307');\n  assert.equal(result.headers['x-vercel-payload-2-status'], undefined);\n  assert.equal(result.headers['x-vercel-payload-1-status'], undefined);\n  assert.equal(result.headers['x-vercel-payload-1-content-type'], 'text/html');\n  assert.equal(result.headers['x-vercel-payload-2-content-type'], 'application/json');\n  assert.equal(result.headers['x-vercel-payload-3-content-type'], undefined);\n  assert.equal(result.headers['x-vercel-payload-3-location'], '/somewhere');\n  assert.equal(result.headers['x-vercel-payload-2-location'], undefined);\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"consumeEvent","suites":[],"updatePoint":{"line":161,"column":18,"index":5156},"line":161,"code":"test('consumeEvent', async () => {\n  const mockListener = jest.fn((_, res) => {\n    res.end('hello');\n  });\n  const server = new Server(mockListener);\n  const bridge = new Bridge(server, true);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  const headers = mockListener.mock.calls[0][0].headers;\n  const reqId = headers['x-now-bridge-request-id'];\n  expect(reqId).toBeTruthy();\n  const event = bridge.consumeEvent(reqId);\n  expect(event.body.toString()).toBe('body=1');\n\n  // an event can't be consumed multiple times\n  // to avoid memory leaks\n  expect(bridge.consumeEvent(reqId)).toBeUndefined();\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"consumeEvent and handle decoded path","suites":[],"updatePoint":{"line":193,"column":42,"index":6051},"line":193,"code":"test('consumeEvent and handle decoded path', async () => {\n  const mockListener = jest.fn((_, res) => {\n    res.end('hello');\n  });\n  const server = new Server(mockListener);\n  const bridge = new Bridge(server, true);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/now proxy',\n      body: 'body=1'\n    })\n  }, context);\n  const headers = mockListener.mock.calls[0][0].headers;\n  const reqId = headers['x-now-bridge-request-id'];\n  expect(reqId).toBeTruthy();\n  const event = bridge.consumeEvent(reqId);\n  expect(event.body.toString()).toBe('body=1');\n\n  // an event can't be consumed multiple times\n  // to avoid memory leaks\n  expect(bridge.consumeEvent(reqId)).toBeUndefined();\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"invalid request headers","suites":[],"updatePoint":{"line":225,"column":29,"index":6934},"line":225,"code":"test('invalid request headers', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'GET',\n      headers: {\n        foo: 'baz\\n',\n        ok: 'true'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'GET');\n  assert.equal(body.path, '/nowproxy');\n  assert.equal(body.headers.ok, 'true');\n  assert(!body.headers.foo);\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`NowProxyEvent` proxy streaming with a sync handler","suites":[],"updatePoint":{"line":258,"column":57,"index":7907},"line":258,"code":"test('`NowProxyEvent` proxy streaming with a sync handler', async () => {\n  const cipherParams = {\n    cipher: 'aes-256-ctr',\n    cipherIV: crypto.randomBytes(16),\n    cipherKey: crypto.randomBytes(32)\n  };\n  const effects = {\n    callbackPayload: undefined,\n    callbackStream: undefined\n  };\n  const {\n    deferred,\n    resolve\n  } = createDeferred();\n  const httpServer = await runServer({\n    handler: (req, res) => {\n      const chunks = [];\n      req.on('data', chunk => {\n        chunks.push(chunk.toString());\n      });\n      req.on('close', () => {\n        effects.callbackPayload = chunks;\n        res.writeHead(200, 'OK', {\n          'content-type': 'application/json'\n        });\n        res.end();\n        resolve();\n      });\n    }\n  });\n  const tcpServerCallback = await runTcpServer({\n    cipherParams,\n    effects,\n    httpServer\n  });\n  const server = new Server((req, res) => {\n    res.setHeader('content-type', 'text/html');\n    res.end('hello');\n  });\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      responseCallbackCipher: cipherParams.cipher,\n      responseCallbackCipherIV: cipherParams.cipherIV.toString('base64'),\n      responseCallbackCipherKey: cipherParams.cipherKey.toString('base64'),\n      responseCallbackStream: 'abc',\n      responseCallbackUrl: String(tcpServerCallback.url),\n      headers: {\n        foo: 'bar'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  await deferred;\n  expect(result).toEqual({});\n  expect(context.callbackWaitsForEmptyEventLoop).toEqual(false);\n  expect(effects.callbackStream).toEqual('abc');\n  expect(effects.callbackPayload).toEqual(['hello']);\n  server.close();\n  await httpServer.close();\n  await tcpServerCallback.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`NowProxyEvent` proxy streaming with an async handler","suites":[],"updatePoint":{"line":327,"column":59,"index":9826},"line":327,"code":"test('`NowProxyEvent` proxy streaming with an async handler', async () => {\n  const effects = {\n    callbackHeaders: undefined,\n    callbackMethod: undefined,\n    callbackPayload: undefined,\n    callbackStream: undefined\n  };\n  const cipherParams = {\n    cipher: 'aes-256-ctr',\n    cipherIV: crypto.randomBytes(16),\n    cipherKey: crypto.randomBytes(32)\n  };\n  const {\n    deferred,\n    resolve\n  } = createDeferred();\n  const jsonParser = jsonlines.parse();\n  const httpServer = await runServer({\n    handler: (req, res) => {\n      const chunks = [];\n      req.pipe(jsonParser);\n      jsonParser.on('data', chunk => {\n        chunks.push(chunk);\n      });\n      req.on('close', () => {\n        effects.callbackMethod = req.method;\n        effects.callbackHeaders = req.headers;\n        effects.callbackPayload = chunks;\n        res.writeHead(200, 'OK', {\n          'content-type': 'application/json'\n        });\n        res.end();\n        resolve();\n      });\n    }\n  });\n  const tcpServerCallback = await runTcpServer({\n    cipherParams,\n    httpServer,\n    effects\n  });\n  const jsonStringifier = jsonlines.stringify();\n  const server = new Server((req, res) => {\n    res.setHeader('x-test', 'hello');\n    res.setHeader('content-type', 'text/html');\n    jsonStringifier.pipe(res);\n    jsonStringifier.write({\n      method: req.method\n    });\n    jsonStringifier.write({\n      path: req.url\n    });\n    setTimeout(() => {\n      jsonStringifier.write({\n        headers: req.headers\n      });\n      res.end();\n    }, 100);\n  });\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      responseCallbackCipher: cipherParams.cipher,\n      responseCallbackCipherIV: cipherParams.cipherIV.toString('base64'),\n      responseCallbackCipherKey: cipherParams.cipherKey.toString('base64'),\n      responseCallbackStream: 'abc',\n      responseCallbackUrl: String(tcpServerCallback.url),\n      headers: {\n        foo: 'bar'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  await deferred;\n  expect(result).toEqual({});\n  expect(context.callbackWaitsForEmptyEventLoop).toEqual(false);\n  expect(effects.callbackStream).toEqual('abc');\n  expect(effects.callbackMethod).toEqual('POST');\n  expect(effects.callbackHeaders).toMatchObject({\n    'x-vercel-status-code': '200',\n    'x-vercel-header-x-test': 'hello',\n    'x-vercel-header-content-type': 'text/html'\n  });\n  expect(effects.callbackPayload).toMatchObject([{\n    method: 'POST'\n  }, {\n    path: '/nowproxy'\n  }, {\n    headers: {\n      foo: 'bar'\n    }\n  }]);\n  server.close();\n  httpServer.close();\n  tcpServerCallback.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should call consumeEvent with the correct reqId","suites":["contract with @vercel/node-bridge"],"updatePoint":{"line":45,"column":55,"index":1148},"line":45,"code":"  test('should call consumeEvent with the correct reqId', async () => {\n    await fetchWithProxyReq(`${url}/`);\n    expect(consumeEventMock).toHaveBeenLastCalledWith('2');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not expose the request id header","suites":["contract with @vercel/node-bridge"],"updatePoint":{"line":49,"column":47,"index":1318},"line":49,"code":"  test('should not expose the request id header', async () => {\n    await fetchWithProxyReq(`${url}/`, {\n      headers: {\n        'x-test-header': 'ok'\n      }\n    });\n    const [{\n      headers\n    }] = mockListener.mock.calls[0];\n    expect(headers['x-now-bridge-request-id']).toBeUndefined();\n    expect(headers['x-test-header']).toBe('ok');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not recalculate req properties twice","suites":["all helpers"],"updatePoint":{"line":64,"column":51,"index":1833},"line":64,"code":"  test('should not recalculate req properties twice', async () => {\n    const spy = jest.fn(() => {});\n    const nowReqHelpers = nowHelpers.filter(([, i]) => i === 0);\n    mockListener.mockImplementation((req, res) => {\n      spy(...nowReqHelpers.map(h => req[h]));\n      spy(...nowReqHelpers.map(h => req[h]));\n      res.end();\n    });\n    await fetchWithProxyReq(`${url}/?who=bill`, {\n      method: 'POST',\n      body: JSON.stringify({\n        who: 'mike'\n      }),\n      headers: {\n        'content-type': 'application/json',\n        cookie: 'who=jim'\n      }\n    });\n\n    // here we test that bodySpy is called twice with exactly the same arguments\n    for (let i = 0; i < 3; i += 1) {\n      expect(spy.mock.calls[0][i]).toBe(spy.mock.calls[1][i]);\n    }\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to overwrite request properties","suites":["all helpers"],"updatePoint":{"line":88,"column":54,"index":2601},"line":88,"code":"  test('should be able to overwrite request properties', async () => {\n    const spy = jest.fn(() => {});\n    mockListener.mockImplementation((...args) => {\n      nowHelpers.forEach(([prop, n]) => {\n        /* eslint-disable */\n        args[n][prop] = 'ok';\n        args[n][prop] = 'ok2';\n        spy(args[n][prop]);\n      });\n      args[1].end();\n    });\n    await fetchWithProxyReq(url);\n    nowHelpers.forEach((_, i) => expect(spy.mock.calls[i][0]).toBe('ok2'));\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to reconfig request properties","suites":["all helpers"],"updatePoint":{"line":102,"column":53,"index":3072},"line":102,"code":"  test('should be able to reconfig request properties', async () => {\n    const spy = jest.fn(() => {});\n    mockListener.mockImplementation((...args) => {\n      nowHelpers.forEach(([prop, n]) => {\n        // eslint-disable-next-line\n        Object.defineProperty(args[n], prop, {\n          value: 'ok'\n        });\n        Object.defineProperty(args[n], prop, {\n          value: 'ok2'\n        });\n        spy(args[n][prop]);\n      });\n      args[1].end();\n    });\n    await fetchWithProxyReq(url);\n    nowHelpers.forEach((_, i) => expect(spy.mock.calls[i][0]).toBe('ok2'));\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should reflect querystring in the url","suites":["req.query"],"updatePoint":{"line":122,"column":55,"index":3688},"line":122,"code":"  test('req.query should reflect querystring in the url', async () => {\n    await fetchWithProxyReq(`${url}/?who=bill&where=us`);\n    expect(mockListener.mock.calls[0][0].query).toMatchObject({\n      who: 'bill',\n      where: 'us'\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should turn multiple params with same name into an array","suites":["req.query"],"updatePoint":{"line":129,"column":74,"index":3952},"line":129,"code":"  test('req.query should turn multiple params with same name into an array', async () => {\n    await fetchWithProxyReq(`${url}/?a=2&a=1`);\n    expect(mockListener.mock.calls[0][0].query).toMatchObject({\n      a: ['2', '1']\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should be {} when there is no querystring","suites":["req.query"],"updatePoint":{"line":135,"column":59,"index":4174},"line":135,"code":"  test('req.query should be {} when there is no querystring', async () => {\n    await fetchWithProxyReq(url);\n    const [{\n      query\n    }] = mockListener.mock.calls[0];\n    expect(Object.keys(query).length).toBe(0);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.cookies should reflect req.cookie header","suites":["req.cookies"],"updatePoint":{"line":144,"column":52,"index":4428},"line":144,"code":"  test('req.cookies should reflect req.cookie header', async () => {\n    await fetchWithProxyReq(url, {\n      headers: {\n        cookie: 'who=bill; where=us'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].cookies).toMatchObject({\n      who: 'bill',\n      where: 'us'\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be undefined by default","suites":["req.body"],"updatePoint":{"line":157,"column":47,"index":4747},"line":157,"code":"  test('req.body should be undefined by default', async () => {\n    await fetchWithProxyReq(url);\n    expect(mockListener.mock.calls[0][0].body).toBe(undefined);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be undefined if content-type is not defined","suites":["req.body"],"updatePoint":{"line":161,"column":67,"index":4935},"line":161,"code":"  test('req.body should be undefined if content-type is not defined', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello'\n    });\n    expect(mockListener.mock.calls[0][0].body).toBe(undefined);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be a string when content-type is `text/plain`","suites":["req.body"],"updatePoint":{"line":168,"column":69,"index":5176},"line":168,"code":"  test('req.body should be a string when content-type is `text/plain`', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello',\n      headers: {\n        'content-type': 'text/plain'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toBe('hello');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be a buffer when content-type is `application/octet-stream`","suites":["req.body"],"updatePoint":{"line":178,"column":83,"index":5492},"line":178,"code":"  test('req.body should be a buffer when content-type is `application/octet-stream`', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello',\n      headers: {\n        'content-type': 'application/octet-stream'\n      }\n    });\n    const [{\n      body\n    }] = mockListener.mock.calls[0];\n    const str = body.toString();\n    expect(Buffer.isBuffer(body)).toBe(true);\n    expect(str).toBe('hello');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be an object when content-type is `application/x-www-form-urlencoded`","suites":["req.body"],"updatePoint":{"line":193,"column":93,"index":5941},"line":193,"code":"  test('req.body should be an object when content-type is `application/x-www-form-urlencoded`', async () => {\n    const obj = {\n      who: 'mike'\n    };\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: qs.encode(obj),\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toMatchObject(obj);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be an object when content-type is `application/json`","suites":["req.body"],"updatePoint":{"line":206,"column":76,"index":6328},"line":206,"code":"  test('req.body should be an object when content-type is `application/json`', async () => {\n    const json = {\n      who: 'bill',\n      where: 'us'\n    };\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: JSON.stringify(json),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toMatchObject(json);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should work when body is empty and content-type is `application/json`","suites":["req.body"],"updatePoint":{"line":220,"column":77,"index":6726},"line":220,"code":"  test('should work when body is empty and content-type is `application/json`', async () => {\n    mockListener.mockImplementation((req, res) => {\n      console.log(req.body);\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: '',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(res.status).toBe(200);\n    expect(res.body).toMatchObject({});\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to try/catch parse errors","suites":["req.body"],"updatePoint":{"line":235,"column":48,"index":7138},"line":235,"code":"  test('should be able to try/catch parse errors', async () => {\n    const bodySpy = jest.fn(() => {});\n    mockListener.mockImplementation((req, res) => {\n      try {\n        if (req.body === undefined) res.status(400);\n      } catch (error) {\n        bodySpy(error);\n      } finally {\n        res.end();\n      }\n    });\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: '{\"wrong\":\"json\"',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(bodySpy).toHaveBeenCalled();\n    const [error] = bodySpy.mock.calls[0];\n    expect(error.message).toMatch(/invalid json/i);\n    expect(error.statusCode).toBe(400);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.status() should set the status code","suites":["res.status"],"updatePoint":{"line":260,"column":47,"index":7839},"line":260,"code":"  test('res.status() should set the status code', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.status(404);\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url);\n    expect(res.status).toBe(404);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.status() should be chainable","suites":["res.status"],"updatePoint":{"line":268,"column":40,"index":8082},"line":268,"code":"  test('res.status() should be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.status(404));\n      res.end();\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should redirect to login","suites":["res.redirect"],"updatePoint":{"line":280,"column":32,"index":8406},"line":280,"code":"  test('should redirect to login', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.redirect('/login');\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(res.status).toBe(307);\n    expect(res.headers.get('location')).toBe(url + '/login');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should redirect with status code 301","suites":["res.redirect"],"updatePoint":{"line":291,"column":44,"index":8756},"line":291,"code":"  test('should redirect with status code 301', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.redirect(301, '/login');\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(res.status).toBe(301);\n    expect(res.headers.get('location')).toBe(url + '/login');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should show friendly error for invalid redirect","suites":["res.redirect"],"updatePoint":{"line":302,"column":55,"index":9122},"line":302,"code":"  test('should show friendly error for invalid redirect', async () => {\n    let error;\n    mockListener.mockImplementation((req, res) => {\n      try {\n        res.redirect(307);\n      } catch (err) {\n        error = err;\n      }\n      res.end();\n    });\n    await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(error.message).toBe(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should show friendly error in case of passing null as first argument redirect","suites":["res.redirect"],"updatePoint":{"line":317,"column":85,"index":9681},"line":317,"code":"  test('should show friendly error in case of passing null as first argument redirect', async () => {\n    let error;\n    mockListener.mockImplementation((req, res) => {\n      try {\n        res.redirect(null);\n      } catch (err) {\n        error = err;\n      }\n      res.end();\n    });\n    await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(error.message).toBe(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be chainable","suites":["res.send"],"updatePoint":{"line":337,"column":27,"index":10329},"line":337,"code":"  test('should be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.send('hello'));\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send","res.send()"],"updatePoint":{"line":347,"column":31,"index":10633},"line":347,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send();\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send",".send(null)"],"updatePoint":{"line":357,"column":31,"index":10938},"line":357,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(null);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-length')).toBe('0');\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send",".send(undefined)"],"updatePoint":{"line":368,"column":31,"index":11311},"line":368,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(undefined);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as html","suites":["res.send",".send(String)"],"updatePoint":{"line":378,"column":29,"index":11625},"line":378,"code":"    test('should send as html', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('<p>hey</p>');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.headers.get('content-type')).toBe('text/html; charset=utf-8');\n      expect(await res.text()).toBe('<p>hey</p>');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length","suites":["res.send",".send(String)"],"updatePoint":{"line":386,"column":35,"index":11960},"line":386,"code":"    test('should set Content-Length', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('½ + ¼ = ¾');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(Number(res.headers.get('content-length'))).toBe(12);\n      expect(await res.text()).toBe('½ + ¼ = ¾');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set ETag","suites":["res.send",".send(String)"],"updatePoint":{"line":395,"column":25,"index":12305},"line":395,"code":"    test('should set ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Array(1000).join('-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override Content-Type","suites":["res.send",".send(String)"],"updatePoint":{"line":403,"column":42,"index":12644},"line":403,"code":"    test('should not override Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain');\n        res.send('hey');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should override charset in Content-Type","suites":["res.send",".send(String)"],"updatePoint":{"line":413,"column":49,"index":13069},"line":413,"code":"    test('should override charset in Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=iso-8859-1');\n        res.send('hey');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should keep charset in Content-Type","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":425,"column":45,"index":13552},"line":425,"code":"    test('should keep charset in Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=iso-8859-1');\n        res.send(Buffer.from('hi'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=iso-8859-1');\n      expect(await res.text()).toBe('hi');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":435,"column":35,"index":13999},"line":435,"code":"    test('should set Content-Length', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.from('½ + ¼ = ¾'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(Number(res.headers.get('content-length'))).toBe(12);\n      expect(await res.text()).toBe('½ + ¼ = ¾');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as octet-stream","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":444,"column":37,"index":14369},"line":444,"code":"    test('should send as octet-stream', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.from('hello'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('application/octet-stream');\n      expect((await res.buffer()).toString('hex')).toBe(Buffer.from('hello').toString('hex'));\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set ETag","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":453,"column":25,"index":14782},"line":453,"code":"    test('should set ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.alloc(999, '-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override Content-Type","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":461,"column":42,"index":15122},"line":461,"code":"    test('should not override Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n        res.send(Buffer.from('hey'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override ETag","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":471,"column":34,"index":15560},"line":471,"code":"    test('should not override ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('ETag', '\"foo\"');\n        res.send(Buffer.from('hey'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('\"foo\"');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as application/json","suites":["res.send",".send(Object)"],"updatePoint":{"line":483,"column":41,"index":15991},"line":483,"code":"    test('should send as application/json', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send({\n          name: 'tobi'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('{\"name\":\"tobi\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should ignore the body","suites":["res.send","when the request method is HEAD"],"updatePoint":{"line":496,"column":32,"index":16453},"line":496,"code":"    test('should ignore the body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('yay');\n      });\n\n      // TODO: fix this test\n      // node-fetch is automatically ignoring the body so this test will never fail\n      const res = await fetchWithProxyReq(url, {\n        method: 'HEAD'\n      });\n      expect(res.status).toBe(200);\n      expect((await res.buffer()).toString()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should strip Content-* fields, Transfer-Encoding field, and body","suites":["res.send","when .statusCode is 204"],"updatePoint":{"line":511,"column":74,"index":16981},"line":511,"code":"    test('should strip Content-* fields, Transfer-Encoding field, and body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.statusCode = 204;\n        res.setHeader('Transfer-Encoding', 'chunked');\n        res.send('foo');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(204);\n      expect(res.headers.get('Content-Type')).toBe(null);\n      expect(res.headers.get('Content-Length')).toBe(null);\n      expect(res.headers.get('Transfer-Encoding')).toBe(null);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should strip Content-* fields, Transfer-Encoding field, and body","suites":["res.send","when .statusCode is 304"],"updatePoint":{"line":526,"column":74,"index":17612},"line":526,"code":"    test('should strip Content-* fields, Transfer-Encoding field, and body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.statusCode = 304;\n        res.setHeader('Transfer-Encoding', 'chunked');\n        res.send('foo');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(304);\n      expect(res.headers.get('Content-Type')).toBe(null);\n      expect(res.headers.get('Content-Length')).toBe(null);\n      expect(res.headers.get('Transfer-Encoding')).toBe(null);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag","suites":["res.send","etag"],"updatePoint":{"line":586,"column":26,"index":19432},"line":586,"code":"    test('should send ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('kajdslfkasdf');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"c-IgR/L5SF7CJQff4wxKGF/vfPuZ0\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag for empty string response","suites":["res.send","etag"],"updatePoint":{"line":594,"column":52,"index":19772},"line":594,"code":"    test('should send ETag for empty string response', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag for long response","suites":["res.send","etag"],"updatePoint":{"line":602,"column":44,"index":20092},"line":602,"code":"    test('should send ETag for long response', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Array(1000).join('-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override ETag when manually set","suites":["res.send","etag"],"updatePoint":{"line":610,"column":52,"index":20441},"line":610,"code":"    test('should not override ETag when manually set', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('etag', '\"asdf\"');\n        res.send('hello');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('\"asdf\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not send ETag for res.send()","suites":["res.send","etag"],"updatePoint":{"line":619,"column":45,"index":20781},"line":619,"code":"    test('should not send ETag for res.send()', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send();\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe(null);\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send be chainable","suites":["res.json"],"updatePoint":{"line":633,"column":32,"index":21208},"line":633,"code":"  test('should send be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.json({\n        hello: 'world'\n      }));\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.json() should send an empty body","suites":["res.json"],"updatePoint":{"line":644,"column":44,"index":21517},"line":644,"code":"  test('res.json() should send an empty body', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.json();\n    });\n    await fetchWithProxyReq(url);\n    const res = await fetchWithProxyReq(url);\n    expect(res.status).toBe(200);\n    expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n    expect(await res.text()).toBe('');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override previous Content-Types","suites":["res.json",".json(object)"],"updatePoint":{"line":655,"column":52,"index":21944},"line":655,"code":"    test('should not override previous Content-Types', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('content-type', 'application/vnd.example+json');\n        res.json({\n          hello: 'world'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/vnd.example+json; charset=utf-8');\n      expect(await res.text()).toBe('{\"hello\":\"world\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length and Content-Type","suites":["res.json",".json(object)"],"updatePoint":{"line":667,"column":52,"index":22453},"line":667,"code":"    test('should set Content-Length and Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json({\n          hello: '½ + ¼ = ¾'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(Number(res.headers.get('content-length'))).toBe(24);\n      expect(await res.text()).toBe('{\"hello\":\"½ + ¼ = ¾\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for null","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":680,"column":45,"index":22992},"line":680,"code":"      test('should respond with json for null', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json(null);\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('null');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for Number","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":689,"column":47,"index":23384},"line":689,"code":"      test('should respond with json for Number', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json(300);\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('300');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for String","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":698,"column":47,"index":23774},"line":698,"code":"      test('should respond with json for String', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json('str');\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('\"str\"');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json when given an array","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":708,"column":54,"index":24183},"line":708,"code":"    test('should respond with json when given an array', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json(['foo', 'bar', 'baz']);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('[\"foo\",\"bar\",\"baz\"]');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json when given an object","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":717,"column":55,"index":24599},"line":717,"code":"    test('should respond with json when given an object', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json({\n          name: 'tobi'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('{\"name\":\"tobi\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"$title","suites":["middleware matchers"],"line":4,"code":"  it.each([{\n    title: 'has catch-all route whithout matcher',\n    matcher: undefined,\n    regExps: ['^/.*$']\n  }, {\n    title: 'handles / and /index with / matcher',\n    matcher: '/',\n    regExps: ['^\\\\/[\\\\/#\\\\?]?$', '^\\\\/index[\\\\/#\\\\?]?$']\n  }, {\n    title: 'handles as many routes as provided matchers',\n    matcher: ['/about', '/posts'],\n    regExps: ['^\\\\/about[\\\\/#\\\\?]?$', '^\\\\/posts[\\\\/#\\\\?]?$']\n  }, {\n    title: 'handles /index on multiple routes',\n    matcher: ['/about/:slug', '/'],\n    regExps: ['^\\\\/about(?:\\\\/([^\\\\/#\\\\?]+?))[\\\\/#\\\\?]?$', '^\\\\/[\\\\/#\\\\?]?$', '^\\\\/index[\\\\/#\\\\?]?$']\n  }, {\n    title: 'do not duplicates /index if already present',\n    matcher: ['/about/:slug', '/index', '/'],\n    regExps: ['^\\\\/about(?:\\\\/([^\\\\/#\\\\?]+?))[\\\\/#\\\\?]?$', '^\\\\/index[\\\\/#\\\\?]?$', '^\\\\/[\\\\/#\\\\?]?$']\n  }])('$title', async ({\n    matcher,\n    regExps\n  }) => {\n    const filesystem = await prepareFilesystem({\n      'middleware.js': `\n        export default (req) => {\n          return new Response('hooked!', {\n            headers: { 'x-got-middleware': 'true' },\n          });\n        };\n\n        ${matcher ? `export const config = { matcher: ${JSON.stringify(matcher)} };` : ''}\n      `\n    });\n    const buildResult = await build({\n      ...filesystem,\n      entrypoint: 'middleware.js',\n      config: {\n        middleware: true\n      },\n      meta: {\n        skipDownload: true\n      }\n    });\n    expect(buildResult.routes).toEqual([{\n      src: regExps.join('|'),\n      middlewarePath: 'middleware.js',\n      continue: true,\n      override: true\n    }]);\n  });","file":"edge-matcher.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"fails to locate the file","suites":[],"updatePoint":{"line":5,"column":30,"index":207},"line":5,"code":"test('fails to locate the file', async () => {\n  const {\n    workPath: dir\n  } = await prepareFilesystem({\n    'index.js': `\n      import wasm from './file.wasm?module';\n      console.log(wasm);\n    `\n  });\n  await expect(buildWithPlugin(dir)).rejects.toThrowError(`WebAssembly file could not be located: ./file.wasm`);\n});","file":"edge-wasm-plugin.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"locates the file","suites":[],"updatePoint":{"line":16,"column":22,"index":523},"line":16,"code":"test('locates the file', async () => {\n  const {\n    workPath: dir\n  } = await prepareFilesystem({\n    'index.js': `\n      import wasm from './file.wasm?module';\n      console.log(wasm);\n    `,\n    'file.wasm': Buffer.from('binary file')\n  });\n  const {\n    assets,\n    code\n  } = await buildWithPlugin(dir);\n  expect([...assets]).toHaveLength(1);\n  expect(code).toContain('globalThis[\"wasm_');\n});","file":"edge-wasm-plugin.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"should cache `**/node_modules/**`","suites":["prepareCache()"],"updatePoint":{"line":5,"column":41,"index":170},"line":5,"code":"  test('should cache `**/node_modules/**`', async () => {\n    const files = await prepareCache({\n      files: {},\n      entrypoint: '.',\n      config: {},\n      workPath: path.resolve(__dirname, './cache-fixtures/'),\n      repoRootPath: path.resolve(__dirname, './cache-fixtures/')\n    });\n    expect(files['foo/node_modules/file']).toBeDefined();\n    expect(files['node_modules/file']).toBeDefined();\n    expect(files['index.js']).toBeUndefined();\n  });","file":"prepare-cache.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"should ignore root modules","suites":["prepareCache()"],"updatePoint":{"line":17,"column":34,"index":618},"line":17,"code":"  test('should ignore root modules', async () => {\n    const files = await prepareCache({\n      files: {},\n      entrypoint: '.',\n      config: {},\n      workPath: path.resolve(__dirname, './cache-fixtures/foo/')\n    });\n    const file = files['node_modules/file'];\n    expect(file).toBeDefined();\n    assert(file.type === 'FileFsRef');\n    expect(file.fsPath.includes('cache-fixtures/foo/node_modules/file')).toBeTruthy();\n    expect(files['index.js']).toBeUndefined();\n  });","file":"prepare-cache.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"entrypoint=\"$entrypoint\" zeroConfig=$zeroConfig -> $expected","suites":["entrypointToOutputPath()"],"line":3,"code":"  test.each([{\n    entrypoint: 'api/foo.js',\n    zeroConfig: false,\n    expected: 'api/foo.js'\n  }, {\n    entrypoint: 'api/foo.ts',\n    zeroConfig: false,\n    expected: 'api/foo.ts'\n  }, {\n    entrypoint: 'api/foo.tsx',\n    zeroConfig: false,\n    expected: 'api/foo.tsx'\n  }, {\n    entrypoint: 'api/foo.js',\n    zeroConfig: true,\n    expected: 'api/foo'\n  }, {\n    entrypoint: 'api/foo.ts',\n    zeroConfig: true,\n    expected: 'api/foo'\n  }, {\n    entrypoint: 'api/foo.tsx',\n    zeroConfig: true,\n    expected: 'api/foo'\n  }])('entrypoint=\"$entrypoint\" zeroConfig=$zeroConfig -> $expected', ({\n    entrypoint,\n    zeroConfig,\n    expected\n  }) => {\n    expect(entrypointToOutputPath(entrypoint, zeroConfig)).toEqual(expected);\n  });","file":"utils.test.ts","skipped":false,"dir":"packages/node/test"},{"name":"should match the probes against Python dev servers","suites":[],"updatePoint":{"line":14,"column":54,"index":439},"line":14,"code":"it('should match the probes against Python dev servers', async () => {\n  const fixture = path.join(fixturesPath, '00-request-path');\n  await execa('pip3', ['install', '--user', '--upgrade', 'setuptools', 'wheel'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  await execa('pip3', ['install', '--user', '-r', 'requirements.txt'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const ports = new Map();\n  ports.set('/api/python.py', 8001);\n  ports.set('/api/wsgi.py', 8002);\n  ports.set('/api/asgi.py', 8003);\n  const {\n    probes\n  } = require(path.join(fixture, 'vercel.json'));\n  const pythonServer = spawn('python3', ['api/python.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const wsgiServer = spawn('python3', ['api/wsgi.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const asgiServer = spawn('python3', ['api/asgi.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  try {\n    // wait a few seconds for the dev servers to boot-up\n    await new Promise(r => setTimeout(r, 3000));\n    for (const {\n      path,\n      mustContain\n    } of probes) {\n      const port = ports.get(path.substring(0, path.indexOf('?')));\n      const res = await fetch(`http://localhost:${port}${path}`);\n      const body = await res.text();\n      assert(body.includes(mustContain), `Expected to contain \"${mustContain}\" but got \"${body}\"`);\n    }\n  } finally {\n    process.kill(pythonServer.pid);\n    process.kill(wsgiServer.pid);\n    process.kill(asgiServer.pid);\n  }\n});","file":"integration.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should fail to build ","suites":[],"updatePoint":{"line":68,"column":39,"index":2348},"line":68,"code":"    it(`should fail to build ${fixture}`, async () => {\n      try {\n        await testDeployment(path.join(fixturesPath, fixture));\n      } catch (err) {\n        expect(err).toBeTruthy();\n        expect(err.deployment).toBeTruthy();\n        expect(err.deployment.errorMessage).toBe(errMsg);\n      }\n    });","file":"integration.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should build ","suites":[],"updatePoint":{"line":80,"column":29,"index":2728},"line":80,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment(path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"integration.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should only match supported versions, otherwise throw an error","suites":[],"updatePoint":{"line":15,"column":66,"index":436},"line":15,"code":"it('should only match supported versions, otherwise throw an error', async () => {\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '3.9'\n  })).toHaveProperty('runtime', 'python3.9');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should ignore minor version in vercel dev","suites":[],"updatePoint":{"line":20,"column":45,"index":617},"line":20,"code":"it('should ignore minor version in vercel dev', async () => {\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '3.9',\n    isDev: true\n  })).toHaveProperty('runtime', 'python3');\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '3.6',\n    isDev: true\n  })).toHaveProperty('runtime', 'python3');\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '999',\n    isDev: true\n  })).toHaveProperty('runtime', 'python3');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should select latest version when no Piplock detected","suites":[],"updatePoint":{"line":35,"column":57,"index":1130},"line":35,"code":"it('should select latest version when no Piplock detected', async () => {\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: undefined\n  })).toHaveProperty('runtime', 'python3.9');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should select latest version and warn when invalid Piplock detected","suites":[],"updatePoint":{"line":41,"column":71,"index":1386},"line":41,"code":"it('should select latest version and warn when invalid Piplock detected', async () => {\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '999'\n  })).toHaveProperty('runtime', 'python3.9');\n  expect(warningMessages).toStrictEqual(['Warning: Python version \"999\" detected in Pipfile.lock is invalid and will be ignored. http://vercel.link/python-version']);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should throw for discontinued versions","suites":[],"updatePoint":{"line":47,"column":42,"index":1731},"line":47,"code":"it('should throw for discontinued versions', async () => {\n  global.Date.now = () => new Date('2022-07-31').getTime();\n  expect(() => getSupportedPythonVersion({\n    pipLockPythonVersion: '3.6'\n  })).toThrow('Python version \"3.6\" detected in Pipfile.lock is discontinued and must be upgraded.');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"should warn for deprecated versions, soon to be discontinued","suites":[],"updatePoint":{"line":54,"column":64,"index":2098},"line":54,"code":"it('should warn for deprecated versions, soon to be discontinued', async () => {\n  global.Date.now = () => new Date('2021-07-01').getTime();\n  expect(getSupportedPythonVersion({\n    pipLockPythonVersion: '3.6'\n  })).toHaveProperty('runtime', 'python3.6');\n  expect(warningMessages).toStrictEqual(['Error: Python version \"3.6\" detected in Pipfile.lock has reached End-of-Life. Deployments created on or after 2022-07-18 will fail to build. http://vercel.link/python-version']);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/python/test"},{"name":"appendRoutesToPhase `routes=null` and `newRoutes=[]`","suites":[],"updatePoint":{"line":4,"column":58,"index":186},"line":4,"code":"test('appendRoutesToPhase `routes=null` and `newRoutes=[]`', () => {\n  const routes = null;\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=null` and one `newRoutes`","suites":[],"updatePoint":{"line":16,"column":59,"index":473},"line":16,"code":"test('appendRoutesToPhase `routes=null` and one `newRoutes`', () => {\n  const routes = null;\n  const newRoutes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, ...newRoutes];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=[]` and `newRoutes=null`","suites":[],"updatePoint":{"line":33,"column":58,"index":842},"line":33,"code":"test('appendRoutesToPhase `routes=[]` and `newRoutes=null`', () => {\n  const routes = [];\n  const newRoutes = null;\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=[]` and `newRoutes=[]`","suites":[],"updatePoint":{"line":45,"column":56,"index":1126},"line":45,"code":"test('appendRoutesToPhase `routes=[]` and `newRoutes=[]`', () => {\n  const routes = [];\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes, zero newRoutes","suites":[],"updatePoint":{"line":57,"column":52,"index":1404},"line":57,"code":"test('appendRoutesToPhase one routes, zero newRoutes', () => {\n  const routes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = routes;\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase zero routes, one newRoutes","suites":[],"updatePoint":{"line":72,"column":52,"index":1725},"line":72,"code":"test('appendRoutesToPhase zero routes, one newRoutes', () => {\n  const routes = [];\n  const newRoutes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, ...newRoutes];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase two routes in phase","suites":[],"updatePoint":{"line":89,"column":45,"index":2079},"line":89,"code":"test('appendRoutesToPhase two routes in phase', () => {\n  const routes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase two routes out of phase","suites":[],"updatePoint":{"line":117,"column":49,"index":2578},"line":117,"code":"test('appendRoutesToPhase two routes out of phase', () => {\n  const routes = [{\n    handle: 'resource'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'resource'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes before, two routes in phase","suites":[],"updatePoint":{"line":147,"column":64,"index":3120},"line":147,"code":"test('appendRoutesToPhase one routes before, two routes in phase', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes before, two routes in phase, two routes in different phase","suites":[],"updatePoint":{"line":181,"column":95,"index":3753},"line":181,"code":"test('appendRoutesToPhase one routes before, two routes in phase, two routes in different phase', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase to null phase","suites":[],"updatePoint":{"line":225,"column":39,"index":4472},"line":225,"code":"test('appendRoutesToPhase to null phase', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = null;\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase to null phase with no handle","suites":[],"updatePoint":{"line":265,"column":54,"index":5146},"line":265,"code":"test('appendRoutesToPhase to null phase with no handle', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = null;\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase to null phase with two new routes ","suites":[],"updatePoint":{"line":295,"column":60,"index":5672},"line":295,"code":"test('appendRoutesToPhase to null phase with two new routes ', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  const newRoutes = [{\n    src: '/new1',\n    dest: '/to1'\n  }, {\n    src: '/new2',\n    dest: '/to2'\n  }];\n  const phase = null;\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new1',\n    dest: '/to1'\n  }, {\n    src: '/new2',\n    dest: '/to2'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase to null phase `routes=[]`","suites":[],"updatePoint":{"line":341,"column":51,"index":6431},"line":341,"code":"test('appendRoutesToPhase to null phase `routes=[]`', () => {\n  const routes = [];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = null;\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should return routes null if provided routes is null","suites":["normalizeRoutes"],"updatePoint":{"line":18,"column":60,"index":770},"line":18,"code":"  test('should return routes null if provided routes is null', () => {\n    const actual = normalizeRoutes(null);\n    assert.equal(actual.routes, null);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"accepts valid routes","suites":["normalizeRoutes"],"updatePoint":{"line":22,"column":28,"index":896},"line":22,"code":"  test('accepts valid routes', () => {\n    const routes = [{\n      src: '^(?:/(?<value>en|fr))?(?<path>/.*)$',\n      locale: {\n        // @ts-expect-error `value` is not defined… is this a bug or should this prop be added to the type?\n        value: '$value',\n        path: '$path',\n        default: 'en',\n        cookie: 'NEXT_LOCALE'\n      }\n    }, {\n      src: '^/(?:en/?|fr/?)$',\n      locale: {\n        redirect: {\n          en: '/en',\n          fr: '/fr'\n        }\n      }\n    }, {\n      src: '^/about$'\n    }, {\n      src: '^/about$',\n      middleware: 0\n    }, {\n      src: '^/about$',\n      middlewarePath: 'pages/_middleware'\n    }, {\n      src: '^/blog$',\n      methods: ['GET'],\n      headers: {\n        'Cache-Control': 'no-cache'\n      },\n      dest: '/blog'\n    }, {\n      src: '^/.*$',\n      middleware: 0\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/(?<slug>[^/]+)$',\n      dest: 'blog?slug=$slug'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '^/hit-me$',\n      headers: {\n        'Cache-Control': 'max-age=20'\n      },\n      continue: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '^/missed-me$',\n      dest: '/api/missed-me',\n      check: true\n    }, {\n      src: '^/missed-me$',\n      headers: {\n        'Cache-Control': 'max-age=10'\n      },\n      continue: true,\n      important: true\n    }, {\n      handle: 'rewrite'\n    }, {\n      src: '^.*$',\n      dest: '/somewhere'\n    }, {\n      handle: 'error'\n    }, {\n      src: '^.*$',\n      dest: '/404',\n      status: 404\n    }, {\n      src: '^/hello$',\n      dest: '/another',\n      has: [{\n        type: 'header',\n        key: 'x-rewrite'\n      }, {\n        type: 'cookie',\n        key: 'loggedIn',\n        value: 'yup'\n      }, {\n        type: 'query',\n        key: 'authorized',\n        value: 'yup'\n      }, {\n        type: 'host',\n        value: 'vercel.com'\n      }],\n      missing: [{\n        type: 'header',\n        key: 'x-middleware-subrequest',\n        value: 'secret'\n      }]\n    }];\n    assertValid(routes);\n    const normalized = normalizeRoutes(routes);\n    assert.equal(normalized.error, null);\n    assert.deepStrictEqual(normalized.routes, routes);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"normalizes src","suites":["normalizeRoutes"],"updatePoint":{"line":124,"column":22,"index":3059},"line":124,"code":"  test('normalizes src', () => {\n    const expected = '^/about$';\n    const sources = [{\n      src: '/about'\n    }, {\n      src: '/about$'\n    }, {\n      src: '\\\\/about'\n    }, {\n      src: '\\\\/about$'\n    }, {\n      src: '^/about'\n    }, {\n      src: '^/about$'\n    }, {\n      src: '^\\\\/about'\n    }, {\n      src: '^\\\\/about$'\n    }];\n    assertValid(sources);\n    const normalized = normalizeRoutes(sources);\n    assert.equal(normalized.error, null);\n    assert.notEqual(normalized.routes, null);\n    if (normalized.routes) {\n      normalized.routes.forEach(route => {\n        if (isHandler(route)) {\n          assert.fail(`Normalizer returned: { handle: ${route.handle} } instead of { src: ${expected} }`);\n        } else {\n          assert.strictEqual(route.src, expected);\n        }\n      });\n    }\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"returns if null","suites":["normalizeRoutes"],"updatePoint":{"line":157,"column":23,"index":3870},"line":157,"code":"  test('returns if null', () => {\n    const input = null;\n    const {\n      error,\n      routes\n    } = normalizeRoutes(input);\n    assert.strictEqual(error, null);\n    assert.strictEqual(routes, input);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"returns if empty","suites":["normalizeRoutes"],"updatePoint":{"line":166,"column":24,"index":4081},"line":166,"code":"  test('returns if empty', () => {\n    const input = [];\n    const {\n      error,\n      routes\n    } = normalizeRoutes(input);\n    assert.strictEqual(error, null);\n    assert.strictEqual(routes, input);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has unknown `handle` value","suites":["normalizeRoutes"],"updatePoint":{"line":175,"column":49,"index":4315},"line":175,"code":"  test('fails if route has unknown `handle` value', () => {\n    // @ts-expect-error - intentionally passing invalid \"handle\"\n    const input = [{\n      handle: 'doesnotexist'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 0 has unknown handle value `handle: doesnotexist`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has additional properties with `handle` property","suites":["normalizeRoutes"],"updatePoint":{"line":186,"column":71,"index":4741},"line":186,"code":"  test('fails if route has additional properties with `handle` property', () => {\n    // @ts-expect-error - intentionally passing invalid property\n    const input = [{\n      handle: 'filesystem',\n      illegal: true\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 0 has unknown property `illegal`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has a duplicate `handle` value","suites":["normalizeRoutes"],"updatePoint":{"line":198,"column":53,"index":5151},"line":198,"code":"  test('fails if route has a duplicate `handle` value', () => {\n    const input = [{\n      handle: 'filesystem'\n    }, {\n      handle: 'filesystem'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 is a duplicate. Please use one `handle: filesystem` at most.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has a invalid regex","suites":["normalizeRoutes"],"updatePoint":{"line":210,"column":42,"index":5529},"line":210,"code":"  test('fails if route has a invalid regex', () => {\n    const input = [{\n      src: '^/(broken]$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 0 has invalid `src` regular expression \"^/(broken]$\".');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route does not define `handle` or `src` property","suites":["normalizeRoutes"],"updatePoint":{"line":220,"column":65,"index":5883},"line":220,"code":"  test('fails if route does not define `handle` or `src` property', () => {\n    // @ts-expect-error - intentionally passing invalid property\n    const input = [{\n      fake: 'foo'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 0 must define either `handle` or `src` property.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if over 1024 routes","suites":["normalizeRoutes"],"updatePoint":{"line":231,"column":33,"index":6258},"line":231,"code":"  test('fails if over 1024 routes', () => {\n    assertError('string', [{\n      dataPath: '',\n      keyword: 'type',\n      message: 'should be array',\n      params: {\n        type: 'array'\n      },\n      schemaPath: '#/type'\n    }]);\n    const arr = new Array(1026);\n    arr.fill(true);\n    assertError(arr, [{\n      dataPath: '',\n      keyword: 'maxItems',\n      message: 'should NOT have more than 1024 items',\n      params: {\n        limit: '1024'\n      },\n      schemaPath: '#/maxItems'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails is src is not string","suites":["normalizeRoutes"],"updatePoint":{"line":253,"column":34,"index":6764},"line":253,"code":"  test('fails is src is not string', () => {\n    assertError([{\n      src: false\n    }], [{\n      keyword: 'type',\n      dataPath: '[0].src',\n      schemaPath: '#/items/anyOf/0/properties/src/type',\n      params: {\n        type: 'string'\n      },\n      message: 'should be string'\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'src'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if dest is not string","suites":["normalizeRoutes"],"updatePoint":{"line":280,"column":35,"index":7464},"line":280,"code":"  test('fails if dest is not string', () => {\n    assertError([\n    // @ts-ignore\n    {\n      dest: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'dest'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if methods is not array","suites":["normalizeRoutes"],"updatePoint":{"line":309,"column":37,"index":8207},"line":309,"code":"  test('fails if methods is not array', () => {\n    assertError([\n    // @ts-ignore\n    {\n      methods: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'methods'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if methods is not string","suites":["normalizeRoutes"],"updatePoint":{"line":338,"column":38,"index":8957},"line":338,"code":"  test('fails if methods is not string', () => {\n    assertError([\n    // @ts-ignore\n    {\n      methods: [false]\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'methods'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if headers is not an object","suites":["normalizeRoutes"],"updatePoint":{"line":367,"column":41,"index":9712},"line":367,"code":"  test('fails if headers is not an object', () => {\n    assertError([\n    // @ts-ignore\n    {\n      headers: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'headers'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if header is not a string","suites":["normalizeRoutes"],"updatePoint":{"line":396,"column":39,"index":10463},"line":396,"code":"  test('fails if header is not a string', () => {\n    assertError([\n    // @ts-ignore\n    {\n      headers: {\n        test: false\n      }\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'headers'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if handle is not string","suites":["normalizeRoutes"],"updatePoint":{"line":427,"column":37,"index":11236},"line":427,"code":"  test('fails if handle is not string', () => {\n    assertError([\n    // @ts-ignore\n    {\n      handle: false\n    }], [{\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/additionalProperties',\n      params: {\n        additionalProperty: 'handle'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'type',\n      dataPath: '[0].handle',\n      schemaPath: '#/items/anyOf/1/properties/handle/type',\n      params: {\n        type: 'string'\n      },\n      message: 'should be string'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if continue is not boolean","suites":["normalizeRoutes"],"updatePoint":{"line":456,"column":40,"index":11976},"line":456,"code":"  test('fails if continue is not boolean', () => {\n    assertError([\n    // @ts-ignore\n    {\n      continue: 'false'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'continue'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if check is not boolean","suites":["normalizeRoutes"],"updatePoint":{"line":485,"column":37,"index":12729},"line":485,"code":"  test('fails if check is not boolean', () => {\n    assertError([\n    // @ts-ignore\n    {\n      check: 'false'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'check'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if status is not number","suites":["normalizeRoutes"],"updatePoint":{"line":514,"column":37,"index":13476},"line":514,"code":"  test('fails if status is not number', () => {\n    assertError([\n    // @ts-ignore\n    {\n      status: '404'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'status'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if property does not exist","suites":["normalizeRoutes"],"updatePoint":{"line":543,"column":40,"index":14226},"line":543,"code":"  test('fails if property does not exist', () => {\n    assertError([{\n      // @ts-ignore\n      doesNotExist: false\n    }], [{\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/additionalProperties',\n      params: {\n        additionalProperty: 'doesNotExist'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'doesNotExist'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if redirects permanent is not a boolean","suites":["normalizeRoutes"],"updatePoint":{"line":571,"column":53,"index":15036},"line":571,"code":"  test('fails if redirects permanent is not a boolean', () => {\n    assertError([{\n      source: '/foo',\n      destination: '/bar',\n      permanent: 301\n    }], [{\n      dataPath: '[0].permanent',\n      keyword: 'type',\n      message: 'should be boolean',\n      params: {\n        type: 'boolean'\n      },\n      schemaPath: '#/items/properties/permanent/type'\n    }], redirectsSchema);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if redirects statusCode is not a number","suites":["normalizeRoutes"],"updatePoint":{"line":586,"column":53,"index":15427},"line":586,"code":"  test('fails if redirects statusCode is not a number', () => {\n    assertError([{\n      source: '/foo',\n      destination: '/bar',\n      statusCode: '301'\n    }], [{\n      dataPath: '[0].statusCode',\n      keyword: 'type',\n      message: 'should be integer',\n      params: {\n        type: 'integer'\n      },\n      schemaPath: '#/items/properties/statusCode/type'\n    }], redirectsSchema);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` use `dest`","suites":["normalizeRoutes"],"updatePoint":{"line":601,"column":54,"index":15824},"line":601,"code":"  test('fails if routes after `handle: hit` use `dest`', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/user$',\n      dest: '^/api/user$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 cannot define `dest` after `handle: hit`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` do not use `continue: true`","suites":["normalizeRoutes"],"updatePoint":{"line":614,"column":71,"index":16226},"line":614,"code":"  test('fails if routes after `handle: hit` do not use `continue: true`', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/user$',\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 must define `continue: true` after `handle: hit`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` use `status","suites":["normalizeRoutes"],"updatePoint":{"line":629,"column":55,"index":16655},"line":629,"code":"  test('fails if routes after `handle: hit` use `status', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/(.*)$',\n      status: 404,\n      continue: true\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 cannot define `status` after `handle: hit`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: miss` do not use `check: true`","suites":["normalizeRoutes"],"updatePoint":{"line":643,"column":69,"index":17071},"line":643,"code":"  test('fails if routes after `handle: miss` do not use `check: true`', () => {\n    const input = [{\n      handle: 'miss'\n    }, {\n      src: '^/user$',\n      dest: '^/api/user$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 must define `check: true` after `handle: miss`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: miss` do not use `continue: true`","suites":["normalizeRoutes"],"updatePoint":{"line":656,"column":72,"index":17481},"line":656,"code":"  test('fails if routes after `handle: miss` do not use `continue: true`', () => {\n    const input = [{\n      handle: 'miss'\n    }, {\n      src: '^/user$',\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error?.code, 'invalid_route');\n    assert.deepEqual(error?.message, 'Route at index 1 must define `continue: true` after `handle: miss`.');\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should normalize vercelConfig.routes","suites":["getTransformedRoutes"],"updatePoint":{"line":673,"column":44,"index":17946},"line":673,"code":"  test('should normalize vercelConfig.routes', () => {\n    const vercelConfig = {\n      routes: [{\n        src: '/page',\n        dest: '/page.html'\n      }]\n    };\n    const actual = getTransformedRoutes(vercelConfig);\n    const expected = normalizeRoutes(vercelConfig.routes);\n    assert.deepEqual(actual, expected);\n    assertValid(actual.routes);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should not error when routes is null and cleanUrls is true","suites":["getTransformedRoutes"],"updatePoint":{"line":685,"column":66,"index":18324},"line":685,"code":"  test('should not error when routes is null and cleanUrls is true', () => {\n    const vercelConfig = {\n      cleanUrls: true,\n      routes: null\n    };\n    // @ts-expect-error intentionally passing invalid `routes: null` here\n    const actual = getTransformedRoutes(vercelConfig);\n    assert.equal(actual.error, null);\n    assertValid(actual.routes);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should not error when has segment is used in destination","suites":["getTransformedRoutes"],"updatePoint":{"line":695,"column":64,"index":18680},"line":695,"code":"  test('should not error when has segment is used in destination', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/redirect',\n        destination: '/:url',\n        has: [{\n          type: 'query',\n          key: 'url',\n          value: '(?<url>.*)'\n        }]\n      }]\n    };\n\n    // @ts-expect-error not sure if this one is an error or not…\n    const actual = getTransformedRoutes(vercelConfig);\n    assert.equal(actual.error, null);\n    assertValid(actual.routes);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when routes is defined and cleanUrls is true","suites":["getTransformedRoutes"],"updatePoint":{"line":713,"column":65,"index":19179},"line":713,"code":"  test('should error when routes is defined and cleanUrls is true', () => {\n    const vercelConfig = {\n      cleanUrls: true,\n      routes: [{\n        src: '/page',\n        dest: '/file.html'\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_mixed_routes');\n    assert.equal(error?.message, 'If `rewrites`, `redirects`, `headers`, `cleanUrls` or `trailingSlash` are used, then `routes` cannot be present.');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":730,"column":52,"index":19745},"line":730,"code":"  test('should error when redirects is invalid regex', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '^/(*.)\\\\.html$',\n        destination: '/file.html'\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_redirect');\n    assert.equal(error?.message, 'Redirect at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":746,"column":54,"index":20273},"line":746,"code":"  test('should error when redirects is invalid pattern', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/:?',\n        destination: '/file.html'\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_redirect');\n    assert.equal(error?.message, 'Redirect at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects defines both permanent and statusCode","suites":["getTransformedRoutes"],"updatePoint":{"line":762,"column":73,"index":20787},"line":762,"code":"  test('should error when redirects defines both permanent and statusCode', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '^/both$',\n        destination: '/api/both',\n        permanent: false,\n        statusCode: 302\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_redirect');\n    assert.equal(error?.message, 'Redirect at index 0 cannot define both `permanent` and `statusCode` properties.');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when headers is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":780,"column":50,"index":21356},"line":780,"code":"  test('should error when headers is invalid regex', () => {\n    const vercelConfig = {\n      headers: [{\n        source: '^/(*.)\\\\.html$',\n        headers: [{\n          key: 'Cache-Control',\n          value: 'public, max-age=0, must-revalidate'\n        }]\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_header');\n    assert.equal(error?.message, 'Header at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when headers is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":799,"column":52,"index":21959},"line":799,"code":"  test('should error when headers is invalid pattern', () => {\n    const vercelConfig = {\n      headers: [{\n        source: '/:?',\n        headers: [{\n          key: 'x-hello',\n          value: 'world'\n        }]\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_header');\n    assert.equal(error?.message, 'Header at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when rewrites is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":818,"column":51,"index":22493},"line":818,"code":"  test('should error when rewrites is invalid regex', () => {\n    const vercelConfig = {\n      rewrites: [{\n        source: '^/(*.)\\\\.html$',\n        destination: '/file.html'\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_rewrite');\n    assert.equal(error?.message, 'Rewrite at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when rewrites is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":834,"column":53,"index":23017},"line":834,"code":"  test('should error when rewrites is invalid pattern', () => {\n    const vercelConfig = {\n      rewrites: [{\n        source: '/:?',\n        destination: '/file.html'\n      }]\n    };\n    const {\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.notEqual(error, null);\n    assert.equal(error?.code, 'invalid_rewrite');\n    assert.equal(error?.message, 'Rewrite at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(error?.link);\n    assert.ok(error?.action);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should normalize all redirects before rewrites","suites":["getTransformedRoutes"],"updatePoint":{"line":850,"column":54,"index":23509},"line":850,"code":"  test('should normalize all redirects before rewrites', () => {\n    const vercelConfig = {\n      cleanUrls: true,\n      rewrites: [{\n        source: '/v1',\n        destination: '/v2/api.py'\n      }],\n      redirects: [{\n        source: '/help',\n        destination: '/support',\n        statusCode: 302\n      }, {\n        source: '/bug',\n        destination: 'https://example.com/bug',\n        statusCode: 308\n      }]\n    };\n    const {\n      error,\n      routes\n    } = getTransformedRoutes(vercelConfig);\n    const expected = [{\n      src: '^/(?:(.+)/)?index(?:\\\\.html)?/?$',\n      headers: {\n        Location: '/$1'\n      },\n      status: 308\n    }, {\n      src: '^/(.*)\\\\.html/?$',\n      headers: {\n        Location: '/$1'\n      },\n      status: 308\n    }, {\n      src: '^/help$',\n      headers: {\n        Location: '/support'\n      },\n      status: 302\n    }, {\n      src: '^/bug$',\n      headers: {\n        Location: 'https://example.com/bug'\n      },\n      status: 308\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/v1$',\n      dest: '/v2/api.py',\n      check: true\n    }];\n    assert.deepEqual(error, null);\n    assert.deepEqual(routes, expected);\n    assertValid(routes, routesSchema);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should validate schemas","suites":["getTransformedRoutes"],"updatePoint":{"line":906,"column":31,"index":24700},"line":906,"code":"  test('should validate schemas', () => {\n    const vercelConfig = {\n      cleanUrls: true,\n      rewrites: [{\n        source: '/page',\n        destination: '/page.html'\n      }, {\n        source: '/home',\n        destination: '/index.html'\n      }, {\n        source: '/home',\n        destination: '/another',\n        has: [{\n          type: 'header',\n          key: 'x-rewrite'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }]\n      }],\n      redirects: [{\n        source: '/version1',\n        destination: '/api1.py'\n      }, {\n        source: '/version2',\n        destination: '/api2.py',\n        statusCode: 302\n      }, {\n        source: '/version3',\n        destination: '/api3.py',\n        permanent: true\n      }, {\n        source: '/version4',\n        destination: '/api4.py',\n        has: [{\n          type: 'header',\n          key: 'x-redirect'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }],\n        permanent: false\n      }],\n      headers: [{\n        source: '/(.*)',\n        headers: [{\n          key: 'Access-Control-Allow-Origin',\n          value: '*'\n        }]\n      }, {\n        source: '/404',\n        headers: [{\n          key: 'Cache-Control',\n          value: 'max-age=300'\n        }, {\n          key: 'Set-Cookie',\n          value: 'error=404'\n        }]\n      }, {\n        source: '/add-header',\n        has: [{\n          type: 'header',\n          key: 'x-header'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }],\n        headers: [{\n          key: 'Cache-Control',\n          value: 'max-age=forever'\n        }]\n      }],\n      trailingSlashSchema: false\n    };\n    assertValid(vercelConfig.cleanUrls, cleanUrlsSchema);\n    assertValid(vercelConfig.rewrites, rewritesSchema);\n    assertValid(vercelConfig.redirects, redirectsSchema);\n    assertValid(vercelConfig.headers, headersSchema);\n    assertValid(vercelConfig.trailingSlashSchema, trailingSlashSchema);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should return null routes if no transformations are performed","suites":["getTransformedRoutes"],"updatePoint":{"line":1010,"column":69,"index":27256},"line":1010,"code":"  test('should return null routes if no transformations are performed', () => {\n    const vercelConfig = {\n      routes: null\n    };\n    // @ts-expect-error intentionally passing invalid `routes: null`\n    const {\n      routes\n    } = getTransformedRoutes(vercelConfig);\n    assert.equal(routes, null);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in `destination` but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1020,"column":78,"index":27574},"line":1020,"code":"  test('should error when segment is defined in `destination` but not `source`', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: '/:another'\n      }]\n    };\n    const {\n      routes,\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.deepEqual(routes, null);\n    assert.ok(error?.message.includes('in `destination` property but not in `source` or `has` property'), error?.message);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in HTTPS `destination` but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1034,"column":84,"index":28044},"line":1034,"code":"  test('should error when segment is defined in HTTPS `destination` but not `source`', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: 'https://example.com/:another'\n      }]\n    };\n    const {\n      routes,\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.deepEqual(routes, null);\n    assert.ok(error?.message.includes('in `destination` property but not in `source` or `has` property'), error?.message);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in `destination` query string but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1048,"column":91,"index":28540},"line":1048,"code":"  test('should error when segment is defined in `destination` query string but not `source`', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: '/api/login?id=123&name=:name'\n      }]\n    };\n    const {\n      routes,\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.deepEqual(routes, null);\n    assert.ok(error?.message.includes('in `destination` property but not in `source` or `has` property'), error?.message);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in HTTPS `destination` query string but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1062,"column":97,"index":29042},"line":1062,"code":"  test('should error when segment is defined in HTTPS `destination` query string but not `source`', () => {\n    const vercelConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: 'https://example.com/api/login?id=123&name=:name'\n      }]\n    };\n    const {\n      routes,\n      error\n    } = getTransformedRoutes(vercelConfig);\n    assert.deepEqual(routes, null);\n    assert.ok(error?.message.includes('in `destination` property but not in `source` or `has` property'), error?.message);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should work with content-security-policy header containing URL","suites":["getTransformedRoutes"],"updatePoint":{"line":1076,"column":70,"index":29536},"line":1076,"code":"  test('should work with content-security-policy header containing URL', () => {\n    const vercelConfig = {\n      headers: [{\n        source: '/(.*)',\n        headers: [{\n          key: 'content-security-policy',\n          value: \"default-src 'self'; script-src 'self'; img-src 'self' https://*.example.com; style-src 'self' 'unsafe-inline'; connect-src 'self' https://*.examplpe.com wss://gateway.example.com; form-action 'self'\"\n        }, {\n          key: 'feature-policy',\n          value: \"accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'\"\n        }, {\n          key: 'referrer-policy',\n          value: 'strict-origin-when-cross-origin'\n        }, {\n          key: 'strict-transport-security',\n          value: 'max-age=31536000; includesubdomains; preload'\n        }, {\n          key: 'x-content-type-options',\n          value: 'nosniff'\n        }, {\n          key: 'x-frame-options',\n          value: 'sameorigin'\n        }, {\n          key: 'x-xss-protection',\n          value: '1; mode=block'\n        }]\n      }]\n    };\n    const actual = getTransformedRoutes(vercelConfig);\n    assert.deepEqual(actual.routes, [{\n      continue: true,\n      headers: {\n        'content-security-policy': \"default-src 'self'; script-src 'self'; img-src 'self' https://*.example.com; style-src 'self' 'unsafe-inline'; connect-src 'self' https://*.examplpe.com wss://gateway.example.com; form-action 'self'\",\n        'feature-policy': \"accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'\",\n        'referrer-policy': 'strict-origin-when-cross-origin',\n        'strict-transport-security': 'max-age=31536000; includesubdomains; preload',\n        'x-content-type-options': 'nosniff',\n        'x-frame-options': 'sameorigin',\n        'x-xss-protection': '1; mode=block'\n      },\n      src: '^(?:/(.*))$'\n    }]);\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes simple","suites":[],"updatePoint":{"line":4,"column":24,"index":156},"line":4,"code":"test('mergeRoutes simple', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem user routes","suites":[],"updatePoint":{"line":58,"column":47,"index":1077},"line":58,"code":"test('mergeRoutes handle filesystem user routes', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem build routes","suites":[],"updatePoint":{"line":116,"column":48,"index":2063},"line":116,"code":"test('mergeRoutes handle filesystem build routes', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem both user and builds","suites":[],"updatePoint":{"line":176,"column":56,"index":3097},"line":176,"code":"test('mergeRoutes handle filesystem both user and builds', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes continue true","suites":[],"updatePoint":{"line":238,"column":31,"index":4138},"line":238,"code":"test('mergeRoutes continue true', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2',\n    continue: true\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      continue: true\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    continue: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    continue: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    continue: true,\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true","suites":[],"updatePoint":{"line":316,"column":28,"index":5434},"line":316,"code":"test('mergeRoutes check true', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      check: true\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    check: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true, continue true, handle filesystem middle","suites":[],"updatePoint":{"line":392,"column":69,"index":6719},"line":392,"code":"test('mergeRoutes check true, continue true, handle filesystem middle', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1',\n    continue: true\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      check: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1',\n      check: true\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      continue: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    continue: true,\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    continue: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    continue: true,\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    check: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true, continue true, handle filesystem top","suites":[],"updatePoint":{"line":482,"column":66,"index":8261},"line":482,"code":"test('mergeRoutes check true, continue true, handle filesystem top', () => {\n  const userRoutes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/user1',\n    dest: '/u1'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n3',\n      check: true\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      src: '/python3',\n      dest: '/py3',\n      continue: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    continue: true,\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    continue: true,\n    dest: '/py3',\n    src: '/python3'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    check: true,\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes multiple handle values","suites":[],"updatePoint":{"line":558,"column":40,"index":9569},"line":558,"code":"test('mergeRoutes multiple handle values', () => {\n  const userRoutes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    handle: 'hit'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '/node2',\n      dest: '/n2',\n      continue: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '/node3',\n      dest: '/n3',\n      check: true\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '/python3',\n      dest: '/py3',\n      continue: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'miss'\n  }, {\n    continue: true,\n    dest: '/py3',\n    src: '/python3'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    check: true,\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    handle: 'hit'\n  }, {\n    continue: true,\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure `handle: error` comes last","suites":[],"updatePoint":{"line":662,"column":51,"index":11276},"line":662,"code":"test('mergeRoutes ensure `handle: error` comes last', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/static-build',\n    entrypoint: 'packge.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }]\n  }, {\n    use: '@vercel/zero-config-routes',\n    entrypoint: '/',\n    routes: [{\n      handle: 'error'\n    }, {\n      status: 404,\n      src: '^/(?!.*api).*$',\n      dest: '404.html'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    status: 301,\n    src: '^/home$',\n    headers: {\n      Location: '/'\n    }\n  }, {\n    handle: 'error'\n  }, {\n    status: 404,\n    src: '^/(?!.*api).*$',\n    dest: '404.html'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure beforeFiles comes after redirects (continue)","suites":[],"updatePoint":{"line":704,"column":69,"index":12082},"line":704,"code":"test('mergeRoutes ensure beforeFiles comes after redirects (continue)', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/next',\n    entrypoint: 'package.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }, {\n      src: '^/hello$',\n      dest: '/somewhere',\n      continue: true,\n      override: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/404$',\n      dest: '/404',\n      status: 404,\n      check: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    src: '^/home$',\n    status: 301,\n    headers: {\n      Location: '/'\n    }\n  }, {\n    src: '^/hello$',\n    dest: '/somewhere',\n    continue: true,\n    override: true\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '^/404$',\n    dest: '/404',\n    status: 404,\n    check: true\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure beforeFiles comes after redirects (check)","suites":[],"updatePoint":{"line":754,"column":66,"index":13012},"line":754,"code":"test('mergeRoutes ensure beforeFiles comes after redirects (check)', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/next',\n    entrypoint: 'package.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }, {\n      src: '^/hello$',\n      dest: '/somewhere',\n      check: true,\n      override: true\n    }, {\n      src: '^/.*$',\n      middleware: 0\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/404$',\n      dest: '/404',\n      status: 404,\n      caseSensitive: true,\n      check: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    src: '^/home$',\n    status: 301,\n    headers: {\n      Location: '/'\n    }\n  }, {\n    src: '^/hello$',\n    dest: '/somewhere',\n    check: true,\n    override: true\n  }, {\n    src: '^/.*$',\n    middleware: 0\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '^/404$',\n    dest: '/404',\n    status: 404,\n    check: true,\n    caseSensitive: true\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.ts","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should fail to build ","suites":[],"updatePoint":{"line":21,"column":39,"index":885},"line":21,"code":"    it(`should fail to build ${fixture}`, async () => {\n      try {\n        await testDeployment(path.join(fixturesPath, fixture));\n      } catch (err) {\n        expect(err).toBeTruthy();\n        expect(err.deployment).toBeTruthy();\n        expect(err.deployment.errorMessage).toBe(errMsg);\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/ruby/test"},{"name":"should build ","suites":[],"updatePoint":{"line":33,"column":29,"index":1265},"line":33,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment(path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"test.js","skipped":false,"dir":"packages/ruby/test"},{"name":"should parse config from Node.js file","suites":["getConfig()"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('should parse config from Node.js file', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/node.js');\n    const config = getConfig(project, sourcePath);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"memory\": 1024,\n        \"runtime\": \"nodejs\",\n      }\n    `);\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should parse config from Deno file","suites":["getConfig()"],"updatePoint":{"line":18,"column":40},"line":18,"code":"  it('should parse config from Deno file', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/deno.ts');\n    const config = getConfig(project, sourcePath, {\n      type: 'object',\n      properties: {\n        location: { type: 'string' },\n      },\n    } as const);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"location\": \"https://example.com/page\",\n        \"runtime\": \"deno\",\n      }\n    `);\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should return `null` when no config was exported","suites":["getConfig()"],"updatePoint":{"line":35,"column":54},"line":35,"code":"  it('should return `null` when no config was exported', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/no-config.js');\n    const config = getConfig(project, sourcePath);\n    expect(config).toBeNull();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should throw an error upon schema validation failure","suites":["getConfig()"],"updatePoint":{"line":42,"column":58},"line":42,"code":"  it('should throw an error upon schema validation failure', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/invalid-schema.js');\n    let err;\n    try {\n      getConfig(project, sourcePath);\n    } catch (_err) {\n      err = _err;\n    }\n    expect(err.message).toEqual('Invalid data');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"$input","suites":["extractExportedConstValue for swc","parses successfully"],"line":28,"code":"    test.each(TEST_CASES)('$input', ({ input, identifier, expected }) => {\n      const ast = parse(input);\n      const value = extractExportedConstValue(ast, identifier);\n      expect(value).toStrictEqual(expected);\n    });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"$input","suites":["extractExportedConstValue for swc","fails with UnsupportedValueError"],"line":36,"code":"    test.each(UNSUPPORTED_VALUE_CASES)('$input', ({ input, identifier }) => {\n      const ast = parse(input);\n      expect(() => {\n        extractExportedConstValue(ast, identifier);\n      }).toThrow(UnsupportedValueError);\n    });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"$input","suites":["extractExportedConstValue for swc","returns null if the declaration is not found"],"line":45,"code":"    test.each(NO_SUCH_DECLARATION_CASES)('$input', ({ input, identifier }) => {\n      const ast = parse(input);\n      const value = extractExportedConstValue(ast, identifier);\n      expect(value).toBe(null);\n    });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should parse config from Node.js file","suites":["getConfig for swc"],"updatePoint":{"line":54,"column":43},"line":54,"code":"  it('should parse config from Node.js file', () => {\n    const ast = parseFixture('fixtures/node.js');\n    const config = getConfig(ast, BaseFunctionConfigSchema);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"memory\": 1024,\n        \"runtime\": \"nodejs\",\n      }\n    `);\n  });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should parse config from Deno file","suites":["getConfig for swc"],"updatePoint":{"line":65,"column":40},"line":65,"code":"  it('should parse config from Deno file', () => {\n    const ast = parseFixture('fixtures/deno.ts');\n    const config = getConfig(ast, {\n      type: 'object',\n      properties: {\n        location: { type: 'string' },\n      },\n    } as const);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"location\": \"https://example.com/page\",\n        \"runtime\": \"deno\",\n      }\n    `);\n  });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should return `null` when no config was exported","suites":["getConfig for swc"],"updatePoint":{"line":81,"column":54},"line":81,"code":"  it('should return `null` when no config was exported', () => {\n    const ast = parseFixture('fixtures/no-config.js');\n    const config = getConfig(ast, BaseFunctionConfigSchema);\n    expect(config).toBeNull();\n  });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should throw an error upon schema validation failure","suites":["getConfig for swc"],"updatePoint":{"line":87,"column":58},"line":87,"code":"  it('should throw an error upon schema validation failure', () => {\n    const ast = parseFixture('fixtures/invalid-schema.js');\n    let err;\n    try {\n      getConfig(ast, BaseFunctionConfigSchema);\n    } catch (_err) {\n      err = _err;\n    }\n    expect(err.message).toEqual('Invalid data');\n  });","file":"swc.test.ts","skipped":false,"dir":"packages/static-config/test"}]}