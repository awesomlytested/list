{
    "repo": "strapi/strapi",
    "url": "https://github.com/strapi/strapi",
    "branch": "master",
    "configs": [
        {
            "package": "strapi",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-content-type-builder",
            "lang": "js",
            "dir": "packages/core/content-type-builder/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/strapi",
            "lang": "js",
            "dir": "packages/core/strapi/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-upload",
            "lang": "js",
            "dir": "packages/core/upload/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-graphql",
            "lang": "js",
            "dir": "packages/plugins/graphql/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-i18n",
            "lang": "js",
            "dir": "packages/plugins/i18n/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-users-permissions",
            "lang": "js",
            "dir": "packages/plugins/users-permissions/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "Successful creation of a collection type",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 46,
                "column": 50,
                "index": 1359
            },
            "line": 46,
            "code": "    test('Successful creation of a collection type', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'Test Collection Type',\n            singularName: 'test-collection-type',\n            pluralName: 'test-collection-types',\n            pluginOptions: {\n              i18n: {\n                localized: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  i18n: {\n                    localized: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: testCollectionTypeUID\n        }\n      });\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get collection type returns full schema and information",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 80,
                "column": 65,
                "index": 2279
            },
            "line": 80,
            "code": "    test('Get collection type returns full schema and information', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${testCollectionTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Successfull creation of a collection type with draftAndPublish enabled",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 88,
                "column": 80,
                "index": 2604
            },
            "line": 88,
            "code": "    test('Successfull creation of a collection type with draftAndPublish enabled', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'CT with DP',\n            singularName: 'ct-with-dp',\n            pluralName: 'ct-with-dps',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: ctWithDpUID\n        }\n      });\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get collection type returns full schema and informations with draftAndPublish",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 113,
                "column": 87,
                "index": 3293
            },
            "line": 113,
            "code": "    test('Get collection type returns full schema and informations with draftAndPublish', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${ctWithDpUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Cannot use same string for singularName and pluralName",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 121,
                "column": 64,
                "index": 3592
            },
            "line": 121,
            "code": "    test('Cannot use same string for singularName and pluralName', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'same string',\n            singularName: 'same-string',\n            pluralName: 'same-string',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'contentType: singularName and pluralName should be different',\n              name: 'ValidationError',\n              path: ['contentType']\n            }]\n          },\n          message: 'contentType: singularName and pluralName should be different',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "displayName, singularName and pluralName are required",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 154,
                "column": 63,
                "index": 4584
            },
            "line": 154,
            "code": "    test('displayName, singularName and pluralName are required', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'contentType.displayName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'displayName']\n            }, {\n              message: 'Content Type name `undefined` is already being used.',\n              name: 'ValidationError',\n              path: ['contentType', 'singularName']\n            }, {\n              message: 'contentType.singularName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'singularName']\n            }, {\n              message: 'Content Type name `undefined` is already being used.',\n              name: 'ValidationError',\n              path: ['contentType', 'pluralName']\n            }, {\n              message: 'contentType.pluralName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'pluralName']\n            }, {\n              message: 'contentType: singularName and pluralName should be different',\n              name: 'ValidationError',\n              path: ['contentType']\n            }]\n          },\n          message: '6 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Can edit displayName but singularName and pluralName are ignored",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 204,
                "column": 74,
                "index": 6327
            },
            "line": 204,
            "code": "    test('Can edit displayName but singularName and pluralName are ignored', async () => {\n      const uid = 'api::ct-with-dp.ct-with-dp';\n      let res = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${uid}`,\n        body: {\n          contentType: {\n            displayName: 'new displayName',\n            singularName: 'ct-with-dp-new',\n            pluralName: 'ct-with-dps-new',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      await restart();\n      res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${uid}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          uid,\n          schema: {\n            displayName: 'new displayName',\n            singularName: 'ct-with-dp',\n            // no change\n            pluralName: 'ct-with-dps',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Are \"%s\" and \"%s\" valid: %s",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "line": 248,
            "code": "    test.each([['kebab-case', 'kebab-cases', true], ['Kebab-case', 'Kebab-cases', false], ['kebab case', 'kebab cases', false], ['kebabCase', 'kebabCases', false], ['kebab@case', 'kebab@cases', false], ['my2space', 'my2spaces', true], ['2myspace', '2myspaces', false], ['my-3-space', 'my-3-spaces', true]])('Are \"%s\" and \"%s\" valid: %s', async (singularName, pluralName, isExpectedValid) => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'same string',\n            singularName,\n            pluralName,\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      if (isExpectedValid) {\n        expect(res.statusCode).toBe(201);\n      } else {\n        expect(res.statusCode).toBe(400);\n        expect(res.body).toEqual({\n          error: {\n            name: 'ValidationError',\n            message: '2 errors occurred',\n            details: {\n              errors: [{\n                message: 'contentType.singularName is not in kebab case (an-example-of-kebab-case)',\n                name: 'ValidationError',\n                path: ['contentType', 'singularName']\n              }, {\n                message: 'contentType.pluralName is not in kebab case (an-example-of-kebab-case)',\n                name: 'ValidationError',\n                path: ['contentType', 'pluralName']\n              }]\n            }\n          }\n        });\n      }\n    });",
            "file": "collection-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Validates input and return 400 in case of invalid input",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 29,
                "column": 65,
                "index": 690
            },
            "line": 29,
            "code": "    test('Validates input and return 400 in case of invalid input', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {}\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'attributes.required',\n              name: 'ValidationError',\n              path: ['component', 'attributes']\n            }, {\n              message: 'displayName.required',\n              name: 'ValidationError',\n              path: ['component', 'displayName']\n            }, {\n              message: 'category.required',\n              name: 'ValidationError',\n              path: ['component', 'category']\n            }]\n          },\n          message: '3 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Creates a component properly",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 60,
                "column": 38,
                "index": 1602
            },
            "line": 60,
            "code": "    test('Creates a component properly', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {\n            category: 'default',\n            displayName: 'Some Component',\n            pluginOptions: {\n              pluginName: {\n                option: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  pluginName: {\n                    option: true\n                  }\n                }\n              },\n              pic: {\n                type: 'media'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Errors on already existing components",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 97,
                "column": 47,
                "index": 2527
            },
            "line": 97,
            "code": "    test('Errors on already existing components', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {\n            category: 'default',\n            displayName: 'someComponent',\n            attributes: {}\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: 'component.alreadyExists'\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns valid enveloppe",
            "suites": [
                "Content Type Builder - Components",
                "Get /components"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33,
                "index": 3028
            },
            "line": 116,
            "code": "    test('Returns valid enveloppe', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: expect.any(Array)\n      });\n      res.body.data.forEach(el => {\n        expect(el).toMatchObject({\n          uid: expect.any(String),\n          schema: expect.objectContaining({\n            displayName: expect.any(String),\n            description: expect.any(String),\n            collectionName: expect.any(String),\n            attributes: expect.objectContaining({})\n          })\n        });\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns 404 on not found",
            "suites": [
                "Content Type Builder - Components",
                "GET /components/:uid"
            ],
            "updatePoint": {
                "line": 139,
                "column": 34,
                "index": 3742
            },
            "line": 139,
            "code": "    test('Returns 404 on not found', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/nonexistent-component'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns correct format",
            "suites": [
                "Content Type Builder - Components",
                "GET /components/:uid"
            ],
            "updatePoint": {
                "line": 149,
                "column": 32,
                "index": 4050
            },
            "line": 149,
            "code": "    test('Returns correct format', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          uid: 'default.some-component',\n          category: 'default',\n          schema: {\n            displayName: 'Some Component',\n            description: '',\n            collectionName: 'components_default_some_components',\n            pluginOptions: {\n              pluginName: {\n                option: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  pluginName: {\n                    option: true\n                  }\n                }\n              },\n              pic: {\n                type: 'media',\n                multiple: false,\n                required: false\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Throws 404 on updating non existent component",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 189,
                "column": 55,
                "index": 5167
            },
            "line": 189,
            "code": "    test('Throws 404 on updating non existent component', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/nonexistent-components'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Validates input and return 400 in case of invalid input",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 199,
                "column": 65,
                "index": 5509
            },
            "line": 199,
            "code": "    test('Validates input and return 400 in case of invalid input', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/default.some-component',\n        body: {\n          component: {\n            attributes: {}\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'displayName.required',\n              name: 'ValidationError',\n              path: ['component', 'displayName']\n            }, {\n              message: 'category.required',\n              name: 'ValidationError',\n              path: ['component', 'category']\n            }]\n          },\n          message: '2 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Updates a component properly",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 228,
                "column": 38,
                "index": 6331
            },
            "line": 228,
            "code": "    test('Updates a component properly', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/default.some-component',\n        body: {\n          component: {\n            category: 'default',\n            displayName: 'New Component',\n            attributes: {\n              name: {\n                type: 'string'\n              }\n            },\n            pluginOptions: {\n              pluginName: {\n                option: false\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n      const getRes = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body).toMatchObject({\n        data: {\n          uid: 'default.some-component',\n          schema: {\n            displayName: 'New Component',\n            pluginOptions: {\n              pluginName: {\n                option: false\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Throws 404 on non existent component",
            "suites": [
                "Content Type Builder - Components",
                "DELETE /components/:uid"
            ],
            "updatePoint": {
                "line": 277,
                "column": 46,
                "index": 7612
            },
            "line": 277,
            "code": "    test('Throws 404 on non existent component', async () => {\n      const res = await rq({\n        method: 'DELETE',\n        url: '/content-type-builder/components/nonexistent-components'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Deletes a component correctly",
            "suites": [
                "Content Type Builder - Components",
                "DELETE /components/:uid"
            ],
            "updatePoint": {
                "line": 287,
                "column": 39,
                "index": 7931
            },
            "line": 287,
            "code": "    test('Deletes a component correctly', async () => {\n      const res = await rq({\n        method: 'DELETE',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n      const tryGet = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(tryGet.statusCode).toBe(404);\n      expect(tryGet.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Successful creation of a single type",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 45,
                "column": 46,
                "index": 1197
            },
            "line": 45,
            "code": "    test('Successful creation of a single type', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'Test Single Type',\n            singularName: 'test-single-type',\n            pluralName: 'test-single-types',\n            pluginOptions: {\n              i18n: {\n                localized: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  i18n: {\n                    localized: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: singleTypeUID\n        }\n      });\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get single type returns full schema and information",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 80,
                "column": 61,
                "index": 2125
            },
            "line": 80,
            "code": "    test('Get single type returns full schema and information', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${singleTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Fails on invalid relations",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 88,
                "column": 36,
                "index": 2398
            },
            "line": 88,
            "code": "    test('Fails on invalid relations', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'singleType',\n            singularName: 'test-st',\n            pluralName: 'test-sts',\n            displayName: 'Tests-st',\n            attributes: {\n              relation: {\n                type: 'relation',\n                relation: 'oneTo',\n                target: 'plugin::users-permissions.user',\n                targetAttribute: 'test'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        error: {\n          details: {\n            errors: [{\n              message: 'must be one of the following values: oneToOne, oneToMany, morphOne, morphMany, morphToOne, morphToMany',\n              name: 'ValidationError',\n              path: ['contentType', 'attributes', 'relation', 'relation']\n            }]\n          },\n          message: 'must be one of the following values: oneToOne, oneToMany, morphOne, morphMany, morphToOne, morphToMany',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Cannot switch collectionType to singleType when multiple entries in DB",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 124,
                "column": 80,
                "index": 3661
            },
            "line": 124,
            "code": "    test('Cannot switch collectionType to singleType when multiple entries in DB', async () => {\n      const createRes = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'collectionType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(createRes.statusCode).toBe(201);\n      await restart();\n      const {\n        uid\n      } = createRes.body.data;\n\n      // create data\n      for (let i = 0; i < 2; i += 1) {\n        await strapi.query(uid).create({\n          data: {\n            title: 'Test'\n          }\n        });\n      }\n      const updateRes = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${uid}`,\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      expect(updateRes.body.error).toMatch('multiple entries in DB');\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should add a relation field",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 176,
                "column": 37,
                "index": 5071
            },
            "line": 176,
            "code": "    test('Should add a relation field', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${singleTypeUID}`,\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              relation: {\n                private: true,\n                type: 'relation',\n                relation: 'oneToOne',\n                target: 'plugin::users-permissions.user'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: singleTypeUID\n        }\n      });\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should contain a private relation field",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 204,
                "column": 49,
                "index": 5884
            },
            "line": 204,
            "code": "    test('Should contain a private relation field', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${singleTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.schema.attributes.relation).toBeDefined();\n      expect(res.body.data.schema.attributes.relation.private).toBeTruthy();\n    });",
            "file": "single-type.test.api.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        }
    ],
    "error": "Exclusive tests detected. `.only` call found in api/sanitize/sanitize-query.test.api.js:135\nRemove `.only` to restore test checks"
}