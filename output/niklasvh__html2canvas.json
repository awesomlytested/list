{
    "repo": "niklasvh/html2canvas",
    "url": "https://github.com/niklasvh/html2canvas",
    "branch": "master",
    "configs": [
        {
            "package": "html2canvas",
            "lang": "ts",
            "dir": "tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "bisque",
            "suites": [
                "Colors",
                "named colors"
            ],
            "updatePoint": {
                "line": 6,
                "column": 18
            },
            "line": 6,
            "code": "        it('bisque', () => {\n            const c = new Color('bisque');\n            assertColor(c, 255, 228, 196, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "BLUE",
            "suites": [
                "Colors",
                "named colors"
            ],
            "updatePoint": {
                "line": 12,
                "column": 16
            },
            "line": 12,
            "code": "        it('BLUE', () => {\n            const c = new Color('BLUE');\n            assertColor(c, 0, 0, 255, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgb(1,3,5)",
            "suites": [
                "Colors",
                "rgb()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 22
            },
            "line": 20,
            "code": "        it('rgb(1,3,5)', () => {\n            const c = new Color('rgb(1,3,5)');\n            assertColor(c, 1, 3, 5, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgb(222, 111, 50)",
            "suites": [
                "Colors",
                "rgb()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 29
            },
            "line": 26,
            "code": "        it('rgb(222, 111, 50)', () => {\n            const c = new Color('rgb(222, 111, 50)');\n            assertColor(c, 222, 111, 50, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgb( 222, 111 , 50)",
            "suites": [
                "Colors",
                "rgb()"
            ],
            "updatePoint": {
                "line": 32,
                "column": 31
            },
            "line": 32,
            "code": "        it('rgb( 222, 111 , 50)', () => {\n            const c = new Color('rgb(222 , 111 , 50)');\n            assertColor(c, 222, 111, 50, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgba(200,3,5,1)",
            "suites": [
                "Colors",
                "rgba()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 27
            },
            "line": 40,
            "code": "        it('rgba(200,3,5,1)', () => {\n            const c = new Color('rgba(200,3,5,1)');\n            assertColor(c, 200, 3, 5, 1);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgba(222, 111, 50, 0.22)",
            "suites": [
                "Colors",
                "rgba()"
            ],
            "updatePoint": {
                "line": 46,
                "column": 36
            },
            "line": 46,
            "code": "        it('rgba(222, 111, 50, 0.22)', () => {\n            const c = new Color('rgba(222, 111, 50, 0.22)');\n            assertColor(c, 222, 111, 50, 0.22);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgba( 222, 111 , 50, 0.123 )",
            "suites": [
                "Colors",
                "rgba()"
            ],
            "updatePoint": {
                "line": 52,
                "column": 40
            },
            "line": 52,
            "code": "        it('rgba( 222, 111 , 50, 0.123 )', () => {\n            const c = new Color('rgba(222 , 111 , 50, 0.123)');\n            assertColor(c, 222, 111, 50, 0.123);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "#7FFFD4",
            "suites": [
                "Colors",
                "hex"
            ],
            "updatePoint": {
                "line": 60,
                "column": 19
            },
            "line": 60,
            "code": "        it('#7FFFD4', () => {\n            const c = new Color('#7FFFD4');\n            assertColor(c, 127, 255, 212, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "#f0ffff",
            "suites": [
                "Colors",
                "hex"
            ],
            "updatePoint": {
                "line": 66,
                "column": 19
            },
            "line": 66,
            "code": "        it('#f0ffff', () => {\n            const c = new Color('#f0ffff');\n            assertColor(c, 240, 255, 255, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "#fff",
            "suites": [
                "Colors",
                "hex"
            ],
            "updatePoint": {
                "line": 72,
                "column": 16
            },
            "line": 72,
            "code": "        it('#fff', () => {\n            const c = new Color('#fff');\n            assertColor(c, 255, 255, 255, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "[1,2,3]",
            "suites": [
                "Colors",
                "from array"
            ],
            "updatePoint": {
                "line": 80,
                "column": 19
            },
            "line": 80,
            "code": "        it('[1,2,3]', () => {\n            const c = new Color([1, 2, 3]);\n            assertColor(c, 1, 2, 3, null);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "[5,6,7,1]",
            "suites": [
                "Colors",
                "from array"
            ],
            "updatePoint": {
                "line": 86,
                "column": 21
            },
            "line": 86,
            "code": "        it('[5,6,7,1]', () => {\n            const c = new Color([5, 6, 7, 1]);\n            assertColor(c, 5, 6, 7, 1);\n            assert.equal(c.isTransparent(), false);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "[5,6,7,0]",
            "suites": [
                "Colors",
                "from array"
            ],
            "updatePoint": {
                "line": 92,
                "column": 21
            },
            "line": 92,
            "code": "        it('[5,6,7,0]', () => {\n            const c = new Color([5, 6, 7, 0]);\n            assertColor(c, 5, 6, 7, 0);\n            assert.equal(c.isTransparent(), true);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "transparent",
            "suites": [
                "Colors",
                "transparency"
            ],
            "updatePoint": {
                "line": 100,
                "column": 23
            },
            "line": 100,
            "code": "        it('transparent', () => {\n            const c = new Color('transparent');\n            assertColor(c, 0, 0, 0, 0);\n            assert.equal(c.isTransparent(), true);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "rgba(255,255,255,0)",
            "suites": [
                "Colors",
                "transparency"
            ],
            "updatePoint": {
                "line": 106,
                "column": 31
            },
            "line": 106,
            "code": "        it('rgba(255,255,255,0)', () => {\n            const c = new Color('rgba(255,255,255,0)');\n            assertColor(c, 255, 255, 255, 0);\n            assert.equal(c.isTransparent(), true);\n        });",
            "file": "node/color.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 6,
                "column": 24
            },
            "line": 6,
            "code": "        it('white, black', () => {\n            assert.equal(Gradient.transformWebkitRadialGradientArgs(['white', 'black'])[0], '');\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "circle, white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 10,
                "column": 32
            },
            "line": 10,
            "code": "        it('circle, white, black', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs(['circle', 'white', 'black'])[0],\n                'circle'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "10% 30%, white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 17,
                "column": 33
            },
            "line": 17,
            "code": "        it('10% 30%, white, black', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs(['10% 30%', 'white', 'black'])[0],\n                '10% 30%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "30% 30%, closest-corner, white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 24,
                "column": 49
            },
            "line": 24,
            "code": "        it('30% 30%, closest-corner, white, black', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '30% 30%',\n                    'closest-corner',\n                    'white',\n                    'black'\n                ])[0],\n                'closest-corner at 30% 30%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "30% 30%, circle closest-corner, white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 36,
                "column": 56
            },
            "line": 36,
            "code": "        it('30% 30%, circle closest-corner, white, black', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '30% 30%',\n                    'circle closest-corner',\n                    'white',\n                    'black'\n                ])[0],\n                'circle closest-corner at 30% 30%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "center, 5em 40px, white, black",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 48,
                "column": 42
            },
            "line": 48,
            "code": "        it('center, 5em 40px, white, black', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    'center',\n                    '5em 40px',\n                    'white',\n                    'black'\n                ])[0],\n                '5em 40px at center'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "45 45, 10, 52 50, 30, from(#A7D30C), to(red)",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 60,
                "column": 56
            },
            "line": 60,
            "code": "        it('45 45, 10, 52 50, 30, from(#A7D30C), to(red)', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '45 45',\n                    '10',\n                    '52 50',\n                    '30',\n                    'from(#A7D30C)'\n                ])[0],\n                '30px at 52px 50px'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "75% 19%, ellipse closest-side, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 73,
                "column": 76
            },
            "line": 73,
            "code": "        it('75% 19%, ellipse closest-side, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '75% 19%',\n                    'ellipse closest-side',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'ellipse closest-side at 75% 19%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "75% 19%, circle contain, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 86,
                "column": 70
            },
            "line": 86,
            "code": "        it('75% 19%, circle contain, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '75% 19%',\n                    'circle contain',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'circle closest-side at 75% 19%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "75% 19%, circle cover, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 99,
                "column": 68
            },
            "line": 99,
            "code": "        it('75% 19%, circle cover, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    '75% 19%',\n                    'circle cover',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'circle farthest-corner at 75% 19%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "right 19%, ellipse cover, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 112,
                "column": 71
            },
            "line": 112,
            "code": "        it('right 19%, ellipse cover, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    'right 19%',\n                    'ellipse cover',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'ellipse farthest-corner at right 19%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "left 19%, ellipse cover, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 125,
                "column": 70
            },
            "line": 125,
            "code": "        it('left 19%, ellipse cover, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    'left 19%',\n                    'ellipse cover',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'ellipse farthest-corner at left 19%'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "left top, circle cover, #ababab, #0000ff 33%,#991f1f 100%",
            "suites": [
                "Gradient",
                "transformWebkitRadialGradientArgs"
            ],
            "updatePoint": {
                "line": 138,
                "column": 69
            },
            "line": 138,
            "code": "        it('left top, circle cover, #ababab, #0000ff 33%,#991f1f 100%', () => {\n            assert.equal(\n                Gradient.transformWebkitRadialGradientArgs([\n                    'left top',\n                    'circle cover',\n                    '#ababab',\n                    '#0000ff 33%',\n                    '#991f1f 100%'\n                ])[0],\n                'circle farthest-corner at left top'\n            );\n        });",
            "file": "node/gradient.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should have html2canvas defined",
            "suites": [
                "Package"
            ],
            "updatePoint": {
                "line": 5,
                "column": 39
            },
            "line": 5,
            "code": "    it('should have html2canvas defined', () => {\n        assert.equal(typeof html2canvas, 'function');\n    });",
            "file": "node/package.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should have html2canvas defined",
            "suites": [
                "Package"
            ],
            "updatePoint": {
                "line": 9,
                "column": 39
            },
            "line": 9,
            "code": "    it('should have html2canvas defined', done => {\n        html2canvas('').catch(err => {\n            assert.equal(err, 'Provided element is not within a Document');\n            done();\n        });\n    });",
            "file": "node/package.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse string",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 5,
                "column": 27
            },
            "line": 5,
            "code": "    it('should parse string', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"hello\"'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: 'hello'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse string with (,)",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 11,
                "column": 36
            },
            "line": 11,
            "code": "    it('should parse string with (,)', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"a,b (c) d\"'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: 'a,b (c) d'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse string with escaped quotes",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 17,
                "column": 47
            },
            "line": 17,
            "code": "    it('should parse string with escaped quotes', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"3.14\\\\\"\"'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: '3.14\"'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse string with escape",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 23,
                "column": 39
            },
            "line": 23,
            "code": "    it('should parse string with escape', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"a\\\\) \\\\\\\\ b\"'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: 'a) \\\\ b'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse two strings",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 29,
                "column": 32
            },
            "line": 29,
            "code": "    it('should parse two strings', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"hello\" \\'world\\''), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: 'hello'},\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: 'world'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse counter",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 36,
                "column": 28
            },
            "line": 36,
            "code": "    it('should parse counter', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('counter(x)'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.COUNTER, name: 'x'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse counters",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 42,
                "column": 29
            },
            "line": 42,
            "code": "    it('should parse counters', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('counters(x, \"-\")'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.COUNTERS, name: 'x', glue: '-'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse strings and counters",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 48,
                "column": 41
            },
            "line": 48,
            "code": "    it('should parse strings and counters', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('\"[\"counters(c2, \" < \") \\']\\''), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: '['},\n            {type: PseudoNodeContent.TOKEN_TYPE.COUNTERS, name: 'c2', glue: ' < '},\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: ']'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse counter with format",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 56,
                "column": 40
            },
            "line": 56,
            "code": "    it('should parse counter with format', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('counter(x, lower-greek)'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.COUNTER, name: 'x', format: 'lower-greek'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse counters with format",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 62,
                "column": 41
            },
            "line": 62,
            "code": "    it('should parse counters with format', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('counters(x, \"-\", upper-roman)'), [\n            {\n                type: PseudoNodeContent.TOKEN_TYPE.COUNTERS,\n                name: 'x',\n                glue: '-',\n                format: 'upper-roman'\n            }\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse strings and counters with format",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 73,
                "column": 53
            },
            "line": 73,
            "code": "    it('should parse strings and counters with format', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent(\"\\\"[\\\"counters(c2, ' < ', disc) ']'\"), [\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: '['},\n            {type: PseudoNodeContent.TOKEN_TYPE.COUNTERS, name: 'c2', glue: ' < ', format: 'disc'},\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: ']'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse attr",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 81,
                "column": 25
            },
            "line": 81,
            "code": "    it('should parse attr', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('attr(id)'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.ATTRIBUTE, value: 'id'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse url",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 87,
                "column": 24
            },
            "line": 87,
            "code": "    it('should parse url', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('url(http://www.abc.de/f/g.png)'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.URL, value: 'http://www.abc.de/f/g.png'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse open-quote",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 93,
                "column": 31
            },
            "line": 93,
            "code": "    it('should parse open-quote', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('open-quote'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.OPENQUOTE}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse close-quote",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 99,
                "column": 32
            },
            "line": 99,
            "code": "    it('should parse close-quote', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('close-quote'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.CLOSEQUOTE}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should parse open-quote and string",
            "suites": [
                "PseudoNodeContent"
            ],
            "updatePoint": {
                "line": 105,
                "column": 42
            },
            "line": 105,
            "code": "    it('should parse open-quote and string', function() {\n        assert.deepEqual(PseudoNodeContent.parseContent('open-quote \"!\"'), [\n            {type: PseudoNodeContent.TOKEN_TYPE.OPENQUOTE},\n            {type: PseudoNodeContent.TOKEN_TYPE.STRING, value: '!'}\n        ]);\n    });",
            "file": "node/pseudonodecontent.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Should render untainted canvas",
            "suites": [],
            "updatePoint": {
                "line": 83,
                "column": 46
            },
            "line": 83,
            "code": "            it('Should render untainted canvas', async () => {\n                const contentWindow = testContainer.contentWindow;\n                if (!contentWindow) {\n                    throw new Error('Window not found for iframe');\n                }\n\n                contentWindow.addEventListener('unhandledrejection', (event) => {\n                    console.error(event.reason);\n                    throw new Error(`unhandledrejection: ${JSON.stringify(event.reason)}`);\n                });\n\n                const canvas: HTMLCanvasElement = await contentWindow\n                    // @ts-ignore\n                    .html2canvas(contentWindow.forceElement || contentWindow.document.documentElement, {\n                        removeContainer: true,\n                        backgroundColor: '#ffffff',\n                        proxy: 'http://localhost:8081/proxy',\n                        // @ts-ignore\n                        ...(contentWindow.h2cOptions || {})\n                    });\n\n                try {\n                    (canvas.getContext('2d') as CanvasRenderingContext2D).getImageData(\n                        0,\n                        0,\n                        canvas.width,\n                        canvas.height\n                    );\n                } catch (e) {\n                    throw new Error('Canvas is tainted');\n                }\n\n                // @ts-ignore\n                if (window.__karma__) {\n                    return uploadResults(canvas, url);\n                }\n            });",
            "file": "testrunner.ts",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "niklasvh__html2canvas.svg"
}