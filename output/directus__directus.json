{"repo":"directus/directus","url":"https://github.com/directus/directus","branch":"main","configs":[{"package":"directus-monorepo","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@directus/drive-azure","lang":"ts","dir":"packages/drive-azure/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@directus/drive-gcs","lang":"ts","dir":"packages/drive-gcs/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@directus/drive-s3","lang":"ts","dir":"packages/drive-s3/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@directus/drive","lang":"ts","dir":"packages/drive/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@directus/sdk","lang":"ts","dir":"packages/sdk/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"%s","suites":["/server","/ping"],"line":6,"code":"    it.each(vendors)('%s', async vendor => {\n      const response = await request(getUrl(vendor)).get('/server/ping').expect('Content-Type', /text\\/html/).expect(200);\n      expect(response.text).toBe('pong');\n    });","file":"api/ping.test.ts","skipped":false,"dir":"tests"},{"name":"Instantiate","suites":["drive"],"updatePoint":{"line":5,"column":16},"line":5,"code":"\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 'azure',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 'azure',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tcontainerName: 'containerName',\n\t\t\t\t\t\taccountName: 'accountName',\n\t\t\t\t\t\taccountKey: 'accountKey',\n\t\t\t\t\t\tendpoint: 'http://localhost/accountName',\n\t\t\t\t\t\troot: '/',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('azure', AzureBlobWebServicesStorage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(AzureBlobWebServicesStorage);\n\t});","file":"index.test.ts","skipped":false,"dir":"packages/drive-azure/tests"},{"name":"Instantiate","suites":["drive"],"updatePoint":{"line":5,"column":16},"line":5,"code":"\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 'gcs',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 'gcs',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tbucket: 'bucket',\n\t\t\t\t\t} as GoogleCloudStorageConfig,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('gcs', GoogleCloudStorage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(GoogleCloudStorage);\n\t});","file":"index.test.ts","skipped":false,"dir":"packages/drive-gcs/tests"},{"name":"Instantiate","suites":["drive"],"updatePoint":{"line":5,"column":16},"line":5,"code":"\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 's3',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 's3',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tbucket: 'bucket',\n\t\t\t\t\t\tkey: 'key',\n\t\t\t\t\t\tsecret: 'secret',\n\t\t\t\t\t} as AmazonWebServicesS3StorageConfig,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('s3', AmazonWebServicesS3Storage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(AmazonWebServicesS3Storage);\n\t});","file":"index.test.ts","skipped":false,"dir":"packages/drive-s3/tests"},{"name":"sets the raw exception object","suites":["AuthorizationRequired"],"updatePoint":{"line":13,"column":34},"line":13,"code":"\tit('sets the raw exception object', function () {\n\t\ttry {\n\t\t\tthrow new AuthorizationRequired(new Error('test'), '/some/path');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"driver should be set","suites":["DriverNotSupported"],"updatePoint":{"line":24,"column":25},"line":24,"code":"\tit('driver should be set', function () {\n\t\ttry {\n\t\t\tthrow DriverNotSupported.driver('alibaba');\n\t\t} catch (err: any) {\n\t\t\texpect(err.driver).toBeDefined();\n\t\t\texpect(err.driver).toBe('alibaba');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"driver should be set","suites":["DriverNotSupported"],"updatePoint":{"line":35,"column":25},"line":35,"code":"\tit('driver should be set', function () {\n\t\ttry {\n\t\t\tthrow DriverNotSupported.driver('alibaba');\n\t\t} catch (err: any) {\n\t\t\texpect(err.driver).toBeDefined();\n\t\t\texpect(err.driver).toBe('alibaba');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"missingDiskName","suites":["InvalidConfig"],"updatePoint":{"line":46,"column":20},"line":46,"code":"\tit('missingDiskName', function () {\n\t\tconst err = InvalidConfig.missingDiskName();\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"missingDiskConfig","suites":["InvalidConfig"],"updatePoint":{"line":52,"column":22},"line":52,"code":"\tit('missingDiskConfig', function () {\n\t\tconst err = InvalidConfig.missingDiskConfig('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"missingDiskDriver","suites":["InvalidConfig"],"updatePoint":{"line":58,"column":22},"line":58,"code":"\tit('missingDiskDriver', function () {\n\t\tconst err = InvalidConfig.missingDiskDriver('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"duplicateDiskName","suites":["InvalidConfig"],"updatePoint":{"line":64,"column":22},"line":64,"code":"\tit('duplicateDiskName', function () {\n\t\tconst err = InvalidConfig.duplicateDiskName('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"constructor","suites":["MethodNotSupported"],"updatePoint":{"line":72,"column":16},"line":72,"code":"\tit('constructor', function () {\n\t\tconst err = new MethodNotSupported('method', 'driver');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_METHOD_NOT_SUPPORTED');\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"constructor","suites":["NoSuchBucket"],"updatePoint":{"line":80,"column":16},"line":80,"code":"\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new NoSuchBucket(new Error('test'), 'bucket');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_NO_SUCH_BUCKET');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"constructor","suites":["PermissionMissing"],"updatePoint":{"line":93,"column":16},"line":93,"code":"\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new PermissionMissing(new Error('test'), 'bucket');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_PERMISSION_MISSING');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"constructor","suites":["UnknownException"],"updatePoint":{"line":106,"column":16},"line":106,"code":"\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new UnknownException(new Error('test'), 'ERR_CODE', __filename);\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.message).toContain(__filename);\n\t\t\texpect(err.message).toContain('ERR_CODE');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_UNKNOWN');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"constructor","suites":["WrongKeyPath "],"updatePoint":{"line":121,"column":16},"line":121,"code":"\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new WrongKeyPath(new Error('test'), 'some/path');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.message).toContain('some/path');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_WRONG_KEY_PATH');\n\t\t}\n\t});","file":"exceptions.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"Objects should be exported","suites":["drive"],"updatePoint":{"line":4,"column":31},"line":4,"code":"\tit('Objects should be exported', function () {\n\t\texpect(drive.Storage).toBeDefined();\n\t\texpect(drive.StorageManager).toBeDefined();\n\t\texpect(drive.LocalFileSystemStorage).toBeDefined();\n\t});","file":"index.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"get underlying driver","suites":["Local Driver"],"updatePoint":{"line":83,"column":26},"line":83,"code":"\tit('get underlying driver', async () => {\n\t\texpect(storage.driver()).toBeDefined();\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"find if a file exists","suites":["Local Driver"],"updatePoint":{"line":87,"column":26},"line":87,"code":"\tit('find if a file exists', async () => {\n\t\tawait fse.outputFile(realFsPath('i_exist'), testString);\n\t\tconst { exists } = await storage.exists('i_exist');\n\n\t\texpect(exists).toBe(true);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"exists handles errors","suites":["Local Driver"],"updatePoint":{"line":95,"column":24},"line":94,"code":"\tit(\n\t\t'exists handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.exists('file')).rejects.toThrow('Mocked permission error');\n\t\t\t},\n\t\t\t{\n\t\t\t\tpathExists: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"find if a file doesn't exist","suites":["Local Driver"],"updatePoint":{"line":106,"column":33},"line":106,"code":"\tit(`find if a file doesn't exist`, async () => {\n\t\tconst { exists } = await storage.exists('i_dont_exist');\n\n\t\texpect(exists).toBe(false);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"find if a folder exists","suites":["Local Driver"],"updatePoint":{"line":112,"column":28},"line":112,"code":"\tit('find if a folder exists', async () => {\n\t\tawait fse.ensureDir(realFsPath('test_dir'));\n\t\tconst { exists } = await storage.exists('test_dir');\n\n\t\texpect(exists).toBe(true);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"create a file","suites":["Local Driver"],"updatePoint":{"line":119,"column":18},"line":119,"code":"\tit('create a file', async () => {\n\t\tawait storage.put('im_new', testString);\n\t\tconst { content } = await storage.get('im_new');\n\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"create a file in a deep directory","suites":["Local Driver"],"updatePoint":{"line":126,"column":38},"line":126,"code":"\tit('create a file in a deep directory', async () => {\n\t\tawait storage.put('deep/directory/im_new', testString);\n\t\tconst { content } = await storage.get('deep/directory/im_new');\n\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"delete a file","suites":["Local Driver"],"updatePoint":{"line":133,"column":18},"line":133,"code":"\tit('delete a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_deleted'), '');\n\n\t\ttry {\n\t\t\tconst { wasDeleted } = await storage.delete('i_will_be_deleted');\n\t\t\texpect(wasDeleted).toBe(true);\n\n\t\t\tconst { exists } = await storage.exists('i_will_be_deleted');\n\t\t\texpect(exists).toBe(false);\n\t\t} catch (error: any) {\n\t\t\tif (!isWindowsDefenderError(error)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"delete rethrows","suites":["Local Driver"],"updatePoint":{"line":150,"column":18},"line":149,"code":"\tit(\n\t\t'delete rethrows',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.delete('file')).rejects.toThrow('Mocked permission error');\n\t\t\t},\n\t\t\t{\n\t\t\t\tunlink: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"delete a file that does not exist","suites":["Local Driver"],"updatePoint":{"line":161,"column":38},"line":161,"code":"\tit('delete a file that does not exist', async () => {\n\t\tconst { wasDeleted } = await storage.delete('i_dont_exist');\n\t\texpect(wasDeleted).toBe(false);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"move a file","suites":["Local Driver"],"updatePoint":{"line":166,"column":16},"line":166,"code":"\tit('move a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_renamed'), '');\n\t\tawait storage.move('i_will_be_renamed', 'im_renamed');\n\n\t\tconst { exists: newExists } = await storage.exists('im_renamed');\n\t\texpect(newExists).toBe(true);\n\n\t\tconst { exists: oldExists } = await storage.exists('i_will_be_renamed');\n\t\texpect(oldExists).toBe(false);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"copy a file","suites":["Local Driver"],"updatePoint":{"line":177,"column":16},"line":177,"code":"\tit('copy a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_copied'), '');\n\t\tawait storage.copy('i_will_be_copied', 'im_copied');\n\n\t\tconst { exists: newExists } = await storage.exists('im_copied');\n\t\texpect(newExists).toBe(true);\n\n\t\tconst { exists: oldExists } = await storage.exists('i_will_be_copied');\n\t\texpect(oldExists).toBe(true);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"copy handles errors","suites":["Local Driver"],"updatePoint":{"line":189,"column":22},"line":188,"code":"\tit(\n\t\t'copy handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.copy('src', 'dst')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file src'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tcopy: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"prepend to a file","suites":["Local Driver"],"updatePoint":{"line":202,"column":22},"line":202,"code":"\tit('prepend to a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_have_content'), 'world');\n\t\tawait storage.prepend('i_have_content', 'hello ');\n\n\t\tconst { content } = await storage.get('i_have_content');\n\t\texpect(content).toStrictEqual('hello world');\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"prepend handles errors","suites":["Local Driver"],"updatePoint":{"line":211,"column":25},"line":210,"code":"\tit(\n\t\t'prepend handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.prepend('prependFails', 'test')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file prependFails'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\treadFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"append to a file","suites":["Local Driver"],"updatePoint":{"line":224,"column":21},"line":224,"code":"\tit('append to a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_have_content'), 'hello');\n\t\tawait storage.append('i_have_content', ' universe');\n\n\t\tconst { content } = await storage.get('i_have_content');\n\t\texpect(content).toStrictEqual('hello universe');\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"append handles errors","suites":["Local Driver"],"updatePoint":{"line":233,"column":24},"line":232,"code":"\tit(\n\t\t'append handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.append('appendFails', 'test')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file appendFails'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tappendFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"prepend to new file","suites":["Local Driver"],"updatePoint":{"line":246,"column":24},"line":246,"code":"\tit('prepend to new file', async () => {\n\t\tawait storage.prepend('i_have_content', testString);\n\n\t\tconst { content } = await storage.get('i_have_content', 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw file not found exception when unable to find file","suites":["Local Driver"],"updatePoint":{"line":253,"column":60},"line":253,"code":"\tit('throw file not found exception when unable to find file', async () => {\n\t\texpect.assertions(1);\n\n\t\ttry {\n\t\t\tawait storage.get('non_existing', 'utf-8');\n\t\t} catch (error: any) {\n\t\t\texpect(error).toBeInstanceOf(CE.FileNotFound);\n\t\t}\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"do not get out of root path when path is absolute","suites":["Local Driver"],"updatePoint":{"line":263,"column":54},"line":263,"code":"\tit('do not get out of root path when path is absolute', async () => {\n\t\tconst dummyFile = '/dummy_file';\n\t\tawait storage.put(dummyFile, testString);\n\n\t\tconst content = fse.readFileSync(realFsPath(dummyFile), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"ignore extraneous double dots ..","suites":["Local Driver"],"updatePoint":{"line":271,"column":37},"line":271,"code":"\tit('ignore extraneous double dots ..', async () => {\n\t\tawait storage.put('../../../dummy_file', testString);\n\n\t\tconst content = fse.readFileSync(realFsPath('dummy_file'), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"do not ignore valid double dots ..","suites":["Local Driver"],"updatePoint":{"line":278,"column":39},"line":278,"code":"\tit('do not ignore valid double dots ..', async () => {\n\t\tawait storage.put('fake_dir/../dummy_file', testString);\n\n\t\tconst content = fse.readFileSync(realFsPath('dummy_file'), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"create file from stream","suites":["Local Driver"],"updatePoint":{"line":285,"column":28},"line":285,"code":"\tit('create file from stream', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst readStream = fse.createReadStream(realFsPath('foo'));\n\t\tawait storage.put('bar', readStream);\n\n\t\tconst { content } = await storage.get('bar');\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"get file as a buffer","suites":["Local Driver"],"updatePoint":{"line":295,"column":25},"line":295,"code":"\tit('get file as a buffer', async () => {\n\t\tawait fse.outputFile(realFsPath('eita'), testString);\n\n\t\tconst { content } = await storage.getBuffer('eita');\n\t\texpect(content).toBeInstanceOf(Buffer);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"getBuffer handles errors","suites":["Local Driver"],"updatePoint":{"line":303,"column":27},"line":302,"code":"\tit(\n\t\t'getBuffer handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.getBuffer('eita')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\treadFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"getStat handles errors","suites":["Local Driver"],"updatePoint":{"line":317,"column":25},"line":316,"code":"\tit(\n\t\t'getStat handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.getStat('eita')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tstat: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"move handles errors","suites":["Local Driver"],"updatePoint":{"line":331,"column":22},"line":330,"code":"\tit(\n\t\t'move handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.move('src', 'dst')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file src -> dst'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tmove: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"put handles errors","suites":["Local Driver"],"updatePoint":{"line":345,"column":21},"line":344,"code":"\tit(\n\t\t'put handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.put('eita', 'content')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\toutputFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"flatList handles errors","suites":["Local Driver"],"updatePoint":{"line":359,"column":26},"line":358,"code":"\tit(\n\t\t'flatList handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await getFlatList(storage)).rejects.toThrow('E_UNKNOWN');\n\t\t\t},\n\t\t\t{\n\t\t\t\topendir: new RuntimeException('Unknown', undefined, 'Unknown'),\n\t\t\t}\n\t\t)\n\t);","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw exception when unable to find file","suites":["Local Driver"],"updatePoint":{"line":370,"column":45},"line":370,"code":"\tit('throw exception when unable to find file', async () => {\n\t\texpect.assertions(1);\n\n\t\tconst readStream = storage.getStream('foo');\n\n\t\ttry {\n\t\t\tawait streamToString(readStream);\n\t\t} catch (err: any) {\n\t\t\texpect(err.code).toStrictEqual('ENOENT');\n\t\t}\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"get stream of a given file","suites":["Local Driver"],"updatePoint":{"line":382,"column":31},"line":382,"code":"\tit('get stream of a given file', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst readStream = storage.getStream('foo');\n\t\tconst content = await streamToString(readStream);\n\t\texpect(content).toStrictEqual(testString);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"get the stat of a given file","suites":["Local Driver"],"updatePoint":{"line":390,"column":33},"line":390,"code":"\tit('get the stat of a given file', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst { size, modified } = await storage.getStat('foo');\n\t\texpect(size).toEqual(testString.length);\n\t\t// It seems that the Date constructor used in fs-extra is not the global one.\n\t\texpect(modified.constructor.name).toStrictEqual('Date');\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with no prefix and empty directory","suites":["Local Driver"],"updatePoint":{"line":399,"column":50},"line":399,"code":"\tit('list files with no prefix and empty directory', async () => {\n\t\tconst result = await getFlatList(storage);\n\t\texpect(result).toStrictEqual([]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with prefix that does not exist","suites":["Local Driver"],"updatePoint":{"line":404,"column":47},"line":404,"code":"\tit('list files with prefix that does not exist', async () => {\n\t\tconst result = await getFlatList(storage, '/dummy/path');\n\t\texpect(result).toStrictEqual([]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with no prefix","suites":["Local Driver"],"updatePoint":{"line":409,"column":30},"line":409,"code":"\tit('list files with no prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage);\n\t\texpect(result.sort()).toStrictEqual(['foo.txt', path.normalize('foo/bar'), path.normalize('other/dir/file.txt')]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with folder prefix","suites":["Local Driver"],"updatePoint":{"line":420,"column":34},"line":420,"code":"\tit('list files with folder prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other');\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with subfolder prefix","suites":["Local Driver"],"updatePoint":{"line":431,"column":37},"line":431,"code":"\tit('list files with subfolder prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, `other/dir/`);\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with filename prefix","suites":["Local Driver"],"updatePoint":{"line":442,"column":36},"line":442,"code":"\tit('list files with filename prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other/dir/fil');\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"list files with double dots in prefix","suites":["Local Driver"],"updatePoint":{"line":453,"column":42},"line":453,"code":"\tit('list files with double dots in prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other/../');\n\t\texpect(result.sort()).toStrictEqual(['foo.txt', path.normalize('foo/bar'), path.normalize('other/dir/file.txt')]);\n\t});","file":"LocalFileSystemStorage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throws on all methods","suites":["Storage Class"],"updatePoint":{"line":4,"column":26},"line":4,"code":"\tit('throws on all methods', async () => {\n\t\tclass DumbStorage extends Storage {}\n\n\t\tconst driver = new DumbStorage();\n\n\t\texpect(() => driver.append('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method append is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.copy('src', 'desyt')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method copy is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.delete('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method delete is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.driver()).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method driver is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.exists('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method exists is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.get('location', 'encoding')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method get is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getBuffer('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getBuffer is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getSignedUrl('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getSignedUrl is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getStat('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getStat is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getStream('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getStream is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getUrl('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getUrl is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.move('src', 'dst')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method move is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.put('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method put is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.prepend('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method prepend is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.flatList('prefix')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method flatList is not supported for the driver DumbStorage'\n\t\t);\n\t});","file":"Storage.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw exception when no disk name is defined","suites":["Storage Manager"],"updatePoint":{"line":13,"column":49},"line":13,"code":"\tit('throw exception when no disk name is defined', () => {\n\t\tconst storageManager = new StorageManager({});\n\t\tconst fn = (): Storage => storageManager.disk();\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define a default disk name inside config file');\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw exception when disk config is missing","suites":["Storage Manager"],"updatePoint":{"line":19,"column":48},"line":19,"code":"\tit('throw exception when disk config is missing', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define config for local disk');\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw exception when disk config doesnt have driver","suites":["Storage Manager"],"updatePoint":{"line":28,"column":56},"line":28,"code":"\tit('throw exception when disk config doesnt have driver', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\t// @ts-expect-error No driver\n\t\t\t\tlocal: {},\n\t\t\t},\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define driver for local disk');\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"throw exception when driver is invalid","suites":["Storage Manager"],"updatePoint":{"line":41,"column":43},"line":41,"code":"\tit('throw exception when driver is invalid', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'foo',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('Driver foo is not supported');\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"return storage instance for a given driver","suites":["Storage Manager"],"updatePoint":{"line":58,"column":47},"line":58,"code":"\tit('return storage instance for a given driver', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tconst localDriver = storageManager.disk('local');\n\t\tconst localDriver2 = storageManager.disk('local');\n\n\t\texpect(localDriver).toBe(localDriver2);\n\n\t\texpect(localDriver).toBeInstanceOf(LocalFileSystemStorage);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"extend and add new drivers","suites":["Storage Manager"],"updatePoint":{"line":78,"column":31},"line":78,"code":"\tit('extend and add new drivers', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'foo',\n\t\t\t\t\tconfig: {},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tclass FooDriver extends Storage {}\n\t\tstorageManager.registerDriver('foo', FooDriver);\n\n\t\texpect(storageManager.disk('local')).toBeInstanceOf(FooDriver);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"add new disks","suites":["Storage Manager"],"updatePoint":{"line":95,"column":18},"line":95,"code":"\tit('add new disks', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorageManager.addDisk('home', {\n\t\t\tdriver: 'local',\n\t\t\tconfig: {\n\t\t\t\troot: '~',\n\t\t\t},\n\t\t});\n\n\t\texpect(storageManager.disk('home')).toBeInstanceOf(LocalFileSystemStorage);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"invalid disks can't be added","suites":["Storage Manager"],"updatePoint":{"line":118,"column":33},"line":118,"code":"\tit(\"invalid disks can't be added\", () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst fn = () =>\n\t\t\tstorageManager.addDisk('local', {\n\t\t\t\tdriver: 'local',\n\t\t\t\tconfig: {\n\t\t\t\t\troot: '',\n\t\t\t\t},\n\t\t\t});\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: A disk named local is already defined');\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"gets all instantiated disks","suites":["Storage Manager"],"updatePoint":{"line":142,"column":32},"line":142,"code":"\tit('gets all instantiated disks', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thome: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '~',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tlet disks = storageManager.getDisks().keys();\n\t\texpect([...disks]).toStrictEqual([]);\n\n\t\tstorageManager.disk('local');\n\t\tdisks = storageManager.getDisks().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['local']);\n\n\t\tstorageManager.disk('home');\n\t\tdisks = storageManager.getDisks().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['home', 'local']);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"gets all available drivers","suites":["Storage Manager"],"updatePoint":{"line":173,"column":31},"line":173,"code":"\tit('gets all available drivers', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thome: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '~',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tclass FooDriver extends Storage {}\n\t\tstorageManager.registerDriver('foo', FooDriver);\n\n\t\tclass BarDriver extends Storage {}\n\t\tstorageManager.registerDriver('bar', BarDriver);\n\n\t\tconst disks = storageManager.getDrivers().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['bar', 'foo', 'local']);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"},{"name":"get disk with custom config","suites":["Storage Manager"],"updatePoint":{"line":202,"column":32},"line":202,"code":"\tit('get disk with custom config', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst localWithDefaultConfig = storageManager.disk('local');\n\t\texpect(localWithDefaultConfig).toBeInstanceOf(LocalFileSystemStorage);\n\t});","file":"StorageManager.test.ts","skipped":false,"dir":"packages/drive/tests"}]}