{"repo":"socketio/socket.io","url":"https://github.com/socketio/socket.io","branch":"master","configs":[{"package":"basic-crud-server","lang":"js","dir":"examples/basic-crud-application/server/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"socket.io","lang":"ts","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should timeout if the client does not acknowledge the event","suites":["timeout"],"updatePoint":{"line":6,"column":65},"line":6,"code":"  it(\"should timeout if the client does not acknowledge the event\", (done) => {\n    const io = new Server(0);\n    const client = createClient(io, \"/\");\n\n    io.on(\"connection\", (socket) => {\n      socket.timeout(50).emit(\"unknown\", (err) => {\n        expect(err).to.be.an(Error);\n        success(done, io, client);\n      });\n    });\n  });","file":"socket-timeout.ts","skipped":false,"dir":"test"},{"name":"should timeout if the client does not acknowledge the event in time","suites":["timeout"],"updatePoint":{"line":18,"column":73},"line":18,"code":"  it(\"should timeout if the client does not acknowledge the event in time\", (done) => {\n    const io = new Server(0);\n    const client = createClient(io, \"/\");\n\n    client.on(\"echo\", (arg, cb) => {\n      cb(arg);\n    });\n\n    let count = 0;\n\n    io.on(\"connection\", (socket) => {\n      socket.timeout(0).emit(\"echo\", 42, (err) => {\n        expect(err).to.be.an(Error);\n        count++;\n      });\n    });\n\n    setTimeout(() => {\n      expect(count).to.eql(1);\n      success(done, io, client);\n    }, 200);\n  });","file":"socket-timeout.ts","skipped":false,"dir":"test"},{"name":"should not timeout if the client does acknowledge the event","suites":["timeout"],"updatePoint":{"line":41,"column":65},"line":41,"code":"  it(\"should not timeout if the client does acknowledge the event\", (done) => {\n    const io = new Server(0);\n    const client = createClient(io, \"/\");\n\n    client.on(\"echo\", (arg, cb) => {\n      cb(arg);\n    });\n\n    io.on(\"connection\", (socket) => {\n      socket.timeout(50).emit(\"echo\", 42, (err, value) => {\n        expect(err).to.be(null);\n        expect(value).to.be(42);\n        success(done, io, client);\n      });\n    });\n  });","file":"socket-timeout.ts","skipped":false,"dir":"test"},{"name":"infers correct types for listener parameters of reserved events","suites":["server","no event map","on"],"updatePoint":{"line":13,"column":73},"line":13,"code":"      it(\"infers correct types for listener parameters of reserved events\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectType<Socket<DefaultEventsMap, DefaultEventsMap>>(s);\n            s.on(\"disconnect\", (reason) => {\n              expectType<string>(reason);\n            });\n            s.on(\"disconnecting\", (reason) => {\n              expectType<string>(reason);\n            });\n          });\n          sio.on(\"connect\", (s) => {\n            expectType<Socket<DefaultEventsMap, DefaultEventsMap>>(s);\n          });\n          done();\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"infers 'any' for listener parameters of other events","suites":["server","no event map","on"],"updatePoint":{"line":33,"column":62},"line":33,"code":"      it(\"infers 'any' for listener parameters of other events\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            s.on(\"random\", (a, b, c) => {\n              expectType<any>(a);\n              expectType<any>(b);\n              expectType<any>(c);\n              done();\n            });\n            s.emit(\"random\", 1, \"2\", [3]);\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"infers 'any' for listener parameters of other events using enums","suites":["server","no event map","on"],"updatePoint":{"line":49,"column":74},"line":49,"code":"      it(\"infers 'any' for listener parameters of other events using enums\", () => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (socket) => {\n            expectType<Socket<DefaultEventsMap, DefaultEventsMap>>(socket);\n          });\n\n          enum Events {\n            CONNECTION = \"connection\",\n            TEST = \"test\",\n          }\n\n          sio.on(Events.CONNECTION, (socket) => {\n            // TODO(#3833): Make this expect `Socket<DefaultEventsMap, DefaultEventsMap>`\n            expectType<any>(socket);\n\n            socket.on(\"test\", (a, b, c) => {\n              expectType<any>(a);\n              expectType<any>(b);\n              expectType<any>(c);\n            });\n\n            socket.on(Events.TEST, (a, b, c) => {\n              expectType<any>(a);\n              expectType<any>(b);\n              expectType<any>(c);\n            });\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"accepts any parameters","suites":["server","no event map","emit"],"updatePoint":{"line":83,"column":32},"line":83,"code":"      it(\"accepts any parameters\", () => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            s.emit(\"random\", 1, \"2\", [3]);\n            s.emit(\"no parameters\");\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"infers correct types for listener parameters","suites":["server","single event map","on"],"updatePoint":{"line":102,"column":54},"line":102,"code":"      it(\"infers correct types for listener parameters\", (done) => {\n        const srv = createServer();\n        const sio = new Server<BidirectionalEvents>(srv);\n        expectType<Server<BidirectionalEvents, BidirectionalEvents>>(sio);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectType<Socket<BidirectionalEvents, BidirectionalEvents>>(s);\n            s.on(\"random\", (a, b, c) => {\n              expectType<number>(a);\n              expectType<string>(b);\n              expectType<number[]>(c);\n              done();\n            });\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"does not accept arguments of wrong types","suites":["server","single event map","on"],"updatePoint":{"line":119,"column":50},"line":119,"code":"      it(\"does not accept arguments of wrong types\", (done) => {\n        const srv = createServer();\n        const sio = new Server<BidirectionalEvents, BidirectionalEvents, {}>(\n          srv\n        );\n        expectError(sio.on(\"random\", (a, b, c) => {}));\n        srv.listen(() => {\n          expectError(sio.on(\"wrong name\", (s) => {}));\n          sio.on(\"connection\", (s) => {\n            s.on(\"random\", (a, b, c) => {});\n            expectError(s.on(\"random\"));\n            expectError(s.on(\"random\", (a, b, c, d) => {}));\n            expectError(s.on(2, 3));\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"accepts arguments of the correct types","suites":["server","single event map","emit"],"updatePoint":{"line":138,"column":48},"line":138,"code":"      it(\"accepts arguments of the correct types\", () => {\n        const srv = createServer();\n        const sio = new Server<BidirectionalEvents>(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            s.emit(\"random\", 1, \"2\", [3]);\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"does not accept arguments of the wrong types","suites":["server","single event map","emit"],"updatePoint":{"line":148,"column":54},"line":148,"code":"      it(\"does not accept arguments of the wrong types\", () => {\n        const srv = createServer();\n        const sio = new Server<BidirectionalEvents>(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectError(s.emit(\"noParameter\", 2));\n            expectError(s.emit(\"oneParameter\"));\n            expectError(s.emit(\"random\"));\n            expectError(s.emit(\"oneParameter\", 2, 3));\n            expectError(s.emit(\"random\", (a, b, c) => {}));\n            expectError(s.emit(\"wrong name\", () => {}));\n            expectError(s.emit(\"complicated name with spaces\", 2));\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"infers correct types for listener parameters","suites":["server","listen and emit event maps","on"],"updatePoint":{"line":176,"column":54},"line":176,"code":"      it(\"infers correct types for listener parameters\", (done) => {\n        const srv = createServer();\n        const sio = new Server<ClientToServerEvents, ServerToClientEvents>(srv);\n        expectType<Server<ClientToServerEvents, ServerToClientEvents>>(sio);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectType<Socket<ClientToServerEvents, ServerToClientEvents>>(s);\n            s.on(\"helloFromClient\", (message) => {\n              expectType<string>(message);\n              done();\n            });\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"does not accept emit events","suites":["server","listen and emit event maps","on"],"updatePoint":{"line":191,"column":37},"line":191,"code":"      it(\"does not accept emit events\", (done) => {\n        const srv = createServer();\n        const sio = new Server<ClientToServerEvents, ServerToClientEvents>(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectError(\n              s.on(\"helloFromServer\", (message, number) => {\n                done();\n              })\n            );\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"accepts arguments of the correct types","suites":["server","listen and emit event maps","emit"],"updatePoint":{"line":207,"column":48},"line":207,"code":"      it(\"accepts arguments of the correct types\", (done) => {\n        const srv = createServer();\n        const sio = new Server<ClientToServerEvents, ServerToClientEvents>(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            s.emit(\"helloFromServer\", \"hi\", 10);\n            done();\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"does not accept arguments of wrong types","suites":["server","listen and emit event maps","emit"],"updatePoint":{"line":218,"column":50},"line":218,"code":"      it(\"does not accept arguments of wrong types\", (done) => {\n        const srv = createServer();\n        const sio = new Server<ClientToServerEvents, ServerToClientEvents>(srv);\n        srv.listen(() => {\n          sio.on(\"connection\", (s) => {\n            expectError(s.emit(\"helloFromClient\", \"hi\"));\n            expectError(s.emit(\"helloFromServer\", \"hi\", 10, \"10\"));\n            expectError(s.emit(\"helloFromServer\", \"hi\", \"10\"));\n            expectError(s.emit(\"helloFromServer\", 0, 0));\n            expectError(s.emit(\"wrong name\", 10));\n            expectError(s.emit(\"wrong name\"));\n            done();\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"infers correct types for listener parameters","suites":["server","listen and emit event maps","on"],"updatePoint":{"line":250,"column":54},"line":250,"code":"      it(\"infers correct types for listener parameters\", () => {\n        const srv = createServer();\n        const sio = new Server<\n          ClientToServerEvents,\n          ServerToClientEvents,\n          InterServerEvents\n        >(srv);\n\n        expectType<\n          Server<ClientToServerEvents, ServerToClientEvents, InterServerEvents>\n        >(sio);\n        srv.listen(() => {\n          sio.serverSideEmit(\"helloFromServerToServer\", \"hello\", 10);\n          sio\n            .of(\"/test\")\n            .serverSideEmit(\"helloFromServerToServer\", \"hello\", 10);\n\n          sio.on(\"helloFromServerToServer\", (message, x) => {\n            expectType<string>(message);\n            expectType<number>(x);\n          });\n          sio.of(\"/test\").on(\"helloFromServerToServer\", (message, x) => {\n            expectType<string>(message);\n            expectType<number>(x);\n          });\n        });\n      });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"accepts arguments of the correct types","suites":["server","adapter"],"updatePoint":{"line":281,"column":46},"line":281,"code":"    it(\"accepts arguments of the correct types\", () => {\n      const io = new Server({\n        adapter: (nsp) => new Adapter(nsp),\n      });\n      io.adapter(Adapter);\n\n      class MyCustomAdapter extends Adapter {\n        constructor(nsp, readonly opts) {\n          super(nsp);\n        }\n      }\n      io.adapter((nsp) => new MyCustomAdapter(nsp, { test: \"123\" }));\n    });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"does not accept arguments of wrong types","suites":["server","adapter"],"updatePoint":{"line":295,"column":48},"line":295,"code":"    it(\"does not accept arguments of wrong types\", () => {\n      const io = new Server();\n      expectError(io.adapter((nsp) => \"nope\"));\n    });","file":"socket.io.test-d.ts","skipped":false,"dir":"test"},{"name":"should be the same version as client","suites":["socket.io"],"updatePoint":{"line":51,"column":42},"line":51,"code":"  it(\"should be the same version as client\", () => {\n    const version = require(\"../package\").version;\n    expect(version).to.be(require(\"socket.io-client/package.json\").version);\n  });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve client","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":93,"column":29},"line":93,"code":"      it(\"should serve client\", testSource(\"socket.io.js\"));","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve client with query string","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":95,"column":46},"line":94,"code":"      it(\n        \"should serve client with query string\",\n        testSource(\"socket.io.js?buster=\" + Date.now())\n      );","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve source map","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":98,"column":33},"line":98,"code":"      it(\"should serve source map\", testSourceMap(\"socket.io.js.map\"));","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve client (min)","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":99,"column":35},"line":99,"code":"      it(\"should serve client (min)\", testSource(\"socket.io.min.js\"));","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve source map (min)","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":102,"column":38},"line":101,"code":"      it(\n        \"should serve source map (min)\",\n        testSourceMap(\"socket.io.min.js.map\")\n      );","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve client (gzip)","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":106,"column":36},"line":106,"code":"      it(\"should serve client (gzip)\", (done) => {\n        const srv = createServer();\n        new Server(srv);\n        request(srv)\n          .get(\"/socket.io/socket.io.js\")\n          .set(\"accept-encoding\", \"gzip,br,deflate\")\n          .buffer(true)\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.headers[\"content-encoding\"]).to.be(\"gzip\");\n            expect(res.status).to.be(200);\n            done();\n          });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve bundle with msgpack parser","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":122,"column":48},"line":121,"code":"      it(\n        \"should serve bundle with msgpack parser\",\n        testSource(\"socket.io.msgpack.min.js\")\n      );","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve source map for bundle with msgpack parser","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":127,"column":63},"line":126,"code":"      it(\n        \"should serve source map for bundle with msgpack parser\",\n        testSourceMap(\"socket.io.msgpack.min.js.map\")\n      );","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve the ESM bundle","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":131,"column":37},"line":131,"code":"      it(\"should serve the ESM bundle\", testSource(\"socket.io.esm.min.js\"));","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should serve the source map for the ESM bundle","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":134,"column":55},"line":133,"code":"      it(\n        \"should serve the source map for the ESM bundle\",\n        testSourceMap(\"socket.io.esm.min.js.map\")\n      );","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle 304","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":138,"column":27},"line":138,"code":"      it(\"should handle 304\", (done) => {\n        const srv = createServer();\n        new Server(srv);\n        request(srv)\n          .get(\"/socket.io/socket.io.js\")\n          .set(\"If-None-Match\", '\"' + clientVersion + '\"')\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.statusCode).to.be(304);\n            done();\n          });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle 304","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":151,"column":27},"line":151,"code":"      it(\"should handle 304\", (done) => {\n        const srv = createServer();\n        new Server(srv);\n        request(srv)\n          .get(\"/socket.io/socket.io.js\")\n          .set(\"If-None-Match\", 'W/\"' + clientVersion + '\"')\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.statusCode).to.be(304);\n            done();\n          });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not serve static files","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":164,"column":39},"line":164,"code":"      it(\"should not serve static files\", (done) => {\n        const srv = createServer();\n        new Server(srv, { serveClient: false });\n        request(srv).get(\"/socket.io/socket.io.js\").expect(400, done);\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with #attach","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":170,"column":34},"line":170,"code":"      it(\"should work with #attach\", (done) => {\n        const srv = createServer((req, res) => {\n          res.writeHead(404);\n          res.end();\n        });\n        const sockets = new Server();\n        sockets.attach(srv);\n        request(srv)\n          .get(\"/socket.io/socket.io.js\")\n          .end((err, res) => {\n            if (err) return done(err);\n            expect(res.status).to.be(200);\n            done();\n          });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with #attach (and merge options)","suites":["socket.io","server attachment","http.Server"],"updatePoint":{"line":186,"column":54},"line":186,"code":"      it(\"should work with #attach (and merge options)\", () => {\n        const srv = createServer((req, res) => {\n          res.writeHead(404);\n          res.end();\n        });\n        const server = new Server({\n          pingTimeout: 6000,\n        });\n        server.attach(srv, {\n          pingInterval: 24000,\n        });\n        // @ts-ignore\n        expect(server.eio.opts.pingTimeout).to.eql(6000);\n        // @ts-ignore\n        expect(server.eio.opts.pingInterval).to.eql(24000);\n        server.close();\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be bound","suites":["socket.io","server attachment","port"],"updatePoint":{"line":206,"column":25},"line":206,"code":"      it(\"should be bound\", (done) => {\n        const io = new Server(0);\n\n        request(`http://localhost:${getPort(io)}`)\n          .get(\"/socket.io/socket.io.js\")\n          .expect(200, done);\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"with listen","suites":["socket.io","server attachment","port"],"updatePoint":{"line":214,"column":21},"line":214,"code":"      it(\"with listen\", (done) => {\n        const io = new Server().listen(0);\n\n        request(`http://localhost:${getPort(io)}`)\n          .get(\"/socket.io/socket.io.js\")\n          .expect(200, done);\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should send the Access-Control-Allow-xxx headers on OPTIONS request","suites":["socket.io","handshake"],"updatePoint":{"line":227,"column":75},"line":227,"code":"    it(\"should send the Access-Control-Allow-xxx headers on OPTIONS request\", (done) => {\n      const io = new Server(0, {\n        cors: {\n          origin: \"http://localhost:54023\",\n          methods: [\"GET\", \"POST\"],\n          allowedHeaders: [\"content-type\"],\n          credentials: true,\n        },\n      });\n      request\n        .options(`http://localhost:${getPort(io)}/socket.io/default/`)\n        .query({ transport: \"polling\", EIO: 4 })\n        .set(\"Origin\", \"http://localhost:54023\")\n        .end((err, res) => {\n          expect(res.status).to.be(204);\n\n          expect(res.headers[\"access-control-allow-origin\"]).to.be(\n            \"http://localhost:54023\"\n          );\n          expect(res.headers[\"access-control-allow-methods\"]).to.be(\"GET,POST\");\n          expect(res.headers[\"access-control-allow-headers\"]).to.be(\n            \"content-type\"\n          );\n          expect(res.headers[\"access-control-allow-credentials\"]).to.be(\"true\");\n          done();\n        });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should send the Access-Control-Allow-xxx headers on GET request","suites":["socket.io","handshake"],"updatePoint":{"line":255,"column":71},"line":255,"code":"    it(\"should send the Access-Control-Allow-xxx headers on GET request\", (done) => {\n      const io = new Server(0, {\n        cors: {\n          origin: \"http://localhost:54024\",\n          methods: [\"GET\", \"POST\"],\n          allowedHeaders: [\"content-type\"],\n          credentials: true,\n        },\n      });\n      request\n        .get(`http://localhost:${getPort(io)}/socket.io/default/`)\n        .query({ transport: \"polling\", EIO: 4 })\n        .set(\"Origin\", \"http://localhost:54024\")\n        .end((err, res) => {\n          expect(res.status).to.be(200);\n\n          expect(res.headers[\"access-control-allow-origin\"]).to.be(\n            \"http://localhost:54024\"\n          );\n          expect(res.headers[\"access-control-allow-credentials\"]).to.be(\"true\");\n          done();\n        });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should allow request if custom function in opts.allowRequest returns true","suites":["socket.io","handshake"],"updatePoint":{"line":279,"column":81},"line":279,"code":"    it(\"should allow request if custom function in opts.allowRequest returns true\", (done) => {\n      const io = new Server(0, {\n        allowRequest: (req, callback) => callback(null, true),\n      });\n\n      request\n        .get(`http://localhost:${getPort(io)}/socket.io/default/`)\n        .query({ transport: \"polling\", EIO: 4 })\n        .end((err, res) => {\n          expect(res.status).to.be(200);\n          done();\n        });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disallow request if custom function in opts.allowRequest returns false","suites":["socket.io","handshake"],"updatePoint":{"line":293,"column":85},"line":293,"code":"    it(\"should disallow request if custom function in opts.allowRequest returns false\", (done) => {\n      const io = new Server(0, {\n        allowRequest: (req, callback) => callback(null, false),\n      });\n      request\n        .get(`http://localhost:${getPort(io)}/socket.io/default/`)\n        .set(\"origin\", \"http://foo.example\")\n        .query({ transport: \"polling\", EIO: 4 })\n        .end((err, res) => {\n          expect(res.status).to.be(403);\n          done();\n        });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be able to close sio sending a srv","suites":["socket.io","close"],"updatePoint":{"line":309,"column":49},"line":309,"code":"    it(\"should be able to close sio sending a srv\", (done) => {\n      const httpServer = createServer().listen(0);\n      const io = new Server(httpServer);\n      const port = getPort(io);\n      const net = require(\"net\");\n      const server = net.createServer();\n\n      const clientSocket = client(httpServer, { reconnection: false });\n\n      clientSocket.on(\"disconnect\", () => {\n        expect(io.sockets.sockets.size).to.equal(0);\n        server.listen(port);\n      });\n\n      clientSocket.on(\"connect\", () => {\n        expect(io.sockets.sockets.size).to.equal(1);\n        io.close();\n      });\n\n      server.once(\"listening\", () => {\n        // PORT should be free\n        server.close((error) => {\n          expect(error).to.be(undefined);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be able to close sio sending a srv","suites":["socket.io","close"],"updatePoint":{"line":337,"column":49},"line":337,"code":"    it(\"should be able to close sio sending a srv\", (done) => {\n      const io = new Server(0);\n      const port = getPort(io);\n      const net = require(\"net\");\n      const server = net.createServer();\n\n      const clientSocket = ioc(\"ws://0.0.0.0:\" + port, {\n        reconnection: false,\n      });\n\n      clientSocket.on(\"disconnect\", () => {\n        expect(io.sockets.sockets.size).to.equal(0);\n        server.listen(port);\n      });\n\n      clientSocket.on(\"connect\", () => {\n        expect(io.sockets.sockets.size).to.equal(1);\n        io.close();\n      });\n\n      server.once(\"listening\", () => {\n        // PORT should be free\n        server.close((error) => {\n          expect(error).to.be(undefined);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should stop socket and timers","suites":["socket.io","close","graceful close"],"updatePoint":{"line":377,"column":39},"line":377,"code":"      it(\"should stop socket and timers\", (done) => {\n        exec(fixture(\"server-close.ts\"), done);\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be accessible through .sockets","suites":["socket.io","namespaces"],"updatePoint":{"line":384,"column":45},"line":384,"code":"    it(\"should be accessible through .sockets\", () => {\n      const sio = new Server();\n      expect(sio.sockets).to.be.a(Namespace);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be aliased","suites":["socket.io","namespaces"],"updatePoint":{"line":389,"column":25},"line":389,"code":"    it(\"should be aliased\", () => {\n      const sio = new Server();\n      expect(sio.use).to.be.a(\"function\");\n      expect(sio.to).to.be.a(\"function\");\n      expect(sio[\"in\"]).to.be.a(\"function\");\n      expect(sio.emit).to.be.a(\"function\");\n      expect(sio.send).to.be.a(\"function\");\n      expect(sio.write).to.be.a(\"function\");\n      expect(sio.allSockets).to.be.a(\"function\");\n      expect(sio.compress).to.be.a(\"function\");\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should return an immutable broadcast operator","suites":["socket.io","namespaces"],"updatePoint":{"line":401,"column":53},"line":401,"code":"    it(\"should return an immutable broadcast operator\", () => {\n      const sio = new Server();\n      const operator = sio.local.to([\"room1\", \"room2\"]).except(\"room3\");\n      operator.compress(true).emit(\"hello\");\n      operator.volatile.emit(\"hello\");\n      operator.to(\"room4\").emit(\"hello\");\n      operator.except(\"room5\").emit(\"hello\");\n      sio.to(\"room6\").emit(\"hello\");\n      // @ts-ignore\n      expect(operator.rooms).to.contain(\"room1\", \"room2\");\n      // @ts-ignore\n      expect(operator.exceptRooms).to.contain(\"room3\");\n      // @ts-ignore\n      expect(operator.flags).to.eql({ local: true });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should automatically connect","suites":["socket.io","namespaces"],"updatePoint":{"line":417,"column":36},"line":417,"code":"    it(\"should automatically connect\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"connect\", () => {\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should fire a `connection` event","suites":["socket.io","namespaces"],"updatePoint":{"line":428,"column":40},"line":428,"code":"    it(\"should fire a `connection` event\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (socket: Socket) => {\n          expect(socket).to.be.a(Socket);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should fire a `connect` event","suites":["socket.io","namespaces"],"updatePoint":{"line":440,"column":37},"line":440,"code":"    it(\"should fire a `connect` event\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connect\", (socket) => {\n          expect(socket).to.be.a(Socket);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with many sockets","suites":["socket.io","namespaces"],"updatePoint":{"line":452,"column":37},"line":452,"code":"    it(\"should work with many sockets\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        sio.of(\"/chat\");\n        sio.of(\"/news\");\n        const chat = client(srv, \"/chat\");\n        const news = client(srv, \"/news\");\n        let total = 2;\n        chat.on(\"connect\", () => {\n          --total || done();\n        });\n        news.on(\"connect\", () => {\n          --total || done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be able to equivalently start with \"\" or \"/\" on server","suites":["socket.io","namespaces"],"updatePoint":{"line":470,"column":69},"line":470,"code":"    it('should be able to equivalently start with \"\" or \"/\" on server', (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n      sio.of(\"\").on(\"connection\", () => {\n        --total || done();\n      });\n      sio.of(\"abc\").on(\"connection\", () => {\n        --total || done();\n      });\n      const c1 = client(srv, \"/\");\n      const c2 = client(srv, \"/abc\");\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be equivalent for \"\" and \"/\" on client","suites":["socket.io","namespaces"],"updatePoint":{"line":484,"column":53},"line":484,"code":"    it('should be equivalent for \"\" and \"/\" on client', (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      sio.of(\"/\").on(\"connection\", () => {\n        done();\n      });\n      const c1 = client(srv, \"\");\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with `of` and many sockets","suites":["socket.io","namespaces"],"updatePoint":{"line":493,"column":46},"line":493,"code":"    it(\"should work with `of` and many sockets\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const chat = client(srv, \"/chat\");\n        const news = client(srv, \"/news\");\n        let total = 2;\n        sio.of(\"/news\").on(\"connection\", (socket) => {\n          expect(socket).to.be.a(Socket);\n          --total || done();\n        });\n        sio.of(\"/news\").on(\"connection\", (socket) => {\n          expect(socket).to.be.a(Socket);\n          --total || done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with `of` second param","suites":["socket.io","namespaces"],"updatePoint":{"line":511,"column":42},"line":511,"code":"    it(\"should work with `of` second param\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const chat = client(srv, \"/chat\");\n        const news = client(srv, \"/news\");\n        let total = 2;\n        sio.of(\"/news\", (socket) => {\n          expect(socket).to.be.a(Socket);\n          --total || done();\n        });\n        sio.of(\"/news\", (socket) => {\n          expect(socket).to.be.a(Socket);\n          --total || done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disconnect upon transport disconnection","suites":["socket.io","namespaces"],"updatePoint":{"line":529,"column":54},"line":529,"code":"    it(\"should disconnect upon transport disconnection\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const chat = client(srv, \"/chat\");\n        const news = client(srv, \"/news\");\n        let total = 2;\n        let totald = 2;\n        let s;\n        sio.of(\"/news\", (socket) => {\n          socket.on(\"disconnect\", (reason) => {\n            --totald || done();\n          });\n          --total || close();\n        });\n        sio.of(\"/chat\", (socket) => {\n          s = socket;\n          socket.on(\"disconnect\", (reason) => {\n            --totald || done();\n          });\n          --total || close();\n        });\n        function close() {\n          s.disconnect(true);\n        }\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should fire a `disconnecting` event just before leaving all rooms","suites":["socket.io","namespaces"],"updatePoint":{"line":557,"column":73},"line":557,"code":"    it(\"should fire a `disconnecting` event just before leaving all rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n\n        sio.on(\"connection\", (s) => {\n          s.join(\"a\");\n          // FIXME not sure why process.nextTick() is needed here\n          process.nextTick(() => s.disconnect());\n\n          let total = 2;\n          s.on(\"disconnecting\", (reason) => {\n            expect(s.rooms).to.contain(s.id, \"a\");\n            total--;\n          });\n\n          s.on(\"disconnect\", (reason) => {\n            expect(s.rooms.size).to.eql(0);\n            --total || done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should return error connecting to non-existent namespace","suites":["socket.io","namespaces"],"updatePoint":{"line":582,"column":64},"line":582,"code":"    it(\"should return error connecting to non-existent namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, \"/doesnotexist\");\n        socket.on(\"connect_error\", (err) => {\n          expect(err.message).to.be(\"Invalid namespace\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not reuse same-namespace connections","suites":["socket.io","namespaces"],"updatePoint":{"line":594,"column":51},"line":594,"code":"    it(\"should not reuse same-namespace connections\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let connections = 0;\n\n      srv.listen(() => {\n        const clientSocket1 = client(srv);\n        const clientSocket2 = client(srv);\n        sio.on(\"connection\", () => {\n          connections++;\n          if (connections === 2) {\n            done();\n          }\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should find all clients in a namespace","suites":["socket.io","namespaces"],"updatePoint":{"line":611,"column":46},"line":611,"code":"    it(\"should find all clients in a namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const chatSids: string[] = [];\n      let otherSid: SocketId | null = null;\n      srv.listen(() => {\n        const c1 = client(srv, \"/chat\");\n        const c2 = client(srv, \"/chat\", { forceNew: true });\n        const c3 = client(srv, \"/other\", { forceNew: true });\n        let total = 3;\n        sio.of(\"/chat\").on(\"connection\", (socket) => {\n          chatSids.push(socket.id);\n          --total || getSockets();\n        });\n        sio.of(\"/other\").on(\"connection\", (socket) => {\n          otherSid = socket.id;\n          --total || getSockets();\n        });\n      });\n      async function getSockets() {\n        const sids = await sio.of(\"/chat\").allSockets();\n\n        expect(sids).to.contain(chatSids[0], chatSids[1]);\n        expect(sids).to.not.contain(otherSid);\n        done();\n      }\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should find all clients in a namespace room","suites":["socket.io","namespaces"],"updatePoint":{"line":639,"column":51},"line":639,"code":"    it(\"should find all clients in a namespace room\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let chatFooSid: SocketId | null = null;\n      let chatBarSid: SocketId | null = null;\n      let otherSid: SocketId | null = null;\n      srv.listen(() => {\n        const c1 = client(srv, \"/chat\");\n        const c2 = client(srv, \"/chat\", { forceNew: true });\n        const c3 = client(srv, \"/other\", { forceNew: true });\n        let chatIndex = 0;\n        let total = 3;\n        sio.of(\"/chat\").on(\"connection\", (socket) => {\n          if (chatIndex++) {\n            socket.join(\"foo\");\n            chatFooSid = socket.id;\n            --total || getSockets();\n          } else {\n            socket.join(\"bar\");\n            chatBarSid = socket.id;\n            --total || getSockets();\n          }\n        });\n        sio.of(\"/other\").on(\"connection\", (socket) => {\n          socket.join(\"foo\");\n          otherSid = socket.id;\n          --total || getSockets();\n        });\n      });\n      async function getSockets() {\n        const sids = await sio.of(\"/chat\").in(\"foo\").allSockets();\n\n        expect(sids).to.contain(chatFooSid);\n        expect(sids).to.not.contain(chatBarSid);\n        expect(sids).to.not.contain(otherSid);\n        done();\n      }\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should find all clients across namespace rooms","suites":["socket.io","namespaces"],"updatePoint":{"line":678,"column":54},"line":678,"code":"    it(\"should find all clients across namespace rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let chatFooSid: SocketId | null = null;\n      let chatBarSid: SocketId | null = null;\n      let otherSid: SocketId | null = null;\n      srv.listen(() => {\n        const c1 = client(srv, \"/chat\");\n        const c2 = client(srv, \"/chat\", { forceNew: true });\n        const c3 = client(srv, \"/other\", { forceNew: true });\n        let chatIndex = 0;\n        let total = 3;\n        sio.of(\"/chat\").on(\"connection\", (socket) => {\n          if (chatIndex++) {\n            socket.join(\"foo\");\n            chatFooSid = socket.id;\n            --total || getSockets();\n          } else {\n            socket.join(\"bar\");\n            chatBarSid = socket.id;\n            --total || getSockets();\n          }\n        });\n        sio.of(\"/other\").on(\"connection\", (socket) => {\n          socket.join(\"foo\");\n          otherSid = socket.id;\n          --total || getSockets();\n        });\n      });\n      async function getSockets() {\n        const sids = await sio.of(\"/chat\").allSockets();\n        expect(sids).to.contain(chatFooSid, chatBarSid);\n        expect(sids).to.not.contain(otherSid);\n        done();\n      }\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not emit volatile event after regular event","suites":["socket.io","namespaces"],"updatePoint":{"line":715,"column":58},"line":715,"code":"    it(\"should not emit volatile event after regular event\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            sio.of(\"/chat\").emit(\"ev\", \"data\");\n            sio.of(\"/chat\").volatile.emit(\"ev\", \"data\");\n          }, 50);\n        });\n\n        const socket = client(srv, \"/chat\");\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 500);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit volatile event","suites":["socket.io","namespaces"],"updatePoint":{"line":741,"column":34},"line":741,"code":"    it(\"should emit volatile event\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            sio.of(\"/chat\").volatile.emit(\"ev\", \"data\");\n          }, 100);\n        });\n\n        const socket = client(srv, \"/chat\");\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 500);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should enable compression by default","suites":["socket.io","namespaces"],"updatePoint":{"line":766,"column":44},"line":766,"code":"    it(\"should enable compression by default\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, \"/chat\");\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          s.conn.once(\"packetCreate\", (packet) => {\n            expect(packet.options.compress).to.be(true);\n            done();\n          });\n          sio.of(\"/chat\").emit(\"woot\", \"hi\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disable compression","suites":["socket.io","namespaces"],"updatePoint":{"line":781,"column":34},"line":781,"code":"    it(\"should disable compression\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, \"/chat\");\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          s.conn.once(\"packetCreate\", (packet) => {\n            expect(packet.options.compress).to.be(false);\n            done();\n          });\n          sio.of(\"/chat\").compress(false).emit(\"woot\", \"hi\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should throw on reserved event","suites":["socket.io","namespaces"],"updatePoint":{"line":796,"column":38},"line":796,"code":"    it(\"should throw on reserved event\", () => {\n      const sio = new Server();\n\n      expect(() => sio.emit(\"connect\")).to.throwException(\n        /\"connect\" is a reserved event name/\n      );\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should close a client without namespace","suites":["socket.io","namespaces"],"updatePoint":{"line":804,"column":47},"line":804,"code":"    it(\"should close a client without namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, {\n        connectTimeout: 10,\n      });\n\n      srv.listen(() => {\n        const socket = client(srv);\n\n        // @ts-ignore\n        socket.io.engine.write = () => {}; // prevent the client from sending a CONNECT packet\n\n        socket.on(\"disconnect\", () => {\n          socket.close();\n          sio.close();\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should exclude a specific socket when emitting","suites":["socket.io","namespaces"],"updatePoint":{"line":824,"column":54},"line":824,"code":"    it(\"should exclude a specific socket when emitting\", (done) => {\n      const srv = createServer();\n      const io = new Server(srv);\n\n      srv.listen(() => {\n        const socket1 = client(srv, \"/\");\n        const socket2 = client(srv, \"/\");\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"should not happen\"));\n        });\n        socket1.on(\"a\", () => {\n          done();\n        });\n\n        socket2.on(\"connect\", () => {\n          io.except(socket2.id).emit(\"a\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should exclude a specific socket when emitting (in a namespace)","suites":["socket.io","namespaces"],"updatePoint":{"line":845,"column":71},"line":845,"code":"    it(\"should exclude a specific socket when emitting (in a namespace)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      const nsp = sio.of(\"/nsp\");\n\n      srv.listen(() => {\n        const socket1 = client(srv, \"/nsp\");\n        const socket2 = client(srv, \"/nsp\");\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket1.on(\"a\", () => {\n          done();\n        });\n\n        socket2.on(\"connect\", () => {\n          nsp.except(socket2.id).emit(\"a\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should exclude a specific room when emitting","suites":["socket.io","namespaces"],"updatePoint":{"line":868,"column":52},"line":868,"code":"    it(\"should exclude a specific room when emitting\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      const nsp = sio.of(\"/nsp\");\n\n      srv.listen(() => {\n        const socket1 = client(srv, \"/nsp\");\n        const socket2 = client(srv, \"/nsp\");\n\n        socket1.on(\"a\", () => {\n          done();\n        });\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n\n        nsp.on(\"connection\", (socket) => {\n          socket.on(\"broadcast\", () => {\n            socket.join(\"room1\");\n            nsp.except(\"room1\").emit(\"a\");\n          });\n        });\n\n        socket2.emit(\"broadcast\");\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit an 'new_namespace' event","suites":["socket.io","namespaces"],"updatePoint":{"line":896,"column":44},"line":896,"code":"    it(\"should emit an 'new_namespace' event\", (done) => {\n      const sio = new Server();\n\n      sio.on(\"new_namespace\", (namespace) => {\n        expect(namespace.name).to.eql(\"/nsp\");\n        done();\n      });\n\n      sio.of(\"/nsp\");\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should allow connections to dynamic namespaces with a regex","suites":["socket.io","namespaces","dynamic namespaces"],"updatePoint":{"line":908,"column":69},"line":908,"code":"      it(\"should allow connections to dynamic namespaces with a regex\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        let count = 0;\n        srv.listen(() => {\n          const socket = client(srv, \"/dynamic-101\");\n          let dynamicNsp = sio\n            .of(/^\\/dynamic-\\d+$/)\n            .on(\"connect\", (socket) => {\n              expect(socket.nsp.name).to.be(\"/dynamic-101\");\n              dynamicNsp.emit(\"hello\", 1, \"2\", { 3: \"4\" });\n              if (++count === 4) done();\n            })\n            .use((socket, next) => {\n              next();\n              if (++count === 4) done();\n            });\n          socket.on(\"connect_error\", (err) => {\n            expect().fail();\n          });\n          socket.on(\"connect\", () => {\n            if (++count === 4) done();\n          });\n          socket.on(\"hello\", (a, b, c) => {\n            expect(a).to.eql(1);\n            expect(b).to.eql(\"2\");\n            expect(c).to.eql({ 3: \"4\" });\n            if (++count === 4) done();\n          });\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should allow connections to dynamic namespaces with a function","suites":["socket.io","namespaces","dynamic namespaces"],"updatePoint":{"line":940,"column":72},"line":940,"code":"      it(\"should allow connections to dynamic namespaces with a function\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          const socket = client(srv, \"/dynamic-101\");\n          sio.of((name, query, next) => next(null, \"/dynamic-101\" === name));\n          socket.on(\"connect\", done);\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disallow connections when no dynamic namespace matches","suites":["socket.io","namespaces","dynamic namespaces"],"updatePoint":{"line":950,"column":71},"line":950,"code":"      it(\"should disallow connections when no dynamic namespace matches\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          const socket = client(srv, \"/abc\");\n          sio.of(/^\\/dynamic-\\d+$/);\n          sio.of((name, query, next) => next(null, \"/dynamic-101\" === name));\n          socket.on(\"connect_error\", (err) => {\n            expect(err.message).to.be(\"Invalid namespace\");\n            done();\n          });\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit an 'new_namespace' event for a dynamic namespace","suites":["socket.io","namespaces","dynamic namespaces"],"updatePoint":{"line":964,"column":70},"line":964,"code":"      it(\"should emit an 'new_namespace' event for a dynamic namespace\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        srv.listen(() => {\n          sio.of(/^\\/dynamic-\\d+$/);\n\n          sio.on(\"new_namespace\", (namespace) => {\n            expect(namespace.name).to.be(\"/dynamic-101\");\n\n            socket.disconnect();\n            srv.close();\n            done();\n          });\n\n          const socket = client(srv, \"/dynamic-101\");\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle race conditions with dynamic namespaces (#4136)","suites":["socket.io","namespaces","dynamic namespaces"],"updatePoint":{"line":982,"column":71},"line":982,"code":"      it(\"should handle race conditions with dynamic namespaces (#4136)\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n        const counters = {\n          connected: 0,\n          created: 0,\n          events: 0,\n        };\n        const buffer: callback[] = [];\n        sio.on(\"new_namespace\", (namespace) => {\n          counters.created++;\n        });\n        srv.listen(() => {\n          const handler = () => {\n            if (++counters.events === 2) {\n              expect(counters.created).to.equal(1);\n              done();\n            }\n          };\n\n          sio\n            .of((name, query, next) => {\n              buffer.push(next);\n              if (buffer.length === 2) {\n                buffer.forEach((next) => next(null, true));\n              }\n            })\n            .on(\"connection\", (socket) => {\n              if (++counters.connected === 2) {\n                sio.of(\"/dynamic-101\").emit(\"message\");\n              }\n            });\n\n          let one = client(srv, \"/dynamic-101\");\n          let two = client(srv, \"/dynamic-101\");\n          one.on(\"message\", handler);\n          two.on(\"message\", handler);\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not fire events more than once after manually reconnecting","suites":["socket.io","socket"],"updatePoint":{"line":1025,"column":73},"line":1025,"code":"    it(\"should not fire events more than once after manually reconnecting\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const clientSocket = client(srv, { reconnection: false });\n        clientSocket.on(\"connect\", function init() {\n          clientSocket.off(\"connect\", init);\n          clientSocket.io.engine.close();\n\n          process.nextTick(() => {\n            clientSocket.connect();\n          });\n          clientSocket.on(\"connect\", () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not fire reconnect_failed event more than once when server closed","suites":["socket.io","socket"],"updatePoint":{"line":1044,"column":80},"line":1044,"code":"    it(\"should not fire reconnect_failed event more than once when server closed\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const clientSocket = client(srv, {\n          reconnectionAttempts: 3,\n          reconnectionDelay: 100,\n        });\n        clientSocket.on(\"connect\", () => {\n          sio.close();\n        });\n\n        clientSocket.io.on(\"reconnect_failed\", () => {\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events","suites":["socket.io","socket"],"updatePoint":{"line":1062,"column":29},"line":1062,"code":"    it(\"should receive events\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"random\", (a, b, c) => {\n            expect(a).to.be(1);\n            expect(b).to.be(\"2\");\n            expect(c).to.eql([3]);\n            done();\n          });\n          socket.emit(\"random\", 1, \"2\", [3]);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive message events through `send`","suites":["socket.io","socket"],"updatePoint":{"line":1079,"column":52},"line":1079,"code":"    it(\"should receive message events through `send`\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"message\", (a) => {\n            expect(a).to.be(1337);\n            done();\n          });\n          socket.send(1337);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should error with null messages","suites":["socket.io","socket"],"updatePoint":{"line":1094,"column":39},"line":1094,"code":"    it(\"should error with null messages\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"message\", (a) => {\n            expect(a).to.be(null);\n            done();\n          });\n          socket.send(null);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle transport null messages","suites":["socket.io","socket"],"updatePoint":{"line":1109,"column":45},"line":1109,"code":"    it(\"should handle transport null messages\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { reconnection: false });\n        sio.on(\"connection\", (s) => {\n          s.on(\"error\", (err) => {\n            expect(err).to.be.an(Error);\n            s.on(\"disconnect\", (reason) => {\n              expect(reason).to.be(\"forced close\");\n              done();\n            });\n          });\n          (s as any).client.ondata(null);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events","suites":["socket.io","socket"],"updatePoint":{"line":1127,"column":26},"line":1127,"code":"    it(\"should emit events\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"woot\", (a) => {\n          expect(a).to.be(\"tobi\");\n          done();\n        });\n        sio.on(\"connection\", (s) => {\n          s.emit(\"woot\", \"tobi\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with utf8 multibyte character","suites":["socket.io","socket"],"updatePoint":{"line":1142,"column":56},"line":1142,"code":"    it(\"should emit events with utf8 multibyte character\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        let i = 0;\n        socket.on(\"hoot\", (a) => {\n          expect(a).to.be(\"utf8 — string\");\n          i++;\n\n          if (3 == i) {\n            done();\n          }\n        });\n        sio.on(\"connection\", (s) => {\n          s.emit(\"hoot\", \"utf8 — string\");\n          s.emit(\"hoot\", \"utf8 — string\");\n          s.emit(\"hoot\", \"utf8 — string\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with binary data","suites":["socket.io","socket"],"updatePoint":{"line":1164,"column":43},"line":1164,"code":"    it(\"should emit events with binary data\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        let imageData;\n        socket.on(\"doge\", (a) => {\n          expect(Buffer.isBuffer(a)).to.be(true);\n          expect(imageData.length).to.equal(a.length);\n          expect(imageData[0]).to.equal(a[0]);\n          expect(imageData[imageData.length - 1]).to.equal(a[a.length - 1]);\n          done();\n        });\n        sio.on(\"connection\", (s) => {\n          fs.readFile(join(__dirname, \"support\", \"doge.jpg\"), (err, data) => {\n            if (err) return done(err);\n            imageData = data;\n            s.emit(\"doge\", data);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with several types of data (including binary)","suites":["socket.io","socket"],"updatePoint":{"line":1187,"column":72},"line":1187,"code":"    it(\"should emit events with several types of data (including binary)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"multiple\", (a, b, c, d, e, f) => {\n          expect(a).to.be(1);\n          expect(Buffer.isBuffer(b)).to.be(true);\n          expect(c).to.be(\"3\");\n          expect(d).to.eql([4]);\n          expect(Buffer.isBuffer(e)).to.be(true);\n          expect(Buffer.isBuffer(f[0])).to.be(true);\n          expect(f[1]).to.be(\"swag\");\n          expect(Buffer.isBuffer(f[2])).to.be(true);\n          done();\n        });\n        sio.on(\"connection\", (s) => {\n          fs.readFile(join(__dirname, \"support\", \"doge.jpg\"), (err, data) => {\n            if (err) return done(err);\n            const buf = Buffer.from(\"asdfasdf\", \"utf8\");\n            s.emit(\"multiple\", 1, data, \"3\", [4], buf, [data, \"swag\", buf]);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events with binary data","suites":["socket.io","socket"],"updatePoint":{"line":1213,"column":46},"line":1213,"code":"    it(\"should receive events with binary data\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"buff\", (a) => {\n            expect(Buffer.isBuffer(a)).to.be(true);\n            done();\n          });\n          const buf = Buffer.from(\"abcdefg\", \"utf8\");\n          socket.emit(\"buff\", buf);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events with several types of data (including binary)","suites":["socket.io","socket"],"updatePoint":{"line":1229,"column":75},"line":1229,"code":"    it(\"should receive events with several types of data (including binary)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"multiple\", (a, b, c, d, e, f) => {\n            expect(a).to.be(1);\n            expect(Buffer.isBuffer(b)).to.be(true);\n            expect(c).to.be(\"3\");\n            expect(d).to.eql([4]);\n            expect(Buffer.isBuffer(e)).to.be(true);\n            expect(Buffer.isBuffer(f[0])).to.be(true);\n            expect(f[1]).to.be(\"swag\");\n            expect(Buffer.isBuffer(f[2])).to.be(true);\n            done();\n          });\n          fs.readFile(join(__dirname, \"support\", \"doge.jpg\"), (err, data) => {\n            if (err) return done(err);\n            const buf = Buffer.from(\"asdfasdf\", \"utf8\");\n            socket.emit(\"multiple\", 1, data, \"3\", [4], buf, [\n              data,\n              \"swag\",\n              buf,\n            ]);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not emit volatile event after regular event (polling)","suites":["socket.io","socket"],"updatePoint":{"line":1259,"column":68},"line":1259,"code":"    it(\"should not emit volatile event after regular event (polling)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"polling\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          s.emit(\"ev\", \"data\");\n          s.volatile.emit(\"ev\", \"data\");\n        });\n\n        const socket = client(srv, { transports: [\"polling\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not emit volatile event after regular event (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1282,"column":63},"line":1282,"code":"    it(\"should not emit volatile event after regular event (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          s.emit(\"ev\", \"data\");\n          s.volatile.emit(\"ev\", \"data\");\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit volatile event (polling)","suites":["socket.io","socket"],"updatePoint":{"line":1305,"column":44},"line":1305,"code":"    it(\"should emit volatile event (polling)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"polling\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.volatile.emit(\"ev\", \"data\");\n          }, 100);\n        });\n\n        const socket = client(srv, { transports: [\"polling\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 500);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit volatile event (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1330,"column":39},"line":1330,"code":"    it(\"should emit volatile event (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.volatile.emit(\"ev\", \"data\");\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit only one consecutive volatile event (polling)","suites":["socket.io","socket"],"updatePoint":{"line":1355,"column":65},"line":1355,"code":"    it(\"should emit only one consecutive volatile event (polling)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"polling\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.volatile.emit(\"ev\", \"data\");\n            s.volatile.emit(\"ev\", \"data\");\n          }, 100);\n        });\n\n        const socket = client(srv, { transports: [\"polling\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 500);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit only one consecutive volatile event (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1381,"column":60},"line":1381,"code":"    it(\"should emit only one consecutive volatile event (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.volatile.emit(\"ev\", \"data\");\n            s.volatile.emit(\"ev\", \"data\");\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit only one consecutive volatile event with binary (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1407,"column":72},"line":1407,"code":"    it(\"should emit only one consecutive volatile event with binary (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.volatile.emit(\"ev\", Buffer.from([1, 2, 3]));\n            s.volatile.emit(\"ev\", Buffer.from([4, 5, 6]));\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should broadcast only one consecutive volatile event with binary (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1433,"column":77},"line":1433,"code":"    it(\"should broadcast only one consecutive volatile event with binary (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            sio.volatile.emit(\"ev\", Buffer.from([1, 2, 3]));\n            sio.volatile.emit(\"ev\", Buffer.from([4, 5, 6]));\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(1);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit regular events after trying a failed volatile event (polling)","suites":["socket.io","socket"],"updatePoint":{"line":1459,"column":81},"line":1459,"code":"    it(\"should emit regular events after trying a failed volatile event (polling)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"polling\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.emit(\"ev\", \"data\");\n            s.volatile.emit(\"ev\", \"data\");\n            s.emit(\"ev\", \"data\");\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"polling\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(2);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit regular events after trying a failed volatile event (ws)","suites":["socket.io","socket"],"updatePoint":{"line":1486,"column":76},"line":1486,"code":"    it(\"should emit regular events after trying a failed volatile event (ws)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, { transports: [\"websocket\"] });\n\n      let counter = 0;\n      srv.listen(() => {\n        sio.on(\"connection\", (s) => {\n          // Wait to make sure there are no packets being sent for opening the connection\n          setTimeout(() => {\n            s.emit(\"ev\", \"data\");\n            s.volatile.emit(\"ev\", \"data\");\n            s.emit(\"ev\", \"data\");\n          }, 20);\n        });\n\n        const socket = client(srv, { transports: [\"websocket\"] });\n        socket.on(\"ev\", () => {\n          counter++;\n        });\n      });\n\n      setTimeout(() => {\n        expect(counter).to.be(2);\n        done();\n      }, 200);\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit message events through `send`","suites":["socket.io","socket"],"updatePoint":{"line":1513,"column":49},"line":1513,"code":"    it(\"should emit message events through `send`\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"message\", (a) => {\n          expect(a).to.be(\"a\");\n          done();\n        });\n        sio.on(\"connection\", (s) => {\n          s.send(\"a\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive event with callbacks","suites":["socket.io","socket"],"updatePoint":{"line":1528,"column":43},"line":1528,"code":"    it(\"should receive event with callbacks\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"woot\", (fn) => {\n            fn(1, 2);\n          });\n          socket.emit(\"woot\", (a, b) => {\n            expect(a).to.be(1);\n            expect(b).to.be(2);\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive all events emitted from namespaced client immediately and in order","suites":["socket.io","socket"],"updatePoint":{"line":1546,"column":89},"line":1546,"code":"    it(\"should receive all events emitted from namespaced client immediately and in order\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 0;\n      srv.listen(() => {\n        sio.of(\"/chat\", (s) => {\n          s.on(\"hi\", (letter) => {\n            total++;\n            if (total == 2 && letter == \"b\") {\n              done();\n            } else if (total == 1 && letter != \"a\") {\n              throw new Error(\"events out of order\");\n            }\n          });\n        });\n\n        const chat = client(srv, \"/chat\");\n        chat.emit(\"hi\", \"a\");\n        setTimeout(() => {\n          chat.emit(\"hi\", \"b\");\n        }, 50);\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with callbacks","suites":["socket.io","socket"],"updatePoint":{"line":1570,"column":41},"line":1570,"code":"    it(\"should emit events with callbacks\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          socket.on(\"hi\", (fn) => {\n            fn();\n          });\n          s.emit(\"hi\", () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events with args and callback","suites":["socket.io","socket"],"updatePoint":{"line":1586,"column":52},"line":1586,"code":"    it(\"should receive events with args and callback\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"woot\", (a, b, fn) => {\n            expect(a).to.be(1);\n            expect(b).to.be(2);\n            fn();\n          });\n          socket.emit(\"woot\", 1, 2, () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with args and callback","suites":["socket.io","socket"],"updatePoint":{"line":1604,"column":49},"line":1604,"code":"    it(\"should emit events with args and callback\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          socket.on(\"hi\", (a, b, fn) => {\n            expect(a).to.be(1);\n            expect(b).to.be(2);\n            fn();\n          });\n          s.emit(\"hi\", 1, 2, () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events with binary args and callbacks","suites":["socket.io","socket"],"updatePoint":{"line":1622,"column":60},"line":1622,"code":"    it(\"should receive events with binary args and callbacks\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"woot\", (buf, fn) => {\n            expect(Buffer.isBuffer(buf)).to.be(true);\n            fn(1, 2);\n          });\n          socket.emit(\"woot\", Buffer.alloc(3), (a, b) => {\n            expect(a).to.be(1);\n            expect(b).to.be(2);\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events with binary args and callback","suites":["socket.io","socket"],"updatePoint":{"line":1641,"column":56},"line":1641,"code":"    it(\"should emit events with binary args and callback\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          socket.on(\"hi\", (a, fn) => {\n            expect(Buffer.isBuffer(a)).to.be(true);\n            fn();\n          });\n          s.emit(\"hi\", Buffer.alloc(4), () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should emit events and receive binary data in a callback","suites":["socket.io","socket"],"updatePoint":{"line":1658,"column":64},"line":1658,"code":"    it(\"should emit events and receive binary data in a callback\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          socket.on(\"hi\", (fn) => {\n            fn(Buffer.alloc(1));\n          });\n          s.emit(\"hi\", (a) => {\n            expect(Buffer.isBuffer(a)).to.be(true);\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should receive events and pass binary data in a callback","suites":["socket.io","socket"],"updatePoint":{"line":1675,"column":64},"line":1675,"code":"    it(\"should receive events and pass binary data in a callback\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.on(\"woot\", (fn) => {\n            fn(Buffer.alloc(2));\n          });\n          socket.emit(\"woot\", (a) => {\n            expect(Buffer.isBuffer(a)).to.be(true);\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should have access to the client","suites":["socket.io","socket"],"updatePoint":{"line":1692,"column":40},"line":1692,"code":"    it(\"should have access to the client\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          expect(s.client).to.be.an(\"object\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should have access to the connection","suites":["socket.io","socket"],"updatePoint":{"line":1704,"column":44},"line":1704,"code":"    it(\"should have access to the connection\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          expect(s.client.conn).to.be.an(\"object\");\n          expect(s.conn).to.be.an(\"object\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should have access to the request","suites":["socket.io","socket"],"updatePoint":{"line":1717,"column":41},"line":1717,"code":"    it(\"should have access to the request\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          expect(s.client.request.headers).to.be.an(\"object\");\n          expect(s.request.headers).to.be.an(\"object\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should see query parameters in the request","suites":["socket.io","socket"],"updatePoint":{"line":1730,"column":50},"line":1730,"code":"    it(\"should see query parameters in the request\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { query: { key1: 1, key2: 2 } });\n        sio.on(\"connection\", (s) => {\n          const parsed = require(\"url\").parse(s.request.url);\n          const query = require(\"querystring\").parse(parsed.query);\n          expect(query.key1).to.be(\"1\");\n          expect(query.key2).to.be(\"2\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should see query parameters sent from secondary namespace connections in handshake object","suites":["socket.io","socket"],"updatePoint":{"line":1745,"column":97},"line":1745,"code":"    it(\"should see query parameters sent from secondary namespace connections in handshake object\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const client1 = client(srv);\n      const client2 = client(srv, \"/connection2\", {\n        auth: { key1: \"aa\", key2: \"&=bb\" },\n      });\n      sio.on(\"connection\", (s) => {});\n      sio.of(\"/connection2\").on(\"connection\", (s) => {\n        expect(s.handshake.query.key1).to.be(undefined);\n        expect(s.handshake.query.EIO).to.be(\"4\");\n        expect(s.handshake.auth.key1).to.be(\"aa\");\n        expect(s.handshake.auth.key2).to.be(\"&=bb\");\n        done();\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle very large json","suites":["socket.io","socket"],"updatePoint":{"line":1762,"column":37},"line":1762,"code":"    it(\"should handle very large json\", function (done) {\n      this.timeout(30000);\n      const srv = createServer();\n      const sio = new Server(srv, { perMessageDeflate: false });\n      let received = 0;\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"big\", (a) => {\n          expect(Buffer.isBuffer(a.json)).to.be(false);\n          if (++received == 3) done();\n          else socket.emit(\"big\", a);\n        });\n        sio.on(\"connection\", (s) => {\n          fs.readFile(\n            join(__dirname, \"fixtures\", \"big.json\"),\n            (err, data: any) => {\n              if (err) return done(err);\n              data = JSON.parse(data);\n              s.emit(\"big\", { hello: \"friend\", json: data });\n            }\n          );\n          s.on(\"big\", (a) => {\n            s.emit(\"big\", a);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle very large binary data","suites":["socket.io","socket"],"updatePoint":{"line":1790,"column":44},"line":1790,"code":"    it(\"should handle very large binary data\", function (done) {\n      this.timeout(30000);\n      const srv = createServer();\n      const sio = new Server(srv, { perMessageDeflate: false });\n      let received = 0;\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"big\", (a) => {\n          expect(Buffer.isBuffer(a.image)).to.be(true);\n          if (++received == 3) done();\n          else socket.emit(\"big\", a);\n        });\n        sio.on(\"connection\", (s) => {\n          fs.readFile(join(__dirname, \"fixtures\", \"big.jpg\"), (err, data) => {\n            if (err) return done(err);\n            s.emit(\"big\", { hello: \"friend\", image: data });\n          });\n          s.on(\"big\", (a) => {\n            expect(Buffer.isBuffer(a.image)).to.be(true);\n            s.emit(\"big\", a);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be able to emit after server close and restart","suites":["socket.io","socket"],"updatePoint":{"line":1815,"column":61},"line":1815,"code":"    it(\"should be able to emit after server close and restart\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      sio.on(\"connection\", (socket) => {\n        socket.on(\"ev\", (data) => {\n          expect(data).to.be(\"payload\");\n          done();\n        });\n      });\n\n      srv.listen(() => {\n        const { port } = srv.address() as AddressInfo;\n        const clientSocket = client(srv, {\n          reconnectionAttempts: 10,\n          reconnectionDelay: 100,\n        });\n        clientSocket.once(\"connect\", () => {\n          sio.close(() => {\n            clientSocket.io.on(\"reconnect\", () => {\n              clientSocket.emit(\"ev\", \"payload\");\n            });\n            sio.listen(port);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should enable compression by default","suites":["socket.io","socket"],"updatePoint":{"line":1843,"column":44},"line":1843,"code":"    it(\"should enable compression by default\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, \"/chat\");\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          s.conn.once(\"packetCreate\", (packet) => {\n            expect(packet.options.compress).to.be(true);\n            done();\n          });\n          sio.of(\"/chat\").emit(\"woot\", \"hi\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disable compression","suites":["socket.io","socket"],"updatePoint":{"line":1858,"column":34},"line":1858,"code":"    it(\"should disable compression\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, \"/chat\");\n        sio.of(\"/chat\").on(\"connection\", (s) => {\n          s.conn.once(\"packetCreate\", (packet) => {\n            expect(packet.options.compress).to.be(false);\n            done();\n          });\n          sio.of(\"/chat\").compress(false).emit(\"woot\", \"hi\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should error with raw binary and warn","suites":["socket.io","socket"],"updatePoint":{"line":1873,"column":45},"line":1873,"code":"    it(\"should error with raw binary and warn\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { reconnection: false });\n        sio.on(\"connection\", (s) => {\n          s.conn.on(\"upgrade\", () => {\n            console.log(\n              \"\\u001b[96mNote: warning expected and normal in test.\\u001b[39m\"\n            );\n            // @ts-ignore\n            socket.io.engine.write(\"5woooot\");\n            setTimeout(() => {\n              done();\n            }, 100);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not crash when receiving an error packet without handler","suites":["socket.io","socket"],"updatePoint":{"line":1893,"column":71},"line":1893,"code":"    it(\"should not crash when receiving an error packet without handler\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { reconnection: false });\n        sio.on(\"connection\", (s) => {\n          s.conn.on(\"upgrade\", () => {\n            console.log(\n              \"\\u001b[96mNote: warning expected and normal in test.\\u001b[39m\"\n            );\n            // @ts-ignore\n            socket.io.engine.write('44[\"handle me please\"]');\n            setTimeout(() => {\n              done();\n            }, 100);\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not crash with raw binary","suites":["socket.io","socket"],"updatePoint":{"line":1913,"column":40},"line":1913,"code":"    it(\"should not crash with raw binary\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { reconnection: false });\n        sio.on(\"connection\", (s) => {\n          s.once(\"error\", (err) => {\n            expect(err.message).to.match(/Illegal attachments/);\n            done();\n          });\n          s.conn.on(\"upgrade\", () => {\n            // @ts-ignore\n            socket.io.engine.write(\"5woooot\");\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should handle empty binary packet","suites":["socket.io","socket"],"updatePoint":{"line":1931,"column":41},"line":1931,"code":"    it(\"should handle empty binary packet\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv, { reconnection: false });\n        sio.on(\"connection\", (s) => {\n          s.once(\"error\", (err) => {\n            expect(err.message).to.match(/Illegal attachments/);\n            done();\n          });\n          s.conn.on(\"upgrade\", () => {\n            // @ts-ignore\n            socket.io.engine.write(\"5\");\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not crash when messing with Object prototype (and other globals)","suites":["socket.io","socket"],"updatePoint":{"line":1949,"column":79},"line":1949,"code":"    it(\"should not crash when messing with Object prototype (and other globals)\", (done) => {\n      // @ts-ignore\n      Object.prototype.foo = \"bar\";\n      // @ts-ignore\n      global.File = \"\";\n      // @ts-ignore\n      global.Blob = [];\n      const srv = createServer();\n      const sio = new Server(srv);\n      srv.listen(() => {\n        const socket = client(srv);\n\n        sio.on(\"connection\", (s) => {\n          s.disconnect(true);\n          sio.close();\n          setTimeout(() => {\n            done();\n          }, 100);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should throw on reserved event","suites":["socket.io","socket"],"updatePoint":{"line":1971,"column":38},"line":1971,"code":"    it(\"should throw on reserved event\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          expect(() => s.emit(\"connect_error\")).to.throwException(\n            /\"connect_error\" is a reserved event name/\n          );\n          socket.close();\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should ignore a packet received after disconnection","suites":["socket.io","socket"],"updatePoint":{"line":1987,"column":59},"line":1987,"code":"    it(\"should ignore a packet received after disconnection\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const clientSocket = client(srv);\n\n        const success = () => {\n          clientSocket.close();\n          sio.close();\n          done();\n        };\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"test\", () => {\n            done(new Error(\"should not happen\"));\n          });\n          socket.on(\"disconnect\", success);\n        });\n\n        clientSocket.on(\"connect\", () => {\n          clientSocket.emit(\"test\", Buffer.alloc(10));\n          clientSocket.disconnect();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should call listener","suites":["socket.io","socket","onAny"],"updatePoint":{"line":2015,"column":30},"line":2015,"code":"      it(\"should call listener\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n\n        srv.listen(() => {\n          const socket = client(srv, { multiplex: false });\n\n          socket.emit(\"my-event\", \"123\");\n\n          sio.on(\"connection\", (socket: Socket) => {\n            socket.onAny((event, arg1) => {\n              expect(event).to.be(\"my-event\");\n              expect(arg1).to.be(\"123\");\n              done();\n            });\n          });\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should prepend listener","suites":["socket.io","socket","onAny"],"updatePoint":{"line":2034,"column":33},"line":2034,"code":"      it(\"should prepend listener\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n\n        srv.listen(() => {\n          const socket = client(srv, { multiplex: false });\n\n          socket.emit(\"my-event\", \"123\");\n\n          sio.on(\"connection\", (socket: Socket) => {\n            let count = 0;\n\n            socket.onAny((event, arg1) => {\n              expect(count).to.be(2);\n              done();\n            });\n\n            socket.prependAny(() => {\n              expect(count++).to.be(1);\n            });\n\n            socket.prependAny(() => {\n              expect(count++).to.be(0);\n            });\n          });\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should remove listener","suites":["socket.io","socket","onAny"],"updatePoint":{"line":2062,"column":32},"line":2062,"code":"      it(\"should remove listener\", (done) => {\n        const srv = createServer();\n        const sio = new Server(srv);\n\n        srv.listen(() => {\n          const socket = client(srv, { multiplex: false });\n\n          socket.emit(\"my-event\", \"123\");\n\n          sio.on(\"connection\", (socket: Socket) => {\n            const fail = () => done(new Error(\"fail\"));\n\n            socket.onAny(fail);\n            socket.offAny(fail);\n            expect(socket.listenersAny.length).to.be(0);\n\n            socket.onAny(() => {\n              done();\n            });\n          });\n        });\n      });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"emits to a namespace","suites":["socket.io","messaging many"],"updatePoint":{"line":2088,"column":28},"line":2088,"code":"    it(\"emits to a namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, \"/test\");\n        socket1.on(\"a\", (a) => {\n          expect(a).to.be(\"b\");\n          --total || done();\n        });\n        socket2.on(\"a\", (a) => {\n          expect(a).to.be(\"b\");\n          --total || done();\n        });\n        socket3.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n\n        let sockets = 3;\n        sio.on(\"connection\", (socket) => {\n          --sockets || emit();\n        });\n        sio.of(\"/test\", (socket) => {\n          --sockets || emit();\n        });\n\n        function emit() {\n          sio.emit(\"a\", \"b\");\n        }\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"emits binary data to a namespace","suites":["socket.io","messaging many"],"updatePoint":{"line":2123,"column":40},"line":2123,"code":"    it(\"emits binary data to a namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, \"/test\");\n        socket1.on(\"bin\", (a) => {\n          expect(Buffer.isBuffer(a)).to.be(true);\n          --total || done();\n        });\n        socket2.on(\"bin\", (a) => {\n          expect(Buffer.isBuffer(a)).to.be(true);\n          --total || done();\n        });\n        socket3.on(\"bin\", () => {\n          done(new Error(\"not\"));\n        });\n\n        let sockets = 3;\n        sio.on(\"connection\", (socket) => {\n          --sockets || emit();\n        });\n        sio.of(\"/test\", (socket) => {\n          --sockets || emit();\n        });\n\n        function emit() {\n          sio.emit(\"bin\", Buffer.alloc(10));\n        }\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"emits to the rest","suites":["socket.io","messaging many"],"updatePoint":{"line":2158,"column":25},"line":2158,"code":"    it(\"emits to the rest\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, \"/test\");\n        socket1.on(\"a\", (a) => {\n          expect(a).to.be(\"b\");\n          socket1.emit(\"finish\");\n        });\n        socket2.emit(\"broadcast\");\n        socket2.on(\"a\", () => {\n          done(new Error(\"done\"));\n        });\n        socket3.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n\n        const sockets = 2;\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"broadcast\", () => {\n            socket.broadcast.emit(\"a\", \"b\");\n          });\n          socket.on(\"finish\", () => {\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"emits to rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2191,"column":22},"line":2191,"code":"    it(\"emits to rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket1.on(\"a\", () => {\n          done();\n        });\n        socket1.emit(\"join\", \"woot\");\n        socket1.emit(\"emit\", \"woot\");\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"join\", (room, fn) => {\n            socket.join(room);\n            fn && fn();\n          });\n\n          socket.on(\"emit\", (room) => {\n            sio.in(room).emit(\"a\");\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"emits to rooms avoiding dupes","suites":["socket.io","messaging many"],"updatePoint":{"line":2222,"column":37},"line":2222,"code":"    it(\"emits to rooms avoiding dupes\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket1.on(\"a\", () => {\n          --total || done();\n        });\n        socket2.on(\"b\", () => {\n          --total || done();\n        });\n\n        socket1.emit(\"join\", \"woot\");\n        socket1.emit(\"join\", \"test\");\n        socket2.emit(\"join\", \"third\", () => {\n          socket2.emit(\"emit\");\n        });\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"join\", (room, fn) => {\n            socket.join(room);\n            fn && fn();\n          });\n\n          socket.on(\"emit\", (room) => {\n            sio.in(\"woot\").in(\"test\").emit(\"a\");\n            sio.in(\"third\").emit(\"b\");\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"broadcasts to rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2261,"column":27},"line":2261,"code":"    it(\"broadcasts to rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, { multiplex: false });\n\n        socket1.emit(\"join\", \"woot\");\n        socket2.emit(\"join\", \"test\");\n        socket3.emit(\"join\", \"test\", () => {\n          socket3.emit(\"broadcast\");\n        });\n\n        socket1.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket2.on(\"a\", () => {\n          --total || done();\n        });\n        socket3.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket3.on(\"b\", () => {\n          --total || done();\n        });\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"join\", (room, fn) => {\n            socket.join(room);\n            fn && fn();\n          });\n\n          socket.on(\"broadcast\", () => {\n            socket.broadcast.to(\"test\").emit(\"a\");\n            socket.emit(\"b\");\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"broadcasts binary data to rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2304,"column":39},"line":2304,"code":"    it(\"broadcasts binary data to rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let total = 2;\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, { multiplex: false });\n\n        socket1.emit(\"join\", \"woot\");\n        socket2.emit(\"join\", \"test\");\n        socket3.emit(\"join\", \"test\", () => {\n          socket3.emit(\"broadcast\");\n        });\n\n        socket1.on(\"bin\", (data) => {\n          throw new Error(\"got bin in socket1\");\n        });\n        socket2.on(\"bin\", (data) => {\n          expect(Buffer.isBuffer(data)).to.be(true);\n          --total || done();\n        });\n        socket2.on(\"bin2\", (data) => {\n          throw new Error(\"socket2 got bin2\");\n        });\n        socket3.on(\"bin\", (data) => {\n          throw new Error(\"socket3 got bin\");\n        });\n        socket3.on(\"bin2\", (data) => {\n          expect(Buffer.isBuffer(data)).to.be(true);\n          --total || done();\n        });\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"join\", (room, fn) => {\n            socket.join(room);\n            fn && fn();\n          });\n          socket.on(\"broadcast\", () => {\n            socket.broadcast.to(\"test\").emit(\"bin\", Buffer.alloc(5));\n            socket.emit(\"bin2\", Buffer.alloc(5));\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"keeps track of rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2351,"column":28},"line":2351,"code":"    it(\"keeps track of rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.join(\"a\");\n          expect(s.rooms).to.contain(s.id, \"a\");\n          s.join(\"b\");\n          expect(s.rooms).to.contain(s.id, \"a\", \"b\");\n          s.join(\"c\");\n          expect(s.rooms).to.contain(s.id, \"a\", \"b\", \"c\");\n          s.leave(\"b\");\n          expect(s.rooms).to.contain(s.id, \"a\", \"c\");\n          (s as any).leaveAll();\n          expect(s.rooms.size).to.eql(0);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"deletes empty rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2373,"column":27},"line":2373,"code":"    it(\"deletes empty rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.join(\"a\");\n          expect(s.nsp.adapter.rooms).to.contain(\"a\");\n          s.leave(\"a\");\n          expect(s.nsp.adapter.rooms).to.not.contain(\"a\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should properly cleanup left rooms","suites":["socket.io","messaging many"],"updatePoint":{"line":2389,"column":42},"line":2389,"code":"    it(\"should properly cleanup left rooms\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.join(\"a\");\n          expect(s.rooms).to.contain(s.id, \"a\");\n          s.join(\"b\");\n          expect(s.rooms).to.contain(s.id, \"a\", \"b\");\n          s.leave(\"unknown\");\n          expect(s.rooms).to.contain(s.id, \"a\", \"b\");\n          (s as any).leaveAll();\n          expect(s.rooms.size).to.eql(0);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"allows to join several rooms at once","suites":["socket.io","messaging many"],"updatePoint":{"line":2409,"column":44},"line":2409,"code":"    it(\"allows to join several rooms at once\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (s) => {\n          s.join([\"a\", \"b\", \"c\"]);\n          expect(s.rooms).to.contain(s.id, \"a\", \"b\", \"c\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should exclude specific sockets when broadcasting","suites":["socket.io","messaging many"],"updatePoint":{"line":2423,"column":57},"line":2423,"code":"    it(\"should exclude specific sockets when broadcasting\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, { multiplex: false });\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket3.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket1.on(\"a\", () => {\n          done();\n        });\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"exclude\", (id) => {\n            socket.broadcast.except(id).emit(\"a\");\n          });\n        });\n\n        socket2.on(\"connect\", () => {\n          socket3.emit(\"exclude\", socket2.id);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should exclude a specific room when broadcasting","suites":["socket.io","messaging many"],"updatePoint":{"line":2454,"column":56},"line":2454,"code":"    it(\"should exclude a specific room when broadcasting\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket1 = client(srv, { multiplex: false });\n        const socket2 = client(srv, { multiplex: false });\n        const socket3 = client(srv, { multiplex: false });\n\n        socket2.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket3.on(\"a\", () => {\n          done(new Error(\"not\"));\n        });\n        socket1.on(\"a\", () => {\n          done();\n        });\n\n        sio.on(\"connection\", (socket) => {\n          socket.on(\"join\", (room, cb) => {\n            socket.join(room);\n            cb();\n          });\n          socket.on(\"broadcast\", () => {\n            socket.broadcast.except(\"room1\").emit(\"a\");\n          });\n        });\n\n        socket2.emit(\"join\", \"room1\", () => {\n          socket3.emit(\"broadcast\");\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should return an immutable broadcast operator","suites":["socket.io","messaging many"],"updatePoint":{"line":2489,"column":53},"line":2489,"code":"    it(\"should return an immutable broadcast operator\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const clientSocket = client(srv, { multiplex: false });\n\n        sio.on(\"connection\", (socket: Socket) => {\n          const operator = socket.local\n            .compress(false)\n            .to([\"room1\", \"room2\"])\n            .except(\"room3\");\n          operator.compress(true).emit(\"hello\");\n          operator.volatile.emit(\"hello\");\n          operator.to(\"room4\").emit(\"hello\");\n          operator.except(\"room5\").emit(\"hello\");\n          socket.emit(\"hello\");\n          socket.to(\"room6\").emit(\"hello\");\n          // @ts-ignore\n          expect(operator.rooms).to.contain(\"room1\", \"room2\");\n          // @ts-ignore\n          expect(operator.rooms).to.not.contain(\"room4\", \"room5\", \"room6\");\n          // @ts-ignore\n          expect(operator.exceptRooms).to.contain(\"room3\");\n          // @ts-ignore\n          expect(operator.flags).to.eql({ local: true, compress: false });\n\n          clientSocket.close();\n          sio.close();\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should call functions","suites":["socket.io","middleware"],"updatePoint":{"line":2525,"column":29},"line":2525,"code":"    it(\"should call functions\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let run = 0;\n      sio.use((socket, next) => {\n        expect(socket).to.be.a(Socket);\n        run++;\n        next();\n      });\n      sio.use((socket, next) => {\n        expect(socket).to.be.a(Socket);\n        run++;\n        next();\n      });\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"connect\", () => {\n          expect(run).to.be(2);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should pass errors","suites":["socket.io","middleware"],"updatePoint":{"line":2548,"column":26},"line":2548,"code":"    it(\"should pass errors\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const run = 0;\n      sio.use((socket, next) => {\n        next(new Error(\"Authentication error\"));\n      });\n      sio.use((socket, next) => {\n        done(new Error(\"nope\"));\n      });\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"connect\", () => {\n          done(new Error(\"nope\"));\n        });\n        socket.on(\"connect_error\", (err) => {\n          expect(err.message).to.be(\"Authentication error\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should pass an object","suites":["socket.io","middleware"],"updatePoint":{"line":2570,"column":29},"line":2570,"code":"    it(\"should pass an object\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      sio.use((socket, next) => {\n        const err = new Error(\"Authentication error\");\n        // @ts-ignore\n        err.data = { a: \"b\", c: 3 };\n        next(err);\n      });\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"connect\", () => {\n          done(new Error(\"nope\"));\n        });\n        socket.on(\"connect_error\", (err) => {\n          expect(err).to.be.an(Error);\n          expect(err.message).to.eql(\"Authentication error\");\n          // @ts-ignore\n          expect(err.data).to.eql({ a: \"b\", c: 3 });\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should only call connection after fns","suites":["socket.io","middleware"],"updatePoint":{"line":2594,"column":45},"line":2594,"code":"    it(\"should only call connection after fns\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      sio.use((socket: any, next) => {\n        socket.name = \"guillermo\";\n        next();\n      });\n      srv.listen(() => {\n        const socket = client(srv);\n        sio.on(\"connection\", (socket) => {\n          expect((socket as any).name).to.be(\"guillermo\");\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should only call connection after (lengthy) fns","suites":["socket.io","middleware"],"updatePoint":{"line":2610,"column":55},"line":2610,"code":"    it(\"should only call connection after (lengthy) fns\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let authenticated = false;\n\n      sio.use((socket, next) => {\n        setTimeout(() => {\n          authenticated = true;\n          next();\n        }, 300);\n      });\n      srv.listen(() => {\n        const socket = client(srv);\n        socket.on(\"connect\", () => {\n          expect(authenticated).to.be(true);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be ignored if socket gets closed","suites":["socket.io","middleware"],"updatePoint":{"line":2630,"column":47},"line":2630,"code":"    it(\"should be ignored if socket gets closed\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let socket;\n      sio.use((s, next) => {\n        socket.io.engine.close();\n        s.client.conn.on(\"close\", () => {\n          process.nextTick(next);\n          setTimeout(() => {\n            done();\n          }, 50);\n        });\n      });\n      srv.listen(() => {\n        socket = client(srv);\n        sio.on(\"connection\", (socket) => {\n          done(new Error(\"should not fire\"));\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should call functions in expected order","suites":["socket.io","middleware"],"updatePoint":{"line":2651,"column":47},"line":2651,"code":"    it(\"should call functions in expected order\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      const result: number[] = [];\n\n      sio.use(() => {\n        done(new Error(\"should not fire\"));\n      });\n      sio.of(\"/chat\").use((socket, next) => {\n        result.push(1);\n        setTimeout(next, 50);\n      });\n      sio.of(\"/chat\").use((socket, next) => {\n        result.push(2);\n        setTimeout(next, 50);\n      });\n      sio.of(\"/chat\").use((socket, next) => {\n        result.push(3);\n        setTimeout(next, 50);\n      });\n\n      srv.listen(() => {\n        const chat = client(srv, \"/chat\");\n        chat.on(\"connect\", () => {\n          expect(result).to.eql([1, 2, 3]);\n          done();\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should disable the merge of handshake packets","suites":["socket.io","middleware"],"updatePoint":{"line":2681,"column":53},"line":2681,"code":"    it(\"should disable the merge of handshake packets\", (done) => {\n      const srv = createServer();\n      const sio = new Server();\n      sio.use((socket, next) => {\n        next();\n      });\n      sio.listen(srv);\n      const socket = client(srv);\n      socket.on(\"connect\", () => {\n        done();\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should work with a custom namespace","suites":["socket.io","middleware"],"updatePoint":{"line":2694,"column":43},"line":2694,"code":"    it(\"should work with a custom namespace\", (done) => {\n      const srv = createServer();\n      const sio = new Server();\n      sio.listen(srv);\n      sio.of(\"/chat\").use((socket, next) => {\n        next();\n      });\n\n      let count = 0;\n      client(srv, \"/\").on(\"connect\", () => {\n        if (++count === 2) done();\n      });\n      client(srv, \"/chat\").on(\"connect\", () => {\n        if (++count === 2) done();\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should only set `connected` to true after the middleware execution","suites":["socket.io","middleware"],"updatePoint":{"line":2711,"column":74},"line":2711,"code":"    it(\"should only set `connected` to true after the middleware execution\", (done) => {\n      const httpServer = createServer();\n      const io = new Server(httpServer);\n\n      const clientSocket = client(httpServer, \"/\");\n\n      io.use((socket, next) => {\n        expect(socket.connected).to.be(false);\n        expect(socket.disconnected).to.be(true);\n        next();\n      });\n\n      io.on(\"connection\", (socket) => {\n        expect(socket.connected).to.be(true);\n        expect(socket.disconnected).to.be(false);\n        success(io, clientSocket, done);\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should call functions","suites":["socket.io","socket middleware"],"updatePoint":{"line":2732,"column":29},"line":2732,"code":"    it(\"should call functions\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n      let run = 0;\n\n      srv.listen(() => {\n        const socket = client(srv, { multiplex: false });\n\n        socket.emit(\"join\", \"woot\");\n\n        sio.on(\"connection\", (socket) => {\n          socket.use((event, next) => {\n            expect(event).to.eql([\"join\", \"woot\"]);\n            event.unshift(\"wrap\");\n            run++;\n            next();\n          });\n          socket.use((event, next) => {\n            expect(event).to.eql([\"wrap\", \"join\", \"woot\"]);\n            run++;\n            next();\n          });\n          socket.on(\"wrap\", (data1, data2) => {\n            expect(data1).to.be(\"join\");\n            expect(data2).to.be(\"woot\");\n            expect(run).to.be(2);\n            done();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should pass errors","suites":["socket.io","socket middleware"],"updatePoint":{"line":2764,"column":26},"line":2764,"code":"    it(\"should pass errors\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const socket = client(srv, { multiplex: false });\n\n        socket.emit(\"join\", \"woot\");\n\n        const success = () => {\n          socket.close();\n          sio.close();\n          done();\n        };\n\n        sio.on(\"connection\", (socket) => {\n          socket.use((event, next) => {\n            next(new Error(\"Authentication error\"));\n          });\n          socket.use((event, next) => {\n            done(new Error(\"should not happen\"));\n          });\n          socket.on(\"join\", () => {\n            done(new Error(\"should not happen\"));\n          });\n          socket.on(\"error\", (err) => {\n            expect(err).to.be.an(Error);\n            expect(err.message).to.eql(\"Authentication error\");\n            success();\n          });\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should connect if `allowEIO3` is true","suites":["socket.io","v2 compatibility"],"updatePoint":{"line":2800,"column":45},"line":2800,"code":"    it(\"should connect if `allowEIO3` is true\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, {\n        allowEIO3: true,\n      });\n\n      srv.listen(async () => {\n        const port = (srv.address() as AddressInfo).port;\n        const clientSocket = io_v2.connect(`http://localhost:${port}`, {\n          multiplex: false,\n        });\n\n        const [socket]: Array<any> = await Promise.all([\n          waitFor(sio, \"connection\"),\n          waitFor(clientSocket, \"connect\"),\n        ]);\n\n        expect(socket.id).to.eql(clientSocket.id);\n        success(sio, clientSocket, done);\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should be able to connect to a namespace with a query","suites":["socket.io","v2 compatibility"],"updatePoint":{"line":2822,"column":61},"line":2822,"code":"    it(\"should be able to connect to a namespace with a query\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv, {\n        allowEIO3: true,\n      });\n\n      srv.listen(async () => {\n        const port = (srv.address() as AddressInfo).port;\n        const clientSocket = io_v2.connect(\n          `http://localhost:${port}/the-namespace`,\n          {\n            multiplex: false,\n          }\n        );\n        clientSocket.query = { test: \"123\" };\n\n        const [socket]: Array<any> = await Promise.all([\n          waitFor(sio.of(\"/the-namespace\"), \"connection\"),\n          waitFor(clientSocket, \"connect\"),\n        ]);\n\n        expect(socket.handshake.auth).to.eql({ test: \"123\" });\n        success(sio, clientSocket, done);\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"should not connect if `allowEIO3` is false (default)","suites":["socket.io","v2 compatibility"],"updatePoint":{"line":2848,"column":60},"line":2848,"code":"    it(\"should not connect if `allowEIO3` is false (default)\", (done) => {\n      const srv = createServer();\n      const sio = new Server(srv);\n\n      srv.listen(() => {\n        const port = (srv.address() as AddressInfo).port;\n        const clientSocket = io_v2.connect(`http://localhost:${port}`, {\n          multiplex: false,\n        });\n\n        clientSocket.on(\"connect\", () => {\n          done(new Error(\"should not happen\"));\n        });\n\n        clientSocket.on(\"connect_error\", () => {\n          success(sio, clientSocket, done);\n        });\n      });\n    });","file":"socket.io.ts","skipped":false,"dir":"test"},{"name":"returns all socket instances","suites":["socket.io","utility methods","fetchSockets"],"updatePoint":{"line":82,"column":38},"line":82,"code":"      it(\"returns all socket instances\", async () => {\n        const sockets = await io.fetchSockets();\n        expect(sockets.length).to.eql(3);\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"returns all socket instances in the given room","suites":["socket.io","utility methods","fetchSockets"],"updatePoint":{"line":87,"column":56},"line":87,"code":"      it(\"returns all socket instances in the given room\", async () => {\n        serverSockets[0].join([\"room1\", \"room2\"]);\n        serverSockets[1].join(\"room1\");\n        serverSockets[2].join(\"room2\");\n        const sockets = await io.in(\"room1\").fetchSockets();\n        expect(sockets.length).to.eql(2);\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"works with a custom adapter","suites":["socket.io","utility methods","fetchSockets"],"updatePoint":{"line":95,"column":37},"line":95,"code":"      it(\"works with a custom adapter\", async () => {\n        io.adapter(DummyAdapter);\n        const sockets = await io.fetchSockets();\n        expect(sockets.length).to.eql(1);\n        const remoteSocket = sockets[0];\n        expect(remoteSocket.id).to.eql(\"42\");\n        expect(remoteSocket.rooms).to.contain(\"42\", \"room1\");\n        expect(remoteSocket.data).to.eql({ username: \"john\" });\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances join the given room","suites":["socket.io","utility methods","socketsJoin"],"updatePoint":{"line":107,"column":56},"line":107,"code":"      it(\"makes all socket instances join the given room\", () => {\n        io.socketsJoin(\"room1\");\n        serverSockets.forEach((socket) => {\n          expect(socket.rooms).to.contain(\"room1\");\n        });\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances in a room join the given room","suites":["socket.io","utility methods","socketsJoin"],"updatePoint":{"line":114,"column":66},"line":114,"code":"      it(\"makes all socket instances in a room join the given room\", () => {\n        serverSockets[0].join([\"room1\", \"room2\"]);\n        serverSockets[1].join(\"room1\");\n        serverSockets[2].join(\"room2\");\n        io.in(\"room1\").socketsJoin(\"room3\");\n        expect(serverSockets[0].rooms).to.contain(\"room3\");\n        expect(serverSockets[1].rooms).to.contain(\"room3\");\n        expect(serverSockets[2].rooms).to.not.contain(\"room3\");\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances leave the given room","suites":["socket.io","utility methods","socketsLeave"],"updatePoint":{"line":126,"column":57},"line":126,"code":"      it(\"makes all socket instances leave the given room\", () => {\n        serverSockets[0].join([\"room1\", \"room2\"]);\n        serverSockets[1].join(\"room1\");\n        serverSockets[2].join(\"room2\");\n        io.socketsLeave(\"room1\");\n        expect(serverSockets[0].rooms).to.contain(\"room2\");\n        expect(serverSockets[0].rooms).to.not.contain(\"room1\");\n        expect(serverSockets[1].rooms).to.not.contain(\"room1\");\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances in a room leave the given room","suites":["socket.io","utility methods","socketsLeave"],"updatePoint":{"line":136,"column":67},"line":136,"code":"      it(\"makes all socket instances in a room leave the given room\", () => {\n        serverSockets[0].join([\"room1\", \"room2\"]);\n        serverSockets[1].join(\"room1\");\n        serverSockets[2].join(\"room2\");\n        io.in(\"room2\").socketsLeave(\"room1\");\n        expect(serverSockets[0].rooms).to.contain(\"room2\");\n        expect(serverSockets[0].rooms).to.not.contain(\"room1\");\n        expect(serverSockets[1].rooms).to.contain(\"room1\");\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances disconnect","suites":["socket.io","utility methods","disconnectSockets"],"updatePoint":{"line":148,"column":47},"line":148,"code":"      it(\"makes all socket instances disconnect\", (done) => {\n        io.disconnectSockets(true);\n\n        const partialDone = createPartialDone(3, done);\n\n        clientSockets[0].on(\"disconnect\", partialDone);\n        clientSockets[1].on(\"disconnect\", partialDone);\n        clientSockets[2].on(\"disconnect\", partialDone);\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"makes all socket instances in a room disconnect","suites":["socket.io","utility methods","disconnectSockets"],"updatePoint":{"line":158,"column":57},"line":158,"code":"      it(\"makes all socket instances in a room disconnect\", (done) => {\n        serverSockets[0].join([\"room1\", \"room2\"]);\n        serverSockets[1].join(\"room1\");\n        serverSockets[2].join(\"room2\");\n        io.in(\"room2\").disconnectSockets(true);\n\n        const partialDone = createPartialDone(2, done, () => {\n          clientSockets[1].off(\"disconnect\");\n        });\n\n        clientSockets[0].on(\"disconnect\", partialDone);\n        clientSockets[1].on(\"disconnect\", () => {\n          done(new Error(\"should not happen\"));\n        });\n        clientSockets[2].on(\"disconnect\", partialDone);\n      });","file":"utility-methods.ts","skipped":false,"dir":"test"},{"name":"should broadcast","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":63,"column":22},"line":63,"code":"  it(\"should broadcast\", (done) => {\n    const partialDone = createPartialDone(done, 3);\n\n    client.on(\"hello\", partialDone);\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast in a namespace","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":74,"column":37},"line":74,"code":"  it(\"should broadcast in a namespace\", (done) => {\n    client.on(\"hello\", shouldNotHappen(done));\n    clientWSOnly.on(\"hello\", shouldNotHappen(done));\n    clientPollingOnly.on(\"hello\", shouldNotHappen(done));\n    clientCustomNamespace.on(\"hello\", done);\n\n    io.of(\"/custom\").emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast in a dynamic namespace","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":83,"column":45},"line":83,"code":"  it(\"should broadcast in a dynamic namespace\", (done) => {\n    const dynamicNamespace = io.of(/\\/dynamic-\\d+/);\n    const dynamicClient = clientWSOnly.io.socket(\"/dynamic-101\");\n\n    dynamicClient.on(\"connect\", () => {\n      dynamicNamespace.emit(\"hello\");\n    });\n\n    dynamicClient.on(\"hello\", () => {\n      dynamicClient.disconnect();\n      done();\n    });\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast binary content","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":97,"column":37},"line":97,"code":"  it(\"should broadcast binary content\", (done) => {\n    const partialDone = createPartialDone(done, 3);\n\n    client.on(\"hello\", partialDone);\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.emit(\"hello\", Buffer.from([1, 2, 3]));\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast volatile packet with binary content","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":108,"column":58},"line":108,"code":"  it(\"should broadcast volatile packet with binary content\", (done) => {\n    const partialDone = createPartialDone(done, 3);\n\n    client.on(\"hello\", partialDone);\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    // wait to make sure there are no packets being sent for opening the connection\n    setTimeout(() => {\n      io.volatile.emit(\"hello\", Buffer.from([1, 2, 3]));\n    }, 20);\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast in a room","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":122,"column":32},"line":122,"code":"  it(\"should broadcast in a room\", (done) => {\n    const partialDone = createPartialDone(done, 2);\n\n    client.on(\"hello\", shouldNotHappen(done));\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.of(\"/\").sockets.get(clientWSOnly.id)!.join(\"room1\");\n    io.of(\"/\").sockets.get(clientPollingOnly.id)!.join(\"room1\");\n\n    io.to(\"room1\").emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast in multiple rooms","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":136,"column":40},"line":136,"code":"  it(\"should broadcast in multiple rooms\", (done) => {\n    const partialDone = createPartialDone(done, 2);\n\n    client.on(\"hello\", shouldNotHappen(done));\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.of(\"/\").sockets.get(clientWSOnly.id)!.join(\"room1\");\n    io.of(\"/\").sockets.get(clientPollingOnly.id)!.join(\"room2\");\n\n    io.to([\"room1\", \"room2\"]).emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should broadcast in all but a given room","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":150,"column":46},"line":150,"code":"  it(\"should broadcast in all but a given room\", (done) => {\n    const partialDone = createPartialDone(done, 2);\n\n    client.on(\"hello\", partialDone);\n    clientWSOnly.on(\"hello\", partialDone);\n    clientPollingOnly.on(\"hello\", shouldNotHappen(done));\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.of(\"/\").sockets.get(clientWSOnly.id)!.join(\"room1\");\n    io.of(\"/\").sockets.get(clientPollingOnly.id)!.join(\"room2\");\n\n    io.except(\"room2\").emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should work even after leaving room","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":164,"column":41},"line":164,"code":"  it(\"should work even after leaving room\", (done) => {\n    const partialDone = createPartialDone(done, 2);\n\n    client.on(\"hello\", partialDone);\n    clientWSOnly.on(\"hello\", shouldNotHappen(done));\n    clientPollingOnly.on(\"hello\", partialDone);\n    clientCustomNamespace.on(\"hello\", shouldNotHappen(done));\n\n    io.of(\"/\").sockets.get(client.id)!.join(\"room1\");\n    io.of(\"/\").sockets.get(clientPollingOnly.id)!.join(\"room1\");\n\n    io.of(\"/\").sockets.get(clientWSOnly.id)!.join(\"room1\");\n    io.of(\"/\").sockets.get(clientWSOnly.id)!.leave(\"room1\");\n\n    io.to(\"room1\").emit(\"hello\");\n  });","file":"uws.ts","skipped":false,"dir":"test"},{"name":"should serve static files","suites":["socket.io with uWebSocket.js-based engine"],"updatePoint":{"line":181,"column":31},"line":181,"code":"  it(\"should serve static files\", (done) => {\n    const clientVersion = require(\"socket.io-client/package.json\").version;\n\n    request(`http://localhost:${port}`)\n      .get(\"/socket.io/socket.io.js\")\n      .buffer(true)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.headers[\"content-type\"]).to.be(\"application/javascript\");\n        expect(res.headers.etag).to.be('\"' + clientVersion + '\"');\n        expect(res.headers[\"x-sourcemap\"]).to.be(undefined);\n        expect(res.text).to.match(/engine\\.io/);\n        expect(res.status).to.be(200);\n        done();\n      });\n  });","file":"uws.ts","skipped":false,"dir":"test"}]}