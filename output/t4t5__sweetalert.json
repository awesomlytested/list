{
    "repo": "t4t5/sweetalert",
    "url": "https://github.com/t4t5/sweetalert",
    "branch": "master",
    "configs": [
        {
            "package": "sweetalert",
            "lang": "ts",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "dismisses modal by clicking on overlay",
            "suites": [
                "promise value"
            ],
            "updatePoint": {
                "line": 18,
                "column": 46
            },
            "line": 18,
            "code": "  test(\"dismisses modal by clicking on overlay\", async () => {\n    expect.assertions(1);\n\n    setTimeout(() => {\n      $$(OVERLAY).click();\n    }, 500);\n\n    const value = await swal();\n\n    expect(value).toBeNull();\n  });",
            "file": "actions.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes value with setActionValue",
            "suites": [
                "promise value"
            ],
            "updatePoint": {
                "line": 30,
                "column": 41
            },
            "line": 30,
            "code": "  test(\"changes value with setActionValue\", async () => {\n\n    setTimeout(() => {\n      swal.setActionValue(\"test\");\n      $$(CONFIRM_BUTTON).click();\n    }, 500);\n\n    const value = await swal(); \n\n    expect(value).toEqual(\"test\");\n  });",
            "file": "actions.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes cancel value with setActionValue",
            "suites": [
                "promise value"
            ],
            "updatePoint": {
                "line": 42,
                "column": 48
            },
            "line": 42,
            "code": "  test(\"changes cancel value with setActionValue\", async () => {\n\n    setTimeout(() => {\n      swal.setActionValue({\n        cancel: \"test\",\n      });\n      $$(OVERLAY).click();\n    }, 500);\n\n    const value = await swal();\n\n    expect(value).toEqual(\"test\");\n  });",
            "file": "actions.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns invisible buttons on false",
            "suites": [
                "return buttons options"
            ],
            "updatePoint": {
                "line": 7,
                "column": 42
            },
            "line": 7,
            "code": "  test(\"returns invisible buttons on false\", () => {\n    const opts = getButtonListOpts(false);\n\n    expect(opts).toMatchObject({\n      cancel: {\n        visible: false,\n      },\n      confirm: {\n        visible: false,\n      },\n    });\n  });",
            "file": "button-options.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns default obj on true",
            "suites": [
                "return buttons options"
            ],
            "updatePoint": {
                "line": 20,
                "column": 35
            },
            "line": 20,
            "code": "  test(\"returns default obj on true\", () => {\n    const opts = getButtonListOpts(true);\n\n    expect(opts).toMatchObject({\n      cancel: {\n        className: \"\",\n        closeModal: true,\n        text: \"Cancel\",\n        value: null,\n        visible: true,\n      },\n      confirm: {\n        className: \"\",\n        closeModal: true,\n        text: \"OK\",\n        value: true,\n        visible: true,\n      },\n    });\n  });",
            "file": "button-options.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns single button on string",
            "suites": [
                "return buttons options"
            ],
            "updatePoint": {
                "line": 41,
                "column": 39
            },
            "line": 41,
            "code": "  test(\"returns single button on string\", () => {\n    const opts = getButtonListOpts(\"Test\");\n\n    expect(opts).toMatchObject({\n      cancel: {\n        visible: false,\n      },\n      confirm: {\n        closeModal: true,\n        text: \"Test\",\n        value: true,\n        visible: true,\n      },\n    });\n  });",
            "file": "button-options.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns two buttons on array of strings",
            "suites": [
                "return buttons options"
            ],
            "updatePoint": {
                "line": 57,
                "column": 47
            },
            "line": 57,
            "code": "  test(\"returns two buttons on array of strings\", () => {\n    const opts = getButtonListOpts([\"Annuler\", \"Confirmer\"]);\n\n    expect(opts).toMatchObject({\n      cancel: {\n        closeModal: true,\n        text: \"Annuler\",\n        value: null,\n        visible: true,\n      },\n      confirm: {\n        closeModal: true,\n        text: \"Confirmer\",\n        value: true,\n        visible: true,\n      },\n    });\n  });",
            "file": "button-options.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns only cancel button when using boolean in array",
            "suites": [
                "return buttons options"
            ],
            "updatePoint": {
                "line": 76,
                "column": 62
            },
            "line": 76,
            "code": "  test(\"returns only cancel button when using boolean in array\", () => {\n    const opts = getButtonListOpts([true, false]);\n\n    expect(opts).toMatchObject({\n      cancel: {\n        closeModal: true,\n        text: \"Cancel\",\n        value: null,\n        visible: true,\n      },\n      confirm: {\n        visible: false,\n      },\n    });\n  });",
            "file": "button-options.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows only confirm button by default",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 22,
                "column": 44
            },
            "line": 22,
            "code": "  test(\"shows only confirm button by default\", () => {\n    swal();\n\n    expect($$(BUTTON).length).toBe(1);\n    expect($$(BUTTON).hasClass(CONFIRM_BUTTON)).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides all buttons",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 29,
                "column": 25
            },
            "line": 29,
            "code": "  test(\"hides all buttons\", () => {\n    swal({\n      buttons: false,\n    });\n\n    expect($$(BUTTON).length).toBe(0);\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows confirm and cancel buttons",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 37,
                "column": 40
            },
            "line": 37,
            "code": "  test(\"shows confirm and cancel buttons\", () => {\n    swal({\n      buttons: true,\n    });\n\n    expect($$(BUTTON).length).toBe(2);\n    expect($$(CONFIRM_BUTTON).length).toBe(1);\n    expect($$(CANCEL_BUTTON).length).toBe(1);\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets button text",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 47,
                "column": 24
            },
            "line": 47,
            "code": "  test(\"sets button text\", () => {\n    swal({\n      button: \"Test\",\n    });\n\n    expect($$(CONFIRM_BUTTON).text()).toBe(\"Test\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets button texts with array",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 55,
                "column": 36
            },
            "line": 55,
            "code": "  test(\"sets button texts with array\", () => {\n    swal({\n      buttons: [\"Stop\", \"Do it\"],\n    });\n\n    expect($$(CONFIRM_BUTTON).text()).toBe(\"Do it\");\n    expect($$(CANCEL_BUTTON).text()).toBe(\"Stop\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets default button texts with array",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 64,
                "column": 44
            },
            "line": 64,
            "code": "  test(\"sets default button texts with array\", () => {\n    swal({\n      buttons: [true, true],\n    });\n\n    expect($$(CONFIRM_BUTTON).text()).toBe(\"OK\");\n    expect($$(CANCEL_BUTTON).text()).toBe(\"Cancel\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses button object",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 73,
                "column": 26
            },
            "line": 73,
            "code": "  test(\"uses button object\", () => {\n    swal({\n      buttons: {\n        cancel: \"Run away!\",\n        confirm: true,\n      }\n    });\n\n    expect($$(CANCEL_BUTTON).text()).toBe(\"Run away!\");\n    expect($$(CONFIRM_BUTTON).text()).toBe(\"OK\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets more than 2 buttons",
            "suites": [
                "show buttons"
            ],
            "updatePoint": {
                "line": 85,
                "column": 32
            },
            "line": 85,
            "code": "  test(\"sets more than 2 buttons\", () => {\n    swal({\n      buttons: {\n        cancel: \"Run away!\",\n        catch: {\n          text: \"Throw Pokéball!\",\n        },\n        defeat: true,\n      },\n    });\n\n    expect($$(BUTTON).length).toBe(3);\n    expect($$(CANCEL_BUTTON).text()).toBe(\"Run away!\");\n    expect($$(CONFIRM_BUTTON).length).toBe(0);\n\n    expect($$(`${BUTTON}--catch`).length).toBe(1);\n    expect($$(`${BUTTON}--catch`).text()).toBe(\"Throw Pokéball!\");\n\n    expect($$(`${BUTTON}--defeat`).length).toBe(1);\n    expect($$(`${BUTTON}--defeat`).text()).toBe(\"Defeat\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "confirm button resolves to true",
            "suites": [
                "buttons resolve values"
            ],
            "updatePoint": {
                "line": 111,
                "column": 39
            },
            "line": 111,
            "code": "  test(\"confirm button resolves to true\", async () => {\n    expect.assertions(1);\n\n    setTimeout(() => {\n      $$(CONFIRM_BUTTON).click();\n    }, 500);\n\n    const value = await swal();\n\n    expect(value).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "cancel button resolves to null",
            "suites": [
                "buttons resolve values"
            ],
            "updatePoint": {
                "line": 123,
                "column": 38
            },
            "line": 123,
            "code": "  test(\"cancel button resolves to null\", async () => {\n    expect.assertions(1);\n\n    setTimeout(() => {\n      $$(CANCEL_BUTTON).click();\n    }, 500);\n\n    const value = await swal({\n      buttons: true,\n    });\n\n    expect(value).toBeNull();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can specify resolve value",
            "suites": [
                "buttons resolve values"
            ],
            "updatePoint": {
                "line": 137,
                "column": 33
            },
            "line": 137,
            "code": "  test(\"can specify resolve value\", async () => {\n    expect.assertions(1);\n\n    setTimeout(() => {\n      $$(CONFIRM_BUTTON).click();\n    }, 500);\n\n    const value = await swal({\n      button: {\n        value: \"test\",\n      },\n    });\n\n    expect(value).toBe(\"test\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extra button resolves to string by default",
            "suites": [
                "buttons resolve values"
            ],
            "updatePoint": {
                "line": 153,
                "column": 50
            },
            "line": 153,
            "code": "  test(\"extra button resolves to string by default\", async () => {\n    expect.assertions(1);\n\n    setTimeout(() => {\n      $(`.${BUTTON}--test`).click();\n    }, 500);\n\n    const value = await swal({\n      buttons: {\n        test: true,\n      },\n    });\n\n    expect(value).toBe(\"test\");\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows loading state",
            "suites": [
                "loading"
            ],
            "updatePoint": {
                "line": 173,
                "column": 27
            },
            "line": 173,
            "code": "  test(\"shows loading state\", async () => {\n    swal({\n      button: {\n        text: \"HEPP\",\n        closeModal: false,\n      },\n    });\n\n    const $button = $(`.${BUTTON}--confirm`);\n\n    expect($button.hasClass('swal-button--loading')).toBeFalsy();\n\n    $button.click();\n\n    expect($button.hasClass('swal-button--loading')).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets single class name as string",
            "suites": [
                "set class name"
            ],
            "updatePoint": {
                "line": 194,
                "column": 40
            },
            "line": 194,
            "code": "  test(\"sets single class name as string\", async () => {\n    swal({\n      button: {\n        text: \"TEST\",\n        closeModal: true,\n        className: 'single-class'\n      },\n    });\n\n    const $button = $(`.${BUTTON}--confirm`);\n    expect($button.hasClass('single-class')).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets multiple class names as string",
            "suites": [
                "set class name"
            ],
            "updatePoint": {
                "line": 207,
                "column": 43
            },
            "line": 207,
            "code": "  test(\"sets multiple class names as string\", async () => {\n    swal({\n      button: {\n        text: \"TEST\",\n        closeModal: true,\n        className: 'class1 class2'\n      },\n    });\n\n    const $button = $(`.${BUTTON}--confirm`);\n    expect($button.hasClass('class1')).toBeTruthy();\n    expect($button.hasClass('class2')).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets multiple class names as array",
            "suites": [
                "set class name"
            ],
            "updatePoint": {
                "line": 221,
                "column": 42
            },
            "line": 221,
            "code": "  test(\"sets multiple class names as array\", async () => {\n    swal({\n      button: {\n        text: \"TEST\",\n        closeModal: true,\n        className: [\"class1\", \"class2\"]\n      },\n    });\n\n    const $button = $(`.${BUTTON}--confirm`);\n    expect($button.hasClass('class1')).toBeTruthy();\n    expect($button.hasClass('class2')).toBeTruthy();\n  });",
            "file": "buttons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows no content by default",
            "suites": [
                "show content"
            ],
            "updatePoint": {
                "line": 18,
                "column": 35
            },
            "line": 18,
            "code": "  test(\"shows no content by default\", () => {\n    swal(\"Hello\");\n\n    expect($$(CONTENT).length).toBe(0);\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows input when using content: 'input'",
            "suites": [
                "show content"
            ],
            "updatePoint": {
                "line": 24,
                "column": 47
            },
            "line": 24,
            "code": "  test(\"shows input when using content: 'input'\", () => {\n    swal({\n      content: \"input\",\n    });\n\n    const inputSelector = `${CONTENT}__input`;\n\n    expect($$(CONTENT).length).toBe(1);\n    expect($$(inputSelector).length).toBe(1);\n    expect($$(inputSelector).get(0).getAttribute('type')).toBeNull();\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can customize input with more advanced content options",
            "suites": [
                "show content"
            ],
            "updatePoint": {
                "line": 36,
                "column": 62
            },
            "line": 36,
            "code": "  test(\"can customize input with more advanced content options\", () => {\n    swal({\n      content: {\n        element: \"input\",\n        attributes: {\n          placeholder: \"Type your password\",\n          type: \"password\",\n        },\n      },\n    });\n\n    const inputSelector = `${CONTENT}__input`;\n\n    expect($$(CONTENT).length).toBe(1);\n    expect($$(inputSelector).length).toBe(1);\n    expect($$(inputSelector).get(0).getAttribute('type')).toBe('password');\n    expect($$(inputSelector).get(0).getAttribute('placeholder')).toBe('Type your password');\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can set content to custom DOM node",
            "suites": [
                "show content"
            ],
            "updatePoint": {
                "line": 55,
                "column": 42
            },
            "line": 55,
            "code": "  test(\"can set content to custom DOM node\", () => {\n    let btn = document.createElement('button');\n    btn.classList.add('custom-element');\n\n    swal({\n      content: btn,\n    });\n\n    expect($$(CONTENT).length).toBe(1);\n    expect($$('custom-element').length).toBe(1);\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "transforms newline to break",
            "suites": [
                "show modal text"
            ],
            "updatePoint": {
                "line": 70,
                "column": 35
            },
            "line": 70,
            "code": "  test(\"transforms newline to break\", () => {\n    swal('Hello\\nWorld\\n');\n\n    expect($(`.${MODAL_TEXT} br`).length).toBe(2);\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes HTML elements",
            "suites": [
                "show modal text"
            ],
            "updatePoint": {
                "line": 76,
                "column": 29
            },
            "line": 76,
            "code": "  test(\"escapes HTML elements\", () => {\n    const text = '<script>bad stuff</script>';\n    swal(text);\n\n    expect($(`.${MODAL_TEXT} script`).length).toBe(0);\n    expect($$(MODAL_TEXT).text()).toEqual(expect.stringMatching(text));\n  });",
            "file": "content.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows icon depending on third argument",
            "suites": [
                "show icons"
            ],
            "updatePoint": {
                "line": 16,
                "column": 46
            },
            "line": 16,
            "code": "  test(\"shows icon depending on third argument\", () => {\n    swal(\"Error\", \"An error occurred!\", \"error\");\n\n    expect($$(ICON).length).toBe(1);\n    expect($$(ICON).hasClass(`${ICON}--error`)).toBeTruthy();\n  });",
            "file": "icons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows icon when using 'icon' object key",
            "suites": [
                "show icons"
            ],
            "updatePoint": {
                "line": 23,
                "column": 47
            },
            "line": 23,
            "code": "  test(\"shows icon when using 'icon' object key\", () => {\n    swal({\n      icon: 'warning',\n    });\n\n    expect($$(ICON).length).toBe(1);\n    expect($$(ICON).hasClass(`${ICON}--warning`)).toBeTruthy();\n  });",
            "file": "icons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hides icon when setting 'icon' key to 'false'",
            "suites": [
                "show icons"
            ],
            "updatePoint": {
                "line": 32,
                "column": 53
            },
            "line": 32,
            "code": "  test(\"hides icon when setting 'icon' key to 'false'\", () => {\n    swal({\n      icon: false,\n    });\n\n    expect($$(ICON).length).toBe(0);\n  });",
            "file": "icons.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds elements on first call",
            "suites": [
                "init"
            ],
            "updatePoint": {
                "line": 22,
                "column": 35
            },
            "line": 22,
            "code": "  test(\"adds elements on first call\", () => {\n    expect($$(OVERLAY).length).toEqual(0);\n\n    swal(\"Hello world!\");\n\n    expect($$(OVERLAY).length).toBe(1);\n    expect($$(MODAL).length).toBe(1);\n  });",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows text when using 1 param",
            "suites": [
                "string parameters"
            ],
            "updatePoint": {
                "line": 35,
                "column": 37
            },
            "line": 35,
            "code": "  test(\"shows text when using 1 param\", () => {\n    swal(\"Hello world!\");\n\n    expect($$(MODAL_TEXT).is(':first-child')).toBeTruthy();\n    expect($$(MODAL_TEXT).text()).toBe(\"Hello world!\");\n    expect($$(MODAL_TEXT).next().hasClass(FOOTER)).toBeTruthy();\n  });",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows title and text when using 2 params",
            "suites": [
                "string parameters"
            ],
            "updatePoint": {
                "line": 43,
                "column": 48
            },
            "line": 43,
            "code": "  test(\"shows title and text when using 2 params\", () => {\n    swal(\"Title\", \"text\");\n\n    expect($$(MODAL_TITLE).is(':first-child')).toBeTruthy();\n    expect($$(MODAL_TITLE).text()).toBe(\"Title\");\n    expect($$(MODAL_TEXT).text()).toBe(\"text\");\n    expect($$(MODAL_TEXT).next().hasClass(FOOTER)).toBeTruthy();\n  });",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows icon, title and text when using 3 params",
            "suites": [
                "string parameters"
            ],
            "updatePoint": {
                "line": 52,
                "column": 54
            },
            "line": 52,
            "code": "  test(\"shows icon, title and text when using 3 params\", () => {\n    swal(\"Oops\", \"text\", \"error\");\n\n    expect($$(ICON).is(':first-child')).toBeTruthy();\n    expect($$(ICON).hasClass(`${ICON}--error`)).toBeTruthy();\n\n    expect($$(MODAL_TITLE).is(':nth-child(2)')).toBeTruthy();\n    expect($$(MODAL_TITLE).text()).toBe(\"Oops\");\n\n    expect($$(MODAL_TEXT).is(':nth-child(3)')).toBeTruthy();\n    expect($$(MODAL_TEXT).text()).toBe(\"text\");\n    expect($$(MODAL_TEXT).next().hasClass(FOOTER)).toBeTruthy();\n  });",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "t4t5__sweetalert.svg"
}