{"repo":"helmetjs/helmet","url":"https://github.com/helmetjs/helmet","branch":"main","configs":[{"package":"helmet","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"sets a default policy when passed no directives","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":30,"column":53},"line":30,"code":"  it(\"sets a default policy when passed no directives\", async () => {\n    const expectedDirectives = new Set([\n      \"default-src 'self'\",\n      \"base-uri 'self'\",\n      \"block-all-mixed-content\",\n      \"font-src 'self' https: data:\",\n      \"form-action 'self'\",\n      \"frame-ancestors 'self'\",\n      \"img-src 'self' data:\",\n      \"object-src 'none'\",\n      \"script-src 'self'\",\n      \"script-src-attr 'none'\",\n      \"style-src 'self' https: 'unsafe-inline'\",\n      \"upgrade-insecure-requests\",\n    ]);\n    await checkCsp({\n      middlewareArgs: [],\n      expectedDirectives,\n    });\n    await checkCsp({\n      middlewareArgs: [{}],\n      expectedDirectives,\n    });\n    await checkCsp({\n      middlewareArgs: [Object.create(null)],\n      expectedDirectives,\n    });\n    await checkCsp({\n      middlewareArgs: [{ directives: undefined }],\n      expectedDirectives,\n    });\n    await checkCsp({\n      middlewareArgs: [{ useDefaults: true }],\n      expectedDirectives,\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets directives when named with snake-case","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":67,"column":48},"line":67,"code":"  it(\"sets directives when named with snake-case\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": [\"'self'\"],\n            \"script-src\": [\"example.com\"],\n            \"style-src\": [\"'none'\"],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"default-src 'self'\",\n        \"script-src example.com\",\n        \"style-src 'none'\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets directives when named with camelCase","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":87,"column":47},"line":87,"code":"  it(\"sets directives when named with camelCase\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            defaultSrc: [\"'self'\"],\n            scriptSrc: [\"example.com\"],\n            styleSrc: [\"'none'\"],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"default-src 'self'\",\n        \"script-src example.com\",\n        \"style-src 'none'\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"accepts a mix of snake-case and camelCase directive names","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":107,"column":63},"line":107,"code":"  it(\"accepts a mix of snake-case and camelCase directive names\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": [\"'self'\"],\n            \"script-src\": [\"example.com\"],\n            styleSrc: [\"'none'\"],\n            objectSrc: [\"'none'\"],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"default-src 'self'\",\n        \"script-src example.com\",\n        \"style-src 'none'\",\n        \"object-src 'none'\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"accepts an empty list of directive values","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":129,"column":47},"line":129,"code":"  it(\"accepts an empty list of directive values\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": [\"'self'\"],\n            sandbox: [],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\"default-src 'self'\", \"sandbox\"]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"accepts non-array iterables for directive values","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":144,"column":54},"line":144,"code":"  it(\"accepts non-array iterables for directive values\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": new Set([\"'self'\"]),\n            sandbox: {\n              [Symbol.iterator]: () => ({\n                next: () => ({\n                  done: true,\n                  value: undefined,\n                }),\n              }),\n            },\n          },\n        },\n      ],\n      expectedDirectives: new Set([\"default-src 'self'\", \"sandbox\"]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"accepts strings as directive values","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":166,"column":41},"line":166,"code":"  it(\"accepts strings as directive values\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": \"'self'  example.com\",\n            scriptSrc: \"'none'\",\n            sandbox: \"\",\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"default-src 'self'  example.com\",\n        \"script-src 'none'\",\n        \"sandbox\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"treats null directive values as nothing, as if they weren't set","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":186,"column":69},"line":186,"code":"  it(\"treats null directive values as nothing, as if they weren't set\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": \"'self'\",\n            scriptSrc: null,\n          },\n        },\n      ],\n      expectedDirectives: new Set([\"default-src 'self'\"]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"allows functions in directive values to generate dynamic directives","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":201,"column":73},"line":201,"code":"  it(\"allows functions in directive values to generate dynamic directives\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": [\n              \"'self'\",\n              (req: IncomingMessage, res: ServerResponse) => {\n                expect(req).toBeInstanceOf(IncomingMessage);\n                expect(res).toBeInstanceOf(ServerResponse);\n                return \"foo.example.com\";\n              },\n              \"bar.example.com\",\n            ],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"default-src 'self' foo.example.com bar.example.com\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"can override the default options","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":225,"column":38},"line":225,"code":"  it(\"can override the default options\", async () => {\n    const expectedDirectives = new Set([\n      \"default-src 'self' example.com\",\n      \"block-all-mixed-content\",\n      \"font-src 'self' https: data:\",\n      \"form-action 'self'\",\n      \"frame-ancestors 'self'\",\n      \"img-src 'self' data:\",\n      \"object-src 'none'\",\n      \"script-src example.com\",\n      \"script-src-attr 'none'\",\n      \"style-src 'self' https: 'unsafe-inline'\",\n      \"upgrade-insecure-requests\",\n    ]);\n\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: true,\n          directives: {\n            \"default-src\": [\"'self'\", \"example.com\"],\n            \"base-uri\": null,\n            scriptSrc: [\"example.com\"],\n          },\n        },\n      ],\n      expectedDirectives,\n    });\n\n    await checkCsp({\n      middlewareArgs: [\n        {\n          directives: {\n            \"default-src\": [\"'self'\", \"example.com\"],\n            \"base-uri\": null,\n            scriptSrc: [\"example.com\"],\n          },\n        },\n      ],\n      expectedDirectives,\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"can set the \"report only\" version of the header instead","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":268,"column":61},"line":268,"code":"  it('can set the \"report only\" version of the header instead', async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": \"'self'\",\n          },\n          reportOnly: true,\n        },\n      ],\n      expectedHeader: \"content-security-policy-report-only\",\n      expectedDirectives: new Set([\"default-src 'self'\"]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws if any directive names are invalid","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":284,"column":47},"line":284,"code":"  it(\"throws if any directive names are invalid\", () => {\n    const invalidNames = [\n      \"\",\n      \";\",\n      \"รก\",\n      \"default src\",\n      \"default;src\",\n      \"default,src\",\n      \"default!src\",\n      \"defรกult-src\",\n      \"default_src\",\n      \"__proto__\",\n    ];\n    for (const name of invalidNames) {\n      expect(() => {\n        contentSecurityPolicy({\n          useDefaults: true,\n          directives: {\n            [name]: [\"value\"],\n          },\n        });\n      }).toThrow(\n        /^Content-Security-Policy received an invalid directive name \"/\n      );\n    }\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws if duplicate directive names are found","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":311,"column":51},"line":311,"code":"  it(\"throws if duplicate directive names are found\", () => {\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: [\"foo\"],\n          \"default-src\": [\"foo\"],\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy received a duplicate directive \"default-src\"$/\n    );\n\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: [\"'self'\"],\n          scriptSrc: [\"foo\"],\n          \"script-src\": [\"foo\"],\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy received a duplicate directive \"script-src\"$/\n    );\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws if any directive values are invalid","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":338,"column":48},"line":338,"code":"  it(\"throws if any directive values are invalid\", () => {\n    const invalidValues = [\";\", \",\", \"hello;world\", \"hello,world\"];\n    for (const invalidValue of invalidValues) {\n      expect(() => {\n        contentSecurityPolicy({\n          useDefaults: false,\n          directives: {\n            \"default-src\": \"'self'\",\n            \"something-else\": [invalidValue],\n          },\n        });\n      }).toThrow(\n        /^Content-Security-Policy received an invalid directive value for \"something-else\"$/\n      );\n    }\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"errors if any directive values are invalid when a function returns","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":355,"column":72},"line":355,"code":"  it(\"errors if any directive values are invalid when a function returns\", async () => {\n    const app = connect()\n      .use(\n        contentSecurityPolicy({\n          useDefaults: false,\n          directives: {\n            defaultSrc: [\"'self'\", () => \"bad;value\"],\n          },\n        })\n      )\n      .use(\n        (\n          err: Error,\n          _req: IncomingMessage,\n          res: ServerResponse,\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          _next: () => void\n        ) => {\n          res.statusCode = 500;\n          res.setHeader(\"Content-Type\", \"application/json\");\n          res.end(JSON.stringify({ message: err.message }));\n        }\n      );\n\n    await supertest(app).get(\"/\").expect(500, {\n      message:\n        'Content-Security-Policy received an invalid directive value for \"default-src\"',\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws if default-src is missing","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":385,"column":38},"line":385,"code":"  it(\"throws if default-src is missing\", () => {\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {},\n      });\n    }).toThrow(\n      /^Content-Security-Policy has no directives. Either set some or disable the header$/\n    );\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          scriptSrc: [\"example.com\"],\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy needs a default-src but none was provided. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.$/\n    );\n    expect(() => {\n      contentSecurityPolicy({\n        directives: { defaultSrc: null },\n      });\n    }).toThrow(\n      /^Content-Security-Policy needs a default-src but it was set to `null`. If you really want to disable it, set it to `contentSecurityPolicy.dangerouslyDisableDefaultSrc`.$/\n    );\n\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: [\"foo\"],\n        },\n      });\n    }).not.toThrow();\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          \"default-src\": [\"foo\"],\n        },\n      });\n    }).not.toThrow();\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: [],\n        },\n      });\n    }).not.toThrow();\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: \"\",\n        },\n      });\n    }).not.toThrow();\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"allows default-src to be explicitly disabled","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":446,"column":50},"line":446,"code":"  it(\"allows default-src to be explicitly disabled\", async () => {\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            defaultSrc: dangerouslyDisableDefaultSrc,\n            scriptSrc: [\"example.com\"],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\"script-src example.com\"]),\n    });\n\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: false,\n          directives: {\n            \"default-src\": dangerouslyDisableDefaultSrc,\n            \"script-src\": [\"example.com\"],\n          },\n        },\n      ],\n      expectedDirectives: new Set([\"script-src example.com\"]),\n    });\n\n    await checkCsp({\n      middlewareArgs: [\n        {\n          useDefaults: true,\n          directives: {\n            \"default-src\": dangerouslyDisableDefaultSrc,\n          },\n        },\n      ],\n      expectedDirectives: new Set([\n        \"base-uri 'self'\",\n        \"block-all-mixed-content\",\n        \"font-src 'self' https: data:\",\n        \"form-action 'self'\",\n        \"frame-ancestors 'self'\",\n        \"img-src 'self' data:\",\n        \"object-src 'none'\",\n        \"script-src 'self'\",\n        \"script-src-attr 'none'\",\n        \"style-src 'self' https: 'unsafe-inline'\",\n        \"upgrade-insecure-requests\",\n      ]),\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws an error if default-src is disabled and there are no other directives","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":498,"column":82},"line":498,"code":"  it(\"throws an error if default-src is disabled and there are no other directives\", () => {\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          defaultSrc: dangerouslyDisableDefaultSrc,\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy has no directives. Either set some or disable the header$/\n    );\n\n    expect(() => {\n      contentSecurityPolicy({\n        useDefaults: false,\n        directives: {\n          \"default-src\": dangerouslyDisableDefaultSrc,\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy has no directives. Either set some or disable the header$/\n    );\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws an error if directives other than default-src are `dangerouslyDisableDefaultSrc`","suites":["Content-Security-Policy middleware"],"updatePoint":{"line":522,"column":93},"line":522,"code":"  it(\"throws an error if directives other than default-src are `dangerouslyDisableDefaultSrc`\", () => {\n    expect(() => {\n      contentSecurityPolicy({\n        directives: {\n          \"default-src\": \"'self'\",\n          \"script-src\": dangerouslyDisableDefaultSrc,\n        },\n      });\n    }).toThrow(\n      /^Content-Security-Policy: tried to disable \"script-src\" as if it were default-src; simply omit the key$/\n    );\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"returns the middleware's default directives","suites":["getDefaultDirectives"],"updatePoint":{"line":537,"column":49},"line":537,"code":"  it(\"returns the middleware's default directives\", () => {\n    expect(getDefaultDirectives()).toEqual({\n      \"base-uri\": [\"'self'\"],\n      \"block-all-mixed-content\": [],\n      \"default-src\": [\"'self'\"],\n      \"font-src\": [\"'self'\", \"https:\", \"data:\"],\n      \"form-action\": [\"'self'\"],\n      \"frame-ancestors\": [\"'self'\"],\n      \"img-src\": [\"'self'\", \"data:\"],\n      \"object-src\": [\"'none'\"],\n      \"script-src\": [\"'self'\"],\n      \"script-src-attr\": [\"'none'\"],\n      \"style-src\": [\"'self'\", \"https:\", \"'unsafe-inline'\"],\n      \"upgrade-insecure-requests\": [],\n    });\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"attaches itself to the top-level function","suites":["getDefaultDirectives"],"updatePoint":{"line":554,"column":47},"line":554,"code":"  it(\"attaches itself to the top-level function\", () => {\n    expect(getDefaultDirectives).toBe(\n      contentSecurityPolicy.getDefaultDirectives\n    );\n  });","file":"content-security-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Embedder-Policy: same-origin\" when called with no policy","suites":["Cross-Origin-Embedder-Policy middleware"],"updatePoint":{"line":5,"column":81},"line":5,"code":"  it('sets \"Cross-Origin-Embedder-Policy: same-origin\" when called with no policy', async () => {\n    const expectedHeaders = {\n      \"cross-origin-embedder-policy\": \"require-corp\",\n    };\n    await check(crossOriginEmbedderPolicy(), expectedHeaders);\n    await check(crossOriginEmbedderPolicy({}), expectedHeaders);\n    await check(\n      crossOriginEmbedderPolicy(Object.create(null)),\n      expectedHeaders\n    );\n    await check(\n      crossOriginEmbedderPolicy({ policy: undefined }),\n      expectedHeaders\n    );\n  });","file":"cross-origin-embedder-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Embedder-Policy: \" when told to","suites":["Cross-Origin-Embedder-Policy middleware"],"updatePoint":{"line":22,"column":67},"line":22,"code":"    it(`sets \"Cross-Origin-Embedder-Policy: ${policy}\" when told to`, async () => {\n      await check(crossOriginEmbedderPolicy({ policy }), {\n        \"cross-origin-embedder-policy\": policy,\n      });\n    });","file":"cross-origin-embedder-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws when setting the policy to an invalid value","suites":["Cross-Origin-Embedder-Policy middleware"],"updatePoint":{"line":29,"column":56},"line":29,"code":"  it(\"throws when setting the policy to an invalid value\", () => {\n    const invalidValues = [\n      \"\",\n      \"foo\",\n      \"CREDENTIALLESS\",\n      123,\n      null,\n      new String(\"credentialless\"),\n    ];\n    for (const policy of invalidValues) {\n      expect(() =>\n        crossOriginEmbedderPolicy({ policy: policy as any })\n      ).toThrow(/^Cross-Origin-Embedder-Policy does not support /);\n    }\n  });","file":"cross-origin-embedder-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Opener-Policy: same-origin\" when called with no policy","suites":["Cross-Origin-Opener-Policy middleware"],"updatePoint":{"line":5,"column":79},"line":5,"code":"  it('sets \"Cross-Origin-Opener-Policy: same-origin\" when called with no policy', async () => {\n    const expectedHeaders = {\n      \"cross-origin-opener-policy\": \"same-origin\",\n    };\n    await check(crossOriginOpenerPolicy(), expectedHeaders);\n    await check(crossOriginOpenerPolicy({}), expectedHeaders);\n    await check(crossOriginOpenerPolicy(Object.create(null)), expectedHeaders);\n    await check(\n      crossOriginOpenerPolicy({ policy: undefined }),\n      expectedHeaders\n    );\n  });","file":"cross-origin-opener-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Opener-Policy: \" when told to","suites":["Cross-Origin-Opener-Policy middleware"],"updatePoint":{"line":20,"column":67},"line":20,"code":"      it(`sets \"Cross-Origin-Opener-Policy: ${policy}\" when told to`, async () => {\n        await check(crossOriginOpenerPolicy({ policy }), {\n          \"cross-origin-opener-policy\": policy,\n        });\n      });","file":"cross-origin-opener-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws when setting the policy to an invalid value","suites":["Cross-Origin-Opener-Policy middleware"],"updatePoint":{"line":28,"column":56},"line":28,"code":"  it(\"throws when setting the policy to an invalid value\", () => {\n    const invalidValues = [\n      \"\",\n      \"foo\",\n      \"SAME-ORIGIN\",\n      123,\n      null,\n      new String(\"same-origin\"),\n    ];\n    for (const policy of invalidValues) {\n      expect(() => crossOriginOpenerPolicy({ policy: policy as any })).toThrow(\n        /^Cross-Origin-Opener-Policy does not support /\n      );\n    }\n  });","file":"cross-origin-opener-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Resource-Policy: same-origin\" when called with no policy","suites":["Cross-Origin-Resource-Policy middleware"],"updatePoint":{"line":5,"column":81},"line":5,"code":"  it('sets \"Cross-Origin-Resource-Policy: same-origin\" when called with no policy', async () => {\n    const expectedHeaders = {\n      \"cross-origin-resource-policy\": \"same-origin\",\n    };\n    await check(crossOriginResourcePolicy(), expectedHeaders);\n    await check(crossOriginResourcePolicy({}), expectedHeaders);\n    await check(\n      crossOriginResourcePolicy(Object.create(null)),\n      expectedHeaders\n    );\n    await check(\n      crossOriginResourcePolicy({ policy: undefined }),\n      expectedHeaders\n    );\n  });","file":"cross-origin-resource-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Cross-Origin-Resource-Policy: \" when told to","suites":["Cross-Origin-Resource-Policy middleware"],"updatePoint":{"line":22,"column":67},"line":22,"code":"    it(`sets \"Cross-Origin-Resource-Policy: ${policy}\" when told to`, async () => {\n      await check(crossOriginResourcePolicy({ policy }), {\n        \"cross-origin-resource-policy\": policy,\n      });\n    });","file":"cross-origin-resource-policy.test.ts","skipped":false,"dir":"test"},{"name":"throws when setting the policy to an invalid value","suites":["Cross-Origin-Resource-Policy middleware"],"updatePoint":{"line":29,"column":56},"line":29,"code":"  it(\"throws when setting the policy to an invalid value\", () => {\n    const invalidValues = [\n      \"\",\n      \"foo\",\n      \"CROSS-ORIGIN\",\n      123,\n      null,\n      new String(\"none\"),\n    ];\n    for (const policy of invalidValues) {\n      expect(() =>\n        crossOriginResourcePolicy({ policy: policy as any })\n      ).toThrow(/^Cross-Origin-Resource-Policy does not support /);\n    }\n  });","file":"cross-origin-resource-policy.test.ts","skipped":false,"dir":"test"},{"name":"sets the max-age to 0 when passed no max-age","suites":["Expect-CT middleware"],"updatePoint":{"line":5,"column":50},"line":5,"code":"  it(\"sets the max-age to 0 when passed no max-age\", async () => {\n    await check(expectCt(), {\n      \"expect-ct\": \"max-age=0\",\n    });\n    await check(expectCt({}), {\n      \"expect-ct\": \"max-age=0\",\n    });\n    await check(expectCt(Object.create(null)), {\n      \"expect-ct\": \"max-age=0\",\n    });\n    await check(expectCt({ maxAge: undefined }), {\n      \"expect-ct\": \"max-age=0\",\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"sets the max-age to a provided integer","suites":["Expect-CT middleware"],"updatePoint":{"line":20,"column":44},"line":20,"code":"  it(\"sets the max-age to a provided integer\", async () => {\n    await check(expectCt({ maxAge: 123 }), {\n      \"expect-ct\": \"max-age=123\",\n    });\n    await check(expectCt({ maxAge: 0 }), {\n      \"expect-ct\": \"max-age=0\",\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"rounds non-integers down","suites":["Expect-CT middleware"],"updatePoint":{"line":29,"column":30},"line":29,"code":"  it(\"rounds non-integers down\", async () => {\n    await check(expectCt({ maxAge: 123.4 }), {\n      \"expect-ct\": \"max-age=123\",\n    });\n    await check(expectCt({ maxAge: 123.5 }), {\n      \"expect-ct\": \"max-age=123\",\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"rejects invalid max-ages","suites":["Expect-CT middleware"],"updatePoint":{"line":38,"column":30},"line":38,"code":"  it(\"rejects invalid max-ages\", async () => {\n    expect(() => expectCt({ maxAge: -123 })).toThrow();\n    expect(() => expectCt({ maxAge: -0.1 })).toThrow();\n    expect(() => expectCt({ maxAge: Infinity })).toThrow();\n    expect(() => expectCt({ maxAge: NaN })).toThrow();\n    expect(() => expectCt({ maxAge: \"123\" as any })).toThrow();\n    expect(() => expectCt({ maxAge: BigInt(12) as any })).toThrow();\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"can enable enforcement","suites":["Expect-CT middleware"],"updatePoint":{"line":47,"column":28},"line":47,"code":"  it(\"can enable enforcement\", async () => {\n    await check(expectCt({ enforce: true }), {\n      \"expect-ct\": \"max-age=0, enforce\",\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"can explicitly disable enforcement","suites":["Expect-CT middleware"],"updatePoint":{"line":53,"column":40},"line":53,"code":"  it(\"can explicitly disable enforcement\", async () => {\n    await check(expectCt({ enforce: false }), {\n      \"expect-ct\": \"max-age=0\",\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"can set a report-uri","suites":["Expect-CT middleware"],"updatePoint":{"line":59,"column":26},"line":59,"code":"  it(\"can set a report-uri\", async () => {\n    await check(expectCt({ reportUri: \"https://example.com/report\" }), {\n      \"expect-ct\": 'max-age=0, report-uri=\"https://example.com/report\"',\n    });\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"can set enforcement, max-age, and a report-uri","suites":["Expect-CT middleware"],"updatePoint":{"line":65,"column":52},"line":65,"code":"  it(\"can set enforcement, max-age, and a report-uri\", async () => {\n    await check(\n      expectCt({\n        enforce: true,\n        maxAge: 123,\n        reportUri: \"https://example.com/report\",\n      }),\n      {\n        \"expect-ct\":\n          'max-age=123, enforce, report-uri=\"https://example.com/report\"',\n      }\n    );\n  });","file":"expect-ct.test.ts","skipped":false,"dir":"test"},{"name":"includes all middleware with their default options","suites":["helmet"],"updatePoint":{"line":27,"column":56},"line":27,"code":"  it(\"includes all middleware with their default options\", async () => {\n    // NOTE: This test relies on the CSP object being ordered a certain way,\n    // which could change (and be non-breaking). If that becomes a problem,\n    // we should update this test to be more robust.\n    const expectedHeaders = {\n      \"content-security-policy\":\n        \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n      \"cross-origin-embedder-policy\": \"require-corp\",\n      \"cross-origin-opener-policy\": \"same-origin\",\n      \"cross-origin-resource-policy\": \"same-origin\",\n      \"expect-ct\": \"max-age=0\",\n      \"origin-agent-cluster\": \"?1\",\n      \"referrer-policy\": \"no-referrer\",\n      \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-dns-prefetch-control\": \"off\",\n      \"x-download-options\": \"noopen\",\n      \"x-frame-options\": \"SAMEORIGIN\",\n      \"x-permitted-cross-domain-policies\": \"none\",\n      \"x-powered-by\": null,\n      \"x-xss-protection\": \"0\",\n    };\n\n    await check(topLevel(), expectedHeaders);\n    await check(topLevel({}), expectedHeaders);\n    await check(topLevel(Object.create(null)), expectedHeaders);\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows individual middlewares to be disabled","suites":["helmet"],"updatePoint":{"line":55,"column":50},"line":55,"code":"  it(\"allows individual middlewares to be disabled\", async () => {\n    await check(topLevel({ contentSecurityPolicy: false }), {\n      \"content-security-policy\": null,\n    });\n    await check(topLevel({ dnsPrefetchControl: false }), {\n      \"x-dns-prefetch-control\": null,\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"works with all default middlewares disabled","suites":["helmet"],"updatePoint":{"line":64,"column":49},"line":64,"code":"  it(\"works with all default middlewares disabled\", async () => {\n    await check(\n      topLevel({\n        contentSecurityPolicy: false,\n        dnsPrefetchControl: false,\n        expectCt: false,\n        frameguard: false,\n        hidePoweredBy: false,\n        hsts: false,\n        ieNoOpen: false,\n        noSniff: false,\n        originAgentCluster: false,\n        permittedCrossDomainPolicies: false,\n        referrerPolicy: false,\n        xssFilter: false,\n        crossOriginEmbedderPolicy: false,\n      }),\n      {\n        \"content-security-policy\": null,\n        \"x-frame-options\": null,\n      }\n    );\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"errors when `use`d directly","suites":["helmet"],"updatePoint":{"line":88,"column":33},"line":88,"code":"  it(\"errors when `use`d directly\", () => {\n    const fakeRequest = {\n      constructor: {\n        name: \"IncomingMessage\",\n      },\n    };\n\n    expect(() => {\n      topLevel(fakeRequest as any);\n    }).toThrow();\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows default middleware to be explicitly enabled (a no-op)","suites":["helmet"],"updatePoint":{"line":100,"column":66},"line":100,"code":"  it(\"allows default middleware to be explicitly enabled (a no-op)\", async () => {\n    await check(topLevel({ frameguard: true }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Embedder-Policy middleware to be enabled","suites":["helmet"],"updatePoint":{"line":106,"column":66},"line":106,"code":"  it(\"allows Cross-Origin-Embedder-Policy middleware to be enabled\", async () => {\n    await check(topLevel({ crossOriginEmbedderPolicy: true }), {\n      \"cross-origin-embedder-policy\": \"require-corp\",\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Embedder-Policy middleware to be explicitly disabled","suites":["helmet"],"updatePoint":{"line":112,"column":78},"line":112,"code":"  it(\"allows Cross-Origin-Embedder-Policy middleware to be explicitly disabled\", async () => {\n    await check(topLevel({ crossOriginEmbedderPolicy: false }), {\n      \"cross-origin-embedder-policy\": null,\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Opener-Policy middleware to be enabled with its default","suites":["helmet"],"updatePoint":{"line":118,"column":81},"line":118,"code":"  it(\"allows Cross-Origin-Opener-Policy middleware to be enabled with its default\", async () => {\n    await check(topLevel({ crossOriginOpenerPolicy: true }), {\n      \"cross-origin-opener-policy\": \"same-origin\",\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Opener-Policy middleware to be enabled with custom arguments","suites":["helmet"],"updatePoint":{"line":124,"column":86},"line":124,"code":"  it(\"allows Cross-Origin-Opener-Policy middleware to be enabled with custom arguments\", async () => {\n    await check(\n      topLevel({\n        crossOriginOpenerPolicy: { policy: \"same-origin-allow-popups\" },\n      }),\n      {\n        \"cross-origin-opener-policy\": \"same-origin-allow-popups\",\n      }\n    );\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Opener-Policy middleware to be explicitly disabled","suites":["helmet"],"updatePoint":{"line":135,"column":76},"line":135,"code":"  it(\"allows Cross-Origin-Opener-Policy middleware to be explicitly disabled\", async () => {\n    await check(topLevel({ crossOriginOpenerPolicy: false }), {\n      \"cross-origin-opener-policy\": null,\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Resource-Policy middleware to be enabled with its default","suites":["helmet"],"updatePoint":{"line":141,"column":83},"line":141,"code":"  it(\"allows Cross-Origin-Resource-Policy middleware to be enabled with its default\", async () => {\n    await check(topLevel({ crossOriginResourcePolicy: true }), {\n      \"cross-origin-resource-policy\": \"same-origin\",\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Resource-Policy middleware to be enabled with custom arguments","suites":["helmet"],"updatePoint":{"line":147,"column":88},"line":147,"code":"  it(\"allows Cross-Origin-Resource-Policy middleware to be enabled with custom arguments\", async () => {\n    await check(\n      topLevel({ crossOriginResourcePolicy: { policy: \"same-site\" } }),\n      {\n        \"cross-origin-resource-policy\": \"same-site\",\n      }\n    );\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Cross-Origin-Resource-Policy middleware to be explicitly disabled","suites":["helmet"],"updatePoint":{"line":156,"column":78},"line":156,"code":"  it(\"allows Cross-Origin-Resource-Policy middleware to be explicitly disabled\", async () => {\n    await check(topLevel({ crossOriginResourcePolicy: false }), {\n      \"cross-origin-resource-policy\": null,\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Origin-Agent-Cluster middleware to be enabled","suites":["helmet"],"updatePoint":{"line":162,"column":58},"line":162,"code":"  it(\"allows Origin-Agent-Cluster middleware to be enabled\", async () => {\n    await check(topLevel({ originAgentCluster: true }), {\n      \"origin-agent-cluster\": \"?1\",\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"allows Origin-Agent-Cluster middleware to be explicitly disabled","suites":["helmet"],"updatePoint":{"line":168,"column":70},"line":168,"code":"  it(\"allows Origin-Agent-Cluster middleware to be explicitly disabled\", async () => {\n    await check(topLevel({ originAgentCluster: false }), {\n      \"origin-agent-cluster\": null,\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"properly handles a middleware calling `next()` with an error","suites":["helmet"],"updatePoint":{"line":174,"column":66},"line":174,"code":"  it(\"properly handles a middleware calling `next()` with an error\", async () => {\n    const app = connect()\n      .use(\n        topLevel({\n          contentSecurityPolicy: {\n            directives: {\n              defaultSrc: [\"'self'\", () => \"bad;value\"],\n            },\n          },\n        })\n      )\n      .use(\n        (\n          err: Error,\n          _req: IncomingMessage,\n          res: ServerResponse,\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          _next: () => void\n        ) => {\n          res.statusCode = 500;\n          res.setHeader(\"Content-Type\", \"application/json\");\n          res.end(JSON.stringify({ message: err.message }));\n        }\n      );\n\n    await supertest(app).get(\"/\").expect(500, {\n      message:\n        'Content-Security-Policy received an invalid directive value for \"default-src\"',\n    });\n  });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to crossOriginEmbedderPolicy","suites":["helmet","warnings"],"updatePoint":{"line":210,"column":72},"line":210,"code":"    it(\"logs a warning when passing options to crossOriginEmbedderPolicy\", () => {\n      topLevel({ crossOriginEmbedderPolicy: { option: \"foo\" } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"crossOriginEmbedderPolicy does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to hidePoweredBy","suites":["helmet","warnings"],"updatePoint":{"line":219,"column":60},"line":219,"code":"    it(\"logs a warning when passing options to hidePoweredBy\", () => {\n      topLevel({ hidePoweredBy: { setTo: \"deprecated option\" } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"hidePoweredBy does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to ieNoOpen","suites":["helmet","warnings"],"updatePoint":{"line":228,"column":55},"line":228,"code":"    it(\"logs a warning when passing options to ieNoOpen\", () => {\n      topLevel({ ieNoOpen: { option: \"foo\" } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"ieNoOpen does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to originAgentCluster","suites":["helmet","warnings"],"updatePoint":{"line":237,"column":65},"line":237,"code":"    it(\"logs a warning when passing options to originAgentCluster\", () => {\n      topLevel({ originAgentCluster: { option: \"foo\" } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"originAgentCluster does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to noSniff","suites":["helmet","warnings"],"updatePoint":{"line":246,"column":54},"line":246,"code":"    it(\"logs a warning when passing options to noSniff\", () => {\n      topLevel({ noSniff: { option: \"foo\" } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"noSniff does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when passing options to xssFilter","suites":["helmet","warnings"],"updatePoint":{"line":255,"column":56},"line":255,"code":"    it(\"logs a warning when passing options to xssFilter\", () => {\n      topLevel({ xssFilter: { setOnOldIe: true } as any });\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"xssFilter does not take options. Remove the property to silence this warning.\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-DNS-Prefetch-Control middleware to helmet.dnsPrefetchControl","suites":["helmet","module aliases"],"updatePoint":{"line":266,"column":82},"line":266,"code":"    it(\"aliases the X-DNS-Prefetch-Control middleware to helmet.dnsPrefetchControl\", () => {\n      expect(helmet.dnsPrefetchControl.name).toBe(xDnsPrefetchControl.name);\n      expect(helmet.dnsPrefetchControl.name).toBe(\"xDnsPrefetchControl\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Cross-Origin-Embedder-Policy middleware to helmet.crossOriginEmbedderPolicy","suites":["helmet","module aliases"],"updatePoint":{"line":271,"column":95},"line":271,"code":"    it(\"aliases the Cross-Origin-Embedder-Policy middleware to helmet.crossOriginEmbedderPolicy\", () => {\n      expect(helmet.crossOriginEmbedderPolicy.name).toBe(\n        crossOriginEmbedderPolicy.name\n      );\n      expect(helmet.crossOriginEmbedderPolicy.name).toBe(\n        \"crossOriginEmbedderPolicy\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Cross-Origin-Opener-Policy middleware to helmet.crossOriginOpenerPolicy","suites":["helmet","module aliases"],"updatePoint":{"line":280,"column":91},"line":280,"code":"    it(\"aliases the Cross-Origin-Opener-Policy middleware to helmet.crossOriginOpenerPolicy\", () => {\n      expect(helmet.crossOriginOpenerPolicy.name).toBe(\n        crossOriginOpenerPolicy.name\n      );\n      expect(helmet.crossOriginOpenerPolicy.name).toBe(\n        \"crossOriginOpenerPolicy\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Cross-Origin-Resource-Policy middleware to helmet.crossOriginResourcePolicy","suites":["helmet","module aliases"],"updatePoint":{"line":289,"column":95},"line":289,"code":"    it(\"aliases the Cross-Origin-Resource-Policy middleware to helmet.crossOriginResourcePolicy\", () => {\n      expect(helmet.crossOriginResourcePolicy.name).toBe(\n        crossOriginResourcePolicy.name\n      );\n      expect(helmet.crossOriginResourcePolicy.name).toBe(\n        \"crossOriginResourcePolicy\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-Content-Type-Options middleware to helmet.noSniff","suites":["helmet","module aliases"],"updatePoint":{"line":298,"column":71},"line":298,"code":"    it(\"aliases the X-Content-Type-Options middleware to helmet.noSniff\", () => {\n      expect(helmet.noSniff.name).toBe(xContentTypeOptions.name);\n      expect(helmet.noSniff.name).toBe(\"xContentTypeOptions\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Expect-CT middleware to helmet.expectCt","suites":["helmet","module aliases"],"updatePoint":{"line":303,"column":59},"line":303,"code":"    it(\"aliases the Expect-CT middleware to helmet.expectCt\", () => {\n      expect(helmet.expectCt.name).toBe(expectCt.name);\n      expect(helmet.expectCt.name).toBe(\"expectCt\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-Permitted-Cross-Domain-Policies middleware to helmet.crossdomain","suites":["helmet","module aliases"],"updatePoint":{"line":308,"column":86},"line":308,"code":"    it(\"aliases the X-Permitted-Cross-Domain-Policies middleware to helmet.crossdomain\", () => {\n      expect(helmet.permittedCrossDomainPolicies.name).toBe(\n        xPermittedCrossDomainPolicies.name\n      );\n      expect(helmet.permittedCrossDomainPolicies.name).toBe(\n        \"xPermittedCrossDomainPolicies\"\n      );\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-Frame-Options middleware to helmet.frameguard","suites":["helmet","module aliases"],"updatePoint":{"line":317,"column":67},"line":317,"code":"    it(\"aliases the X-Frame-Options middleware to helmet.frameguard\", () => {\n      expect(helmet.frameguard.name).toBe(xFrameOptions.name);\n      expect(helmet.frameguard.name).toBe(\"xFrameOptions\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Content-Security-Policy middleware to helmet.contentSecurityPolicy","suites":["helmet","module aliases"],"updatePoint":{"line":322,"column":86},"line":322,"code":"    it(\"aliases the Content-Security-Policy middleware to helmet.contentSecurityPolicy\", () => {\n      expect(helmet.contentSecurityPolicy.name).toBe(\n        contentSecurityPolicy.name\n      );\n      expect(helmet.contentSecurityPolicy.name).toBe(\"contentSecurityPolicy\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-Powered-By middleware to helmet.hidePoweredBy","suites":["helmet","module aliases"],"updatePoint":{"line":329,"column":67},"line":329,"code":"    it(\"aliases the X-Powered-By middleware to helmet.hidePoweredBy\", () => {\n      expect(helmet.hidePoweredBy.name).toBe(xPoweredBy.name);\n      expect(helmet.hidePoweredBy.name).toBe(\"xPoweredBy\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Strict-Transport-Security middleware to helmet.hsts","suites":["helmet","module aliases"],"updatePoint":{"line":334,"column":71},"line":334,"code":"    it(\"aliases the Strict-Transport-Security middleware to helmet.hsts\", () => {\n      expect(helmet.hsts.name).toBe(strictTransportSecurity.name);\n      expect(helmet.hsts.name).toBe(\"strictTransportSecurity\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-Download-Options middleware to helmet.ieNoOpen","suites":["helmet","module aliases"],"updatePoint":{"line":339,"column":68},"line":339,"code":"    it(\"aliases the X-Download-Options middleware to helmet.ieNoOpen\", () => {\n      expect(helmet.ieNoOpen.name).toBe(xDownloadOptions.name);\n      expect(helmet.ieNoOpen.name).toBe(\"xDownloadOptions\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Referrer-Policy middleware to helmet.referrerPolicy","suites":["helmet","module aliases"],"updatePoint":{"line":344,"column":71},"line":344,"code":"    it(\"aliases the Referrer-Policy middleware to helmet.referrerPolicy\", () => {\n      expect(helmet.referrerPolicy.name).toBe(referrerPolicy.name);\n      expect(helmet.referrerPolicy.name).toBe(\"referrerPolicy\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the Origin-Agent-Cluster middleware to helmet.originAgentCluster","suites":["helmet","module aliases"],"updatePoint":{"line":349,"column":80},"line":349,"code":"    it(\"aliases the Origin-Agent-Cluster middleware to helmet.originAgentCluster\", () => {\n      expect(helmet.originAgentCluster.name).toBe(originAgentCluster.name);\n      expect(helmet.originAgentCluster.name).toBe(\"originAgentCluster\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"aliases the X-XSS-Protection middleware to helmet.xssFilter","suites":["helmet","module aliases"],"updatePoint":{"line":354,"column":67},"line":354,"code":"    it(\"aliases the X-XSS-Protection middleware to helmet.xssFilter\", () => {\n      expect(helmet.xssFilter.name).toBe(xXssProtection.name);\n      expect(helmet.xssFilter.name).toBe(\"xXssProtection\");\n    });","file":"index.test.ts","skipped":false,"dir":"test"},{"name":"sets \"Origin-Agent-Cluster: ?1\"","suites":["Origin-Agent-Cluster middleware"],"updatePoint":{"line":5,"column":37},"line":5,"code":"  it('sets \"Origin-Agent-Cluster: ?1\"', async () => {\n    await check(originAgentCluster(), {\n      \"origin-agent-cluster\": \"?1\",\n    });\n  });","file":"origin-agent-cluster.test.ts","skipped":false,"dir":"test"},{"name":"sets header to no-referrer when passed no policy","suites":["Referrer-Policy middleware"],"updatePoint":{"line":5,"column":54},"line":5,"code":"  it(\"sets header to no-referrer when passed no policy\", async () => {\n    await check(referrerPolicy(), {\n      \"referrer-policy\": \"no-referrer\",\n    });\n    await check(referrerPolicy({}), {\n      \"referrer-policy\": \"no-referrer\",\n    });\n    await check(referrerPolicy(Object.create(null)), {\n      \"referrer-policy\": \"no-referrer\",\n    });\n    await check(referrerPolicy({ policy: undefined }), {\n      \"referrer-policy\": \"no-referrer\",\n    });\n  });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"can set the header to \"\" by specifying it as a string","suites":["Referrer-Policy middleware"],"updatePoint":{"line":31,"column":70},"line":31,"code":"    it(`can set the header to \"${policy}\" by specifying it as a string`, async () => {\n      await check(referrerPolicy({ policy }), {\n        \"referrer-policy\": policy,\n      });\n    });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"can set the header to \"\" by specifying it as an array string","suites":["Referrer-Policy middleware"],"updatePoint":{"line":37,"column":77},"line":37,"code":"    it(`can set the header to \"${policy}\" by specifying it as an array string`, async () => {\n      await check(referrerPolicy({ policy: [policy] }), {\n        \"referrer-policy\": policy,\n      });\n    });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"can set an array with multiple values","suites":["Referrer-Policy middleware"],"updatePoint":{"line":44,"column":43},"line":44,"code":"  it(\"can set an array with multiple values\", async () => {\n    await check(referrerPolicy({ policy: [\"origin\", \"unsafe-url\"] }), {\n      \"referrer-policy\": \"origin,unsafe-url\",\n    });\n  });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"fails with a bad policy","suites":["Referrer-Policy middleware"],"updatePoint":{"line":50,"column":29},"line":50,"code":"  it(\"fails with a bad policy\", () => {\n    const invalidValues = [\"foo\", \"sameorigin\", \"ORIGIN\", 123, false, null, {}];\n    for (const policy of invalidValues) {\n      expect(referrerPolicy.bind(null, { policy: policy as any })).toThrow();\n    }\n  });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"fails with an empty array","suites":["Referrer-Policy middleware"],"updatePoint":{"line":57,"column":31},"line":57,"code":"  it(\"fails with an empty array\", () => {\n    expect(referrerPolicy.bind(null, { policy: [] })).toThrow();\n  });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"fails with duplicate values","suites":["Referrer-Policy middleware"],"updatePoint":{"line":61,"column":33},"line":61,"code":"  it(\"fails with duplicate values\", () => {\n    expect(\n      referrerPolicy.bind(null, { policy: [\"origin\", \"origin\"] })\n    ).toThrow();\n    expect(\n      referrerPolicy.bind(null, {\n        policy: [\"same-origin\", \"origin\", \"same-origin\"],\n      })\n    ).toThrow();\n  });","file":"referrer-policy.test.ts","skipped":false,"dir":"test"},{"name":"by default, sets max-age to 180 days and adds \"includeSubDomains\"","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":5,"column":71},"line":5,"code":"  it('by default, sets max-age to 180 days and adds \"includeSubDomains\"', async () => {\n    expect(15552000).toStrictEqual(180 * 24 * 60 * 60);\n\n    const expectedHeaders = {\n      \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n    };\n\n    await check(strictTransportSecurity(), expectedHeaders);\n    await check(strictTransportSecurity({}), expectedHeaders);\n    await check(strictTransportSecurity(Object.create(null)), expectedHeaders);\n    await check(\n      strictTransportSecurity({ maxAge: undefined }),\n      expectedHeaders\n    );\n    await check(\n      strictTransportSecurity({ includeSubDomains: undefined }),\n      expectedHeaders\n    );\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"sets the max-age to a non-negative integer","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":25,"column":48},"line":25,"code":"  it(\"sets the max-age to a non-negative integer\", async () => {\n    await check(strictTransportSecurity({ maxAge: 1234 }), {\n      \"strict-transport-security\": \"max-age=1234; includeSubDomains\",\n    });\n    await check(strictTransportSecurity({ maxAge: 0 }), {\n      \"strict-transport-security\": \"max-age=0; includeSubDomains\",\n    });\n    await check(strictTransportSecurity({ maxAge: -0 }), {\n      \"strict-transport-security\": \"max-age=0; includeSubDomains\",\n    });\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"rounds non-integer max-ages down","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":37,"column":38},"line":37,"code":"  it(\"rounds non-integer max-ages down\", async () => {\n    await check(strictTransportSecurity({ maxAge: 123.4 }), {\n      \"strict-transport-security\": \"max-age=123; includeSubDomains\",\n    });\n    await check(strictTransportSecurity({ maxAge: 123.5 }), {\n      \"strict-transport-security\": \"max-age=123; includeSubDomains\",\n    });\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"disables subdomains with the includeSubDomains option","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":46,"column":59},"line":46,"code":"  it(\"disables subdomains with the includeSubDomains option\", async () => {\n    await check(strictTransportSecurity({ includeSubDomains: false }), {\n      \"strict-transport-security\": \"max-age=15552000\",\n    });\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"can enable preloading","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":52,"column":27},"line":52,"code":"  it(\"can enable preloading\", async () => {\n    await check(strictTransportSecurity({ preload: true }), {\n      \"strict-transport-security\":\n        \"max-age=15552000; includeSubDomains; preload\",\n    });\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"can explicitly disable preloading","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":59,"column":39},"line":59,"code":"  it(\"can explicitly disable preloading\", async () => {\n    await check(strictTransportSecurity({ preload: false }), {\n      \"strict-transport-security\": \"max-age=15552000; includeSubDomains\",\n    });\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"throws an error with invalid parameters","suites":["Strict-Transport-Security middleware"],"updatePoint":{"line":65,"column":45},"line":65,"code":"  it(\"throws an error with invalid parameters\", () => {\n    expect(() => strictTransportSecurity({ maxAge: -123 })).toThrow();\n    expect(() =>\n      strictTransportSecurity({ maxAge: BigInt(-123) as any })\n    ).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: -0.1 })).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: Infinity })).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: -Infinity })).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: NaN })).toThrow();\n\n    expect(() => strictTransportSecurity({ maxAge: \"123\" } as any)).toThrow();\n    expect(() =>\n      strictTransportSecurity({ maxAge: BigInt(123) } as any)\n    ).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: true } as any)).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: false } as any)).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: {} } as any)).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: [] } as any)).toThrow();\n    expect(() => strictTransportSecurity({ maxAge: null } as any)).toThrow();\n\n    expect(() => strictTransportSecurity({ maxage: false } as any)).toThrow();\n    expect(() => strictTransportSecurity({ maxage: 1234 } as any)).toThrow();\n  });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when using the `includeSubdomains` parameter","suites":["Strict-Transport-Security middleware","warnings for legacy usage"],"updatePoint":{"line":97,"column":67},"line":97,"code":"    it(\"logs a warning when using the `includeSubdomains` parameter\", () => {\n      strictTransportSecurity({ includeSubdomains: false } as any);\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        'Strict-Transport-Security middleware should use `includeSubDomains` instead of `includeSubdomains`. (The correct one has an uppercase \"D\".)'\n      );\n    });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"logs a warning when using the `setIf` parameter","suites":["Strict-Transport-Security middleware","warnings for legacy usage"],"updatePoint":{"line":106,"column":55},"line":106,"code":"    it(\"logs a warning when using the `setIf` parameter\", () => {\n      strictTransportSecurity({ setIf: () => false } as any);\n\n      expect(console.warn).toHaveBeenCalledTimes(1);\n      expect(console.warn).toHaveBeenCalledWith(\n        \"Strict-Transport-Security middleware no longer supports the `setIf` parameter. See the documentation and <https://github.com/helmetjs/helmet/wiki/Conditionally-using-middleware> if you need help replicating this behavior.\"\n      );\n    });","file":"strict-transport-security.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-Content-Type-Options: nosniff\"","suites":["X-Content-Type-Options middleware"],"updatePoint":{"line":5,"column":44},"line":5,"code":"  it('sets \"X-Content-Type-Options: nosniff\"', async () => {\n    await check(xContentTypeOptions(), {\n      \"x-content-type-options\": \"nosniff\",\n    });\n  });","file":"x-content-type-options.test.ts","skipped":false,"dir":"test"},{"name":"sets the header to \"off\" by default","suites":["X-DNS-Prefetch-Control middleware"],"updatePoint":{"line":5,"column":41},"line":5,"code":"  it('sets the header to \"off\" by default', async () => {\n    const expectedHeaders = { \"x-dns-prefetch-control\": \"off\" };\n\n    await check(xDnsPrefetchControl(), expectedHeaders);\n    await check(xDnsPrefetchControl({}), expectedHeaders);\n    await check(xDnsPrefetchControl(Object.create(null)), expectedHeaders);\n  });","file":"x-dns-prefetch-control.test.ts","skipped":false,"dir":"test"},{"name":"can set header to \"off\" with configuration","suites":["X-DNS-Prefetch-Control middleware"],"updatePoint":{"line":13,"column":48},"line":13,"code":"  it('can set header to \"off\" with configuration', async () => {\n    await check(xDnsPrefetchControl({ allow: false }), {\n      \"x-dns-prefetch-control\": \"off\",\n    });\n  });","file":"x-dns-prefetch-control.test.ts","skipped":false,"dir":"test"},{"name":"can set header to \"on\" with configuration","suites":["X-DNS-Prefetch-Control middleware"],"updatePoint":{"line":19,"column":47},"line":19,"code":"  it('can set header to \"on\" with configuration', async () => {\n    await check(xDnsPrefetchControl({ allow: true }), {\n      \"x-dns-prefetch-control\": \"on\",\n    });\n  });","file":"x-dns-prefetch-control.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-Download-Options: noopen\"","suites":["X-Download-Options middleware"],"updatePoint":{"line":5,"column":39},"line":5,"code":"  it('sets \"X-Download-Options: noopen\"', async () => {\n    await check(xDownloadOptions(), {\n      \"x-download-options\": \"noopen\",\n    });\n  });","file":"x-download-options.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-Frame-Options: SAMEORIGIN\" when passed no action","suites":["X-Frame-Options middleware"],"updatePoint":{"line":5,"column":62},"line":5,"code":"  it('sets \"X-Frame-Options: SAMEORIGIN\" when passed no action', async () => {\n    await check(xFrameOptions(), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({}), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions(Object.create(null)), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({ action: undefined }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n  });","file":"x-frame-options.test.ts","skipped":false,"dir":"test"},{"name":"can set \"X-Frame-Options: DENY\"","suites":["X-Frame-Options middleware"],"updatePoint":{"line":20,"column":37},"line":20,"code":"  it('can set \"X-Frame-Options: DENY\"', async () => {\n    await check(xFrameOptions({ action: \"DENY\" }), {\n      \"x-frame-options\": \"DENY\",\n    });\n    await check(xFrameOptions({ action: \"deny\" }), {\n      \"x-frame-options\": \"DENY\",\n    });\n    await check(xFrameOptions({ action: \"deNY\" }), {\n      \"x-frame-options\": \"DENY\",\n    });\n  });","file":"x-frame-options.test.ts","skipped":false,"dir":"test"},{"name":"can set \"X-Frame-Options: SAMEORIGIN\" when specified","suites":["X-Frame-Options middleware"],"updatePoint":{"line":32,"column":58},"line":32,"code":"  it('can set \"X-Frame-Options: SAMEORIGIN\" when specified', async () => {\n    await check(xFrameOptions({ action: \"SAMEORIGIN\" }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({ action: \"sameorigin\" }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({ action: \"sameORIGIN\" }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({ action: \"SAME-ORIGIN\" }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n    await check(xFrameOptions({ action: \"same-origin\" }), {\n      \"x-frame-options\": \"SAMEORIGIN\",\n    });\n  });","file":"x-frame-options.test.ts","skipped":false,"dir":"test"},{"name":"throws when passed invalid actions","suites":["X-Frame-Options middleware"],"updatePoint":{"line":50,"column":40},"line":50,"code":"  it(\"throws when passed invalid actions\", () => {\n    for (const action of [\"allow-from\", \"ALLOW-FROM\"]) {\n      expect(() => xFrameOptions({ action })).toThrow(\n        /^X-Frame-Options no longer supports `ALLOW-FROM` due to poor browser support. See <https:\\/\\/github.com\\/helmetjs\\/helmet\\/wiki\\/How-to-use-X%E2%80%93Frame%E2%80%93Options's-%60ALLOW%E2%80%93FROM%60-directive> for more info.$/\n      );\n    }\n\n    for (const action of [\n      \"\",\n      \"foo\",\n      \" deny\",\n      123,\n      null,\n      new String(\"SAMEORIGIN\"),\n    ]) {\n      expect(() => xFrameOptions({ action: action as any })).toThrow(\n        /^X-Frame-Options received an invalid action /\n      );\n    }\n  });","file":"x-frame-options.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-Permitted-Cross-Domain-Policies: none\" when called with no permitted policies","suites":["X-Permitted-Cross-Domain-Policies middleware"],"updatePoint":{"line":5,"column":91},"line":5,"code":"  it('sets \"X-Permitted-Cross-Domain-Policies: none\" when called with no permitted policies', async () => {\n    const expectedHeaders = {\n      \"x-permitted-cross-domain-policies\": \"none\",\n    };\n    await check(xPermittedCrossDomainPolicies(), expectedHeaders);\n    await check(xPermittedCrossDomainPolicies({}), expectedHeaders);\n    await check(\n      xPermittedCrossDomainPolicies(Object.create(null)),\n      expectedHeaders\n    );\n    await check(\n      xPermittedCrossDomainPolicies({ permittedPolicies: undefined }),\n      expectedHeaders\n    );\n  });","file":"x-permitted-cross-domain-policies.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-Permitted-Cross-Domain-Policies: \" when told to","suites":["X-Permitted-Cross-Domain-Policies middleware"],"updatePoint":{"line":23,"column":85},"line":23,"code":"      it(`sets \"X-Permitted-Cross-Domain-Policies: ${permittedPolicies}\" when told to`, async () => {\n        await check(xPermittedCrossDomainPolicies({ permittedPolicies }), {\n          \"x-permitted-cross-domain-policies\": permittedPolicies,\n        });\n      });","file":"x-permitted-cross-domain-policies.test.ts","skipped":false,"dir":"test"},{"name":"throws when setting the policy to an invalid value","suites":["X-Permitted-Cross-Domain-Policies middleware"],"updatePoint":{"line":31,"column":56},"line":31,"code":"  it(\"throws when setting the policy to an invalid value\", () => {\n    const invalidValues = [\n      \"\",\n      \"NONE\",\n      \"by-ftp-filename\",\n      123,\n      null,\n      new String(\"none\"),\n    ];\n    for (const permittedPolicies of invalidValues) {\n      expect(() =>\n        xPermittedCrossDomainPolicies({\n          permittedPolicies: permittedPolicies as any,\n        })\n      ).toThrow(/^X-Permitted-Cross-Domain-Policies does not support /);\n    }\n  });","file":"x-permitted-cross-domain-policies.test.ts","skipped":false,"dir":"test"},{"name":"does nothing if the request was not set earlier in the stack","suites":["X-Powered-By middleware"],"updatePoint":{"line":5,"column":66},"line":5,"code":"  it(\"does nothing if the request was not set earlier in the stack\", async () => {\n    await check(xPoweredBy(), {\n      \"x-powered-by\": null,\n    });\n  });","file":"x-powered-by.test.ts","skipped":false,"dir":"test"},{"name":"removes the header if it was set earlier in the stack","suites":["X-Powered-By middleware"],"updatePoint":{"line":11,"column":59},"line":11,"code":"  it(\"removes the header if it was set earlier in the stack\", async () => {\n    await check(\n      (req, res, next) => {\n        res.setHeader(\"X-POWERED-BY\", \"should be destroyed\");\n        xPoweredBy()(req, res, next);\n      },\n      {\n        \"x-powered-by\": null,\n      }\n    );\n  });","file":"x-powered-by.test.ts","skipped":false,"dir":"test"},{"name":"sets \"X-XSS-Protection: 0\"","suites":["X-XSS-Protection middleware"],"updatePoint":{"line":5,"column":32},"line":5,"code":"  it('sets \"X-XSS-Protection: 0\"', async () => {\n    await check(xXssProtection(), {\n      \"x-xss-protection\": \"0\",\n    });\n  });","file":"x-xss-protection.test.ts","skipped":false,"dir":"test"}]}