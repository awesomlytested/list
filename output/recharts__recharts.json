{"repo":"recharts/recharts","url":"https://github.com/recharts/recharts","branch":"master","configs":[{"package":"recharts","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Render 2 travellers and 1 slide in simple Brush","suites":["<Brush />"],"updatePoint":{"line":7,"column":53,"index":679},"line":7,"code":"  it('Render 2 travellers and 1 slide in simple Brush', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    expect(wrapper.find('.recharts-brush-traveller').length).to.equal(2);\n    expect(wrapper.find('.recharts-brush-slide').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any travellers or slide when data is empty in simple Brush","suites":["<Brush />"],"updatePoint":{"line":18,"column":77,"index":1076},"line":18,"code":"  it(\"Don't render any travellers or slide when data is empty in simple Brush\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: []\n    }));\n    expect(wrapper.find('.recharts-brush-traveller').length).to.equal(0);\n    expect(wrapper.find('.recharts-brush-slide').length).to.equal(0);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Render panorama when specified LineChart as child","suites":["<Brush />"],"updatePoint":{"line":29,"column":55,"index":1449},"line":29,"code":"  it('Render panorama when specified LineChart as child', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }, /*#__PURE__*/React.createElement(LineChart, null, /*#__PURE__*/React.createElement(Line, null))));\n    expect(wrapper.find('.recharts-line').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter and mouse leave on traveller will set isTextActive true","suites":["<Brush />"],"updatePoint":{"line":39,"column":73,"index":1858},"line":39,"code":"  it('mouse enter and mouse leave on traveller will set isTextActive true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const layers = wrapper.find('.recharts-brush-traveller');\n    const treavellerLayer = layers.at(1);\n    treavellerLayer.simulate('mouseEnter');\n    expect(wrapper.state().isTextActive).to.equal(true);\n    treavellerLayer.simulate('mouseLeave');\n    expect(wrapper.state().isTextActive).to.equal(false);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse down on brush traveller will set isTravellerMoving true","suites":["<Brush />"],"updatePoint":{"line":54,"column":67,"index":2407},"line":54,"code":"  it('mouse down on brush traveller will set isTravellerMoving true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const layers = wrapper.find('.recharts-brush-traveller');\n    const treavellerLayer = layers.at(1);\n    treavellerLayer.simulate('mouseDown');\n    expect(wrapper.state().isTravellerMoving).to.equal(true);\n    wrapper.simulate('mouseMove');\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse down on brush slide will set isSlideMoving true","suites":["<Brush />"],"updatePoint":{"line":68,"column":59,"index":2885},"line":68,"code":"  it('mouse down on brush slide will set isSlideMoving true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const slide = wrapper.find('.recharts-brush-slide');\n    slide.simulate('mouseDown');\n    expect(wrapper.state().isSlideMoving).to.equal(true);\n    wrapper.simulate('mouseMove');\n    wrapper.simulate('mouseLeave');\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"render text when alwaysShowText is true","suites":["<Brush />"],"updatePoint":{"line":82,"column":45,"index":3324},"line":82,"code":"  it('render text when alwaysShowText is true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data,\n      alwaysShowText: true\n    }));\n    expect(wrapper.find('.recharts-layer.recharts-brush-texts').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Render symbols in a simple Scatter","suites":["<Scatter />"],"updatePoint":{"line":52,"column":40,"index":771},"line":52,"code":"  it('Render symbols in a simple Scatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      points: data\n    })));\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbols when data is empty","suites":["<Scatter />"],"updatePoint":{"line":61,"column":49,"index":1108},"line":61,"code":"  it(\"Don't render any symbols when data is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      points: []\n    })));\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(0);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized symbols when shape is set to be a ReactElement","suites":["<Scatter />"],"updatePoint":{"line":70,"column":70,"index":1454},"line":70,"code":"  it('Render customized symbols when shape is set to be a ReactElement', () => {\n    const CustomizedShape = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 5,\n      className: \"customized-shape\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      shape: /*#__PURE__*/React.createElement(CustomizedShape, null),\n      points: data\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized symbols when shape is set to be a function","suites":["<Scatter />"],"updatePoint":{"line":90,"column":66,"index":2092},"line":90,"code":"  it('Render customized symbols when shape is set to be a function', () => {\n    const renderCustomizedShape = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 5,\n      className: \"customized-shape\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      shape: renderCustomizedShape,\n      points: data\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized line when line is set to be a ReactElement","suites":["<Scatter />"],"updatePoint":{"line":110,"column":66,"index":2702},"line":110,"code":"  it('Render customized line when line is set to be a ReactElement', () => {\n    const CustomizedLine = ({\n      points\n    }) => /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0,0L200,200\",\n      className: \"customized-line\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      line: /*#__PURE__*/React.createElement(CustomizedLine, null),\n      points: data\n    })));\n    expect(wrapper.find('.customized-line').length).to.equal(1);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized line when line is set to be a function","suites":["<Scatter />"],"updatePoint":{"line":127,"column":62,"index":3298},"line":127,"code":"  it('Render customized line when line is set to be a function', () => {\n    const renderCustomizedLine = ({\n      points\n    }) => /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0,0L200,200\",\n      className: \"customized-line\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      line: renderCustomizedLine,\n      points: data\n    })));\n    expect(wrapper.find('.customized-line').length).to.equal(1);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter or mouse leave a symbol","suites":["<Scatter />"],"updatePoint":{"line":144,"column":41,"index":3845},"line":144,"code":"  it('mouse enter or mouse leave a symbol', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      points: data\n    })));\n    const layers = wrapper.find(Layer);\n    const syb = layers.at(5);\n    syb.simulate('mouseEnter');\n    syb.simulate('mouseLeave');\n    syb.simulate('click');\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart","suites":["<XAxis />"],"updatePoint":{"line":63,"column":74,"index":1052},"line":63,"code":"  it('Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find(CartesianAxis).length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<XAxis />"],"updatePoint":{"line":88,"column":27,"index":1710},"line":88,"code":"  it(\"Don't render anything\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render x-axis when hide is setted to be true","suites":["<XAxis />"],"updatePoint":{"line":100,"column":56,"index":2141},"line":100,"code":"  it(\"Don't render x-axis when hide is setted to be true\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      hide: true\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-x-axis').length).to.equal(0);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of XAxis when specify ticks","suites":["<XAxis />"],"updatePoint":{"line":120,"column":46,"index":2693},"line":120,"code":"  it('Render ticks of XAxis when specify ticks', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      ticks: [0, 4]\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks with tickFormatter","suites":["<XAxis />"],"updatePoint":{"line":140,"column":37,"index":3259},"line":140,"code":"  it('Render ticks with tickFormatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      tickFormatter: (value, i) => `${i}`\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').first()).text().to.equal('0');\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render duplicated ticks of XAxis","suites":["<XAxis />"],"updatePoint":{"line":161,"column":38,"index":3881},"line":161,"code":"  it('Render duplicated ticks of XAxis', () => {\n    const lineData = [{\n      name: '03/07/2017',\n      balance: 23126.11\n    }, {\n      name: '03/02/2017',\n      balance: 23137.39\n    }, {\n      name: '03/01/2017',\n      balance: 24609.55\n    }, {\n      name: '03/01/2017',\n      balance: 26827.66\n    }, {\n      name: '02/24/2017',\n      balance: 26807.66\n    }, {\n      name: '02/21/2017',\n      balance: 23835.62\n    }, {\n      name: '02/16/2017',\n      balance: 23829.62\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: lineData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      interval: 0\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"balance\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(lineData.length);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of when the scale of XAxis is time","suites":["<XAxis />"],"updatePoint":{"line":207,"column":53,"index":5034},"line":207,"code":"  it('Render ticks of when the scale of XAxis is time', () => {\n    const timeData = [{\n      x: new Date('2019-07-04T00:00:00.000Z'),\n      y: 5\n    }, {\n      x: new Date('2019-07-05T00:00:00.000Z'),\n      y: 30\n    }, {\n      x: new Date('2019-07-06T00:00:00.000Z'),\n      y: 50\n    }, {\n      x: new Date('2019-07-07T00:00:00.000Z'),\n      y: 43\n    }, {\n      x: new Date('2019-07-08T00:00:00.000Z'),\n      y: 20\n    }, {\n      x: new Date('2019-07-09T00:00:00.000Z'),\n      y: -20\n    }, {\n      x: new Date('2019-07-10T00:00:00.000Z'),\n      y: 30\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: timeData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      domain: [timeData[0].x.getTime(), timeData[timeData.length - 1].x.getTime()],\n      scale: \"time\",\n      type: \"number\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with gap","suites":["<XAxis />"],"updatePoint":{"line":255,"column":26,"index":6308},"line":255,"code":"  it('Render Bars with gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(70);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with no gap","suites":["<XAxis />"],"updatePoint":{"line":272,"column":29,"index":6852},"line":272,"code":"  it('Render Bars with no gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"no-gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(66);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 3 y-CartesianAxis in AreaChart","suites":["<YAxis />"],"updatePoint":{"line":32,"column":43,"index":617},"line":32,"code":"  it('Render 3 y-CartesianAxis in AreaChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      yAxisId: 0,\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      orient: \"right\",\n      yAxisId: 1,\n      stroke: \"#387908\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      orient: \"right\",\n      yAxisId: 2,\n      stroke: \"#38abc8\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\",\n      strokeWidth: 2,\n      yAxisId: 0\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#387908\",\n      fill: \"#387908\",\n      strokeWidth: 2,\n      yAxisId: 1\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"amt\",\n      stroke: \"#38abc8\",\n      fill: \"#38abc8\",\n      strokeWidth: 2,\n      yAxisId: 2\n    })));\n    expect(wrapper.find(CartesianAxis).length).to.equal(3);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks","suites":["<YAxis />"],"updatePoint":{"line":72,"column":20,"index":1710},"line":72,"code":"  it('Render 4 ticks', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(297.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, 10000]}","suites":["<YAxis />"],"updatePoint":{"line":89,"column":45,"index":2250},"line":89,"code":"  it('Render 4 ticks when domain={[0, 10000]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 10000]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.last().props().children).to.equal('10000');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, \"dataMax\"]}","suites":["<YAxis />"],"updatePoint":{"line":111,"column":49,"index":2945},"line":111,"code":"  it('Render 4 ticks when domain={[0, \"dataMax\"]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(3);\n    expect(ticks.last().props().children).to.equal('9800');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, \"dataMax - 100\"]}","suites":["<YAxis />"],"updatePoint":{"line":133,"column":55,"index":3649},"line":133,"code":"  it('Render 4 ticks when domain={[0, \"dataMax - 100\"]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax - 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(3);\n    expect(ticks.last().props().children).to.equal('9800');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, 1000]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":155,"column":70,"index":4374},"line":155,"code":"  it('Render 1 ticks when domain={[0, 1000]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 1000]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(297.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, \"dataMax + 100\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":172,"column":81,"index":4958},"line":172,"code":"  it('Render 1 ticks when domain={[0, \"dataMax + 100\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax + 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, \"dataMax - 100\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":188,"column":81,"index":5500},"line":188,"code":"  it('Render 1 ticks when domain={[0, \"dataMax - 100\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax - 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[\"auto, \"auto\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":204,"column":76,"index":6037},"line":204,"code":"  it('Render 1 ticks when domain={[\"auto, \"auto\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: ['auto', 'auto']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks","suites":["<YAxis />"],"updatePoint":{"line":220,"column":20,"index":6514},"line":220,"code":"  it('Render 4 ticks', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      ticks: [0, 400, 800, 1200]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.at(0).text()).to.equal('400');\n    expect(ticks.at(1).text()).to.equal('800');\n    expect(ticks.at(2).text()).to.equal('1200');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks reversed","suites":["<YAxis />"],"updatePoint":{"line":239,"column":27,"index":7124},"line":239,"code":"  it('Render ticks reversed', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      reversed: true,\n      type: \"number\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(102.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render empty tick","suites":["<YAxis />"],"updatePoint":{"line":257,"column":29,"index":7670},"line":257,"code":"  it(\"Don't render empty tick\", () => {\n    const areaData = [{\n      day: '05-01',\n      weather: 'sunny'\n    }, {\n      day: '05-02'\n    }, {\n      day: '05-03',\n      weather: 'cloudy'\n    }, {\n      day: '05-04',\n      weather: 'rain'\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 400,\n      height: 400,\n      data: areaData\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"day\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"stepAfter\",\n      dataKey: \"weather\",\n      stroke: \"#0088FE\"\n    })));\n    setTimeout(() => {\n      const yAxisTicks = wrapper.find('.yAxis .recharts-cartesian-axis-tick-value tspan');\n      expect(yAxisTicks.length).to.equal(3);\n    }, 1000);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<YAxis />"],"updatePoint":{"line":288,"column":27,"index":8503},"line":288,"code":"  it(\"Don't render anything\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<ZAxis />"],"updatePoint":{"line":6,"column":27,"index":199},"line":6,"code":"  it(\"Don't render anything\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/ZAxisSpec.js","skipped":false,"dir":"test"},{"name":"renders 48 nodes in simple SankeyChart","suites":["<Sankey />"],"updatePoint":{"line":383,"column":44,"index":6520},"line":383,"code":"  it('renders 48 nodes in simple SankeyChart', () => {\n    expect(wrapper.find('.recharts-sankey-node').length).to.equal(48);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"renders 68 links in simple SankeyChart","suites":["<Sankey />"],"updatePoint":{"line":386,"column":44,"index":6652},"line":386,"code":"  it('renders 68 links in simple SankeyChart', () => {\n    expect(wrapper.find('.recharts-sankey-link').length).to.equal(68);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"re-renders links and nodes when data changes","suites":["<Sankey />"],"updatePoint":{"line":389,"column":50,"index":6790},"line":389,"code":"  it('re-renders links and nodes when data changes', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Sankey, {\n      width: 1000,\n      height: 500,\n      data: data\n    }));\n    expect(wrapper.render().find('.recharts-sankey-node').length).to.equal(48);\n    expect(wrapper.render().find('.recharts-sankey-link').length).to.equal(68);\n    const newData = {\n      ...data,\n      nodes: [...data.nodes, {\n        name: 'New Node'\n      }],\n      links: [...data.links, {\n        source: 2,\n        target: data.nodes.length,\n        value: 100.0\n      }]\n    };\n    wrapper.setProps({\n      data: newData\n    });\n    setTimeout(() => {\n      expect(wrapper.render().find('.recharts-sankey-node').length).to.equal(49);\n      expect(wrapper.render().find('.recharts-sankey-link').length).to.equal(69);\n    }, 1000);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"Render 2 Scatter","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":56,"column":22,"index":854},"line":56,"code":"  it('Render 2 Scatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data01,\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"B school\",\n      data: data02,\n      fill: \"#347300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, null)));\n    expect(wrapper.find('.recharts-scatter').length).to.equal(2);\n    expect(wrapper.find('.recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(data01.length + data02.length);\n    expect(wrapper.find('.recharts-scatter-symbol path').length).to.equal(data01.length + data02.length);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbols when data is empty","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":93,"column":49,"index":2226},"line":93,"code":"  it(\"Don't render any symbols when data is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: [],\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, {\n      layout: \"vertical\"\n    })));\n    expect(wrapper.find('.recharts-symbol').length).to.equal(0);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter on one circle will trigger one Cross","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":126,"column":54,"index":3249},"line":126,"code":"  it('mouse enter on one circle will trigger one Cross', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data01,\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"B school\",\n      data: data02,\n      fill: \"#347300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, null)));\n    const symbols = wrapper.find(Symbols);\n    const firstSymbol = symbols.first();\n    firstSymbol.simulate('mouseEnter');\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 6 circles in simple ScatterChart","suites":["ScatterChart of two dimension data"],"updatePoint":{"line":213,"column":46,"index":5271},"line":213,"code":"  it('renders 6 circles in simple ScatterChart', () => {\n    expect(wrapper.find('.recharts-symbols').length).to.equal(6);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 jointed line when line is setted to be true","suites":["ScatterChart of two dimension data"],"updatePoint":{"line":216,"column":59,"index":5413},"line":216,"code":"  it('renders 1 jointed line when line is setted to be true', () => {\n    expect(wrapper.find('.recharts-scatter-line').length).to.equal(1);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 legend items in simple Legend","suites":["<Legend />"],"updatePoint":{"line":19,"column":44,"index":446},"line":19,"code":"  it('Render 4 legend items in simple Legend', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: data\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(4);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Render customized legend when content is set to be a react element","suites":["<Legend />"],"updatePoint":{"line":28,"column":72,"index":839},"line":28,"code":"  it('Render customized legend when content is set to be a react element', () => {\n    const CustomizedLegend = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"customized-legend\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: data,\n      content: /*#__PURE__*/React.createElement(CustomizedLegend, null)\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(0);\n    expect(wrapper.find('.customized-legend').length).to.equal(1);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Does not render items with a type of `none`","suites":["<Legend />"],"updatePoint":{"line":41,"column":49,"index":1384},"line":41,"code":"  it('Does not render items with a type of `none`', () => {\n    const dataWithNone = [{\n      value: 'Apple',\n      color: '#ff7300'\n    }, {\n      value: 'Samsung',\n      color: '#bb7300'\n    }, {\n      value: 'Huawei',\n      color: '#887300'\n    }, {\n      value: 'Sony',\n      type: 'none'\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: dataWithNone\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(3);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Renders `strokeDasharray` (if present) in Legend when iconType is set to `plainline`","suites":["<Legend />"],"updatePoint":{"line":63,"column":90,"index":2044},"line":63,"code":"  it('Renders `strokeDasharray` (if present) in Legend when iconType is set to `plainline`', () => {\n    const data = [{\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(Legend, {\n      iconType: \"plainline\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      strokeDasharray: \"5 5\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\"\n    })));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item path').length).to.equal(0);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item line').length).to.equal(2);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Does not render `strokeDasharray` (if not present) in Legend when iconType is set to something else than `plainline`","suites":["<Legend />"],"updatePoint":{"line":130,"column":122,"index":3742},"line":130,"code":"  it('Does not render `strokeDasharray` (if not present) in Legend when iconType is set to something else than `plainline`', () => {\n    const data = [{\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(Legend, {\n      iconType: \"line\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      strokeDasharray: \"5 5\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\"\n    })));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item path').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item line').length).to.equal(0);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Does not wrap long text if enough width","suites":["<Text />"],"updatePoint":{"line":6,"column":45,"index":208},"line":6,"code":"  it('Does not wrap long text if enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if not enough width","suites":["<Text />"],"updatePoint":{"line":15,"column":41,"index":514},"line":15,"code":"  it('Wraps long text if not enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 200,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text for 200px\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if styled but would have had enough room","suites":["<Text />"],"updatePoint":{"line":24,"column":62,"index":851},"line":24,"code":"  it('Wraps long text if styled but would have had enough room', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontSize: '2em',\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Does not perform word length calculation if width or scaleToFit props not set","suites":["<Text />"],"updatePoint":{"line":34,"column":83,"index":1224},"line":34,"code":"  it('Does not perform word length calculation if width or scaleToFit props not set', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, null, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n    expect(wrapper.instance().state.wordsByLines[0].width).to.equal(undefined);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when specify the width","suites":["<Text />"],"updatePoint":{"line":39,"column":45,"index":1540},"line":39,"code":"  it('Render 0 success when specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0,\n      width: 30\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when not specify the width","suites":["<Text />"],"updatePoint":{"line":49,"column":49,"index":1810},"line":49,"code":"  it('Render 0 success when not specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render text when x or y is a percentage","suites":["<Text />"],"updatePoint":{"line":58,"column":45,"index":2059},"line":58,"code":"  it('Render text when x or y is a percentage', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: \"50%\",\n      y: \"50%\"\n    }, \"anything\"));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('anything');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render text when x or y is NaN ","suites":["<Text />"],"updatePoint":{"line":67,"column":43,"index":2330},"line":67,"code":"  it(\"Don't Render text when x or y is NaN \", () => {\n    const wrapperNan = render( /*#__PURE__*/React.createElement(Text, {\n      x: NaN,\n      y: 10\n    }, \"anything\"));\n    expect(wrapperNan.text()).to.not.contain('anything');\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Only split contents on breaking spaces","suites":["<Text />"],"updatePoint":{"line":74,"column":44,"index":2568},"line":74,"code":"  it('Only split contents on breaking spaces', () => {\n    const testString = 'These spaces\\tshould\\nbreak,\\rbut\\xA0these\\xA0should\\xA0not.';\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: \"auto\"\n    }, testString));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(5);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"does not do anything when maxLines are not exceeded","suites":["<Text />","maxLines"],"updatePoint":{"line":82,"column":59,"index":2943},"line":82,"code":"    it('does not do anything when maxLines are not exceeded', () => {\n      const withMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      const withoutMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      expect(withMaxLines.text()).to.equal(withoutMaxLines.text());\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"limits the output to maxLines","suites":["<Text />","maxLines"],"updatePoint":{"line":93,"column":37,"index":3342},"line":93,"code":"    it('limits the output to maxLines', () => {\n      const testString = 'Lorem ratione omnis fuga dignissimos in amet. Minus quam architecto non ea iste! Nihil amet in itaque error velit. Corporis autem sequi aut temporibus placeat. Perferendis quos veritatis quasi pariatur!';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      expect(wrapper.instance().state.wordsByLines <= 2);\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of the truncated line","suites":["<Text />","maxLines"],"updatePoint":{"line":101,"column":57,"index":3842},"line":101,"code":"    it('adds an ellipsis at the end of the truncated line', () => {\n      const testString = 'Sit totam suscipit aliquid suscipit eius, cupiditate Aut excepturi ipsum ut suscipit facilis debitis Provident impedit a distinctio neque quaerat Optio quo quibusdam possimus provident accusantium. Molestiae similique nemo labore';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal('…');\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of a very long word","suites":["<Text />","maxLines"],"updatePoint":{"line":110,"column":55,"index":4395},"line":110,"code":"    it('adds an ellipsis at the end of a very long word', () => {\n      const testString = 'longwooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooord';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 1\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal('…');\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 default tooltip","suites":["<Tooltip />"],"updatePoint":{"line":32,"column":30,"index":571},"line":32,"code":"  it('Render 1 default tooltip', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 100,\n      height: 50,\n      data: data\n    }, /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null)));\n\n    // I simulate to hover on the AreaChart, then the tooltip should show!\n    wrapper.setState({\n      isTooltipActive: true,\n      chartX: 86,\n      chartY: 21,\n      activeTooltipIndex: 4,\n      activeTooltipLabel: 4,\n      activeTooltipCoord: {\n        x: 95,\n        y: 21\n      }\n    });\n    expect(wrapper.find(Tooltip).length).to.equal(1);\n  });","file":"specs/component/TooltipSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors in a simple Pie","suites":["<Pie />"],"updatePoint":{"line":49,"column":38,"index":1391},"line":49,"code":"  it('Render 5 sectors in a simple Pie', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.recharts-pie-sector').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be an element","suites":["<Pie />"],"updatePoint":{"line":63,"column":78,"index":1864},"line":63,"code":"  it('Render customized active sector when activeShape is set to be an element', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(1);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be a function","suites":["<Pie />"],"updatePoint":{"line":83,"column":78,"index":2593},"line":83,"code":"  it('Render customized active sector when activeShape is set to be a function', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: renderActiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(1);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be an object","suites":["<Pie />"],"updatePoint":{"line":103,"column":77,"index":3293},"line":103,"code":"  it('Render customized active sector when activeShape is set to be an object', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: {\n        fill: '#ff7300'\n      },\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when inactiveShape is set to be an element","suites":["<Pie />"],"updatePoint":{"line":121,"column":80,"index":3835},"line":121,"code":"  it('Render customized active sector when inactiveShape is set to be an element', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const InactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      inactiveShape: /*#__PURE__*/React.createElement(InactiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(4);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized inactive sector when inactiveShape is set to be a function","suites":["<Pie />"],"updatePoint":{"line":146,"column":82,"index":4821},"line":146,"code":"  it('Render customized inactive sector when inactiveShape is set to be a function', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const renderInactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: renderActiveShape,\n      inactiveShape: renderInactiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(4);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized inactive sector when inactiveShape is set to be an object","suites":["<Pie />"],"updatePoint":{"line":171,"column":81,"index":5750},"line":171,"code":"  it('Render customized inactive sector when inactiveShape is set to be an object', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: {\n        fill: '#ff7300'\n      },\n      inactiveShape: {\n        fill: '#ff7322'\n      },\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"should not render customized inactive sectors if there is no active index","suites":["<Pie />"],"updatePoint":{"line":192,"column":79,"index":6349},"line":192,"code":"  it('should not render customized inactive sectors if there is no active index', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const renderInactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeShape: renderActiveShape,\n      inactiveShape: renderInactiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Support multiple active sectors","suites":["<Pie />"],"updatePoint":{"line":216,"column":37,"index":7212},"line":216,"code":"  it('Support multiple active sectors', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: [0, 2],\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(2);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":236,"column":69,"index":7937},"line":236,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const Label = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: /*#__PURE__*/React.createElement(Label, null),\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a function that returns the label text","suites":["<Pie />"],"updatePoint":{"line":262,"column":92,"index":8709},"line":262,"code":"  it('Render customized label when label is set to be a function that returns the label text', () => {\n    const Label = props => {\n      const {\n        name,\n        value\n      } = props;\n      return `${name}: ${value}`;\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: Label,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    setTimeout(() => {\n      expect(wrapper.find('.recharts-pie-label-text').length).to.equal(sectors.length);\n      expect(wrapper.find('.recharts-pie-label-text').first().text()).to.equal('A: 40');\n    }, 1000);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":287,"column":69,"index":9454},"line":287,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: renderLabel,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label line when labelLine is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":313,"column":78,"index":10184},"line":313,"code":"  it('Render customized label line when labelLine is set to be a react element', () => {\n    const LabelLine = props => {\n      const {\n        points\n      } = props;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: `M${points[0].x},${points[0].y}L${points[1].x},${points[1].y}`,\n        className: \"customized-label-line\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      labelLine: /*#__PURE__*/React.createElement(LabelLine, null),\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label-line').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label line when labelLine is set to be a function","suites":["<Pie />"],"updatePoint":{"line":338,"column":73,"index":11011},"line":338,"code":"  it('Render customized label line when labelLine is set to be a function', () => {\n    const renderLabelLine = props => {\n      const {\n        points\n      } = props;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: `M${points[0].x},${points[0].y}L${points[1].x},${points[1].y}`,\n        className: \"customized-label-line\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      labelLine: renderLabelLine,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label-line').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when data is empty","suites":["<Pie />"],"updatePoint":{"line":363,"column":48,"index":11785},"line":363,"code":"  it(\"Don't render any sector when data is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      sectors: []\n    })));\n    expect(wrapper.find('.recharts-pie').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Pie event handler","suites":["<Pie />"],"updatePoint":{"line":372,"column":23,"index":12070},"line":372,"code":"  it('Pie event handler', () => {\n    const onMouseEnter = sinon.spy();\n    const onMouseLeave = sinon.spy();\n    const onClick = sinon.spy();\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick\n    })));\n    const se = wrapper.find(Layer).at(3);\n    se.simulate('mouseEnter');\n    expect(onMouseEnter.calledOnce).to.equal(true);\n    se.simulate('mouseLeave');\n    expect(onMouseLeave.calledOnce).to.equal(true);\n    se.simulate('click');\n    expect(onClick.calledOnce).to.equal(true);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Handles keyboard interaction: Tab can focus in and out of the pie chart","suites":["<Pie />"],"updatePoint":{"line":398,"column":77,"index":12941},"line":398,"code":"  it('Handles keyboard interaction: Tab can focus in and out of the pie chart', async () => {\n    const timeout = 2000;\n    const {\n      container\n    } = testingLibraryRender(\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    React.createElement(\"div\", {\n      tabIndex: 0,\n      className: \"container\"\n    }, /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    }))));\n    const pie = container.getElementsByClassName('recharts-pie')[0];\n    const pieContainer = document.getElementsByClassName('container')[0];\n    pieContainer.focus();\n    await waitFor(() => {\n      expect(document.activeElement).equals(pieContainer);\n    }, {\n      timeout\n    });\n\n    // Testing that pressing tab goes into pie chart\n    userEvent.tab();\n    await waitFor(() => {\n      expect(document.activeElement).equals(pie);\n    }, {\n      timeout\n    });\n\n    // Testing that pressing tab goes out of pie chart\n    userEvent.tab();\n    await waitFor(() => {\n      expect(document.activeElement).equals(document.body);\n    }, {\n      timeout\n    });\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Handles keyboard interaction: arrow keys can move focus into sectors","suites":["<Pie />"],"updatePoint":{"line":445,"column":74,"index":14245},"line":445,"code":"  it('Handles keyboard interaction: arrow keys can move focus into sectors', async () => {\n    const timeout = 2000;\n    const {\n      container\n    } = testingLibraryRender(\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    React.createElement(\"div\", {\n      tabIndex: 0,\n      className: \"container\"\n    }, /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    }))));\n    const pie = container.getElementsByClassName('recharts-pie')[0];\n    pie.focus();\n    await waitFor(() => {\n      expect(document.activeElement.classList.contains('recharts-pie-sector')).to.equal(false);\n    }, {\n      timeout\n    });\n    userEvent.keyboard('{ArrowRight}');\n    await waitFor(() => {\n      expect(document.activeElement.classList.contains('recharts-pie-sector')).to.equal(true);\n    }, {\n      timeout\n    });\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when ticks is not empty","suites":["<PolarAngleAxis />"],"updatePoint":{"line":22,"column":48,"index":441},"line":22,"code":"  it('Renders 5 ticks in when ticks is not empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      ticks: ticks\n    })));\n    expect(wrapper.find('.recharts-polar-angle-axis-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when tick is set to be a react element","suites":["<PolarAngleAxis />"],"updatePoint":{"line":34,"column":63,"index":854},"line":34,"code":"  it('Renders 5 ticks in when tick is set to be a react element', () => {\n    const Tick = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      tick: /*#__PURE__*/React.createElement(Tick, null),\n      ticks: ticks\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when tick is set to be a function","suites":["<PolarAngleAxis />"],"updatePoint":{"line":58,"column":58,"index":1531},"line":58,"code":"  it('Renders 5 ticks in when tick is set to be a function', () => {\n    const Tick = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      tick: Tick,\n      ticks: ticks,\n      axisLineType: \"circle\"\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't Renders any ticks in when ticks is empty","suites":["<PolarAngleAxis />"],"updatePoint":{"line":83,"column":52,"index":2192},"line":83,"code":"  it(\"Don't Renders any ticks in when ticks is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      ticks: []\n    })));\n    expect(wrapper.find('.recharts-polar-angle-axis-tick').length).to.equal(0);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when orientation is set to be middle","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":22,"column":58,"index":459},"line":22,"code":"  it('Renders 5 ticks when orientation is set to be middle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"middle\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when orientation is set to be left","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":36,"column":56,"index":953},"line":36,"code":"  it('Renders 5 ticks when orientation is set to be left', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when tick is set to be a function","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":50,"column":55,"index":1444},"line":50,"code":"  it('Renders 5 ticks when tick is set to be a function', () => {\n    const renderTick = props => {\n      const {\n        payload,\n        x,\n        y,\n        fill\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, payload.value);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\",\n      tick: renderTick\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when tick is set to be a react element","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":78,"column":60,"index":2218},"line":78,"code":"  it('Renders 5 ticks when tick is set to be a react element', () => {\n    const Tick = props => {\n      const {\n        payload,\n        x,\n        y,\n        fill\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, payload.value);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\",\n      tick: /*#__PURE__*/React.createElement(Tick, null)\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is set to be a function","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":106,"column":54,"index":3014},"line":106,"code":"  it('Renders label when label is set to be a function', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: renderLabel\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is set to be a react element","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":130,"column":59,"index":3668},"line":130,"code":"  it('Renders label when label is set to be a react element', () => {\n    const Label = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't Renders any ticks in when ticks is empty","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":154,"column":52,"index":4343},"line":154,"code":"  it(\"Don't Renders any ticks in when ticks is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: [],\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render a polygon in a simple Radar","suites":["<Radar />"],"updatePoint":{"line":39,"column":40,"index":642},"line":39,"code":"  it('Render a polygon in a simple Radar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data\n    })));\n    expect(wrapper.find('.recharts-radar-polygon').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized shape when shape is set to be a element","suites":["<Radar />"],"updatePoint":{"line":49,"column":63,"index":1012},"line":49,"code":"  it('Render customized shape when shape is set to be a element', () => {\n    const Shape = ({\n      points\n    }) => {\n      const d = (points || []).reduce((result, entry, index) => result + (index ? `L${entry.x},${entry.y}` : `M${entry.x},${entry.y}`), '');\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: d,\n        className: \"customized-shape\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      shape: /*#__PURE__*/React.createElement(Shape, null)\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized shape when shape is set to be a function","suites":["<Radar />"],"updatePoint":{"line":69,"column":64,"index":1749},"line":69,"code":"  it('Render customized shape when shape is set to be a function', () => {\n    const Shape = ({\n      points\n    }) => {\n      const d = (points || []).reduce((result, entry, index) => result + (index ? `L${entry.x},${entry.y}` : `M${entry.x},${entry.y}`), '');\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: d,\n        className: \"customized-shape\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      shape: Shape\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Radar />"],"updatePoint":{"line":89,"column":69,"index":2451},"line":89,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const Label = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-label\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a function","suites":["<Radar />"],"updatePoint":{"line":108,"column":64,"index":3053},"line":108,"code":"  it('Render customized label when label is set to be a function', () => {\n    const Label = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-label\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      label: Label\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized dot when dot is set to be a react element","suites":["<Radar />"],"updatePoint":{"line":127,"column":65,"index":3616},"line":127,"code":"  it('Render customized dot when dot is set to be a react element', () => {\n    const Dot = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: x,\n      cy: y,\n      r: 10,\n      className: \"customized-dot\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      dot: /*#__PURE__*/React.createElement(Dot, null)\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized dot when dot is set to be a function","suites":["<Radar />"],"updatePoint":{"line":147,"column":60,"index":4213},"line":147,"code":"  it('Render customized dot when dot is set to be a function', () => {\n    const Dot = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: x,\n      cy: y,\n      r: 10,\n      className: \"customized-dot\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      dot: Dot\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Don't render polygon when points is empty","suites":["<Radar />"],"updatePoint":{"line":167,"column":47,"index":4757},"line":167,"code":"  it(\"Don't render polygon when points is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: []\n    })));\n    expect(wrapper.find('.recharts-radar-polygon').length).to.equal(0);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors","suites":["<RadialBar />"],"updatePoint":{"line":39,"column":22,"index":729},"line":39,"code":"  it('Render 5 sectors', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      data: data,\n      label: true\n    })));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(data.length);\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when data is empty","suites":["<RadialBar />"],"updatePoint":{"line":52,"column":48,"index":1149},"line":52,"code":"  it(\"Don't render any sector when data is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      data: []\n    })));\n    expect(wrapper.find('.recharts-pie').length).to.equal(0);\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors","suites":["<RadialBar />"],"updatePoint":{"line":61,"column":22,"index":1436},"line":61,"code":"  it('Render 5 sectors', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      data: data\n    })));\n    const se = wrapper.find(Sector).first();\n    se.simulate('mouseEnter');\n    se.simulate('mouseLeave');\n    se.simulate('click');\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 path in Cross","suites":["<Cross />"],"updatePoint":{"line":6,"column":28,"index":200},"line":6,"code":"  it('Render 1 path in Cross', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Cross, {\n      top: 50,\n      left: 50,\n      x: 150,\n      y: 180,\n      width: 200,\n      height: 200,\n      stroke: \"#000\",\n      fill: \"none\"\n    })));\n    expect(wrapper.find('.recharts-cross').length).to.equal(1);\n  });","file":"specs/shape/CrossSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when props is invalid","suites":["<Cross />"],"updatePoint":{"line":22,"column":49,"index":634},"line":22,"code":"  it(\"Don't render any path when props is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Cross, {\n      top: 50,\n      left: 50,\n      x: \"x\",\n      y: 180,\n      width: 200,\n      height: 200,\n      stroke: \"#000\",\n      fill: \"none\"\n    })));\n    expect(wrapper.find('.recharts-cross').length).to.equal(0);\n  });","file":"specs/shape/CrossSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 curve","suites":["<Curve />"],"updatePoint":{"line":38,"column":21,"index":518},"line":38,"code":"  it('renders 1 curve', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 vertical layout area","suites":["<Curve />"],"updatePoint":{"line":50,"column":36,"index":889},"line":50,"code":"  it('renders 1 vertical layout area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"vertical\",\n      baseLine: 0\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 horizontal layout area","suites":["<Curve />"],"updatePoint":{"line":64,"column":38,"index":1313},"line":64,"code":"  it('renders 1 horizontal layout area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"horizontal\",\n      baseLine: 0\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 area","suites":["<Curve />"],"updatePoint":{"line":78,"column":20,"index":1721},"line":78,"code":"  it('renders 1 area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"curve\",\n      baseLine: points02\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"Not render when points is empty","suites":["<Curve />"],"updatePoint":{"line":92,"column":37,"index":2148},"line":92,"code":"  it('Not render when points is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: []\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(0);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 circle in simple Dot","suites":["<Dot />"],"updatePoint":{"line":6,"column":35,"index":203},"line":6,"code":"  it('Render 1 circle in simple Dot', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Dot, {\n      cx: 100,\n      cy: 100,\n      r: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-dot').length).to.equal(1);\n  });","file":"specs/shape/DotSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render any circle when cx is invalid","suites":["<Dot />"],"updatePoint":{"line":18,"column":48,"index":559},"line":18,"code":"  it(\"Don't Render any circle when cx is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Dot, {\n      cy: 100,\n      r: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-dot').length).to.equal(0);\n  });","file":"specs/shape/DotSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 path in simple Polygon","suites":["<Polygon />"],"updatePoint":{"line":16,"column":37,"index":321},"line":16,"code":"  it('Render 1 path in simple Polygon', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Polygon, {\n      points: points,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-polygon').length).to.equal(1);\n  });","file":"specs/shape/PolygonSpec.js","skipped":false,"dir":"test"},{"name":"Dno't render any path when points is empty or null","suites":["<Polygon />"],"updatePoint":{"line":26,"column":56,"index":673},"line":26,"code":"  it(\"Dno't render any path when points is empty or null\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Polygon, {\n      points: [],\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Polygon, {\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-polygon').length).to.equal(0);\n  });","file":"specs/shape/PolygonSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 rectangle in simple Rectangle","suites":["<Rectangle />"],"updatePoint":{"line":6,"column":44,"index":224},"line":6,"code":"  it('Render 1 rectangle in simple Rectangle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: 100,\n      radius: [5, 10, 8, 15],\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(1);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 rectangle in simple Rectangle","suites":["<Rectangle />"],"updatePoint":{"line":20,"column":44,"index":638},"line":20,"code":"  it('Render 1 rectangle in simple Rectangle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: 100,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(1);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 arc when height < 0","suites":["<Rectangle />"],"updatePoint":{"line":34,"column":34,"index":1029},"line":34,"code":"  it('Render 4 arc when height < 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 80,\n      height: -100,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    const rects = wrapper.find('.recharts-rectangle');\n    expect(rects.length).to.equal(1);\n    const path = rects[0].attribs.d;\n    expect(path).to.not.be.empty;\n    expect(path.length - path.split('A').join('').length).to.equal(4);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Dont't Render anything when height === 0 || width === 0","suites":["<Rectangle />"],"updatePoint":{"line":52,"column":61,"index":1616},"line":52,"code":"  it(\"Dont't Render anything when height === 0 || width === 0\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 80,\n      height: 0,\n      radius: 5,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 0,\n      height: 30,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    const rects = wrapper.find('.recharts-rectangle');\n    expect(rects.length).to.equal(0);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when x, y, width or height is not a number","suites":["<Rectangle />"],"updatePoint":{"line":74,"column":70,"index":2221},"line":74,"code":"  it(\"Don't render any path when x, y, width or height is not a number\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: \"a\",\n      y: 50,\n      width: 80,\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: \"b\",\n      width: 80,\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: \"c\",\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: \"d\",\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(0);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 sector in simple Sector","suites":["<Sector />"],"updatePoint":{"line":6,"column":38,"index":212},"line":6,"code":"  it('Render 1 sector in simple Sector', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      endAngle: 90\n    })));\n    expect(wrapper.find('.recharts-sector').length).to.equal(1);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 sector when cornerRadius > 0","suites":["<Sector />"],"updatePoint":{"line":20,"column":43,"index":625},"line":20,"code":"  it('Render 1 sector when cornerRadius > 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      cornerRadius: 10,\n      endAngle: 90\n    })));\n    const sectors = wrapper.find('.recharts-sector');\n    expect(sectors.length).to.equal(1);\n    const path = sectors[0].attribs.d;\n    expect(path).to.not.be.empty;\n    expect(path.length - path.split('A').join('').length).to.equal(6);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when props is invalid","suites":["<Sector />"],"updatePoint":{"line":39,"column":51,"index":1243},"line":39,"code":"  it(\"Don't render any sector when props is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 200,\n      outerRadius: 150,\n      endAngle: 90\n    }), /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      startAngle: 90,\n      endAngle: 90\n    })));\n    expect(wrapper.find('.recharts-sector').length).to.equal(0);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 symbol","suites":["<Symbols />"],"updatePoint":{"line":7,"column":21,"index":286},"line":7,"code":"  it('Render 1 symbol', () => {\n    const wrapper = enzymeRender( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cx: 100,\n      cy: 100,\n      size: 100,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(1);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 symbol when type is wrong","suites":["<Symbols />"],"updatePoint":{"line":19,"column":40,"index":653},"line":19,"code":"  it('Render 1 symbol when type is wrong', () => {\n    const wrapper = enzymeRender( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cx: 100,\n      cy: 100,\n      size: 100,\n      type: \"anything\",\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(1);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbol when cx is invalid","suites":["<Symbols />"],"updatePoint":{"line":32,"column":48,"index":1052},"line":32,"code":"  it(\"Don't render any symbol when cx is invalid\", () => {\n    const wrapper = enzymeRender( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cy: 100,\n      size: 100,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(0);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Expect no points attribute on path","suites":["<Symbols />"],"updatePoint":{"line":43,"column":40,"index":1404},"line":43,"code":"  it('Expect no points attribute on path', () => {\n    const {\n      container\n    } = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: [{\n        name: 'test',\n        uv: 100\n      }, {\n        name: 'test2',\n        uv: 120\n      }, {\n        name: 'test3',\n        uv: 150\n      }],\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, null), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const symbols = container.querySelectorAll('.recharts-line .recharts-line-curve');\n    expect(symbols.length).to.equal(1);\n    expect(symbols[0].attributes.getNamedItem('points')).equals(null);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 Trapezoid in simple Trapezoid","suites":["<Trapezoid />"],"updatePoint":{"line":7,"column":44,"index":279},"line":7,"code":"  it('Render 1 Trapezoid in simple Trapezoid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 50\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(1);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 Trapezoid with animation in simple Trapezoid","suites":["<Trapezoid />"],"updatePoint":{"line":21,"column":59,"index":703},"line":21,"code":"  it('Render 1 Trapezoid with animation in simple Trapezoid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 50,\n      isUpdateAnimationActive: true\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(1);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any Trapezoid when props is invalid","suites":["<Trapezoid />"],"updatePoint":{"line":36,"column":54,"index":1159},"line":36,"code":"  it(\"Don't render any Trapezoid when props is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 0,\n      lowerWidth: 0,\n      height: 50\n    }), /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 0\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(0);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"}]}