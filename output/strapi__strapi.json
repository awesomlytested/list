{
    "repo": "strapi/strapi",
    "url": "https://github.com/strapi/strapi",
    "branch": "master",
    "configs": [
        {
            "package": "strapi",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-content-type-builder",
            "lang": "js",
            "dir": "packages/core/content-type-builder/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/strapi",
            "lang": "js",
            "dir": "packages/core/strapi/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-upload",
            "lang": "js",
            "dir": "packages/core/upload/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-graphql",
            "lang": "js",
            "dir": "packages/plugins/graphql/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-i18n",
            "lang": "js",
            "dir": "packages/plugins/i18n/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@strapi/plugin-users-permissions",
            "lang": "js",
            "dir": "packages/plugins/users-permissions/tests",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "Successful creation of a collection type",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 50,
                "column": 50
            },
            "line": 50,
            "code": "    test('Successful creation of a collection type', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'Test Collection Type',\n            singularName: 'test-collection-type',\n            pluralName: 'test-collection-types',\n            pluginOptions: {\n              i18n: {\n                localized: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  i18n: {\n                    localized: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: testCollectionTypeUID\n        }\n      });\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get collection type returns full schema and information",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 84,
                "column": 65
            },
            "line": 84,
            "code": "    test('Get collection type returns full schema and information', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${testCollectionTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Successfull creation of a collection type with draftAndPublish enabled",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 92,
                "column": 80
            },
            "line": 92,
            "code": "    test('Successfull creation of a collection type with draftAndPublish enabled', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'CT with DP',\n            singularName: 'ct-with-dp',\n            pluralName: 'ct-with-dps',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: ctWithDpUID\n        }\n      });\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get collection type returns full schema and informations with draftAndPublish",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 117,
                "column": 87
            },
            "line": 117,
            "code": "    test('Get collection type returns full schema and informations with draftAndPublish', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${ctWithDpUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Cannot use same string for singularName and pluralName",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 125,
                "column": 64
            },
            "line": 125,
            "code": "    test('Cannot use same string for singularName and pluralName', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'same string',\n            singularName: 'same-string',\n            pluralName: 'same-string',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'contentType: singularName and pluralName should be different',\n              name: 'ValidationError',\n              path: ['contentType']\n            }]\n          },\n          message: 'contentType: singularName and pluralName should be different',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "displayName, singularName and pluralName are required",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 158,
                "column": 63
            },
            "line": 158,
            "code": "    test('displayName, singularName and pluralName are required', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'contentType.displayName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'displayName']\n            }, {\n              message: 'Content Type name `undefined` is already being used.',\n              name: 'ValidationError',\n              path: ['contentType', 'singularName']\n            }, {\n              message: 'contentType.singularName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'singularName']\n            }, {\n              message: 'Content Type name `undefined` is already being used.',\n              name: 'ValidationError',\n              path: ['contentType', 'pluralName']\n            }, {\n              message: 'contentType.pluralName is a required field',\n              name: 'ValidationError',\n              path: ['contentType', 'pluralName']\n            }, {\n              message: 'contentType: singularName and pluralName should be different',\n              name: 'ValidationError',\n              path: ['contentType']\n            }]\n          },\n          message: '6 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Can edit displayName but singularName and pluralName are ignored",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "updatePoint": {
                "line": 208,
                "column": 74
            },
            "line": 208,
            "code": "    test('Can edit displayName but singularName and pluralName are ignored', async () => {\n      const uid = 'api::ct-with-dp.ct-with-dp';\n      let res = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${uid}`,\n        body: {\n          contentType: {\n            displayName: 'new displayName',\n            singularName: 'ct-with-dp-new',\n            pluralName: 'ct-with-dps-new',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      await restart();\n      res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${uid}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          uid,\n          schema: {\n            displayName: 'new displayName',\n            singularName: 'ct-with-dp',\n            // no change\n            pluralName: 'ct-with-dps',\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Are \"%s\" and \"%s\" valid: %s",
            "suites": [
                "Content Type Builder - Content types",
                "Collection Types"
            ],
            "line": 252,
            "code": "    test.each([['kebab-case', 'kebab-cases', true], ['Kebab-case', 'Kebab-cases', false], ['kebab case', 'kebab cases', false], ['kebabCase', 'kebabCases', false], ['kebab@case', 'kebab@cases', false], ['my2space', 'my2spaces', true], ['2myspace', '2myspaces', false], ['my-3-space', 'my-3-spaces', true]])('Are \"%s\" and \"%s\" valid: %s', async (singularName, pluralName, isExpectedValid) => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            displayName: 'same string',\n            singularName,\n            pluralName,\n            draftAndPublish: true,\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n\n      if (isExpectedValid) {\n        expect(res.statusCode).toBe(201);\n      } else {\n        expect(res.statusCode).toBe(400);\n        expect(res.body).toEqual({\n          error: {\n            name: 'ValidationError',\n            message: '2 errors occurred',\n            details: {\n              errors: [{\n                message: 'contentType.singularName is not in kebab case (an-example-of-kebab-case)',\n                name: 'ValidationError',\n                path: ['contentType', 'singularName']\n              }, {\n                message: 'contentType.pluralName is not in kebab case (an-example-of-kebab-case)',\n                name: 'ValidationError',\n                path: ['contentType', 'pluralName']\n              }]\n            }\n          }\n        });\n      }\n    });",
            "file": "collection-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Validates input and return 400 in case of invalid input",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 33,
                "column": 65
            },
            "line": 33,
            "code": "    test('Validates input and return 400 in case of invalid input', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {}\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'attributes.required',\n              name: 'ValidationError',\n              path: ['component', 'attributes']\n            }, {\n              message: 'displayName.required',\n              name: 'ValidationError',\n              path: ['component', 'displayName']\n            }, {\n              message: 'icon.required',\n              name: 'ValidationError',\n              path: ['component', 'icon']\n            }, {\n              message: 'category.required',\n              name: 'ValidationError',\n              path: ['component', 'category']\n            }]\n          },\n          message: '4 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Creates a component properly",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 68,
                "column": 38
            },
            "line": 68,
            "code": "    test('Creates a component properly', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {\n            category: 'default',\n            icon: 'default',\n            displayName: 'Some Component',\n            pluginOptions: {\n              pluginName: {\n                option: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  pluginName: {\n                    option: true\n                  }\n                }\n              },\n              pic: {\n                type: 'media'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Errors on already existing components",
            "suites": [
                "Content Type Builder - Components",
                "POST /components"
            ],
            "updatePoint": {
                "line": 106,
                "column": 47
            },
            "line": 106,
            "code": "    test('Errors on already existing components', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/components',\n        body: {\n          component: {\n            category: 'default',\n            icon: 'default',\n            displayName: 'someComponent',\n            attributes: {}\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: 'component.alreadyExists'\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns valid enveloppe",
            "suites": [
                "Content Type Builder - Components",
                "Get /components"
            ],
            "updatePoint": {
                "line": 126,
                "column": 33
            },
            "line": 126,
            "code": "    test('Returns valid enveloppe', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: expect.any(Array)\n      });\n      res.body.data.forEach(el => {\n        expect(el).toMatchObject({\n          uid: expect.any(String),\n          schema: expect.objectContaining({\n            displayName: expect.any(String),\n            description: expect.any(String),\n            collectionName: expect.any(String),\n            attributes: expect.objectContaining({})\n          })\n        });\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns 404 on not found",
            "suites": [
                "Content Type Builder - Components",
                "GET /components/:uid"
            ],
            "updatePoint": {
                "line": 149,
                "column": 34
            },
            "line": 149,
            "code": "    test('Returns 404 on not found', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/nonexistent-component'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Returns correct format",
            "suites": [
                "Content Type Builder - Components",
                "GET /components/:uid"
            ],
            "updatePoint": {
                "line": 159,
                "column": 32
            },
            "line": 159,
            "code": "    test('Returns correct format', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          uid: 'default.some-component',\n          category: 'default',\n          schema: {\n            icon: 'default',\n            displayName: 'Some Component',\n            description: '',\n            collectionName: 'components_default_some_components',\n            pluginOptions: {\n              pluginName: {\n                option: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  pluginName: {\n                    option: true\n                  }\n                }\n              },\n              pic: {\n                type: 'media',\n                multiple: false,\n                required: false\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Throws 404 on updating non existent component",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 200,
                "column": 55
            },
            "line": 200,
            "code": "    test('Throws 404 on updating non existent component', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/nonexistent-components'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Validates input and return 400 in case of invalid input",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 210,
                "column": 65
            },
            "line": 210,
            "code": "    test('Validates input and return 400 in case of invalid input', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/default.some-component',\n        body: {\n          component: {\n            attributes: {}\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toEqual({\n        error: {\n          details: {\n            errors: [{\n              message: 'displayName.required',\n              name: 'ValidationError',\n              path: ['component', 'displayName']\n            }, {\n              message: 'icon.required',\n              name: 'ValidationError',\n              path: ['component', 'icon']\n            }, {\n              message: 'category.required',\n              name: 'ValidationError',\n              path: ['component', 'category']\n            }]\n          },\n          message: '3 errors occurred',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Updates a component properly",
            "suites": [
                "Content Type Builder - Components",
                "PUT /components/:uid"
            ],
            "updatePoint": {
                "line": 243,
                "column": 38
            },
            "line": 243,
            "code": "    test('Updates a component properly', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: '/content-type-builder/components/default.some-component',\n        body: {\n          component: {\n            category: 'default',\n            icon: 'default',\n            displayName: 'New Component',\n            attributes: {\n              name: {\n                type: 'string'\n              }\n            },\n            pluginOptions: {\n              pluginName: {\n                option: false\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n      const getRes = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body).toMatchObject({\n        data: {\n          uid: 'default.some-component',\n          schema: {\n            displayName: 'New Component',\n            pluginOptions: {\n              pluginName: {\n                option: false\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Throws 404 on non existent component",
            "suites": [
                "Content Type Builder - Components",
                "DELETE /components/:uid"
            ],
            "updatePoint": {
                "line": 293,
                "column": 46
            },
            "line": 293,
            "code": "    test('Throws 404 on non existent component', async () => {\n      const res = await rq({\n        method: 'DELETE',\n        url: '/content-type-builder/components/nonexistent-components'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Deletes a component correctly",
            "suites": [
                "Content Type Builder - Components",
                "DELETE /components/:uid"
            ],
            "updatePoint": {
                "line": 303,
                "column": 39
            },
            "line": 303,
            "code": "    test('Deletes a component correctly', async () => {\n      const res = await rq({\n        method: 'DELETE',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          uid: 'default.some-component'\n        }\n      });\n      await restart();\n      const tryGet = await rq({\n        method: 'GET',\n        url: '/content-type-builder/components/default.some-component'\n      });\n      expect(tryGet.statusCode).toBe(404);\n      expect(tryGet.body).toEqual({\n        error: 'component.notFound'\n      });\n    });",
            "file": "components.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should visit the content type builder",
            "suites": [
                "Test CTB"
            ],
            "updatePoint": {
                "line": 26,
                "column": 45
            },
            "line": 26,
            "code": "    it('Should visit the content type builder', () => {\n      cy.get('a[href=\"/admin/plugins/content-type-builder\"').click();\n      cy.url().should('equal', pluginUrl);\n    });",
            "file": "front/integrationOld/createApi_specs.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should prevent the user from creating a camelCase api",
            "suites": [
                "Test CTB"
            ],
            "updatePoint": {
                "line": 30,
                "column": 61
            },
            "line": 30,
            "code": "    it('Should prevent the user from creating a camelCase api', () => {\n      cy.server();\n      cy.route('GET', `${backendUrl}/content-type-builder/models`).as('models');\n      cy.get('a[href=\"/admin/plugins/content-type-builder\"').click().wait('@models').get('#openAddCT').click().get('#name').type('camelCase').get('#description').type('\\n').get('#name').should('have.value', 'camelcase').get('#name').type('{selectall}').type('not camel-case').get('#description').type('{backspace}').get('#name').should('have.value', 'notcamelcase');\n    });",
            "file": "front/integrationOld/createApi_specs.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should create a TAG API",
            "suites": [
                "Test CTB"
            ],
            "updatePoint": {
                "line": 35,
                "column": 31
            },
            "line": 35,
            "code": "    it('Should create a TAG API', function () {\n      cy.server();\n      cy.route('GET', `${backendUrl}/content-type-builder/models`).as('models');\n      cy.route('POST', `${backendUrl}/content-type-builder/models`).as('createModel');\n      cy.route('DELETE', `${backendUrl}/content-type-builder/models/tag`).as('deleteTag');\n      cy.get('a[href=\"/admin/plugins/content-type-builder\"').click().wait('@models'); // Open modal\n\n      cy.get('#openAddCT').click().wait(animDelay); // Check the modal is opened this will tell is if we have a build issue\n\n      cy.checkModalOpening();\n      cy.get('.modal').invoke('show'); // Fill the form\n\n      Object.keys(TAG_API).forEach(key => {\n        cy.log(key);\n        cy.get(`#${key}`).type(TAG_API[key]);\n      }); // Submit the form and navigate to product page\n\n      cy.submitForm().url().should('equal', `${pluginUrl}/models/tag`); // Open the attributes's modal\n\n      cy.get('#openAddAttr').click().wait(animDelay); // Check that we don't have a build error from reacstrap\n\n      cy.checkModalOpening().should('be.visible'); // Ensure the modal is opened to get #attrCardstring\n\n      cy.wait(1000).get('button#attrCardstring').click().get('input[name=\"name\"]').type('name').get('#continue').click();\n      cy.get('button#saveData').should('have.id', 'saveData').click().wait('@createModel').wait(frontLoadingDelay);\n      cy.get('#attributesList li').first().should('contain', 'name'); // Delete tag API\n\n      cy.get('a[href=\"/admin/plugins/content-type-builder\"]').click().wait(frontLoadingDelay).wait(frontLoadingDelay).get('#deletetag').click().checkModalOpening().should('be.visible').get('#ctaConfirm').click().wait('@deleteTag').wait(frontLoadingDelay).get('#ctbModelsList li').should('have.length', 4).waitRestart();\n    });",
            "file": "front/integrationOld/createApi_specs.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should update PRODUCT API field and visit the create product page",
            "suites": [
                "Test CTB"
            ],
            "updatePoint": {
                "line": 64,
                "column": 73
            },
            "line": 64,
            "code": "    it('Should update PRODUCT API field and visit the create product page', () => {\n      cy.server();\n      cy.createProductAndTagApis(jwt);\n      cy.route(`${backendUrl}/content-type-builder/models/product?`).as('getProductModel');\n      cy.route('PUT', `${backendUrl}/content-type-builder/models/product`).as('updateProductModel');\n      cy.visit('/admin/plugins/content-type-builder/models/product#editproduct::attributestring::baseSettings::0');\n      cy.wait('@getProductModel');\n      cy.wait(frontLoadingDelay); // Open the modal via url\n\n      cy.checkModalOpening().should('be.visible').get('input[name=\"name\"]').type('{selectall}').type('updatedName').get('#continue').click();\n      cy.get('#attributesList li').first().contains('updatedName'); // Yield el in .nav containing 'About'\n\n      cy.get('button#saveData').click().wait('@updateProductModel').wait(frontLoadingDelay); // Check that we can still go to the create page\n\n      cy.get('a[href=\"/admin/plugins/content-manager/product?source=content-manager\"').click().get('button[label=\"content-manager.containers.List.addAnEntry\"').click();\n      cy.window().its('__store__').its('store').then(pluginStore => {\n        const displayedFields = pluginStore.getState().getIn(['content-manager_global', 'schema', 'models', 'product', 'editDisplay', 'fields']).toJS();\n        expect(displayedFields).to.include.members(['description', 'price', 'updatedName', 'bool', 'bool1', 'email']);\n      });\n      cy.waitRestart();\n    });",
            "file": "front/integrationOld/createApi_specs.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should update PRODUCT API name and visit the create product page",
            "suites": [
                "Test CTB"
            ],
            "updatePoint": {
                "line": 85,
                "column": 72
            },
            "line": 85,
            "code": "    it('Should update PRODUCT API name and visit the create product page', () => {\n      cy.server(); // cy.createProductAndTagApis(jwt);\n\n      cy.route(`${backendUrl}/content-type-builder/models/product?`).as('getProductModel');\n      cy.route('PUT', `${backendUrl}/content-type-builder/models/product`).as('updateProductModel');\n      cy.visit('/admin/plugins/content-type-builder/models/product#editproduct::contentType::baseSettings');\n      cy.wait('@getProductModel');\n      cy.wait(frontLoadingDelay); // Open the modal via url\n\n      cy.checkModalOpening().should('be.visible').get('input[name=\"name\"]').type('{selectall}').type('produit').submitForm().wait('@updateProductModel').wait(frontLoadingDelay); // Check that we can still go to the create page\n\n      cy.get('a[href=\"/admin/plugins/content-manager/produit?source=content-manager\"').click().wait(frontLoadingDelay).get('button[label=\"content-manager.containers.List.addAnEntry\"').click().get('h1').should('have.id', 'addNewEntry'); // cy.window()\n      //   .its('__store__')\n      //   .its('content-manager')\n      //   .then(pluginStore => {\n      //     const displayedFields = pluginStore\n      //       .getState()\n      //       .getIn(['global', 'schema', 'models', 'product', 'editDisplay', 'fields'])\n      //       .toJS();\n      //     expect(displayedFields).to.include.members(['description', 'price', 'updatedName', 'bool', 'bool1', 'email']);\n      //   });\n    });",
            "file": "front/integrationOld/createApi_specs.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Successful creation of a single type",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 49,
                "column": 46
            },
            "line": 49,
            "code": "    test('Successful creation of a single type', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'Test Single Type',\n            singularName: 'test-single-type',\n            pluralName: 'test-single-types',\n            pluginOptions: {\n              i18n: {\n                localized: true\n              }\n            },\n            attributes: {\n              title: {\n                type: 'string',\n                pluginOptions: {\n                  i18n: {\n                    localized: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: singleTypeUID\n        }\n      });\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Get single type returns full schema and information",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 84,
                "column": 61
            },
            "line": 84,
            "code": "    test('Get single type returns full schema and information', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${singleTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchSnapshot();\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Fails on invalid relations",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 92,
                "column": 36
            },
            "line": 92,
            "code": "    test('Fails on invalid relations', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'singleType',\n            singularName: 'test-st',\n            pluralName: 'test-sts',\n            displayName: 'Tests-st',\n            attributes: {\n              relation: {\n                type: 'relation',\n                relation: 'oneTo',\n                target: 'plugin::users-permissions.user',\n                targetAttribute: 'test'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        error: {\n          details: {\n            errors: [{\n              message: 'must be one of the following values: oneToOne, oneToMany, morphOne, morphMany, morphToOne, morphToMany',\n              name: 'ValidationError',\n              path: ['contentType', 'attributes', 'relation', 'relation']\n            }]\n          },\n          message: 'must be one of the following values: oneToOne, oneToMany, morphOne, morphMany, morphToOne, morphToMany',\n          name: 'ValidationError'\n        }\n      });\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Cannot switch collectionType to singleType when multiple entries in DB",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 128,
                "column": 80
            },
            "line": 128,
            "code": "    test('Cannot switch collectionType to singleType when multiple entries in DB', async () => {\n      const createRes = await rq({\n        method: 'POST',\n        url: '/content-type-builder/content-types',\n        body: {\n          contentType: {\n            kind: 'collectionType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(createRes.statusCode).toBe(201);\n      await restart();\n      const {\n        uid\n      } = createRes.body.data; // create data\n\n      for (let i = 0; i < 2; i++) {\n        await strapi.query(uid).create({\n          data: {\n            title: 'Test'\n          }\n        });\n      }\n\n      const updateRes = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${uid}`,\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              title: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      expect(updateRes.body.error).toMatch('multiple entries in DB');\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should add a relation field",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 180,
                "column": 37
            },
            "line": 180,
            "code": "    test('Should add a relation field', async () => {\n      const res = await rq({\n        method: 'PUT',\n        url: `/content-type-builder/content-types/${singleTypeUID}`,\n        body: {\n          contentType: {\n            kind: 'singleType',\n            displayName: 'test-collection',\n            singularName: 'test-collection',\n            pluralName: 'test-collections',\n            attributes: {\n              relation: {\n                private: true,\n                type: 'relation',\n                relation: 'oneToOne',\n                target: 'plugin::users-permissions.user'\n              }\n            }\n          }\n        }\n      });\n      expect(res.statusCode).toBe(201);\n      expect(res.body).toEqual({\n        data: {\n          uid: singleTypeUID\n        }\n      });\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Should contain a private relation field",
            "suites": [
                "Content Type Builder - Content types",
                "Single Types"
            ],
            "updatePoint": {
                "line": 208,
                "column": 49
            },
            "line": 208,
            "code": "    test('Should contain a private relation field', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: `/content-type-builder/content-types/${singleTypeUID}`\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.schema.attributes.relation).toBeDefined();\n      expect(res.body.data.schema.attributes.relation.private).toBeTruthy();\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/content-type-builder/tests"
        },
        {
            "name": "Create product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 68,
                "column": 33
            },
            "line": 68,
            "code": "  test('Create product with compo', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description',\n      compo: [{\n        name: 'compo name',\n        description: 'short'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-compos',\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productsWithCompo.push(body.data);\n  });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 98,
                "column": 31
            },
            "line": 98,
            "code": "  test('Read product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-compos',\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(1);\n    expect(body.data[0]).toMatchObject(data.productsWithCompo[0]);\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeUndefined();\n    });\n  });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33
            },
            "line": 116,
            "code": "  test('Update product with compo', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      compo: [{\n        name: 'compo name updated',\n        description: 'update'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-compos/${data.productsWithCompo[0].id}`,\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.productsWithCompo[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    expect(body.data.publishedAt).toBeUndefined();\n    data.productsWithCompo[0] = body.data;\n  });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 147,
                "column": 33
            },
            "line": 147,
            "code": "  test('Delete product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-compos/${data.productsWithCompo[0].id}`,\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.productsWithCompo[0]);\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productsWithCompo.shift();\n  });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - compo required",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 164,
                "column": 59
            },
            "line": 164,
            "code": "    test('Cannot create product with compo - compo required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo must be defined.',\n          details: {\n            errors: [{\n              path: ['compo'],\n              message: 'compo must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - minLength",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 193,
                "column": 54
            },
            "line": 193,
            "code": "    test('Cannot create product with compo - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          name: 'compo name',\n          description: ''\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].description must be at least 3 characters',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'description'],\n              message: 'compo[0].description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - maxLength",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 226,
                "column": 54
            },
            "line": 226,
            "code": "    test('Cannot create product with compo - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          name: 'compo name',\n          description: 'A very long description that exceed the min length.'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].description must be at most 10 characters',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'description'],\n              message: 'compo[0].description must be at most 10 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - required",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 259,
                "column": 53
            },
            "line": 259,
            "code": "    test('Cannot create product with compo - required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          description: 'short'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].name must be defined.',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'name'],\n              message: 'compo[0].name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 67,
                "column": 33
            },
            "line": 67,
            "code": "  test('Create product with compo', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description',\n      compo: {\n        name: 'compo name',\n        description: 'short'\n      }\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-compos',\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productsWithCompo.push(body.data);\n  });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 97,
                "column": 31
            },
            "line": 97,
            "code": "  test('Read product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-compos',\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(1);\n    expect(body.data[0]).toMatchObject(data.productsWithCompo[0]);\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeUndefined();\n    });\n  });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 115,
                "column": 33
            },
            "line": 115,
            "code": "  test('Update product with compo', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      compo: {\n        name: 'compo name updated',\n        description: 'update'\n      }\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-compos/${data.productsWithCompo[0].id}`,\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.productsWithCompo[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productsWithCompo[0] = body.data;\n  });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product with compo",
            "suites": [
                "Core API - Basic + compo"
            ],
            "updatePoint": {
                "line": 145,
                "column": 33
            },
            "line": 145,
            "code": "  test('Delete product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-compos/${data.productsWithCompo[0].id}`,\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.productsWithCompo[0]);\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productsWithCompo.shift();\n  });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - compo required",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 162,
                "column": 59
            },
            "line": 162,
            "code": "    test('Cannot create product with compo - compo required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo must be defined.',\n          details: {\n            errors: [{\n              path: ['compo'],\n              message: 'compo must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - minLength",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 191,
                "column": 54
            },
            "line": 191,
            "code": "    test('Cannot create product with compo - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          name: 'compo name',\n          description: ''\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.description must be at least 3 characters',\n          details: {\n            errors: [{\n              path: ['compo', 'description'],\n              message: 'compo.description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - maxLength",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 224,
                "column": 54
            },
            "line": 224,
            "code": "    test('Cannot create product with compo - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          name: 'compo name',\n          description: 'A very long description that exceed the min length.'\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.description must be at most 10 characters',\n          details: {\n            errors: [{\n              path: ['compo', 'description'],\n              message: 'compo.description must be at most 10 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - required",
            "suites": [
                "Core API - Basic + compo",
                "validation"
            ],
            "updatePoint": {
                "line": 257,
                "column": 53
            },
            "line": 257,
            "code": "    test('Cannot create product with compo - required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          description: 'short'\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compos',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.name must be defined.',\n          details: {\n            errors: [{\n              path: ['compo', 'name'],\n              message: 'compo.name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 69,
                "column": 33
            },
            "line": 69,
            "code": "  test('Create product with compo', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description',\n      compo: [{\n        name: 'compo name',\n        description: 'short'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-compo-and-dps',\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP.push(body.data);\n  });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 99,
                "column": 31
            },
            "line": 99,
            "code": "  test('Read product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-compo-and-dps',\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(1);\n    expect(body.data[0]).toMatchObject(data.productsWithCompoAndDP[0]);\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeISODate();\n    });\n  });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 117,
                "column": 33
            },
            "line": 117,
            "code": "  test('Update product with compo', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      compo: [{\n        name: 'compo name updated',\n        description: 'update'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-compo-and-dps/${data.productsWithCompoAndDP[0].id}`,\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.productsWithCompoAndDP[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP[0] = body.data;\n  });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 147,
                "column": 33
            },
            "line": 147,
            "code": "  test('Delete product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-compo-and-dps/${data.productsWithCompoAndDP[0].id}`,\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.productsWithCompoAndDP[0]);\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP.shift();\n  });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - compo required",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 164,
                "column": 59
            },
            "line": 164,
            "code": "    test('Cannot create product with compo - compo required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo must be defined.',\n          details: {\n            errors: [{\n              path: ['compo'],\n              message: 'compo must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - minLength",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 193,
                "column": 54
            },
            "line": 193,
            "code": "    test('Cannot create product with compo - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          name: 'compo name',\n          description: ''\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].description must be at least 3 characters',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'description'],\n              message: 'compo[0].description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - maxLength",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 226,
                "column": 54
            },
            "line": 226,
            "code": "    test('Cannot create product with compo - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          name: 'compo name',\n          description: 'A very long description that exceed the min length.'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].description must be at most 10 characters',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'description'],\n              message: 'compo[0].description must be at most 10 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - required",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 259,
                "column": 53
            },
            "line": 259,
            "code": "    test('Cannot create product with compo - required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: [{\n          description: 'short'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo[0].name must be defined.',\n          details: {\n            errors: [{\n              path: ['compo', '0', 'name'],\n              message: 'compo[0].name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo-repeatable.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 68,
                "column": 33
            },
            "line": 68,
            "code": "  test('Create product with compo', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description',\n      compo: {\n        name: 'compo name',\n        description: 'short'\n      }\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-compo-and-dps',\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP.push(body.data);\n  });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 98,
                "column": 31
            },
            "line": 98,
            "code": "  test('Read product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-compo-and-dps',\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(1);\n    expect(body.data[0]).toMatchObject(data.productsWithCompoAndDP[0]);\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeISODate();\n    });\n  });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33
            },
            "line": 116,
            "code": "  test('Update product with compo', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      compo: {\n        name: 'compo name updated',\n        description: 'update'\n      }\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-compo-and-dps/${data.productsWithCompoAndDP[0].id}`,\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.productsWithCompoAndDP[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP[0] = body.data;\n  });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product with compo",
            "suites": [
                "Core API - Basic + compo + draftAndPublish"
            ],
            "updatePoint": {
                "line": 146,
                "column": 33
            },
            "line": 146,
            "code": "  test('Delete product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-compo-and-dps/${data.productsWithCompoAndDP[0].id}`,\n      qs: {\n        populate: ['compo']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.productsWithCompoAndDP[0]);\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.productsWithCompoAndDP.shift();\n  });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - compo required",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 163,
                "column": 59
            },
            "line": 163,
            "code": "    test('Cannot create product with compo - compo required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo must be defined.',\n          details: {\n            errors: [{\n              path: ['compo'],\n              message: 'compo must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - minLength",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 192,
                "column": 54
            },
            "line": 192,
            "code": "    test('Cannot create product with compo - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          name: 'compo name',\n          description: ''\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.description must be at least 3 characters',\n          details: {\n            errors: [{\n              path: ['compo', 'description'],\n              message: 'compo.description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - maxLength",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 225,
                "column": 54
            },
            "line": 225,
            "code": "    test('Cannot create product with compo - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          name: 'compo name',\n          description: 'A very long description that exceed the min length.'\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.description must be at most 10 characters',\n          details: {\n            errors: [{\n              path: ['compo', 'description'],\n              message: 'compo.description must be at most 10 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - required",
            "suites": [
                "Core API - Basic + compo + draftAndPublish",
                "validation"
            ],
            "updatePoint": {
                "line": 258,
                "column": 53
            },
            "line": 258,
            "code": "    test('Cannot create product with compo - required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        compo: {\n          description: 'short'\n        }\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-compo-and-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'compo.name must be defined.',\n          details: {\n            errors: [{\n              path: ['compo', 'name'],\n              message: 'compo.name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp-compo.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create a product",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 68,
                "column": 24
            },
            "line": 68,
            "code": "  test('Create a product', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description'\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-dps',\n      body: {\n        data: product\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.products.push(body.data);\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create a product + can overwrite publishedAt",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 91,
                "column": 52
            },
            "line": 91,
            "code": "  test('Create a product + can overwrite publishedAt', async () => {\n    const product = {\n      name: 'Product 2',\n      description: 'Product description',\n      publishedAt: '2020-08-20T10:27:55.000Z'\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-dps',\n      body: {\n        data: product\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.products.push(body.data);\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read products",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 115,
                "column": 21
            },
            "line": 115,
            "code": "  test('Read products', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-dps'\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(2);\n    expect(body.data).toEqual(expect.arrayContaining([expect.objectContaining({\n      id: expect.anything(),\n      attributes: expect.objectContaining({\n        name: 'Product 1',\n        description: 'Product description'\n      })\n    })]));\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeISODate();\n    });\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 136,
                "column": 22
            },
            "line": 136,
            "code": "  test('Update product', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description'\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-dps/${data.products[0].id}`,\n      body: {\n        data: product\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.products[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.products[0] = body.data;\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product + can overwrite publishedAt",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 159,
                "column": 50
            },
            "line": 159,
            "code": "  test('Update product + can overwrite publishedAt', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      publishedAt: '2020-08-27T09:50:50.000Z'\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-dps/${data.products[0].id}`,\n      body: {\n        data: product\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.products[0].id,\n      attributes: _.pick(data.products[0], ['name', 'description'])\n    });\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    expect(body.data.attributes.publishedAt).toBe(product.publishedAt);\n    data.products[0] = body.data;\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product",
            "suites": [
                "Core API - Basic + draftAndPublish"
            ],
            "updatePoint": {
                "line": 184,
                "column": 22
            },
            "line": 184,
            "code": "  test('Delete product', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-dps/${data.products[0].id}`\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.products[0]);\n    expect(body.data.id).toEqual(data.products[0].id);\n    expect(body.data.attributes.publishedAt).toBeISODate();\n    data.products.shift();\n  });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create a product - minLength",
            "suites": [
                "Core API - Basic + draftAndPublish",
                "validators"
            ],
            "updatePoint": {
                "line": 199,
                "column": 45
            },
            "line": 199,
            "code": "    test('Cannot create a product - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: ''\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          message: 'description must be at least 3 characters',\n          name: 'ValidationError',\n          details: {\n            errors: [{\n              path: ['description'],\n              message: 'description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create a product - required",
            "suites": [
                "Core API - Basic + draftAndPublish",
                "validators"
            ],
            "updatePoint": {
                "line": 227,
                "column": 44
            },
            "line": 227,
            "code": "    test('Cannot create a product - required', async () => {\n      const product = {\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'name must be defined.',\n          details: {\n            errors: [{\n              path: ['name'],\n              message: 'name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create a product - maxLength",
            "suites": [
                "Core API - Basic + draftAndPublish",
                "validators"
            ],
            "updatePoint": {
                "line": 255,
                "column": 45
            },
            "line": 255,
            "code": "    test('Cannot create a product - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: \"I'm a product description that is very long. At least thirty characters.\"\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dps',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          message: 'description must be at most 30 characters',\n          name: 'ValidationError',\n          details: {\n            errors: [{\n              path: ['description'],\n              message: 'description must be at most 30 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dp.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create product with compo",
            "suites": [
                "Core API - Basic + dz"
            ],
            "updatePoint": {
                "line": 67,
                "column": 33
            },
            "line": 67,
            "code": "  test('Create product with compo', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description',\n      dz: [{\n        __component: 'default.compo',\n        name: 'compo name',\n        description: 'short'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'POST',\n      url: '/product-with-dzs',\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['dz']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productWithDz.push(body.data);\n  });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product with compo",
            "suites": [
                "Core API - Basic + dz"
            ],
            "updatePoint": {
                "line": 98,
                "column": 31
            },
            "line": 98,
            "code": "  test('Read product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'GET',\n      url: '/product-with-dzs',\n      qs: {\n        populate: ['dz']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toHaveLength(1);\n    expect(body.data[0]).toMatchObject(data.productWithDz[0]);\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeUndefined();\n    });\n  });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product with compo",
            "suites": [
                "Core API - Basic + dz"
            ],
            "updatePoint": {
                "line": 116,
                "column": 33
            },
            "line": 116,
            "code": "  test('Update product with compo', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description',\n      dz: [{\n        __component: 'default.compo',\n        name: 'compo name updated',\n        description: 'update'\n      }]\n    };\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'PUT',\n      url: `/product-with-dzs/${data.productWithDz[0].id}`,\n      body: {\n        data: product\n      },\n      qs: {\n        populate: ['dz']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      id: data.productWithDz[0].id,\n      attributes: product\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productWithDz[0] = body.data;\n  });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product with compo",
            "suites": [
                "Core API - Basic + dz"
            ],
            "updatePoint": {
                "line": 147,
                "column": 33
            },
            "line": 147,
            "code": "  test('Delete product with compo', async () => {\n    const {\n      statusCode,\n      body\n    } = await rq({\n      method: 'DELETE',\n      url: `/product-with-dzs/${data.productWithDz[0].id}`,\n      qs: {\n        populate: ['dz']\n      }\n    });\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.productWithDz[0]);\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.productWithDz.shift();\n  });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - compo required",
            "suites": [
                "Core API - Basic + dz",
                "validation"
            ],
            "updatePoint": {
                "line": 164,
                "column": 59
            },
            "line": 164,
            "code": "    test('Cannot create product with compo - compo required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description'\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dzs',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'dz must be defined.',\n          details: {\n            errors: [{\n              path: ['dz'],\n              message: 'dz must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - minLength",
            "suites": [
                "Core API - Basic + dz",
                "validation"
            ],
            "updatePoint": {
                "line": 193,
                "column": 54
            },
            "line": 193,
            "code": "    test('Cannot create product with compo - minLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        dz: [{\n          __component: 'default.compo',\n          name: 'compo name',\n          description: ''\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dzs',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'dz[0].description must be at least 3 characters',\n          details: {\n            errors: [{\n              path: ['dz', '0', 'description'],\n              message: 'dz[0].description must be at least 3 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - maxLength",
            "suites": [
                "Core API - Basic + dz",
                "validation"
            ],
            "updatePoint": {
                "line": 227,
                "column": 54
            },
            "line": 227,
            "code": "    test('Cannot create product with compo - maxLength', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        dz: [{\n          __component: 'default.compo',\n          name: 'compo name',\n          description: 'A very long description that exceed the min length.'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dzs',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'dz[0].description must be at most 10 characters',\n          details: {\n            errors: [{\n              path: ['dz', '0', 'description'],\n              message: 'dz[0].description must be at most 10 characters',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - required",
            "suites": [
                "Core API - Basic + dz",
                "validation"
            ],
            "updatePoint": {
                "line": 261,
                "column": 53
            },
            "line": 261,
            "code": "    test('Cannot create product with compo - required', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        dz: [{\n          __component: 'default.compo',\n          description: 'short'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dzs',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'dz[0].name must be defined.',\n          details: {\n            errors: [{\n              path: ['dz', '0', 'name'],\n              message: 'dz[0].name must be defined.',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create product with compo - missing __component",
            "suites": [
                "Core API - Basic + dz",
                "validation"
            ],
            "updatePoint": {
                "line": 294,
                "column": 64
            },
            "line": 294,
            "code": "    test('Cannot create product with compo - missing __component', async () => {\n      const product = {\n        name: 'Product 1',\n        description: 'Product description',\n        dz: [{\n          name: 'Product 1',\n          description: 'short'\n        }]\n      };\n      const res = await rq({\n        method: 'POST',\n        url: '/product-with-dzs',\n        body: {\n          data: product\n        }\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ValidationError',\n          message: 'dz[0].__component is a required field',\n          details: {\n            errors: [{\n              path: ['dz', '0', '__component'],\n              message: 'dz[0].__component is a required field',\n              name: 'ValidationError'\n            }]\n          }\n        }\n      });\n    });",
            "file": "api/basic-dz.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create product",
            "suites": [
                "Core API - Basic"
            ],
            "updatePoint": {
                "line": 62,
                "column": 22
            },
            "line": 62,
            "code": "  test('Create product', async () => {\n    const product = {\n      name: 'Product 1',\n      description: 'Product description'\n    };\n    const res = await rq({\n      method: 'POST',\n      url: '/products',\n      body: {\n        data: product\n      }\n    });\n    const {\n      statusCode,\n      body\n    } = res;\n    expect(statusCode).toBe(200);\n    expect(body).toMatchObject({\n      data: {\n        id: expect.anything(),\n        attributes: product\n      }\n    });\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.product.push(body.data);\n  });",
            "file": "api/basic.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Read product",
            "suites": [
                "Core API - Basic"
            ],
            "updatePoint": {
                "line": 88,
                "column": 20
            },
            "line": 88,
            "code": "  test('Read product', async () => {\n    const res = await rq({\n      method: 'GET',\n      url: '/products'\n    });\n    const {\n      statusCode,\n      body\n    } = res;\n    expect(statusCode).toBe(200);\n    expect(Array.isArray(body.data)).toBe(true);\n    expect(body.data).toHaveLength(1);\n    expect(body.data).toEqual(expect.arrayContaining([expect.objectContaining({\n      id: expect.anything(),\n      attributes: expect.objectContaining({\n        name: 'Product 1',\n        description: 'Product description'\n      })\n    })]));\n    body.data.forEach(p => {\n      expect(p.attributes.publishedAt).toBeUndefined();\n    });\n  });",
            "file": "api/basic.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update product",
            "suites": [
                "Core API - Basic"
            ],
            "updatePoint": {
                "line": 111,
                "column": 22
            },
            "line": 111,
            "code": "  test('Update product', async () => {\n    const product = {\n      name: 'Product 1 updated',\n      description: 'Updated Product description'\n    };\n    const res = await rq({\n      method: 'PUT',\n      url: `/products/${data.product[0].id}`,\n      body: {\n        data: product\n      }\n    });\n    const {\n      statusCode,\n      body\n    } = res;\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject({\n      attributes: product\n    });\n    expect(body.data.id).toEqual(data.product[0].id);\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.product[0] = res.body.data;\n  });",
            "file": "api/basic.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete product",
            "suites": [
                "Core API - Basic"
            ],
            "updatePoint": {
                "line": 135,
                "column": 22
            },
            "line": 135,
            "code": "  test('Delete product', async () => {\n    const res = await rq({\n      method: 'DELETE',\n      url: `/products/${data.product[0].id}`\n    });\n    const {\n      statusCode,\n      body\n    } = res;\n    expect(statusCode).toBe(200);\n    expect(body.data).toMatchObject(data.product[0]);\n    expect(body.data.id).toEqual(data.product[0].id);\n    expect(body.data.attributes.publishedAt).toBeUndefined();\n    data.product.shift();\n  });",
            "file": "api/basic.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 55,
                "column": 40
            },
            "line": 55,
            "code": "    test('Creating entry with JSON works', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      })]));\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an array %p",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "line": 77,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws if the field is not an array %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending a non empty array with less then the min",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 87,
                "column": 70
            },
            "line": 87,
            "code": "    test('Throws when sending a non empty array with less then the min', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'test'\n            }]\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Success when sending an empty array",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 99,
                "column": 45
            },
            "line": 99,
            "code": "    test('Success when sending an empty array', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: []\n          }\n        }\n      });\n      expect(res.statusCode).toBe(200);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending too many items",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 109,
                "column": 44
            },
            "line": 109,
            "code": "    test('Throws when sending too many items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }]\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send input without the component field",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 131,
                "column": 52
            },
            "line": 131,
            "code": "    test('Can send input without the component field', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual([]);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Data is ordered in the order sent",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 145,
                "column": 43
            },
            "line": 145,
            "code": "    test('Data is ordered in the order sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'firstString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'firstString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 174,
                "column": 60
            },
            "line": 174,
            "code": "    test('Should return entries with their nested components', async () => {\n      const res = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      res.body.data.forEach(entry => {\n        expect(Array.isArray(entry.attributes.field)).toBe(true);\n        if (entry.attributes.field.length === 0) return;\n        expect(entry.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n          name: expect.any(String)\n        })]));\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "line": 192,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates order at each request",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 232,
                "column": 39
            },
            "line": 232,
            "code": "    test('Updates order at each request', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.body.data.attributes.field[0]).toMatchObject({\n        name: 'someString'\n      });\n      expect(res.body.data.attributes.field[1]).toMatchObject({\n        name: 'otherString'\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'otherString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(Array.isArray(updateRes.body.data.attributes.field)).toBe(true);\n      expect(updateRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(updateRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 289,
                "column": 56
            },
            "line": 289,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when not enough items",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 332,
                "column": 38
            },
            "line": 332,
            "code": "    test('Throws when not enough items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'lala'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(res.body.data);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when too many items",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 368,
                "column": 36
            },
            "line": 368,
            "code": "    test('Throws when too many items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'test'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(res.body.data);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous components if sent without id",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 414,
                "column": 61
            },
            "line": 414,
            "code": "    test('Replaces the previous components if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'test'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'new String'\n            }, {\n              name: 'test'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      const oldIds = res.body.data.attributes.field.map(val => val.id);\n      updateRes.body.data.attributes.field.forEach(val => {\n        expect(oldIds.includes(val.id)).toBe(false);\n      });\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }, {\n            name: 'test'\n          }]\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }, {\n            name: 'test'\n          }]\n        }\n      });\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 475,
                "column": 43
            },
            "line": 475,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'test'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: 'invalid_id',\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component with ids, create new ones and removes old ones",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 505,
                "column": 74
            },
            "line": 505,
            "code": "    test('Updates component with ids, create new ones and removes old ones', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'two'\n            }, {\n              name: 'three'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: res.body.data.attributes.field[0].id,\n              // send old id to update the previous component\n              name: 'newOne'\n            }, {\n              name: 'newTwo'\n            }, {\n              id: res.body.data.attributes.field[2].id,\n              name: 'three'\n            }, {\n              name: 'four'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            id: res.body.data.attributes.field[0].id,\n            name: 'newOne'\n          }, {\n            name: 'newTwo'\n          }, {\n            id: res.body.data.attributes.field[2].id,\n            name: 'three'\n          }, {\n            name: 'four'\n          }]\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and Not required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 571,
                "column": 39
            },
            "line": 571,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someOtherString'\n            }, {\n              name: 'otherSomeString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toMatchObject(res.body.data);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/repeatable-not-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 53,
                "column": 40
            },
            "line": 53,
            "code": "    test('Creating entry with JSON works', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      })]));\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an object %p",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "line": 73,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws if the field is not an object %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send an empty array",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 83,
                "column": 33
            },
            "line": 83,
            "code": "    test('Can send an empty array', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual([]);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send input without the component field",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 97,
                "column": 52
            },
            "line": 97,
            "code": "    test('Can send input without the component field', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual([]);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Data is orderd in the order sent",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 111,
                "column": 42
            },
            "line": 111,
            "code": "    test('Data is orderd in the order sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'firstString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'firstString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 140,
                "column": 60
            },
            "line": 140,
            "code": "    test('Should return entries with their nested components', async () => {\n      const res = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      res.body.data.forEach(entry => {\n        expect(Array.isArray(entry.attributes.field)).toBe(true);\n        if (entry.attributes.field.length === 0) return;\n        expect(entry.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n          name: expect.any(String)\n        })]));\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "line": 158,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates order at each request",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 196,
                "column": 39
            },
            "line": 196,
            "code": "    test('Updates order at each request', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.body.data.attributes.field[0]).toMatchObject({\n        name: 'someString'\n      });\n      expect(res.body.data.attributes.field[1]).toMatchObject({\n        name: 'otherString'\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'otherString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(Array.isArray(updateRes.body.data.attributes.field)).toBe(true);\n      expect(updateRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(updateRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 253,
                "column": 56
            },
            "line": 253,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Removes previous components if empty array sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 296,
                "column": 57
            },
            "line": 296,
            "code": "    test('Removes previous components if empty array sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: []\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectResult);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous components if sent without id",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 335,
                "column": 61
            },
            "line": 335,
            "code": "    test('Replaces the previous components if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      const oldIds = res.body.data.attributes.field.map(val => val.id);\n      updateRes.body.data.attributes.field.forEach(val => {\n        expect(oldIds.includes(val.id)).toBe(false);\n      });\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 388,
                "column": 43
            },
            "line": 388,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: 'invalid_id',\n              name: 'new String'\n            }]\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component with ids, create new ones and removes old ones",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 410,
                "column": 74
            },
            "line": 410,
            "code": "    test('Updates component with ids, create new ones and removes old ones', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'two'\n            }, {\n              name: 'three'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: res.body.data.attributes.field[0].id,\n              // send old id to update the previous component\n              name: 'newOne'\n            }, {\n              name: 'newTwo'\n            }, {\n              id: res.body.data.attributes.field[2].id,\n              name: 'three'\n            }, {\n              name: 'four'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            id: res.body.data.attributes.field[0].id,\n            name: 'newOne'\n          }, {\n            name: 'newTwo'\n          }, {\n            id: res.body.data.attributes.field[2].id,\n            name: 'three'\n          }, {\n            name: 'four'\n          }]\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and Not required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 476,
                "column": 39
            },
            "line": 476,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someOtherString'\n            }, {\n              name: 'otherSomeString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toMatchObject(res.body.data);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/repeatable-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 55,
                "column": 40
            },
            "line": 55,
            "code": "    test('Creating entry with JSON works', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      })]));\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating second entry",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 75,
                "column": 31
            },
            "line": 75,
            "code": "    test('Creating second entry', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someValue'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someValue'\n      })]));\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an object %p",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "line": 95,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws if the field is not an object %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending an empty array or an array with less than the min",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 108,
                "column": 79
            },
            "line": 108,
            "code": "    test('Throws when sending an empty array or an array with less than the min', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending too many items",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 121,
                "column": 44
            },
            "line": 121,
            "code": "    test('Throws when sending too many items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }, {\n              name: 'one'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Data is orderd in the order sent",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 148,
                "column": 42
            },
            "line": 148,
            "code": "    test('Data is orderd in the order sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'firstString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'firstString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 177,
                "column": 60
            },
            "line": 177,
            "code": "    test('Should return entries with their nested components', async () => {\n      const res = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      res.body.data.forEach(entry => {\n        expect(Array.isArray(entry.attributes.field)).toBe(true);\n        if (entry.attributes.field.length === 0) return;\n        expect(entry.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n          name: expect.any(String)\n        })]));\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "line": 195,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates order at each request",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 233,
                "column": 39
            },
            "line": 233,
            "code": "    test('Updates order at each request', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.body.data.attributes.field[0]).toMatchObject({\n        name: 'someString'\n      });\n      expect(res.body.data.attributes.field[1]).toMatchObject({\n        name: 'otherString'\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'otherString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(Array.isArray(updateRes.body.data.attributes.field)).toBe(true);\n      expect(updateRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(updateRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 290,
                "column": 56
            },
            "line": 290,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when not enough items",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 333,
                "column": 38
            },
            "line": 333,
            "code": "    test('Throws when not enough items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(res.body.data);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when too many items",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 365,
                "column": 36
            },
            "line": 365,
            "code": "    test('Throws when too many items', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(res.body.data);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous components if sent without id",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 409,
                "column": 61
            },
            "line": 409,
            "code": "    test('Replaces the previous components if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      const oldIds = res.body.data.attributes.field.map(val => val.id);\n      updateRes.body.data.attributes.field.forEach(val => {\n        expect(oldIds.includes(val.id)).toBe(false);\n      });\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 462,
                "column": 43
            },
            "line": 462,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: 'invalid_id',\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component with ids, create new ones and removes old ones",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 490,
                "column": 74
            },
            "line": 490,
            "code": "    test('Updates component with ids, create new ones and removes old ones', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'two'\n            }, {\n              name: 'three'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: res.body.data.attributes.field[0].id,\n              // send old id to update the previous component\n              name: 'newOne'\n            }, {\n              name: 'newTwo'\n            }, {\n              id: res.body.data.attributes.field[2].id,\n              name: 'three'\n            }, {\n              name: 'four'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            id: res.body.data.attributes.field[0].id,\n            name: 'newOne'\n          }, {\n            name: 'newTwo'\n          }, {\n            id: res.body.data.attributes.field[2].id,\n            name: 'three'\n          }, {\n            name: 'four'\n          }]\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and Not required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 556,
                "column": 39
            },
            "line": 556,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someOtherString'\n            }, {\n              name: 'otherSomeString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toMatchObject(res.body.data);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/repeatable-required-min-max.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 53,
                "column": 40
            },
            "line": 53,
            "code": "    test('Creating entry with JSON works', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      })]));\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating second entry",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 72,
                "column": 31
            },
            "line": 72,
            "code": "    test('Creating second entry', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someValue'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        name: 'someValue'\n      })]));\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an object %p",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "line": 91,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws if the field is not an object %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send an empty array",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 101,
                "column": 33
            },
            "line": 101,
            "code": "    test('Can send an empty array', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual([]);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when component is not provided",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 115,
                "column": 47
            },
            "line": 115,
            "code": "    test('Throws when component is not provided', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Data is orderd in the order sent",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 128,
                "column": 42
            },
            "line": 128,
            "code": "    test('Data is orderd in the order sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'firstString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'firstString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 157,
                "column": 60
            },
            "line": 157,
            "code": "    test('Should return entries with their nested components', async () => {\n      const res = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      res.body.data.forEach(entry => {\n        expect(Array.isArray(entry.attributes.field)).toBe(true);\n        if (entry.attributes.field.length === 0) return;\n        expect(entry.attributes.field).toEqual(expect.arrayContaining([expect.objectContaining({\n          name: expect.any(String)\n        })]));\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "line": 175,
            "code": "    test.each(['someString', 128219, false, {}, null])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates order at each request",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 213,
                "column": 39
            },
            "line": 213,
            "code": "    test('Updates order at each request', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.body.data.attributes.field[0]).toMatchObject({\n        name: 'someString'\n      });\n      expect(res.body.data.attributes.field[1]).toMatchObject({\n        name: 'otherString'\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'otherString'\n            }, {\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(Array.isArray(updateRes.body.data.attributes.field)).toBe(true);\n      expect(updateRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(updateRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(Array.isArray(getRes.body.data.attributes.field)).toBe(true);\n      expect(getRes.body.data.attributes.field[0]).toMatchObject({\n        name: 'otherString'\n      });\n      expect(getRes.body.data.attributes.field[1]).toMatchObject({\n        name: 'someString'\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 270,
                "column": 56
            },
            "line": 270,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'otherString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Removes previous components if empty array sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 313,
                "column": 57
            },
            "line": 313,
            "code": "    test('Removes previous components if empty array sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: []\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectResult);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous components if sent without id",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 352,
                "column": 61
            },
            "line": 352,
            "code": "    test('Replaces the previous components if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      const oldIds = res.body.data.attributes.field.map(val => val.id);\n      updateRes.body.data.attributes.field.forEach(val => {\n        expect(oldIds.includes(val.id)).toBe(false);\n      });\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            name: 'new String'\n          }]\n        }\n      });\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 405,
                "column": 43
            },
            "line": 405,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: 'invalid_id',\n              name: 'new String'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component with ids, create new ones and removes old ones",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 433,
                "column": 74
            },
            "line": 433,
            "code": "    test('Updates component with ids, create new ones and removes old ones', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'one'\n            }, {\n              name: 'two'\n            }, {\n              name: 'three'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: [{\n              id: res.body.data.attributes.field[0].id,\n              // send old id to update the previous component\n              name: 'newOne'\n            }, {\n              name: 'newTwo'\n            }, {\n              id: res.body.data.attributes.field[2].id,\n              name: 'three'\n            }, {\n              name: 'four'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: [{\n            id: res.body.data.attributes.field[0].id,\n            name: 'newOne'\n          }, {\n            name: 'newTwo'\n          }, {\n            id: res.body.data.attributes.field[2].id,\n            name: 'three'\n          }, {\n            name: 'four'\n          }]\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and Not required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 499,
                "column": 39
            },
            "line": 499,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: [{\n              name: 'someString'\n            }, {\n              name: 'someOtherString'\n            }, {\n              name: 'otherSomeString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toMatchObject(res.body.data);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/repeatable-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 53,
                "column": 40
            },
            "line": 53,
            "code": "    test('Creating entry with JSON works', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      }));\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating second entry ",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 72,
                "column": 32
            },
            "line": 72,
            "code": "    test('Creating second entry ', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someValue'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'someValue'\n      }));\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an object %p",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "line": 91,
            "code": "    test.each([[], 'someString', 128219, false])('Throws if the field is not an object %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send a null value",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 101,
                "column": 31
            },
            "line": 101,
            "code": "    test('Can send a null value', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: null\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toBe(null);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can send input without the component field",
            "suites": [
                "Non repeatable and Not required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 115,
                "column": 52
            },
            "line": 115,
            "code": "    test('Can send input without the component field', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data.attributes.field).toBe(null);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and Not required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 129,
                "column": 60
            },
            "line": 129,
            "code": "    test('Should return entries with their nested components', async () => {\n      const res = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      res.body.data.forEach(entry => {\n        if (entry.attributes.field === null) return;\n        expect(entry.attributes.field).toMatchObject({\n          name: expect.any(String)\n        });\n      });\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "line": 146,
            "code": "    test.each([[], 'someString', 128219, false])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 184,
                "column": 56
            },
            "line": 184,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Removes previous component if null sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 225,
                "column": 49
            },
            "line": 225,
            "code": "    test('Removes previous component if null sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: null\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: null\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectResult);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous component if sent without id",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 264,
                "column": 60
            },
            "line": 264,
            "code": "    test('Replaces the previous component if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              name: 'new String'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data.attributes.field.id).not.toBe(res.body.data.attributes.field.id);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            name: 'new String'\n          }\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            name: 'new String'\n          }\n        }\n      });\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 314,
                "column": 43
            },
            "line": 314,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              id: 'invalid_id',\n              name: 'new String'\n            }\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component if previsous component id is sent",
            "suites": [
                "Non repeatable and Not required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 336,
                "column": 61
            },
            "line": 336,
            "code": "    test('Updates component if previsous component id is sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              id: res.body.data.attributes.field.id,\n              // send old id to update the previous component\n              name: 'new String'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            id: res.body.data.attributes.field.id,\n            name: 'new String'\n          }\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and Not required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 384,
                "column": 39
            },
            "line": 384,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toMatchObject(res.body.data);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/single-not-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating entry with JSON works",
            "suites": [
                "Non repeatable and required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 53,
                "column": 40
            },
            "line": 53,
            "code": "    test('Creating entry with JSON works', async () => {\n      const {\n        statusCode,\n        body\n      } = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(statusCode).toBe(200);\n      expect(body.data.attributes.field).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'someString'\n      }));\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Creating a second entry works",
            "suites": [
                "Non repeatable and required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 75,
                "column": 39
            },
            "line": 75,
            "code": "    test('Creating a second entry works', async () => {\n      const {\n        statusCode,\n        body\n      } = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someValue'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(statusCode).toBe(200);\n      expect(body.data.attributes.field).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'someValue'\n      }));\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if the field is not an object %p",
            "suites": [
                "Non repeatable and required component",
                "POST new entry"
            ],
            "line": 97,
            "code": "    test.each([[], 'someString', 128219, false])('Throws if the field is not an object %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending a null value",
            "suites": [
                "Non repeatable and required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 110,
                "column": 42
            },
            "line": 110,
            "code": "    test('Throws when sending a null value', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: null\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when the component is not provided",
            "suites": [
                "Non repeatable and required component",
                "POST new entry"
            ],
            "updatePoint": {
                "line": 123,
                "column": 51
            },
            "line": 123,
            "code": "    test('Throws when the component is not provided', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return entries with their nested components",
            "suites": [
                "Non repeatable and required component",
                "GET entries"
            ],
            "updatePoint": {
                "line": 136,
                "column": 60
            },
            "line": 136,
            "code": "    test('Should return entries with their nested components', async () => {\n      const {\n        statusCode,\n        body\n      } = await rq.get('/', {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body.data)).toBe(true);\n      body.data.forEach(entry => {\n        if (entry.attributes.field === null) return;\n        expect(entry.attributes.field).toMatchObject({\n          name: expect.any(String)\n        });\n      });\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws when sending invalid updated field %p",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "line": 156,
            "code": "    test.each([[], 'someString', 128219, false])('Throws when sending invalid updated field %p', async value => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: value\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400); // shouldn't have been updated\n\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(res.body.data);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Keeps the previous value if component not sent",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 189,
                "column": 56
            },
            "line": 189,
            "code": "    test('Keeps the previous value if component not sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {}\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: res.body.data.attributes.field\n        }\n      });\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if component is null",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 230,
                "column": 37
            },
            "line": 230,
            "code": "    test('Throws if component is null', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: null\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body).toMatchObject(res.body);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Replaces the previous component if sent without id",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 262,
                "column": 60
            },
            "line": 262,
            "code": "    test('Replaces the previous component if sent without id', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              name: 'new String'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data.attributes.field.id).not.toBe(res.body.data.attributes.field.id);\n      expect(updateRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            name: 'new String'\n          }\n        }\n      });\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject({\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            name: 'new String'\n          }\n        }\n      });\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws on invalid id in component",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 312,
                "column": 43
            },
            "line": 312,
            "code": "    test('Throws on invalid id in component', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              id: 'invalid_id',\n              name: 'new String'\n            }\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(400);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Updates component if previous component id is sent",
            "suites": [
                "Non repeatable and required component",
                "PUT entry"
            ],
            "updatePoint": {
                "line": 337,
                "column": 60
            },
            "line": 337,
            "code": "    test('Updates component if previous component id is sent', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const updateRes = await rq.put(`/${res.body.data.id}`, {\n        body: {\n          data: {\n            field: {\n              id: res.body.data.attributes.field.id,\n              // send old id to update the previous component\n              name: 'new String'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const expectedResult = {\n        id: res.body.data.id,\n        attributes: {\n          field: {\n            id: res.body.data.attributes.field.id,\n            name: 'new String'\n          }\n        }\n      };\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toMatchObject(expectedResult);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toMatchObject(expectedResult);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns entry with components",
            "suites": [
                "Non repeatable and required component",
                "DELETE entry"
            ],
            "updatePoint": {
                "line": 385,
                "column": 39
            },
            "line": 385,
            "code": "    test('Returns entry with components', async () => {\n      const res = await rq.post('/', {\n        body: {\n          data: {\n            field: {\n              name: 'someString'\n            }\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      const deleteRes = await rq.delete(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body).toMatchObject(res.body);\n      const getRes = await rq.get(`/${res.body.data.id}`, {\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(getRes.statusCode).toBe(404);\n    });",
            "file": "components/single-required.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return 2 results",
            "suites": [
                "Deep Filtering API",
                "Without search",
                "Filter on a manyWay relation"
            ],
            "updatePoint": {
                "line": 101,
                "column": 35
            },
            "line": 101,
            "code": "      test('Should return 2 results', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              cards: {\n                name: data.card[0].attributes.name\n              }\n            }\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(2);\n        expect(res.body.data[0]).toMatchObject(data.collector[0]);\n        expect(res.body.data[1]).toMatchObject(data.collector[1]);\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return 1 result",
            "suites": [
                "Deep Filtering API",
                "Without search",
                "Filter on a manyWay relation"
            ],
            "updatePoint": {
                "line": 118,
                "column": 34
            },
            "line": 118,
            "code": "      test('Should return 1 result', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              cards: {\n                name: data.card[1].attributes.name\n              }\n            }\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(1);\n        expect(res.body.data[0]).toMatchObject(data.collector[0]);\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return 2 results",
            "suites": [
                "Deep Filtering API",
                "Without search",
                "Filter on a self manyWay relation"
            ],
            "updatePoint": {
                "line": 136,
                "column": 35
            },
            "line": 136,
            "code": "      test('Should return 2 results', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              collector_friends: {\n                name: data.collector[0].attributes.name\n              }\n            }\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(2);\n        expect(res.body.data).toEqual(expect.arrayContaining(data.collector.slice(1, 3)));\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "cards.name + empty search",
            "suites": [
                "Deep Filtering API",
                "With search",
                "Filter on a manyWay relation"
            ],
            "updatePoint": {
                "line": 156,
                "column": 37
            },
            "line": 156,
            "code": "      test('cards.name + empty search', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              cards: {\n                name: data.card[0].attributes.name\n              }\n            },\n            _q: ''\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(2);\n        expect(res.body.data).toEqual(expect.arrayContaining(data.collector.slice(0, 2)));\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "cards.name + _q=25",
            "suites": [
                "Deep Filtering API",
                "With search",
                "Filter on a manyWay relation"
            ],
            "updatePoint": {
                "line": 173,
                "column": 30
            },
            "line": 173,
            "code": "      test('cards.name + _q=25', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              cards: {\n                name: data.card[0].attributes.name\n              }\n            },\n            _q: 25\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(1);\n        expect(res.body.data[0]).toMatchObject(data.collector[0]);\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "collector_friends.name + empty search",
            "suites": [
                "Deep Filtering API",
                "With search",
                "Filter on a self manyWay relation"
            ],
            "updatePoint": {
                "line": 192,
                "column": 49
            },
            "line": 192,
            "code": "      test('collector_friends.name + empty search', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              collector_friends: {\n                name: data.collector[0].attributes.name\n              }\n            },\n            _q: ''\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(2);\n        expect(res.body.data).toEqual(expect.arrayContaining(data.collector.slice(1, 3)));\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "collector_friends.name + search isa",
            "suites": [
                "Deep Filtering API",
                "With search",
                "Filter on a self manyWay relation"
            ],
            "updatePoint": {
                "line": 209,
                "column": 47
            },
            "line": 209,
            "code": "      test('collector_friends.name + search isa', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/collectors',\n          qs: {\n            filters: {\n              collector_friends: {\n                name: data.collector[0].attributes.name\n              }\n            },\n            _q: 'isa'\n          }\n        });\n        expect(Array.isArray(res.body.data)).toBe(true);\n        expect(res.body.data.length).toBe(1);\n        expect(res.body.data[0]).toMatchObject(data.collector[1]);\n      });",
            "file": "deepFiltering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can create an entry with a dynamic zone and a nested compo",
            "suites": [
                "Not required dynamiczone",
                "Creation"
            ],
            "updatePoint": {
                "line": 99,
                "column": 68
            },
            "line": 99,
            "code": "    test('Can create an entry with a dynamic zone and a nested compo', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.simple-compo',\n              name: 'someString'\n            }, {\n              __component: 'default.compo-with-other-compo',\n              compo: {\n                name: 'someString'\n              }\n            }]\n          }\n        },\n        qs: {\n          populate: ['field.compo']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.simple-compo',\n            name: 'someString'\n          }, {\n            id: expect.anything(),\n            __component: 'default.compo-with-other-compo',\n            compo: {\n              id: expect.anything(),\n              name: 'someString'\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can create entry with empty dynamiczone if it is not required",
            "suites": [
                "Not required dynamiczone",
                "Creation"
            ],
            "updatePoint": {
                "line": 139,
                "column": 71
            },
            "line": 139,
            "code": "    test('Can create entry with empty dynamiczone if it is not required', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field.length).toBe(0);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throw if min items is not respected",
            "suites": [
                "Not required dynamiczone",
                "Creation"
            ],
            "updatePoint": {
                "line": 156,
                "column": 45
            },
            "line": 156,
            "code": "    test('Throw if min items is not respected', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.simple-compo',\n              name: 'someString'\n            }]\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Throws if max items is not respected",
            "suites": [
                "Not required dynamiczone",
                "Creation"
            ],
            "updatePoint": {
                "line": 171,
                "column": 46
            },
            "line": 171,
            "code": "    test('Throws if max items is not respected', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: Array(10).fill({\n              __component: 'default.simple-compo',\n              name: 'someString'\n            })\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The entry has its dynamic zone populated",
            "suites": [
                "Not required dynamiczone",
                "Getting one entry"
            ],
            "updatePoint": {
                "line": 188,
                "column": 50
            },
            "line": 188,
            "code": "    test('The entry has its dynamic zone populated', async () => {\n      const createRes = await createEntry();\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'GET',\n        url: `/${entryId}`,\n        qs: {\n          populate: ['field.compo']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.simple-compo',\n            name: 'someString'\n          }, {\n            id: expect.anything(),\n            __component: 'default.compo-with-other-compo',\n            compo: {\n              id: expect.anything(),\n              name: 'someString'\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The entries have their dynamic zones populated",
            "suites": [
                "Not required dynamiczone",
                "Listing entries"
            ],
            "updatePoint": {
                "line": 219,
                "column": 56
            },
            "line": 219,
            "code": "    test('The entries have their dynamic zones populated', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/',\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data)).toBe(true);\n      expect(res.body.data).toEqual(expect.arrayContaining([expect.objectContaining({\n        attributes: expect.objectContaining({\n          field: expect.arrayContaining([expect.objectContaining({\n            id: expect.anything(),\n            __component: expect.any(String)\n          })])\n        })\n      })]));\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can empty non required dynamic zone",
            "suites": [
                "Not required dynamiczone",
                "Edition"
            ],
            "updatePoint": {
                "line": 240,
                "column": 45
            },
            "line": 240,
            "code": "    test('Can empty non required dynamic zone', async () => {\n      const createRes = await createEntry();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'PUT',\n        url: `/${entryId}`,\n        body: {\n          data: {\n            field: []\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data.attributes.field).toEqual([]);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can add items to empty dynamic zone",
            "suites": [
                "Not required dynamiczone",
                "Edition"
            ],
            "updatePoint": {
                "line": 260,
                "column": 45
            },
            "line": 260,
            "code": "    test('Can add items to empty dynamic zone', async () => {\n      const createRes = await createEmpty();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'PUT',\n        url: `/${entryId}`,\n        body: {\n          data: defaultBody\n        },\n        qs: {\n          populate: ['field.compo']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.simple-compo',\n            name: 'someString'\n          }, {\n            id: expect.anything(),\n            __component: 'default.compo-with-other-compo',\n            compo: {\n              id: expect.anything(),\n              name: 'someString'\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can remove items from dynamic zone",
            "suites": [
                "Not required dynamiczone",
                "Edition"
            ],
            "updatePoint": {
                "line": 293,
                "column": 44
            },
            "line": 293,
            "code": "    test('Can remove items from dynamic zone', async () => {\n      const createRes = await createEntry();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'PUT',\n        url: `/${entryId}`,\n        body: {\n          data: {\n            field: [{\n              __component: 'default.simple-compo',\n              name: 'otherString'\n            }, {\n              __component: 'default.simple-compo',\n              name: 'secondString'\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.simple-compo',\n            name: 'otherString'\n          }, {\n            id: expect.anything(),\n            __component: 'default.simple-compo',\n            name: 'secondString'\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Respects min items",
            "suites": [
                "Not required dynamiczone",
                "Edition"
            ],
            "updatePoint": {
                "line": 331,
                "column": 28
            },
            "line": 331,
            "code": "    test('Respects min items', async () => {\n      const createRes = await createEntry();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'PUT',\n        url: `/${entryId}`,\n        body: {\n          data: {\n            field: [{\n              __component: 'default.simple-compo',\n              name: 'otherString'\n            }]\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Respects max items",
            "suites": [
                "Not required dynamiczone",
                "Edition"
            ],
            "updatePoint": {
                "line": 349,
                "column": 28
            },
            "line": 349,
            "code": "    test('Respects max items', async () => {\n      const createRes = await createEntry();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'PUT',\n        url: `/${entryId}`,\n        body: {\n          data: {\n            field: Array(10).fill({\n              __component: 'default.simple-compo',\n              name: 'otherString'\n            })\n          }\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Returns the entry with its paths populated",
            "suites": [
                "Not required dynamiczone",
                "Deletion"
            ],
            "updatePoint": {
                "line": 369,
                "column": 52
            },
            "line": 369,
            "code": "    test('Returns the entry with its paths populated', async () => {\n      const createRes = await createEntry();\n      expect(createRes.statusCode).toBe(200);\n      const entryId = createRes.body.data.id;\n      const res = await rq({\n        method: 'DELETE',\n        url: `/${entryId}`,\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toEqual(expect.objectContaining({\n        attributes: expect.objectContaining({\n          field: expect.arrayContaining([expect.objectContaining({\n            id: expect.anything(),\n            __component: expect.any(String)\n          })])\n        })\n      }));\n    });",
            "file": "dynamiczones/simple.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The medias are correctly related to the components on creation",
            "suites": [
                "Not required dynamiczone",
                "Contains components with medias"
            ],
            "updatePoint": {
                "line": 94,
                "column": 72
            },
            "line": 94,
            "code": "    test('The medias are correctly related to the components on creation', async () => {\n      const imgRes = await uploadImg();\n      expect(imgRes.statusCode).toBe(200);\n      const mediaId = imgRes.body[0].id;\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.one-media',\n              media: mediaId\n            }, {\n              __component: 'default.many-media',\n              media: [mediaId, mediaId]\n            }]\n          }\n        },\n        qs: {\n          populate: ['field.media']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.one-media',\n            media: {\n              data: {\n                id: mediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              }\n            }\n          }, {\n            id: expect.anything(),\n            __component: 'default.many-media',\n            media: {\n              data: expect.arrayContaining([expect.objectContaining({\n                id: mediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              })])\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/with-media.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The medias are correctly related to the components on edition",
            "suites": [
                "Not required dynamiczone",
                "Contains components with medias"
            ],
            "updatePoint": {
                "line": 146,
                "column": 71
            },
            "line": 146,
            "code": "    test('The medias are correctly related to the components on edition', async () => {\n      const imgRes = await uploadImg();\n      expect(imgRes.statusCode).toBe(200);\n      const mediaId = imgRes.body[0].id;\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.one-media',\n              media: mediaId\n            }, {\n              __component: 'default.many-media',\n              media: [mediaId, mediaId]\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      const newImgRes = await uploadImg();\n      expect(newImgRes.statusCode).toBe(200);\n      const newMediaId = newImgRes.body[0].id;\n      const updateRes = await rq({\n        method: 'PUT',\n        url: `/${res.body.data.id}`,\n        body: {\n          data: {\n            field: [{\n              __component: 'default.one-media',\n              media: newMediaId\n            }, {\n              __component: 'default.many-media',\n              media: [newMediaId, newMediaId]\n            }]\n          }\n        },\n        qs: {\n          populate: ['field.media']\n        }\n      });\n      expect(updateRes.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.one-media',\n            media: {\n              data: {\n                id: newMediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              }\n            }\n          }, {\n            id: expect.anything(),\n            __component: 'default.many-media',\n            media: {\n              data: expect.arrayContaining([expect.objectContaining({\n                id: newMediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              })])\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/with-media.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The media are populated on the components",
            "suites": [
                "Not required dynamiczone",
                "Contains components with medias"
            ],
            "updatePoint": {
                "line": 219,
                "column": 51
            },
            "line": 219,
            "code": "    test('The media are populated on the components', async () => {\n      const imgRes = await uploadImg();\n      expect(imgRes.statusCode).toBe(200);\n      const mediaId = imgRes.body[0].id;\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.one-media',\n              media: mediaId\n            }, {\n              __component: 'default.many-media',\n              media: [mediaId, mediaId]\n            }]\n          }\n        },\n        qs: {\n          populate: ['field']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      const getRes = await rq({\n        method: 'GET',\n        url: `/${res.body.data.id}`,\n        qs: {\n          populate: ['field.media']\n        }\n      });\n      expect(getRes.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.one-media',\n            media: {\n              data: {\n                id: mediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              }\n            }\n          }, {\n            id: expect.anything(),\n            __component: 'default.many-media',\n            media: {\n              data: expect.arrayContaining([expect.objectContaining({\n                id: mediaId,\n                attributes: expect.objectContaining({\n                  url: expect.any(String)\n                })\n              })])\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/with-media.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "The medias are correctly related to the nested components on creation",
            "suites": [
                "Not required dynamiczone",
                "Contains components with nested components having medias"
            ],
            "updatePoint": {
                "line": 279,
                "column": 79
            },
            "line": 279,
            "code": "    test('The medias are correctly related to the nested components on creation', async () => {\n      const imgRes = await uploadImg();\n      expect(imgRes.statusCode).toBe(200);\n      const mediaId = imgRes.body[0].id;\n      const res = await rq({\n        method: 'POST',\n        url: '/',\n        body: {\n          data: {\n            field: [{\n              __component: 'default.with-nested',\n              singleMedia: {\n                media: mediaId\n              },\n              multipleMedia: {\n                media: [mediaId, mediaId]\n              }\n            }]\n          }\n        },\n        qs: {\n          populate: ['field.singleMedia.media', 'field.multipleMedia.media']\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body.data.attributes.field)).toBe(true);\n      expect(res.body.data).toMatchObject({\n        attributes: {\n          field: [{\n            id: expect.anything(),\n            __component: 'default.with-nested',\n            singleMedia: {\n              media: {\n                data: {\n                  id: mediaId,\n                  attributes: expect.objectContaining({\n                    url: expect.any(String)\n                  })\n                }\n              }\n            },\n            multipleMedia: {\n              media: {\n                data: expect.arrayContaining([expect.objectContaining({\n                  id: mediaId,\n                  attributes: expect.objectContaining({\n                    url: expect.any(String)\n                  })\n                })])\n              }\n            }\n          }]\n        }\n      });\n    });",
            "file": "dynamiczones/with-media.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create tag1",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 49,
                "column": 21
            },
            "line": 49,
            "code": "    test('Create tag1', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag1'\n          }\n        }\n      });\n      data.tags.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('tag1');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create tag2",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 65,
                "column": 21
            },
            "line": 65,
            "code": "    test('Create tag2', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag2'\n          }\n        }\n      });\n      data.tags.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('tag2');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create tag3",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 81,
                "column": 21
            },
            "line": 81,
            "code": "    test('Create tag3', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag3'\n          }\n        }\n      });\n      data.tags.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('tag3');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article1 without relation",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 97,
                "column": 42
            },
            "line": 97,
            "code": "    test('Create article1 without relation', async () => {\n      const entry = {\n        title: 'Article 1',\n        content: 'My super content 1'\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article2 with tag1",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 116,
                "column": 35
            },
            "line": 116,
            "code": "    test('Create article2 with tag1', async () => {\n      const entry = {\n        title: 'Article 2',\n        content: 'Content 2',\n        tags: [data.tags[0].id]\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['tags']\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(Array.isArray(body.data.attributes.tags.data)).toBeTruthy();\n      expect(body.data.attributes.tags.data.length).toBe(1);\n      expect(body.data.attributes.tags.data[0].id).toBe(data.tags[0].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 add tag2",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 142,
                "column": 34
            },
            "line": 142,
            "code": "    test('Update article1 add tag2', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes, {\n        tags: [data.tags[1].id]\n      });\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['tags']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(Array.isArray(body.data.attributes.tags.data)).toBeTruthy();\n      expect(body.data.attributes.tags.data.length).toBe(1);\n      expect(body.data.attributes.tags.data[0].id).toBe(data.tags[1].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 add tag1 and tag3",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 171,
                "column": 43
            },
            "line": 171,
            "code": "    test('Update article1 add tag1 and tag3', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes);\n      entry.tags = data.tags.map(t => t.id);\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['tags']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(Array.isArray(body.data.attributes.tags.data)).toBeTruthy();\n      expect(body.data.attributes.tags.data.length).toBe(3);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 remove one tag",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 198,
                "column": 40
            },
            "line": 198,
            "code": "    test('Update article1 remove one tag', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes);\n      entry.tags = entry.tags.data.slice(1).map(t => t.id);\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['tags']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(Array.isArray(body.data.attributes.tags.data)).toBeTruthy();\n      expect(body.data.attributes.tags.data.length).toBe(2);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 remove all tag",
            "suites": [
                "Create Strapi API End to End",
                "Test manyToMany relation (article - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 225,
                "column": 40
            },
            "line": 225,
            "code": "    test('Update article1 remove all tag', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes, {\n        tags: []\n      });\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['tags']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(Array.isArray(body.data.attributes.tags.data)).toBeTruthy();\n      expect(body.data.attributes.tags.data.length).toBe(0);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create cat1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 266,
                "column": 21
            },
            "line": 266,
            "code": "    test('Create cat1', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/categories',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'cat1'\n          }\n        },\n        qs: {\n          populate: ['articles']\n        }\n      });\n      data.categories.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('cat1');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create cat2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 285,
                "column": 21
            },
            "line": 285,
            "code": "    test('Create cat2', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/categories',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'cat2'\n          }\n        },\n        qs: {\n          populate: ['articles']\n        }\n      });\n      data.categories.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('cat2');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article1 with cat1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 304,
                "column": 35
            },
            "line": 304,
            "code": "    test('Create article1 with cat1', async () => {\n      const entry = {\n        title: 'Article 1',\n        content: 'Content 1',\n        category: data.categories[0].id\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['category']\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(body.data.attributes.category.data.attributes.name).toBe(data.categories[0].attributes.name);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 with cat2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 328,
                "column": 35
            },
            "line": 328,
            "code": "    test('Update article1 with cat2', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes, {\n        category: data.categories[1].id\n      });\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['category']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(body.data.attributes.category.data.attributes.name).toBe(data.categories[1].attributes.name);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 355,
                "column": 25
            },
            "line": 355,
            "code": "    test('Create article2', async () => {\n      const entry = {\n        title: 'Article 2',\n        content: 'Content 2'\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article2 with cat2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 374,
                "column": 35
            },
            "line": 374,
            "code": "    test('Update article2 with cat2', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[1];\n      const entry = Object.assign({}, attributes, {\n        category: data.categories[1].id\n      });\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['category']\n        }\n      });\n      data.articles[1] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(body.data.attributes.category.data.attributes.name).toBe(data.categories[1].attributes.name);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update cat1 with article1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 401,
                "column": 35
            },
            "line": 401,
            "code": "    test('Update cat1 with article1', async () => {\n      const {\n        id,\n        attributes\n      } = data.categories[0];\n      const entry = Object.assign({}, attributes);\n      entry.articles = data.categories[0].attributes.articles.data.map(a => a.id).concat(data.articles[0].id);\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/categories/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['articles']\n        }\n      });\n      data.categories[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(Array.isArray(body.data.attributes.articles.data)).toBeTruthy();\n      expect(body.data.attributes.articles.data.length).toBe(1);\n      expect(body.data.attributes.name).toBe(entry.name);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create cat3 with article1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 427,
                "column": 35
            },
            "line": 427,
            "code": "    test('Create cat3 with article1', async () => {\n      const entry = {\n        name: 'cat3',\n        articles: [data.articles[0].id]\n      };\n      const {\n        body\n      } = await rq({\n        url: '/categories',\n        method: 'POST',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['articles']\n        }\n      });\n      data.categories.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(Array.isArray(body.data.attributes.articles.data)).toBeTruthy();\n      expect(body.data.attributes.articles.data.length).toBe(1);\n      expect(body.data.attributes.name).toBe(entry.name);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Get article1 with cat3",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 450,
                "column": 32
            },
            "line": 450,
            "code": "    test('Get article1 with cat3', async () => {\n      const {\n        body\n      } = await rq({\n        url: `/articles/${data.articles[0].id}`,\n        method: 'GET',\n        qs: {\n          populate: ['category']\n        }\n      });\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.category.data.id).toBe(data.categories[2].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Get article2 with cat2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 463,
                "column": 32
            },
            "line": 463,
            "code": "    test('Get article2 with cat2', async () => {\n      const {\n        body\n      } = await rq({\n        url: `/articles/${data.articles[1].id}`,\n        method: 'GET',\n        qs: {\n          populate: ['category']\n        }\n      });\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.category.data.id).toBe(data.categories[1].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Get cat1 without relations",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 476,
                "column": 36
            },
            "line": 476,
            "code": "    test('Get cat1 without relations', async () => {\n      const {\n        body\n      } = await rq({\n        url: `/categories/${data.categories[0].id}`,\n        method: 'GET',\n        qs: {\n          populate: ['articles']\n        }\n      });\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.articles.data.length).toBe(0);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Get cat2 with article2",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 489,
                "column": 32
            },
            "line": 489,
            "code": "    test('Get cat2 with article2', async () => {\n      const {\n        body\n      } = await rq({\n        url: `/categories/${data.categories[1].id}`,\n        method: 'GET',\n        qs: {\n          populate: ['articles']\n        }\n      });\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.articles.data.length).toBe(1);\n      expect(body.data.attributes.articles.data[0].id).toBe(data.articles[1].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Get cat3 with article1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToMany - manyToOne relation (article - category) with Content Manager"
            ],
            "updatePoint": {
                "line": 503,
                "column": 32
            },
            "line": 503,
            "code": "    test('Get cat3 with article1', async () => {\n      const {\n        body\n      } = await rq({\n        url: `/categories/${data.categories[2].id}`,\n        method: 'GET',\n        qs: {\n          populate: ['articles']\n        }\n      });\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.articles.data.length).toBe(1);\n      expect(body.data.attributes.articles.data[0].id).toBe(data.articles[0].id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create ref1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToOne relation (article - reference) with Content Manager"
            ],
            "updatePoint": {
                "line": 530,
                "column": 21
            },
            "line": 530,
            "code": "    test('Create ref1', async () => {\n      const {\n        body\n      } = await rq({\n        url: '/references',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'ref1'\n          }\n        }\n      });\n      data.references.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.name).toBe('ref1');\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToOne relation (article - reference) with Content Manager"
            ],
            "updatePoint": {
                "line": 546,
                "column": 25
            },
            "line": 546,
            "code": "    test('Create article1', async () => {\n      const entry = {\n        title: 'Article 1',\n        content: 'Content 1'\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update article1 with ref1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToOne relation (article - reference) with Content Manager"
            ],
            "updatePoint": {
                "line": 565,
                "column": 35
            },
            "line": 565,
            "code": "    test('Update article1 with ref1', async () => {\n      const {\n        id,\n        attributes\n      } = data.articles[0];\n      const entry = Object.assign({}, attributes, {\n        reference: data.references[0].id\n      });\n      cleanDate(entry);\n      const {\n        body\n      } = await rq({\n        url: `/articles/${id}`,\n        method: 'PUT',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['reference']\n        }\n      });\n      data.articles[0] = body.data;\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(body.data.attributes.reference.data.id).toBe(entry.reference);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create article2 with ref1",
            "suites": [
                "Create Strapi API End to End",
                "Test oneToOne relation (article - reference) with Content Manager"
            ],
            "updatePoint": {
                "line": 592,
                "column": 35
            },
            "line": 592,
            "code": "    test('Create article2 with ref1', async () => {\n      const entry = {\n        title: 'Article 2',\n        content: 'Content 2',\n        reference: data.references[0].id\n      };\n      const {\n        body\n      } = await rq({\n        url: '/articles',\n        method: 'POST',\n        body: {\n          data: entry\n        },\n        qs: {\n          populate: ['reference']\n        }\n      });\n      data.articles.push(body.data);\n      expect(body.data.id).toBeDefined();\n      expect(body.data.attributes.title).toBe(entry.title);\n      expect(body.data.attributes.content).toBe(entry.content);\n      expect(body.data.attributes.reference.data.id).toBe(entry.reference);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Attach Tag to a Reference",
            "suites": [
                "Create Strapi API End to End",
                "Test oneWay relation (reference - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 629,
                "column": 35
            },
            "line": 629,
            "code": "    test('Attach Tag to a Reference', async () => {\n      const {\n        body: {\n          data: createdTag\n        }\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag111'\n          }\n        }\n      });\n      data.tags.push(createdTag);\n      const {\n        body: {\n          data: createdReference\n        }\n      } = await rq({\n        url: '/references',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'cat111',\n            tag: createdTag.id\n          }\n        },\n        qs: {\n          populate: ['tag']\n        }\n      });\n      data.references.push(createdReference);\n      expect(createdReference.attributes.tag.data.id).toBe(createdTag.id);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Detach Tag from a Reference",
            "suites": [
                "Create Strapi API End to End",
                "Test oneWay relation (reference - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 664,
                "column": 37
            },
            "line": 664,
            "code": "    test('Detach Tag from a Reference', async () => {\n      const {\n        body: {\n          data: createdTag\n        }\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag111'\n          }\n        }\n      });\n      data.tags.push(createdTag);\n      const {\n        body: {\n          data: createdReference\n        }\n      } = await rq({\n        url: '/references',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'cat111',\n            tag: createdTag.id\n          }\n        },\n        qs: {\n          populate: ['tag']\n        }\n      });\n      data.references.push(createdReference);\n      expect(createdReference.attributes.tag.data.id).toBe(createdTag.id);\n      const {\n        body: {\n          data: updatedReference\n        }\n      } = await rq({\n        url: `/references/${createdReference.id}`,\n        method: 'PUT',\n        body: {\n          data: {\n            tag: null\n          }\n        },\n        qs: {\n          populate: ['tag']\n        }\n      });\n      expect(updatedReference.attributes.tag.data).toBe(null);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete Tag so the relation in the Reference side should be removed",
            "suites": [
                "Create Strapi API End to End",
                "Test oneWay relation (reference - tag) with Content Manager"
            ],
            "updatePoint": {
                "line": 716,
                "column": 76
            },
            "line": 716,
            "code": "    test('Delete Tag so the relation in the Reference side should be removed', async () => {\n      const {\n        body: {\n          data: createdTag\n        }\n      } = await rq({\n        url: '/tags',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'tag111'\n          }\n        }\n      });\n      data.tags.push(createdTag);\n      const {\n        body: {\n          data: createdReference\n        }\n      } = await rq({\n        url: '/references',\n        method: 'POST',\n        body: {\n          data: {\n            name: 'cat111',\n            tag: createdTag.id\n          }\n        },\n        qs: {\n          populate: ['tag']\n        }\n      });\n      data.references.push(createdReference);\n      await rq({\n        url: `/tags/${createdTag.id}`,\n        method: 'DELETE'\n      });\n      const {\n        body: {\n          data: foundReference\n        }\n      } = await rq({\n        url: `/references/${createdReference.id}`,\n        method: 'GET',\n        qs: {\n          populate: ['tag']\n        }\n      });\n      expect(foundReference.attributes.tag.data).toBe(null);\n    });",
            "file": "endpoint.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should be the default filter",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter equals"
            ],
            "updatePoint": {
                "line": 112,
                "column": 40
            },
            "line": 112,
            "code": "      test('Should be the default filter', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: 'Product 1'\n            }\n          }\n        });\n        expect(res.body.data.length).toBe(1);\n        expect(res.body.data[0]).toMatchObject(data.product[0]);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should be usable with equal suffix",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter equals"
            ],
            "updatePoint": {
                "line": 125,
                "column": 46
            },
            "line": 125,
            "code": "      test('Should be usable with equal suffix', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $eq: 'Product 1'\n              }\n            }\n          }\n        });\n        expect(res.body.data.length).toBe(1);\n        expect(res.body.data[0]).toMatchObject(data.product[0]);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an empty array when no match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter equals"
            ],
            "updatePoint": {
                "line": 140,
                "column": 54
            },
            "line": 140,
            "code": "      test('Should return an empty array when no match', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $eq: 'Product non existant'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual([]);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an array with matching entities",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not equals"
            ],
            "updatePoint": {
                "line": 156,
                "column": 57
            },
            "line": 156,
            "code": "      test('Should return an array with matching entities', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $ne: 'Non existent product '\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining(data.product.map(o => expect.objectContaining(o))));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an empty array when no match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not equals"
            ],
            "updatePoint": {
                "line": 170,
                "column": 54
            },
            "line": 170,
            "code": "      test('Should return an empty array when no match', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $ne: 'Product 1'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return only matching items",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter null"
            ],
            "updatePoint": {
                "line": 186,
                "column": 45
            },
            "line": 186,
            "code": "      test('Should return only matching items', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $null: true\n              }\n            }\n          }\n        });\n        const matching = data.product.filter(x => x.attributes.price === null);\n        res.body.data.sort((a, b) => a.id > b.id ? 1 : -1);\n        expect(res.body.data.length).toBe(matching.length);\n        expect(res.body.data).toEqual(expect.arrayContaining(matching));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return three matches",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter null"
            ],
            "updatePoint": {
                "line": 203,
                "column": 39
            },
            "line": 203,
            "code": "      test('Should return three matches', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $notNull: true\n              }\n            }\n          }\n        });\n        expect(res.body.data.length).toBe(3);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should match with insensitive case",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter contains insensitive"
            ],
            "updatePoint": {
                "line": 219,
                "column": 46
            },
            "line": 219,
            "code": "      test('Should match with insensitive case', async () => {\n        const res1 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $containsi: 'product'\n              }\n            }\n          }\n        });\n        expect(res1.body.data).toEqual(expect.arrayContaining(data.product.map(o => expect.objectContaining(o))));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $containsi: 'PrOdUct'\n              }\n            }\n          }\n        });\n        expect(res1.body.data).toEqual(res2.body.data);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an empty array on no insensitive case match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter contains insensitive"
            ],
            "updatePoint": {
                "line": 245,
                "column": 69
            },
            "line": 245,
            "code": "      test('Should return an empty array on no insensitive case match', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $containsi: 'production'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual([]);\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $containsi: 'ProdUctIon'\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(res.body.data);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an array of entities on match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not contains insensitive"
            ],
            "updatePoint": {
                "line": 273,
                "column": 55
            },
            "line": 273,
            "code": "      test('Should return an array of entities on match', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $notContainsi: 'production'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining(data.product.map(o => expect.objectContaining(o))));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $notContainsi: 'ProdUctIon'\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(res.body.data);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an empty array when no match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not contains insensitive"
            ],
            "updatePoint": {
                "line": 299,
                "column": 54
            },
            "line": 299,
            "code": "      test('Should return an empty array when no match', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $notContainsi: 'product'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual([]);\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $notContainsi: 'ProDuCt'\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(res.body.data);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return empty if the case does not match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter contains sensitive"
            ],
            "line": 328,
            "code": "      test.skip('Should return empty if the case does not match', async () => {",
            "file": "filtering.test.e2e.js",
            "skipped": true,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return the entities if the case matches",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter contains sensitive"
            ],
            "updatePoint": {
                "line": 342,
                "column": 58
            },
            "line": 342,
            "code": "      test('Should return the entities if the case matches', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $contains: 'Product'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return the entities if the case does not match",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not contains sensitive"
            ],
            "line": 359,
            "code": "      test.skip('Should return the entities if the case does not match', async () => {",
            "file": "filtering.test.e2e.js",
            "skipped": true,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an empty array if the case matches",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not contains sensitive"
            ],
            "updatePoint": {
                "line": 373,
                "column": 60
            },
            "line": 373,
            "code": "      test('Should return an empty array if the case matches', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              name: {\n                $notContains: 'Product'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual([]);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return the Product with a single value",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter in"
            ],
            "updatePoint": {
                "line": 389,
                "column": 57
            },
            "line": 389,
            "code": "      test('Should return the Product with a single value', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $in: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return the Product with an array of values",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter in"
            ],
            "updatePoint": {
                "line": 403,
                "column": 61
            },
            "line": 403,
            "code": "      test('Should return the Product with an array of values', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $in: [42, 12]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return a, empty array if no values are matching",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter in"
            ],
            "updatePoint": {
                "line": 417,
                "column": 66
            },
            "line": 417,
            "code": "      test('Should return a, empty array if no values are matching', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $in: [43, 12]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual([]);\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an array without the values matching when a single value is provided",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not in"
            ],
            "updatePoint": {
                "line": 433,
                "column": 94
            },
            "line": 433,
            "code": "      test('Should return an array without the values matching when a single value is provided', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $notIn: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an array without the values matching when an array of values is provided",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not in"
            ],
            "updatePoint": {
                "line": 447,
                "column": 98
            },
            "line": 447,
            "code": "      test('Should return an array without the values matching when an array of values is provided', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $notIn: [42, 12]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should return an array with values that do not match the filter",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter not in"
            ],
            "updatePoint": {
                "line": 461,
                "column": 75
            },
            "line": 461,
            "code": "      test('Should return an array with values that do not match the filter', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $notIn: [43, 12]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should match values only greater than",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than"
            ],
            "updatePoint": {
                "line": 477,
                "column": 49
            },
            "line": 477,
            "code": "      test('Should match values only greater than', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gt: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gt: 40\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with integers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than"
            ],
            "updatePoint": {
                "line": 503,
                "column": 37
            },
            "line": 503,
            "code": "      test('Should work with integers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gt: 40\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with float",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than"
            ],
            "updatePoint": {
                "line": 517,
                "column": 34
            },
            "line": 517,
            "code": "      test('Should work with float', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $gt: 9.3\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with decimal",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than"
            ],
            "updatePoint": {
                "line": 531,
                "column": 36
            },
            "line": 531,
            "code": "      test('Should work with decimal', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              decimal_field: {\n                $gt: 1.23\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with bigintegers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than"
            ],
            "updatePoint": {
                "line": 545,
                "column": 40
            },
            "line": 545,
            "code": "      test('Should work with bigintegers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              big_rank: {\n                $gt: 34567891298\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work correclty on equal values",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than or equal"
            ],
            "updatePoint": {
                "line": 561,
                "column": 49
            },
            "line": 561,
            "code": "      test('Should work correclty on equal values', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gte: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gte: 43\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with integers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than or equal"
            ],
            "updatePoint": {
                "line": 587,
                "column": 37
            },
            "line": 587,
            "code": "      test('Should work with integers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $gte: 40\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with float",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than or equal"
            ],
            "updatePoint": {
                "line": 601,
                "column": 34
            },
            "line": 601,
            "code": "      test('Should work with float', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $gte: 10.99\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with decimal",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than or equal"
            ],
            "updatePoint": {
                "line": 615,
                "column": 36
            },
            "line": 615,
            "code": "      test('Should work with decimal', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              decimal_field: {\n                $gte: 42.43\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with bigintegers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter greater than or equal"
            ],
            "updatePoint": {
                "line": 629,
                "column": 40
            },
            "line": 629,
            "code": "      test('Should work with bigintegers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              big_rank: {\n                $gte: '345678912983'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should match values only less than",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than"
            ],
            "updatePoint": {
                "line": 645,
                "column": 46
            },
            "line": 645,
            "code": "      test('Should match values only less than', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lt: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[0]]));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lt: 43\n              }\n            }\n          }\n        });\n        expect(res2.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with integers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than"
            ],
            "updatePoint": {
                "line": 671,
                "column": 37
            },
            "line": 671,
            "code": "      test('Should work with integers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lt: 45\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with float",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than"
            ],
            "updatePoint": {
                "line": 685,
                "column": 34
            },
            "line": 685,
            "code": "      test('Should work with float', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $lt: 21.3\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with decimal",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than"
            ],
            "updatePoint": {
                "line": 699,
                "column": 36
            },
            "line": 699,
            "code": "      test('Should work with decimal', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              decimal_field: {\n                $lt: 46.23\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with bigintegers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than"
            ],
            "updatePoint": {
                "line": 713,
                "column": 40
            },
            "line": 713,
            "code": "      test('Should work with bigintegers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              big_rank: {\n                $lt: 3456789129812\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work correclty on equal values",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than or equal"
            ],
            "updatePoint": {
                "line": 729,
                "column": 49
            },
            "line": 729,
            "code": "      test('Should work correclty on equal values', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lte: 52\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n        const res2 = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lte: 21\n              }\n            }\n          }\n        });\n        expect(res2.body).toEqual(expect.not.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with integers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than or equal"
            ],
            "updatePoint": {
                "line": 755,
                "column": 37
            },
            "line": 755,
            "code": "      test('Should work with integers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              rank: {\n                $lte: 42\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with float",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than or equal"
            ],
            "updatePoint": {
                "line": 769,
                "column": 34
            },
            "line": 769,
            "code": "      test('Should work with float', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                $lte: 10.99\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with decimal",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than or equal"
            ],
            "updatePoint": {
                "line": 783,
                "column": 36
            },
            "line": 783,
            "code": "      test('Should work with decimal', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              decimal_field: {\n                $lte: 42.43\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Should work with bigintegers",
            "suites": [
                "Filtering API",
                "Basic filters",
                "Filter less than or equal"
            ],
            "updatePoint": {
                "line": 797,
                "column": 40
            },
            "line": 797,
            "code": "      test('Should work with bigintegers', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              big_rank: {\n                $lte: '345678912983'\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Supports simple or",
            "suites": [
                "Filtering API",
                "Or filtering",
                "$or filter"
            ],
            "updatePoint": {
                "line": 815,
                "column": 30
            },
            "line": 815,
            "code": "      test('Supports simple or', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              $or: [{\n                rank: 42\n              }, {\n                rank: 82\n              }]\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[1]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Supports simple or on different fields",
            "suites": [
                "Filtering API",
                "Or filtering",
                "$or filter"
            ],
            "updatePoint": {
                "line": 831,
                "column": 50
            },
            "line": 831,
            "code": "      test('Supports simple or on different fields', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              $or: [{\n                rank: 42\n              }, {\n                price: {\n                  $gt: 28\n                }\n              }]\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[1], data.product[2]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Supports or with nested and",
            "suites": [
                "Filtering API",
                "Or filtering",
                "$or filter"
            ],
            "updatePoint": {
                "line": 849,
                "column": 39
            },
            "line": 849,
            "code": "      test('Supports or with nested and', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              $or: [{\n                rank: 42\n              }, [{\n                price: {\n                  $gt: 28\n                }\n              }, {\n                rank: 91\n              }]]\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[2]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Supports or with nested or",
            "suites": [
                "Filtering API",
                "Or filtering",
                "$or filter"
            ],
            "updatePoint": {
                "line": 869,
                "column": 38
            },
            "line": 869,
            "code": "      test('Supports or with nested or', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              $or: [{\n                rank: 42\n              }, [{\n                price: {\n                  $gt: 28\n                }\n              }, {\n                $or: [{\n                  rank: 91\n                }]\n              }]]\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[2]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter equals",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 894,
                "column": 23
            },
            "line": 894,
            "code": "    test('Filter equals', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: [42, 43]\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter not equals",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 906,
                "column": 27
            },
            "line": 906,
            "code": "    test('Filter not equals', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $ne: [41, 43]\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter contains insensitive",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 920,
                "column": 37
            },
            "line": 920,
            "code": "    test('Filter contains insensitive', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $containsi: ['Product', '1']\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter not contains insensitive",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 934,
                "column": 41
            },
            "line": 934,
            "code": "    test('Filter not contains insensitive', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $notContainsi: ['Product', 'Non existent']\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter contains sensitive",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 948,
                "column": 35
            },
            "line": 948,
            "code": "    test('Filter contains sensitive', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $contains: ['Product', 'Non existent']\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter not contains sensitive",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 962,
                "column": 39
            },
            "line": 962,
            "code": "    test('Filter not contains sensitive', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $notContains: ['product', 'Non existent']\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter greater than",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 976,
                "column": 29
            },
            "line": 976,
            "code": "    test('Filter greater than', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $gt: [12, 56]\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter greater than or equal",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 990,
                "column": 38
            },
            "line": 990,
            "code": "    test('Filter greater than or equal', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $gte: [42, 56]\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter less than",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 1004,
                "column": 26
            },
            "line": 1004,
            "code": "    test('Filter less than', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $lt: [56, 12]\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Filter less than or equal",
            "suites": [
                "Filtering API",
                "Implict or"
            ],
            "updatePoint": {
                "line": 1018,
                "column": 35
            },
            "line": 1018,
            "code": "    test('Filter less than or equal', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $lte: [12, 42]\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Greater than and less than at the same time",
            "suites": [
                "Filtering API",
                "Complexe filtering"
            ],
            "updatePoint": {
                "line": 1034,
                "column": 53
            },
            "line": 1034,
            "code": "    test('Greater than and less than at the same time', async () => {\n      let res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $lte: 42,\n              $gte: 42\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $lt: 43,\n              $gt: 41\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            rank: {\n              $lt: 43,\n              $gt: 431\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual([]);\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Contains and Not contains on same column",
            "suites": [
                "Filtering API",
                "Complexe filtering"
            ],
            "updatePoint": {
                "line": 1075,
                "column": 50
            },
            "line": 1075,
            "code": "    test('Contains and Not contains on same column', async () => {\n      let res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $contains: 'Product',\n              $notContains: '1'\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining(data.product.slice(1)));\n      res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $contains: 'Product 1',\n              $notContains: ['2', '3']\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.not.arrayContaining([data.product[1], data.product[2]]));\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $contains: '2',\n              $notContains: 'Product'\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual([]);\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Combined filters",
            "suites": [
                "Filtering API",
                "Complexe filtering"
            ],
            "updatePoint": {
                "line": 1117,
                "column": 26
            },
            "line": 1117,
            "code": "    test('Combined filters', async () => {\n      let res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          filters: {\n            name: {\n              $contains: 'Product'\n            },\n            rank: {\n              $lt: 45\n            }\n          }\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Default sorting is asc",
            "suites": [
                "Filtering API",
                "Sorting"
            ],
            "updatePoint": {
                "line": 1136,
                "column": 32
            },
            "line": 1136,
            "code": "    test('Default sorting is asc', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          sort: 'rank'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining(data.product.slice(0).sort((a, b) => a.attributes.rank - b.attributes.rank)));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Simple sorting",
            "suites": [
                "Filtering API",
                "Sorting"
            ],
            "updatePoint": {
                "line": 1146,
                "column": 24
            },
            "line": 1146,
            "code": "    test('Simple sorting', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          sort: 'rank:asc'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining(data.product.slice(0).sort((a, b) => a.attributes.rank - b.attributes.rank)));\n      const res2 = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          sort: 'rank:desc'\n        }\n      });\n      expect(res2.body.data).toEqual(expect.arrayContaining(data.product.slice(0).sort((a, b) => b.attributes.rank - a.attributes.rank)));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Multi column sorting",
            "suites": [
                "Filtering API",
                "Sorting"
            ],
            "updatePoint": {
                "line": 1164,
                "column": 30
            },
            "line": 1164,
            "code": "    test('Multi column sorting', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          sort: 'price:asc,rank:desc'\n        }\n      });\n      [data.product[3], data.product[0], data.product[2], data.product[1]].forEach(expectedPost => {\n        expect(res.body.data).toEqual(expect.arrayContaining([expectedPost]));\n      });\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Limit",
            "suites": [
                "Filtering API",
                "Limit and offset"
            ],
            "updatePoint": {
                "line": 1178,
                "column": 15
            },
            "line": 1178,
            "code": "    test('Limit', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          pagination: {\n            limit: 1\n          },\n          sort: 'rank:asc'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Limit with sorting",
            "suites": [
                "Filtering API",
                "Limit and offset"
            ],
            "updatePoint": {
                "line": 1191,
                "column": 28
            },
            "line": 1191,
            "code": "    test('Limit with sorting', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          pagination: {\n            limit: 1\n          },\n          sort: 'rank:desc'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[data.product.length - 1]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Offset",
            "suites": [
                "Filtering API",
                "Limit and offset"
            ],
            "updatePoint": {
                "line": 1204,
                "column": 16
            },
            "line": 1204,
            "code": "    test('Offset', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          pagination: {\n            start: 1\n          },\n          sort: 'rank:asc'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining(data.product.slice(1)));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Offset with limit",
            "suites": [
                "Filtering API",
                "Limit and offset"
            ],
            "updatePoint": {
                "line": 1217,
                "column": 27
            },
            "line": 1217,
            "code": "    test('Offset with limit', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          pagination: {\n            limit: 1,\n            start: 1\n          },\n          sort: 'rank:asc'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining(data.product.slice(1, 2)));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cyrillic query",
            "suites": [
                "Filtering API",
                "Text query"
            ],
            "updatePoint": {
                "line": 1233,
                "column": 24
            },
            "line": 1233,
            "code": "    test('Cyrillic query', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          _q: 'Опис'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[4]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Multi word query",
            "suites": [
                "Filtering API",
                "Text query"
            ],
            "updatePoint": {
                "line": 1243,
                "column": 26
            },
            "line": 1243,
            "code": "    test('Multi word query', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          _q: 'Product description'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Multi word cyrillic query",
            "suites": [
                "Filtering API",
                "Text query"
            ],
            "updatePoint": {
                "line": 1253,
                "column": 35
            },
            "line": 1253,
            "code": "    test('Multi word cyrillic query', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/products',\n        qs: {\n          _q: 'Опис на продукт'\n        }\n      });\n      expect(res.body.data).toEqual(expect.arrayContaining([data.product[4]]));\n    });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1266,
            "code": "      test.each(['1', 'true', true, 't'])('Cast truthy booleans %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: val\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[2], data.product[4]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans nested %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1278,
            "code": "      test.each(['1', 'true', true, 't'])('Cast truthy booleans nested %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: {\n                $eq: val\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[2], data.product[4]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans in arrays %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1292,
            "code": "      test.each(['1', 'true', true, 't'])('Cast truthy booleans in arrays %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: {\n                $in: [val]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0], data.product[2], data.product[4]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1306,
            "code": "      test.each(['0', 'false', false, 'f'])('Cast truthy booleans %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: val\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[1], data.product[3]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans nested %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1318,
            "code": "      test.each(['0', 'false', false, 'f'])('Cast truthy booleans nested %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: {\n                $eq: val\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[1], data.product[3]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast truthy booleans in arrays %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Booleans"
            ],
            "line": 1332,
            "code": "      test.each(['0', 'false', false, 'f'])('Cast truthy booleans in arrays %s', async val => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              isChecked: {\n                $in: [val]\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[1], data.product[3]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast number",
            "suites": [
                "Filtering API",
                "Type casting",
                "Numbers"
            ],
            "updatePoint": {
                "line": 1348,
                "column": 23
            },
            "line": 1348,
            "code": "      test('Cast number', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: '10.99'\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining([data.product[0]]));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cast number in operator %s - %s",
            "suites": [
                "Filtering API",
                "Type casting",
                "Numbers"
            ],
            "line": 1360,
            "code": "      test.each([['$lte', '10.99', [0]], ['$lt', '12', [0]], ['$gte', '28.31', [1, 2]], ['$gt', '28.30', [1, 2]], ['$eq', '10.99', [0]], ['$ne', '10.99', [1, 2]], ['$not', '10.99', [1, 2]], ['$in', ['10.99', '28.31'], [0, 1, 2]], ['$in', '10.99', [0]], ['$notIn', ['10.99', '28.31'], []]])('Cast number in operator %s - %s', async (operator, val, expectedIds) => {\n        const res = await rq({\n          method: 'GET',\n          url: '/products',\n          qs: {\n            filters: {\n              price: {\n                [operator]: val\n              }\n            }\n          }\n        });\n        expect(res.body.data).toEqual(expect.arrayContaining(expectedIds.map(id => data.product[id])));\n      });",
            "file": "filtering.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "%p",
            "suites": [
                "Migration - draft and publish"
            ],
            "line": 61,
            "code": "  describe.each([['without table modifications', {}, {}], ['with table modifications', {\n    town: {\n      type: 'string'\n    }\n  }, {\n    color: {\n      type: 'string'\n    }\n  }]])('%p', (testName, tableModification1, tableModification2) => {\n    beforeAll(async () => {\n      builder = createTestBuilder();\n      await builder.addContentType(dogModel).addFixtures(dogModel.singularName, dogs).build();\n      strapi = await createStrapiInstance();\n      rq = await createAuthRequest({\n        strapi\n      });\n      data.dogs = sortDogs(await builder.sanitizedFixturesFor(dogModel.singularName, strapi));\n    });\n    afterAll(async () => {\n      await strapi.destroy();\n      await builder.cleanup();\n    });\n    describe('Enabling D&P on a content-type', () => {\n      test('No publishedAt before enabling the feature', async () => {\n        let {\n          body\n        } = await rq({\n          url: '/content-manager/collection-types/api::dog.dog',\n          method: 'GET'\n        });\n        expect(body.results.length).toBe(2);\n        const sortedBody = sortDogs(body.results);\n        sortedBody.forEach((dog, index) => {\n          expect(dog).toMatchObject(data.dogs[index]);\n          expect(dog.publishedAt).toBeUndefined();\n        });\n      });\n      test('Published_at is equal to created_at after enabling the feature', async () => {\n        const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n          strapi\n        });\n        await modelsUtils.modifyContentType({ ...schema,\n          attributes: _.merge(schema.attributes, tableModification1),\n          draftAndPublish: true\n        }, {\n          strapi\n        });\n        await restart();\n        let {\n          body\n        } = await rq({\n          method: 'GET',\n          url: '/content-manager/collection-types/api::dog.dog'\n        });\n        expect(body.results.length).toBe(2);\n        const sortedBody = sortDogs(body.results);\n        sortedBody.forEach((dog, index) => {\n          expect(dog).toMatchObject(data.dogs[index]);\n          expect(dog.publishedAt).toBe(dog.createdAt || dog.created_at);\n          expect(!isNaN(new Date(dog.publishedAt).valueOf())).toBe(true);\n        });\n        data.dogs = sortedBody;\n      });\n    });\n    describe('Disabling D&P on a content-type', () => {\n      test('No publishedAt after disabling the feature + draft removed', async () => {\n        const res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/${data.dogs[1].id}/actions/unpublish`\n        });\n        data.dogs[1] = res.body;\n        const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n          strapi\n        });\n        await modelsUtils.modifyContentType({ ...schema,\n          draftAndPublish: false,\n          attributes: _.merge(schema.attributes, tableModification2)\n        }, {\n          strapi\n        });\n        await restart(); // drafts should have been deleted with the migration, so we remove them\n\n        data.dogs = data.dogs.filter(dog => !_.isNil(dog.publishedAt));\n        let {\n          body\n        } = await rq({\n          url: '/content-manager/collection-types/api::dog.dog',\n          method: 'GET'\n        });\n        expect(body.results.length).toBe(1);\n        expect(body.results[0]).toMatchObject(_.pick(data.dogs[0], ['name']));\n        expect(body.results[0].publishedAt).toBeUndefined();\n      });\n      test('Unique constraint is kept after disabling the feature', async () => {\n        const dogToCreate = {\n          code: 'sameCode'\n        };\n        let res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/`,\n          body: dogToCreate\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject(dogToCreate);\n        data.dogs.push(res.body);\n        res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/`,\n          body: dogToCreate\n        });\n        expect(res.statusCode).toBe(400);\n      });\n    });\n  });",
            "file": "migrations/migration-draft-publish.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "No publishedAt before enabling the feature",
            "suites": [
                "Migration - draft and publish",
                "Enabling D&P on a content-type"
            ],
            "updatePoint": {
                "line": 84,
                "column": 54
            },
            "line": 84,
            "code": "      test('No publishedAt before enabling the feature', async () => {\n        let {\n          body\n        } = await rq({\n          url: '/content-manager/collection-types/api::dog.dog',\n          method: 'GET'\n        });\n        expect(body.results.length).toBe(2);\n        const sortedBody = sortDogs(body.results);\n        sortedBody.forEach((dog, index) => {\n          expect(dog).toMatchObject(data.dogs[index]);\n          expect(dog.publishedAt).toBeUndefined();\n        });\n      });",
            "file": "migrations/migration-draft-publish.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Published_at is equal to created_at after enabling the feature",
            "suites": [
                "Migration - draft and publish",
                "Enabling D&P on a content-type"
            ],
            "updatePoint": {
                "line": 98,
                "column": 74
            },
            "line": 98,
            "code": "      test('Published_at is equal to created_at after enabling the feature', async () => {\n        const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n          strapi\n        });\n        await modelsUtils.modifyContentType({ ...schema,\n          attributes: _.merge(schema.attributes, tableModification1),\n          draftAndPublish: true\n        }, {\n          strapi\n        });\n        await restart();\n        let {\n          body\n        } = await rq({\n          method: 'GET',\n          url: '/content-manager/collection-types/api::dog.dog'\n        });\n        expect(body.results.length).toBe(2);\n        const sortedBody = sortDogs(body.results);\n        sortedBody.forEach((dog, index) => {\n          expect(dog).toMatchObject(data.dogs[index]);\n          expect(dog.publishedAt).toBe(dog.createdAt || dog.created_at);\n          expect(!isNaN(new Date(dog.publishedAt).valueOf())).toBe(true);\n        });\n        data.dogs = sortedBody;\n      });",
            "file": "migrations/migration-draft-publish.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "No publishedAt after disabling the feature + draft removed",
            "suites": [
                "Migration - draft and publish",
                "Disabling D&P on a content-type"
            ],
            "updatePoint": {
                "line": 126,
                "column": 70
            },
            "line": 126,
            "code": "      test('No publishedAt after disabling the feature + draft removed', async () => {\n        const res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/${data.dogs[1].id}/actions/unpublish`\n        });\n        data.dogs[1] = res.body;\n        const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n          strapi\n        });\n        await modelsUtils.modifyContentType({ ...schema,\n          draftAndPublish: false,\n          attributes: _.merge(schema.attributes, tableModification2)\n        }, {\n          strapi\n        });\n        await restart(); // drafts should have been deleted with the migration, so we remove them\n\n        data.dogs = data.dogs.filter(dog => !_.isNil(dog.publishedAt));\n        let {\n          body\n        } = await rq({\n          url: '/content-manager/collection-types/api::dog.dog',\n          method: 'GET'\n        });\n        expect(body.results.length).toBe(1);\n        expect(body.results[0]).toMatchObject(_.pick(data.dogs[0], ['name']));\n        expect(body.results[0].publishedAt).toBeUndefined();\n      });",
            "file": "migrations/migration-draft-publish.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Unique constraint is kept after disabling the feature",
            "suites": [
                "Migration - draft and publish",
                "Disabling D&P on a content-type"
            ],
            "updatePoint": {
                "line": 154,
                "column": 65
            },
            "line": 154,
            "code": "      test('Unique constraint is kept after disabling the feature', async () => {\n        const dogToCreate = {\n          code: 'sameCode'\n        };\n        let res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/`,\n          body: dogToCreate\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject(dogToCreate);\n        data.dogs.push(res.body);\n        res = await rq({\n          method: 'POST',\n          url: `/content-manager/collection-types/api::dog.dog/`,\n          body: dogToCreate\n        });\n        expect(res.statusCode).toBe(400);\n      });",
            "file": "migrations/migration-draft-publish.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can be null before migration",
            "suites": [
                "Migration - required attribute",
                "Required: false -> true"
            ],
            "updatePoint": {
                "line": 66,
                "column": 38
            },
            "line": 66,
            "code": "    test('Can be null before migration', async () => {\n      let {\n        body\n      } = await rq({\n        method: 'GET',\n        url: '/content-manager/collection-types/api::dog.dog'\n      });\n      expect(body.results.length).toBe(2);\n      const dogWithNameNull = body.results.find(dog => dog.name === null);\n      expect(dogWithNameNull).toBeTruthy();\n    });",
            "file": "migrations/migration-required-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create an entry with null after migration",
            "suites": [
                "Migration - required attribute",
                "Required: false -> true"
            ],
            "updatePoint": {
                "line": 77,
                "column": 58
            },
            "line": 77,
            "code": "    test('Cannot create an entry with null after migration', async () => {\n      // remove null values otherwise the migration would fail\n      const {\n        body\n      } = await rq({\n        method: 'PUT',\n        url: `/content-manager/collection-types/api::dog.dog/${data.dogs[0].id}`,\n        body: {\n          name: 'Nelson'\n        }\n      });\n      data.dogs[0] = body; // migration\n\n      const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n        strapi\n      });\n      schema.attributes.name.required = true;\n      await modelsUtils.modifyContentType(schema, {\n        strapi\n      });\n      await restart(); // Try to create an entry with null\n\n      const res = await rq({\n        method: 'POST',\n        url: '/content-manager/collection-types/api::dog.dog',\n        body: {\n          name: null\n        }\n      });\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          details: {\n            errors: [{\n              message: 'name must be a `string` type, but the final value was: `null`.',\n              name: 'ValidationError',\n              path: ['name']\n            }]\n          },\n          message: 'name must be a `string` type, but the final value was: `null`.',\n          name: 'ValidationError',\n          status: 400\n        }\n      });\n    });",
            "file": "migrations/migration-required-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can create an entry with null after migration",
            "suites": [
                "Migration - required attribute",
                "Required: true -> false"
            ],
            "updatePoint": {
                "line": 124,
                "column": 55
            },
            "line": 124,
            "code": "    test('Can create an entry with null after migration', async () => {\n      // migration\n      const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n        strapi\n      });\n      schema.attributes.name.required = false;\n      await modelsUtils.modifyContentType(schema, {\n        strapi\n      });\n      await restart(); // Try to create an entry with null\n\n      const res = await rq({\n        url: `/content-manager/collection-types/api::dog.dog`,\n        method: 'POST',\n        body: {\n          name: null\n        }\n      });\n      expect(res.body).toMatchObject({\n        name: null\n      });\n      data.dogs.push(res.body);\n    });",
            "file": "migrations/migration-required-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can have duplicates before migration",
            "suites": [
                "Migration - unique attribute",
                "Unique: false -> true"
            ],
            "updatePoint": {
                "line": 66,
                "column": 46
            },
            "line": 66,
            "code": "    test('Can have duplicates before migration', async () => {\n      let {\n        body\n      } = await rq({\n        url: '/content-manager/collection-types/api::dog.dog',\n        method: 'GET'\n      });\n      expect(body.results.length).toBe(2);\n      expect(body.results[0].name).toEqual(body.results[1].name);\n    });",
            "file": "migrations/migration-unique-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Cannot create a duplicated entry after migration",
            "suites": [
                "Migration - unique attribute",
                "Unique: false -> true"
            ],
            "updatePoint": {
                "line": 76,
                "column": 58
            },
            "line": 76,
            "code": "    test('Cannot create a duplicated entry after migration', async () => {\n      // remove duplicated values otherwise the migration would fail\n      const {\n        body\n      } = await rq({\n        url: `/content-manager/collection-types/api::dog.dog/${data.dogs[0].id}`,\n        method: 'PUT',\n        body: {\n          name: 'Nelson'\n        }\n      });\n      data.dogs[0] = body; // migration\n\n      const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n        strapi\n      });\n      schema.attributes.name.unique = true;\n      await modelsUtils.modifyContentType(schema, {\n        strapi\n      });\n      await restart(); // Try to create a duplicated entry\n\n      const res = await rq({\n        method: 'POST',\n        url: '/content-manager/collection-types/api::dog.dog',\n        body: {\n          name: data.dogs[0].name\n        }\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "migrations/migration-unique-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can create a duplicated entry after migration",
            "suites": [
                "Migration - unique attribute",
                "Unique: true -> false"
            ],
            "updatePoint": {
                "line": 109,
                "column": 55
            },
            "line": 109,
            "code": "    test('Can create a duplicated entry after migration', async () => {\n      // migration\n      const schema = await modelsUtils.getContentTypeSchema(dogModel.singularName, {\n        strapi\n      });\n      schema.attributes.name.unique = false;\n      await modelsUtils.modifyContentType(schema, {\n        strapi\n      });\n      await restart(); // Try to create a duplicated entry\n\n      const res = await rq({\n        url: `/content-manager/collection-types/api::dog.dog`,\n        method: 'POST',\n        body: {\n          name: data.dogs[0].name\n        }\n      });\n      expect(res.body).toMatchObject({\n        name: data.dogs[0].name\n      });\n      data.dogs.push(res.body);\n    });",
            "file": "migrations/migration-unique-attribute.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Mode: \"%s\"",
            "suites": [
                "Publication State"
            ],
            "line": 179,
            "code": "  describe.each(['default', 'live', 'preview'])('Mode: \"%s\"', mode => {\n    describe.each(['country', 'category', 'product'])('For %s', modelName => {\n      const baseUrl = `/${contentTypes[modelName].pluralName}`;\n      const query = getQueryFromMode(mode);\n      test('Can get entries', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: `${baseUrl}${query}`\n        });\n        expect(res.body.data).toHaveLength(lengthFor(modelName, {\n          mode\n        }));\n        expect(res.body.meta.pagination.total).toBe(lengthFor(modelName, {\n          mode\n        }));\n      });\n    });\n  });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "For %s",
            "suites": [
                "Publication State"
            ],
            "line": 180,
            "code": "    describe.each(['country', 'category', 'product'])('For %s', modelName => {\n      const baseUrl = `/${contentTypes[modelName].pluralName}`;\n      const query = getQueryFromMode(mode);\n      test('Can get entries', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: `${baseUrl}${query}`\n        });\n        expect(res.body.data).toHaveLength(lengthFor(modelName, {\n          mode\n        }));\n        expect(res.body.meta.pagination.total).toBe(lengthFor(modelName, {\n          mode\n        }));\n      });\n    });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Can get entries",
            "suites": [
                "Publication State"
            ],
            "updatePoint": {
                "line": 183,
                "column": 27
            },
            "line": 183,
            "code": "      test('Can get entries', async () => {\n        const res = await rq({\n          method: 'GET',\n          url: `${baseUrl}${query}`\n        });\n        expect(res.body.data).toHaveLength(lengthFor(modelName, {\n          mode\n        }));\n        expect(res.body.meta.pagination.total).toBe(lengthFor(modelName, {\n          mode\n        }));\n      });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Payload integrity",
            "suites": [
                "Publication State",
                "Advanced checks",
                "Nested level of relations (live mode)"
            ],
            "updatePoint": {
                "line": 210,
                "column": 29
            },
            "line": 210,
            "code": "      test('Payload integrity', () => {\n        expect(products).toHaveLength(lengthFor(contentTypes.product.singularName));\n      });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Root level",
            "suites": [
                "Publication State",
                "Advanced checks",
                "Nested level of relations (live mode)"
            ],
            "updatePoint": {
                "line": 213,
                "column": 22
            },
            "line": 213,
            "code": "      test('Root level', () => {\n        products.forEach(product => {\n          expect(product.attributes.publishedAt).toBeISODate();\n        });\n      });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "First level (categories) to be published only",
            "suites": [
                "Publication State",
                "Advanced checks",
                "Nested level of relations (live mode)"
            ],
            "updatePoint": {
                "line": 218,
                "column": 57
            },
            "line": 218,
            "code": "      test('First level (categories) to be published only', () => {\n        products.forEach(({\n          attributes\n        }) => {\n          const categories = attributes.categories.data;\n          categories.forEach(category => {\n            expect(category.attributes.publishedAt).toBeISODate();\n          });\n        });\n      });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Second level through component (countries) to be published only",
            "suites": [
                "Publication State",
                "Advanced checks",
                "Nested level of relations (live mode)"
            ],
            "updatePoint": {
                "line": 228,
                "column": 75
            },
            "line": 228,
            "code": "      test('Second level through component (countries) to be published only', () => {\n        products.forEach(({\n          attributes\n        }) => {\n          const countries = attributes.comp.countries.data;\n          countries.forEach(country => {\n            expect(country.attributes.publishedAt).toBeISODate();\n          });\n        });\n      });",
            "file": "publication-state.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search for \"id\"",
            "suites": [
                "Search query",
                "Without filters"
            ],
            "updatePoint": {
                "line": 137,
                "column": 25
            },
            "line": 137,
            "code": "    test('search for \"id\"', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: data.bed[2].id\n        }\n      });\n      expect(res.body.data.length).toBe(1);\n      expect(res.body.data[0]).toMatchObject(transformToRESTResource(data.bed[2]));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search that target column %p",
            "suites": [
                "Search query",
                "Without filters"
            ],
            "line": 148,
            "code": "    test.each(Object.keys(bedFixtures[0]))('search that target column %p', async columnName => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: bedFixtures[0][columnName]\n        }\n      });\n      expect(res.body.data.length).toBe(1);\n      expect(res.body.data[0]).toMatchObject(transformToRESTResource(data.bed[0]));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with an empty query",
            "suites": [
                "Search query",
                "Without filters"
            ],
            "updatePoint": {
                "line": 159,
                "column": 36
            },
            "line": 159,
            "code": "    test('search with an empty query', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: ''\n        }\n      });\n      expect(res.body.data.length).toBe(5);\n      expect(res.body.data).toEqual(expect.arrayContaining(data.bed.map(bed => transformToRESTResource(bed))));\n      expect(res.body.meta).toMatchObject({\n        pagination: {\n          page: 1,\n          pageSize: 25,\n          pageCount: 1,\n          total: 5\n        }\n      });\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with special characters",
            "suites": [
                "Search query",
                "Without filters"
            ],
            "updatePoint": {
                "line": 178,
                "column": 40
            },
            "line": 178,
            "code": "    test('search with special characters', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: data.bed[3].name\n        }\n      });\n      expect(res.body.data.length).toBe(1);\n      expect(res.body.data[0]).toMatchObject(transformToRESTResource(data.bed[3]));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with an empty query & peopleNumber > 0",
            "suites": [
                "Search query",
                "With filters"
            ],
            "updatePoint": {
                "line": 191,
                "column": 55
            },
            "line": 191,
            "code": "    test('search with an empty query & peopleNumber > 0', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: '',\n          filters: {\n            peopleNumber: {\n              $gt: 0\n            }\n          }\n        }\n      });\n      expect(res.body.data.length).toBe(3);\n      const expected = [data.bed[0], data.bed[1], data.bed[4]].map(bed => transformToRESTResource(bed));\n      expect(res.body.data).toEqual(expect.arrayContaining(expected));\n      expect(res.body.meta).toMatchObject({\n        pagination: {\n          page: 1,\n          pageSize: 25,\n          pageCount: 1,\n          total: 3\n        }\n      });\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with an empty query & peopleNumber > 1",
            "suites": [
                "Search query",
                "With filters"
            ],
            "updatePoint": {
                "line": 216,
                "column": 55
            },
            "line": 216,
            "code": "    test('search with an empty query & peopleNumber > 1', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: '',\n          filters: {\n            peopleNumber: {\n              $gt: 1\n            }\n          }\n        }\n      });\n      expect(res.body.data.length).toBe(2);\n      const expected = [data.bed[0], data.bed[4]].map(bed => transformToRESTResource(bed));\n      expect(res.body.data).toEqual(expect.arrayContaining(expected));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with an empty query & peopleNumber in [1, 6]",
            "suites": [
                "Search query",
                "With filters"
            ],
            "updatePoint": {
                "line": 233,
                "column": 61
            },
            "line": 233,
            "code": "    test('search with an empty query & peopleNumber in [1, 6]', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: '',\n          filters: {\n            peopleNumber: [1, 6]\n          }\n        }\n      });\n      expect(res.body.data.length).toBe(2);\n      const expected = data.bed.slice(0, 2).map(bed => transformToRESTResource(bed));\n      expect(res.body.data).toEqual(expect.arrayContaining(expected));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search for \"Sleepy Bed\" & peopleNumber < 7",
            "suites": [
                "Search query",
                "With filters"
            ],
            "updatePoint": {
                "line": 248,
                "column": 52
            },
            "line": 248,
            "code": "    test('search for \"Sleepy Bed\" & peopleNumber < 7', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: 'Sleepy Bed',\n          filters: {\n            peopleNumber: {\n              $lt: 7\n            }\n          }\n        }\n      });\n      expect(res.body.data.length).toBe(1);\n      expect(res.body.data[0]).toMatchObject(transformToRESTResource(data.bed[0]));\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "search with a backslash",
            "suites": [
                "Search query",
                "With filters"
            ],
            "updatePoint": {
                "line": 264,
                "column": 33
            },
            "line": 264,
            "code": "    test('search with a backslash', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/beds',\n        qs: {\n          _q: 'Sleepy Bed',\n          filters: {\n            name: {\n              $contains: 'test\\\\'\n            }\n          }\n        }\n      });\n      expect(res.body.data.length).toBe(0);\n    });",
            "file": "search.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "find single type content returns 404 when not created",
            "suites": [
                "Content Manager single types"
            ],
            "updatePoint": {
                "line": 43,
                "column": 61
            },
            "line": 43,
            "code": "  test('find single type content returns 404 when not created', async () => {\n    const res = await rq({\n      url: `/${uid}`,\n      method: 'GET'\n    });\n    expect(res.statusCode).toBe(404);\n  });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Create content",
            "suites": [
                "Content Manager single types"
            ],
            "updatePoint": {
                "line": 50,
                "column": 22
            },
            "line": 50,
            "code": "  test('Create content', async () => {\n    const res = await rq({\n      url: `/${uid}`,\n      method: 'PUT',\n      body: {\n        data: {\n          title: 'Title'\n        }\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: {\n        title: 'Title'\n      }\n    });\n    data.id = res.body.data.id;\n  });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Update keeps the same data id",
            "suites": [
                "Content Manager single types"
            ],
            "updatePoint": {
                "line": 69,
                "column": 37
            },
            "line": 69,
            "code": "  test('Update keeps the same data id', async () => {\n    const res = await rq({\n      url: `/${uid}`,\n      method: 'PUT',\n      body: {\n        data: {\n          title: 'Title'\n        }\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.data).toMatchObject({\n      id: data.id,\n      attributes: {\n        title: 'Title'\n      }\n    });\n  });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "find single type content returns an object ",
            "suites": [
                "Content Manager single types"
            ],
            "updatePoint": {
                "line": 87,
                "column": 51
            },
            "line": 87,
            "code": "  test('find single type content returns an object ', async () => {\n    const res = await rq({\n      url: `/${uid}`,\n      method: 'GET'\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: {\n        title: 'Title'\n      }\n    });\n  });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Delete single type content returns an object and makes data unavailable",
            "suites": [
                "Content Manager single types"
            ],
            "updatePoint": {
                "line": 100,
                "column": 79
            },
            "line": 100,
            "code": "  test('Delete single type content returns an object and makes data unavailable', async () => {\n    const res = await rq({\n      url: `/${uid}`,\n      method: 'DELETE'\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.data).toMatchObject({\n      id: expect.anything(),\n      attributes: {\n        title: 'Title'\n      }\n    });\n    const getRes = await rq({\n      url: `/${uid}`,\n      method: 'GET'\n    });\n    expect(getRes.statusCode).toBe(404);\n  });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/strapi/tests"
        },
        {
            "name": "Upload a single file",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 28,
                "column": 28
            },
            "line": 28,
            "code": "  test('Upload a single file', async () => {\n    const formData = {\n      operations: JSON.stringify({\n        query:\n        /* GraphQL */\n        `\n          mutation uploadFile($file: Upload!) {\n            upload(file: $file) {\n              data {\n                id\n                attributes {\n                  name\n                  mime\n                  url\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          file: null\n        }\n      }),\n      map: JSON.stringify({\n        nFile1: ['variables.file']\n      }),\n      nFile1: fs.createReadStream(path.join(__dirname, '/rec.jpg'))\n    };\n    const res = await rq({\n      method: 'POST',\n      url: '/graphql',\n      formData\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      data: {\n        upload: {\n          data: {\n            id: expect.anything(),\n            attributes: {\n              name: 'rec.jpg',\n              mime: 'image/jpeg',\n              url: expect.any(String)\n            }\n          }\n        }\n      }\n    });\n    data.file = res.body.data.upload.data;\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Upload multiple files",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 78,
                "column": 29
            },
            "line": 78,
            "code": "  test('Upload multiple files', async () => {\n    const formData = {\n      operations: JSON.stringify({\n        query:\n        /* GraphQL */\n        `\n          mutation uploadFiles($files: [Upload]!) {\n            multipleUpload(files: $files) {\n              data {\n                id\n                attributes {\n                  name\n                  mime\n                  url\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          files: [null, null]\n        }\n      }),\n      map: JSON.stringify({\n        nFile0: ['variables.files.0'],\n        nFile1: ['variables.files.1']\n      }),\n      nFile0: fs.createReadStream(path.join(__dirname, '/rec.jpg')),\n      nFile1: fs.createReadStream(path.join(__dirname, '/rec.jpg'))\n    };\n    const res = await rq({\n      method: 'POST',\n      url: '/graphql',\n      formData\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.data.multipleUpload).toHaveLength(2);\n    expect(res.body).toEqual({\n      data: {\n        multipleUpload: expect.arrayContaining([expect.objectContaining({\n          data: {\n            id: expect.anything(),\n            attributes: {\n              name: 'rec.jpg',\n              mime: 'image/jpeg',\n              url: expect.any(String)\n            }\n          }\n        })])\n      }\n    });\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Update file information",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 130,
                "column": 31
            },
            "line": 130,
            "code": "  test('Update file information', async () => {\n    const res = await rq({\n      url: '/graphql',\n      method: 'POST',\n      body: {\n        query:\n        /* GraphQL */\n        `\n          mutation updateFileInfo($id: ID!, $info: FileInfoInput!) {\n            updateFileInfo(id: $id, info: $info) {\n              data {\n                id\n                attributes {\n                  name\n                  alternativeText\n                  caption\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.file.id,\n          info: {\n            name: 'test name',\n            alternativeText: 'alternative text test',\n            caption: 'caption test'\n          }\n        }\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      data: {\n        updateFileInfo: {\n          data: {\n            id: data.file.id,\n            attributes: {\n              name: 'test name',\n              alternativeText: 'alternative text test',\n              caption: 'caption test'\n            }\n          }\n        }\n      }\n    });\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Delete a file",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 177,
                "column": 21
            },
            "line": 177,
            "code": "  test('Delete a file', async () => {\n    const res = await rq({\n      url: '/graphql',\n      method: 'POST',\n      body: {\n        query:\n        /* GraphQL */\n        `\n          mutation removeFile($id: ID!) {\n            removeFile(id: $id) {\n              data {\n                id\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.file.id\n        }\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      data: {\n        removeFile: {\n          data: {\n            id: data.file.id\n          }\n        }\n      }\n    });\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Delete a file that dont exist",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 209,
                "column": 37
            },
            "line": 209,
            "code": "  test('Delete a file that dont exist', async () => {\n    const res = await rq({\n      url: '/graphql',\n      method: 'POST',\n      body: {\n        query:\n        /* GraphQL */\n        `\n          mutation removeFile($id: ID!) {\n            removeFile(id: $id) {\n              data {\n                id\n              }\n            }\n          }\n        `,\n        variables: {\n          id: '404'\n        }\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      data: {\n        removeFile: null\n      }\n    });\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Upload a single file with info",
            "suites": [
                "Upload plugin end to end tests"
            ],
            "updatePoint": {
                "line": 237,
                "column": 38
            },
            "line": 237,
            "code": "  test('Upload a single file with info', async () => {\n    const formData = {\n      operations: JSON.stringify({\n        query:\n        /* GraphQL */\n        `\n          mutation uploadFilesWithInfo($file: Upload!, $info: FileInfoInput) {\n            upload(file: $file, info: $info) {\n              data {\n                id\n                attributes {\n                  name\n                  alternativeText\n                  caption\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          file: null,\n          info: {\n            alternativeText: 'alternative text test',\n            caption: 'caption test'\n          }\n        }\n      }),\n      map: JSON.stringify({\n        nFile1: ['variables.file']\n      }),\n      nFile1: fs.createReadStream(path.join(__dirname, '/rec.jpg'))\n    };\n    const res = await rq({\n      method: 'POST',\n      url: '/graphql',\n      formData\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      data: {\n        upload: {\n          data: {\n            id: expect.anything(),\n            attributes: {\n              name: 'rec.jpg',\n              alternativeText: 'alternative text test',\n              caption: 'caption test'\n            }\n          }\n        }\n      }\n    });\n  });",
            "file": "graphql-upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Returns the settings",
            "suites": [
                "Upload plugin end to end tests",
                "GET /upload/settings => Get settings for an environment"
            ],
            "updatePoint": {
                "line": 29,
                "column": 30
            },
            "line": 29,
            "code": "    test('Returns the settings', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/upload/settings'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          autoOrientation: false,\n          sizeOptimization: true,\n          responsiveDimensions: true\n        }\n      });\n    });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Updates an environment config correctly",
            "suites": [
                "Upload plugin end to end tests",
                "PUT /upload/settings/:environment"
            ],
            "updatePoint": {
                "line": 45,
                "column": 49
            },
            "line": 45,
            "code": "    test('Updates an environment config correctly', async () => {\n      const updateRes = await rq({\n        method: 'PUT',\n        url: '/upload/settings',\n        body: {\n          sizeOptimization: true,\n          responsiveDimensions: true\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body).toEqual({\n        data: {\n          sizeOptimization: true,\n          responsiveDimensions: true\n        }\n      });\n      const getRes = await rq({\n        method: 'GET',\n        url: '/upload/settings'\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body).toEqual({\n        data: {\n          sizeOptimization: true,\n          responsiveDimensions: true\n        }\n      });\n    });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Simple image upload",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "updatePoint": {
                "line": 75,
                "column": 29
            },
            "line": 75,
            "code": "    test('Simple image upload', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/upload',\n        formData: {\n          files: fs.createReadStream(path.join(__dirname, 'rec.jpg'))\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body)).toBe(true);\n      expect(res.body.length).toBe(1);\n      expect(res.body[0]).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'rec.jpg',\n        ext: '.jpg',\n        mime: 'image/jpeg',\n        hash: expect.any(String),\n        size: expect.any(Number),\n        width: expect.any(Number),\n        height: expect.any(Number),\n        url: expect.any(String),\n        provider: 'local'\n      }));\n    });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Rejects when no files are provided",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "updatePoint": {
                "line": 99,
                "column": 44
            },
            "line": 99,
            "code": "    test('Rejects when no files are provided', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/upload',\n        formData: {}\n      });\n      expect(res.statusCode).toBe(400);\n    });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Generates a thumbnail on large enough files",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "updatePoint": {
                "line": 107,
                "column": 53
            },
            "line": 107,
            "code": "    test('Generates a thumbnail on large enough files', async () => {\n      const res = await rq({\n        method: 'POST',\n        url: '/upload',\n        formData: {\n          files: fs.createReadStream(path.join(__dirname, 'thumbnail_target.png'))\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(Array.isArray(res.body)).toBe(true);\n      expect(res.body.length).toBe(1);\n      expect(res.body[0]).toEqual(expect.objectContaining({\n        id: expect.anything(),\n        name: 'thumbnail_target.png',\n        ext: '.png',\n        mime: 'image/png',\n        hash: expect.any(String),\n        size: expect.any(Number),\n        width: expect.any(Number),\n        height: expect.any(Number),\n        url: expect.any(String),\n        provider: 'local',\n        formats: {\n          thumbnail: {\n            name: 'thumbnail_thumbnail_target.png',\n            hash: expect.any(String),\n            ext: '.png',\n            mime: 'image/png',\n            size: expect.any(Number),\n            width: expect.any(Number),\n            height: expect.any(Number),\n            url: expect.any(String),\n            path: null\n          }\n        }\n      }));\n    });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "GET /upload/files => Find files",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "updatePoint": {
                "line": 145,
                "column": 39
            },
            "line": 145,
            "code": "  test('GET /upload/files => Find files', async () => {\n    const getRes = await rq({\n      method: 'GET',\n      url: '/upload/files'\n    });\n    expect(getRes.statusCode).toBe(200);\n    expect(getRes.body).toEqual({\n      results: expect.arrayContaining([expect.objectContaining({\n        id: expect.anything(),\n        url: expect.any(String)\n      })]),\n      pagination: {\n        page: expect.any(Number),\n        pageSize: expect.any(Number),\n        pageCount: expect.any(Number),\n        total: expect.any(Number)\n      }\n    });\n  });",
            "file": "upload.test.e2e.js",
            "skipped": false,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "GET /upload/files/:id => Find one file",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "line": 164,
            "code": "  test.todo('GET /upload/files/:id => Find one file');",
            "file": "upload.test.e2e.js",
            "skipped": true,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "GET /upload/search/:id => Search files",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "line": 165,
            "code": "  test.todo('GET /upload/search/:id => Search files');",
            "file": "upload.test.e2e.js",
            "skipped": true,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "DELETE /upload/files/:id => Delete a file",
            "suites": [
                "Upload plugin end to end tests",
                "POST /upload => Upload a file"
            ],
            "line": 166,
            "code": "  test.todo('DELETE /upload/files/:id => Delete a file');",
            "file": "upload.test.e2e.js",
            "skipped": true,
            "dir": "packages/core/upload/tests"
        },
        {
            "name": "Create Post %o",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "line": 82,
            "code": "    test.each(postsPayload)('Create Post %o', async post => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation createPost($data: PostInput!) {\n            createPost(data: $data) {\n              data {\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: post\n        }\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toEqual({\n        data: {\n          createPost: {\n            data: {\n              attributes: post\n            }\n          }\n        }\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 118,
                "column": 20
            },
            "line": 118,
            "code": "    test('List posts', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            posts {\n              data {\n                id\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          posts: {\n            data: postsPayload.map(entry => ({\n              id: expect.any(String),\n              attributes: omit('id', entry)\n            }))\n          }\n        }\n      }); // assign for later use\n\n      data.posts = res.body.data.posts.data.map(({\n        id,\n        attributes\n      }) => ({\n        id,\n        ...attributes\n      }));\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts with limit",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 161,
                "column": 31
            },
            "line": 161,
            "code": "    test('List posts with limit', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            posts(pagination: { limit: 1 }) {\n              data {\n                id\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `\n      });\n      const expectedPost = data.posts[0];\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          posts: {\n            data: [{\n              id: expectedPost.id,\n              attributes: omit('id', expectedPost)\n            }]\n          }\n        }\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts with sort",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 194,
                "column": 30
            },
            "line": 194,
            "code": "    test('List posts with sort', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            posts(sort: \"name:desc\") {\n              data {\n                id\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `\n      });\n      const expectedPosts = [...data.posts].reverse().map(entry => ({\n        id: expect.any(String),\n        attributes: omit('id', entry)\n      }));\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          posts: {\n            data: expectedPosts\n          }\n        }\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts with start",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 227,
                "column": 31
            },
            "line": 227,
            "code": "    test('List posts with start', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            posts(pagination: { start: 1 }) {\n              data {\n                id\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `\n      });\n      const expectedPost = data.posts[1];\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          posts: {\n            data: [{\n              id: expectedPost.id,\n              attributes: omit('id', expectedPost)\n            }]\n          }\n        }\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts with `createdBy` and `updatedBy`",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "line": 260,
            "code": "    test.skip('List posts with `createdBy` and `updatedBy`', async () => {",
            "file": "graphql-crud.test.e2e.js",
            "skipped": true,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List posts with filters clause %o",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "line": 286,
            "code": "    test.each([[{\n      name: {\n        eq: 'post 1'\n      },\n      bigint: {\n        eq: 1316130638171\n      }\n    }, [postsPayload[0]]], [{\n      category: {\n        eq: 'BLOG'\n      }\n    }, [postsPayload[0]]], [{\n      name: {\n        not: {\n          eq: 'post 1'\n        }\n      },\n      bigint: {\n        not: {\n          eq: 1316130638171\n        }\n      }\n    }, [postsPayload[1]]], [{\n      name: {\n        contains: 'post'\n      }\n    }, postsPayload], [{\n      category: {\n        contains: 'PRO'\n      }\n    }, [postsPayload[1]]], [{\n      name: {\n        contains: 'post 1'\n      }\n    }, [postsPayload[0]]], [{\n      name: {\n        containsi: 'Post'\n      }\n    }, postsPayload], [{\n      name: {\n        not: {\n          containsi: 'Post 1'\n        }\n      }\n    }, [postsPayload[1]]], [{\n      name: {\n        in: ['post 1', 'post 2', 'post 3']\n      }\n    }, postsPayload], [{\n      name: {\n        not: {\n          in: ['post 2']\n        }\n      }\n    }, [postsPayload[0]]], [{\n      or: [{\n        name: {\n          in: ['post 2']\n        }\n      }, {\n        bigint: {\n          eq: 1316130638171\n        }\n      }]\n    }, [postsPayload[0], postsPayload[1]]], [{\n      and: [{\n        or: [{\n          name: {\n            in: ['post 2']\n          }\n        }, {\n          bigint: {\n            eq: 1316130638171\n          }\n        }]\n      }]\n    }, [postsPayload[0], postsPayload[1]]], [{\n      and: [{\n        or: [{\n          name: {\n            in: ['post 2']\n          }\n        }, {\n          or: [{\n            bigint: {\n              eq: 1316130638171\n            }\n          }, {\n            nullable: {\n              not: {\n                null: true\n              }\n            }\n          }]\n        }]\n      }]\n    }, [postsPayload[0], postsPayload[1]]]])('List posts with filters clause %o', async (filters, expected) => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          query findPosts($filters: PostFiltersInput) {\n            posts(filters: $filters) {\n              data {\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          filters\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      const {\n        data: posts\n      } = res.body.data.posts; // same length\n\n      expect(posts.length).toBe(expected.length); // all the posts returned are in the expected array\n\n      posts.map(prop('attributes')).forEach(post => {\n        expect(expected.map(omit('id'))).toEqual(expect.arrayContaining([post]));\n      }); // all expected values are in the result\n\n      expected.forEach(expectedPost => {\n        expect(posts.map(prop('attributes'))).toEqual(expect.arrayContaining([omit('id', expectedPost)]));\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Get One Post",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 419,
                "column": 22
            },
            "line": 419,
            "code": "    test('Get One Post', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          query getPost($id: ID!) {\n            post(id: $id) {\n              data {\n                id\n                attributes {\n                  name\n                  bigint\n                  nullable\n                  category\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.posts[0].id\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          post: {\n            data: {\n              id: data.posts[0].id,\n              attributes: omit('id', data.posts[0])\n            }\n          }\n        }\n      });\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Update Post",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 454,
                "column": 21
            },
            "line": 454,
            "code": "    test('Update Post', async () => {\n      const newName = 'new post name';\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation updatePost($id: ID!, $data: PostInput!) {\n            updatePost(id: $id, data: $data) {\n              data {\n                id\n                attributes {\n                  name\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.posts[0].id,\n          data: {\n            name: newName\n          }\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          updatePost: {\n            data: {\n              id: data.posts[0].id,\n              attributes: {\n                name: newName\n              }\n            }\n          }\n        }\n      });\n      const newPost = res.body.data.updatePost.data;\n      data.posts[0] = {\n        id: newPost.id,\n        ...newPost.attributes\n      };\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Delete Posts",
            "suites": [
                "Test Graphql API End to End",
                "Test CRUD"
            ],
            "updatePoint": {
                "line": 497,
                "column": 22
            },
            "line": 497,
            "code": "    test('Delete Posts', async () => {\n      for (let post of data.posts) {\n        const res = await graphqlQuery({\n          query:\n          /* GraphQL */\n          `\n            mutation deletePost($id: ID!) {\n              deletePost(id: $id) {\n                data {\n                  id\n                  attributes {\n                    name\n                    nullable\n                    bigint\n                    category\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            id: post.id\n          }\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject({\n          data: {\n            deletePost: {\n              data: {\n                id: post.id,\n                attributes: omit('id', post)\n              }\n            }\n          }\n        });\n      }\n    });",
            "file": "graphql-crud.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Create label %o",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "line": 162,
            "code": "    test.each(labelsPayload)('Create label %o', async label => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation createLabel($data: LabelInput!) {\n            createLabel(data: $data) {\n              data {\n                attributes {\n                  name\n                  color {\n                    name\n                    red\n                    green\n                    blue\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: label\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          createLabel: {\n            data: {\n              attributes: label\n            }\n          }\n        }\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List labels",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 198,
                "column": 21
            },
            "line": 198,
            "code": "    test('List labels', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            labels {\n              data {\n                id\n                attributes {\n                  name\n                  color {\n                    name\n                    red\n                    green\n                    blue\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          labels: {\n            data: labelsPayload.map(label => ({\n              id: expect.any(String),\n              attributes: label\n            }))\n          }\n        }\n      }); // assign for later use\n\n      data.labels = data.labels.concat(res.body.data.labels.data);\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Create document linked to every labels %o",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "line": 238,
            "code": "    test.each(documentsPayload)('Create document linked to every labels %o', async document => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation createDocument($data: DocumentInput!) {\n            createDocument(data: $data) {\n              data {\n                id\n                attributes {\n                  name\n                  labels {\n                    data {\n                      id\n                      attributes {\n                        name\n                        color {\n                          name\n                          red\n                          green\n                          blue\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: { ...document,\n            labels: data.labels.map(t => t.id)\n          }\n        }\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          createDocument: {\n            data: {\n              id: expect.any(String),\n              attributes: { ...selectFields(document),\n                labels: {\n                  data: expect.arrayContaining(data.labels)\n                }\n              }\n            }\n          }\n        }\n      });\n      data.documents.push(body.data.createDocument.data);\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List documents with labels",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 294,
                "column": 36
            },
            "line": 294,
            "code": "    test('List documents with labels', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            documents {\n              data {\n                id\n                attributes {\n                  name\n                  labels {\n                    data {\n                      id\n                      attributes {\n                        name\n                        color {\n                          name\n                          red\n                          green\n                          blue\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          documents: {\n            data: expect.arrayContaining(data.documents)\n          }\n        }\n      }); // assign for later use\n\n      data.documents = res.body.data.documents.data;\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "List Labels with documents",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 339,
                "column": 36
            },
            "line": 339,
            "code": "    test('List Labels with documents', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            labels {\n              data {\n                id\n                attributes {\n                  name\n                  color {\n                    name\n                    red\n                    green\n                    blue\n                  }\n                  documents {\n                    data {\n                      id\n                      attributes {\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          labels: {\n            data: expect.arrayContaining(data.labels.map(label => ({\n              id: label.id,\n              attributes: { ...label.attributes,\n                documents: {\n                  data: expect.arrayContaining(data.documents.map(document => ({\n                    id: document.id,\n                    attributes: selectFields(document.attributes)\n                  })))\n                }\n              }\n            })))\n          }\n        }\n      }); // assign for later use\n\n      data.labels = res.body.data.labels.data;\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Deep query",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 394,
                "column": 20
            },
            "line": 394,
            "code": "    test('Deep query', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            documents(filters: { labels: { name: { contains: \"label 1\" } } }) {\n              data {\n                id\n                attributes {\n                  name\n                  labels {\n                    data {\n                      id\n                      attributes {\n                        name\n                        color {\n                          name\n                          red\n                          green\n                          blue\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          documents: {\n            data: expect.arrayContaining(data.documents)\n          }\n        }\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Update Document relations removes correctly a relation",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 434,
                "column": 64
            },
            "line": 434,
            "code": "    test('Update Document relations removes correctly a relation', async () => {\n      const document = data.documents[0];\n      const labels = [data.labels[0]]; // if I remove a label from an document is it working\n\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation updateDocument($id: ID!, $data: DocumentInput!) {\n            updateDocument(id: $id, data: $data) {\n              data {\n                id\n                attributes {\n                  name\n                  labels {\n                    data {\n                      id\n                      attributes {\n                        name\n                        color {\n                          name\n                          red\n                          green\n                          blue\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: document.id,\n          data: {\n            labels: labels.map(label => label.id)\n          }\n        }\n      });\n      expect(res.body).toMatchObject({\n        data: {\n          updateDocument: {\n            data: {\n              id: document.id,\n              attributes: { ...selectFields(document.attributes),\n                labels: {\n                  data: labels.map(label => ({\n                    id: label.id,\n                    attributes: { ...selectFields(label.attributes),\n                      color: null\n                    }\n                  }))\n                }\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Delete Labels and test Documents relations",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 494,
                "column": 52
            },
            "line": 494,
            "code": "    test('Delete Labels and test Documents relations', async () => {\n      for (let label of data.labels) {\n        const res = await graphqlQuery({\n          query:\n          /* GraphQL */\n          `\n            mutation deleteLabel($id: ID!) {\n              deleteLabel(id: $id) {\n                data {\n                  id\n                  attributes {\n                    name\n                    color {\n                      name\n                      red\n                      green\n                      blue\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            id: label.id\n          }\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject({\n          data: {\n            deleteLabel: {\n              data: {\n                id: label.id,\n                attributes: { ...selectFields(label.attributes),\n                  color: null\n                }\n              }\n            }\n          }\n        });\n      }\n\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            documents {\n              data {\n                id\n                attributes {\n                  name\n                  labels {\n                    data {\n                      id\n                      attributes {\n                        name\n                        color {\n                          name\n                          red\n                          green\n                          blue\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          documents: {\n            data: expect.arrayContaining(data.documents.map(document => ({\n              id: document.id,\n              attributes: { ...selectFields(document.attributes),\n                labels: {\n                  data: []\n                }\n              }\n            })))\n          }\n        }\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Delete Documents",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 585,
                "column": 26
            },
            "line": 585,
            "code": "    test('Delete Documents', async () => {\n      for (let document of data.documents) {\n        const res = await graphqlQuery({\n          query:\n          /* GraphQL */\n          `\n            mutation deleteDocument($id: ID!) {\n              deleteDocument(id: $id) {\n                data {\n                  id\n                  attributes {\n                    name\n                    labels {\n                      data {\n                        id\n                        attributes {\n                          name\n                          color {\n                            name\n                            red\n                            green\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          `,\n          variables: {\n            id: document.id\n          }\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject({\n          data: {\n            deleteDocument: {\n              data: {\n                id: document.id,\n                attributes: { ...selectFields(document.attributes),\n                  labels: {\n                    data: []\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Create person",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 636,
                "column": 23
            },
            "line": 636,
            "code": "    test('Create person', async () => {\n      const person = {\n        name: 'Chuck Norris',\n        privateName: 'Jean-Eude'\n      };\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation createPerson($data: PersonInput!) {\n            createPerson(data: $data) {\n              data {\n                id\n                attributes {\n                  name\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: person\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toEqual({\n        data: {\n          createPerson: {\n            data: {\n              id: expect.anything(),\n              attributes: {\n                name: person.name\n              }\n            }\n          }\n        }\n      });\n      data.people.push(res.body.data.createPerson.data);\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Can't list a private field",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 675,
                "column": 36
            },
            "line": 675,
            "code": "    test(\"Can't list a private field\", async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            people {\n              data {\n                attributes {\n                  name\n                  privateName\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        errors: [{\n          message: 'Cannot query field \"privateName\" on type \"Person\".'\n        }]\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Create a car linked to a person (oneToMany)",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 699,
                "column": 53
            },
            "line": 699,
            "code": "    test('Create a car linked to a person (oneToMany)', async () => {\n      const car = {\n        name: 'Peugeot 508',\n        person: data.people[0].id\n      };\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation createCar($data: CarInput!) {\n            createCar(data: $data) {\n              data {\n                id\n                attributes {\n                  name\n                  person {\n                    data {\n                      id\n                      attributes {\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: car\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: {\n          createCar: {\n            data: {\n              id: expect.anything(),\n              attributes: {\n                name: car.name,\n                person: {\n                  data: data.people[0]\n                }\n              }\n            }\n          }\n        }\n      });\n      data.cars.push({\n        id: res.body.data.createCar.data.id\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Can't list a private oneToMany relation",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 751,
                "column": 49
            },
            "line": 751,
            "code": "    test(\"Can't list a private oneToMany relation\", async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            people {\n              data {\n                attributes {\n                  name\n                  privateCars\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        errors: [{\n          message: 'Cannot query field \"privateCars\" on type \"Person\".'\n        }]\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Edit person/cars relations removes correctly a car",
            "suites": [
                "Test Graphql Relations API End to End",
                "Test relations features"
            ],
            "updatePoint": {
                "line": 775,
                "column": 60
            },
            "line": 775,
            "code": "    test('Edit person/cars relations removes correctly a car', async () => {\n      const newPerson = {\n        name: 'Check Norris Junior',\n        privateCars: []\n      };\n      const mutationRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation updatePerson($id: ID!, $data: PersonInput!) {\n            updatePerson(id: $id, data: $data) {\n              data {\n                id\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.people[0].id,\n          data: newPerson\n        }\n      });\n      expect(mutationRes.statusCode).toBe(200);\n      const queryRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          query($id: ID!) {\n            car(id: $id) {\n              data {\n                attributes {\n                  person {\n                    data {\n                      id\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.cars[0].id\n        }\n      });\n      expect(queryRes.statusCode).toBe(200);\n      expect(queryRes.body).toEqual({\n        data: {\n          car: {\n            data: {\n              attributes: {\n                person: {\n                  data: null\n                }\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "graphql-relations.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "No list available",
            "suites": [
                "Single type Graphql support",
                "Queries"
            ],
            "updatePoint": {
                "line": 72,
                "column": 27
            },
            "line": 72,
            "code": "    test('No list available', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            homePages {\n              data {\n                id\n              }\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body.errors).toMatchObject(expect.arrayContaining([expect.objectContaining({\n        message: expect.stringMatching('Cannot query field \"homePages\"')\n      })]));\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Access the single type without args",
            "suites": [
                "Single type Graphql support",
                "Queries"
            ],
            "updatePoint": {
                "line": 91,
                "column": 45
            },
            "line": 91,
            "code": "    test('Access the single type without args', async () => {\n      await updateContent({\n        title: 'Test'\n      });\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            homePage {\n              data {\n                id\n                attributes {\n                  title\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.data).toEqual({\n        homePage: {\n          data: {\n            id: expect.anything(),\n            attributes: {\n              title: 'Test'\n            }\n          }\n        }\n      });\n      data.id = res.body.data.homePage.data.id;\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Cannot create",
            "suites": [
                "Single type Graphql support",
                "Mutations"
            ],
            "updatePoint": {
                "line": 126,
                "column": 23
            },
            "line": 126,
            "code": "    test('Cannot create', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation {\n            createHomePage(input: { data: { title: \"Test\" } }) {\n              id\n            }\n          }\n        `\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body.errors).toMatchObject(expect.arrayContaining([expect.objectContaining({\n        message: expect.stringMatching('Cannot query field \"createHomePage\"')\n      })]));\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "update a single type does not require id",
            "suites": [
                "Single type Graphql support",
                "Mutations"
            ],
            "updatePoint": {
                "line": 143,
                "column": 50
            },
            "line": 143,
            "code": "    test('update a single type does not require id', async () => {\n      const updateRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation updateHomePage($data: HomePageInput!) {\n            updateHomePage(data: $data) {\n              data {\n                id\n                attributes {\n                  title\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          data: {\n            title: 'New Title'\n          }\n        }\n      });\n      expect(updateRes.statusCode).toBe(200);\n      expect(updateRes.body.data).toEqual({\n        updateHomePage: {\n          data: {\n            id: data.id,\n            attributes: {\n              title: 'New Title'\n            }\n          }\n        }\n      });\n      const getRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            homePage {\n              data {\n                id\n                attributes {\n                  title\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toEqual({\n        homePage: {\n          data: {\n            id: data.id,\n            attributes: {\n              title: 'New Title'\n            }\n          }\n        }\n      });\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Can delete without params",
            "suites": [
                "Single type Graphql support",
                "Mutations"
            ],
            "updatePoint": {
                "line": 204,
                "column": 35
            },
            "line": 204,
            "code": "    test('Can delete without params', async () => {\n      const deleteRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation {\n            deleteHomePage {\n              data {\n                id\n                attributes {\n                  title\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(deleteRes.statusCode).toBe(200);\n      expect(deleteRes.body.data).toEqual({\n        deleteHomePage: {\n          data: {\n            id: data.id,\n            attributes: {\n              title: 'New Title'\n            }\n          }\n        }\n      });\n      const getRes = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          {\n            homePage {\n              data {\n                id\n                attributes {\n                  title\n                }\n              }\n            }\n          }\n        `\n      });\n      expect(getRes.statusCode).toBe(200);\n      expect(getRes.body.data).toEqual({\n        homePage: {\n          data: null\n        }\n      });\n    });",
            "file": "single-type.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/graphql/tests"
        },
        {
            "name": "Filter using the default locale when no parameter is specified",
            "suites": [
                "i18n - Content API",
                "Test collection type"
            ],
            "updatePoint": {
                "line": 105,
                "column": 72
            },
            "line": 105,
            "code": "    test('Filter using the default locale when no parameter is specified', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/categories'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body.data)).toBe(true);\n      expect(body.data).toHaveLength(1);\n      expect(body.data[0]).toMatchObject(transformToRESTResource(data.categories[0]));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on any locale",
            "suites": [
                "i18n - Content API",
                "Test collection type"
            ],
            "updatePoint": {
                "line": 119,
                "column": 34
            },
            "line": 119,
            "code": "    test('Can filter on any locale', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/categories?locale=ko'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body.data)).toBe(true);\n      expect(body.data).toHaveLength(1);\n      expect(body.data[0]).toMatchObject(transformToRESTResource(data.categories[1]));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on all locale",
            "suites": [
                "i18n - Content API",
                "Test collection type"
            ],
            "updatePoint": {
                "line": 133,
                "column": 34
            },
            "line": 133,
            "code": "    test('Can filter on all locale', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/categories?locale=all'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body.data)).toBe(true);\n      expect(body.data).toHaveLength(2);\n      expect(body.data).toEqual(expect.arrayContaining(data.categories.map(category => transformToRESTResource(category))));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Filter using the default locale when no parameter is specified",
            "suites": [
                "i18n - Content API",
                "Test single type"
            ],
            "updatePoint": {
                "line": 149,
                "column": 72
            },
            "line": 149,
            "code": "    test('Filter using the default locale when no parameter is specified', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/homepage'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(body.data).toMatchObject(transformToRESTResource(data.homepages[0]));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on any locale",
            "suites": [
                "i18n - Content API",
                "Test single type"
            ],
            "updatePoint": {
                "line": 161,
                "column": 34
            },
            "line": 161,
            "code": "    test('Can filter on any locale', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/homepage?locale=ko'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(body.data).toMatchObject(transformToRESTResource(data.homepages[1]));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on all locale",
            "suites": [
                "i18n - Content API",
                "Test single type"
            ],
            "updatePoint": {
                "line": 173,
                "column": 34
            },
            "line": 173,
            "code": "    test('Can filter on all locale', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/homepage?locale=all'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(body.data).toMatchObject(transformToRESTResource(data.homepages[0]));\n    });",
            "file": "content-api/content-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on default locale",
            "suites": [
                "i18n - Relation-list route"
            ],
            "updatePoint": {
                "line": 102,
                "column": 36
            },
            "line": 102,
            "code": "  test('Can filter on default locale', async () => {\n    const res = await rq({\n      method: 'POST',\n      url: '/content-manager/relations/api::shop.shop/products'\n    });\n    expect(res.body).toHaveLength(1);\n    expect(res.body[0]).toStrictEqual(pick(['_id', 'id', 'name'], data.products[1]));\n  });",
            "file": "content-manager/list-relation.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can filter on any locale",
            "suites": [
                "i18n - Relation-list route"
            ],
            "updatePoint": {
                "line": 110,
                "column": 32
            },
            "line": 110,
            "code": "  test('Can filter on any locale', async () => {\n    const res = await rq({\n      method: 'POST',\n      url: '/content-manager/relations/api::shop.shop/products',\n      qs: {\n        locale: 'it'\n      }\n    });\n    expect(res.body).toHaveLength(1);\n    expect(res.body[0]).toStrictEqual(pick(['_id', 'id', 'name'], data.products[0]));\n  });",
            "file": "content-manager/list-relation.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Create localization",
            "suites": [
                "Test Graphql API create localization"
            ],
            "updatePoint": {
                "line": 71,
                "column": 27
            },
            "line": 71,
            "code": "  test('Create localization', async () => {\n    const createResponse = await graphqlQuery({\n      query:\n      /* GraphQL */\n      `\n        mutation createRecipe($data: RecipeInput!) {\n          createRecipe(data: $data) {\n            data {\n              id\n              attributes {\n                name\n                locale\n              }\n            }\n          }\n        }\n      `,\n      variables: {\n        data: {\n          name: 'Recipe Name'\n        }\n      }\n    });\n    expect(createResponse.statusCode).toBe(200);\n    expect(createResponse.body).toMatchObject({\n      data: {\n        createRecipe: {\n          data: {\n            attributes: {\n              name: 'Recipe Name',\n              locale: 'en'\n            }\n          }\n        }\n      }\n    });\n    const recipeId = createResponse.body.data.createRecipe.data.id;\n    const createLocalizationResponse = await graphqlQuery({\n      query:\n      /* GraphQL */\n      `\n        mutation createRecipeLocalization($id: ID!, $locale: I18NLocaleCode, $data: RecipeInput!) {\n          createRecipeLocalization(id: $id, locale: $locale, data: $data) {\n            data {\n              id\n              attributes {\n                name\n                locale\n              }\n            }\n          }\n        }\n      `,\n      variables: {\n        id: recipeId,\n        locale: 'fr',\n        data: {\n          name: 'Recipe Name fr'\n        }\n      }\n    });\n    expect(createLocalizationResponse.statusCode).toBe(200);\n    expect(createLocalizationResponse.body.data.createRecipeLocalization).toMatchObject({\n      data: {\n        attributes: {\n          name: 'Recipe Name fr',\n          locale: 'fr'\n        }\n      }\n    });\n  });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Default locale is already created",
            "suites": [
                "CRUD locales",
                "Default locale"
            ],
            "updatePoint": {
                "line": 65,
                "column": 43
            },
            "line": 65,
            "code": "    test('Default locale is already created', async () => {\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'GET'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toHaveLength(1);\n      expect(res.body[0].isDefault).toBe(true);\n      data.locales.push(res.body[0]);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can create a locale",
            "suites": [
                "CRUD locales",
                "Creation"
            ],
            "updatePoint": {
                "line": 77,
                "column": 29
            },
            "line": 77,
            "code": "    test('Can create a locale', async () => {\n      const locale = {\n        name: 'French',\n        code: 'fr',\n        isDefault: false\n      };\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: locale\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        id: expect.anything(),\n        ...locale\n      });\n      data.locales.push(res.body);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot create a locale if code or isDefault is missing",
            "suites": [
                "CRUD locales",
                "Creation"
            ],
            "updatePoint": {
                "line": 95,
                "column": 64
            },
            "line": 95,
            "code": "    test('Cannot create a locale if code or isDefault is missing', async () => {\n      const locale = {\n        name: 'Italian'\n      };\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: locale\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          details: {\n            errors: [{\n              message: 'code is a required field',\n              name: 'ValidationError',\n              path: ['code']\n            }, {\n              message: 'isDefault is a required field',\n              name: 'ValidationError',\n              path: ['isDefault']\n            }]\n          },\n          message: '2 errors occurred',\n          name: 'ValidationError',\n          status: 400\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot create a locale if code already exists",
            "suites": [
                "CRUD locales",
                "Creation"
            ],
            "updatePoint": {
                "line": 125,
                "column": 55
            },
            "line": 125,
            "code": "    test('Cannot create a locale if code already exists', async () => {\n      const locale = {\n        code: 'fr',\n        name: 'random name',\n        isDefault: false\n      };\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: locale\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ApplicationError',\n          message: 'This locale already exists',\n          details: {}\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can create a locale even if name already exists",
            "suites": [
                "CRUD locales",
                "Creation"
            ],
            "updatePoint": {
                "line": 147,
                "column": 57
            },
            "line": 147,
            "code": "    test('Can create a locale even if name already exists', async () => {\n      const locale = {\n        name: 'French',\n        code: 'fr-FR',\n        isDefault: false\n      };\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: locale\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        id: expect.anything(),\n        ...locale\n      });\n      data.locales.push(res.body);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Only one locale can be default (POST)",
            "suites": [
                "CRUD locales",
                "Creation"
            ],
            "updatePoint": {
                "line": 165,
                "column": 47
            },
            "line": 165,
            "code": "    test('Only one locale can be default (POST)', async () => {\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: {\n          code: 'bas',\n          name: 'random',\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      data.locales[0].isDefault = false;\n      res = await rq({\n        url: '/i18n/locales',\n        method: 'POST',\n        body: {\n          code: 'en-US',\n          name: 'random',\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      res = await rq({\n        url: '/i18n/locales',\n        method: 'GET'\n      });\n      expect(res.statusCode).toBe(200);\n      const enLocale = res.body.find(locale => locale.code === 'bas');\n      const enUsLocale = res.body.find(locale => locale.code === 'en-US');\n      expect(enLocale.isDefault).toBe(false);\n      expect(enUsLocale.isDefault).toBe(true);\n      data.locales.push(enLocale);\n      data.locales.push(enUsLocale);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can list the locales",
            "suites": [
                "CRUD locales",
                "Read"
            ],
            "updatePoint": {
                "line": 203,
                "column": 30
            },
            "line": 203,
            "code": "    test('Can list the locales', async () => {\n      let res = await rq({\n        url: '/i18n/locales',\n        method: 'GET'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toHaveLength(data.locales.length);\n      expect(res.body.sort(compareLocales)).toMatchObject(data.locales.slice().sort(compareLocales));\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Can update the name of a locale",
            "suites": [
                "CRUD locales",
                "Update"
            ],
            "updatePoint": {
                "line": 214,
                "column": 41
            },
            "line": 214,
            "code": "    test('Can update the name of a locale', async () => {\n      const localeUpdate = {\n        name: 'French update',\n        isDefault: false\n      };\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[1].id}`,\n        method: 'PUT',\n        body: localeUpdate\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({ ...omitTimestamps(data.locales[1]),\n        ...localeUpdate\n      });\n      data.locales[1] = res.body;\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot update the code of a locale (without name)",
            "suites": [
                "CRUD locales",
                "Update"
            ],
            "updatePoint": {
                "line": 230,
                "column": 59
            },
            "line": 230,
            "code": "    test('Cannot update the code of a locale (without name)', async () => {\n      const localeUpdate = {\n        code: 'ak'\n      };\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: localeUpdate\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          details: {\n            errors: [{\n              path: [],\n              name: 'ValidationError',\n              message: 'this field has unspecified keys: code'\n            }]\n          },\n          message: 'this field has unspecified keys: code',\n          name: 'ValidationError',\n          status: 400\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot update the code of a locale (with name)",
            "suites": [
                "CRUD locales",
                "Update"
            ],
            "updatePoint": {
                "line": 256,
                "column": 56
            },
            "line": 256,
            "code": "    test('Cannot update the code of a locale (with name)', async () => {\n      const localeUpdate = {\n        name: 'French',\n        code: 'ak'\n      };\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: localeUpdate\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          details: {\n            errors: [{\n              path: [],\n              name: 'ValidationError',\n              message: 'this field has unspecified keys: code'\n            }]\n          },\n          message: 'this field has unspecified keys: code',\n          name: 'ValidationError',\n          status: 400\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Only one locale can be default (PUT)",
            "suites": [
                "CRUD locales",
                "Update"
            ],
            "updatePoint": {
                "line": 283,
                "column": 46
            },
            "line": 283,
            "code": "    test('Only one locale can be default (PUT)', async () => {\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: {\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      res = await rq({\n        url: `/i18n/locales/${data.locales[1].id}`,\n        method: 'PUT',\n        body: {\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      res = await rq({\n        url: '/i18n/locales',\n        method: 'GET'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.find(locale => locale.code === data.locales[0].code).isDefault).toBe(false);\n      expect(res.body.find(locale => locale.code === data.locales[1].code).isDefault).toBe(true);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot unselect isDefault",
            "suites": [
                "CRUD locales",
                "Update"
            ],
            "updatePoint": {
                "line": 310,
                "column": 35
            },
            "line": 310,
            "code": "    test('Cannot unselect isDefault', async () => {\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: {\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: {\n          isDefault: false\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot delete default locale",
            "suites": [
                "CRUD locales",
                "Delete"
            ],
            "updatePoint": {
                "line": 332,
                "column": 38
            },
            "line": 332,
            "code": "    test('Cannot delete default locale', async () => {\n      let res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'PUT',\n        body: {\n          isDefault: true\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body.isDefault).toBe(true);\n      data.locales[1].isDefault = false;\n      res = await rq({\n        url: `/i18n/locales/${data.locales[0].id}`,\n        method: 'DELETE'\n      });\n      expect(res.statusCode).toBe(400);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 400,\n          name: 'ApplicationError',\n          message: 'Cannot delete the default locale',\n          details: {}\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Simply delete a locale",
            "suites": [
                "CRUD locales",
                "Delete"
            ],
            "updatePoint": {
                "line": 358,
                "column": 32
            },
            "line": 358,
            "code": "    test('Simply delete a locale', async () => {\n      const res = await rq({\n        url: `/i18n/locales/${data.locales[1].id}`,\n        method: 'DELETE'\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject(omitTimestamps(data.locales[1]));\n      data.deletedLocales.push(res.body);\n      data.locales.splice(1, 1);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Delete a locale and entities in this locale",
            "suites": [
                "CRUD locales",
                "Delete"
            ],
            "updatePoint": {
                "line": 368,
                "column": 53
            },
            "line": 368,
            "code": "    test('Delete a locale and entities in this locale', async () => {\n      const {\n        body: frenchProduct\n      } = await rq({\n        url: '/content-manager/collection-types/api::product.product',\n        method: 'POST',\n        qs: {\n          plugins: {\n            i18n: {\n              locale: 'fr-FR'\n            }\n          }\n        },\n        body: {\n          name: 'product name'\n        }\n      });\n      await rq({\n        url: '/content-manager/collection-types/api::product.product',\n        method: 'POST',\n        qs: {\n          plugins: {\n            i18n: {\n              locale: 'en',\n              relatedEntityId: frenchProduct.id\n            }\n          }\n        },\n        body: {\n          name: 'product name'\n        }\n      });\n      const {\n        body: {\n          results: createdProducts\n        }\n      } = await rq({\n        url: '/content-manager/collection-types/api::product.product',\n        method: 'GET',\n        qs: {\n          locale: 'fr-FR'\n        }\n      });\n      expect(createdProducts).toHaveLength(1);\n      expect(createdProducts[0].localizations[0].locale).toBe('en');\n      const res = await rq({\n        url: `/i18n/locales/${data.locales[1].id}`,\n        method: 'DELETE'\n      });\n      const {\n        body: {\n          results: frenchProducts\n        }\n      } = await rq({\n        url: '/content-manager/collection-types/api::product.product',\n        method: 'GET',\n        qs: {\n          locale: 'fr-FR'\n        }\n      });\n      expect(frenchProducts).toHaveLength(0);\n      const {\n        body: {\n          results: englishProducts\n        }\n      } = await rq({\n        url: '/content-manager/collection-types/api::product.product',\n        method: 'GET',\n        qs: {\n          locale: 'en'\n        }\n      });\n      expect(englishProducts).toHaveLength(1);\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject(omitTimestamps(data.locales[1]));\n      data.deletedLocales.push(res.body);\n      data.locales.splice(1, 1);\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Cannot delete not found locale",
            "suites": [
                "CRUD locales",
                "Delete"
            ],
            "updatePoint": {
                "line": 446,
                "column": 40
            },
            "line": 446,
            "code": "    test('Cannot delete not found locale', async () => {\n      let res = await rq({\n        url: `/i18n/locales/${data.deletedLocales[0].id}`,\n        method: 'DELETE'\n      });\n      expect(res.statusCode).toBe(404);\n      expect(res.body).toMatchObject({\n        data: null,\n        error: {\n          status: 404,\n          name: 'NotFoundError',\n          message: 'locale.notFound',\n          details: {}\n        }\n      });\n    });",
            "file": "locales.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/i18n/tests"
        },
        {
            "name": "Create Role",
            "suites": [
                "Roles API"
            ],
            "updatePoint": {
                "line": 34,
                "column": 19
            },
            "line": 34,
            "code": "  test('Create Role', async () => {\n    const res = await rq({\n      method: 'POST',\n      url: '/users-permissions/roles',\n      body: { ...internals.role,\n        permissions: []\n      }\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toMatchObject({\n      ok: true\n    });\n  });",
            "file": "admin/roles-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "List Roles",
            "suites": [
                "Roles API"
            ],
            "updatePoint": {
                "line": 47,
                "column": 18
            },
            "line": 47,
            "code": "  test('List Roles', async () => {\n    const res = await rq({\n      method: 'GET',\n      url: '/users-permissions/roles'\n    });\n    expect(res.statusCode).toBe(200);\n    expect(res.body.roles).toEqual(expect.arrayContaining([expect.objectContaining(internals.role)]));\n    data.role = res.body.roles.find(r => r.name === internals.role.name);\n  });",
            "file": "admin/roles-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Delete Role",
            "suites": [
                "Roles API"
            ],
            "updatePoint": {
                "line": 56,
                "column": 19
            },
            "line": 56,
            "code": "  test('Delete Role', async () => {\n    const res = await rq({\n      method: 'DELETE',\n      url: `/users-permissions/roles/${data.role.id}`\n    });\n    expect(res.statusCode).toBe(200);\n  });",
            "file": "admin/roles-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Create User",
            "suites": [
                "Users API"
            ],
            "updatePoint": {
                "line": 24,
                "column": 19
            },
            "line": 24,
            "code": "  test('Create User', async () => {\n    const user = {\n      username: 'User 1',\n      email: 'user1@strapi.io',\n      password: 'test1234'\n    };\n    const res = await rq({\n      method: 'POST',\n      url: '/users',\n      body: user\n    });\n    expect(res.statusCode).toBe(201);\n    expect(res.body).toMatchObject({\n      username: user.username,\n      email: user.email\n    });\n    data.user = res.body;\n  });",
            "file": "content-api/users-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "without filter",
            "suites": [
                "Users API",
                "Read users"
            ],
            "updatePoint": {
                "line": 43,
                "column": 24
            },
            "line": 43,
            "code": "    test('without filter', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/users'\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body)).toBe(true);\n      expect(body).toHaveLength(1);\n      expect(body).toMatchObject([{\n        id: expect.anything(),\n        username: data.user.username,\n        email: data.user.email\n      }]);\n    });",
            "file": "content-api/users-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "with filter equals",
            "suites": [
                "Users API",
                "Read users"
            ],
            "updatePoint": {
                "line": 61,
                "column": 28
            },
            "line": 61,
            "code": "    test('with filter equals', async () => {\n      const res = await rq({\n        method: 'GET',\n        url: '/users',\n        qs: {\n          filters: {\n            username: 'User 1'\n          }\n        }\n      });\n      const {\n        statusCode,\n        body\n      } = res;\n      expect(statusCode).toBe(200);\n      expect(Array.isArray(body)).toBe(true);\n      expect(body).toHaveLength(1);\n      expect(body).toMatchObject([{\n        id: expect.anything(),\n        username: data.user.username,\n        email: data.user.email\n      }]);\n    });",
            "file": "content-api/users-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Delete user",
            "suites": [
                "Users API",
                "Read users"
            ],
            "updatePoint": {
                "line": 85,
                "column": 19
            },
            "line": 85,
            "code": "  test('Delete user', async () => {\n    const res = await rq({\n      method: 'DELETE',\n      url: `/users/${data.user.id}`\n    });\n    expect(res.statusCode).toBe(200);\n  });",
            "file": "content-api/users-api.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "createUser is forbidden to public",
            "suites": [
                "Test Graphql user service",
                "Check createUser authorizations"
            ],
            "updatePoint": {
                "line": 27,
                "column": 43
            },
            "line": 27,
            "code": "    test('createUser is forbidden to public', async () => {\n      const rq = createRequest({\n        strapi\n      });\n      const res = await rq({\n        url: '/graphql',\n        method: 'POST',\n        body: {\n          query:\n          /* GraphQL */\n          `\n            mutation {\n              createUsersPermissionsUser(\n                data: { username: \"test\", email: \"test\", password: \"test\" }\n              ) {\n                data {\n                  id\n                  attributes {\n                    username\n                  }\n                }\n              }\n            }\n          `\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: null,\n        errors: [{\n          message: 'Forbidden access'\n        }]\n      });\n    });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "createUser is forbidden for admins",
            "suites": [
                "Test Graphql user service",
                "Check createUser authorizations"
            ],
            "updatePoint": {
                "line": 61,
                "column": 44
            },
            "line": 61,
            "code": "    test('createUser is forbidden for admins', async () => {\n      const res = await authReq({\n        url: '/graphql',\n        method: 'POST',\n        body: {\n          query:\n          /* GraphQL */\n          `\n            mutation {\n              createUsersPermissionsUser(\n                data: { username: \"test\", email: \"test\", password: \"test\" }\n              ) {\n                data {\n                  id\n                  attributes {\n                    username\n                  }\n                }\n              }\n            }\n          `\n        }\n      });\n      expect(res.statusCode).toBe(401);\n      expect(res.body).toMatchObject({\n        error: {\n          status: 401,\n          name: 'UnauthorizedError',\n          message: 'Missing or invalid credentials',\n          details: {}\n        }\n      });\n    });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "updateUser is forbidden to public",
            "suites": [
                "Test Graphql user service",
                "Check updateUser authorizations"
            ],
            "updatePoint": {
                "line": 96,
                "column": 43
            },
            "line": 96,
            "code": "    test('updateUser is forbidden to public', async () => {\n      const rq = createRequest({\n        strapi\n      });\n      const res = await rq({\n        url: '/graphql',\n        method: 'POST',\n        body: {\n          query:\n          /* GraphQL */\n          `\n            mutation {\n              updateUsersPermissionsUser(\n                id: 1\n                data: { username: \"test\", email: \"test\", password: \"test\" }\n              ) {\n                data {\n                  id\n                  attributes {\n                    username\n                  }\n                }\n              }\n            }\n          `\n        }\n      });\n      expect(res.statusCode).toBe(200);\n      expect(res.body).toMatchObject({\n        data: null,\n        errors: [{\n          message: 'Forbidden access'\n        }]\n      });\n    });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "updateUser is forbidden for admins",
            "suites": [
                "Test Graphql user service",
                "Check updateUser authorizations"
            ],
            "updatePoint": {
                "line": 131,
                "column": 44
            },
            "line": 131,
            "code": "    test('updateUser is forbidden for admins', async () => {\n      const res = await authReq({\n        url: '/graphql',\n        method: 'POST',\n        body: {\n          query:\n          /* GraphQL */\n          `\n            mutation {\n              updateUsersPermissionsUser(\n                id: 1\n                data: { username: \"test\", email: \"test\", password: \"test\" }\n              ) {\n                data {\n                  id\n                  attributes {\n                    username\n                  }\n                }\n              }\n            }\n          `\n        }\n      });\n      expect(res.statusCode).toBe(401);\n      expect(res.body).toMatchObject({\n        error: {\n          status: 401,\n          name: 'UnauthorizedError',\n          message: 'Missing or invalid credentials',\n          details: {}\n        }\n      });\n    });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "deleteUser is forbidden to public",
            "suites": [
                "Test Graphql user service",
                "Check updateUser authorizations",
                "Check deleteUser authorizations"
            ],
            "updatePoint": {
                "line": 166,
                "column": 45
            },
            "line": 166,
            "code": "      test('deleteUser is forbidden to public', async () => {\n        const rq = createRequest({\n          strapi\n        });\n        const res = await rq({\n          url: '/graphql',\n          method: 'POST',\n          body: {\n            query:\n            /* GraphQL */\n            `\n              mutation deleteUser {\n                deleteUsersPermissionsUser(id: 1) {\n                  data {\n                    id\n                    attributes {\n                      username\n                    }\n                  }\n                }\n              }\n            `\n          }\n        });\n        expect(res.statusCode).toBe(200);\n        expect(res.body).toMatchObject({\n          data: null,\n          errors: [{\n            message: 'Forbidden access'\n          }]\n        });\n      });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "deleteUser is authorized for admins",
            "suites": [
                "Test Graphql user service",
                "Check updateUser authorizations",
                "Check deleteUser authorizations"
            ],
            "updatePoint": {
                "line": 198,
                "column": 47
            },
            "line": 198,
            "code": "      test('deleteUser is authorized for admins', async () => {\n        const res = await authReq({\n          url: '/graphql',\n          method: 'POST',\n          body: {\n            query:\n            /* GraphQL */\n            `\n              mutation deleteUser {\n                deleteUsersPermissionsUser(id: 1) {\n                  data {\n                    id\n                    attributes {\n                      username\n                    }\n                  }\n                }\n              }\n            `\n          }\n        });\n        expect(res.statusCode).toBe(401);\n        expect(res.body).toMatchObject({\n          error: {\n            status: 401,\n            name: 'UnauthorizedError',\n            message: 'Missing or invalid credentials',\n            details: {}\n          }\n        });\n      });",
            "file": "graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Register a user",
            "suites": [
                "Test Graphql Users API End to End",
                "Test register and login"
            ],
            "updatePoint": {
                "line": 39,
                "column": 25
            },
            "line": 39,
            "code": "    test('Register a user', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation register($input: UsersPermissionsRegisterInput!) {\n            register(input: $input) {\n              jwt\n              user {\n                id\n                email\n              }\n            }\n          }\n        `,\n        variables: {\n          input: user\n        }\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          register: {\n            jwt: expect.any(String),\n            user: {\n              id: expect.any(String),\n              email: user.email\n            }\n          }\n        }\n      });\n      data.user = res.body.data.register.user;\n    });",
            "file": "users-graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Log in a user",
            "suites": [
                "Test Graphql Users API End to End",
                "Test register and login"
            ],
            "updatePoint": {
                "line": 75,
                "column": 23
            },
            "line": 75,
            "code": "    test('Log in a user', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation login($input: UsersPermissionsLoginInput!) {\n            login(input: $input) {\n              jwt\n              user {\n                id\n                email\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            identifier: user.username,\n            password: user.password\n          }\n        }\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          login: {\n            jwt: expect.any(String),\n            user: {\n              id: expect.any(String),\n              email: user.email\n            }\n          }\n        }\n      }); // Use the JWT returned by the login request to\n      // authentify the next queries or mutations\n\n      rq.setLoggedUser(user).setToken(res.body.data.login.jwt);\n      data.user = res.body.data.login.user;\n    });",
            "file": "users-graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        },
        {
            "name": "Delete a user",
            "suites": [
                "Test Graphql Users API End to End",
                "Test register and login"
            ],
            "updatePoint": {
                "line": 117,
                "column": 23
            },
            "line": 117,
            "code": "    test('Delete a user', async () => {\n      const res = await graphqlQuery({\n        query:\n        /* GraphQL */\n        `\n          mutation deleteUser($id: ID!) {\n            deleteUsersPermissionsUser(id: $id) {\n              data {\n                attributes {\n                  email\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          id: data.user.id\n        }\n      });\n      const {\n        body\n      } = res;\n      expect(res.statusCode).toBe(200);\n      expect(body).toMatchObject({\n        data: {\n          deleteUsersPermissionsUser: {\n            data: {\n              attributes: {\n                email: data.user.email\n              }\n            }\n          }\n        }\n      });\n    });",
            "file": "users-graphql.test.e2e.js",
            "skipped": false,
            "dir": "packages/plugins/users-permissions/tests"
        }
    ],
    "badge": "strapi__strapi.svg"
}