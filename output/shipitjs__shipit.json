{"repo":"shipitjs/shipit","url":"https://github.com/shipitjs/shipit","branch":"master","configs":[{"package":"shipit-cli","lang":"js","dir":"packages/shipit-cli/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"shipit-deploy","lang":"js","dir":"packages/shipit-deploy/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"ssh-pool","lang":"js","dir":"packages/ssh-pool/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should run a local task","suites":["shipit-cli"],"updatePoint":{"line":7,"column":29,"index":321},"line":7,"code":"  it('should run a local task', async () => {\n    let {\n      stdout\n    } = await exec(`FORCE_COLOR=0 ${babelNode} ${shipitCli} --shipitfile ${shipitFile} test localHello`);\n    stdout = stdout.trim();\n    expect(stdout).toMatch(/Running 'localHello' task.../);\n    expect(stdout).toMatch(/Running \"echo \"hello\"\" on local./);\n    expect(stdout).toMatch(/@ hello/);\n    expect(stdout).toMatch(/Finished 'localHello' after/);\n  }, 10000);","file":"integration.test.js","skipped":false,"dir":"packages/shipit-cli/tests"},{"name":"should run a remote task","suites":["shipit-cli"],"updatePoint":{"line":17,"column":30,"index":760},"line":17,"code":"  it('should run a remote task', async () => {\n    let {\n      stdout\n    } = await exec(`FORCE_COLOR=0 ${babelNode} ${shipitCli} --shipitfile ${shipitFile} test remoteUser`);\n    stdout = stdout.trim();\n    expect(stdout).toMatch(/Running 'remoteUser' task.../);\n    expect(stdout).toMatch(/Running \"echo \\$USER\" on host \"test.shipitjs.com\"./);\n    expect(stdout).toMatch(/@test.shipitjs.com deploy/);\n    expect(stdout).toMatch(/Finished 'remoteUser' after/);\n  }, 10000);","file":"integration.test.js","skipped":false,"dir":"packages/shipit-cli/tests"},{"name":"should work with \"~\"","suites":["shipit-cli"],"updatePoint":{"line":27,"column":26,"index":1231},"line":27,"code":"  it('should work with \"~\"', async () => {\n    const {\n      stdout\n    } = await exec(`${babelNode} ${shipitCli} --shipitfile ${shipitFile} test cwdSsh`);\n    expect(stdout).toMatch(/@test.shipitjs.com \\/home\\/deploy\\/\\.ssh/);\n  }, 10000);","file":"integration.test.js","skipped":false,"dir":"packages/shipit-cli/tests"},{"name":"should run a local task","suites":["shipit-cli"],"updatePoint":{"line":8,"column":29,"index":390},"line":8,"code":"  it('should run a local task', async () => {\n    try {\n      await exec(`${babelNode} ${shipitCli} --shipitfile ${shipitFile} test deploy`);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error.stdout);\n      throw error;\n    }\n    const {\n      stdout: lsReleases\n    } = await exec(`${babelNode} ${shipitCli} --shipitfile ${shipitFile} test ls-releases`);\n    const latestRelease = lsReleases.split('\\n').reverse()[2].match(/\\d{14}/)[0];\n    const {\n      stdout: lsCurrent\n    } = await exec(`${babelNode} ${shipitCli} --shipitfile ${shipitFile} test ls-current`);\n    const currentRelease = lsCurrent.split('\\n')[3].match(/releases\\/(\\d{14})/)[1];\n    expect(latestRelease).toBe(currentRelease);\n  }, 30000);","file":"integration.test.js","skipped":false,"dir":"packages/shipit-deploy/tests"},{"name":"should run a command remotely","suites":["ssh-pool"],"updatePoint":{"line":11,"column":35,"index":359},"line":11,"code":"  it('should run a command remotely', async () => {\n    const [{\n      stdout\n    }] = await pool.run('hostname');\n    expect(stdout).toBe('shipit-test\\n');\n  }, 10000);","file":"integration.test.js","skipped":false,"dir":"packages/ssh-pool/tests"},{"name":"should escape command properly","suites":["ssh-pool"],"updatePoint":{"line":17,"column":36,"index":530},"line":17,"code":"  it('should escape command properly', async () => {\n    const [{\n      stdout: first\n    }] = await pool.run('echo $USER');\n    expect(first).toBe('deploy\\n');\n    const [{\n      stdout: second\n    }] = await pool.run(\"echo '$USER'\");\n    expect(second).toBe('$USER\\n');\n  }, 10000);","file":"integration.test.js","skipped":false,"dir":"packages/ssh-pool/tests"},{"name":"should copy to remote","suites":["ssh-pool"],"updatePoint":{"line":27,"column":27,"index":806},"line":27,"code":"  it('should copy to remote', async () => {\n    const time = +new Date();\n    const sourceFile = resolve(__dirname, '__fixtures__/test.txt');\n    const targetFile = `${__dirname}/__fixtures__/test.${time}.txt`;\n    copyFileSync(sourceFile, targetFile);\n    try {\n      await pool.scpCopyToRemote(targetFile, './');\n      const [{\n        stdout: first\n      }] = await pool.run(`cd ./ && cat ${basename(targetFile)}`);\n      expect(first).toBe('Hello\\n');\n    } finally {\n      unlinkSync(targetFile);\n    }\n  }, 1e6);","file":"integration.test.js","skipped":false,"dir":"packages/ssh-pool/tests"}]}