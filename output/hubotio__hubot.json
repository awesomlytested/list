{"repo":"hubotio/hubot","url":"https://github.com/hubotio/hubot","branch":"master","configs":[{"package":"hubot","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"can load adapter by name","suites":["Adapter"],"updatePoint":{"line":17,"column":30,"index":415},"line":17,"code":"  it('can load adapter by name');","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"assigns robot","suites":["Adapter","Public API"],"updatePoint":{"line":22,"column":21,"index":562},"line":22,"code":"    it('assigns robot', function () {\n      expect(this.adapter.robot).to.equal(this.robot);\n    });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","send"],"updatePoint":{"line":26,"column":23,"index":700},"line":26,"code":"      it('is a function', function () {\n        expect(this.adapter.send).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","send"],"updatePoint":{"line":29,"column":22,"index":804},"line":29,"code":"      it('does nothing', function () {\n        this.adapter.send({}, 'nothing');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","reply"],"updatePoint":{"line":34,"column":23,"index":940},"line":34,"code":"      it('is a function', function () {\n        expect(this.adapter.reply).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","reply"],"updatePoint":{"line":37,"column":22,"index":1045},"line":37,"code":"      it('does nothing', function () {\n        this.adapter.reply({}, 'nothing');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","topic"],"updatePoint":{"line":42,"column":23,"index":1182},"line":42,"code":"      it('is a function', function () {\n        expect(this.adapter.topic).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","topic"],"updatePoint":{"line":45,"column":22,"index":1287},"line":45,"code":"      it('does nothing', function () {\n        this.adapter.topic({}, 'nothing');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","play"],"updatePoint":{"line":50,"column":23,"index":1423},"line":50,"code":"      it('is a function', function () {\n        expect(this.adapter.play).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","play"],"updatePoint":{"line":53,"column":22,"index":1527},"line":53,"code":"      it('does nothing', function () {\n        this.adapter.play({}, 'nothing');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","run"],"updatePoint":{"line":58,"column":23,"index":1661},"line":58,"code":"      it('is a function', function () {\n        expect(this.adapter.run).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","run"],"updatePoint":{"line":61,"column":22,"index":1764},"line":61,"code":"      it('does nothing', function () {\n        this.adapter.run();\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"is a function","suites":["Adapter","Public API","close"],"updatePoint":{"line":66,"column":23,"index":1886},"line":66,"code":"      it('is a function', function () {\n        expect(this.adapter.close).to.be.a('function');\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"does nothing","suites":["Adapter","Public API","close"],"updatePoint":{"line":69,"column":22,"index":1991},"line":69,"code":"      it('does nothing', function () {\n        this.adapter.close();\n      });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"dispatches received messages to the robot","suites":["Adapter","Public API","close"],"updatePoint":{"line":74,"column":47,"index":2109},"line":74,"code":"  it('dispatches received messages to the robot', function () {\n    this.robot.receive = sinon.spy();\n    this.adapter = new Adapter(this.robot);\n    this.message = sinon.spy();\n    this.adapter.receive(this.message);\n    expect(this.robot.receive).to.have.been.calledWith(this.message);\n  });","file":"adapter_test.js","skipped":false,"dir":"test"},{"name":"performs a proper merge with the new data taking precedent","suites":["Brain","Unit Tests","#mergeData"],"updatePoint":{"line":43,"column":68,"index":1247},"line":43,"code":"      it('performs a proper merge with the new data taking precedent', function () {\n        this.brain.data = {\n          1: 'old',\n          2: 'old'\n        };\n        this.brain.mergeData({\n          2: 'new'\n        });\n        expect(this.brain.data).to.deep.equal({\n          1: 'old',\n          2: 'new'\n        });\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"emits a loaded event with the new data","suites":["Brain","Unit Tests","#mergeData"],"updatePoint":{"line":56,"column":48,"index":1561},"line":56,"code":"      it('emits a loaded event with the new data', function () {\n        sinon.spy(this.brain, 'emit');\n        this.brain.mergeData({});\n        expect(this.brain.emit).to.have.been.calledWith('loaded', this.brain.data);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"coerces loaded data into User objects","suites":["Brain","Unit Tests","#mergeData"],"updatePoint":{"line":61,"column":47,"index":1792},"line":61,"code":"      it('coerces loaded data into User objects', function () {\n        this.brain.mergeData({\n          users: {\n            4: {\n              name: 'new',\n              id: '4'\n            }\n          }\n        });\n        const user = this.brain.userForId('4');\n        expect(user.constructor.name).to.equal('User');\n        expect(user.id).to.equal('4');\n        expect(user.name).to.equal('new');\n        expect(isCircular(this.brain)).to.be.false;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"emits a save event","suites":["Brain","Unit Tests","#save"],"updatePoint":{"line":77,"column":50,"index":2269},"line":77,"code":"    describe('#save', () => it('emits a save event', function () {\n      sinon.spy(this.brain, 'emit');\n      this.brain.save();\n      expect(this.brain.emit).to.have.been.calledWith('save', this.brain.data);\n    }));","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"updates the auto-save interval","suites":["Brain","Unit Tests","#resetSaveInterval"],"updatePoint":{"line":82,"column":75,"index":2512},"line":82,"code":"    describe('#resetSaveInterval', () => it('updates the auto-save interval', function () {\n      sinon.spy(this.brain, 'save');\n      // default is 5s\n      this.brain.resetSaveInterval(10);\n      // make sure autosave is on\n      this.brain.setAutoSave(true);\n      this.clock.tick(5000);\n      // old interval has passed\n      expect(this.brain.save).to.not.have.been.called;\n      this.clock.tick(5000);\n      // new interval has passed\n      expect(this.brain.save).to.have.been.calledOnce;\n    }));","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"saves","suites":["Brain","Unit Tests","#close"],"updatePoint":{"line":96,"column":15,"index":2994},"line":96,"code":"      it('saves', function () {\n        sinon.spy(this.brain, 'save');\n        this.brain.close();\n        expect(this.brain.save).to.have.been.calledOnce;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"emits a close event","suites":["Brain","Unit Tests","#close"],"updatePoint":{"line":101,"column":29,"index":3174},"line":101,"code":"      it('emits a close event', function () {\n        sinon.spy(this.brain, 'emit');\n        this.brain.close();\n        expect(this.brain.emit).to.have.been.calledWith('close');\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"saves before emitting the close event","suites":["Brain","Unit Tests","#close"],"updatePoint":{"line":106,"column":47,"index":3381},"line":106,"code":"      it('saves before emitting the close event', function () {\n        sinon.spy(this.brain, 'save');\n        sinon.spy(this.brain, 'emit').withArgs('close');\n        this.brain.close();\n        expect(this.brain.save).to.have.been.calledBefore(this.brain.emit);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"stops auto-saving","suites":["Brain","Unit Tests","#close"],"updatePoint":{"line":112,"column":27,"index":3635},"line":112,"code":"      it('stops auto-saving', function () {\n        // make sure autosave is on\n        this.brain.setAutoSave(true);\n        this.brain.close();\n\n        // set up the spy after because 'close' calls 'save'\n        sinon.spy(this.brain, 'save');\n        this.clock.tick(2 * 5000);\n        expect(this.brain.save).to.not.have.been.called;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns the saved value","suites":["Brain","Unit Tests","#get"],"updatePoint":{"line":124,"column":33,"index":4033},"line":124,"code":"      it('returns the saved value', function () {\n        this.brain.data._private['test-key'] = 'value';\n        expect(this.brain.get('test-key')).to.equal('value');\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns null if object is not found","suites":["Brain","Unit Tests","#get"],"updatePoint":{"line":128,"column":45,"index":4223},"line":128,"code":"      it('returns null if object is not found', function () {\n        expect(this.brain.get('not a real key')).to.be.null;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"saves the value","suites":["Brain","Unit Tests","#set"],"updatePoint":{"line":133,"column":25,"index":4379},"line":133,"code":"      it('saves the value', function () {\n        this.brain.set('test-key', 'value');\n        expect(this.brain.data._private['test-key']).to.equal('value');\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"sets multiple keys at once if an object is provided","suites":["Brain","Unit Tests","#set"],"updatePoint":{"line":137,"column":61,"index":4584},"line":137,"code":"      it('sets multiple keys at once if an object is provided', function () {\n        this.brain.data._private = {\n          key1: 'val1',\n          key2: 'val1'\n        };\n        this.brain.set({\n          key2: 'val2',\n          key3: 'val2'\n        });\n        expect(this.brain.data._private).to.deep.equal({\n          key1: 'val1',\n          key2: 'val2',\n          key3: 'val2'\n        });\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"emits loaded","suites":["Brain","Unit Tests","#set"],"updatePoint":{"line":155,"column":22,"index":5058},"line":155,"code":"      it('emits loaded', function () {\n        sinon.spy(this.brain, 'emit');\n        this.brain.set('test-key', 'value');\n        expect(this.brain.emit).to.have.been.calledWith('loaded', this.brain.data);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns the brain","suites":["Brain","Unit Tests","#set"],"updatePoint":{"line":160,"column":27,"index":5280},"line":160,"code":"      it('returns the brain', function () {\n        expect(this.brain.set('test-key', 'value')).to.equal(this.brain);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"removes the specified key","suites":["Brain","Unit Tests","#remove"],"updatePoint":{"line":164,"column":59,"index":5448},"line":164,"code":"    describe('#remove', () => it('removes the specified key', function () {\n      this.brain.data._private['test-key'] = 'value';\n      this.brain.remove('test-key');\n      expect(this.brain.data._private).to.not.include.keys('test-key');\n    }));","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns the user object","suites":["Brain","Unit Tests","#userForId"],"updatePoint":{"line":170,"column":33,"index":5711},"line":170,"code":"      it('returns the user object', function () {\n        expect(this.brain.userForId(1)).to.equal(this.user1);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"does an exact match","suites":["Brain","Unit Tests","#userForId"],"updatePoint":{"line":173,"column":29,"index":5829},"line":173,"code":"      it('does an exact match', function () {\n        const user4 = this.brain.userForId('FOUR');\n        expect(this.brain.userForId('four')).to.not.equal(user4);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"recreates the user if the room option differs from the user object","suites":["Brain","Unit Tests","#userForId"],"updatePoint":{"line":180,"column":76,"index":6153},"line":180,"code":"      it('recreates the user if the room option differs from the user object', function () {\n        expect(this.brain.userForId(1).room).to.be.undefined;\n\n        // undefined -> having a room\n        const newUser1 = this.brain.userForId(1, {\n          room: 'room1'\n        });\n        expect(newUser1).to.not.equal(this.user1);\n\n        // changing the room\n        const newUser2 = this.brain.userForId(1, {\n          room: 'room2'\n        });\n        expect(newUser2).to.not.equal(newUser1);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"creates a new User","suites":["Brain","Unit Tests","#userForId","when there is no matching user ID"],"updatePoint":{"line":196,"column":30,"index":6681},"line":196,"code":"        it('creates a new User', function () {\n          expect(this.brain.data.users).to.not.include.key('all-new-user');\n          const newUser = this.brain.userForId('all-new-user');\n          expect(newUser).to.be.instanceof(User);\n          expect(newUser.id).to.equal('all-new-user');\n          expect(this.brain.data.users).to.include.key('all-new-user');\n        });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"passes the provided options to the new User","suites":["Brain","Unit Tests","#userForId","when there is no matching user ID"],"updatePoint":{"line":203,"column":55,"index":7082},"line":203,"code":"        it('passes the provided options to the new User', function () {\n          const newUser = this.brain.userForId('all-new-user', {\n            name: 'All New User',\n            prop: 'mine'\n          });\n          expect(newUser.name).to.equal('All New User');\n          expect(newUser.prop).to.equal('mine');\n        });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns the user with a matching name","suites":["Brain","Unit Tests","#userForName"],"updatePoint":{"line":214,"column":47,"index":7463},"line":214,"code":"      it('returns the user with a matching name', function () {\n        expect(this.brain.userForName('Guy One')).to.equal(this.user1);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"does a case-insensitive match","suites":["Brain","Unit Tests","#userForName"],"updatePoint":{"line":217,"column":39,"index":7601},"line":217,"code":"      it('does a case-insensitive match', function () {\n        expect(this.brain.userForName('guy one')).to.equal(this.user1);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns null if no user matches","suites":["Brain","Unit Tests","#userForName"],"updatePoint":{"line":220,"column":41,"index":7741},"line":220,"code":"      it('returns null if no user matches', function () {\n        expect(this.brain.userForName('not a real user')).to.be.null;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"does a case-insensitive match","suites":["Brain","Unit Tests","#usersForRawFuzzyName"],"updatePoint":{"line":225,"column":39,"index":7937},"line":225,"code":"      it('does a case-insensitive match', function () {\n        expect(this.brain.usersForRawFuzzyName('guy')).to.have.members([this.user1, this.user2]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns all matching users (prefix match) when there is not an exact match (case-insensitive)","suites":["Brain","Unit Tests","#usersForRawFuzzyName"],"updatePoint":{"line":228,"column":103,"index":8165},"line":228,"code":"      it('returns all matching users (prefix match) when there is not an exact match (case-insensitive)', function () {\n        expect(this.brain.usersForRawFuzzyName('Guy')).to.have.members([this.user1, this.user2]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns all matching users (prefix match) when there is an exact match (case-insensitive)","suites":["Brain","Unit Tests","#usersForRawFuzzyName"],"updatePoint":{"line":231,"column":99,"index":8389},"line":231,"code":"      it('returns all matching users (prefix match) when there is an exact match (case-insensitive)', function () {\n        // Matched case\n        expect(this.brain.usersForRawFuzzyName('Guy One')).to.deep.equal([this.user1, this.user2]);\n        // Mismatched case\n        expect(this.brain.usersForRawFuzzyName('guy one')).to.deep.equal([this.user1, this.user2]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns an empty array if no users match","suites":["Brain","Unit Tests","#usersForRawFuzzyName"],"updatePoint":{"line":237,"column":50,"index":8717},"line":237,"code":"      it('returns an empty array if no users match', function () {\n        const result = this.brain.usersForRawFuzzyName('not a real user');\n        expect(result).to.be.an('array');\n        expect(result).to.be.empty;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"does a case-insensitive match","suites":["Brain","Unit Tests","#usersForFuzzyName"],"updatePoint":{"line":244,"column":39,"index":8993},"line":244,"code":"      it('does a case-insensitive match', function () {\n        expect(this.brain.usersForFuzzyName('guy')).to.have.members([this.user1, this.user2]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns all matching users (prefix match) when there is not an exact match","suites":["Brain","Unit Tests","#usersForFuzzyName"],"updatePoint":{"line":247,"column":84,"index":9199},"line":247,"code":"      it('returns all matching users (prefix match) when there is not an exact match', function () {\n        expect(this.brain.usersForFuzzyName('Guy')).to.have.members([this.user1, this.user2]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns just the user when there is an exact match (case-insensitive)","suites":["Brain","Unit Tests","#usersForFuzzyName"],"updatePoint":{"line":250,"column":79,"index":9400},"line":250,"code":"      it('returns just the user when there is an exact match (case-insensitive)', function () {\n        // Matched case\n        expect(this.brain.usersForFuzzyName('Guy One')).to.deep.equal([this.user1]);\n        // Mismatched case\n        expect(this.brain.usersForFuzzyName('guy one')).to.deep.equal([this.user1]);\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns an empty array if no users match","suites":["Brain","Unit Tests","#usersForFuzzyName"],"updatePoint":{"line":256,"column":50,"index":9698},"line":256,"code":"      it('returns an empty array if no users match', function () {\n        const result = this.brain.usersForFuzzyName('not a real user');\n        expect(result).to.be.an('array');\n        expect(result).to.be.empty;\n      });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"is on by default","suites":["Brain","Auto-Save"],"updatePoint":{"line":264,"column":24,"index":9951},"line":264,"code":"    it('is on by default', function () {\n      expect(this.brain.autoSave).to.equal(true);\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"automatically saves every 5 seconds when turned on","suites":["Brain","Auto-Save"],"updatePoint":{"line":267,"column":58,"index":10084},"line":267,"code":"    it('automatically saves every 5 seconds when turned on', function () {\n      sinon.spy(this.brain, 'save');\n      this.brain.setAutoSave(true);\n      this.clock.tick(5000);\n      expect(this.brain.save).to.have.been.called;\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"does not auto-save when turned off","suites":["Brain","Auto-Save"],"updatePoint":{"line":273,"column":42,"index":10304},"line":273,"code":"    it('does not auto-save when turned off', function () {\n      sinon.spy(this.brain, 'save');\n      this.brain.setAutoSave(false);\n      this.clock.tick(2 * 5000);\n      expect(this.brain.save).to.not.have.been.called;\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"finds users by ID","suites":["Brain","User Searching"],"updatePoint":{"line":281,"column":25,"index":10565},"line":281,"code":"    it('finds users by ID', function () {\n      expect(this.brain.userForId('1')).to.equal(this.user1);\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"finds users by exact name","suites":["Brain","User Searching"],"updatePoint":{"line":284,"column":33,"index":10685},"line":284,"code":"    it('finds users by exact name', function () {\n      expect(this.brain.userForName('Guy One')).to.equal(this.user1);\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"finds users by fuzzy name (prefix match)","suites":["Brain","User Searching"],"updatePoint":{"line":287,"column":48,"index":10828},"line":287,"code":"    it('finds users by fuzzy name (prefix match)', function () {\n      const result = this.brain.usersForFuzzyName('Guy');\n      expect(result).to.have.members([this.user1, this.user2]);\n      expect(result).to.not.have.members([this.user3]);\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns User objects, not POJOs","suites":["Brain","User Searching"],"updatePoint":{"line":292,"column":39,"index":11070},"line":292,"code":"    it('returns User objects, not POJOs', function () {\n      expect(this.brain.userForId('1').constructor.name).to.equal('User');\n      for (const user of this.brain.usersForFuzzyName('Guy')) {\n        expect(user.constructor.name).to.equal('User');\n      }\n      for (const user of this.brain.usersForRawFuzzyName('Guy One')) {\n        expect(user.constructor.name).to.equal('User');\n      }\n      expect(isCircular(this.brain)).to.be.false;\n    });","file":"brain_test.js","skipped":false,"dir":"test"},{"name":"returns undefined for values not in the datastore","suites":["Datastore","global scope"],"updatePoint":{"line":32,"column":57,"index":1016},"line":32,"code":"    it('returns undefined for values not in the datastore', function () {\n      return this.robot.datastore.get('blah').then(function (value) {\n        expect(value).to.be.an('undefined');\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can store simple values","suites":["Datastore","global scope"],"updatePoint":{"line":37,"column":31,"index":1197},"line":37,"code":"    it('can store simple values', function () {\n      return this.robot.datastore.set('key', 'value').then(() => {\n        return this.robot.datastore.get('key').then(value => {\n          expect(value).to.equal('value');\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can store arbitrary JavaScript values","suites":["Datastore","global scope"],"updatePoint":{"line":44,"column":45,"index":1462},"line":44,"code":"    it('can store arbitrary JavaScript values', function () {\n      const object = {\n        name: 'test',\n        data: [1, 2, 3]\n      };\n      return this.robot.datastore.set('key', object).then(() => {\n        return this.robot.datastore.get('key').then(value => {\n          expect(value.name).to.equal('test');\n          expect(value.data).to.deep.equal([1, 2, 3]);\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can dig inside objects for values","suites":["Datastore","global scope"],"updatePoint":{"line":56,"column":41,"index":1859},"line":56,"code":"    it('can dig inside objects for values', function () {\n      const object = {\n        a: 'one',\n        b: 'two'\n      };\n      return this.robot.datastore.set('key', object).then(() => {\n        return this.robot.datastore.getObject('key', 'a').then(value => {\n          expect(value).to.equal('one');\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can set individual keys inside objects","suites":["Datastore","global scope"],"updatePoint":{"line":67,"column":46,"index":2200},"line":67,"code":"    it('can set individual keys inside objects', function () {\n      const object = {\n        a: 'one',\n        b: 'two'\n      };\n      return this.robot.datastore.set('object', object).then(() => {\n        return this.robot.datastore.setObject('object', 'c', 'three').then(() => {\n          return this.robot.datastore.get('object').then(value => {\n            expect(value.a).to.equal('one');\n            expect(value.b).to.equal('two');\n            expect(value.c).to.equal('three');\n          });\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"creates an object from scratch when none exists","suites":["Datastore","global scope"],"updatePoint":{"line":82,"column":55,"index":2740},"line":82,"code":"    it('creates an object from scratch when none exists', function () {\n      return this.robot.datastore.setObject('object', 'key', 'value').then(() => {\n        return this.robot.datastore.get('object').then(value => {\n          const expected = {\n            key: 'value'\n          };\n          expect(value).to.deep.equal(expected);\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can append to an existing array","suites":["Datastore","global scope"],"updatePoint":{"line":92,"column":39,"index":3091},"line":92,"code":"    it('can append to an existing array', function () {\n      return this.robot.datastore.set('array', [1, 2, 3]).then(() => {\n        return this.robot.datastore.setArray('array', 4).then(() => {\n          return this.robot.datastore.get('array').then(value => {\n            expect(value).to.deep.equal([1, 2, 3, 4]);\n          });\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"creates an array from scratch when none exists","suites":["Datastore","global scope"],"updatePoint":{"line":101,"column":54,"index":3469},"line":101,"code":"    it('creates an array from scratch when none exists', function () {\n      return this.robot.datastore.setArray('array', 4).then(() => {\n        return this.robot.datastore.get('array').then(value => {\n          expect(value).to.deep.equal([4]);\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"has access to the robot object","suites":["Datastore","User scope"],"updatePoint":{"line":110,"column":38,"index":3776},"line":110,"code":"    it('has access to the robot object', function () {\n      const user = this.robot.brain.userForId('1');\n      expect(user._getRobot()).to.equal(this.robot);\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"can store user data which is separate from global data","suites":["Datastore","User scope"],"updatePoint":{"line":114,"column":62,"index":3968},"line":114,"code":"    it('can store user data which is separate from global data', function () {\n      const user = this.robot.brain.userForId('1');\n      return user.set('blah', 'blah').then(() => {\n        return user.get('blah').then(userBlah => {\n          return this.robot.datastore.get('blah').then(datastoreBlah => {\n            expect(userBlah).to.not.equal(datastoreBlah);\n            expect(userBlah).to.equal('blah');\n            expect(datastoreBlah).to.be.an('undefined');\n          });\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"stores user data separate per-user","suites":["Datastore","User scope"],"updatePoint":{"line":126,"column":42,"index":4461},"line":126,"code":"    it('stores user data separate per-user', function () {\n      const userOne = this.robot.brain.userForId('1');\n      const userTwo = this.robot.brain.userForId('2');\n      return userOne.set('blah', 'blah').then(() => {\n        return userOne.get('blah').then(valueOne => {\n          return userTwo.get('blah').then(valueTwo => {\n            expect(valueOne).to.not.equal(valueTwo);\n            expect(valueOne).to.equal('blah');\n            expect(valueTwo).to.be.an('undefined');\n          });\n        });\n      });\n    });","file":"datastore_test.js","skipped":false,"dir":"test"},{"name":"exports User class","suites":["hubot/es2015"],"updatePoint":{"line":30,"column":24,"index":877},"line":30,"code":"  it('exports User class', function () {\n    class MyUser extends User {}\n    const user = new MyUser('id123', {\n      foo: 'bar'\n    });\n    expect(user).to.be.an.instanceof(User);\n    expect(user.id).to.equal('id123');\n    expect(user.foo).to.equal('bar');\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Brain class","suites":["hubot/es2015"],"updatePoint":{"line":39,"column":25,"index":1143},"line":39,"code":"  it('exports Brain class', function () {\n    class MyBrain extends Brain {}\n    const robotMock = {\n      on: sinon.spy()\n    };\n    const brain = new MyBrain(robotMock);\n    expect(brain).to.be.an.instanceof(Brain);\n    expect(robotMock.on).to.have.been.called;\n    brain.set('foo', 'bar');\n    expect(brain.get('foo')).to.equal('bar');\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Robot class","suites":["hubot/es2015"],"updatePoint":{"line":50,"column":25,"index":1488},"line":50,"code":"  it('exports Robot class', function () {\n    mockery.enable({\n      warnOnReplace: false,\n      warnOnUnregistered: false\n    });\n    mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'));\n    class MyRobot extends Robot {}\n    const robot = new MyRobot(null, 'mock-adapter', false, 'TestHubot');\n    expect(robot).to.be.an.instanceof(Robot);\n    expect(robot.name).to.equal('TestHubot');\n    mockery.disable();\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Adapter class","suites":["hubot/es2015"],"updatePoint":{"line":62,"column":27,"index":1934},"line":62,"code":"  it('exports Adapter class', function () {\n    class MyAdapter extends Adapter {}\n    const adapter = new MyAdapter('myrobot');\n    expect(adapter).to.be.an.instanceof(Adapter);\n    expect(adapter.robot).to.equal('myrobot');\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Response class","suites":["hubot/es2015"],"updatePoint":{"line":68,"column":28,"index":2167},"line":68,"code":"  it('exports Response class', function () {\n    class MyResponse extends Response {}\n    const robotMock = 'robotMock';\n    const messageMock = {\n      room: 'room',\n      user: 'user'\n    };\n    const matchMock = 'matchMock';\n    const response = new MyResponse(robotMock, messageMock, matchMock);\n    expect(response).to.be.an.instanceof(Response);\n    expect(response.message).to.equal(messageMock);\n    expect(response.match).to.equal(matchMock);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Listener class","suites":["hubot/es2015"],"updatePoint":{"line":81,"column":28,"index":2625},"line":81,"code":"  it('exports Listener class', function () {\n    class MyListener extends Listener {}\n    const robotMock = 'robotMock';\n    const matcherMock = 'matchMock';\n    const callback = sinon.spy();\n    const listener = new MyListener(robotMock, matcherMock, callback);\n    expect(listener).to.be.an.instanceof(Listener);\n    expect(listener.robot).to.equal(robotMock);\n    expect(listener.matcher).to.equal(matcherMock);\n    expect(listener.options).to.deep.include({\n      id: null\n    });\n    expect(listener.callback).to.equal(callback);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports TextListener class","suites":["hubot/es2015"],"updatePoint":{"line":95,"column":32,"index":3170},"line":95,"code":"  it('exports TextListener class', function () {\n    class MyTextListener extends TextListener {}\n    const robotMock = 'robotMock';\n    const regex = /regex/;\n    const callback = sinon.spy();\n    const textListener = new MyTextListener(robotMock, regex, callback);\n    expect(textListener).to.be.an.instanceof(TextListener);\n    expect(textListener.regex).to.equal(regex);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports Message class","suites":["hubot/es2015"],"updatePoint":{"line":104,"column":27,"index":3546},"line":104,"code":"  it('exports Message class', function () {\n    class MyMessage extends Message {}\n    const userMock = {\n      room: 'room'\n    };\n    const message = new MyMessage(userMock);\n    expect(message).to.be.an.instanceof(Message);\n    expect(message.user).to.equal(userMock);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports TextMessage class","suites":["hubot/es2015"],"updatePoint":{"line":113,"column":31,"index":3828},"line":113,"code":"  it('exports TextMessage class', function () {\n    class MyTextMessage extends TextMessage {}\n    const userMock = {\n      room: 'room'\n    };\n    const textMessage = new MyTextMessage(userMock, 'bla blah');\n    expect(textMessage).to.be.an.instanceof(TextMessage);\n    expect(textMessage).to.be.an.instanceof(Message);\n    expect(textMessage.text).to.equal('bla blah');\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports EnterMessage class","suites":["hubot/es2015"],"updatePoint":{"line":123,"column":32,"index":4207},"line":123,"code":"  it('exports EnterMessage class', function () {\n    class MyEnterMessage extends EnterMessage {}\n    const userMock = {\n      room: 'room'\n    };\n    const enterMessage = new MyEnterMessage(userMock);\n    expect(enterMessage).to.be.an.instanceof(EnterMessage);\n    expect(enterMessage).to.be.an.instanceof(Message);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports LeaveMessage class","suites":["hubot/es2015"],"updatePoint":{"line":132,"column":32,"index":4530},"line":132,"code":"  it('exports LeaveMessage class', function () {\n    class MyLeaveMessage extends LeaveMessage {}\n    const userMock = {\n      room: 'room'\n    };\n    const leaveMessage = new MyLeaveMessage(userMock);\n    expect(leaveMessage).to.be.an.instanceof(LeaveMessage);\n    expect(leaveMessage).to.be.an.instanceof(Message);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports TopicMessage class","suites":["hubot/es2015"],"updatePoint":{"line":141,"column":32,"index":4853},"line":141,"code":"  it('exports TopicMessage class', function () {\n    class MyTopicMessage extends TopicMessage {}\n    const userMock = {\n      room: 'room'\n    };\n    const topicMessage = new MyTopicMessage(userMock);\n    expect(topicMessage).to.be.an.instanceof(TopicMessage);\n    expect(topicMessage).to.be.an.instanceof(Message);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports CatchAllMessage class","suites":["hubot/es2015"],"updatePoint":{"line":150,"column":35,"index":5179},"line":150,"code":"  it('exports CatchAllMessage class', function () {\n    class MyCatchAllMessage extends CatchAllMessage {}\n    const messageMock = {\n      user: {\n        room: 'room'\n      }\n    };\n    const catchAllMessage = new MyCatchAllMessage(messageMock);\n    expect(catchAllMessage).to.be.an.instanceof(CatchAllMessage);\n    expect(catchAllMessage).to.be.an.instanceof(Message);\n    expect(catchAllMessage.message).to.equal(messageMock);\n    expect(catchAllMessage.user).to.equal(messageMock.user);\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"exports loadBot function","suites":["hubot/es2015"],"updatePoint":{"line":163,"column":30,"index":5671},"line":163,"code":"  it('exports loadBot function', function () {\n    sinon.stub(Hubot, 'Robot');\n    expect(loadBot).to.be.a('function');\n    Hubot.loadBot('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias');\n    expect(Hubot.Robot).to.be.called.calledWith('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias');\n  });","file":"es2015_test.js","skipped":false,"dir":"test"},{"name":"calls the matcher","suites":["Listener","Unit Tests","#call"],"updatePoint":{"line":48,"column":27,"index":1304},"line":48,"code":"      it('calls the matcher', function (done) {\n        const callback = sinon.spy();\n        const testMatcher = sinon.spy();\n        const testMessage = {};\n        const testListener = new Listener(this.robot, testMatcher, callback);\n        testListener.call(testMessage, function (_) {\n          expect(testMatcher).to.have.been.calledWith(testMessage);\n          done();\n        });\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"passes the matcher result on to the listener callback","suites":["Listener","Unit Tests","#call"],"updatePoint":{"line":58,"column":63,"index":1739},"line":58,"code":"      it('passes the matcher result on to the listener callback', function (done) {\n        const matcherResult = {};\n        const testMatcher = sinon.stub().returns(matcherResult);\n        const testMessage = {};\n        const listenerCallback = response => expect(response.match).to.be.equal(matcherResult);\n\n        // sanity check; matcherResult must be truthy\n        expect(matcherResult).to.be.ok;\n        const testListener = new Listener(this.robot, testMatcher, listenerCallback);\n        testListener.call(testMessage, function (result) {\n          // sanity check; message should have been processed\n          expect(testMatcher).to.have.been.called;\n          expect(result).to.be.ok;\n          done();\n        });\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"executes the listener callback","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":80,"column":42,"index":2700},"line":80,"code":"        it('executes the listener callback', function (done) {\n          const listenerCallback = sinon.spy();\n          const testMessage = {};\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, function (_) {\n            expect(listenerCallback).to.have.been.called;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"returns true","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":89,"column":24,"index":3057},"line":89,"code":"        it('returns true', function () {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          const result = testListener.call(testMessage);\n          expect(result).to.be.ok;\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the provided callback with true","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":95,"column":49,"index":3329},"line":95,"code":"        it('calls the provided callback with true', function (done) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          testListener.call(testMessage, function (result) {\n            expect(result).to.be.ok;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the provided callback after the function returns","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":103,"column":66,"index":3662},"line":103,"code":"        it('calls the provided callback after the function returns', function (done) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          let finished = false;\n          testListener.call(testMessage, function (result) {\n            expect(finished).to.be.ok;\n            done();\n          });\n          finished = true;\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"handles uncaught errors from the listener callback","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":113,"column":62,"index":4052},"line":113,"code":"        it('handles uncaught errors from the listener callback', function (done) {\n          const testMessage = {};\n          const theError = new Error();\n          const listenerCallback = function (response) {\n            throw theError;\n          };\n          this.robot.emit = function (name, err, response) {\n            expect(name).to.equal('error');\n            expect(err).to.equal(theError);\n            expect(response.message).to.equal(testMessage);\n            done();\n          };\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, sinon.spy());\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the provided callback with true if there is an error thrown by the listener callback","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":128,"column":102,"index":4726},"line":128,"code":"        it('calls the provided callback with true if there is an error thrown by the listener callback', function (done) {\n          const testMessage = {};\n          const theError = new Error();\n          const listenerCallback = function (response) {\n            throw theError;\n          };\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, function (result) {\n            expect(result).to.be.ok;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the listener callback with a Response that wraps the Message","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":140,"column":78,"index":5211},"line":140,"code":"        it('calls the listener callback with a Response that wraps the Message', function (done) {\n          const testMessage = {};\n          const listenerCallback = function (response) {\n            expect(response.message).to.equal(testMessage);\n            done();\n          };\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, sinon.spy());\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"passes through the provided middleware stack","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":149,"column":56,"index":5609},"line":149,"code":"        it('passes through the provided middleware stack', function (testDone) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          const testMiddleware = {\n            execute(context, next, done) {\n              expect(context.listener).to.be.equal(testListener);\n              expect(context.response).to.be.instanceof(Response);\n              expect(context.response.message).to.be.equal(testMessage);\n              expect(next).to.be.a('function');\n              expect(done).to.be.a('function');\n              testDone();\n            }\n          };\n          testListener.call(testMessage, testMiddleware, sinon.spy());\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"executes the listener callback if middleware succeeds","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":164,"column":65,"index":6317},"line":164,"code":"        it('executes the listener callback if middleware succeeds', function (testDone) {\n          const listenerCallback = sinon.spy();\n          const testMessage = {};\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, function (result) {\n            expect(listenerCallback).to.have.been.called;\n            // Matcher matched, so we true\n            expect(result).to.be.ok;\n            testDone();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"does not execute the listener callback if middleware fails","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":175,"column":70,"index":6813},"line":175,"code":"        it('does not execute the listener callback if middleware fails', function (testDone) {\n          const listenerCallback = sinon.spy();\n          const testMessage = {};\n          const testListener = this.createListener(listenerCallback);\n          const testMiddleware = {\n            execute(context, next, done) {\n              // Middleware fails\n              done();\n            }\n          };\n          testListener.call(testMessage, testMiddleware, function (result) {\n            expect(listenerCallback).to.not.have.been.called;\n            // Matcher still matched, so we true\n            expect(result).to.be.ok;\n            testDone();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"unwinds the middleware stack if there is an error in the listener callback","suites":["Listener","Unit Tests","#call","if the matcher returns true"],"updatePoint":{"line":192,"column":86,"index":7512},"line":192,"code":"        it('unwinds the middleware stack if there is an error in the listener callback', function (testDone) {\n          const listenerCallback = sinon.stub().throws(new Error());\n          const testMessage = {};\n          let extraDoneFunc = null;\n          const testListener = this.createListener(listenerCallback);\n          const testMiddleware = {\n            execute(context, next, done) {\n              extraDoneFunc = sinon.spy(done);\n              next(context, extraDoneFunc);\n            }\n          };\n          testListener.call(testMessage, testMiddleware, function (result) {\n            // Listener callback was called (and failed)\n            expect(listenerCallback).to.have.been.called;\n            // Middleware stack was unwound correctly\n            expect(extraDoneFunc).to.have.been.called;\n            // Matcher still matched, so we true\n            expect(result).to.be.ok;\n            testDone();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"does not execute the listener callback","suites":["Listener","Unit Tests","#call","if the matcher returns false"],"updatePoint":{"line":220,"column":50,"index":8684},"line":220,"code":"        it('does not execute the listener callback', function (done) {\n          const listenerCallback = sinon.spy();\n          const testMessage = {};\n          const testListener = this.createListener(listenerCallback);\n          testListener.call(testMessage, function (_) {\n            expect(listenerCallback).to.not.have.been.called;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"returns false","suites":["Listener","Unit Tests","#call","if the matcher returns false"],"updatePoint":{"line":229,"column":25,"index":9046},"line":229,"code":"        it('returns false', function () {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          const result = testListener.call(testMessage);\n          expect(result).to.not.be.ok;\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the provided callback with false","suites":["Listener","Unit Tests","#call","if the matcher returns false"],"updatePoint":{"line":235,"column":50,"index":9323},"line":235,"code":"        it('calls the provided callback with false', function (done) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          testListener.call(testMessage, function (result) {\n            expect(result).to.not.be.ok;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"calls the provided callback after the function returns","suites":["Listener","Unit Tests","#call","if the matcher returns false"],"updatePoint":{"line":243,"column":66,"index":9660},"line":243,"code":"        it('calls the provided callback after the function returns', function (done) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          let finished = false;\n          testListener.call(testMessage, function (result) {\n            expect(finished).to.be.ok;\n            done();\n          });\n          finished = true;\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"does not execute any middleware","suites":["Listener","Unit Tests","#call","if the matcher returns false"],"updatePoint":{"line":253,"column":43,"index":10031},"line":253,"code":"        it('does not execute any middleware', function (done) {\n          const testMessage = {};\n          const testListener = this.createListener(function () {});\n          const testMiddleware = {\n            execute: sinon.spy()\n          };\n          testListener.call(testMessage, result => {\n            expect(testMiddleware.execute).to.not.have.been.called;\n            done();\n          });\n        });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"requires a matcher","suites":["Listener","Unit Tests","#constructor"],"updatePoint":{"line":267,"column":28,"index":10491},"line":267,"code":"      it('requires a matcher', () => expect(function () {\n        return new Listener(this.robot, undefined, {}, sinon.spy());\n      }).to.throw(Error));","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"requires a callback","suites":["Listener","Unit Tests","#constructor"],"updatePoint":{"line":270,"column":29,"index":10646},"line":270,"code":"      it('requires a callback', function () {\n        // No options\n        expect(function () {\n          return new Listener(this.robot, sinon.spy());\n        }).to.throw(Error);\n        // With options\n        expect(function () {\n          return new Listener(this.robot, sinon.spy(), {});\n        }).to.throw(Error);\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"gracefully handles missing options","suites":["Listener","Unit Tests","#constructor"],"updatePoint":{"line":280,"column":44,"index":10993},"line":280,"code":"      it('gracefully handles missing options', function () {\n        const testMatcher = sinon.spy();\n        const listenerCallback = sinon.spy();\n        const testListener = new Listener(this.robot, testMatcher, listenerCallback);\n        // slightly brittle because we are testing for the default options Object\n        expect(testListener.options).to.deep.equal({\n          id: null\n        });\n        expect(testListener.callback).to.be.equal(listenerCallback);\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"gracefully handles a missing ID (set to null)","suites":["Listener","Unit Tests","#constructor"],"updatePoint":{"line":290,"column":55,"index":11483},"line":290,"code":"      it('gracefully handles a missing ID (set to null)', function () {\n        const testMatcher = sinon.spy();\n        const listenerCallback = sinon.spy();\n        const testListener = new Listener(this.robot, testMatcher, {}, listenerCallback);\n        expect(testListener.options.id).to.be.null;\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"matches TextMessages","suites":["Listener","Unit Tests","TextListener","#matcher"],"updatePoint":{"line":298,"column":30,"index":11847},"line":298,"code":"      it('matches TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'test');\n        testMessage.match = sinon.stub().returns(true);\n        const testRegex = /test/;\n        const testListener = new TextListener(this.robot, testRegex, callback);\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n        expect(testMessage.match).to.have.been.calledWith(testRegex);\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"does not match EnterMessages","suites":["Listener","Unit Tests","TextListener","#matcher"],"updatePoint":{"line":308,"column":38,"index":12345},"line":308,"code":"      it('does not match EnterMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new EnterMessage(this.user);\n        testMessage.match = sinon.stub().returns(true);\n        const testRegex = /test/;\n        const testListener = new TextListener(this.robot, testRegex, callback);\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n        expect(testMessage.match).to.not.have.been.called;\n      });","file":"listener_test.js","skipped":false,"dir":"test"},{"name":"marks the message as done","suites":["Message","Unit Tests","#finish"],"updatePoint":{"line":24,"column":59,"index":642},"line":24,"code":"    describe('#finish', () => it('marks the message as done', function () {\n      const testMessage = new Message(this.user);\n      expect(testMessage.done).to.not.be.ok;\n      testMessage.finish();\n      expect(testMessage.done).to.be.ok;\n    }));","file":"message_test.js","skipped":false,"dir":"test"},{"name":"should perform standard regex matching","suites":["Message","Unit Tests","TextMessage","#match"],"updatePoint":{"line":30,"column":101,"index":933},"line":30,"code":"    describe('TextMessage', () => describe('#match', () => it('should perform standard regex matching', function () {\n      const testMessage = new TextMessage(this.user, 'message123');\n      expect(testMessage.match(/^message123$/)).to.be.ok;\n      expect(testMessage.match(/^does-not-match$/)).to.not.be.ok;\n    })));","file":"message_test.js","skipped":false,"dir":"test"},{"name":"executes synchronous middleware","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":30,"column":41,"index":889},"line":30,"code":"      it('executes synchronous middleware', function (testDone) {\n        const testMiddleware = sinon.spy((context, next, done) => {\n          next(done);\n        });\n        this.middleware.register(testMiddleware);\n        const middlewareFinished = function () {\n          expect(testMiddleware).to.have.been.called;\n          testDone();\n        };\n        this.middleware.execute({}, (_, done) => done(), middlewareFinished);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"executes asynchronous middleware","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":41,"column":42,"index":1332},"line":41,"code":"      it('executes asynchronous middleware', function (testDone) {\n        const testMiddleware = sinon.spy((context, next, done) =>\n        // Yield to the event loop\n        process.nextTick(() => next(done)));\n        this.middleware.register(testMiddleware);\n        const middlewareFinished = function (context, done) {\n          expect(testMiddleware).to.have.been.called;\n          testDone();\n        };\n        this.middleware.execute({}, (_, done) => done(), middlewareFinished);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"passes the correct arguments to each middleware","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":52,"column":57,"index":1847},"line":52,"code":"      it('passes the correct arguments to each middleware', function (testDone) {\n        const testContext = {};\n        const testMiddleware = (context, next, done) =>\n        // Break out of middleware error handling so assertion errors are\n        // more visible\n        process.nextTick(function () {\n          // Check that variables were passed correctly\n          expect(context).to.equal(testContext);\n          next(done);\n        });\n        this.middleware.register(testMiddleware);\n        this.middleware.execute(testContext, (_, done) => done(), () => testDone());\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"executes all registered middleware in definition order","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":65,"column":64,"index":2445},"line":65,"code":"      it('executes all registered middleware in definition order', function (testDone) {\n        const middlewareExecution = [];\n        const testMiddlewareA = (context, next, done) => {\n          middlewareExecution.push('A');\n          next(done);\n        };\n        const testMiddlewareB = function (context, next, done) {\n          middlewareExecution.push('B');\n          next(done);\n        };\n        this.middleware.register(testMiddlewareA);\n        this.middleware.register(testMiddlewareB);\n        const middlewareFinished = function () {\n          expect(middlewareExecution).to.deep.equal(['A', 'B']);\n          testDone();\n        };\n        this.middleware.execute({}, (_, done) => done(), middlewareFinished);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"executes the next callback after the function returns when there is no middleware","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":83,"column":91,"index":3210},"line":83,"code":"      it('executes the next callback after the function returns when there is no middleware', function (testDone) {\n        let finished = false;\n        this.middleware.execute({}, function () {\n          expect(finished).to.be.ok;\n          testDone();\n        }, function () {});\n        finished = true;\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"always executes middleware after the function returns","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":91,"column":63,"index":3500},"line":91,"code":"      it('always executes middleware after the function returns', function (testDone) {\n        let finished = false;\n        this.middleware.register(function (context, next, done) {\n          expect(finished).to.be.ok;\n          testDone();\n        });\n        this.middleware.execute({}, function () {}, function () {});\n        finished = true;\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"creates a default \"done\" function","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":100,"column":43,"index":3839},"line":100,"code":"      it('creates a default \"done\" function', function (testDone) {\n        let finished = false;\n        this.middleware.register(function (context, next, done) {\n          expect(finished).to.be.ok;\n          testDone();\n        });\n\n        // we're testing the lack of a third argument here.\n        this.middleware.execute({}, function () {});\n        finished = true;\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"does the right thing with done callbacks","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":111,"column":50,"index":4230},"line":111,"code":"      it('does the right thing with done callbacks', function (testDone) {\n        // we want to ensure that the 'done' callbacks are nested correctly\n        // (executed in reverse order of definition)\n        const execution = [];\n        const testMiddlewareA = function (context, next, done) {\n          execution.push('middlewareA');\n          next(function () {\n            execution.push('doneA');\n            done();\n          });\n        };\n        const testMiddlewareB = function (context, next, done) {\n          execution.push('middlewareB');\n          next(function () {\n            execution.push('doneB');\n            done();\n          });\n        };\n        this.middleware.register(testMiddlewareA);\n        this.middleware.register(testMiddlewareB);\n        const allDone = function () {\n          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneB', 'doneA']);\n          testDone();\n        };\n        this.middleware.execute({},\n        // Short circuit at the bottom of the middleware stack\n        (_, done) => done(), allDone);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"defaults to the latest done callback if none is provided","suites":["Middleware","Unit Tests","#execute"],"updatePoint":{"line":139,"column":66,"index":5328},"line":139,"code":"      it('defaults to the latest done callback if none is provided', function (testDone) {\n        // we want to ensure that the 'done' callbacks are nested correctly\n        // (executed in reverse order of definition)\n        const execution = [];\n        const testMiddlewareA = function (context, next, done) {\n          execution.push('middlewareA');\n          next(function () {\n            execution.push('doneA');\n            done();\n          });\n        };\n        const testMiddlewareB = function (context, next, done) {\n          execution.push('middlewareB');\n          next();\n        };\n        this.middleware.register(testMiddlewareA);\n        this.middleware.register(testMiddlewareB);\n        const allDone = function () {\n          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneA']);\n          testDone();\n        };\n        this.middleware.execute({},\n        // Short circuit at the bottom of the middleware stack\n        (_, done) => done(), allDone);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"does not execute subsequent middleware after the error is thrown","suites":["Middleware","Unit Tests","#execute","error handling"],"updatePoint":{"line":165,"column":76,"index":6392},"line":165,"code":"        it('does not execute subsequent middleware after the error is thrown', function (testDone) {\n          const middlewareExecution = [];\n          const testMiddlewareA = function (context, next, done) {\n            middlewareExecution.push('A');\n            next(done);\n          };\n          const testMiddlewareB = function (context, next, done) {\n            middlewareExecution.push('B');\n            throw new Error();\n          };\n          const testMiddlewareC = function (context, next, done) {\n            middlewareExecution.push('C');\n            next(done);\n          };\n          this.middleware.register(testMiddlewareA);\n          this.middleware.register(testMiddlewareB);\n          this.middleware.register(testMiddlewareC);\n          const middlewareFinished = sinon.spy();\n          const middlewareFailed = () => {\n            expect(middlewareFinished).to.not.have.been.called;\n            expect(middlewareExecution).to.deep.equal(['A', 'B']);\n            testDone();\n          };\n          this.middleware.execute({}, middlewareFinished, middlewareFailed);\n        });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"emits an error event","suites":["Middleware","Unit Tests","#execute","error handling"],"updatePoint":{"line":190,"column":32,"index":7448},"line":190,"code":"        it('emits an error event', function (testDone) {\n          const testResponse = {};\n          const theError = new Error();\n          const testMiddleware = function (context, next, done) {\n            throw theError;\n          };\n          this.middleware.register(testMiddleware);\n          this.robot.emit = sinon.spy(function (name, err, response) {\n            expect(name).to.equal('error');\n            expect(err).to.equal(theError);\n            expect(response).to.equal(testResponse);\n          });\n          const middlewareFinished = sinon.spy();\n          const middlewareFailed = () => {\n            expect(this.robot.emit).to.have.been.called;\n            testDone();\n          };\n          this.middleware.execute({\n            response: testResponse\n          }, middlewareFinished, middlewareFailed);\n        });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"unwinds the middleware stack (calling all done functions)","suites":["Middleware","Unit Tests","#execute","error handling"],"updatePoint":{"line":211,"column":69,"index":8324},"line":211,"code":"        it('unwinds the middleware stack (calling all done functions)', function (testDone) {\n          let extraDoneFunc = null;\n          const testMiddlewareA = function (context, next, done) {\n            // Goal: make sure that the middleware stack is unwound correctly\n            extraDoneFunc = sinon.spy(done);\n            next(extraDoneFunc);\n          };\n          const testMiddlewareB = function (context, next, done) {\n            throw new Error();\n          };\n          this.middleware.register(testMiddlewareA);\n          this.middleware.register(testMiddlewareB);\n          const middlewareFinished = sinon.spy();\n          const middlewareFailed = function () {\n            // Sanity check that the error was actually thrown\n            expect(middlewareFinished).to.not.have.been.called;\n            expect(extraDoneFunc).to.have.been.called;\n            testDone();\n          };\n          this.middleware.execute({}, middlewareFinished, middlewareFailed);\n        });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"adds to the list of middleware","suites":["Middleware","Unit Tests","#register"],"updatePoint":{"line":235,"column":40,"index":9343},"line":235,"code":"      it('adds to the list of middleware', function () {\n        const testMiddleware = function (context, next, done) {};\n        this.middleware.register(testMiddleware);\n        expect(this.middleware.stack).to.include(testMiddleware);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"validates the arity of middleware","suites":["Middleware","Unit Tests","#register"],"updatePoint":{"line":240,"column":43,"index":9595},"line":240,"code":"      it('validates the arity of middleware', function () {\n        const testMiddleware = function (context, next, done, extra) {};\n        expect(() => this.middleware.register(testMiddleware)).to.throw(/Incorrect number of arguments/);\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"is the listener object that matched","suites":["Middleware","Public Middleware APIs","listener middleware context","listener"],"updatePoint":{"line":291,"column":47,"index":11472},"line":291,"code":"        it('is the listener object that matched', function (testDone) {\n          this.robot.receive(this.testMessage, () => {\n            expect(this.middleware).to.have.been.calledWithMatch(sinon.match.has('listener', sinon.match.same(this.testListener)),\n            // context\n            sinon.match.any,\n            // next\n            sinon.match.any // done\n            );\n\n            testDone();\n          });\n        });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"has options.id (metadata)","suites":["Middleware","Public Middleware APIs","listener middleware context","listener"],"updatePoint":{"line":303,"column":37,"index":11894},"line":303,"code":"        it('has options.id (metadata)', function (testDone) {\n          this.robot.receive(this.testMessage, () => {\n            expect(this.middleware).to.have.been.calledWithMatch(sinon.match.has('listener', sinon.match.has('options', sinon.match.has('id'))),\n            // context\n            sinon.match.any,\n            // next\n            sinon.match.any // done\n            );\n\n            testDone();\n          });\n        });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"is a Response that wraps the message","suites":["Middleware","Public Middleware APIs","listener middleware context","response"],"updatePoint":{"line":316,"column":73,"index":12376},"line":316,"code":"      describe('response', () => it('is a Response that wraps the message', function (testDone) {\n        this.robot.receive(this.testMessage, () => {\n          expect(this.middleware).to.have.been.calledWithMatch(sinon.match.has('response', sinon.match.instanceOf(Response).and(sinon.match.has('message', sinon.match.same(this.testMessage)))),\n          // context\n          sinon.match.any,\n          // next\n          sinon.match.any // done\n          );\n\n          testDone();\n        });\n      }));","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"is a match-less Response object","suites":["Middleware","Public Middleware APIs","receive middleware context","response"],"updatePoint":{"line":335,"column":68,"index":13105},"line":335,"code":"      describe('response', () => it('is a match-less Response object', function (testDone) {\n        this.robot.receive(this.testMessage, () => {\n          expect(this.middleware).to.have.been.calledWithMatch(sinon.match.has('response', sinon.match.instanceOf(Response).and(sinon.match.has('message', sinon.match.same(this.testMessage)))),\n          // context\n          sinon.match.any,\n          // next\n          sinon.match.any // done\n          );\n\n          testDone();\n        });\n      }));","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"is a function with arity one","suites":["Middleware","Public Middleware APIs","next"],"updatePoint":{"line":354,"column":38,"index":13783},"line":354,"code":"      it('is a function with arity one', function (testDone) {\n        this.robot.receive(this.testMessage, () => {\n          expect(this.middleware).to.have.been.calledWithMatch(sinon.match.any,\n          // context\n          sinon.match.func.and(sinon.match.has('length', sinon.match(1))),\n          // next\n          sinon.match.any // done\n          );\n\n          testDone();\n        });\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"is a function with arity zero","suites":["Middleware","Public Middleware APIs","done"],"updatePoint":{"line":373,"column":39,"index":14395},"line":373,"code":"      it('is a function with arity zero', function (testDone) {\n        this.robot.receive(this.testMessage, () => {\n          expect(this.middleware).to.have.been.calledWithMatch(sinon.match.any,\n          // context\n          sinon.match.any,\n          // next\n          sinon.match.func.and(sinon.match.has('length', sinon.match(0))) // done\n          );\n\n          testDone();\n        });\n      });","file":"middleware_test.js","skipped":false,"dir":"test"},{"name":"creates a new ScopedHttpClient","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":58,"column":40,"index":1870},"line":58,"code":"      it('creates a new ScopedHttpClient', function () {\n        // 'instanceOf' check doesn't work here due to the design of\n        // ScopedHttpClient\n        expect(this.httpClient).to.have.property('get');\n        expect(this.httpClient).to.have.property('post');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"passes options through to the ScopedHttpClient","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":64,"column":56,"index":2165},"line":64,"code":"      it('passes options through to the ScopedHttpClient', function () {\n        const agent = {};\n        const httpClient = this.robot.http('http://localhost', {\n          agent\n        });\n        expect(httpClient.options.agent).to.equal(agent);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"sets a sane user agent","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":71,"column":32,"index":2401},"line":71,"code":"      it('sets a sane user agent', function () {\n        expect(this.httpClient.options.headers['User-Agent']).to.contain('Hubot');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"merges in any global http options","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":74,"column":43,"index":2554},"line":74,"code":"      it('merges in any global http options', function () {\n        const agent = {};\n        this.robot.globalHttpOptions = {\n          agent\n        };\n        const httpClient = this.robot.http('http://localhost');\n        expect(httpClient.options.agent).to.equal(agent);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"local options override global http options","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":82,"column":52,"index":2849},"line":82,"code":"      it('local options override global http options', function () {\n        const agentA = {};\n        const agentB = {};\n        this.robot.globalHttpOptions = {\n          agent: agentA\n        };\n        const httpClient = this.robot.http('http://localhost', {\n          agent: agentB\n        });\n        expect(httpClient.options.agent).to.equal(agentB);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"builds the url correctly from a string","suites":["Robot","Unit Tests","#http"],"updatePoint":{"line":93,"column":48,"index":3214},"line":93,"code":"      it('builds the url correctly from a string', function () {\n        const options = this.httpClient.buildOptions('http://localhost:3001');\n        expect(options.host).to.equal('localhost:3001');\n        expect(options.pathname).to.equal('/');\n        expect(options.protocol).to.equal('http:');\n        expect(options.port).to.equal('3001');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches messages starting with robot's name","suites":["Robot","Unit Tests","#respondPattern"],"updatePoint":{"line":102,"column":54,"index":3632},"line":102,"code":"      it('matches messages starting with robot\\'s name', function () {\n        const testMessage = this.robot.name + 'message123';\n        const testRegex = /(.*)/;\n        const pattern = this.robot.respondPattern(testRegex);\n        expect(testMessage).to.match(pattern);\n        const match = testMessage.match(pattern)[1];\n        expect(match).to.equal('message123');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches messages starting with robot's alias","suites":["Robot","Unit Tests","#respondPattern"],"updatePoint":{"line":110,"column":55,"index":4016},"line":110,"code":"      it('matches messages starting with robot\\'s alias', function () {\n        const testMessage = this.robot.alias + 'message123';\n        const testRegex = /(.*)/;\n        const pattern = this.robot.respondPattern(testRegex);\n        expect(testMessage).to.match(pattern);\n        const match = testMessage.match(pattern)[1];\n        expect(match).to.equal('message123');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match unaddressed messages","suites":["Robot","Unit Tests","#respondPattern"],"updatePoint":{"line":118,"column":45,"index":4391},"line":118,"code":"      it('does not match unaddressed messages', function () {\n        const testMessage = 'message123';\n        const testRegex = /(.*)/;\n        const pattern = this.robot.respondPattern(testRegex);\n        expect(testMessage).to.not.match(pattern);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches properly when name is substring of alias","suites":["Robot","Unit Tests","#respondPattern"],"updatePoint":{"line":124,"column":58,"index":4665},"line":124,"code":"      it('matches properly when name is substring of alias', function () {\n        this.robot.name = 'Meg';\n        this.robot.alias = 'Megan';\n        const testMessage1 = this.robot.name + ' message123';\n        const testMessage2 = this.robot.alias + ' message123';\n        const testRegex = /(.*)/;\n        const pattern = this.robot.respondPattern(testRegex);\n        expect(testMessage1).to.match(pattern);\n        const match1 = testMessage1.match(pattern)[1];\n        expect(match1).to.equal('message123');\n        expect(testMessage2).to.match(pattern);\n        const match2 = testMessage2.match(pattern)[1];\n        expect(match2).to.equal('message123');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches properly when alias is substring of name","suites":["Robot","Unit Tests","#respondPattern"],"updatePoint":{"line":138,"column":58,"index":5340},"line":138,"code":"      it('matches properly when alias is substring of name', function () {\n        this.robot.name = 'Megan';\n        this.robot.alias = 'Meg';\n        const testMessage1 = this.robot.name + ' message123';\n        const testMessage2 = this.robot.alias + ' message123';\n        const testRegex = /(.*)/;\n        const pattern = this.robot.respondPattern(testRegex);\n        expect(testMessage1).to.match(pattern);\n        const match1 = testMessage1.match(pattern)[1];\n        expect(match1).to.equal('message123');\n        expect(testMessage2).to.match(pattern);\n        const match2 = testMessage2.match(pattern)[1];\n        expect(match2).to.equal('message123');\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener directly","suites":["Robot","Unit Tests","#listen"],"updatePoint":{"line":153,"column":67,"index":6032},"line":153,"code":"    describe('#listen', () => it('registers a new listener directly', function () {\n      expect(this.robot.listeners).to.have.length(0);\n      this.robot.listen(function () {}, function () {});\n      expect(this.robot.listeners).to.have.length(1);\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener directly","suites":["Robot","Unit Tests","#hear"],"updatePoint":{"line":158,"column":65,"index":6288},"line":158,"code":"    describe('#hear', () => it('registers a new listener directly', function () {\n      expect(this.robot.listeners).to.have.length(0);\n      this.robot.hear(/.*/, function () {});\n      expect(this.robot.listeners).to.have.length(1);\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener using hear","suites":["Robot","Unit Tests","#respond"],"updatePoint":{"line":163,"column":70,"index":6537},"line":163,"code":"    describe('#respond', () => it('registers a new listener using hear', function () {\n      sinon.spy(this.robot, 'hear');\n      this.robot.respond(/.*/, function () {});\n      expect(this.robot.hear).to.have.been.called;\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener using listen","suites":["Robot","Unit Tests","#enter"],"updatePoint":{"line":168,"column":70,"index":6769},"line":168,"code":"    describe('#enter', () => it('registers a new listener using listen', function () {\n      sinon.spy(this.robot, 'listen');\n      this.robot.enter(function () {});\n      expect(this.robot.listen).to.have.been.called;\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener using listen","suites":["Robot","Unit Tests","#leave"],"updatePoint":{"line":173,"column":70,"index":6997},"line":173,"code":"    describe('#leave', () => it('registers a new listener using listen', function () {\n      sinon.spy(this.robot, 'listen');\n      this.robot.leave(function () {});\n      expect(this.robot.listen).to.have.been.called;\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener using listen","suites":["Robot","Unit Tests","#topic"],"updatePoint":{"line":178,"column":70,"index":7225},"line":178,"code":"    describe('#topic', () => it('registers a new listener using listen', function () {\n      sinon.spy(this.robot, 'listen');\n      this.robot.topic(function () {});\n      expect(this.robot.listen).to.have.been.called;\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"registers a new listener using listen","suites":["Robot","Unit Tests","#catchAll"],"updatePoint":{"line":183,"column":73,"index":7456},"line":183,"code":"    describe('#catchAll', () => it('registers a new listener using listen', function () {\n      sinon.spy(this.robot, 'listen');\n      this.robot.catchAll(function () {});\n      expect(this.robot.listen).to.have.been.called;\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"calls all registered listeners","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":189,"column":40,"index":7696},"line":189,"code":"      it('calls all registered listeners', function (done) {\n        // Need to use a real Message so that the CatchAllMessage constructor works\n        const testMessage = new TextMessage(this.user, 'message123');\n        const listener = {\n          call(response, middleware, cb) {\n            cb();\n          }\n        };\n        sinon.spy(listener, 'call');\n        this.robot.listeners = [listener, listener, listener, listener];\n        this.robot.receive(testMessage, function () {\n          // When no listeners match, each listener is called twice: once with\n          // the original message and once with a CatchAll message\n          expect(listener.call).to.have.callCount(8);\n          done();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"sends a CatchAllMessage if no listener matches","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":206,"column":56,"index":8442},"line":206,"code":"      it('sends a CatchAllMessage if no listener matches', function (done) {\n        // Testing for recursion with a new CatchAllMessage that wraps the\n        // original message\n\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.listeners = [];\n\n        // Replace @robot.receive so we can catch when the functions recurses\n        const oldReceive = this.robot.receive;\n        this.robot.receive = function (message, cb) {\n          expect(message).to.be.instanceof(CatchAllMessage);\n          expect(message.message).to.be.equal(testMessage);\n          cb();\n        };\n        sinon.spy(this.robot, 'receive');\n\n        // Call the original receive method that we want to test\n        oldReceive.call(this.robot, testMessage, () => {\n          expect(this.robot.receive).to.have.been.called;\n          done();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not trigger a CatchAllMessage if a listener matches","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":228,"column":66,"index":9329},"line":228,"code":"      it('does not trigger a CatchAllMessage if a listener matches', function (done) {\n        const testMessage = new TextMessage(this.user, 'message123');\n        const matchingListener = {\n          call(message, middleware, doesMatch) {\n            // indicate that the message matched the listener\n            doesMatch(true);\n          }\n        };\n\n        // Replace @robot.receive so we can catch if the functions recurses\n        const oldReceive = this.robot.receive;\n        this.robot.receive = sinon.spy();\n        this.robot.listeners = [matchingListener];\n\n        // Call the original receive method that we want to test\n        oldReceive.call(this.robot, testMessage, done);\n\n        // Ensure the function did not recurse\n        expect(this.robot.receive).to.not.have.been.called;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"stops processing if a listener marks the message as done","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":248,"column":66,"index":10141},"line":248,"code":"      it('stops processing if a listener marks the message as done', function (done) {\n        const testMessage = new TextMessage(this.user, 'message123');\n        const matchingListener = {\n          call(message, middleware, doesMatch) {\n            message.done = true;\n            // Listener must have matched\n            doesMatch(true);\n          }\n        };\n        const listenerSpy = {\n          call: sinon.spy()\n        };\n        this.robot.listeners = [matchingListener, listenerSpy];\n        this.robot.receive(testMessage, function () {\n          expect(listenerSpy.call).to.not.have.been.called;\n          done();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"gracefully handles listener uncaughtExceptions (move on to next listener)","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":266,"column":83,"index":10813},"line":266,"code":"      it('gracefully handles listener uncaughtExceptions (move on to next listener)', function (done) {\n        const testMessage = {};\n        const theError = new Error();\n        const badListener = {\n          call() {\n            throw theError;\n          }\n        };\n        let goodListenerCalled = false;\n        const goodListener = {\n          call(_, middleware, doesMatch) {\n            goodListenerCalled = true;\n            doesMatch(true);\n          }\n        };\n        this.robot.listeners = [badListener, goodListener];\n        this.robot.emit = function (name, err, response) {\n          expect(name).to.equal('error');\n          expect(err).to.equal(theError);\n          expect(response.message).to.equal(testMessage);\n        };\n        sinon.spy(this.robot, 'emit');\n        this.robot.receive(testMessage, () => {\n          expect(this.robot.emit).to.have.been.called;\n          expect(goodListenerCalled).to.be.ok;\n          done();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"executes the callback after the function returns when there are no listeners","suites":["Robot","Unit Tests","#receive"],"updatePoint":{"line":294,"column":86,"index":11796},"line":294,"code":"      it('executes the callback after the function returns when there are no listeners', function (done) {\n        const testMessage = new TextMessage(this.user, 'message123');\n        let finished = false;\n        this.robot.receive(testMessage, function () {\n          expect(finished).to.be.ok;\n          done();\n        });\n        finished = true;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"should require the specified file","suites":["Robot","Unit Tests","#loadFile"],"updatePoint":{"line":311,"column":43,"index":12324},"line":311,"code":"      it('should require the specified file', function () {\n        const module = require('module');\n        const script = sinon.spy(function (robot) {});\n        this.sandbox.stub(module, '_load').returns(script);\n        this.sandbox.stub(this.robot, 'parseHelp');\n        this.robot.loadFile('./scripts', 'test-script.js');\n        expect(module._load).to.have.been.calledWith(path.join('scripts', 'test-script'));\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"should call the script with the Robot","suites":["Robot","Unit Tests","#loadFile","proper script"],"updatePoint":{"line":326,"column":49,"index":13072},"line":326,"code":"        it('should call the script with the Robot', function () {\n          this.robot.loadFile('./scripts', 'test-script.js');\n          expect(this.script).to.have.been.calledWith(this.robot);\n        });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"should parse the script documentation","suites":["Robot","Unit Tests","#loadFile","proper script"],"updatePoint":{"line":330,"column":49,"index":13279},"line":330,"code":"        it('should parse the script documentation', function () {\n          this.robot.loadFile('./scripts', 'test-script.js');\n          expect(this.robot.parseHelp).to.have.been.calledWith(path.join('scripts', 'test-script.js'));\n        });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"logs a warning for a .js file","suites":["Robot","Unit Tests","#loadFile","non-Function script"],"updatePoint":{"line":342,"column":41,"index":13815},"line":342,"code":"        it('logs a warning for a .js file', function () {\n          sinon.stub(this.robot.logger, 'warning');\n          this.robot.loadFile('./scripts', 'test-script.js');\n          expect(this.robot.logger.warning).to.have.been.called;\n        });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"logs a warning for a .mjs file","suites":["Robot","Unit Tests","#loadFile","non-Function script"],"updatePoint":{"line":347,"column":42,"index":14065},"line":347,"code":"        it('logs a warning for a .mjs file', function () {\n          sinon.stub(this.robot.logger, 'warning');\n          this.robot.loadFile('./scripts', 'test-script.mjs');\n          expect(this.robot.logger.warning).to.have.been.called;\n        });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"should not be loaded by the Robot","suites":["Robot","Unit Tests","#loadFile","unsupported file extension"],"updatePoint":{"line":360,"column":45,"index":14654},"line":360,"code":"        it('should not be loaded by the Robot', function () {\n          this.robot.loadFile('./scripts', 'unsupported.yml');\n          expect(this.script).to.not.have.been.calledWith(this.robot);\n        });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"delegates to adapter \"send\" with proper context","suites":["Robot","Unit Tests","#send"],"updatePoint":{"line":370,"column":57,"index":15016},"line":370,"code":"      it('delegates to adapter \"send\" with proper context', function () {\n        this.robot.send({}, 'test message');\n        expect(this.robot.adapter.send).to.have.been.calledOn(this.robot.adapter);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"delegates to adapter \"reply\" with proper context","suites":["Robot","Unit Tests","#reply"],"updatePoint":{"line":379,"column":58,"index":15363},"line":379,"code":"      it('delegates to adapter \"reply\" with proper context', function () {\n        this.robot.reply({}, 'test message');\n        expect(this.robot.adapter.reply).to.have.been.calledOn(this.robot.adapter);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"delegates to adapter \"send\" with proper context","suites":["Robot","Unit Tests","#messageRoom"],"updatePoint":{"line":388,"column":57,"index":15716},"line":388,"code":"      it('delegates to adapter \"send\" with proper context', function () {\n        this.robot.messageRoom('testRoom', 'messageRoom test');\n        expect(this.robot.adapter.send).to.have.been.calledOn(this.robot.adapter);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"delegates to events \"on\" with proper context","suites":["Robot","Unit Tests","#on"],"updatePoint":{"line":397,"column":54,"index":16071},"line":397,"code":"      it('delegates to events \"on\" with proper context', function () {\n        this.robot.on('event', function () {});\n        expect(this.robot.events.on).to.have.been.calledOn(this.robot.events);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"delegates to events \"emit\" with proper context","suites":["Robot","Unit Tests","#emit"],"updatePoint":{"line":406,"column":56,"index":16412},"line":406,"code":"      it('delegates to events \"emit\" with proper context', function () {\n        this.robot.emit('event', function () {});\n        expect(this.robot.events.emit).to.have.been.calledOn(this.robot.events);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"forwards the matcher, options, and callback to Listener","suites":["Robot","Listener Registration","#listen"],"updatePoint":{"line":413,"column":89,"index":16723},"line":413,"code":"    describe('#listen', () => it('forwards the matcher, options, and callback to Listener', function () {\n      const callback = sinon.spy();\n      const matcher = sinon.spy();\n      const options = {};\n      this.robot.listen(matcher, options, callback);\n      const testListener = this.robot.listeners[0];\n      expect(testListener.matcher).to.equal(matcher);\n      expect(testListener.callback).to.equal(callback);\n      expect(testListener.options).to.equal(options);\n    }));","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches TextMessages","suites":["Robot","Listener Registration","#hear"],"updatePoint":{"line":424,"column":30,"index":17181},"line":424,"code":"      it('matches TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'message123');\n        const testRegex = /^message123$/;\n        this.robot.hear(testRegex, callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match EnterMessages","suites":["Robot","Listener Registration","#hear"],"updatePoint":{"line":433,"column":38,"index":17587},"line":433,"code":"      it('does not match EnterMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new EnterMessage(this.user);\n        const testRegex = /.*/;\n        this.robot.hear(testRegex, callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches TextMessages addressed to the robot","suites":["Robot","Listener Registration","#respond"],"updatePoint":{"line":444,"column":53,"index":18036},"line":444,"code":"      it('matches TextMessages addressed to the robot', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'TestHubot message123');\n        const testRegex = /message123$/;\n        this.robot.respond(testRegex, callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match EnterMessages","suites":["Robot","Listener Registration","#respond"],"updatePoint":{"line":453,"column":38,"index":18454},"line":453,"code":"      it('does not match EnterMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new EnterMessage(this.user);\n        const testRegex = /.*/;\n        this.robot.respond(testRegex, callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches EnterMessages","suites":["Robot","Listener Registration","#enter"],"updatePoint":{"line":464,"column":31,"index":18882},"line":464,"code":"      it('matches EnterMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new EnterMessage(this.user);\n        this.robot.enter(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match TextMessages","suites":["Robot","Listener Registration","#enter"],"updatePoint":{"line":472,"column":37,"index":19222},"line":472,"code":"      it('does not match TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.enter(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches LeaveMessages","suites":["Robot","Listener Registration","#leave"],"updatePoint":{"line":482,"column":31,"index":19618},"line":482,"code":"      it('matches LeaveMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new LeaveMessage(this.user);\n        this.robot.leave(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match TextMessages","suites":["Robot","Listener Registration","#leave"],"updatePoint":{"line":490,"column":37,"index":19958},"line":490,"code":"      it('does not match TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.leave(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches TopicMessages","suites":["Robot","Listener Registration","#topic"],"updatePoint":{"line":500,"column":31,"index":20354},"line":500,"code":"      it('matches TopicMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TopicMessage(this.user);\n        this.robot.topic(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match TextMessages","suites":["Robot","Listener Registration","#topic"],"updatePoint":{"line":508,"column":37,"index":20694},"line":508,"code":"      it('does not match TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.topic(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"matches CatchAllMessages","suites":["Robot","Listener Registration","#catchAll"],"updatePoint":{"line":518,"column":34,"index":21096},"line":518,"code":"      it('matches CatchAllMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new CatchAllMessage(new TextMessage(this.user, 'message123'));\n        this.robot.catchAll(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not match TextMessages","suites":["Robot","Listener Registration","#catchAll"],"updatePoint":{"line":526,"column":37,"index":21473},"line":526,"code":"      it('does not match TextMessages', function () {\n        const callback = sinon.spy();\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.catchAll(callback);\n        const testListener = this.robot.listeners[0];\n        const result = testListener.matcher(testMessage);\n        expect(result).to.not.be.ok;\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"calls a matching listener","suites":["Robot","Message Processing"],"updatePoint":{"line":537,"column":33,"index":21890},"line":537,"code":"    it('calls a matching listener', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      this.robot.hear(/^message123$/, function (response) {\n        expect(response.message).to.equal(testMessage);\n        done();\n      });\n      this.robot.receive(testMessage);\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"calls multiple matching listeners","suites":["Robot","Message Processing"],"updatePoint":{"line":545,"column":41,"index":22209},"line":545,"code":"    it('calls multiple matching listeners', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      let listenersCalled = 0;\n      const listenerCallback = function (response) {\n        expect(response.message).to.equal(testMessage);\n        listenersCalled++;\n      };\n      this.robot.hear(/^message123$/, listenerCallback);\n      this.robot.hear(/^message123$/, listenerCallback);\n      this.robot.receive(testMessage, function () {\n        expect(listenersCalled).to.equal(2);\n        done();\n      });\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"calls the catch-all listener if no listeners match","suites":["Robot","Message Processing"],"updatePoint":{"line":559,"column":58,"index":22777},"line":559,"code":"    it('calls the catch-all listener if no listeners match', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      const listenerCallback = sinon.spy();\n      this.robot.hear(/^no-matches$/, listenerCallback);\n      this.robot.catchAll(function (response) {\n        expect(listenerCallback).to.not.have.been.called;\n        expect(response.message).to.equal(testMessage);\n        done();\n      });\n      this.robot.receive(testMessage);\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not call the catch-all listener if any listener matched","suites":["Robot","Message Processing"],"updatePoint":{"line":570,"column":68,"index":23270},"line":570,"code":"    it('does not call the catch-all listener if any listener matched', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      const listenerCallback = sinon.spy();\n      this.robot.hear(/^message123$/, listenerCallback);\n      const catchAllCallback = sinon.spy();\n      this.robot.catchAll(catchAllCallback);\n      this.robot.receive(testMessage, function () {\n        expect(listenerCallback).to.have.been.called.once;\n        expect(catchAllCallback).to.not.have.been.called;\n        done();\n      });\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"stops processing if message.finish() is called synchronously","suites":["Robot","Message Processing"],"updatePoint":{"line":582,"column":68,"index":23820},"line":582,"code":"    it('stops processing if message.finish() is called synchronously', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      this.robot.hear(/^message123$/, response => response.message.finish());\n      const listenerCallback = sinon.spy();\n      this.robot.hear(/^message123$/, listenerCallback);\n      this.robot.receive(testMessage, function () {\n        expect(listenerCallback).to.not.have.been.called;\n        done();\n      });\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"calls non-TextListener objects","suites":["Robot","Message Processing"],"updatePoint":{"line":592,"column":38,"index":24270},"line":592,"code":"    it('calls non-TextListener objects', function (done) {\n      const testMessage = new EnterMessage(this.user);\n      this.robot.enter(function (response) {\n        expect(response.message).to.equal(testMessage);\n        done();\n      });\n      this.robot.receive(testMessage);\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"gracefully handles listener uncaughtExceptions (move on to next listener)","suites":["Robot","Message Processing"],"updatePoint":{"line":600,"column":81,"index":24601},"line":600,"code":"    it('gracefully handles listener uncaughtExceptions (move on to next listener)', function (done) {\n      const testMessage = new TextMessage(this.user, 'message123');\n      const theError = new Error();\n      this.robot.hear(/^message123$/, function () {\n        throw theError;\n      });\n      let goodListenerCalled = false;\n      this.robot.hear(/^message123$/, () => {\n        goodListenerCalled = true;\n      });\n      this.robot.emit = function (name, err, response) {\n        expect(name).to.equal('error');\n        expect(err).to.equal(theError);\n        expect(response.message).to.equal(testMessage);\n      };\n      sinon.spy(this.robot, 'emit');\n      this.robot.receive(testMessage, () => {\n        expect(this.robot.emit).to.have.been.called;\n        expect(goodListenerCalled).to.be.ok;\n        done();\n      });\n    });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"allows listener callback execution","suites":["Robot","Message Processing","Listener Middleware"],"updatePoint":{"line":623,"column":44,"index":25452},"line":623,"code":"      it('allows listener callback execution', function (testDone) {\n        const listenerCallback = sinon.spy();\n        this.robot.hear(/^message123$/, listenerCallback);\n        this.robot.listenerMiddleware((context, next, done) =>\n        // Allow Listener callback execution\n        next(done));\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(listenerCallback).to.have.been.called;\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"can block listener callback execution","suites":["Robot","Message Processing","Listener Middleware"],"updatePoint":{"line":635,"column":47,"index":25982},"line":635,"code":"      it('can block listener callback execution', function (testDone) {\n        const listenerCallback = sinon.spy();\n        this.robot.hear(/^message123$/, listenerCallback);\n        this.robot.listenerMiddleware((context, next, done) =>\n        // Block Listener callback execution\n        done());\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(listenerCallback).to.not.have.been.called;\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"receives the correct arguments","suites":["Robot","Message Processing","Listener Middleware"],"updatePoint":{"line":647,"column":40,"index":26505},"line":647,"code":"      it('receives the correct arguments', function (testDone) {\n        this.robot.hear(/^message123$/, function () {});\n        const testListener = this.robot.listeners[0];\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.listenerMiddleware((context, next, done) => {\n          // Escape middleware error handling for clearer test failures\n          process.nextTick(() => {\n            expect(context.listener).to.equal(testListener);\n            expect(context.response.message).to.equal(testMessage);\n            expect(next).to.be.a('function');\n            expect(done).to.be.a('function');\n            testDone();\n          });\n        });\n        this.robot.receive(testMessage);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"executes middleware in order of definition","suites":["Robot","Message Processing","Listener Middleware"],"updatePoint":{"line":663,"column":52,"index":27257},"line":663,"code":"      it('executes middleware in order of definition', function (testDone) {\n        const execution = [];\n        const testMiddlewareA = function (context, next, done) {\n          execution.push('middlewareA');\n          next(function () {\n            execution.push('doneA');\n            done();\n          });\n        };\n        const testMiddlewareB = function (context, next, done) {\n          execution.push('middlewareB');\n          next(function () {\n            execution.push('doneB');\n            done();\n          });\n        };\n        this.robot.listenerMiddleware(testMiddlewareA);\n        this.robot.listenerMiddleware(testMiddlewareB);\n        this.robot.hear(/^message123$/, () => execution.push('listener'));\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'listener', 'doneB', 'doneA']);\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"fires for all messages, including non-matching ones","suites":["Robot","Message Processing","Receive Middleware"],"updatePoint":{"line":690,"column":61,"index":28324},"line":690,"code":"      it('fires for all messages, including non-matching ones', function (testDone) {\n        const middlewareSpy = sinon.spy();\n        const listenerCallback = sinon.spy();\n        this.robot.hear(/^message123$/, listenerCallback);\n        this.robot.receiveMiddleware(function (context, next, done) {\n          middlewareSpy();\n          next(done);\n        });\n        const testMessage = new TextMessage(this.user, 'not message 123');\n        this.robot.receive(testMessage, function () {\n          expect(listenerCallback).to.not.have.been.called;\n          expect(middlewareSpy).to.have.been.called;\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"can block listener execution","suites":["Robot","Message Processing","Receive Middleware"],"updatePoint":{"line":705,"column":38,"index":28952},"line":705,"code":"      it('can block listener execution', function (testDone) {\n        const middlewareSpy = sinon.spy();\n        const listenerCallback = sinon.spy();\n        this.robot.hear(/^message123$/, listenerCallback);\n        this.robot.receiveMiddleware(function (context, next, done) {\n          // Block Listener callback execution\n          middlewareSpy();\n          done();\n        });\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(listenerCallback).to.not.have.been.called;\n          expect(middlewareSpy).to.have.been.called;\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"receives the correct arguments","suites":["Robot","Message Processing","Receive Middleware"],"updatePoint":{"line":721,"column":40,"index":29620},"line":721,"code":"      it('receives the correct arguments', function (testDone) {\n        this.robot.hear(/^message123$/, function () {});\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receiveMiddleware(function (context, next, done) {\n          // Escape middleware error handling for clearer test failures\n          expect(context.response.message).to.equal(testMessage);\n          expect(next).to.be.a('function');\n          expect(done).to.be.a('function');\n          testDone();\n          next(done);\n        });\n        this.robot.receive(testMessage);\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"executes receive middleware in order of definition","suites":["Robot","Message Processing","Receive Middleware"],"updatePoint":{"line":734,"column":60,"index":30235},"line":734,"code":"      it('executes receive middleware in order of definition', function (testDone) {\n        const execution = [];\n        const testMiddlewareA = function (context, next, done) {\n          execution.push('middlewareA');\n          next(function () {\n            execution.push('doneA');\n            done();\n          });\n        };\n        const testMiddlewareB = function (context, next, done) {\n          execution.push('middlewareB');\n          next(function () {\n            execution.push('doneB');\n            done();\n          });\n        };\n        this.robot.receiveMiddleware(testMiddlewareA);\n        this.robot.receiveMiddleware(testMiddlewareB);\n        this.robot.hear(/^message123$/, () => execution.push('listener'));\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'listener', 'doneB', 'doneA']);\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"allows editing the message portion of the given response","suites":["Robot","Message Processing","Receive Middleware"],"updatePoint":{"line":759,"column":66,"index":31248},"line":759,"code":"      it('allows editing the message portion of the given response', function (testDone) {\n        const testMiddlewareA = function (context, next, done) {\n          context.response.message.text = 'foobar';\n          next();\n        };\n        const testMiddlewareB = function (context, next, done) {\n          // Subsequent middleware should see the modified message\n          expect(context.response.message.text).to.equal('foobar');\n          next();\n        };\n        this.robot.receiveMiddleware(testMiddlewareA);\n        this.robot.receiveMiddleware(testMiddlewareB);\n        const testCallback = sinon.spy();\n        // We'll never get to this if testMiddlewareA has not modified the message.\n        this.robot.hear(/^foobar$/, testCallback);\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(testCallback).to.have.been.called;\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"executes response middleware in order","suites":["Robot","Message Processing","Response Middleware"],"updatePoint":{"line":782,"column":47,"index":32260},"line":782,"code":"      it('executes response middleware in order', function (testDone) {\n        let sendSpy;\n        this.robot.adapter.send = sendSpy = sinon.spy();\n        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'));\n        this.robot.responseMiddleware(function (context, next, done) {\n          context.strings[0] = context.strings[0].replace(/foobar/g, 'barfoo');\n          next();\n        });\n        this.robot.responseMiddleware(function (context, next, done) {\n          context.strings[0] = context.strings[0].replace(/barfoo/g, 'replaced bar-foo');\n          next();\n        });\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(sendSpy.getCall(0).args[1]).to.equal('replaced bar-foo, sir, replaced bar-foo.');\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"allows replacing outgoing strings","suites":["Robot","Message Processing","Response Middleware"],"updatePoint":{"line":800,"column":43,"index":33137},"line":800,"code":"      it('allows replacing outgoing strings', function (testDone) {\n        let sendSpy;\n        this.robot.adapter.send = sendSpy = sinon.spy();\n        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'));\n        this.robot.responseMiddleware(function (context, next, done) {\n          context.strings = ['whatever I want.'];\n          next();\n        });\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(sendSpy.getCall(0).args[1]).to.deep.equal('whatever I want.');\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"marks plaintext as plaintext","suites":["Robot","Message Processing","Response Middleware"],"updatePoint":{"line":814,"column":38,"index":33769},"line":814,"code":"      it('marks plaintext as plaintext', function (testDone) {\n        const sendSpy = sinon.spy();\n        this.robot.adapter.send = sendSpy;\n        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'));\n        this.robot.hear(/^message456$/, response => response.play('good luck with that'));\n        let method;\n        let plaintext;\n        this.robot.responseMiddleware(function (context, next, done) {\n          method = context.method;\n          plaintext = context.plaintext;\n          next(done);\n        });\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, () => {\n          expect(plaintext).to.equal(true);\n          expect(method).to.equal('send');\n          const testMessage2 = new TextMessage(this.user, 'message456');\n          this.robot.receive(testMessage2, function () {\n            expect(plaintext).to.equal(undefined);\n            expect(method).to.equal('play');\n            testDone();\n          });\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"does not send trailing functions to middleware","suites":["Robot","Message Processing","Response Middleware"],"updatePoint":{"line":838,"column":56,"index":34828},"line":838,"code":"      it('does not send trailing functions to middleware', function (testDone) {\n        let sendSpy;\n        this.robot.adapter.send = sendSpy = sinon.spy();\n        let asserted = false;\n        const postSendCallback = function () {};\n        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.', postSendCallback));\n        this.robot.responseMiddleware(function (context, next, done) {\n          // We don't send the callback function to middleware, so it's not here.\n          expect(context.strings).to.deep.equal(['foobar, sir, foobar.']);\n          expect(context.method).to.equal('send');\n          asserted = true;\n          next();\n        });\n        const testMessage = new TextMessage(this.user, 'message123');\n        this.robot.receive(testMessage, function () {\n          expect(asserted).to.equal(true);\n          expect(sendSpy.getCall(0).args[1]).to.equal('foobar, sir, foobar.');\n          expect(sendSpy.getCall(0).args[2]).to.equal(postSendCallback);\n          testDone();\n        });\n      });","file":"robot_test.js","skipped":false,"dir":"test"},{"name":"uses id as the default name","suites":["User","new"],"updatePoint":{"line":7,"column":33,"index":204},"line":7,"code":"  it('uses id as the default name', function () {\n    const user = new User('hubot');\n    expect(user.name).to.equal('hubot');\n  });","file":"user_test.js","skipped":false,"dir":"test"},{"name":"sets attributes passed in","suites":["User","new"],"updatePoint":{"line":11,"column":31,"index":335},"line":11,"code":"  it('sets attributes passed in', function () {\n    const user = new User('hubot', {\n      foo: 1,\n      bar: 2\n    });\n    expect(user.foo).to.equal(1);\n    expect(user.bar).to.equal(2);\n  });","file":"user_test.js","skipped":false,"dir":"test"},{"name":"uses name attribute when passed in, not id","suites":["User","new"],"updatePoint":{"line":19,"column":48,"index":546},"line":19,"code":"  it('uses name attribute when passed in, not id', function () {\n    const user = new User('hubot', {\n      name: 'tobuh'\n    });\n    expect(user.name).to.equal('tobuh');\n  });","file":"user_test.js","skipped":false,"dir":"test"}]}