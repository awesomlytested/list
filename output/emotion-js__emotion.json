{"repo":"emotion-js/emotion","url":"https://github.com/emotion-js/emotion","branch":"main","configs":[{"package":"emotion-monorepo","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/babel-plugin-jsx-pragmatic","lang":"js","dir":"packages/babel-plugin-jsx-pragmatic/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/babel-plugin","lang":"js","dir":"packages/babel-plugin/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/babel-preset-css-prop","lang":"js","dir":"packages/babel-preset-css-prop/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/cache","lang":"js","dir":"packages/cache/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/css","lang":"js","dir":"packages/css/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/eslint-plugin","lang":"js","dir":"packages/eslint-plugin/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/hash","lang":"js","dir":"packages/hash/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/jest","lang":"js","dir":"packages/jest/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/native","lang":"js","dir":"packages/native/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/primitives","lang":"js","dir":"packages/primitives/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/react","lang":"js","dir":"packages/react/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/server","lang":"js","dir":"packages/server/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@emotion/sheet","lang":"js","dir":"packages/sheet/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/styled","lang":"js","dir":"packages/styled/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@emotion/weak-memoize","lang":"js","dir":"packages/weak-memoize/__tests__","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"babel-plugin-jsx-pragmatic should throw error when invalid options","suites":[],"updatePoint":{"line":11,"column":72,"index":402},"line":11,"code":"test('babel-plugin-jsx-pragmatic should throw error when invalid options', () => {\n  expect(() => {\n    transformSync('<></>', {\n      filename: __filename,\n      plugins: [[jsxPragmatic, {\n        export: 'jsx'\n      }]]\n    });\n  }).toThrow('@emotion/babel-plugin-jsx-pragmatic: You must specify `module` and `import`');\n});","file":"index.js","skipped":false,"dir":"packages/babel-plugin-jsx-pragmatic/__tests__"},{"name":"it works","suites":[],"updatePoint":{"line":8,"column":14,"index":256},"line":8,"code":"test('it works', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('body').innerHTML = `<style data-emotion=\"css ${hash}\">.css-${hash}{${css}}</style>`;\n  let cache = createCache({\n    key: 'css'\n  });\n  expect(cache.inserted).toEqual({\n    [hash]: true\n  });\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"hydration.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"rehydrated styles to head can be flushed","suites":[],"updatePoint":{"line":20,"column":46,"index":644},"line":20,"code":"test('rehydrated styles to head can be flushed', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('head').innerHTML = `<style data-emotion=\"emo ${hash}\">.emo-${hash}{${css}}</style>`; // this moves emotion style tags at initialization time\n\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  let cache = createCache({\n    key: 'emo'\n  });\n  expect(document.documentElement).toMatchSnapshot();\n  cache.sheet.flush();\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"hydration.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"flushing rehydrated styles in the head only affect styles matching the cache key","suites":[],"updatePoint":{"line":36,"column":86,"index":1202},"line":36,"code":"test('flushing rehydrated styles in the head only affect styles matching the cache key', () => {\n  safeQuerySelector('head').innerHTML = ['<style data-emotion=\"emo 1lrxbo5\">.emo-1lrxbo5{color:hotpink;}</style>', '<style data-emotion=\"css qweqwee\">.css-qweqwee{color:red;}</style>'].join(''); // this moves emotion style tags at initialization time\n\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  const cache = createCache({\n    key: 'emo'\n  });\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css qweqwee\"\n          data-s=\"\"\n        >\n          .css-qweqwee{color:red;}\n        </style>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n          data-s=\"\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n  cache.sheet.flush();\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css qweqwee\"\n          data-s=\"\"\n        >\n          .css-qweqwee{color:red;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n});","file":"hydration.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"should only hydrate style elements matching the cache key","suites":[],"updatePoint":{"line":80,"column":63,"index":2326},"line":80,"code":"test('should only hydrate style elements matching the cache key', () => {\n  let css = `color:hotpink;`;\n  let hash = hashString(css);\n  safeQuerySelector('body').innerHTML = `<style data-emotion=\"emo ${hash}\">.emo-${hash}{${css}}</style>`;\n  const cache = createCache({\n    key: 'custom-key'\n  });\n  expect(cache.inserted).toEqual({});\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head />\n      <body>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </body>\n    </html>\n  `);\n  const cache2 = createCache({\n    key: 'emo'\n  });\n  expect(cache2.inserted).toEqual({\n    [hash]: true\n  });\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"emo 1lrxbo5\"\n        >\n          .emo-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body />\n    </html>\n  `);\n});","file":"hydration.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"Existing client-side inserted styles from Emotion 10 should not be moved","suites":[],"updatePoint":{"line":119,"column":78,"index":3288},"line":119,"code":"test('Existing client-side inserted styles from Emotion 10 should not be moved', () => {\n  // the nested nature isn't special, it's just meant to be a general \"make sure they're not moved\"\n  safeQuerySelector('body').innerHTML = `<div><style data-emotion=\"css-global\"></style><div><style data-emotion=\"css\"></style></div></div>`;\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head />\n      <body>\n        <div>\n          <style\n            data-emotion=\"css-global\"\n          />\n          <div>\n            <style\n              data-emotion=\"css\"\n            />\n          </div>\n        </div>\n      </body>\n    </html>\n  `);\n  const css = `color:hotpink;`;\n  const hash = hashString(css);\n  let thing = document.createElement('div');\n  thing.innerHTML = `<style data-emotion=\"css ${hash}\">.css-${hash}{${css}}</style>`;\n  safeQuerySelector('body').appendChild(thing);\n  jest.resetModules();\n\n  require('@emotion/react');\n\n  expect(document.documentElement).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"css 1lrxbo5\"\n          data-s=\"\"\n        >\n          .css-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body>\n        <div>\n          <style\n            data-emotion=\"css-global\"\n          />\n          <div>\n            <style\n              data-emotion=\"css\"\n            />\n          </div>\n        </div>\n        <div />\n      </body>\n    </html>\n  `);\n});","file":"hydration.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"throws correct error with invalid key","suites":[],"updatePoint":{"line":7,"column":43,"index":282},"line":7,"code":"test('throws correct error with invalid key', () => {\n  expect(() => {\n    createCache({\n      key: '.'\n    });\n  }).toThrowErrorMatchingSnapshot();\n});","file":"index.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"should accept insertionPoint option","suites":[],"updatePoint":{"line":14,"column":39,"index":431},"line":14,"code":"it('should accept insertionPoint option', () => {\n  const head = safeQuerySelector('head');\n  head.innerHTML = `\n    <style id=\"first\"></style>\n    <style id=\"last\"></style>\n  `; // the sheet should be inserted between the first and last style nodes\n\n  const cache = createCache({\n    key: 'test-insertion-point',\n    insertionPoint: safeQuerySelector('#first')\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      display: 'flex',\n      color: 'blue'\n    }\n  })));\n  expect(document.head).toMatchSnapshot();\n});","file":"index.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"should accept container option","suites":[],"updatePoint":{"line":35,"column":34,"index":974},"line":35,"code":"it('should accept container option', () => {\n  const body = safeQuerySelector('body');\n  body.innerHTML = `\n    <div id=\"container\" />\n  `;\n  const cache = createCache({\n    key: 'test-container',\n    container: safeQuerySelector('#container')\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      display: 'flex',\n      color: 'blue'\n    }\n  })));\n  expect(document.body).toMatchSnapshot();\n});","file":"index.js","skipped":false,"dir":"packages/cache/__tests__"},{"name":"should be converted to use the emotion target className","suites":["component selector"],"updatePoint":{"line":7,"column":63,"index":280},"line":7,"code":"  test('should be converted to use the emotion target className', () => {\n    const FakeComponent = styled.div`\n      color: blue;\n    `;\n    const cls2 = css`\n      ${FakeComponent} {\n        color: red;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    }, /*#__PURE__*/React.createElement(FakeComponent, null))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"component-selector.test.js","skipped":false,"dir":"packages/css/test"},{"name":"float property","suites":["css"],"updatePoint":{"line":6,"column":22,"index":200},"line":6,"code":"  test('float property', () => {\n    const cls1 = css`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles more than 10 dynamic properties","suites":["css"],"updatePoint":{"line":15,"column":47,"index":464},"line":15,"code":"  test('handles more than 10 dynamic properties', () => {\n    const cls1 = css`\n      text-decoration: ${'underline'};\n      border-right: solid blue 54px;\n      background: ${'white'};\n      color: ${'black'};\n      display: ${'block'};\n      border-radius: ${'3px'};\n      padding: ${'25px'};\n      width: ${'500px'};\n      z-index: ${100};\n      font-size: ${'18px'};\n      text-align: ${'center'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"falsy value in nested selector on object","suites":["css"],"updatePoint":{"line":34,"column":48,"index":1032},"line":34,"code":"  test('falsy value in nested selector on object', () => {\n    const cls1 = css({\n      ':hover': {\n        display: null,\n        color: 'hotpink'\n      }\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"boolean as value","suites":["css"],"updatePoint":{"line":46,"column":24,"index":1330},"line":46,"code":"  test('boolean as value', () => {\n    const cls1 = css({\n      display: 'flex',\n      color: false,\n      backgroundColor: true\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"auto px","suites":["css"],"updatePoint":{"line":57,"column":15,"index":1616},"line":57,"code":"  test('auto px', () => {\n    const cls1 = css({\n      display: 'flex',\n      flex: 1,\n      fontSize: 10,\n      '--custom': 5\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random interpolation with undefined values","suites":["css"],"updatePoint":{"line":69,"column":50,"index":1944},"line":69,"code":"  test('random interpolation with undefined values', () => {\n    const cls2 = css`\n      ${undefined};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random expression","suites":["css"],"updatePoint":{"line":79,"column":25,"index":2218},"line":79,"code":"  test('random expression', () => {\n    const cls2 = css`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${css`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"simple composition","suites":["css"],"updatePoint":{"line":97,"column":26,"index":2654},"line":97,"code":"  test('simple composition', () => {\n    const cls1 = css`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles objects","suites":["css"],"updatePoint":{"line":113,"column":23,"index":3019},"line":113,"code":"  test('handles objects', () => {\n    const cls1 = css({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles array of objects","suites":["css"],"updatePoint":{"line":127,"column":32,"index":3384},"line":127,"code":"  test('handles array of objects', () => {\n    const cls1 = css([{\n      height: 50,\n      width: 20\n    }, null]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"computed key is only dynamic","suites":["css"],"updatePoint":{"line":137,"column":36,"index":3662},"line":137,"code":"  test('computed key is only dynamic', () => {\n    const cls1 = css({\n      fontSize: 10,\n      [`w${'idth'}`]: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition with objects","suites":["css"],"updatePoint":{"line":147,"column":32,"index":3939},"line":147,"code":"  test('composition with objects', () => {\n    const cls1 = css({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"@supports","suites":["css"],"updatePoint":{"line":172,"column":17,"index":4495},"line":172,"code":"  test('@supports', () => {\n    const cls1 = css`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested at rules","suites":["css"],"line":183,"code":"  test.skip('nested at rules', () => {","file":"css.test.js","skipped":true,"dir":"packages/css/test"},{"name":"nested array","suites":["css"],"updatePoint":{"line":203,"column":20,"index":5275},"line":203,"code":"  test('nested array', () => {\n    const cls1 = css([[{\n      display: 'inline'\n    }], [{\n      display: 'inline-block'\n    }], [{\n      display: 'block'\n    }, [{\n      display: 'flex'\n    }, [{\n      display: 'table'\n    }, {\n      color: 'darkorchid'\n    }, [{\n      fontSize: 16\n    }, [{\n      '&:after': {\n        backgroundColor: 'aquamarine'\n      }\n    }]]]]]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"explicit false","suites":["css"],"updatePoint":{"line":228,"column":22,"index":5808},"line":228,"code":"  test('explicit false', () => {\n    const cls1 = css(false);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"array with explicit false","suites":["css"],"updatePoint":{"line":235,"column":33,"index":6039},"line":235,"code":"  test('array with explicit false', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }], false]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"array with explicit true","suites":["css"],"updatePoint":{"line":244,"column":32,"index":6304},"line":244,"code":"  test('array with explicit true', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }], true]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested","suites":["css"],"updatePoint":{"line":253,"column":14,"index":6550},"line":253,"code":"  test('nested', () => {\n    const cls1 = css`\n      color: yellow;\n      & .some-class {\n        display: flex;\n        & .some-other-class {\n          background-color: hotpink;\n        }\n        @media (max-width: 600px) {\n          background-color: pink;\n        }\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-class\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-other-class\"\n    })))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"explicit &","suites":["css"],"updatePoint":{"line":275,"column":18,"index":7163},"line":275,"code":"  test('explicit &', () => {\n    flush();\n    const cls1 = css`\n      &.another-class {\n        display: flex;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: `${cls1} another-class`\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n    flush();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"falsy property value in object","suites":["css"],"updatePoint":{"line":289,"column":38,"index":7536},"line":289,"code":"  test('falsy property value in object', () => {\n    const cls = css({\n      display: 'flex',\n      backgroundColor: undefined\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"registered styles as nested selector value in object","suites":["css"],"updatePoint":{"line":299,"column":60,"index":7850},"line":299,"code":"  test('registered styles as nested selector value in object', () => {\n    const cls = css({\n      display: 'flex',\n      backgroundColor: 'hotpink'\n    });\n    const cls1 = css({\n      ':hover': cls\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition stuff","suites":["css"],"updatePoint":{"line":312,"column":25,"index":8181},"line":312,"code":"  test('composition stuff', () => {\n    const cls1 = css({\n      justifyContent: 'center'\n    });\n    const cls2 = css([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"null rule","suites":["css"],"updatePoint":{"line":326,"column":17,"index":8613},"line":326,"code":"  test('null rule', () => {\n    const cls1 = css();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"css variables","suites":["css"],"updatePoint":{"line":333,"column":21,"index":8827},"line":333,"code":"  test('css variables', () => {\n    const cls1 = css`\n      --some-var: 1px;\n      width: var(--some-var);\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"null value","suites":["css"],"updatePoint":{"line":343,"column":18,"index":9096},"line":343,"code":"  test('null value', () => {\n    const cls1 = css(null);\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON()).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"flushes correctly","suites":["css"],"updatePoint":{"line":349,"column":25,"index":9295},"line":349,"code":"  test('flushes correctly', () => {\n    const cls1 = css`\n      display: flex;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    flush();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"media query specificity","suites":["css"],"updatePoint":{"line":363,"column":31,"index":9712},"line":363,"code":"  test('media query specificity', () => {\n    flush();\n    const cls = css`\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n\n      @media (min-width: 420px) {\n        width: 96px;\n        height: 96px;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(sheet).toMatchSnapshot();\n    expect(tree).toMatchSnapshot();\n    flush();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"weakmap","suites":["css"],"updatePoint":{"line":382,"column":15,"index":10137},"line":382,"code":"  test('weakmap', () => {\n    const styles = {\n      display: 'flex'\n    };\n    const cls1 = css(styles);\n    const cls2 = css(styles);\n    const tree1 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree1).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"manually use label property","suites":["css"],"updatePoint":{"line":397,"column":35,"index":10607},"line":397,"code":"  test('manually use label property', () => {\n    flush();\n    const cls1 = css`\n      color: hotpink;\n      label: wow;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"multiline declaration","suites":["css"],"updatePoint":{"line":409,"column":29,"index":10924},"line":409,"code":"  test('multiline declaration', () => {\n    /* eslint-disable prettier/prettier */\n    const cls1 = css`\n      display: grid;\n      grid:\n        'AppBar' auto\n        'Main' 1fr\n        / 1fr;\n    `;\n    /* eslint-enable prettier/prettier */\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"multiline selector","suites":["css"],"updatePoint":{"line":425,"column":26,"index":11323},"line":425,"code":"  test('multiline selector', () => {\n    /* eslint-disable prettier/prettier */\n    const cls1 = css`\n      .my-class:hover .its-child {\n        background: pink;\n      }\n    `;\n    /* eslint-enable prettier/prettier */\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"rule after media query","suites":["css"],"updatePoint":{"line":439,"column":30,"index":11706},"line":439,"code":"  test('rule after media query', () => {\n    const cls1 = css`\n      @media (min-width: 600px) {\n        color: green;\n      }\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested at rule","suites":["css"],"updatePoint":{"line":453,"column":22,"index":12038},"line":453,"code":"  test('nested at rule', () => {\n    const cls = css({\n      '@media (min-width: 980px)': {\n        backgroundColor: 'blue',\n        '@supports (width: 100vw)': {\n          backgroundColor: 'red'\n        }\n      }\n    }); // this works correctly but `css` doesn't print it correctly so the snapshot doesn't look correct\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"array fallback","suites":["css"],"updatePoint":{"line":468,"column":22,"index":12516},"line":468,"code":"  test('array fallback', () => {\n    const cls = css({\n      color: ['yellow', 'hotpink']\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"merge 2","suites":["cx"],"updatePoint":{"line":6,"column":15,"index":182},"line":6,"code":"  test('merge 2', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, 'modal')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"merge 3","suites":["cx"],"updatePoint":{"line":16,"column":15,"index":456},"line":16,"code":"  test('merge 3', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, cls2, 'modal')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"merge 4","suites":["cx"],"updatePoint":{"line":30,"column":15,"index":812},"line":30,"code":"  test('merge 4', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(cls1, cls2, 'modal', 'profile')\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"all types","suites":["cx"],"updatePoint":{"line":44,"column":17,"index":1181},"line":44,"code":"  test('all types', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const cls3 = css`\n      font-size: 20px;\n      background: darkorange;\n    `;\n    const cls4 = css`\n      font-size: 20px;\n      background: darkgreen;\n    `;\n    const foo = true;\n    const bar = false;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx({\n        [cls1]: foo\n      }, 'modal', {\n        [cls2]: bar\n      }, 'profile', [[cls3, [cls4]]])\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"fun fun functions","suites":["cx"],"updatePoint":{"line":72,"column":25,"index":1834},"line":72,"code":"  test('fun fun functions', () => {\n    const cls1 = css`\n      font-size: 20px;\n      background: green;\n    `;\n    const cls2 = css`\n      font-size: 20px;\n      background: blue;\n    `;\n    const cls3 = css`\n      font-size: 20px;\n      background: darkorange;\n    `;\n    const cls4 = css`\n      font-size: 20px;\n      background: darkgreen;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cx([[cls1, false && cls2, 'modal'], [cls3, {\n        [cls4]: true\n      }, 'profile']])\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"no extra whitespace","suites":["cx"],"updatePoint":{"line":96,"column":27,"index":2429},"line":96,"code":"  test('no extra whitespace', () => {\n    expect(cx('blockquote', '', 'news')).toMatchSnapshot();\n    expect(cx('', 'group', '', 'news', '')).toMatchSnapshot();\n    expect(cx('author', '')).toMatchSnapshot();\n    expect(cx({\n      someClass: true,\n      '': true\n    })).toMatchSnapshot();\n    expect(cx({\n      someClass: true,\n      '': true,\n      anotherClass: true\n    })).toMatchSnapshot();\n  });","file":"cx.test.js","skipped":false,"dir":"packages/css/test"},{"name":"basic","suites":["injectGlobal"],"updatePoint":{"line":7,"column":13,"index":182},"line":7,"code":"  test('basic', () => {\n    injectGlobal`\n      html {\n        background: pink;\n      }\n      html.active {\n        background: red;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"interpolated value","suites":["injectGlobal"],"updatePoint":{"line":18,"column":26,"index":387},"line":18,"code":"  test('interpolated value', () => {\n    const color = 'yellow';\n    injectGlobal`\n      body {\n        color: ${color};\n        margin: 0;\n        padding: 0;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested interpolated media query","suites":["injectGlobal"],"updatePoint":{"line":29,"column":39,"index":618},"line":29,"code":"  test('nested interpolated media query', () => {\n    injectGlobal`\n      body {\n        ${'@media (max-width: 600px)'} {\n          display: flex;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random interpolation","suites":["injectGlobal"],"updatePoint":{"line":39,"column":28,"index":822},"line":39,"code":"  test('random interpolation', () => {\n    const cls = css`\n      display: flex;\n    `;\n    injectGlobal`\n      body {\n        ${cls};\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"with @font-face","suites":["injectGlobal"],"updatePoint":{"line":50,"column":23,"index":1010},"line":50,"code":"  test('with @font-face', () => {\n    injectGlobal`\n      @font-face {\n        font-family: 'Patrick Hand SC';\n        font-style: normal;\n        font-weight: 400;\n        src: local('Patrick Hand SC'), local('PatrickHandSC-Regular'),\n          url(https://fonts.gstatic.com/s/patrickhandsc/v4/OYFWCgfCR-7uHIovjUZXsZ71Uis0Qeb9Gqo8IZV7ckE.woff2)\n            format('woff2');\n        unicode-range: U+0100-024f, U+1-1eff, U+20a0-20ab, U+20ad-20cf,\n          U+2c60-2c7f, U+A720-A7FF;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"pseudo in @media","suites":["injectGlobal"],"updatePoint":{"line":65,"column":24,"index":1552},"line":65,"code":"  test('pseudo in @media', () => {\n    injectGlobal`\n      @media (min-width: 300px) {\n        .header:after {\n          content: '';\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"inject-global.test.js","skipped":false,"dir":"packages/css/test"},{"name":"float property","suites":["css"],"updatePoint":{"line":6,"column":22,"index":220},"line":6,"code":"  test('float property', () => {\n    const cls1 = differentCss`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles more than 10 dynamic properties","suites":["css"],"updatePoint":{"line":15,"column":47,"index":493},"line":15,"code":"  test('handles more than 10 dynamic properties', () => {\n    const cls1 = differentCss`\n      text-decoration: ${'underline'};\n      border-right: solid blue 54px;\n      background: ${'white'};\n      color: ${'black'};\n      display: ${'block'};\n      border-radius: ${'3px'};\n      padding: ${'25px'};\n      width: ${'500px'};\n      z-index: ${100};\n      font-size: ${'18px'};\n      text-align: ${'center'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"falsy value in nested selector on object","suites":["css"],"updatePoint":{"line":34,"column":48,"index":1070},"line":34,"code":"  test('falsy value in nested selector on object', () => {\n    const cls1 = differentCss({\n      ':hover': {\n        display: null,\n        color: 'hotpink'\n      }\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"boolean as value","suites":["css"],"updatePoint":{"line":46,"column":24,"index":1377},"line":46,"code":"  test('boolean as value', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      color: false,\n      backgroundColor: true\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"auto px","suites":["css"],"updatePoint":{"line":57,"column":15,"index":1672},"line":57,"code":"  test('auto px', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      flex: 1,\n      fontSize: 10\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random interpolation with undefined values","suites":["css"],"updatePoint":{"line":68,"column":50,"index":1988},"line":68,"code":"  test('random interpolation with undefined values', () => {\n    const cls2 = differentCss`\n      ${undefined};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random expression","suites":["css"],"updatePoint":{"line":78,"column":25,"index":2271},"line":78,"code":"  test('random expression', () => {\n    const cls2 = differentCss`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${differentCss`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"simple composition","suites":["css"],"updatePoint":{"line":96,"column":26,"index":2725},"line":96,"code":"  test('simple composition', () => {\n    const cls1 = differentCss`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = differentCss`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles objects","suites":["css"],"updatePoint":{"line":112,"column":23,"index":3108},"line":112,"code":"  test('handles objects', () => {\n    const cls1 = differentCss({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles array of objects","suites":["css"],"updatePoint":{"line":126,"column":32,"index":3482},"line":126,"code":"  test('handles array of objects', () => {\n    const cls1 = differentCss([{\n      height: 50,\n      width: 20\n    }, null]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"computed key is only dynamic","suites":["css"],"updatePoint":{"line":136,"column":36,"index":3769},"line":136,"code":"  test('computed key is only dynamic', () => {\n    const cls1 = differentCss({\n      fontSize: 10,\n      [`w${'idth'}`]: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition with objects","suites":["css"],"updatePoint":{"line":146,"column":32,"index":4055},"line":146,"code":"  test('composition with objects', () => {\n    const cls1 = differentCss({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = differentCss`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"@supports","suites":["css"],"updatePoint":{"line":171,"column":17,"index":4629},"line":171,"code":"  test('@supports', () => {\n    const cls1 = differentCss`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested at rules","suites":["css"],"line":182,"code":"  test.skip('nested at rules', () => {","file":"instance/css.test.js","skipped":true,"dir":"packages/css/test"},{"name":"nested array","suites":["css"],"updatePoint":{"line":202,"column":20,"index":5427},"line":202,"code":"  test('nested array', () => {\n    const cls1 = differentCss([[{\n      display: 'inline'\n    }], [{\n      display: 'inline-block'\n    }], [{\n      display: 'block'\n    }, [{\n      display: 'flex'\n    }, [{\n      display: 'table'\n    }, {\n      color: 'darkorchid'\n    }, [{\n      fontSize: 16\n    }, [{\n      '&:after': {\n        backgroundColor: 'aquamarine'\n      }\n    }]]]]]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"explicit false","suites":["css"],"updatePoint":{"line":227,"column":22,"index":5969},"line":227,"code":"  test('explicit false', () => {\n    const cls1 = differentCss(false);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"array with explicit false","suites":["css"],"updatePoint":{"line":234,"column":33,"index":6209},"line":234,"code":"  test('array with explicit false', () => {\n    const cls1 = differentCss([[{\n      display: 'flex'\n    }], false]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"array with explicit true","suites":["css"],"updatePoint":{"line":243,"column":32,"index":6483},"line":243,"code":"  test('array with explicit true', () => {\n    const cls1 = differentCss([[{\n      display: 'flex'\n    }], true]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested","suites":["css"],"updatePoint":{"line":252,"column":14,"index":6738},"line":252,"code":"  test('nested', () => {\n    const cls1 = differentCss`\n      color: yellow;\n      & .some-class {\n        display: flex;\n        & .some-other-class {\n          background-color: hotpink;\n        }\n        @media (max-width: 600px) {\n          background-color: pink;\n        }\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-class\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"some-other-class\"\n    })))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"explicit &","suites":["css"],"updatePoint":{"line":274,"column":18,"index":7360},"line":274,"code":"  test('explicit &', () => {\n    flush();\n    const cls1 = differentCss`\n      &.another-class {\n        display: flex;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: `${cls1} another-class`\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n    flush();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"falsy property value in object","suites":["css"],"updatePoint":{"line":288,"column":38,"index":7742},"line":288,"code":"  test('falsy property value in object', () => {\n    const cls = differentCss({\n      display: 'flex',\n      backgroundColor: undefined\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"registered styles as nested selector value in object","suites":["css"],"updatePoint":{"line":298,"column":60,"index":8065},"line":298,"code":"  test('registered styles as nested selector value in object', () => {\n    const cls = differentCss({\n      display: 'flex',\n      backgroundColor: 'hotpink'\n    });\n    const cls1 = differentCss({\n      ':hover': cls\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition stuff","suites":["css"],"updatePoint":{"line":311,"column":25,"index":8414},"line":311,"code":"  test('composition stuff', () => {\n    const cls1 = differentCss({\n      justifyContent: 'center'\n    });\n    const cls2 = differentCss([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"null rule","suites":["css"],"updatePoint":{"line":325,"column":17,"index":8864},"line":325,"code":"  test('null rule', () => {\n    const cls1 = differentCss();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"css variables","suites":["css"],"updatePoint":{"line":332,"column":21,"index":9087},"line":332,"code":"  test('css variables', () => {\n    const cls1 = differentCss`\n      --some-var: 1px;\n      width: var(--some-var);\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"null value","suites":["css"],"updatePoint":{"line":342,"column":18,"index":9365},"line":342,"code":"  test('null value', () => {\n    const cls1 = differentCss(null);\n    const cls2 = differentCss`\n      ${null};\n    `;\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON()).toMatchSnapshot();\n    expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON()).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"flushes correctly","suites":["css"],"updatePoint":{"line":354,"column":25,"index":9755},"line":354,"code":"  test('flushes correctly', () => {\n    const cls1 = differentCss`\n      display: flex;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    flush();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"media query specificity","suites":["css"],"updatePoint":{"line":368,"column":31,"index":10181},"line":368,"code":"  test('media query specificity', () => {\n    flush();\n    const cls = differentCss`\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n\n      @media (min-width: 420px) {\n        width: 96px;\n        height: 96px;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls\n    })).toJSON();\n    expect(sheet).toMatchSnapshot();\n    expect(tree).toMatchSnapshot();\n    flush();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"weakmap","suites":["css"],"updatePoint":{"line":387,"column":15,"index":10615},"line":387,"code":"  test('weakmap', () => {\n    const styles = {\n      display: 'flex'\n    };\n    const cls1 = differentCss(styles);\n    const cls2 = differentCss(styles);\n    const tree1 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree1).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"manually use label property","suites":["css"],"updatePoint":{"line":402,"column":35,"index":11103},"line":402,"code":"  test('manually use label property', () => {\n    flush();\n    const cls1 = differentCss`\n      color: hotpink;\n      label: wow;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(sheet).toMatchSnapshot();\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"sets correct nonce value","suites":["css"],"updatePoint":{"line":414,"column":32,"index":11432},"line":414,"code":"  test('sets correct nonce value', () => {\n    flush();\n    differentCss`\n      color: hotpink;\n    `;\n    differentCss`\n      color: yellow;\n    `;\n    expect(sheet.tags).toHaveLength(2);\n    expect(sheet.tags[0].getAttribute('nonce')).toBe('some-nonce');\n    expect(sheet.tags[1].getAttribute('nonce')).toBe('some-nonce');\n  });","file":"instance/css.test.js","skipped":false,"dir":"packages/css/test"},{"name":"renders styles with ids","suites":["renderStylesToString"],"updatePoint":{"line":21,"column":31,"index":737},"line":21,"code":"  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = getComponents(emotion, reactEmotion);\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)))).toMatchSnapshot();\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page2, null)))).toMatchSnapshot();\n    });\n  });","file":"instance/inline.test.js","skipped":false,"dir":"packages/css/test"},{"name":"renders large recursive component","suites":["renderStylesToString"],"updatePoint":{"line":32,"column":41,"index":1236},"line":32,"code":"  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const BigComponent = createBigComponent(emotion);\n      expect(stripDataReactRoot(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }))))).toMatchSnapshot();\n    });\n  });","file":"instance/inline.test.js","skipped":false,"dir":"packages/css/test"},{"name":"only inserts rules that are not in the critical css","suites":["hydration"],"updatePoint":{"line":43,"column":59,"index":1671},"line":43,"code":"  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = getComponents(emotion, reactEmotion);\n      return emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)));\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(getInjectedRules()).toMatchSnapshot();\n    expect(getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });","file":"instance/inline.test.js","skipped":false,"dir":"packages/css/test"},{"name":"inserts style tags into container","suites":["general instance tests"],"updatePoint":{"line":4,"column":41,"index":203},"line":4,"code":"  test('inserts style tags into container', () => {\n    css`\n      display: flex;\n    `;\n    sheet.tags.forEach(tag => {\n      expect(tag.getAttribute('data-emotion')).toBe('some-key');\n      expect(tag.getAttribute('nonce')).toBe('some-nonce');\n      expect(tag.parentNode).toBe(container);\n    });\n  });","file":"instance/instance.test.js","skipped":false,"dir":"packages/css/test"},{"name":"throws with invalid key","suites":["general instance tests"],"updatePoint":{"line":14,"column":31,"index":499},"line":14,"code":"  test('throws with invalid key', () => {\n    expect(() => {\n      createEmotion({\n        key: 'css1'\n      });\n    }).toThrowErrorMatchingSnapshot();\n  });","file":"instance/instance.test.js","skipped":false,"dir":"packages/css/test"},{"name":"renders styles with ids","suites":["renderStylesToNodeStream"],"updatePoint":{"line":22,"column":31,"index":674},"line":22,"code":"  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = util.getComponents(emotion, reactEmotion);\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer)).toMatchSnapshot();\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page2, null), emotionServer)).toMatchSnapshot();\n    });\n  });","file":"instance/stream.test.js","skipped":false,"dir":"packages/css/test"},{"name":"renders large recursive component","suites":["renderStylesToNodeStream"],"updatePoint":{"line":33,"column":41,"index":1184},"line":33,"code":"  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const BigComponent = util.createBigComponent(emotion);\n      expect(stripDataReactRoot(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }), emotionServer))).toMatchSnapshot();\n    });\n  });","file":"instance/stream.test.js","skipped":false,"dir":"packages/css/test"},{"name":"only inserts rules that are not in the critical css","suites":["hydration"],"updatePoint":{"line":44,"column":59,"index":1630},"line":44,"code":"  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = util.getComponents(emotion, reactEmotion);\n      return util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer);\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = util.getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(util.getInjectedRules(document)).toMatchSnapshot();\n    expect(util.getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });","file":"instance/stream.test.js","skipped":false,"dir":"packages/css/test"},{"name":"renders","suites":["keyframes"],"updatePoint":{"line":9,"column":15,"index":242},"line":9,"code":"  test('renders', () => {\n    const bounce = keyframes`\n      from, 20%, 53%, 80%, to {\n        animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);\n        transform: translate3d(0,0,0);\n      }\n    \n      40%, 43% {\n        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n        transform: translate3d(0, -30px, 0);\n      }\n    \n      70% {\n        animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);\n        transform: translate3d(0, -15px, 0);\n      }\n    \n      90% {\n        transform: translate3d(0,-4px,0);\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"h1\", {\n      className: css`\n            animation: ${bounce} 2s linear infinite;\n          `\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"keyframes.test.js","skipped":false,"dir":"packages/css/test"},{"name":"keyframes with interpolation","suites":["keyframes"],"updatePoint":{"line":37,"column":36,"index":1085},"line":37,"code":"  test('keyframes with interpolation', () => {\n    const endingRotation = '360deg';\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"h1\", {\n      className: css`\n            animation: ${keyframes`\n    from {\n      transform: rotate(0deg);\n    }\n  \n    to {\n      transform: rotate(${endingRotation});\n    }\n  `} 2s linear infinite;\n          `\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"keyframes.test.js","skipped":false,"dir":"packages/css/test"},{"name":"input + label styled","suites":["label pattern"],"updatePoint":{"line":8,"column":28,"index":270},"line":8,"code":"  test('input + label styled', () => {\n    const Input = styled.input`\n      & + label::after {\n        color: pink;\n        background: orange;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Input, null), /*#__PURE__*/React.createElement(\"label\", null, \"Label\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"label-pattern.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random expression","suites":["css"],"updatePoint":{"line":12,"column":25,"index":331},"line":12,"code":"  test('random expression', () => {\n    const cls2 = css`\n      font-size: 20px;\n      @media (min-width: 420px) {\n        color: blue;\n        ${css`\n          width: 96px;\n          height: 96px;\n        `};\n        line-height: 40px;\n      }\n      background: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition","suites":["css"],"updatePoint":{"line":30,"column":19,"index":760},"line":30,"code":"  test('composition', () => {\n    const cls1 = css`\n      display: flex;\n      &:hover {\n        color: hotpink;\n      }\n    `;\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles objects","suites":["css"],"updatePoint":{"line":46,"column":23,"index":1125},"line":46,"code":"  test('handles objects', () => {\n    const cls1 = css({\n      float: 'left',\n      display: 'flex',\n      color: `${'blue'}`,\n      fontSize: `${'20px'}`,\n      height: 50,\n      width: 20\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition with objects","suites":["css"],"updatePoint":{"line":60,"column":32,"index":1490},"line":60,"code":"  test('composition with objects', () => {\n    const cls1 = css({\n      display: 'flex',\n      width: 30,\n      height: 'calc(40vw - 50px)',\n      '&:hover': {\n        color: 'blue'\n      },\n      ':after': {\n        content: '\" \"',\n        color: 'red'\n      },\n      '@media(min-width: 420px)': {\n        color: 'green'\n      }\n    });\n    const cls2 = css`\n      ${cls1};\n      justify-content: center;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"@supports","suites":["css"],"updatePoint":{"line":85,"column":17,"index":2046},"line":85,"code":"  test('@supports', () => {\n    const cls1 = css`\n      @supports (display: grid) {\n        display: grid;\n      }\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"nested array","suites":["css"],"updatePoint":{"line":96,"column":20,"index":2329},"line":96,"code":"  test('nested array', () => {\n    const cls1 = css([[{\n      display: 'flex'\n    }]]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"composition stuff","suites":["css"],"updatePoint":{"line":105,"column":25,"index":2580},"line":105,"code":"  test('composition stuff', () => {\n    const cls1 = css({\n      justifyContent: 'center'\n    });\n    const cls2 = css([cls1]);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls2\n    })).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"null rule","suites":["css"],"updatePoint":{"line":119,"column":17,"index":3012},"line":119,"code":"  test('null rule', () => {\n    const cls1 = css();\n    const tree = renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: cls1\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"no dynamic","suites":["css"],"updatePoint":{"line":126,"column":18,"index":3223},"line":126,"code":"  test('no dynamic', () => {\n    const H1 = styled('h1')`\n      float: left;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"object as style","suites":["css"],"updatePoint":{"line":133,"column":23,"index":3457},"line":133,"code":"  test('object as style', () => {\n    const H1 = styled('h1')(props => ({\n      fontSize: props.fontSize\n    }), props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"component as selectors (object syntax)","suites":["css"],"updatePoint":{"line":147,"column":46,"index":3850},"line":147,"code":"  test('component as selectors (object syntax)', () => {\n    const fontSize = '20px';\n    const H1 = styled('h1')({\n      fontSize\n    });\n    const Thing = styled('div')({\n      display: 'flex',\n      [String(H1)]: {\n        color: 'green'\n      }\n    });\n    const spy = jest.fn(); // $FlowFixMe\n\n    console.error = spy;\n    expect(() => renderer.create( /*#__PURE__*/React.createElement(Thing, null, \"hello \", /*#__PURE__*/React.createElement(H1, null, \"This will be green\"), \" world\"))).toThrowErrorMatchingSnapshot();\n    expect(spy.mock.calls.length).toBe(1);\n    expect(spy.mock.calls[0][0].split('\\n')[0]).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"component selectors without target","suites":["css"],"updatePoint":{"line":165,"column":42,"index":4486},"line":165,"code":"  test('component selectors without target', () => {\n    const SomeComponent = styled('div')`\n      color: blue;\n    `;\n    expect(() => {\n      css`\n        ${SomeComponent} {\n          color: red;\n        }\n      `;\n    }).toThrowErrorMatchingSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"glamorous style api & composition","suites":["css"],"updatePoint":{"line":177,"column":41,"index":4748},"line":177,"code":"  test('glamorous style api & composition', () => {\n    const H1 = styled('h1')(props => ({\n      fontSize: props.fontSize\n    }));\n    const H2 = styled(H1)(props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H2, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"random expressions undefined return","suites":["css"],"updatePoint":{"line":192,"column":43,"index":5165},"line":192,"code":"  test('random expressions undefined return', () => {\n    const H1 = styled('h1')`\n      ${props => props.prop && css`\n          font-size: 1rem;\n        `};\n      color: green;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H1, {\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"function in expression","suites":["css"],"updatePoint":{"line":204,"column":30,"index":5518},"line":204,"code":"  test('function in expression', () => {\n    const fontSize = 20;\n    const H1 = styled('h1')`\n      font-size: ${fontSize + 'px'};\n    `;\n    const H2 = styled(H1)`\n      font-size: ${({\n      scale\n    }) => fontSize * scale + 'px'};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(H2, {\n      scale: 2,\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"name with class component","suites":["css"],"updatePoint":{"line":220,"column":33,"index":5961},"line":220,"code":"  test('name with class component', () => {\n    class SomeComponent extends React.Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: this.props.className\n        });\n      }\n\n    }\n\n    const StyledComponent = styled(SomeComponent)`\n      color: hotpink;\n    `;\n    expect(StyledComponent.displayName).toBe(`Styled(SomeComponent)`);\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"styled does not throw on toString without target","suites":["css"],"updatePoint":{"line":235,"column":56,"index":6379},"line":235,"code":"  test('styled does not throw on toString without target', () => {\n    expect(() => {\n      styled('div')().toString();\n    }).not.toThrow();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"styled does not throw an error when certain properties are accessed","suites":["css"],"updatePoint":{"line":240,"column":75,"index":6546},"line":240,"code":"  test('styled does not throw an error when certain properties are accessed', () => {\n    expect(() => {\n      /* eslint-disable no-unused-expressions */\n      // eslint-disable-next-line no-proto\n      styled.__proto__;\n      styled.prototype;\n      styled.name;\n      styled.displayName;\n      /* eslint-enable no-unused-expressions */\n    }).not.toThrow();\n  });","file":"no-babel/index.test.js","skipped":false,"dir":"packages/css/test"},{"name":"warns about illegal escape sequences inside first quasi of template literal","suites":[],"updatePoint":{"line":8,"column":79,"index":236},"line":8,"code":"it('warns about illegal escape sequences inside first quasi of template literal', () => {\n  css`\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});","file":"no-babel/warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"warns about illegal escape sequences inside non-first quasi of template literal","suites":[],"updatePoint":{"line":23,"column":83,"index":927},"line":23,"code":"it('warns about illegal escape sequences inside non-first quasi of template literal', () => {\n  const color = `color: hotpink`;\n  css`\n    background-color: black;\n    ${color};\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});","file":"no-babel/warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"complex nested styles","suites":["css"],"updatePoint":{"line":5,"column":29,"index":164},"line":5,"code":"  test('complex nested styles', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    css({\n      color: 'blue',\n      '&:hover': {\n        '& .name': {\n          color: 'amethyst',\n          '&:focus': {\n            color: 'burlywood',\n            [mq[0]]: {\n              color: 'rebeccapurple'\n            }\n          }\n        },\n        color: 'green'\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"complex nested media queries","suites":["css"],"updatePoint":{"line":24,"column":36,"index":646},"line":24,"code":"  test('complex nested media queries', () => {\n    css`\n      @media (max-width: 600px) {\n        h1 {\n          font-size: 1.4rem;\n        }\n      }\n\n      @media (max-width: 400px), (max-height: 420px) {\n        h1 {\n          font-size: 1.1rem;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"handles media query merges","suites":["css"],"updatePoint":{"line":40,"column":34,"index":960},"line":40,"code":"  test('handles media query merges', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    const buttonCSS = [{\n      color: 'red',\n      [mq[1]]: {\n        color: 'blue'\n      }\n    }, {\n      color: 'purple',\n      [mq[1]]: {\n        color: 'aquamarine'\n      }\n    }];\n    css([{\n      color: 'darkslateblue',\n      [mq[0]]: {\n        color: 'amethyst'\n      },\n      [mq[1]]: {\n        color: 'rebeccapurple'\n      },\n      [mq[2]]: {\n        color: 'burlywood'\n      }\n    }, buttonCSS]);\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"media queries with multiple nested selectors","suites":["css"],"updatePoint":{"line":67,"column":52,"index":1574},"line":67,"code":"  test('media queries with multiple nested selectors', () => {\n    css`\n      color: blue;\n\n      @media (max-width: 400px) {\n        color: green;\n        h1 {\n          color: red;\n        }\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"media query with nested selector without declarations on root","suites":["css"],"updatePoint":{"line":83,"column":69,"index":1889},"line":83,"code":"  test('media query with nested selector without declarations on root', () => {\n    css`\n      @media (max-width: 400px) {\n        color: green;\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"media query with nested selector with nested selector on root","suites":["css"],"updatePoint":{"line":94,"column":69,"index":2139},"line":94,"code":"  test('media query with nested selector with nested selector on root', () => {\n    css`\n      span {\n        color: blue;\n      }\n      @media (max-width: 400px) {\n        color: green;\n        span {\n          color: red;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  }); // this isn't compatible with SCSS but is allowed in Stylis","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"should allow for context selector being appended to an element type","suites":["css"],"updatePoint":{"line":109,"column":75,"index":2498},"line":109,"code":"  test('should allow for context selector being appended to an element type', () => {\n    css`\n      a& {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  }); // #2488","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"should allow for context selector being appended to an element type when pseudoclass appears in the selector group","suites":["css"],"updatePoint":{"line":118,"column":122,"index":2745},"line":118,"code":"  test('should allow for context selector being appended to an element type when pseudoclass appears in the selector group', () => {\n    css`\n      &:hover,\n      a& {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"should allow a weird class containing & when pseudoclass appears in the selector group","suites":["css"],"updatePoint":{"line":127,"column":94,"index":2969},"line":127,"code":"  test('should allow a weird class containing & when pseudoclass appears in the selector group', () => {\n    css`\n      &:hover,\n      .t\\\\&t {\n        background: blue;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"single","suites":["orphaned pseudos"],"updatePoint":{"line":139,"column":14,"index":3186},"line":139,"code":"  test('single', () => {\n    css`\n      :focus {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"multiple in a group","suites":["orphaned pseudos"],"updatePoint":{"line":147,"column":27,"index":3330},"line":147,"code":"  test('multiple in a group', () => {\n    css`\n      :hover div,\n      :focus {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"multiple in a group in multiple in a group","suites":["orphaned pseudos"],"updatePoint":{"line":156,"column":50,"index":3515},"line":156,"code":"  test('multiple in a group in multiple in a group', () => {\n    css`\n      .foo,\n      .bar div,\n      .qwe {\n        :first-child,\n        div,\n        span,\n        :last-child {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"regexp special character","suites":["orphaned pseudos"],"updatePoint":{"line":171,"column":32,"index":3773},"line":171,"code":"  test('regexp special character', () => {\n    css`\n      :nth-child(3) {\n        color: hotpink;\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"overlapping","suites":["orphaned pseudos"],"updatePoint":{"line":179,"column":19,"index":3916},"line":179,"code":"  test('overlapping', () => {\n    css`\n      & :first-child {\n        :first-child {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"overlapping - reversed","suites":["orphaned pseudos"],"updatePoint":{"line":189,"column":30,"index":4106},"line":189,"code":"  test('overlapping - reversed', () => {\n    css`\n      & :first-child {\n        :first-child & {\n          color: hotpink;\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"in nested atrules","suites":["orphaned pseudos"],"updatePoint":{"line":199,"column":25,"index":4293},"line":199,"code":"  test('in nested atrules', () => {\n    css`\n      @media (max-width: 400px) {\n        @supports (display: grid) {\n          div,\n          :first-child {\n            color: hotpink;\n          }\n        }\n      }\n    `;\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"with nested atrule","suites":["orphaned pseudos"],"updatePoint":{"line":212,"column":26,"index":4557},"line":212,"code":"  test('with nested atrule', () => {\n    css({\n      '::before': {\n        content: '\"*\"',\n        background: 'pink',\n        '@media screen and (max-width: 800px)': {\n          background: 'cyan'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"selector list with nested atrule","suites":["orphaned pseudos"],"updatePoint":{"line":224,"column":40,"index":4838},"line":224,"code":"  test('selector list with nested atrule', () => {\n    css({\n      '::backdrop, & + .backdrop': {\n        backgroundColor: 'grey',\n        '@media print': {\n          display: 'none'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"regular rule nested in orphaned pseudo","suites":["orphaned pseudos"],"updatePoint":{"line":235,"column":46,"index":5096},"line":235,"code":"  test('regular rule nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        '.foo': {\n          color: 'grey'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"regular rule with nested rule nested in orphaned pseudo","suites":["orphaned pseudos"],"updatePoint":{"line":246,"column":63,"index":5335},"line":246,"code":"  test('regular rule with nested rule nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        '.foo': {\n          color: 'grey',\n          '@media print': {\n            display: 'none'\n          }\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"orphaned pseudo nested in orphaned pseudo","suites":["orphaned pseudos"],"updatePoint":{"line":260,"column":49,"index":5629},"line":260,"code":"  test('orphaned pseudo nested in orphaned pseudo', () => {\n    css({\n      ':hover': {\n        color: 'hotpink',\n        ':focus': {\n          outlineColor: 'blue'\n        }\n      }\n    });\n    expect(sheet).toMatchSnapshot();\n  });","file":"selectivity.test.js","skipped":false,"dir":"packages/css/test"},{"name":"speedy","suites":["sheet"],"updatePoint":{"line":11,"column":14,"index":231},"line":11,"code":"  test('speedy', () => {\n    expect(sheet.isSpeedy).toBe(false);\n    sheet.speedy(true);\n    expect(sheet.isSpeedy).toBe(true);\n    sheet.speedy(false);\n    expect(sheet.isSpeedy).toBe(false);\n  });","file":"sheet.dom.test.js","skipped":false,"dir":"packages/css/test"},{"name":"tags","suites":["sheet"],"updatePoint":{"line":18,"column":12,"index":428},"line":18,"code":"  test('tags', () => {\n    sheet.speedy(true);\n    const rule = '.foo { color: blue; }';\n    sheet.insert(rule);\n    expect(sheet.tags).toMatchSnapshot();\n    expect(sheet.tags.length).toBe(1);\n  });","file":"sheet.dom.test.js","skipped":false,"dir":"packages/css/test"},{"name":"flush","suites":["sheet"],"updatePoint":{"line":25,"column":13,"index":629},"line":25,"code":"  test('flush', () => {\n    sheet.speedy(true);\n    sheet.insert('.foo { color: blue; }');\n    sheet.flush();\n    expect(sheet.tags.length).toBe(0);\n  });","file":"sheet.dom.test.js","skipped":false,"dir":"packages/css/test"},{"name":"throws","suites":["sheet"],"updatePoint":{"line":31,"column":14,"index":785},"line":31,"code":"  test('throws', () => {\n    sheet.speedy(true);\n    const spy = jest.fn(); // $FlowFixMe\n\n    console.error = spy;\n    sheet.insert('.asdfasdf4###112121211{');\n    expect(spy.mock.calls.length).toBe(1);\n    expect(spy.mock.calls[0][0]).toMatchInlineSnapshot(`\"There was a problem inserting the following rule: \".asdfasdf4###112121211{\"\"`);\n  });","file":"sheet.dom.test.js","skipped":false,"dir":"packages/css/test"},{"name":".speedy throws when a rule has already been inserted","suites":["sheet"],"updatePoint":{"line":40,"column":60,"index":1178},"line":40,"code":"  test('.speedy throws when a rule has already been inserted', () => {\n    sheet.insert('.foo { color: blue; }');\n    expect(() => {\n      sheet.speedy(true);\n    }).toThrowErrorMatchingSnapshot();\n  });","file":"sheet.dom.test.js","skipped":false,"dir":"packages/css/test"},{"name":"source-map nested styles","suites":["css"],"updatePoint":{"line":9,"column":32,"index":329},"line":9,"code":"  test('source-map nested styles', () => {\n    const mq = ['@media(min-width: 420px)', '@media(min-width: 640px)', '@media(min-width: 960px)'];\n    css({\n      color: 'blue',\n      '&:hover': {\n        '& .name': {\n          color: 'amethyst',\n          '&:focus': {\n            color: 'burlywood',\n            [mq[0]]: {\n              color: 'rebeccapurple'\n            }\n          }\n        },\n        color: 'green'\n      }\n    });\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });","file":"source-map/source-map.test.js","skipped":false,"dir":"packages/css/test"},{"name":"source-map nested media queries","suites":["css"],"updatePoint":{"line":28,"column":39,"index":825},"line":28,"code":"  test('source-map nested media queries', () => {\n    css`\n      @media (max-width: 600px) {\n        h1 {\n          font-size: 1.4rem;\n        }\n      }\n\n      @media (max-width: 400px), (max-height: 420px) {\n        h1 {\n          font-size: 1.1rem;\n        }\n      }\n    `;\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });","file":"source-map/source-map.test.js","skipped":false,"dir":"packages/css/test"},{"name":"css without newline or semicolon","suites":["css"],"updatePoint":{"line":44,"column":40,"index":1156},"line":44,"code":"  test('css without newline or semicolon', () => {\n    // eslint-disable-next-line\n    const cls = css`\n      color: hotpink;\n    `;\n    expect(getStyles(sheet)).toMatchSnapshot();\n  });","file":"source-map/source-map.test.js","skipped":false,"dir":"packages/css/test"},{"name":"does not warn when valid values are passed for the content property","suites":[],"updatePoint":{"line":12,"column":71,"index":912},"line":12,"code":"it('does not warn when valid values are passed for the content property', () => {\n  const cls = css(validValues.map(value => ({\n    content: value\n  })));\n  expect(console.error).not.toBeCalled();\n  expect(renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n    className: cls\n  })).toJSON()).toMatchSnapshot();\n});","file":"warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"does warn when invalid values are passed for the content property","suites":[],"updatePoint":{"line":22,"column":69,"index":1282},"line":22,"code":"it('does warn when invalid values are passed for the content property', () => {\n  invalidValues.forEach(value => {\n    expect(() => renderer.create( /*#__PURE__*/React.createElement(\"div\", {\n      className: css({\n        content: value\n      })\n    }))).toThrowError(`You seem to be using a value for 'content' without quotes, try replacing it with \\`content: '\"${value}\"'\\``);\n  });\n});","file":"warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"does warn when functions are passed to css calls","suites":[],"updatePoint":{"line":31,"column":52,"index":1654},"line":31,"code":"it('does warn when functions are passed to css calls', () => {\n  css(() => 'color:hotpink;');\n  expect(console.error).toBeCalledWith(\"Functions that are interpolated in css calls will be stringified.\\nIf you want to have a css call based on props, create a function that returns a css call like this\\nlet dynamicStyle = (props) => css`color: ${props.color}`\\nIt can be called directly with props or interpolated in a styled call like this\\nlet SomeComponent = styled('div')`${dynamicStyle}`\");\n});","file":"warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"does warn when @import rule is being inserted after order-insensitive rules","suites":[],"updatePoint":{"line":35,"column":79,"index":2179},"line":35,"code":"it('does warn when @import rule is being inserted after order-insensitive rules', () => {\n  const {\n    injectGlobal\n  } = createCss({\n    key: 'import-after-regular'\n  });\n  injectGlobal`.thing {display:flex;}`;\n  injectGlobal`@import 'custom.css';`;\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n    [\n      [\n        \"You're attempting to insert the following rule:\n    @import 'custom.css';\n\n    \\`@import\\` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that \\`@import\\` rules are before all other rules.\",\n      ],\n    ]\n  `);\n});","file":"warnings.test.js","skipped":false,"dir":"packages/css/test"},{"name":"accepts a string and returns a string as a hash","suites":[],"updatePoint":{"line":2,"column":51,"index":86},"line":2,"code":"it('accepts a string and returns a string as a hash', () => {\n  expect(hash('something')).toBe('crsxd7');\n});","file":"index.js","skipped":false,"dir":"packages/hash/__tests__"},{"name":"matches styles on the top-most node passed in","suites":["toHaveStyleRule"],"updatePoint":{"line":22,"column":51,"index":582},"line":22,"code":"  it('matches styles on the top-most node passed in', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'red');\n    expect(tree).not.toHaveStyleRule('width', '100%');\n    const svgNode = tree.children[0];\n    expect(svgNode).toHaveStyleRule('width', '100%');\n    expect(svgNode).not.toHaveStyleRule('color', 'red');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports asymmetric matchers","suites":["toHaveStyleRule"],"updatePoint":{"line":34,"column":34,"index":1012},"line":34,"code":"  it('supports asymmetric matchers', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', expect.anything());\n    expect(tree).not.toHaveStyleRule('padding', expect.anything());\n    const svgNode = tree.children[0];\n    expect(svgNode).toHaveStyleRule('width', expect.stringMatching(/.*%$/));\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"fails if no styles are found","suites":["toHaveStyleRule"],"updatePoint":{"line":45,"column":34,"index":1433},"line":45,"code":"  it('fails if no styles are found', () => {\n    const tree = renderer.create(jsx(\"div\", null)).toJSON();\n    const result = toHaveStyleRule(tree, 'color', 'red');\n    expect(result.pass).toBe(false);\n    expect(result.message()).toBe('Property not found: color');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports regex values","suites":["toHaveStyleRule"],"updatePoint":{"line":51,"column":27,"index":1697},"line":51,"code":"  it('supports regex values', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    })).toJSON();\n    expect(tree).toHaveStyleRule('color', /red/);\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"returns a message explaining the failure","suites":["toHaveStyleRule"],"line":57,"code":"  it.skip('returns a message explaining the failure', () => {","file":"matchers.test.js","skipped":true,"dir":"packages/jest/test"},{"name":"matches styles on the focus, hover targets","suites":["toHaveStyleRule"],"updatePoint":{"line":68,"column":48,"index":2396},"line":68,"code":"  it('matches styles on the focus, hover targets', () => {\n    const localDivStyle = css`\n      color: white;\n      &:hover {\n        color: yellow;\n      }\n      &:focus {\n        color: black;\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: ':hover'\n    });\n    expect(tree).toHaveStyleRule('color', 'black', {\n      target: ':focus'\n    });\n    expect(tree).toHaveStyleRule('color', 'white');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches styles on the nested component or html element","suites":["toHaveStyleRule"],"updatePoint":{"line":91,"column":60,"index":2975},"line":91,"code":"  it('matches styles on the nested component or html element', () => {\n    const Svg = styled('svg')`\n      width: 100%;\n      fill: blue;\n    `;\n    const Div = styled('div')`\n      color: red;\n      ${Svg} {\n        fill: green;\n      }\n      span {\n        color: yellow;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null, jsx(Svg, null), jsx(\"span\", null, \"Test\"))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: 'span'\n    });\n    expect(tree).toHaveStyleRule('color', 'red');\n    expect(tree).toHaveStyleRule('fill', 'green', {\n      target: `${Svg}`\n    });\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches target styles by regex","suites":["toHaveStyleRule"],"updatePoint":{"line":114,"column":36,"index":3565},"line":114,"code":"  it('matches target styles by regex', () => {\n    const localDivStyle = css`\n      a {\n        color: yellow;\n      }\n      a:hover {\n        color: black;\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: /a$/\n    });\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches proper style for css","suites":["toHaveStyleRule"],"updatePoint":{"line":132,"column":34,"index":3952},"line":132,"code":"  it('matches proper style for css', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: css`\n            color: green;\n            color: hotpink;\n          `\n    })).toJSON();\n    expect(tree).not.toHaveStyleRule('color', 'green');\n    expect(tree).toHaveStyleRule('color', 'hotpink');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches style of the media","suites":["toHaveStyleRule"],"updatePoint":{"line":142,"column":32,"index":4257},"line":142,"code":"  it('matches style of the media', () => {\n    const Svg = styled('svg')`\n      width: 100%;\n    `;\n    const Div = styled('div')`\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n      @media (min-width: 920px) and (max-width: 1200px) {\n        font-size: 70px;\n      }\n      @media screen and (max-width: 1200px) {\n        font-size: 80px;\n      }\n      @media not all and (monochrome) {\n        font-size: 90px;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null, jsx(Svg, null))).toJSON();\n    expect(tree).toHaveStyleRule('font-size', '30px');\n    expect(tree).toHaveStyleRule('font-size', '50px', {\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '70px', {\n      media: '(min-width: 920px) and (max-width: 1200px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '80px', {\n      media: 'screen and (max-width: 1200px)'\n    });\n    expect(tree).toHaveStyleRule('font-size', '90px', {\n      media: 'not all and (monochrome)'\n    });\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches styles with target and media options","suites":["toHaveStyleRule"],"updatePoint":{"line":176,"column":50,"index":5316},"line":176,"code":"  it('matches styles with target and media options', () => {\n    const localDivStyle = css`\n      color: white;\n      @media (min-width: 420px) {\n        color: green;\n        &:hover {\n          color: yellow;\n        }\n      }\n    `;\n    const tree = renderer.create(jsx(\"div\", {\n      css: localDivStyle\n    }, jsx(\"span\", null, \"Test\"))).toJSON();\n    expect(tree).toHaveStyleRule('color', 'yellow', {\n      target: ':hover',\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('color', 'green', {\n      media: '(min-width: 420px)'\n    });\n    expect(tree).toHaveStyleRule('color', 'white');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"fails if option media invalid","suites":["toHaveStyleRule"],"updatePoint":{"line":198,"column":35,"index":5926},"line":198,"code":"  it('fails if option media invalid', () => {\n    const Div = styled('div')`\n      font-size: 30px;\n      @media (min-width: 420px) {\n        font-size: 50px;\n      }\n    `;\n    const tree = renderer.create(jsx(Div, null)).toJSON();\n    const result = toHaveStyleRule(tree, 'font-size', '50px', {\n      media: '(min-width-'\n    });\n    expect(result.pass).toBe(false);\n    expect(result.message()).toBe('Property not found: font-size');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"matches styles for a component used as selector","suites":["toHaveStyleRule"],"updatePoint":{"line":212,"column":53,"index":6387},"line":212,"code":"  it('matches styles for a component used as selector', () => {\n    const Bar = styled.div``;\n    const Foo = styled.div`\n      color: red;\n\n      ${Bar} {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create(jsx(Foo, null, jsx(Bar, null))).toJSON();\n    expect(tree.children[0]).toHaveStyleRule('color', 'hotpink');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"takes specificity into account when matching styles (basic)","suites":["toHaveStyleRule"],"updatePoint":{"line":224,"column":65,"index":6741},"line":224,"code":"  it('takes specificity into account when matching styles (basic)', () => {\n    const Bar = styled.div`\n      color: yellow;\n    `;\n    const Foo = styled.div`\n      color: red;\n\n      ${Bar} {\n        color: hotpink;\n      }\n    `;\n    const tree = renderer.create(jsx(Foo, null, jsx(Bar, null))).toJSON();\n    expect(tree.children[0]).toHaveStyleRule('color', 'hotpink');\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"should throw a friendly error when it receives an array","suites":["toHaveStyleRule"],"updatePoint":{"line":238,"column":61,"index":7117},"line":238,"code":"  it('should throw a friendly error when it receives an array', () => {\n    const tree = renderer.create(jsx(React.Fragment, null, jsx(\"div\", {\n      css: css`\n              color: hotpink;\n            `\n    }), 'Some text')).toJSON();\n    expect(() => expect(tree).toHaveStyleRule('color', 'hotpink')).toThrowErrorMatchingInlineSnapshot(`\"\\`toHaveStyleRule\\` expects to receive a single element but it received an array.\"`);\n  });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports enzyme `mount` method","suites":["toHaveStyleRule"],"updatePoint":{"line":247,"column":38,"index":7585},"line":247,"code":"    it('supports enzyme `mount` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.mount(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.find('svg');\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports enzyme `render` method","suites":["toHaveStyleRule"],"updatePoint":{"line":261,"column":39,"index":8095},"line":261,"code":"    it('supports enzyme `render` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.render(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.find('svg');\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports enzyme `shallow` method","suites":["toHaveStyleRule"],"updatePoint":{"line":275,"column":40,"index":8607},"line":275,"code":"    it('supports enzyme `shallow` method', () => {\n      const Component = () => jsx(\"div\", {\n        css: divStyle\n      }, jsx(\"svg\", {\n        css: svgStyle\n      }));\n\n      const wrapper = enzyme.shallow(jsx(Component, null));\n      expect(wrapper).toHaveStyleRule('color', 'red');\n      expect(wrapper).not.toHaveStyleRule('width', '100%');\n      const svgNode = wrapper.childAt(0);\n      expect(svgNode).toHaveStyleRule('width', '100%');\n      expect(svgNode).not.toHaveStyleRule('color', 'red');\n    });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"supports styled components","suites":["toHaveStyleRule"],"updatePoint":{"line":289,"column":34,"index":9113},"line":289,"code":"    it('supports styled components', () => {\n      const Div = styled('div')`\n        color: red;\n      `;\n      const Svg = styled('svg')`\n        width: 100%;\n      `;\n      ['mount', 'render', 'shallow'].forEach(method => {\n        const wrapper = enzyme[method](jsx(Div, null, jsx(Svg, null)));\n        expect(wrapper).toHaveStyleRule('color', 'red');\n        expect(wrapper).not.toHaveStyleRule('width', '100%');\n        const svgNode = method === 'render' ? wrapper.find('svg') : wrapper.find(Svg);\n        expect(svgNode).toHaveStyleRule('width', '100%');\n        expect(svgNode).not.toHaveStyleRule('color', 'red');\n      });\n    });","file":"matchers.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"replaces class names and inserts styles into React test component snapshots","suites":["jest-emotion with dom elements"],"updatePoint":{"line":25,"column":81,"index":760},"line":25,"code":"  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"replaces class names and inserts styles into DOM element snapshots","suites":["jest-emotion with dom elements"],"updatePoint":{"line":36,"column":72,"index":1137},"line":36,"code":"  it('replaces class names and inserts styles into DOM element snapshots', () => {\n    const divRef = /*#__PURE__*/React.createRef();\n    render(jsx(\"div\", {\n      css: divStyle,\n      ref: divRef\n    }, jsx(\"svg\", {\n      css: svgStyle\n    })));\n    const output = prettyFormat(divRef.current, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"replaces class names and inserts styles into React test component snapshots","suites":["jest-emotion with DOM elements disabled"],"updatePoint":{"line":60,"column":81,"index":1799},"line":60,"code":"  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    }, jsx(\"svg\", {\n      css: svgStyle\n    }))).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"does not replace class names or insert styles into DOM element snapshots","suites":["jest-emotion with DOM elements disabled"],"updatePoint":{"line":71,"column":78,"index":2182},"line":71,"code":"  it('does not replace class names or insert styles into DOM element snapshots', () => {\n    const divRef = /*#__PURE__*/React.createRef();\n    render(jsx(\"div\", {\n      css: divStyle,\n      ref: divRef\n    }, jsx(\"svg\", {\n      css: svgStyle\n    })));\n    const output = prettyFormat(divRef.current, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toMatchSnapshot();\n  });","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"allows to opt-out from styles printing","suites":["jest-emotion with DOM elements disabled"],"updatePoint":{"line":85,"column":44,"index":2584},"line":85,"code":"test('allows to opt-out from styles printing', () => {\n  const emotionPlugin = createSerializer({\n    includeStyles: false\n  });\n  const divStyle = css`\n    color: red;\n  `;\n  const svgStyle = css`\n    width: 100%;\n  `;\n  const divRef = /*#__PURE__*/React.createRef();\n  render(jsx(\"div\", {\n    css: divStyle,\n    ref: divRef\n  }, jsx(\"svg\", {\n    css: svgStyle\n  })));\n  const output = prettyFormat(divRef.current, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  });\n  expect(output).toMatchSnapshot();\n});","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"does not replace class names that are not from emotion","suites":["jest-emotion with DOM elements disabled"],"updatePoint":{"line":107,"column":60,"index":3139},"line":107,"code":"test('does not replace class names that are not from emotion', () => {\n  let tree = renderer.create(jsx(\"div\", {\n    className: \"net-42 net\",\n    css: css`\n          color: darkorchid;\n        `\n  })).toJSON();\n  const output = prettyFormat(tree, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  });\n  expect(output).toMatchSnapshot();\n});","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"replaces class names and inserts styles into React test component snapshots","suites":["jest-emotion with nested selectors"],"updatePoint":{"line":127,"column":81,"index":3671},"line":127,"code":"  it('replaces class names and inserts styles into React test component snapshots', () => {\n    const tree = renderer.create(jsx(\"div\", {\n      css: divStyle\n    })).toJSON();\n    const output = prettyFormat(tree, {\n      plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n    });\n    expect(output).toBe(`.emotion-0 {\n  color: blue;\n}\n\nheader .emotion-0 {\n  color: red;\n}\n\n<div\n  className=\"emotion-0\"\n/>`);\n  });","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"prints speedy styles","suites":["jest-emotion with nested selectors"],"updatePoint":{"line":147,"column":26,"index":4055},"line":147,"code":"test('prints speedy styles', () => {\n  const speedyCache = createCache({\n    key: 'speedy-key',\n    speedy: true\n  });\n  const tree = renderer.create(jsx(CacheProvider, {\n    value: speedyCache\n  }, jsx(\"div\", {\n    css: css`\n            color: hotpink;\n          `\n  }))).toJSON();\n  expect(prettyFormat(tree, {\n    plugins: [emotionPlugin, ReactElement, ReactTestComponent, DOMElement]\n  })).toMatchSnapshot();\n});","file":"printer.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"with prop containing css element in fragment","suites":[],"updatePoint":{"line":406,"column":52,"index":8612},"line":406,"code":"  test('with prop containing css element in fragment', () => {\n    const FragmentComponent = () => jsx(React.Fragment, null, \"x\", jsx(\"div\", {\n      css: {\n        backgroundColor: 'blue'\n      }\n    }, \"y\"));\n\n    const wrapper = enzyme.mount(jsx(\"div\", null, jsx(FragmentComponent, null)));\n    expect(toJson(wrapper, {\n      mode: 'deep'\n    })).toMatchSnapshot();\n  });","file":"react-enzyme.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"toHaveStyleRule on react.element","suites":[],"updatePoint":{"line":418,"column":40,"index":8974},"line":418,"code":"  test('toHaveStyleRule on react.element', () => {\n    const tree = enzyme.mount(jsx(\"ul\", null, jsx(\"li\", {\n      css: {\n        backgroundColor: 'hotpink'\n      }\n    }, \"hello\")));\n    expect(tree.find('li').get(0)).toHaveStyleRule('background-color', 'hotpink');\n  });","file":"react-enzyme.test.js","skipped":false,"dir":"packages/jest/test"},{"name":"basic","suites":["Emotion native css"],"updatePoint":{"line":8,"column":13,"index":205},"line":8,"code":"  test('basic', () => {\n    expect(StyleSheet.flatten(css`\n        color: hotpink;\n        ${{\n      backgroundColor: 'green'\n    }};\n      `)).toEqual({\n      color: 'hotpink',\n      backgroundColor: 'green'\n    });\n    expect(StyleSheet.flatten(css({\n      color: 'green'\n    }))).toEqual({\n      color: 'green'\n    });\n    expect(StyleSheet.flatten(css([{\n      color: 'green'\n    }, `background-color:yellow;`]))).toEqual({\n      color: 'green',\n      backgroundColor: 'yellow'\n    });\n    expect(StyleSheet.flatten(css([{\n      color: 'green'\n    }]))).toEqual({\n      color: 'green'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"order with string and object","suites":["Emotion native css"],"updatePoint":{"line":35,"column":36,"index":831},"line":35,"code":"  test('order with string and object', () => {\n    // this test checks the keys instead of the objects\n    // because we care about the order of the keys\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css({\n      color: 'green'\n    }, `background-color:yellow;`, {\n      flex: 2\n    })))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([[{\n      color: 'green'\n    }, `background-color:yellow;`], {\n      flex: 2\n    }])))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([{\n      color: 'green'\n    }, [`background-color:yellow;`, {\n      flex: 2\n    }]])))).toEqual(['color', 'backgroundColor', 'flex']);\n    expect( // $FlowFixMe\n    Object.keys(StyleSheet.flatten(css([{\n      color: 'green'\n    }, [{\n      flex: 8\n    }, `background-color:yellow;`, [`flex-grow: 1;`, {\n      flexDirection: 'row'\n    }]]])))).toEqual(['color', 'flex', 'backgroundColor', 'flexGrow', 'flexDirection']);\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"allows function interpolations when this.mergedProps is defined","suites":["Emotion native css"],"updatePoint":{"line":65,"column":69,"index":1904},"line":65,"code":"  it('allows function interpolations when this.mergedProps is defined', () => {\n    expect(StyleSheet.flatten(css.call({\n      thing: true\n    }, props => ({\n      color: props.thing && 'hotpink'\n    })))).toEqual({\n      color: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"works with nested functions","suites":["Emotion native css"],"updatePoint":{"line":74,"column":33,"index":2121},"line":74,"code":"  it('works with nested functions', () => {\n    expect(StyleSheet.flatten(css.call({\n      thing: true\n    }, props => () => ({\n      color: props.thing && 'hotpink'\n    })))).toEqual({\n      color: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"works with functions in tagged template literals","suites":["Emotion native css"],"updatePoint":{"line":83,"column":54,"index":2365},"line":83,"code":"  it('works with functions in tagged template literals', () => {\n    expect(StyleSheet.flatten(css.call({}, ...returnArguments`\n        color: ${() => 'hotpink'};\n      `))).toEqual({\n      color: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"last arg falsy and string before that","suites":["Emotion native css"],"updatePoint":{"line":90,"column":45,"index":2577},"line":90,"code":"  test('last arg falsy and string before that', () => {\n    expect(StyleSheet.flatten(css('color:hotpink;', false))).toEqual({\n      color: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"falsy value in the middle","suites":["Emotion native css"],"updatePoint":{"line":95,"column":33,"index":2729},"line":95,"code":"  test('falsy value in the middle', () => {\n    expect(StyleSheet.flatten(css`\n        color: ${false};\n        background-color: hotpink;\n      `)).toEqual({\n      backgroundColor: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"composition","suites":["Emotion native css"],"updatePoint":{"line":103,"column":19,"index":2921},"line":103,"code":"  test('composition', () => {\n    let firstStyle = css`\n      color: hotpink;\n    `;\n    expect(StyleSheet.flatten(css`\n        background-color: green;\n        ${firstStyle};\n      `)).toEqual({\n      backgroundColor: 'green',\n      color: 'hotpink'\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"skip comments","suites":["Emotion native css"],"updatePoint":{"line":115,"column":21,"index":3188},"line":115,"code":"  test('skip comments', () => {\n    let styles = css`\n      color: hotpink;\n      /*\n        padding: 10px;\n      */\n    `;\n    let anotherStyles = css`\n      font-size: 10px;\n      // color: red;\n    `;\n    expect(StyleSheet.flatten(styles)).toEqual({\n      color: 'hotpink'\n    });\n    expect(StyleSheet.flatten(anotherStyles)).toEqual({\n      fontSize: 10\n    });\n  });","file":"native-css.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should not throw an error when used valid primitive","suites":["Emotion native styled"],"updatePoint":{"line":14,"column":59,"index":477},"line":14,"code":"  test('should not throw an error when used valid primitive', () => {\n    expect(() => styled.Text({})).not.toThrow();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should throw an error when used invalid primitive","suites":["Emotion native styled"],"updatePoint":{"line":17,"column":57,"index":600},"line":17,"code":"  test('should throw an error when used invalid primitive', () => {\n    expect(() => styled.TEXT({})).toThrow();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should render the primitive when styles applied using object style notation","suites":["Emotion native styled"],"updatePoint":{"line":20,"column":83,"index":745},"line":20,"code":"  test('should render the primitive when styles applied using object style notation', () => {\n    const Text = styled.Text`\n      color: red;\n      font-size: 20px;\n      background-color: ${props => props.back};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      style: {\n        fontSize: 40\n      },\n      back: \"red\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should work with theming from @emotion/react","suites":["Emotion native styled"],"updatePoint":{"line":34,"column":50,"index":1152},"line":34,"code":"  it('should work with theming from @emotion/react', () => {\n    const Text = styled.Text`\n      color: ${props => props.theme.backgroundColor};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Text, null, \"Hello World\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should render the primitive on changing the props","suites":["Emotion native styled"],"updatePoint":{"line":43,"column":57,"index":1535},"line":43,"code":"  test('should render the primitive on changing the props', () => {\n    const Text = styled.Text({\n      padding: '20px'\n    }, props => ({\n      color: props.decor\n    }));\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      decor: \"hotpink\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should render primitive with style prop","suites":["Emotion native styled"],"updatePoint":{"line":54,"column":47,"index":1879},"line":54,"code":"  test('should render primitive with style prop', () => {\n    const Title = styled.Text`\n      color: hotpink;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Title, {\n      style: {\n        padding: 10\n      }\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should work with StyleSheet.create API","suites":["Emotion native styled"],"updatePoint":{"line":65,"column":44,"index":2195},"line":65,"code":"  it('should work with StyleSheet.create API', () => {\n    const styles = StyleSheet.create({\n      foo: {\n        color: 'red'\n      }\n    });\n    const Text = styled.Text`\n      font-size: 10px;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      style: styles.foo\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"primitive should work with `withComponent`","suites":["Emotion native styled"],"updatePoint":{"line":79,"column":50,"index":2586},"line":79,"code":"  test('primitive should work with `withComponent`', () => {\n    const Text = styled.Text`\n      color: ${props => props.decor};\n    `;\n    const Name = Text.withComponent(reactNative.Text);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Name, {\n      decor: \"hotpink\"\n    }, \"Mike\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should style any other component","suites":["Emotion native styled"],"updatePoint":{"line":89,"column":38,"index":2931},"line":89,"code":"  it('should style any other component', () => {\n    const Text = styled.Text`\n      color: hotpink;\n    `;\n\n    const Title = () => /*#__PURE__*/React.createElement(Text, null, \"Hello World\");\n\n    const StyledTitle = styled(Title)`\n      font-size: 20px;\n      font-style: ${props => props.sty};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      sty: \"italic\"\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should pass props in withComponent","suites":["Emotion native styled"],"updatePoint":{"line":105,"column":40,"index":3400},"line":105,"code":"  it('should pass props in withComponent', () => {\n    const ViewOne = styled.View`\n      background-color: ${props => props.color};\n    `;\n    const treeOne = renderer.create( /*#__PURE__*/React.createElement(ViewOne, {\n      color: \"green\"\n    }));\n    const ViewTwo = ViewOne.withComponent(reactNative.Text);\n    const treeTwo = renderer.create( /*#__PURE__*/React.createElement(ViewTwo, {\n      color: \"hotpink\"\n    }));\n    expect(treeOne).toMatchSnapshot();\n    expect(treeTwo).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should render <Image />","suites":["Emotion native styled"],"updatePoint":{"line":119,"column":29,"index":3898},"line":119,"code":"  it('should render <Image />', () => {\n    const Image = styled.Image`\n      border-radius: 2px;\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Image, {\n      source: {\n        uri: 'https://camo.githubusercontent.com/209bdea972b9b6ef90220c59ecbe66d35ffefa8a/68747470733a2f2f63646e2e7261776769742e636f6d2f746b6834342f656d6f74696f6e2f6d61737465722f656d6f74696f6e2e706e67',\n        height: 150,\n        width: 150\n      }\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"Log error message if units are not specified when using shorthand properties","suites":["Emotion native styled"],"updatePoint":{"line":132,"column":82,"index":4459},"line":132,"code":"  it('Log error message if units are not specified when using shorthand properties', () => {\n    const Text = styled.Text`\n      margin: 20px;\n      padding: 20;\n    `;\n    renderer.create( /*#__PURE__*/React.createElement(Text, null, \"Hello World\"));\n    expect(console.error).toBeCalledWith(\"'padding' shorthand property requires units for example - padding: 20px or padding: 10px 20px 40px 50px\");\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"should render styles correctly from all nested style factories","suites":["Emotion native styled"],"updatePoint":{"line":140,"column":68,"index":4852},"line":140,"code":"  it('should render styles correctly from all nested style factories', () => {\n    const bgColor = color => css`\n      background-color: ${color};\n    `;\n\n    const Text = styled.Text`\n      color: hotpink;\n      ${({\n      backgroundColor\n    }) => bgColor(backgroundColor)};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Text, {\n      backgroundColor: \"blue\"\n    }, \"Hello World\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"native-styled.test.js","skipped":false,"dir":"packages/native/test"},{"name":"basic","suites":[],"updatePoint":{"line":6,"column":11,"index":141},"line":6,"code":"test('basic', () => {\n  expect(StyleSheet.flatten(css`\n      color: hotpink;\n      ${{\n    backgroundColor: 'green'\n  }};\n    `)).toEqual({\n    color: 'hotpink',\n    backgroundColor: 'green'\n  });\n  expect(StyleSheet.flatten(css({\n    color: 'green'\n  }))).toEqual({\n    color: 'green'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }, `background-color:yellow;`]))).toEqual({\n    color: 'green',\n    backgroundColor: 'yellow'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }]))).toEqual({\n    color: 'green'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"order with string and object","suites":[],"updatePoint":{"line":33,"column":34,"index":713},"line":33,"code":"test('order with string and object', () => {\n  // this test checks the keys instead of the objects\n  // because we care about the order of the keys\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css({\n    color: 'green'\n  }, `background-color:yellow;`, {\n    flex: 2\n  })))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([[{\n    color: 'green'\n  }, `background-color:yellow;`], {\n    flex: 2\n  }])))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([{\n    color: 'green'\n  }, [`background-color:yellow;`, {\n    flex: 2\n  }]])))).toEqual(['color', 'backgroundColor', 'flex']);\n  expect( // $FlowFixMe\n  Object.keys(StyleSheet.flatten(css([{\n    color: 'green'\n  }, [{\n    flex: 8\n  }, `background-color:yellow;`, [`flex-grow: 1;`, {\n    flexDirection: 'row'\n  }]]])))).toEqual(['color', 'flex', 'backgroundColor', 'flexGrow', 'flexDirection']);\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"allows function interpolations when this is defined","suites":[],"updatePoint":{"line":63,"column":55,"index":1714},"line":63,"code":"it('allows function interpolations when this is defined', () => {\n  expect(StyleSheet.flatten(css.call({\n    thing: true\n  }, props => ({\n    color: props.thing && 'hotpink'\n  })))).toEqual({\n    color: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"works with nested functions","suites":[],"updatePoint":{"line":72,"column":31,"index":1913},"line":72,"code":"it('works with nested functions', () => {\n  expect(StyleSheet.flatten(css.call({\n    thing: true\n  }, props => () => ({\n    color: props.thing && 'hotpink'\n  })))).toEqual({\n    color: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"works with functions in tagged template literals","suites":[],"updatePoint":{"line":81,"column":52,"index":2139},"line":81,"code":"it('works with functions in tagged template literals', () => {\n  expect(StyleSheet.flatten(css.call({}, ...returnArguments`\n        color: ${() => 'hotpink'};\n      `))).toEqual({\n    color: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"last arg falsy and string before that","suites":[],"updatePoint":{"line":88,"column":43,"index":2341},"line":88,"code":"test('last arg falsy and string before that', () => {\n  expect(StyleSheet.flatten(css('color:hotpink;', false))).toEqual({\n    color: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"falsy value in the middle","suites":[],"updatePoint":{"line":93,"column":31,"index":2483},"line":93,"code":"test('falsy value in the middle', () => {\n  expect(StyleSheet.flatten(css`\n      color: ${false};\n      background-color: hotpink;\n    `)).toEqual({\n    backgroundColor: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"composition","suites":[],"updatePoint":{"line":101,"column":17,"index":2659},"line":101,"code":"test('composition', () => {\n  let firstStyle = css`\n    color: hotpink;\n  `;\n  expect(StyleSheet.flatten(css`\n      background-color: green;\n      ${firstStyle};\n    `)).toEqual({\n    backgroundColor: 'green',\n    color: 'hotpink'\n  });\n});","file":"css.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should not throw an error when used valid primitive","suites":["Emotion primitives"],"updatePoint":{"line":13,"column":59,"index":465},"line":13,"code":"  test('should not throw an error when used valid primitive', () => {\n    expect(() => styled.Text({})).not.toThrow();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should throw an error when used invalid primitive","suites":["Emotion primitives"],"updatePoint":{"line":16,"column":57,"index":588},"line":16,"code":"  test('should throw an error when used invalid primitive', () => {\n    // $FlowFixMe: expect error\n    expect(() => styled.TEXT({})).toThrow();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should render the primitive when styles applied using object style notation","suites":["Emotion primitives"],"updatePoint":{"line":20,"column":83,"index":765},"line":20,"code":"  test('should render the primitive when styles applied using object style notation', () => {\n    const Text = styled.Text`\n      color: red;\n      font-size: 20px;\n      background-color: ${props => props.back};\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Text, {\n      style: {\n        fontSize: 40\n      },\n      back: \"red\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should work with theming from @emotion/react","suites":["Emotion primitives"],"updatePoint":{"line":37,"column":50,"index":1199},"line":37,"code":"  it('should work with theming from @emotion/react', () => {\n    const Text = styled.Text`\n      color: ${props => props.theme.backgroundColor};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(Text, null, \"Hello World\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should unmount with theming","suites":["Emotion primitives"],"updatePoint":{"line":46,"column":33,"index":1558},"line":46,"code":"  it('should unmount with theming', () => {\n    const StyledText = styled.Text`\n      display: ${props => props.theme.display};\n    `;\n    const {\n      container,\n      unmount\n    } = render( /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(StyledText, {\n      id: \"something\",\n      style: {\n        backgroundColor: 'yellow'\n      }\n    }, \"Hello World\")));\n    expect(container).toMatchSnapshot();\n    unmount();\n    expect(container.querySelector('#something')).toBe(null);\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should render the primitive on changing the props","suites":["Emotion primitives"],"updatePoint":{"line":65,"column":57,"index":2128},"line":65,"code":"  test('should render the primitive on changing the props', () => {\n    const Text = styled.Text({\n      padding: '20px'\n    }, props => ({\n      color: props.decor\n    }));\n    const tree = renderer // $FlowFixMe\n    .create( /*#__PURE__*/React.createElement(Text, {\n      decor: \"hotpink\"\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should render primitive with style prop","suites":["Emotion primitives"],"updatePoint":{"line":77,"column":47,"index":2491},"line":77,"code":"  test('should render primitive with style prop', () => {\n    const Title = styled.Text`\n      color: hotpink;\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Title, {\n      style: {\n        padding: 10\n      }\n    }, \"Emotion primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should work with StyleSheet.create API","suites":["Emotion primitives"],"updatePoint":{"line":91,"column":44,"index":2834},"line":91,"code":"  it('should work with StyleSheet.create API', () => {\n    const styles = StyleSheet.create({\n      foo: {\n        color: 'red'\n      }\n    });\n    const Text = styled.Text`\n      font-size: 10px;\n    `;\n    const tree = renderer // $FlowFixMe\n    .create( /*#__PURE__*/React.createElement(Text, {\n      style: styles.foo\n    }, \"Emotion Primitives\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"primitive should work with `withComponent`","suites":["Emotion primitives"],"updatePoint":{"line":106,"column":50,"index":3244},"line":106,"code":"  test('primitive should work with `withComponent`', () => {\n    const StyledText = styled.Text`\n      color: ${props => props.decor};\n    `; // $FlowFixMe\n\n    const Name = StyledText.withComponent(Text);\n    const tree = renderer.create( /*#__PURE__*/React.createElement(Name, {\n      decor: \"hotpink\"\n    }, \"Mike\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should style any other component","suites":["Emotion primitives"],"updatePoint":{"line":117,"column":38,"index":3604},"line":117,"code":"  it('should style any other component', () => {\n    const Text = styled.Text`\n      color: hotpink;\n    `; // $FlowFixMe\n\n    const Title = () => /*#__PURE__*/React.createElement(Text, null, \"Hello World\");\n\n    const StyledTitle = styled(Title)`\n      font-size: 20px;\n      font-style: ${props => props.sty};\n    `; // $FlowFixMe\n\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      sty: \"italic\"\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"ref","suites":["Emotion primitives"],"updatePoint":{"line":134,"column":9,"index":4071},"line":134,"code":"  it('ref', () => {\n    const StyledText = styled.Text`\n      color: hotpink;\n    `;\n    let ref = /*#__PURE__*/React.createRef();\n    const {\n      container,\n      unmount\n    } = render( /*#__PURE__*/React.createElement(StyledText, {\n      ref: ref,\n      id: \"something\"\n    }));\n    expect(ref.current).toBe(container.firstElementChild);\n    unmount();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should pass props in withComponent","suites":["Emotion primitives"],"updatePoint":{"line":149,"column":40,"index":4466},"line":149,"code":"  it('should pass props in withComponent', () => {\n    const ViewOne = styled.View`\n      background-color: ${props => props.color};\n    `; // $FlowFixMe\n\n    const treeOne = renderer.create( /*#__PURE__*/React.createElement(ViewOne, {\n      color: \"green\"\n    })); // $FlowFixMe\n\n    const ViewTwo = ViewOne.withComponent(Text);\n    const treeTwo = renderer.create( /*#__PURE__*/React.createElement(ViewTwo, {\n      color: \"hotpink\"\n    }));\n    expect(treeOne).toMatchSnapshot();\n    expect(treeTwo).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should render <Image />","suites":["Emotion primitives"],"updatePoint":{"line":165,"column":29,"index":4982},"line":165,"code":"  it('should render <Image />', () => {\n    const Image = styled.Image`\n      border: 2px solid hotpink;\n    `;\n    const tree = renderer.create(\n    /*#__PURE__*/\n    // $FlowFixMe\n    React.createElement(Image, {\n      source: {\n        uri: 'https://camo.githubusercontent.com/209bdea972b9b6ef90220c59ecbe66d35ffefa8a/68747470733a2f2f63646e2e7261776769742e636f6d2f746b6834342f656d6f74696f6e2f6d61737465722f656d6f74696f6e2e706e67',\n        height: 150,\n        width: 150\n      }\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"custom shouldForwardProp works","suites":["Emotion primitives"],"updatePoint":{"line":181,"column":38,"index":5533},"line":181,"code":"  test('custom shouldForwardProp works', () => {\n    const Text = styled.Text``;\n\n    const Title = props => /*#__PURE__*/React.createElement(Text, props); // $FlowFixMe\n\n\n    const StyledTitle = styled(Title, {\n      shouldForwardProp: prop => prop !== 'color' && prop !== 'theme'\n    })`\n      color: ${props => props.color};\n    `;\n    const tree = renderer.create( /*#__PURE__*/React.createElement(StyledTitle, {\n      color: \"hotpink\"\n    }, 'Emotion')).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"emotion-primitives.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"basic","suites":[],"updatePoint":{"line":9,"column":11,"index":325},"line":9,"code":"test('basic', () => {\n  expect(StyleSheet.flatten(css`\n      color: hotpink;\n      ${{\n    backgroundColor: 'green'\n  }};\n    `)).toEqual({\n    color: 'hotpink',\n    backgroundColor: 'green'\n  });\n  expect(StyleSheet.flatten(css({\n    color: 'green'\n  }))).toEqual({\n    color: 'green'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }, `background-color:yellow;`]))).toEqual({\n    color: 'green',\n    backgroundColor: 'yellow'\n  });\n  expect(StyleSheet.flatten(css([{\n    color: 'green'\n  }]))).toEqual({\n    color: 'green'\n  });\n});","file":"no-babel/basic.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"falsy value in the middle","suites":[],"updatePoint":{"line":36,"column":31,"index":894},"line":36,"code":"test('falsy value in the middle', () => {\n  expect(StyleSheet.flatten(css`\n      color: ${false};\n      background-color: hotpink;\n    `)).toEqual({\n    backgroundColor: 'hotpink'\n  });\n});","file":"no-babel/basic.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"should render the primitive when styles applied using object style notation","suites":[],"updatePoint":{"line":44,"column":81,"index":1134},"line":44,"code":"test('should render the primitive when styles applied using object style notation', () => {\n  const Text = styled.Text`\n    color: red;\n    font-size: 20px;\n    background-color: ${props => props.back};\n  `;\n  const tree = renderer.create(\n  /*#__PURE__*/\n  // $FlowFixMe\n  React.createElement(Text, {\n    style: {\n      fontSize: 40\n    },\n    back: \"red\"\n  }, \"Emotion Primitives\")).toJSON();\n  expect(tree).toMatchSnapshot();\n}); // this needs to be here since the babel plugin will remove the whitespace","file":"no-babel/basic.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"empty string","suites":[],"updatePoint":{"line":62,"column":18,"index":1580},"line":62,"code":"test('empty string', () => {\n  // prettier-ignore\n  let style = css`    \n      \n  `;\n  expect(StyleSheet.flatten(style)).toEqual({});\n});","file":"no-babel/basic.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"does warn when functions are passed to cx calls ","suites":[],"updatePoint":{"line":7,"column":52,"index":184},"line":7,"code":"it('does warn when functions are passed to cx calls ', () => {\n  css(() => ({}));\n  expect(console.error).toBeCalledWith('Interpolating functions in css calls is not allowed.\\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\\n' + 'It can be called directly with props or interpolated in a styled call like this\\n' + 'let SomeComponent = styled.View`${dynamicStyle}`');\n});","file":"warnings.test.js","skipped":false,"dir":"packages/primitives/test"},{"name":"basic","suites":[],"updatePoint":{"line":14,"column":11,"index":375},"line":14,"code":"test('basic', () => {\n  render(jsx(React.Fragment, null, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }), jsx(Global, {\n    styles: css`\n          @import url('https://some-url');\n\n          h1 {\n            color: hotpink;\n          }\n        `\n  })), // $FlowFixMe\n  document.getElementById('root'));\n  expect(document.head).toMatchSnapshot();\n  expect(document.body).toMatchSnapshot();\n  let elements = document.querySelectorAll('style');\n  let rules = [];\n\n  for (let element of elements) {\n    // $FlowFixMe\n    for (let cssRule of element.sheet.cssRules) {\n      rules.push(cssRule.cssText);\n    }\n  }\n\n  expect(rules).toMatchInlineSnapshot(`\n    [\n      \"@import url(https://some-url);\",\n      \"h1 {color: hotpink;}\",\n      \".css-1lrxbo5 {color: hotpink;}\",\n    ]\n  `);\n  unmountComponentAtNode(document.getElementById('root'));\n  expect(document.head).toMatchSnapshot();\n  expect(document.body).toMatchSnapshot();\n});","file":"at-import.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"basic","suites":[],"updatePoint":{"line":4,"column":11,"index":402},"line":4,"code":"test('basic', () => {\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div\n        class=\"css-3sn2xs\"\n      />\n    </div>\n  `);\n});","file":"automatic-dev-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"static children","suites":[],"updatePoint":{"line":20,"column":21,"index":683},"line":20,"code":"test('static children', () => {\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"button\", {\n    css: {\n      color: 'hotpink'\n    }\n  }, \"Emotion\"));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <button\n        class=\"css-3sn2xs\"\n      >\n        Emotion\n      </button>\n    </div>\n  `);\n});","file":"automatic-dev-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no static children","suites":[],"updatePoint":{"line":38,"column":24,"index":1015},"line":38,"code":"test('no static children', () => {\n  const Button = props => {\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      css: {\n        color: 'hotpink'\n      }\n    }, props));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(Button, null, \"Emotion\"));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <button\n        class=\"css-1v4u9bq-Button\"\n      >\n        Emotion\n      </button>\n    </div>\n  `);\n});","file":"automatic-dev-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"fragment","suites":[],"updatePoint":{"line":60,"column":14,"index":1463},"line":60,"code":"test('fragment', () => {\n  const Test = ({\n    buttons\n  }) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, buttons.map(({\n      id,\n      label,\n      ...rest\n    }) => /*#__PURE__*/React.createElement(\"button\", {\n      key: id,\n      css: {\n        color: 'hotpink'\n      }\n    }, label)));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Test, {\n    buttons: [{\n      id: 1,\n      label: 'Foo'\n    }, {\n      id: 2,\n      label: 'Bar'\n    }]\n  })));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div>\n        <button\n          class=\"css-o2qw17-Test\"\n        >\n          Foo\n        </button>\n        <button\n          class=\"css-o2qw17-Test\"\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  `);\n});","file":"automatic-dev-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"key after spread","suites":[],"updatePoint":{"line":104,"column":22,"index":2306},"line":104,"code":"test('key after spread', () => {\n  const Test = ({\n    buttons\n  }) => {\n    return /*#__PURE__*/React.createElement(\"div\", null, buttons.map(({\n      id,\n      label,\n      ...rest\n    }) => /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n      key: id,\n      css: {\n        color: 'hotpink'\n      }\n    }), label)));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(Test, {\n    buttons: [{\n      id: 1,\n      label: 'Foo',\n      type: 'button'\n    }, {\n      id: 2,\n      label: 'Bar',\n      type: 'button'\n    }]\n  }));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div>\n        <button\n          class=\"css-o2qw17-Test\"\n          type=\"button\"\n        >\n          Foo\n        </button>\n        <button\n          class=\"css-o2qw17-Test\"\n          type=\"button\"\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  `);\n});","file":"automatic-dev-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"basic","suites":[],"updatePoint":{"line":4,"column":11,"index":402},"line":4,"code":"test('basic', () => {\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div\n        class=\"css-3sn2xs\"\n      />\n    </div>\n  `);\n});","file":"automatic-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"static children","suites":[],"updatePoint":{"line":20,"column":21,"index":683},"line":20,"code":"test('static children', () => {\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"button\", {\n    css: {\n      color: 'hotpink'\n    }\n  }, \"Emotion\"));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <button\n        class=\"css-3sn2xs\"\n      >\n        Emotion\n      </button>\n    </div>\n  `);\n});","file":"automatic-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no static children","suites":[],"updatePoint":{"line":38,"column":24,"index":1015},"line":38,"code":"test('no static children', () => {\n  const Button = props => {\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      css: {\n        color: 'hotpink'\n      }\n    }, props));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(Button, null, \"Emotion\"));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <button\n        class=\"css-1v4u9bq-Button\"\n      >\n        Emotion\n      </button>\n    </div>\n  `);\n});","file":"automatic-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"fragment","suites":[],"updatePoint":{"line":60,"column":14,"index":1463},"line":60,"code":"test('fragment', () => {\n  const Test = ({\n    buttons\n  }) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, buttons.map(({\n      id,\n      label,\n      ...rest\n    }) => /*#__PURE__*/React.createElement(\"button\", {\n      key: id,\n      css: {\n        color: 'hotpink'\n      }\n    }, label)));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Test, {\n    buttons: [{\n      id: 1,\n      label: 'Foo'\n    }, {\n      id: 2,\n      label: 'Bar'\n    }]\n  })));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div>\n        <button\n          class=\"css-o2qw17-Test\"\n        >\n          Foo\n        </button>\n        <button\n          class=\"css-o2qw17-Test\"\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  `);\n});","file":"automatic-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"key after spread","suites":[],"updatePoint":{"line":104,"column":22,"index":2306},"line":104,"code":"test('key after spread', () => {\n  const Test = ({\n    buttons\n  }) => {\n    return /*#__PURE__*/React.createElement(\"div\", null, buttons.map(({\n      id,\n      label,\n      ...rest\n    }) => /*#__PURE__*/React.createElement(\"button\", _extends({}, rest, {\n      key: id,\n      css: {\n        color: 'hotpink'\n      }\n    }), label)));\n  };\n\n  const {\n    container\n  } = render( /*#__PURE__*/React.createElement(Test, {\n    buttons: [{\n      id: 1,\n      label: 'Foo',\n      type: 'button'\n    }, {\n      id: 2,\n      label: 'Bar',\n      type: 'button'\n    }]\n  }));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div>\n        <button\n          class=\"css-o2qw17-Test\"\n          type=\"button\"\n        >\n          Foo\n        </button>\n        <button\n          class=\"css-o2qw17-Test\"\n          type=\"button\"\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  `);\n});","file":"automatic-runtime.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"tagged template args forwarded","suites":[],"updatePoint":{"line":7,"column":36,"index":511},"line":7,"code":"test('tagged template args forwarded', () => {\n  function media(...args) {\n    return css`\n      @media (min-width: 100px) {\n        ${css(...args)};\n      }\n    `;\n  }\n\n  const tree = renderer.create(jsx(\"h2\", {\n    css: css`\n        ${media`color: red;`};\n      `\n  }, \"something\"));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"babel/css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"composition of dynamic array css prop with cssprop-generated className (#1730)","suites":[],"updatePoint":{"line":23,"column":84,"index":892},"line":23,"code":"test('composition of dynamic array css prop with cssprop-generated className (#1730)', () => {\n  const Child = ({\n    bgColor,\n    ...props\n  }) => jsx(\"div\", _extends({\n    css: [{\n      width: 50,\n      height: 50\n    }, {\n      backgroundColor: bgColor\n    }]\n  }, props));\n\n  const Parent = ({\n    children\n  }) => jsx(Child, {\n    bgColor: \"green\",\n    css: {\n      color: 'hotpink'\n    }\n  }, children);\n\n  const tree = renderer.create(jsx(Parent, null, \"I'm hotpink on the green background.\"));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"babel/css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"basic","suites":[],"updatePoint":{"line":7,"column":11,"index":174},"line":7,"code":"test('basic', () => {\n  let html = renderToString(jsx(\"div\", {\n    css: {\n      color: 'hotpink',\n      ':hover': {\n        color: 'green'\n      }\n    }\n  }, \"some hotpink text\"));\n  expect(html).toMatchSnapshot();\n});","file":"babel/source-map-server.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"css","suites":[],"updatePoint":{"line":5,"column":9,"index":176},"line":5,"code":"test('css', () => {\n  const tree = renderer.create( /*#__PURE__*/React.createElement(ClassNames, null, ({\n    css\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: css`\n            color: hotpink;\n          `\n  })));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"class-names.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should get the theme","suites":[],"updatePoint":{"line":15,"column":24,"index":470},"line":15,"code":"it('should get the theme', () => {\n  const tree = renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      color: 'green'\n    }\n  }, /*#__PURE__*/React.createElement(ClassNames, null, ({\n    css,\n    theme\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    className: css`\n              color: ${theme.color};\n            `\n  }))));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"class-names.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"cx","suites":[],"updatePoint":{"line":30,"column":8,"index":866},"line":30,"code":"test('cx', () => {\n  const tree = renderer.create( /*#__PURE__*/React.createElement(ClassNames, null, ({\n    css,\n    cx\n  }) => {\n    let secondClassButItsInsertedFirst = css`\n          color: green;\n        `;\n    let firstClassButItsInsertedSecond = css`\n          color: hotpink;\n        `;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(firstClassButItsInsertedSecond, 'some-other-class', secondClassButItsInsertedFirst)\n    });\n  }));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"class-names.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"css and cx throws when used after render","suites":[],"updatePoint":{"line":47,"column":46,"index":1418},"line":47,"code":"test('css and cx throws when used after render', () => {\n  let cx, css;\n  renderer.create( /*#__PURE__*/React.createElement(ClassNames, null, arg => {\n    ;\n    ({\n      cx,\n      css\n    } = arg);\n    return null;\n  }));\n  expect(cx).toThrowErrorMatchingInlineSnapshot(`\"cx can only be used during render\"`);\n  expect(css).toThrowErrorMatchingInlineSnapshot(`\"css can only be used during render\"`);\n});","file":"class-names.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"can cloneElement with element with css prop","suites":[],"updatePoint":{"line":6,"column":49,"index":214},"line":6,"code":"test('can cloneElement with element with css prop', () => {\n  let element = jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    },\n    id: \"initial\"\n  });\n  let cloned = /*#__PURE__*/React.cloneElement(element, {\n    id: 'cloned'\n  });\n  let {\n    container\n  } = render(cloned);\n  expect(container.firstChild.id).toBe('cloned');\n});","file":"clone-element.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"composition works from old emotion css calls","suites":[],"updatePoint":{"line":7,"column":50,"index":285},"line":7,"code":"test('composition works from old emotion css calls', () => {\n  const cls = css`\n    color: green;\n  `;\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: cls\n  })));\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"compat/browser.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"it works","suites":[],"updatePoint":{"line":10,"column":14,"index":316},"line":10,"code":"test('it works', () => {\n  let cache = createCache({\n    key: 'ssr'\n  });\n  let {\n    extractCritical\n  } = createEmotionServer(cache);\n  let ele = jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }));\n  expect(extractCritical(renderToString(ele))).toMatchSnapshot();\n});","file":"compat/server.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Global component extracts the styles rather than inlines it","suites":[],"updatePoint":{"line":26,"column":65,"index":688},"line":26,"code":"test('Global component extracts the styles rather than inlines it', () => {\n  let cache = createCache({\n    key: 'ssr'\n  });\n  let {\n    extractCritical\n  } = createEmotionServer(cache);\n  let ele = jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }), jsx(Global, {\n    styles: {\n      html: {\n        color: 'green'\n      }\n    }\n  }));\n  expect(extractCritical(renderToString(ele))).toMatchSnapshot();\n});","file":"compat/server.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"extracted rules have correct keys when dealing with multiple caches","suites":[],"updatePoint":{"line":48,"column":73,"index":1153},"line":48,"code":"test('extracted rules have correct keys when dealing with multiple caches', () => {\n  let cache1 = createCache({\n    key: 'ssr-first-key'\n  });\n  let {\n    extractCritical: extractCritical1\n  } = createEmotionServer(cache1);\n  let ele1 = jsx(CacheProvider, {\n    value: cache1\n  }, jsx(\"div\", {\n    css: {\n      color: 'rebeccapurple'\n    }\n  }));\n  let cache2 = createCache({\n    key: 'ssr-second-key'\n  });\n  let {\n    extractCritical: extractCritical2\n  } = createEmotionServer(cache2);\n  let ele2 = jsx(CacheProvider, {\n    value: cache2\n  }, jsx(\"div\", {\n    css: {\n      color: 'rebeccapurple'\n    }\n  }));\n  expect([extractCritical1(renderToString(ele1)), extractCritical2(renderToString(ele2))]).toMatchSnapshot();\n});","file":"compat/server.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"does not rehash if value is css call return value","suites":[],"updatePoint":{"line":10,"column":55,"index":338},"line":10,"code":"test('does not rehash if value is css call return value', () => {\n  const val = css`\n    color: hotpink;\n  `;\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: val\n  })));\n  expect(serializeStyles([val])).toBe(val);\n  expect(spy.mock.calls[0][1]).toBe(val);\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css-cache-hash.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"thing","suites":[],"updatePoint":{"line":28,"column":11,"index":1203},"line":28,"code":"test('thing', () => {\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: {\n      display: 'flex'\n    }\n  }, \"something\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"css call composition","suites":[],"updatePoint":{"line":36,"column":26,"index":1408},"line":36,"code":"test('css call composition', () => {\n  let first = css`\n    color: hotpink;\n  `;\n  let tree = renderer.create(jsx(\"div\", {\n    css: css({\n      ':hover': first\n    })\n  }));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"theming with the css prop","suites":[],"updatePoint":{"line":47,"column":31,"index":1634},"line":47,"code":"test('theming with the css prop', () => {\n  const tree = renderer.create(jsx(ThemeProvider, {\n    theme: {\n      primary: 'hotpink'\n    }\n  }, jsx(\"div\", {\n    css: theme => ({\n      color: theme.primary\n    })\n  })));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"theming with the array css prop","suites":[],"updatePoint":{"line":59,"column":37,"index":1906},"line":59,"code":"test('theming with the array css prop', () => {\n  const tree = renderer.create(jsx(ThemeProvider, {\n    theme: {\n      primary: 'hotpink'\n    }\n  }, jsx(\"div\", {\n    css: [theme => ({\n      color: theme.primary\n    }), {\n      display: 'flex'\n    }]\n  })));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"object with false","suites":[],"updatePoint":{"line":73,"column":23,"index":2197},"line":73,"code":"test('object with false', () => {\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: {\n      color: 'hotpink',\n      display: false\n    }\n  }, \"something\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"label in css call","suites":[],"updatePoint":{"line":82,"column":23,"index":2422},"line":82,"code":"test('label in css call', () => {\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: css`\n          color: hotpink;\n          label: this-is-hotpink;\n        `\n  }, \"something\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"string as css prop throws","suites":[],"updatePoint":{"line":91,"column":31,"index":2677},"line":91,"code":"test('string as css prop throws', () => {\n  expect(() => {\n    renderer.create(jsx(\"div\", null, jsx(\"div\", {\n      css: `\n            color: hotpink;\n          `\n    }, \"something\")));\n  }).toThrowErrorMatchingSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"array fallback","suites":[],"updatePoint":{"line":100,"column":20,"index":2892},"line":100,"code":"test('array fallback', () => {\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: {\n      color: ['green', 'hotpink']\n    }\n  }, \"something\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"array fallback (using camelCased property)","suites":[],"updatePoint":{"line":108,"column":48,"index":3131},"line":108,"code":"test('array fallback (using camelCased property)', () => {\n  const tree = renderer.create(jsx(\"div\", null, jsx(\"div\", {\n    css: {\n      backgroundColor: ['green', 'hotpink']\n    }\n  }, \"something\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"nested at rule","suites":[],"updatePoint":{"line":116,"column":20,"index":3352},"line":116,"code":"test('nested at rule', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    css: {\n      '@media (min-width: 980px)': {\n        backgroundColor: 'blue',\n        '@supports (width: 100vw)': {\n          backgroundColor: 'red'\n        }\n      }\n    }\n  }, \"something\"));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"can set speedy via custom cache","suites":[],"updatePoint":{"line":129,"column":37,"index":3687},"line":129,"code":"test('can set speedy via custom cache', () => {\n  let cache = createCache({\n    key: 'speedy-test',\n    speedy: true\n  });\n  renderer.create(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }, jsx(\"span\", {\n    css: {\n      color: 'yellow'\n    }\n  }, \"wow\"), \"something\")));\n  expect(cache.sheet.tags).toHaveLength(1);\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"speedy option from a custom cache is inherited for <Global/> styles","suites":[],"updatePoint":{"line":147,"column":73,"index":4095},"line":147,"code":"test('speedy option from a custom cache is inherited for <Global/> styles', () => {\n  let cache = createCache({\n    key: 'global-inherit-speedy',\n    container: safeQuerySelector('body'),\n    speedy: true\n  });\n  renderer.create(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      html: {\n        fontSize: 16\n      }\n    }\n  })));\n  expect(safeQuerySelector('body style').textContent).toEqual('');\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"autoLabel without babel","suites":[],"updatePoint":{"line":164,"column":29,"index":4479},"line":164,"code":"test('autoLabel without babel', () => {\n  let SomeComp = props => {\n    return jsx(\"div\", _extends({}, props, {\n      css: {\n        color: 'hotpink'\n      }\n    }), \"something\");\n  };\n\n  const tree = renderer.create(jsx(SomeComp, null));\n  expect(tree.toJSON().props.className.endsWith('-SomeComp')).toBe(true);\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"autoLabel without babel (sanitized)","suites":[],"updatePoint":{"line":176,"column":41,"index":4808},"line":176,"code":"test('autoLabel without babel (sanitized)', () => {\n  let SomeComp$ = props => {\n    return jsx(\"div\", _extends({}, props, {\n      css: {\n        color: 'hotpink'\n      }\n    }), \"something\");\n  }; // eslint-disable-next-line react/jsx-pascal-case\n\n\n  const tree = renderer.create(jsx(SomeComp$, null));\n  expect(tree.toJSON().props.className.endsWith('-SomeComp-')).toBe(true);\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"overwrite styles from parent","suites":[],"updatePoint":{"line":189,"column":34,"index":5184},"line":189,"code":"test('overwrite styles from parent', () => {\n  let SomeComponent = props => jsx(\"div\", _extends({\n    css: {\n      color: 'green',\n      backgroundColor: 'yellow'\n    }\n  }, props));\n\n  const tree = renderer.create(jsx(SomeComponent, {\n    css: {\n      color: 'hotpink'\n    }\n  }));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"child selector array","suites":[],"updatePoint":{"line":204,"column":26,"index":5506},"line":204,"code":"test('child selector array', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    css: {\n      ':hover': [{\n        color: 'green'\n      }, {\n        backgroundColor: 'yellow'\n      }]\n    }\n  }));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"handles camelCased custom properties in object styles properly","suites":[],"updatePoint":{"line":216,"column":68,"index":5796},"line":216,"code":"test('handles camelCased custom properties in object styles properly', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    css: {\n      '--textColor': 'green',\n      color: 'var(--textColor)'\n    }\n  }));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"applies class when css prop is set to nil on wrapper component","suites":[],"updatePoint":{"line":225,"column":68,"index":6052},"line":225,"code":"test('applies class when css prop is set to nil on wrapper component', () => {\n  const Button = props => jsx(\"button\", _extends({\n    css: {\n      color: 'hotpink'\n    }\n  }, props));\n\n  const WrappedButton = ({\n    children,\n    buttonStyles\n  }) => jsx(Button, {\n    css: buttonStyles\n  }, children);\n\n  const tree = renderer.create(jsx(React.Fragment, null, jsx(WrappedButton, null, \"I'm hotpink!\"), jsx(WrappedButton, {\n    buttonStyles: null\n  }, \"I'm hotpink too!\")));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"handles composition of styles without a final semi in a declaration block","suites":[],"updatePoint":{"line":244,"column":79,"index":6585},"line":244,"code":"test('handles composition of styles without a final semi in a declaration block', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    css: [// prettier-ignore\n    css`\n          color: hotpink\n        `, css`\n          background-color: green;\n        `]\n  }, \"I'm hotpink on the green background.\"));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"handles composition of an array css prop containing no final semi with cssprop-generated className (runtime variant of #1730)","suites":[],"updatePoint":{"line":255,"column":131,"index":6990},"line":255,"code":"test('handles composition of an array css prop containing no final semi with cssprop-generated className (runtime variant of #1730)', () => {\n  const Child = ({\n    bgColor,\n    ...props\n  }) => jsx(\"div\", _extends({\n    css: [{\n      width: 100,\n      height: 100\n    }, `background-color: ${bgColor}`]\n  }, props));\n\n  const Parent = ({\n    children\n  }) => jsx(Child, {\n    bgColor: \"green\",\n    css: {\n      color: 'hotpink'\n    }\n  }, children);\n\n  const tree = renderer.create(jsx(Parent, null, \"I'm hotpink on the green background.\"));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"doesn't try to insert invalid rules caused by object style's value being falsy","suites":[],"updatePoint":{"line":278,"column":82,"index":7531},"line":278,"code":"it(\"doesn't try to insert invalid rules caused by object style's value being falsy\", () => {\n  render(jsx(CacheProvider, {\n    value: createCache({\n      key: 'invalid-rules',\n      speedy: true\n    })\n  }, jsx(\"h1\", {\n    css: css({\n      color: 'hotpink',\n      '@media (min-width 800px)': undefined\n    })\n  }, 'Emotion')));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n  expect(console.warn.mock.calls).toMatchInlineSnapshot(`[]`);\n});","file":"css.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"with custom plugins","suites":[],"updatePoint":{"line":23,"column":25,"index":639},"line":23,"code":"test('with custom plugins', () => {\n  let cache = createCache({\n    key: 'custom-plugins',\n    stylisPlugins: [stylisPlugin]\n  });\n  expect(render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      display: 'flex',\n      color: 'blue'\n    }\n  })))).toMatchInlineSnapshot(`\n    .emotion-0 {\n      display: flex;\n      color: hotpink;\n    }\n\n    <div\n      className=\"emotion-0\"\n    />\n  `);\n});","file":"custom-cache.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Global should \"inherit\" sheet class from the cache","suites":[],"updatePoint":{"line":46,"column":56,"index":1086},"line":46,"code":"test('Global should \"inherit\" sheet class from the cache', () => {\n  // https://github.com/emotion-js/emotion/issues/2675\n  let cache = createCache({\n    key: 'test',\n    speedy: false\n  });\n\n  class MySheet extends StyleSheet {\n    insert(rule) {\n      super.insert(`/** ${this.key} */${rule}`);\n    }\n\n  }\n\n  cache.sheet = new MySheet({\n    key: 'test',\n    container: safeQuerySelector('head')\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }), jsx(Global, {\n    styles: {\n      body: {\n        width: '0'\n      }\n    }\n  })));\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"test-global\"\n        data-s=\"\"\n      >\n        \n        /** test-global */body{width:0;}\n      </style>\n      <style\n        data-emotion=\"test\"\n        data-s=\"\"\n      >\n        \n        /** test */.test-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n});","file":"custom-cache.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no React hook order violations","suites":["EmotionElement"],"updatePoint":{"line":14,"column":38,"index":421},"line":14,"code":"  test('no React hook order violations', () => {\n    const theme = {\n      color: 'blue'\n    };\n    const cache = createCache({\n      key: 'context'\n    }); // $FlowFixMe\n\n    const Comp = ({\n      flag\n    }) => jsx(ThemeProvider, {\n      theme: theme\n    }, jsx(CacheProvider, {\n      value: cache\n    }, jsx(\"div\", {\n      css: flag && (t => css`\n                color: ${t.color};\n              `)\n    })));\n\n    render(jsx(Comp, null));\n    expect(console.error).not.toHaveBeenCalled();\n    render(jsx(Comp, {\n      flag: true\n    }));\n    expect(console.error).not.toHaveBeenCalled();\n  });","file":"element.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["typical function component - runtime=classic"],"updatePoint":{"line":39,"column":14,"index":1200},"line":39,"code":"  test('Chrome', () => {\n    // Each \"at\" line starts with some whitespace\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-1fb5ab00.browser.esm.js:143)\n    at jsx (emotion-react.browser.esm.js:100)\n    at MyComponent$9 (App.js:22)\n    at renderWithHooks (react-dom.development.js:14803)\n    at mountIndeterminateComponent (react-dom.development.js:17482)\n    at beginWork (react-dom.development.js:18596)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["typical function component - runtime=classic"],"updatePoint":{"line":50,"column":15,"index":1707},"line":50,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/bundle.js:46440:40\njsx@http://localhost:3000/static/js/bundle.js:46636:113\nMyComponent$9@http://localhost:3000/static/js/bundle.js:47600:72\nrenderWithHooks@http://localhost:3000/static/js/bundle.js:18904:27\nmountIndeterminateComponent@http://localhost:3000/static/js/bundle.js:21583:13\nbeginWork@http://localhost:3000/static/js/bundle.js:22697:16`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["typical function component - runtime=classic"],"updatePoint":{"line":59,"column":14,"index":2230},"line":59,"code":"  test('Safari', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/bundle.js:46440:49\njsx@http://localhost:3000/static/js/bundle.js:46635:113\nrenderWithHooks@http://localhost:3000/static/js/bundle.js:18904:27\nmountIndeterminateComponent@http://localhost:3000/static/js/bundle.js:21583:28\nbeginWork$1@http://localhost:3000/static/js/bundle.js:27280:23`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["typical function component - runtime=classic"],"updatePoint":{"line":67,"column":11,"index":2683},"line":67,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n  at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a506f09.cjs.dev.js:195:40)\n  at jsx (webpack-internal:///../../packages/react/dist/emotion-react.cjs.dev.js:103:45)\n  at MyComponent$9 (webpack-internal:///./pages/index.js:20:61)\n  at processChild (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n  at resolve (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n  at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n  at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n  at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n  at Object.renderPage (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:621:45)\n  at Object.defaultGetInitialProps (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:301:51)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["typical function component"],"updatePoint":{"line":93,"column":14,"index":4071},"line":93,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-895e3bbe.browser.esm.js:142)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js:18)\n    at MyComponent$9 (App.js:5)\n    at renderWithHooks (react-dom.development.js:14803)\n    at mountIndeterminateComponent (react-dom.development.js:17482)\n    at beginWork (react-dom.development.js:18596)\n    at beginWork$1 (react-dom.development.js:23179)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["typical function component"],"updatePoint":{"line":104,"column":15,"index":4597},"line":104,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:40\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2274:92\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:19228:17\nbeginWork@http://localhost:3000/static/js/vendors~main.chunk.js:20306:20`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["typical function component"],"updatePoint":{"line":113,"column":14,"index":5167},"line":113,"code":"  test('Safari', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2274:92\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:19228:32\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:24848:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["typical function component"],"updatePoint":{"line":122,"column":11,"index":5736},"line":122,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at MyComponent$9 (webpack-internal:///./pages/index.js:60:85)\n    at processChild (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n    at resolve (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:621:45)\n    at Object.defaultGetInitialProps (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:301:51)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["render function within function component"],"updatePoint":{"line":152,"column":14,"index":7287},"line":152,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-895e3bbe.browser.esm.js:142)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js:18)\n    at renderSpan (App.js:5)\n    at MyComponent$9 (App.js:8)\n    at renderWithHooks (react-dom.development.js:14803)\n    at mountIndeterminateComponent (react-dom.development.js:17482)\n    at beginWork (react-dom.development.js:18596)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["render function within function component"],"updatePoint":{"line":163,"column":15,"index":7790},"line":163,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:40\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nrenderSpan@http://localhost:3000/static/js/main.chunk.js:2273:89\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2287:15\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:19228:17\nbeginWork@http://localhost:3000/static/js/vendors~main.chunk.js:20306:20\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:24848:18`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["render function within function component"],"updatePoint":{"line":174,"column":14,"index":8500},"line":174,"code":"  test('Safari', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nMyComponent$9@http://localhost:3000/main.4d087bc1a783e9f2b657.hot-update.js:36:25\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nupdateFunctionComponent@http://localhost:3000/static/js/vendors~main.chunk.js:18795:39\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:24848:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["render function within function component"],"updatePoint":{"line":183,"column":11,"index":9079},"line":183,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at renderSpan (webpack-internal:///./pages/index.js:28:82)\n    at MyComponent$9 (webpack-internal:///./pages/index.js:71:15)\n    at processChild (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n    at resolve (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:621:45)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["element returned by Array.map"],"updatePoint":{"line":211,"column":14,"index":10526},"line":211,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-895e3bbe.browser.esm.js:142)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js:18)\n    at App.js:5\n    at Array.map (<anonymous>)\n    at MyComponent$9 (App.js:5)\n    at renderWithHooks (react-dom.development.js:14803)\n    at mountIndeterminateComponent (react-dom.development.js:17482)\n    at beginWork (react-dom.development.js:18596)\n    at beginWork$1 (react-dom.development.js:23179)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["element returned by Array.map"],"updatePoint":{"line":224,"column":15,"index":11099},"line":224,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:40\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nMyComponent$9/<.children<@http://localhost:3000/static/js/main.chunk.js:2274:106\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2274:19\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:19228:17\nbeginWork@http://localhost:3000/static/js/vendors~main.chunk.js:20306:20\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:24848:18`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["element returned by Array.map"],"updatePoint":{"line":235,"column":14,"index":11825},"line":235,"code":"  test('Safari', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1126:247\nmap@[native code]\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2274:22\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:16616:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:19228:32\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:24848:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["element returned by Array.map"],"updatePoint":{"line":245,"column":11,"index":12412},"line":245,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at eval (webpack-internal:///./pages/index.js:78:99)\n    at Array.map (<anonymous>)\n    at MyComponent$9 (webpack-internal:///./pages/index.js:78:19)\n    at processChild (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n    at resolve (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["function component within object"],"updatePoint":{"line":279,"column":14,"index":13851},"line":279,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-6352414e.browser.esm.js?fcc6:142)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js?cf67:18)\n    at Object.MyComponent$9 (index.js?bee7:7)\n    at App (index.js?bee7:14)\n    at renderWithHooks (react-dom.development.js?3c4a:14803)\n    at mountIndeterminateComponent (react-dom.development.js?3c4a:17482)\n    at beginWork (react-dom.development.js?3c4a:18596)\n    at beginWork$1 (react-dom.development.js?3c4a:23179)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["function component within object"],"updatePoint":{"line":291,"column":15,"index":14451},"line":291,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@webpack-internal:///../../packages/react/dist/emotion-element-6352414e.browser.esm.js:163:40\njsxDEV@webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js:35:230\nMyComponent$9@webpack-internal:///./pages/index.js:32:82\nApp@webpack-internal:///./pages/index.js:49:17\nrenderWithHooks@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:14803:27\nmountIndeterminateComponent@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:17482:13\nbeginWork@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:18596:16\nbeginWork$1@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:23179:14`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["function component within object"],"updatePoint":{"line":302,"column":14,"index":15327},"line":302,"code":"  test('Safari', () => {\n    // MyComponent$9 does not appear in the stack trace\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:866:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1147:247\nApp@http://localhost:3000/static/js/main.chunk.js:2290:32\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:19152:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:21764:32\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:27384:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe('App');\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["function component within object"],"updatePoint":{"line":312,"column":11,"index":15934},"line":312,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at Object.MyComponent$9 (webpack-internal:///./pages/index.js:31:82)\n    at App (webpack-internal:///./pages/index.js:47:19)\n    at processChild (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n    at resolve (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:621:45)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome: Module.jsx","suites":["function component within object"],"updatePoint":{"line":327,"column":24,"index":17180},"line":327,"code":"test('Chrome: Module.jsx', () => {\n  // From https://github.com/emotion-js/emotion/issues/1947\n  const stackTrace = `Error\n  at Module.jsx (http://localhost:10400/foo/bar/Combo?WZC6ZC&1ECYELF&12FP1RC&17F9LE8&P29J1Z&19IF3L2&AS09Z5&DHIG3C&EZJOER&13HZV70&1Y0F1JC&7UNIX3&SXHPTZ&K2YF13&11KMHHF&ZT36EV&Z44N8N&1QZW1DM&O16D0M&CW2QNS&1FH6TF2&ZWDLTF&1X87ICA&6LRWIZ&ME66AT&1SR9GT&1YH9ZQP&HHC8F2&1DB0VYO&FKOBET&1MJ8I38&JLAULY&1CH0G0Z&1TVRXYJ&SPNXDO&1JYOJGK&1LO9VOK&11TND7U&1YWNKYV&1DXWRM&TK6KOI&154ANPU&RWT5PA&19HGOKC&1YUJVCR&VFG0H0&172UQH&WFFZOK&1G8KK9P&Z4U2ZW&9UOM25&CBEUA3&1BURRUK&34VP40&CT8SCX&C5EGO8&XBSA9O&LL4E3N&1G5530W&R7QR2I&11ZITTG&1OIUGH1&ZN50OK&19R3ZDC&68ZZJF&413IE5&P0AYR7&1SMIEQU&1I34GN7&1GCT1EE&165FEOI&1NN6TMC&1FGT66H&1CP9Y2C&1R3WFPP&16Z97O3&1HGGWC2&AL9WFH&JXOSA2&QUXERX&NU7E4G&3HPVD3&16NVKFB&1JO5LOD&PIJWGC&1HD0KL3&A5KQ0E&UVG8ZT&156786I&1EGYRX&931PJP&71A44J&K4T5RR&YJS0J6&6NKXDV&15LGDNT&DK4XFH:6963:17)\n  at MyComponent$9 (http://localhost:10400/foo/bar/Combo?WZC6ZC&1ECYELF&12FP1RC&17F9LE8&P29J1Z&19IF3L2&AS09Z5&DHIG3C&EZJOER&13HZV70&1Y0F1JC&7UNIX3&SXHPTZ&K2YF13&11KMHHF&ZT36EV&Z44N8N&1QZW1DM&O16D0M&CW2QNS&1FH6TF2&ZWDLTF&1X87ICA&6LRWIZ&ME66AT&1SR9GT&1YH9ZQP&HHC8F2&1DB0VYO&FKOBET&1MJ8I38&JLAULY&1CH0G0Z&1TVRXYJ&SPNXDO&1JYOJGK&1LO9VOK&11TND7U&1YWNKYV&1DXWRM&TK6KOI&154ANPU&RWT5PA&19HGOKC&1YUJVCR&VFG0H0&172UQH&WFFZOK&1G8KK9P&Z4U2ZW&9UOM25&CBEUA3&1BURRUK&34VP40&CT8SCX&C5EGO8&XBSA9O&LL4E3N&1G5530W&R7QR2I&11ZITTG&1OIUGH1&ZN50OK&19R3ZDC&68ZZJF&413IE5&P0AYR7&1SMIEQU&1I34GN7&1GCT1EE&165FEOI&1NN6TMC&1FGT66H&1CP9Y2C&1R3WFPP&16Z97O3&1HGGWC2&AL9WFH&JXOSA2&QUXERX&NU7E4G&3HPVD3&16NVKFB&1JO5LOD&PIJWGC&1HD0KL3&A5KQ0E&UVG8ZT&156786I&1EGYRX&931PJP&71A44J&K4T5RR&YJS0J6&6NKXDV&15LGDNT&DK4XFH:13679:15)\n  at renderWithHooks (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:78801:18)\n  at updateFunctionComponent (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:80490:19)\n  at beginWork (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:81500:13)\n  at performUnitOfWork (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:85175:11)\n  at workLoop (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:85215:22)\n  at renderRoot (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:85298:5)\n  at performWorkOnRoot (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:86205:5)\n  at performWork (http://localhost:10400/foo/bar/Combo?1J6XZOQ&CV1G7Q&178CDN5&8GO7HW&1NEWTVK&11D8SWR&EUW1RW&B0SNY0&UKYKU8&Z2LJ32&OMFXIN&1CKRK5M&1DCE7I2&BTKQMZ&BF6IS9&IGMBPD&17GLBW0&F1NR3R&1BYJ6GK&1QMDI0S&1YBURTD&N3FA6J&1OKN2Q4&1VX6R8D&1RN5YOY&1PGEWZS&186NYSC&6OOHB&DAQXGM&18F8OG0&IEBF22&16BSJS0&270VGN&220EF0&PP2DW2&EXOH0W&1UI8QOX&BESS5A&SYNC6D&3EWNSZ&TX0EOZ&YHES22&SS37DN&155I4KT&SBSDY7&G2CFJM&1L12OEG&189382Y&4IWM93&RVOAXW&NMAEHJ&A3HW6D&react_v16.8.4&react-dom_v16.8.4&1I1OITG&1ZY465&1R86UXI&WLU3QX&1OO689&1N913EH&RZP360&15WCYOM&17TCHPC&115R68D&1VRCLJ7&12F8G3T&QXNNQC&128FRJB&1OH35FB&CHPVZ7&15VJLWF&DXTQHG&TI7NW9&8F7DFB&3ER51Q&1DTSSTA&1PQZ3V&1CA54WE&1GEM33A&OC7AMR&3AYWID&1KYS5DS&O76Y7S&1CD2C6F&1SB1JQ0&1DMMKMS&OCFDX4&1MO3710&1GVEDEZ&1FT6HVF&4JF9F9&1F8VFMW&1GAQQYW&149YUOT&12GEY49&4MFMGQ&16N8W14&12SV68C&2F7EYB&23HVSL&4TAXU8&1YL1F3&14H19K&1WHTWL7&1PYNLWK&1RUO08N&1PLVRSS&126YWXW&1TAPDE6&18TCRAP:86117:5)`;\n  expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n});","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["React.forwardRef with named function"],"updatePoint":{"line":354,"column":11,"index":26473},"line":354,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at Object.MyComponent$9 [as render] (webpack-internal:///./pages/index.js:31:80)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3535:44)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:621:45)\n    at Object.defaultGetInitialProps (C:/Projects/OSS/emotion/node_modules/next/dist/server/render.js:301:51)\n    at Function.getInitialProps (webpack-internal:///../../node_modules/next/dist/pages/_document.js:187:16)\n    at Object.loadGetInitialProps (C:/Projects/OSS/emotion/node_modules/next/dist/shared/lib/utils.js:69:29)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["multiple jsx factories"],"updatePoint":{"line":384,"column":14,"index":28053},"line":384,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-db00a197.browser.esm.js:78)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js:14)\n    at jsxDEV (theme-ui-core-jsx-dev-runtime.esm.js:7)\n    at MyComponent$9 (App.js:6)\n    at renderWithHooks (react-dom.development.js:14803)\n    at mountIndeterminateComponent (react-dom.development.js:17482)\n    at beginWork (react-dom.development.js:18596)\n    at beginWork$1 (react-dom.development.js:23179)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["multiple jsx factories"],"updatePoint":{"line":396,"column":15,"index":28633},"line":396,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:771:40\njsxDEV@http://localhost:3000/static/js/main.chunk.js:942:247\njsxDEV@http://localhost:3000/static/js/vendors~main.chunk.js:3998:87\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2094:86\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:21501:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:24113:17\nbeginWork@http://localhost:3000/static/js/vendors~main.chunk.js:25191:20\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:29733:18`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["multiple jsx factories"],"updatePoint":{"line":407,"column":14,"index":29346},"line":407,"code":"  test('Safari', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:866:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1147:247\nMyComponent$9@http://localhost:3000/static/js/main.chunk.js:2277:86\nrenderWithHooks@http://localhost:3000/static/js/vendors~main.chunk.js:19627:31\nmountIndeterminateComponent@http://localhost:3000/static/js/vendors~main.chunk.js:22239:32\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:27859:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["multiple jsx factories"],"updatePoint":{"line":416,"column":11,"index":29915},"line":416,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (C:/Projects/OSS/emotion/packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at Object.jsxDEV (C:/Projects/OSS/emotion/packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at jsxDEV (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/@theme-ui/core/jsx-dev-runtime/dist/theme-ui-core-jsx-dev-runtime.cjs.dev.js:15:24)\n    at MyComponent$9 (webpack-internal:///./pages/index.js:64:79)\n    at processChild (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3043:14)\n    at resolve (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/next/dist/server/render.js:621:45)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  }); // From https://github.com/emotion-js/emotion/pull/1714#discussion_r365518850","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"dollar signs in jsx","suites":["multiple jsx factories"],"updatePoint":{"line":431,"column":27,"index":31448},"line":431,"code":"  test('dollar signs in jsx', () => {\n    const stackTrace = `jsx@http://localhost:3000/_next/static/development/pages/theme_ui.js?ts=1578745166666:440:17\njsx$$1@http://localhost:3000/_next/static/development/pages/theme_ui.js?ts=1578745166666:2777:60\nMyComponent$9@http://localhost:3000/_next/static/development/pages/theme_ui.js?ts=1578745166666:23:62\nrenderWithHooks@http://localhost:3000/_next/static/development/dll/dll_d6a88dbe3071bd165157.js?ts=1578745166666:16511:27\nmountIndeterminateComponent@http://localhost:3000/_next/static/development/dll/dll_d6a88dbe3071bd165157.js?ts=1578745166666:19045:13`;\n    expect(getLabelFromStackTrace(stackTrace)).toBe(expectedLabel);\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["class component"],"updatePoint":{"line":453,"column":14,"index":32315},"line":453,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-6352414e.browser.esm.js:142)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js:18)\n    at MyComponent$9.render (App.js:6)\n    at finishClassComponent (react-dom.development.js:17163)\n    at updateClassComponent (react-dom.development.js:17110)\n    at beginWork (react-dom.development.js:18620)\n    at beginWork$1 (react-dom.development.js:23179)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["class component"],"updatePoint":{"line":464,"column":15,"index":32842},"line":464,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:844:40\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1125:247\nrender@http://localhost:3000/static/js/main.chunk.js:2276:89\nfinishClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:23777:22\nupdateClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:23727:48\nbeginWork@http://localhost:3000/static/js/vendors~main.chunk.js:25187:20\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:29705:18`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["class component"],"updatePoint":{"line":474,"column":14,"index":33474},"line":474,"code":"  test('Safari', () => {\n    // render does not appear in the stack trace\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:866:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1147:247\nfinishClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:21453:41\nupdateClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:21406:48\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:27384:27`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["class component"],"updatePoint":{"line":483,"column":11,"index":34018},"line":483,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (C:/Projects/OSS/emotion/packages/react/dist/emotion-element-7a9c77b4.cjs.dev.js:175:40)\n    at Object.jsxDEV (C:/Projects/OSS/emotion/packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at jsxDEV (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/@theme-ui/core/jsx-dev-runtime/dist/theme-ui-core-jsx-dev-runtime.cjs.dev.js:15:24)\n    at MyComponent$9.render (webpack-internal:///./pages/index.js:40:76)\n    at processChild (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3134:18)\n    at resolve (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (C:/Projects/OSS/emotion/playgrounds/nextjs/node_modules/next/dist/server/render.js:621:45)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["class component transpiled to ES 5"],"updatePoint":{"line":547,"column":14,"index":36810},"line":547,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (emotion-element-10a9af6f.browser.esm.js?d0a2:168)\n    at jsxDEV (emotion-react-jsx-dev-runtime.browser.esm.js?cf67:18)\n    at MyComponent$9.render (MyComponent9.js?2fbf:37)\n    at finishClassComponent (react-dom.development.js?3c4a:17160)\n    at updateClassComponent (react-dom.development.js?3c4a:17110)\n    at beginWork (react-dom.development.js?3c4a:18620)\n    at beginWork$1 (react-dom.development.js?3c4a:23179)\n    at performUnitOfWork (react-dom.development.js?3c4a:22154)\n    at workLoopSync (react-dom.development.js?3c4a:22130)\n    at performSyncWorkOnRoot (react-dom.development.js?3c4a:21756)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["class component transpiled to ES 5"],"updatePoint":{"line":561,"column":15,"index":37570},"line":561,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@webpack-internal:///../../packages/react/dist/emotion-element-10a9af6f.browser.esm.js:189:42\njsxDEV@webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js:35:230\nMyComponent$9</MyComponent$9.prototype.render@webpack-internal:///./pages/MyComponent9.js:62:82\nfinishClassComponent@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:17163:18\nupdateClassComponent@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:17110:44\nbeginWork@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:18620:16\nbeginWork$1@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:23179:14\nperformUnitOfWork@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:22154:12\nworkLoopSync@webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:22130:22`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["class component transpiled to ES 5"],"updatePoint":{"line":573,"column":14,"index":38637},"line":573,"code":"  test('Safari', () => {\n    // No idea why the function name is just blank in this stack trace\n    const stackTrace = `createEmotionProps@http://localhost:3000/static/js/main.chunk.js:973:49\njsxDEV@http://localhost:3000/static/js/main.chunk.js:1609:247\n@http://localhost:3000/static/js/main.chunk.js:2926:93\nfinishClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:21433:41\nupdateClassComponent@http://localhost:3000/static/js/vendors~main.chunk.js:21386:48\nbeginWork$1@http://localhost:3000/static/js/vendors~main.chunk.js:27364:27\nperformUnitOfWork@http://localhost:3000/static/js/vendors~main.chunk.js:26352:27\nworkLoopSync@http://localhost:3000/static/js/vendors~main.chunk.js:26328:43\nperformSyncWorkOnRoot@http://localhost:3000/static/js/vendors~main.chunk.js:25946:25`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"SSR","suites":["class component transpiled to ES 5"],"updatePoint":{"line":586,"column":11,"index":39500},"line":586,"code":"  test('SSR', () => {\n    const stackTrace = `Error\n    at Object.createEmotionProps (webpack-internal:///../../packages/react/dist/emotion-element-491a37fd.cjs.dev.js:201:42)\n    at jsxDEV (webpack-internal:///../../packages/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.dev.js:22:75)\n    at MyComponent$9.render (webpack-internal:///./pages/MyComponent9.js:60:82)\n    at processChild (/Users/sammagura/Documents/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3134:18)\n    at resolve (/Users/sammagura/Documents/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:2960:5)\n    at ReactDOMServerRenderer.render (/Users/sammagura/Documents/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3435:22)\n    at ReactDOMServerRenderer.read (/Users/sammagura/Documents/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3373:29)\n    at Object.renderToString (/Users/sammagura/Documents/emotion/node_modules/react-dom/cjs/react-dom-server.node.development.js:3988:27)\n    at Object.renderPage (/Users/sammagura/Documents/emotion/node_modules/next/dist/server/render.js:621:45)\n    at Object.defaultGetInitialProps (/Users/sammagura/Documents/emotion/node_modules/next/dist/server/render.js:301:51)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Chrome","suites":["issue #2614 - class component transpiled to ES 5"],"updatePoint":{"line":609,"column":14,"index":41119},"line":609,"code":"  test('Chrome', () => {\n    const stackTrace = `Error\n    at createEmotionProps (webpack-internal:///./node_modules/@emotion/react/dist/emotion-element-699e6908.browser.esm.js:183)\n    at Module.jsx (webpack-internal:///./node_modules/@emotion/react/dist/emotion-react.browser.esm.js:127)\n    at Loader.render (webpack-internal:///./node_modules/react-spinners/ScaleLoader.js:56)\n    at finishClassComponent (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:17485)\n    at updateClassComponent (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:17435)\n    at beginWork (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:19073)\n    at beginWork$1 (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:23935)\n    at performUnitOfWork (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22771)\n    at workLoopSync (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22702)\n    at renderRootSync (webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22665)`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Firefox","suites":["issue #2614 - class component transpiled to ES 5"],"updatePoint":{"line":623,"column":15,"index":42306},"line":623,"code":"  test('Firefox', () => {\n    const stackTrace = `createEmotionProps@webpack-internal:///./node_modules/@emotion/react/dist/emotion-element-699e6908.browser.esm.js:183:40\njsx@webpack-internal:///./node_modules/@emotion/react/dist/emotion-react.browser.esm.js:127:105\nLoader.prototype.render@webpack-internal:///./node_modules/react-spinners/ScaleLoader.js:56:35\nfinishClassComponent@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:17485:31\nupdateClassComponent@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:17435:44\nbeginWork@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:19073:16\nbeginWork$1@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:23935:14\nperformUnitOfWork@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22771:12\nworkLoopSync@webpack-internal:///./node_modules/react-dom/cjs/react-dom.development.js:22702:22`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  });","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Safari","suites":["issue #2614 - class component transpiled to ES 5"],"updatePoint":{"line":635,"column":14,"index":43332},"line":635,"code":"  test('Safari', () => {\n    // No idea why the function name is blank and there are no file locations\n    const stackTrace = `createEmotionProps@\njsx@\n@\nfinishClassComponent@\nupdateClassComponent@\nbeginWork$1@\nperformUnitOfWork@\nworkLoopSync@\nrenderRootSync@\nperformSyncWorkOnRoot@\nscheduleUpdateOnFiber@\nupdateContainer@`;\n    expect(getLabelFromStackTrace(stackTrace)).toBeUndefined();\n  }); // No SSR stack trace since this comes from a Gatsby project","file":"get-label-from-stack-trace.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Global style element insertion after insertion of other styles","suites":[],"updatePoint":{"line":7,"column":68,"index":311},"line":7,"code":"test('Global style element insertion after insertion of other styles', () => {\n  let Comp = ({\n    second\n  }) => jsx(\"div\", null, jsx(\"div\", {\n    css: {\n      color: 'green'\n    }\n  }), second && jsx(Global, {\n    styles: {\n      html: {\n        backgroundColor: 'hotpink'\n      }\n    }\n  }));\n\n  let {\n    rerender\n  } = render(jsx(Comp, null));\n  expect(getDataAttributes()).toEqual(['css']);\n  rerender(jsx(Comp, {\n    second: true\n  }));\n  expect(getDataAttributes()).toEqual(['css-global', 'css']);\n});","file":"global-insertion-after-others.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"basic","suites":[],"updatePoint":{"line":9,"column":11,"index":250},"line":9,"code":"test('basic', () => {\n  const {\n    unmount\n  } = render( /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      color: 'green'\n    }\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: theme => ({\n      html: {\n        backgroundColor: theme.color\n      }\n    })\n  })));\n  expect(document.documentElement).toMatchSnapshot();\n  unmount();\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"global-with-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"array","suites":[],"updatePoint":{"line":27,"column":11,"index":669},"line":27,"code":"test('array', () => {\n  const {\n    unmount\n  } = render( /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      color: 'green',\n      fontSize: 16\n    }\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: [theme => ({\n      html: {\n        backgroundColor: theme.color\n      }\n    }), theme => ({\n      html: {\n        fontSize: theme.fontSize\n      }\n    })]\n  })));\n  expect(document.documentElement).toMatchSnapshot();\n  unmount();\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"global-with-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"basic","suites":[],"updatePoint":{"line":13,"column":11,"index":389},"line":13,"code":"test('basic', () => {\n  const {\n    unmount\n  } = render( /*#__PURE__*/React.createElement(CacheProvider, {\n    value: createCache({\n      key: 'css'\n    })\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: [css`\n            @import url('something.com/file.css');\n          `, {\n      html: {\n        backgroundColor: 'hotpink'\n      },\n      h1: {\n        animation: `${keyframes({\n          'from,to': {\n            color: 'green'\n          },\n          '50%': {\n            color: 'hotpink'\n          }\n        })} 1s`\n      },\n      '@font-face': {\n        fontFamily: 'some-name'\n      }\n    }]\n  })));\n  expect(document.head).toMatchSnapshot();\n  expect(document.body).toMatchSnapshot();\n  unmount();\n  expect(document.head).toMatchSnapshot();\n  expect(document.body).toMatchSnapshot();\n});","file":"global.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"updating more than 1 global rule","suites":[],"updatePoint":{"line":48,"column":38,"index":1223},"line":48,"code":"test('updating more than 1 global rule', () => {\n  const cache = createCache({\n    key: 'global-multiple-rules'\n  });\n\n  const Comp = ({\n    background,\n    color\n  }) => /*#__PURE__*/React.createElement(CacheProvider, {\n    value: cache\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: {\n      body: {\n        background\n      },\n      div: {\n        color\n      }\n    }\n  }));\n\n  const {\n    rerender\n  } = render( /*#__PURE__*/React.createElement(Comp, {\n    background: \"white\",\n    color: \"black\"\n  }));\n  expect(document.head).toMatchSnapshot();\n  rerender( /*#__PURE__*/React.createElement(Comp, {\n    background: \"gray\",\n    color: \"white\"\n  }));\n  expect(document.head).toMatchSnapshot();\n});","file":"global.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no React hook order violations","suites":[],"updatePoint":{"line":82,"column":36,"index":1934},"line":82,"code":"test('no React hook order violations', () => {\n  const theme = {\n    color: 'blue'\n  };\n  const cache = createCache({\n    key: 'context'\n  }); // $FlowFixMe\n\n  const Comp = ({\n    flag\n  }) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(CacheProvider, {\n    value: cache\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: flag && (t => css`\n              color: ${t.color};\n            `)\n  })));\n\n  render( /*#__PURE__*/React.createElement(Comp, null));\n  expect(console.error).not.toHaveBeenCalled();\n  render( /*#__PURE__*/React.createElement(Comp, {\n    flag: true\n  }));\n  expect(console.error).not.toHaveBeenCalled();\n});","file":"global.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"specificity with globals","suites":[],"updatePoint":{"line":6,"column":30,"index":221},"line":6,"code":"test('specificity with globals', () => {\n  let SomeComponent = styled.p`\n    color: hotpink;\n  `;\n\n  let Comp = ({\n    itShouldNotBeThisColor\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    id: \"root\"\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: {\n      '.some-class': {\n        color: itShouldNotBeThisColor\n      }\n    }\n  }), /*#__PURE__*/React.createElement(SomeComponent, {\n    id: \"text\",\n    className: \"some-class\"\n  }, \"some text\"));\n\n  const {\n    rerender\n  } = render( /*#__PURE__*/React.createElement(Comp, {\n    itShouldNotBeThisColor: \"green\"\n  }));\n  expect(document.documentElement).toMatchSnapshot();\n  rerender( /*#__PURE__*/React.createElement(Comp, {\n    itShouldNotBeThisColor: \"yellow\"\n  }));\n  expect(document.documentElement).toMatchSnapshot();\n});","file":"globals-are-the-worst.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"it works","suites":[],"updatePoint":{"line":42,"column":14,"index":1120},"line":42,"code":"test('it works', async () => {\n  await render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Comp, null, \"something\"), /*#__PURE__*/React.createElement(Global, {\n    styles: {\n      html: {\n        backgroundColor: 'yellow'\n      }\n    }\n  }), /*#__PURE__*/React.createElement(Global, {\n    styles: css`\n          @import url('something.com/file.css');\n          body {\n            padding: 0;\n          }\n        `\n  }))); // order should be\n  // 1. html { background-color: yellow; }\n  // 1. @import\n  // 2. body { padding: 0; }\n  // 3. styled comp\n  // querying for style instead of [data-emotion] to appease flow\n\n  let elements = Array.from(document.querySelectorAll('style')).filter(x => x.getAttribute('data-emotion'));\n  expect(elements.map(x => x.getAttribute('data-emotion'))).toEqual(['css-global', 'css-global', 'css']);\n  expect(elements[0].sheet).toMatchInlineSnapshot(`\n    html {\n      background-color: yellow;\n    }\n  `);\n  expect(elements[1].sheet).toMatchInlineSnapshot(`\n@import url(something.com/file.css);\n\nbody {\n  padding: 0;\n}\n`);\n  expect(elements[2].sheet).toMatchInlineSnapshot(`\n.css-1lrxbo5 {\n  color: hotpink;\n}\n`);\n});","file":"import-prod.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"string className","suites":[],"updatePoint":{"line":5,"column":22,"index":156},"line":5,"code":"test('string className', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    className: \"legacy__class\",\n    css: css`\n          color: hotpink;\n        `\n  })).toJSON();\n  expect(tree).toMatchSnapshot();\n});","file":"legacy-class-name.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"object className","suites":[],"updatePoint":{"line":14,"column":22,"index":369},"line":14,"code":"test('object className', () => {\n  const tree = renderer.create(jsx(\"div\", {\n    className: {\n      toString: () => 'legacy__class'\n    },\n    css: css`\n          color: hotpink;\n        `\n  })).toJSON();\n  expect(tree).toMatchSnapshot();\n});","file":"legacy-class-name.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"css works","suites":[],"updatePoint":{"line":6,"column":15,"index":151},"line":6,"code":"test('css works', () => {\n  // css has a different return in prod so this is just making sure that isn't broken\n  expect(css({\n    color: 'hotpink'\n  })).toMatchInlineSnapshot(`\n{\n  \"name\": \"1lrxbo5\",\n  \"next\": undefined,\n  \"styles\": \"color:hotpink;\",\n}\n`);\n});","file":"prod.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"props work","suites":[],"updatePoint":{"line":18,"column":16,"index":414},"line":18,"code":"test('props work', () => {\n  let tree = renderer.create(jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    },\n    hidden: true\n  }));\n  expect(tree.toJSON().props.hidden).toBe(true);\n});","file":"prod.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"ref works","suites":[],"updatePoint":{"line":6,"column":15,"index":180},"line":6,"code":"test('ref works', () => {\n  let ref = /*#__PURE__*/React.createRef();\n  let {\n    getByTestId\n  } = render(jsx(\"div\", {\n    \"data-testid\": \"test\",\n    css: {\n      color: 'hotpink'\n    },\n    ref: ref\n  }));\n  expect(getByTestId('test')).toBe(ref.current);\n});","file":"ref.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"cache created in render doesn't cause a hydration mismatch","suites":[],"updatePoint":{"line":52,"column":64,"index":1491},"line":52,"code":"test(\"cache created in render doesn't cause a hydration mismatch\", () => {\n  safeQuerySelector('body').innerHTML = ['<div id=\"root\">', '<style data-emotion=\"stl 1pdkrhd\">.stl-1pdkrhd-App {color: hotpink;}</style>', '<div class=\"stl-1pdkrhd-App\">Hello world!</div>', '</div>'].join('');\n  resetAllModules();\n\n  const Wrapper = ({\n    children\n  }) => {\n    const cache = createCache({\n      key: 'stl'\n    });\n    return jsx(CacheProvider, {\n      value: cache\n    }, children);\n  };\n\n  function App() {\n    return jsx(Wrapper, null, jsx(\"div\", {\n      css: css`\n            color: hotpink;\n          `\n    }, 'Hello world!'));\n  }\n\n  render(jsx(App, null), {\n    hydrate: true,\n    container: safeQuerySelector('#root')\n  });\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n  expect(console.warn.mock.calls).toMatchInlineSnapshot(`[]`);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"initializing another Emotion instance should not move already moved styles elements","suites":[],"updatePoint":{"line":82,"column":89,"index":2373},"line":82,"code":"test('initializing another Emotion instance should not move already moved styles elements', () => {\n  safeQuerySelector('head').innerHTML = '<div id=\"style-container\"></div>';\n  safeQuerySelector('body').innerHTML = ['<div id=\"root\">', '<style data-emotion=\"stl 1pdkrhd\">.stl-1pdkrhd-App {color: hotpink;}</style>', '<div class=\"stl-1pdkrhd-App\">Hello world!</div>', '</div>'].join('');\n  resetAllModules();\n  const cache = createCache({\n    key: 'stl',\n    container: safeQuerySelector('#style-container')\n  });\n\n  function App() {\n    return jsx(CacheProvider, {\n      value: cache\n    }, jsx(\"div\", {\n      css: css`\n            color: hotpink;\n          `\n    }, 'Hello world!'));\n  }\n\n  render(jsx(App, null), {\n    hydrate: true,\n    container: safeQuerySelector('#root')\n  });\n  resetAllModules();\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <div\n        id=\"style-container\"\n      >\n        <style\n          data-emotion=\"stl 1pdkrhd\"\n          data-s=\"\"\n        >\n          .stl-1pdkrhd-App {color: hotpink;}\n        </style>\n        <style\n          data-emotion=\"stl\"\n          data-s=\"\"\n        >\n          \n          .stl-1pdkrhd-App{color:hotpink;}\n        </style>\n      </div>\n    </head>\n  `);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"initializing another Emotion instance should not move already moved styles elements","suites":[],"updatePoint":{"line":128,"column":89,"index":3621},"line":128,"code":"test('initializing another Emotion instance should not move already moved styles elements', () => {\n  safeQuerySelector('head').innerHTML = '<div id=\"style-container\"></div>';\n  safeQuerySelector('body').innerHTML = '<div id=\"root\"></div>';\n  resetAllModules();\n  const cache = createCache({\n    key: 'stl',\n    container: safeQuerySelector('#style-container')\n  });\n\n  function App() {\n    return jsx(CacheProvider, {\n      value: cache\n    }, jsx(\"div\", {\n      css: css`\n            color: hotpink;\n          `\n    }, 'Hello world!'));\n  }\n\n  render(jsx(App, null), {\n    container: safeQuerySelector('#root')\n  });\n  resetAllModules();\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <div\n        id=\"style-container\"\n      >\n        <style\n          data-emotion=\"stl\"\n          data-s=\"\"\n        >\n          \n          .stl-1pdkrhd-App{color:hotpink;}\n        </style>\n      </div>\n    </head>\n  `);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"global styles can be removed individually after rehydrating HTML SSRed with extractCriticalToChunks","suites":[],"updatePoint":{"line":167,"column":105,"index":4576},"line":167,"code":"test('global styles can be removed individually after rehydrating HTML SSRed with extractCriticalToChunks', async () => {\n  const {\n    app,\n    styles\n  } = await disableBrowserEnvTemporarily(() => {\n    resetAllModules();\n    let cache = createCache({\n      key: 'mui'\n    });\n    let {\n      extractCriticalToChunks,\n      constructStyleTagsFromChunks\n    } = createEmotionServer(cache);\n    const rendered = ReactDOMServer.renderToString(jsx(CacheProvider, {\n      value: cache\n    }, jsx(Global, {\n      styles: {\n        body: {\n          color: 'white'\n        }\n      }\n    }), jsx(Global, {\n      styles: {\n        html: {\n          background: 'red'\n        }\n      }\n    }), jsx(\"main\", {\n      css: {\n        color: 'green'\n      }\n    }, jsx(\"div\", {\n      css: {\n        color: 'hotpink'\n      }\n    }))));\n    const extracted = extractCriticalToChunks(rendered);\n    return {\n      app: extracted.html,\n      styles: constructStyleTagsFromChunks(extracted)\n    };\n  });\n  safeQuerySelector('head').innerHTML = styles;\n  safeQuerySelector('body').innerHTML = `<div id=\"root\">${app}</div>`;\n  expect(safeQuerySelector('html')).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"mui-global l6h\"\n        >\n          body{color:white;}\n        </style>\n        <style\n          data-emotion=\"mui-global 10q49a4\"\n        >\n          html{background:red;}\n        </style>\n        <style\n          data-emotion=\"mui bjcoli 1lrxbo5\"\n        >\n          .mui-bjcoli{color:green;}.mui-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body>\n        <div\n          id=\"root\"\n        >\n          <main\n            class=\"mui-bjcoli\"\n          >\n            <div\n              class=\"mui-1lrxbo5\"\n            />\n          </main>\n        </div>\n      </body>\n    </html>\n  `);\n  resetAllModules();\n  const cache = createCache({\n    key: 'mui',\n    speedy: true\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(Global, {\n    styles: {\n      html: {\n        background: 'red'\n      }\n    }\n  }), jsx(\"main\", {\n    css: {\n      color: 'green'\n    }\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }))), {\n    container: safeQuerySelector('#root')\n  });\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"mui-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"mui-global\"\n        data-s=\"\"\n      >\n        html{background:red;}\n      </style>\n      <style\n        data-emotion=\"mui bjcoli 1lrxbo5\"\n        data-s=\"\"\n      >\n        .mui-bjcoli{color:green;}.mui-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(\"main\", {\n    css: {\n      color: 'green'\n    }\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }))), {\n    container: safeQuerySelector('#root')\n  });\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"mui-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"mui bjcoli 1lrxbo5\"\n        data-s=\"\"\n      >\n        .mui-bjcoli{color:green;}.mui-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"duplicated global styles can be removed safely after rehydrating HTML SSRed with extractCriticalToChunks","suites":[],"updatePoint":{"line":333,"column":110,"index":8042},"line":333,"code":"test('duplicated global styles can be removed safely after rehydrating HTML SSRed with extractCriticalToChunks', async () => {\n  const {\n    app,\n    styles\n  } = await disableBrowserEnvTemporarily(() => {\n    resetAllModules();\n    let cache = createCache({\n      key: 'muii'\n    });\n    let {\n      extractCriticalToChunks,\n      constructStyleTagsFromChunks\n    } = createEmotionServer(cache);\n    const rendered = ReactDOMServer.renderToString(jsx(CacheProvider, {\n      value: cache\n    }, jsx(Global, {\n      styles: {\n        body: {\n          color: 'white'\n        }\n      }\n    }), jsx(Global, {\n      styles: {\n        body: {\n          color: 'white'\n        }\n      }\n    }), jsx(\"div\", {\n      css: {\n        color: 'hotpink'\n      }\n    })));\n    const extracted = extractCriticalToChunks(rendered);\n    return {\n      app: extracted.html,\n      styles: constructStyleTagsFromChunks(extracted)\n    };\n  });\n  safeQuerySelector('head').innerHTML = styles;\n  safeQuerySelector('body').innerHTML = `<div id=\"root\">${app}</div>`;\n  expect(safeQuerySelector('html')).toMatchInlineSnapshot(`\n    <html>\n      <head>\n        <style\n          data-emotion=\"muii-global l6h\"\n        >\n          body{color:white;}\n        </style>\n        <style\n          data-emotion=\"muii 1lrxbo5\"\n        >\n          .muii-1lrxbo5{color:hotpink;}\n        </style>\n      </head>\n      <body>\n        <div\n          id=\"root\"\n        >\n          <div\n            class=\"muii-1lrxbo5\"\n          />\n        </div>\n      </body>\n    </html>\n  `);\n  resetAllModules();\n  const cache = createCache({\n    key: 'muii',\n    speedy: true\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // it's expected that this contains 2 copies of the same global style\n  // where the second one is added during client hydration\n  // this makes them flushable individually\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"muii-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"muii-global\"\n        data-s=\"\"\n      >\n        \n      </style>\n      <style\n        data-emotion=\"muii 1lrxbo5\"\n        data-s=\"\"\n      >\n        .muii-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // this should still have a global style\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"muii-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"muii 1lrxbo5\"\n        data-s=\"\"\n      >\n        .muii-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // this should render without a crash\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"muii 1lrxbo5\"\n        data-s=\"\"\n      >\n        .muii-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"duplicated global styles can be removed safely after rehydrating HTML SSRed with zero config approach","suites":[],"updatePoint":{"line":502,"column":107,"index":11646},"line":502,"code":"test('duplicated global styles can be removed safely after rehydrating HTML SSRed with zero config approach', async () => {\n  const {\n    app\n  } = await disableBrowserEnvTemporarily(() => {\n    resetAllModules();\n    let cache = createCache({\n      key: 'globcop'\n    });\n    const rendered = ReactDOMServer.renderToString(jsx(CacheProvider, {\n      value: cache\n    }, jsx(Global, {\n      styles: {\n        body: {\n          color: 'white'\n        }\n      }\n    }), jsx(Global, {\n      styles: {\n        body: {\n          color: 'white'\n        }\n      }\n    }), jsx(\"div\", {\n      css: {\n        color: 'hotpink'\n      }\n    })));\n    return {\n      app: rendered\n    };\n  });\n  safeQuerySelector('body').innerHTML = `<div id=\"root\">${app}</div>`;\n  expect(safeQuerySelector('html')).toMatchInlineSnapshot(`\n    <html>\n      <head />\n      <body>\n        <div\n          id=\"root\"\n        >\n          <style\n            data-emotion=\"globcop-global l6h\"\n          >\n            body{color:white;}\n          </style>\n          <style\n            data-emotion=\"globcop-global l6h\"\n          >\n            body{color:white;}\n          </style>\n          <style\n            data-emotion=\"globcop 1lrxbo5\"\n          >\n            .globcop-1lrxbo5{color:hotpink;}\n          </style>\n          <div\n            class=\"globcop-1lrxbo5\"\n          />\n        </div>\n      </body>\n    </html>\n  `);\n  resetAllModules();\n  const cache = createCache({\n    key: 'globcop',\n    speedy: true\n  });\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // it's expected that this contains 2 copies of the same global style\n  // as both were rendered \"inline\" during SSR\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"globcop-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"globcop-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"globcop 1lrxbo5\"\n        data-s=\"\"\n      >\n        .globcop-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(Global, {\n    styles: {\n      body: {\n        color: 'white'\n      }\n    }\n  }), jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // this should still have a global style\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"globcop-global\"\n        data-s=\"\"\n      >\n        body{color:white;}\n      </style>\n      <style\n        data-emotion=\"globcop 1lrxbo5\"\n        data-s=\"\"\n      >\n        .globcop-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n  render(jsx(CacheProvider, {\n    value: cache\n  }, jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  })), {\n    container: safeQuerySelector('#root')\n  }); // this should render without a crash\n\n  expect(safeQuerySelector('head')).toMatchInlineSnapshot(`\n    <head>\n      <style\n        data-emotion=\"globcop 1lrxbo5\"\n        data-s=\"\"\n      >\n        .globcop-1lrxbo5{color:hotpink;}\n      </style>\n    </head>\n  `);\n});","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no hydration mismatch for styled when using useId","suites":[],"updatePoint":{"line":667,"column":57,"index":15108},"line":667,"code":"  test('no hydration mismatch for styled when using useId', async () => {\n    const finalHTML = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const StyledDivWithId = styled(function DivWithId({\n        className\n      }) {\n        const id = React.useId();\n        return jsx(\"div\", {\n          className: className,\n          id: id\n        });\n      })({\n        border: '1px solid black'\n      });\n      return ReactDOMServer.renderToString(jsx(StyledDivWithId, null));\n    });\n    safeQuerySelector('body').innerHTML = `<div id=\"root\">${finalHTML}</div>`;\n    resetAllModules();\n    const StyledDivWithId = styled(function DivWithId({\n      className\n    }) {\n      const id = React.useId();\n      return jsx(\"div\", {\n        className: className,\n        id: id\n      });\n    })({\n      border: '1px solid black'\n    });\n    render(jsx(StyledDivWithId, null), {\n      hydrate: true,\n      container: safeQuerySelector('#root')\n    });\n    expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n    expect(console.warn.mock.calls).toMatchInlineSnapshot(`[]`);\n  });","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no hydration mismatch for css prop when using useId","suites":[],"updatePoint":{"line":703,"column":59,"index":16215},"line":703,"code":"  test('no hydration mismatch for css prop when using useId', async () => {\n    const finalHTML = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n\n      function DivWithId({\n        className\n      }) {\n        const id = React.useId();\n        return jsx(\"div\", {\n          id: id,\n          className: className\n        });\n      }\n\n      return ReactDOMServer.renderToString(jsx(DivWithId, {\n        css: {\n          border: '1px solid black'\n        }\n      }));\n    });\n    safeQuerySelector('body').innerHTML = `<div id=\"root\">${finalHTML}</div>`;\n    resetAllModules();\n\n    function DivWithId({\n      className\n    }) {\n      const id = React.useId();\n      return jsx(\"div\", {\n        id: id,\n        className: className\n      });\n    }\n\n    render(jsx(DivWithId, {\n      css: {\n        border: '1px solid black'\n      }\n    }), {\n      hydrate: true,\n      container: safeQuerySelector('#root')\n    });\n    expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n    expect(console.warn.mock.calls).toMatchInlineSnapshot(`[]`);\n  });","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"no hydration mismatch for ClassNames when using useId","suites":[],"updatePoint":{"line":747,"column":61,"index":17288},"line":747,"code":"  test('no hydration mismatch for ClassNames when using useId', async () => {\n    const finalHTML = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n\n      const DivWithId = ({\n        className\n      }) => {\n        const id = React.useId();\n        return jsx(\"div\", {\n          id: id,\n          className: className\n        });\n      };\n\n      return ReactDOMServer.renderToString(jsx(ClassNames, null, ({\n        css\n      }) => {\n        return jsx(DivWithId, {\n          className: css({\n            border: '1px solid black'\n          })\n        });\n      }));\n    });\n    safeQuerySelector('body').innerHTML = `<div id=\"root\">${finalHTML}</div>`;\n    resetAllModules();\n\n    const DivWithId = ({\n      className\n    }) => {\n      const id = React.useId();\n      return jsx(\"div\", {\n        id: id,\n        className: className\n      });\n    };\n\n    render(jsx(ClassNames, null, ({\n      css\n    }) => {\n      return jsx(DivWithId, {\n        className: css({\n          border: '1px solid black'\n        })\n      });\n    }), {\n      hydrate: true,\n      container: safeQuerySelector('#root')\n    });\n    expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n    expect(console.warn.mock.calls).toMatchInlineSnapshot(`[]`);\n  });","file":"rehydration.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"provider with theme value that changes","suites":[],"updatePoint":{"line":12,"column":44,"index":385},"line":12,"code":"test('provider with theme value that changes', () => {\n  class ThemeTest extends React.Component {\n    state = {\n      theme: {\n        color: 'hotpink',\n        padding: 4\n      }\n    };\n\n    render() {\n      return jsx(ThemeProvider, {\n        theme: this.state.theme\n      }, jsx(\"div\", {\n        id: \"the-thing\",\n        onClick: () => {\n          this.setState({\n            theme: {\n              color: 'hotpink',\n              padding: 8\n            }\n          });\n        },\n        css: ({\n          color,\n          padding\n        }) => ({\n          color,\n          padding\n        })\n      }));\n    }\n\n  }\n\n  const {\n    container\n  } = render(jsx(ThemeTest, null));\n  expect(container).toMatchSnapshot();\n  fireEvent.click(safeQuerySelector('#the-thing'));\n  expect(container).toMatchSnapshot();\n});","file":"theme-provider.dom.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"nested provider","suites":[],"updatePoint":{"line":7,"column":21,"index":249},"line":7,"code":"test('nested provider', () => {\n  const tree = renderer.create(jsx(ThemeProvider, {\n    theme: {\n      color: 'hotpink',\n      padding: 4\n    }\n  }, jsx(ThemeProvider, {\n    theme: {\n      backgroundColor: 'darkgreen',\n      color: 'white'\n    }\n  }, jsx(\"div\", {\n    css: ({\n      color,\n      padding,\n      backgroundColor\n    }) => ({\n      color,\n      padding,\n      backgroundColor\n    })\n  })))).toJSON();\n  expect(tree).toMatchSnapshot();\n});","file":"theme-provider.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"nested provider with function","suites":[],"updatePoint":{"line":31,"column":35,"index":715},"line":31,"code":"test('nested provider with function', () => {\n  const tree = renderer.create(jsx(ThemeProvider, {\n    theme: {\n      color: 'hotpink',\n      padding: 4\n    }\n  }, jsx(ThemeProvider, {\n    theme: theme => ({\n      backgroundColor: 'darkgreen',\n      ...theme,\n      padding: 8\n    })\n  }, jsx(\"div\", {\n    css: ({\n      color,\n      padding,\n      backgroundColor\n    }) => ({\n      color,\n      padding,\n      backgroundColor\n    })\n  })))).toJSON();\n  expect(tree).toMatchSnapshot();\n});","file":"theme-provider.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"useTheme works","suites":[],"updatePoint":{"line":7,"column":20,"index":520},"line":7,"code":"test('useTheme works', () => {\n  function TestComponent(props) {\n    const theme = useTheme();\n    return jsx(\"div\", {\n      css: {\n        color: theme.lightGreen,\n        '&:hover': {\n          color: theme.darkGreen\n        }\n      }\n    }, \"Should be green\");\n  }\n\n  expect(renderer.create(jsx(ThemeProvider, {\n    theme: {\n      lightGreen: 'green',\n      darkGreen: 'darkgreen'\n    }\n  }, jsx(TestComponent, null))).toJSON()).toMatchSnapshot();\n});","file":"use-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"Nested useTheme works","suites":[],"updatePoint":{"line":27,"column":27,"index":982},"line":27,"code":"test('Nested useTheme works', () => {\n  function TestComponent1(props) {\n    const theme = useTheme();\n    return jsx(\"div\", _extends({\n      css: {\n        color: theme.lightGreen,\n        '&:hover': {\n          color: theme.darkGreen\n        }\n      }\n    }, props));\n  }\n\n  function NestedComponent(props) {\n    const theme = useTheme();\n    return jsx(\"div\", _extends({\n      css: {\n        color: theme.lightGreen,\n        '&:hover': {\n          color: theme.darkGreen\n        }\n      }\n    }, props));\n  }\n\n  function TestComponent2(props) {\n    return jsx(TestComponent1, null, \"Should be green\", jsx(ThemeProvider, {\n      theme: {\n        lightGreen: 'lawngreen',\n        darkGreen: 'seagreen'\n      }\n    }, jsx(NestedComponent, null, \"Should be lawngreen\")));\n  }\n\n  expect(renderer.create(jsx(ThemeProvider, {\n    theme: {\n      lightGreen: 'green',\n      darkGreen: 'darkgreen'\n    }\n  }, jsx(TestComponent2, null))).toJSON()).toMatchSnapshot();\n});","file":"use-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"does not warn when valid values are passed for the content property","suites":[],"updatePoint":{"line":12,"column":71,"index":928},"line":12,"code":"it('does not warn when valid values are passed for the content property', () => {\n  const style = css(validValues.map(value => ({\n    content: value\n  })));\n  expect(console.error).not.toBeCalled();\n  expect(renderer.create(jsx(\"div\", {\n    css: style\n  })).toJSON()).toMatchSnapshot();\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"does warn when invalid values are passed for the content property","suites":[],"updatePoint":{"line":22,"column":69,"index":1266},"line":22,"code":"it('does warn when invalid values are passed for the content property', () => {\n  // $FlowFixMe\n  invalidValues.forEach(value => {\n    expect(() => renderer.create(jsx(\"div\", {\n      css: {\n        content: value\n      }\n    }))).toThrowError(`You seem to be using a value for 'content' without quotes, try replacing it with \\`content: '\"${value}\"'\\``);\n  });\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"\"\"","suites":["unsafe pseudo classes","warns when using without flag: "],"updatePoint":{"line":37,"column":26,"index":2027},"line":37,"code":"      it(`\"${pseudoClass}\"`, () => {\n        const style = css`\n          ${pseudoClass} {\n            color: hotpink;\n          }\n        `;\n        const match = pseudoClass.match(/(:first|:nth|:nth-last)-child/);\n        expect(match).not.toBeNull();\n        expect(renderer.create(jsx(\"div\", {\n          css: style\n        })).toJSON()).toMatchSnapshot();\n        expect(console.error).toBeCalledWith(`The pseudo class \"${match[0]}\" is potentially unsafe when doing server-side rendering. Try changing it to \"${match[1]}-of-type\".`);\n      });","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"\"\" in a style ","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":68,"column":89,"index":3510},"line":68,"code":"        it(`\"${pseudoClass.replace(/\\/\\* \\S+ \\*\\//g, '/* [flag] */')}\" in a style ${type}`, () => {\n          const match = pseudoClass.match(/(:first|:nth|:nth-last)-child/);\n          expect(match).not.toBeNull();\n          expect(renderer.create(jsx(\"div\", {\n            css: styles[type]\n          })).toJSON()).toMatchSnapshot();\n          expect(console.error).not.toBeCalled();\n        });","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"global with css prop","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":80,"column":26,"index":3872},"line":80,"code":"test('global with css prop', () => {\n  let tree = renderer.create( // $FlowFixMe\n  jsx(Global, {\n    css: {\n      html: {\n        backgroundColor: 'hotpink'\n      },\n      '@font-face': {\n        fontFamily: 'some-name'\n      }\n    }\n  })).toJSON();\n  expect(tree).toMatchSnapshot();\n  expect(console.error).toBeCalledWith(\"It looks like you're using the css prop on Global, did you mean to use the styles prop instead?\");\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"kebab-case","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":95,"column":16,"index":4289},"line":95,"code":"test('kebab-case', () => {\n  css({\n    'background-color': 'green'\n  });\n  css({\n    'background-color': 'hotpink'\n  });\n  css({\n    '-ms-filter': 'inherit'\n  });\n  css({\n    '@media (min-width 800px)': undefined\n  });\n  css({\n    '--primary-color': 'hotpink'\n  });\n  css({\n    ':last-of-type': null\n  });\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n                    [\n                      [\n                        \"Using kebab-case for css properties in objects is not supported. Did you mean backgroundColor?\",\n                      ],\n                      [\n                        \"Using kebab-case for css properties in objects is not supported. Did you mean msFilter?\",\n                      ],\n                    ]\n          `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"keyframes interpolated into plain string","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":125,"column":46,"index":5081},"line":125,"code":"test('keyframes interpolated into plain string', () => {\n  const animateColor = keyframes({\n    'from,to': {\n      color: 'green'\n    },\n    '50%': {\n      color: 'hotpink'\n    }\n  });\n  const rotate360 = keyframes({\n    from: {\n      transform: 'rotate(0deg)'\n    },\n    to: {\n      transform: 'rotate(360deg)'\n    }\n  });\n  renderer.create(jsx(\"div\", {\n    css: [`animation: ${animateColor} 10s ${rotate360} 5s;`]\n  }));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n            [\n              [\n                \"\\`keyframes\\` output got interpolated into plain string, please wrap it with \\`css\\`.\n\n            Instead of doing this:\n\n            const animation0 = keyframes\\`{from,to{color:green;}50%{color:hotpink;}}\\`\n            const animation1 = keyframes\\`{from{transform:rotate(0deg);}to{transform:rotate(360deg);}}\\`\n            \\`animation: \\${animation0} 10s \\${animation1} 5s;\\`\n\n            You should wrap it with \\`css\\` like this:\n\n            css\\`animation: \\${animation0} 10s \\${animation1} 5s;\\`\",\n              ],\n            ]\n      `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"`css` opaque object passed in as `className` prop","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":163,"column":55,"index":6171},"line":163,"code":"test('`css` opaque object passed in as `className` prop', () => {\n  const {\n    container\n  } = render(jsx(\"div\", {\n    className: css`\n        color: hotpink;\n      `\n  }));\n  expect(container).toMatchInlineSnapshot(`\n    <div>\n      <div\n        class=\"You have tried to stringify object returned from \\`css\\` function. It isn't supposed to be used directly (e.g. as value of the \\`className\\` prop), but rather handed to emotion so it can handle it (e.g. as value of \\`css\\` prop).\"\n      />\n    </div>\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"`css` opaque object passed to `cx` from <ClassNames/>","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":179,"column":59,"index":6691},"line":179,"code":"test('`css` opaque object passed to `cx` from <ClassNames/>', () => {\n  render(jsx(ClassNames, null, ({\n    cx\n  }) => jsx(\"div\", {\n    className: cx( // $FlowFixMe\n    css`\n              color: hotpink;\n            `, 'other-cls')\n  })));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n    [\n      [\n        \"You have passed styles created with \\`css\\` from \\`@emotion/react\\` package to the \\`cx\\`.\n    \\`cx\\` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the \\`css\\` received from <ClassNames/> component.\",\n      ],\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"@import nested in scoped `css`","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":197,"column":36,"index":7282},"line":197,"code":"test('@import nested in scoped `css`', () => {\n  renderer.create(jsx(\"div\", {\n    css: css`\n        @import url('https://some-url');\n\n        h1 {\n          color: hotpink;\n        }\n      `\n  }));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n    [\n      [\n        \"\\`@import\\` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.\",\n      ],\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"@import prepended with other rules","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":215,"column":40,"index":7774},"line":215,"code":"test('@import prepended with other rules', () => {\n  renderer.create(jsx(Global, {\n    styles: css`\n        h1 {\n          color: hotpink;\n        }\n\n        @import url('https://some-url');\n      `\n  }));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`\n    [\n      [\n        \"\\`@import\\` rules can't be after other rules. Please put your \\`@import\\` rules before your other rules.\",\n      ],\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"@import prepended by other @import","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":233,"column":40,"index":8194},"line":233,"code":"test('@import prepended by other @import', () => {\n  renderer.create(jsx(Global, {\n    styles: css`\n        @import url('https://some-url');\n        @import url('https://some-url2');\n      `\n  }));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"when using `jsx` multiple static children should not result in a key-related warning","suites":["unsafe pseudo classes","does not warn when using with flag: "],"updatePoint":{"line":242,"column":90,"index":8510},"line":242,"code":"test('when using `jsx` multiple static children should not result in a key-related warning', () => {\n  renderer.create(jsx(\"div\", {\n    css: {\n      color: 'hotpink'\n    }\n  }, jsx(\"div\", null), jsx(\"div\", null)));\n  expect(console.error.mock.calls).toMatchInlineSnapshot(`[]`);\n});","file":"warnings.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"withTheme works","suites":[],"updatePoint":{"line":4,"column":21,"index":162},"line":4,"code":"test('withTheme works', () => {\n  class SomeComponent extends React.Component {\n    render() {\n      return this.props.theme.color;\n    }\n\n  }\n\n  let SomeComponentWithTheme = withTheme(SomeComponent);\n  expect(renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      color: 'green'\n    }\n  }, /*#__PURE__*/React.createElement(SomeComponentWithTheme, null))).toJSON()).toMatchSnapshot();\n});","file":"with-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"withTheme(Comp) hoists non-react static class properties","suites":[],"updatePoint":{"line":19,"column":62,"index":623},"line":19,"code":"test(`withTheme(Comp) hoists non-react static class properties`, () => {\n  class ExampleComponent extends React.Component {\n    static displayName = 'foo';\n    static someSpecialStatic = 'bar';\n  }\n\n  const ComponentWithTheme = withTheme(ExampleComponent);\n  expect(ComponentWithTheme.displayName).toBe('WithTheme(foo)'); // $FlowFixMe hoist-non-react-statics doesn't work with AbstractComponent https://github.com/facebook/flow/issues/7612\n\n  expect(ComponentWithTheme.someSpecialStatic).toBe(ExampleComponent.someSpecialStatic);\n});","file":"with-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"should forward the ref","suites":[],"updatePoint":{"line":30,"column":26,"index":1122},"line":30,"code":"it('should forward the ref', () => {\n  class SomeComponent extends React.Component {\n    render() {\n      return this.props.theme.color;\n    }\n\n  }\n\n  const ComponentWithTheme = withTheme(SomeComponent);\n  let ref = /*#__PURE__*/React.createRef();\n  renderer.create( /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      color: 'green'\n    }\n  }, /*#__PURE__*/React.createElement(ComponentWithTheme, {\n    ref: ref\n  })));\n  expect(ref.current).toBeInstanceOf(SomeComponent);\n});","file":"with-theme.js","skipped":false,"dir":"packages/react/__tests__"},{"name":"returns static css","suites":["extractCriticalToChunks"],"updatePoint":{"line":81,"column":26,"index":2015},"line":81,"code":"  test('returns static css', () => {\n    expect(prettifyCriticalChunks(page1Critical)).toMatchSnapshot();\n    expect(prettifyCriticalChunks(page2Critical)).toMatchSnapshot();\n  });","file":"extract-critical-to-chunks.test.js","skipped":false,"dir":"packages/server/test"},{"name":"generates correct style tags using constructStyleTagsFromChunks","suites":["extractCriticalToChunks"],"updatePoint":{"line":85,"column":71,"index":2241},"line":85,"code":"  test('generates correct style tags using constructStyleTagsFromChunks', () => {\n    expect(emotionServer.constructStyleTagsFromChunks(page1Critical)).toMatchSnapshot();\n    expect(emotionServer.constructStyleTagsFromChunks(page2Critical)).toMatchSnapshot();\n  });","file":"extract-critical-to-chunks.test.js","skipped":false,"dir":"packages/server/test"},{"name":"returns static css","suites":["extractCritical"],"updatePoint":{"line":21,"column":26,"index":668},"line":21,"code":"  test('returns static css', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = getComponents(emotion, reactEmotion);\n      expect(prettifyCritical(emotionServer.extractCritical(renderToString( /*#__PURE__*/React.createElement(Page1, null))))).toMatchSnapshot();\n      expect(prettifyCritical(emotionServer.extractCritical(renderToString( /*#__PURE__*/React.createElement(Page2, null))))).toMatchSnapshot();\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/server/test"},{"name":"does not warn when using extract critical","suites":["extractCritical"],"updatePoint":{"line":32,"column":49,"index":1201},"line":32,"code":"  test('does not warn when using extract critical', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n\n      let Provider = require('@emotion/react').CacheProvider;\n\n      const WithNthSelector = reactEmotion.default('div')({\n        ':nth-child(1)': {}\n      });\n      ignoreConsoleErrors(() => {\n        emotionServer.extractCritical(renderToString( /*#__PURE__*/React.createElement(Provider, {\n          value: emotion.cache\n        }, /*#__PURE__*/React.createElement(WithNthSelector, null))));\n        expect(console.error.mock.calls).toMatchObject([]);\n      });\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/server/test"},{"name":"only rules that are not in the critical css are inserted","suites":["hydration"],"updatePoint":{"line":51,"column":64,"index":1869},"line":51,"code":"  test('only rules that are not in the critical css are inserted', async () => {\n    const {\n      html,\n      ids,\n      css\n    } = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = getComponents(emotion, reactEmotion);\n      return emotionServer.extractCritical(renderToString( /*#__PURE__*/React.createElement(Page1, null)));\n    });\n    expect(prettifyCritical({\n      html,\n      css,\n      ids\n    })).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${html}</div>`;\n    resetAllModules();\n    emotion = require('@emotion/css');\n    emotionServer = require('@emotion/server');\n    expect(emotion.cache.inserted).toEqual({});\n    emotion.hydrate(ids);\n    const {\n      Page1: NewPage1\n    } = getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(getInjectedRules()).toMatchSnapshot();\n  });","file":"index.test.js","skipped":false,"dir":"packages/server/test"},{"name":"renders styles with ids","suites":["renderStylesToString"],"updatePoint":{"line":22,"column":31,"index":639},"line":22,"code":"  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = util.getComponents(emotion, reactEmotion);\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)))).toMatchSnapshot();\n      expect(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page2, null)))).toMatchSnapshot();\n    });\n  });","file":"inline.test.js","skipped":false,"dir":"packages/server/test"},{"name":"skip undefined styles","suites":["renderStylesToString"],"updatePoint":{"line":33,"column":29,"index":1131},"line":33,"code":"  test('skip undefined styles', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        css\n      } = emotion;\n      const style = css`\n        color: red;\n      `;\n      const component = /*#__PURE__*/React.createElement(\"a\", {\n        href: `${emotion.cache.key}-fail`,\n        className: style\n      });\n      const output = emotionServer.renderStylesToString(renderToString(component));\n      expect(output).toEqual(expect.not.stringContaining('undefined'));\n      expect(stripDataReactRoot(output)).toMatchSnapshot();\n    });\n  });","file":"inline.test.js","skipped":false,"dir":"packages/server/test"},{"name":"renders large recursive component","suites":["renderStylesToString"],"updatePoint":{"line":51,"column":41,"index":1732},"line":51,"code":"  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const BigComponent = util.createBigComponent(emotion);\n      expect(stripDataReactRoot(emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }))))).toMatchSnapshot();\n    });\n  });","file":"inline.test.js","skipped":false,"dir":"packages/server/test"},{"name":"only inserts rules that are not in the critical css","suites":["hydration"],"updatePoint":{"line":62,"column":59,"index":2172},"line":62,"code":"  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = util.getComponents(emotion, reactEmotion);\n      return emotionServer.renderStylesToString(renderToString( /*#__PURE__*/React.createElement(Page1, null)));\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = util.getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(util.getInjectedRules(document)).toMatchSnapshot();\n    expect(util.getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });","file":"inline.test.js","skipped":false,"dir":"packages/server/test"},{"name":"renders styles with ids","suites":["renderStylesToNodeStream"],"updatePoint":{"line":22,"column":31,"index":643},"line":22,"code":"  test('renders styles with ids', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const {\n        Page1,\n        Page2\n      } = util.getComponents(emotion, reactEmotion);\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer)).toMatchSnapshot();\n      expect(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page2, null), emotionServer)).toMatchSnapshot();\n    });\n  });","file":"stream.test.js","skipped":false,"dir":"packages/server/test"},{"name":"renders large recursive component","suites":["renderStylesToNodeStream"],"updatePoint":{"line":33,"column":41,"index":1153},"line":33,"code":"  test('renders large recursive component', async () => {\n    await disableBrowserEnvTemporarily(async () => {\n      resetAllModules();\n      const BigComponent = util.createBigComponent(emotion);\n      expect(stripDataReactRoot(await util.renderToStringWithStream( /*#__PURE__*/React.createElement(BigComponent, {\n        count: 200\n      }), emotionServer))).toMatchSnapshot();\n    });\n  });","file":"stream.test.js","skipped":false,"dir":"packages/server/test"},{"name":"only inserts rules that are not in the critical css","suites":["hydration"],"updatePoint":{"line":44,"column":59,"index":1599},"line":44,"code":"  test('only inserts rules that are not in the critical css', async () => {\n    const appHtml = await disableBrowserEnvTemporarily(() => {\n      resetAllModules();\n      const {\n        Page1\n      } = util.getComponents(emotion, reactEmotion);\n      return util.renderToStringWithStream( /*#__PURE__*/React.createElement(Page1, null), emotionServer);\n    });\n    expect(appHtml).toMatchSnapshot();\n    document.body.innerHTML = `<div id=\"root\">${appHtml}</div>`;\n    resetAllModules();\n    expect(emotion.cache.registered).toEqual({});\n    const {\n      Page1: NewPage1\n    } = util.getComponents(emotion, reactEmotion);\n    render( /*#__PURE__*/React.createElement(NewPage1, null), {\n      container: safeQuerySelector('#root')\n    });\n    expect(util.getInjectedRules(document)).toMatchSnapshot();\n    expect(util.getCssFromChunks(emotion, document)).toMatchSnapshot();\n  });","file":"stream.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should be speedy by default in production","suites":["StyleSheet"],"updatePoint":{"line":19,"column":47,"index":535},"line":19,"code":"  it('should be speedy by default in production', () => {\n    process.env.NODE_ENV = 'production';\n    const sheet = new StyleSheet(defaultOptions);\n    expect(sheet.isSpeedy).toBe(true);\n    process.env.NODE_ENV = 'test';\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should not be speedy in a non-production environment by default","suites":["StyleSheet"],"updatePoint":{"line":25,"column":69,"index":786},"line":25,"code":"  it('should not be speedy in a non-production environment by default', () => {\n    const sheet = new StyleSheet(defaultOptions);\n    expect(sheet.isSpeedy).toBe(false);\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should remove its style elements from the document when flushed","suites":["StyleSheet"],"updatePoint":{"line":29,"column":69,"index":962},"line":29,"code":"  it('should remove its style elements from the document when flushed', () => {\n    const sheet = new StyleSheet(defaultOptions);\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n    expect(document.documentElement).toMatchSnapshot();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should set the data-emotion attribute to the key option","suites":["StyleSheet"],"updatePoint":{"line":36,"column":61,"index":1245},"line":36,"code":"  it('should set the data-emotion attribute to the key option', () => {\n    const key = 'some-key';\n    const sheet = new StyleSheet({ ...defaultOptions,\n      key\n    });\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot();\n    expect( // $FlowFixMe\n    document.querySelector('[data-emotion]').getAttribute('data-emotion')).toBe(key);\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should insert a rule into the DOM when not in speedy","suites":["StyleSheet"],"updatePoint":{"line":47,"column":58,"index":1631},"line":47,"code":"  it('should insert a rule into the DOM when not in speedy', () => {\n    const sheet = new StyleSheet(defaultOptions);\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should insert a rule with insertRule when in speedy","suites":["StyleSheet"],"updatePoint":{"line":53,"column":57,"index":1854},"line":53,"code":"  it('should insert a rule with insertRule when in speedy', () => {\n    const sheet = new StyleSheet({ ...defaultOptions,\n      speedy: true\n    });\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot();\n    expect(sheet.tags).toHaveLength(1); // $FlowFixMe\n\n    expect(sheet.tags[0].sheet.cssRules).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should throw when inserting a bad rule in speedy mode","suites":["StyleSheet"],"updatePoint":{"line":64,"column":59,"index":2225},"line":64,"code":"  it('should throw when inserting a bad rule in speedy mode', () => {\n    const sheet = new StyleSheet({ ...defaultOptions,\n      speedy: true\n    });\n    sheet.insert('.asdfasdf4###112121211{');\n    expect(console.error).toHaveBeenCalledTimes(1);\n    expect(console.error.mock.calls[0][0]).toBe('There was a problem inserting the following rule: \".asdfasdf4###112121211{\"');\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should set the nonce option as an attribute to style elements","suites":["StyleSheet"],"updatePoint":{"line":73,"column":67,"index":2634},"line":73,"code":"  it('should set the nonce option as an attribute to style elements', () => {\n    let nonce = 'some-nonce';\n    const sheet = new StyleSheet({ ...defaultOptions,\n      nonce\n    });\n    sheet.insert(rule);\n    expect(sheet.tags[0]).toBe(document.querySelector('[data-emotion]'));\n    expect(sheet.tags).toHaveLength(1);\n    expect(sheet.tags[0].getAttribute('nonce')).toBe(nonce);\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should use the container option instead of document.head to insert style elements into if it's passed","suites":["StyleSheet"],"updatePoint":{"line":84,"column":107,"index":3080},"line":84,"code":"  it(\"should use the container option instead of document.head to insert style elements into if it's passed\", () => {\n    const container = document.createElement('div'); // $FlowFixMe\n\n    document.body.appendChild(container);\n    const sheet = new StyleSheet({ ...defaultOptions,\n      container\n    });\n    expect(sheet.container).toBe(container);\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot();\n    expect(sheet.tags).toHaveLength(1);\n    expect(sheet.tags[0].parentNode).toBe(container);\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should work with a ShadowRoot container","suites":["StyleSheet"],"updatePoint":{"line":98,"column":45,"index":3568},"line":98,"code":"  it('should work with a ShadowRoot container', () => {\n    const div = document.createElement('div'); // $FlowFixMe\n\n    document.body.appendChild(div);\n    const container = div.attachShadow({\n      mode: 'open'\n    });\n    const sheet = new StyleSheet({ ...defaultOptions,\n      container\n    });\n    expect(sheet.container).toBe(container);\n    sheet.insert(rule);\n    expect(document.documentElement).toMatchSnapshot(); // The shadowRoot is not serialized in the snapshot, so we need to take a\n    // separate snapshot of the shadowRoot's children.\n\n    expect(container.children).toMatchSnapshot();\n    expect(sheet.tags).toHaveLength(1);\n    expect(sheet.tags[0].parentNode).toBe(container);\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should accept prepend option","suites":["StyleSheet"],"updatePoint":{"line":118,"column":34,"index":4281},"line":118,"code":"  it('should accept prepend option', () => {\n    const head = safeQuerySelector('head');\n    const otherStyle = document.createElement('style');\n    otherStyle.setAttribute('id', 'other');\n    head.appendChild(otherStyle);\n    const sheet = new StyleSheet({ ...defaultOptions,\n      prepend: true\n    });\n    sheet.insert(rule);\n    sheet.insert(rule2);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should accept insertionPoint option","suites":["StyleSheet"],"updatePoint":{"line":131,"column":41,"index":4723},"line":131,"code":"  it('should accept insertionPoint option', () => {\n    const head = safeQuerySelector('head');\n    head.innerHTML = `\n      <style id=\"first\"></style>\n      <style id=\"last\"></style>\n    `; // the sheet should be inserted between the first and last style nodes\n\n    const sheet = new StyleSheet({ ...defaultOptions,\n      insertionPoint: safeQuerySelector('#first')\n    });\n    sheet.insert(rule);\n    sheet.insert(rule2);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should work if insertionPoint is last element","suites":["StyleSheet"],"updatePoint":{"line":146,"column":51,"index":5238},"line":146,"code":"  it('should work if insertionPoint is last element', () => {\n    const head = safeQuerySelector('head');\n    const lastStyle = document.createElement('style');\n    lastStyle.setAttribute('id', 'last');\n    head.appendChild(lastStyle); // the sheet should be inserted after the first node\n\n    const sheet = new StyleSheet({ ...defaultOptions,\n      insertionPoint: lastStyle\n    });\n    sheet.insert(rule);\n    sheet.insert(rule2);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should be able to hydrate styles","suites":["StyleSheet"],"updatePoint":{"line":160,"column":38,"index":5739},"line":160,"code":"  it('should be able to hydrate styles', () => {\n    const fooStyle = document.createElement('style');\n    fooStyle.textContent = '.foo { color: hotpink; }';\n    const barStyle = document.createElement('style');\n    barStyle.textContent = '.bar { background-color: green; }';\n    const body = safeQuerySelector('body');\n    body.appendChild(fooStyle);\n    body.appendChild(barStyle);\n    const sheet = new StyleSheet(defaultOptions);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.hydrate([fooStyle, barStyle]);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should flush hydrated styles","suites":["StyleSheet"],"updatePoint":{"line":174,"column":34,"index":6347},"line":174,"code":"  it('should flush hydrated styles', () => {\n    const fooStyle = document.createElement('style');\n    fooStyle.textContent = '.foo { color: hotpink; }';\n    const barStyle = document.createElement('style');\n    barStyle.textContent = '.bar { background-color: green; }';\n    const body = safeQuerySelector('body');\n    body.appendChild(fooStyle);\n    body.appendChild(barStyle);\n    const sheet = new StyleSheet(defaultOptions);\n    sheet.hydrate([fooStyle, barStyle]);\n    sheet.insert(rule);\n    sheet.insert(rule2);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n    expect(document.documentElement).toMatchSnapshot();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should correctly position hydrated styles when used with `prepend` option","suites":["StyleSheet"],"updatePoint":{"line":190,"column":79,"index":7049},"line":190,"code":"  it('should correctly position hydrated styles when used with `prepend` option', () => {\n    const head = safeQuerySelector('head');\n    const otherStyle = document.createElement('style');\n    otherStyle.setAttribute('id', 'other');\n    head.appendChild(otherStyle);\n    const fooStyle = document.createElement('style');\n    fooStyle.textContent = '.foo { color: hotpink; }';\n    const barStyle = document.createElement('style');\n    barStyle.textContent = '.bar { background-color: green; }';\n    const body = safeQuerySelector('body');\n    body.appendChild(fooStyle);\n    body.appendChild(barStyle);\n    const sheet = new StyleSheet({ ...defaultOptions,\n      prepend: true\n    });\n    sheet.hydrate([fooStyle, barStyle]);\n    expect(document.documentElement).toMatchSnapshot();\n    sheet.flush();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"should not crash when flushing when styles are already detached","suites":["StyleSheet"],"updatePoint":{"line":209,"column":69,"index":7846},"line":209,"code":"  it('should not crash when flushing when styles are already detached', () => {\n    const head = safeQuerySelector('head');\n    const sheet = new StyleSheet(defaultOptions);\n    sheet.insert(rule);\n    head.innerHTML = '';\n    expect(() => sheet.flush()).not.toThrowError();\n  });","file":"index.js","skipped":false,"dir":"packages/sheet/__tests__"},{"name":"string base - string as","suites":[],"updatePoint":{"line":9,"column":29,"index":248},"line":9,"code":"test('string base - string as', () => {\n  const Title = styled('h1')`\n    color: green;\n  `;\n  let h1Title = id();\n  let h2Title = id();\n  let {\n    getByTestId\n  } = render( /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1Title\n  }, \"My Title\"), /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h2Title,\n    as: \"h2\"\n  }, \"My Subtitle\")));\n  expect(getByTestId(h1Title).tagName).toBe('H1');\n  expect(getByTestId(h2Title).tagName).toBe('H2');\n});","file":"as-prop.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"styled string base - string as","suites":[],"updatePoint":{"line":26,"column":36,"index":779},"line":26,"code":"test('styled string base - string as', () => {\n  const Title = styled('h1')`\n    color: green;\n  `;\n  const Subtitle = styled(Title)`\n    font-weight: 100;\n  `;\n  let h1Title = id();\n  let h1Subtitle = id();\n  let h3Subtitle = id();\n  let {\n    getByTestId\n  } = render( /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1Title\n  }, \"My Title\"), /*#__PURE__*/React.createElement(Subtitle, {\n    \"data-testid\": h1Subtitle\n  }, \"My Subtitle\"), /*#__PURE__*/React.createElement(Subtitle, {\n    \"data-testid\": h3Subtitle,\n    as: \"h3\"\n  }, \"My smaller Subtitle\")));\n  expect(getByTestId(h1Title).tagName).toBe('H1');\n  expect(getByTestId(h1Subtitle).tagName).toBe('H1');\n  expect(getByTestId(h3Subtitle).tagName).toBe('H3');\n});","file":"as-prop.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composite base - string as","suites":[],"updatePoint":{"line":50,"column":32,"index":1562},"line":50,"code":"test('composite base - string as', () => {\n  const Title = styled(props => /*#__PURE__*/React.createElement(\"h1\", props))`\n    color: green;\n  `;\n  let h1Title = id();\n  let h3Title = id();\n  let {\n    getByTestId\n  } = render( /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1Title\n  }, \"My Title\"), /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h3Title,\n    as: \"h3\"\n  }, \"My Subtitle\")));\n  expect(getByTestId(h1Title).tagName).toBe('H1');\n  expect(getByTestId(h3Title).tagName).toBe('H1');\n  expect(getByTestId(h3Title).getAttribute('as')).toBe('h3');\n});","file":"as-prop.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"forward as - string base","suites":[],"updatePoint":{"line":68,"column":30,"index":2199},"line":68,"code":"test('forward as - string base', () => {\n  const Title = styled('h1', {\n    shouldForwardProp: prop => prop !== 'theme'\n  })`\n    color: green;\n  `;\n  let h1Title = id();\n  let h1WithAsProp = id();\n  let {\n    getByTestId\n  } = render( /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1Title\n  }, \"My Title\"), /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1WithAsProp,\n    as: \"h2\"\n  }, \"My Subtitle\")));\n  expect(getByTestId(h1Title).tagName).toBe('H1');\n  expect(getByTestId(h1WithAsProp).tagName).toBe('H1');\n  expect(getByTestId(h1WithAsProp).getAttribute('as')).toBe('h2');\n});","file":"as-prop.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"forward as - composite base","suites":[],"updatePoint":{"line":88,"column":33,"index":2864},"line":88,"code":"test('forward as - composite base', () => {\n  const Title = styled(props => /*#__PURE__*/React.createElement(\"h1\", props), {\n    shouldForwardProp: prop => prop !== 'theme'\n  })`\n    color: green;\n  `;\n  let h1Title = id();\n  let h1WithAsProp = id();\n  let {\n    getByTestId\n  } = render( /*#__PURE__*/React.createElement(\"article\", null, /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1Title\n  }, \"My Title\"), /*#__PURE__*/React.createElement(Title, {\n    \"data-testid\": h1WithAsProp,\n    as: \"h2\"\n  }, \"My Subtitle\")));\n  expect(getByTestId(h1Title).tagName).toBe('H1');\n  expect(getByTestId(h1WithAsProp).tagName).toBe('H1');\n  expect(getByTestId(h1WithAsProp).getAttribute('as')).toBe('h2');\n});","file":"as-prop.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"nested function using css","suites":[],"updatePoint":{"line":6,"column":31,"index":225},"line":6,"code":"test('nested function using css', () => {\n  let Comp = styled.div`\n    color: blue;\n    border: 2px solid #000;\n    ${() => css`\n      background-color: red;\n    `};\n    padding: 30px;\n  `;\n  const tree = renderer.create( /*#__PURE__*/React.createElement(Comp, null));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"edge-cases.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"nested function using css and keyframes","suites":[],"updatePoint":{"line":18,"column":45,"index":555},"line":18,"code":"test('nested function using css and keyframes', () => {\n  let Comp = styled.div`\n    ${() => css`\n      animation: ${keyframes({\n    'from,to': {\n      color: 'green'\n    },\n    '50%': {\n      color: 'hotpink'\n    }\n  })};\n    `};\n  `;\n  const tree = renderer.create( /*#__PURE__*/React.createElement(Comp, null));\n  expect(tree.toJSON()).toMatchSnapshot();\n});","file":"edge-cases.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"ref","suites":[],"updatePoint":{"line":5,"column":9,"index":158},"line":5,"code":"test('ref', () => {\n  const H1 = styled.h1`\n    font-size: 12px;\n  `;\n  let node;\n  render( /*#__PURE__*/React.createElement(H1, {\n    ref: val => {\n      node = val;\n    },\n    id: \"thing\"\n  }, \"hello world\"));\n  expect(node).toBe(document.getElementById('thing'));\n});","file":"styled-dom.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"no dynamic","suites":["styled"],"updatePoint":{"line":10,"column":18,"index":644},"line":10,"code":"  test('no dynamic', () => {\n    const H1 = styled.h1`\n      float: left;\n    `;\n    const tree = renderer.create(jsx(H1, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"basic render","suites":["styled"],"updatePoint":{"line":17,"column":20,"index":842},"line":17,"code":"  test('basic render', () => {\n    const fontSize = 20;\n    const H1 = styled.h1`\n      color: blue;\n      font-size: ${fontSize + 'px'};\n      @media (min-width: 420px) {\n        color: blue;\n      }\n    `;\n    const tree = renderer.create(jsx(H1, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"basic render with object as style","suites":["styled"],"updatePoint":{"line":29,"column":41,"index":1186},"line":29,"code":"  test('basic render with object as style', () => {\n    const fontSize = 20;\n    const H1 = styled.h1({\n      fontSize\n    });\n    const tree = renderer.create(jsx(H1, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"object as style","suites":["styled"],"updatePoint":{"line":37,"column":23,"index":1410},"line":37,"code":"  test('object as style', () => {\n    const H1 = styled.h1(props => ({\n      fontSize: props.fontSize\n    }), props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create(jsx(H1, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"object as className","suites":["styled"],"updatePoint":{"line":51,"column":27,"index":1751},"line":51,"code":"  test('object as className', () => {\n    const myclass = {\n      toString: () => 'myclass'\n    };\n    const Comp = styled.div``;\n    const tree = renderer.create(jsx(Comp, {\n      className: myclass\n    })).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"glamorous style api & composition","suites":["styled"],"updatePoint":{"line":61,"column":41,"index":2025},"line":61,"code":"  test('glamorous style api & composition', () => {\n    const H1 = styled.h1(props => ({\n      fontSize: props.fontSize\n    }));\n    const H2 = styled(H1)(props => ({\n      flex: props.flex\n    }), {\n      display: 'flex'\n    });\n    const tree = renderer.create(jsx(H2, {\n      fontSize: 20,\n      flex: 1\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"inline function return value is a function","suites":["styled"],"updatePoint":{"line":76,"column":50,"index":2416},"line":76,"code":"  test('inline function return value is a function', () => {\n    const fontSize = () => 20;\n\n    const Blue = styled('h1')`\n      font-size: ${() => fontSize}px;\n    `;\n    const tree = renderer.create(jsx(Blue, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"call expression","suites":["styled"],"updatePoint":{"line":85,"column":23,"index":2675},"line":85,"code":"  test('call expression', () => {\n    const fontSize = 20;\n    const Div = styled('div')`\n      font-size: ${fontSize}px;\n    `;\n    const tree = renderer.create(jsx(Div, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"nested","suites":["styled"],"updatePoint":{"line":93,"column":14,"index":2911},"line":93,"code":"  test('nested', () => {\n    const fontSize = '20px';\n    const H1 = styled.h1`\n      font-size: ${fontSize};\n    `;\n    const Thing = styled.div`\n      display: flex;\n      & div {\n        color: green;\n\n        & span {\n          color: red;\n        }\n      }\n    `;\n    const tree = renderer.create(jsx(Thing, null, \"hello \", jsx(H1, null, \"This will be green\"), \" world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"random expressions undefined return","suites":["styled"],"updatePoint":{"line":111,"column":43,"index":3369},"line":111,"code":"  test('random expressions undefined return', () => {\n    const H1 = styled('h1')`\n      ${props => props.prop && css`\n          font-size: 1rem;\n        `};\n      color: green;\n    `;\n    const tree = renderer.create(jsx(H1, {\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"random object expression","suites":["styled"],"updatePoint":{"line":123,"column":32,"index":3694},"line":123,"code":"  test('random object expression', () => {\n    const margin = (t, r, b, l) => {\n      return props => ({\n        marginTop: t,\n        marginRight: r,\n        marginBottom: b,\n        marginLeft: l\n      });\n    };\n\n    const H1 = styled.h1`\n      background-color: hotpink;\n      ${props => props.prop && {\n      fontSize: '1rem'\n    }};\n      ${margin(0, 'auto', 0, 'auto')};\n      color: green;\n    `;\n    const tree = renderer.create(jsx(H1, {\n      className: 'legacy__class',\n      prop: true\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composition","suites":["styled"],"updatePoint":{"line":147,"column":19,"index":4255},"line":147,"code":"  test('composition', () => {\n    const fontSize = 20;\n    const H1 = styled('h1')`\n      font-size: ${fontSize + 'px'};\n    `;\n    const H2 = styled(H1)`\n      font-size: ${fontSize * 2 / 3 + 'px'};\n    `;\n    const tree = renderer.create(jsx(H2, {\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"input placeholder","suites":["styled"],"updatePoint":{"line":160,"column":25,"index":4619},"line":160,"code":"  test('input placeholder', () => {\n    const Input = styled.input`\n      ::placeholder {\n        background-color: green;\n      }\n    `;\n    const tree = renderer.create(jsx(Input, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"input placeholder object","suites":["styled"],"updatePoint":{"line":169,"column":32,"index":4882},"line":169,"code":"  test('input placeholder object', () => {\n    const Input = styled('input')({\n      '::placeholder': {\n        backgroundColor: 'green'\n      }\n    });\n    const tree = renderer.create(jsx(Input, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"object composition","suites":["styled"],"updatePoint":{"line":178,"column":26,"index":5147},"line":178,"code":"  test('object composition', () => {\n    const imageStyles = css({\n      width: 96,\n      height: 96\n    });\n    css([{\n      color: 'blue'\n    }]);\n    const red = css([{\n      color: 'red'\n    }]);\n    const blue = css([red, {\n      color: 'blue'\n    }]);\n    const prettyStyles = css([{\n      borderRadius: '50%',\n      transition: 'transform 400ms ease-in-out',\n      ':hover': {\n        transform: 'scale(1.2)'\n      }\n    }, {\n      border: '3px solid currentColor'\n    }]);\n    const Avatar = styled('img')`\n      ${prettyStyles};\n      ${imageStyles};\n      ${blue};\n    `;\n    const tree = renderer.create(jsx(Avatar, null)).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"handles more than 10 dynamic properties","suites":["styled"],"updatePoint":{"line":209,"column":47,"index":5854},"line":209,"code":"  test('handles more than 10 dynamic properties', () => {\n    const H1 = styled('h1')`\n      text-decoration: ${'underline'};\n      border-right: solid blue 54px;\n      background: ${'white'};\n      color: ${'black'};\n      display: ${'block'};\n      border-radius: ${'3px'};\n      padding: ${'25px'};\n      width: ${'500px'};\n      z-index: ${100};\n      font-size: ${'18px'};\n      text-align: ${'center'};\n      border-left: ${p => p.theme.blue};\n    `;\n    const tree = renderer.create(jsx(H1, {\n      className: 'legacy__class',\n      theme: {\n        blue: 'blue'\n      }\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"function in expression","suites":["styled"],"updatePoint":{"line":232,"column":30,"index":6490},"line":232,"code":"  test('function in expression', () => {\n    const fontSize = 20;\n    const H1 = styled('h1', {\n      label: 'H1'\n    })`\n      font-size: ${fontSize + 'px'};\n    `;\n    const H2 = styled(H1)`\n      font-size: ${({\n      scale\n    }) => fontSize * scale + 'px'};\n    `;\n    const tree = renderer.create(jsx(H2, {\n      scale: 2,\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composition","suites":["styled"],"updatePoint":{"line":250,"column":19,"index":6916},"line":250,"code":"  test('composition', () => {\n    const fontSize = '20px';\n    const cssA = css`\n      color: blue;\n    `;\n    const cssB = css`\n      ${cssA};\n      color: red;\n    `;\n    const BlueH1 = styled('h1')`\n      ${cssB};\n      color: blue;\n      font-size: ${fontSize};\n    `;\n    const FinalH2 = styled(BlueH1)`\n      font-size: 32px;\n    `;\n    const tree = renderer.create(jsx(FinalH2, {\n      scale: 2,\n      className: 'legacy__class'\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"higher order component","suites":["styled"],"updatePoint":{"line":273,"column":30,"index":7438},"line":273,"code":"  test('higher order component', () => {\n    const fontSize = 20;\n    const Content = styled('div')`\n      font-size: ${fontSize}px;\n    `;\n    const squirtleBlueBackground = css`\n      background-color: #7fc8d6;\n    `;\n\n    const flexColumn = Component => {\n      const NewComponent = styled(Component)`\n        ${squirtleBlueBackground};\n        background-color: '#343a40';\n        flex-direction: column;\n      `;\n      return NewComponent;\n    };\n\n    const ColumnContent = flexColumn(Content);\n    const tree = renderer.create(jsx(ColumnContent, null)).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composition based on props","suites":["styled"],"updatePoint":{"line":295,"column":34,"index":8053},"line":295,"code":"  test('composition based on props', () => {\n    const cssA = css`\n      color: blue;\n    `;\n    const cssB = css`\n      color: green;\n    `;\n    const H1 = styled('h1')`\n      ${props => props.a ? cssA : cssB};\n    `;\n    const tree = renderer.create(jsx(H1, {\n      a: true\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n    const tree2 = renderer.create(jsx(H1, null, \"hello world\")).toJSON();\n    expect(tree2).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composition of nested pseudo selectors","suites":["styled"],"updatePoint":{"line":312,"column":46,"index":8527},"line":312,"code":"  test('composition of nested pseudo selectors', () => {\n    const defaultLinkStyles = {\n      '&:hover': {\n        color: 'blue',\n        '&:active': {\n          color: 'red'\n        }\n      }\n    };\n\n    const buttonStyles = () => ({ ...defaultLinkStyles,\n      fontSize: '2rem',\n      padding: 16\n    });\n\n    const Button = styled('button')(buttonStyles);\n    const tree = renderer.create(jsx(Button, {\n      css: css({\n        '&:hover': {\n          color: 'pink',\n          '&:active': {\n            color: 'purple'\n          },\n          '&.some-class': {\n            color: 'yellow'\n          }\n        }\n      })\n    }, \"Should be purple\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"objects","suites":["styled"],"updatePoint":{"line":343,"column":15,"index":9198},"line":343,"code":"  test('objects', () => {\n    const H1 = styled('h1')({\n      padding: 10\n    }, props => ({\n      display: props.display\n    }));\n    const tree = renderer.create(jsx(H1, {\n      display: \"flex\"\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"objects with spread properties","suites":["styled"],"updatePoint":{"line":354,"column":38,"index":9492},"line":354,"code":"  test('objects with spread properties', () => {\n    const defaultText = {\n      fontSize: 20\n    };\n    const Figure = styled.figure({ ...defaultText\n    });\n    const tree = renderer.create(jsx(Figure, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"composing components","suites":["styled"],"updatePoint":{"line":363,"column":28,"index":9760},"line":363,"code":"  test('composing components', () => {\n    const Button = styled.button`\n      color: green;\n    `;\n    const OtherButton = styled(Button)`\n      display: none;\n    `;\n    const AnotherButton = styled(OtherButton)`\n      display: flex;\n      justify-content: center;\n    `;\n    const tree = renderer.create(jsx(AnotherButton, null, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"with higher order component that hoists statics","suites":["styled"],"updatePoint":{"line":377,"column":55,"index":10187},"line":377,"code":"  test('with higher order component that hoists statics', () => {\n    const superImportantValue = 'hotpink';\n\n    const hoc = BaseComponent => {\n      const NewComponent = props => jsx(BaseComponent, _extends({\n        someProp: superImportantValue\n      }, props));\n\n      return hoistNonReactStatics(NewComponent, BaseComponent);\n    };\n\n    const SomeComponent = hoc(styled.div`\n      display: flex;\n      color: ${props => props.someProp};\n    `);\n    const FinalComponent = styled(SomeComponent)`\n      padding: 8px;\n    `;\n    const tree = renderer.create(jsx(FinalComponent, null)).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"prop filtering","suites":["styled"],"updatePoint":{"line":398,"column":22,"index":10795},"line":398,"code":"  test('prop filtering', () => {\n    const Link = styled.a`\n      color: green;\n    `;\n    const rest = {\n      m: [3],\n      pt: [4]\n    };\n    const tree = renderer.create(jsx(Link, _extends({\n      a: true,\n      b: true,\n      wow: true,\n      prop: true,\n      filtering: true,\n      is: true,\n      cool: true,\n      \"aria-label\": \"some label\",\n      \"data-wow\": \"value\",\n      href: \"link\"\n    }, rest), \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"no prop filtering on non string tags","suites":["styled"],"updatePoint":{"line":420,"column":44,"index":11296},"line":420,"code":"  test('no prop filtering on non string tags', () => {\n    const Link = styled(props => jsx(\"a\", props))`\n      color: green;\n    `;\n    const tree = renderer.create(jsx(Link, {\n      a: true,\n      b: true,\n      wow: true,\n      prop: true,\n      filtering: true,\n      is: true,\n      cool: true,\n      \"aria-label\": \"some label\",\n      \"data-wow\": \"value\",\n      href: \"link\"\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"no prop filtering on string tags started with upper case","suites":["styled"],"updatePoint":{"line":438,"column":64,"index":11771},"line":438,"code":"  test('no prop filtering on string tags started with upper case', () => {\n    const Link = styled('SomeCustomLink')`\n      color: green;\n    `;\n    const tree = renderer.create(jsx(Link, {\n      a: true,\n      b: true,\n      wow: true,\n      prop: true,\n      filtering: true,\n      is: true,\n      cool: true,\n      \"aria-label\": \"some label\",\n      \"data-wow\": \"value\",\n      href: \"link\"\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"prop filtering on composed styled components that are string tags","suites":["styled"],"updatePoint":{"line":456,"column":73,"index":12247},"line":456,"code":"  test('prop filtering on composed styled components that are string tags', () => {\n    const BaseLink = styled.a`\n      background-color: hotpink;\n    `;\n    const Link = styled(BaseLink)`\n      color: green;\n    `;\n    const tree = renderer.create(jsx(Link, {\n      a: true,\n      b: true,\n      wow: true,\n      prop: true,\n      filtering: true,\n      is: true,\n      cool: true,\n      \"aria-label\": \"some label\",\n      \"data-wow\": \"value\",\n      href: \"link\"\n    }, \"hello world\")).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"throws if undefined is passed as the component","suites":["styled"],"updatePoint":{"line":477,"column":54,"index":12767},"line":477,"code":"  test('throws if undefined is passed as the component', () => {\n    expect(() => // $FlowFixMe\n    styled(undefined)`\n          display: flex;\n        `).toThrowErrorMatchingSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"withComponent will replace tags but keep styling classes","suites":["styled"],"updatePoint":{"line":483,"column":64,"index":12970},"line":483,"code":"  test('withComponent will replace tags but keep styling classes', () => {\n    const Title = styled('h1')`\n      color: green;\n    `;\n    const Subtitle = Title.withComponent('h2');\n    const tree = renderer.create(jsx(\"article\", null, jsx(Title, null, \"My Title\"), jsx(Subtitle, null, \"My Subtitle\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"withComponent with function interpolation","suites":["styled"],"updatePoint":{"line":491,"column":49,"index":13310},"line":491,"code":"  test('withComponent with function interpolation', () => {\n    const Title = styled('h1')`\n      color: ${props => props.color || 'green'};\n    `;\n    const Subtitle = Title.withComponent('h2');\n    const tree = renderer.create(jsx(\"article\", null, jsx(Title, null, \"My Title\"), jsx(Subtitle, null, \"My Subtitle\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"withComponent does carry styles from flattened component","suites":["styled"],"updatePoint":{"line":499,"column":64,"index":13694},"line":499,"code":"  test('withComponent does carry styles from flattened component', () => {\n    const SomeComponent = styled.div`\n      color: green;\n    `;\n    const AnotherComponent = styled(SomeComponent)`\n      color: hotpink;\n    `;\n    const OneMoreComponent = AnotherComponent.withComponent('p');\n    const tree = renderer.create(jsx(OneMoreComponent, null)).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"theming","suites":["styled"],"updatePoint":{"line":510,"column":15,"index":14046},"line":510,"code":"  test('theming', () => {\n    const Div = styled.div`\n      color: ${props => props.theme.primary};\n    `;\n    const tree = renderer.create(jsx(ThemeProvider, {\n      theme: {\n        primary: 'hotpink'\n      }\n    }, jsx(Div, null, \"this should be hotpink\"))).toJSON();\n    expect(tree).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"same component rendered multiple times","suites":["styled"],"updatePoint":{"line":521,"column":46,"index":14390},"line":521,"code":"  test('same component rendered multiple times', () => {\n    const SomeComponent = styled.div`\n      color: green;\n    `;\n    const tree = renderer.create(jsx(SomeComponent, null)).toJSON();\n    expect(tree).toMatchSnapshot();\n    expect(renderer.create(jsx(SomeComponent, null)).toJSON()).toEqual(renderer.create(jsx(SomeComponent, null)).toJSON());\n    expect(renderer.create(jsx(SomeComponent, null, jsx(SomeComponent, null), jsx(SomeComponent, null))).toJSON()).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"component selectors","suites":["styled"],"updatePoint":{"line":530,"column":27,"index":14862},"line":530,"code":"  test('component selectors', () => {\n    let Target = styled('div', {\n      // if anyone is looking this\n      // please don't do this.\n      // use the babel plugin/macro.\n      target: 'e322f2d3tbrgf2e0'\n    })`\n      color: hotpink;\n    `;\n    let SomeComponent = styled.div`\n      color: green;\n      ${Target.toString()} {\n        color: yellow;\n      }\n    `;\n    expect(renderer.create(jsx(SomeComponent, null, jsx(Target, null))).toJSON()).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"keyframes with css call","suites":["styled"],"updatePoint":{"line":547,"column":31,"index":15340},"line":547,"code":"  test('keyframes with css call', () => {\n    let SomeComp = styled.div(css`\n        animation: ${keyframes({\n      'from,to': {\n        color: 'green'\n      },\n      '50%': {\n        color: 'hotpink'\n      }\n    })};\n      `);\n    expect(renderer.create(jsx(SomeComp, null)).toJSON()).toMatchSnapshot();\n  });","file":"styled.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"warns about illegal escape sequences inside first quasi of template literal","suites":[],"updatePoint":{"line":11,"column":79,"index":357},"line":11,"code":"it('warns about illegal escape sequences inside first quasi of template literal', () => {\n  styled.div`\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"warns about illegal escape sequences inside non-first quasi of template literal","suites":[],"updatePoint":{"line":26,"column":83,"index":1055},"line":26,"code":"it('warns about illegal escape sequences inside non-first quasi of template literal', () => {\n  const color = css`\n    color: hotpink;\n  `;\n  styled.div`\n    background-color: black;\n    ${color};\n    :before {\n      content: '\\00d7';\n    }\n  `;\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have illegal escape sequence in your template literal, most likely inside content's property value.\n    Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\\\00d7';\" should become \"content: '\\\\\\\\00d7';\".\n    You can read more about this here:\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\",\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"warns about undefined being passed as object style's key","suites":[],"updatePoint":{"line":46,"column":60,"index":1819},"line":46,"code":"it(\"warns about undefined being passed as object style's key\", () => {\n  let ListItem; // $FlowFixMe\n\n  const List = styled.ul({\n    [ListItem]: {\n      color: 'hotpink'\n    }\n  });\n  render( /*#__PURE__*/React.createElement(List, null));\n  expect(console.error.mock.calls[0]).toMatchInlineSnapshot(`\n    [\n      \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\",\n    ]\n  `);\n});","file":"warnings.js","skipped":false,"dir":"packages/styled/__tests__"},{"name":"it works","suites":[],"updatePoint":{"line":2,"column":14,"index":64},"line":2,"code":"test('it works', () => {\n  let doThing = weakMemoize(obj => {\n    return {};\n  });\n  let firstArg = {};\n  let firstResult = doThing(firstArg);\n  let secondResult = doThing(firstArg);\n  expect(firstResult).toBe(secondResult);\n  let newObj = {};\n  let newResult = doThing(newObj);\n  expect(newResult).not.toBe(firstResult);\n});","file":"index.js","skipped":false,"dir":"packages/weak-memoize/__tests__"}]}