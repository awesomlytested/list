{
    "repo": "leon-ai/leon",
    "url": "https://github.com/leon-ai/leon",
    "branch": "develop",
    "configs": [
        {
            "package": "leon",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "\"\" queries this module",
            "suites": [
                "NLU modules",
                " language",
                " package",
                " module"
            ],
            "updatePoint": {
                "line": 68,
                "column": 57
            },
            "line": 68,
            "code": "                  test(`\"${exprs[m]}\" queries this module`, async () => {\n                    // Need to redefine the NLU brain execution to update the mocking\n                    nlu.brain.execute = jest.fn();\n                    await nlu.process(exprs[m]);\n                    const [obj] = nlu.brain.execute.mock.calls;\n                    expect(obj[0].classification.package).toBe(packages[j]);\n                    expect(obj[0].classification.module).toBe(module);\n                  });",
            "file": "e2e/nlp-modules.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": " has valid JSON syntax",
            "suites": [
                "are JSON files valid"
            ],
            "updatePoint": {
                "line": 17,
                "column": 47
            },
            "line": 17,
            "code": "        test(`${jsonFile} has valid JSON syntax`, () => {\n          try {\n            // eslint-disable-line no-useless-catch\n            JSON.parse(fs.readFileSync(jsonFile, 'utf8'));\n            expect(true).toBe(true);\n          } catch (e) {\n            throw e;\n          }\n        });",
            "file": "json/is-valid.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has no punctuation at the end of \"\"",
            "suites": [
                "no punctuation"
            ],
            "updatePoint": {
                "line": 19,
                "column": 53
            },
            "line": 19,
            "code": "        test(`has no punctuation at the end of \"${s}\"`, () => {\n          expect(found).toBe(false);\n        });",
            "file": "json/no-punctuation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has punctuation at the end of \"\"",
            "suites": [
                "punctuation"
            ],
            "updatePoint": {
                "line": 19,
                "column": 50
            },
            "line": 19,
            "code": "        test(`has punctuation at the end of \"${s}\"`, () => {\n          expect(found).toBe(true);\n        });",
            "file": "json/punctuation.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Asr",
            "suites": [
                "ASR",
                "constructor()"
            ],
            "updatePoint": {
                "line": 7,
                "column": 39
            },
            "line": 7,
            "code": "    test('creates a new instance of Asr', () => {\n      const asr = new Asr();\n      expect(asr).toBeInstanceOf(Asr);\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns audio paths",
            "suites": [
                "ASR",
                "get audios()"
            ],
            "updatePoint": {
                "line": 13,
                "column": 29
            },
            "line": 13,
            "code": "    test('returns audio paths', () => {\n      expect(Asr.audios).toContainAllKeys(['webm', 'wav']);\n      expect(Asr.audios.webm.indexOf('/tmp/speech.webm')).not.toBe(-1);\n      expect(Asr.audios.wav.indexOf('/tmp/speech.wav')).not.toBe(-1);\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error because of wrong WebM audio path",
            "suites": [
                "ASR",
                "run()"
            ],
            "updatePoint": {
                "line": 21,
                "column": 56
            },
            "line": 21,
            "code": "    test('returns error because of wrong WebM audio path', async () => {\n      const asr = new Asr();\n      Asr.audios.webm = '';\n\n      try {\n        await asr.run('', {});\n      } catch (e) {\n        expect(e.type).toBe('error');\n        Asr.audios.webm = webmTmp; // Need to give back the real WebM path\n      }\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error because of a bad blob",
            "suites": [
                "ASR",
                "run()"
            ],
            "updatePoint": {
                "line": 32,
                "column": 45
            },
            "line": 32,
            "code": "    test('returns error because of a bad blob', async () => {\n      const asr = new Asr();\n\n      try {\n        await asr.run('bad blob', {});\n      } catch (e) {\n        expect(e.type).toBe('error');\n      }\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns warning speech recognition not ready",
            "suites": [
                "ASR",
                "run()"
            ],
            "updatePoint": {
                "line": 41,
                "column": 54
            },
            "line": 41,
            "code": "    test('returns warning speech recognition not ready', async () => {\n      const asr = new Asr();\n      const blob = Buffer.from(global.audio.base_64_webm_blob, 'base64');\n\n      try {\n        await asr.run(blob, {});\n      } catch (e) {\n        expect(e.type).toBe('warning');\n      }\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "encodes audio blob to WAVE file",
            "suites": [
                "ASR",
                "run()"
            ],
            "updatePoint": {
                "line": 51,
                "column": 41
            },
            "line": 51,
            "code": "    test('encodes audio blob to WAVE file', async () => {\n      const asr = new Asr();\n      const blob = Buffer.from(global.audio.base_64_webm_blob, 'base64');\n      const stt = {\n        parse: jest.fn()\n      };\n      await asr.run(blob, stt);\n      expect(fs.existsSync(Asr.audios.webm)).toBe(true);\n      expect(stt.parse).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/core/asr.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Brain",
            "suites": [
                "brain",
                "constructor()"
            ],
            "updatePoint": {
                "line": 5,
                "column": 41
            },
            "line": 5,
            "code": "    test('creates a new instance of Brain', () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      expect(brain).toBeInstanceOf(Brain);\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not emit answer to the client when the speech is empty",
            "suites": [
                "brain",
                "talk()"
            ],
            "updatePoint": {
                "line": 13,
                "column": 69
            },
            "line": 13,
            "code": "    test('does not emit answer to the client when the speech is empty', () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.talk('');\n      expect(brain.socket.emit).toHaveBeenCalledTimes(0);\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "emits string answer to the client",
            "suites": [
                "brain",
                "talk()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 43
            },
            "line": 20,
            "code": "    test('emits string answer to the client', () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.tts = {\n        add: jest.fn()\n      };\n      brain.talk('Hello world');\n      expect(brain.tts.add).toHaveBeenCalledTimes(1);\n      expect(brain.socket.emit).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "picks specific string according to object properties",
            "suites": [
                "brain",
                "wernicke()"
            ],
            "updatePoint": {
                "line": 33,
                "column": 62
            },
            "line": 33,
            "code": "    test('picks specific string according to object properties', () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      expect(brain.wernicke('errors', 'not_found', {})).toBe('Sorry, it seems I cannot find that');\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "picks random string from an array",
            "suites": [
                "brain",
                "wernicke()"
            ],
            "updatePoint": {
                "line": 39,
                "column": 43
            },
            "line": 39,
            "code": "    test('picks random string from an array', () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      expect(global.enExpressions.answers.random_errors).toIncludeAnyMembers([brain.wernicke('random_errors', '', {})]);\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "asks to repeat",
            "suites": [
                "brain",
                "execute()"
            ],
            "updatePoint": {
                "line": 47,
                "column": 24
            },
            "line": 47,
            "code": "    test('asks to repeat', async () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.talk = jest.fn();\n      await brain.execute({\n        classification: {\n          confidence: 0.1\n        }\n      });\n      const [string] = brain.talk.mock.calls;\n      expect(global.enExpressions.answers.random_not_sure).toIncludeAnyMembers([string[0].substr(0, string[0].length - 1)]);\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates child process",
            "suites": [
                "brain",
                "execute()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 31
            },
            "line": 60,
            "code": "    test('creates child process', async () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.tts = {\n        synthesizer: jest.fn(),\n        default: jest.fn(),\n        save: jest.fn(),\n        add: jest.fn()\n      };\n      const obj = {\n        query: 'Hello',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'greeting',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      await brain.execute(obj);\n      expect(brain.process).toEqual({});\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "executes module",
            "suites": [
                "brain",
                "execute()"
            ],
            "updatePoint": {
                "line": 83,
                "column": 25
            },
            "line": 83,
            "code": "    test('executes module', async () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.talk = jest.fn();\n      const obj = {\n        query: 'Is github.com up?',\n        entities: [{\n          sourceText: 'github.com',\n          utteranceText: 'github.com',\n          entity: 'url',\n          resolution: {\n            value: 'github.com'\n          }\n        }],\n        classification: {\n          package: 'checker',\n          module: 'isitdown',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      await brain.execute(obj);\n      expect(brain.talk).toHaveBeenCalled();\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "rejects promise because of spawn failure",
            "suites": [
                "brain",
                "execute()"
            ],
            "updatePoint": {
                "line": 108,
                "column": 50
            },
            "line": 108,
            "code": "    test('rejects promise because of spawn failure', async () => {\n      const brain = new Brain({\n        emit: jest.fn()\n      }, 'en');\n      brain.talk = jest.fn();\n      const obj = {\n        query: 'Hello',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'greeting',\n          action: 'run',\n          confidence: 0.9\n        }\n      };\n      brain.process = spawn('pipenv', ['run', 'python', `${global.paths.packages}/fake-main-to-test.py`, 'en', obj.classification.package, obj.classification.module, obj.query]);\n\n      try {\n        await brain.execute(obj);\n      } catch (e) {\n        expect(e.type).toBe('error');\n        expect(brain.talk).toHaveBeenCalledTimes(1);\n      }\n    });",
            "file": "unit/server/core/brain.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Ner",
            "suites": [
                "NER",
                "constructor()"
            ],
            "updatePoint": {
                "line": 5,
                "column": 39
            },
            "line": 5,
            "code": "    test('creates a new instance of Ner', () => {\n      const ner = new Ner();\n      expect(ner).toBeInstanceOf(Ner);\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs entities extractions",
            "suites": [
                "NER",
                "logExtraction()"
            ],
            "updatePoint": {
                "line": 11,
                "column": 35
            },
            "line": 11,
            "code": "    test('logs entities extractions', async () => {\n      console.log = jest.fn();\n      Ner.logExtraction([{\n        sourceText: 'shopping',\n        entity: 'list'\n      }, {\n        sourceText: 'red',\n        entity: 'color'\n      }]);\n      expect(console.log.mock.calls[0][1]).toBe('{ value: shopping, entity: list }');\n      expect(console.log.mock.calls[1][1]).toBe('{ value: red, entity: color }');\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds no entity",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 25,
                "column": 25
            },
            "line": 25,
            "code": "    test('finds no entity', async () => {\n      const ner = new Ner();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/leon/data/expressions/en.json'), {\n        query: 'Give me a random number',\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'randomnumber',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(entities).toEqual([]);\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extracts built-in entities",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 39,
                "column": 36
            },
            "line": 39,
            "code": "    test('extracts built-in entities', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/trend/data/expressions/en.json'), {\n        query: 'Give me the 2 latest GitHub trends',\n        entities: [{\n          sourceText: 2,\n          entity: 'number'\n        }],\n        classification: {\n          package: 'trend',\n          module: 'github',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(1);\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not support entity type",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 58,
                "column": 38
            },
            "line": 58,
            "code": "    test('does not support entity type', async () => {\n      const ner = new Ner();\n\n      try {\n        await ner.extractEntities('en', global.paths.expressions, {\n          query: 'Just a query',\n          entities: [],\n          classification: {\n            package: 'doesnotmatter',\n            module: 'unittest',\n            action: 'do_not_support_entity',\n            confidence: 1\n          }\n        });\n      } catch (e) {\n        expect(e.code).toBe('random_ner_type_not_supported');\n      }\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extracts trim custom entities with between conditions",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 76,
                "column": 63
            },
            "line": 76,
            "code": "    test('extracts trim custom entities with between conditions', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', path.join(__dirname, '../../../../packages/calendar/data/expressions/en.json'), {\n        query: 'Create a shopping list',\n        entities: [],\n        classification: {\n          package: 'calendar',\n          module: 'todolist',\n          action: 'create_list',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(1);\n      expect(entities[0].entity).toBe('list');\n      expect(entities[0].sourceText).toBe('shopping');\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extracts trim custom entities with before and after conditions",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 94,
                "column": 72
            },
            "line": 94,
            "code": "    test('extracts trim custom entities with before and after conditions', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', global.paths.expressions, {\n        query: 'Please whistle as a bird',\n        entities: [],\n        classification: {\n          package: 'doesnotmatter',\n          module: 'mockingbird',\n          action: 'test',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      console.log('entities', entities);\n      expect(entities.length).toBe(2);\n      expect(entities.map(e => e.entity)).toEqual(['start', 'animal']);\n      expect(entities.map(e => e.sourceText)).toEqual(['Please whistle as a', 'bird']);\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "extracts regex custom entities",
            "suites": [
                "NER",
                "extractEntities()"
            ],
            "updatePoint": {
                "line": 113,
                "column": 40
            },
            "line": 113,
            "code": "    test('extracts regex custom entities', async () => {\n      const ner = new Ner();\n      Ner.logExtraction = jest.fn();\n      const entities = await ner.extractEntities('en', global.paths.expressions, {\n        query: 'I love the color blue, white and red',\n        entities: [],\n        classification: {\n          package: 'preference',\n          module: 'color',\n          action: 'run',\n          confidence: 1\n        }\n      });\n      expect(Ner.logExtraction).toHaveBeenCalledTimes(1);\n      expect(entities.length).toBe(3);\n      expect(entities.map(e => e.entity)).toEqual(['color', 'color', 'color']);\n      expect(entities.map(e => e.sourceText)).toEqual(['blue', 'white', 'red']);\n    });",
            "file": "unit/server/core/ner.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Nlu",
            "suites": [
                "NLU",
                "constructor()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 39
            },
            "line": 4,
            "code": "    test('creates a new instance of Nlu', () => {\n      const nlu = new Nlu();\n      expect(nlu).toBeInstanceOf(Nlu);\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns warning NLP model does not exist",
            "suites": [
                "NLU",
                "loadModel()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 50
            },
            "line": 10,
            "code": "    test('returns warning NLP model does not exist', async () => {\n      const nlu = new Nlu();\n\n      try {\n        await nlu.loadModel('ghost-model.nlp');\n      } catch (e) {\n        expect(e.type).toBe('warning');\n      }\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "rejects because of a broken NLP model",
            "suites": [
                "NLU",
                "loadModel()"
            ],
            "updatePoint": {
                "line": 19,
                "column": 47
            },
            "line": 19,
            "code": "    test('rejects because of a broken NLP model', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n\n      try {\n        await nlu.loadModel(global.paths.broken_nlp_model);\n      } catch (e) {\n        expect(e.type).toBe('error');\n      }\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads the NLP model",
            "suites": [
                "NLU",
                "loadModel()"
            ],
            "updatePoint": {
                "line": 35,
                "column": 29
            },
            "line": 35,
            "code": "    test('loads the NLP model', async () => {\n      const nlu = new Nlu();\n      await nlu.loadModel(global.paths.nlp_model);\n      expect(nlu.nlp.nluManager.domainManagers).not.toBeEmpty();\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns false because the NLP model is empty",
            "suites": [
                "NLU",
                "process()"
            ],
            "updatePoint": {
                "line": 43,
                "column": 54
            },
            "line": 43,
            "code": "    test('returns false because the NLP model is empty', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      expect(await nlu.process('Hello')).toBeFalsy();\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns false because of query not found",
            "suites": [
                "NLU",
                "process()"
            ],
            "updatePoint": {
                "line": 54,
                "column": 50
            },
            "line": 54,
            "code": "    test('returns false because of query not found', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        talk: jest.fn(),\n        wernicke: jest.fn(),\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      await nlu.loadModel(global.paths.nlp_model);\n      expect(await nlu.process('Unknown query')).toBeFalsy();\n      expect(nlu.brain.talk).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "executes brain with the fallback value (object)",
            "suites": [
                "NLU",
                "process()"
            ],
            "updatePoint": {
                "line": 67,
                "column": 57
            },
            "line": 67,
            "code": "    test('executes brain with the fallback value (object)', async () => {\n      const query = 'Thisisaqueryexampletotestfallbacks';\n      const fallbackObj = {\n        query,\n        entities: [],\n        classification: {\n          package: 'leon',\n          module: 'randomnumber',\n          action: 'run'\n        }\n      };\n      const nlu = new Nlu();\n      nlu.brain = {\n        execute: jest.fn()\n      };\n      Nlu.fallback = jest.fn(() => fallbackObj);\n      await nlu.loadModel(global.paths.nlp_model);\n      expect(await nlu.process(query)).toBeTruthy();\n      expect(nlu.brain.execute.mock.calls[0][0]).toBe(fallbackObj);\n      Nlu.fallback = nluFallbackTmp; // Need to give back the real fallback method\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true thanks to query found",
            "suites": [
                "NLU",
                "process()"
            ],
            "updatePoint": {
                "line": 88,
                "column": 44
            },
            "line": 88,
            "code": "    test('returns true thanks to query found', async () => {\n      const nlu = new Nlu();\n      nlu.brain = {\n        execute: jest.fn()\n      };\n      await nlu.loadModel(global.paths.nlp_model);\n      expect(await nlu.process('Hello')).toBeTruthy();\n      expect(nlu.brain.execute).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns false because there is no fallback matching the query",
            "suites": [
                "NLU",
                "fallback()"
            ],
            "updatePoint": {
                "line": 99,
                "column": 71
            },
            "line": 99,
            "code": "    test('returns false because there is no fallback matching the query', () => {\n      expect(Nlu.fallback({\n        query: 'This is a query example to test fallbacks'\n      }, [])).toBeFalsy();\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns fallback injected object",
            "suites": [
                "NLU",
                "fallback()"
            ],
            "updatePoint": {
                "line": 104,
                "column": 42
            },
            "line": 104,
            "code": "    test('returns fallback injected object', () => {\n      const obj = {\n        query: 'This is a query example to test fallbacks',\n        classification: {}\n      };\n      expect(Nlu.fallback(obj, [{\n        words: ['query', 'example', 'test', 'fallbacks'],\n        package: 'fake-pkg',\n        module: 'fake-module',\n        action: 'fake-action'\n      }]).classification).toContainEntries([['package', 'fake-pkg'], ['module', 'fake-module'], ['action', 'fake-action'], ['confidence', 1]]);\n    });",
            "file": "unit/server/core/nlu.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Server",
            "suites": [
                "server",
                "constructor()"
            ],
            "updatePoint": {
                "line": 6,
                "column": 42
            },
            "line": 6,
            "code": "    test('creates a new instance of Server', () => {\n      const server = new Server();\n      expect(server).toBeInstanceOf(Server);\n      expect(server.brain).toBeEmpty();\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses default language if there is an unsupported one",
            "suites": [
                "server",
                "init()"
            ],
            "updatePoint": {
                "line": 13,
                "column": 62
            },
            "line": 13,
            "code": "    test('uses default language if there is an unsupported one', async () => {\n      const server = new Server();\n      server.bootstrap = jest.fn(); // Need to mock bootstrap method to not continue the init\n\n      process.env.LEON_LANG = 'fake-lang';\n      await server.init();\n      expect(process.env.LEON_LANG).toBe('en-US');\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes HTTP server",
            "suites": [
                "server",
                "bootstrap()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 33
            },
            "line": 23,
            "code": "    test('initializes HTTP server', async () => {\n      const server = new Server();\n      await server.bootstrap();\n      expect(server.httpServer).not.toBeEmpty();\n      await server.httpServer.close();\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listens port already in use",
            "suites": [
                "server",
                "listen()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 37
            },
            "line": 31,
            "code": "    test('listens port already in use', async () => {\n      const fakeServer = net.createServer();\n      fakeServer.once('error', err => {\n        expect(err.code).toBe('EADDRINUSE');\n        fakeServer.close();\n      });\n      const server = new Server();\n      await server.init();\n      fakeServer.listen(process.env.LEON_PORT);\n      await server.httpServer.close();\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "listens for request",
            "suites": [
                "server",
                "listen()"
            ],
            "updatePoint": {
                "line": 42,
                "column": 29
            },
            "line": 42,
            "code": "    test('listens for request', async () => {\n      const server = new Server();\n      console.log = jest.fn();\n      await server.listen(process.env.LEON_PORT);\n      expect(console.log.mock.calls[0][1].indexOf(process.env.LEON_PORT)).not.toBe(-1);\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes main nodes",
            "suites": [
                "server",
                "connection()"
            ],
            "updatePoint": {
                "line": 50,
                "column": 32
            },
            "line": 50,
            "code": "    test('initializes main nodes', async done => {\n      const server = new Server();\n      await server.init(); // Mock the WebSocket with an EventEmitter\n\n      const ee = new EventEmitter();\n      ee.broadcast = {\n        emit: jest.fn()\n      };\n      console.log = jest.fn();\n      await server.connection(ee);\n      expect(console.log.mock.calls[0][1]).toBe('CLIENT');\n      console.log = jest.fn();\n      ee.emit('init', 'hotword-node');\n      console.log = jest.fn();\n      ee.emit('hotword-detected', {});\n      expect(console.log.mock.calls[0][1]).toBe('SOCKET');\n      console.log = jest.fn();\n      ee.emit('init', 'jest');\n      expect(server.brain).not.toBeEmpty();\n      expect(server.nlu).not.toBeEmpty();\n      expect(server.asr).not.toBeEmpty();\n      setTimeout(() => {\n        ee.emit('query', {\n          client: 'jest',\n          value: 'Hello'\n        });\n      }, 50);\n      setTimeout(() => {\n        expect(console.log.mock.calls[22][1]).toBe('Query found');\n        console.log = jest.fn();\n      }, 100);\n      setTimeout(() => {\n        ee.emit('recognize', 'blob');\n      }, 150);\n      setTimeout(async () => {\n        expect(console.log.mock.calls[0][1]).toBe('ASR');\n        console.log = jest.fn();\n        await server.httpServer.close();\n        done();\n      }, 200);\n    });",
            "file": "unit/server/core/server.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Synchronizer",
            "suites": [
                "synchronizer",
                "constructor()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 48
            },
            "line": 4,
            "code": "    test('creates a new instance of Synchronizer', () => {\n      const sync = new Synchronizer({}, {}, {});\n      expect(sync).toBeInstanceOf(Synchronizer);\n    });",
            "file": "unit/server/core/synchronizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "executes direct synchronization method",
            "suites": [
                "synchronizer",
                "synchronize()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 48
            },
            "line": 10,
            "code": "    test('executes direct synchronization method', () => {\n      const brain = {\n        socket: {}\n      };\n      brain.talk = brain.socket.emit = brain.wernicke = jest.fn();\n      const sync = new Synchronizer(brain, {}, {\n        method: 'direct'\n      });\n      sync.direct = jest.fn();\n      sync.synchronize(() => {\n        expect(sync.direct).toHaveBeenCalledTimes(1);\n      });\n    });",
            "file": "unit/server/core/synchronizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "executes Google Drive synchronization method",
            "suites": [
                "synchronizer",
                "synchronize()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 54
            },
            "line": 23,
            "code": "    test('executes Google Drive synchronization method', () => {\n      const brain = {\n        socket: {}\n      };\n      brain.talk = brain.socket.emit = brain.wernicke = jest.fn();\n      const sync = new Synchronizer(brain, {}, {\n        method: 'google-drive'\n      });\n      sync.googleDrive = jest.fn();\n      sync.synchronize(() => {\n        expect(sync.googleDrive).toHaveBeenCalledTimes(1);\n      });\n    });",
            "file": "unit/server/core/synchronizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "emits the download",
            "suites": [
                "synchronizer",
                "direct()"
            ],
            "updatePoint": {
                "line": 38,
                "column": 28
            },
            "line": 38,
            "code": "    test('emits the download', () => {\n      const brain = {\n        socket: {\n          emit: jest.fn()\n        }\n      };\n      const sync = new Synchronizer(brain, {}, {});\n      sync.direct();\n      expect(sync.brain.socket.emit.mock.calls[0][0]).toBe('download');\n    });",
            "file": "unit/server/core/synchronizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns date time with UTC",
            "suites": [
                "date helper",
                "dateTime()"
            ],
            "updatePoint": {
                "line": 5,
                "column": 36
            },
            "line": 5,
            "code": "    test('returns date time with UTC', () => {\n      expect(date.dateTime()).toBe(moment().tz(global.date.time_zone).format());\n    });",
            "file": "unit/server/helpers/date.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns time zone",
            "suites": [
                "date helper",
                "timeZone()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 27
            },
            "line": 10,
            "code": "    test('returns time zone', () => {\n      expect(date.timeZone()).toBe(global.date.time_zone);\n    });",
            "file": "unit/server/helpers/date.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "starts spinner",
            "suites": [
                "loader helper",
                "start()"
            ],
            "updatePoint": {
                "line": 5,
                "column": 24
            },
            "line": 5,
            "code": "    test('starts spinner', () => {\n      expect(loader.start()).toBeObject();\n      jest.runTimersToTime(60000);\n      expect(setInterval).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/helpers/loader.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stops spinner",
            "suites": [
                "loader helper",
                "stop()"
            ],
            "updatePoint": {
                "line": 12,
                "column": 23
            },
            "line": 12,
            "code": "    test('stops spinner', () => {\n      expect(loader.stop()).toBeObject();\n    });",
            "file": "unit/server/helpers/loader.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs success",
            "suites": [
                "log helper",
                "success()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 22
            },
            "line": 4,
            "code": "    test('logs success', () => {\n      console.log = jest.fn();\n      log.success('This is a success');\n      expect(console.log.mock.calls[0][1]).toBe('This is a success');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs info",
            "suites": [
                "log helper",
                "info()"
            ],
            "updatePoint": {
                "line": 11,
                "column": 19
            },
            "line": 11,
            "code": "    test('logs info', () => {\n      console.info = jest.fn();\n      log.info('This is an info');\n      expect(console.info.mock.calls[0][1]).toBe('This is an info');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs error",
            "suites": [
                "log helper",
                "error()"
            ],
            "updatePoint": {
                "line": 18,
                "column": 20
            },
            "line": 18,
            "code": "    test('logs error', () => {\n      console.error = jest.fn();\n      log.error('This is an error');\n      expect(console.error.mock.calls[0][1]).toBe('This is an error');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs warning",
            "suites": [
                "log helper",
                "warning()"
            ],
            "updatePoint": {
                "line": 25,
                "column": 22
            },
            "line": 25,
            "code": "    test('logs warning', () => {\n      console.warn = jest.fn();\n      log.warning('This is a warning');\n      expect(console.warn.mock.calls[0][1]).toBe('This is a warning');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs title",
            "suites": [
                "log helper",
                "title()"
            ],
            "updatePoint": {
                "line": 32,
                "column": 20
            },
            "line": 32,
            "code": "    test('logs title', () => {\n      console.log = jest.fn();\n      log.title('This is a title');\n      expect(console.log.mock.calls[0][1]).toBe('THIS IS A TITLE');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "logs default",
            "suites": [
                "log helper",
                "default()"
            ],
            "updatePoint": {
                "line": 39,
                "column": 22
            },
            "line": 39,
            "code": "    test('logs default', () => {\n      console.log = jest.fn();\n      log.default('This is a default');\n      expect(console.log.mock.calls[0][1]).toBe('This is a default');\n    });",
            "file": "unit/server/helpers/log.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns information about the OS",
            "suites": [
                "OS helper",
                "get()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 42
            },
            "line": 4,
            "code": "    test('returns information about the OS', () => {\n      const info = os.get();\n      expect(info.type).toBeOneOf(['windows', 'linux', 'macos']);\n      expect(info.name).toBeOneOf(['Windows', 'Linux', 'macOS']);\n    });",
            "file": "unit/server/helpers/os.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns information for Windows",
            "suites": [
                "OS helper",
                "get()"
            ],
            "updatePoint": {
                "line": 9,
                "column": 41
            },
            "line": 9,
            "code": "    test('returns information for Windows', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Windows_NT');\n      expect(os.get()).toEqual({\n        name: 'Windows',\n        type: 'windows'\n      });\n    });",
            "file": "unit/server/helpers/os.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns information for Linux",
            "suites": [
                "OS helper",
                "get()"
            ],
            "updatePoint": {
                "line": 18,
                "column": 39
            },
            "line": 18,
            "code": "    test('returns information for Linux', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Linux');\n      expect(os.get()).toEqual({\n        name: 'Linux',\n        type: 'linux'\n      });\n    });",
            "file": "unit/server/helpers/os.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns information for macOS",
            "suites": [
                "OS helper",
                "get()"
            ],
            "updatePoint": {
                "line": 27,
                "column": 39
            },
            "line": 27,
            "code": "    test('returns information for macOS', () => {\n      jest.unmock('os');\n      const o = jest.requireActual('os');\n      o.type = jest.fn(() => 'Darwin');\n      expect(os.get()).toEqual({\n        name: 'macOS',\n        type: 'macos'\n      });\n    });",
            "file": "unit/server/helpers/os.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns the number of cores on the machine",
            "suites": [
                "OS helper",
                "cpus()"
            ],
            "updatePoint": {
                "line": 38,
                "column": 52
            },
            "line": 38,
            "code": "    test('returns the number of cores on the machine', () => {\n      expect(os.cpus()).toBeArray();\n      expect(os.cpus()[0]).toContainKeys(['model', 'speed', 'times']);\n    });",
            "file": "unit/server/helpers/os.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaces substring to a string defined in an object",
            "suites": [
                "string helper",
                "pnr()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 61
            },
            "line": 4,
            "code": "    test('replaces substring to a string defined in an object', () => {\n      expect(string.pnr('Hello %name%', {\n        '%name%': 'Leon'\n      })).toBe('Hello Leon');\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "transforms first letter to uppercase",
            "suites": [
                "string helper",
                "ucfirst()"
            ],
            "updatePoint": {
                "line": 11,
                "column": 46
            },
            "line": 11,
            "code": "    test('transforms first letter to uppercase', () => {\n      expect(string.ucfirst('leon')).toBe('Leon');\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "transforms snake_case string to PascalCase",
            "suites": [
                "string helper",
                "snakeToPascalCase()"
            ],
            "updatePoint": {
                "line": 16,
                "column": 52
            },
            "line": 16,
            "code": "    test('transforms snake_case string to PascalCase', () => {\n      expect(string.snakeToPascalCase('leon')).toBe('Leon');\n      expect(string.snakeToPascalCase('this_is_leon')).toBe('ThisIsLeon');\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "generates a random string with a length defined by a given number",
            "suites": [
                "string helper",
                "random()"
            ],
            "updatePoint": {
                "line": 22,
                "column": 75
            },
            "line": 22,
            "code": "    test('generates a random string with a length defined by a given number', () => {\n      const s = string.random(6);\n      expect(typeof s).toBe('string');\n      expect(s.length).toBe(6);\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes accents",
            "suites": [
                "string helper",
                "removeAccents()"
            ],
            "updatePoint": {
                "line": 29,
                "column": 25
            },
            "line": 29,
            "code": "    test('removes accents', () => {\n      expect(string.removeAccents('àâèéêëîïôöûüùÛÜç')).toBe('aaeeeeiioouuuUUc');\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes end-punctuation",
            "suites": [
                "string helper",
                "removeEndPunctuation()"
            ],
            "updatePoint": {
                "line": 34,
                "column": 33
            },
            "line": 34,
            "code": "    test('removes end-punctuation', () => {\n      expect(string.removeEndPunctuation('Who are you?')).toBe('Who are you');\n      expect(string.removeEndPunctuation('This is great.')).toBe('This is great');\n      expect(string.removeEndPunctuation('This string has no punctuation')).toBe('This string has no punctuation');\n    });",
            "file": "unit/server/helpers/string.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error cannot find model",
            "suites": [
                "DeepSpeech STT parser",
                "init()"
            ],
            "updatePoint": {
                "line": 7,
                "column": 43
            },
            "line": 7,
            "code": "      test('returns error cannot find model', () => {\n        expect(parser.init({\n          model: 'fake-model-path'\n        })).toBeFalsy();\n      });",
            "file": "unit/server/stt/deepspeech/parser.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error cannot find scorer",
            "suites": [
                "DeepSpeech STT parser",
                "init()"
            ],
            "updatePoint": {
                "line": 12,
                "column": 44
            },
            "line": 12,
            "code": "      test('returns error cannot find scorer', () => {\n        expect(parser.init({\n          model: `${global.paths.root}/bin/deepspeech/deepspeech.pbmm`,\n          scorer: 'fake-scorer-path'\n        })).toBeFalsy();\n      });",
            "file": "unit/server/stt/deepspeech/parser.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true because all of the paths are good",
            "suites": [
                "DeepSpeech STT parser",
                "init()"
            ],
            "updatePoint": {
                "line": 18,
                "column": 58
            },
            "line": 18,
            "code": "      test('returns true because all of the paths are good', () => {\n        expect(parser.init({\n          model: `${global.paths.root}/bin/deepspeech/deepspeech.pbmm`,\n          scorer: `${global.paths.root}/bin/deepspeech/deepspeech.scorer`\n        })).toBeTruthy();\n      });",
            "file": "unit/server/stt/deepspeech/parser.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "displays warning because the sample rate is lower than the desired sample rate",
            "suites": [
                "DeepSpeech STT parser",
                "parser()"
            ],
            "updatePoint": {
                "line": 28,
                "column": 88
            },
            "line": 28,
            "code": "    test('displays warning because the sample rate is lower than the desired sample rate', () => {\n      console.warn = jest.fn();\n      parser.parse(fs.readFileSync(`${global.paths.wave_speech_8}`));\n      expect(console.warn).toBeCalled();\n    });",
            "file": "unit/server/stt/deepspeech/parser.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true",
            "suites": [
                "DeepSpeech STT parser",
                "parser()"
            ],
            "updatePoint": {
                "line": 33,
                "column": 22
            },
            "line": 33,
            "code": "    test('returns true', () => {\n      expect(parser.parse(fs.readFileSync(`${global.paths.wave_speech}`))).toBeTruthy();\n    });",
            "file": "unit/server/stt/deepspeech/parser.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of Stt",
            "suites": [
                "STT",
                "constructor()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 39
            },
            "line": 4,
            "code": "    test('creates a new instance of Stt', () => {\n      const stt = new Stt({}, 'deepspeech');\n      expect(stt).toBeInstanceOf(Stt);\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error provider does not exist or not yet supported",
            "suites": [
                "STT",
                "init()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 68
            },
            "line": 10,
            "code": "    test('returns error provider does not exist or not yet supported', () => {\n      const stt = new Stt({}, 'fake-provider');\n      expect(stt.init()).toBeFalsy();\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes the STT parser",
            "suites": [
                "STT",
                "init()"
            ],
            "updatePoint": {
                "line": 14,
                "column": 36
            },
            "line": 14,
            "code": "    test('initializes the STT parser', () => {\n      const stt = new Stt({}, 'deepspeech');\n      expect(stt.init()).toBeTruthy();\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards string output to the client",
            "suites": [
                "STT",
                "forward()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 46
            },
            "line": 20,
            "code": "    test('forwards string output to the client', () => {\n      const stt = new Stt({}, '');\n      stt.socket = {\n        emit: jest.fn()\n      };\n      stt.forward('Hello');\n      expect(stt.socket.emit.mock.calls[0][0]).toBe('recognized');\n      expect(stt.socket.emit.mock.calls[0][1]).toBe('Hello');\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error file does not exist",
            "suites": [
                "STT",
                "parse()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 43
            },
            "line": 31,
            "code": "    test('returns error file does not exist', () => {\n      const stt = new Stt({}, '');\n      expect(stt.parse('fake-file.wav')).toBeFalsy();\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses WAVE file via the chosen parser",
            "suites": [
                "STT",
                "parse()"
            ],
            "updatePoint": {
                "line": 35,
                "column": 48
            },
            "line": 35,
            "code": "    test('parses WAVE file via the chosen parser', () => {\n      const stt = new Stt({}, '');\n      expect(stt.parse(global.paths.wave_speech)).toBeTruthy();\n    });",
            "file": "unit/server/stt/stt.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true",
            "suites": [
                "Flite TTS synthesizer",
                "init()"
            ],
            "updatePoint": {
                "line": 7,
                "column": 24
            },
            "line": 7,
            "code": "      test('returns true', () => {\n        expect(synthesizer.init()).toBeTruthy();\n      });",
            "file": "unit/server/tts/flite/synthesizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns warning message to say only \"en-US\" language is accepted",
            "suites": [
                "Flite TTS synthesizer",
                "init()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 76
            },
            "line": 10,
            "code": "      test('returns warning message to say only \"en-US\" language is accepted', () => {\n        process.env.LEON_LANG = 'fake-lang';\n        console.warn = jest.fn();\n        synthesizer.init();\n        expect(console.warn).toBeCalled();\n      });",
            "file": "unit/server/tts/flite/synthesizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "saves string to audio file",
            "suites": [
                "Flite TTS synthesizer",
                "save()"
            ],
            "updatePoint": {
                "line": 18,
                "column": 38
            },
            "line": 18,
            "code": "      test('saves string to audio file', () => {\n        const em = new events.EventEmitter();\n        synthesizer.init();\n        synthesizer.save('Hello world', em, file => {\n          expect(fs.readFileSync(file)).toBeTruthy();\n          fs.unlinkSync(file);\n        });\n      });",
            "file": "unit/server/tts/flite/synthesizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "get file duration",
            "suites": [
                "Flite TTS synthesizer",
                "save()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 29
            },
            "line": 26,
            "code": "      test('get file duration', done => {\n        const em = new events.EventEmitter();\n        const spy = jest.spyOn(em, 'emit');\n        synthesizer.save('Hello world', em, file => {\n          expect(spy).toHaveBeenCalledTimes(1);\n          expect(spy.mock.calls[0][0]).toBe('saved');\n          expect(spy.mock.calls[0][1]).toBe(975);\n          fs.unlinkSync(file);\n          done();\n        });\n      });",
            "file": "unit/server/tts/flite/synthesizer.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates a new instance of tts",
            "suites": [
                "TTS",
                "constructor()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 39
            },
            "line": 4,
            "code": "    test('creates a new instance of tts', () => {\n      const tts = new Tts({}, 'flite');\n      expect(tts).toBeInstanceOf(Tts);\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns error provider does not exist or not yet supported",
            "suites": [
                "TTS",
                "init()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 68
            },
            "line": 10,
            "code": "    test('returns error provider does not exist or not yet supported', () => {\n      const tts = new Tts({}, 'fake-provider');\n      expect(tts.init()).toBeFalsy();\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "initializes the TTS synthesizer",
            "suites": [
                "TTS",
                "init()"
            ],
            "updatePoint": {
                "line": 14,
                "column": 41
            },
            "line": 14,
            "code": "    test('initializes the TTS synthesizer', () => {\n      const tts = new Tts({}, 'flite');\n      expect(tts.init()).toBeTruthy();\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards buffer audio file to the client",
            "suites": [
                "TTS",
                "forward()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 50
            },
            "line": 20,
            "code": "    test('forwards buffer audio file to the client', () => {\n      const tts = new Tts({}, '');\n      tts.synthesizer = {\n        default: {\n          save: jest.fn()\n        }\n      };\n      tts.socket = {\n        emit: jest.fn()\n      };\n      tts.forward({\n        text: 'Hello',\n        isFinalAnswer: true\n      });\n      expect(tts.synthesizer.default.save.mock.calls[0][0]).toBe('Hello');\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shifts the queue",
            "suites": [
                "TTS",
                "onSaved()"
            ],
            "updatePoint": {
                "line": 38,
                "column": 26
            },
            "line": 38,
            "code": "    test('shifts the queue', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.speeches.push('Hello', 'Hello again');\n      setTimeout(() => {\n        tts.em.emit('saved', 300);\n      }, 300);\n      expect(tts.speeches.length).toBe(2);\n      await tts.onSaved();\n      expect(tts.forward).toHaveBeenCalledTimes(1);\n      expect(tts.speeches.length).toBe(1);\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fixes Flite ",
            "suites": [
                "TTS",
                "add()"
            ],
            "updatePoint": {
                "line": 52,
                "column": 22
            },
            "line": 52,
            "code": "    test('fixes Flite ', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      expect(tts.add('Hello', true)[0].text.substr('Hello'.length)).toBe(' ');\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds speech to the queue ",
            "suites": [
                "TTS",
                "add()"
            ],
            "updatePoint": {
                "line": 57,
                "column": 35
            },
            "line": 57,
            "code": "    test('adds speech to the queue ', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.speeches.push('Hello');\n      expect(tts.add('Hello again').length).toBe(2);\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "forwards speech latest speech",
            "suites": [
                "TTS",
                "add()"
            ],
            "updatePoint": {
                "line": 63,
                "column": 39
            },
            "line": 63,
            "code": "    test('forwards speech latest speech', async () => {\n      const tts = new Tts({}, 'flite');\n      tts.forward = jest.fn();\n      tts.add('Hello');\n      expect(tts.forward).toHaveBeenCalledTimes(1);\n    });",
            "file": "unit/server/tts/tts.spec.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "leon-ai__leon.svg"
}