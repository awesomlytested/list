{"repo":"localForage/localForage","url":"https://github.com/localForage/localForage","branch":"master","configs":[{"package":"localforage","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"has Promises available","suites":["localForage API"],"updatePoint":{"line":12,"column":28,"index":737},"line":12,"code":"  it('has Promises available', function () {\n    expect(Promise).to.be.a('function');\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"errors when a requested driver is not found [callback]","suites":["localForage"],"updatePoint":{"line":35,"column":60,"index":1894},"line":35,"code":"  it('errors when a requested driver is not found [callback]', function (done) {\n    localforage.getDriver('UnknownDriver', null, function (error) {\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('Driver not found.');\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"errors when a requested driver is not found [promise]","suites":["localForage"],"updatePoint":{"line":42,"column":59,"index":2163},"line":42,"code":"  it('errors when a requested driver is not found [promise]', function (done) {\n    localforage.getDriver('UnknownDriver').then(null, function (error) {\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('Driver not found.');\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"retrieves the serializer [callback]","suites":["localForage"],"updatePoint":{"line":49,"column":41,"index":2419},"line":49,"code":"  it('retrieves the serializer [callback]', function (done) {\n    localforage.getSerializer(function (serializer) {\n      expect(serializer).to.be.an('object');\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"retrieves the serializer [promise]","suites":["localForage"],"updatePoint":{"line":55,"column":40,"index":2607},"line":55,"code":"  it('retrieves the serializer [promise]', function (done) {\n    var serializerPromise = localforage.getSerializer();\n    expect(serializerPromise).to.be.an('object');\n    expect(serializerPromise.then).to.be.a('function');\n    serializerPromise.then(function (serializer) {\n      expect(serializer).to.be.an('object');\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"does not support object parameter to setDriver","suites":["localForage"],"updatePoint":{"line":64,"column":52,"index":2967},"line":64,"code":"  it('does not support object parameter to setDriver', function (done) {\n    var driverPreferedOrder = {\n      '0': localforage.INDEXEDDB,\n      '1': localforage.WEBSQL,\n      '2': localforage.LOCALSTORAGE,\n      length: 3\n    };\n    localforage.setDriver(driverPreferedOrder).then(null, function (error) {\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"skips drivers that fail to initilize","suites":["localForage"],"updatePoint":{"line":77,"column":42,"index":3402},"line":77,"code":"  it('skips drivers that fail to initilize', function (done) {\n    var failingStorageDriver = function () {\n      function driverDummyMethod() {\n        return Promise.reject(new Error('Driver Method Failed.'));\n      }\n      return {\n        _driver: 'failingStorageDriver',\n        _initStorage: function _initStorage() {\n          return Promise.reject(new Error('Driver Failed to Initialize.'));\n        },\n        iterate: driverDummyMethod,\n        getItem: driverDummyMethod,\n        setItem: driverDummyMethod,\n        removeItem: driverDummyMethod,\n        clear: driverDummyMethod,\n        length: driverDummyMethod,\n        key: driverDummyMethod,\n        keys: driverDummyMethod\n      };\n    }();\n    var driverPreferedOrder = [failingStorageDriver._driver, localforage.INDEXEDDB, localforage.WEBSQL, localforage.LOCALSTORAGE];\n    localforage.defineDriver(failingStorageDriver).then(function () {\n      return localforage.setDriver(driverPreferedOrder);\n    }).then(function () {\n      return localforage.ready();\n    }).then(function () {\n      expect(localforage.driver()).to.be(appropriateDriver);\n      done();\n    });\n  });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"does not log unnecessary messages","suites":["localForage","createInstance()"],"updatePoint":{"line":123,"column":41,"index":4966},"line":123,"code":"    it('does not log unnecessary messages', function () {\n      var oldLogCount = console.info.logs.length;\n      var localforage2 = localforage.createInstance();\n      var localforage3 = localforage.createInstance();\n      return Promise.all([localforage.ready(), localforage2.ready(), localforage3.ready()]).then(function () {\n        expect(console.info.logs.length).to.be(oldLogCount);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"has a localStorage API","suites":["localForage","createInstance()"],"updatePoint":{"line":151,"column":30,"index":5899},"line":151,"code":"    it('has a localStorage API', function () {\n      expect(localforage.getItem).to.be.a('function');\n      expect(localforage.setItem).to.be.a('function');\n      expect(localforage.clear).to.be.a('function');\n      expect(localforage.length).to.be.a('function');\n      expect(localforage.removeItem).to.be.a('function');\n      expect(localforage.key).to.be.a('function');\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"has the localForage API","suites":["localForage","createInstance()"],"updatePoint":{"line":159,"column":31,"index":6281},"line":159,"code":"    it('has the localForage API', function () {\n      expect(localforage._initStorage).to.be.a('function');\n      expect(localforage.config).to.be.a('function');\n      expect(localforage.defineDriver).to.be.a('function');\n      expect(localforage.driver).to.be.a('function');\n      expect(localforage.supports).to.be.a('function');\n      expect(localforage.iterate).to.be.a('function');\n      expect(localforage.getItem).to.be.a('function');\n      expect(localforage.setItem).to.be.a('function');\n      expect(localforage.clear).to.be.a('function');\n      expect(localforage.length).to.be.a('function');\n      expect(localforage.removeItem).to.be.a('function');\n      expect(localforage.key).to.be.a('function');\n      expect(localforage.getDriver).to.be.a('function');\n      expect(localforage.setDriver).to.be.a('function');\n      expect(localforage.ready).to.be.a('function');\n      expect(localforage.createInstance).to.be.a('function');\n      expect(localforage.getSerializer).to.be.a('function');\n      expect(localforage.dropInstance).to.be.a('function');\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"sets the right database driver","suites":["localForage","createInstance()"],"updatePoint":{"line":185,"column":38,"index":7609},"line":185,"code":"    it('sets the right database driver', function () {\n      expect(localforage.driver() === driverName);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"has an empty length by default","suites":["localForage","createInstance()"],"updatePoint":{"line":188,"column":38,"index":7723},"line":188,"code":"    it('has an empty length by default', function (done) {\n      localforage.length(function (err, length) {\n        expect(length).to.be(0);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"not check for non Blob","suites":["Blob support"],"updatePoint":{"line":213,"column":34,"index":8444},"line":213,"code":"        it('not check for non Blob', function (done) {\n          localforage.setItem('key', {}).then(function () {\n            expect(called).to.be(1);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"check for Blob","suites":["Blob support"],"updatePoint":{"line":221,"column":26,"index":8702},"line":221,"code":"        it('check for Blob', function (done) {\n          localforage.setItem('key', blob).then(function () {\n            expect(called).to.be.above(1);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"check for Blob once","suites":["Blob support"],"updatePoint":{"line":229,"column":31,"index":8973},"line":229,"code":"        it('check for Blob once', function (done) {\n          localforage.setItem('key', blob).then(function () {\n            expect(called).to.be(1);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"retrieves an item from the storage","suites":["recover (reconnect) from IDBDatabase InvalidStateError"],"updatePoint":{"line":250,"column":46,"index":9843},"line":250,"code":"        it('retrieves an item from the storage', function (done) {\n          localforage.getItem('key').then(function (value) {\n            expect(value).to.be('value1');\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"retrieves more than one items from the storage","suites":["recover (reconnect) from IDBDatabase InvalidStateError"],"updatePoint":{"line":258,"column":58,"index":10140},"line":258,"code":"        it('retrieves more than one items from the storage', function (done) {\n          Promise.all([localforage.getItem('key1'), localforage.getItem('key2'), localforage.getItem('key3')]).then(function (values) {\n            expect(values).to.eql(['value1', 'value2', 'value3']);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"stores and retrieves an item from the storage","suites":["recover (reconnect) from IDBDatabase InvalidStateError"],"updatePoint":{"line":266,"column":57,"index":10535},"line":266,"code":"        it('stores and retrieves an item from the storage', function (done) {\n          localforage.setItem('key', 'value1b').then(function () {\n            return localforage.getItem('key');\n          }).then(function (value) {\n            expect(value).to.be('value1b');\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"stores and retrieves more than one items from the storage","suites":["recover (reconnect) from IDBDatabase InvalidStateError"],"updatePoint":{"line":276,"column":69,"index":10934},"line":276,"code":"        it('stores and retrieves more than one items from the storage', function (done) {\n          Promise.all([localforage.setItem('key1', 'value1b'), localforage.setItem('key2', 'value2b'), localforage.setItem('key3', 'value3b')]).then(function () {\n            return Promise.all([localforage.getItem('key1'), localforage.getItem('key2'), localforage.getItem('key3')]);\n          }).then(function (values) {\n            expect(values).to.eql(['value1b', 'value2b', 'value3b']);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should retry setItem","suites":["on QUOTA ERROR"],"updatePoint":{"line":320,"column":32,"index":12578},"line":320,"code":"        it('should retry setItem', function (done) {\n          localforage.setItem('key', {}).then(function () {\n            expect(called).to.be(1);\n            done();\n          }, function (error) {\n            done(error || 'error');\n          });\n        });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should iterate [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":333,"column":33,"index":12957},"line":333,"code":"    it('should iterate [callback]', function (done) {\n      localforage.setItem('officeX', 'InitechX', function (err, setValue) {\n        expect(setValue).to.be('InitechX');\n        localforage.getItem('officeX', function (err, value) {\n          expect(value).to.be(setValue);\n          localforage.setItem('officeY', 'InitechY', function (err, setValue) {\n            expect(setValue).to.be('InitechY');\n            localforage.getItem('officeY', function (err, value) {\n              expect(value).to.be(setValue);\n              var accumulator = {};\n              var iterationNumbers = [];\n              localforage.iterate(function (value, key, iterationNumber) {\n                accumulator[key] = value;\n                iterationNumbers.push(iterationNumber);\n              }, function () {\n                try {\n                  expect(accumulator.officeX).to.be('InitechX');\n                  expect(accumulator.officeY).to.be('InitechY');\n                  expect(iterationNumbers).to.eql([1, 2]);\n                  done();\n                } catch (e) {\n                  done(e);\n                }\n              });\n            });\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should iterate [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":362,"column":32,"index":14145},"line":362,"code":"    it('should iterate [promise]', function () {\n      var accumulator = {};\n      var iterationNumbers = [];\n      return localforage.setItem('officeX', 'InitechX').then(function (setValue) {\n        expect(setValue).to.be('InitechX');\n        return localforage.getItem('officeX');\n      }).then(function (value) {\n        expect(value).to.be('InitechX');\n        return localforage.setItem('officeY', 'InitechY');\n      }).then(function (setValue) {\n        expect(setValue).to.be('InitechY');\n        return localforage.getItem('officeY');\n      }).then(function (value) {\n        expect(value).to.be('InitechY');\n        return localforage.iterate(function (value, key, iterationNumber) {\n          accumulator[key] = value;\n          iterationNumbers.push(iterationNumber);\n        });\n      }).then(function () {\n        expect(accumulator.officeX).to.be('InitechX');\n        expect(accumulator.officeY).to.be('InitechY');\n        expect(iterationNumbers).to.eql([1, 2]);\n        return;\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should break iteration with defined return value [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":387,"column":67,"index":15193},"line":387,"code":"    it('should break iteration with defined return value [callback]', function (done) {\n      var breakCondition = 'Some value!';\n      localforage.setItem('officeX', 'InitechX', function (err, setValue) {\n        expect(setValue).to.be('InitechX');\n        localforage.getItem('officeX', function (err, value) {\n          expect(value).to.be(setValue);\n          localforage.setItem('officeY', 'InitechY', function (err, setValue) {\n            expect(setValue).to.be('InitechY');\n            localforage.getItem('officeY', function (err, value) {\n              expect(value).to.be(setValue);\n\n              // Loop is broken within first iteration.\n              localforage.iterate(function () {\n                // Returning defined value will break the cycle.\n                return breakCondition;\n              }, function (err, loopResult) {\n                // The value that broken the cycle is returned\n                // as a result.\n                expect(loopResult).to.be(breakCondition);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should break iteration with defined return value [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":413,"column":66,"index":16296},"line":413,"code":"    it('should break iteration with defined return value [promise]', function (done) {\n      var breakCondition = 'Some value!';\n      localforage.setItem('officeX', 'InitechX').then(function (setValue) {\n        expect(setValue).to.be('InitechX');\n        return localforage.getItem('officeX');\n      }).then(function (value) {\n        expect(value).to.be('InitechX');\n        return localforage.setItem('officeY', 'InitechY');\n      }).then(function (setValue) {\n        expect(setValue).to.be('InitechY');\n        return localforage.getItem('officeY');\n      }).then(function (value) {\n        expect(value).to.be('InitechY');\n        return localforage.iterate(function () {\n          return breakCondition;\n        });\n      }).then(function (result) {\n        expect(result).to.be(breakCondition);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"should iterate() through only its own keys/values","suites":["on QUOTA ERROR"],"updatePoint":{"line":434,"column":57,"index":17125},"line":434,"code":"    it('should iterate() through only its own keys/values', function (done) {\n      localStorage.setItem('local', 'forage');\n      localforage.setItem('office', 'Initech').then(function () {\n        return localforage.setItem('name', 'Bob');\n      }).then(function () {\n        // Loop through all key/value pairs; {local: 'forage'} set\n        // manually should not be returned.\n        var numberOfItems = 0;\n        var iterationNumberConcat = '';\n        localStorage.setItem('locals', 'forages');\n        localforage.iterate(function (value, key, iterationNumber) {\n          expect(key).to.not.be('local');\n          expect(value).to.not.be('forage');\n          numberOfItems++;\n          iterationNumberConcat += iterationNumber;\n        }, function (err) {\n          if (!err) {\n            // While there are 4 items in localStorage,\n            // only 2 items were set using localForage.\n            expect(numberOfItems).to.be(2);\n\n            // Only 2 items were set using localForage,\n            // so we should get '12' and not '1234'\n            expect(iterationNumberConcat).to.be('12');\n            done();\n          }\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"nested getItem inside clear works [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":465,"column":52,"index":18357},"line":465,"code":"    it('nested getItem inside clear works [callback]', function (done) {\n      localforage.setItem('hello', 'Hello World !', function () {\n        localforage.clear(function () {\n          localforage.getItem('hello', function (secondValue) {\n            expect(secondValue).to.be(null);\n            done();\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"nested getItem inside clear works [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":475,"column":51,"index":18708},"line":475,"code":"    it('nested getItem inside clear works [promise]', function (done) {\n      localforage.setItem('hello', 'Hello World !').then(function () {\n        return localforage.clear();\n      }).then(function () {\n        return localforage.getItem('hello');\n      }).then(function (secondValue) {\n        expect(secondValue).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null for undefined key [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":490,"column":49,"index":19289},"line":490,"code":"    it('returns null for undefined key [callback]', function (done) {\n      localforage.getItem('key', function (err, value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null for undefined key [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":496,"column":48,"index":19484},"line":496,"code":"    it('returns null for undefined key [promise]', function (done) {\n      localforage.getItem('key').then(function (value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"saves an item [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":502,"column":32,"index":19663},"line":502,"code":"    it('saves an item [callback]', function (done) {\n      localforage.setItem('office', 'Initech', function (err, setValue) {\n        expect(setValue).to.be('Initech');\n        localforage.getItem('office', function (err, value) {\n          expect(value).to.be(setValue);\n          done();\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"saves an item [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":511,"column":31,"index":19983},"line":511,"code":"    it('saves an item [promise]', function (done) {\n      localforage.setItem('office', 'Initech').then(function (setValue) {\n        expect(setValue).to.be('Initech');\n        return localforage.getItem('office');\n      }).then(function (value) {\n        expect(value).to.be('Initech');\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"saves an item over an existing key [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":520,"column":53,"index":20327},"line":520,"code":"    it('saves an item over an existing key [callback]', function (done) {\n      localforage.setItem('4th floor', 'Mozilla', function (err, setValue) {\n        expect(setValue).to.be('Mozilla');\n        localforage.setItem('4th floor', 'Quora', function (err, newValue) {\n          expect(newValue).to.not.be(setValue);\n          expect(newValue).to.be('Quora');\n          localforage.getItem('4th floor', function (err, value) {\n            expect(value).to.not.be(setValue);\n            expect(value).to.be(newValue);\n            done();\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"saves an item over an existing key [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":534,"column":52,"index":20909},"line":534,"code":"    it('saves an item over an existing key [promise]', function (done) {\n      localforage.setItem('4e', 'Mozilla').then(function (setValue) {\n        expect(setValue).to.be('Mozilla');\n        return localforage.setItem('4e', 'Quora');\n      }).then(function (newValue) {\n        expect(newValue).to.not.be('Mozilla');\n        expect(newValue).to.be('Quora');\n        return localforage.getItem('4e');\n      }).then(function (value) {\n        expect(value).to.not.be('Mozilla');\n        expect(value).to.be('Quora');\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null when saving undefined [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":548,"column":53,"index":21462},"line":548,"code":"    it('returns null when saving undefined [callback]', function (done) {\n      localforage.setItem('undef', undefined, function (err, setValue) {\n        expect(setValue).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null when saving undefined [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":554,"column":52,"index":21680},"line":554,"code":"    it('returns null when saving undefined [promise]', function (done) {\n      localforage.setItem('undef', undefined).then(function (setValue) {\n        expect(setValue).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null when saving null [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":560,"column":48,"index":21894},"line":560,"code":"    it('returns null when saving null [callback]', function (done) {\n      localforage.setItem('null', null, function (err, setValue) {\n        expect(setValue).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null when saving null [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":566,"column":47,"index":22101},"line":566,"code":"    it('returns null when saving null [promise]', function (done) {\n      localforage.setItem('null', null).then(function (setValue) {\n        expect(setValue).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null for a non-existant key [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":572,"column":54,"index":22315},"line":572,"code":"    it('returns null for a non-existant key [callback]', function (done) {\n      localforage.getItem('undef', function (err, value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null for a non-existant key [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":578,"column":53,"index":22517},"line":578,"code":"    it('returns null for a non-existant key [promise]', function (done) {\n      localforage.getItem('undef').then(function (value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null from an undefined key [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":595,"column":53,"index":23433},"line":595,"code":"    it('returns null from an undefined key [callback]', function (done) {\n      localforage.key(0, function (err, key) {\n        expect(key).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns null from an undefined key [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":601,"column":52,"index":23620},"line":601,"code":"    it('returns null from an undefined key [promise]', function (done) {\n      localforage.key(0).then(function (key) {\n        expect(key).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns key name [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":607,"column":35,"index":23790},"line":607,"code":"    it('returns key name [callback]', function (done) {\n      localforage.setItem('office', 'Initech').then(function () {\n        localforage.key(0, function (err, key) {\n          expect(key).to.be('office');\n          done();\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns key name [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":615,"column":34,"index":24047},"line":615,"code":"    it('returns key name [promise]', function (done) {\n      localforage.setItem('office', 'Initech').then(function () {\n        return localforage.key(0);\n      }).then(function (key) {\n        expect(key).to.be('office');\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"removes an item [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":623,"column":34,"index":24305},"line":623,"code":"    it('removes an item [callback]', function (done) {\n      localforage.setItem('office', 'Initech', function () {\n        localforage.setItem('otherOffice', 'Initrode', function () {\n          localforage.removeItem('office', function () {\n            localforage.getItem('office', function (err, emptyValue) {\n              expect(emptyValue).to.be(null);\n              localforage.getItem('otherOffice', function (err, value) {\n                expect(value).to.be('Initrode');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"removes an item [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":638,"column":33,"index":24887},"line":638,"code":"    it('removes an item [promise]', function (done) {\n      localforage.setItem('office', 'Initech').then(function () {\n        return localforage.setItem('otherOffice', 'Initrode');\n      }).then(function () {\n        return localforage.removeItem('office');\n      }).then(function () {\n        return localforage.getItem('office');\n      }).then(function (emptyValue) {\n        expect(emptyValue).to.be(null);\n        return localforage.getItem('otherOffice');\n      }).then(function (value) {\n        expect(value).to.be('Initrode');\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"removes all items [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":653,"column":36,"index":25461},"line":653,"code":"    it('removes all items [callback]', function (done) {\n      localforage.setItem('office', 'Initech', function () {\n        localforage.setItem('otherOffice', 'Initrode', function () {\n          localforage.length(function (err, length) {\n            expect(length).to.be(2);\n            localforage.clear(function () {\n              localforage.getItem('office', function (err, value) {\n                expect(value).to.be(null);\n                localforage.length(function (err, length) {\n                  expect(length).to.be(0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"removes all items [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":671,"column":35,"index":26120},"line":671,"code":"    it('removes all items [promise]', function (done) {\n      localforage.setItem('office', 'Initech').then(function () {\n        return localforage.setItem('otherOffice', 'Initrode');\n      }).then(function () {\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(2);\n        return localforage.clear();\n      }).then(function () {\n        return localforage.getItem('office');\n      }).then(function (value) {\n        expect(value).to.be(null);\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(0);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"removes only own items upon clear","suites":["on QUOTA ERROR"],"updatePoint":{"line":690,"column":43,"index":26812},"line":690,"code":"      it('removes only own items upon clear', function (done) {\n        localStorage.setItem('local', 'forage');\n        localforage.setItem('office', 'Initech').then(function () {\n          return localforage.clear();\n        }).then(function () {\n          expect(localStorage.getItem('local')).to.be('forage');\n          localStorage.clear();\n          done();\n        });\n      });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns only its own keys from keys()","suites":["on QUOTA ERROR"],"updatePoint":{"line":700,"column":47,"index":27202},"line":700,"code":"      it('returns only its own keys from keys()', function (done) {\n        localStorage.setItem('local', 'forage');\n        localforage.setItem('office', 'Initech').then(function () {\n          return localforage.keys();\n        }).then(function (keys) {\n          expect(keys).to.eql(['office']);\n          localStorage.clear();\n          done();\n        });\n      });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"counts only its own items with length()","suites":["on QUOTA ERROR"],"updatePoint":{"line":710,"column":49,"index":27575},"line":710,"code":"      it('counts only its own items with length()', function (done) {\n        localStorage.setItem('local', 'forage');\n        localStorage.setItem('another', 'value');\n        localforage.setItem('office', 'Initech').then(function () {\n          return localforage.length();\n        }).then(function (length) {\n          expect(length).to.be(1);\n          localStorage.clear();\n          done();\n        });\n      });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"has a length after saving an item [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":722,"column":52,"index":28003},"line":722,"code":"    it('has a length after saving an item [callback]', function (done) {\n      localforage.length(function (err, length) {\n        expect(length).to.be(0);\n        localforage.setItem('rapper', 'Black Thought', function () {\n          localforage.length(function (err, length) {\n            expect(length).to.be(1);\n            done();\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"has a length after saving an item [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":733,"column":51,"index":28382},"line":733,"code":"    it('has a length after saving an item [promise]', function (done) {\n      localforage.length().then(function (length) {\n        expect(length).to.be(0);\n        return localforage.setItem('lame rapper', 'Vanilla Ice');\n      }).then(function () {\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"casts an undefined key to a String","suites":["on QUOTA ERROR"],"updatePoint":{"line":747,"column":42,"index":28869},"line":747,"code":"    it('casts an undefined key to a String', function (done) {\n      localforage.setItem(undefined, 'goodness!').then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.getItem(undefined);\n      }).then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.removeItem(undefined);\n      }).then(function () {\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(0);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"casts a null key to a String","suites":["on QUOTA ERROR"],"updatePoint":{"line":761,"column":36,"index":29380},"line":761,"code":"    it('casts a null key to a String', function (done) {\n      localforage.setItem(null, 'goodness!').then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.getItem(null);\n      }).then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.removeItem(null);\n      }).then(function () {\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(0);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"casts a float key to a String","suites":["on QUOTA ERROR"],"updatePoint":{"line":775,"column":37,"index":29877},"line":775,"code":"    it('casts a float key to a String', function (done) {\n      localforage.setItem(537.35737, 'goodness!').then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.getItem(537.35737);\n      }).then(function (value) {\n        expect(value).to.be('goodness!');\n        return localforage.removeItem(537.35737);\n      }).then(function () {\n        return localforage.length();\n      }).then(function (length) {\n        expect(length).to.be(0);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"is retrieved by getDriver [callback]","suites":["on QUOTA ERROR"],"updatePoint":{"line":789,"column":44,"index":30396},"line":789,"code":"    it('is retrieved by getDriver [callback]', function (done) {\n      localforage.getDriver(driverName, function (driver) {\n        expect(typeof driver).to.be('object');\n        driverApiMethods.concat('_initStorage').forEach(function (methodName) {\n          expect(typeof driver[methodName]).to.be('function');\n        });\n        expect(driver._driver).to.be(driverName);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"is retrieved by getDriver [promise]","suites":["on QUOTA ERROR"],"updatePoint":{"line":799,"column":43,"index":30806},"line":799,"code":"    it('is retrieved by getDriver [promise]', function (done) {\n      localforage.getDriver(driverName).then(function (driver) {\n        expect(typeof driver).to.be('object');\n        driverApiMethods.concat('_initStorage').forEach(function (methodName) {\n          expect(typeof driver[methodName]).to.be('function');\n        });\n        expect(driver._driver).to.be(driverName);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"exposes the serializer on the dbInfo object","suites":["on QUOTA ERROR"],"updatePoint":{"line":810,"column":53,"index":31319},"line":810,"code":"      it('exposes the serializer on the dbInfo object', function (done) {\n        localforage.ready().then(function () {\n          expect(localforage._dbInfo.serializer).to.be.an('object');\n          done();\n        });\n      });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"is not be able to access values of other instances","suites":["on QUOTA ERROR"],"updatePoint":{"line":869,"column":58,"index":33362},"line":869,"code":"    it('is not be able to access values of other instances', function (done) {\n      Promise.all([localforage.setItem('key1', 'value1a'), localforage2.setItem('key2', 'value2a'), localforage3.setItem('key3', 'value3a')]).then(function () {\n        return Promise.all([localforage.getItem('key2').then(function (value) {\n          expect(value).to.be(null);\n        }), localforage2.getItem('key1').then(function (value) {\n          expect(value).to.be(null);\n        }), localforage2.getItem('key3').then(function (value) {\n          expect(value).to.be(null);\n        }), localforage3.getItem('key2').then(function (value) {\n          expect(value).to.be(null);\n        })]);\n      }).then(function () {\n        done();\n      }, function (errors) {\n        done(new Error(errors));\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"retrieves the proper value when using the same key with other instances","suites":["on QUOTA ERROR"],"updatePoint":{"line":886,"column":79,"index":34184},"line":886,"code":"    it('retrieves the proper value when using the same key with other instances', function (done) {\n      Promise.all([localforage.setItem('key', 'value1'), localforage2.setItem('key', 'value2'), localforage3.setItem('key', 'value3')]).then(function () {\n        return Promise.all([localforage.getItem('key').then(function (value) {\n          expect(value).to.be('value1');\n        }), localforage2.getItem('key').then(function (value) {\n          expect(value).to.be('value2');\n        }), localforage3.getItem('key').then(function (value) {\n          expect(value).to.be('value3');\n        })]);\n      }).then(function () {\n        done();\n      }, function (errors) {\n        done(new Error(errors));\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"chains operation on multiple stores","suites":["on QUOTA ERROR"],"updatePoint":{"line":911,"column":43,"index":35288},"line":911,"code":"    it('chains operation on multiple stores', function () {\n      var localforage1 = localforage.createInstance({\n        name: 'storage3',\n        storeName: 'store1',\n        size: 1024\n      });\n      var localforage2 = localforage.createInstance({\n        name: 'storage3',\n        storeName: 'store2',\n        size: 1024\n      });\n      var localforage3 = localforage.createInstance({\n        name: 'storage3',\n        storeName: 'store3',\n        size: 1024\n      });\n      var promise1 = localforage1.setItem('key', 'value1').then(function () {\n        return localforage1.getItem('key');\n      }).then(function (value) {\n        expect(value).to.be('value1');\n      });\n      var promise2 = localforage2.setItem('key', 'value2').then(function () {\n        return localforage2.getItem('key');\n      }).then(function (value) {\n        expect(value).to.be('value2');\n      });\n      var promise3 = localforage3.setItem('key', 'value3').then(function () {\n        return localforage3.getItem('key');\n      }).then(function (value) {\n        expect(value).to.be('value3');\n      });\n      return Promise.all([promise1, promise2, promise3]);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"can create multiple instances of the same store","suites":["on QUOTA ERROR"],"updatePoint":{"line":944,"column":55,"index":36452},"line":944,"code":"    it('can create multiple instances of the same store', function () {\n      var localforage1;\n      var localforage2;\n      var localforage3;\n      Promise.resolve().then(function () {\n        localforage1 = localforage.createInstance({\n          name: 'commonStorage',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage1.ready();\n      }).then(function () {\n        localforage2 = localforage.createInstance({\n          name: 'commonStorage',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage2.ready();\n      }).then(function () {\n        localforage3 = localforage.createInstance({\n          name: 'commonStorage',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage3.ready();\n      }).then(function () {\n        return Promise.resolve().then(function () {\n          return localforage1.setItem('key1', 'value1').then(function () {\n            return localforage1.getItem('key1');\n          }).then(function (value) {\n            expect(value).to.be('value1');\n          });\n        }).then(function () {\n          return localforage2.setItem('key2', 'value2').then(function () {\n            return localforage2.getItem('key2');\n          }).then(function (value) {\n            expect(value).to.be('value2');\n          });\n        }).then(function () {\n          return localforage3.setItem('key3', 'value3').then(function () {\n            return localforage3.getItem('key3');\n          }).then(function (value) {\n            expect(value).to.be('value3');\n          });\n        });\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"can create multiple instances of the same store and do concurrent operations","suites":["on QUOTA ERROR"],"updatePoint":{"line":991,"column":84,"index":38121},"line":991,"code":"    it('can create multiple instances of the same store and do concurrent operations', function () {\n      var localforage1;\n      var localforage2;\n      var localforage3;\n      var localforage3b;\n      Promise.resolve().then(function () {\n        localforage1 = localforage.createInstance({\n          name: 'commonStorage2',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage1.ready();\n      }).then(function () {\n        localforage2 = localforage.createInstance({\n          name: 'commonStorage2',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage2.ready();\n      }).then(function () {\n        localforage3 = localforage.createInstance({\n          name: 'commonStorage2',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage3.ready();\n      }).then(function () {\n        localforage3b = localforage.createInstance({\n          name: 'commonStorage2',\n          storeName: 'commonStore',\n          size: 1024\n        });\n        return localforage3b.ready();\n      }).then(function () {\n        var promise1 = localforage1.setItem('key1', 'value1').then(function () {\n          return localforage1.getItem('key1');\n        }).then(function (value) {\n          expect(value).to.be('value1');\n        });\n        var promise2 = localforage2.setItem('key2', 'value2').then(function () {\n          return localforage2.getItem('key2');\n        }).then(function (value) {\n          expect(value).to.be('value2');\n        });\n        var promise3 = localforage3.setItem('key3', 'value3').then(function () {\n          return localforage3.getItem('key3');\n        }).then(function (value) {\n          expect(value).to.be('value3');\n        });\n        var promise4 = localforage3b.setItem('key3', 'value3').then(function () {\n          return localforage3.getItem('key3');\n        }).then(function (value) {\n          expect(value).to.be('value3');\n        });\n        return Promise.all([promise1, promise2, promise3, promise4]);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"can create multiple instances of the same store concurrently","suites":["on QUOTA ERROR"],"updatePoint":{"line":1048,"column":68,"index":40181},"line":1048,"code":"    it('can create multiple instances of the same store concurrently', function () {\n      var localforage1 = localforage.createInstance({\n        name: 'commonStorage3',\n        storeName: 'commonStore',\n        size: 1024\n      });\n      var localforage2 = localforage.createInstance({\n        name: 'commonStorage3',\n        storeName: 'commonStore',\n        size: 1024\n      });\n      var localforage3 = localforage.createInstance({\n        name: 'commonStorage3',\n        storeName: 'commonStore',\n        size: 1024\n      });\n      var localforage3b = localforage.createInstance({\n        name: 'commonStorage3',\n        storeName: 'commonStore',\n        size: 1024\n      });\n      var promise1 = localforage1.setItem('key1', 'value1').then(function () {\n        return localforage1.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be('value1');\n      });\n      var promise2 = localforage2.setItem('key2', 'value2').then(function () {\n        return localforage2.getItem('key2');\n      }).then(function (value) {\n        expect(value).to.be('value2');\n      });\n      var promise3 = localforage3.setItem('key3', 'value3').then(function () {\n        return localforage3.getItem('key3');\n      }).then(function (value) {\n        expect(value).to.be('value3');\n      });\n      var promise4 = localforage3b.setItem('key3', 'value3').then(function () {\n        return localforage3.getItem('key3');\n      }).then(function (value) {\n        expect(value).to.be('value3');\n      });\n      return Promise.all([promise1, promise2, promise3, promise4]);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"is used according to setDriver preference order","suites":["on QUOTA ERROR"],"updatePoint":{"line":1112,"column":55,"index":42512},"line":1112,"code":"    it('is used according to setDriver preference order', function (done) {\n      localforage.setDriver(driverPreferedOrder).then(function () {\n        expect(localforage.driver()).to.be(driverName);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of getItem()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1133,"column":41,"index":43100},"line":1133,"code":"    it('resolves the promise of getItem()', function (done) {\n      localforage.getItem('key', testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of setItem()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1139,"column":41,"index":43316},"line":1139,"code":"    it('resolves the promise of setItem()', function (done) {\n      localforage.setItem('key', 'test', testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of clear()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1145,"column":39,"index":43538},"line":1145,"code":"    it('resolves the promise of clear()', function (done) {\n      localforage.clear(testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of length()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1151,"column":40,"index":43744},"line":1151,"code":"    it('resolves the promise of length()', function (done) {\n      localforage.length(testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of removeItem()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1157,"column":44,"index":43955},"line":1157,"code":"    it('resolves the promise of removeItem()', function (done) {\n      localforage.removeItem('key', testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of key()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1163,"column":37,"index":44170},"line":1163,"code":"    it('resolves the promise of key()', function (done) {\n      localforage.key('key', testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves the promise of keys()","suites":["on QUOTA ERROR"],"updatePoint":{"line":1169,"column":38,"index":44379},"line":1169,"code":"    it('resolves the promise of keys()', function (done) {\n      localforage.keys(testObj.throwFunc).then(function () {\n        expect(testObj.throwFuncCalls).to.be(1);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"creates a new instance and sets the driver","suites":["on QUOTA ERROR"],"updatePoint":{"line":1205,"column":50,"index":45379},"line":1205,"code":"    it('creates a new instance and sets the driver', function (done) {\n      var localforage2 = localforage.createInstance({\n        name: 'storage2',\n        driver: driverName,\n        // We need a small value here\n        // otherwise local PhantomJS test\n        // will fail with SECURITY_ERR.\n        // TravisCI seem to work fine though.\n        size: 1024,\n        storeName: 'storagename2'\n      });\n\n      // since config actually uses setDriver which is async,\n      // and since driver() and supports() are not defered (are sync),\n      // we have to wait till an async method returns\n      localforage2.length().then(function () {\n        expect(localforage2.driver()).to.be(driverName);\n        done();\n      }, function () {\n        expect(localforage2.driver()).to.be(null);\n        done();\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"drops the current instance without affecting the rest","suites":["on QUOTA ERROR"],"updatePoint":{"line":1363,"column":61,"index":51234},"line":1363,"code":"    it('drops the current instance without affecting the rest', function () {\n      return dropStoreInstance1.dropInstance().then(function () {\n        return nodropInstance.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be('value0');\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"can recreate and set values to previously dropped instances","suites":["on QUOTA ERROR"],"updatePoint":{"line":1370,"column":67,"index":51521},"line":1370,"code":"    it('can recreate and set values to previously dropped instances', function () {\n      return dropStoreInstance1.dropInstance().then(function () {\n        return dropStoreInstance1.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be(null);\n        return dropStoreInstance1.length();\n      }).then(function (length) {\n        expect(length).to.be(0);\n      }).then(function () {\n        return dropStoreInstance1.setItem('key1', 'newvalue2');\n      }).then(function () {\n        return dropStoreInstance1.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be('newvalue2');\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"drops an other instance without affecting the rest","suites":["on QUOTA ERROR"],"updatePoint":{"line":1386,"column":58,"index":52156},"line":1386,"code":"    it('drops an other instance without affecting the rest', function () {\n      var opts = {\n        name: dropStoreInstance2Options.name,\n        storeName: dropStoreInstance2Options.storeName\n      };\n      return nodropInstance.dropInstance(opts).then(function () {\n        return nodropInstance.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be('value0');\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"the dropped instance is completely removed","suites":["on QUOTA ERROR"],"updatePoint":{"line":1397,"column":50,"index":52555},"line":1397,"code":"    it('the dropped instance is completely removed', function () {\n      var opts = {\n        name: dropStoreInstance3Options.name,\n        storeName: dropStoreInstance3Options.storeName\n      };\n      return dropStoreInstance3.dropInstance().then(function () {\n        return expectStoreToNotExistAsync(opts);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves when trying to drop a store that does not exit","suites":["on QUOTA ERROR"],"updatePoint":{"line":1406,"column":63,"index":52897},"line":1406,"code":"    it('resolves when trying to drop a store that does not exit', function () {\n      var opts = {\n        name: dropStoreInstance3Options.name,\n        storeName: 'NotExistingStore' + Date.now()\n      };\n      return dropStoreInstance3.dropInstance(opts);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"the dropped \"DB\" can be recreated","suites":["on QUOTA ERROR"],"updatePoint":{"line":1457,"column":41,"index":54847},"line":1457,"code":"    it('the dropped \"DB\" can be recreated', function () {\n      var opts = {\n        name: dropDbInstanceOptions.name\n      };\n      return dropDbInstance.dropInstance(opts).then(function () {\n        return dropDbInstance.getItem('key1');\n      }).then(function (value) {\n        expect(value).to.be(null);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"the dropped \"DB\" is completely removed","suites":["on QUOTA ERROR"],"updatePoint":{"line":1467,"column":46,"index":55178},"line":1467,"code":"    it('the dropped \"DB\" is completely removed', function () {\n      var opts = {\n        name: dropDb2InstanceOptions.name\n      };\n      return dropDb2Instance.dropInstance(opts).then(function () {\n        return expectDBToNotExistAsync(opts);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves when trying to drop a store of a \"DB\" that does not exit","suites":["on QUOTA ERROR"],"updatePoint":{"line":1475,"column":73,"index":55469},"line":1475,"code":"    it('resolves when trying to drop a store of a \"DB\" that does not exit', function () {\n      var opts = {\n        name: 'NotExistingDB' + Date.now(),\n        storeName: 'NotExistingStore' + Date.now()\n      };\n      return dropStoreInstance3.dropInstance(opts);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"resolves when trying to drop a \"DB\" that does not exist","suites":["on QUOTA ERROR"],"updatePoint":{"line":1482,"column":63,"index":55732},"line":1482,"code":"    it('resolves when trying to drop a \"DB\" that does not exist', function () {\n      var opts = {\n        name: 'NotExistingDB' + Date.now()\n      };\n      return dropStoreInstance3.dropInstance(opts);\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"drops a \"DB\" that we previously dropped a store","suites":["on QUOTA ERROR"],"updatePoint":{"line":1488,"column":55,"index":55935},"line":1488,"code":"    it('drops a \"DB\" that we previously dropped a store', function () {\n      var opts = {\n        name: dropStoreInstance3Options.name\n      };\n      return dropStoreInstance3.dropInstance(opts).then(function () {\n        return expectDBToNotExistAsync(opts);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"drops a \"DB\" after dropping all its stores","suites":["on QUOTA ERROR"],"updatePoint":{"line":1496,"column":50,"index":56209},"line":1496,"code":"    it('drops a \"DB\" after dropping all its stores', function () {\n      var opts = {\n        name: dropDb3name\n      };\n      // Before trying to drop a different store/DB\n      // make sure that the instance that you will use\n      // is configured to use the same driver as well.\n      return Promise.resolve().then(function () {\n        return dropDb3Instance1.dropInstance({\n          name: dropDb3name,\n          storeName: dropDb3Instance1Options.storeName\n        });\n      }).then(function () {\n        return dropDb3Instance1.dropInstance({\n          name: dropDb3name,\n          storeName: dropDb3Instance2Options.storeName\n        });\n      }).then(function () {\n        return dropDb3Instance1.dropInstance({\n          name: dropDb3name,\n          storeName: dropDb3Instance3Options.storeName\n        });\n      }).then(function () {\n        return dropDb3Instance1.dropInstance(opts);\n      }).then(function () {\n        return expectDBToNotExistAsync(opts);\n      });\n    });","file":"test.api.js","skipped":false,"dir":"test"},{"name":"returns the default values","suites":["Config API"],"updatePoint":{"line":23,"column":32,"index":732},"line":23,"code":"  it('returns the default values', function (done) {\n    expect(localforage.config('description')).to.be('');\n    expect(localforage.config('name')).to.be('localforage');\n    expect(localforage.config('size')).to.be(4980736);\n    expect(localforage.config('storeName')).to.be('keyvaluepairs');\n    expect(localforage.config('version')).to.be(1.0);\n    localforage.ready(function () {\n      expect(localforage.config('driver')).to.be(localforage.driver());\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"returns error if API call was already made","suites":["Config API"],"updatePoint":{"line":34,"column":48,"index":1232},"line":34,"code":"  it('returns error if API call was already made', function (done) {\n    localforage.length(function () {\n      var configResult = localforage.config({\n        description: '123',\n        driver: 'I a not set driver',\n        name: 'My Cool App',\n        storeName: 'myStoreName',\n        version: 2.0\n      });\n      var error = \"Error: Can't call config() after localforage \" + 'has been used.';\n      expect(configResult).to.not.be(true);\n      expect(configResult.toString()).to.be(error);\n\n      // Expect the config values to be as they were before.\n      expect(localforage.config('description')).to.not.be('123');\n      expect(localforage.config('description')).to.be('');\n      expect(localforage.config('driver')).to.be(localforage.driver());\n      expect(localforage.config('driver')).to.not.be('I a not set driver');\n      expect(localforage.config('name')).to.be('localforage');\n      expect(localforage.config('name')).to.not.be('My Cool App');\n      expect(localforage.config('size')).to.be(4980736);\n      expect(localforage.config('storeName')).to.be('keyvaluepairs');\n      expect(localforage.config('version')).to.be(1.0);\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"sets new values and returns them properly","suites":["Config API"],"updatePoint":{"line":60,"column":47,"index":2401},"line":60,"code":"  it('sets new values and returns them properly', function (done) {\n    var secondSupportedDriver = supportedDrivers.length >= 2 ? supportedDrivers[1] : null;\n    localforage.config({\n      description: 'The offline datastore for my cool app',\n      driver: secondSupportedDriver,\n      name: 'My Cool App',\n      storeName: 'myStoreName',\n      version: 2.0\n    });\n    expect(localforage.config('description')).to.not.be('');\n    expect(localforage.config('description')).to.be('The offline datastore for my cool app');\n    expect(localforage.config('driver')).to.be(secondSupportedDriver);\n    expect(localforage.config('name')).to.be('My Cool App');\n    expect(localforage.config('size')).to.be(4980736);\n    expect(localforage.config('storeName')).to.be('myStoreName');\n    expect(localforage.config('version')).to.be(2.0);\n    localforage.ready(function () {\n      if (supportedDrivers.length >= 2) {\n        expect(localforage.config('driver')).to.be(secondSupportedDriver);\n      } else {\n        expect(localforage.config('driver')).to.be(supportedDrivers[0]);\n      }\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"sets new driver using preference order","suites":["Config API"],"updatePoint":{"line":86,"column":46,"index":3544},"line":86,"code":"    it('sets new driver using preference order', function (done) {\n      var otherSupportedDrivers = supportedDrivers.slice(1);\n      var configResult = localforage.config({\n        driver: otherSupportedDrivers\n      });\n      expect(configResult).to.be.a(Promise);\n      localforage.ready(function () {\n        expect(localforage.config('driver')).to.be(otherSupportedDrivers[0]);\n        return configResult;\n      }).then(function () {\n        done();\n      });\n    });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"it does not set an unsupported driver","suites":["Config API"],"updatePoint":{"line":100,"column":43,"index":4019},"line":100,"code":"  it('it does not set an unsupported driver', function (done) {\n    var oldDriver = localforage.driver();\n    var configResult = localforage.config({\n      driver: 'I am a not supported driver'\n    });\n    expect(configResult).to.be.a(Promise);\n    localforage.ready(function () {\n      expect(localforage.config('driver')).to.be(oldDriver);\n      return configResult;\n    }).catch(function (error) {\n      expect(error).to.be.an(Error);\n      expect(error.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"it does not set an unsupported driver using preference order","suites":["Config API"],"updatePoint":{"line":115,"column":66,"index":4581},"line":115,"code":"  it('it does not set an unsupported driver using preference order', function (done) {\n    var oldDriver = localforage.driver();\n    localforage.config({\n      driver: ['I am a not supported driver', 'I am a an other not supported driver']\n    });\n    localforage.ready(function () {\n      expect(localforage.config('driver')).to.be(oldDriver);\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"converts bad config values across drivers","suites":["Config API"],"updatePoint":{"line":125,"column":47,"index":4935},"line":125,"code":"  it('converts bad config values across drivers', function () {\n    localforage.config({\n      name: 'My Cool App',\n      // https://github.com/mozilla/localForage/issues/247\n      storeName: 'my store&name-v1',\n      version: 2.0\n    });\n    expect(localforage.config('name')).to.be('My Cool App');\n    expect(localforage.config('storeName')).to.be('my_store_name_v1');\n    expect(localforage.config('version')).to.be(2.0);\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"returns all values when config isn't passed arguments","suites":["Config API"],"updatePoint":{"line":168,"column":59,"index":6882},"line":168,"code":"  it(\"returns all values when config isn't passed arguments\", function () {\n    expect(localforage.config()).to.be.an('object');\n    expect(Object.keys(localforage.config()).length).to.be(6);\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"maintains config values across setDriver calls","suites":["Config API"],"updatePoint":{"line":175,"column":52,"index":7166},"line":175,"code":"  it('maintains config values across setDriver calls', function (done) {\n    localforage.config({\n      name: 'Mega Mozilla Dino'\n    });\n    localforage.length().then(function () {\n      return localforage.setDriver(localforage.LOCALSTORAGE);\n    }).then(function () {\n      expect(localforage.config('name')).to.be('Mega Mozilla Dino');\n      done();\n    });\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"returns error if database version is not a number","suites":["Config API"],"updatePoint":{"line":186,"column":55,"index":7536},"line":186,"code":"  it('returns error if database version is not a number', function (done) {\n    var configResult = localforage.config({\n      version: '2.0'\n    });\n    var error = 'Error: Database version must be a number.';\n    expect(configResult).to.not.be(true);\n    expect(configResult.toString()).to.be(error);\n    done();\n  });","file":"test.config.js","skipped":false,"dir":"test"},{"name":"fails to define a no-name custom driver","suites":["When Custom Drivers are used"],"updatePoint":{"line":6,"column":45,"index":306},"line":6,"code":"  it('fails to define a no-name custom driver', function (done) {\n    localforage.defineDriver({\n      _initStorage: function () {},\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {},\n      length: function () {},\n      key: function () {},\n      keys: function () {}\n    }, null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be(errorMessage);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"fails to define a no-name custom driver [promise]","suites":["When Custom Drivers are used"],"updatePoint":{"line":23,"column":55,"index":829},"line":23,"code":"  it('fails to define a no-name custom driver [promise]', function (done) {\n    localforage.defineDriver({\n      _initStorage: function () {},\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {},\n      length: function () {},\n      key: function () {},\n      keys: function () {}\n    }).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be(errorMessage);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"fails to define a custom driver with missing methods","suites":["When Custom Drivers are used"],"updatePoint":{"line":40,"column":58,"index":1360},"line":40,"code":"  it('fails to define a custom driver with missing methods', function (done) {\n    localforage.defineDriver({\n      _driver: 'missingMethodsDriver',\n      _initStorage: function () {},\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {}\n    }, null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be(errorMessage);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"fails to define a custom driver with missing methods [promise]","suites":["When Custom Drivers are used"],"updatePoint":{"line":55,"column":68,"index":1850},"line":55,"code":"  it('fails to define a custom driver with missing methods [promise]', function (done) {\n    localforage.defineDriver({\n      _driver: 'missingMethodsDriver',\n      _initStorage: function () {},\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {}\n    }).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be(errorMessage);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"defines a compliant custom driver","suites":["When Custom Drivers are used"],"updatePoint":{"line":70,"column":39,"index":2316},"line":70,"code":"  it('defines a compliant custom driver', function (done) {\n    localforage.defineDriver(dummyStorageDriver, function () {\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"defines a compliant custom driver [promise]","suites":["When Custom Drivers are used"],"updatePoint":{"line":75,"column":49,"index":2477},"line":75,"code":"  it('defines a compliant custom driver [promise]', function (done) {\n    localforage.defineDriver(dummyStorageDriver).then(function () {\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"sets a custom driver","suites":["When Custom Drivers are used"],"updatePoint":{"line":80,"column":26,"index":2620},"line":80,"code":"  it('sets a custom driver', function (done) {\n    localforage.defineDriver(dummyStorageDriver, function () {\n      localforage.setDriver(dummyStorageDriver._driver, function () {\n        expect(localforage.driver()).to.be(dummyStorageDriver._driver);\n        done();\n      });\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"sets a custom driver [promise]","suites":["When Custom Drivers are used"],"updatePoint":{"line":88,"column":36,"index":2922},"line":88,"code":"  it('sets a custom driver [promise]', function (done) {\n    localforage.defineDriver(dummyStorageDriver).then(function () {\n      return localforage.setDriver(dummyStorageDriver._driver);\n    }).then(function () {\n      expect(localforage.driver()).to.be(dummyStorageDriver._driver);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"defines a driver synchronously when it doesn't have _supports()","suites":["When Custom Drivers are used"],"updatePoint":{"line":96,"column":69,"index":3268},"line":96,"code":"  it(\"defines a driver synchronously when it doesn't have _supports()\", function (done) {\n    var customDriver = {\n      _driver: 'dummyStorageDriver' + +new Date(),\n      _initStorage: function () {},\n      // _support: function() { return true; }\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {},\n      length: function () {},\n      key: function () {},\n      keys: function () {}\n    };\n    localforage.defineDriver(customDriver);\n    localforage.setDriver(customDriver._driver).then(function () {\n      expect(localforage.driver()).to.be(customDriver._driver);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"defines a driver synchronously when it has boolean _supports()","suites":["When Custom Drivers are used"],"updatePoint":{"line":116,"column":68,"index":3966},"line":116,"code":"  it('defines a driver synchronously when it has boolean _supports()', function (done) {\n    var customDriver = {\n      _driver: 'dummyStorageDriver' + +new Date(),\n      _initStorage: function () {},\n      _support: true,\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {},\n      length: function () {},\n      key: function () {},\n      keys: function () {}\n    };\n    localforage.defineDriver(customDriver);\n    localforage.setDriver(customDriver._driver).then(function () {\n      expect(localforage.driver()).to.be(customDriver._driver);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"defines a driver asynchronously when _supports() returns a Promise<boolean>","suites":["When Custom Drivers are used"],"updatePoint":{"line":136,"column":81,"index":4652},"line":136,"code":"  it('defines a driver asynchronously when _supports() returns a Promise<boolean>', function (done) {\n    var customDriver = {\n      _driver: 'dummyStorageDriver' + +new Date(),\n      _initStorage: function () {},\n      _support: function () {\n        return Promise.resolve(true);\n      },\n      iterate: function () {},\n      getItem: function () {},\n      setItem: function () {},\n      removeItem: function () {},\n      clear: function () {},\n      length: function () {},\n      key: function () {},\n      keys: function () {}\n    };\n    localforage.defineDriver(customDriver).then(function () {\n      return localforage.setDriver(customDriver._driver);\n    }).then(function () {\n      expect(localforage.driver()).to.be(customDriver._driver);\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"sets and uses a custom driver","suites":["When Custom Drivers are used"],"updatePoint":{"line":159,"column":35,"index":5382},"line":159,"code":"  it('sets and uses a custom driver', function (done) {\n    localforage.defineDriver(dummyStorageDriver, function () {\n      localforage.setDriver(dummyStorageDriver._driver, function (err) {\n        expect(err).to.be(undefined);\n        localforage.setItem('testCallbackKey', 'testCallbackValue', function (err) {\n          expect(err).to.be(null);\n          localforage.getItem('testCallbackKey', function (err, value) {\n            expect(err).to.be(null);\n            expect(value).to.be('testCallbackValue');\n            done();\n          });\n        });\n      });\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"sets and uses a custom driver [promise]","suites":["When Custom Drivers are used"],"updatePoint":{"line":174,"column":45,"index":5976},"line":174,"code":"  it('sets and uses a custom driver [promise]', function (done) {\n    localforage.defineDriver(dummyStorageDriver).then(function () {\n      return localforage.setDriver(dummyStorageDriver._driver);\n    }).then(function () {\n      return localforage.setItem('testPromiseKey', 'testPromiseValue');\n    }).then(function () {\n      return localforage.getItem('testPromiseKey');\n    }).then(function (value) {\n      expect(value).to.be('testPromiseValue');\n      done();\n    });\n  });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"rejects when it is used","suites":["When Custom Drivers are used","when dropInstance is not defined"],"updatePoint":{"line":187,"column":31,"index":6503},"line":187,"code":"    it('rejects when it is used', function (done) {\n      var customDriver = {\n        _driver: 'dummyStorageDriver' + +new Date(),\n        _initStorage: function () {},\n        _support: function () {\n          return Promise.resolve(true);\n        },\n        iterate: function () {},\n        getItem: function () {},\n        setItem: function () {},\n        removeItem: function () {},\n        clear: function () {},\n        length: function () {},\n        key: function () {},\n        keys: function () {}\n      };\n      localforage.defineDriver(customDriver).then(function () {\n        return localforage.setDriver(customDriver._driver);\n      }).then(function () {\n        return localforage.dropInstance();\n      }).catch(function (err) {\n        expect(err.message).to.be('Method dropInstance is not implemented by the current driver');\n        done();\n      });\n    });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"is does not reject","suites":["When Custom Drivers are used","when dropInstance is defined"],"updatePoint":{"line":214,"column":26,"index":7439},"line":214,"code":"    it('is does not reject', function (done) {\n      var customDriver = {\n        _driver: 'dummyStorageDriver' + +new Date(),\n        _initStorage: function () {},\n        _support: function () {\n          return Promise.resolve(true);\n        },\n        iterate: function () {},\n        getItem: function () {},\n        setItem: function () {},\n        removeItem: function () {},\n        clear: function () {},\n        length: function () {},\n        key: function () {},\n        keys: function () {},\n        dropInstance: function () {}\n      };\n      localforage.defineDriver(customDriver).then(function () {\n        return localforage.setDriver(customDriver._driver);\n      }).then(function () {\n        return localforage.dropInstance();\n      }).then(function () {\n        done();\n      });\n    });","file":"test.customdriver.js","skipped":false,"dir":"test"},{"name":"saves a string [callback]","suites":[],"updatePoint":{"line":39,"column":33,"index":1615},"line":39,"code":"    it('saves a string [callback]', function (done) {\n      localforage.setItem('office', 'Initech', function (err, setValue) {\n        expect(setValue).to.be('Initech');\n        localforage.getItem('office', function (err, value) {\n          expect(value).to.be(setValue);\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a string [promise]","suites":[],"updatePoint":{"line":48,"column":32,"index":1936},"line":48,"code":"    it('saves a string [promise]', function (done) {\n      localforage.setItem('office', 'Initech').then(function (setValue) {\n        expect(setValue).to.be('Initech');\n        return localforage.getItem('office');\n      }).then(function (value) {\n        expect(value).to.be('Initech');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a string like \"[object Blob]\" [promise]","suites":[],"updatePoint":{"line":57,"column":53,"index":2280},"line":57,"code":"    it('saves a string like \"[object Blob]\" [promise]', function (done) {\n      localforage.setItem('fake Blob', '[object Blob]').then(function (setValue) {\n        expect(setValue).to.be('[object Blob]');\n        return localforage.getItem('fake Blob');\n      }).then(function (value) {\n        expect(value).to.be('[object Blob]');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a number [callback]","suites":[],"updatePoint":{"line":66,"column":33,"index":2628},"line":66,"code":"    it('saves a number [callback]', function (done) {\n      localforage.setItem('number', 546, function (err, setValue) {\n        expect(setValue).to.be(546);\n        expect(setValue).to.be.a('number');\n        localforage.getItem('number', function (err, value) {\n          expect(value).to.be(setValue);\n          expect(value).to.be.a('number');\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a number [promise]","suites":[],"updatePoint":{"line":77,"column":32,"index":3024},"line":77,"code":"    it('saves a number [promise]', function (done) {\n      localforage.setItem('number', 546).then(function (setValue) {\n        expect(setValue).to.be(546);\n        expect(setValue).to.be.a('number');\n        return localforage.getItem('number');\n      }).then(function (value) {\n        expect(value).to.be(546);\n        expect(value).to.be.a('number');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a boolean [callback]","suites":[],"updatePoint":{"line":88,"column":34,"index":3416},"line":88,"code":"    it('saves a boolean [callback]', function (done) {\n      localforage.setItem('boolean', false, function (err, setValue) {\n        expect(setValue).to.be(false);\n        expect(setValue).to.be.a('boolean');\n        localforage.getItem('boolean', function (err, value) {\n          expect(value).to.be(setValue);\n          expect(value).to.be.a('boolean');\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a boolean [promise]","suites":[],"updatePoint":{"line":99,"column":33,"index":3821},"line":99,"code":"    it('saves a boolean [promise]', function (done) {\n      localforage.setItem('boolean', false).then(function (setValue) {\n        expect(setValue).to.be(false);\n        expect(setValue).to.be.a('boolean');\n        return localforage.getItem('boolean');\n      }).then(function (value) {\n        expect(value).to.be(false);\n        expect(value).to.be.a('boolean');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves null [callback]","suites":[],"updatePoint":{"line":110,"column":29,"index":4218},"line":110,"code":"    it('saves null [callback]', function (done) {\n      localforage.setItem('null', null, function (err, setValue) {\n        expect(setValue).to.be(null);\n        localforage.getItem('null', function (err, value) {\n          expect(value).to.be(null);\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves null [promise]","suites":[],"updatePoint":{"line":119,"column":28,"index":4517},"line":119,"code":"    it('saves null [promise]', function (done) {\n      localforage.setItem('null', null).then(function (setValue) {\n        expect(setValue).to.be(null);\n        return localforage.getItem('null');\n      }).then(function (value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves undefined as null [callback]","suites":[],"updatePoint":{"line":128,"column":42,"index":4831},"line":128,"code":"    it('saves undefined as null [callback]', function (done) {\n      localforage.setItem('null', undefined, function (err, setValue) {\n        expect(setValue).to.be(null);\n        localforage.getItem('null', function (err, value) {\n          expect(value).to.be(null);\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves undefined as null [promise]","suites":[],"updatePoint":{"line":137,"column":41,"index":5148},"line":137,"code":"    it('saves undefined as null [promise]', function (done) {\n      localforage.setItem('null', undefined).then(function (setValue) {\n        expect(setValue).to.be(null);\n        return localforage.getItem('null');\n      }).then(function (value) {\n        expect(value).to.be(null);\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a float [callback]","suites":[],"updatePoint":{"line":146,"column":32,"index":5457},"line":146,"code":"    it('saves a float [callback]', function (done) {\n      localforage.setItem('float', 546.041, function (err, setValue) {\n        expect(setValue).to.be(546.041);\n        expect(setValue).to.be.a('number');\n        localforage.getItem('float', function (err, value) {\n          expect(value).to.be(setValue);\n          expect(value).to.be.a('number');\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a float [promise]","suites":[],"updatePoint":{"line":157,"column":31,"index":5858},"line":157,"code":"    it('saves a float [promise]', function (done) {\n      localforage.setItem('float', 546.041).then(function (setValue) {\n        expect(setValue).to.be(546.041);\n        expect(setValue).to.be.a('number');\n        return localforage.getItem('float');\n      }).then(function (value) {\n        expect(value).to.be(546.041);\n        expect(value).to.be.a('number');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves an array [callback]","suites":[],"updatePoint":{"line":169,"column":33,"index":6299},"line":169,"code":"    it('saves an array [callback]', function (done) {\n      localforage.setItem('array', arrayToSave, function (err, setValue) {\n        expect(setValue.length).to.be(arrayToSave.length);\n        expect(setValue instanceof Array).to.be(true);\n        localforage.getItem('array', function (err, value) {\n          expect(value.length).to.be(arrayToSave.length);\n          expect(value instanceof Array).to.be(true);\n          expect(value[1]).to.be.a('string');\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves an array [promise]","suites":[],"updatePoint":{"line":181,"column":32,"index":6808},"line":181,"code":"    it('saves an array [promise]', function (done) {\n      localforage.setItem('array', arrayToSave).then(function (setValue) {\n        expect(setValue.length).to.be(arrayToSave.length);\n        expect(setValue instanceof Array).to.be(true);\n        return localforage.getItem('array');\n      }).then(function (value) {\n        expect(value.length).to.be(arrayToSave.length);\n        expect(value instanceof Array).to.be(true);\n        expect(value[1]).to.be.a('string');\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a nested object [callback]","suites":[],"updatePoint":{"line":207,"column":40,"index":7593},"line":207,"code":"    it('saves a nested object [callback]', function (done) {\n      localforage.setItem('obj', objectToSave, function (err, setValue) {\n        expect(Object.keys(setValue).length).to.be(Object.keys(objectToSave).length);\n        expect(setValue).to.be.an('object');\n        localforage.getItem('obj', function (err, value) {\n          expect(Object.keys(value).length).to.be(Object.keys(objectToSave).length);\n          expect(value).to.be.an('object');\n          expect(value.nested).to.be.an('object');\n          expect(value.nestedObjects[0].truth).to.be.a('boolean');\n          expect(value.nestedObjects[1].theCake).to.be.a('string');\n          expect(value.nestedObjects[3]).to.be(false);\n          done();\n        });\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves a nested object [promise]","suites":[],"updatePoint":{"line":222,"column":39,"index":8335},"line":222,"code":"    it('saves a nested object [promise]', function (done) {\n      localforage.setItem('obj', objectToSave).then(function (setValue) {\n        expect(Object.keys(setValue).length).to.be(Object.keys(objectToSave).length);\n        expect(setValue).to.be.an('object');\n        return localforage.getItem('obj');\n      }).then(function (value) {\n        expect(Object.keys(value).length).to.be(Object.keys(objectToSave).length);\n        expect(value).to.be.an('object');\n        expect(value.nested).to.be.an('object');\n        expect(value.nestedObjects[0].truth).to.be.a('boolean');\n        expect(value.nestedObjects[1].theCake).to.be.a('string');\n        expect(value.nestedObjects[3]).to.be(false);\n        done();\n      });\n    });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves binary (ArrayBuffer) data","suites":[],"updatePoint":{"line":266,"column":41,"index":10318},"line":266,"code":"      it('saves binary (ArrayBuffer) data', function (done) {\n        runBinaryTest('/test/photo.jpg', done);\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves odd length binary (ArrayBuffer) data","suites":[],"updatePoint":{"line":269,"column":52,"index":10449},"line":269,"code":"      it('saves odd length binary (ArrayBuffer) data', function (done) {\n        runBinaryTest('/test/photo2.jpg', done);\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves binary (ArrayBuffer) data (ArrayBuffer type does not exist)","suites":[],"line":273,"code":"      it.skip('saves binary (ArrayBuffer) data (ArrayBuffer type does not exist)');","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves binary (Blob) data","suites":[],"updatePoint":{"line":280,"column":34,"index":10866},"line":280,"code":"      it('saves binary (Blob) data', function (done) {\n        var fileParts = ['<a id=\"a\"><b id=\"b\">hey!</b></a>'];\n        var mimeString = 'text/html';\n        var testBlob = createBlob(fileParts, {\n          type: mimeString\n        });\n        localforage.setItem('blob', testBlob, function (err, blob) {\n          expect(err).to.be(null);\n          expect(blob.toString()).to.be('[object Blob]');\n          expect(blob.size).to.be(testBlob.size);\n          expect(blob.type).to.be(testBlob.type);\n        }).then(function () {\n          localforage.getItem('blob', function (err, blob) {\n            expect(err).to.be(null);\n            expect(blob.toString()).to.be('[object Blob]');\n            expect(blob.size).to.be(testBlob.size);\n            expect(blob.type).to.be(testBlob.type);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves binary (Blob) data (Blob type does not exist)","suites":[],"line":302,"code":"      it.skip('saves binary (Blob) data (Blob type does not exist)');","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves binary (Blob) data, iterate back","suites":[],"updatePoint":{"line":305,"column":48,"index":11858},"line":305,"code":"      it('saves binary (Blob) data, iterate back', function (done) {\n        var fileParts = ['<a id=\"a\"><b id=\"b\">hey!</b></a>'];\n        var mimeString = 'text/html';\n        var testBlob = createBlob(fileParts, {\n          type: mimeString\n        });\n        localforage.setItem('blob', testBlob, function (err, blob) {\n          expect(err).to.be(null);\n          expect(blob.toString()).to.be('[object Blob]');\n          expect(blob.size).to.be(testBlob.size);\n          expect(blob.type).to.be(testBlob.type);\n        }).then(function () {\n          localforage.iterate(function (blob, key) {\n            if (key !== 'blob') {\n              return;\n            }\n            expect(blob.toString()).to.be('[object Blob]');\n            expect(blob.size).to.be(testBlob.size);\n            expect(blob.type).to.be(testBlob.type);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"saves binary (Blob) data (Blob type does not exist)","suites":[],"line":329,"code":"      it.skip('saves binary (Blob) data (Blob type does not exist)');","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Int8Array","suites":[],"updatePoint":{"line":334,"column":28,"index":12933},"line":334,"code":"      it('saves an Int8Array', function (done) {\n        var array = new Int8Array(8);\n        array[2] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Int8Array).to.be(true);\n            expect(readValue[2]).to.be(array[2]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Int8Array type","suites":[],"line":349,"code":"      it.skip(\"doesn't have the Int8Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Uint8Array","suites":[],"updatePoint":{"line":352,"column":29,"index":13608},"line":352,"code":"      it('saves an Uint8Array', function (done) {\n        var array = new Uint8Array(8);\n        array[0] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Uint8Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Uint8Array type","suites":[],"line":367,"code":"      it.skip(\"doesn't have the Uint8Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Uint8ClampedArray","suites":[],"updatePoint":{"line":370,"column":36,"index":14300},"line":370,"code":"      it('saves an Uint8ClampedArray', function (done) {\n        var array = new Uint8ClampedArray(8);\n        array[0] = 0;\n        array[1] = 93;\n        array[2] = 350;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Uint8ClampedArray).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[1]).to.be(array[1]);\n            expect(readValue[2]).to.be(array[2]);\n            expect(readValue[1]).to.be(writeValue[1]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Uint8Array type","suites":[],"line":388,"code":"      it.skip(\"doesn't have the Uint8Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Int16Array","suites":[],"updatePoint":{"line":391,"column":29,"index":15116},"line":391,"code":"      it('saves an Int16Array', function (done) {\n        var array = new Int16Array(8);\n        array[0] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Int16Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Int16Array type","suites":[],"line":406,"code":"      it.skip(\"doesn't have the Int16Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Uint16Array","suites":[],"updatePoint":{"line":409,"column":30,"index":15796},"line":409,"code":"      it('saves an Uint16Array', function (done) {\n        var array = new Uint16Array(8);\n        array[0] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Uint16Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Uint16Array type","suites":[],"line":424,"code":"      it.skip(\"doesn't have the Uint16Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Int32Array","suites":[],"updatePoint":{"line":427,"column":29,"index":16477},"line":427,"code":"      it('saves an Int32Array', function (done) {\n        var array = new Int32Array(8);\n        array[0] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Int32Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Int32Array type","suites":[],"line":442,"code":"      it.skip(\"doesn't have the Int32Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves an Uint32Array","suites":[],"updatePoint":{"line":445,"column":30,"index":17157},"line":445,"code":"      it('saves an Uint32Array', function (done) {\n        var array = new Uint32Array(8);\n        array[0] = 65;\n        array[4] = 0;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Uint32Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Uint32Array type","suites":[],"line":460,"code":"      it.skip(\"doesn't have the Uint32Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves a Float32Array","suites":[],"updatePoint":{"line":463,"column":30,"index":17841},"line":463,"code":"      it('saves a Float32Array', function (done) {\n        var array = new Float32Array(8);\n        array[0] = 6.5;\n        array[4] = 0.1;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Float32Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Float32Array type","suites":[],"line":478,"code":"      it.skip(\"doesn't have the Float32Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"saves a Float64Array","suites":[],"updatePoint":{"line":481,"column":30,"index":18531},"line":481,"code":"      it('saves a Float64Array', function (done) {\n        var array = new Float64Array(8);\n        array[0] = 6.5;\n        array[4] = 0.1;\n        localforage.setItem('array', array, function (err, writeValue) {\n          localforage.getItem('array', function (err, readValue) {\n            expect(readValue instanceof Float64Array).to.be(true);\n            expect(readValue[0]).to.be(array[0]);\n            expect(readValue[4]).to.be(writeValue[4]);\n            expect(readValue.length).to.be(writeValue.length);\n            done();\n          });\n        });\n      });","file":"test.datatypes.js","skipped":false,"dir":"test"},{"name":"doesn't have the Float64Array type","suites":[],"line":496,"code":"      it.skip(\"doesn't have the Float64Array type\");","file":"test.datatypes.js","skipped":true,"dir":"test"},{"name":"can't use unsupported IndexedDB [callback]","suites":["Driver API"],"updatePoint":{"line":37,"column":50,"index":1560},"line":37,"code":"    it(\"can't use unsupported IndexedDB [callback]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.INDEXEDDB);\n\n      // These should be rejected in component builds but aren't.\n      // TODO: Look into why.\n      localforage.setDriver(localforage.INDEXEDDB, null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can't use unsupported IndexedDB [promise]","suites":["Driver API"],"updatePoint":{"line":48,"column":49,"index":2004},"line":48,"code":"    it(\"can't use unsupported IndexedDB [promise]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.INDEXEDDB);\n\n      // These should be rejected in component builds but aren't.\n      // TODO: Look into why.\n      localforage.setDriver(localforage.INDEXEDDB).then(null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active IndexedDB [callback]","suites":["Driver API"],"updatePoint":{"line":60,"column":51,"index":2466},"line":60,"code":"    it('can set already active IndexedDB [callback]', function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.be(localforage.INDEXEDDB);\n      localforage.setDriver(localforage.INDEXEDDB, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active IndexedDB [promise]","suites":["Driver API"],"updatePoint":{"line":68,"column":50,"index":2804},"line":68,"code":"    it('can set already active IndexedDB [promise]', function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.be(localforage.INDEXEDDB);\n      localforage.setDriver(localforage.INDEXEDDB).then(function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can't use unsupported localStorage [callback]","suites":["Driver API"],"updatePoint":{"line":78,"column":53,"index":3211},"line":78,"code":"    it(\"can't use unsupported localStorage [callback]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.LOCALSTORAGE);\n      localforage.setDriver(localforage.LOCALSTORAGE, null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can't use unsupported localStorage [promise]","suites":["Driver API"],"updatePoint":{"line":86,"column":52,"index":3567},"line":86,"code":"    it(\"can't use unsupported localStorage [promise]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.LOCALSTORAGE);\n      localforage.setDriver(localforage.LOCALSTORAGE).then(null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active localStorage [callback]","suites":["Driver API"],"updatePoint":{"line":95,"column":54,"index":4036},"line":95,"code":"    it('can set already active localStorage [callback]', function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.be(localforage.LOCALSTORAGE);\n      localforage.setDriver(localforage.LOCALSTORAGE, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active localStorage [promise]","suites":["Driver API"],"updatePoint":{"line":103,"column":53,"index":4383},"line":103,"code":"    it('can set already active localStorage [promise]', function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.be(localforage.LOCALSTORAGE);\n      localforage.setDriver(localforage.LOCALSTORAGE).then(function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can't use unsupported WebSQL [callback]","suites":["Driver API"],"updatePoint":{"line":113,"column":47,"index":4784},"line":113,"code":"    it(\"can't use unsupported WebSQL [callback]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.WEBSQL);\n      localforage.setDriver(localforage.WEBSQL, null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can't use unsupported WebSQL [promise]","suites":["Driver API"],"updatePoint":{"line":121,"column":46,"index":5122},"line":121,"code":"    it(\"can't use unsupported WebSQL [promise]\", function (done) {\n      var previousDriver = localforage.driver();\n      expect(previousDriver).to.not.be(localforage.WEBSQL);\n      localforage.setDriver(localforage.WEBSQL).then(null, function () {\n        expect(localforage.driver()).to.be(previousDriver);\n        done();\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active WebSQL [callback]","suites":["Driver API"],"updatePoint":{"line":130,"column":48,"index":5478},"line":130,"code":"    it('can set already active WebSQL [callback]', function (done) {\n      localforage.setDriver(localforage.WEBSQL, function () {\n        var previousDriver = localforage.driver();\n        expect(previousDriver).to.be(localforage.WEBSQL);\n        localforage.setDriver(localforage.WEBSQL, function () {\n          expect(localforage.driver()).to.be(previousDriver);\n          done();\n        });\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can set already active WebSQL [promise]","suites":["Driver API"],"updatePoint":{"line":140,"column":47,"index":5891},"line":140,"code":"    it('can set already active WebSQL [promise]', function (done) {\n      localforage.setDriver(localforage.WEBSQL).then(function () {\n        var previousDriver = localforage.driver();\n        expect(previousDriver).to.be(localforage.WEBSQL);\n        localforage.setDriver(localforage.WEBSQL).then(function () {\n          expect(localforage.driver()).to.be(previousDriver);\n          done();\n        });\n      });\n    });","file":"test.drivers.js","skipped":false,"dir":"test"},{"name":"can run localForage in an iFrame","suites":["Inside iFrames"],"updatePoint":{"line":17,"column":38,"index":616},"line":17,"code":"  it('can run localForage in an iFrame', function (done) {\n    var timer = setInterval(function () {\n      var element = window.document.getElementById('iframe').contentWindow.document.getElementById('my-text');\n      if (element && element.innerHTML) {\n        clearInterval(timer);\n        expect(element.innerHTML).to.be('I have been set');\n        done();\n      }\n    }, 10);\n  });","file":"test.iframes.js","skipped":false,"dir":"test"},{"name":"agrees with Modernizr on storage drivers support","suites":["When No Drivers Are Available"],"updatePoint":{"line":6,"column":54,"index":280},"line":6,"code":"  it('agrees with Modernizr on storage drivers support', function () {\n    /* Used version of Modernizr doesn't support dissabling INDEXEDDB */\n    expect(localforage.supports(localforage.INDEXEDDB)).to.be(false);\n    expect(localforage.supports(localforage.LOCALSTORAGE)).to.be(false);\n    expect(localforage.supports(localforage.LOCALSTORAGE)).to.be(Modernizr.localstorage);\n    expect(localforage.supports(localforage.WEBSQL)).to.be(false);\n    expect(localforage.supports(localforage.WEBSQL)).to.be(Modernizr.websqldatabase);\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"fails to load localForage [callback]","suites":["When No Drivers Are Available"],"updatePoint":{"line":14,"column":42,"index":804},"line":14,"code":"  it('fails to load localForage [callback]', function (done) {\n    localforage.ready(function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"fails to load localForage [promise]","suites":["When No Drivers Are Available"],"updatePoint":{"line":21,"column":41,"index":1039},"line":21,"code":"  it('fails to load localForage [promise]', function (done) {\n    localforage.ready().then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"has no driver set","suites":["When No Drivers Are Available"],"updatePoint":{"line":28,"column":23,"index":1269},"line":28,"code":"  it('has no driver set', function (done) {\n    localforage.ready(function () {\n      expect(localforage.driver()).to.be(null);\n      done();\n    });\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"fails to setDriver using array parameter [callback]","suites":["When No Drivers Are Available"],"updatePoint":{"line":50,"column":57,"index":2079},"line":50,"code":"  it('fails to setDriver using array parameter [callback]', function (done) {\n    localforage.setDriver(DRIVERS, null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"fails to setDriver using array parameter [promise]","suites":["When No Drivers Are Available"],"updatePoint":{"line":57,"column":56,"index":2348},"line":57,"code":"  it('fails to setDriver using array parameter [promise]', function (done) {\n    localforage.setDriver(DRIVERS).then(null, function (err) {\n      expect(err).to.be.an(Error);\n      expect(err.message).to.be('No available storage method found.');\n      done();\n    });\n  });","file":"test.nodriver.js","skipped":false,"dir":"test"},{"name":"doesn't have service worker support","suites":[],"line":19,"code":"      it.skip(\"doesn't have service worker support\");","file":"test.serviceworkers.js","skipped":true,"dir":"test"},{"name":"doesn't have MessageChannel support","suites":[],"line":26,"code":"      it.skip(\"doesn't have MessageChannel support\");","file":"test.serviceworkers.js","skipped":true,"dir":"test"},{"name":"should set a value on registration","suites":[],"updatePoint":{"line":53,"column":43,"index":2197},"line":53,"code":"    xit('should set a value on registration', function (done) {\n      navigator.serviceWorker.ready.then(function () {\n        return localforage.getItem('service worker registration');\n      }).then(function (result) {\n        expect(result).to.equal('serviceworker present');\n        done();\n      }).catch(function (error) {\n        done(error);\n      });\n    });","skipped":true,"file":"test.serviceworkers.js","dir":"test"},{"name":"saves data","suites":[],"updatePoint":{"line":63,"column":18,"index":2539},"line":63,"code":"    it('saves data', function (done) {\n      var messageChannel = new MessageChannel();\n      messageChannel.port1.onmessage = function (event) {\n        expect(event.data.body).to.be('I have been set using ' + driverName);\n        done();\n      };\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.active.postMessage({\n          driver: driverName,\n          value: 'I have been set'\n        }, [messageChannel.port2]);\n      }).catch(function (error) {\n        done(error);\n      });\n    });","file":"test.serviceworkers.js","skipped":false,"dir":"test"},{"name":"doesn't have web worker support","suites":[],"line":19,"code":"      it.skip(\"doesn't have web worker support\");","file":"test.webworkers.js","skipped":true,"dir":"test"},{"name":"saves data","suites":[],"updatePoint":{"line":26,"column":18,"index":1130},"line":26,"code":"    it('saves data', function (done) {\n      var webWorker = new Worker('/test/webworker-client.js');\n      webWorker.addEventListener('message', function (e) {\n        var body = e.data.body;\n        window.console.log(body);\n        expect(body).to.be('I have been set');\n        done();\n      });\n      webWorker.addEventListener('error', function (e) {\n        window.console.log(e);\n      });\n      webWorker.postMessage({\n        driver: driverName,\n        value: 'I have been set'\n      });\n    });","file":"test.webworkers.js","skipped":false,"dir":"test"}]}