{"repo":"floating-ui/floating-ui","url":"https://github.com/floating-ui/floating-ui","branch":"master","configs":[{"package":"@floating-ui/core","lang":"ts","dir":"packages/core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@floating-ui/dom","lang":"js","dir":"packages/dom/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@floating-ui/react-dom","lang":"js","dir":"packages/react-dom/test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"bottom","suites":[],"updatePoint":{"line":6,"column":12},"line":6,"code":"test('bottom', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'bottom'})\n  ).toEqual({x: 25, y: 100});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"bottom-start","suites":[],"updatePoint":{"line":12,"column":18},"line":12,"code":"test('bottom-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'bottom-start'})\n  ).toEqual({x: 0, y: 100});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"bottom-end","suites":[],"updatePoint":{"line":18,"column":16},"line":18,"code":"test('bottom-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'bottom-end'})\n  ).toEqual({x: 50, y: 100});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top","suites":[],"updatePoint":{"line":24,"column":9},"line":24,"code":"test('top', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'top'})\n  ).toEqual({x: 25, y: -50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-start","suites":[],"updatePoint":{"line":30,"column":15},"line":30,"code":"test('top-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'top-start'})\n  ).toEqual({x: 0, y: -50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-end","suites":[],"updatePoint":{"line":36,"column":13},"line":36,"code":"test('top-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'top-end'})\n  ).toEqual({x: 50, y: -50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right","suites":[],"updatePoint":{"line":42,"column":11},"line":42,"code":"test('right', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'right'})\n  ).toEqual({x: 100, y: 25});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right-start","suites":[],"updatePoint":{"line":48,"column":17},"line":48,"code":"test('right-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'right-start'})\n  ).toEqual({x: 100, y: 0});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right-end","suites":[],"updatePoint":{"line":54,"column":15},"line":54,"code":"test('right-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'right-end'})\n  ).toEqual({x: 100, y: 50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left","suites":[],"updatePoint":{"line":60,"column":10},"line":60,"code":"test('left', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'left'})\n  ).toEqual({x: -50, y: 25});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left-start","suites":[],"updatePoint":{"line":66,"column":16},"line":66,"code":"test('left-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'left-start'})\n  ).toEqual({x: -50, y: 0});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left-end","suites":[],"updatePoint":{"line":72,"column":14},"line":72,"code":"test('left-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating, placement: 'left-end'})\n  ).toEqual({x: -50, y: 50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"returned data","suites":[],"updatePoint":{"line":15,"column":19},"line":15,"code":"test('returned data', async () => {\n  const {x, y, placement, strategy, middlewareData} = await computePosition(\n    reference,\n    floating,\n    {\n      placement: 'top',\n      middleware: [{name: 'custom', fn: () => ({data: {property: true}})}],\n      // @ts-ignore - computePosition() only uses this property\n      platform,\n    }\n  );\n\n  expect(placement).toBe('top');\n  expect(strategy).toBe('absolute');\n  expect(x).toBe(25);\n  expect(y).toBe(-50);\n  expect(middlewareData).toEqual({\n    custom: {\n      property: true,\n    },\n  });\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"middleware","suites":[],"updatePoint":{"line":38,"column":16},"line":38,"code":"test('middleware', async () => {\n  const {x, y} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n  });\n\n  const {x: x2, y: y2} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n    middleware: [\n      {\n        name: 'test',\n        fn: ({x, y}) => ({x: x + 1, y: y + 1}),\n      },\n    ],\n  });\n\n  expect([x2, y2]).toEqual([x + 1, y + 1]);\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"middlewareData","suites":[],"updatePoint":{"line":58,"column":20},"line":58,"code":"test('middlewareData', async () => {\n  const {middlewareData} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n    middleware: [\n      {\n        name: 'test',\n        fn: () => ({\n          data: {\n            hello: true,\n          },\n        }),\n      },\n    ],\n  });\n\n  expect(middlewareData.test).toEqual({hello: true});\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"base placement","suites":[],"updatePoint":{"line":3,"column":20},"line":3,"code":"test('base placement', () => {\n  expect(\n    getPlacementList(null, false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n    ])\n  ).toEqual(['top', 'bottom', 'left', 'right']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"start alignment without auto alignment","suites":[],"updatePoint":{"line":16,"column":44},"line":16,"code":"test('start alignment without auto alignment', () => {\n  expect(\n    getPlacementList('start', false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['top-start', 'left-start']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"start alignment with auto alignment","suites":[],"updatePoint":{"line":30,"column":41},"line":30,"code":"test('start alignment with auto alignment', () => {\n  expect(\n    getPlacementList('start', true, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['top-start', 'left-start', 'right-end']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"end alignment without auto alignment","suites":[],"updatePoint":{"line":44,"column":42},"line":44,"code":"test('end alignment without auto alignment', () => {\n  expect(\n    getPlacementList('end', false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['right-end']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"end alignment with auto alignment","suites":[],"updatePoint":{"line":58,"column":39},"line":58,"code":"test('end alignment with auto alignment', () => {\n  expect(\n    getPlacementList('end', true, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['right-end', 'top-start', 'left-start']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-start","suites":[],"updatePoint":{"line":3,"column":15},"line":3,"code":"test('top-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom-start","suites":[],"updatePoint":{"line":10,"column":18},"line":10,"code":"test('bottom-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 610;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right-start","suites":[],"updatePoint":{"line":24,"column":17},"line":24,"code":"test('right-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left-start","suites":[],"updatePoint":{"line":38,"column":16},"line":38,"code":"test('left-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"top","suites":[],"updatePoint":{"line":52,"column":9},"line":52,"code":"test('top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom","suites":[],"updatePoint":{"line":59,"column":12},"line":59,"code":"test('bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 650;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right","suites":[],"updatePoint":{"line":73,"column":11},"line":73,"code":"test('right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 600;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left","suites":[],"updatePoint":{"line":87,"column":10},"line":87,"code":"test('left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 400;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"top-end","suites":[],"updatePoint":{"line":101,"column":13},"line":101,"code":"test('top-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom-end","suites":[],"updatePoint":{"line":108,"column":16},"line":108,"code":"test('bottom-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 610;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right-end","suites":[],"updatePoint":{"line":122,"column":15},"line":122,"code":"test('right-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left-end","suites":[],"updatePoint":{"line":136,"column":14},"line":136,"code":"test('left-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"only top, bottom allowed","suites":[],"updatePoint":{"line":150,"column":30},"line":150,"code":"test('only top, bottom allowed', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await click(page, `[data-testid=\"allowedPlacements-top,bottom\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 700;\n      scroll.scrollTop = 650;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-bottom.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 700;\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-top.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"only left, right allowed","suites":[],"updatePoint":{"line":175,"column":30},"line":175,"code":"test('only left, right allowed', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await click(page, `[data-testid=\"allowedPlacements-left,right\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 550;\n      scroll.scrollTop = 750;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-right.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 500;\n      scroll.scrollTop = 750;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-left.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  has a border","suites":[],"updatePoint":{"line":4,"column":64},"line":4,"code":"  test(`correctly positioned on bottom when ${node} has a border`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/border');\n    await click(page, `[data-testid=\"border-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/border.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"arrow should be centered to the reference ","suites":[],"updatePoint":{"line":4,"column":64},"line":4,"code":"  test(`arrow should be centered to the reference ${decimalSize}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/decimal-size');\n    await click(page, `[data-testid=\"decimal-size-${decimalSize}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`decimal-size-${decimalSize}.png`);\n  });","file":"functional/decimal-size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `mainAxis` is false","suites":[],"updatePoint":{"line":3,"column":44},"line":3,"code":"test('does not flip when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-false.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does flip when `mainAxis` is true","suites":[],"updatePoint":{"line":17,"column":39},"line":17,"code":"test('does flip when `mainAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"mainAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-true.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `crossAxis` is false","suites":[],"updatePoint":{"line":31,"column":45},"line":31,"code":"test('does not flip when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"crossAxis-false\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-false.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does flip when `crossAxis` is true","suites":[],"updatePoint":{"line":46,"column":40},"line":46,"code":"test('does flip when `crossAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-true.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `fallbackPlacements` is an empty array","suites":[],"updatePoint":{"line":61,"column":63},"line":61,"code":"test('does not flip when `fallbackPlacements` is an empty array', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackPlacements-[]\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackPlacements-empty-array.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackPlacements: all","suites":[],"updatePoint":{"line":75,"column":29},"line":75,"code":"test('fallbackPlacements: all', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"placement-top-start\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-all-top-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 675;\n      scroll.scrollTop = 585;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-top.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 585;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-top-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 700;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 775;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 825;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 375;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 325;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 450;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 400;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left-start.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackStrategy: \"bestFit\"","suites":[],"updatePoint":{"line":182,"column":33},"line":182,"code":"test('fallbackStrategy: \"bestFit\"', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackStrategy-bestFit\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 300;\n      scroll.scrollTop = 315;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bestFit.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackStrategy: \"initialPlacement\"","suites":[],"updatePoint":{"line":197,"column":42},"line":197,"code":"test('fallbackStrategy: \"initialPlacement\"', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackStrategy-initialPlacement\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 300;\n      scroll.scrollTop = 315;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-initialPlacement.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"yellow once it has escaped","suites":[],"updatePoint":{"line":2,"column":32},"line":2,"code":"test('yellow once it has escaped', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 450;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-escaped.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"black once reference is hidden","suites":[],"updatePoint":{"line":15,"column":36},"line":15,"code":"test('black once reference is hidden', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 300;\n    }\n  });\n  expect(await page.locator('main').screenshot()).toMatchSnapshot(`hide-reference-hidden.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"not black or yellow while still within bounds","suites":[],"updatePoint":{"line":28,"column":51},"line":28,"code":"test('not black or yellow while still within bounds', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 908;\n      scroll.scrollLeft = 264;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-within-bounds.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"black while reference is hidden, without escaping","suites":[],"updatePoint":{"line":42,"column":55},"line":42,"code":"test('black while reference is hidden, without escaping', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 920;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-reference-hidden-no-escape.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on bottom","suites":[],"updatePoint":{"line":11,"column":48},"line":11,"code":"test('chooses right client rect placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on top","suites":[],"updatePoint":{"line":20,"column":45},"line":20,"code":"test('chooses right client rect placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on bottom","suites":[],"updatePoint":{"line":30,"column":47},"line":30,"code":"test('chooses left client rect placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on top","suites":[],"updatePoint":{"line":39,"column":44},"line":39,"code":"test('chooses left client rect placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on top when it would not fit on top of right rect","suites":[],"updatePoint":{"line":49,"column":87},"line":49,"code":"test('chooses left client rect placed on top when it would not fit on top of right rect', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await page.evaluate('window.scrollBy(0, 275)');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-top-when-right-top-no-fit.png');\n}); // FIXME: chooses left rect unexpectedly","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on the right","suites":[],"line":61,"code":"test.skip('chooses right client rect placed on the right', async ({","file":"functional/inline.test.ts","skipped":true,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on the right","suites":[],"updatePoint":{"line":71,"column":50},"line":71,"code":"test('chooses left client rect placed on the right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-right\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-right.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on the left","suites":[],"updatePoint":{"line":81,"column":50},"line":81,"code":"test('chooses right client rect placed on the left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on the left","suites":[],"updatePoint":{"line":91,"column":49},"line":91,"code":"test('chooses left client rect placed on the left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on top","suites":[],"updatePoint":{"line":101,"column":29},"line":101,"code":"test('connected placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on bottom","suites":[],"updatePoint":{"line":112,"column":32},"line":112,"code":"test('connected placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on left","suites":[],"updatePoint":{"line":122,"column":30},"line":122,"code":"test('connected placed on left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on right","suites":[],"updatePoint":{"line":133,"column":31},"line":133,"code":"test('connected placed on right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-right\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-right.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords","suites":[],"updatePoint":{"line":144,"column":62},"line":144,"code":"test('chooses rect based on placement without any mouse coords', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('first-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords bottom","suites":[],"updatePoint":{"line":153,"column":69},"line":153,"code":"test('chooses rect based on placement without any mouse coords bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"open-true\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords top","suites":[],"updatePoint":{"line":160,"column":66},"line":160,"code":"test('chooses rect based on placement without any mouse coords top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"open-true\"]');\n  await click(page, '[data-testid=\"placement-top\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly centers over two rects","suites":[],"updatePoint":{"line":168,"column":38},"line":168,"code":"test('correctly centers over two rects', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await click(page, '[data-testid=\"connected-3\"]');\n  await click(page, '[data-testid=\"open-true\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-connected-3.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly offset  for placement ","suites":[],"updatePoint":{"line":5,"column":61},"line":5,"code":"    test(`correctly offset ${name} for placement ${placement}`, async ({\n      page\n    }) => {\n      await page.goto('http://localhost:1234/offset');\n      await click(page, `[data-testid=\"offset-${name}\"]`);\n      await click(page, `[data-testid=\"placement-${placement}\"]`);\n      expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${name}-${placement}.png`);\n    });","file":"functional/offset.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  is an offsetParent","suites":[],"updatePoint":{"line":4,"column":70},"line":4,"code":"  test(`correctly positioned on bottom when ${node} is an offsetParent`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/relative');\n    await click(page, `[data-testid=\"relative-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/relative.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  is scrolled","suites":[],"updatePoint":{"line":4,"column":63},"line":4,"code":"  test(`correctly positioned on bottom when ${node} is scrolled`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/scroll');\n    await click(page, `[data-testid=\"scroll-${node}\"]`);\n\n    if (node === 'body') {\n      await page.evaluate(() => window.scrollTo(0, 200));\n    }\n\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n    await click(page, `[data-testid=\"strategy-fixed\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}--fixed.png`);\n  });","file":"functional/scroll.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly avoids scrollbar at ","suites":[],"updatePoint":{"line":4,"column":50},"line":4,"code":"  test(`correctly avoids scrollbar at ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/scrollbars');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}.png`);\n    await click(page, '[data-testid=\"rtl-true\"]');\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}--rtl.png`);\n  });","file":"functional/scrollbars.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not shift when `mainAxis` is false","suites":[],"updatePoint":{"line":3,"column":45},"line":3,"code":"test('does not shift when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does shift when `mainAxis` is true","suites":[],"updatePoint":{"line":17,"column":40},"line":17,"code":"test('does shift when `mainAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"mainAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-true.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not shift when `crossAxis` is false","suites":[],"updatePoint":{"line":31,"column":46},"line":31,"code":"test('does not shift when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does shift when `crossAxis` is true","suites":[],"updatePoint":{"line":45,"column":41},"line":45,"code":"test('does shift when `crossAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-true.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (origin)","suites":[],"updatePoint":{"line":59,"column":100},"line":59,"code":"test('stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (origin)', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 150;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift-origin.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (non-origin)","suites":[],"updatePoint":{"line":73,"column":104},"line":73,"code":"test('stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (non-origin)', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 900;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift-non-origin.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting on the crossAxis once opposite edges are aligned when `limitShift` is used as `limiter`","suites":[],"updatePoint":{"line":87,"column":108},"line":87,"code":"test('stops shifting on the crossAxis once opposite edges are aligned when `limitShift` is used as `limiter`', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 250;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.crossAxis.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift does not limit shift when `crossAxis` is false","suites":[],"updatePoint":{"line":102,"column":63},"line":102,"code":"test('limitShift does not limit shift when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"limitShift.crossAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollTop = 250;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.crossAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift does not limit shift when `mainAxis` is false","suites":[],"updatePoint":{"line":118,"column":62},"line":118,"code":"test('limitShift does not limit shift when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await click(page, `[data-testid=\"limitShift.mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n\n    if (scroll) {\n      scroll.scrollLeft = 900;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.mainAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift.offset works for value  ","suites":[],"updatePoint":{"line":159,"column":64},"line":159,"code":"    test(`limitShift.offset works for value ${name} ${placement}`, async ({\n      page\n    }) => {\n      await page.goto('http://localhost:1234/shift');\n      await click(page, `[data-testid=\"placement-${placement}\"]`);\n      await click(page, `[data-testid=\"crossAxis-true\"]`);\n      await click(page, `[data-testid=\"limitShift-true\"]`);\n      await click(page, `[data-testid=\"limitShift.offset-${name}\"]`);\n      await page.evaluate(scrollOffsets => {\n        const scroll = document.querySelector('.scroll');\n\n        if (scroll) {\n          Object.assign(scroll, scrollOffsets);\n        }\n      }, scrollOffsets);\n      expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.offset-${name === '-50' ? 'neg50' : name}-${placement}.png`);\n    });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"offset is correctly added when limitShift is enabled ","suites":[],"updatePoint":{"line":179,"column":73},"line":179,"code":"  test(`offset is correctly added when limitShift is enabled ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/shift');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await click(page, `[data-testid=\"offset-10\"]`);\n    await click(page, `[data-testid=\"limitShift-true\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`offset-and-limitShift-${placement}.png`);\n  });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"offset is correctly added when limitShift is enabled  crossAxis stop check","suites":[],"updatePoint":{"line":188,"column":94},"line":188,"code":"  test(`offset is correctly added when limitShift is enabled ${placement} crossAxis stop check`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/shift');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await click(page, `[data-testid=\"offset-10\"]`);\n    await click(page, `[data-testid=\"crossAxis-true\"]`);\n    await click(page, `[data-testid=\"limitShift-true\"]`);\n    await page.evaluate(scrollTop => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollTop = scrollTop;\n      }\n    }, placement === 'bottom' ? 260 : 950);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`offset-and-limitShift-stop-check-${placement}.png`);\n  });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly sized for placement ","suites":[],"updatePoint":{"line":5,"column":50},"line":5,"code":"  test(`correctly sized for placement ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 525;\n        scroll.scrollTop = 605;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not overflow due to size ","suites":[],"updatePoint":{"line":22,"column":58},"line":22,"code":"  test(`does not overflow due to size ${verticalPlacement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${verticalPlacement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 650;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-left-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 575;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-left-end.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 400;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-right-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 500;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-right-end.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not overflow due to size ","suites":[],"updatePoint":{"line":62,"column":60},"line":62,"code":"  test(`does not overflow due to size ${horizontalPlacement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${horizontalPlacement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollTop = 725;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-top-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollTop = 650;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-top-end.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollTop = 475;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-bottom-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n\n      if (scroll) {\n        scroll.scrollLeft = 575;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-bottom-end.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom for ","suites":[],"updatePoint":{"line":4,"column":50},"line":4,"code":"  test(`correctly positioned on bottom for ${node}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/table');\n    await click(page, `[data-testid=\"reference-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n    await click(page, `[data-testid=\"inside-true\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}-inside.png`);\n  });","file":"functional/table.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  has a border","suites":[],"updatePoint":{"line":4,"column":64},"line":4,"code":"  test(`correctly positioned on bottom when ${node} has a border`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/transform');\n    await click(page, `[data-testid=\"transform-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/transform.test.ts","skipped":false,"dir":"packages/dom/test"}]}