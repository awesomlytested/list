{
    "repo": "lesspass/lesspass",
    "url": "https://github.com/lesspass/lesspass",
    "branch": "main",
    "configs": [
        {
            "package": "lesspass-entropy",
            "lang": "js",
            "dir": "packages/lesspass-entropy/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "lesspass-fingerprint",
            "lang": "js",
            "dir": "packages/lesspass-fingerprint/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "lesspass-pure",
            "lang": "js",
            "dir": "packages/lesspass-pure/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "lesspass-render-password",
            "lang": "js",
            "dir": "packages/lesspass-render-password/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "calc entropy without crypto use default options and crypto",
            "suites": [
                "entropy"
            ],
            "updatePoint": {
                "line": 9,
                "column": 64
            },
            "line": 9,
            "code": "  it(\"calc entropy without crypto use default options and crypto\", () => {\n    const profile = {\n      site: \"example.org\",\n      login: \"contact@example.org\"\n    };\n    const masterPassword = \"password\";\n    return calcEntropy(profile, masterPassword).then(entropy => {\n      assert.equal(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", entropy);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "calc entropy pbkdf2 with default params (100000 iterations, 32 bytes length, sha256 digest)",
            "suites": [
                "entropy"
            ],
            "updatePoint": {
                "line": 19,
                "column": 97
            },
            "line": 19,
            "code": "  it(\"calc entropy pbkdf2 with default params (100000 iterations, 32 bytes length, sha256 digest)\", () => {\n    const profile = {\n      site: \"example.org\",\n      login: \"contact@example.org\",\n      options: {\n        counter: 1\n      },\n      crypto: {\n        method: \"pbkdf2\",\n        iterations: 100000,\n        keylen: 32,\n        digest: \"sha256\"\n      }\n    };\n    const masterPassword = \"password\";\n    return calcEntropy(profile, masterPassword).then(entropy => {\n      assert.equal(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", entropy);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "calc entropy pbkdf2 with unicode char",
            "suites": [
                "entropy"
            ],
            "updatePoint": {
                "line": 38,
                "column": 43
            },
            "line": 38,
            "code": "  it(\"calc entropy pbkdf2 with unicode char\", () => {\n    const profile = {\n      site: \"example.org\",\n      login: \"❤\",\n      options: {\n        counter: 1\n      },\n      crypto: {\n        method: \"pbkdf2\",\n        iterations: 100000,\n        keylen: 32,\n        digest: \"sha256\"\n      }\n    };\n    const masterPassword = \"I ❤ LessPass\";\n    return calcEntropy(profile, masterPassword).then(entropy => {\n      assert.equal(\"4e66cab40690c01af55efd595f5963cc953d7e10273c01827881ebf8990c627f\", entropy);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "calc entropy with different options (8192 iterations, 16 bytes length, sha512 digest)",
            "suites": [
                "entropy"
            ],
            "updatePoint": {
                "line": 57,
                "column": 91
            },
            "line": 57,
            "code": "  it(\"calc entropy with different options (8192 iterations, 16 bytes length, sha512 digest)\", () => {\n    const profile = {\n      site: \"example.org\",\n      login: \"contact@example.org\",\n      options: {\n        counter: 1\n      },\n      crypto: {\n        method: \"pbkdf2\",\n        iterations: 8192,\n        keylen: 16,\n        digest: \"sha512\"\n      }\n    };\n    const masterPassword = \"password\";\n    return calcEntropy(profile, masterPassword).then(entropy => {\n      assert.equal(\"fff211c16a4e776b3574c6a5c91fd252\", entropy);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "calc entropy different if counter different 1",
            "suites": [
                "entropy"
            ],
            "updatePoint": {
                "line": 76,
                "column": 51
            },
            "line": 76,
            "code": "  it(\"calc entropy different if counter different 1\", () => {\n    const profile = {\n      site: \"example.org\",\n      login: \"contact@example.org\",\n      options: {\n        counter: 1\n      },\n      crypto: {\n        method: \"pbkdf2\",\n        iterations: 100000,\n        keylen: 32,\n        digest: \"sha256\"\n      }\n    };\n    const profile2 = {\n      site: \"example.org\",\n      login: \"contact@example.org\",\n      options: {\n        counter: 2\n      },\n      crypto: {\n        method: \"pbkdf2\",\n        iterations: 100000,\n        keylen: 32,\n        digest: \"sha256\"\n      }\n    };\n    const promises = [calcEntropy(profile, \"password\"), calcEntropy(profile2, \"password\")];\n    Promise.all(promises).then(values => {\n      assert.notEqual(values[0], values[1]);\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "isSupported",
            "suites": [
                "isSupported"
            ],
            "updatePoint": {
                "line": 110,
                "column": 17
            },
            "line": 110,
            "code": "  it(\"isSupported\", () => isSupported().then(supported => {\n    assert(supported);\n  }));",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "secret, salt, 2 iterations, 32 keylen, sha256 hash",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 6,
                "column": 56
            },
            "line": 6,
            "code": "  it(\"secret, salt, 2 iterations, 32 keylen, sha256 hash\", () => pbkdf2(\"secret\", \"salt\", 2, 32, \"sha256\").then(key => {\n    assert.equal(\"f92f45f9df4c2aeabae1ed3c16f7b64660c1f8e377fa9b4699b23c2c3a29f569\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "use pbkdf2 with 8192 iterations and sha256",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 9,
                "column": 48
            },
            "line": 9,
            "code": "  it(\"use pbkdf2 with 8192 iterations and sha256\", () => pbkdf2(\"password\", \"test@example.org\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"d8af5f918db6b65b1db3d3984e5a400e39e1dbb19462220e4431de283809f472\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "customize number of iterations",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 12,
                "column": 36
            },
            "line": 12,
            "code": "  it(\"customize number of iterations\", () => pbkdf2(\"password\", \"test@example.org\", 4096, 32, \"sha256\").then(key => {\n    assert.equal(\"0a91208545e3aa4935d3a22984ca097a7669259a04d261ac16361bdc1a2e960f\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "customize key length",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 15,
                "column": 26
            },
            "line": 15,
            "code": "  it(\"customize key length\", () => pbkdf2(\"password\", \"test@example.org\", 8192, 16, \"sha256\").then(key => {\n    assert.equal(\"d8af5f918db6b65b1db3d3984e5a400e\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "customize iterations and key length",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 18,
                "column": 41
            },
            "line": 18,
            "code": "  it(\"customize iterations and key length\", () => pbkdf2(\"password\", \"test@example.org\", 4096, 16, \"sha256\").then(key => {\n    assert.equal(\"0a91208545e3aa4935d3a22984ca097a\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "utf8 parameter",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 21,
                "column": 20
            },
            "line": 21,
            "code": "  it(\"utf8 parameter\", () => pbkdf2(\"♥ LessPass ♥\", \"test@example.org\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"997fe81d3d0db236e039c75efdb487f17a902fdf94f9dacaa9884329c85d9651\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 0",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 24,
                "column": 27
            },
            "line": 24,
            "code": "  it(\"auto generated test 0\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 1",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 27,
                "column": 27
            },
            "line": 27,
            "code": "  it(\"auto generated test 1\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 2",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 30,
                "column": 27
            },
            "line": 30,
            "code": "  it(\"auto generated test 2\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 3",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 33,
                "column": 27
            },
            "line": 33,
            "code": "  it(\"auto generated test 3\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 4",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 36,
                "column": 27
            },
            "line": 36,
            "code": "  it(\"auto generated test 4\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 5",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 39,
                "column": 27
            },
            "line": 39,
            "code": "  it(\"auto generated test 5\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 6",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 42,
                "column": 27
            },
            "line": 42,
            "code": "  it(\"auto generated test 6\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 7",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 45,
                "column": 27
            },
            "line": 45,
            "code": "  it(\"auto generated test 7\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 8",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 48,
                "column": 27
            },
            "line": 48,
            "code": "  it(\"auto generated test 8\", () => pbkdf2(\"password\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"63d850713d0b2f7f2c4396fe93f4ac0c6bc7485f9e7473c4b8c4a33ec12199c0\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 9",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 51,
                "column": 27
            },
            "line": 51,
            "code": "  it(\"auto generated test 9\", () => pbkdf2(\"password\", \"lesspass\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"7d05ee25597dcc3ac16d082aa910e7707f75be620ed8db5bef7245e2a8579116\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "auto generated test 10",
            "suites": [
                "pbkdf2"
            ],
            "updatePoint": {
                "line": 54,
                "column": 28
            },
            "line": 54,
            "code": "  it(\"auto generated test 10\", () => pbkdf2(\"password2\", \"contact@lesspass.com\", 8192, 32, \"sha256\").then(key => {\n    assert.equal(\"ce853092fc54fe88c281e38df97bd5826d64e6bee315dc94939cbba8930df0e4\", key);\n  }));",
            "file": "pbkdf2.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "stringToArrayBuffer",
            "suites": [
                "stringEncoding"
            ],
            "updatePoint": {
                "line": 9,
                "column": 25
            },
            "line": 9,
            "code": "  it(\"stringToArrayBuffer\", () => {\n    assert.equal(stringToArrayBuffer(\"ȧ\")[0], 200);\n    assert.equal(stringToArrayBuffer(\"ȧ\")[1], 167);\n  });",
            "file": "stringEncoding.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "arrayBufferToHex",
            "suites": [
                "stringEncoding"
            ],
            "updatePoint": {
                "line": 13,
                "column": 22
            },
            "line": 13,
            "code": "  it(\"arrayBufferToHex\", () => {\n    assert.equal(arrayBufferToHex(new Uint8Array([200, 167])), \"c8a7\");\n  });",
            "file": "stringEncoding.test.js",
            "skipped": false,
            "dir": "packages/lesspass-entropy/test"
        },
        {
            "name": "createHmac",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 9,
                "column": 16
            },
            "line": 9,
            "code": "  it(\"createHmac\", () => createHmac(\"sha256\", \"password\").then(fingerprint => {\n    assert.equal(\"e56a207acd1e6714735487c199c6f095844b7cc8e5971d86c003a7b6f36ef51e\", fingerprint);\n  }));",
            "file": "api.test.js",
            "skipped": false,
            "dir": "packages/lesspass-fingerprint/test"
        },
        {
            "name": "createHmac and update",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 12,
                "column": 27
            },
            "line": 12,
            "code": "  it(\"createHmac and update\", () => createHmac(\"sha256\", \"password\", \"salt\").then(fingerprint => {\n    assert.equal(\"fc328232993ff34ca56631e4a101d60393cad12171997ee0b562bf7852b2fed0\", fingerprint);\n  }));",
            "file": "api.test.js",
            "skipped": false,
            "dir": "packages/lesspass-fingerprint/test"
        },
        {
            "name": "fingerprint is length of 3",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 15,
                "column": 32
            },
            "line": 15,
            "code": "  it(\"fingerprint is length of 3\", () => {\n    assert.equal(createFingerprint(\"e56a207acd1e6714735487c199c6f095844b7cc8e5971d86c003a7b6f36ef51e\").length, 3);\n  });",
            "file": "api.test.js",
            "skipped": false,
            "dir": "packages/lesspass-fingerprint/test"
        },
        {
            "name": "fingerprint is length of 3",
            "suites": [
                "api"
            ],
            "updatePoint": {
                "line": 18,
                "column": 32
            },
            "line": 18,
            "code": "  it(\"fingerprint is length of 3\", () => {\n    const expectedFingerprint = [{\n      color: \"#FFB5DA\",\n      icon: \"fa-flask\"\n    }, {\n      color: \"#009191\",\n      icon: \"fa-archive\"\n    }, {\n      color: \"#B5DAFE\",\n      icon: \"fa-beer\"\n    }];\n    assert.deepEqual(createFingerprint(\"e56a207acd1e6714735487c199c6f095844b7cc8e5971d86c003a7b6f36ef51e\"), expectedFingerprint);\n  });",
            "file": "api.test.js",
            "skipped": false,
            "dir": "packages/lesspass-fingerprint/test"
        },
        {
            "name": "can save a password profile on connected mode",
            "suites": [
                "Connected Mode"
            ],
            "updatePoint": {
                "line": 2,
                "column": 51
            },
            "line": 2,
            "code": "  it(\"can save a password profile on connected mode\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\".fa-sign-in\").click();\n    cy.get(\"#email\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\");\n    cy.get(\"#fingerprint .fa-cutlery\").should(\"be.visible\");\n    cy.get(\"#fingerprint .fa-subway\").should(\"be.visible\");\n    cy.get(\"#fingerprint .fa-plane\").should(\"be.visible\");\n    cy.get(\"#signInButton\").click();\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"lesspass.com\");\n    cy.get(\"#login\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"hjV@\\\\5ULp3bIs,6B\");\n    cy.get(\".fa-save\").should(\"be.visible\");\n    cy.get(\".fa-user\").first().click();\n    cy.get(\"#signOutButton\").should(\"be.visible\");\n    cy.get(\"#signOutButton\").click();\n    cy.get(\".fa-save\").should(\"not.exist\");\n  });",
            "file": "e2e/specs/connectedMode.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "can log in and log out",
            "suites": [
                "Connected Mode"
            ],
            "updatePoint": {
                "line": 24,
                "column": 28
            },
            "line": 24,
            "code": "  it(\"can log in and log out\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\".fa-sign-in\").click();\n    cy.get(\"#email\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\");\n    cy.wait(1000);\n    cy.get(\"#signInButton\").click();\n    cy.get(\"#siteField\").should(\"be.visible\");\n    cy.get(\".fa-key\").should(\"be.visible\");\n    cy.get(\".fa-user\").first().click();\n    cy.get(\"#signOutButton\").click();\n    cy.get(\".fa-key\").should(\"not.exist\");\n  });",
            "file": "e2e/specs/connectedMode.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "reset password page",
            "suites": [
                "Connected Mode"
            ],
            "updatePoint": {
                "line": 38,
                "column": 25
            },
            "line": 38,
            "code": "  it(\"reset password page\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\".fa-sign-in\").click();\n    cy.get(\"#login__forgot-password-btn\").click();\n    cy.get(\"#password-reset__reset-password-btn\").click();\n  });",
            "file": "e2e/specs/connectedMode.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "use saved profile",
            "suites": [
                "Connected Mode"
            ],
            "updatePoint": {
                "line": 45,
                "column": 23
            },
            "line": 45,
            "code": "  it(\"use saved profile\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\".fa-sign-in\").click();\n    cy.get(\"#email\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\");\n    cy.wait(500);\n    cy.get(\"#signInButton\").click();\n    cy.get(\".fa-key\").click();\n    cy.get(\".passwordProfile__meta\").first().click();\n    cy.get(\"#siteField\").should(\"have.value\", \"example.org\");\n    cy.get(\"#login\").should(\"have.value\", \"contact@example.org\");\n    cy.get(\".fa-user\").first().click();\n    cy.get(\"#signOutButton\").click();\n  });",
            "file": "e2e/specs/connectedMode.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "successfully loads",
            "suites": [
                "LessPass"
            ],
            "updatePoint": {
                "line": 2,
                "column": 24
            },
            "line": 2,
            "code": "  it(\"successfully loads\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n  });",
            "file": "e2e/specs/index.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should focus site field",
            "suites": [
                "LessPass"
            ],
            "updatePoint": {
                "line": 6,
                "column": 29
            },
            "line": 6,
            "code": "  it(\"should focus site field\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.focused().should(\"have.id\", \"siteField\");\n  });",
            "file": "e2e/specs/index.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "can't decrease counter under 0",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 2,
                "column": 36
            },
            "line": 2,
            "code": "  it(\"can't decrease counter under 0\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#decreaseCounter__btn\").click();\n    cy.get(\"#decreaseCounter__btn\").click();\n    cy.get(\"#passwordCounter\").should(\"have.value\", \"1\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should generate the appropriate password",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 9,
                "column": 46
            },
            "line": 9,
            "code": "  it(\"should generate the appropriate password\", function () {\n    function clickAndAssertOption(cy, button, password1, password2) {\n      cy.get(button).click();\n      cy.get(\"#generatePassword__btn\").click();\n      cy.get(\"#generated-password\").should(\"have.value\", password1);\n      cy.get(button).click();\n      cy.get(\"#generatePassword__btn\").click();\n      cy.get(\"#generated-password\").should(\"have.value\", password2);\n    }\n\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"lesspass.com\").tab();\n    cy.get(\"#login\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\");\n    cy.wait(500);\n    cy.get(\"#fingerprint .fa-cutlery\").should(\"be.visible\");\n    cy.get(\"#fingerprint .fa-subway\").should(\"be.visible\");\n    cy.get(\"#fingerprint .fa-plane\").should(\"be.visible\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"hjV@\\\\5ULp3bIs,6B\");\n    cy.get(\"#decreaseLength__btn\").click();\n    cy.get(\"#passwordLength\").should(\"have.value\", \"15\");\n    cy.get(\"#increaseLength__btn\").click();\n    cy.get(\"#increaseLength__btn\").click();\n    cy.get(\"#passwordLength\").should(\"have.value\", \"17\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"hj@r\\\\ULp3Is62@HB~\");\n    cy.get(\"#decreaseLength__btn\").click();\n    cy.get(\"#passwordLength\").should(\"have.value\", \"16\");\n    cy.get(\"#increaseCounter__btn\").click();\n    cy.get(\"#passwordCounter\").should(\"have.value\", \"2\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"#wOxv!q;URh:k82(\");\n    cy.get(\"#passwordCounter\").clear().type(\"1\");\n    clickAndAssertOption(cy, \"#lowercase__btn\", \"^>_9>+}OV?[3[_U,\", \"hjV@\\\\5ULp3bIs,6B\");\n    clickAndAssertOption(cy, \"#uppercase__btn\", \"^>_9>+}ov?[3[_u,\", \"hjV@\\\\5ULp3bIs,6B\");\n    clickAndAssertOption(cy, \"#numbers__btn\", 'jCmMpNy=T.\"+u^ZQ', \"hjV@\\\\5ULp3bIs,6B\");\n    clickAndAssertOption(cy, \"#symbols__btn\", \"XAwlOl5mtjGSY6PA\", \"hjV@\\\\5ULp3bIs,6B\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should have a min length of 5 and max length of 35",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 49,
                "column": 56
            },
            "line": 49,
            "code": "  it(\"should have a min length of 5 and max length of 35\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#passwordLength\").clear().type(\"35\");\n    cy.get(\"#increaseLength__btn\").click();\n    cy.get(\"#passwordLength\").should(\"have.value\", \"35\");\n    cy.get(\"#passwordLength\").clear().type(\"5\");\n    cy.get(\"#decreaseLength__btn\").click();\n    cy.get(\"#passwordLength\").should(\"have.value\", \"5\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should consider counter as string not hex value nrt_328",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 59,
                "column": 61
            },
            "line": 59,
            "code": "  it(\"should consider counter as string not hex value nrt_328\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"site\");\n    cy.get(\"#login\").type(\"login\");\n    cy.get(\"#passwordField\").type(\"test\");\n    cy.get(\"#passwordCounter\").clear().type(\"10\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"XFt0F*,r619:+}[.\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should generate password when hit enter nrt_266",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 69,
                "column": 53
            },
            "line": 69,
            "code": "  it(\"should generate password when hit enter nrt_266\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"lesspass.com\").tab();\n    cy.get(\"#login\").type(\"test@lesspass.com\");\n    cy.get(\"#passwordField\").type(\"test@lesspass.com\").type(\"{enter}\");\n    cy.get(\"#generated-password\").should(\"have.value\", \"hjV@\\\\5ULp3bIs,6B\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should keep site field in sync nrt_441",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 77,
                "column": 44
            },
            "line": 77,
            "code": "  it(\"should keep site field in sync nrt_441\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#login\").type(\"user\");\n    cy.get(\"#passwordField\").type(\"password\");\n    cy.get(\"#siteField\").type(\"subdomain.domain.com\").type(\"{home}\").type(\"{rightarrow}\").type(\"{backspace}\").type(\"{downarrow}\").type(\"{downarrow}\").type(\"{enter}\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#generated-password\").should(\"have.value\", \"ZT^IK2e!t@k$9`*)\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should clear password generated when master password change",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 86,
                "column": 65
            },
            "line": 86,
            "code": "  it(\"should clear password generated when master password change\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"example.org\").tab();\n    cy.get(\"#login\").type(\"user\");\n    cy.get(\"#passwordField\").type(\"password\");\n    cy.get(\"#generatePassword__btn\").should(\"be.visible\");\n    cy.get(\"#generatePassword__btn\").click();\n    cy.get(\"#copyPasswordButton\").should(\"be.visible\");\n    cy.get(\"#generatePassword__btn\").should(\"not.exist\");\n    cy.get(\"#passwordField\").type(\"password\");\n    cy.get(\"#copyPasswordButton\").should(\"not.be.visible\");\n    cy.get(\"#generatePassword__btn\").should(\"be.visible\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should generate password with 2 tabs and enter",
            "suites": [
                "Password Generation"
            ],
            "updatePoint": {
                "line": 100,
                "column": 52
            },
            "line": 100,
            "code": "  it(\"should generate password with 2 tabs and enter\", function () {\n    cy.visit(\"/\");\n    cy.wait(500);\n    cy.get(\"#siteField\").type(\"lesspass.com\").tab().type(\"test@lesspass.com\").tab().type(\"test@lesspass.com\").type(\"{enter}\");\n    cy.get(\"#generated-password\").should(\"have.value\", \"hjV@\\\\5ULp3bIs,6B\");\n  });",
            "file": "e2e/specs/passwordGeneration.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should start with default values",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 20,
                "column": 38
            },
            "line": 20,
            "code": "  it(\"should start with default values\", () => {\n    cy.visit(\"/#/settings\");\n    getLogin().should(\"have.value\", \"\");\n    getLowercase().should(\"be.checked\");\n    getUppercase().should(\"be.checked\");\n    getNumbers().should(\"be.checked\");\n    getSymbols().should(\"be.checked\");\n    getLength().should(\"have.value\", \"16\");\n    getCounter().should(\"have.value\", \"1\");\n    getBaseURL().should(\"have.value\", \"https://api.lesspass.com\");\n    encryptMasterPassword().should(\"be.checked\");\n  });",
            "file": "e2e/specs/settings.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should redirect to the home page when saving",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 32,
                "column": 50
            },
            "line": 32,
            "code": "  it(\"should redirect to the home page when saving\", () => {\n    cy.visit(\"/#/settings\");\n    cy.get(\"#btn-submit-settings\").click();\n    cy.location().should(location => {\n      expect(location.pathname).to.eq(\"/\");\n    });\n  });",
            "file": "e2e/specs/settings.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should update the password generator page after changing the settings",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 39,
                "column": 75
            },
            "line": 39,
            "code": "  it(\"should update the password generator page after changing the settings\", () => {\n    cy.visit(\"/#/settings\");\n    getLogin().clear().type(\"New login\");\n    getLowercase().click();\n    getUppercase().click();\n    getNumbers().click();\n    getSymbols().click();\n    getLength().clear().type(\"5\");\n    getCounter().clear().type(\"2\");\n    cy.get(\"#btn-submit-settings\").click();\n    getLogin().should(\"have.value\", \"New login\");\n    getLowercase().should(\"not.be.checked\");\n    getUppercase().should(\"not.be.checked\");\n    getNumbers().should(\"not.be.checked\");\n    getSymbols().should(\"not.be.checked\");\n    getLength().should(\"have.value\", \"5\");\n    getCounter().should(\"have.value\", \"2\");\n  });",
            "file": "e2e/specs/settings.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "should still show the saved settings when going back to the settings page",
            "suites": [
                "Settings"
            ],
            "updatePoint": {
                "line": 57,
                "column": 79
            },
            "line": 57,
            "code": "  it(\"should still show the saved settings when going back to the settings page\", () => {\n    cy.visit(\"/#/settings\");\n    getLogin().clear().type(\"New login\");\n    getLowercase().click();\n    getUppercase().click();\n    getNumbers().click();\n    getSymbols().click();\n    getLength().clear().type(\"5\");\n    getCounter().clear().type(\"2\");\n    getBaseURL().clear().type(\"https://api.example.org\");\n    encryptMasterPassword().click();\n    cy.get(\"#btn-submit-settings\").click();\n    cy.visit(\"/#/settings\");\n    getLogin().should(\"have.value\", \"New login\");\n    getLowercase().should(\"not.be.checked\");\n    getUppercase().should(\"not.be.checked\");\n    getNumbers().should(\"not.be.checked\");\n    getSymbols().should(\"not.be.checked\");\n    getLength().should(\"have.value\", \"5\");\n    getCounter().should(\"have.value\", \"2\");\n    getBaseURL().should(\"have.value\", \"https://api.example.org\");\n    encryptMasterPassword().should(\"not.be.checked\");\n  });",
            "file": "e2e/specs/settings.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "Passwords.create",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 22
            },
            "line": 5,
            "code": "test(\"Passwords.create\", () => {\n  const password = {\n    login: \"text@example.org\"\n  };\n  mock.onPost(\"https://api.lesspass.com/passwords/\", password).reply(201, { ...password,\n    id: \"1\"\n  });\n  return Passwords.create(password).then(response => {\n    const passwordCreated = response.data;\n    expect(passwordCreated.id).toBe(\"1\");\n    expect(passwordCreated.login).toBe(password.login);\n  });\n});",
            "file": "unit/api/password.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "Passwords.all",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 19
            },
            "line": 18,
            "code": "test(\"Passwords.all\", () => {\n  mock.onGet(\"https://api.lesspass.com/passwords/\").reply(200, {});\n  return Passwords.all().then(response => {\n    expect(response.status).toBe(200);\n  });\n});",
            "file": "unit/api/password.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "Passwords.get",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 19
            },
            "line": 24,
            "code": "test(\"Passwords.get\", () => {\n  mock.onGet(\"https://api.lesspass.com/passwords/c8e4f983-8ffe-b705-4064-d3b7aa4a4782/\").reply(200, {});\n  return Passwords.read({\n    id: \"c8e4f983-8ffe-b705-4064-d3b7aa4a4782\"\n  }).then(response => {\n    expect(response.status).toBe(200);\n  });\n});",
            "file": "unit/api/password.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "Passwords.update",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 22
            },
            "line": 32,
            "code": "test(\"Passwords.update\", () => {\n  const password = {\n    id: \"c8e4f983-4064-8ffe-b705-d3b7aa4a4782\",\n    login: \"test@example.org\"\n  };\n  mock.onPut(\"https://api.lesspass.com/passwords/c8e4f983-4064-8ffe-b705-d3b7aa4a4782/\", password).reply(200, {});\n  return Passwords.update(password).then(response => {\n    expect(response.status).toBe(200);\n  });\n});",
            "file": "unit/api/password.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "Passwords.delete",
            "suites": [],
            "updatePoint": {
                "line": 42,
                "column": 22
            },
            "line": 42,
            "code": "test(\"Passwords.delete\", () => {\n  mock.onDelete(\"https://api.lesspass.com/passwords/c8e4f983-8ffe-4064-b705-d3b7aa4a4782/\").reply(204);\n  return Passwords.delete({\n    id: \"c8e4f983-8ffe-4064-b705-d3b7aa4a4782\"\n  }).then(response => {\n    expect(response.status).toBe(204);\n  });\n});",
            "file": "unit/api/password.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "login",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 11
            },
            "line": 5,
            "code": "test(\"login\", () => {\n  const access = \"12345\";\n  const refresh = \"67890\";\n  const user = {\n    email: \"test@example.org\",\n    password: \"password\"\n  };\n  mock.onPost(\"https://api.lesspass.com/auth/jwt/create/\", user).reply(201, {\n    access,\n    refresh\n  });\n  return User.login(user).then(response => {\n    expect(response.data.access).toBe(access);\n    expect(response.data.refresh).toBe(refresh);\n  });\n});",
            "file": "unit/api/user.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "register",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 14
            },
            "line": 21,
            "code": "test(\"register\", () => {\n  const user = {\n    email: \"test@example.org\",\n    password: \"password\"\n  };\n  mock.onPost(\"https://api.lesspass.com/auth/users/\", user).reply(201, {\n    email: user.email,\n    pk: 1\n  });\n  return User.register(user).then(response => {\n    expect(response.data.email).toBe(user.email);\n  });\n});",
            "file": "unit/api/user.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "resetPassword",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 19
            },
            "line": 34,
            "code": "test(\"resetPassword\", () => {\n  var email = \"test@lesspass.com\";\n  mock.onPost(\"https://api.lesspass.com/auth/users/reset_password/\", {\n    email\n  }).reply(204);\n  return User.resetPassword({\n    email\n  }).then(response => {\n    expect(response.status).toBe(204);\n  });\n});",
            "file": "unit/api/user.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "confirmResetPassword",
            "suites": [],
            "updatePoint": {
                "line": 45,
                "column": 26
            },
            "line": 45,
            "code": "test(\"confirmResetPassword\", () => {\n  var newPassword = {\n    uid: \"MQ\",\n    token: \"5g1-2bd69bd6f6dcd73f8124\",\n    new_password: \"password1\",\n    re_new_password: \"password1\"\n  };\n  mock.onPost(\"https://api.lesspass.com/auth/users/reset_password_confirm/\", newPassword).reply(204);\n  return User.confirmResetPassword({\n    uid: \"MQ\",\n    token: \"5g1-2bd69bd6f6dcd73f8124\",\n    password: \"password1\"\n  }).then(response => {\n    expect(response.status).toBe(204);\n  });\n});",
            "file": "unit/api/user.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "fills the input with the value property",
            "suites": [
                "InputSite"
            ],
            "updatePoint": {
                "line": 28,
                "column": 45
            },
            "line": 28,
            "code": "  it(\"fills the input with the value property\", () => {\n    const wrapper = createWrapper({\n      site: \"lesspass.com\"\n    });\n    const input = inputField(wrapper);\n    expect(input.element.value).toBe(\"lesspass.com\");\n  }); // todo fix autocomplete tests",
            "file": "unit/components/InputSite.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "filters according to site name",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 38,
                "column": 40
            },
            "line": 38,
            "code": "      it(\"filters according to site name\", () => {\n        const wrapper = createWrapper({\n          passwords: [{\n            site: \"lesspass\",\n            login: \"xavier\"\n          }, {\n            site: \"wrongsite\",\n            login: \"xavier\"\n          }]\n        });\n        inputField(wrapper).setValue(\"le\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(1);\n        expect(options.at(0).text()).toBe(\"lesspass xavier\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "shows options that are contained in the user's value",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 53,
                "column": 62
            },
            "line": 53,
            "code": "      it(`shows options that are contained in the user's value`, () => {\n        const wrapper = createWrapper({\n          passwords: [{\n            site: \"lesspass\",\n            login: \"xavier\"\n          }]\n        });\n        inputField(wrapper).setValue(\"www.lesspass.com\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(1);\n        expect(options.at(0).text()).toBe(\"lesspass xavier\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "filters using suggestion",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 65,
                "column": 34
            },
            "line": 65,
            "code": "      it(\"filters using suggestion\", () => {\n        getSuggestions.mockImplementation(() => []);\n        const wrapper = createWrapper();\n        getSuggestions.mockImplementation(() => [\"lesspass\"]);\n        inputField(wrapper).setValue(\"lesspass.com\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(1);\n        expect(options.at(0).text()).toBe(\"lesspass\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "shows site and login in the list",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 74,
                "column": 42
            },
            "line": 74,
            "code": "      it(\"shows site and login in the list\", () => {\n        const wrapper = createWrapper({\n          passwords: [{\n            site: \"lesspass\",\n            login: \"xavier\"\n          }]\n        });\n        inputField(wrapper).setValue(\"le\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(1);\n        expect(options.at(0).text()).toBe(\"lesspass xavier\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "doesn't use login",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 86,
                "column": 27
            },
            "line": 86,
            "code": "      it(`doesn't use login`, () => {\n        const wrapper = createWrapper({\n          passwords: [{\n            site: \"lesspass\",\n            login: \"xavier\"\n          }]\n        });\n        inputField(wrapper).setValue(\"xa\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(0);\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "prints options sorted by site then login",
            "suites": [
                "InputSite",
                "autocomplete",
                "search"
            ],
            "updatePoint": {
                "line": 97,
                "column": 50
            },
            "line": 97,
            "code": "      it(`prints options sorted by site then login`, () => {\n        const wrapper = createWrapper({\n          passwords: [{\n            site: \"lesspass\",\n            login: \"guillaume\"\n          }, {\n            site: \"passless\",\n            login: \"xavier\"\n          }, {\n            site: \"passless\",\n            login: \"guillaume\"\n          }, {\n            site: \"lesspass\",\n            login: \"xavier\"\n          }]\n        });\n        inputField(wrapper).setValue(\"le\");\n        let options = optionsFor(wrapper);\n        expect(options.length).toBe(4);\n        expect(options.at(0).text()).toBe(\"lesspass guillaume\");\n        expect(options.at(1).text()).toBe(\"lesspass xavier\");\n        expect(options.at(2).text()).toBe(\"passless guillaume\");\n        expect(options.at(3).text()).toBe(\"passless xavier\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "completes field",
            "suites": [
                "InputSite",
                "autocomplete",
                "completion",
                "when selecting password"
            ],
            "updatePoint": {
                "line": 136,
                "column": 27
            },
            "line": 136,
            "code": "        it(\"completes field\", () => {\n          expect(inputField(wrapper).element.value).toBe(\"lesspass\");\n        });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "emits a \"passwordProfileSelected\" with the value",
            "suites": [
                "InputSite",
                "autocomplete",
                "completion",
                "when selecting password"
            ],
            "updatePoint": {
                "line": 139,
                "column": 60
            },
            "line": 139,
            "code": "        it('emits a \"passwordProfileSelected\" with the value', () => {\n          const emitted = wrapper.findComponent(InputSite).emitted();\n          const profileSelected = emitted[\"passwordProfileSelected\"];\n          expect(profileSelected.length).toBe(1);\n          expect(profileSelected[0]).toEqual([{\n            site: \"lesspass\",\n            login: \"xavier\"\n          }]);\n        });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "completes field",
            "suites": [
                "InputSite",
                "autocomplete",
                "when selecting suggestion"
            ],
            "updatePoint": {
                "line": 159,
                "column": 25
            },
            "line": 159,
            "code": "      it(\"completes field\", () => {\n        expect(inputField(wrapper).element.value).toBe(\"lesspass\");\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "emits a \"suggestionSelected\" with site value",
            "suites": [
                "InputSite",
                "autocomplete",
                "when selecting suggestion"
            ],
            "updatePoint": {
                "line": 162,
                "column": 54
            },
            "line": 162,
            "code": "      it('emits a \"suggestionSelected\" with site value', () => {\n        const emitted = wrapper.findComponent(InputSite).emitted();\n        const profileSelected = emitted[\"suggestionSelected\"];\n        expect(profileSelected.length).toBe(1);\n        expect(profileSelected[0]).toEqual([\"lesspass\"]);\n      });",
            "file": "unit/components/InputSite.spec.js",
            "skipped": true,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "formValidator.increment()",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "test(\"formValidator.increment()\", () => {\n  expect(formValidator.increment(1, {\n    min: 0,\n    max: 10\n  })).toBe(2);\n  expect(formValidator.increment(9, {\n    min: 0,\n    max: 10\n  })).toBe(10);\n  expect(formValidator.increment(10, {\n    min: 0,\n    max: 10\n  })).toBe(10);\n  expect(formValidator.increment(-1, {\n    min: 0,\n    max: 10\n  })).toBe(0);\n  expect(formValidator.increment(-5, {\n    min: 0,\n    max: 10\n  })).toBe(0);\n  expect(formValidator.increment(5, {\n    min: 0\n  })).toBe(6);\n});",
            "file": "unit/services/form-validator.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "formValidator.decrement()",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 31
            },
            "line": 27,
            "code": "test(\"formValidator.decrement()\", () => {\n  expect(formValidator.decrement(2, {\n    min: 0,\n    max: 10\n  })).toBe(1);\n  expect(formValidator.decrement(1, {\n    min: 0,\n    max: 10\n  })).toBe(0);\n  expect(formValidator.decrement(0, {\n    min: 0,\n    max: 10\n  })).toBe(0);\n  expect(formValidator.decrement(-1, {\n    min: 0,\n    max: 10\n  })).toBe(0);\n  expect(formValidator.decrement(15, {\n    min: 0,\n    max: 10\n  })).toBe(10);\n});",
            "file": "unit/services/form-validator.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "cleanUrl",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 14
            },
            "line": 2,
            "code": "test(\"cleanUrl\", () => {\n  expect(urlParser.cleanUrl(\"https://lesspass.com/#!/\")).toBe(\"lesspass.com\");\n  expect(urlParser.cleanUrl(\"https://lesspass.com/api/\")).toBe(\"lesspass.com\");\n  expect(urlParser.cleanUrl(\"https://www.lesspass.com/#!/\")).toBe(\"www.lesspass.com\");\n  expect(urlParser.cleanUrl(\"https://www.lesspass.com/api/\")).toBe(\"www.lesspass.com\");\n  expect(urlParser.cleanUrl(\"https://api.lesspass.com/\")).toBe(\"api.lesspass.com\");\n  expect(urlParser.cleanUrl(\"http://lesspass.com\")).toBe(\"lesspass.com\");\n  expect(urlParser.cleanUrl(\"http://stackoverflow.com/questions/3689423/google-chrome-plugin-how-to-get-domain-from-url-tab-url\")).toBe(\"stackoverflow.com\");\n  expect(urlParser.cleanUrl(\"http://v4-alpha.getbootstrap.com/components/buttons/\")).toBe(\"v4-alpha.getbootstrap.com\");\n  expect(urlParser.cleanUrl(\"https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1#identifier\")).toBe(\"accounts.google.com\");\n  expect(urlParser.cleanUrl(\"https://www.netflix.com/browse\")).toBe(\"www.netflix.com\");\n  expect(urlParser.cleanUrl(\"https://www.bbc.co.uk\")).toBe(\"www.bbc.co.uk\");\n  expect(urlParser.cleanUrl(\"https://192.168.1.1:10443/webapp/\")).toBe(\"192.168.1.1:10443\");\n  expect(urlParser.cleanUrl(undefined)).toBe(\"\");\n  expect(urlParser.cleanUrl(\"chrome://extensions/\")).toBe(\"\");\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "cleanUrl beta",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 19
            },
            "line": 18,
            "code": "test(\"cleanUrl beta\", () => {\n  expect(urlParser.removeSiteSubdomain(\"co.uk\")).toBe(\"\");\n  expect(urlParser.removeSiteSubdomain(\"https://lesspass.com/#!/\")).toBe(\"lesspass.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://lesspass.com/api/\")).toBe(\"lesspass.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://api.lesspass.com/\")).toBe(\"lesspass.com\");\n  expect(urlParser.removeSiteSubdomain(\"http://lesspass.com\")).toBe(\"lesspass.com\");\n  expect(urlParser.removeSiteSubdomain(\"http://www.lesspass.com\")).toBe(\"lesspass.com\");\n  expect(urlParser.removeSiteSubdomain(\"http://stackoverflow.com/questions/3689423/google-chrome-plugin-how-to-get-domain-from-url-tab-url\")).toBe(\"stackoverflow.com\");\n  expect(urlParser.removeSiteSubdomain(\"http://v4-alpha.getbootstrap.com/components/buttons/\")).toBe(\"getbootstrap.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1#identifier\")).toBe(\"google.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://mail.google.com/mail/u/0/\")).toBe(\"google.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://www.netflix.com/browse\")).toBe(\"netflix.com\");\n  expect(urlParser.removeSiteSubdomain(\"https://www.bbc.co.uk\")).toBe(\"bbc.co.uk\");\n  expect(urlParser.removeSiteSubdomain(\"https://192.168.1.1:10443/webapp/\")).toBe(\"192.168.1.1\");\n  expect(urlParser.removeSiteSubdomain(undefined)).toBe(\"\");\n  expect(urlParser.removeSiteSubdomain(\"chrome://extensions/\")).toBe(\"extensions\");\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getSuggestions",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 20
            },
            "line": 35,
            "code": "test(\"getSuggestions\", () => {\n  expect([\"bbc\", \"bbc.com\", \"www.bbc.com\"]).toEqual(urlParser.getSuggestions(\"https://www.bbc.com\"));\n  expect([\"example\", \"example.org\", \"www.example.org\"]).toEqual(urlParser.getSuggestions(\"https://www.example.org/api/?offset=100&limit=10\"));\n  expect([\"example\", \"example.org\"]).toEqual(urlParser.getSuggestions(\"https://example.org\"));\n  expect([\"example\", \"example.org\"]).toEqual(urlParser.getSuggestions(\"example.org\"));\n  expect([]).toEqual(urlParser.getSuggestions(\"https://192.168.1.1:10443/webapp/\"));\n  expect([]).toEqual(urlParser.getSuggestions(\"example\"));\n  expect([]).toEqual(urlParser.getSuggestions(\"example.\"));\n  expect([]).toEqual(urlParser.getSuggestions(\"example.o\"));\n  expect(urlParser.getSuggestions(\"http://example.org\")).toEqual(urlParser.getSuggestions(\"https://example.org\"));\n  expect([\"example\", \"example.org\"]).toEqual(urlParser.getSuggestions(\"EXAMPLE.org\"));\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getSite",
            "suites": [],
            "updatePoint": {
                "line": 47,
                "column": 13
            },
            "line": 47,
            "code": "test(\"getSite\", () => {\n  global.chrome = {\n    tabs: {\n      query(a, callback) {\n        callback([{\n          url: \"https://example.org\"\n        }]);\n      }\n\n    }\n  };\n  return urlParser.getSite().then(site => {\n    expect(site).toBe(\"https://example.org\");\n  });\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getPasswordFromUrlQuery",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 29
            },
            "line": 62,
            "code": "test(\"getPasswordFromUrlQuery\", () => {\n  const query = {\n    login: \"test@example.org\",\n    site: \"example.org\",\n    uppercase: \"true\",\n    lowercase: \"true\",\n    numbers: \"true\",\n    symbols: \"false\",\n    length: \"16\",\n    counter: \"1\",\n    version: \"2\"\n  };\n  const expectedPassword = {\n    login: \"test@example.org\",\n    site: \"example.org\",\n    uppercase: true,\n    lowercase: true,\n    numbers: true,\n    symbols: false,\n    length: 16,\n    counter: 1,\n    version: 2\n  };\n  expect(urlParser.getPasswordFromUrlQuery(query)).toEqual(expectedPassword);\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getPasswordFromUrlQuery with base 64 encoded password profile",
            "suites": [],
            "updatePoint": {
                "line": 87,
                "column": 67
            },
            "line": 87,
            "code": "test(\"getPasswordFromUrlQuery with base 64 encoded password profile\", () => {\n  const query = {\n    passwordProfileEncoded: \"eyJsb2dpbiI6InRlc3RAZXhhbXBsZS5vcmciLCJzaXRlIjoiZXhhbXBsZS5vcmciLCJ1cHBlcmNhc2UiOnRydWUsImxvd2VyY2FzZSI6dHJ1ZSwibnVtYmVycyI6dHJ1ZSwic3ltYm9scyI6ZmFsc2UsImxlbmd0aCI6MTYsImNvdW50ZXIiOjEsInZlcnNpb24iOjJ9\"\n  };\n  const expectedPassword = {\n    login: \"test@example.org\",\n    site: \"example.org\",\n    uppercase: true,\n    lowercase: true,\n    numbers: true,\n    symbols: false,\n    length: 16,\n    counter: 1,\n    version: 2\n  };\n  expect(urlParser.getPasswordFromUrlQuery(query)).toEqual(expectedPassword);\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getPasswordFromUrlQuery booleanish",
            "suites": [],
            "updatePoint": {
                "line": 104,
                "column": 40
            },
            "line": 104,
            "code": "test(\"getPasswordFromUrlQuery booleanish\", () => {\n  const query = {\n    uppercase: \"true\",\n    lowercase: \"TrUe\",\n    numbers: \"1\",\n    symbols: \"0\"\n  };\n  const expectedPassword = {\n    uppercase: true,\n    lowercase: true,\n    numbers: true,\n    symbols: false\n  };\n  expect(urlParser.getPasswordFromUrlQuery(query)).toEqual(expectedPassword);\n});",
            "file": "unit/services/url-parser.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "passwordURL",
            "suites": [],
            "updatePoint": {
                "line": 2,
                "column": 17
            },
            "line": 2,
            "code": "test(\"passwordURL\", () => {\n  const state = {\n    password: {\n      login: \"test@example.org\",\n      site: \"example.org\",\n      uppercase: true,\n      lowercase: true,\n      numbers: true,\n      symbols: false,\n      length: 16,\n      counter: 1,\n      version: 2\n    },\n    settings: {\n      baseURL: \"https://api.lesspass.com\"\n    }\n  };\n  expect(getters.passwordURL(state)).toBe(\"https://www.lesspass.com/#/?passwordProfileEncoded=eyJsb2dpbiI6InRlc3RAZXhhbXBsZS5vcmciLCJzaXRlIjoiZXhhbXBsZS5vcmciLCJ1cHBlcmNhc2UiOnRydWUsImxvd2VyY2FzZSI6dHJ1ZSwibnVtYmVycyI6dHJ1ZSwic3ltYm9scyI6ZmFsc2UsImxlbmd0aCI6MTYsImNvdW50ZXIiOjEsInZlcnNpb24iOjJ9\");\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "passwordURL encode uri component",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 38
            },
            "line": 21,
            "code": "test(\"passwordURL encode uri component\", () => {\n  const state = {\n    password: {\n      login: \"contact@lesspass.com\"\n    },\n    settings: {\n      baseURL: \"https://api.lesspass.com\"\n    }\n  };\n  expect(getters.passwordURL(state)).toBe(\"https://www.lesspass.com/#/?passwordProfileEncoded=eyJsb2dpbiI6ImNvbnRhY3RAbGVzc3Bhc3MuY29tIn0%3D\");\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "isAuthenticated",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 21
            },
            "line": 32,
            "code": "test(\"isAuthenticated\", () => {\n  const state = {\n    isAuthenticated: true\n  };\n  expect(getters.isAuthenticated(state)).toBe(true);\n  expect(getters.isGuest(state)).toBe(false);\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "isGuest",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 13
            },
            "line": 39,
            "code": "test(\"isGuest\", () => {\n  const state = {\n    isAuthenticated: false\n  };\n  expect(getters.isAuthenticated(state)).toBe(false);\n  expect(getters.isGuest(state)).toBe(true);\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "shouldAutoFillSite",
            "suites": [],
            "updatePoint": {
                "line": 46,
                "column": 24
            },
            "line": 46,
            "code": "test(\"shouldAutoFillSite\", () => {\n  expect(getters.shouldAutoFillSite({\n    settings: {\n      noAutoFillSite: true\n    }\n  })).toBe(false);\n  expect(getters.shouldAutoFillSite({\n    settings: {\n      noAutoFillSite: false\n    }\n  })).toBe(true);\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "shouldRemoveSubdomain",
            "suites": [],
            "updatePoint": {
                "line": 58,
                "column": 27
            },
            "line": 58,
            "code": "test(\"shouldRemoveSubdomain\", () => {\n  expect(getters.shouldRemoveSubdomain({\n    settings: {\n      removeSiteSubdomain: true\n    }\n  })).toBe(true);\n  expect(getters.shouldRemoveSubdomain({\n    settings: {\n      removeSiteSubdomain: false\n    }\n  })).toBe(false);\n});",
            "file": "unit/store/getters.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "LOGOUT",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 12
            },
            "line": 4,
            "code": "test(\"LOGOUT\", () => {\n  const LOGOUT = mutations[types.LOGOUT];\n  const state = {\n    isAuthenticated: true\n  };\n  LOGOUT(state);\n  expect(state.isAuthenticated).toBe(false);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "RESET_PASSWORD set default password",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 41
            },
            "line": 12,
            "code": "test(\"RESET_PASSWORD set default password\", () => {\n  const RESET_PASSWORD = mutations[types.RESET_PASSWORD];\n  const state = {\n    password: {\n      counter: 2\n    },\n    defaultPassword: {\n      counter: 1\n    }\n  };\n  RESET_PASSWORD(state);\n  expect(state.password.counter).toBe(1);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "LOGOUT clean user personal info",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 37
            },
            "line": 25,
            "code": "test(\"LOGOUT clean user personal info\", () => {\n  const LOGOUT = mutations[types.LOGOUT];\n  const state = {\n    password: {\n      counter: 2\n    },\n    passwords: [{\n      id: \"1\",\n      site: \"test@example.org\"\n    }],\n    defaultPassword: {\n      counter: 1\n    }\n  };\n  LOGOUT(state);\n  expect(state.passwords.length).toBe(0);\n  expect(state.password.counter).toBe(2);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "LOGIN",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 11
            },
            "line": 43,
            "code": "test(\"LOGIN\", () => {\n  const LOGIN = mutations[types.LOGIN];\n  const state = {\n    isAuthenticated: false\n  };\n  LOGIN(state);\n  expect(state.isAuthenticated).toBe(true);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_PASSWORD",
            "suites": [],
            "updatePoint": {
                "line": 51,
                "column": 18
            },
            "line": 51,
            "code": "test(\"SET_PASSWORD\", () => {\n  const SET_PASSWORD = mutations[types.SET_PASSWORD];\n  const state = {\n    password: null\n  };\n  SET_PASSWORD(state, {\n    password: {\n      uppercase: true,\n      counter: 2\n    }\n  });\n  expect(state.password.counter).toBe(2);\n  expect(state.password.uppercase).toBe(true);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_PASSWORD immutable",
            "suites": [],
            "updatePoint": {
                "line": 65,
                "column": 28
            },
            "line": 65,
            "code": "test(\"SET_PASSWORD immutable\", () => {\n  const SET_PASSWORD = mutations[types.SET_PASSWORD];\n  const state = {};\n  const password = {\n    counter: 2\n  };\n  SET_PASSWORD(state, {\n    password\n  });\n  password.counter = 1;\n  expect(state.password.counter).toBe(2);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_DEFAULT_OPTIONS",
            "suites": [],
            "updatePoint": {
                "line": 77,
                "column": 25
            },
            "line": 77,
            "code": "test(\"SET_DEFAULT_OPTIONS\", () => {\n  const SET_DEFAULT_OPTIONS = mutations[types.SET_DEFAULT_OPTIONS];\n  const state = {\n    defaultPassword: {\n      site: \"\",\n      login: \"\",\n      uppercase: true,\n      lowercase: true,\n      numbers: true,\n      symbols: true,\n      length: 16,\n      counter: 1,\n      version: 2\n    }\n  };\n  SET_DEFAULT_OPTIONS(state, {\n    options: {\n      symbols: false,\n      length: 30\n    }\n  });\n  expect(state.defaultPassword.length).toBe(30);\n  expect(state.defaultPassword.symbols).toBe(false);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_PASSWORDS",
            "suites": [],
            "updatePoint": {
                "line": 101,
                "column": 19
            },
            "line": 101,
            "code": "test(\"SET_PASSWORDS\", () => {\n  const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n  const state = {\n    passwords: []\n  };\n  SET_PASSWORDS(state, {\n    passwords: [{\n      site: \"site1\"\n    }, {\n      site: \"site2\"\n    }]\n  });\n  expect(state.passwords[0].site).toBe(\"site1\");\n  expect(state.passwords[1].site).toBe(\"site2\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "DELETE_PASSWORD",
            "suites": [],
            "updatePoint": {
                "line": 116,
                "column": 21
            },
            "line": 116,
            "code": "test(\"DELETE_PASSWORD\", () => {\n  const DELETE_PASSWORD = mutations[types.DELETE_PASSWORD];\n  const state = {\n    passwords: [{\n      id: \"1\",\n      site: \"site1\"\n    }, {\n      id: \"2\",\n      site: \"site2\"\n    }]\n  };\n  expect(state.passwords.length).toBe(2);\n  DELETE_PASSWORD(state, {\n    id: \"1\"\n  });\n  expect(state.passwords.length).toBe(1);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "DELETE_PASSWORD replace state.password with state.defaultPassword",
            "suites": [],
            "updatePoint": {
                "line": 133,
                "column": 71
            },
            "line": 133,
            "code": "test(\"DELETE_PASSWORD replace state.password with state.defaultPassword\", () => {\n  const DELETE_PASSWORD = mutations[types.DELETE_PASSWORD];\n  const state = {\n    passwords: [{\n      id: \"1\",\n      length: 30\n    }, {\n      id: \"2\",\n      length: 16\n    }],\n    password: {\n      id: \"1\",\n      length: 30\n    },\n    defaultPassword: {\n      length: 16\n    }\n  };\n  DELETE_PASSWORD(state, {\n    id: \"1\"\n  });\n  expect(state.password.length).toBe(16);\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "select good password profile base on site",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 191,
                "column": 49
            },
            "line": 191,
            "code": "  test(\"select good password profile base on site\", () => {\n    const state = {\n      password: {\n        login: \"\",\n        site: \"www.example.org\",\n        uppercase: true,\n        lowercase: true,\n        numbers: true,\n        symbols: true,\n        length: 16,\n        counter: 1,\n        version: 2\n      },\n      passwords: [],\n      defaultPassword: {\n        login: \"\",\n        site: \"\",\n        uppercase: true,\n        lowercase: true,\n        numbers: true,\n        symbols: true,\n        length: 16,\n        counter: 1,\n        version: 2\n      }\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords\n    });\n    expect(state.password).toEqual(passwords[1]);\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_PASSWORDS do nothing if id not empty",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 223,
                "column": 48
            },
            "line": 223,
            "code": "  test(\"SET_PASSWORDS do nothing if id not empty\", () => {\n    const state = {\n      password: {\n        id: \"1\",\n        site: \"example.org\"\n      },\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords\n    });\n    expect(state.password.id).toBe(\"1\");\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "with no site keep password profile",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 237,
                "column": 42
            },
            "line": 237,
            "code": "  test(\"with no site keep password profile\", () => {\n    const state = {\n      password: defaultPassword,\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords\n    });\n    expect(state.password).toEqual(defaultPassword);\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "multiple accounts matching criteria",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 248,
                "column": 43
            },
            "line": 248,
            "code": "  test(\"multiple accounts matching criteria\", () => {\n    const state = {\n      password: {\n        site: \"example.org\"\n      },\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords\n    });\n    expect(state.password.id).toBe(\"7cbadebf-49c8-4136-a579-6ee5beb6de7c\");\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "ends matching criteria nrt #285",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 261,
                "column": 39
            },
            "line": 261,
            "code": "  test(\"ends matching criteria nrt #285\", () => {\n    const state = {\n      password: {\n        site: \"www.google.com\"\n      },\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords: [{\n        id: \"1\",\n        site: \"account.google.com\"\n      }]\n    });\n    expect(state.password.id).toBe(\"1\");\n    expect(state.password.site).toBe(\"account.google.com\");\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "without www",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 278,
                "column": 19
            },
            "line": 278,
            "code": "  test(\"without www\", () => {\n    const state = {\n      password: {\n        site: \"www.reddit.com\"\n      },\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords: [{\n        id: \"1\",\n        site: \"reddit.com\"\n      }]\n    });\n    expect(state.password.id).toBe(\"1\");\n    expect(state.password.site).toBe(\"reddit.com\");\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "with no matching password profile let password profile intact",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 295,
                "column": 69
            },
            "line": 295,
            "code": "  test(\"with no matching password profile let password profile intact\", () => {\n    const state = {\n      password: {\n        site: \"not-in-my-password-profile.org\"\n      },\n      passwords: []\n    };\n    const SET_PASSWORDS = mutations[types.SET_PASSWORDS];\n    SET_PASSWORDS(state, {\n      passwords\n    });\n    expect(state.password.site).toBe(\"not-in-my-password-profile.org\");\n  });",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_SITE default state",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 309,
                "column": 28
            },
            "line": 309,
            "code": "test(\"SET_SITE default state\", () => {\n  const state = {\n    password: defaultPassword,\n    passwords: [],\n    defaultPassword\n  };\n  const SET_SITE = mutations[types.SET_SITE];\n  SET_SITE(state, {\n    site: \"www.example.org\"\n  });\n  expect(state.password.site).toEqual(\"www.example.org\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_SITE ignore empty",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 321,
                "column": 27
            },
            "line": 321,
            "code": "test(\"SET_SITE ignore empty\", () => {\n  const state = {\n    password: {\n      site: \"www.example.org\"\n    },\n    passwords: [],\n    defaultPassword\n  };\n  const SET_SITE = mutations[types.SET_SITE];\n  SET_SITE(state, {\n    site: \"\"\n  });\n  expect(state.password.site).toEqual(\"www.example.org\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_SITE ignore if id set",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 335,
                "column": 31
            },
            "line": 335,
            "code": "test(\"SET_SITE ignore if id set\", () => {\n  const state = {\n    password: {\n      id: \"1\",\n      site: \"www.example.org\"\n    },\n    passwords: [],\n    defaultPassword\n  };\n  const SET_SITE = mutations[types.SET_SITE];\n  SET_SITE(state, {\n    site: \"www.lesspass.com\"\n  });\n  expect(state.password.site).toEqual(\"www.example.org\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "SET_MESSAGE",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 350,
                "column": 17
            },
            "line": 350,
            "code": "test(\"SET_MESSAGE\", () => {\n  const SET_MESSAGE = mutations[types.SET_MESSAGE];\n  const state = {};\n  SET_MESSAGE(state, {\n    message: {\n      text: \"success message\",\n      status: \"success\"\n    }\n  });\n  expect(state.message.text).toBe(\"success message\");\n  expect(state.message.status).toBe(\"success\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "CLEAN_MESSAGE",
            "suites": [
                "SET_PASSWORDS"
            ],
            "updatePoint": {
                "line": 362,
                "column": 19
            },
            "line": 362,
            "code": "test(\"CLEAN_MESSAGE\", () => {\n  const CLEAN_MESSAGE = mutations[types.CLEAN_MESSAGE];\n  const state = {\n    message: {\n      text: \"error message\",\n      status: \"error\"\n    }\n  };\n  CLEAN_MESSAGE(state);\n  expect(state.message.text).toBe(\"\");\n  expect(state.message.status).toBe(\"success\");\n});",
            "file": "unit/store/mutations.spec.js",
            "skipped": false,
            "dir": "packages/lesspass-pure/tests"
        },
        {
            "name": "getSetOfCharacters",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 24
            },
            "line": 7,
            "code": "test(\"getSetOfCharacters\", () => {\n  const setOfCharacters = chars.getSetOfCharacters();\n  assert.equal(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\", setOfCharacters);\n  assert.equal(26 * 2 + 10 + 32, setOfCharacters.length);\n  assert.equal(chars.characterSubsets.lowercase + chars.characterSubsets.uppercase + chars.characterSubsets.digits + chars.characterSubsets.symbols, setOfCharacters);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getSetOfCharacters concat rules in order",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 46
            },
            "line": 13,
            "code": "test(\"getSetOfCharacters concat rules in order\", () => {\n  const setOfCharacters = chars.getSetOfCharacters([\"lowercase\", \"uppercase\", \"digits\"]);\n  assert.equal(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", setOfCharacters);\n  assert.equal(26 * 2 + 10, setOfCharacters.length);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getSetOfCharacters only lowercase",
            "suites": [],
            "updatePoint": {
                "line": 18,
                "column": 39
            },
            "line": 18,
            "code": "test(\"getSetOfCharacters only lowercase\", () => {\n  const setOfCharacters = chars.getSetOfCharacters([\"lowercase\"]);\n  assert.equal(\"abcdefghijklmnopqrstuvwxyz\", setOfCharacters);\n  assert.equal(26, setOfCharacters.length);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getSetOfCharacters only uppercase",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 39
            },
            "line": 23,
            "code": "test(\"getSetOfCharacters only uppercase\", () => {\n  const setOfCharacters = chars.getSetOfCharacters([\"uppercase\"]);\n  assert.equal(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", setOfCharacters);\n  assert.equal(26, setOfCharacters.length);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getSetOfCharacters only digits",
            "suites": [],
            "updatePoint": {
                "line": 28,
                "column": 36
            },
            "line": 28,
            "code": "test(\"getSetOfCharacters only digits\", () => {\n  const setOfCharacters = chars.getSetOfCharacters([\"digits\"]);\n  assert.equal(\"0123456789\", setOfCharacters);\n  assert.equal(10, setOfCharacters.length);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getSetOfCharacters only symbols",
            "suites": [],
            "updatePoint": {
                "line": 33,
                "column": 37
            },
            "line": 33,
            "code": "test(\"getSetOfCharacters only symbols\", () => {\n  const setOfCharacters = chars.getSetOfCharacters([\"symbols\"]);\n  assert.equal(\"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\", setOfCharacters);\n  assert.equal(32, setOfCharacters.length);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getOneCharPerRule",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 23
            },
            "line": 38,
            "code": "test(\"getOneCharPerRule\", () => {\n  const oneCharPerSetOfCharacters = chars.getOneCharPerRule(bigInt(26 * 26), [\"lowercase\", \"uppercase\"]);\n  assert.equal(\"aA\", oneCharPerSetOfCharacters.value);\n  assert.equal(2, oneCharPerSetOfCharacters.value.length);\n  assert.equal(1, oneCharPerSetOfCharacters.entropy);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "getRules",
            "suites": [],
            "updatePoint": {
                "line": 44,
                "column": 14
            },
            "line": 44,
            "code": "test(\"getRules\", () => {\n  assert.deepEqual([\"uppercase\"], chars.getRules({\n    uppercase: true\n  }));\n  assert.deepEqual([\"lowercase\", \"uppercase\"], chars.getRules({\n    uppercase: true,\n    lowercase: true\n  }));\n  assert.deepEqual([\"lowercase\"], chars.getRules({\n    lowercase: true,\n    symbols: false\n  }));\n  assert.deepEqual([\"lowercase\", \"uppercase\", \"digits\", \"symbols\"], chars.getRules({\n    lowercase: true,\n    uppercase: true,\n    symbols: true,\n    digits: true\n  }));\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "insertStringPseudoRandomly",
            "suites": [],
            "updatePoint": {
                "line": 63,
                "column": 32
            },
            "line": 63,
            "code": "test(\"insertStringPseudoRandomly\", () => {\n  const password = chars.insertStringPseudoRandomly(\"123456\", bigInt(7 * 6 + 2), \"uT\");\n  assert.equal(\"T12u3456\", password);\n});",
            "file": "chars.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "consumeEntropy",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 20
            },
            "line": 7,
            "code": "test(\"consumeEntropy\", () => {\n  const password = entropy.consumeEntropy(\"\", bigInt(4 * 4 + 2), \"abcd\", 2);\n  assert.equal(\"ca\", password.value);\n  assert.equal(1, password.entropy);\n});",
            "file": "entropy.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "render password use remainder of long division between entropy and set of chars length as an index",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 104
            },
            "line": 7,
            "code": "test(\"render password use remainder of long division between entropy and set of chars length as an index\", () => {\n  const options = {\n    length: 16,\n    lowercase: true,\n    uppercase: true,\n    digits: true,\n    symbols: true\n  };\n  assert.equal(\"W\", renderPassword(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", options)[0]);\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "render password use quotient as second entropy recursively",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 64
            },
            "line": 17,
            "code": "test(\"render password use quotient as second entropy recursively\", () => {\n  const options = {\n    length: 16,\n    lowercase: true,\n    uppercase: true,\n    digits: true,\n    symbols: true\n  };\n  assert.equal(\"H\", renderPassword(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", options)[1]);\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "render password has default length of 16",
            "suites": [],
            "updatePoint": {
                "line": 27,
                "column": 46
            },
            "line": 27,
            "code": "test(\"render password has default length of 16\", () => {\n  const options = {\n    length: 16,\n    lowercase: true,\n    uppercase: true,\n    digits: true,\n    symbols: true\n  };\n  const password = renderPassword(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", options);\n  assert.equal(16, password.length);\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "render password can specify length",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 40
            },
            "line": 38,
            "code": "test(\"render password can specify length\", () => {\n  const options = {\n    length: 20,\n    lowercase: true,\n    uppercase: true,\n    digits: true,\n    symbols: true\n  };\n  const password = renderPassword(\"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\", options);\n  assert.equal(20, password.length);\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        },
        {
            "name": "render password return at least one char in every characters set",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 70
            },
            "line": 49,
            "code": "test(\"render password return at least one char in every characters set\", () => {\n  const entropy = \"dc33d431bce2b01182c613382483ccdb0e2f66482cbba5e9d07dab34acc7eb1e\";\n  const passwordProfile = {\n    length: 6,\n    lowercase: true,\n    uppercase: true,\n    digits: true,\n    symbols: true\n  };\n  const generatedPassword = renderPassword(entropy, passwordProfile);\n  let passwordLength = generatedPassword.length;\n  let lowercaseOk = false;\n  let uppercaseOk = false;\n  let digitsOk = false;\n  let symbolsOk = false;\n\n  for (passwordLength; passwordLength > 0; passwordLength -= 1) {\n    if (\"abcdefghijklmnopqrstuvwxyz\".indexOf(generatedPassword[passwordLength - 1]) !== -1) {\n      lowercaseOk = true;\n    }\n\n    if (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(generatedPassword[passwordLength - 1]) !== -1) {\n      uppercaseOk = true;\n    }\n\n    if (\"0123456789\".indexOf(generatedPassword[passwordLength - 1]) !== -1) {\n      digitsOk = true;\n    }\n\n    if (\"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\".indexOf(generatedPassword[passwordLength - 1]) !== -1) {\n      symbolsOk = true;\n    }\n  }\n\n  assert.equal(6, generatedPassword.length);\n  assert(lowercaseOk && uppercaseOk && digitsOk && symbolsOk, \"there is no at least one char in every characters set\");\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/lesspass-render-password/test"
        }
    ],
    "badge": "lesspass__lesspass.svg"
}