{"repo":"highcharts/highcharts","url":"https://github.com/highcharts/highcharts","branch":"master","configs":[{"package":"highcharts","lang":"ts","dir":"test","framework":"qunit","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"AMD loading of the Highcharts package","suites":[],"line":1,"code":"QUnit.test('AMD loading of the Highcharts package', function (assert) {\n\n    const done = assert.async();\n\n    require(\n        ['highcharts'],\n        function (Highcharts) {\n            assert.ok(typeof Highcharts === 'object' && Highcharts !== null);\n            done();\n        }\n    );\n\n});","file":"typescript-karma/Core/Globals.test.js","skipped":false,"dir":"test"},{"name":"DataCursor.emitCursor","suites":[],"line":4,"code":"QUnit.test('DataCursor.emitCursor', function (assert) {\n    const done = assert.async(2),\n        event = new Event('event'),\n        cursor = new DataCursor(),\n        table = new DataTable({\n            columns: {\n                a: [0, 1, 2],\n                b: [10, 11, 12]\n            }\n        });\n\n    cursor\n        .addListener(table.id, 'test2', function (e) {\n            const expectedCursor = {\n                type: 'range',\n                firstRow: 2,\n                lastRow: 9,\n                state: 'test2'\n            };\n\n            assert.strictEqual(\n                this,\n                cursor,\n                'Listener scope should be a DataCursor instance by default.'\n            );\n\n            assert.deepEqual(\n                e,\n                {\n                    cursor: expectedCursor,\n                    cursors: [],\n                    table\n                },\n                'Emitted event should have expected structure.'\n            );\n\n            done();\n        })\n        .addListener(table.id, 'test3', function (e) {\n            const expectedCursor = {\n                type: 'range',\n                firstRow: 0,\n                lastRow: 2,\n                state: 'test3'\n            };\n\n            assert.strictEqual(\n                this,\n                cursor,\n                'Listener scope should be a DataCursor instance by default.'\n            );\n\n            assert.deepEqual(\n                e,\n                {\n                    cursor: expectedCursor,\n                    cursors: [expectedCursor],\n                    event,\n                    table\n                },\n                'Lasting event should have expected structure.'\n            );\n\n            done();\n        });\n\n    cursor\n        .emitCursor(table, {\n            type: 'position',\n            column: 'a',\n            row: 1,\n            state: 'test1'\n        })\n        .emitCursor(table, {\n            type: 'range',\n            firstRow: 2,\n            lastRow: 9,\n            state: 'test2'\n        })\n        .emitCursor(table, {\n            type: 'range',\n            firstRow: 0,\n            lastRow: 2,\n            state: 'test3'\n        }, event, true);\n});","file":"typescript-karma/Data/DataCursor.test.js","skipped":false,"dir":"test"},{"name":"DataCursor.isEqual","suites":[],"line":91,"code":"QUnit.test('DataCursor.isEqual', function (assert) {\n    // position\n    assert.ok(\n        DataCursor.isEqual({\n            type: 'position',\n            state: 'test1'\n        }, {\n            type: 'position',\n            state: 'test1'\n        }),\n        'Cursors should be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'position',\n            state: 'test2a'\n        }, {\n            type: 'position',\n            state: 'test2b'\n        }),\n        'Cursors should not be equal.'\n    );\n    assert.ok(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            state: 'test3'\n        }, {\n            type: 'position',\n            column: 'a',\n            state: 'test3'\n        }),\n        'Cursors should be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            state: 'test4'\n        }, {\n            type: 'position',\n            column: 'b',\n            state: 'test4'\n        }),\n        'Cursors should not be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            row: 0,\n            state: 'test5'\n        }, {\n            type: 'position',\n            column: 'a',\n            state: 'test5'\n        }),\n        'Cursors should not be equal.'\n    );\n    assert.ok(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            row: 0,\n            state: 'test6'\n        }, {\n            type: 'position',\n            column: 'a',\n            row: 0,\n            state: 'test6'\n        }),\n        'Cursors should be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            row: 0,\n            state: 'test7'\n        }, {\n            type: 'position',\n            column: 'b',\n            row: NaN,\n            state: 'test7'\n        }),\n        'Cursors should not be equal.'\n    );\n    // mixed\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'position',\n            column: 'a',\n            row: 0,\n            state: 'test8'\n        }, {\n            type: 'range',\n            columns: ['a'],\n            firstRow: 0,\n            lastRow: 0,\n            state: 'test8'\n        }),\n        'Cursors should not be equal.'\n    );\n    // range\n    assert.ok(\n        DataCursor.isEqual({\n            type: 'range',\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test9'\n        }, {\n            type: 'range',\n            columns: void 0,\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test9'\n        }),\n        'Cursors should be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'range',\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test10'\n        }, {\n            type: 'range',\n            firstRow: 1,\n            lastRow: 2,\n            state: 'test10'\n        }),\n        'Cursors should not be equal.'\n    );\n    assert.ok(\n        DataCursor.isEqual({\n            type: 'range',\n            columns: [],\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test11'\n        }, {\n            type: 'range',\n            columns: [],\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test11'\n        }),\n        'Cursors should be equal.'\n    );\n    assert.notOk(\n        DataCursor.isEqual({\n            type: 'range',\n            columns: ['a'],\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test12'\n        }, {\n            type: 'range',\n            columns: ['b'],\n            firstRow: 0,\n            lastRow: 1,\n            state: 'test12'\n        }),\n        'Cursors should not be equal.'\n    );\n});","file":"typescript-karma/Data/DataCursor.test.js","skipped":false,"dir":"test"},{"name":"DataCursor.isInRange","suites":[],"line":257,"code":"QUnit.test('DataCursor.isInRange', function (assert) {\n    const cursorRange /*: DataCursor.CursorRange*/ = {\n        type: 'range',\n        columns: ['a', 'b', 'c'],\n        firstRow: 0,\n        lastRow: 9,\n        state: 'state2'\n    };\n\n    assert.ok(\n        DataCursor.isInRange({\n            type: 'position',\n            column: 'a',\n            state: 'test1'\n        }, cursorRange),\n        'Cursor should be in range.'\n    );\n    assert.notOk(\n        DataCursor.isInRange({\n            type: 'position',\n            column: 'z',\n            state: 'test2'\n        }, cursorRange),\n        'Cursor should not be in range.'\n    );\n    assert.ok(\n        DataCursor.isInRange({\n            type: 'position',\n            column: 'b',\n            row: 2,\n            state: 'test3'\n        }, cursorRange),\n        'Cursor should be in range.'\n    );\n    assert.notOk(\n        DataCursor.isInRange({\n            type: 'position',\n            column: 'b',\n            row: 20,\n            state: 'test4'\n        }, cursorRange),\n        'Cursor should not be in range.'\n    );\n    assert.notOk(\n        DataCursor.isInRange({\n            type: 'position',\n            column: 'z',\n            row: 2,\n            state: 'test4'\n        }, cursorRange),\n        'Cursor should not be in range.'\n    );\n});","file":"typescript-karma/Data/DataCursor.test.js","skipped":false,"dir":"test"},{"name":"DataCursor.toRange","suites":[],"line":311,"code":"QUnit.test('DataCursor.toRange', function (assert) {\n    assert.deepEqual(\n        DataCursor.toRange({\n            type: 'position',\n            column: 'a',\n            state: 'test1'\n        }),\n        {\n            type: 'range',\n            columns: ['a'],\n            firstRow: 0,\n            lastRow: Number.MAX_VALUE,\n            state: 'test1'\n        },\n        'Cursor range should have expected structure.'\n    );\n    assert.deepEqual(\n        DataCursor.toRange({\n            type: 'position',\n            column: 'b',\n            row: 343,\n            state: 'test2'\n        }),\n        {\n            type: 'range',\n            columns: ['b'],\n            firstRow: 343,\n            lastRow: 343,\n            state: 'test2'\n        },\n        'Cursor range should have expected structure.'\n    );\n    assert.deepEqual(\n        DataCursor.toRange({\n            type: 'position',\n            row: 729,\n            state: 'test2'\n        }),\n        {\n            type: 'range',\n            firstRow: 729,\n            lastRow: 729,\n            state: 'test2'\n        },\n        'Cursor range should have expected structure.'\n    );\n});","file":"typescript-karma/Data/DataCursor.test.js","skipped":false,"dir":"test"},{"name":"DataPool options","suites":[],"line":3,"code":"QUnit.test('DataPool options', async function (assert) {\n    const pool = new DataPool({\n        connectors: [{\n            name: 'CSV Test',\n            type: 'CSV',\n            options: {\n                csv: 'y,z\\n4,5\\n6,7\\n8,9',\n                dataTable: {\n                    columns: {\n                        x: [1, 2, 3]\n                    }\n                }\n            }\n        }]\n    });\n\n    const csvTable = await pool.getConnectorTable('CSV Test');\n\n    assert.deepEqual(\n        csvTable.getColumnNames(),\n        ['x', 'y', 'z'],\n        'Table columns should be merged.'\n    );\n});","file":"typescript-karma/Data/DataPool.test.js","skipped":false,"dir":"test"},{"name":"DataTable clone","suites":[],"line":4,"code":"QUnit.test('DataTable clone', function (assert) {\n    const table = new DataTable({ id: 'table' });\n\n    table.setRows([[ 'row1', 1 ]]);\n    table.setCell('1', 0, 100);\n    table.setColumnAlias('x', 'x-alias');\n\n    const tableClone = table.clone();\n\n    assert.notStrictEqual(\n        table,\n        tableClone,\n        'Cloned table should be a new instance.'\n    );\n\n    assert.strictEqual(\n        table.converter,\n        tableClone.converter,\n        'Cloned and original table should have the same converter reference.'\n    );\n\n    assert.deepEqual(\n        table.aliasMap,\n        tableClone.aliasMap,\n        'Cloned and original table should have the same aliasMap elements.'\n    );\n\n    assert.deepEqual(\n        table.hcEvents,\n        tableClone.hcEvents,\n        'Cloned and original table should have the same events.'\n    );\n\n    assert.strictEqual(\n        table.id,\n        tableClone.id,\n        'Cloned and original table should have the same id.'\n    );\n\n    assert.strictEqual(\n        table.versionTag,\n        tableClone.versionTag,\n        'Cloned and original table should have the same versionTag.'\n    );\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable Column Aliases","suites":[],"line":50,"code":"QUnit.test('DataTable Column Aliases', function (assert) {\n    const table = new DataTable();\n\n    table.setColumnAlias('x', 'population');\n    table.setColumnAlias('y', 'gdp');\n    table.setColumnAlias('z', 'id');\n    table.setColumnAlias('f', 'population');\n\n    table.setRows([{\n        id: 'My Land',\n        population: 41251,\n        gdp: 150\n    }, {\n        id: 'Your Land',\n        population: 21251,\n        gdp: 950\n    }, {\n        id: 'Our Land',\n        population: new DataTable(),\n        gdp: 950,\n        nonexistant: 1\n    }]);\n\n    table.setColumnAlias('beta', 'nonexistant');\n    assert.strictEqual(\n        table.setColumnAlias('beta', 'a'),\n        false,\n        'Returns false when attempting to add an existing alias.'\n    );\n\n    assert.deepEqual(\n        table.getColumn('x'),\n        table.getColumns(['population'])['population'],\n        'Table should return correct column for alias.'\n    );\n\n    table.setColumnAlias('population', 'gdp')\n    assert.deepEqual(\n        table.getColumn('population'),\n        table.getColumn('gdp'),\n        'Table should prioritize alias.'\n    );\n\n    table.deleteColumnAlias('population');\n    assert.notDeepEqual(\n        table.getColumn('population'),\n        table.getColumn('gdp'),\n        'Table should return canonical name, after alias is removed.'\n    );\n\n    table.setCell('population', table.getRowIndexBy('id', 'Our Land'), 4),\n    assert.strictEqual(\n        table.getCell('population', table.getRowIndexBy('id', 'Our Land')),\n        4,\n        'Table should set cell value for column name.'\n    );\n    table.setCell('x', table.getRowIndexBy('id', 'Our Land'), 10),\n    assert.strictEqual(\n        table.getCell('x', table.getRowIndexBy('id', 'Our Land')),\n        10,\n        'Table should set cell value for column alias.'\n    );\n    assert.strictEqual(\n        table.getCell('population', table.getRowIndexBy('id', 'Our Land')),\n        table.getCell('x', table.getRowIndexBy('id', 'Our Land')),\n        'Table should return cell value for column name and alias.'\n    );\n\n    table.setRows(\n        [{\n            id: 'All Land',\n            population: 4\n        }],\n        table.getRowIndexBy('id', 'All Land')\n    );\n    assert.strictEqual(\n        table.getRowIndexBy('id', 'All Land'),\n        3,\n        'Table should insert a new row with cell values.'\n    )\n\n    // Insert new column with two cells more than the current row count\n    const colArray = [\n        'Tourmalet',\n        'Du Fromage',\n        'des Montagnes',\n        'Ventoux',\n        'Grand Cucheron',\n        'des Aravis'\n    ];\n\n    table.setColumn('Cols', colArray);\n\n    assert.strictEqual(\n        table.getRowCount(),\n        colArray.length,\n        'Table should count inserted rows.'\n    );\n\n    assert.ok(\n        table.deleteColumns(['Cols']),\n        'Table should have deleted column. (1)'\n    );\n\n    assert.strictEqual(\n        typeof table.getColumns(['Cols']).Cols,\n        'undefined',\n        'Table should have deleted column. (2)'\n    );\n\n    const expectedValues = table.getColumns(['population']);\n    assert.deepEqual(\n        table.deleteColumns(['population']),\n        expectedValues,\n        'Table should return cell values of deleted column.'\n    );\n\n    assert.strictEqual(\n        typeof table.getColumn('population'),\n        'undefined',\n        'Table should have removed column \"population\".'\n    )\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable Column Rename","suites":[],"line":175,"code":"QUnit.test('DataTable Column Rename', function (assert) {\n    const table = new DataTable({\n        columns: {\n            column1: [ true ],\n            existingColumn: [ true ]\n        }\n    });\n\n    // Move\n    assert.ok(\n        table.renameColumn('column1', 'newColumn'),\n        'Table should move cells of a column to a new column.'\n    );\n    assert.deepEqual(\n        table.getColumns(['column1', 'newColumn']),\n        { newColumn: [true] },\n        'Table should only return renamed column.'\n    );\n\n    // Force move\n    assert.ok(\n        table.renameColumn('newColumn', 'existingColumn'),\n        'Table should move cell of a column to an existing column (with force).'\n    );\n    assert.deepEqual(\n        table.getColumns(['newColumn', 'existingColumn']),\n        { existingColumn: [true] }\n    );\n\n    // Force move following alias\n    table.setColumn('newColumn', []);\n    table.setColumnAlias('existingColumnAlias', 'newEmptyColumn');\n\n    assert.ok(\n        table.renameColumn('existingColumn', 'existingColumnAlias'),\n        'Table should rename column to an alias.'\n    );\n    assert.deepEqual(\n        table.getColumns([ 'existingColumn', 'existingColumnAlias' ]),\n        { existingColumnAlias: [ true ] },\n        'Table should retrieve only renamed column.'\n    );\n\n    // fail when trying to move an non existing column\n    table.setColumn('existingColumn', [ true ])\n\n    assert.notOk(\n        table.renameColumn('nonexistant', 'existingColumn'),\n        'Table should fail when trying to move a non-existant column.'\n    );\n\n    assert.deepEqual(\n        table.getColumns(['nonexistant', 'existingColumn']),\n        { existingColumn: [true] },\n        'Table should retrieve only existing column.'\n    );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable Column Retrieve","suites":[],"line":234,"code":"QUnit.test('DataTable Column Retrieve', function (assert) {\n    const table = new DataTable({\n            columns: {\n                id: [ 0, 1 ],\n                a: [ 'a0', 'a1' ],\n                b: [ 0.0002, 'b1' ],\n                c: [\n                    'c0',\n                    new DataTable({\n                        id: [ 0, 1, 2 ],\n                        ca: [ 'ca0', 'ca1', 'ca2' ]\n                    })\n                ]\n            }\n        }),\n        columns = table.getColumns();\n\n    assert.deepEqual(\n        Object.keys(columns),\n        ['id', 'a', 'b', 'c'],\n        'Result has column names in correct order.'\n    );\n\n    Object\n        .values(columns)\n        .forEach(column => assert.strictEqual(\n            column.length,\n            2,\n            'Result has correct amount of column cells.'\n        ));\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable Events","suites":[],"line":267,"code":"QUnit.test('DataTable Events', function (assert) {\n    const done = assert.async(),\n        registeredEvents = [];\n\n    /** @param {DataTable.EventObject} e */\n    function registerEvent(e) {\n        registeredEvents.push(e.type);\n    }\n\n    /** @param {DataTable} table */\n    function registerTable(table) {\n        const eventsToRegister = [\n            'cloneTable', 'afterCloneTable',\n            'deleteColumns', 'afterDeleteColumns',\n            'deleteRows', 'afterDeleteRows',\n            'setCell', 'afterSetCell',\n            'setColumns', 'afterSetColumns',\n            'setModifier', 'afterSetModifier',\n            'setRows', 'afterSetRows'\n        ];\n        while (eventsToRegister.length) {\n            table.on(eventsToRegister.shift(), registerEvent);\n        }\n    }\n\n    const table = new DataTable({\n        columns: {\n            id: [ 'a' ],\n            text: [ 'text' ]\n        }\n    });\n\n    registerTable(table);\n\n    registeredEvents.length = 0;\n    table.setRows([\n        ['b', 'text'],\n        {\n            id: 'c',\n            text: 'text'\n        }\n    ]);\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'setRows',\n            'afterSetRows'\n        ],\n        'Events for DataTable.setRows should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table.setCell('text', table.getRowIndexBy('id', 'a'), 'test');\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'setCell',\n            'afterSetCell'\n        ],\n        'Events for DataTable.setCell (1) should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    assert.strictEqual(\n        table.getRowCount(),\n        3,\n        'DataTable should contain three rows.'\n    );\n    table.deleteRows(0);\n    assert.strictEqual(\n        table.getRowCount(),\n        2,\n        'DataTable should contain two row.'\n    );\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'deleteRows',\n            'afterDeleteRows'\n        ],\n        'Events for DataTable.deleteRows should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table.setColumn('new', [ 'new' ]);\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'setColumns',\n            'afterSetColumns'\n        ],\n        'Events for DataTable.setColumn should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table.setCell('text', 0, 'test');\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'setCell',\n            'afterSetCell'\n        ],\n        'Events for DataTable.setCell (2) should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table.deleteColumns(['new']);\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'deleteColumns',\n            'afterDeleteColumns'\n        ],\n        'Events for DataTable.deleteColumns should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table.clone();\n    assert.deepEqual(\n        registeredEvents,\n        [\n            'cloneTable',\n            'afterCloneTable'\n        ],\n        'Events for DataTable.clone should be in expected order.'\n    );\n\n    registeredEvents.length = 0;\n    table\n        .setModifier(new SortModifier())\n        .then((table) => {\n            assert.deepEqual(\n                registeredEvents,\n                [\n                    'setModifier',\n                    'cloneTable',\n                    'afterCloneTable',\n                    'afterSetModifier'\n                ],\n                'Events for DataTable.setModifier should be in expected order.'\n            );\n            return table;\n        })\n        .then((table) => {\n            registeredEvents.length = 0;\n            return table.setModifier();\n        })\n        .then((table) => {\n            assert.deepEqual(\n                registeredEvents,\n                [\n                    'setModifier',\n                    'afterSetModifier'\n                ],\n                'Events for DataTable.setModifier should be in expected order.'\n            );\n            return table;\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.getCellAsNumber","suites":[],"line":434,"code":"QUnit.test('DataTable.getCellAsNumber', function (assert) {\n    const table = new DataTable({\n        columns: {\n            A: [false, true, -1, 0, 1, NaN, '', '0', 'a', null, ,void 0 ]\n        }\n    });\n\n    assert.strictEqual(\n        table.getRowCount(),\n        12,\n        'Table should contain 12 rows.'\n    );\n\n    assert.deepEqual(\n        [\n            table.getCellAsNumber('A', 0),\n            table.getCellAsNumber('A', 0, true),\n            table.getCellAsNumber('A', 1),\n            table.getCellAsNumber('A', 1, true)\n        ],\n        [0, 0, 1, 1],\n        'Table should return boolean as number.'\n    );\n\n    assert.deepEqual(\n        [\n            table.getCellAsNumber('A', 2),\n            table.getCellAsNumber('A', 2, true),\n            table.getCellAsNumber('A', 3),\n            table.getCellAsNumber('A', 3, true),\n            table.getCellAsNumber('A', 4),\n            table.getCellAsNumber('A', 4, true)\n        ],\n        [-1, -1, 0, 0, 1, 1],\n        'Table should return number.'\n    );\n\n    assert.strictEqual(\n        table.getCellAsNumber('A', 5),\n        null,\n        'Table should return NaN as null by default.'\n    );\n\n    assert.ok(\n        isNaN(table.getCellAsNumber('A', 5, true)),\n        'Table should return NaN on request.'\n    );\n\n    assert.deepEqual(\n        [\n            table.getCellAsNumber('A', 6),\n            table.getCellAsNumber('A', 6, true),\n            table.getCellAsNumber('A', 7),\n            table.getCellAsNumber('A', 7, true),\n            table.getCellAsNumber('A', 8),\n            table.getCellAsNumber('A', 8, true)\n        ],\n        [null, NaN, 0, 0, null, NaN],\n        'Table should return string as number or null.'\n    );\n\n    assert.ok(\n        isNaN(table.getCellAsNumber('A', 9, true)),\n        'Table should return null as NaN on request.'\n    );\n\n    assert.ok(\n        isNaN(table.getCellAsNumber('A', 10, true)),\n        'Table should return undefined cell as NaN on request.'\n    );\n\n    assert.ok(\n        isNaN(table.getCellAsNumber('A', 11, true)),\n        'Table should return undefined as NaN on request.'\n    );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.getColumnAsNumbers","suites":[],"line":512,"code":"QUnit.test('DataTable.getColumnAsNumbers', function (assert) {\n    const table = new DataTable({\n        columns: {\n            test1: [null, 1, 2],\n            test2: [void 0, 1, 2],\n            test3: [null, 1, '2'],\n            test4: [0, null, 2],\n            test5: ['0', 1, null],\n            test6: [null, '1', 2],\n            test7: [void 0, '1', 2]\n        }\n    });\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test1'),\n        [null, 1, 2],\n        'Table should return column \"test1\" without conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test2'),\n        [void 0, 1, 2],\n        'Table should return column \"test2\" without conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test3'),\n        [null, 1, '2'],\n        'Table should return column \"test3\" without conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test4'),\n        [0, null, 2],\n        'Table should return column \"test4\" without conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test5'),\n        [0, 1, null],\n        'Table should return column \"test5\" after conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test6'),\n        [null, 1, 2],\n        'Table should return column \"test6\" after conversion.'\n    );\n\n    assert.deepEqual(\n        table.getColumnAsNumbers('test7'),\n        [null, 1, 2],\n        'Table should return column \"test7\" after conversion. (#1)'\n    );\n\n    assert.ok(\n        isNaN(table.getColumnAsNumbers('test7', true)[0]),\n        'Table should return column \"test7\" after conversion. (#2)'\n    );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.getRows","suites":[],"line":574,"code":"QUnit.test('DataTable.getRows', function (assert) {\n    const table = new DataTable({ columns: { 'a': [ 0 ] } });\n\n    const rowObject = table\n        .getRowObject(undefined, ['Non-Existing Column']);\n\n    assert.deepEqual(\n        Object.keys(rowObject),\n        ['Non-Existing Column'],\n        'Table should return row with non-existing column.'\n    );\n\n    const cellArray = table\n        .getRow(undefined, ['Non-Existing Column']);\n\n    assert.deepEqual(\n        cellArray,\n        [ undefined ],\n        'Table should return row with non-existing column.'\n    );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.setRows","suites":[],"line":597,"code":"QUnit.test('DataTable.setRows', function (assert) {\n    const table = new DataTable({\n            columns: {\n                column1: [ true ],\n                existingColumn: [ true ]\n            }\n        }),\n        tableClone = table.clone();\n\n    assert.strictEqual(\n        tableClone.getRowCount(),\n        table.getRowCount(),\n        'Cloned table should have same rows length.'\n    );\n\n    tableClone.deleteRows();\n\n    assert.deepEqual(\n        tableClone.getRowCount(),\n        0,\n        'Clone is empty and has no rows.'\n    );\n\n    tableClone.setRows(table.getRows());\n\n    assert.deepEqual(\n        tableClone.getRow(0),\n        table.getRow(0),\n        'Row values are the same after clone.'\n    );\n\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.setColumns","suites":[],"line":630,"code":"QUnit.test('DataTable.setColumns', function (assert) {\n    const table = new DataTable({\n        columns: {\n            x: [0, 1, 2],\n            y: [3, 1, 2]\n        }\n    });\n\n    table.setColumns({\n        x: [8, 9],\n        y: [0, 1]\n    }, 0);\n\n    assert.deepEqual(\n        table.getColumns(),\n        {\n            x: [8, 9, 2],\n            y: [0, 1, 2]\n        },\n        'Table should contain three rows of valid values.'\n    );\n\n    table.setColumns({\n        x: [8, 7]\n    });\n\n    assert.deepEqual(\n        table.getColumns(),\n        {\n            x: [8, 7],\n            y: [0, 1]\n        },\n        'Table should contain two rows of valid values.'\n    );\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"DataTable.setModifier","suites":[],"line":666,"code":"QUnit.test('DataTable.setModifier', function (assert) {\n    const done = assert.async(),\n        modifier = new SortModifier({\n            direction: 'asc',\n            orderByColumn: 'y',\n            orderInColumn: 'x'\n        }),\n        table = new DataTable({\n            columns: {\n                x: [0, 1, 2],\n                y: [3, 1, 2]\n            }\n        });\n\n    assert.deepEqual(\n        table.modified.getColumns(),\n        {\n            x: [0, 1, 2],\n            y: [3, 1, 2]\n        },\n        'Modified table should contain unsorted columns.'\n    );\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 0, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns.'\n            );\n            return table;\n        })\n        .then((table) => {\n            delete modifier.options.orderInColumn;\n            modifier.options.direction = 'desc';\n            return table.setModifier(modifier);\n        })\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [0, 2, 1],\n                    y: [3, 2, 1] \n                },\n                'Modified table should contain sorted columns.'\n            )\n            return table;\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n});","file":"typescript-karma/Data/DataTable.test.js","skipped":false,"dir":"test"},{"name":"ChainModifier.benchmark","suites":[],"line":6,"code":"QUnit.test('ChainModifier.benchmark', function (assert) {\n\n    const modifier = new ChainModifier(\n            {},\n            new RangeModifier({\n                ranges: [{\n                    column: 'value',\n                    minValue: 'A',\n                    maxValue: 'b'\n                }]\n            })\n        ),\n        table = new DataTable();\n    \n    table.setRows([{\n        x: 1,\n        y: 'a'\n    }, {\n        x: 2,\n        y: 'a'\n    }, {\n        x: 3,\n        y: 'b'\n    }, {\n        x: 4,\n        y: 'b'\n    }, {\n        x: 5,\n        y: 'c'\n    }, {\n        x: 6,\n        y: 'c'\n    }]);\n\n    const options = {\n            iterations: 10\n        },\n        result = modifier.benchmark(table, options);\n\n    assert.strictEqual(\n        result.length,\n        options.iterations,\n        'Ran for correct amount of iterations'\n    );\n});","file":"typescript-karma/Data/Modifiers/ChainModifier.test.js","skipped":false,"dir":"test"},{"name":"ChainModifier.modify","suites":[],"line":52,"code":"QUnit.test('ChainModifier.modify', function (assert) {\n\n    const done = assert.async(),\n        modifier = new ChainModifier({\n            chain: [{\n                modifier: 'Range',\n                ranges: [{\n                    column: 'y',\n                    minValue: 'A',\n                    maxValue: 'b'\n                }]\n            }]\n        }),\n        table = new DataTable({\n            columns: {\n                x: [1, 2, 3, 4, 5, 6],\n                y: ['a', 'a', 'b', 'b', 'c', 'c']\n            }\n        });\n\n    modifier\n        .modify(table)\n        .then((table) => {\n\n            assert.equal(\n                table.modified.getRowCount(),\n                4,\n                'Modified table should contain four rows.'\n            );\n\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [1, 2, 3, 4],\n                    y: ['a', 'a', 'b', 'b']\n                },\n                'Modified table should have expected structure of four rows.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/ChainModifier.test.js","skipped":false,"dir":"test"},{"name":"ChainModifier.modifyCell","suites":[],"line":101,"code":"QUnit.test('ChainModifier.modifyCell', function (assert) {\n\n    const done = assert.async(),\n        table = new DataTable({\n            columns: {\n                x: [1, 2, 3, 4, 5, 6]\n            }\n        });\n\n    table\n        .setModifier(new ChainModifier(\n            {},\n            new RangeModifier({\n                ranges: [{\n                    column: 'x',\n                    minValue: 2,\n                    maxValue: 5\n                }]\n            }),\n            new SortModifier({\n                direction: 'desc',\n                sortByColumn: 'x',\n            })\n        ))\n        .then((table) => {\n\n            assert.strictEqual(\n                table.getRowCount(),\n                6,\n                'DataTable should contain six rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                4,\n                'DataTable.modified should contain four rows.'\n            );\n\n            table.setCell('x', 2, 0);\n\n            assert.strictEqual(\n                table.getRowCount(),\n                6,\n                'DataTable should contain six rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                3,\n                'DataTable.modified should contain three rows.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/ChainModifier.test.js","skipped":false,"dir":"test"},{"name":"ChainModifier.modifyColumns","suites":[],"line":163,"code":"QUnit.test('ChainModifier.modifyColumns', function (assert) {\n\n    const done = assert.async(),\n        table = new DataTable({\n            columns: {\n                x: [1, 2, 3, 4, 5, 6]\n            }\n        });\n\n    table\n        .setModifier(new ChainModifier(\n            {},\n            new RangeModifier({\n                ranges: [{\n                    column: 'x',\n                    minValue: 2,\n                    maxValue: 5\n                }]\n            }),\n            new SortModifier({\n                direction: 'desc',\n                sortByColumn: 'x',\n            })\n        ))\n        .then((table) => {\n\n            assert.strictEqual(\n                table.getRowCount(),\n                6,\n                'DataTable should contain six rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                4,\n                'DataTable.modified should contain four rows.'\n            );\n\n            table.setColumn('x', [8, 3, 7, 4, 6, 5]);\n\n            assert.strictEqual(\n                table.getRowCount(),\n                6,\n                'DataTable should contain six rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                3,\n                'DataTable.modified should contain three rows.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/ChainModifier.test.js","skipped":false,"dir":"test"},{"name":"ChainModifier.modifyRows","suites":[],"line":226,"code":"QUnit.test('ChainModifier.modifyRows', function (assert) {\n\n    const done = assert.async(),\n        table = new DataTable({\n            columns: {\n                x: [6, 5, 4, 3, 2, 1],\n                ignoredColumn: ['a', 'b', 'c', 'd', 'e', 'f']\n            }\n        });\n\n    table\n        .setModifier(new ChainModifier(\n            {},\n            new RangeModifier({\n                ranges: [{\n                    column: 'x',\n                    minValue: 2,\n                    maxValue: 5\n                }]\n            }),\n            new SortModifier({\n                direction: 'asc',\n                sortByColumn: 'x',\n            })\n        ))\n        .then((table) => {\n\n            assert.strictEqual(\n                table.getRowCount(),\n                6,\n                'DataTable should contain six rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                4,\n                'DataTable.modified should contain four rows.'\n            );\n\n            table.setRows([{ x: 1 }, { ignoredColumn: 'z' }, { x: 5 }], 4);\n\n            assert.strictEqual(\n                table.getRowCount(),\n                7,\n                'DataTable should contain seven rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                4,\n                'DataTable.modified should contain three rows.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/ChainModifier.test.js","skipped":false,"dir":"test"},{"name":"InvertModifier.modify","suites":[],"line":4,"code":"QUnit.test('InvertModifier.modify', function (assert) {\n\n    const done = assert.async(),\n        modifier = new InvertModifier();\n\n    modifier\n        .modify(new DataTable({\n            columns: {\n                x: [ 0, 1, 2, 3, 4 ],\n                y: [ 'a', 'b', 'c', 'd', 'e' ]\n            }\n        }))\n        .then((table) => {\n\n            const tableColumnNames = table.getColumnNames();\n\n            assert.notStrictEqual(\n                table.modified,\n                table,\n                'The inverted table should be a new table instance.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                tableColumnNames.length,\n                'Original and inverted table should have an inverted amount of columns and rows.'\n            );\n\n            assert.deepEqual(\n                table.modified.getColumn('columnNames'),\n                tableColumnNames,\n                'Row names of inverted table should be the same as column names of original table.'\n            );\n\n            return modifier\n                .modify(table.modified.clone())\n                .then((modified) =>\n                    assert.deepEqual(\n                        modified.modified.getColumns(),\n                        table.getColumns(),\n                        'Double inverted table should be the same as original table.'\n                    )\n                );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/InvertModifier.test.js","skipped":false,"dir":"test"},{"name":"InvertModifier.modifyCell","suites":[],"line":58,"code":"QUnit.test('InvertModifier.modifyCell', function (assert) {\n\n    const done = assert.async(),\n        modifier = new InvertModifier(),\n        table = new DataTable({\n            columns: {\n                x: [4, 3, 2, 1, 0],\n                y: ['a', 'b', 'c', 'd', 'e']\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                table.getColumnNames().length,\n                'Original and inverted table should have an inverted amount of columns and rows.'\n            );\n\n            assert.strictEqual(\n                table.modified.getColumnNames().length,\n                table.getRowCount() + 1, // because of column 'columns'\n                'Original and inverted table should have an inverted amount of rows and columns.'\n            );\n\n            assert.strictEqual(\n                table.modified.getCell('4', 0),\n                0,\n                'Inverted table should contain valid value.'\n            );\n\n            table.setCell('x', 4, 5);\n\n            assert.strictEqual(\n                table.modified.getCell('4', 0),\n                5,\n                'Inverted table should contain valid value.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/InvertModifier.test.js","skipped":false,"dir":"test"},{"name":"InvertModifier.modifyColumns","suites":[],"line":109,"code":"QUnit.test('InvertModifier.modifyColumns', function (assert) {\n\n    const done = assert.async(),\n        modifier = new InvertModifier(),\n        table = new DataTable({\n            columns: {\n                x: [4, 3, 2, 1, 0],\n                y: ['a', 'b', 'c', 'd', 'e']\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.deepEqual(\n                table.modified.getColumn('3'),\n                [1, 'd'],\n                'Inverted table should contain valid row as column.'\n            );\n\n            table.setColumns({\n                y: ['f', 'g', 'h', 'i', 'j']\n            });\n\n            assert.deepEqual(\n                table.modified.getColumn('3'),\n                [1, 'i'],\n                'Inverted table should contain valid row as column.'\n            );\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                2,\n                'Inverted table should contain only two column as row.'\n            );\n\n            table.deleteColumns(['x']);\n\n            assert.strictEqual(\n                table.modified.getRowCount(),\n                1,\n                'Inverted table should contain only one column as row.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/InvertModifier.test.js","skipped":false,"dir":"test"},{"name":"InvertModifier.modifyRows","suites":[],"line":164,"code":"QUnit.test('InvertModifier.modifyRows', function (assert) {\n\n    const done = assert.async(),\n        modifier = new InvertModifier(),\n        table = new DataTable({\n            columns: {\n                x: [4, 3, 2, 1, 0],\n                y: ['a', 'b', 'c', 'd', 'e']\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.strictEqual(\n                table.modified.getColumn('5'),\n                undefined,\n                'Inverted table should not have sixth row.'\n            );\n\n            table.setRows([{ x: -1, y: 'f' }]);\n\n            assert.deepEqual(\n                table.modified.getColumn('5'),\n                [-1, 'f'],\n                'Inverted table should have sixth row.'\n            );\n\n            assert.strictEqual(\n                table.modified.getColumnNames().length,\n                7,\n                'Inverted table should contain six rows (plus one extra) as columns.'\n            );\n\n            table.deleteRows(2, 1);\n\n            assert.strictEqual(\n                table.modified.getColumnNames().length,\n                6,\n                'Inverted table should contain only five rows (plus one extra) as columns.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/InvertModifier.test.js","skipped":false,"dir":"test"},{"name":"RangeModifier.modify","suites":[],"line":4,"code":"QUnit.test('RangeModifier.modify', function (assert) {\n\n    const done = assert.async(),\n        table = new DataTable({\n            columns: {\n                x: [ -2, -1, 0, 1, 2 ],\n                y: [ 'a', 'b', 'c', 'd', 'e' ]\n            }\n        }),\n        modifier = new RangeModifier({});\n\n    modifier\n        .modify(table)\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getRow(0),\n                table.getRow(0),\n                'Filtered table should contain same rows.'\n            );\n            return table;\n        })\n        .then((table) => {\n            modifier.options.ranges.push({\n                column: 'y',\n                minValue: 'A',\n                maxValue: 'b'\n            });\n            return modifier.modify(table);\n        })\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [ -2, -1 ],\n                    y: [ 'a', 'b' ]\n                },\n                'Filtered table should contain reduced number of rows.'\n            );\n            return table;\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/RangeModifier.test.js","skipped":false,"dir":"test"},{"name":"RangeModifier.modifyCell","suites":[],"line":53,"code":"QUnit.test('RangeModifier.modifyCell', function (assert) {\n\n    const done = assert.async(),\n        modifier = new RangeModifier({\n            ranges: [{\n                column: 'x',\n                minValue: -10,\n                maxValue: -2\n            }, {\n                column: 'y',\n                minValue: 'e',\n                maxValue: 'z'\n            }]\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ -2, -1, 0, 1, 2 ],\n                y: [ 'a', 'b', 'c', 'd', 'e' ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: -2, y: 'a' }, { x: 2, y: 'e' }],\n                'Modified table should contain two rows.'\n            );\n\n            table.setCell('x', 0, -1.5);\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: 2, y: 'e' }],\n                'Modified table should contain one row.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n});","file":"typescript-karma/Data/Modifiers/RangeModifier.test.js","skipped":false,"dir":"test"},{"name":"RangeModifier.modifyColumns","suites":[],"line":101,"code":"QUnit.test('RangeModifier.modifyColumns', function (assert) {\n\n    const done = assert.async(),\n        modifier = new RangeModifier({\n            ranges: [{\n                column: 'x',\n                minValue: -10,\n                maxValue: -2\n            }, {\n                column: 'y',\n                minValue: 'e',\n                maxValue: 'z'\n            }]\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ -2, -1, 0, 1, 2 ],\n                y: [ 'a', 'b', 'c', 'd', 'e' ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: -2, y: 'a' }, { x: 2, y: 'e' }],\n                'Modified table should contain two rows.'\n            );\n\n            table.setColumns({ x: [-3, -2, 0] });\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: -3, y: 'a' }, { x: -2, y: 'b' }],\n                'Modified table should contain two rows with valid values.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/RangeModifier.test.js","skipped":false,"dir":"test"},{"name":"RangeModifier.modifyRows","suites":[],"line":150,"code":"QUnit.test('RangeModifier.modifyRows', function (assert) {\n\n    const done = assert.async(),\n        modifier = new RangeModifier({\n            ranges: [{\n                column: 'x',\n                minValue: -10,\n                maxValue: -2\n            }, {\n                column: 'y',\n                minValue: 'e',\n                maxValue: 'z'\n            }]\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ -2, -1, 0, 1, 2 ],\n                y: [ 'a', 'b', 'c', 'd', 'e' ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: -2, y: 'a' }, { x: 2, y: 'e' }],\n                'Modified table should contain two rows.'\n            );\n\n            table.setRows([{ x: -1.5 }], 0);\n\n            assert.deepEqual(\n                table.modified.getRowObjects(),\n                [{ x: 2, y: 'e' }],\n                'Modified table should contain one row.'\n            );\n\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/RangeModifier.test.js","skipped":false,"dir":"test"},{"name":"SortModifier.modify","suites":[],"line":4,"code":"QUnit.test('SortModifier.modify', (assert) => {\n\n    const done = assert.async(),\n        table = new DataTable({\n            columns: {\n                x: [ 0, 1, 2 ],\n                y: [ 3, 1, 2 ]\n            }\n        }),\n        ascXModifier = new SortModifier({\n            direction: 'asc',\n            orderByColumn: 'x'\n        }),\n        descYModifier = new SortModifier({\n            direction: 'desc',\n            orderByColumn: 'y'\n        });\n\n    descYModifier\n        .modify(table.clone())\n        .then((tableDescY) => {\n            assert.deepEqual(\n                tableDescY.modified.getColumn('x'),\n                [0, 2, 1],\n                'Sorted table should be in descending order of Y values.'\n            );\n            return tableDescY;\n        })\n        .then((tableDescY) =>\n            ascXModifier.modify(tableDescY.modified.clone())\n        )\n        .then((tableAscX) =>\n            assert.deepEqual(\n                tableAscX.modified.getColumns(['x', 'y']),\n                table.getColumns(['x', 'y']),\n                'Resorted table should be ordered the same as original.'\n            )\n        )\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/SortModifier.test.js","skipped":false,"dir":"test"},{"name":"SortModifier.modifyCell","suites":[],"line":51,"code":"QUnit.test('SortModifier.modifyCell', function (assert) {\n\n    const done = assert.async(),\n        modifier = new SortModifier({\n            direction: 'asc',\n            orderByColumn: 'y',\n            orderInColumn: 'x'\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ 0, 1, 2 ],\n                y: [ 3, 1, 2 ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 0, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#1)'\n            );\n            return table;\n        })\n        .then((table) => {\n            modifier.options.direction = 'desc';\n            return table.setModifier(modifier);\n        })\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [0, 2, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#2)'\n            );\n            return table;\n        })\n        .then((table) => {\n            table.setCell('y', 0, 0);\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 1, 0],\n                    y: [0, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#3)'\n            );\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/SortModifier.test.js","skipped":false,"dir":"test"},{"name":"SortModifier.modifyColumns","suites":[],"line":114,"code":"QUnit.test('SortModifier.modifyColumns', function (assert) {\n\n    const done = assert.async(),\n        modifier = new SortModifier({\n            direction: 'asc',\n            orderByColumn: 'y',\n            orderInColumn: 'x'\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ 0, 1, 2 ],\n                y: [ 3, 1, 2 ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 0, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#1)'\n            );\n            return table;\n        })\n        .then((table) => {\n            modifier.options.direction = 'desc';\n            return table.setModifier(modifier);\n        })\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [0, 2, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#2)'\n            );\n            return table;\n        })\n        .then((table) => {\n            table.setColumn('y', [1, 2, 3]);\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 1, 0],\n                    y: [1, 2, 3] \n                },\n                'Modified table should contain sorted columns. (#3)'\n            );\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/SortModifier.test.js","skipped":false,"dir":"test"},{"name":"SortModifier.modifyRows","suites":[],"line":177,"code":"QUnit.test('SortModifier.modifyRows', function (assert) {\n\n    const done = assert.async(),\n        modifier = new SortModifier({\n            direction: 'asc',\n            orderByColumn: 'y',\n            orderInColumn: 'x'\n        }),\n        table = new DataTable({\n            columns: {\n                x: [ 0, 1, 2 ],\n                y: [ 3, 1, 2 ]\n            }\n        });\n\n    table\n        .setModifier(modifier)\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 0, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#1)'\n            );\n            return table;\n        })\n        .then((table) => {\n            modifier.options.direction = 'desc';\n            return table.setModifier(modifier);\n        })\n        .then((table) => {\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [0, 2, 1],\n                    y: [3, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#2)'\n            );\n            return table;\n        })\n        .then((table) => {\n            table.setRow({ 'y': 0 }, 0);\n            assert.deepEqual(\n                table.modified.getColumns(),\n                {\n                    x: [2, 1, 0],\n                    y: [0, 1, 2] \n                },\n                'Modified table should contain sorted columns. (#3)'\n            );\n        })\n        .catch((e) =>\n            assert.notOk(true, e)\n        )\n        .then(() =>\n            done()\n        );\n\n});","file":"typescript-karma/Data/Modifiers/SortModifier.test.js","skipped":false,"dir":"test"},{"name":"Highcharts boost composition","suites":[],"line":4,"code":"QUnit.test('Highcharts boost composition', function (assert) {\n\n    assert.strictEqual(\n        typeof Highcharts.hasWebGLSupport,\n        'function',\n        'Highcharts should be decorated with boost functions.'\n    );\n\n});","file":"typescript-karma/masters/modules/boost.test.js","skipped":false,"dir":"test"}]}