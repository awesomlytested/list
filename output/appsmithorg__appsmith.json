{"repo":"appsmithorg/appsmith","url":"https://github.com/appsmithorg/appsmith","branch":"release","configs":[{"package":"appsmith","lang":"js","dir":"app/client/cypress","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Create Get echo Api call","suites":["Content Management System App"],"updatePoint":{"line":22,"column":30},"line":22,"code":"  it(\"Create Get echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"get_data\"); // creating get request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/get\");\n    cy.get(apiwidget.headerKey).type(\"info\");\n    cy.xpath(\"//span[text()='Key']\").click(); // entering the data in header\n\n    cy.get(apiwidget.headerValue).type('[{\"due\":\"2021-11-23\",\"assignee\":\"Dan.Wyman@hotmail.com\",\"title\":\"Recusan\",\"description\":\"Ut quisquam eum beatae facere eos aliquam laborum ea.\",\"id\":\"1\"},{\"due\":\"2021-11-23\",\"assignee\":\"Dashawn_Maggio30@gmail.com\",\"title\":\"Dignissimos eaque\",\"description\":\"Consequatur corrupti et possimus en.\",\"id\":\"2\"},{\"due\":\"2021-11-24\",\"assignee\":\"Curt50@gmail.com\",\"title\":\"Voluptas explicabo\",\"description\":\"Quia ratione optio et maiores.\",\"id\":\"3\"},{\"due\":\"2021-11-23\",\"assignee\":\"Shanna63@hotmail.com\",\"title\":\"Aut omnis.\",\"description\":\"Neque rerum numquam veniam voluptatum id. Aut daut.\",\"id\":\"4\"}]', {\n      parseSpecialCharSequences: false\n    });\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"200\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create Post echo Api call","suites":["Content Management System App"],"updatePoint":{"line":36,"column":31},"line":36,"code":"  it(\"Create Post echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"send_mail\");\n    cy.get(apiEditor.ApiVerb).click();\n    cy.xpath(appPage.selectPost).click(); // creating post request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/post\");\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    });\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).clear(); // binding the data with widgets in body tab\n\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).focus().type('{\"to\":\"{{to_input.text}}\",\"subject\":\"{{subject.text}}\",\"content\":\"{{content.text}}\"}', {\n      parseSpecialCharSequences: false\n    }).type(\"{del}{del}{del}\");\n    cy.SaveAndRunAPI();\n    cy.ResponseStatusCheck(\"201\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create Delete echo Api call","suites":["Content Management System App"],"updatePoint":{"line":58,"column":33},"line":58,"code":"  it(\"Create Delete echo Api call\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"delete_proposal\");\n    cy.get(apiEditor.ApiVerb).click();\n    cy.xpath(appPage.selectDelete).click(); // creating delete request using echo\n\n    cy.enterDatasourceAndPath(\"https://mock-api.appsmith.com/echo\", \"/delete\");\n    cy.contains(apiEditor.bodyTab).click({\n      force: true\n    }); // binding the data with widgets in body tab\n\n    cy.xpath(apiwidget.postbody).click({\n      force: true\n    }).focus().type('{\"title\":\"{{title.text}}\",\"due\":\"{{due.text}}\",\"assignee\":\"{{assignee.text}}\"}', {\n      parseSpecialCharSequences: false\n    }).type(\"{del}{del}{del}\");\n    cy.SaveAndRunAPI(); //cy.ResponseStatusCheck(\"200\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Send mail and verify post request body","suites":["Content Management System App"],"updatePoint":{"line":76,"column":44},"line":76,"code":"  it(\"Send mail and verify post request body\", function () {\n    // navigating to canvas\n    cy.xpath(appPage.pagebutton).click();\n    cy.xpath(appPage.submitButton).should(\"be.visible\");\n    cy.xpath(\"//div[text()='3']\").click({\n      force: true\n    });\n    cy.xpath(appPage.mailButton).click(); // verifying the mail to send and asserting post call's response\n\n    cy.xpath(appPage.sendMailText).should(\"be.visible\");\n    cy.xpath(\"//input[@value='Curt50@gmail.com']\").should(\"be.visible\");\n    cy.xpath(appPage.subjectField).type(\"Test\");\n    cy.xpath(appPage.contentField).last().type(\"Task completed\", {\n      force: true\n    });\n    cy.xpath(appPage.confirmButton).click({\n      force: true\n    });\n    cy.xpath(appPage.closeButton).click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    cy.xpath(appPage.datasourcesbutton).click({\n      force: true\n    });\n    cy.xpath(appPage.postApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Test\"); // cy.ResponseCheck(\"Task completed\");\n\n    cy.ResponseCheck(\"Curt50@gmail.com\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Delete proposal and verify delete request body","suites":["Content Management System App"],"updatePoint":{"line":110,"column":52},"line":110,"code":"  it(\"Delete proposal and verify delete request body\", function () {\n    // navigating back to canvas\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    cy.xpath(appPage.submitButton).should(\"be.visible\");\n    cy.xpath(\"//span[text()='Dan.Wyman@hotmail.com']\").click({\n      force: true\n    }); // deleting the proposal and asserting delete call's response\n\n    cy.xpath(appPage.deleteButton).click({\n      force: true\n    });\n    cy.xpath(appPage.deleteTaskText).should(\"be.visible\");\n    cy.xpath(appPage.confirmButton).click({\n      force: true\n    });\n    cy.xpath(appPage.pagebutton).click({\n      force: true\n    });\n    cy.xpath(appPage.datasourcesbutton).click({\n      force: true\n    });\n    cy.xpath(appPage.deleteApi).click({\n      force: true\n    });\n    cy.ResponseCheck(\"Dan.Wyman@hotmail.com\");\n    cy.ResponseCheck(\"Recusan\");\n  });","file":"integration/Smoke_TestSuite/Application/EchoApiCMS_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add dsl and authenticate datasource","suites":["PgAdmin Clone App"],"updatePoint":{"line":24,"column":41},"line":24,"code":"  it(\"Add dsl and authenticate datasource\", function () {\n    // authenticating datasource\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create queries","suites":["PgAdmin Clone App"],"updatePoint":{"line":35,"column":20},"line":35,"code":"  it(\"Create queries\", function () {\n    cy.NavigateToQueryEditor(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_schema\"); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.query).click({\n      force: true\n    }); // writing query to get the schema\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT schema_name FROM information_schema.schemata;\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_tables\");\n    cy.get(queryLocators.templateMenu).click(); // writing query to get all the tables\n\n    cy.get(\".CodeMirror textarea\").first().focus().type('select * from pg_catalog.pg_tables where schemaname = {{schema_select.selectedOptionValue || \"public\"}} ;', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"get_columns\");\n    cy.get(queryLocators.templateMenu).click(); // creating query to get the columns of the table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT column_name, data_type, table_name, ordinal_position, is_nullable FROM information_schema.COLUMNS\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"create_table\"); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.templateMenu).click(); // writing query to create new table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type('CREATE TABLE {{schema_select.selectedOptionValue}}.{{nt_name.text.replaceAll(\" \",\"_\")}}({{appsmith.store.nt_col.map((c)=>c.name.replaceAll(\" \",\"_\") + \" \" + c.dtype + (c.nnull ? \" NOT NULL \" :  \"\") + (c.pkey ? \" PRIMARY KEY \" : \"\")).join(\" , \")}})', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // clicking on new query to write a query\n\n    cy.contains(\".t--datasource-name\", datasourceName).find(queryLocators.createQuery).click();\n    cy.get(queryLocators.queryNameField).type(\"drop_table\");\n    cy.get(queryLocators.templateMenu).click(); // switching off Use Prepared Statement toggle\n\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    }); // creating query to delete the table\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"DROP TABLE {{schema_select.selectedOptionValue}}.{{List1.selectedItem.tablename}};\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery(); // clicking on chevron icon to go back to the datasources page\n\n    cy.get(appPage.dropdownChevronLeft).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new table","suites":["PgAdmin Clone App"],"updatePoint":{"line":118,"column":19},"line":118,"code":"  it(\"Add new table\", function () {\n    const uuid = () => Cypress._.random(0, 1e6);\n\n    const id = uuid();\n    const Table = `table${id}`; // clicking on chevron to go back to the application page\n\n    cy.get(appPage.dropdownChevronLeft).click(); // adding new table\n\n    cy.xpath(appPage.addNewtable).click();\n    cy.xpath(appPage.addTablename).clear().type(Table); // adding column to the table\n\n    cy.xpath(appPage.addColumn).click();\n    cy.xpath(appPage.columnNamefield).should(\"be.visible\");\n    cy.xpath(appPage.datatypefield).should(\"be.visible\");\n    cy.xpath(appPage.addTablename).type(\"id\");\n    cy.get(appPage.dropdownChevronDown).last().click();\n    cy.xpath(appPage.selectDatatype).click(); // switching on the Primary Key toggle\n\n    cy.get(widgetsPage.switchWidgetInactive).first().click(); // switching on the Not Null toggle\n\n    cy.get(widgetsPage.switchWidgetInactive).last().click();\n    cy.xpath(appPage.submitButton).click();\n    cy.xpath(appPage.addColumn).should(\"be.visible\");\n    cy.xpath(appPage.submitButton).click({\n      force: true\n    });\n    cy.xpath(appPage.closeButton).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"View and Delete table","suites":["PgAdmin Clone App"],"updatePoint":{"line":146,"column":27},"line":146,"code":"  it(\"View and Delete table\", function () {\n    cy.xpath(appPage.addNewtable).should(\"be.visible\"); // viewing the table's columns by clicking on view button\n\n    cy.xpath(appPage.viewButton).first().click({\n      force: true\n    }); // deleting the table through modal\n\n    cy.xpath(appPage.deleteButton).last().click({\n      force: true\n    });\n    cy.xpath(appPage.confirmButton).click();\n    cy.xpath(appPage.closeButton).click();\n  });","file":"integration/Smoke_TestSuite/Application/PgAdmin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":40},"line":13,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/random\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Call the api without error handling","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":41},"line":17,"code":"  it(\"Call the api without error handling\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.toggleOnClick).invoke(\"attr\", \"class\").then(classes => {\n      if (classes.includes(\"is-active\")) {\n        cy.get(widgetsPage.toggleOnClick).click();\n      }\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run()}}\");\n    });\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"failed to execute\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Call the api with error handling","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":36,"column":38},"line":36,"code":"  it(\"Call the api with error handling\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(\".t--property-control-onclick\").then($el => {\n      cy.updateCodeInput($el, \"{{Api1.run(() => {}, () => {})}}\");\n    });\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/Error_handling_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["API Panel Test Functionality"],"updatePoint":{"line":17,"column":37},"line":17,"code":"  it(\"1. Create a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create and runs query","suites":["API Panel Test Functionality"],"updatePoint":{"line":27,"column":30},"line":27,"code":"  it(\"2. Create and runs query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(queryLocators.settings).click({\n      force: true\n    });\n    cy.get(queryLocators.switch).last().click({\n      force: true\n    });\n    cy.get(queryLocators.query).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from {{ this.params.tableName || 'users' }} limit 10\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.runQuery();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Will pass execution params","suites":["API Panel Test Functionality"],"updatePoint":{"line":46,"column":35},"line":46,"code":"  it(\"3. Will pass execution params\", function () {\n    // Bind the table\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Query1.data}}\"); // Assert 'posts' data (default)\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    }); // Choose static button\n\n    cy.SearchEntityandOpen(\"StaticButton\"); // toggle js of onClick\n\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    }); // Bind with MultiApi with static value\n\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: 'users' })}}\"); // Choose dynamic button\n\n    cy.SearchEntityandOpen(\"DynamicButton\");\n    cy.wait(2000); // toggle js of onClick\n\n    cy.get(\".t--property-control-onclick\").scrollIntoView();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    }); // Bind with MultiApi with dynamicValue value\n\n    cy.testJsontext(\"onclick\", \"{{Query1.run(undefined, undefined, { tableName: EndpointInput.text })}}\"); // Publish the app\n\n    cy.PublishtheApp(); // Assert on load data in table\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    }); // Click Static button\n\n    cy.get(publishPage.buttonWidget).first().click(); //Wait for postExecute to finish\n\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000); // Assert statically bound \"users\" data\n\n    cy.readTabledataPublish(\"1\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 8\");\n    }); // Click dynamic button\n\n    cy.get(publishPage.buttonWidget).eq(1).click(); //Wait for postExecute to finish\n\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000); // Assert dynamically bound \"todos\" data\n\n    cy.readTabledataPublish(\"0\", \"1\").then(cellData => {\n      expect(cellData).to.be.equal(\"Test user 7\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/ExecutionParams_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":40},"line":13,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"selects set interval function","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":35},"line":17,"code":"  it(\"selects set interval function\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.buttonOnClick).last().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Set interval\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill setInterval action creator and test code generated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":24,"column":61},"line":24,"code":"  it(\"Fill setInterval action creator and test code generated\", () => {\n    cy.get(widgetsPage.toggleOnClick).invoke(\"attr\", \"class\").then(classes => {\n      if (classes.includes(\"is-active\")) {\n        cy.get(widgetsPage.toggleOnClick).click();\n      }\n    });\n    cy.get(\"label\").contains(\"Callback function\").parent().then($el => {\n      cy.updateCodeInput($el, \"{{() => { Api1.run() }}}\");\n    });\n    cy.get(\"label\").contains(\"Id\").parent().then($el => {\n      cy.updateCodeInput($el, \"myInterval\");\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"{{setInterval(() => { Api1.run() }, 5000,'myInterval')}}\");\n    cy.get(widgetsPage.toggleOnClick).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"works in the published version","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":36},"line":40,"code":"  it(\"works in the published version\", () => {\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"selects clear interval function","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":50,"column":37},"line":50,"code":"  it(\"selects clear interval function\", () => {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.get(widgetsPage.buttonOnClick).last().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Clear interval\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill clearInterval action creator and test code generated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":57,"column":63},"line":57,"code":"  it(\"Fill clearInterval action creator and test code generated\", () => {\n    cy.get(\"label\").contains(\"Id\").parent().then($el => {\n      cy.updateCodeInput($el, \"myInterval\");\n    });\n    cy.get(widgetsPage.toggleOnClick).click();\n    cy.get(\".t--property-control-onclick\").find(\".CodeMirror-code\").invoke(\"text\").should(\"equal\", \"{{clearInterval('myInterval')}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActionExecution/setInterval_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create a new query from the datasource editor","suites":["Google Sheet datasource test cases"],"updatePoint":{"line":22,"column":51},"line":22,"code":"  it(\"Create a new query from the datasource editor\", function () {\n    cy.get(`.t--datasource-name:contains('${datasourceName}') .t--queries-for-SAAS`).should(\"have.text\", \"1 query on this page\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ActiveDatasource/ActiveDatasource.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is accessible to super user","suites":["Admin settings page"],"updatePoint":{"line":24,"column":64},"line":24,"code":"  it(\"should test that settings page is accessible to super user\", () => {\n    cy.LogOut();\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"be.visible\");\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.wait(\"@getEnvVariables\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is not accessible to normal users","suites":["Admin settings page"],"updatePoint":{"line":36,"column":70},"line":36,"code":"  it(\"should test that settings page is not accessible to normal users\", () => {\n    cy.wait(2000);\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.visit(\"/applications\");\n    cy.get(\".t--profile-menu-icon\").should(\"be.visible\");\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").should(\"not.exist\");\n    cy.visit(\"/settings/general\"); // non super users are redirected to home page\n\n    cy.url().should(\"contain\", \"/applications\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page is redirected to default tab","suites":["Admin settings page"],"updatePoint":{"line":48,"column":65},"line":48,"code":"  it(\"should test that settings page is redirected to default tab\", () => {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.visit(\"/settings\");\n    cy.url().should(\"contain\", \"/settings/general\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that settings page tab redirects","suites":["Admin settings page"],"updatePoint":{"line":55,"column":50},"line":55,"code":"  it(\"should test that settings page tab redirects\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--admin-settings-menu\").click();\n    cy.get(AdminsSettingsLocators.generalTab).click();\n    cy.url().should(\"contain\", \"/settings/general\");\n    cy.get(AdminsSettingsLocators.advancedTab).click();\n    cy.url().should(\"contain\", \"/settings/advanced\");\n    cy.get(AdminsSettingsLocators.authenticationTab).click();\n    cy.url().should(\"contain\", \"/settings/authentication\");\n    cy.get(AdminsSettingsLocators.emailTab).click();\n    cy.url().should(\"contain\", \"/settings/email\");\n    cy.get(AdminsSettingsLocators.googleMapsTab).click();\n    cy.url().should(\"contain\", \"/settings/google-maps\");\n    cy.get(AdminsSettingsLocators.versionTab).click();\n    cy.url().should(\"contain\", \"/settings/version\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test that setting page back button redirects to home page","suites":["Admin settings page"],"updatePoint":{"line":73,"column":70},"line":73,"code":"  it(\"should test that setting page back button redirects to home page\", () => {\n    cy.get(AdminsSettingsLocators.backButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.backButton).click();\n    cy.url().should(\"contain\", \"/applications\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test save and clear buttons disabled state","suites":["Admin settings page"],"updatePoint":{"line":78,"column":55},"line":78,"code":"  it(\"should test save and clear buttons disabled state\", () => {\n    cy.visit(\"/settings/general\");\n\n    const assertVisibilityAndDisabledState = () => {\n      cy.get(AdminsSettingsLocators.saveButton).should(\"be.visible\");\n      cy.get(AdminsSettingsLocators.saveButton).should(\"be.disabled\");\n      cy.get(AdminsSettingsLocators.resetButton).should(\"be.visible\");\n      cy.get(AdminsSettingsLocators.resetButton).should(\"be.disabled\");\n    };\n\n    assertVisibilityAndDisabledState();\n    cy.get(AdminsSettingsLocators.instanceName).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.instanceName).clear().type(\"AppsmithInstance\");\n    cy.get(AdminsSettingsLocators.saveButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.saveButton).should(\"not.be.disabled\");\n    cy.get(AdminsSettingsLocators.resetButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.resetButton).should(\"not.be.disabled\");\n    cy.get(AdminsSettingsLocators.resetButton).click();\n    assertVisibilityAndDisabledState();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving a setting value","suites":["Admin settings page"],"updatePoint":{"line":98,"column":40},"line":98,"code":"  it(\"should test saving a setting value\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"not.exist\");\n    cy.get(AdminsSettingsLocators.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(AdminsSettingsLocators.instanceName).clear().type(uuid);\n    });\n    cy.get(AdminsSettingsLocators.saveButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.saveButton).should(\"not.be.disabled\");\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(AdminsSettingsLocators.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n    });\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test saving settings value from different tabs","suites":["Admin settings page"],"updatePoint":{"line":127,"column":59},"line":127,"code":"  it(\"should test saving settings value from different tabs\", () => {\n    cy.visit(\"/settings/general\");\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"not.exist\");\n    cy.get(AdminsSettingsLocators.instanceName).should(\"be.visible\");\n    let instanceName;\n    cy.generateUUID().then(uuid => {\n      instanceName = uuid;\n      cy.get(AdminsSettingsLocators.instanceName).clear().type(uuid);\n    });\n    cy.get(AdminsSettingsLocators.saveButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.saveButton).should(\"not.be.disabled\");\n    cy.get(AdminsSettingsLocators.emailTab).click();\n    cy.get(AdminsSettingsLocators.saveButton).should(\"be.visible\");\n    cy.get(AdminsSettingsLocators.saveButton).should(\"not.be.disabled\");\n    cy.get(AdminsSettingsLocators.fromAddress).should(\"be.visible\");\n    let fromAddress;\n    cy.generateUUID().then(uuid => {\n      fromAddress = uuid;\n      cy.get(AdminsSettingsLocators.fromAddress).clear().type(`${uuid}@appsmith.com`);\n    });\n    cy.intercept(\"POST\", \"/api/v1/admin/restart\", {\n      body: {\n        responseMeta: {\n          status: 200,\n          success: true\n        },\n        data: true\n      }\n    });\n    cy.get(AdminsSettingsLocators.saveButton).click();\n    cy.wait(\"@postEnvVariables\").then(interception => {\n      expect(interception.request.body.APPSMITH_INSTANCE_NAME).to.equal(instanceName);\n      expect(interception.request.body.APPSMITH_MAIL_FROM).to.equal(`${fromAddress}@appsmith.com`);\n    });\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"be.visible\");\n    cy.wait(3000);\n    cy.get(AdminsSettingsLocators.restartNotice).should(\"not.exist\");\n    cy.wait(3000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/AdminSettings/Admin_settings_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test API copy/Move/delete feature","suites":["API Panel Test Functionality "],"updatePoint":{"line":8,"column":39},"line":8,"code":"  it(\"Test API copy/Move/delete feature\", function () {\n    cy.log(\"Login Successful\");\n    cy.Createpage(\"SecondPage\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, \"{{ '/random' }}\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.GlobalSearchEntity(\"FirstAPI\");\n    cy.xpath('//*[local-name()=\"g\" and @id=\"Icon/Outline/more-vertical\"]').last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.copyEntityToPage(\"SecondPage\");\n    cy.GlobalSearchEntity(\"FirstAPICopy\"); // click on learn how link\n\n    cy.get(\".t--learn-how-apis-link\").click(); // this should open in a global search modal\n\n    cy.get(commonlocators.globalSearchModal);\n    cy.get(\"body\").click(0, 0);\n    cy.MoveAPIToPage(\"Page1\");\n    cy.SearchEntityandOpen(\"FirstAPICopy\");\n    cy.get(apiwidget.resourceUrl).should(\"contain.text\", \"{{ '/random' }}\");\n    cy.DeleteAPIFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_all_sidebar_actions_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Search API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":8,"column":29},"line":8,"code":"  it(\"Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.SearchEntityandOpen(\"FirstAPI\");\n    cy.EditApiName(\"SecondAPI\");\n    cy.ClearSearch();\n    cy.SearchEntityandOpen(\"SecondAPI\");\n    cy.DeleteAPI();\n    cy.ClearSearch();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should update loading state after cancellation of confirmation for run query","suites":["API Panel Test Functionality"],"updatePoint":{"line":26,"column":82},"line":26,"code":"  it(\"Should update loading state after cancellation of confirmation for run query\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.confirmBeforeExecute).click({\n      force: true\n    });\n    cy.get(apiwidget.runQueryButton).click();\n    cy.get(\".bp3-dialog\").find(\"button\").contains(\"Cancel\").click();\n    cy.get(apiwidget.runQueryButton).children().should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not crash on key delete","suites":["API Panel Test Functionality"],"updatePoint":{"line":43,"column":36},"line":43,"code":"  it(\"Should not crash on key delete\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"CrashTestAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }); // assert so that this fails\n\n    cy.get(apiwidget.headerKey).should(\"be.visible\");\n    cy.get(apiwidget.headerKey).should(\"have.value\", \"\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should correctly parse query params","suites":["API Panel Test Functionality"],"updatePoint":{"line":60,"column":41},"line":60,"code":"  it(\"Should correctly parse query params\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"APIWithQueryParams\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methodWithQueryParam);\n    cy.ValidateQueryParams({\n      key: \"q\",\n      value: \"mimeType='application/vnd.google-apps.spreadsheet'\"\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Shows evaluated value pane when url field is focused","suites":["API Panel Test Functionality"],"updatePoint":{"line":69,"column":58},"line":69,"code":"  it(\"Shows evaluated value pane when url field is focused\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestAPI\");\n    cy.get(\".CodeMirror-placeholder\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.evaluatedTypeTitle).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Edit_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether input and type dropdown selector exist when multi-part is selected","suites":["API Panel request body"],"updatePoint":{"line":8,"column":86},"line":8,"code":"  it(\"Check whether input and type dropdown selector exist when multi-part is selected\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.contains(apiEditor.bodyTab).click();\n    cy.contains(testdata.apiFormDataBodyType).click();\n    cy.contains(testdata.apiMultipartBodyType).click();\n    cy.get(apiwidget.formEncoded).should(\"be.visible\");\n    cy.get(apiwidget.multipartTypeDropdown).should(\"be.visible\");\n    cy.DeleteAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Multipart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether input exists when form-encoded is selected","suites":["API Panel request body"],"updatePoint":{"line":8,"column":62},"line":8,"code":"  it(\"Check whether input exists when form-encoded is selected\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SelectAction(testdata.postAction);\n    cy.contains(apiEditor.bodyTab).click();\n    cy.contains(testdata.apiFormDataBodyType).click();\n    cy.get(apiwidget.formEncoded).should(\"be.visible\");\n    cy.DeleteAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_RequestBody_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Search API fetaure","suites":["API Panel Test Functionality "],"updatePoint":{"line":4,"column":29},"line":4,"code":"  it(\"Test Search API fetaure\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.RunAPI();\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"SecondAPI\");\n    cy.RunAPI();\n    cy.log(\"Creation of SecondAPI Action successful\");\n    cy.SearchEntity(\"SecondAPI\", \"FirstAPI\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test api name unique error","suites":["Name uniqueness test"],"updatePoint":{"line":2,"column":32},"line":2,"code":"  it(\"Test api name unique error\", () => {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"Uni\");\n    cy.log(\"Creation of UniqueName Action successful\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Unique Name","suites":["Name uniqueness test"],"updatePoint":{"line":9,"column":26},"line":9,"code":"  it(\"Validate Unique Name\", () => {\n    cy.CreationOfUniqueAPIcheck(\"Uni\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate download apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":12,"column":37},"line":12,"code":"  it(\"Validate download apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"download\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate window object property apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":15,"column":51},"line":15,"code":"  it(\"Validate window object property apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"localStorage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate window object method apiname check","suites":["Name uniqueness test"],"updatePoint":{"line":18,"column":49},"line":18,"code":"  it(\"Validate window object method apiname check\", () => {\n    cy.CreationOfUniqueAPIcheck(\"resizeTo\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ApiPaneTests/API_Unique_name_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether the duplicate application has the same dsl as the original","suites":["Duplicate application"],"updatePoint":{"line":15,"column":78},"line":15,"code":"  it(\"Check whether the duplicate application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    cy.testJsontext(\"defaulttext\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      parentApplicationDsl = response.response.body.data.dsl;\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.duplicateApp).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(4000);\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"@getPage\").then(httpResponse => {\n      duplicateApplicationDsl = httpResponse.response.body.data.layouts[0].dsl;\n      cy.log(JSON.stringify(duplicateApplicationDsl));\n      cy.log(JSON.stringify(parentApplicationDsl));\n      expect(JSON.stringify(duplicateApplicationDsl)).to.deep.equal(JSON.stringify(parentApplicationDsl));\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/DuplicateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if exporting app flow works as expected","suites":["Export application as a JSON file"],"updatePoint":{"line":15,"column":51},"line":15,"code":"  it(\"Check if exporting app flow works as expected\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.toastMessage).should(\"contain\", \"Successfully exported\"); // fetching the exported app file manually to be verified.\n\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\", `attachment; filename*=UTF-8''${appname}.json`);\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with admin access,should be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":43,"column":61},"line":43,"code":"  it(\"User with admin access,should be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CreateAppForOrg(orgid, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.adminRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appMoreIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.exportAppFromMenu).should(\"be.visible\");\n      cy.get(\"body\").click(50, 40);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.contains(\"Export Application\").should(\"be.visible\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with developer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":87,"column":69},"line":87,"code":"  it(\"User with developer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CreateAppForOrg(orgid, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.developerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appMoreIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.exportAppFromMenu).should(\"not.exist\");\n      cy.get(\"body\").click(50, 40);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).first().click({\n        force: true\n      });\n      cy.get(homePage.applicationName).click({\n        force: true\n      });\n      cy.contains(\"Export Application\").should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User with viewer access,should not be able to export the app","suites":["Export application as a JSON file"],"updatePoint":{"line":131,"column":66},"line":131,"code":"  it(\"User with viewer access,should not be able to export the app\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CreateAppForOrg(orgid, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.wait(2000);\n      cy.log({\n        appid\n      });\n      cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n      cy.get(homePage.appEditIcon).should(\"not.exist\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/ExportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the forked application has the same dsl as the original","suites":["Fork application across orgs"],"updatePoint":{"line":15,"column":70},"line":15,"code":"  it(\"Check if the forked application has the same dsl as the original\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"inputUpdate\");\n    cy.testJsontext(\"defaulttext\", \"A\");\n    cy.wait(\"@inputUpdate\").then(response => {\n      parentApplicationDsl = response.response.body.data.dsl;\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.NavigateToHome();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.forkAppFromMenu).click({\n      force: true\n    }); // select a different org here\n\n    cy.get(homePage.forkAppOrgList).children().last().click({\n      force: true\n    });\n    cy.get(homePage.forkAppOrgButton).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(4000);\n    cy.wait(\"@postForkAppOrg\").then(httpResponse => {\n      expect(httpResponse.status).to.equal(200);\n    }); // check that forked application has same dsl\n\n    cy.get(\"@getPage\").then(httpResponse => {\n      const data = httpResponse.response.body.data;\n      forkedApplicationDsl = data.layouts[0].dsl;\n      cy.log(JSON.stringify(forkedApplicationDsl));\n      cy.log(JSON.stringify(parentApplicationDsl));\n      expect(JSON.stringify(forkedApplicationDsl)).to.contain(JSON.stringify(parentApplicationDsl));\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/ForkApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the application menu and update name and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":11,"column":114},"line":11,"code":"  it(\"Open the application menu and update name and then check whether update is reflected in the application card\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(`${appname} updated` + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCardName).should(\"contain\", appname);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the application menu and update icon and then check whether update is reflected in the application card","suites":["Update Application"],"updatePoint":{"line":28,"column":114},"line":28,"code":"  it(\"Open the application menu and update icon and then check whether update is reflected in the application card\", () => {\n    cy.get(homePage.applicationIconSelector).first().click();\n    cy.wait(\"@updateApplication\").then(xhr => {\n      iconname = xhr.response.body.data.icon;\n    }).should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.applicationCard).first().within(() => {\n      cy.get(\"a\").invoke(\"attr\", \"name\").should(\"equal\", iconname);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check for errors in updating application name","suites":["Update Application"],"updatePoint":{"line":37,"column":51},"line":37,"code":"  it(\"Check for errors in updating application name\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \");\n    cy.get(homePage.toastMessage).should(\"contain\", \"Application name can't be empty\");\n    cy.AppSetupForRename();\n    cy.get(homePage.applicationName).type(\"  \" + \"{enter}\");\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.data.name\", `${appname} updated`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Updates the name of first application to very long name and checks whether update is reflected in the application card with a popover","suites":["Update Application"],"updatePoint":{"line":59,"column":139},"line":59,"code":"  it(\"Updates the name of first application to very long name and checks whether update is reflected in the application card with a popover\", () => {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.applicationName).type(veryLongAppName + \"{enter}\");\n    cy.get(homePage.appsContainer).click({\n      force: true\n    });\n    cy.wait(\"@updateApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.searchInput).type(veryLongAppName); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().find(homePage.applicationCardName).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-target.bp3-popover-open\").should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Applications/UpdateApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check analytics is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":4,"column":76},"line":4,"code":"  it(\"Should check analytics is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getUser\").should(\"have.nested.property\", \"response.body.data.enableTelemetry\", false);\n    cy.window().then(window => {\n      expect(window.analytics).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://api.segment.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedOrg(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Auth/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check smartlook is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":27,"column":76},"line":27,"code":"  it(\"Should check smartlook is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getUser\");\n    cy.window().then(window => {\n      expect(window.smartlook).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.smartlook.**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedOrg(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Auth/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should check Sentry is not initialised when enableTelemtry is false","suites":["Checks for analytics initialization"],"updatePoint":{"line":50,"column":73},"line":50,"code":"  it(\"Should check Sentry is not initialised when enableTelemtry is false\", function () {\n    cy.visit(\"/applications\");\n    cy.reload();\n    cy.wait(3000);\n    cy.wait(\"@getUser\");\n    cy.window().then(window => {\n      expect(window.Sentry).to.be.equal(undefined);\n    });\n    let interceptFlag = false;\n    cy.intercept(\"POST\", \"https://**.sentry.io/**\", req => {\n      interceptFlag = true;\n      req.continue();\n    });\n    cy.generateUUID().then(id => {\n      appId = id;\n      cy.CreateAppInFirstListedOrg(id);\n      localStorage.setItem(\"AppName\", appId);\n    });\n    cy.wait(3000);\n    cy.window().then(() => {\n      cy.wrap(interceptFlag).should(\"eq\", false);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Auth/Analytics_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should redirect away from auth pages if already logged in","suites":["Check for redirects associated with auth pages"],"updatePoint":{"line":2,"column":63},"line":2,"code":"  it(\"Should redirect away from auth pages if already logged in\", function () {\n    const loginPageRoute = \"/user/login\";\n    cy.visit(loginPageRoute); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.location(\"pathname\").should(\"not.equal\", loginPageRoute);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Auth/Redirects__spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value for atob method","suites":["aTob and bToa library tests "],"updatePoint":{"line":19,"column":58},"line":19,"code":"  it(\"Input widget test with default value for atob method\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.atobInput + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/aTobAndbToaBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value for btoa method","suites":["aTob and bToa library tests "],"updatePoint":{"line":24,"column":58},"line":24,"code":"  it(\"Input widget test with default value for btoa method\", function () {\n    cy.SearchEntityandOpen(\"Input2\");\n    cy.testJsontext(\"defaulttext\", testdata.btoaInput + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/aTobAndbToaBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"publish widget and validate the data displayed in input widgets value for aToB and bToa","suites":["aTob and bToa library tests "],"updatePoint":{"line":29,"column":93},"line":29,"code":"  it(\"publish widget and validate the data displayed in input widgets value for aToB and bToa\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"A\");\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", \"QQ==\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/aTobAndbToaBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"opens autocomplete for bindings","suites":["Dynamic input autocomplete"],"updatePoint":{"line":13,"column":37},"line":13,"code":"  it(\"opens autocomplete for bindings\", () => {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{{\", {\n        parseSpecialCharSequences: true\n      }); // Tests if autocomplete will open\n\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // Tests if data tree entities are sorted\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"input.text\"); // Tests if \"No suggestions\" message will pop if you type any garbage\n\n      cy.get(dynamicInputLocators.input).first().click({\n        force: true\n      }).type(\"{uparrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{ctrl}{shift}{downarrow}\", {\n        parseSpecialCharSequences: true\n      }).type(\"{{ garbage\", {\n        parseSpecialCharSequences: true\n      }).then(() => {\n        cy.get(\".CodeMirror-Tern-tooltip\").should(\"have.text\", \"No suggestions\");\n      });\n    });\n    cy.evaluateErrorMessage(\"ReferenceError: garbage is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"opens current value popup","suites":["Dynamic input autocomplete"],"updatePoint":{"line":48,"column":31},"line":48,"code":"  it(\"opens current value popup\", () => {\n    // Test on api pane\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createapi).click({\n      force: true\n    });\n    cy.wait(\"@createNewApi\");\n    cy.get(apiwidget.headerValue).within(() => {\n      cy.get(\"textarea\").click({\n        force: true\n      });\n    });\n    cy.assertEvaluatedValuePopup(\"string\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":40},"line":17,"code":"  it(\"Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      apiData = valueToTest;\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Validate the Api data is updated on List widget","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":27,"column":58},"line":27,"code":"  it(\"Test_Validate the Api data is updated on List widget\", function () {\n    cy.SearchEntityandOpen(\"List1\");\n    cy.testJsontext(\"items\", \"{{Api1.data.users}}\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 8);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Validate the list widget ","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":36},"line":40,"code":"  it(\"Test_Validate the list widget \", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"List1\");\n    cy.testJsontext(\"itemspacing\\\\(px\\\\)\", \"50\");\n    cy.get(\".t--draggable-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--draggable-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n    cy.PublishtheApp();\n    cy.get(\".t--widget-textwidget span\").should(\"have.length\", 6);\n    cy.get(\".t--widget-textwidget span\").first().invoke(\"text\").then(text => {\n      expect(text).to.equal(valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_API_with_List_Widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add an API by binding a button in its header","suites":["Bind a button and Api usecase"],"updatePoint":{"line":23,"column":50},"line":23,"code":"  it(\"Add an API by binding a button in its header\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.get(apiwidget.headerKey).first().click({\n      force: true\n    }).type(\"key\", {\n      parseSpecialCharSequences: true\n    });\n    cy.get(apiwidget.headerValue).first().click({\n      force: true\n    }).type(\"{{Button1.text\", {\n      parseSpecialCharSequences: true\n    });\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      valueToTest = `${text.match(/\"(.*)\"/)[0].split('\"').join(\"\")}`;\n      cy.log(valueToTest);\n      apiData = valueToTest;\n      cy.log(\"val1:\" + valueToTest);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Name updation","suites":["Bind a button and Api usecase"],"updatePoint":{"line":43,"column":26},"line":43,"code":"  it(\"Button-Name updation\", function () {\n    cy.SearchEntityandOpen(\"Button1\"); //changing the Button Name\n\n    cy.widgetText(testdata.buttonName, widgetsPage.buttonWidget, widgetsPage.buttonWidget + \" \" + commonlocators.widgetNameTag);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API datasource binding with button name validation","suites":["Bind a button and Api usecase"],"updatePoint":{"line":48,"column":56},"line":48,"code":"  it(\"API datasource binding with button name validation\", function () {\n    cy.SearchEntityandOpen(\"Api1\");\n    cy.get(apiwidget.headerValue).first().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.contains(testdata.buttonName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Button_with_API_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add users api, execute it and go to sniping mode.","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":7,"column":60},"line":7,"code":"  it(\"Test_Add users api, execute it and go to sniping mode.\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(\".t--select-in-canvas\").click();\n    cy.get(\".t--sniping-mode-banner\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableWithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Click on table name controller to bind the data and exit sniping mode","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":75},"line":13,"code":"  it(\"Click on table name controller to bind the data and exit sniping mode\", function () {\n    cy.get(\".t--draggable-tablewidget\").trigger(\"mouseover\");\n    cy.get(\".t--settings-sniping-control\").click();\n    cy.get(\".t--property-control-tabledata .CodeMirror\").contains(\"{{Api1.data}}\");\n    cy.get(\".t--sniping-mode-banner\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_dataToTableWithSnipingMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Text, Validate selectedDate functionality","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":17,"column":58},"line":17,"code":"  it(\"DatePicker-Text, Validate selectedDate functionality\", function () {\n    /**\n     * Bind DatePicker1 to Text for \"selectedDate\"\n     */\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    /**\n     * Set the Calender for today's date in DatePicker1\n     */\n\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDateFooter();\n    cy.SetDateToToday();\n    cy.getDate(1, \"YYYY-MM-DD\").then(date => {\n      cy.log(\"retured date\" + date);\n      nextDay = date;\n      cy.wait(\"@updateLayout\");\n      cy.wait(\"@updateLayout\");\n      cy.PublishtheApp();\n      /**\n       * Change the date in DatePicker1 in Publish mode and validate the same in Text Widget\n       */\n\n      cy.get(publishPage.datepickerWidget + commonlocators.inputField).eq(0).click();\n      cy.ClearDateFooter();\n      cy.setDate(1, \"ddd MMM DD YYYY\");\n      cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    });\n    cy.get(commonlocators.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":48,"column":91},"line":48,"code":"  it(\"DatePicker1-text: Change the date in DatePicker1 and Validate the same in text widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * Bind the datepicker1 to text widget\n     */\n\n    cy.testJsontext(\"text\", \"{{DatePicker1.defaultDate}}\");\n    /**\n     * Fetching the date on DatePicker2\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").eq(1).invoke(\"val\").then(val => {\n      dateDp2 = val;\n      cy.log(dateDp2);\n    });\n    /**\n     * Changing date on datepicker1 to current date +1\n     */\n\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDateFooter();\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    cy.get(commonlocators.onDateSelectedField).click();\n    /**\n     *Validate the date in text widget\n     */\n\n    cy.getDate(1, \"YYYY-MM-DD\").then(date => {\n      cy.log(\"retured date\" + date);\n      nextDay = date;\n      cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate the Date is not changed in DatePicker2","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":82,"column":53},"line":82,"code":"  it(\"Validate the Date is not changed in DatePicker2\", function () {\n    cy.log(\"dateDp2:\" + dateDp2);\n    cy.get(formWidgetsPage.datepickerWidget + commonlocators.inputField).eq(1).should(\"have.value\", dateDp2);\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"contain\", nextDay);\n    cy.get(publishPage.datepickerWidget + commonlocators.inputField).eq(1).should(\"have.value\", dateDp2);\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Text, Validate Multiple Binding","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":92,"column":48},"line":92,"code":"  it(\"DatePicker-Text, Validate Multiple Binding\", function () {\n    /**\n     * Bind the DatePicker1 and DatePicker2 along with hard coded text to Text widget\n     */\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.isDisabled}} DatePicker {{DatePicker2.isDisabled}}\");\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"contain.text\", \"DatePicker\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if on deselection of date triggers the onDateSelected action or not.","suites":["Binding the Datepicker and Text Widget"],"updatePoint":{"line":105,"column":81},"line":105,"code":"  it(\"Checks if on deselection of date triggers the onDateSelected action or not.\", function () {\n    /**\n     * bind datepicker to show a message \"Hello\" on date selected\n     */\n    cy.openPropertyPane(\"datepickerwidget\");\n    cy.get(commonlocators.onDateSelectedField).click();\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Show message\").click({\n      force: true\n    });\n    cy.getAlert(commonlocators.optionchangetextDatePicker);\n    /**\n     * checking if on selecting the date triggers the message\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget).first().click();\n    cy.ClearDateFooter();\n    cy.SetDateToToday();\n    cy.get(commonlocators.toastmsg).contains(\"hello\");\n    /**\n     * checking if on deselecting the date triggers the message or not.\n     * It should not trigger any message on deselection\n     */\n\n    cy.get(formWidgetsPage.datepickerWidget).first().click();\n    cy.get(formWidgetsPage.datepickerFooter).contains(\"Clear\").click();\n    cy.get(commonlocators.toastmsg).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_DatePicker_Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":60},"line":15,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on sorting","suites":["Binding the Table and input Widget"],"updatePoint":{"line":20,"column":68},"line":20,"code":"  it(\"validation of data displayed in input widgets based on sorting\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"0\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2381224\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of column id displayed in input widgets based on sorted column","suites":["Binding the Table and input Widget"],"updatePoint":{"line":44,"column":79},"line":44,"code":"  it(\"validation of column id displayed in input widgets based on sorted column\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(\".t--property-control-defaulttext .CodeMirror  textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").then($cm => {\n      if ($cm.val() !== \"\") {\n        cy.get(\".t--property-control-defaulttext .CodeMirror textarea\").first().clear({\n          force: true\n        });\n      }\n    });\n    cy.get(widgetsPage.defaultInput).type(testdata.sortedColumn);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"id\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_InputWidget_Table_Sorting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a query and populate response by choosing addWidget and validate in Table Widget & Bug 7413","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":17,"column":107},"line":17,"code":"  it(\"1. Create a query and populate response by choosing addWidget and validate in Table Widget & Bug 7413\", () => {\n    cy.addDsl(dsl);\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n      cy.get(queryLocators.templateMenu).click();\n      cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500); // Mock the response for this test\n\n      cy.intercept(\"/api/v1/actions/execute\", {\n        fixture: \"addWidgetTable-mock\"\n      });\n      cy.onlyQueryRun();\n      cy.get(queryEditor.suggestedTableWidget).click();\n      cy.createJSObject(\"return Query1.data;\");\n      cy.SearchEntityandOpen(\"Table1\");\n      cy.testJsontext(\"tabledata\", \"{{JSObject1.myFun1()}}\");\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n        let tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n      });\n      cy.get(homePage.shareApp).click();\n      cy.enablePublicAccess();\n      cy.wait(3000);\n      cy.PublishtheApp();\n      cy.wait(3000);\n      cy.url().then(url => {\n        currentUrl = url;\n        cy.log(\"Published url is: \" + currentUrl);\n        cy.get(publish.backToEditor).click();\n        cy.wait(2000);\n        cy.visit(currentUrl);\n        cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n        cy.wait(3000);\n        cy.isSelectRow(1);\n        cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n          let tabValue = tabData;\n          cy.log(\"the value is after Publish: \" + tabValue);\n          expect(tabValue).to.be.equal(\"5\");\n          cy.log(\"Verified that JSObject is visible for Public viewing\");\n        }); // cy.tablefirstdataRow().then((tabValue) => {\n        //   expect(tabValue).to.be.equal(\"5\");\n        //   //expect(tabValue).to.have.lengthOf(0); // verification while JS Object was still Beta!\n        //   //cy.log(\"Verified that JSObject is not visible for Public viewing\");\n        // });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_JSObject_Postgress_Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":59},"line":13,"code":"  it(\"Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":17,"column":56},"line":17,"code":"  it(\"Validate Table with API data and then add a column\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    cy.ValidateTableData(\"1\");\n    cy.addColumn(\"CustomColumn\");\n    cy.editColumn(\"customColumn1\");\n    cy.editColName(\"UpdatedColName\");\n    cy.readTabledataPublish(\"0\", \"5\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"0\", \"9\").then(tabData => {\n        expect(tabData).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check Image alignment is working as expected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":42,"column":50},"line":42,"code":"  it(\"Check Image alignment is working as expected\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.editColumn(\"avatar\");\n    cy.changeColumnType(\"Image\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"50% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"100% 50%\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.closePropertyPane();\n    cy.get(`.t--widget-tablewidget .tbody .image-cell`).first().should(\"have.css\", \"background-position\", \"0% 50%\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table json data and check the derived column values after update","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":66,"column":77},"line":66,"code":"  it(\"Update table json data and check the derived column values after update\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"name\");\n    cy.tableColumnDataValidation(\"status\");\n    cy.tableColumnDataValidation(\"gender\");\n    cy.tableColumnDataValidation(\"avatar\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"address\");\n    cy.tableColumnDataValidation(\"createdAt\");\n    cy.tableColumnDataValidation(\"updatedAt\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\");\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.get(\".draggable-header:contains('UpdatedColName')\").should(\"be.visible\");\n    cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      cy.readTabledataPublish(\"1\", \"2\").then(tabData => {\n        cy.log(\"computed value of plain text \" + tabData);\n        expect(tabData).to.be.equal(tabValue);\n      });\n      cy.closePropertyPane();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_Table_Widget_API_Derived_Column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Test_Add users api and execute api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":12,"column":43},"line":12,"code":"  it(\"1. Test_Add users api and execute api\", function () {\n    cy.createAndFillApi(this.data.userApi, \"/users\");\n    cy.RunAPI();\n    cy.get(apiPage.responseBody).contains(\"name\").siblings(\"span\").invoke(\"text\").then(text => {\n      const value = text.match(/\"(.*)\"/)[0];\n      cy.log(value);\n      apiData = value;\n      cy.log(\"val1:\" + value);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Test_Validate the Api data is updated on Table widget","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":22,"column":62},"line":22,"code":"  it(\"2. Test_Validate the Api data is updated on Table widget\", function () {\n    cy.SearchEntityandOpen(\"Table1\"); //cy.openPropertyPane(\"tablewidget\");\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    /**\n     * readTabledata--> is to read the table contents\n     * @param --> \"row num\" and \"col num\"\n     */\n\n    cy.readTabledata(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n    cy.get(commonlocators.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":40,"column":88},"line":40,"code":"  it(\"3. Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(\".t--widget-tablewidget .t--search-input\").first().type(\"Currey\");\n    cy.wait(5000);\n    cy.readTabledataPublish(\"0\", \"1\").then(tabData => {\n      expect(apiData).to.eq(`\\\"${tabData}\\\"`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_tableApi_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add Paginate with Table Page No and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":15,"column":62},"line":15,"code":"  it(\"Test_Add Paginate with Table Page No and Execute the Api\", function () {\n    /**Create an Api1 of Paginate with Table Page No */\n    cy.createAndFillApi(this.data.paginationUrl, \"users?page={{Table1.pageNo}}&pageSize={{Table1.pageSize}}\");\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":20,"column":80},"line":20,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Table Page No\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    /**Bind Api1 with Table widget */\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\");\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox);\n    /**Bind Table with Textwidget with selected row */\n\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    });\n    /**Validate Table data on current page(page1) */\n\n    cy.ValidateTableData(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000);\n    /*\n    cy.wait(\"@postExecute\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.validateToastMessage(\"done\");\n    /**Validate Table data on next page(page2) */\n    //cy.ValidateTableData(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":53,"column":96},"line":53,"code":"  it(\"Table-Text, Validate Publish Mode on Server Side Pagination of Paginate with Table Page No\", function () {\n    cy.PublishtheApp(); // Make sure onPageLoad action has run before validating the data\n\n    cy.wait(\"@postExecute\");\n    cy.ValidatePublishTableData(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    }); // Make sure net page action is run\n\n    cy.wait(\"@postExecute\");\n    cy.validateToastMessage(\"done\");\n    cy.ValidatePublishTableData(\"11\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Total Records Count","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":66,"column":86},"line":66,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Total Records Count\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"totalrecordcount\", 20);\n    cy.PublishtheApp();\n    cy.wait(500);\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"not.have.attr\", \"disabled\");\n    cy.ValidateTableData(\"1\");\n    cy.get(commonlocators.tableNextPage).click({\n      force: true\n    });\n    cy.wait(\"@postExecute\");\n    cy.wait(500);\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test_Add Paginate with Response URL and Execute the Api","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":85,"column":61},"line":85,"code":"  it(\"Test_Add Paginate with Response URL and Execute the Api\", function () {\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    /** Create Api2 of Paginate with Response URL*/\n\n    cy.createAndFillApi(this.data.paginationUrl, \"users\");\n    cy.RunAPI();\n    cy.NavigateToPaginationTab();\n    cy.get(apiPage.apiPaginationNextText).type(\"{{Api2.data.next}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.get(apiPage.apiPaginationPrevText).type(\"{{Api2.data.previous}}\", {\n      parseSpecialCharSequences: false\n    });\n    cy.WaitAutoSave();\n    cy.SearchEntityandOpen(\"Text1\"); //cy.openPropertyPane(\"textwidget\");\n\n    /** Bind the Table widget with Text widget*/\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{Api2.data.users}}\");\n    cy.callApi(\"Api2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Text, Validate Server Side Pagination of Paginate with Response URL","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":110,"column":79},"line":110,"code":"  it(\"Table-Text, Validate Server Side Pagination of Paginate with Response URL\", function () {\n    /**Validate Response data with Table data in Text Widget */\n    cy.ValidatePaginateResponseUrlData(apiPage.apiPaginationPrevTest);\n    cy.PublishtheApp();\n    cy.ValidatePaginationInputData();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n    cy.ValidatePaginateResponseUrlData(apiPage.apiPaginationNextTest);\n    cy.wait(5000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableTextPagination_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":16,"column":60},"line":16,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableWidget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on selected row","suites":["Binding the table widget and input Widget"],"updatePoint":{"line":21,"column":73},"line":21,"code":"  it(\"validation of data displayed in input widgets based on selected row\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultselectedrow\", \"2\");\n    cy.readTabledataPublish(\"2\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"6788734\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TableWidget_selectedRow_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from tab widget","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":19,"column":58},"line":19,"code":"  it(\"Input widget test with default value from tab widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.tabBinding + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on tab selected","suites":["Binding the input Widget with tab Widget"],"updatePoint":{"line":24,"column":73},"line":24,"code":"  it(\"validation of data displayed in input widgets based on tab selected\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 2\").click({\n      force: true\n    }).should(\"be.selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 2\");\n    cy.get(publish.tabWidget).contains(\"Tab 1\").click({\n      force: true\n    }).should(\"be.selected\");\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"Tab 1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Bind_TabWidget_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Will load an api on load","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":15,"column":30},"line":15,"code":"  it(\"Will load an api on load\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.onPageLoad).click({\n      force: true\n    });\n    cy.wait(\"@setExecuteOnLoad\");\n    cy.reload();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget updated with deafult data","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":29,"column":44},"line":29,"code":"  it(\"Input widget updated with deafult data\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(\"3\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Binding second input widget with API on PageLoad data and default data from input1 widget ","suites":["Binding the API with pageOnLoad and input Widgets"],"updatePoint":{"line":35,"column":96},"line":35,"code":"  it(\"Binding second input widget with API on PageLoad data and default data from input1 widget \", function () {\n    cy.SearchEntityandOpen(\"Input3\");\n    cy.get(widgetsPage.defaultInput).type(testdata.pageloadBinding, {\n      parseSpecialCharSequences: false\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"3\");\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", \"23\");\n    cy.get(publish.backToEditor).first().click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/BindApi_withPageload_Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the Table and input Widget"],"updatePoint":{"line":15,"column":60},"line":15,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_Table_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of data displayed in input widgets based on search value set","suites":["Binding the Table and input Widget"],"updatePoint":{"line":20,"column":77},"line":20,"code":"  it(\"validation of data displayed in input widgets based on search value set\", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"defaultsearchtext\", \"2736212\");\n    cy.wait(\"@updateLayout\").isSelectRow(0);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Binding_Table_Widget_DefaultSearch_Input_widget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button widget with action navigate to page","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":23,"column":48},"line":23,"code":"  it(\"Button widget with action navigate to page\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(testdata.externalPage); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button click should take the control to page link validation","suites":["Binding the button Widgets and validating NavigateTo Page functionality"],"updatePoint":{"line":31,"column":66},"line":31,"code":"  it(\"Button click should take the control to page link validation\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.buttonWidget).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(publish.buttonWidget).should(\"not.exist\");\n    cy.go(\"back\");\n    cy.get(publish.backToEditor).first().click();\n    cy.wait(\"@getPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/ButtonWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if delete will remove bindings","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":9,"column":43},"line":9,"code":"  it(\"Checks if delete will remove bindings\", function () {\n    cy.get(widgetsPage.textWidget).first().click({\n      force: true\n    });\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.get(widgetsPage.textWidget).first().should(\"not.have.text\", \"Label\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Entity_delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":18,"column":60},"line":18,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputWidget);\n    cy.get(widgetsPage.inputOnTextChange).first().click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(pageid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create MyPage and valdiate if its successfully created","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":29,"column":60},"line":29,"code":"  it(\"Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate NavigateTo Page functionality ","suites":["Binding the multiple Widgets and validating NavigateTo Page"],"updatePoint":{"line":36,"column":45},"line":36,"code":"  it(\"Validate NavigateTo Page functionality \", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n      cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n      cy.get(publish.inputGrp).first().type(\"123\");\n      cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/InputWidgets_NavigateTo_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown widget test with invalid binding value","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":19,"column":53},"line":19,"code":"  it(\"Dropdown widget test with invalid binding value\", function () {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.dropdownErrorMsg);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Invalid_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget test with invalid binding value","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":24,"column":50},"line":24,"code":"  it(\"Table widget test with invalid binding value\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.defaultdataBinding));\n    cy.evaluateErrorMessage(testdata.tableWidgetErrorMsg);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Invalid_binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"switches the toggle to Button widget","suites":["JS Toggle tests"],"updatePoint":{"line":7,"column":42},"line":7,"code":"  it(\"switches the toggle to Button widget\", () => {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"have.class\", \"is-active\");\n    cy.testJsontext(\"visible\", \"false\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").should(\"not.have.class\", \"is-active\");\n    cy.get(\".t--property-control-visible\").find(\"input\").should(\"not.have.attr\", \"checked\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/JS_Toggle_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from another Input widget","suites":["Loadash basic test with input Widget"],"updatePoint":{"line":19,"column":68},"line":19,"code":"  it(\"Input widget test with default value from another Input widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputBinding + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/loadashBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value for loadash function","suites":["Loadash basic test with input Widget"],"updatePoint":{"line":24,"column":63},"line":24,"code":"  it(\"Input widget test with default value for loadash function\", function () {\n    cy.SearchEntityandOpen(\"Input2\");\n    cy.testJsontext(\"defaulttext\", testdata.loadashInput + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/loadashBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"publish widget and validate the data displayed in input widgets from loadash function","suites":["Loadash basic test with input Widget"],"updatePoint":{"line":29,"column":91},"line":29,"code":"  it(\"publish widget and validate the data displayed in input widgets from loadash function\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"7\");\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", \"7\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/loadashBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from another Input widget","suites":["Moment basic test with input Widget"],"updatePoint":{"line":19,"column":68},"line":19,"code":"  it(\"Input widget test with default value from another Input widget\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputBinding + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/momentBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Binding second input widget with first input widget and validating","suites":["Moment basic test with input Widget"],"updatePoint":{"line":24,"column":72},"line":24,"code":"  it(\"Binding second input widget with first input widget and validating\", function () {\n    cy.SearchEntityandOpen(\"Input2\");\n    cy.testJsontext(\"defaulttext\", testdata.momentInput + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/momentBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"publish widget and validate the data displayed in input widgets","suites":["Moment basic test with input Widget"],"updatePoint":{"line":29,"column":69},"line":29,"code":"  it(\"publish widget and validate the data displayed in input widgets\", function () {\n    var currentTime = new Date();\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", currentTime.getFullYear());\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", currentTime.getFullYear());\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/momentBasictest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with multiple page","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":22,"column":51},"line":22,"code":"  it(\"Table Widget Functionality with multiple page\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create MyPage and valdiate if its successfully created","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":27,"column":60},"line":27,"code":"  it(\"Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate NavigateTo Page functionality ","suites":["Table Widget with Input Widget and Navigate to functionality validation"],"updatePoint":{"line":34,"column":45},"line":34,"code":"  it(\"Validate NavigateTo Page functionality \", function () {\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.PublishtheApp();\n    cy.readTabledataPublish(\"1\", \"0\").then(tabDataP => {\n      const tabValueP = tabDataP;\n      cy.log(tabValueP);\n      cy.isSelectRow(1);\n      cy.get(\"input\").should(\"be.visible\");\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValueP);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/NavigateToFeatureValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show binding prompt when there are no bindings in the editor","suites":["Binding prompt"],"updatePoint":{"line":11,"column":66},"line":11,"code":"  it(\"Show binding prompt when there are no bindings in the editor\", () => {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"defaulttext\", \" \");\n    cy.get(dynamicInput.bindingPrompt).should(\"be.visible\");\n    cy.get(widgetsPage.defaultInput).type(\"{{\");\n    cy.get(dynamicInput.bindingPrompt).should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/No_Binding_Prompt_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of  default displayed in select widget based on row selected","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":17,"column":77},"line":17,"code":"  it(\"validation of  default displayed in select widget based on row selected\", function () {\n    cy.wait(5000);\n    cy.isSelectRow(0);\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"#1\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(widgetsPage.defaultSingleSelectValue).first().invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(tabValue);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Select_Widget_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of  data displayed in select widget based on row selected","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":30,"column":74},"line":30,"code":"  it(\"validation of  data displayed in select widget based on row selected\", function () {\n    cy.isSelectRow(2);\n    cy.wait(5000);\n    cy.get(widgetsPage.defaultSingleSelectValue).first().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Select option\");\n    });\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"#1\").click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).contains(\"#1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Select_Widget_Value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table data and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":31,"column":34},"line":31,"code":"  it(\"Update table data and assert\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetLocators.tabedataField).then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.readTabledata(\"1\", \"0\").then(cellData => {\n        cy.wrap(cellData).should(\"equal\", \"Product2\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update chart data and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":40,"column":34},"line":40,"code":"  it(\"Update chart data and assert\", function () {\n    cy.openPropertyPane(\"chartwidget\");\n    cy.get(\".t--property-control-chart-series-data-control\").then($el => {\n      cy.updateCodeInput($el, updateData);\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n      cy.get(viewWidgetsPage.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish and assert","suites":["Text-Table Binding Functionality"],"updatePoint":{"line":48,"column":24},"line":48,"code":"  it(\"Publish and assert\", function () {\n    cy.PublishtheApp();\n    cy.readTabledata(\"1\", \"0\").then(cellData => {\n      cy.wrap(cellData).should(\"equal\", \"Product2\");\n    });\n    cy.get(publish.chartWidget).find(\"svg\").find(\"text\").should(\"contain.text\", \"Product2\");\n    cy.get(publish.chartWidget).find(\"svg\").find(\"rect\").should(\"have.length.greaterThan\", 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/SmartSubstitutionWidgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate onSearchTextChanged function is called when configured for search text","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":7,"column":85},"line":7,"code":"  it(\"Validate onSearchTextChanged function is called when configured for search text\", function () {\n    cy.wait(5000); // input text in search bar\n\n    cy.get(\".t--widget-tablewidget .t--search-input input\").first().type(\"2\");\n    cy.wait(5000); // Verify it filtered the table\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Input onsearchtextchanged control\n\n    cy.get(\".t--property-control-onsearchtextchanged .t--js-toggle\").first().click();\n    cy.testJsontext(\"onsearchtextchanged\", \"{{showAlert('12')}}\"); // Verify ClientSideSearch toggle is visible\n\n    cy.get(\".t--property-control-enableclientsidesearch\").should(\"exist\"); // Verify filter still works\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#2\");\n    }); // Disable Client Search\n\n    cy.togglebarDisable(\".t--property-control-enableclientsidesearch input[type='checkbox']\");\n    cy.wait(1000); //wait & then read the table value\n    // Verify Client Search doesnt work\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      expect(tabData).to.eq(\"#1\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_ClientSide_Search_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":18,"column":49},"line":18,"code":"  it(\"Table widget toggle test for text alignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingAlign);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":30,"column":48},"line":30,"code":"  it(\"Table widget change text size and validate\", function () {\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.selectTextSize(\"Heading 1\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text size","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":50,"column":44},"line":50,"code":"  it(\"Table widget toggle test for text size\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingSize);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for vertical Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":65,"column":53},"line":65,"code":"  it(\"Table widget toggle test for vertical Alignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleTextSize).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingVerticalAlig);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-start\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for style Alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":85,"column":50},"line":85,"code":"  it(\"Table widget toggle test for style Alignment\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleTextStyle).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingStyle);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":105,"column":45},"line":105,"code":"  it(\"Table widget toggle test for text color\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleVerticalAlig).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"color\", \"rgb(0, 128, 0)\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for background color","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":126,"column":51},"line":126,"code":"  it(\"Table widget toggle test for background color\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.toggleJsColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingTextColor);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(0, 128, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(255, 0, 0) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Property_ToggleJs_With_Binding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check the cell styles before and after sorting","suites":["Table Widget condtional formatting to remain consistent"],"updatePoint":{"line":8,"column":52},"line":8,"code":"  it(\"check the cell styles before and after sorting\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Check Font weight, font style, and text color before sorting\n\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"0\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"1\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n    cy.get(\".draggable-header\").contains(\"id\").click({\n      force: true\n    }); //Check Font weight, font style, and text color after sorting\n\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-weight\", \"700\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"font-style\", \"normal\");\n    cy.readTabledataValidateCSS(\"3\", \"1\", \"color\", \"rgb(0, 0, 255)\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-weight\", \"400\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"font-style\", \"italic\");\n    cy.readTabledataValidateCSS(\"2\", \"1\", \"color\", \"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Table_Widget__CondtionalFormatting_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with multiple page","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":22,"column":51},"line":22,"code":"  it(\"Table Widget Functionality with multiple page\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(testdata.TablePagination));\n    cy.get(widgetsPage.tableOnRowSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Navigate to\").click();\n    cy.enterNavigatePageName(pageid);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create MyPage and valdiate if its successfully created","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":30,"column":60},"line":30,"code":"  it(\"Create MyPage and valdiate if its successfully created\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(dsl2); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(`.t--entity-name:contains(\"${pageid}\")`).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate NavigateTo Page functionality ","suites":["Table Widget and Navigate to functionality validation"],"updatePoint":{"line":37,"column":45},"line":37,"code":"  it(\"Validate NavigateTo Page functionality \", function () {\n    cy.SearchEntityandOpen(\"Table1\"); //Below test to be enabled once the bug related to change of page in table in fixed\n    //cy.get('.t--table-widget-next-page')\n    //  .click();\n\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartWidget).should(\"not.exist\");\n    cy.isSelectRow(1);\n    cy.get(widgetsPage.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/TableWidgets_NavigateTo_Validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a postgres datasource","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":21,"column":37},"line":21,"code":"  it(\"1. Create a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create and runs query","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":31,"column":30},"line":31,"code":"  it(\"2. Create and runs query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users limit 10\");\n    cy.EvaluateCurrentValue(\"select * from users limit 10\");\n    cy.runQuery();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button widget test with on action query run","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":38,"column":52},"line":38,"code":"  it(\"3. Button widget test with on action query run\", function () {\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.executeDbQuery(\"Query1\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Input widget test with default value update with query data","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":43,"column":68},"line":43,"code":"  it(\"4. Input widget test with default value update with query data\", function () {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.defaultInputQuery);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Publish App and validate loading functionalty","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":48,"column":54},"line":48,"code":"  it(\"5. Publish App and validate loading functionalty\", function () {\n    cy.PublishtheApp(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(widgetsPage.widgetBtn).first().click({\n      force: true\n    });\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", \"7\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widget_loading_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from table widget","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":19,"column":60},"line":19,"code":"  it(\"Input widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultInputWidget + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  }); //To be enabled once the single select multi select issues are resolved","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown widget test with default value from table widget","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":25,"column":63},"line":25,"code":"  it(\"Dropdown widget test with default value from table widget\", function () {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.testJsontext(\"options\", JSON.stringify(testdata.deafultDropDownWidget));\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validation of default data displayed in all widgets based on row selected","suites":["Binding the multiple widgets and validating default data"],"updatePoint":{"line":30,"column":79},"line":30,"code":"  it(\"validation of default data displayed in all widgets based on row selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"2736212\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"lindsay.ferguson@reqres.in\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(widgetsPage.defaultSingleSelectValue).first().invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(tabValue);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Default_data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Cyclic depedancy error message validation","suites":["Binding the multiple input Widget"],"updatePoint":{"line":24,"column":47},"line":24,"code":"  it(\"Cyclic depedancy error message validation\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastmsg).contains(\"Cyclic dependency\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Binding input widget1 and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":30,"column":42},"line":30,"code":"  it(\"Binding input widget1 and validating\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultdata);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Binding second input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":36,"column":72},"line":36,"code":"  it(\"Binding second input widget with first input widget and validating\", function () {\n    cy.SearchEntityandOpen(\"Input2\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.reload();\n    /*\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\")\n      .first()\n      .invoke(\"attr\", \"value\")\n      .should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2)\n      .invoke(\"attr\", \"value\")\n      .should(\"contain\", testdata.defaultdata);\n    cy.get(publish.backToEditor)\n      .first()\n      .click();\n      */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Binding third input widget with first input widget and validating","suites":["Binding the multiple input Widget"],"updatePoint":{"line":56,"column":71},"line":56,"code":"  it(\"Binding third input widget with first input widget and validating\", function () {\n    cy.SearchEntityandOpen(\"Input3\");\n    cy.testJsontext(\"defaulttext\", testdata.defaultMoustacheData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.xpath(testdata.input2).invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").last().invoke(\"attr\", \"value\").should(\"contain\", testdata.defaultdata);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/Widgets_Dependancy_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"publish widget and validate the data displayed in text widget from xmlParser function","suites":["xml2json text"],"updatePoint":{"line":9,"column":91},"line":9,"code":"  it(\"publish widget and validate the data displayed in text widget from xmlParser function\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.textWidget).first().should(\"have.text\", `{  \"note\": {    \"to\": \"Tove\",    \"from\": \"Jani\",    \"heading\": \"Reminder\",    \"body\": \"Don't forget me this weekend!\"  }}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Binding/xmlParser_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Deleting bottom widget should resize canvas","suites":["Canvas Resize"],"updatePoint":{"line":9,"column":49},"line":9,"code":"  it(\"Deleting bottom widget should resize canvas\", function () {\n    const InitHeight = \"2960px\";\n    cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", InitHeight);\n    cy.openPropertyPane(\"textwidget\");\n    cy.intercept(\"PUT\", \"/api/v1/layouts/*/pages/*\").as(\"deleteUpdate\");\n    cy.get(commonlocators.deleteWidget).click();\n    cy.wait(\"@deleteUpdate\").then(response => {\n      const dsl = response.response.body.data.dsl;\n      cy.get(commonlocators.dropTarget).should(\"have.css\", \"height\", `${dsl.bottomRow}px`);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Canvas/Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not create duplicate versions of widget on drop from explorer","suites":["Unique react keys"],"updatePoint":{"line":16,"column":74},"line":16,"code":"  it(\"Should not create duplicate versions of widget on drop from explorer\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"dropdownwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.dragAndDropToCanvas(\"dropdownwidget\", {\n      x: 200,\n      y: 700\n    });\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.dropdownwidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Canvas/Unique_key.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should not create duplicate versions of widget on widget copy","suites":["Unique react keys"],"updatePoint":{"line":34,"column":67},"line":34,"code":"  it(\"Should not create duplicate versions of widget on widget copy\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"chartwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"dropdownwidget\", {\n      x: 200,\n      y: 600\n    }); //copy and paste\n\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.dropdownwidget).should(\"have.length\", 2);\n    cy.openPropertyPane(\"chartwidget\");\n    cy.deleteWidget(widgetsPage.chartWidget);\n    cy.get(widgetsPage.dropdownwidget).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Canvas/Unique_key.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Skipping comments tour also skips bot comments","suites":["Comments"],"updatePoint":{"line":42,"column":52},"line":42,"code":"  it(\"Skipping comments tour also skips bot comments\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmithtest.com`, uid);\n    });\n    cy.wait(1000);\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      appName = uid;\n      orgName = uid;\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        const newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgName);\n      });\n      cy.CreateAppForOrg(orgName, appName);\n      cy.addDsl(dsl);\n    });\n    cy.get(commonLocators.canvas);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.contains(\"SKIP\").click({\n      force: true\n    });\n    cy.get(\"input[name='displayName']\").type(\"Skip User\");\n    cy.get(\"button[type='submit']\").click(); // wait for comment mode to be set\n\n    cy.wait(1000);\n    cy.get(commonLocators.canvas).click(50, 50);\n    typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\"); // when user adds first comment, following command will count for the headers of the comment card\n    // in case of \"Skip Tour\" this has to be 2.\n\n    cy.get(\"[data-cy=comments-card-header]\").its(\"length\").should(\"eq\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Completing comments tour adds bot comment in first thread","suites":["Comments"],"updatePoint":{"line":77,"column":63},"line":77,"code":"  it(\"Completing comments tour adds bot comment in first thread\", function () {\n    cy.generateUUID().then(uid => {\n      cy.Signup(`${uid}@appsmithtest.com`, uid);\n    });\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      appName = uid;\n      orgName = uid;\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        const newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgName);\n      });\n      cy.CreateAppForOrg(orgName, appName);\n      cy.addDsl(dsl);\n    });\n    cy.get(commonLocators.canvas);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.contains(\"NEXT\").click({\n      force: true\n    });\n    cy.contains(\"NEXT\").click({\n      force: true\n    });\n    cy.get(\"input[name='displayName']\").type(\"Touring User\");\n    cy.get(\"button[type='submit']\").click(); // wait for comment mode to be set\n\n    cy.wait(1000);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.get(commonLocators.canvas).click(50, 50);\n    typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\");\n    cy.get(\"[data-cy=comments-card-header]\").its(\"length\").should(\"eq\", 3);\n    cy.contains(\"Appsmith Bot\").should(\"be.visible\");\n  }); // create another comment since the first one is a private bot thread","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"another comment can be created after dismissing the first one","suites":["Comments"],"updatePoint":{"line":117,"column":67},"line":117,"code":"  it(\"another comment can be created after dismissing the first one\", () => {\n    cy.get(commonLocators.canvas).click(10, 10); // wait for transition to be completed\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n    typeIntoDraftEditor(commentsLocators.mentionsInput, newCommentText1);\n    cy.get(commentsLocators.mentionsInput).type(\"{enter}\");\n    cy.wait(\"@createNewThread\").then(response => {\n      commentThreadId = response.response.body.data.id;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Can invite new collaborators, with substring emails","suites":["Comments"],"updatePoint":{"line":128,"column":57},"line":128,"code":"  it(\"Can invite new collaborators, with substring emails\", () => {\n    cy.get(commentsLocators.cancelCommentButton).click({\n      force: true\n    });\n    cy.get(homePage.shareApp).click({\n      force: true\n    });\n    cy.shareApp(\"cypresstest@appsmith.com\", homePage.viewerRole);\n    cy.get(commonLocators.canvas).click(30, 30);\n    cy.wait(300);\n    cy.get(commentsLocators.mentionsInput).type(\"@test@appsmith.com\", {\n      delay: 100\n    });\n    cy.wait(1000);\n    cy.contains(\"Invite a new user\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"unread indicator is visible for another app user when a new comment is added","suites":["Comments"],"updatePoint":{"line":144,"column":82},"line":144,"code":"  it(\"unread indicator is visible for another app user when a new comment is added\", () => {\n    // share app with TESTUSERNAME2\n    cy.get(homePage.shareApp).click({\n      force: true\n    });\n    cy.shareApp(Cypress.env(\"TESTUSERNAME2\"), homePage.adminRole);\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\")); // launch the editor\n\n    cy.get(homePage.searchInput).type(appName); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\"); // unread indicator should be visible since a new comment was added\n\n    cy.get(commentsLocators.toggleCommentModeOnUnread).should(\"exist\");\n    cy.get(commentsLocators.toggleCommentModeOn).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"is visible for the other app users in edit mode","suites":["Comments"],"updatePoint":{"line":164,"column":53},"line":164,"code":"  it(\"is visible for the other app users in edit mode\", () => {\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    }); // this is needed, as on CI we create new users\n\n    cy.contains(\"SKIP\").click({\n      force: true\n    });\n    cy.get(\"input[name='displayName']\").type(\"Skip User\");\n    cy.get(\"button[type='submit']\").click();\n    cy.get(`${commentsLocators.inlineCommentThreadPin}${commentThreadId}`).click({\n      force: true\n    });\n    cy.contains(newCommentText1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"unread indicator should be hidden once all comment threads are marked as read","suites":["Comments"],"updatePoint":{"line":179,"column":83},"line":179,"code":"  it(\"unread indicator should be hidden once all comment threads are marked as read\", () => {\n    // thread should be marked as read by clicking before, unread indicator should not be visible\n    cy.get(commentsLocators.toggleCommentModeOnUnread).should(\"not.exist\");\n    cy.get(commentsLocators.toggleCommentModeOn).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"is visible in the published mode","suites":["Comments"],"updatePoint":{"line":184,"column":38},"line":184,"code":"  it(\"is visible in the published mode\", () => {\n    cy.PublishtheApp(); // wait for the published page to load\n\n    cy.get(commonLocators.viewerPage);\n    cy.get(commentsLocators.switchToCommentModeBtn).click({\n      force: true\n    });\n    cy.get(`${commentsLocators.inlineCommentThreadPin}${commentThreadId}`).click({\n      force: true\n    });\n    cy.contains(newCommentText1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/AddComments_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"User can access unsubscribe page","suites":["Unsubscribe comment email test spec"],"updatePoint":{"line":3,"column":38},"line":3,"code":"  it(\"User can access unsubscribe page\", function () {\n    cy.visit(\"/unsubscribe/discussion/123456\");\n    cy.contains(\"Unsubscribe\");\n    cy.get(\"button\").contains(\"Unsubscribe me\").click();\n    cy.contains(\"successfully unsubscribed\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Comments/UnsubscribeEmail_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether depedencies and references are shown correctly","suites":["Inspect Entity"],"updatePoint":{"line":7,"column":66},"line":7,"code":"  it(\"Check whether depedencies and references are shown correctly\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"defaulttext\", \"{{Button1.text}}\");\n    cy.get(\".t--debugger\").click();\n    cy.contains(\".react-tabs__tab\", \"Inspect entity\").click();\n    cy.contains(\".t--dependencies-item\", \"Button1\").click();\n    cy.contains(\".t--dependencies-item\", \"Input1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Inspect_Element_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Modifying widget properties should log the same","suites":["Debugger logs"],"updatePoint":{"line":11,"column":53},"line":11,"code":"  it(\"Modifying widget properties should log the same\", function () {\n    cy.wait(5000);\n    cy.get(\"button\").contains(\"Submit\").click({\n      force: true\n    });\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testJsontext(\"label\", \"Test\");\n    cy.get(\".t--debugger\").click();\n    cy.get(\".t--debugger-log-state\").contains(\"Test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Reset debugger state","suites":["Debugger logs"],"updatePoint":{"line":21,"column":26},"line":21,"code":"  it(\"Reset debugger state\", function () {\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.generateUUID().then(id => {\n      cy.CreateAppInFirstListedOrg(id);\n      cy.get(debuggerLocators.errorCount).should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Api headers need to be shown as headers in logs","suites":["Debugger logs"],"updatePoint":{"line":32,"column":53},"line":32,"code":"  it(\"Api headers need to be shown as headers in logs\", function () {// TODO\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Api body needs to be shown as JSON when possible","suites":["Debugger logs"],"updatePoint":{"line":34,"column":54},"line":34,"code":"  it(\"Api body needs to be shown as JSON when possible\", function () {// TODO\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Logs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check debugger logs state when there are onPageLoad actions","suites":["Check debugger logs state when there are onPageLoad actions"],"updatePoint":{"line":13,"column":65},"line":13,"code":"  it(\"Check debugger logs state when there are onPageLoad actions\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", \"{{TestApi.data.users}}\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.get(explorer.addWidget).click();\n    cy.reload(); // Wait for the debugger icon to be visible\n\n    cy.get(\".t--debugger\").should(\"be.visible\");\n    cy.get(debuggerLocators.errorCount).should(\"not.exist\");\n    cy.wait(\"@postExecute\");\n    cy.contains(debuggerLocators.errorCount, 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Trigger errors need to be shown in the errors tab","suites":["Trigger errors in the debugger"],"updatePoint":{"line":9,"column":55},"line":9,"code":"  it(\"Trigger errors need to be shown in the errors tab\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", `[{\"name\": 1}, {\"name\": 2}]`);\n    cy.get(\".t--property-control-onrowselected\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"onrowselected\", \"{{console.logs('test')}}\"); // Click on a row of the table widget\n\n    cy.isSelectRow(1);\n    cy.wait(5000);\n    cy.contains(debuggerLocators.errorCount, 2); // Fix code\n\n    cy.testJsontext(\"onrowselected\", \"{{console.log('test')}}\");\n    cy.isSelectRow(1);\n    cy.contains(debuggerLocators.errorCount, 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/TriggerErrors_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check widget error state","suites":["Widget error state"],"updatePoint":{"line":14,"column":30},"line":14,"code":"  it(\"Check widget error state\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.get(\".t--property-control-visible\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"visible\", \"Test\");\n    cy.contains(\".t--widget-error-count\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the current value is shown in the debugger","suites":["Widget error state"],"updatePoint":{"line":20,"column":57},"line":20,"code":"  it(\"Check if the current value is shown in the debugger\", function () {\n    cy.get(debuggerLocators.debuggerIcon).click();\n    cy.contains(\".react-tabs__tab\", \"Errors\").click();\n    cy.get(debuggerLocators.debuggerLogState).contains(\"Test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch to error tab when clicked on the debug button","suites":["Widget error state"],"updatePoint":{"line":25,"column":58},"line":25,"code":"  it(\"Switch to error tab when clicked on the debug button\", function () {\n    cy.get(\"[data-cy=t--tab-LOGS_TAB]\").click();\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click();\n    cy.testJsontext(\"onclick\", \"{{testApi.run()}}\");\n    cy.get(widgetLocators.buttonWidget).click();\n    cy.get(\".t--toast-debug-button\").click();\n    cy.contains(\".react-tabs__tab--selected\", \"Errors\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"All errors should be expanded by default","suites":["Widget error state"],"updatePoint":{"line":33,"column":46},"line":33,"code":"  it(\"All errors should be expanded by default\", function () {\n    cy.get(debuggerLocators.errorMessage).should(\"be.visible\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Recent errors are shown at the top of the list","suites":["Widget error state"],"updatePoint":{"line":36,"column":52},"line":36,"code":"  it(\"Recent errors are shown at the top of the list\", function () {\n    cy.testJsontext(\"label\", \"{{[]}}\");\n    cy.get(debuggerLocators.debuggerLogState).first().contains(\"text\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Clicking on a message should open the search menu","suites":["Widget error state"],"updatePoint":{"line":40,"column":55},"line":40,"code":"  it(\"Clicking on a message should open the search menu\", function () {\n    cy.get(debuggerLocators.errorMessage).first().click();\n    cy.get(debuggerLocators.menuItem).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Undoing widget deletion should show errors if present","suites":["Widget error state"],"updatePoint":{"line":44,"column":59},"line":44,"code":"  it(\"Undoing widget deletion should show errors if present\", function () {\n    cy.deleteWidget();\n    cy.get(debuggerLocators.errorMessage).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(debuggerLocators.errorMessage).should(\"be.visible\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Debugger/Widget_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Audio Widget play functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":13,"column":48},"line":13,"code":"  it(\"Audio Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"audiowidget\");\n    cy.widgetText(\"Audio1\", widgetsPage.audioWidget, commonlocators.audioInner);\n    cy.get(commonlocators.onPlay).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Audio widget pause functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":22,"column":49},"line":22,"code":"  it(\"Audio widget pause functionality validation\", function () {\n    cy.get(commonlocators.onPause).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update audio url and check play and pause functionality validation","suites":["Audio Widget Functionality"],"updatePoint":{"line":29,"column":72},"line":29,"code":"  it(\"Update audio url and check play and pause functionality validation\", function () {\n    cy.testCodeMirror(testdata.audioUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/audio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input widget test with default value from chart datapoint","suites":["Chart Widget Functionality"],"updatePoint":{"line":20,"column":63},"line":20,"code":"  it(\"Input widget test with default value from chart datapoint\", function () {\n    cy.SearchEntityandOpen(\"Input1\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.testJsontext(\"defaulttext\", testdata.bindChartData + \"}}\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_Data_point_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart with datapoint feature validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":27,"column":45},"line":27,"code":"  it(\"Chart with datapoint feature validation\", function () {\n    cy.SearchEntityandOpen(\"Chart1\");\n    cy.addAction(testdata.bindingDataPoint);\n    cy.closePropertyPane(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.xpath(\"(//*[local-name()='rect'])[13]\").first().click({\n      force: true\n    });\n    cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").then($value => {\n      const text = $value;\n      cy.log(text); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(3000);\n      cy.get(\".t--toast-action span\").first().invoke(\"text\").then(text => {\n        const toasttext = text;\n        cy.log(toasttext);\n        expect(text.trim()).to.equal(toasttext.trim());\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_Data_point_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart with seriesTitle feature validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":48,"column":47},"line":48,"code":"  it(\"Chart with seriesTitle feature validation\", function () {\n    cy.SearchEntityandOpen(\"Input2\");\n    cy.get(widgetsPage.defaultInput).type(testdata.bindingSeriesTitle);\n    cy.get(publish.inputWidget + \" \" + \"input\").last().should(\"have.value\", dsl.dsl.children[0].chartData[0].seriesName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_Data_point_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Fill the Chart Widget Properties.","suites":["Chart Widget Functionality"],"updatePoint":{"line":22,"column":39},"line":22,"code":"  it(\"Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, commonlocators.containerInnerText); //changing the Chart Title\n\n    /**\n     * @param{Text} Random Input Value\n     */\n\n    cy.testCodeMirror(this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\"); //Entering the Chart data\n\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\"); // Asserting Chart Height\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    }); //Entring the label of x-axis\n\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan); //Entring the label of y-axis\n\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":57,"column":36},"line":57,"code":"  it(\"Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Pie Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":71,"column":37},"line":71,"code":"  it(\"Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Line Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":85,"column":36},"line":85,"code":"  it(\"Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Bar Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":99,"column":37},"line":99,"code":"  it(\"Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Area Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":113,"column":39},"line":113,"code":"  it(\"Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.UpdateChartType(\"Column Chart\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Pie Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":127,"column":48},"line":127,"code":"  it(\"Toggle JS - Pie Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    });\n    cy.testJsontext(\"charttype\", \"PIE_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.PieChartLabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Line Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":144,"column":49},"line":144,"code":"  it(\"Toggle JS - Line Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"LINE_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Bar Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":158,"column":48},"line":158,"code":"  it(\"Toggle JS - Bar Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"BAR_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Area Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":172,"column":49},"line":172,"code":"  it(\"Toggle JS - Area Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"AREA_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).last().trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Column Chart Widget Functionality","suites":["Chart Widget Functionality"],"updatePoint":{"line":186,"column":51},"line":186,"code":"  it(\"Toggle JS - Column Chart Widget Functionality\", function () {\n    //changing the Chart type\n    cy.testJsontext(\"charttype\", \"COLUMN_CHART\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart - Modal","suites":["Chart Widget Functionality"],"updatePoint":{"line":200,"column":19},"line":200,"code":"  it(\"Chart - Modal\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.chartPlotGroup).children().first().click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":207,"column":44},"line":207,"code":"  it(\"Chart-Unckeck Visible field Validation\", function () {\n    // Making the widget invisible\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":213,"column":42},"line":213,"code":"  it(\"Chart-Check Visible field Validation\", function () {\n    // Making the widget visible\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Chart-Unckeck Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":219,"column":56},"line":219,"code":"  it(\"Toggle JS - Chart-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Chart-Check Visible field Validation","suites":["Chart Widget Functionality"],"updatePoint":{"line":228,"column":54},"line":228,"code":"  it(\"Toggle JS - Chart-Check Visible field Validation\", function () {\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.chartWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart Widget Functionality To Uncheck Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":234,"column":69},"line":234,"code":"  it(\"Chart Widget Functionality To Uncheck Horizontal Scroll Visible\", function () {\n    cy.togglebarDisable(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart Widget Functionality To Check Horizontal Scroll Visible","suites":["Chart Widget Functionality"],"updatePoint":{"line":239,"column":67},"line":239,"code":"  it(\"Chart Widget Functionality To Check Horizontal Scroll Visible\", function () {\n    cy.togglebar(commonlocators.allowScroll);\n    cy.PublishtheApp();\n    cy.get(publish.horizontalTab).eq(1).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":9,"column":20},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-checkboxgroupwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Checkbox_group_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Checkbox_group_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["checkboxgroupwidget Widget Functionality"],"updatePoint":{"line":38,"column":72},"line":38,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Checkbox_group_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Fill the Chart Widget Properties.","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":18,"column":42},"line":18,"code":"  it(\"1. Fill the Chart Widget Properties.\", function () {\n    //changing the Chart Name\n\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n    cy.widgetText(\"Test\", viewWidgetsPage.chartWidget, commonlocators.containerInnerText); //changing the Chart Title\n\n    /**\n     * @param{Text} Random Input Value\n     */\n\n    cy.testCodeMirror(this.data.chartIndata);\n    cy.get(viewWidgetsPage.chartInnerText).contains(\"App Sign Up\").should(\"have.text\", \"App Sign Up\"); //Entering the Chart data\n\n    cy.testJsontext(\"chart-series-data-control\", JSON.stringify(this.data.chartInput));\n    cy.get(\".t--propertypane\").click(\"right\"); // Asserting Chart Height\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"be.visible\").and(chart => {\n      expect(chart.height()).to.be.greaterThan(200);\n    }); //Entring the label of x-axis\n\n    cy.get(viewWidgetsPage.xlabel).click({\n      force: true\n    }).type(this.data.command).type(this.data.plan); //Entring the label of y-axis\n\n    cy.get(viewWidgetsPage.ylabel).click({\n      force: true\n    }).type(this.data.command).click({\n      force: true\n    }).type(this.data.ylabel); //Close edit prop\n\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":54,"column":42},"line":54,"code":"  it(\"2. Custom Chart Widget Functionality\", function () {\n    //changing the Chart type\n    //cy.get(widgetsPage.toggleChartType).click({ force: true });\n    cy.UpdateChartType(\"Custom Chart\");\n    cy.testJsontext(\"customfusionchart\", `{{${JSON.stringify(this.data.ChartCustomConfig)}}}`); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    });\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Toggle JS - Custom Chart Widget Functionality","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":70,"column":54},"line":70,"code":"  it(\"3. Toggle JS - Custom Chart Widget Functionality\", function () {\n    cy.get(widgetsPage.toggleChartType).click({\n      force: true\n    }); //changing the Chart type\n\n    cy.testJsontext(\"charttype\", \"CUSTOM_FUSION_CHART\");\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(viewWidgetsPage.Chartlabel + \":first-child\", {\n      timeout: 10000\n    }).should(\"have.css\", \"opacity\", \"1\"); //Verifying X-axis labels\n\n    cy.get(viewWidgetsPage.chartWidget).should(\"have.css\", \"opacity\", \"1\");\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"];\n    [0, 1, 2, 3, 4, 5, 6].forEach(k => {\n      cy.get(viewWidgetsPage.rectangleChart).eq(k).trigger(\"mousemove\", {\n        force: true\n      });\n      cy.get(viewWidgetsPage.Chartlabel).eq(k).should(\"have.text\", labels[k]);\n    }); //Close edit prop\n\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Chart-Copy Verification","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":92,"column":32},"line":92,"code":"  it(\"4. Chart-Copy Verification\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Chart and verify all properties\n\n    cy.copyWidget(\"chartwidget\", viewWidgetsPage.chartWidget);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Chart-Delete Verification","suites":["Chart Widget Functionality around custom chart feature"],"updatePoint":{"line":98,"column":34},"line":98,"code":"  it(\"5. Chart-Delete Verification\", function () {\n    // Delete the Chart widget\n    cy.deleteWidget(viewWidgetsPage.chartWidget);\n    cy.PublishtheApp();\n    cy.get(viewWidgetsPage.chartWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Custom_Chart_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":9,"column":44},"line":9,"code":"  it(\"Should be able to drag disabled button\", function () {\n    const selector = \".t--draggable-buttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled menu button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":28,"column":49},"line":28,"code":"  it(\"Should be able to drag disabled menu button\", function () {\n    const selector = \".t--draggable-menubuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 600, 300, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Should be able to drag disabled icon button","suites":["Disabled Widgets drag Functionality"],"updatePoint":{"line":47,"column":49},"line":47,"code":"  it(\"Should be able to drag disabled icon button\", function () {\n    const selector = \".t--draggable-iconbuttonwidget button\";\n    cy.wait(1000);\n    cy.get(selector).then(button => {\n      cy.wrap(button[0].getBoundingClientRect()).as(\"initialPosition\");\n    });\n    cy.get(selector).realHover().trigger(\"dragstart\", {\n      force: true\n    });\n    cy.get(explorer.dropHere).trigger(\"mousemove\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    }).trigger(\"mouseup\", 200, 200, {\n      eventConstructor: \"MouseEvent\"\n    });\n    cy.get(selector).then(button => {\n      expect(\"initialPosition\").not.equal(button[0].getBoundingClientRect());\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Disabled_Widgets_drag_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Divider","suites":["Divider Widget Functionality"],"updatePoint":{"line":9,"column":21},"line":9,"code":"  it(\"Add new Divider\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"dividerwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--divider-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Divider_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing Divider from created Widgets list","suites":["Divider Widget Functionality"],"updatePoint":{"line":17,"column":53},"line":17,"code":"  it(\"Open Existing Divider from created Widgets list\", () => {\n    cy.get(\".widgets\").click();\n    cy.get(\".t--entity-name:contains(Divider1)\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Divider_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new DocumentViewer","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":9,"column":28},"line":9,"code":"  it(\"Add new DocumentViewer\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"documentviewerwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-documentviewerwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/DocumentViewer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing DocumentViewer from Widgets list","suites":["DocumentViewer Widget Functionality"],"updatePoint":{"line":17,"column":52},"line":17,"code":"  it(\"Open Existing DocumentViewer from Widgets list\", () => {\n    cy.get(\".t--widget-documentviewerwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/DocumentViewer_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new dropdown widget","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":9,"column":29},"line":9,"code":"  it(\"Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"dropdownwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-dropdownwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":35,"column":72},"line":35,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Dropdown_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should test allowed values","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":14,"column":32},"line":14,"code":"  it(\"should test allowed values\", () => {\n    cy.openPropertyPane(\"filepickerwidgetv2\");\n    cy.get(\".t--property-control-allowedfiletypes .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n    cy.testJsontext(\"allowedfiletypes\", \".csv\");\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"exist\");\n    cy.testJsontext(\"allowedfiletypes\", `[\".csv\", \".doc\"]`);\n    cy.get(\".t--property-control-allowedfiletypes .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/filepicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality Base64 validation","suites":["Image Widget Functionality with base64"],"updatePoint":{"line":15,"column":50},"line":15,"code":"  it(\"Image Widget Functionality Base64 validation\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * Test for Base64 encoded image\n     */\n\n    cy.testJsontext(\"image\", this.data.base64image.withoutPrefix);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.EvaluateCurrentValue(this.data.base64image.withPrefix);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.base64image.withPrefix);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_base64_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality","suites":["Image Widget Functionality"],"updatePoint":{"line":15,"column":32},"line":15,"code":"  it(\"Image Widget Functionality\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ImageWidget}Mouseover\n     * @param{ImagePre Css} Assertion\n     */\n\n    cy.widgetText(\"img\", viewWidgetsPage.imageWidget, viewWidgetsPage.imagecontainer);\n    cy.testJsontext(\"defaultimage\", this.data.defaultimage);\n    cy.wait(1000);\n    /**\n     * @param{URL} ImageUrl\n     */\n\n    cy.testCodeMirror(this.data.NewImage);\n    cy.get(viewWidgetsPage.imageinner).invoke(\"attr\", \"src\").should(\"contain\", this.data.validateImage);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"No Zoom functionality check","suites":["Image Widget Functionality"],"updatePoint":{"line":34,"column":33},"line":34,"code":"  it(\"No Zoom functionality check\", function () {\n    cy.openPropertyPane(\"imagewidget\"); //Zoom validation\n\n    cy.changeZoomLevel(\"1x (No Zoom)\");\n    cy.get(commonlocators.imgWidget).invoke(\"attr\", \"style\").should(\"not.contain\", \"zoom-in\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Validate Image","suites":["Image Widget Functionality"],"updatePoint":{"line":41,"column":50},"line":41,"code":"  it(\"Image Widget Functionality To Validate Image\", function () {\n    cy.get(publish.imageWidget + \" \" + \"img\").invoke(\"attr\", \"src\").should(\"contain\", this.data.NewImage);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Unchecked Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":44,"column":60},"line":44,"code":"  it(\"Image Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Image Widget Functionality To Check Visible Widget","suites":["Image Widget Functionality"],"updatePoint":{"line":52,"column":56},"line":52,"code":"  it(\"Image Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"imagewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.imageWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Image_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Color Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":12,"column":29},"line":12,"code":"  it(\"Button-Color Validation\", function () {\n    // Changing the color of the button from the property pane and verifying it.\n    cy.changeButtonColor(\"rgb(254, 184, 17)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map Widget Functionality","suites":["Map Widget Functionality"],"updatePoint":{"line":14,"column":32},"line":14,"code":"    it(\"Map Widget Functionality\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * @param{Text} Random Text\n       * @param{MapWidget}Mouseover\n       * @param{MapPre Css} Assertion\n       */\n\n      cy.widgetText(\"Maptest\", viewWidgetsPage.mapWidget, viewWidgetsPage.mapInner);\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().type(this.data.country).type(\"{enter}\");\n      cy.get(viewWidgetsPage.mapInput).click({\n        force: true\n      }).type(this.data.command).type(JSON.stringify(this.data.marker), {\n        parseSpecialCharSequences: false\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(0).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.zoomLevel).eq(1).click({\n        force: true\n      });\n      cy.get(viewWidgetsPage.mapSearch).click({\n        force: true\n      }).clear().type(this.data.location2).type(\"{enter}\");\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Enable Location,Map search and Create Marker Property Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":41,"column":76},"line":41,"code":"    it(\"Map-Enable Location,Map search and Create Marker Property Validation\", function () {\n      /**\n       * Enable the Search Location checkbox and Validate the same in editor mode\n       */\n      cy.CheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"be.visible\");\n      cy.get(viewWidgetsPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      /**\n       * Enable the Pick Location checkbox and Validate the same in editor mode\n       */\n\n      cy.CheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"exist\");\n      /**\n       * Enable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n\n      cy.CheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n\n      cy.get(publishPage.mapSearch).should(\"be.visible\");\n      cy.get(publishPage.mapSearch).invoke(\"attr\", \"placeholder\").should(\"contain\", \"Enter location to search\");\n      cy.get(publishPage.pickMyLocation).should(\"exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Disable Location, Mapsearch and Create Marker Property Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":73,"column":77},"line":73,"code":"    it(\"Map-Disable Location, Mapsearch and Create Marker Property Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      /**\n       * Disable the Search Location checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enableSearchLocCheckbox);\n      cy.get(viewWidgetsPage.mapSearch).should(\"not.exist\");\n      /**\n       * Disable the Pick Location checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enablePickLocCheckbox);\n      cy.get(viewWidgetsPage.pickMyLocation).should(\"not.exist\");\n      /**\n       * Disable the Createnew Marker checkbox and Validate the same in editor mode\n       */\n\n      cy.UncheckWidgetProperties(commonlocators.enableCreateMarkerCheckbox);\n      /**\n       * Validation will be added when create marker fun is working fine\n       */\n\n      cy.PublishtheApp();\n      /**\n       * Publish mode Validation\n       */\n\n      cy.get(publishPage.mapSearch).should(\"not.exist\");\n      cy.get(publishPage.pickMyLocation).should(\"not.exist\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Initial location should work","suites":["Map Widget Functionality"],"updatePoint":{"line":105,"column":40},"line":105,"code":"    it(\"Map-Initial location should work\", function () {\n      cy.openPropertyPane(\"mapwidget\");\n      cy.get(viewWidgetsPage.mapinitialloc).should(\"have.value\", this.data.country);\n      /**\n       * Clearing initial location used to reset it, this check makes sure it actually clears\n       */\n\n      cy.get(viewWidgetsPage.mapinitialloc).click({\n        force: true\n      }).clear().should(\"have.value\", \"\");\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Check Visible field Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":116,"column":42},"line":116,"code":"    it(\"Map-Check Visible field Validation\", function () {\n      //Check the disableed checkbox and Validate\n      cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"be.visible\");\n      cy.get(publishPage.backToEditor).click();\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Map-Unckeck Visible field Validation","suites":["Map Widget Functionality"],"updatePoint":{"line":123,"column":44},"line":123,"code":"    it(\"Map-Unckeck Visible field Validation\", function () {\n      cy.openPropertyPane(\"mapwidget\"); //Uncheck the disabled checkbox and validate\n\n      cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n      cy.PublishtheApp();\n      cy.get(publishPage.mapWidget).should(\"not.exist\");\n    });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Map_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Close the opened filter pane of the table","suites":["Modal Widget Functionality"],"updatePoint":{"line":9,"column":47},"line":9,"code":"  it(\"Close the opened filter pane of the table\", () => {\n    const buttonSelector = widgets.buttonWidget;\n    const tableFilterPaneSelector = widgets.tableFilterPaneToggle;\n    const tableFilterRowSelector = widgets.tableFilterRow;\n    const modalSelector = widgets.modalWidget; // Open the filter pane of table\n\n    cy.get(tableFilterPaneSelector).click(); // Should open the filter pane\n\n    cy.get(tableFilterRowSelector).should(\"exist\"); // Open the modal\n\n    cy.get(buttonSelector).click(); // Should pop up the modal\n\n    cy.get(modalSelector).should(\"exist\"); // Should close the open filter pane of the table\n\n    cy.get(tableFilterRowSelector).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Modal_On_Table_Filter_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Modal","suites":["Modal Widget Functionality"],"updatePoint":{"line":13,"column":19},"line":13,"code":"  it(\"Add new Modal\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"modalwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing Modal from created Widgets list","suites":["Modal Widget Functionality"],"updatePoint":{"line":21,"column":51},"line":21,"code":"  it(\"Open Existing Modal from created Widgets list\", () => {\n    cy.get(\".widgets\").click();\n    cy.get(\".t--entity-name:contains(Modal1)\").click();\n    cy.get(\".t--modal-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"display toast on close action","suites":["Modal Widget Functionality"],"updatePoint":{"line":26,"column":35},"line":26,"code":"  it(\"display toast on close action\", () => {\n    cy.SearchEntityandOpen(\"Modal1\");\n    cy.get(\".t--property-control-onclose\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"onclose\", \"{{showAlert('test','success')}}\");\n    cy.get(widgets.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should paste modal widgets with main container as parentId","suites":["Modal Widget Functionality"],"updatePoint":{"line":37,"column":64},"line":37,"code":"  it(\"should paste modal widgets with main container as parentId\", () => {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.SearchEntityandOpen(\"Modal1\");\n    cy.wait(200);\n    cy.get(\"body\").type(`{${modifierKey}}c`);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(widgets.iconWidgetBtn).click({\n      force: true\n    });\n    cy.get(\"body\").type(`{${modifierKey}}v`);\n    cy.get('.bp3-collapse-body > [step=\"2\"]').first().children().should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Modal_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new dropdown widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":9,"column":29},"line":9,"code":"  it(\"Add new dropdown widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselectwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselectwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":35,"column":72},"line":35,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselectwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Multi Tree Select Widget"],"updatePoint":{"line":9,"column":20},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"multiselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-multiselecttreewidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Multi Tree Select Widget"],"updatePoint":{"line":45,"column":72},"line":45,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/MultiTreeSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Progress Bar","suites":["ProgressBar Widget Functionality"],"updatePoint":{"line":4,"column":26},"line":4,"code":"  it(\"Add new Progress Bar\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"progressbarwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--progressbar-widget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/ProgressBar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update Progress bar properties and validate","suites":["ProgressBar Widget Functionality"],"updatePoint":{"line":12,"column":49},"line":12,"code":"  it(\"Update Progress bar properties and validate\", () => {\n    // add progress value\n    cy.testJsontext(\"progress\", 30); // show result\n\n    cy.get(\".t--property-control-showresult .t--js-toggle\").click({\n      force: true\n    });\n    cy.testJsontext(\"showresult\", \"true\");\n    cy.wait(200);\n    cy.get(`.t--progressbar-widget > div[data-cy='${30}']`).should(\"exist\");\n    cy.get(\".t--progressbar-widget > div\").eq(1).should(\"have.text\", \"30%\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/ProgressBar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":9,"column":20},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-radiogroupwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/RadioGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.get(\".t--property-control-options\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"Y\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/RadioGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Radiogroup Widget Functionality"],"updatePoint":{"line":34,"column":72},"line":34,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n          {\n            \"label\": \"Yes\",\n            \"value\": \"\"\n          },\n          {\n            \"label\": \"No\",\n            \"value\": \"\"\n          }\n        ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/RadioGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select Widget name update","suites":["Select Widget Functionality"],"updatePoint":{"line":14,"column":31},"line":14,"code":"  it(\"Select Widget name update\", function () {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.widgetText(\"Select1\", widgetsPage.selectDropDownWidget, commonlocators.selectInner);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Disable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":18,"column":50},"line":18,"code":"  it(\"Disable the widget and check in publish mode\", function () {\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"enable the widget and check in publish mode","suites":["Select Widget Functionality"],"updatePoint":{"line":30,"column":49},"line":30,"code":"  it(\"enable the widget and check in publish mode\", function () {\n    cy.openPropertyPane(\"dropdownwidget\");\n    cy.get(\".bp3-disabled\").should(\"be.visible\");\n    cy.get(widgetsPage.disable).scrollIntoView({\n      force: true\n    });\n    cy.get(widgetsPage.selectWidgetDisabled).click({\n      force: true\n    });\n    cy.get(\".bp3-button\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(\".bp3-button\").should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(\".bp3-active div\").should(\"contain.text\", \"Green\");\n    cy.goToEditFromPublish();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/select_Widget_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing Statbox from created Widgets list","suites":["Statbox Widget Functionality"],"updatePoint":{"line":13,"column":53},"line":13,"code":"  it(\"Open Existing Statbox from created Widgets list\", () => {\n    cy.get(\".widgets\").click();\n    cy.get(\".t--entity .widget\").get(\".entity-context-menu\").last().click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open Existing Statbox, change background color and verify","suites":["Statbox Widget Functionality"],"updatePoint":{"line":19,"column":63},"line":19,"code":"  it(\"Open Existing Statbox, change background color and verify\", () => {\n    cy.openPropertyPane(\"statboxwidget\"); // changing the background color of statbox and verying it\n\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      cy.get(\".bp3-input-group\").clear().type(\"#FFC13D\");\n      cy.get(\".bp3-input\").should(\"have.value\", \"#FFC13D\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify Statbox icon button's onClick action and change the icon","suites":["Statbox Widget Functionality"],"updatePoint":{"line":27,"column":69},"line":27,"code":"  it(\"Verify Statbox icon button's onClick action and change the icon\", () => {\n    cy.openPropertyPane(\"iconbuttonwidget\");\n    cy.get(\".t--property-pane-section-general\").then(() => {\n      // changing the icon to arrow-up\n      cy.get(\".bp3-button-text\").first().click();\n      cy.get(\".bp3-icon-arrow-up\").click(); // opening modal from onClick action of icon button\n\n      cy.createModal(\"Modal\", \"Modal1\");\n    }); // verifying the changed icon\n\n    cy.get(\".bp3-icon-arrow-up\").should(\"be.visible\"); // verifying modal has been added\n\n    cy.get(\".t--draggable-iconbuttonwidget\").click();\n    cy.xpath(\"//span[text()='Close']\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Bind datasource to multiple components in statbox","suites":["Statbox Widget Functionality"],"updatePoint":{"line":42,"column":55},"line":42,"code":"  it(\"Bind datasource to multiple components in statbox\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"MockApi\");\n    cy.enterDatasourceAndPath(data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // going to HomePage where the button widget is located and opening it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload(); // binding datasource to text widget in statbox\n\n    cy.openPropertyPane(\"textwidget\");\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{{MockApi.data.users[0].id}}\", {\n      parseSpecialCharSequences: false\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify Statbox can be placed inside another widget","suites":["Statbox Widget Functionality"],"updatePoint":{"line":58,"column":56},"line":58,"code":"  it(\"Verify Statbox can be placed inside another widget\", () => {\n    cy.get(explorer.addWidget).click(); // placing statbox widget inside container widget\n\n    cy.dragAndDropToCanvas(\"containerwidget\", {\n      x: 500,\n      y: 300\n    });\n    cy.dragAndDropToWidget(\"statboxwidget\", \"containerwidget\", {\n      x: 100,\n      y: 100\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Statbox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":9,"column":20},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchgroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-switchgroupwidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Switchgroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Switchgroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Switchgroup Widget Functionality"],"updatePoint":{"line":35,"column":72},"line":35,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"switchgroupwidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Switchgroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with with modal popup","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":14,"column":40},"line":14,"code":"  it(\"Table widget with with modal popup\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //update Table name with _\n\n    cy.widgetText(\"Table_1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.createModal(\"Modal\", this.data.ModalName);\n    cy.isSelectRow(1);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n    cy.isSelectRow(2);\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget with button colour change validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":28,"column":55},"line":28,"code":"  it(\"Table widget with button colour change validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt);\n    cy.changeColumnType(\"Button\");\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color);\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget icon type and colour validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":47,"column":50},"line":47,"code":"  it(\"Table widget icon type and colour validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.editColumn(\"id\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"be.visible\");\n    cy.get(\".bp3-overlay-backdrop\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget validation of a field without js ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":68,"column":52},"line":68,"code":"  it(\"Table widget validation of a field without js \", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"email\");\n    cy.clearPropertyValue(0); //toggle js for visiblity\n\n    cy.get(\".t--property-control-visible .t--js-toggle\").click({\n      force: true\n    });\n    cy.clearPropertyValue(1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget column reorder and reload function","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":78,"column":53},"line":78,"code":"  it(\"Table widget column reorder and reload function\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\");\n    cy.readTabledataPublish(\"2\", \"2\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n      cy.reload();\n      cy.wait(3000);\n      cy.readTabledataPublish(\"2\", \"2\").then(tabDataNew => {\n        expect(tabDataNew).to.be.equal(\"Tobias Funke\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Button_Icon_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality with Hidden and Resized Columns","suites":["Table Widget Functionality with Hidden and Resized Columns"],"updatePoint":{"line":14,"column":64},"line":14,"code":"  it(\"Table Widget Functionality with Hidden and Resized Columns\", function () {\n    cy.PublishtheApp(); // Verify column header width should be equal to table width\n\n    cy.get(\".t--widget-tablewidget\").invoke(\"outerWidth\").then(tableWidth => {\n      cy.get(\".t--widget-tablewidget .thead .tr\").invoke(\"outerWidth\").then(columnHeaderWidth => {\n        expect(columnHeaderWidth).to.be.at.least(tableWidth);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Column_Resize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":22,"column":59},"line":22,"code":"  it(\"Create an API and Execute the API and bind with Table\", function () {\n    // Create and execute an API and bind with table\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":27,"column":56},"line":27,"code":"  it(\"Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Clear Table data and enter Apil data into table data\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check Widget properties\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open Text1 in propert pane\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the Text value to selected row url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open Table1 propert pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Compare table 1st index data with itself\n\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Verify 1st index data\n\n    cy.ValidateTableData(\"1\"); // add new column\n\n    cy.addColumn(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for background color","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":50,"column":51},"line":50,"code":"  it(\"Table widget toggle test for background color\", function () {\n    // Open id property pane\n    cy.editColumn(\"id\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Click on cell background JS button\n\n    cy.get(widgetsPage.toggleJsBcgColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the cell background color to green\n\n    cy.toggleJsAndUpdate(\"tabledata\", \"Green\"); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // verify the cell background color\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background-color\", \"rgb(0, 128, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit column name and validate test for computed value based on column type selected","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":71,"column":89},"line":71,"code":"  it(\"Edit column name and validate test for computed value based on column type selected\", function () {\n    // opoen customColumn1 property pane\n    cy.editColumn(\"customColumn1\"); // Enter Apil 1st user email data into customColumn1\n\n    cy.readTabledataPublish(\"1\", \"9\").then(tabData => {\n      const tabValue = tabData;\n      cy.updateComputedValue(\"{{Api1.data.users[0].email}}\");\n      cy.readTabledataPublish(\"1\", \"9\").then(tabData => {\n        expect(tabData).not.to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update table json data and check the column names updated","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":85,"column":63},"line":85,"code":"  it(\"Update table json data and check the column names updated\", function () {\n    // Open table propert pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputUpdate));\n    cy.wait(\"@updateLayout\"); // verify columns are visible or not in the propert pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\"); // Hide the columns in property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // verify customColumn is visible in the table\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Derived_Column_Data_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":13,"column":32},"line":13,"code":"  it(\"Table Widget Functionality\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To validate download csv and download Excel","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":19,"column":76},"line":19,"code":"  it(\"Table Widget Functionality To validate download csv and download Excel\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.searchInput).first().type(tabData); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.downloadData(\"Download as CSV\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(5000); //cy.validateDownload('Table1.csv');\n\n      cy.verifyDownload(\"Table1.csv\");\n      cy.downloadData(\"Download as Excel\");\n      cy.wait(5000); //cy.validateDownload('Table1.xlsx');\n\n      cy.verifyDownload(\"Table1.xlsx\");\n      cy.get(publish.searchInput).first().within(() => {\n        return cy.get(\"input\").clear();\n      }).type(\"7434532\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000);\n      cy.readTabledataPublish(\"3\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Byron Fields\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using does not contain","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":52,"column":74},"line":52,"code":"  it(\"Table Widget Functionality To Filter The Data using does not contain\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"does not contain\").click();\n      cy.get(publish.inputValue).type(\"Lindsay\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).not.to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using OR operator ","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":90,"column":70},"line":90,"code":"  it(\"Table Widget Functionality To Filter The Data using OR operator \", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"contains\").click();\n      cy.get(publish.inputValue).type(\"Tobias Funke\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.AddFilterWithOperator(\"OR\", \"email\", \"contains\", \"tobias.funke@reqres.in\");\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Tobias Funke\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).first().click({\n        force: true\n      });\n      cy.get(publish.removeFilter).last().click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using AND operator ","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":135,"column":71},"line":135,"code":"  it(\"Table Widget Functionality To Filter The Data using AND operator \", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"contains\").click();\n      cy.get(publish.inputValue).type(\"Tobias Funke\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.AddFilterWithOperator(\"AND\", \"email\", \"contains\", \"tobias.funke@reqres.in\");\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Tobias Funke\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).first().click({\n        force: true\n      });\n      cy.get(publish.removeFilter).last().click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using OR operator with different data ","suites":["Table Widget Filter Functionality"],"updatePoint":{"line":180,"column":90},"line":180,"code":"  it(\"Table Widget Functionality To Filter The Data using OR operator with different data \", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"contains\").click();\n      cy.get(publish.inputValue).type(\"Lindsay Ferguson\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.AddFilterWithOperator(\"OR\", \"email\", \"contains\", \"tobias.funke@reqres.in\");\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Tobias Funke\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).first().click({\n        force: true\n      });\n      cy.wait(500);\n      cy.get(publish.removeFilter).last().click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Filter_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate table pagination is disabled","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":18,"column":51},"line":18,"code":"  it(\"Test to validate table pagination is disabled\", function () {\n    // Verify pagination is disabled\n    cy.get(\".t--table-widget-prev-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-next-page\").should(\"have.attr\", \"disabled\");\n    cy.get(\".t--table-widget-page-input input\").should(\"have.attr\", \"disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":24,"column":38},"line":24,"code":"  it(\"Test to validate text allignment\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Change the text align to center\n\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the center text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the right text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // verify the left text alignment\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate column heading allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":46,"column":48},"line":46,"code":"  it(\"Test to validate column heading allignment\", function () {\n    // cy.openPropertyPane(\"tablewidget\");\n    // Change the text align to center\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    }); // Verify the column headings are center aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"center\"); // Change the text align to right\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    }); // Verify the column headings are right aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"right\"); // Change the text align to left\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    }); // Verify the column headings are left aligned\n\n    cy.get(\".draggable-header\").first().should(\"have.css\", \"text-align\", \"left\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":67,"column":34},"line":67,"code":"  it(\"Test to validate text format\", function () {\n    // Select the bold font style\n    cy.get(widgetsPage.bold).click({\n      force: true\n    }); // Varify the font style is bold\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Change the font style to italic\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    }); // Verify the font style is italic\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-style\", \"italic\"); // Change the font style to underline\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.underline).click({\n      force: true\n    }); // Verify the font style is underline\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"text-decoration-line\", \"underline\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":88,"column":42},"line":88,"code":"  it(\"Test to validate vertical allignment\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Select the top vertical alignment\n\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    }); // verify vertical alignment is top\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\"); // Change the vertical alignment to center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    }); // Verify the vertical alignment is centered\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\"); // Change the vertical alignment to bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    }); // Verify the vertical alignment is bottom\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget toggle test for text alignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":109,"column":49},"line":109,"code":"  it(\"Table widget toggle test for text alignment\", function () {\n    // Click on text align JS\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Change the text align value to right for michael and left for others\n\n    cy.toggleJsAndUpdate(\"tabledata\", testdata.bindingGenAlign); // Close propert pane\n    // Verify the text michael id is right aligned\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-end\"); // Verify the 2nd id is left aligned\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget change text size and validate","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":124,"column":48},"line":124,"code":"  it(\"Table widget change text size and validate\", function () {\n    // Verify font size is 14px\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"14px\"); // Click on text size JS\n\n    cy.get(widgetsPage.toggleTextAlign).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Open txe size dropdown options\n\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Select Heading 1 text size\n\n    cy.selectTextSize(\"Heading 1\"); // Verify the font size is 24px\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"24px\"); // close propert pane\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); // Verify the font size is 24px\n\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate open new tab icon shows when URL type data validate link text ","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":149,"column":85},"line":149,"code":"  it(\"Test to validate open new tab icon shows when URL type data validate link text \", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // go back to 1st\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // Change column type to url\n\n    cy.changeColumnType(\"URL\"); //Check all the occurance\n\n    cy.get(\".link-text\").should(\"have.length\", \"3\");\n    /*\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    )\n      .should(\"be.hidden\")\n      .invoke(\"show\");\n    cy.get(\n      `.t--widget-tablewidget .tbody .td[data-rowindex=1][data-colindex=1] .hidden-icon`,\n    ).should(\"be.visible\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit column name and test for table header changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":173,"column":56},"line":173,"code":"  it(\"Edit column name and test for table header changes\", function () {\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Open email property pane\n\n    cy.editColumn(\"email\"); // CHange the Column email name to Email Address\n\n    cy.editColName(\"Email Address\"); // verify changed email name is visible\n\n    cy.get(\".draggable-header:contains('Email Address')\").should(\"be.visible\");\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit Row height and test table for changes","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":187,"column":48},"line":187,"code":"  it(\"Edit Row height and test table for changes\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.rowHeight).last().click({\n      force: true\n    });\n    cy.get(\".t--dropdown-option\").contains(\"Short\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"height\", \"19px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":198,"column":53},"line":198,"code":"  it(\"Test to validate text color and text background\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Click on text color input field\n\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    }); // Select green color\n\n    cy.xpath(widgetsPage.greenColor).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\"); // Verify the text color is green\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(3, 179, 101)\"); // Change the text color and enter purple in input field\n\n    cy.get(widgetsPage.textColor).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // Verify the text color is purple\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Click on cell background color\n\n    cy.get(widgetsPage.backgroundColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // select the green color\n\n    cy.xpath(widgetsPage.greenColor).first().click();\n    cy.wait(\"@updateLayout\"); // Verify the cell background color is green\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\"); // Change the cell background color and enter purple in input field\n\n    cy.get(widgetsPage.backgroundColor).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // Verify the cell background color is purple\n\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(128, 0, 128) none repeat scroll 0% 0% / auto padding-box border-box\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_GeneralProperty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enableMultirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":14,"column":73},"line":14,"code":"  it(\"Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.get(widgetsPage.buttonWidget).first().click();\n    cy.wait(1000);\n    cy.get(\".t--table-multiselect\").first().click();\n    cy.get(widgetsPage.buttonWidget).last().click();\n    cy.get(\".tbody .tr\").first().should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_MultiRowSelect_dataUpdation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test multi select column shows when enableMultirowselection is true","suites":["Table Widget row multi select validation"],"updatePoint":{"line":11,"column":73},"line":11,"code":"  it(\"Test multi select column shows when enableMultirowselection is true\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.closePropertyPane(\"tablewidget\");\n    cy.get(\".t--table-multiselect-header\").first().should(\"be.visible\");\n    cy.get(\".t--table-multiselect\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test click on header cell selects all row","suites":["Table Widget row multi select validation"],"updatePoint":{"line":20,"column":47},"line":20,"code":"  it(\"Test click on header cell selects all row\", function () {\n    // click on header check cell\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // check if rows selected\n\n    cy.get(\".tr\").should(\"have.class\", \"selected-row\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test click on single row cell changes header select cell state","suites":["Table Widget row multi select validation"],"updatePoint":{"line":28,"column":68},"line":28,"code":"  it(\"Test click on single row cell changes header select cell state\", function () {\n    // un select all rows\n    cy.get(\".t--table-multiselect-header\").first().click({\n      force: true\n    }); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    }); // check if header cell is in half check state\n\n    cy.get(\".t--table-multiselect-header-half-check-svg\").first().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test action configured on onRowSelected get triggered whenever a table row is selected","suites":["Table Widget row multi select validation"],"updatePoint":{"line":40,"column":92},"line":40,"code":"  it(\"Test action configured on onRowSelected get triggered whenever a table row is selected\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.onTableAction(0, \"onrowselected\", \"Row Selected\"); // un select first row\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).should(\"not.exist\"); // click on first row select box\n\n    cy.get(\".t--table-multiselect\").first().click({\n      force: true\n    });\n    cy.get(commonlocators.toastmsg).contains(\"Row Selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_MultiRowSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check number key in table data convert table binding and header properly","suites":["Validate Table Widget Table Data"],"updatePoint":{"line":8,"column":78},"line":8,"code":"  it(\"Check number key in table data convert table binding and header properly\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.contains('[role=\"columnheader\"]', \"_1\").should(\"exist\");\n    cy.contains('[role=\"columnheader\"]', \"_2\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Number_column_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create an API and Execute the API and bind with Table","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":9,"column":62},"line":9,"code":"  it(\"1. Create an API and Execute the API and bind with Table\", function () {\n    cy.createAndFillApi(this.data.paginationUrl, this.data.paginationParam);\n    cy.RunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate Table with API data and then add a column","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":13,"column":59},"line":13,"code":"  it(\"2. Validate Table with API data and then add a column\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data to Apil data users\n\n    cy.testJsontext(\"tabledata\", \"{{Api1.data.users}}\"); // Check server sided pagination\n\n    cy.CheckWidgetProperties(commonlocators.serverSidePaginationCheckbox); // Open property pane of Text1\n\n    cy.SearchEntityandOpen(\"Text1\"); // Change the text value to selected url\n\n    cy.testJsontext(\"text\", \"{{Table1.selectedRow.url}}\"); // Open property pane\n\n    cy.SearchEntityandOpen(\"Table1\"); // Copmre the table 1st index with itself\n\n    cy.readTabledata(\"0\", \"0\").then(tabData => {\n      const tableData = tabData;\n      localStorage.setItem(\"tableDataPage1\", tableData);\n    }); // Validate the table 1st index\n\n    cy.ValidateTableData(\"1\"); // Add new column\n\n    cy.addColumn(\"CustomColumn\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Update table json data and check the column names updated and validate empty value","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":36,"column":91},"line":36,"code":"  it(\"3. Update table json data and check the column names updated and validate empty value\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Table1\"); // Change the table data\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInputWithNull));\n    cy.wait(\"@updateLayout\"); // Verify the columns are visible in property pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\");\n    cy.tableColumnDataValidation(\"customColumn1\"); // Hide the columns in the table from property pane\n\n    cy.hideColumn(\"id\");\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\"); // Verify CustomColumn is visible\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\"); // close property pane\n\n    cy.closePropertyPane(); // Validate the empty values\n\n    cy.readTabledataPublish(\"0\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Check Selected Row(s) Resets When Table Data Changes","suites":["Test Create Api and Bind to Table widget"],"updatePoint":{"line":64,"column":61},"line":64,"code":"  it(\"4. Check Selected Row(s) Resets When Table Data Changes\", function () {\n    // Select 1st row\n    cy.isSelectRow(1);\n    cy.openPropertyPane(\"tablewidget\"); // Empty first row\n\n    cy.testJsontext(\"tabledata\", \"[]\");\n    cy.wait(\"@updateLayout\");\n    const newTableData = [...this.data.TableInput];\n    newTableData[0].userName = \"\"; // Change table data from empty to some\n\n    cy.testJsontext(\"tabledata\", JSON.stringify(newTableData));\n    cy.wait(\"@updateLayout\");\n    const selectedRowsSelector = `.t--widget-tablewidget .tbody .tr.selected-row`; // Verify selected row resets on table data changes\n\n    cy.get(selectedRowsSelector).should($p => {\n      // should found 0 rows\n      expect($p).to.have.length(0);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Property_JsonUpdate_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify default array data","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":19,"column":31},"line":19,"code":"  it(\"Verify default array data\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Open Widget side bar\n\n    cy.get(widgetsPage.addWidget).click(); // Drag and drop table widget\n\n    cy.dragAndDropToCanvas(\"tablewidget\", {\n      x: 300,\n      y: 200\n    }); // close Widget side bar\n\n    cy.get(widgetsPage.explorerSwitchId).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.SearchEntityandOpen(\"Table2\"); // Verify default array data\n\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.deleteWidget(widgetsPage.tableWidget);\n    cy.wait(2000);\n    cy.ClearSearch();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify empty columnName in data","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":41,"column":37},"line":41,"code":"  it(\"Verify empty columnName in data\", () => {\n    cy.get(widgetsPage.addWidget).click(); // Drag and drop table widget\n\n    cy.dragAndDropToCanvas(\"tablewidget\", {\n      x: 300,\n      y: 200\n    }); // close Widget side bar\n\n    cy.get(widgetsPage.explorerSwitchId).click({\n      force: true\n    });\n    cy.get(widgetsPage.tabedataField).should(\"not.be.empty\");\n    cy.get(`${widgetsPage.tabedataField} .CodeMirror`).first().then(ins => {\n      const input = ins[0].CodeMirror;\n      input.focus();\n      cy.wait(100);\n      input.setValue(JSON.stringify(emptyTableColumnNameData));\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(5000);\n    cy.get(\".t--widget-tablewidget\").should(\"be.visible\");\n    cy.deleteWidget(widgetsPage.tableWidget);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify On Row Selected Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":64,"column":35},"line":64,"code":"  it(\"Verify On Row Selected Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(0, \"onrowselected\", \"Row is selected\");\n    cy.PublishtheApp(); // Select 1st row\n\n    cy.isSelectRow(2);\n    cy.wait(2000); // Verify Row is selected by showing the message\n\n    cy.get(commonlocators.toastmsg).contains(\"Row is selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check On Page Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":77,"column":33},"line":77,"code":"  it(\"Check On Page Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Select show message in the \"on selected row\" dropdown\n\n    cy.onTableAction(1, \"onpagechange\", \"Page Changed\");\n    cy.PublishtheApp();\n    cy.wait(2000); // Change the page\n\n    cy.get(widgetsPage.nextPageButton).click({\n      force: true\n    }); // Verify the page is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Page Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify On Search Text Change Action","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":92,"column":41},"line":92,"code":"  it(\"Verify On Search Text Change Action\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Show Message on Search text change Action\n\n    cy.onTableAction(3, \"onsearchtextchanged\", \"Search Text Changed\");\n    cy.PublishtheApp(); // Change the Search text\n\n    cy.get(widgetsPage.searchField).type(\"Hello\");\n    cy.wait(2000); // Verify the search text is changed\n\n    cy.get(commonlocators.toastmsg).contains(\"Search Text Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check open section and column data in property pane","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":105,"column":57},"line":105,"code":"  it(\"Check open section and column data in property pane\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Validate the columns are visible in the property pane\n\n    cy.tableColumnDataValidation(\"id\");\n    cy.tableColumnDataValidation(\"email\");\n    cy.tableColumnDataValidation(\"userName\");\n    cy.tableColumnDataValidation(\"productName\");\n    cy.tableColumnDataValidation(\"orderAmount\"); // Updating the column name ; \"id\" > \"TestUpdated\"\n\n    cy.tableColumnPopertyUpdate(\"id\", \"TestUpdated\"); // Add new column in the table with name \"CustomColumn\"\n\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hide all other columns\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Verifying the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Column Detail - Edit column name and validate test for computed value based on column type selected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":127,"column":105},"line":127,"code":"  it(\"Column Detail - Edit column name and validate test for computed value based on column type selected\", function () {\n    cy.makeColumnVisible(\"email\");\n    cy.makeColumnVisible(\"userName\");\n    cy.makeColumnVisible(\"productName\");\n    cy.makeColumnVisible(\"orderAmount\"); // Open column detail to be edited by draggable id\n\n    cy.editColumn(\"id\"); // Change the column name\n\n    cy.editColName(\"updatedId\"); // Reading single cell value of the table and verify it's value.\n\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"2736212\"); // Changing the Computed value from \"id\" to \"Email\"\n\n      cy.updateComputedValue(testdata.currentRowEmail); // Reading single cell value of the table and verify it's value.\n\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabValue);\n        cy.log(\"computed value of plain text \" + tabData2);\n      });\n    }); // Changing Column data type from \"Plain text\" to \"Number\"\n\n    cy.changeColumnType(\"Number\");\n    cy.readTabledataPublish(\"1\", \"4\").then(tabData => {\n      cy.log(tabData);\n      expect(tabData).to.not.equal(\"lindsay.ferguson@reqres.in\"); // Email to \"orderAmount\"\n\n      cy.updateComputedValue(testdata.currentRowOrderAmt);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        cy.log(tabData2);\n        expect(tabData2).to.be.equal(tabData);\n        cy.log(\"computed value of number is \" + tabData2);\n      });\n    }); // Changing Column data type from \"Number\" to \"Date\"\n\n    cy.changeColumnType(\"Date\"); // orderAmout to \"Moment Date\"\n\n    cy.updateComputedValue(testdata.momentDate);\n    cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n      expect(tabData).to.not.equal(\"9.99\");\n      cy.log(\"computed value of Date is \" + tabData);\n    }); // Changing Column data type from \"URL\" to \"Video\"\n\n    /* const videoVal = 'https://youtu.be/Sc-m3ceZyfk';\n    cy.changeColumnType(\"Video\");\n    // \"Moement \"date\" to \"Video\"\n    cy.updateComputedValue(videoVal);\n    // cy.testJson  text(\"computedvalue\", videoVal, )\n    // Verifying the href of the Video added.\n    cy.readTableLinkPublish(\"1\", \"1\").then((hrefVal) => {\n      expect(hrefVal).to.be.equal(videoVal);\n    });*/\n    // Changing Column data type from \"Date\" to \"Image\"\n\n    const imageVal = \"https://images.pexels.com/photos/736230/pexels-photo-736230.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\";\n    cy.changeColumnType(\"Image\"); // \"Moement \"date\" to \"Image\"\n\n    cy.updateComputedValue(imageVal); // Verifying the href of the image added.\n\n    cy.readTableLinkPublish(\"1\", \"0\").then(hrefVal => {\n      expect(hrefVal).to.be.contains(imageVal);\n    }); // change column data type to \"icon button\"\n\n    cy.changeColumnType(\"Icon Button\");\n    cy.wait(400);\n    cy.get(commonlocators.selectedIcon).should(\"have.text\", \"add\");\n    cy.getTableDataSelector(\"0\", \"0\").then(selector => {\n      cy.get(selector + \" button.bp3-button [data-icon=add]\").should(\"exist\");\n    }); // Changing Column data type from \"Date\" to \"URl\"\n\n    cy.readTabledataPublish(\"1\", \"1\").then(() => {\n      cy.changeColumnType(\"URL\"); // \"Image\" to \"url\"\n\n      cy.updateComputedValue(testdata.currentRowEmail);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData2 => {\n        expect(tabData2).to.not.equal(\"lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of URL is \" + tabData2);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":209,"column":38},"line":209,"code":"  it(\"Test to validate text allignment\", function () {\n    // Verifying Center Alignment\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"center\"); // Verifying Right Alignment\n\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"justify-content\", \"flex-end\"); // Verifying Left Alignment\n\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text format","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":226,"column":34},"line":226,"code":"  it(\"Test to validate text format\", function () {\n    // Validate Bold text\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"font-weight\", \"700\"); // Validate Italic text\n\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"font-style\", \"italic\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate vertical allignment","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":238,"column":42},"line":238,"code":"  it(\"Test to validate vertical allignment\", function () {\n    // Validate vertical alignemnt of Cell text to TOP\n    cy.get(widgetsPage.verticalTop).click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"flex-start\"); // Validate vertical alignemnt of Cell text to Center\n\n    cy.get(widgetsPage.verticalCenter).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"align-items\", \"center\"); // Validate vertical alignemnt of Cell text to Bottom\n\n    cy.get(widgetsPage.verticalBottom).last().click({\n      force: true\n    });\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"align-items\", \"flex-end\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text color and text background","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":255,"column":53},"line":255,"code":"  it(\"Test to validate text color and text background\", function () {\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    }); // Changing text color to GREEN and validate\n\n    cy.xpath(widgetsPage.greenColor).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(5000);\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(3, 179, 101)\"); // Changing text color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsColor).click();\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"color\", \"rgb(128, 0, 128)\"); // Changing Cell backgroud color to GREEN and validate\n\n    cy.get(widgetsPage.backgroundColor).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.greenColor).click();\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"1\", \"0\", \"background\", \"rgb(3, 179, 101) none repeat scroll 0% 0% / auto padding-box border-box\"); // Changing Cell backgroud color to PURPLE and validate using JS\n\n    cy.get(widgetsPage.toggleJsBcgColor).click();\n    cy.testCodeMirrorLast(\"purple\");\n    cy.wait(\"@updateLayout\");\n    cy.readTabledataValidateCSS(\"0\", \"0\", \"background\", \"rgb(128, 0, 128) none repeat scroll 0% 0% / auto padding-box border-box\"); // close property pane\n\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify default search text","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":285,"column":32},"line":285,"code":"  it(\"Verify default search text\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Chage deat search text value to \"data\"\n\n    cy.testJsontext(\"defaultsearchtext\", \"data\");\n    cy.PublishtheApp(); // Verify the deaullt search text\n\n    cy.get(widgetsPage.searchField).should(\"have.value\", \"data\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify default selected row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":295,"column":33},"line":295,"code":"  it(\"Verify default selected row\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"defaultsearchtext\", \"\"); // Change default selected row value to 1\n\n    cy.get(widgetsPage.defaultSelectedRowField).type(\"1\");\n    cy.wait(2000);\n    cy.PublishtheApp(); // Verify the default selected row\n\n    cy.get(widgetsPage.selectedRow).should(\"have.css\", \"background-color\", \"rgb(236, 249, 243)\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table-Delete Verification","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":307,"column":31},"line":307,"code":"  it(\"Table-Delete Verification\", function () {\n    // Open property pane\n    cy.openPropertyPane(\"tablewidget\"); // Delete the Table widget\n\n    cy.deleteWidget(widgetsPage.tableWidget);\n    cy.PublishtheApp(); // Verify the Table widget is deleted\n\n    cy.get(widgetsPage.tableWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_PropertyPane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality","suites":["Table Widget Functionality"],"updatePoint":{"line":16,"column":32},"line":16,"code":"  it(\"Table Widget Functionality\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ChartWidget}Mouseover\n     * @param{ChartPre Css} Assertion\n     */\n\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.testJsontext(\"tabledata\", JSON.stringify(this.data.TableInput));\n    cy.wait(\"@updateLayout\"); //cy.get(widgetsPage.ColumnAction).click({ force: true });\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .click({ force: true })\n    //   .get(commonlocators.dropdownmenu)\n    //   .children()\n    //   .contains(\"Navigate to\")\n    //   .click();\n    // cy.wait(\"@updateLayout\");\n    // cy.get(widgetsPage.tableOnRowSelected)\n    //   .get(commonlocators.dropdownSelectButton)\n    //   .first()\n    //   .find(\"> .bp3-button-text\")\n    //   .should(\"have.text\", \"{{navigateTo()}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Verify The Data","suites":["Table Widget Functionality"],"updatePoint":{"line":42,"column":51},"line":42,"code":"  it(\"Table Widget Functionality To Verify The Data\", function () {\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Show a Base64 Image","suites":["Table Widget Functionality"],"updatePoint":{"line":49,"column":55},"line":49,"code":"  it(\"Table Widget Functionality To Show a Base64 Image\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.editColumn(\"image\");\n    cy.changeColumnType(\"Image\");\n    cy.isSelectRow(1);\n    const index = 1;\n    const imageVal = this.data.TableInput[index].image;\n    cy.readTableLinkPublish(index, \"1\").then(hrefVal => {\n      expect(hrefVal).to.contain(imageVal);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Search The Data","suites":["Table Widget Functionality"],"updatePoint":{"line":60,"column":51},"line":60,"code":"  it(\"Table Widget Functionality To Search The Data\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.searchInput).first().type(tabData); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(publish.downloadBtn).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(5000);\n      cy.get(publish.searchInput).first().within(() => {\n        return cy.get(\"input\").clear();\n      }).type(\"7434532\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000);\n      cy.readTabledataPublish(\"3\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Byron Fields\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data","suites":["Table Widget Functionality"],"updatePoint":{"line":87,"column":51},"line":87,"code":"  it(\"Table Widget Functionality To Filter The Data\", function () {\n    cy.get(publish.searchInput).first().within(() => {\n      return cy.get(\"input\").clear();\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"is exactly\").click();\n      cy.get(publish.inputValue).type(tabValue); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500); // cy.get(widgetsPage.filterCloseBtn).click({force:true});\n\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n      cy.wait(500);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using contains","suites":["Table Widget Functionality"],"updatePoint":{"line":132,"column":66},"line":132,"code":"  it(\"Table Widget Functionality To Filter The Data using contains\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"contains\").click();\n      cy.get(publish.inputValue).type(\"Lindsay\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using starts with ","suites":["Table Widget Functionality"],"updatePoint":{"line":170,"column":70},"line":170,"code":"  it(\"Table Widget Functionality To Filter The Data using starts with \", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"starts with\").click();\n      cy.get(publish.inputValue).type(\"Lindsay\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Filter The Data using ends with ","suites":["Table Widget Functionality"],"updatePoint":{"line":208,"column":68},"line":208,"code":"  it(\"Table Widget Functionality To Filter The Data using ends with \", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      cy.log(\"the value is\" + tabValue);\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.attributeDropdown).click();\n      cy.get(publish.attributeValue).contains(\"userName\").click();\n      cy.get(publish.conditionDropdown).click();\n      cy.get(publish.attributeValue).contains(\"ends with\").click();\n      cy.get(publish.inputValue).type(\"Ferguson\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.get(widgetsPage.filterApplyBtn).click({\n        force: true\n      });\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n      });\n      cy.get(widgetsPage.filterCloseBtn).click({\n        force: true\n      });\n      cy.get(publish.filterBtn).click();\n      cy.get(publish.removeFilter).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(500);\n      cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n        const tabValue = tabData;\n        expect(tabValue).to.be.equal(\"Michael Lawson\");\n      });\n      cy.get(publish.canvas).first().click({\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Widget Functionality To Check if Table is Sortable","suites":["Table Widget Functionality"],"updatePoint":{"line":246,"column":62},"line":246,"code":"  it(\"Table Widget Functionality To Check if Table is Sortable\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Confirm if isSortable is true\n\n    cy.get(commonlocators.isSortable).should(\"be.checked\"); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Sort Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Tobias Funke\");\n    }); // Back to edit page\n\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n    cy.openPropertyPane(\"tablewidget\"); // Disable isSortable\n    // Confirm if isSortable is false\n\n    cy.togglebarDisable(commonlocators.isSortable); // Publish App\n\n    cy.PublishtheApp(); // Confirm Current order\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Lindsay Ferguson\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"Michael Lawson\");\n    }); // Confirm Sort is disable on Username Column\n\n    cy.contains('[role=\"columnheader\"]', \"userName\").first().click({\n      force: true\n    });\n    cy.wait(1000); // Confirm order after sort\n\n    cy.readTabledataPublish(\"1\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Ryan Holmes\");\n    });\n    cy.readTabledataPublish(\"0\", \"3\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).not.to.be.equal(\"Tobias Funke\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table Widget Functionality To Check with changing schema of tabledata","suites":["Table Widget"],"updatePoint":{"line":8,"column":78},"line":8,"code":"  it(\"1. Table Widget Functionality To Check with changing schema of tabledata\", () => {\n    let jsContext = `{{Switch1.isSwitchedOn?[{name: \"joe\"}]:[{employee_name: \"john\"}];}}`;\n    cy.NavigateToHome();\n    cy.get(homePage.createNew).first().click({\n      force: true\n    });\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"switchwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.dragAndDropToCanvas(\"tablewidget\", {\n      x: 200,\n      y: 300\n    });\n    cy.wait(1000);\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--property-control-tabledata\").then($el => {\n      cy.updateCodeInput($el, jsContext);\n    });\n    cy.PublishtheApp();\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element, {\n        timeout: 10000\n      }).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(\".t--switch-widget-active\").first().click();\n    cy.wait(1000);\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element, {\n        timeout: 10000\n      }).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"john\");\n    });\n    cy.get(\".t--switch-widget-inactive\").first().click();\n    cy.wait(1000);\n    cy.getTableDataSelector(\"0\", \"0\").then(element => {\n      cy.get(element, {\n        timeout: 10000\n      }).should(\"be.visible\");\n    });\n    cy.readTabledataPublish(\"0\", \"0\").then(value => {\n      expect(value).to.be.equal(\"joe\");\n    });\n    cy.get(publish.backToEditor).first().click().wait(1000);\n    cy.selectEntityByName(\"Widgets\");\n    cy.actionContextMenuByEntityName(\"Switch1\");\n    cy.actionContextMenuByEntityName(\"Table1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_tabledata_schema_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Table widget with Add button test and validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":13,"column":57},"line":13,"code":"  it(\"1. Table widget with Add button test and validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\");\n    cy.get(widgetsPage.tableBtn).should(\"not.exist\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\"); // Changing the computed value (data) to \"orderAmount\"\n\n    cy.updateComputedValue(testdata.currentRowOrderAmt); // Selecting button action to show message\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Close Property pane\n\n    cy.get(commonlocators.editPropBackButton).click({\n      force: true\n    }); // Validating the button action by clicking\n\n    cy.get(widgetsPage.tableBtn).last().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Table Button color validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":43,"column":38},"line":43,"code":"  it(\"2. Table Button color validation\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Open column details of \"id\".\n\n    cy.editColumn(\"id\"); // Changing column data type to \"Button\"\n\n    cy.changeColumnType(\"Button\");\n    const color1 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear().type(color1);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.buttonColor).click({\n      force: true\n    }).clear() // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Table Button label color validation","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":62,"column":44},"line":62,"code":"  it(\"3. Table Button label color validation\", function () {\n    const color1 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.labelColor).click({\n      force: true\n    }).clear().type(color1);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(0, 0, 255)\";\n    cy.get(widgetsPage.labelColor).click({\n      force: true\n    }).clear() // following wait is required to reproduce #9526\n    .wait(600).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"color\", color2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Table widget triggeredRow property should be accessible","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":76,"column":64},"line":76,"code":"  it(\"4. Table widget triggeredRow property should be accessible\", function () {\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Table widget triggeredRow property should be same even after sorting the table","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":79,"column":87},"line":79,"code":"  it(\"5. Table widget triggeredRow property should be same even after sorting the table\", function () {\n    //sort table date on second column\n    cy.get(\".draggable-header \").first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Table widget add new icon button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":87,"column":48},"line":87,"code":"  it(\"6. Table widget add new icon button column\", function () {\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // hide id column\n\n    cy.makeColumnVisible(\"id\");\n    cy.wait(1000); // click on Add new Column.\n    //cy.get(\".t--property-pane-back-btn\").click({ force: true });\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Icon Button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-add\").should(\"exist\"); // disabled icon btn\n\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.getTableDataSelector(\"0\", \"4\").then(selector => {\n      cy.get(selector + \" button.bp3-disabled\").should(\"exist\");\n    });\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox); //Delete Column\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    });\n    cy.deleteColumn(\"customColumn1\"); // Close Property pane\n\n    /*\n    cy.get(commonlocators.editPropCrossButton).click({\n      force: true,\n    });\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Table widget add new menu button column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":127,"column":48},"line":127,"code":"  it(\"7. Table widget add new menu button column\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // click on Add new Column.\n\n    cy.get(\".t--add-column-btn\").click(); //Open New Custom Column\n\n    cy.editColumn(\"customColumn1\"); // Change Column type to icon Button\n\n    cy.changeColumnType(\"Menu Button\"); //Changing the text on the Menu Button\n\n    cy.testJsontext(\"label\", \"Menu button\"); // Select Icon from Icon Control\n\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-airplane\").first().click({\n      force: true\n    }); // validate icon\n\n    cy.get(\".t--widget-tablewidget .tbody .bp3-icon-airplane\").should(\"exist\"); // validate label\n\n    cy.contains(\"Menu button\").should(\"exist\");\n    const color1 = \"rgb(255, 255, 0)\";\n    cy.get(widgetsPage.menuColor).click({\n      force: true\n    }).clear().type(color1);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color1); // Changing the color again to reproduce issue #9526\n\n    const color2 = \"rgb(255, 0, 0)\";\n    cy.get(widgetsPage.menuColor).click({\n      force: true\n    }).clear() // following wait is required to reproduce #9526\n    .wait(500).type(color2);\n    cy.get(widgetsPage.tableBtn).should(\"have.css\", \"background-color\", color2); // Add a Menu item 1\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").first().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).type(\"#03b365\", {\n      force: true\n    }).wait(500); //  Add action to the menu Item\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Show message\").click();\n    cy.addSuccessMessage(\"Successful \".concat(testdata.currentRowEmail)); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 2\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#FFC13D\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Add a Menu item 3\n\n    cy.get(\".t--add-menu-item-btn\").click({\n      force: true\n    }); // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    }); // update menu item background color\n\n    cy.get(widgetsPage.backgroundcolorPickerNew).clear().type(\"#3366FF\", {\n      force: true\n    }).wait(500); // Go back to table property pane\n\n    cy.get(\".t--property-pane-back-btn\").click({\n      force: true\n    }); // Close Property pane\n\n    cy.openPropertyPane(\"tablewidget\"); // Click on the Menu Button\n\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000); //Commenting below verification until fixed to overide flakiness\n    // // verify menu items background color\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(0)\n    //   .should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(1)\n    //   .should(\"have.css\", \"background-color\", \"rgb(51, 102, 255)\"); //\"rgb(255, 193, 61)\");\n    // cy.get(\".bp3-menu-item\")\n    //   .eq(2)\n    //   .should(\"have.css\", \"background-color\", \"rgb(255, 255, 255)\");//\"rgb(51, 102, 255)\");\n    //cy.closePropertyPane();\n    // disable menu item 3\n    //cy.openPropertyPane(\"tablewidget\");\n    //cy.editColumn(\"customColumn1\");\n    // Edit a Menu item\n\n    cy.get(\".t--property-pane-section-menuitems .t--edit-column-btn\").last().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--property-control-disabled label.bp3-switch.unchecked\").click({\n      force: true\n    }); //cy.closePropertyPane();\n    // Click on the Menu Button\n\n    cy.contains(\"Menu button\").click({\n      force: true\n    });\n    cy.wait(1000); // check Menu Item 3 is disable\n\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.css\", \"background-color\", \"rgb(250, 250, 250)\");\n    cy.get(\".bp3-menu-item\").eq(2).should(\"have.class\", \"bp3-disabled\"); // Click on the Menu Item\n\n    cy.get(\".bp3-menu-item\").eq(0).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(3000); // Validating the toast message\n\n    cy.get(widgetsPage.toastAction).should(\"be.visible\");\n    cy.get(widgetsPage.toastActionText).last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"Successful tobias.funke@reqres.in\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Table widget test on button icon click, row should not get deselected","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":264,"column":78},"line":264,"code":"  it(\"8. Table widget test on button icon click, row should not get deselected\", () => {\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\"); //click icon button again\n\n    cy.get(widgetsPage.tableIconBtn).last().click({\n      force: true\n    });\n    cy.get(commonlocators.TextInside).should(\"have.text\", \"Tobias Funke\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Add_button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Copy paste table widget and valdiate application status","suites":["Test Suite to validate copy/paste table Widget"],"updatePoint":{"line":13,"column":61},"line":13,"code":"  it(\"Copy paste table widget and valdiate application status\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.toastAction).should(\"be.visible\"); //Check after copying new table widget should not have any warnings\n\n    cy.get('.t--widget-propertypane-toggle [name=\"warning\"]').should(\"not.exist\");\n    cy.GlobalSearchEntity(\"Table1Copy\");\n    cy.get(\".widgets .t--entity-collapse-toggle\").last().click();\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(12);\n      expect($lis.eq(0)).to.contain(\"{{Table1Copy.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1Copy.selectedRows}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Copy_Paste_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to add column","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":17,"column":24},"line":17,"code":"  it(\"Test to add column\", function () {\n    cy.openPropertyPane(\"tablewidget\"); // Adding new column\n\n    cy.addColumn(\"CustomColumn\");\n    cy.tableColumnDataValidation(\"customColumn1\"); //To be updated later\n    // Hiding all other columns in the table from property pane\n\n    cy.hideColumn(\"email\");\n    cy.hideColumn(\"userName\");\n    cy.hideColumn(\"productName\");\n    cy.hideColumn(\"orderAmount\"); // Validating the newly added column\n\n    cy.get(\".draggable-header:contains('CustomColumn')\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Edit column name and validate test for computed value","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":31,"column":59},"line":31,"code":"  it(\"Edit column name and validate test for computed value\", function () {\n    // Open column detail by draggable id of the column\n    cy.editColumn(\"customColumn1\"); // Validating single cell value\n\n    cy.readTabledataPublish(\"1\", \"2\").then(() => {\n      // Chaging the computed value to \"Emails\"\n      cy.updateComputedValue(testdata.currentRowWithIdOutside); // Validating single cell value\n\n      cy.readTabledataPublish(\"1\", \"1\").then(tabData => {\n        expect(tabData).to.be.equal(\"#lindsay.ferguson@reqres.in\");\n        cy.log(\"computed value of plain text \" + tabData);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Derived_Column_Computed_value_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table widget new menu button column should not deselect row","suites":["Table Widget property pane feature validation"],"updatePoint":{"line":7,"column":65},"line":7,"code":"  it(\"Table widget new menu button column should not deselect row\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n    cy.contains(\"Open Menu\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(\".t--widget-textwidget\").should(\"have.text\", \"0\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Table_Widget_Selected_row_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain 2d array","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":9,"column":63},"line":9,"code":"  it(\"Check if the selectedRowIndices does not contain 2d array\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Change the value of default selected row\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"1\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\"); //Disable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Enable Multi row select\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    });\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  1]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/table_with_text_no_2dArray_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the selectedRowIndices does not contain -1","suites":["Table widget edge case scenario testing"],"updatePoint":{"line":11,"column":57},"line":11,"code":"  it(\"Check if the selectedRowIndices does not contain -1\", function () {\n    cy.openPropertyPane(\"tablewidget\"); //Update the property default selected row to blank\n\n    cy.updateCodeInput(\".t--property-control-defaultselectedrow\", \"\"); //Check if the evaluated value is undefined\n\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"be.visible\").should(\"have.text\", \"undefined\"); //Check the value present in the textfield which is selectedRowIndices is blank\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"\"); //Enable the \"Enable Multi Row selection\"\n\n    cy.get(widgetsPage.toggleEnableMultirowselection).first().click({\n      force: true\n    }); //Check the value present in the textfield which is selectedRowIndices is []\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[]\"); //Select the 1st, 2nd and 3rd row\n\n    cy.isSelectRow(\"0\");\n    cy.isSelectRow(\"1\");\n    cy.isSelectRow(\"2\"); //Check the value present in the textfield which is selectedRowIndices is [0,1,2]\n\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.text\", \"[  0,  1,  2]\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/table_with_text_selRowIndices_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate parsing link","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":18,"column":35},"line":18,"code":"  it(\"Test to validate parsing link\", function () {\n    // Add link to text widget\n    cy.testCodeMirror(\"https://app.appsmith.com\"); // check if it's parsed as link\n\n    cy.get(commonlocators.headingTextStyle);\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"have.attr\", \"href\", \"https://app.appsmith.com\"); // disable parsing as link\n\n    cy.get(\".t--property-control-disablelink .bp3-switch\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\"); // check if it's parsed as text\n\n    cy.contains(\"a\", \"https://app.appsmith.com\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":33,"column":50},"line":33,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.textWidget + \" \" + commonlocators.widgetNameTag); //Changing the text label\n\n    cy.testCodeMirror(this.data.TextLabelValueScrollable);\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValueScrollable);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValueScrollable).should(\"have.css\", \"font-size\", \"24px\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text format","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":46,"column":34},"line":46,"code":"  it(\"Test to validate text format\", function () {\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-style\", \"italic\");\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-weight\", \"400\");\n    cy.get(widgetsPage.bold).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-weight\", \"700\");\n    cy.get(widgetsPage.italics).click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"font-style\", \"normal\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate color changes in text and background","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":66,"column":59},"line":66,"code":"  it(\"Test to validate color changes in text and background\", function () {\n    //Changing the Text Style's and validating\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.greenColor).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(3, 179, 101)\");\n    cy.get(widgetsPage.textColor).clear({\n      force: true\n    }).type(\"purple\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(128, 0, 128)\");\n    cy.get(widgetsPage.backgroundColor).first().click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.xpath(widgetsPage.greenColor).first().click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate text alignment","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":97,"column":37},"line":97,"code":"  it(\"Test to validate text alignment\", function () {\n    cy.get(widgetsPage.centerAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"center\");\n    cy.get(widgetsPage.rightAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"right\");\n    cy.get(widgetsPage.leftAlign).first().click({\n      force: true\n    });\n    cy.readTextDataValidateCSS(\"text-align\", \"left\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test to validate enable scroll feature","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":112,"column":44},"line":112,"code":"  it(\"Test to validate enable scroll feature\", function () {\n    cy.get(\".t--property-control-enablescroll .bp3-switch\").click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.headingTextStyle).trigger(\"mouseover\", {\n      force: true\n    });\n    cy.get(commonlocators.headingTextStyle).scrollIntoView({\n      duration: 2000\n    });\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width, color and verity","suites":["Text Widget color/font/alignment Functionality"],"updatePoint":{"line":125,"column":41},"line":125,"code":"  it(\"Test border width, color and verity\", function () {\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"border-width\").and(\"eq\", \"10px\");\n    cy.get(widgetsPage.boadercolorPicker).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.yellowColor).click();\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"border-color\").and(\"eq\", \"rgb(255, 193, 61)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_new_feature_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Heading, Text Name Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":18,"column":50},"line":18,"code":"  it(\"Text-TextStyle Heading, Text Name Validation\", function () {\n    //changing the Text Name and verifying\n    cy.widgetText(this.data.TextName, widgetsPage.textWidget, widgetsPage.textWidget + \" \" + commonlocators.widgetNameTag); //Changing the text label\n\n    cy.testCodeMirror(this.data.TextLabelValue);\n    cy.ChangeTextStyle(this.data.TextHeading, commonlocators.headingTextStyle, this.data.TextLabelValue);\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"24px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Email Parsing Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":28,"column":35},"line":28,"code":"  it(\"Text Email Parsing Validation\", function () {\n    cy.testCodeMirror(\"ab.end@domain.com\");\n    cy.wait(\"@updateLayout\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.headingTextStyle + \" a\").should(\"have.attr\", \"href\", \"mailto:ab.end@domain.com\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Label Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":34,"column":37},"line":34,"code":"  it(\"Text-TextStyle Label Validation\", function () {\n    cy.testCodeMirror(this.data.TextLabelValue); //Changing the Text Style's and validating\n\n    cy.ChangeTextStyle(this.data.TextLabel, commonlocators.labelTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.labelTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"14px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text-TextStyle Body Validation","suites":["Text Widget Functionality"],"updatePoint":{"line":41,"column":36},"line":41,"code":"  it(\"Text-TextStyle Body Validation\", function () {\n    cy.ChangeTextStyle(this.data.TextBody, commonlocators.bodyTextStyle, this.data.TextLabelValue);\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", this.data.TextLabelValue).should(\"have.css\", \"font-size\", \"18px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widget depends on itself","suites":["Text Widget Functionality"],"updatePoint":{"line":46,"column":35},"line":46,"code":"  it(\"Text widget depends on itself\", function () {\n    cy.testJsontext(\"text\", `{{${this.data.TextName}}}`);\n    cy.get(commonlocators.toastBody).first().contains(\"Cyclic\");\n    cy.PublishtheApp();\n    cy.get(commonlocators.bodyTextStyle).should(\"have.text\", `{{${this.data.TextName}}}`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Text_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new widget","suites":["Tree Select Widget"],"updatePoint":{"line":9,"column":20},"line":9,"code":"  it(\"Add new widget\", () => {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"singleselecttreewidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--widget-singleselecttreewidget\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that empty value is allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"should check that empty value is allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"GREEN\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should check that more thatn empty value is not allowed in options","suites":["Tree Select Widget"],"updatePoint":{"line":45,"column":72},"line":45,"code":"  it(\"should check that more thatn empty value is not allowed in options\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.updateCodeInput(\".t--property-control-options\", `[\n        {\n          \"label\": \"Blue\",\n          \"value\": \"\",\n          \"children\": [\n            {\n              \"label\": \"Dark Blue\",\n              \"value\": \"DARK BLUE\"\n            },\n            {\n              \"label\": \"Light Blue\",\n              \"value\": \"LIGHT BLUE\"\n            }\n          ]\n        },\n        {\n          \"label\": \"Green\",\n          \"value\": \"\"\n        },\n        {\n          \"label\": \"Red\",\n          \"value\": \"RED\"\n        }\n      ]`);\n    cy.get(\".t--property-control-options .t--codemirror-has-error\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/Tree_Select_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Video Widget play functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":17,"column":48},"line":17,"code":"  it(\"Video Widget play functionality validation\", function () {\n    cy.openPropertyPane(\"videowidget\");\n    cy.widgetText(\"Video1\", widgetsPage.videoWidget, commonlocators.videoInner);\n    cy.get(commonlocators.onPlay).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Play success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Video widget pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":31,"column":49},"line":31,"code":"  it(\"Video widget pause functionality validation\", function () {\n    cy.get(commonlocators.onPause).click();\n    cy.selectShowMsg();\n    cy.addSuccessMessage(\"Pause success\");\n    cy.get(widgetsPage.autoPlay).click();\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update video url and check play and pause functionality validation","suites":["Video Widget Functionality"],"updatePoint":{"line":43,"column":72},"line":43,"code":"  it(\"Update video url and check play and pause functionality validation\", function () {\n    cy.testCodeMirror(testdata.videoUrl);\n    cy.get(\".CodeMirror textarea\").first().blur();\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Play success\");\n    */\n\n    cy.get(widgetsPage.autoPlay).click({\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.wait(4000);\n    cy.get(commonlocators.toastMsg).should(\"be.visible\");\n    cy.get(commonlocators.toastMsg).contains(\"Pause success\");\n    */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DisplayWidgets/video_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dynamic Layout - Change Layout","suites":["Dynamic Layout Functionality"],"updatePoint":{"line":16,"column":36},"line":16,"code":"  it(\"Dynamic Layout - Change Layout\", function () {\n    cy.get(commonlocators.layoutControls).eq(4).click();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DynamicLayout/DynamicLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dynamic Layout - New Page should have selected Layout","suites":["Dynamic Layout Functionality"],"updatePoint":{"line":20,"column":59},"line":20,"code":"  it(\"Dynamic Layout - New Page should have selected Layout\", function () {\n    cy.get(pages.AddPage).first().click();\n    cy.skipGenerateCRUDPage();\n    cy.get(commonlocators.canvas).invoke(\"width\").should(\"be.eq\", 450);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/DynamicLayout/DynamicLayout_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate","suites":["Entity explorer Drag and Drop widgets testcases"],"updatePoint":{"line":17,"column":44},"line":17,"code":"  it(\"Drag and drop form widget and validate\", function () {\n    cy.log(\"Login Successful\");\n    cy.reload(); // To remove the rename tooltip\n\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.get(commonlocators.entityExplorersearch).clear().type(\"form\");\n    cy.dragAndDropToCanvas(\"formwidget\", {\n      x: 300,\n      y: 80\n    });\n    cy.get(formWidgetsPage.formD).click();\n    /**\n     * @param{Text} Random Text\n     * @param{FormWidget}Mouseover\n     * @param{FormPre Css} Assertion\n     */\n\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    /**\n     * @param{Text} Random Colour\n     */\n\n    cy.get(widgetsPage.backgroundcolorPicker).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.greenColor).click();\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(3, 179, 101)\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(commonlocators.scrollView);\n    cy.get(formWidgetsPage.formD).scrollTo(\"bottom\").should(\"be.visible\");\n    cy.get(explorer.explorerSwitchId).click();\n    cy.PublishtheApp();\n    cy.get(publish.backToEditor).first().click();\n    cy.SearchEntityandOpen(\"FormTest\");\n    cy.get(\".widgets \" + explorer.collapse).last().click({\n      force: true\n    });\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.SearchEntityAndUnfold(\"FormTest\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_DragAndDropWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename API with table widget name validation test","suites":["Tab widget test"],"updatePoint":{"line":22,"column":55},"line":22,"code":"  it(\"Rename API with table widget name validation test\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateApiAndValidateUniqueEntityName(apiName);\n    cy.get(apiwidget.apiTxt).clear().type(tableName, {\n      force: true\n    }).should(\"have.value\", tableName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Naming_conflict_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename Table widget with api name validation test","suites":["Tab widget test"],"updatePoint":{"line":31,"column":55},"line":31,"code":"  it(\"Rename Table widget with api name validation test\", function () {\n    cy.GlobalSearchEntity(\"Table1\");\n    cy.RenameEntity(tableName);\n    cy.validateMessage(tableName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Naming_conflict_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"expects actions on the same page cannot have identical names","suites":["Api Naming conflict on a page test"],"updatePoint":{"line":4,"column":66},"line":4,"code":"  it(\"expects actions on the same page cannot have identical names\", function () {\n    cy.log(\"Login Successful\"); // create an API\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(firstApiName); // create another API\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(secondApiName); // try to rename one of the APIs with an existing API name\n\n    cy.GlobalSearchEntity(secondApiName);\n    cy.RenameEntity(firstApiName);\n    cy.validateMessage(firstApiName);\n    cy.ClearSearch();\n    cy.DeleteAPIFromSideBar();\n    cy.DeleteAPIFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"it expects actions on different pages can have identical names","suites":["Api Naming conflict on different pages test"],"updatePoint":{"line":22,"column":68},"line":22,"code":"  it(\"it expects actions on different pages can have identical names\", function () {\n    cy.log(\"Login Successful\"); // create a new API\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(firstApiName); // create a new page and an API on that page\n\n    cy.Createpage(\"Page2\");\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(secondApiName);\n    cy.RenameEntity(firstApiName);\n    cy.VerifyPopOverMessage(firstApiName + \" is already being used.\"); // delete API and Page2\n\n    cy.DeleteAPIFromSideBar();\n    cy.DeletepageFromSideBar(); // delete API created on Page 1\n\n    cy.DeleteAPIFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"expects JS objects and actions to not have identical names on the same page.","suites":["Entity Naming conflict test"],"updatePoint":{"line":41,"column":82},"line":41,"code":"  it(\"expects JS objects and actions to not have identical names on the same page.\", function () {\n    cy.log(\"Login Successful\"); // create JS object and name it\n\n    cy.createJSObject('return \"Hello World\";');\n    cy.RenameEntity(firstApiName); // create API and rename it, expect error to occur\n\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(secondApiName);\n    cy.GlobalSearchEntity(secondApiName);\n    cy.RenameEntity(firstApiName);\n    cy.VerifyPopOverMessage(firstApiName + \" is already being used.\", true);\n    cy.ClearSearch();\n    cy.deleteJSObject();\n    cy.DeleteAPIFromSideBar();\n    cy.NavigateToHome();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Entity_Renaming_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add a widget to default page and verify the properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":19,"column":60},"line":19,"code":"  it(\"Add a widget to default page and verify the properties\", function () {\n    cy.addDsl(dsl);\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.SearchEntityAndUnfold(\"Text1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create another page and add another widget and verify properties","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":32,"column":70},"line":32,"code":"  it(\"Create another page and add another widget and verify properties\", function () {\n    cy.Createpage(pageid);\n    cy.addDsl(tdsl);\n    cy.openPropertyPane(\"tablewidget\");\n    cy.widgetText(\"Table1\", widgetsPage.tableWidget, commonlocators.tableInner);\n    cy.GlobalSearchEntity(\"Table1\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.SearchEntityAndUnfold(\"Table1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(12);\n      expect($lis.eq(0)).to.contain(\"{{Table1.selectedRow}}\");\n      expect($lis.eq(1)).to.contain(\"{{Table1.selectedRows}}\");\n      expect($lis.eq(2)).to.contain(\"{{Table1.selectedRowIndices}}\");\n      expect($lis.eq(3)).to.contain(\"{{Table1.triggeredRow}}\");\n      expect($lis.eq(4)).to.contain(\"{{Table1.selectedRowIndex}}\");\n      expect($lis.eq(5)).to.contain(\"{{Table1.tableData}}\");\n      expect($lis.eq(6)).to.contain(\"{{Table1.pageNo}}\");\n      expect($lis.eq(7)).to.contain(\"{{Table1.pageSize}}\");\n      expect($lis.eq(8)).to.contain(\"{{Table1.isVisible}}\");\n      expect($lis.eq(9)).to.contain(\"{{Table1.searchText}}\");\n      expect($lis.eq(10)).to.contain(\"{{Table1.totalRecordsCount}}\");\n      expect($lis.eq(11)).to.contain(\"{{Table1.sortOrder}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle between widgets in different pages using search functionality","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":59,"column":74},"line":59,"code":"  it(\"Toggle between widgets in different pages using search functionality\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.SearchEntityAndUnfold(\"Text1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Multiple_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer visibility on unpin","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":7,"column":48},"line":7,"code":"  it(\"checks entity explorer visibility on unpin\", function () {\n    cy.get(\".t--unpin-entity-explorer\").click(); // after transition, the entity explorer will not be visible\n\n    cy.get(\"body\").trigger(\"mousemove\", {\n      which: 1,\n      pageX: 600,\n      pageY: 600\n    });\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer visibility on pin","suites":["Entity explorer tests related to pinning and unpinning"],"updatePoint":{"line":17,"column":46},"line":17,"code":"  it(\"checks entity explorer visibility on pin\", function () {\n    cy.get(\".t--unpin-entity-explorer\").click();\n    cy.get(\".t--pin-entity-explorer\").click();\n    cy.get(\".t--entity-explorer\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Pin_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a page/moveQuery/rename/delete in explorer","suites":["Entity explorer tests related to query and datasource"],"updatePoint":{"line":23,"column":58},"line":23,"code":"  it(\"1. Create a page/moveQuery/rename/delete in explorer\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm(); // checking that conflicting names are not allowed\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(\"download\", {\n      force: true\n    }).blur();\n    cy.get(\".Toastify\").should(\"contain\", \"Invalid name\"); // checking a valid name\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(datasourceName, {\n      force: true\n    }).should(\"have.value\", datasourceName).blur();\n    cy.testSaveDatasource();\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    /* eslint-disable */\n\n    cy.wait(2000);\n    cy.NavigateToQueryEditor();\n    cy.contains(\".t--datasource-name\", datasourceName).click();\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}new`, {\n      force: true\n    }).blur();\n    cy.contains(commonlocators.entityName, `${datasourceName}new`); // reverting the name\n\n    cy.get(\".t--edit-datasource-name\").click();\n    cy.get(\".t--edit-datasource-name input\").clear().type(`${datasourceName}`, {\n      force: true\n    }).blur(); // going  to the query create page\n\n    cy.contains(commonlocators.entityName, \"Query1\").click();\n    cy.get(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // cy.get(queryLocators.templateMenu).click();\n\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    cy.get(`.t--entity.action:contains(Query1)`).scrollIntoView({\n      force: true\n    }).find(explorer.collapse).click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n    cy.Createpage(pageid);\n    cy.GlobalSearchEntity(\"Query1\");\n    cy.EditApiNameFromExplorer(\"MyQuery\");\n    cy.GlobalSearchEntity(\"MyQuery\");\n    cy.xpath(apiwidget.popover).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.MoveAPIToPage(pageid);\n    cy.SearchEntityandOpen(\"MyQuery\");\n    cy.runQuery();\n    cy.deleteQuery();\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    });\n    cy.wait(500);\n    cy.NavigateToQueryEditor();\n    cy.get(pages.integrationActiveTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.contains(\".t--datasource-name\", datasourceName).click();\n    cy.get(\".t--delete-datasource\").click();\n    cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Query_Datasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To rename Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":19,"column":66},"line":19,"code":"  it(\"Tab Widget Functionality To rename Tabs from entity explorer\", function () {\n    cy.GlobalSearchEntity(\"Tab1\");\n    cy.RenameEntity(tabname);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab name validation in properties and widget ","suites":["Tab widget test"],"updatePoint":{"line":23,"column":51},"line":23,"code":"  it(\"Tab name validation in properties and widget \", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.closePropertyPane();\n    cy.get(Layoutpage.tabWidget).contains(tabname).click({\n      force: true\n    }).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To delete Tabs from entity explorer","suites":["Tab widget test"],"updatePoint":{"line":30,"column":66},"line":30,"code":"  it(\"Tab Widget Functionality To delete Tabs from entity explorer\", function () {\n    cy.GlobalSearchEntity(\"Tab2\");\n    cy.RenameEntity(tabname);\n    cy.validateMessage(tabname);\n    cy.deleteEntity();\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    }).type(\"Tab2\", {\n      force: true\n    });\n    cy.get(commonlocators.entitySearchResult.concat(\"Tab2\").concat(\"')\")).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Tab_rename_Delete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":21,"column":74},"line":21,"code":"  it(\"Drag and drop form widget and validate copy widget via toast message\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(commonlocators.copyWidget).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Delete Widget from sidebar and Undo action validation","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":29,"column":59},"line":29,"code":"  it(\"Delete Widget from sidebar and Undo action validation\", function () {\n    cy.GlobalSearchEntity(\"FormTest\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n    });\n    cy.DeleteWidgetFromSideBar(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(apiwidget.propertyList).should(\"not.exist\");\n    /*\n    To be enabled once widget delete click works\n    cy.get('.t--delete-widget')\n      .trigger(\"mouseover\")\n      .click({ force: true });\n      */\n\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{FormTest.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTest.data}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Delete_Undo_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Drag and drop form widget and validate copy widget via toast message","suites":["Test Suite to validate copy/delete/undo functionalites"],"updatePoint":{"line":22,"column":74},"line":22,"code":"  it(\"Drag and drop form widget and validate copy widget via toast message\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\";\n    cy.openPropertyPane(\"formwidget\");\n    cy.widgetText(\"FormTest\", formWidgetsPage.formWidget, formWidgetsPage.formInner);\n    cy.get(\"body\").click();\n    cy.get(\"body\").type(`{${modifierKey}}c`); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(commonlocators.toastBody).first().contains(\"Copied\").click();\n    cy.get(\"body\").type(`{${modifierKey}}v`, {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"body\").type(\"{del}\", {\n      force: true\n    });\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.GlobalSearchEntity(\"FormTestCopy\");\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{FormTestCopy.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{FormTestCopy.data}}\");\n      cy.contains(\"FormTestCopy\");\n      cy.get($lis.eq(1)).contains(\"{{FormTestCopy.data}}\").click({\n        force: true\n      }); //cy.get('.clipboard-message success')\n      //  .contains('Copied to clipboard!')\n      //  .should('be.visible');\n\n      cy.wait(10000);\n      cy.GlobalSearchEntity(\"Input1\");\n      cy.wait(10000);\n      cy.get(\".bp3-input\").first().click({\n        force: true\n      });\n      cy.get(\".bp3-input\").first().type(`{${modifierKey}}v`, {\n        force: true\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_Copy_Paste_Delete_Undo_Keyboard_Event_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Widget edit/delete/copy to clipboard validation","suites":["Entity explorer tests related to widgets and validation"],"updatePoint":{"line":11,"column":53},"line":11,"code":"  it(\"Widget edit/delete/copy to clipboard validation\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.SearchEntityAndUnfold(\"Text1\");\n    cy.get(explorer.property).last().click({\n      force: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{Text1.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{Text1.text}}\");\n    });\n    cy.GlobalSearchEntity(\"Text1\");\n    cy.EditApiNameFromExplorer(\"TextUpdated\");\n    cy.GlobalSearchEntity(\"TextUpdated\");\n    cy.get(\".widgets .t--entity-collapse-toggle\").last().click();\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(2);\n      expect($lis.eq(0)).to.contain(\"{{TextUpdated.isVisible}}\");\n      expect($lis.eq(1)).to.contain(\"{{TextUpdated.text}}\");\n    });\n    cy.DeleteWidgetFromSideBar();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ExplorerTests/Entity_Explorer_Widgets_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Slash command and mustache autocomplete validation for button widget","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":9,"column":74},"line":9,"code":"  it(\"Slash command and mustache autocomplete validation for button widget\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    cy.testCodeMirror(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in label field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      // validates autocomplete binding on entering {{}} in label field\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Text1.text\");\n    }); // makes the onClick js toggle active\n\n    cy.get(\".t--property-control-onclick\").find(\".t--js-toggle\").click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"/\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.get(\".CodeMirror textarea\").last().focus().type(\"{ctrl}{shift}{downarrow}\").type(\"{backspace}\").type(\"{shift}{{}{shift}{{}\").then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete functions on entering {{}} in onClick field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"storeValue()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"showModal()\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(3).should(\"have.text\", \"showAlert()\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Slash command and mustache autocomplete validation for textbox widget","suites":["Autocomplete using slash command and mustache tests"],"updatePoint":{"line":50,"column":75},"line":50,"code":"  it(\"Slash command and mustache autocomplete validation for textbox widget\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.testCodeMirror(\"/\");\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.hints).should(\"exist\"); // validates all autocomplete commands on entering / in text field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"New Binding\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Insert Snippet\");\n      cy.get(`${dynamicInputLocators.hints} li`).last().should(\"have.text\", \"New Datasource\");\n    });\n    cy.get(dynamicInputLocators.input).first().click({\n      force: true\n    }).type(\"{uparrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{ctrl}{shift}{downarrow}\", {\n      parseSpecialCharSequences: true\n    }).type(\"{backspace}\", {\n      parseSpecialCharSequences: true\n    }).then(() => {\n      cy.get(dynamicInputLocators.input).first().type(\"{shift}{{}{shift}{{}\"); // validates autocomplete binding on entering {{}} in text field\n\n      cy.get(`${dynamicInputLocators.hints} li`).eq(1).should(\"have.text\", \"Button1.recaptchaToken\");\n      cy.get(`${dynamicInputLocators.hints} li`).eq(2).should(\"have.text\", \"Button1.text\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Autocomplete_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Button-Modal Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":18,"column":32},"line":18,"code":"  it(\"1. Button-Modal Validation\", function () {\n    //creating the Modal and verify Modal name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":25,"column":36},"line":25,"code":"  it(\"2. Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // Creating the api\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"buttonApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"buttonwidget\"); // Adding the api in the onClickAction of the button widget.\n\n    cy.addAPIFromLightningMenu(\"buttonApi\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onclick\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":48,"column":37},"line":48,"code":"  it(\"3. Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n      cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\"); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(widgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"buttonwidget\"); // Adding the query in the onClickAction of the button widget.\n\n    cy.addQueryFromLightningMenu(\"Query1\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onclick\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Button-CallAnApi Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":83,"column":48},"line":83,"code":"  it(\"4. Toggle JS - Button-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onClickAction of the button widget.\n    // calling the existing api\n    cy.get(widgetsPage.toggleOnClick).click({\n      force: true\n    });\n    cy.testJsontext(\"onclick\", \"{{buttonApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Button-Call-Query Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":95,"column":49},"line":95,"code":"  it(\"5. Toggle JS - Button-Call-Query Validation\", function () {\n    //creating a query and calling it from the onClickAction of the button widget.\n    // Creating a mock query\n    cy.testJsontext(\"onclick\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Clicking the button to verify the success message\n\n    cy.get(publishPage.buttonWidget).click();\n    cy.get(widgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_onClickAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Color Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":26,"column":29},"line":26,"code":"  it(\"Button-Color Validation\", function () {\n    // Change button color\n    cy.changeButtonColor(\"rgb(255, 0, 0)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button default variant validation","suites":["Button Widget Functionality"],"updatePoint":{"line":30,"column":39},"line":30,"code":"  it(\"Button default variant validation\", function () {\n    // Checks whether the default variant is PRIMARY or not\n    cy.get(widgetsPage.widgetBtn).should(\"have.attr\", \"data-test-variant\", \"PRIMARY\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Name validation","suites":["Button Widget Functionality"],"updatePoint":{"line":34,"column":28},"line":34,"code":"  it(\"Button-Name validation\", function () {\n    //changing the Button Name\n    cy.widgetText(this.data.ButtonName, widgetsPage.buttonWidget, widgetsPage.buttonWidget + \" \" + commonlocators.widgetNameTag); //Changing the text on the Button\n\n    cy.testJsontext(\"label\", this.data.ButtonLabel);\n    cy.get(commonlocators.evaluatedTypeTitle).first().find(\"span\").click();\n    cy.EvaluateDataType(\"string\");\n    cy.EvaluateCurrentValue(this.data.ButtonLabel);\n    cy.assertPageSave(); //Verify the Button name and label\n\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\");\n    cy.get(widgetsPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget + \" span.bp3-button-text\").should(\"have.text\", this.data.ButtonLabel);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":49,"column":31},"line":49,"code":"  it(\"Button-Disable Validation\", function () {\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Enable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":56,"column":30},"line":56,"code":"  it(\"Button-Enable Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Disable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":63,"column":43},"line":63,"code":"  it(\"Toggle JS - Button-Disable Validation\", function () {\n    //Check the disabled checkbox by using JS widget and Validate\n    cy.get(widgetsPage.toggleDisable).click({\n      force: true\n    });\n    cy.testJsontext(\"disabled\", \"true\");\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Enable Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":73,"column":42},"line":73,"code":"  it(\"Toggle JS - Button-Enable Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.testJsontext(\"disabled\", \"false\");\n    cy.validateEnableWidget(widgetsPage.buttonWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.buttonWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":80,"column":45},"line":80,"code":"  it(\"Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox and validate\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Check Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":86,"column":43},"line":86,"code":"  it(\"Button-Check Visible field Validation\", function () {\n    //Check the disableed checkbox and Validate\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Unckeck Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":92,"column":57},"line":92,"code":"  it(\"Toggle JS - Button-Unckeck Visible field Validation\", function () {\n    //Uncheck the disabled checkbox using JS and validate\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Button-Check Visible field Validation","suites":["Button Widget Functionality"],"updatePoint":{"line":101,"column":55},"line":101,"code":"  it(\"Toggle JS - Button-Check Visible field Validation\", function () {\n    //Check the disabled checkbox using JS and Validate\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publishPage.buttonWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Check recaptcha type can be selected","suites":["Button Widget Functionality"],"updatePoint":{"line":107,"column":49},"line":107,"code":"  it(\"Button-Check recaptcha type can be selected\", function () {\n    cy.selectDropdownValue(commonlocators.recaptchaVersion, \"reCAPTCHA v2\");\n    cy.get(commonlocators.recaptchaVersion).last().should(\"have.text\", \"reCAPTCHA v2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Copy Verification","suites":["Button Widget Functionality"],"updatePoint":{"line":111,"column":30},"line":111,"code":"  it(\"Button-Copy Verification\", function () {\n    //Copy button and verify all properties\n    cy.copyWidget(\"buttonwidget\", widgetsPage.buttonWidget); // cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Button-Delete Verification","suites":["Button Widget Functionality"],"updatePoint":{"line":115,"column":32},"line":115,"code":"  it(\"Button-Delete Verification\", function () {\n    // Delete the button widget\n    cy.deleteWidget(widgetsPage.buttonWidget);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.buttonWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate show tooltip on button hover","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":11,"column":43},"line":11,"code":"  it(\"Validate show tooltip on button hover\", function () {\n    cy.openPropertyPane(\"buttonwidget\"); // add tooltip\n\n    cy.testJsontext(\"tooltip\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\"); // tooltip should show on hover\n\n    cy.get(\".bp3-popover2-content\").should(\"have.text\", \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate tooltip hidden for disabled button","suites":["Button Widget Functionality - Validate tooltip visibility"],"updatePoint":{"line":19,"column":49},"line":19,"code":"  it(\"Validate tooltip hidden for disabled button\", function () {\n    // first disable button\n    cy.get(\".t--property-control-disabled .bp3-switch\").click({\n      force: true\n    });\n    cy.validateDisableWidget(widgetsPage.buttonWidget, commonlocators.disabledField); // hover on button and check tooltip should not show\n\n    cy.get(widgetsPage.buttonWidget).trigger(\"mouseover\");\n    cy.get(\".bp3-popover2-content\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Button_tooltip_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new Button Group","suites":["Button Group Widget Functionality"],"updatePoint":{"line":6,"column":26},"line":6,"code":"  it(\"Add new Button Group\", () => {\n    cy.wait(1000);\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"buttongroupwidget\", {\n      x: 300,\n      y: 300\n    });\n    cy.get(\".t--buttongroup-widget\").should(\"exist\");\n    cy.get(\".t--buttongroup-widget\").children().should(\"have.length\", 3);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":16,"column":31},"line":16,"code":"  it(\"Verify buttons alignments\", function () {\n    // check first button placement\n    cy.editColumn(\"groupButton1\"); // placement text\n\n    cy.get(\".t--property-control-placement .bp3-popover-target span[type='p1']\").should(\"have.text\", \"Center\"); // 1st btn\n\n    cy.get(\".t--buttongroup-widget > button > div\").should(\"have.css\", \"justify-content\", \"center\");\n    cy.get(\".t--buttongroup-widget .bp3-popover2-target > button > div\").should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update Placement and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":25,"column":52},"line":25,"code":"  it(\"Update Placement and Verify buttons alignments\", function () {\n    // check first button placement\n    cy.selectDropdownValue(\".t--property-control-placement .bp3-popover-target\", \"Between\"); // 1st btn\n\n    cy.get(\".t--buttongroup-widget > button > div\").should(\"have.css\", \"justify-content\", \"space-between\"); // update dropdown value\n\n    cy.selectDropdownValue(\".t--property-control-placement .bp3-popover-target\", \"Start\");\n    cy.get(\".t--buttongroup-widget > button > div\").should(\"have.css\", \"justify-content\", \"start\"); // other button style stay same\n\n    cy.get(\".t--buttongroup-widget .bp3-popover2-target > button > div\").should(\"have.css\", \"justify-content\", \"center\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update icon alignment and Verify buttons alignments","suites":["Button Group Widget Functionality"],"updatePoint":{"line":36,"column":57},"line":36,"code":"  it(\"Update icon alignment and Verify buttons alignments\", function () {\n    // align right\n    cy.get(\".t--property-control-iconalignment > .bp3-button-group.bp3-fill .bp3-button\").first().click();\n    cy.wait(200); // 1st btn\n\n    cy.get(\".t--buttongroup-widget > button > div\").eq(0).should(\"have.css\", \"flex-direction\", \"row\"); // align left\n\n    cy.get(\".t--property-control-iconalignment > .bp3-button-group.bp3-fill .bp3-button\").last().click();\n    cy.wait(200); // 1st btn\n\n    cy.get(\".t--buttongroup-widget > button > div\").eq(0).should(\"have.css\", \"flex-direction\", \"row-reverse\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/ButtonGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with button widget"],"updatePoint":{"line":19,"column":60},"line":19,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"buttonwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'lintError' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).eq(0).contains(\"ReferenceError: Nodata is not defined\");\n    cy.get(commonlocators.debugErrorMsg).eq(2).contains(\"ReferenceError: lintError is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/ButtonLintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Widget Functionality","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":19,"column":35},"line":19,"code":"  it(\"Checkbox Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n\n    cy.widgetText(\"checker\", formWidgetsPage.checkboxWidget, widgetsPage.checkboxInput);\n    /**\n     * @param{Text} Random Value\n     */\n\n    cy.testCodeMirror(this.data.checkbocInputName);\n    cy.get(widgetsPage.checkboxLabel).should(\"have.text\", \"value\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextCheckbox);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Label","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":46,"column":43},"line":46,"code":"  it(\"Checkbox Functionality To Check Label\", function () {\n    cy.get(publish.checkboxWidget + \" \" + \"label\").should(\"have.text\", this.data.checkbocInputName);\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Disabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":50,"column":53},"line":50,"code":"  it(\"Checkbox Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Enabled Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":57,"column":52},"line":57,"code":"  it(\"Checkbox Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Unchecked Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":64,"column":56},"line":64,"code":"  it(\"Checkbox Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check Visible Widget","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":71,"column":52},"line":71,"code":"  it(\"Checkbox Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Checkbox Group Widget Functionality","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":13,"column":44},"line":13,"code":"  it(\"1. Checkbox Group Widget Functionality\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n\n    cy.widgetText(\"checkboxgrouptest\", formWidgetsPage.checkboxGroupWidget, formWidgetsPage.checkboxGroupInput);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(0).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelCheckboxGroup).eq(1).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(formWidgetsPage.labelCheckboxGroup).should(\"not.have.value\", \"test4\");\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.wait(200);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangeRadioselect);\n    cy.get(formWidgetsPage.radioOnSelectionChangeDropdown).get(commonlocators.dropdownSelectButton).click({\n      force: true\n    }).type(\"2\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckboxGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Checkbox Group Functionality To Unchecked Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":57,"column":65},"line":57,"code":"  it(\"2. Checkbox Group Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckboxGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Checkbox Group Functionality To Check Visible Widget","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":65,"column":61},"line":65,"code":"  it(\"3. Checkbox Group Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.checkboxGroupWidget + \" \" + \"input\").eq(0).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckboxGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Checkbox Group Functionality To Button Text","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":71,"column":52},"line":71,"code":"  it(\"4. Checkbox Group Functionality To Button Text\", function () {\n    cy.get(publish.checkboxGroupWidget + \" \" + \"label\").eq(1).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckboxGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Group Functionality To alignment options","suites":["Checkbox Group Widget Functionality"],"updatePoint":{"line":75,"column":55},"line":75,"code":"  it(\"Checkbox Group Functionality To alignment options\", function () {\n    cy.openPropertyPane(\"checkboxgroupwidget\"); // check default value\n\n    cy.get(\".t--property-control-alignment\").should(\"exist\");\n    cy.get(\".t--property-control-alignment span[type='p1']\").should(\"have.text\", \"No selection.\");\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-cy^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"space-between\"); // change alignment\n\n    cy.get(\".t--property-control-alignment span[type='p1']\").click({\n      force: true\n    });\n    cy.wait(200);\n    cy.get(\".t--dropdown-option\").contains(\"Start\").click({\n      force: true\n    });\n    cy.wait(400);\n    cy.get(\".t--draggable-checkboxgroupwidget div[data-cy^='checkbox-group-container']\").should(\"have.css\", \"justify-content\", \"flex-start\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckboxGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":19,"column":32},"line":19,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'iron_man' is not defined.\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBoxLintErrorMultipleRowValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting warning validation","suites":["Linting warning validation with Checkbox widget"],"updatePoint":{"line":19,"column":32},"line":19,"code":"  it(\"Linting warning validation\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //click on the text within the section\n\n    cy.get(commonlocators.labelSection).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Missing semicolon.\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Expected an identifier and instead saw ')\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"Expected an assignment or function call and instead saw an expression\");\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/CheckBoxMultipleLintError_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding and default date","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":15,"column":73},"line":15,"code":"  it(\"Datepicker default date validation with js binding and default date\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{ moment().add(-1,'days').toISOString() }}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default time picker validation by Time precision","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":21,"column":65},"line":21,"code":"  it(\"Datepicker default time picker validation by Time precision\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision span[type='p1']\").should(\"have.text\", \"Minute\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 3);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Hide Time picker from Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":34,"column":38},"line":34,"code":"  it(\"Hide Time picker from Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"None\").click();\n    cy.wait(\"@updateLayout\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker not showing\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").should(\"not.exist\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"set second field in time picker for Datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":49,"column":52},"line":49,"code":"  it(\"set second field in time picker for Datepicker\", function () {\n    // default value in property pane\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-timeprecision .bp3-popover-target\").last().click();\n    cy.get(\".t--dropdown-option\").children().contains(\"Second\").click();\n    cy.wait(\"@updateLayout\"); // default in date picker\n\n    cy.get(\".t--widget-datepickerwidget2 input\").click();\n    cy.wait(200); // datepicker is open\n\n    cy.get(\".bp3-popover .bp3-datepicker\").should(\"exist\"); // checking timepicker\n\n    cy.get(\".bp3-datepicker-timepicker-wrapper .bp3-timepicker-input-row\").children().should(\"have.length\", 5);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":64,"column":42},"line":64,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Text2\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":72,"column":42},"line":72,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":79,"column":56},"line":79,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(10000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_Default_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":15,"column":56},"line":15,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment().toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment().subtract(10, 'days').toISOString()}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment().add(10, 'days').toISOString()}}\");\n    /*\n      cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      cy.PublishtheApp();\n      cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\n        \"contain.value\",\n        \"14/02/2021\",\n      );\n      */\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":36,"column":42},"line":36,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.formattedDate}}\");\n    cy.closePropertyPane();\n    cy.SearchEntityandOpen(\"Text2\");\n    cy.testJsontext(\"text\", \"{{DatePicker1.selectedDate}}\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text widgets binding with datepicker","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":44,"column":42},"line":44,"code":"  it(\"Text widgets binding with datepicker\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.selectDateFormat(\"YYYY-MM-DD\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"YYYY-MM-DD HH:mm\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"ISO 8601\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY\");\n    cy.assertDateFormat();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.closePropertyPane();\n    cy.assertDateFormat();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation message","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":58,"column":48},"line":58,"code":"  it(\"Datepicker default date validation message\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.testJsontext(\"defaultdate\", \"24-12-2021\");\n    cy.evaluateErrorMessage(\"Value does not match: ISO 8601 date string\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with strings","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":64,"column":53},"line":64,"code":"  it(\"Datepicker default date validation with strings\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(\".t--property-control-defaultdate .bp3-input\").type(\"2020-02-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-mindate .bp3-input\").type(\"2020-01-01\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click({\n      force: true\n    });\n    cy.get(\".t--property-control-maxdate .bp3-input\").type(\"2020-02-10\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker input value changes to work with selected date formats","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":81,"column":71},"line":81,"code":"  it(\"Datepicker input value changes to work with selected date formats\", function () {\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-mindate .bp3-input\").clear().type(\"2021-01-01\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-maxdate .bp3-input\").clear().type(\"2021-10-10\");\n    cy.closePropertyPane();\n    cy.openPropertyPane(\"datepickerwidget2\");\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.selectDateFormat(\"DD/MM/YYYY HH:mm\");\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", '{{moment(\"04/05/2021 05:25\", \"DD/MM/YYYY HH:mm\").toISOString()}}');\n    cy.get(\".t--draggable-datepickerwidget2 .bp3-input\").clear({\n      force: true\n    }).type(\"04/05/2021 06:25\");\n    cy.selectDateFormat(\"LLL\");\n    cy.wait(\"@updateLayout\");\n    cy.get(\".t--draggable-textwidget .bp3-ui-text\").first().should(\"have.text\", \"May 4, 2021 6:25 AM\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":100,"column":56},"line":100,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.PublishtheApp(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(10000);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_2_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Date Name validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":20,"column":37},"line":20,"code":"  it(\"DatePicker-Date Name validation\", function () {\n    // changing the date to today\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.SetDateToToday(); //changing the Button Name\n\n    cy.widgetText(this.data.Datepickername, formWidgetsPage.datepickerWidget, formWidgetsPage.datepickerWidget + \" \" + commonlocators.widgetNameTag); // change the date to next day\n\n    cy.get(formWidgetsPage.defaultDate).click();\n    /**\n     * setDate--> is a Command to select the date in the date picker\n     * @param1 --> its takes currentday+ <future day> eg: 1\n     * @param2 --> user date formate\n     */\n\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    const nextDay = dayjs().add(1, \"days\").format(\"DD/MM/YYYY\");\n    cy.log(nextDay);\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", nextDay);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", nextDay);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker-Clear date validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":41,"column":38},"line":41,"code":"  it(\"Datepicker-Clear date validation\", function () {\n    const today = dayjs().add(0, \"days\").format(\"DD/MM/YYYY\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.ClearDate();\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"\");\n  }); // it(\"Datepicker min/max date validation\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-check Visible field  validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":120,"column":48},"line":120,"code":"  it(\"DatePicker-check Visible field  validation\", function () {\n    // Check the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-uncheck Visible field validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":126,"column":49},"line":126,"code":"  it(\"DatePicker-uncheck Visible field validation\", function () {\n    // Check the visible checkbox\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Disable feild validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":132,"column":41},"line":132,"code":"  it(\"DatePicker-Disable feild validation\", function () {\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateDisableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Enable feild validation","suites":["DatePicker Widget Functionality"],"updatePoint":{"line":139,"column":40},"line":139,"code":"  it(\"DatePicker-Enable feild validation\", function () {\n    //UnCheck the Disabled checkbox\n    cy.UncheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.validateEnableWidget(formWidgetsPage.datepickerWidget, commonlocators.disabledField);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.datepickerWidget, commonlocators.disabledField);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Datepicker default date validation with js binding","suites":["DatePicker Widget Property pane tests with js bindings"],"updatePoint":{"line":18,"column":56},"line":18,"code":"  it(\"Datepicker default date validation with js binding\", function () {\n    cy.get(\".t--property-control-defaultdate .bp3-input\").clear();\n    cy.get(formWidgetsPage.toggleJsDefaultDate).click();\n    cy.testJsontext(\"defaultdate\", \"{{moment('14/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMinDate).click();\n    cy.testJsontext(\"mindate\", \"{{moment('12/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.toggleJsMaxDate).click();\n    cy.testJsontext(\"maxdate\", \"{{moment('17/02/2021', 'DD/MM/YYYY').format('DD/MM/YYYY')}}\");\n    cy.get(formWidgetsPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n    cy.PublishtheApp();\n    cy.get(publishPage.datepickerWidget + \" .bp3-input\").should(\"contain.value\", \"14/02/2021\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_Toggle_js_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":19,"column":60},"line":19,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput);\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    cy.togglebar(widgetsPage.defaultcheck);\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Date Widget with Reset widget being switch widget","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":28,"column":55},"line":28,"code":"  it(\"Date Widget with Reset widget being switch widget\", function () {\n    cy.SearchEntityandOpen(\"DatePicker1\");\n    cy.get(formWidgetsPage.defaultDate).click();\n    cy.SetDateToToday();\n    cy.setDate(1, \"ddd MMM DD YYYY\");\n    const nextDay = dayjs().format(\"DD/MM/YYYY\");\n    cy.log(nextDay);\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Reset widget\").click();\n    cy.get(widgetsPage.selectWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Toggler\").click();\n    cy.closePropertyPane();\n    cy.get(widgetsPage.switchWidget).click();\n    cy.get(widgetsPage.toastMsg).last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    });\n    cy.get(widgetsPage.switchWidgetInactive).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"DatePicker-Date change and validate switch widget status","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":50,"column":62},"line":50,"code":"  it(\"DatePicker-Date change and validate switch widget status\", function () {\n    cy.get(widgetsPage.datepickerInput).click({\n      force: true\n    });\n    cy.SetDateToToday();\n    cy.get(widgetsPage.switchWidgetActive).should(\"be.visible\");\n    cy.get(\".t--toast-action span\").last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DatePicker_With_Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Dropdown-Modal Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":21,"column":34},"line":21,"code":"  it(\"1. Dropdown-Modal Validation\", function () {\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.testJsontext(\"options\", JSON.stringify(data.input)); //creating the Modal and verify Modal name\n\n    cy.createModal(\"Modal\", this.data.ModalName);\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Dropdown-Call-Api Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":37,"column":37},"line":37,"code":"  it(\"2. Dropdown-Call-Api Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating the api\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"dropdownApi\");\n    cy.log(\"Creation of buttonApi Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, \"users?page=4&size=3\");\n    cy.SaveAndRunAPI(); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(formWidgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.SearchEntityandOpen(\"Dropdown1\"); // Adding the api in the onClickAction of the button widget.\n\n    cy.addAPIFromLightningMenu(\"dropdownApi\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onoptionchange\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 3\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":65,"column":39},"line":65,"code":"  it(\"3. Dropdown-Call-Query Validation\", function () {\n    //creating a query and calling it from the onOptionChangeAction of the Dropdown widget.\n    // Creating a mock query\n    // cy.CreateMockQuery(\"Query1\");\n    let postgresDatasourceName;\n    cy.startRoutesForDatasource();\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n      cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.fillPostgresDatasourceForm();\n      cy.saveDatasource();\n      cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    });\n    cy.CreateMockQuery(\"Query1\"); // Going to HomePage where the button widget is located and opeing it's property pane.\n\n    cy.get(formWidgetsPage.NavHomePage).click({\n      force: true\n    });\n    cy.reload();\n    cy.openPropertyPane(\"dropdownwidget\"); // Adding the query in the onClickAction of the button widget.\n\n    cy.addQueryFromLightningMenu(\"Query1\"); // Filling the messages for success/failure in the onClickAction of the button widget.\n\n    cy.onClickActions(\"Success\", \"Error\", \"onoptionchange\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Toggle JS - Dropdown-Call-Query Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":105,"column":51},"line":105,"code":"  it(\"4. Toggle JS - Dropdown-Call-Query Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.get(formWidgetsPage.toggleOnOptionChange).click({\n      force: true\n    });\n    cy.testJsontext(\"onoptionchange\", \"{{Query1.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 2\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Toggle JS - Dropdown-CallAnApi Validation","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":123,"column":50},"line":123,"code":"  it(\"5. Toggle JS - Dropdown-CallAnApi Validation\", function () {\n    //creating an api and calling it from the onOptionChangeAction of the button widget.\n    // calling the existing api\n    cy.SearchEntityandOpen(\"Dropdown1\");\n    cy.testJsontext(\"onoptionchange\", \"{{dropdownApi.run(() => showAlert('Success','success'), () => showAlert('Error','error'))}}\");\n    cy.PublishtheApp(); // Changing the option to verify the success message\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 1\").click({\n      force: true\n    });\n    cy.get(formWidgetsPage.apiCallToast).should(\"have.text\", \"Success\");\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"dropdownwidget\"); // Click on onOptionChange JS button\n\n    cy.get(formWidgetsPage.toggleOnOptionChange).click({\n      force: true\n    });\n    cy.get(commonlocators.dropdownSelectButton).eq(0).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"No action\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Dropdown Widget Functionality to Verify On Option Change Action","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":146,"column":72},"line":146,"code":"  it(\"6. Dropdown Widget Functionality to Verify On Option Change Action\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Dropdown1\"); // Dropdown On Option Change\n\n    cy.addAction(\"Option Changed\");\n    cy.PublishtheApp(); // Change the Option\n\n    cy.get(formWidgetsPage.selectWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(commonlocators.singleSelectMenuItem).contains(\"Option 3\").click({\n      force: true\n    }); // Verify Option is changed\n\n    cy.validateToastMessage(\"Option Changed\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Dropdown_onOptionChange_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"check if the dropdown value does not change on navigation","suites":["Dropdown Widget Check value does not reset on navigation"],"updatePoint":{"line":9,"column":63},"line":9,"code":"  it(\"check if the dropdown value does not change on navigation\", function () {\n    //Change the value of drop down;\n    cy.get(\".t--draggable-dropdownwidget .bp3-popover-target\").first().click();\n    cy.selectOnClickOption(\"Red\");\n    cy.wait(200); //Navigate\n\n    cy.NavigateToAPI_Panel(); //Again navigate back to the widget\n\n    cy.SearchEntityandOpen(\"Select3\"); //Check for the select value again\n\n    cy.get(`.t--draggable-dropdownwidget .bp3-popover-target ${commonlocators.menuSelection}`).first().should(\"have.text\", \"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/DropDownWidget_value_reset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create API to be used in Filepicker","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":11,"column":41},"line":11,"code":"  it(\"Create API to be used in Filepicker\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(this.data.paginationUrl, this.data.paginationParam);\n    cy.SaveAndRunAPI();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"FilePicker Widget Functionality","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":20,"column":37},"line":20,"code":"  it(\"FilePicker Widget Functionality\", function () {\n    cy.SearchEntityandOpen(\"FilePicker1\"); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000); //Checking the edit props for FilePicker and also the properties of FilePicker widget\n\n    cy.testCodeMirror(\"Upload Files\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It checks the loading state of filepicker on call the action","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":27,"column":66},"line":27,"code":"  it(\"It checks the loading state of filepicker on call the action\", function () {\n    cy.SearchEntityandOpen(\"FilePicker1\");\n    const fixturePath = \"testFile.mov\";\n    cy.addAPIFromLightningMenu(\"FirstAPI\");\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(fixturePath);\n    cy.get(commonlocators.filePickerUploadButton).click();\n    cy.get(\".bp3-spinner\").should(\"have.length\", 1); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"It checks the deletion of filepicker works as expected","suites":["FilePicker Widget Functionality"],"updatePoint":{"line":39,"column":60},"line":39,"code":"  it(\"It checks the deletion of filepicker works as expected\", function () {\n    cy.get(commonlocators.filePickerButton).click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile.mov\");\n    cy.get(commonlocators.filePickerUploadButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n    cy.get(commonlocators.filePickerButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(200);\n    cy.get(\"button.uppy-Dashboard-Item-action--remove\").click();\n    cy.get(\"button.uppy-Dashboard-browse\").click();\n    cy.get(commonlocators.filePickerInput).first().attachFile(\"testFile2.mov\");\n    cy.get(commonlocators.filePickerUploadButton).click(); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(\"button\").contains(\"1 files selected\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FilePicker_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To Check required toggle for form","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":17,"column":62},"line":17,"code":"  it(\"Checkbox Functionality To Check required toggle for form\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.togglebar(commonlocators.requiredjs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget).click();\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"have.class\", \"bp3-disabled\");\n    cy.get(publish.checkboxWidget).click();\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").should(\"not.have.attr\", \"disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checkbox Functionality To swap label placement of  checkbox","suites":["Checkbox Widget Functionality"],"updatePoint":{"line":27,"column":65},"line":27,"code":"  it(\"Checkbox Functionality To swap label placement of  checkbox\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"exist\");\n    cy.get(commonlocators.optionalignment).last().click();\n    cy.dropdownDynamicUpdated(\"Right\");\n    cy.PublishtheApp();\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.checkboxWidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Form_With_CheckBox_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Resets the form ","suites":["Form reset functionality"],"updatePoint":{"line":9,"column":22},"line":9,"code":"  it(\"Resets the form \", () => {\n    // Select a row and verify\n    cy.get(\".tr\").eq(2).click().should(\"have.class\", \"selected-row\"); // Select three options\n\n    cy.get(\".t--draggable-multiselectwidget\").click({\n      force: true\n    });\n    cy.get(\".t--draggable-multiselectwidget\").type(\"Option\");\n    cy.dropdownMultiSelectDynamic(\"Option 1\");\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n    cy.dropdownMultiSelectDynamic(\"Option 3\"); // Verify input should include the name \"lindsay.ferguson@reqres.in\"\n\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", \"lindsay.ferguson@reqres.in\"); // Reset the form\n\n    cy.get(widgetsPage.formButtonWidget).contains(\"Reset\").click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // verify table should not have selected row\n\n    cy.get(\".tr\").eq(2).should(\"not.have.class\", \"selected-row\"); // Verify dropdown does not have selected values\n\n    cy.get(\".t-draggable-dropdownwidget .bp3-tag-input-values .bp3-tag\").should($span => {\n      expect($span).to.have.length(0);\n    }); // Verify input should not include \"lindsay.ferguson@reqres.in\"\n\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"not.contain\", \"lindsay.ferguson@reqres.in\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormReset_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Defult Form text,  Reset and Close button Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":19,"column":58},"line":19,"code":"  it(\"Defult Form text,  Reset and Close button Validation\", function () {\n    cy.get(widgetsPage.textWidget).should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Submit\").scrollIntoView().should(\"be.visible\");\n    cy.get(widgetsPage.formButtonWidget).contains(\"Reset\").scrollIntoView().should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Multiple widgets in Form","suites":["Form Widget Functionality"],"updatePoint":{"line":24,"column":34},"line":24,"code":"  it(\"Add Multiple widgets in Form\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.get(commonlocators.entityExplorersearch).should(\"be.visible\");\n    cy.dragAndDropToWidget(\"multiselectwidget\", \"formwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.dragAndDropToWidget(\"inputwidget\", \"formwidget\", {\n      x: 50,\n      y: 200\n    });\n    cy.get(formWidgetsPage.multiselectWidget).should(\"be.visible\");\n    cy.get(widgetsPage.inputWidget).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form_Widget Minimize and maximize General Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":39,"column":58},"line":39,"code":"  it(\"Form_Widget Minimize and maximize General Validation\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"not.be.visible\");\n    cy.get(commonlocators.generalChevran).click({\n      force: true\n    });\n    cy.get(commonlocators.generalSection).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Rename Form widget from Entity Explorer","suites":["Form Widget Functionality"],"updatePoint":{"line":51,"column":45},"line":51,"code":"  it(\"Rename Form widget from Entity Explorer\", function () {\n    cy.GlobalSearchEntity(\"Form1\");\n    cy.RenameEntity(\"Form\");\n    cy.wait(1000);\n    cy.get(\".t--entity\").should(\"contain\", \"Form\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality","suites":["Form Widget Functionality"],"updatePoint":{"line":57,"column":31},"line":57,"code":"  it(\"Form Widget Functionality\", function () {// cy.openPropertyPane(\"formwidget\");\n    // /**\n    //  * @param{Text} Random Text\n    //  * @param{FormWidget}Mouseover\n    //  * @param{FormPre Css} Assertion\n    //  */\n    // // Change the form name\n    // cy.widgetText(\n    //   \"FormTest\",\n    //   formWidgetsPage.formWidget,\n    //   formWidgetsPage.formInner,\n    // );\n    // /**\n    //  * @param{Text} Random Colour\n    //  */\n    // // Change the form  background color\n    // cy.get(widgetsPage.backgroundcolorPicker)\n    //   .first()\n    //   .click({ force: true });\n    // cy.xpath(widgetsPage.greenColor).click();\n    // // Verify the form background color\n    // cy.get(formWidgetsPage.formD)\n    //   .should(\"have.css\", \"background-color\")\n    //   .and(\"eq\", \"rgb(128, 128, 128)\");\n    // /**\n    //  * @param{toggleButton Css} Assert to be checked\n    //  */\n    // // Check the Scroll and verify\n    // cy.togglebar(commonlocators.scrollView);\n    // cy.get(formWidgetsPage.formD)\n    //   .scrollTo(\"bottom\")\n    //   .should(\"be.visible\");\n    // // Close the form propert pane\n    // cy.get(commonlocators.editPropCrossButton).click({ force: true });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Verify The Colour","suites":["Form Widget Functionality"],"updatePoint":{"line":92,"column":52},"line":92,"code":"  it(\"Form Widget Functionality To Verify The Colour\", function () {\n    cy.PublishtheApp();\n    cy.get(formWidgetsPage.formD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(128, 128, 128)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Unchecked Visible Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":96,"column":59},"line":96,"code":"  it(\"Form Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"formwidget\"); // Uncheck the visble JS\n\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the unchecked visible JS\n\n    cy.get(publish.formWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form Widget Functionality To Check Visible Widget","suites":["Form Widget Functionality"],"updatePoint":{"line":105,"column":55},"line":105,"code":"  it(\"Form Widget Functionality To Check Visible Widget\", function () {\n    // Open property pone\n    cy.openPropertyPane(\"formwidget\"); // Check the visible JS\n\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp(); // Verify the Checked Visible JS\n\n    cy.get(publish.formWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Form-Unckeck Visible field Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":115,"column":55},"line":115,"code":"  it(\"Toggle JS - Form-Unckeck Visible field Validation\", function () {\n    cy.openPropertyPane(\"formwidget\"); //Uncheck the disabled checkbox using JS and validate\n\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - Form-Check Visible field Validation","suites":["Form Widget Functionality"],"updatePoint":{"line":125,"column":53},"line":125,"code":"  it(\"Toggle JS - Form-Check Visible field Validation\", function () {\n    cy.openPropertyPane(\"formwidget\"); //Check the disabled checkbox using JS and Validate\n\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(publish.formWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form-Copy Verification","suites":["Form Widget Functionality"],"updatePoint":{"line":132,"column":28},"line":132,"code":"  it(\"Form-Copy Verification\", function () {\n    cy.openPropertyPane(\"formwidget\");\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Form and verify all properties\n\n    cy.copyWidget(\"formwidget\", widgetsPage.formWidget);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality check with success message","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":17,"column":60},"line":17,"code":"  it(\"Switch Widget Functionality check with success message\", function () {\n    //Open switch widget\n    cy.openPropertyPane(\"switchwidget\"); // Change name of switch widget\n\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput); // Change the widget label name\n\n    cy.testCodeMirror(this.data.switchInputName); // Verify widget label name is verified\n\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\"); // Check the toggler button\n\n    cy.togglebar(widgetsPage.defaultcheck); // Type in message field and verify\n\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Form reset button valdiation with switch widget","suites":["Switch Widget within Form widget Functionality"],"updatePoint":{"line":32,"column":53},"line":32,"code":"  it(\"Form reset button valdiation with switch widget\", function () {\n    // Open form button\n    cy.SearchEntityandOpen(\"FormButton2\"); // Click on reset widget action\n\n    cy.get(widgetsPage.actionSelect).click();\n    cy.get(commonlocators.chooseAction).children().contains(\"Reset widget\").click(); // click on toggler from actions\n\n    cy.get(widgetsPage.selectWidget).click({\n      force: true\n    });\n    cy.get(commonlocators.chooseAction).children().contains(\"Toggler\").click();\n    cy.closePropertyPane(); // Uncheck the switch\n\n    cy.get(widgetsPage.switchWidget).click(); // Verify the message\n\n    cy.get(widgetsPage.toastMsg).last().invoke(\"text\").then(text => {\n      const toasttext = text;\n      cy.log(toasttext);\n      expect(text.trim()).to.equal(toasttext.trim());\n    }); // Verify Unchecked switch is visible\n\n    cy.get(widgetsPage.switchWidgetInactive).should(\"be.visible\"); // Click on reset button\n\n    cy.get(\"Button:contains('Reset')\").click({\n      force: true\n    }); // Verify switch is on and visible\n\n    cy.get(widgetsPage.switchWidgetActive).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/FormWithSwitch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Text Input maxChar shows error if defaultText longer","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":11,"column":58},"line":11,"code":"  it(\"Text Input maxChar shows error if defaultText longer\", () => {\n    cy.get(widgetsPage.innertext).click();\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Default Text length must be less than Max Chars allowed\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Number Input will not show error for maxChar validation","suites":["Input Widget Max Char Functionality"],"updatePoint":{"line":17,"column":61},"line":17,"code":"  it(\"Number Input will not show error for maxChar validation\", () => {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.selectDropdownValue(commonlocators.dataType, \"Number\");\n    cy.get(\".bp3-popover-content\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_MaxChar_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality","suites":["Input Widget Functionality"],"updatePoint":{"line":31,"column":32},"line":31,"code":"  it(\"Input Widget Functionality\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{InputWidget}Mouseover\n     * @param{InputPre Css} Assertion\n     */\n\n    cy.widgetText(\"day\", widgetsPage.inputWidget, widgetsPage.inputval);\n    cy.get(widgetsPage.datatype).last().click({\n      force: true\n    }).children().contains(\"Text\").click({\n      force: true\n    });\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).type(this.data.para);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.para); //cy.openPropertyPane(\"inputwidget\");\n\n    cy.testJsontext(\"defaulttext\", this.data.defaultdata);\n    cy.get(widgetsPage.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.testJsontext(\"placeholder\", this.data.placeholder);\n    /**\n     * @param{Widget} Widget InnerCss\n     */\n\n    cy.get(widgetsPage.innertext).invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.testJsontext(\"regex\", this.data.regex);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextInput, widgetsPage.inputOnTextChange);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Validate Default Text and Placeholder","suites":["Input Widget Functionality"],"updatePoint":{"line":66,"column":73},"line":66,"code":"  it(\"Input Widget Functionality To Validate Default Text and Placeholder\", function () {\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"value\").should(\"contain\", this.data.defaultdata);\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"placeholder\").should(\"contain\", this.data.placeholder);\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"isSpellCheck: true","suites":["Input Widget Functionality"],"updatePoint":{"line":73,"column":24},"line":73,"code":"  it(\"isSpellCheck: true\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebar(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"true\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"isSpellCheck: false","suites":["Input Widget Functionality"],"updatePoint":{"line":82,"column":25},"line":82,"code":"  it(\"isSpellCheck: false\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebarDisable(commonlocators.spellCheck + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").invoke(\"attr\", \"spellcheck\").should(\"eq\", \"false\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Check Disabled Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":91,"column":57},"line":91,"code":"  it(\"Input Widget Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Widget Functionality To Check Enabled Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":100,"column":56},"line":100,"code":"  it(\"Input Widget Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To Unchecked Visible Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":109,"column":53},"line":109,"code":"  it(\"Input Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To Check Visible Widget","suites":["Input Widget Functionality"],"updatePoint":{"line":118,"column":49},"line":118,"code":"  it(\"Input Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.inputWidget + \" \" + \"input\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To check number input type with custom regex","suites":["Input Widget Functionality"],"updatePoint":{"line":127,"column":70},"line":127,"code":"  it(\"Input Functionality To check number input type with custom regex\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.get(commonlocators.dataType).last().click({\n      force: true\n    });\n    /*cy.get(\n      `${commonlocators.dataType} .single-select:contains(\"Number\")`,\n    ).click();*/\n\n    cy.get(\".t--dropdown-option\").children().contains(\"Number\").click({\n      force: true\n    });\n    cy.testJsontext(\"regex\", \"^s*(?=.*[1-9])d*(?:.d{1,2})?s*$\");\n    cy.get(widgetsPage.innertext).click().clear().type(\"1.255\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(\"Invalid input\");\n    });\n    cy.get(widgetsPage.innertext).click({\n      force: true\n    }).clear();\n    cy.closePropertyPane(\"inputwidget\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To check currency input type","suites":["Input Widget Functionality"],"updatePoint":{"line":149,"column":54},"line":149,"code":"  it(\"Input Functionality To check currency input type\", function () {\n    cy.openPropertyPane(\"inputwidget\");\n    cy.testJsontext(\"regex\", \"\");\n    cy.get(widgetsPage.innertext).click().clear().type(\"13242.2\");\n    cy.selectDropdownValue(commonlocators.dataType, \"Currency\");\n    cy.selectDropdownValue(commonlocators.decimalType, \"1\");\n    cy.togglebar(commonlocators.allowCurrencyChange);\n    cy.selectDropdownValue(commonlocators.currencyType, \"EUR - Euro\");\n    cy.get(widgetsPage.innertext).click().focus({\n      force: true\n    }).blur();\n    cy.wait(1000);\n    cy.get(commonlocators.inputCurrencyChangeType).invoke(\"text\").then(text => {\n      expect(text).to.equal(\"€\");\n    });\n    cy.closePropertyPane(\"inputwidget\");\n    cy.get(widgetsPage.innertext).invoke(\"attr\", \"value\").then(text => {\n      expect(text).to.equal(\"13,242.2\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input Functionality To check phone number input type","suites":["Input Widget Functionality"],"updatePoint":{"line":169,"column":58},"line":169,"code":"  it(\"Input Functionality To check phone number input type\", function () {\n    cy.get(widgetsPage.innertext).click().clear();\n    cy.openPropertyPane(\"inputwidget\");\n    cy.wait(1000);\n    cy.selectDropdownValue(commonlocators.dataType, \"Phone Number\");\n    cy.get(commonlocators.inputCountryCodeChangeType).invoke(\"text\").then(text => {\n      expect(text).to.equal(\"🇺🇸+1\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input label wrapper do not show if lable and tooltip is empty","suites":["Input Widget Functionality"],"updatePoint":{"line":178,"column":67},"line":178,"code":"  it(\"Input label wrapper do not show if lable and tooltip is empty\", () => {\n    cy.get(\".t--input-label-wrapper\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input label renders if label prop is not empty","suites":["Input Widget Functionality"],"updatePoint":{"line":181,"column":52},"line":181,"code":"  it(\"Input label renders if label prop is not empty\", () => {\n    // enter label in property pan\n    cy.get(widgetsPage.inputLabelControl).type(\"Label1\"); // test if label shows up with correct text\n\n    cy.get(\".t--input-widget-label\").contains(\"Label1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input tooltip renders if tooltip prop is not empty","suites":["Input Widget Functionality"],"updatePoint":{"line":187,"column":56},"line":187,"code":"  it(\"Input tooltip renders if tooltip prop is not empty\", () => {\n    // enter tooltip in property pan\n    cy.get(widgetsPage.inputTooltipControl).type(\"Helpfull text for input\"); // tooltip help icon shows\n\n    cy.get(\".t--input-widget-tooltip\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input icon shows on icon select","suites":["Input Widget Functionality"],"updatePoint":{"line":193,"column":37},"line":193,"code":"  it(\"Input icon shows on icon select\", () => {\n    cy.selectDropdownValue(commonlocators.dataType, \"Text\");\n    cy.get(\".t--property-control-icon .bp3-icon-caret-down\").click({\n      force: true\n    });\n    cy.get(\".bp3-icon-add\").first().click({\n      force: true\n    });\n    cy.get(\".bp3-input-group .bp3-icon-add\").should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Input value of number type should reflect the default text value 0","suites":["Input Widget Functionality"],"updatePoint":{"line":203,"column":72},"line":203,"code":"  it(\"Input value of number type should reflect the default text value 0\", () => {\n    cy.selectDropdownValue(commonlocators.dataType, \"Number\");\n    /*cy.get(widgetsPage.defaultInput)\n      .click({ force: true })\n      .type(\"0\");*/\n\n    cy.testJsontext(\"defaulttext\", \"0\");\n    cy.closePropertyPane(\"inputwidget\");\n    cy.get(widgetsPage.innertext).invoke(\"val\").then(text => {\n      expect(text).to.equal(\"0\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Input_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selects value with enter in default value","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":13,"column":47},"line":13,"code":"  it(\"Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.testJsontext(\"defaultvalue\", \"RED\\n\");\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-item-content\").first().should(\"have.text\", \"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":" To Validate Options","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":18,"column":26},"line":18,"code":"  it(\" To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectInput).first().type(\"light\");\n    cy.treeMultiSelectDropdown(\"Light Blue\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Unchecked Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":25,"column":33},"line":25,"code":"  it(\"To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":" To Check Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":31,"column":30},"line":31,"code":"  it(\" To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselecttreewidget + \" \" + \".rc-tree-select-multiple\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Multi_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selects value with invalid default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":19,"column":46},"line":19,"code":"  it(\"Selects value with invalid default value\", () => {\n    cy.openPropertyPane(\"multiselectwidget\");\n    cy.testJsontext(\"options\", JSON.stringify(data.input));\n    cy.testJsontext(\"defaultvalue\", \"{{ undefined }}\");\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown\").contains(\"Option 3\").click({\n      force: true\n    });\n    cy.wait(2000); //Validating option inside multiselect widget\n\n    cy.get(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selects value with enter in default value","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":35,"column":47},"line":35,"code":"  it(\"Selects value with enter in default value\", () => {\n    cy.testJsontext(\"defaultvalue\", \"3\\n\");\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-selection-item-content\").first().should(\"have.text\", \"Option 3\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Validate Options","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":39,"column":48},"line":39,"code":"  it(\"Dropdown Functionality To Validate Options\", function () {\n    cy.get(formWidgetsPage.mulitiselectInput).click({\n      force: true\n    });\n    cy.get(formWidgetsPage.mulitiselectInput).type(\"Option\");\n    cy.dropdownMultiSelectDynamic(\"Option 2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Unchecked Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":46,"column":56},"line":46,"code":"  it(\"Dropdown Functionality To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidget + \" \" + \".rc-select-selector\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Check Visible Widget","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":52,"column":52},"line":52,"code":"  it(\"Dropdown Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"multiselectwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.multiselectwidget + \" \" + \".rc-select-selector\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Dropdown Functionality To Check Allow select all option","suites":["MultiSelect Widget Functionality"],"updatePoint":{"line":59,"column":61},"line":59,"code":"  it(\"Dropdown Functionality To Check Allow select all option\", function () {\n    // select all option is not enable\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-selection-item-content\").first().should(\"not.have.text\", \"Select all\"); // enable select all option from property pane\n\n    cy.openPropertyPane(\"multiselectwidget\");\n    cy.togglebar(commonlocators.allowSelectAllCheckbox); // press select all option\n\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown\").contains(\"Select all\").click({\n      force: true\n    });\n    cy.wait(2000); //Validating option inside multiselect widget\n\n    cy.get(\".rc-select-selection-item-content\").eq(0).should(\"have.text\", \"Option 1\");\n    cy.get(\".rc-select-selection-item-content\").eq(1).should(\"have.text\", \"Option 2\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/MultiSelect_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Widget Functionality","suites":["Radio Widget Functionality"],"updatePoint":{"line":15,"column":32},"line":15,"code":"  it(\"Radio Widget Functionality\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n\n    cy.widgetText(\"radiotest\", formWidgetsPage.radioWidget, formWidgetsPage.radioInput);\n    /**\n     * @param{IndexValue} Provide Input Index Value\n     * @param{Text} Index Text Value.\n     *\n     */\n\n    cy.radioInput(0, this.data.radio1);\n    cy.get(formWidgetsPage.labelradio).eq(0).should(\"have.text\", \"test1\");\n    cy.radioInput(1, \"1\");\n    cy.radioInput(2, this.data.radio2);\n    cy.get(formWidgetsPage.labelradio).eq(1).should(\"have.text\", this.data.radio2);\n    cy.radioInput(3, \"2\");\n    cy.get(formWidgetsPage.radioAddButton).click({\n      force: true\n    });\n    cy.radioInput(4, this.data.radio4);\n    cy.get(formWidgetsPage.deleteradiovalue).eq(2).click({\n      force: true\n    });\n    cy.get(formWidgetsPage.labelradio).should(\"not.have.value\", \"test4\");\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangeRadioselect);\n    cy.get(formWidgetsPage.defaultSelect);\n    cy.get(formWidgetsPage.radioOnSelectionChangeDropdown).get(commonlocators.dropdownSelectButton).click({\n      force: true\n    }).type(\"2\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Unchecked Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":55,"column":53},"line":55,"code":"  it(\"Radio Functionality To Unchecked Visible Widget\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Check Visible Widget","suites":["Radio Widget Functionality"],"updatePoint":{"line":63,"column":49},"line":63,"code":"  it(\"Radio Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"radiogroupwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.radioWidget + \" \" + \"input\").should(\"be.checked\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Radio Functionality To Button Text","suites":["Radio Widget Functionality"],"updatePoint":{"line":69,"column":40},"line":69,"code":"  it(\"Radio Functionality To Button Text\", function () {\n    cy.get(publish.radioWidget + \" \" + \"label\").eq(1).should(\"have.text\", \"test2\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Radio_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Edit Text area with HTML body functionality","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":16,"column":64},"line":16,"code":"  it(\"RichTextEditor-Edit Text area with HTML body functionality\", function () {\n    //changing the Text Name\n    cy.widgetText(this.data.RichTextEditorName, formWidgetsPage.richTextEditorWidget, formWidgetsPage.richTextEditorWidget + \" \" + commonlocators.widgetNameTag); //Edit the text area with Html\n\n    cy.testJsontext(\"defaulttext\", this.data.HtmlText); //Validate Html\n\n    cy.validateHTMLText(formWidgetsPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n    cy.PublishtheApp();\n    cy.validateHTMLText(publishPage.richTextEditorWidget, \"h1\", \"This is a Heading\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Enable Validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":26,"column":38},"line":26,"code":"  it(\"RichTextEditor-Enable Validation\", function () {\n    //Uncheck the Disabled checkbox\n    cy.UncheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateEnableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateEnableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-Disable Validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":33,"column":39},"line":33,"code":"  it(\"RichTextEditor-Disable Validation\", function () {\n    //Check the Disabled checkbox\n    cy.CheckWidgetProperties(formWidgetsPage.disableJs);\n    cy.validateDisableWidget(formWidgetsPage.richTextEditorWidget, commonlocators.disabledBtn);\n    cy.PublishtheApp();\n    cy.validateDisableWidget(publishPage.richTextEditorWidget, commonlocators.disabledBtn);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-check Visible field  validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":40,"column":52},"line":40,"code":"  it(\"RichTextEditor-check Visible field  validation\", function () {\n    // Uncheck the visible checkbox\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-uncheck Visible field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":46,"column":53},"line":46,"code":"  it(\"RichTextEditor-uncheck Visible field validation\", function () {\n    // Check the visible checkbox\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publishPage.richTextEditorWidget).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-check Hide toolbar field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":52,"column":56},"line":52,"code":"  it(\"RichTextEditor-check Hide toolbar field validation\", function () {\n    // Check the Hide toolbar checkbox\n    cy.CheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarHidden(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarHidden(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"RichTextEditor-uncheck Hide toolbar field validation","suites":["RichTextEditor Widget Functionality"],"updatePoint":{"line":59,"column":58},"line":59,"code":"  it(\"RichTextEditor-uncheck Hide toolbar field validation\", function () {\n    // Uncheck the Hide toolbar checkbox\n    cy.UncheckWidgetProperties(commonlocators.hideToolbarCheckbox);\n    cy.validateToolbarVisible(formWidgetsPage.richTextEditorWidget, commonlocators.rteToolbar);\n    cy.PublishtheApp();\n    cy.validateToolbarVisible(publishPage.richTextEditorWidget, commonlocators.rteToolbar);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/RichTextEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Multi Select Tree Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":9,"column":57},"line":9,"code":"  it(\"To Check empty options for Multi Select Tree Widget\", () => {\n    cy.get(formWidgetsPage.treeSelectInput).first().click({\n      force: true\n    });\n    cy.get(\".rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Single Select Tree Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":15,"column":58},"line":15,"code":"  it(\"To Check empty options for Single Select Tree Widget\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    }).get(\".single-tree-select-dropdown .rc-tree-select-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Check empty options for Multi Select Widget","suites":["MultiSelect, Tree Select and Multi Tree Select Widget Empty Options Functionality"],"updatePoint":{"line":20,"column":52},"line":20,"code":"  it(\"To Check empty options for Multi Select Widget\", () => {\n    cy.get(formWidgetsPage.mulitiselectInput).click({\n      force: true\n    });\n    cy.get(\".rc-select-item-empty\").should(\"have.text\", \"No Results Found\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Select_TreeSelect_MultiSelect_Empty_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Selects value with enter in default value","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":13,"column":47},"line":13,"code":"  it(\"Selects value with enter in default value\", () => {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.testJsontext(\"defaultvalue\", \"RED\\n\");\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-item\").first().should(\"have.text\", \"Red\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":" To Validate Options","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":18,"column":26},"line":18,"code":"  it(\" To Validate Options\", function () {\n    cy.get(formWidgetsPage.treeSelectInput).last().click({\n      force: true\n    });\n    cy.get(formWidgetsPage.treeSelectInput).last().type(\"light\");\n    cy.treeSelectDropdown(\"Light Blue\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"To Unchecked Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":25,"column":33},"line":25,"code":"  it(\"To Unchecked Visible Widget\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":" To Check Visible Widget","suites":["MultiSelectTree Widget Functionality"],"updatePoint":{"line":31,"column":30},"line":31,"code":"  it(\" To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"singleselecttreewidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.singleselecttreewidget + \" \" + \".rc-tree-select-single\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Single_Select_Tree_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Widget Functionality","suites":["Switch Widget Functionality"],"updatePoint":{"line":19,"column":33},"line":19,"code":"  it(\"Switch Widget Functionality\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{SwitchWidget}Mouseover\n     * @param{SwitchPre Css} Assertion\n     */\n\n    cy.widgetText(\"Toggler\", formWidgetsPage.switchWidget, widgetsPage.switchInput);\n    /**\n     * @param{Text} Random Value\n     */\n\n    cy.testCodeMirror(this.data.switchInputName);\n    cy.get(widgetsPage.switchLabel).should(\"have.text\", \"Switch1\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.defaultcheck);\n    /**\n     * @param{Show Alert} Css for InputChange\n     */\n\n    cy.getAlert(commonlocators.optionchangetextSwitch);\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Switch Label","suites":["Switch Widget Functionality"],"updatePoint":{"line":46,"column":42},"line":46,"code":"  it(\"Switch Functionality To Switch Label\", function () {\n    cy.get(publish.switchwidget + \" \" + \"label\").should(\"have.text\", this.data.switchInputName);\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Disabled Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":50,"column":51},"line":50,"code":"  it(\"Switch Functionality To Check Disabled Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.disabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Enabled Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":57,"column":50},"line":57,"code":"  it(\"Switch Functionality To Check Enabled Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.Disablejs + \" \" + \"input\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.enabled\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Unchecked Visible Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":64,"column":54},"line":64,"code":"  it(\"Switch Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To Check Visible Widget","suites":["Switch Widget Functionality"],"updatePoint":{"line":71,"column":50},"line":71,"code":"  it(\"Switch Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \"input\").should(\"be.checked\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Switch Functionality To swap label placement of  switch","suites":["Switch Widget Functionality"],"updatePoint":{"line":78,"column":61},"line":78,"code":"  it(\"Switch Functionality To swap label placement of  switch\", function () {\n    cy.openPropertyPane(\"switchwidget\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"not.exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"exist\");\n    cy.get(commonlocators.optionalignment).last().click();\n    cy.dropdownDynamicUpdated(\"Right\");\n    cy.PublishtheApp();\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-right\").should(\"exist\");\n    cy.get(publish.switchwidget + \" \" + \".bp3-align-left\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Switch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Widget name changes","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":21,"column":25},"line":21,"code":"  it(\"Widget name changes\", function () {\n    /**\n     * @param{Text} Random Text\n     * @param{RadioWidget}Mouseover\n     * @param{RadioPre Css} Assertion\n     */\n    cy.widgetText(\"switchgrouptest\", formWidgetsPage.switchGroupWidget, formWidgetsPage.switchGroupInput);\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: options","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":30,"column":23},"line":30,"code":"  it(\"Property: options\", function () {\n    // Add a new option\n    const optionToAdd = {\n      label: \"Yellow\",\n      value: \"YELLOW\"\n    };\n    cy.get(\".t--property-control-options .CodeMirror textarea\").first().focus({\n      force: true\n    }).type(\"{ctrl}{end}\", {\n      force: true\n    }).type(\"{ctrl}{uparrow}\", {\n      force: true\n    }).type(\"{end}\", {\n      force: true\n    }).type(\",{enter}\").type(JSON.stringify(optionToAdd), {\n      parseSpecialCharSequences: false\n    }); // Assert\n\n    cy.get(formWidgetsPage.labelSwitchGroup).should(\"have.length\", 4).eq(3).contains(\"Yellow\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: defaultSelectedValues","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":51,"column":37},"line":51,"code":"  it(\"Property: defaultSelectedValues\", function () {\n    // Add a new option\n    const valueToAdd = \"GREEN\";\n    cy.get(\".t--property-control-defaultselectedvalues .CodeMirror textarea\").first().focus({\n      force: true\n    }).type(\"{ctrl}{end}\", {\n      force: true\n    }).type(\"{ctrl}{uparrow}\", {\n      force: true\n    }).type(\"{end}\", {\n      force: true\n    }).type(\",{enter}\").type(`\"${valueToAdd}\"`); // Assert\n\n    cy.get(`${formWidgetsPage.labelSwitchGroup} input:checked`).should(\"have.length\", 2).eq(1).parent().contains(\"Green\");\n    cy.closePropertyPane();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isVisible === FALSE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":67,"column":35},"line":67,"code":"  it(\"Property: isVisible === FALSE\", function () {\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: isVisible === TRUE","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":72,"column":34},"line":72,"code":"  it(\"Property: isVisible === TRUE\", function () {\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"input\").eq(0).should(\"exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Property: onSelectionChange","suites":["Switch Group Widget Functionality"],"updatePoint":{"line":77,"column":33},"line":77,"code":"  it(\"Property: onSelectionChange\", function () {\n    // create an alert modal and verify its name\n    cy.createModal(this.data.ModalName);\n    cy.PublishtheApp();\n    cy.get(publish.switchGroupWidget + \" \" + \"label.bp3-switch\").children().first().click({\n      force: true\n    });\n    cy.get(modalWidgetPage.modelTextField).should(\"have.text\", this.data.ModalName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/SwitchGroup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the cell background color","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":11,"column":38},"line":11,"code":"  it(\"Change the cell background color\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Check if the cell background is #03b365\n\n    cy.selectColor(\"cellbackground\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\"); //Toggle to JS mode\n\n    cy.get(widgetsPage.toggleJsBcgColor).click().wait(200); //Check if the typed color red is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(\".t--property-control-cellbackground\", \"red\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(255, 0, 0)\");\n    cy.EvaluateCurrentValue(\"red\"); //Check if the typed color #03b365 is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(\".t--property-control-cellbackground\", \"#03b365\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    cy.EvaluateCurrentValue(\"#03b365\"); //Check if the typed color transparent is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(\".t--property-control-cellbackground\", \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"background-color\", \"rgba(0, 0, 0, 0)\");\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Change the text sizes","suites":["Text Widget Cell Background and Text Size Validation"],"updatePoint":{"line":37,"column":27},"line":37,"code":"  it(\"Change the text sizes\", function () {\n    cy.openPropertyPane(\"textwidget\"); //Check the label text size with dropdown\n\n    cy.get(widgetsPage.textSize).last().click({\n      force: true\n    });\n    cy.wait(100);\n    cy.selectTextSize(\"Heading 1\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"24px\"); //Toggle JS mode\n\n    cy.get(widgetsPage.toggleTextSize).click().wait(200); //Check if the typed size HEADING2 is reflecting in the background color and in the evaluated value\n\n    cy.updateCodeInput(\".t--property-control-textsize\", \"HEADING2\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"18px\");\n    cy.EvaluateCurrentValue(\"HEADING2\"); //Check for if the text size changes to default size when set to blank in JS mode:\n\n    cy.updateCodeInput(\".t--property-control-textsize\", \"\");\n    cy.get(`${widgetsPage.textWidget} .bp3-ui-text`).should(\"have.css\", \"font-size\", \"14px\");\n    cy.get(commonlocators.evaluatedCurrentValue).first().should(\"not.be.visible\"); //Check the values not allowed error message\n\n    cy.updateCodeInput(\".t--property-control-textsize\", \"HEADING10\");\n    cy.evaluateErrorMessage(\"Disallowed value: HEADING10\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/TextWidget_BgColor_TextSize_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Linting Error validation on mouseover and errorlog tab","suites":["Linting warning validation with text widget"],"updatePoint":{"line":19,"column":60},"line":19,"code":"  it(\"Linting Error validation on mouseover and errorlog tab\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{CheckboxWidget}Mouseover\n     * @param{CheckboxPre Css} Assertion\n     */\n    //Mouse hover to exact warning message\n\n    cy.get(commonlocators.labelSectionTxt).first().click({\n      force: true\n    }).wait(500); //lint mark validation\n\n    cy.get(commonlocators.lintError).first().should(\"be.visible\");\n    cy.get(commonlocators.lintError).last().should(\"be.visible\");\n    cy.get(commonlocators.lintError).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).should(\"be.visible\").contains(\"'Nodata' is not defined.\");\n    cy.get(commonlocators.lintError).last().trigger(\"mouseover\", {\n      force: true\n    }).wait(500); //lint warning message\n\n    cy.get(commonlocators.lintErrorMsg).last().should(\"be.visible\").contains(\"'lintErrror' is not defined.\");\n    cy.get(commonlocators.debugger).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.errorTab).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(commonlocators.debugErrorMsg).eq(0).contains(\"ReferenceError: error is not defined\");\n    cy.get(commonlocators.debugErrorMsg).eq(1).contains(\"ReferenceError: lintErrror is not defined\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/TextWidget_LintErrorValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Verify dropdown width of Select widgets and menu button","suites":["Dropdown Widget Functionality"],"updatePoint":{"line":11,"column":61},"line":11,"code":"  it(\"Verify dropdown width of Select widgets and menu button\", function () {\n    // Select\n    cy.get(formWidgetsPage.dropdownWidget).find(widgetLocators.dropdownSingleSelect).invoke(\"outerWidth\").should(\"eq\", 147.1875);\n    cy.get(formWidgetsPage.dropdownWidget).find(widgetLocators.dropdownSingleSelect).click({\n      force: true\n    });\n    cy.get(\".select-popover-wrapper\").invoke(\"outerWidth\").should(\"eq\", 147.1875); // Menu Button\n\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).invoke(\"outerWidth\").should(\"eq\", 147.1875);\n    cy.get(formWidgetsPage.menuButtonWidget).find(widgetLocators.menuButton).click({\n      force: true\n    });\n    cy.get(\".menu-button-popover\").invoke(\"outerWidth\").should(\"eq\", 147.1875); // MultiSelect\n\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-multiple\").invoke(\"width\").should(\"eq\", 147.1875);\n    cy.get(formWidgetsPage.multiselectWidget).find(\".rc-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".multi-select-dropdown\").invoke(\"width\").should(\"eq\", 147.1875); //Multi tree Select\n\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-multiple\").invoke(\"width\").should(\"eq\", 147.1875);\n    cy.get(formWidgetsPage.multiselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".tree-multiselect-dropdown\").invoke(\"outerWidth\").should(\"eq\", 147.1875); // Tree Select\n\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-single\").invoke(\"outerWidth\").should(\"eq\", 147.1875);\n    cy.get(formWidgetsPage.singleselecttreeWidget).find(\".rc-tree-select-selection-search-input\").first().focus({\n      force: true\n    }).type(\"{uparrow}\", {\n      force: true\n    });\n    cy.get(\".single-tree-select-dropdown\").invoke(\"outerWidth\").should(\"eq\", 147.1875);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/FormWidgets/Widget_Popup_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"connects successfully","suites":["Git sync connect to repo"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it(\"connects successfully\", function () {// cy.get(homePage.publishButton).click();\n    // // todo: check for the initial state: init git connection button, regular deploy button\n    // // add the test repo and click on submit btn\n    // intercept just the connect api\n    // cy.intercept(\n    //   {\n    //     url: \"*\",\n    //     hostname: window.location.host,\n    //   },\n    //   (req) => {\n    //     req.headers[\"origin\"] = \"Cypress\";\n    //   },\n    // );\n    // cy.intercept(\"POST\", \"/api/v1/applications/ssh-keypair/*\").as(\n    //   \"generateKey\",\n    // );\n    // cy.get(gitSyncLoctors.gitRepoInput).type(\n    //   Cypress.env(\"GITSYNC_TEST_REPO_URL\"),\n    // );\n    // cy.get(gitSyncLoctors.submitRepoUrlButton).click();\n    // cy.wait(\"@generateKey\").then((result) => {\n    //   generatedKey = result.response.body.data.publicKey;\n    //   generatedKey = generatedKey.slice(0, generatedKey.length - 1);\n    //   // fetch the generated key and post to the github repo\n    //   cy.request({\n    //     method: \"POST\",\n    //     url: `${GITHUB_API_BASE}/repos/${Cypress.env(\n    //       \"TEST_GITHUB_USER_NAME\",\n    //     )}/${Cypress.env(\"GITSYNC_TEST_REPO_NAME\")}/keys`,\n    //     headers: {\n    //       Authorization: `token ${Cypress.env(\"GITHUB_PERSONAL_ACCESS_TOKEN\")}`,\n    //     },\n    //     body: {\n    //       title: \"key0\",\n    //       key: generatedKey,\n    //     },\n    //   });\n    //   // click on the connect button and verify\n    //   cy.get(gitSyncLoctors.gitConfigNameInput).type(\n    //     `{selectall}${testUsername}`,\n    //   );\n    //   cy.get(gitSyncLoctors.gitConfigEmailInput).type(\n    //     `{selectall}${testEmail}`,\n    //   );\n    //   cy.get(gitSyncLoctors.connectSubmitBtn).click();\n    //   cy.wait(\"@connectGitRepo\");\n    //   cy.get(gitSyncLoctors.commitButton).click();\n    //   cy.wait(\"@commit\");\n    //   cy.get(\"body\").type(\"{esc}\");\n    // });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"creates a new branch","suites":["Git sync connect to repo"],"updatePoint":{"line":80,"column":26},"line":80,"code":"  it(\"creates a new branch\", function () {// cy.get(commonlocators.canvas).click();\n    // cy.get(gitSyncLoctors.branchButton).click();\n    // cy.get(gitSyncLoctors.branchSearchInput).type(\"ParentBranch\");\n    // cy.get(gitSyncLoctors.createNewBranchButton).click();\n    // cy.get(gitSyncLoctors.createNewBranchSubmitbutton).click();\n    // cy.get(\".bp3-spinner\").should(\"exist\");\n    // cy.get(\".bp3-spinner\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"creates branch specific resources","suites":["Git sync connect to repo"],"updatePoint":{"line":88,"column":39},"line":88,"code":"  it(\"creates branch specific resources\", function () {// cy.Createpage(\"ParentPage1\");\n    // cy.get(pages.addEntityAPI)\n    //   .last()\n    //   .should(\"be.visible\")\n    //   .click({ force: true });\n    // cy.get(pages.integrationCreateNew)\n    //   .should(\"be.visible\")\n    //   .click({ force: true });\n    // cy.CreateAPI(\"ParentApi1\");\n    // cy.get(jsActions.addJsActionButton)\n    //   .last()\n    //   .click({ force: true });\n    // cy.wait(\"@createNewJSCollection\");\n    // cy.get(jsActions.name).click({ force: true });\n    // cy.get(jsActions.nameInput)\n    //   .type(\"{selectall}ParentJsAction1\", { force: true })\n    //   .should(\"have.value\", \"ParentJsAction1\")\n    //   .blur();\n    // cy.wait(\"@renameJsAction\");\n    // // Added because api name edit takes some time to\n    // // reflect in api sidebar after the call passes.\n    // // eslint-disable-next-line cypress/no-unnecessary-waiting\n    // cy.wait(2000);\n    // // cy.get(commonlocators.canvas).click();\n    // cy.get(gitSyncLoctors.branchButton).click();\n    // cy.get(gitSyncLoctors.branchSearchInput).type(\"ChildBranch\");\n    // cy.get(gitSyncLoctors.createNewBranchButton).click();\n    // cy.get(gitSyncLoctors.createNewBranchSubmitbutton).click();\n    // cy.get(\".bp3-spinner\").should(\"exist\");\n    // cy.get(\".bp3-spinner\").should(\"not.exist\");\n    // cy.Createpage(\"ChildPage1\");\n    // cy.get(pages.addEntityAPI)\n    //   .last()\n    //   .should(\"be.visible\")\n    //   .click({ force: true });\n    // cy.get(pages.integrationCreateNew)\n    //   .should(\"be.visible\")\n    //   .click({ force: true });\n    // cy.CreateAPI(\"ChildApi1\");\n    // cy.get(jsActions.addJsActionButton)\n    //   .last()\n    //   .click({ force: true });\n    // cy.wait(\"@createNewJSCollection\");\n    // cy.get(jsActions.name).click({ force: true });\n    // cy.get(jsActions.nameInput)\n    //   .type(\"{selectall}ChildJsAction1\", { force: true })\n    //   .should(\"have.value\", \"ChildJsAction1\")\n    //   .blur();\n    // cy.wait(\"@renameJsAction\");\n    // // Added because api name edit takes some time to\n    // // reflect in api sidebar after the call passes.\n    // // eslint-disable-next-line cypress/no-unnecessary-waiting\n    // cy.wait(2000);\n    // cy.get(gitSyncLoctors.branchButton).click();\n    // cy.get(gitSyncLoctors.branchSearchInput).type(\"ParentBranch\");\n    // cy.get(gitSyncLoctors.branchListItem)\n    //   .contains(\"ParentBranch\")\n    //   .click();\n    // cy.get(\".bp3-spinner\").should(\"exist\");\n    // cy.get(\".bp3-spinner\").should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ChildPage1\")`).should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ChildApi1\")`).should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ChildJsAction1\")`).should(\"not.exist\");\n  }); // rename entities","file":"integration/Smoke_TestSuite/ClientSideTests/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"makes branch specific resource updates","suites":["Git sync connect to repo"],"updatePoint":{"line":153,"column":44},"line":153,"code":"  it(\"makes branch specific resource updates\", function () {// WIP\n    // cy.get(gitSyncLoctors.branchButton).click();\n    // cy.get(gitSyncLoctors.branchSearchInput).type(\"{selectall}ChildBranch\");\n    // cy.get(gitSyncLoctors.branchListItem)\n    //   .contains(\"ChildBranch\")\n    //   .click();\n    // cy.get(\".bp3-spinner\").should(\"exist\");\n    // cy.get(\".bp3-spinner\").should(\"not.exist\");\n    // cy.GlobalSearchEntity(\"ParentPage1\");\n    // cy.RenameEntity(\"ParentPageRenamed\");\n    // cy.GlobalSearchEntity(\"ParentApi1\");\n    // cy.RenameEntity(\"ParentApiRenamed\");\n    // cy.GlobalSearchEntity(\"ChildJsAction1\");\n    // cy.RenameEntity(\"ParentJsActionRenamed\");\n    // cy.get(gitSyncLoctors.branchButton).click();\n    // cy.get(gitSyncLoctors.branchSearchInput).type(\"ParentBranch\");\n    // cy.get(gitSyncLoctors.branchListItem)\n    //   .contains(\"ParentBranch\")\n    //   .click();\n    // cy.get(\".bp3-spinner\").should(\"exist\");\n    // cy.get(\".bp3-spinner\").should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ParentPageRenamed\")`).should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ParentApiRenamed\")`).should(\"not.exist\");\n    // cy.get(`.t--entity-name:contains(\"ParentJsActionRenamed\")`).should(\n    //   \"not.exist\",\n    // );\n  }); // delete the created repo","file":"integration/Smoke_TestSuite/ClientSideTests/GitSync/SwitchBranches_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. showsAndHidesUsingKeyboardShortcuts","suites":["GlobalSearch"],"updatePoint":{"line":13,"column":44},"line":13,"code":"  it(\"1. showsAndHidesUsingKeyboardShortcuts\", () => {\n    // wait for the page to load\n    cy.get(commonlocators.canvas);\n    const isMac = Cypress.platform === \"darwin\";\n\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{k}\");\n      cy.get(commonlocators.globalSearchModal);\n      cy.get(\"body\").type(\"{esc}\");\n      cy.get(commonlocators.globalSearchModal).should(\"not.exist\");\n    }\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GlobalSearch/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. selectsWidget","suites":["GlobalSearch"],"updatePoint":{"line":30,"column":22},"line":30,"code":"  it(\"2. selectsWidget\", () => {\n    const table = dsl.dsl.children[2];\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(table.widgetName);\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        lastSelectedWidget\n      } = state.ui.widgetDragResize;\n      expect(lastSelectedWidget).to.be.equal(table.widgetId);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GlobalSearch/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. navigatesToApi","suites":["GlobalSearch"],"updatePoint":{"line":46,"column":23},"line":46,"code":"  it(\"3. navigatesToApi\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"SomeApi\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"SomeApi\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        actions\n      } = state.entities;\n      const expectedAction = actions.find(actions => actions.config.name === \"SomeApi\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedAction.config.id);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GlobalSearch/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. navigatesToDatasourceHavingAQuery","suites":["GlobalSearch"],"updatePoint":{"line":73,"column":42},"line":73,"code":"  it(\"4. navigatesToDatasourceHavingAQuery\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      const expectedDatasource = httpResponse.response.body.data;\n      cy.NavigateToActiveDSQueryPane(expectedDatasource.name);\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000); // modal open transition should be deterministic\n\n      cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n      cy.get(\"body\").type(\"{enter}\");\n      cy.get(commonlocators.globalSearchTrigger).click({\n        force: true\n      }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000); // modal open transition should be deterministic\n\n      cy.get(commonlocators.globalSearchInput).type(expectedDatasource.name);\n      cy.get(\"body\").type(\"{enter}\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedDatasource.id);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GlobalSearch/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. navigatesToPage","suites":["GlobalSearch"],"updatePoint":{"line":99,"column":24},"line":99,"code":"  it(\"5. navigatesToPage\", () => {\n    cy.Createpage(\"NewPage\");\n    cy.get(commonlocators.globalSearchTrigger).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.get(commonlocators.globalSearchInput).type(\"Page1\");\n    cy.get(\"body\").type(\"{enter}\");\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        pages\n      } = state.entities.pageList;\n      const expectedPage = pages.find(page => page.pageName === \"Page1\");\n      cy.location().should(loc => {\n        expect(loc.pathname).includes(expectedPage.pageId);\n      });\n    });\n    cy.NavigateToHome();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/GlobalSearch/GlobalSearch_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for app page in edit mode","suites":["Visual regression tests"],"updatePoint":{"line":8,"column":49},"line":8,"code":"  it(\"Layout validation for app page in edit mode\", () => {\n    cy.visit(\"/applications\");\n    cy.wait(3000);\n    cy.get(\".t--applications-container .createnew\").should(\"be.visible\");\n    cy.get(\".t--applications-container .createnew\").first().click();\n    cy.wait(3000); // taking screenshot of app home page in edit mode\n\n    cy.get(\"#root\").matchImageSnapshot(\"apppage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for Quick page wizard","suites":["Visual regression tests"],"updatePoint":{"line":17,"column":45},"line":17,"code":"  it(\"Layout validation for Quick page wizard\", () => {\n    cy.get(\".t--GenerateCRUDPage\").click();\n    cy.wait(2000); // taking screenshot of generate crud page\n\n    cy.get(\"#root\").matchImageSnapshot(\"quickPageWizard\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for App builder Page","suites":["Visual regression tests"],"updatePoint":{"line":23,"column":44},"line":23,"code":"  it(\"Layout Validation for App builder Page\", () => {\n    cy.get(\".bp3-icon-chevron-left\").click();\n    cy.get(\".t--BuildFromScratch\").click();\n    cy.wait(2000); // taking screenshot of app builder page\n\n    cy.get(\"#root\").matchImageSnapshot(\"emptyAppBuilder\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for Empty deployed app","suites":["Visual regression tests"],"updatePoint":{"line":30,"column":46},"line":30,"code":"  it(\"Layout Validation for Empty deployed app\", () => {\n    cy.PublishtheApp();\n    cy.wait(3000); // taking screenshot of empty deployed app\n\n    cy.get(\"#root\").matchImageSnapshot(\"EmptyApp\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout Validation for profile page","suites":["Visual regression tests"],"updatePoint":{"line":36,"column":40},"line":36,"code":"  it(\"Layout Validation for profile page\", () => {\n    cy.get(\".t--profile-menu-icon\").click();\n    cy.get(\".t--edit-profile\").click();\n    cy.wait(2000); // taking screenshot of profile page\n\n    cy.get(\"#root\").matchImageSnapshot(\"Profile\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Layout validation for login page","suites":["Visual regression tests"],"updatePoint":{"line":43,"column":38},"line":43,"code":"  it(\"Layout validation for login page\", () => {\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click();\n    cy.wait(500); // validating all the fields on login page\n\n    cy.get(homePage.headerAppSmithLogo).should(\"be.visible\");\n    cy.xpath(\"//h1\").should(\"have.text\", \"Sign in to your account\");\n    cy.get(\".bp3-label\").first().should(\"have.text\", \"Email \");\n    cy.get(\".bp3-label\").last().should(\"have.text\", \"Password \");\n    cy.xpath('//span[text()=\"sign in\"]').should(\"be.visible\");\n    cy.get(\".bp3-label\").first().click();\n    /* cy.xpath(\"//a\")\n      .eq(3)\n      .should(\"have.text\", \"Privacy Policy\");\n    cy.xpath(\"//a\")\n      .eq(4)\n      .should(\"have.text\", \"Terms and conditions\"); */\n    // taking screenshot of login page\n\n    cy.matchImageSnapshot(\"loginpage\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutValidation/AppPageLayout.spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality","suites":["Container Widget Functionality"],"updatePoint":{"line":13,"column":36},"line":13,"code":"  it(\"Container Widget Functionality\", function () {\n    cy.openPropertyPane(\"containerwidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{ContainerWidget}Mouseover\n     * @param{ContainerPre Css} Assertion\n     */\n\n    cy.widgetText(\"job\", widgetsPage.containerWidget, commonlocators.containerInnerText);\n    /**\n     * @param{Text} Random Border Colour\n     */\n\n    cy.get(widgetsPage.boadercolorPicker).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.yellowColor).click();\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"border-color\").and(\"eq\", \"rgb(255, 193, 61)\");\n    /**\n     * @param{Text} Random Background Colour\n     */\n\n    cy.get(widgetsPage.backgroundcolorPicker).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.greenColor).click();\n    cy.get(widgetsPage.containerD).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(3, 179, 101)\");\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(widgetsPage.containerD).eq(0).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Container Widget Functionality To Verify The Colour","suites":["Container Widget Functionality"],"updatePoint":{"line":50,"column":57},"line":50,"code":"  it(\"Container Widget Functionality To Verify The Colour\", function () {\n    cy.get(widgetsPage.containerD).eq(0).should(\"have.css\", \"background-color\").and(\"eq\", \"rgb(3, 179, 101)\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border width and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":53,"column":34},"line":53,"code":"  it(\"Test border width and verity\", function () {\n    cy.get(publish.backToEditor).click();\n    cy.openPropertyPane(\"containerwidget\");\n    cy.testJsontext(\"borderwidth\", \"10\");\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"border-width\").and(\"eq\", \"10px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test border radius and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":59,"column":35},"line":59,"code":"  it(\"Test border radius and verity\", function () {\n    cy.testJsontext(\"borderradius\", \"10\");\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"border-radius\").and(\"eq\", \"10px\"); // should have overflow : hidden to show border edges\n\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}'] div`).should(\"have.css\", \"overflow\").and(\"eq\", \"hidden\"); // wrapper should have same border radius\n\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"border-radius\").and(\"eq\", \"10px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test Box shadow and verity","suites":["Container Widget Functionality"],"updatePoint":{"line":67,"column":32},"line":67,"code":"  it(\"Test Box shadow and verity\", function () {\n    cy.get(widgetsPage.boxShadow).children().eq(3).click({\n      force: true\n    });\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"box-shadow\").and(\"eq\", \"rgba(0, 0, 0, 0.5) 0px 1px 3px 0px\"); // change shadow color and check box-shadow again\n\n    cy.get(widgetsPage.boxShadowColorPicker).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.blueColor).click();\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"box-shadow\").and(\"eq\", \"rgb(51, 102, 255) 0px 1px 3px 0px\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test overflow of widget boundaries","suites":["Container Widget Functionality"],"updatePoint":{"line":79,"column":40},"line":79,"code":"  it(\"Test overflow of widget boundaries\", function () {\n    cy.testJsontext(\"borderwidth\", \"500\"); // prevent overflow of widget boundaries\n\n    cy.get(`div[data-testid='container-wrapper-${dsl.dsl.children[0].widgetId}']`).should(\"have.css\", \"overflow\").and(\"eq\", \"hidden\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Container_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":14,"column":43},"line":14,"code":"  it(\"List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); //Uncheck the disabled checkbox and validate\n\n    cy.UncheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":25,"column":41},"line":25,"code":"  it(\"List-Check Visible field Validation\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); //Check the disableed checkbox and Validate\n\n    cy.CheckWidgetProperties(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - List-Unckeck Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":36,"column":55},"line":36,"code":"  it(\"Toggle JS - List-Unckeck Visible field Validation\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); //Uncheck the disabled checkbox using JS and validate\n\n    cy.get(widgetsPage.toggleVisible).click({\n      force: true\n    });\n    cy.testJsontext(\"visible\", \"false\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - List-Check Visible field Validation","suites":["Container Widget Functionality"],"updatePoint":{"line":50,"column":53},"line":50,"code":"  it(\"Toggle JS - List-Check Visible field Validation\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); //Check the disabled checkbox using JS and Validate\n\n    cy.testJsontext(\"visible\", \"true\");\n    cy.PublishtheApp();\n    cy.get(widgetsPage.listWidget).should(\"be.visible\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if list shows correct no. of items","suites":["Container Widget Functionality"],"updatePoint":{"line":61,"column":47},"line":61,"code":"  it(\"checks if list shows correct no. of items\", function () {\n    // Verify the length of list\n    cy.get(commonlocators.containerWidget).then(function ($lis) {\n      expect($lis).to.have.length(2);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks currentItem binding","suites":["Container Widget Functionality"],"updatePoint":{"line":67,"column":32},"line":67,"code":"  it(\"checks currentItem binding\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Text1\");\n    cy.testJsontext(\"text\", `{{currentItem.first_name}}`);\n    cy.wait(1000);\n    cy.closePropertyPane(); // Verify Current Item Bindings\n\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[0].first_name);\n      expect($lis.eq(1)).to.contain(items[1].first_name);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks button action","suites":["Container Widget Functionality"],"updatePoint":{"line":79,"column":26},"line":79,"code":"  it(\"checks button action\", function () {\n    // Open property pane\n    cy.SearchEntityandOpen(\"Button1\");\n    cy.testJsontext(\"label\", `{{currentItem.first_name}}`);\n    cy.addAction(\"{{currentItem.first_name}}\");\n    cy.PublishtheApp(); // Verify Widget Button by clicking on it\n\n    cy.get(`${widgetsPage.widgetBtn}`).first().click(); // Verify the click on first button\n\n    cy.get(commonlocators.toastmsg).contains(items[0].first_name);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"it checks onListItem click action","suites":["Container Widget Functionality"],"updatePoint":{"line":90,"column":39},"line":90,"code":"  it(\"it checks onListItem click action\", function () {\n    // Verify Clicking on list item shows message of first name\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    }); // Open property pane\n\n    cy.SearchEntityandOpen(\"List1\"); // Verify Action type and Message of List Item\n\n    cy.addAction(\"{{currentItem.first_name}}\");\n    cy.PublishtheApp(); // Click on list first item\n\n    cy.get(\"div[type='LIST_WIDGET'] .t--widget-containerwidget:first-child\").click(); // Verify the click on first item\n\n    cy.get(commonlocators.toastmsg).contains(items[0].first_name);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"it checks pagination","suites":["Container Widget Functionality"],"updatePoint":{"line":105,"column":26},"line":105,"code":"  it(\"it checks pagination\", function () {\n    // clicking on second pagination button\n    cy.get(`${commonlocators.paginationButton}-2`).click(); // now we are on the second page which shows first the 3rd item in the list\n\n    cy.get(commonlocators.TextInside).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(items[2].first_name);\n    });\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Copy Verification","suites":["Container Widget Functionality"],"updatePoint":{"line":116,"column":29},"line":116,"code":"  it(\"Chart-Copy Verification\", function () {\n    const modifierKey = Cypress.platform === \"darwin\" ? \"meta\" : \"ctrl\"; //Copy Chart and verify all properties\n\n    cy.SearchEntityandOpen(\"List1\");\n    cy.copyWidget(\"List1Copy\", commonlocators.containerWidget); // cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Chart-Delete Verification","suites":["Container Widget Functionality"],"updatePoint":{"line":122,"column":31},"line":122,"code":"  it(\"Chart-Delete Verification\", function () {\n    // Delete the Chart widget\n    cy.SearchEntityandOpen(\"List1Copy\");\n    cy.deleteWidget();\n    cy.PublishtheApp(); // Verify the cart is deleted\n\n    cy.get(commonlocators.containerWidget).should(\"not.exist\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":133,"column":47},"line":133,"code":"  it(\"List widget background colour and deploy \", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); // Scroll down to Styles and Add background colour\n\n    cy.selectColor(\"background\");\n    cy.wait(1000);\n    cy.selectColor(\"itembackground\"); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp(); // Ensure List Background Color\n\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\"); // Verify List Item Background Color\n\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(3, 179, 101)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Toggle JS - List widget background colour and deploy ","suites":["Container Widget Functionality"],"updatePoint":{"line":150,"column":59},"line":150,"code":"  it(\"Toggle JS - List widget background colour and deploy \", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); // Scroll down to Styles and Add background colour\n\n    cy.get(widgetsPage.toggleBackground).click({\n      force: true\n    });\n    cy.testJsontext(\"background\", \"#FFC13D\");\n    cy.wait(1000);\n    cy.get(widgetsPage.toggleItemBackground).click({\n      force: true\n    });\n    cy.testJsontext(\"itembackground\", \"#38AFF4\"); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp(); // Ensure List Background Color\n\n    cy.get(widgetsPage.listWidget).should(\"have.css\", \"background-color\", \"rgb(255, 193, 61)\"); // Verify List Item Background Color\n\n    cy.get(widgetsPage.itemContainerWidget).should(\"have.css\", \"background-color\", \"rgb(56, 175, 244)\");\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add new item in the list widget array object","suites":["Container Widget Functionality"],"updatePoint":{"line":173,"column":50},"line":173,"code":"  it(\"Add new item in the list widget array object\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); //Add the new item in the list\n\n    cy.testJsontext(\"items\", JSON.stringify(this.data.ListItems));\n    cy.wait(2000);\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Adding large item Spacing for item card","suites":["Container Widget Functionality"],"updatePoint":{"line":184,"column":45},"line":184,"code":"  it(\"Adding large item Spacing for item card\", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); // Scroll down to Styles and Add item spacing for item card\n\n    cy.testJsontext(\"itemspacing\\\\(\" + \"px\" + \"\\\\)\", 12);\n    cy.wait(2000); // Click on Deploy and ensure it is deployed appropriately\n\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Renaming the widget from Property pane and Entity explorer ","suites":["Container Widget Functionality"],"updatePoint":{"line":196,"column":65},"line":196,"code":"  it(\"Renaming the widget from Property pane and Entity explorer \", function () {\n    // Open Property pane\n    cy.SearchEntityandOpen(\"List1\"); // Change the list widget name from property pane and Verify it\n\n    cy.widgetText(\"List2\", widgetsPage.listWidgetName, widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag);\n    cy.closePropertyPane(); // Change the list widget name from Entity Explorer\n\n    cy.SearchEntityandDblClick(\"List2\").type(\"List1{enter}\"); // Mouse over to list name\n\n    cy.SearchEntityandOpen(\"List1\");\n    cy.get(widgetsPage.listWidgetName).first().trigger(\"mouseover\", {\n      force: true\n    }); // Verify the list name is changed\n\n    cy.contains(widgetsPage.listWidgetName + \" \" + commonlocators.listWidgetNameTag, \"List1\");\n    cy.PublishtheApp();\n    cy.get(publishPage.backToEditor).click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/List_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test with Modal on change of selected tab","suites":["Tab widget test"],"updatePoint":{"line":19,"column":72},"line":19,"code":"  it(\"Tab Widget Functionality Test with Modal on change of selected tab\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, Layoutpage.tabInput);\n    cy.AddActionWithModal();\n    cy.get(\".t--widget-buttonwidget:contains('Confirm')\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publih the app and validate the widgets displayed under each tab","suites":["Tab widget test"],"updatePoint":{"line":27,"column":70},"line":27,"code":"  it(\"Publih the app and validate the widgets displayed under each tab\", function () {\n    cy.PublishtheApp();\n    cy.get(publish.buttonWidget).should(\"be.visible\");\n    cy.get(publish.textWidget).should(\"be.visible\");\n    cy.get(publish.datePickerNew).should(\"be.visible\");\n    cy.get(publish.tab).contains(\"Tab 2\").click({\n      force: true\n    });\n    cy.get(publish.checkboxWidget).should(\"be.visible\");\n    cy.get(publish.radioWidget).should(\"be.visible\");\n    cy.get(publish.buttonWidget).contains(\"Confirm\").click({\n      force: true\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_new_scenario_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality Test","suites":["Tab widget test"],"updatePoint":{"line":17,"column":35},"line":17,"code":"  it(\"Tab Widget Functionality Test\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    /**\n     * @param{Text} Random Text\n     * @param{TabWidget}Mouseover\n     * @param{TabPre Css} Assertion\n     */\n\n    cy.widgetText(\"tab\", Layoutpage.tabWidget, Layoutpage.tabInput);\n    /**\n     * @param{IndexValue} Provide input Index Value\n     * @param{Text} Provide Index Text Value\n     */\n\n    cy.tabVerify(0, \"Aditya\");\n    cy.tabVerify(1, \"test\"); //Default  tab selection and validation\n\n    cy.testJsontext(\"defaulttab\", \"test\");\n    cy.get(Layoutpage.tabWidget).contains(\"test\").click({\n      force: true\n    }).should(\"be.visible\");\n    cy.get(Layoutpage.tabButton).click({\n      force: true\n    }); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.tabVerify(1, \"Day\");\n    cy.get(Layoutpage.tabDelete).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Day\").should(\"not.exist\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(300);\n    /**\n     * @param{toggleButton Css} Assert to be checked\n     */\n\n    cy.togglebar(widgetsPage.Scrollbutton);\n    cy.get(Layoutpage.tabContainer).scrollIntoView({\n      easing: \"linear\"\n    }).should(\"be.visible\");\n    cy.PublishtheApp();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Select Tabs","suites":["Tab widget test"],"updatePoint":{"line":59,"column":45},"line":59,"code":"  it(\"Tab Widget Functionality To Select Tabs\", function () {\n    cy.get(publish.tabWidget).contains(this.data.tabName).click({\n      force: true\n    }).should(\"be.selected\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Unchecked Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":65,"column":58},"line":65,"code":"  it(\"Tab Widget Functionality To Unchecked Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebarDisable(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check Visible Widget","suites":["Tab widget test"],"updatePoint":{"line":72,"column":54},"line":72,"code":"  it(\"Tab Widget Functionality To Check Visible Widget\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.togglebar(commonlocators.visibleCheckbox);\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check tab invisiblity","suites":["Tab widget test"],"updatePoint":{"line":79,"column":55},"line":79,"code":"  it(\"Tab Widget Functionality To Check tab invisiblity\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(Layoutpage.tabEdit).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"not.exist\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Tab Widget Functionality To Check tab visibility","suites":["Tab widget test"],"updatePoint":{"line":92,"column":54},"line":92,"code":"  it(\"Tab Widget Functionality To Check tab visibility\", function () {\n    cy.openPropertyPane(\"tabswidget\");\n    cy.get(Layoutpage.tabEdit).eq(1).click({\n      force: true\n    });\n    cy.get(Layoutpage.tabVisibility).first().click({\n      force: true\n    });\n    cy.get(Layoutpage.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.PublishtheApp();\n    cy.get(publish.tabWidget).contains(\"Tab 1\").should(\"be.visible\");\n    cy.get(publish.backToEditor).click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/LayoutWidgets/Tab_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check check the redirection post signup","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":11,"column":70},"line":11,"code":"  it(\"onboarding flow - should check check the redirection post signup\", function () {\n    cy.get(OnboardingLocator.introModal).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check function of introduction modal build button","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":14,"column":80},"line":14,"code":"  it(\"onboarding flow - should check function of introduction modal build button\", function () {\n    cy.get(OnboardingLocator.introModal).should(\"be.visible\");\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.introModal).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check function of introduction modal guided tour button","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":19,"column":86},"line":19,"code":"  it(\"onboarding flow - should check function of introduction modal guided tour button\", function () {\n    cy.get(OnboardingLocator.introModalWelcomeTourBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.introModalWelcomeTourBtn).click();\n    cy.get(OnboardingLocator.welcomeTourBtn).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the checklist page actions","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":24,"column":63},"line":24,"code":"  it(\"onboarding flow - should check the checklist page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"0 of 5\");\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.be.disabled\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"1 of 5\");\n    cy.get(OnboardingLocator.checklistDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistActionBtn).click();\n    cy.get(OnboardingLocator.createQuery).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"2 of 5\");\n    cy.get(OnboardingLocator.checklistActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"3 of 5\");\n    cy.get(OnboardingLocator.checklistWidgetBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).click();\n    cy.get(OnboardingLocator.snipingBanner).should(\"be.visible\");\n    cy.get(OnboardingLocator.snipingTextWidget).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(OnboardingLocator.widgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetName).click();\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"4 of 5\");\n    cy.get(OnboardingLocator.checklistConnectionBtn).should(\"not.exist\");\n    let open;\n    cy.window().then(window => {\n      open = window.open;\n      window.open = _.noop;\n    });\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.checklistDeployBtn).click();\n    cy.get(OnboardingLocator.checklistStatus).should(\"contain\", \"5 of 5\");\n    cy.get(OnboardingLocator.checklistDeployBtn).should(\"not.exist\");\n    cy.window().then(window => {\n      window.open = open;\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page actions","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":81,"column":59},"line":81,"code":"  it(\"onboarding flow - should check the tasks page actions\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_DATASOURCE_HEADER());\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_QUERY_HEADER());\n    cy.get(OnboardingLocator.taskActionBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.createQuery).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.statusbar).click();\n    cy.get(OnboardingLocator.checklistBack).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"not.exist\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceHeader).contains(Cypress.env(\"MESSAGES\").ONBOARDING_TASK_WIDGET_HEADER());\n    cy.get(OnboardingLocator.taskWidgetBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskWidgetBtn).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page datasource action alternate widget action","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":112,"column":93},"line":112,"code":"  it(\"onboarding flow - should check the tasks page datasource action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check the tasks page query action alternate widget action","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":124,"column":88},"line":124,"code":"  it(\"onboarding flow - should check the tasks page query action alternate widget action\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskDatasourceBtn).click();\n    cy.get(OnboardingLocator.datasourcePage).should(\"be.visible\");\n    cy.get(OnboardingLocator.datasourceMock).first().click();\n    cy.wait(1000);\n    cy.get(OnboardingLocator.datasourceBackBtn).click();\n    cy.get(OnboardingLocator.taskActionBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.taskActionAltBtn).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"onboarding flow - should check directly opening widget pane","suites":["FirstTimeUserOnboarding"],"updatePoint":{"line":142,"column":65},"line":142,"code":"  it(\"onboarding flow - should check directly opening widget pane\", function () {\n    cy.get(OnboardingLocator.introModalBuild).click();\n    cy.get(OnboardingLocator.taskDatasourceBtn).should(\"be.visible\");\n    cy.get(OnboardingLocator.widgetPaneTrigger).click();\n    cy.get(OnboardingLocator.widgetSidebar).should(\"be.visible\");\n    cy.get(OnboardingLocator.dropTarget).should(\"be.visible\");\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\").wait(800);\n    cy.reload();\n    cy.wait(\"@getUser\");\n    cy.get(OnboardingLocator.statusbar).should(\"be.visible\");\n    cy.get(OnboardingLocator.textWidgetName).should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/FirstTimeUserOnboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Onboarding flow - manual without using do it for me option","suites":["Onboarding"],"updatePoint":{"line":8,"column":64},"line":8,"code":"  it(\"Onboarding flow - manual without using do it for me option\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    });\n    cy.get(\".t--welcome-tour\").click();\n    cy.get(\".t--onboarding-action\").click();\n    cy.get(\".t--close--button\").should(\"not.exist\");\n    cy.wait(\"@createNewApplication\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const datasources = state.entities.datasources.list;\n      const onboardingDatasource = datasources.find(datasource => {\n        const name = datasource.name;\n        return name === \"Super Updates DB\";\n      });\n\n      if (!onboardingDatasource) {\n        cy.wait(\"@createDatasource\").then(httpRequest => {\n          const createdDbName = httpRequest.response.body.data.name;\n          expect(createdDbName).to.be.equal(\"Super Updates DB\");\n        });\n      }\n\n      cy.get(\".bp3-spinner-head\").should(\"not.exist\");\n      cy.get(\".t--start-building\").should(\"be.visible\").click({\n        force: true\n      }); // Create and run query\n      // Using the cheat option to create the action with 30 sec timeout\n\n      cy.get(\".t--close--button\").should(\"not.exist\");\n      cy.get(\".t--onboarding-cheat-action\").should(\"be.visible\").click();\n      cy.wait(\"@postExecute\").then(httpRequest => {\n        expect(httpRequest.response.body.data.isExecutionSuccess).to.be.true;\n      }); // Add widget\n\n      cy.get(\".t--add-widget\").click();\n      cy.dragAndDropToCanvas(\"tablewidget\", {\n        x: 360,\n        y: 40\n      }); // wait for animation duration\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000); // Click on \"Show me how\" and then click on cheat button\n\n      cy.get(\".t--onboarding-action\").should(\"be.visible\").click({\n        force: true\n      });\n      cy.get(\".t--close--button\").should(\"not.exist\");\n      cy.get(\".t--onboarding-cheat-action\").should(\"be.visible\").click(); // Check if table is showing any data\n\n      cy.getTableDataSelector(\"0\", \"0\").then(selector => {\n        cy.get(selector).should(\"be.visible\");\n      }); // wait for animation duration\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(1000);\n      cy.contains(\".t--onboarding-helper-title\", \"Capture Hero Updates\");\n      cy.dragAndDropToCanvas(\"inputwidget\", {\n        x: 360,\n        y: 40\n      });\n      cy.get(\".t--property-control-onsubmit .t--open-dropdown-Select-Action\").click({\n        force: true\n      }).selectOnClickOption(\"Execute a query\").selectOnClickOption(\"Create New Query\");\n      cy.contains(\".t--onboarding-helper-title\", \"Deploy the Standup Dashboard\");\n      cy.get(\".t--close--button\").should(\"not.exist\");\n    });\n  }); // Similar to PublishtheApp command with little changes","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/Onboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Publish app","suites":["Onboarding"],"updatePoint":{"line":76,"column":17},"line":76,"code":"  it(\"Publish app\", function () {\n    cy.server();\n    cy.route(\"POST\", \"/api/v1/applications/publish/*\").as(\"publishApp\"); // Wait before publish\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.window().then(window => {\n      cy.stub(window, \"open\").callsFake(url => {\n        window.location.href = Cypress.config().baseUrl + url.substring(1);\n        window.location.target = \"_self\";\n      });\n    });\n    cy.get(homePage.publishButton).click({\n      force: true\n    });\n    cy.wait(\"@publishApp\");\n    cy.url().should(\"include\", \"/pages\");\n    cy.log(\"pagename: \" + localStorage.getItem(\"PageName\")); // check close button exist and working\n\n    cy.get(\".t--close--button\").should(\"be.visible\").click();\n    cy.get(\".t--side-sticky-bar\").should(\"be.visible\").click();\n    cy.get(\".t--onboarding-secondary-action\").click();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Onboarding/Onboarding_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should delete the organization","suites":["Delete organization test spec"],"updatePoint":{"line":6,"column":36},"line":6,"code":"  it(\"should delete the organization\", function () {\n    cy.visit(\"/applications\");\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.contains(\"Delete Organization\").click();\n      cy.contains(\"Are you sure\").click();\n      cy.wait(\"@deleteOrgApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(200);\n      });\n      cy.get(newOrganizationName).should(\"not.exist\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/DeleteOrganization_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"should show option to delete organization for an admin user","suites":["Delete organization test spec"],"updatePoint":{"line":21,"column":65},"line":21,"code":"  it(\"should show option to delete organization for an admin user\", function () {\n    cy.visit(\"/applications\");\n    cy.wait(2000);\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.contains(\"Delete Organization\");\n      cy.inviteUserForOrg(newOrganizationName, Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.get(homePage.orgNamePopoverContent).contains(\"Delete Organization\").should(\"not.exist\");\n      cy.LogOut();\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/DeleteOrganization_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"leave organization menu is visible validation","suites":["Leave organization test spec"],"updatePoint":{"line":7,"column":51},"line":7,"code":"  it(\"leave organization menu is visible validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      newOrgId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.contains(\"Leave Organization\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/LeaveOrganizationTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Only admin user can not leave organization validation","suites":["Leave organization test spec"],"updatePoint":{"line":18,"column":59},"line":18,"code":"  it(\"Only admin user can not leave organization validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      newOrgId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.contains(\"Leave Organization\").click();\n      cy.contains(\"Are you sure\").click();\n      cy.wait(\"@leaveOrgApiCall\").then(httpResponse => {\n        expect(httpResponse.status).to.equal(400);\n      });\n      cy.contains(newOrganizationName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/LeaveOrganizationTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Non admin users can only access leave organization popup menu validation","suites":["Leave organization test spec"],"updatePoint":{"line":34,"column":78},"line":34,"code":"  it(\"Non admin users can only access leave organization popup menu validation\", function () {\n    cy.visit(\"/applications\");\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      newOrgId = interception.response.body.data.name;\n      cy.visit(\"/applications\");\n      cy.inviteUserForOrg(newOrganizationName, Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n      cy.LogOut();\n      cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n      cy.visit(\"/applications\");\n      cy.openOrgOptionsPopup(newOrganizationName);\n      cy.get(homePage.orgNamePopoverContent).find(\"a\").should(\"have.length\", 1).first().contains(\"Leave Organization\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/LeaveOrganizationTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Can Import Application","suites":["Organization Import Application"],"updatePoint":{"line":12,"column":28},"line":12,"code":"  it(\"Can Import Application\", function () {\n    cy.NavigateToHome();\n    appname = localStorage.getItem(\"AppName\");\n    cy.get(homePage.searchInput).type(appname); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appMoreIcon).first().click({\n      force: true\n    });\n    cy.get(homePage.exportAppFromMenu).click({\n      force: true\n    });\n    cy.get(homePage.searchInput).clear();\n    cy.get(`a[id=t--export-app-link]`).then(anchor => {\n      const url = anchor.prop(\"href\");\n      cy.request(url).then(({\n        body,\n        headers\n      }) => {\n        expect(headers).to.have.property(\"content-type\", \"application/json\");\n        expect(headers).to.have.property(\"content-disposition\", `attachment; filename*=UTF-8''${appname}.json`);\n        cy.writeFile(\"cypress/fixtures/exported-app.json\", body, \"utf-8\");\n        cy.generateUUID().then(uid => {\n          orgid = uid;\n          localStorage.setItem(\"OrgName\", orgid);\n          cy.createOrg();\n          cy.wait(\"@createOrg\").then(createOrgInterception => {\n            newOrganizationName = createOrgInterception.response.body.data.name;\n            cy.renameOrg(newOrganizationName, orgid);\n            cy.get(homePage.orgImportAppOption).click({\n              force: true\n            });\n            cy.get(homePage.orgImportAppModal).should(\"be.visible\");\n            cy.xpath(homePage.uploadLogo).attachFile(\"exported-app.json\");\n            cy.get(homePage.orgImportAppButton).click({\n              force: true\n            });\n            cy.wait(\"@importNewApplication\").then(interception => {\n              let appId = interception.response.body.data.id;\n              let defaultPage = interception.response.body.data.pages.find(eachPage => !!eachPage.isDefault);\n              cy.get(homePage.toastMessage).should(\"contain\", \"Application imported successfully\");\n              cy.url().should(\"include\", `/applications/${appId}/pages/${defaultPage.id}/edit`);\n            });\n          });\n        });\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/OrgImportApplication_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create org with leading space validation","suites":["Org name validation spec"],"updatePoint":{"line":7,"column":46},"line":7,"code":"  it(\"create org with leading space validation\", function () {\n    cy.NavigateToHome();\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      cy.NavigateToHome();\n      cy.contains(newOrganizationName).closest(homePage.orgCompleteSection).find(homePage.orgNamePopover).find(homePage.optionsIcon).click({\n        force: true\n      });\n      cy.get(homePage.renameOrgInput).should(\"be.visible\").type(\" \");\n      cy.get(\".error-message\").should(\"be.visible\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/Orgname_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"creates org and checks that orgname is editable","suites":["Org name validation spec"],"updatePoint":{"line":20,"column":53},"line":20,"code":"  it(\"creates org and checks that orgname is editable\", function () {\n    cy.createOrg();\n    cy.generateUUID().then(uid => {\n      orgid = \"kadjhfkjadsjkfakjdscajdsnckjadsnckadsjcnanakdjsnckjdscnakjdscnnadjkncakjdsnckjadsnckajsdfkjadshfkjsdhfjkasdhfkjasdhfjkasdhjfasdjkfhjhdsfjhdsfjhadasdfasdfadsasdf\" + uid; // create org with long name\n\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/Orgname_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create org with special characters validation","suites":["Org name validation spec"],"updatePoint":{"line":32,"column":51},"line":32,"code":"  it(\"create org with special characters validation\", function () {\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      cy.renameOrg(newOrganizationName, \"Test & Org\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/Orgname_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create org with long name should use ellipsis validation","suites":["Org Settings validation spec"],"updatePoint":{"line":7,"column":62},"line":7,"code":"  it(\"create org with long name should use ellipsis validation\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = \"kadjhfkjadsjkfakjdscajdsnckjadsnckadsjcnanakdjsnckjdscnakjdscnnadjkncakjdsnckjadsnckajsdfkjadshfkjsdhfjkasdhfkjasdhfjkasdhjfasdjkfhjhdsfjhdsfjhadasdfasdfadsasdf\" + uid;\n      localStorage.setItem(\"OrgName\", orgid); // create org with long name\n\n      cy.createOrg(); // stub the response and\n      // find app name\n\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n        cy.navigateToOrgSettings(orgid); // checking parent's(<a></a>) since the child(<span>) inherits css from it\n\n        cy.get(homePage.orgHeaderName).parent().then(elem => {\n          assert.isBelow(elem[0].offsetWidth, elem[0].scrollWidth);\n        }).should(\"have.css\", \"text-overflow\", \"ellipsis\");\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/OrgSettings_validation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create org and check if user icons exists in that org on homepage","suites":["Check if org has user icons on homepage"],"updatePoint":{"line":7,"column":71},"line":7,"code":"  it(\"create org and check if user icons exists in that org on homepage\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n        cy.get(homePage.orgList.concat(orgid).concat(\")\")).scrollIntoView().should(\"be.visible\").within(() => {\n          cy.get(homePage.shareUserIcons).first().should(\"be.visible\");\n        });\n      });\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/OrganisationTests/OrgUserIconTest_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Hide page test ","suites":["Hide / Show page test functionality"],"updatePoint":{"line":8,"column":21},"line":8,"code":"  it(\"Hide page test \", function () {\n    cy.Createpage(pageOne);\n    cy.Createpage(pageTwo);\n    cy.GlobalSearchEntity(pageOne);\n    cy.xpath(pages.popover).last().click({\n      force: true\n    });\n    cy.get(pages.hidePage).click({\n      force: true\n    });\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Pages/Hide_Page_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Show page test ","suites":["Hide / Show page test functionality"],"updatePoint":{"line":22,"column":21},"line":22,"code":"  it(\"Show page test \", function () {\n    cy.get(publish.backToEditor).click();\n    cy.GlobalSearchEntity(pageOne);\n    cy.xpath(pages.popover).last().click({\n      force: true\n    });\n    cy.get(pages.showPage).click({\n      force: true\n    });\n    cy.ClearSearch();\n    cy.PublishtheApp();\n    cy.get(\".t--page-switch-tab\").should(\"have.length\", 3);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Pages/Hide_Page_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Clone page","suites":["Pages"],"updatePoint":{"line":8,"column":16},"line":8,"code":"  it(\"Clone page\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(apiName);\n    cy.xpath(pages.popover).last().click({\n      force: true\n    });\n    cy.get(pages.clonePage).click({\n      force: true\n    });\n    cy.wait(\"@clonePage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201); // to check if apis are cloned\n\n    cy.get(\".t--entity-name:contains(Page1)\").its(\"length\").should(\"be.gt\", 1);\n    cy.get(explorerLocators.addEntityAPI).last().click();\n    cy.get(`.t--entity-name:contains(${apiName})`).should(\"have.length\", 2);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Pages/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Creates a page with long name and checks if it shows tooltip on hover","suites":["Pages"],"updatePoint":{"line":23,"column":75},"line":23,"code":"  it(\"Creates a page with long name and checks if it shows tooltip on hover\", () => {\n    cy.Createpage(veryLongPageName);\n    cy.PublishtheApp();\n    cy.get(`.t--page-switch-tab:contains(${veryLongPageName})`).trigger(\"mouseover\");\n    cy.get(\".bp3-popover-content\").should($x => {\n      expect($x).contain(veryLongPageName);\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Pages/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks if 404 is showing correct route","suites":["Pages"],"updatePoint":{"line":31,"column":44},"line":31,"code":"  it(\"Checks if 404 is showing correct route\", () => {\n    cy.visit(\"/route-that-does-not-exist\");\n    cy.get(\".bold-text\").should($x => {\n      expect($x).contain(\"Page not found\");\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Pages/Pages_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks entity explorer and property pane visiblity","suites":["Preview mode functionality"],"updatePoint":{"line":7,"column":56},"line":7,"code":"  it(\"checks entity explorer and property pane visiblity\", function () {\n    cy.get(\".t--switch-preview-mode-toggle\").click(); // in preview mode, entity explorer and property pane are not visible\n\n    cy.get(\".t--entity-explorer\").should(\"not.be.visible\");\n    cy.get(\".t--property-pane-sidebar\").should(\"not.be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PreviewMode/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if widgets can be selected or not","suites":["Preview mode functionality"],"updatePoint":{"line":13,"column":46},"line":13,"code":"  it(\"checks if widgets can be selected or not\", function () {\n    // in preview mode, entity explorer and property pane are not visible\n    const selector = `.t--draggable-buttonwidget`;\n    cy.wait(500);\n    cy.get(selector).first().trigger(\"mouseover\", {\n      force: true\n    }).wait(500);\n    cy.get(`${selector}:first-of-type .t--widget-propertypane-toggle > .t--widget-name`).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PreviewMode/PreviewMode_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if we should show the product updates button and it opens the updates modal","suites":["Check for product updates button and modal"],"updatePoint":{"line":4,"column":87},"line":4,"code":"  it(\"Check if we should show the product updates button and it opens the updates modal\", function () {\n    cy.get(commonlocators.homeIcon).click({\n      force: true\n    }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.window().its(\"store\").invoke(\"getState\").then(state => {\n      const {\n        newReleasesCount,\n        releaseItems\n      } = state.ui.releases;\n\n      if (Array.isArray(releaseItems) && releaseItems.length > 0) {\n        cy.get(\"[data-cy=t--product-updates-btn]\").contains(\"What's New?\").click({\n          force: true\n        }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n        cy.wait(500); // modal transition\n\n        cy.get(\".bp3-dialog-container\").contains(\"Product Updates\");\n        cy.get(\"[data-cy=t--product-updates-close-btn]\").click({\n          force: true\n        }); //eslint-disable-next-line cypress/no-unnecessary-waiting\n\n        cy.wait(500); // modal transition\n\n        cy.get(\".bp3-dialog-container\").should(\"not.exist\");\n      } else {\n        cy.get(\"[data-cy=t--product-updates-btn]\").should(\"not.exist\");\n      }\n    });\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/ProductUpdates/ProductUpdates_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if the connection shows an error state when a connection has an error","suites":["Property pane connections error state"],"updatePoint":{"line":7,"column":81},"line":7,"code":"  it(\"Check if the connection shows an error state when a connection has an error\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.testJsontext(\"tabledata\", \"{{error}}\");\n    cy.openPropertyPane(\"textwidget\");\n    cy.testJsontext(\"text\", \"{{Table1.searchText}}\"); // Find class which indicates an error\n\n    cy.get(\".t--connection-error\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPane_Connections_Error_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if CTA is shown when there is no action","suites":["Property pane CTA to add an action"],"updatePoint":{"line":7,"column":51},"line":7,"code":"  it(\"Check if CTA is shown when there is no action\", function () {\n    cy.openPropertyPane(\"tablewidget\");\n    cy.get(\".t--propertypane-connect-cta\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPaneCTA_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if CTA does not exist when there is an action","suites":["Property pane CTA to add an action"],"updatePoint":{"line":11,"column":57},"line":11,"code":"  it(\"Check if CTA does not exist when there is an action\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.get(\".t--propertypane-connect-cta\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/PropertyPane/PropertyPaneCTA_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create postgres datasource","suites":["Check datasource doc links"],"updatePoint":{"line":12,"column":35},"line":12,"code":"  it(\"1. Create postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Check that documentation opens global modal","suites":["Check datasource doc links"],"updatePoint":{"line":26,"column":52},"line":26,"code":"  it(\"2. Check that documentation opens global modal\", function () {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(\".t--datasource-documentation-link\").click();\n    cy.get(commonlocators.globalSearchModal);\n    cy.get(\"body\").click(0, 0);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Delete the query and datasources","suites":["Check datasource doc links"],"updatePoint":{"line":32,"column":41},"line":32,"code":"  it(\"3. Delete the query and datasources\", function () {\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(postgresDatasourceName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/Datasourcedocs_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create postgres datasource","suites":["Switch datasource"],"updatePoint":{"line":13,"column":35},"line":13,"code":"  it(\"1. Create postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create mongo datasource","suites":["Switch datasource"],"updatePoint":{"line":27,"column":32},"line":27,"code":"  it(\"2. Create mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.generateUUID().then(uid => {\n      mongoDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(mongoDatasourceName, {\n        force: true\n      }).should(\"have.value\", mongoDatasourceName).blur();\n    });\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. By switching datasources execute a query with both the datasources","suites":["Switch datasource"],"updatePoint":{"line":41,"column":75},"line":41,"code":"  it(\"3. By switching datasources execute a query with both the datasources\", function () {\n    cy.NavigateToActiveDSQueryPane(postgresDatasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    });\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from public.users limit 10\");\n    cy.wait(3000);\n    cy.runQuery();\n    cy.get(\".t--switch-datasource\").click();\n    cy.contains(\".t--datasource-option\", mongoDatasourceName).click().wait(1000);\n    cy.wait(\"@saveAction\").should(\"have.nested.property\", \"response.body.data.isValid\", true);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Delete the query and datasources","suites":["Switch datasource"],"updatePoint":{"line":53,"column":41},"line":53,"code":"  it(\"4. Delete the query and datasources\", function () {\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(postgresDatasourceName);\n    cy.deleteDatasource(mongoDatasourceName);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/QueryPaneTests/SwitchDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in datasource forms","suites":["Undo/Redo functionality"],"updatePoint":{"line":15,"column":42},"line":15,"code":"  it(\"Checks undo/redo in datasource forms\", () => {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.generateUUID().then(uid => {\n      let postgresDatasourceName = uid;\n      cy.get(\".t--edit-datasource-name\").click();\n      cy.get(\".t--edit-datasource-name input\").clear().type(postgresDatasourceName, {\n        force: true\n      }).should(\"have.value\", postgresDatasourceName).blur();\n    });\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.get(datasourceEditor.username).type(datasourceFormData[\"postgres-username\"]);\n    cy.get(datasourceEditor.password).type(datasourceFormData[\"postgres-password\"]);\n    cy.get(datasourceEditor.sectionAuthentication).click();\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${datasourceEditor.sectionAuthentication} .bp3-icon-chevron-up`).should(\"exist\");\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(datasourceEditor.username).should(\"be.empty\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo for Api pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":40,"column":35},"line":40,"code":"  it(\"Checks undo/redo for Api pane\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(`${apiwidget.headerKey}`).type(\"Authorization\");\n    cy.get(\"body\").click(0, 0);\n    cy.get(apiwidget.settings).click({\n      force: true\n    });\n    cy.get(apiwidget.onPageLoad).click({\n      force: true\n    });\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(apiwidget.headers).should(\"have.class\", \"react-tabs__tab--selected\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(`${apiwidget.resourceUrl} .CodeMirror-placeholder`).should(\"have.text\", \"https://mock-api.appsmith.com/users\");\n    cy.get(`${apiwidget.headerKey} .CodeMirror-placeholder`).should(\"have.text\", \"Key 1\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(`${apiwidget.headerKey} .cm-m-null`).should(\"have.text\", \"Authorization\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in query editor","suites":["Undo/Redo functionality"],"updatePoint":{"line":65,"column":38},"line":65,"code":"  it(\"Checks undo/redo in query editor\", () => {\n    cy.get(\".bp3-icon-chevron-left\").click();\n    cy.get(\".t--create-query\").last().click();\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{{FirstAPI}}\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.get(\"body\").click(0, 0); // verifying Relationships is visible on dynamic binding\n\n    cy.get(\".icon-text\").eq(1).within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Incoming entities\");\n    });\n    cy.get(\".icon-text\").eq(1).next().children().within(() => {\n      cy.get(\".connection\").should(\"have.text\", \"FirstAPI\");\n    });\n    cy.get(\".icon-text\").last().within(() => {\n      cy.get(\".connection-type\").should(\"have.text\", \"Outgoing entities\");\n    });\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\".CodeMirror-code\").should(\"not.have.text\", \"{{FirstAPI}}\");\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\".CodeMirror-code\").should(\"have.text\", \"{{FirstAPI}}\"); // undo/redo through app menu\n\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    });\n    cy.get(\".CodeMirror-code\").should(\"not.have.text\", \"{{FirstAPI}}\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo in JS Objects","suites":["Undo/Redo functionality"],"updatePoint":{"line":99,"column":36},"line":99,"code":"  it(\"Checks undo/redo in JS Objects\", () => {\n    cy.NavigateToJSEditor();\n    cy.wait(1000);\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"{downarrow}{downarrow}{downarrow}  \").type(\"test:()=>{},\");\n    cy.get(\"body\").type(`{${modifierKey}}z{${modifierKey}}z{${modifierKey}}z`); // verifying test function is not visible in response tab after undo\n\n    cy.get(\".function-name\").should(\"not.contain.text\", \"test\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z{${modifierKey}}{shift}z{${modifierKey}}{shift}z`); // verifying test function is visible in response tab after redo\n\n    cy.get(\".function-name\").should(\"contain.text\", \"test\"); // performing undo from app menu\n\n    cy.get(\".t--application-name\").click({\n      force: true\n    });\n    cy.get(\"li:contains(Edit)\").trigger(\"mouseover\");\n    cy.get(\"li:contains(Undo)\").click({\n      multiple: true\n    }); // cy.get(\".function-name\").should(\"not.contain.text\", \"test\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Checks undo/redo for Authenticated APIs","suites":["Undo/Redo functionality"],"updatePoint":{"line":118,"column":45},"line":118,"code":"  it(\"Checks undo/redo for Authenticated APIs\", () => {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click({\n      force: true\n    });\n    cy.wait(2000);\n    cy.get(\"input[name='url']\").type(testdata.baseUrl);\n    cy.get(\"input[name='headers[0].key']\").type(testdata.headerKey);\n    cy.get(\"body\").click(0, 0);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(\"input[name='url']\").should(\"have.value\", \"\");\n    cy.get(\"input[name='headers[0].key']\").should(\"have.value\", \"\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(\"input[name='url']\").should(\"have.value\", \"https://mock-api.appsmith.com/\");\n    cy.get(\"input[name='headers[0].key']\").should(\"have.value\", \"Content-Type\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_Editor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for new widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":18,"column":38},"line":18,"code":"  it(\"checks undo/redo for new widgets\", function () {\n    cy.get(explorer.addWidget).click();\n    cy.dragAndDropToCanvas(\"checkboxwidget\", {\n      x: 200,\n      y: 200\n    });\n    cy.get(\"body\").click();\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\");\n  }); // it(\"checks moving of widgets\", function() {","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for toggle control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":67,"column":58},"line":67,"code":"  it(\"checks undo/redo for toggle control in property pane\", function () {\n    cy.openPropertyPane(\"checkboxwidget\");\n    cy.CheckWidgetProperties(commonlocators.disableCheckbox);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} label`).should(\"not.have.class\", \"checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"not.be.disabled\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(`${widgetsPage.disable} label`).should(\"have.class\", \"checked\");\n    cy.get(widgetLocators.checkboxWidget + \" \" + \"input\").should(\"be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for input control in property pane","suites":["Undo/Redo functionality"],"updatePoint":{"line":79,"column":57},"line":79,"code":"  it(\"checks undo/redo for input control in property pane\", function () {\n    cy.get(widgetsPage.inputLabelControl).type(\"1\");\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.inputLabelControl).contains(\"Label1\");\n    cy.get(`${publish.checkboxWidget} label`).should(\"have.text\", \"Label1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for deletion of widgets","suites":["Undo/Redo functionality"],"updatePoint":{"line":91,"column":46},"line":91,"code":"  it(\"checks undo/redo for deletion of widgets\", function () {\n    cy.deleteWidget(widgetsPage.checkboxWidget);\n    cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.checkboxWidget).should(\"exist\"); // cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    // cy.wait(100);\n    // cy.get(widgetsPage.checkboxWidget).should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if property Pane is open on undo/redo property changes","suites":["Undo/Redo functionality"],"updatePoint":{"line":100,"column":67},"line":100,"code":"  it(\"checks if property Pane is open on undo/redo property changes\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    cy.wait(100);\n    cy.get(widgetsPage.inputTextControl).type(\"1\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label\");\n    cy.closePropertyPane();\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.wait(100);\n    cy.get(widgetsPage.propertypaneText).should(\"exist\");\n    cy.get(widgetsPage.inputTextControl).contains(\"Label1\");\n    cy.deleteWidget(widgetsPage.textWidget);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks if toast is shown while undo/redo widget deletion or creation only the first time","suites":["Undo/Redo functionality"],"updatePoint":{"line":119,"column":94},"line":119,"code":"  it(\"checks if toast is shown while undo/redo widget deletion or creation only the first time\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 400,\n      y: 400\n    });\n    localStorage.removeItem(\"undoToastShown\");\n    localStorage.removeItem(\"redoToastShown\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(commonlocators.toastmsg).eq(0).contains(\"is removed\");\n    cy.get(commonlocators.toastmsg).eq(1).contains(\"REDO\");\n    cy.get(commonlocators.toastBody).first().click();\n    cy.wait(100);\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(commonlocators.toastmsg).eq(0).contains(\"is added back\");\n    cy.get(commonlocators.toastmsg).eq(1).contains(\"UNDO\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for color picker","suites":["Undo/Redo functionality"],"updatePoint":{"line":135,"column":39},"line":135,"code":"  it(\"checks undo/redo for color picker\", function () {\n    cy.dragAndDropToCanvas(\"textwidget\", {\n      x: 100,\n      y: 100\n    });\n    cy.get(widgetsPage.textColor).first().click({\n      force: true\n    });\n    cy.xpath(widgetsPage.greenColor).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.wait(\"@updateLayout\");\n    cy.readTextDataValidateCSS(\"color\", \"rgb(3, 179, 101)\");\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#231F20\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.textColor).first().invoke(\"attr\", \"value\").should(\"contain\", \"#03b365\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"checks undo/redo for option control for radio button","suites":["Undo/Redo functionality"],"updatePoint":{"line":153,"column":58},"line":153,"code":"  it(\"checks undo/redo for option control for radio button\", function () {\n    cy.dragAndDropToCanvas(\"radiogroupwidget\", {\n      x: 200,\n      y: 600\n    });\n    cy.get(widgetsPage.RadioInput).first().type(\"1\");\n    cy.get(widgetsPage.RadioInput).first().blur(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(200);\n    cy.get(\"body\").type(`{${modifierKey}}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes\");\n    cy.get(\"body\").type(`{${modifierKey}}{shift}z`);\n    cy.get(widgetsPage.RadioInput).first().invoke(\"attr\", \"value\").should(\"contain\", \"Yes1\");\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/Replay/Replay_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Select widgets using cmd + click and group using cmd + G","suites":["Widget Grouping"],"updatePoint":{"line":7,"column":62},"line":7,"code":"  it(\"Select widgets using cmd + click and group using cmd + G\", function () {\n    // Selection\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[3].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1); // Grouping\n\n    const isMac = Cypress.platform === \"darwin\";\n\n    if (isMac) {\n      cy.get(\"body\").type(\"{cmd}{g}\");\n    } else {\n      cy.get(\"body\").type(\"{ctrl}{g}\");\n    }\n\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 1).as(\"group\");\n    cy.get(\"body\").click();\n    cy.get(`@group`).find(`[data-testid=\"test-widget\"]`).should(\"have.length\", 2);\n    cy.get(`@group`).find(`.t--draggable-buttonwidget`);\n    cy.get(`@group`).find(`.t--draggable-imagewidget`);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/WidgetGrouping/WidgetGrouping_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Multi Select widgets using cmd + click","suites":["Widget Selection"],"updatePoint":{"line":7,"column":44},"line":7,"code":"  it(\"Multi Select widgets using cmd + click\", function () {\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`#${dsl.dsl.children[1].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`#${dsl.dsl.children[2].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 3);\n    cy.get(`#${dsl.dsl.children[0].widgetId}`).click({\n      ctrlKey: true\n    });\n    cy.get(`div[data-testid='t--selected']`).should(\"have.length\", 2);\n    cy.get(`.t--multi-selection-box`).should(\"have.length\", 1);\n  });","file":"integration/Smoke_TestSuite/ClientSideTests/WidgetSelection/WidgetSelection_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Will load an api on load","suites":["API Panel Test Functionality"],"updatePoint":{"line":11,"column":30},"line":11,"code":"  it(\"Will load an api on load\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{PageLoadApi.data.data}}\");\n    cy.wait(\"@updateLayout\");\n    cy.get(commonlocators.toastMsg).contains(`[PageLoadApi] will be executed automatically on page load`);\n    cy.reload();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ActionExecution/Action_PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Shows which action failed on action fail.","suites":["API Panel Test Functionality"],"updatePoint":{"line":23,"column":47},"line":23,"code":"  it(\"Shows which action failed on action fail.\", function () {\n    cy.wait(2000);\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"PageLoadApi2\");\n    cy.enterDatasourceAndPath(\"https://abc.com\", \"users\");\n    cy.WaitAutoSave();\n    cy.get(\"li:contains('Settings')\").click({\n      force: true\n    });\n    cy.get(\"[name=executeOnLoad]\").click({\n      force: true\n    });\n    cy.wait(\"@setExecuteOnLoad\");\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.testJsontext(\"tabledata\", \"{{PageLoadApi2.data.data}}\");\n    cy.wait(\"@updateLayout\");\n    cy.reload();\n    cy.wait(3000);\n    cy.get(commonlocators.toastMsg).contains(`The action \"PageLoadApi2\" has failed.`);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ActionExecution/Action_PageOnLoad_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow Run and Delete","suites":["Test curl import flow"],"updatePoint":{"line":8,"column":42},"line":8,"code":"  it(\"Test curl import flow Run and Delete\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type(\"curl -X GET https://mock-api.appsmith.com/users\");\n    cy.importCurl();\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    }); //cy.WaitAutoSave();\n\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.get(ApiEditor.formActionButtons).should(\"be.visible\");\n    cy.get(ApiEditor.ApiActionMenu).click();\n    cy.get(ApiEditor.ApiDeleteBtn).click();\n    cy.wait(\"@deleteAction\");\n    cy.get(\"@deleteAction\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiFlow/CurlImportFlow_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PUT Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":17,"column":33},"line":17,"code":"  it(\"PUT Action test API fetaure\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"FirstAPI\");\n    cy.SelectAction(testdata.putAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodput, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/putjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().type(json, {\n        force: true\n      });\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodput, testdata.Put);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"updatedAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Post Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":41,"column":34},"line":41,"code":"  it(\"Post Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.postAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodpost, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/postjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().type(json, {\n        force: true\n      });\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodpost, testdata.Post);\n    });\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"createdAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"PATCH Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":65,"column":35},"line":65,"code":"  it(\"PATCH Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.patchAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methodpatch, testdata.headerKey, testdata.headerValue);\n    cy.readFile(\"cypress/fixtures/patchjson.txt\").then(json => {\n      cy.log(json);\n      cy.contains(ApiEditor.bodyTab).click({\n        force: true\n      });\n      cy.xpath(apiwidget.postbody).click({\n        force: true\n      }).focus().type(json, {\n        force: true\n      });\n      cy.WaitAutoSave();\n      cy.RunAPI();\n      cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methodpatch, testdata.Patch);\n    });\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"updatedAt\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Delete Action test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":89,"column":36},"line":89,"code":"  it(\"Delete Action test API fetaure\", function () {\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.SelectAction(testdata.deleteAction);\n    cy.EnterSourceDetailsWithbody(testdata.baseUrl, testdata.methoddelete, testdata.headerKey, testdata.headerValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methoddelete, testdata.Delete);\n    cy.ResponseStatusCheck(\"200\");\n    cy.log(\"Response code check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test GET Action for mock API with header and pagination","suites":["API Panel Test Functionality"],"updatePoint":{"line":100,"column":61},"line":100,"code":"  it(\"Test GET Action for mock API with header and pagination\", function () {\n    const apiname = \"SecondAPI\";\n    cy.CreateAPI(apiname);\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext);\n    cy.log(\"Response data check successful\");\n    cy.switchToPaginationTab();\n    cy.selectPaginationType(apiwidget.paginationWithUrl);\n    cy.enterUrl(apiname, apiwidget.panigationNextUrl, testdata.nextUrl);\n    cy.clickTest(apiwidget.TestNextUrl);\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods.concat(testdata.next), testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"Josh M Krantz\");\n    cy.log(\"Response data check successful\");\n    cy.switchToPaginationTab();\n    cy.enterUrl(apiname, apiwidget.panigationPrevUrl, testdata.prevUrl);\n    cy.clickTest(apiwidget.TestPreUrl);\n    cy.validateRequest(apiname, testdata.baseUrl, testdata.methods.concat(testdata.prev), testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext);\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API check with query params test API fetaure","suites":["API Panel Test Functionality"],"updatePoint":{"line":130,"column":50},"line":130,"code":"  it(\"API check with query params test API fetaure\", function () {\n    cy.CreateAPI(\"ThirdAPI\");\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.queryAndValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"ThirdAPI\", testdata.baseUrl, testdata.queryAndValue, testdata.Get);\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(testdata.responsetext3);\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"API check with Invalid Header","suites":["API Panel Test Functionality"],"updatePoint":{"line":142,"column":35},"line":142,"code":"  it(\"API check with Invalid Header\", function () {\n    cy.CreateAPI(\"FourthAPI\");\n    cy.log(\"Creation of API Action successful\");\n    cy.EnterSourceDetailsWithHeader(testdata.baseUrl, testdata.methods, testdata.headerKey, testdata.invalidValue);\n    cy.WaitAutoSave();\n    cy.RunAPI();\n    cy.validateRequest(\"FourthAPI\", testdata.baseUrl, testdata.methods, testdata.Get, true);\n    cy.ResponseStatusCheck(\"5000\");\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"Invalid value for Content-Type\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_All_Verb_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow for POST action with JSON body","suites":["Test curl import flow"],"updatePoint":{"line":8,"column":58},"line":8,"code":"  it(\"Test curl import flow for POST action with JSON body\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type('curl -d \\'{\"name\":\"morpheus\",\"job\":\"leader\"}\\' -H Content-Type:application/json -X POST https://mock-api.appsmith.com/echo/post', {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"201 CREATED\");\n    cy.get(\"@curlImport\").then(response => {\n      cy.expect(response.response.body.responseMeta.success).to.eq(true);\n      cy.get(apiwidget.ApiName).invoke(\"text\").then(text => {\n        const someText = text;\n        expect(someText).to.equal(response.response.body.data.name);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_CurlPOSTImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Test curl import flow for POST action with multipart form data","suites":["Test curl import flow"],"updatePoint":{"line":32,"column":68},"line":32,"code":"  it(\"Test curl import flow for POST action with multipart form data\", function () {\n    localStorage.setItem(\"ApiPaneV2\", \"ApiPaneV2\");\n    cy.NavigateToApiEditor();\n    cy.get(pages.integrationCreateNew).should(\"be.visible\").click({\n      force: true\n    });\n    cy.get(ApiEditor.curlImage).click({\n      force: true\n    });\n    cy.get(\"textarea\").type(\"curl --request POST http://httpbin.org/post -F 'randomKey=randomValue' --form 'randomKey2=\\\"randomValue2\\\"'\", {\n      force: true,\n      parseSpecialCharSequences: false\n    });\n    cy.importCurl();\n    cy.RunAPI();\n    cy.ResponseStatusCheck(\"200 OK\");\n    cy.log(\"Ran the API successfully\");\n    cy.get(\"@postExecute\").then(response => {\n      cy.log(response.response.body);\n      cy.expect(response.response.body.responseMeta.success).to.eq(true); // Asserting if the form key value are returned in the response\n\n      cy.expect(response.response.body.data.body.form.randomKey).to.eq(\"randomValue\"); // Asserting the content type header set in curl import is multipart/form-data\n\n      cy.expect(response.response.body.data.body.headers[\"Content-Type\"]).contains(\"multipart/form-data;boundary\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_CurlPOSTImport_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Moustache test Functionality","suites":["Moustache test Functionality"],"updatePoint":{"line":16,"column":34},"line":16,"code":"  it(\"Moustache test Functionality\", function () {\n    cy.openPropertyPane(\"textwidget\");\n    cy.widgetText(\"Api\", widgetsPage.textWidget, widgetsPage.textInputval);\n    cy.testCodeMirror(\"users\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"TestAPINew\");\n    cy.log(\"Creation of API Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.moustacheMethod); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(1000);\n    cy.RunAPI();\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.log(\"Response code check successful\");\n    cy.ResponseCheck(\"janet.weaver@reqres.in\");\n    cy.log(\"Response data check successful\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ApiPaneTests/API_Mustache_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":12,"column":59},"line":12,"code":"  it(\"1. Create, test, save then delete a Arango datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ArangoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillArangoDBDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Arango MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource","suites":["Arango datasource test cases"],"updatePoint":{"line":29,"column":120},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Arango datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.ArangoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillArangoDBDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Arango datasource test cases"],"updatePoint":{"line":42,"column":54},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/ArangoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Can create New Authentication API datasource","suites":["Authenticated API Datasource"],"updatePoint":{"line":4,"column":50},"line":4,"code":"  it(\"Can create New Authentication API datasource\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.get(apiwidget.createAuthApiDatasource).click({\n      force: true\n    });\n    cy.wait(\"@createDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/AuthenticatedApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check whether the delete button has the right color","suites":["Datasource form related tests"],"updatePoint":{"line":7,"column":57},"line":7,"code":"  it(\"Check whether the delete button has the right color\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"Testapi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(\".t--store-as-datasource\").click();\n    cy.get(\".t--add-field\").first().click();\n    cy.get(\".t--delete-field\").should(\"attr\", \"color\", \"#A3B3BF\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if save button is disabled","suites":["Datasource form related tests"],"updatePoint":{"line":15,"column":38},"line":15,"code":"  it(\"Check if save button is disabled\", function () {\n    cy.get(\".t--save-datasource\").should(\"not.be.disabled\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Check if saved api as a datasource does not fail on cloning","suites":["Datasource form related tests"],"updatePoint":{"line":18,"column":65},"line":18,"code":"  it(\"Check if saved api as a datasource does not fail on cloning\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.GlobalSearchEntity(\"Testapi\");\n    cy.xpath('//*[local-name()=\"g\" and @id=\"Icon/Outline/more-vertical\"]').last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.get('.single-select:contains(\"Copy to page\")').click();\n    cy.get('.single-select:contains(\"Page1\")').click();\n    cy.validateToastMessage(\"Testapi action copied to page Page1 successfully\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/DatasourceForm_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create, test, save then delete a user mock datasource","suites":["Create, test, save then delete a user mock datasource"],"updatePoint":{"line":7,"column":59},"line":7,"code":"  it(\"Create, test, save then delete a user mock datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.mockUserDatabase).click();\n    cy.wait(1000);\n    cy.get(datasource.mockUserDatasources).last().click({\n      force: true\n    });\n    cy.fillUsersMockDatasourceForm();\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MockDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create with whitespaces in host address and database name, test, save then delete a user mock datasource","suites":["Create, test, save then delete a user mock datasource"],"updatePoint":{"line":17,"column":110},"line":17,"code":"  it(\"Create with whitespaces in host address and database name, test, save then delete a user mock datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.mockUserDatabase).click();\n    cy.wait(1000);\n    cy.get(datasource.mockUserDatasources).last().click({\n      force: true\n    });\n    cy.fillUsersMockDatasourceForm(true);\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MockDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":7,"column":55},"line":7,"code":"  it(\"Create, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm();\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create with trailing white spaces in host address and database name, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":14,"column":116},"line":14,"code":"  it(\"Create with trailing white spaces in host address and database name, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm(true); //fills form with trailing white spaces\n\n    cy.testSaveDeleteDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create, test, save then delete a mongo datasource","suites":["Create, test, save then delete a mongo datasource"],"updatePoint":{"line":9,"column":55},"line":9,"code":"  it(\"Create, test, save then delete a mongo datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MongoDB).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMongoDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\"\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    /*\n    cy.NavigateToQueryEditor();\n     cy.get(\"@createDatasource\").then((httpResponse) => {\n      datasourceName = \"Untitled Datasource\";\n       cy.contains(\".t--datasource-name\", datasourceName)\n        .first()\n        .find(queryLocators.createQuery)\n        .click();\n    });\n     cy.get(\"@getPluginForm\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    cy.xpath('//div[contains(text(),\"Form Input\")]').click({ force: true });\n    cy.xpath('//div[contains(text(),\"Raw Input\")]').click({ force: true });\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\")\n      .first()\n      .focus()\n      .type(`{\"find\": \"listingsAndReviews\",\"limit\": 10}`, {\n        parseSpecialCharSequences: false,\n      });\n     cy.EvaluateCurrentValue(`{\"find\": \"listingsAndReviews\",\"limit\": 10}`);\n    cy.runAndDeleteQuery();\n    });\n    /*\n    it(\"Create, test, save then delete a firestore datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Firestore).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.firestoreDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\",\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\",\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    });\n    it(\"Create, test, save then delete a amazon datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.AmazonS3).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.amazonDatasourceForm();\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\",\n    }).as(\"testDatasource\");\n    cy.intercept(\"PUT\", \"/api/v1/datasources/*\", {\n      fixture: \"saveAction.json\",\n    }).as(\"saveDatasource\");\n    cy.get(\".t--test-datasource\").click();\n    cy.wait(\"@testDatasource\");\n    cy.get(\".t--save-datasource\").click();\n    cy.wait(\"@saveDatasource\").should(\n      \"have.nested.property\",\n      \"response.body.responseMeta.status\",\n      200,\n    );\n    });\n    */\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MongoDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":12,"column":58},"line":12,"code":"  it(\"1. Create, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMsSQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MsSQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource","suites":["MsSQL datasource test cases"],"updatePoint":{"line":29,"column":119},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MsSQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MsSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMsSQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MsSQL datasource test cases"],"updatePoint":{"line":42,"column":54},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MsSQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":12,"column":58},"line":12,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":22,"column":119},"line":22,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":32,"column":54},"line":32,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQL_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":12,"column":58},"line":12,"code":"  it(\"1. Create, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `MySQL MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource","suites":["MySQL datasource test cases"],"updatePoint":{"line":29,"column":119},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a MySQL datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.MySQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillMySQLDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["MySQL datasource test cases"],"updatePoint":{"line":42,"column":54},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/MySQLDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create an API with app url and save as Datasource","suites":["Datasource form related tests"],"updatePoint":{"line":8,"column":55},"line":8,"code":"  it(\"Create an API with app url and save as Datasource\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"TestOAuth\");\n    cy.get(apiwidget.resourceUrl).first().click({\n      force: true\n    }).type(testdata.appUrl);\n    cy.get(\".t--store-as-datasource\").click();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/OAuthServiceValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Add Oauth details to datasource and save","suites":["Datasource form related tests"],"updatePoint":{"line":16,"column":46},"line":16,"code":"  it(\"Add Oauth details to datasource and save\", function () {\n    cy.get(\".t--save-datasource\").should(\"not.be.disabled\");\n    cy.addOauthAuthDetails(testdata.accessTokenUrl, testdata.clientID, testdata.clientSecret, testdata.authorizationURL);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/OAuthServiceValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"validate save and Authorise","suites":["Datasource form related tests"],"updatePoint":{"line":20,"column":33},"line":20,"code":"  it(\"validate save and Authorise\", function () {\n    cy.get(datasource.saveAndAuthorize).click();\n    cy.contains(\"#login-submit\", \"Login\");\n    cy.url().should(\"include\", \"oauth.mocklab.io/oauth/authorize\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test@email.com\");\n    cy.xpath('//input[@name=\"email\"]').type(\"Test\");\n    cy.xpath(\"//input[@name='password']\").type(\"Test@123\");\n    cy.xpath(\"//input[@id='login-submit']\").click();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/OAuthServiceValidation_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":12,"column":61},"line":12,"code":"  it(\"1. Create, test, save then delete a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource","suites":["Postgres datasource test cases"],"updatePoint":{"line":22,"column":122},"line":22,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a postgres datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Postgres datasource test cases"],"updatePoint":{"line":32,"column":54},"line":32,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/PostgresDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":12,"column":61},"line":12,"code":"  it(\"1. Create, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillRedshiftDatasourceForm();\n    cy.generateUUID().then(UUID => {\n      datasourceName = `Redshift MOCKDS ${UUID}`;\n      cy.renameDatasource(datasourceName);\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource","suites":["Redshift datasource test cases"],"updatePoint":{"line":29,"column":122},"line":29,"code":"  it(\"2. Create with trailing white spaces in host address and database name, test, save then delete a Redshift datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.Redshift).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillRedshiftDatasourceForm(true);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n    cy.intercept(\"POST\", \"/api/v1/datasources/test\", {\n      fixture: \"testAction.json\"\n    }).as(\"testDatasource\");\n    cy.testSaveDatasource(false);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Create a new query from the datasource editor","suites":["Redshift datasource test cases"],"updatePoint":{"line":42,"column":54},"line":42,"code":"  it(\"3. Create a new query from the datasource editor\", function () {\n    // cy.get(datasource.createQuerty).click();\n    cy.get(`${datasourceEditor.datasourceCard} ${datasource.createQuerty}`).last().click();\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RedshiftDataSourceStub_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create a rest datasource","suites":["Create a rest datasource"],"updatePoint":{"line":7,"column":30},"line":7,"code":"  it(\"Create a rest datasource\", function () {\n    cy.NavigateToAPI_Panel();\n    cy.CreateAPI(\"Testapi\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.get(\".t--store-as-datasource\").click();\n    cy.saveDatasource();\n    cy.contains(\".datasource-highlight\", \"https://mock-api.appsmith.com\");\n    cy.SaveAndRunAPI();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/Datasources/RestApiDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Empty Message validation for Widgets/API/Queries","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":9,"column":54},"line":9,"code":"  it(\"Empty Message validation for Widgets/API/Queries\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToWidgetsInExplorer();\n    cy.get(explorer.NoWidgetsMsg).should(\"be.visible\");\n    cy.NavigateToAPI_Panel();\n    cy.NavigateToQueriesInExplorer();\n    cy.reload();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Move to page / edit API name /properties validation","suites":["Entity explorer API pane related testcases"],"updatePoint":{"line":17,"column":57},"line":17,"code":"  it(\"Move to page / edit API name /properties validation\", function () {\n    cy.log(\"Login Successful\");\n    cy.NavigateToAPI_Panel();\n    cy.log(\"Navigation to API Panel screen successful\");\n    cy.CreateAPI(\"FirstAPI\");\n    cy.log(\"Creation of FirstAPI Action successful\");\n    cy.enterDatasourceAndPath(testdata.baseUrl, testdata.methods);\n    cy.SaveAndRunAPI();\n    cy.validateRequest(\"FirstAPI\", testdata.baseUrl, testdata.methods, testdata.Get);\n    cy.ResponseStatusCheck(testdata.successStatusCode);\n    cy.get(`.t--entity.action:contains(FirstAPI)`).find(explorer.collapse).click();\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis).to.have.length(5);\n      expect($lis.eq(0)).to.contain(\"{{FirstAPI.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{FirstAPI.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{FirstAPI.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{FirstAPI.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{FirstAPI.clear()}}\");\n    });\n    cy.get(apiwidget.actionlist).contains(testdata.Get).should(\"be.visible\");\n    cy.Createpage(pageid);\n    cy.GlobalSearchEntity(\"FirstAPI\");\n    cy.EditApiNameFromExplorer(\"SecondAPI\");\n    cy.GlobalSearchEntity(\"SecondAPI\");\n    cy.xpath(apiwidget.popover).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.MoveAPIToPage(pageid);\n    cy.SearchEntityandOpen(\"SecondAPI\");\n    /*To be enabled once the bug is fixed\n    cy.get(apiwidget.propertyList).then(function($lis) {\n      expect($lis).to.have.length(3);\n      expect($lis.eq(0)).to.contain('{{SecondAPI.isLoading}}');\n      expect($lis.eq(1)).to.contain('{{SecondAPI.data}}');\n      expect($lis.eq(2)).to.contain('{{SecondAPI.run()}}');\n    });*/\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_API_Pane_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a query with dataSource in explorer","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":18,"column":51},"line":18,"code":"  it(\"1. Create a query with dataSource in explorer\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.getPluginFormsAndCreateDatasource();\n    cy.fillPostgresDatasourceForm();\n    cy.testSaveDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.NavigateToActiveDSQueryPane(datasourceName);\n    });\n    cy.get(\"@getPluginForm\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users\");\n    cy.EvaluateCurrentValue(\"select * from users\");\n    cy.get(\".t--action-name-edit-field\").click({\n      force: true\n    });\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n      cy.get(`.t--entity.action:contains(Query1)`).scrollIntoView({\n        force: true\n      }).find(explorer.collapse).click({\n        force: true\n      });\n      cy.get(apiwidget.propertyList).then(function ($lis) {\n        expect($lis).to.have.length(5);\n        expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n        expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n        expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n        expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n        expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a page and copy query in explorer","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":52,"column":49},"line":52,"code":"  it(\"2. Create a page and copy query in explorer\", function () {\n    cy.Createpage(pageid);\n    cy.GlobalSearchEntity(\"Query1\");\n    cy.xpath(apiwidget.popover).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.copyEntityToPage(pageid);\n    cy.SearchEntityandOpen(\"Query1\");\n    cy.runQuery();\n    cy.get(`.t--entity.action:contains(Query1)`).should(\"have.length\", 2);\n    cy.get(`.t--entity.action:contains(Query1)`).find(explorer.collapse).click({\n      multiple: true\n    });\n    cy.get(apiwidget.propertyList).then(function ($lis) {\n      expect($lis.eq(0)).to.contain(\"{{Query1.isLoading}}\");\n      expect($lis.eq(1)).to.contain(\"{{Query1.data}}\");\n      expect($lis.eq(2)).to.contain(\"{{Query1.responseMeta}}\");\n      expect($lis.eq(3)).to.contain(\"{{Query1.run()}}\");\n      expect($lis.eq(4)).to.contain(\"{{Query1.clear()}}\");\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Delete query and rename datasource in explorer","suites":["Entity explorer tests related to copy query"],"updatePoint":{"line":73,"column":55},"line":73,"code":"  it(\"3. Delete query and rename datasource in explorer\", function () {\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    });\n    cy.NavigateToDatasourceEditor();\n    cy.GlobalSearchEntity(`${datasourceName}`);\n    cy.get(`.t--entity-name:contains(${datasourceName})`).last().click();\n    cy.generateUUID().then(uid => {\n      updatedName = uid;\n      cy.log(\"complete uid :\" + updatedName);\n      updatedName = uid.replace(/-/g, \"_\").slice(1, 15);\n      cy.log(\"sliced id :\" + updatedName);\n      cy.EditEntityNameByDoubleClick(datasourceName, updatedName);\n      cy.SearchEntityandOpen(updatedName);\n      cy.hoverAndClick();\n      cy.get(apiwidget.delete).click({\n        force: true\n      }); //This is check to make sure if a datasource is active 409\n\n      cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 409);\n    });\n    cy.SearchEntityandOpen(\"Query1\");\n    cy.deleteQuery();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_CopyQuery_RenameDatasource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Entity explorer datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":21,"column":42},"line":21,"code":"  it(\"Entity explorer datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(apiwidget.apiTxt).clear().type(\"MyQuery\", {\n      force: true\n    }).should(\"have.value\", \"MyQuery\").blur();\n    cy.WaitAutoSave();\n    cy.GlobalSearchEntity(datasourceName);\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(explorer.datasourceStructure).first().find(explorer.collapse).click();\n    cy.get(explorer.datasourceColumn).first().click();\n    cy.get(\".bp3-popover-content\").should(\"be.visible\");\n    cy.get(explorer.templateMenuIcon).first().click({\n      force: true\n    });\n    cy.get(\".t--structure-template-menu-popover\").last().contains(\"SELECT\").click({\n      force: true\n    });\n    cy.wait(\"@createNewApi\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.GlobalSearchEntity(\"MyQuery\");\n    cy.get(`.t--entity-name:contains(MyQuery)`).click();\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(commonlocators.entityExplorersearch).clear({\n      force: true\n    });\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Refresh datasource structure","suites":["Entity explorer datasource structure"],"updatePoint":{"line":53,"column":34},"line":53,"code":"  it(\"Refresh datasource structure\", function () {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click({\n      force: true\n    }); //cy.GlobalSearchEntity(datasourceName);\n    // cy.get(`.t--entity.datasource:contains(${datasourceName})`)\n    //   .find(explorer.collapse)\n    //   .as(\"datasourceEntityCollapse\");\n    // cy.wait(\"@getDatasourceStructure\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n    //cy.get(commonlocators.entityExplorersearch).clear({ force: true });\n\n    const tableName = Math.random().toString(36).replace(/[^a-z]+/g, \"\");\n    cy.typeValueNValidate(`CREATE TABLE public.${tableName} ( ID int );`);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\", {\n      timeout: 8000\n    }).then(({\n      response\n    }) => {\n      expect(response.body.data.request.requestParams.Query.value).to.contain(tableName);\n    }); //cy.wait(8000)\n    // cy.GlobalSearchEntity(datasourceName);\n    // cy.get(\"@datasourceEntityCollapse\")\n    //   .first()\n    //   .click();\n    // cy.xpath(explorer.datsourceEntityPopover)\n    //   .last()\n    //   .click({ force: true });\n\n    cy.actionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"exist\"); // cy.get(explorer.refreshStructure).click({ force: true });\n    // TODO (Akash): Check for new table name to be visible in UI as well\n    // cy.get(explorer.datasourceStructure)\n    //   .contains(`public.${tableName}`)\n    //   .should(\"be.visible\");\n\n    cy.typeValueNValidate(`DROP TABLE public.${tableName}`);\n    cy.runQuery();\n    cy.actionContextMenuByEntityName(datasourceName, \"Refresh\");\n    cy.wait(\"@getDatasourceStructure\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(\"//div[text()='public.\" + tableName + \"']\").should(\"not.exist\");\n    cy.deleteQueryUsingContext();\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_Datasource_Structure_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Create and Run JSObject","suites":["Entity explorer JSEditor structure"],"updatePoint":{"line":12,"column":29},"line":12,"code":"  it(\"Create and Run JSObject\", function () {\n    cy.createJSObject('return \"Hello World\";');\n    cy.get(jsEditorLocators.outputConsole).contains(\"Hello World\");\n    cy.get(`.t--entity.t--jsaction:contains(JSObject1)`).should(\"have.length\", 1);\n    cy.get(`.t--entity.t--jsaction:contains(JSObject1)`).find(explorer.collapse).click({\n      multiple: true\n    }); // cy.get(jsEditorLocators.propertyList).then(function($lis) {\n    //   expect($lis).to.have.length(4);\n    //   expect($lis.eq(0)).to.contain(\"{{JSObject1.myFun2()}}\");\n    //   expect($lis.eq(0)).to.contain(\"{{JSObject1.myFun1()}}\");\n    //   expect($lis.eq(1)).to.contain(\"{{JSObject1.myVar1}}\");\n    //   expect($lis.eq(1)).to.contain(\"{{JSObject1.myVar2}}\");\n    // });\n  }); // it(\"Rename JSObject\", function() {","file":"integration/Smoke_TestSuite/ServerSideTests/ExplorerTests/Entity_Explorer_JSEditor_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app within an org and delete and re-create another app with same name","suites":["Create org and a new app / delete and recreate app"],"updatePoint":{"line":6,"column":82},"line":6,"code":"  it(\"create app within an org and delete and re-create another app with same name\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CreateAppForOrg(orgid, appid);\n      cy.DeleteAppByApi();\n      cy.NavigateToHome();\n      cy.CreateAppForOrg(orgid, appid);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateAppWithSameNameInOrg_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create org and then share with a user from UI","suites":["Create new org and share with a user"],"updatePoint":{"line":10,"column":51},"line":10,"code":"  it(\"create org and then share with a user from UI\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CheckShareIcon(orgid, 1);\n      cy.inviteUserForOrg(orgid, Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole); // check that the success message is correct\n\n      const successMessage = \"The user has been invited successfully\";\n      cy.contains(successMessage);\n      cy.get(homePage.manageUsers).click({\n        force: true\n      });\n      cy.xpath(homePage.appHome).first().should(\"be.visible\").click();\n      cy.CheckShareIcon(orgid, 2);\n      cy.CreateAppForOrg(orgid, appid);\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as invited user and then validate viewer privilage","suites":["Create new org and share with a user"],"updatePoint":{"line":35,"column":62},"line":35,"code":"  it(\"login as invited user and then validate viewer privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(orgid);\n    cy.xpath(homePage.ShareBtn).first().should(\"be.visible\");\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).should(\"not.exist\");\n    cy.launchApp(appid);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as Org owner and update the invited user role to developer","suites":["Create new org and share with a user"],"updatePoint":{"line":47,"column":70},"line":47,"code":"  it(\"login as Org owner and update the invited user role to developer\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.deleteUserFromOrg(orgid, Cypress.env(\"TESTUSERNAME1\"));\n    cy.updateUserRoleForOrg(orgid, Cypress.env(\"TESTUSERNAME1\"), homePage.developerRole);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as invited user and then validate developer privilage","suites":["Create new org and share with a user"],"updatePoint":{"line":56,"column":65},"line":56,"code":"  it(\"login as invited user and then validate developer privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(orgid);\n    cy.xpath(homePage.ShareBtn).first().should(\"be.visible\");\n    cy.get(homePage.applicationCard).first().trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).first().click({\n      force: true\n    });\n    cy.get(\"#loading\").should(\"not.exist\");\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as Org owner and update the invited user role to administrator","suites":["Create new org and share with a user"],"updatePoint":{"line":70,"column":74},"line":70,"code":"  it(\"login as Org owner and update the invited user role to administrator\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.deleteUserFromOrg(orgid, Cypress.env(\"TESTUSERNAME1\"));\n    cy.updateUserRoleForOrg(orgid, Cypress.env(\"TESTUSERNAME1\"), homePage.adminRole);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as invited user and then validate administrator privilage","suites":["Create new org and share with a user"],"updatePoint":{"line":79,"column":69},"line":79,"code":"  it(\"login as invited user and then validate administrator privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(orgid);\n    cy.inviteUserForOrg(orgid, Cypress.env(\"TESTUSERNAME2\"), homePage.viewerRole);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as Org owner and delete App ","suites":["Create new org and share with a user"],"updatePoint":{"line":88,"column":40},"line":88,"code":"  it(\"login as Org owner and delete App \", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.navigateToOrgSettings(orgid);\n    cy.get(homePage.emailList).then(function ($list) {\n      expect($list).to.have.length(3);\n      expect($list.eq(0)).to.contain(Cypress.env(\"USERNAME\"));\n      expect($list.eq(1)).to.contain(Cypress.env(\"TESTUSERNAME1\"));\n      expect($list.eq(2)).to.contain(Cypress.env(\"TESTUSERNAME2\"));\n    });\n    cy.xpath(homePage.appHome).should(\"be.visible\").first().click();\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.get(\"#loading\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app within a new org","suites":["Create app same name in different org"],"updatePoint":{"line":6,"column":33},"line":6,"code":"  it(\"create app within a new org\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg(); // stub the response and\n      // find app name\n\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n        cy.CreateAppForOrg(orgid, appid);\n        cy.NavigateToHome();\n        cy.LogOut();\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateSameAppInDiffOrg_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"create app with same name in a different org","suites":["Create app same name in different org"],"updatePoint":{"line":24,"column":50},"line":24,"code":"  it(\"create app with same name in a different org\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    const newOrgName = orgid + \"1\";\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      console.log(\"createOrganization response: \", interception);\n      newOrganizationName = interception.response.body.data.name;\n      cy.renameOrg(newOrganizationName, newOrgName);\n      cy.CreateAppForOrg(newOrgName, appid);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/CreateSameAppInDiffOrg_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create org and then share with a user from Application share option within application","suites":["Create new org and share with a user"],"updatePoint":{"line":11,"column":95},"line":11,"code":"  it(\"1. Create org and then share with a user from Application share option within application\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      appid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n      });\n      cy.CreateAppForOrg(orgid, appid);\n      cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n      cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n      cy.get(homePage.shareApp).click({\n        force: true\n      });\n      cy.shareApp(Cypress.env(\"TESTUSERNAME1\"), homePage.viewerRole);\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. login as Invited user and then validate viewer privilage","suites":["Create new org and share with a user"],"updatePoint":{"line":32,"column":65},"line":32,"code":"  it(\"2. login as Invited user and then validate viewer privilage\", function () {\n    cy.LogintoApp(Cypress.env(\"TESTUSERNAME1\"), Cypress.env(\"TESTPASSWORD1\"));\n    cy.get(homePage.searchInput).type(appid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(homePage.appsContainer).contains(orgid);\n    cy.xpath(homePage.ShareBtn).first().should(\"be.visible\");\n    cy.get(homePage.applicationCard).trigger(\"mouseover\");\n    cy.get(homePage.appEditIcon).should(\"not.exist\");\n    cy.launchApp(appid);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Enable public access to Application","suites":["Create new org and share with a user"],"updatePoint":{"line":44,"column":44},"line":44,"code":"  it(\"3. Enable public access to Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess();\n    cy.PublishtheApp();\n    currentUrl = cy.url();\n    cy.url().then(url => {\n      currentUrl = url;\n      cy.log(currentUrl);\n    });\n    cy.get(publish.backToEditor).click();\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Open the app without login and validate public access of Application","suites":["Create new org and share with a user"],"updatePoint":{"line":62,"column":77},"line":62,"code":"  it(\"4. Open the app without login and validate public access of Application\", function () {\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.wait(3000);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    }); // comment toggle should not exist for anonymous users\n\n    cy.get(\".t--comment-mode-switch-toggle\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. login as uninvited user and then validate public access of Application","suites":["Create new org and share with a user"],"updatePoint":{"line":73,"column":79},"line":73,"code":"  it(\"5. login as uninvited user and then validate public access of Application\", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@getPagesForViewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(publish.pageInfo).invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(\"This page seems to be blank\");\n    });\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"login as Owner and disable public access","suites":["Create new org and share with a user"],"updatePoint":{"line":83,"column":46},"line":83,"code":"  it(\"login as Owner and disable public access\", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.wait(\"@getPagesForCreateApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(\"h2\").contains(\"Drag and drop a widget here\");\n    cy.get(homePage.shareApp).click();\n    cy.enablePublicAccess();\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. login as uninvited user and then validate public access disable feature","suites":["Create new org and share with a user"],"updatePoint":{"line":94,"column":80},"line":94,"code":"  it(\"6. login as uninvited user and then validate public access disable feature\", function () {\n    cy.LoginFromAPI(Cypress.env(\"TESTUSERNAME2\"), Cypress.env(\"TESTPASSWORD2\"));\n    cy.visit(currentUrl);\n    cy.wait(\"@viewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.LogOut();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. visit the app as anonymous user and validate redirection to login page","suites":["Create new org and share with a user"],"updatePoint":{"line":100,"column":79},"line":100,"code":"  it(\"7. visit the app as anonymous user and validate redirection to login page\", function () {\n    cy.visit(currentUrl);\n    cy.wait(\"@viewApp\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 404);\n    cy.contains(\"Sign in to your account\").should(\"be.visible\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. login as owner and delete App ","suites":["Create new org and share with a user"],"updatePoint":{"line":105,"column":39},"line":105,"code":"  it(\"8. login as owner and delete App \", function () {\n    cy.LoginFromAPI(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.visit(\"/applications\");\n    cy.wait(\"@applications\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.SearchApp(appid);\n    cy.get(\"#loading\").should(\"not.exist\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/ShareAppTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the org general settings and update org name. The update should reflect in the org. It should also reflect in the org names on the left side and the org dropdown.\t","suites":["Update Organization"],"updatePoint":{"line":6,"column":174},"line":6,"code":"  it(\"Open the org general settings and update org name. The update should reflect in the org. It should also reflect in the org names on the left side and the org dropdown.\t\", function () {\n    cy.NavigateToHome();\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.createOrg();\n      cy.wait(\"@createOrg\").then(interception => {\n        newOrganizationName = interception.response.body.data.name;\n        cy.renameOrg(newOrganizationName, orgid);\n        cy.get(homePage.orgSettingOption).click({\n          force: true\n        });\n      });\n    });\n    cy.generateUUID().then(uid => {\n      orgid = uid;\n      localStorage.setItem(\"OrgName\", orgid);\n      cy.get(homePage.orgNameInput).click({\n        force: true\n      });\n      cy.get(homePage.orgNameInput).clear();\n      cy.get(homePage.orgNameInput).type(orgid); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(homePage.orgHeaderName).should(\"have.text\", orgid);\n    });\n    cy.NavigateToHome();\n    cy.get(homePage.leftPanelContainer).within(() => {\n      cy.get(\"span\").should(item => {\n        expect(item).to.contain.text(orgid);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/UpdateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the org general settings and update org email. The update should reflect in the org.","suites":["Update Organization"],"updatePoint":{"line":39,"column":95},"line":39,"code":"  it(\"Open the org general settings and update org email. The update should reflect in the org.\", function () {\n    cy.createOrg();\n    cy.wait(\"@createOrg\").then(interception => {\n      newOrganizationName = interception.response.body.data.name;\n      cy.renameOrg(newOrganizationName, orgid);\n      cy.get(homePage.orgSettingOption).click({\n        force: true\n      });\n    });\n    cy.get(homePage.orgEmailInput).clear();\n    cy.get(homePage.orgEmailInput).type(Cypress.env(\"TESTUSERNAME2\"));\n    cy.wait(\"@updateOrganization\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.orgEmailInput).should(\"have.value\", Cypress.env(\"TESTUSERNAME2\"));\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/UpdateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Upload logo / delete logo and validate","suites":["Update Organization"],"updatePoint":{"line":53,"column":44},"line":53,"code":"  it(\"Upload logo / delete logo and validate\", function () {\n    const fixturePath = \"appsmithlogo.png\";\n    cy.xpath(homePage.uploadLogo).attachFile(fixturePath);\n    cy.wait(\"@updateLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.xpath(homePage.membersTab).click({\n      force: true\n    });\n    cy.xpath(homePage.generalTab).click({\n      force: true\n    });\n    cy.get(homePage.removeLogo).last().should(\"be.hidden\").invoke(\"show\").click({\n      force: true\n    });\n    cy.wait(\"@deleteLogo\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/UpdateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Open the org general settings and update org website. The update should reflect in the org.","suites":["Update Organization"],"updatePoint":{"line":68,"column":97},"line":68,"code":"  it(\"Open the org general settings and update org website. The update should reflect in the org.\", function () {\n    cy.get(homePage.orgWebsiteInput).clear();\n    cy.get(homePage.orgWebsiteInput).type(\"demowebsite\");\n    cy.wait(\"@updateOrganization\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(homePage.orgWebsiteInput).should(\"have.value\", \"demowebsite\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/OrganisationTests/UpdateOrgTests_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress","suites":["Add widget - Postgress DataSource"],"updatePoint":{"line":14,"column":77},"line":14,"code":"  it(\"1. Verify 'Add to widget [Widget Suggestion]' functionality - Postgress\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from configs\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.WaitAutoSave();\n    cy.runQuery();\n    cy.get(queryEditor.suggestedTableWidget).click();\n    cy.SearchEntityandOpen(\"Table1\");\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      expect(tabValue).to.be.equal(\"5\");\n      cy.log(\"the value is \" + tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidget_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a PostgresDataSource","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":21,"column":36},"line":21,"code":"  it(\"1. Create a PostgresDataSource\", () => {\n    cy.createPostgresDatasource();\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query and populate response by choosing addWidget and validate in Table Widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":27,"column":96},"line":27,"code":"  it(\"2. Create a query and populate response by choosing addWidget and validate in Table Widget\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"SELECT * FROM configs LIMIT 10;\"); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500); // Mock the response for this test\n\n    cy.intercept(\"/api/v1/actions/execute\", {\n      fixture: \"addWidgetTable-mock\"\n    });\n    cy.onlyQueryRun();\n    cy.xpath(queryEditor.queryResponse).first().invoke(\"text\").then(text => {\n      const tableRowTxt = text;\n      cy.get(queryEditor.suggestedTableWidget).click();\n      cy.SearchEntityandOpen(\"Table1\");\n      cy.isSelectRow(1);\n      cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n        const tabValue = tabData;\n        cy.log(\"the value is\" + tabValue);\n        expect(tabValue).to.be.equal(\"5\");\n        expect(tableRowTxt).to.equal(tabValue);\n      });\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Input widget test with default value from table widget","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":51,"column":63},"line":51,"code":"  it(\"3. Input widget test with default value from table widget\", () => {\n    cy.SearchEntityandOpen(\"Input1\");\n    cy.get(widgetsPage.defaultInput).type(testdata.addInputWidgetBinding);\n    cy.wait(\"@updateLayout\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. validation of data displayed in input widget based on row data selected","suites":["Addwidget from Query and bind with other widgets"],"updatePoint":{"line":56,"column":80},"line":56,"code":"  it(\"4. validation of data displayed in input widget based on row data selected\", function () {\n    cy.isSelectRow(1);\n    cy.readTabledataPublish(\"1\", \"0\").then(tabData => {\n      const tabValue = tabData;\n      cy.log(\"the value is\" + tabValue);\n      expect(tabValue).to.be.equal(\"5\");\n      cy.isSelectRow(1);\n      cy.get(publish.inputWidget + \" \" + \"input\").first().invoke(\"attr\", \"value\").should(\"contain\", tabValue);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/AddWidgetTableAndBind_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Confirm run action","suites":["Confirm run action"],"updatePoint":{"line":16,"column":27},"line":16,"code":"  it(\"1. Confirm run action\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from configs\");\n    cy.get(\"li:contains('Settings')\").click({\n      force: true\n    });\n    cy.get(\"[data-cy=confirmBeforeExecute]\").find(\"span\").click();\n    cy.onlyQueryRun();\n    cy.get(\".bp3-dialog\").find(\"button\").contains(\"Confirm\").click();\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.get(queryEditor.queryMoreAction).click();\n    cy.get(queryEditor.deleteUsingContext).click();\n    cy.wait(\"@deleteAction\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.deleteDatasource(datasourceName);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/ConfirmRunAction_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Create a empty datasource","suites":["Create a query with a empty datasource, run, save the query"],"updatePoint":{"line":10,"column":34},"line":10,"code":"  it(\"1. Create a empty datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.PostgreSQL).click();\n    cy.testSaveDatasource(false);\n    cy.get(\"@createDatasource\").then(httpResponse => {\n      datasourceName = httpResponse.response.body.data.name;\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/EmptyDataSource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Create a query for empty/incorrect datasource and validate","suites":["Create a query with a empty datasource, run, save the query"],"updatePoint":{"line":18,"column":67},"line":18,"code":"  it(\"2. Create a query for empty/incorrect datasource and validate\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.get(queryLocators.templateMenu).click();\n    cy.get(\".CodeMirror textarea\").first().focus().type(\"select * from users limit 10\");\n    cy.EvaluateCurrentValue(\"select * from users limit 10\");\n    cy.runQuery(false);\n    cy.get(\".t--query-error\").contains(\"[Missing endpoint., Missing username for authentication., Missing password for authentication.]\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/EmptyDataSource_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"1. Creates a new Amazon S3 datasource","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":25,"column":43},"line":25,"code":"  it(\"1. Creates a new Amazon S3 datasource\", function () {\n    cy.NavigateToDatasourceEditor();\n    cy.get(datasource.AmazonS3).click({\n      force: true\n    }).wait(1000);\n    cy.generateUUID().then(uid => {\n      datasourceName = `Amazon S3 CRUD ds ${uid}`;\n      cy.renameDatasource(datasourceName);\n      cy.wrap(datasourceName).as(\"dSName\");\n    });\n    cy.fillAmazonS3DatasourceForm();\n    cy.testSaveDatasource();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"2. Validate List Files in bucket (all existing files) command, run and then delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":38,"column":98},"line":38,"code":"  it(\"2. Validate List Files in bucket (all existing files) command, run and then delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", \"Bucket Name\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.runAndDeleteQuery();\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"3. Validate Create/List Files/Read files in bucket command for new file, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":59,"column":129},"line":59,"code":"  it(\"3. Validate Create/List Files/Read files in bucket command for new file, Verify possible error msgs, run & delete the query\", () => {\n    //Create File\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.setQueryTimeout(30000);\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Create a new file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", \"Bucket Name\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File Path' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", \"File Path\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`\");\n    });\n    cy.typeValueNValidate(\"Hi\", \"Content\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.eq(\"Unable to parse content. Expected to receive an object with `data` and `type`\");\n    });\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding File!\"}', \"Content\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"File content is not base64 encoded.\");\n    });\n    cy.validateNSelectDropdown(\"File Data Type\", \"Base64\", \"Text / Binary\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false); //expect(['The specified bucket does not exist', 'The specified bucket is not valid.']).to.include(response.body.data.body)\n\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    }); //List file\n    //  cy.NavigateToActiveDSQueryPane(datasourceName);\n    //   cy.setQueryTimeout(30000);\n\n    cy.validateNSelectDropdown(\"Commands\", \"Create a new file\", \"List files in bucket\"); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket Name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.typeValueNValidate(\"Auto\", \"Prefix\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n    });\n    cy.typeValueNValidate(\"AutoFile\", \"Prefix\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].url).to.exist;\n      expect(response.body.data.body[0].signedUrl).not.to.exist;\n    });\n    cy.validateNSelectDropdown(\"Generate Signed URL\", \"No\", \"Yes\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.exist;\n    });\n    cy.validateNSelectDropdown(\"Generate Un-signed URL\", \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body[0].fileName).to.contains(\"Auto\");\n      expect(response.body.data.body[0].signedUrl).to.exist;\n      expect(response.body.data.body[0].url).to.not.exist;\n    }); //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    //Read File\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n    //cy.setQueryTimeout(30000);\n\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Read file\"); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").should(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Mandatory parameter 'Bucket Name' is missing.\",\n    //   );\n    // });\n    // cy.typeValueNValidate(\"AutoTest\", \"Bucket Name\");\n    // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body).to.contains(\n    //     \"Required parameter 'File Path' is missing.\",\n    //   );\n    // });\n\n    cy.typeValueNValidate(\"Auto\", \"File Path\"); // cy.onlyQueryRun();\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(false);\n    //   expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\n    //     \"The specified bucket does not exist\",\n    //     \"The specified bucket is not valid.\",\n    //   ]);\n    // });\n    // cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contain(\"The specified key does not exist.\");\n    });\n    cy.typeValueNValidate(\"Autofile\", \"File Path\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contain(\"The specified key does not exist.\");\n    });\n    cy.typeValueNValidate(\"AutoFile\", \"File Path\"); //Commenting below since below dropdown is removed from Read\n    //cy.validateNSelectDropdown(\"File Data Type\", \"Base64\", \"Text / Binary\");\n\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.not.eq(\"Hi, this is Automation script adding File!\");\n    });\n    cy.validateNSelectDropdown(\"Base64 Encode File - Yes/No\", \"Yes\", \"No\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.fileData).to.eq(\"Hi, this is Automation script adding File!\");\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"4. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":235,"column":170},"line":235,"code":"  it(\"4. Validate Delete file command for new file & Validating List Files in bucket command after new file is deleted, Verify possible error msgs, run & delete the query\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName); //cy.renameWithInPane(queryName);\n\n    cy.setQueryTimeout(30000);\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Delete file\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").should(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Mandatory parameter 'Bucket Name' is missing.\");\n    });\n    cy.typeValueNValidate(\"AutoTest\", \"Bucket Name\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body).to.contains(\"Required parameter 'File Path' is missing.\");\n    });\n    cy.typeValueNValidate(\"Auto\", \"File Path\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(false);\n      expect(response.body.data.body.split(\"(\")[0].trim()).to.be.oneOf([\"The specified bucket does not exist\", \"The specified bucket is not valid.\"]);\n    });\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.typeValueNValidate(\"AutoFile\", \"File Path\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.status).to.eq(\"File deleted successfully\");\n    }); //cy.selectEntityByName(\"Query1\");\n    //cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    //Validating List Files in bucket command after new file is deleted\n    //cy.NavigateToActiveDSQueryPane(datasourceName);\n\n    cy.validateNSelectDropdown(\"Commands\", \"Delete file\", \"List files in bucket\"); //cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n\n    cy.typeValueNValidate(\"Auto\", \"Prefix\");\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n      expect(response.body.data.body.length).to.eq(0); //checking that body is empty array\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"5. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":288,"column":137},"line":288,"code":"  it(\"5. Create new file in bucket for UI Operations & Verify Search, Delete operations from NewPage UI created in S3 ds & Bug 8686, 8684\", function () {\n    //Creating new file in bucket\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\", \"Create a new file\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.typeValueNValidate(\"CRUDNewPageFile\", \"File Path\");\n    cy.validateNSelectDropdown(\"File Data Type\", \"Base64\", \"Text / Binary\");\n    cy.typeValueNValidate('{\"data\": \"Hi, this is Automation script adding file for S3 CRUD New Page validation!\"}', \"Content\");\n    cy.setQueryTimeout(30000);\n    cy.onlyQueryRun();\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n    // cy.wrap(Cypress.automation('remote:debugger:protocol', {\n    //   command: 'Browser.grantPermissions',\n    //   params: {\n    //     permissions: ['clipboardReadWrite', 'clipboardSanitizedWrite'],\n    //     // make the permission tighter by allowing the current origin only\n    //     // like \"http://localhost:56978\"\n    //     origin: window.location.origin,\n    //   },\n    // }))\n    //Generate page & other UI ops\n\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000); //Verifying List of Files from UI\n\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200); //This verifies the Select on the table, ie page is created fine\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    cy.ClickGotIt(); //Verifying Searching File from UI\n\n    cy.xpath(queryLocators.searchFilefield).type(\"CRUD\").wait(500); //for search to finish\n\n    expect(cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='CRUDNewPageFile']\")).to.exist;\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='CRUDNewPageFile']\").scrollIntoView(); //Verifying CopyFile URL icon from UI - Browser pop up appearing\n    // cy.xpath(queryLocators.copyURLicon).click()\n    // cy.window().its('navigator.clipboard').invoke('readText').should('contain', 'CRUDNewPageFile')\n    //Verifying DeleteFile icon from UI\n\n    cy.xpath(queryLocators.deleteFileicon).click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(\"span:contains('CRUDNewPageFile')\", {\n      timeout: 10000\n    }).should(\"not.exist\"); //verify Deletion of file is success from UI also\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"6. Validate Deletion of the Newly Created Page","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":354,"column":52},"line":354,"code":"  it(\"6. Validate Deletion of the Newly Created Page\", () => {\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.contains(\".t--datasource-name\", datasourceName).click();\n    cy.get(\".t--delete-datasource\").click();\n    cy.wait(\"@deleteDatasource\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 409);\n    cy.actionContextMenuByEntityName(\"Assets-test.appsmith.com\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"7. Bug 9069, 9201, 6975, 9922: Upload/Update query is failing in S3 crud pages","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":362,"column":84},"line":362,"code":"  it(\"7. Bug 9069, 9201, 6975, 9922: Upload/Update query is failing in S3 crud pages\", function () {\n    cy.NavigateToDSGeneratePage(datasourceName);\n    cy.wait(3000); //Verifying List of Files from UI\n\n    cy.get(generatePage.selectTableDropdown).click();\n    cy.get(generatePage.dropdownOption).contains(\"assets-test.appsmith.com\").scrollIntoView().should(\"be.visible\").click();\n    cy.get(generatePage.generatePageFormSubmitBtn).click();\n    cy.wait(\"@replaceLayoutWithCRUDPage\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 201);\n    cy.wait(\"@getActions\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    cy.ClickGotIt(); //Upload: 1\n\n    let fixturePath = \"GlobeChristmas.jpeg\";\n    cy.wait(3000);\n    cy.clickButton(\"Select Files\"); //1 files selected\n\n    cy.get(generatePage.uploadFilesS3).attachFile(fixturePath);\n    cy.wait(2000);\n    cy.get(generatePage.uploadBtn).click();\n    cy.wait(1000);\n    cy.clickButton(\"Upload\");\n    cy.wait(\"@postExecute\").should(\"have.nested.property\", \"response.body.data.isExecutionSuccess\", true);\n    cy.get(commonlocators.toastAction).should(\"have.length\", 1).should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n    //Verifying Searching File from UI\n\n    cy.xpath(queryLocators.searchFilefield).type(\"GlobeChri\").wait(4000); //for search to finish\n\n    expect(cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\")).to.exist;\n    cy.xpath(\"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\").scrollIntoView(); //Verifying DeleteFile icon from UI\n\n    cy.xpath(\"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" + fixturePath + \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\").should(\"be.visible\").last().click(); //Verifies 8684\n\n    cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n\n    expect(cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\")).to.exist; //verify Delete File dialog appears\n\n    cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n\n    cy.wait(\"@postExecute\").then(({\n      response\n    }) => {\n      expect(response.body.data.isExecutionSuccess).to.eq(true);\n    });\n    cy.get(\"span:contains('\" + fixturePath + \"')\", {\n      timeout: 10000\n    }).should(\"not.exist\"); //verify Deletion of file is success from UI also\n    //Commenting below since bug # 9922 is open\n    // //Upload: 2 - Bug verification 9201\n    // fixturePath = \"Vase.jpeg\";\n    // cy.wait(3000);\n    // cy.clickButton(\"Select Files\"); //1 files selected\n    // cy.get(generatePage.uploadFilesS3).attachFile(fixturePath);\n    // cy.wait(2000);\n    // cy.get(generatePage.uploadBtn).click();\n    // cy.wait(1000);\n    // cy.clickButton(\"Upload\");\n    // cy.wait(\"@postExecute\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.data.isExecutionSuccess\",\n    //   true,\n    // );\n    // cy.get(commonlocators.toastAction)\n    //   .should(\"have.length\", 1)\n    //   .should(\"contain.text\", \"File Uploaded\"); //Verifies bug # 6975\n    // //Verifying Searching File from UI\n    // cy.xpath(queryLocators.searchFilefield)\n    //   .clear()\n    //   .type(\"VVase\")\n    //   .wait(3000); //for search to finish\n    // expect(\n    //   cy.xpath(\n    //     \"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\",\n    //   ),\n    // ).to.exist; //Verifies bug # 9922\n    // cy.xpath(\n    //   \"//div[@data-cy='overlay-comments-wrapper']//span[text()='\" + fixturePath + \"']\",\n    // ).scrollIntoView();\n    // //Verifying DeleteFile icon from UI\n    // cy.xpath(\n    //   \"//button/span[@icon='trash']/ancestor::div[contains(@class,'t--widget-iconbuttonwidget')]/preceding-sibling::div[contains(@class, 't--widget-textwidget')]//span[text()='\" +\n    //   fixturePath +\n    //   \"']/ancestor::div[contains(@class, 't--widget-textwidget')]/following-sibling::div[contains(@class,'t--widget-iconbuttonwidget')]\",\n    // )\n    //   .should(\"be.visible\")\n    //   .last()\n    //   .click(); //Verifies 8684\n    // cy.VerifyErrorMsgAbsence(\"Cyclic dependency found while evaluating\"); //Verifies 8686\n    // expect(\n    //   cy.xpath(\"//span[text()='Are you sure you want to delete the file?']\"),\n    // ).to.exist; //verify Delete File dialog appears\n    // cy.clickButton(\"Confirm\").wait(1000); //wait for Delete operation to be successfull, //Verifies 8684\n    // cy.wait(\"@postExecute\").then(({ response }) => {\n    //   expect(response.body.data.isExecutionSuccess).to.eq(true);\n    // });\n    // cy.get(\"span:contains('\" + fixturePath + \"')\", { timeout: 10000 }).should(\n    //   \"not.exist\",\n    // ); //verify Deletion of file is success from UI also\n    //Deleting the page:\n\n    cy.actionContextMenuByEntityName(\"Assets-test.appsmith.com\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"8. Verify 'Add to widget [Widget Suggestion]' functionality - S3","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":465,"column":70},"line":465,"code":"  it(\"8. Verify 'Add to widget [Widget Suggestion]' functionality - S3\", () => {\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.getEntityName().then(entity => {\n      cy.wrap(entity).as(\"entity\");\n    });\n    cy.runQuery();\n    cy.xpath(queryLocators.suggestedWidgetDropdown).click().wait(1000);\n    cy.get(commonlocators.dropdownWidget).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.get(queryLocators.suggestedTableWidget).click().wait(1000);\n    cy.get(commonlocators.TableRow).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.xpath(queryLocators.suggestedWidgetText).click().wait(1000);\n    cy.get(commonlocators.textWidget).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"9. Verify 'Connect Widget [snipping]' functionality - S3 ","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":484,"column":63},"line":484,"code":"  it(\"9. Verify 'Connect Widget [snipping]' functionality - S3 \", () => {\n    cy.addDsl(dsl);\n    cy.NavigateToActiveDSQueryPane(datasourceName);\n    cy.getEntityName().then(entity => {\n      cy.wrap(entity).as(\"entity\");\n    });\n    cy.validateNSelectDropdown(\"Commands\", \"List files in bucket\");\n    cy.typeValueNValidate(\"assets-test.appsmith.com\", \"Bucket Name\");\n    cy.runQuery();\n    cy.clickButton(\"Select Widget\");\n    cy.xpath(queryLocators.snipeableTable).click().wait(1500); //wait for table to load!\n\n    cy.get(commonlocators.TableRow).validateWidgetExists();\n    cy.get(\"@entity\").then(entityN => cy.selectEntityByName(entityN));\n    cy.deleteQueryUsingContext(); //exeute actions & 200 response is verified in this method\n\n    cy.actionContextMenuByEntityName(\"Table1\");\n    cy.wait(3000); //waiting for deletion to complete! - else next case fails\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"10. Deletes the datasource","suites":["Validate CRUD queries for Amazon S3 along with UI flow verifications"],"updatePoint":{"line":503,"column":32},"line":503,"code":"  it(\"10. Deletes the datasource\", () => {\n    cy.NavigateToQueryEditor();\n    cy.NavigateToActiveTab();\n    cy.contains(\".t--datasource-name\", datasourceName).click({\n      force: true\n    });\n    cy.get(\".t--delete-datasource\").click(); // cy.wait(\"@deleteDatasource\").should(\n    //   \"have.nested.property\",\n    //   \"response.body.responseMeta.status\",\n    //   200,\n    // );\n\n    cy.wait(\"@deleteDatasource\").should(response => {\n      expect(response.status).to.be.oneOf([200, 409]);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/QueryPane/S3_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Login/create page/delete page/delete app from UI","suites":["Login from UI and check the functionality"],"updatePoint":{"line":8,"column":54},"line":8,"code":"  it(\"Login/create page/delete page/delete app from UI\", function () {\n    const appname = localStorage.getItem(\"AppName\");\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.SearchApp(appname);\n    cy.get(\"#loading\").should(\"not.exist\");\n    cy.generateUUID().then(uid => {\n      pageid = uid;\n      cy.Createpage(pageid);\n      cy.DeletepageFromSideBar();\n    });\n    cy.wait(\"@deletePage\");\n    cy.get(\"@deletePage\").should(\"have.property\", \"status\", 200);\n    cy.DeleteApp(appname);\n    cy.wait(\"@deleteApplication\");\n    cy.get(\"@deleteApplication\").should(\"have.property\", \"status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/UnitTest/LoginFromUIApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Login/Logout click Appsmith logo should route to login page","suites":["Login from UI and check the functionality"],"updatePoint":{"line":24,"column":65},"line":24,"code":"  it(\"Login/Logout click Appsmith logo should route to login page\", function () {\n    cy.LogintoApp(Cypress.env(\"USERNAME\"), Cypress.env(\"PASSWORD\"));\n    cy.get(homePage.profileMenu).click();\n    cy.get(homePage.signOutIcon).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.get(homePage.headerAppSmithLogo).click(); // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(500);\n    cy.url().should(\"include\", \"user/login\");\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/UnitTest/LoginFromUIApp_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Update a user's name","suites":["Update a user's name"],"updatePoint":{"line":5,"column":26},"line":5,"code":"  it(\"Update a user's name\", function () {\n    cy.get(homePage.profileMenu).click();\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    });\n    cy.generateUUID().then(uid => {\n      username = uid;\n      cy.get(\"[data-cy=t--display-name]\").clear();\n      cy.get(\"[data-cy=t--display-name]\").type(username); // Waiting as the input onchange has a debounce\n      // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n      cy.wait(2000);\n      cy.get(\".t--back\").click();\n      cy.reload();\n      cy.get(homePage.profileMenu).click();\n      cy.get(\".t--user-name\").contains(username);\n    });\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/UserProfile/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Validate email address and Reset pwd","suites":["Update a user's name"],"updatePoint":{"line":23,"column":42},"line":23,"code":"  it(\"Validate email address and Reset pwd\", function () {\n    cy.intercept(\"POST\", \"/api/v1/users/forgotPassword\", {\n      fixture: \"resetPassword.json\"\n    }).as(\"resetPwd\");\n    cy.get(\".t--edit-profile\").click({\n      force: true\n    }); // Waiting as the input onchange has a debounce\n    // eslint-disable-next-line cypress/no-unnecessary-waiting\n\n    cy.wait(2000);\n    cy.get(\".react-tabs .cs-text\").last().invoke(\"text\").then(text => {\n      const someText = text;\n      expect(someText).to.equal(Cypress.env(\"USERNAME\"));\n    });\n    cy.get(\".react-tabs a\").last().contains(\"Reset Password\").click();\n    cy.wait(\"@resetPwd\").should(\"have.nested.property\", \"response.body.responseMeta.status\", 200);\n  });","file":"integration/Smoke_TestSuite/ServerSideTests/UserProfile/UpdateUsersName_spec.js","skipped":false,"dir":"app/client/cypress"},{"name":"Table Filter","suites":["Test for Table Filter "],"updatePoint":{"line":4,"column":18},"line":4,"code":"  it(\"Table Filter\", function () {//Add a table\n    // click  on the column action item\n    // Click on Select a datatype\n    // Click on Filter option\n    // ensure to add filter\n  });","file":"manual_TestSuite/Table_Filter_Test_spec.js","skipped":false,"dir":"app/client/cypress"}]}