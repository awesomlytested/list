{"repo":"prettier/prettier","url":"https://github.com/prettier/prettier","branch":"main","configs":[{"package":"prettier","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"lang":"js","dir":"scripts/release/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"translates cursor correctly in basic case","suites":[],"updatePoint":{"line":8,"column":47,"index":274},"line":8,"code":"test(\"translates cursor correctly in basic case\", async () => {\n  expect(await prettier.formatWithCursor(\" 1\", {\n    parser: \"babel\",\n    cursorOffset: 2\n  })).toMatchObject({\n    formatted: \"1;\\n\",\n    cursorOffset: 1\n  });\n});","file":"format/js/cursor/jsfmt.spec.js","skipped":false,"dir":"tests"},{"name":"positions cursor relative to closest node, not SourceElement","suites":[],"updatePoint":{"line":17,"column":66,"index":522},"line":17,"code":"test(\"positions cursor relative to closest node, not SourceElement\", async () => {\n  const code = \"return         15\";\n  expect(await prettier.formatWithCursor(code, {\n    parser: \"babel\",\n    cursorOffset: 15\n  })).toMatchObject({\n    formatted: \"return 15;\\n\",\n    cursorOffset: 7\n  });\n});","file":"format/js/cursor/jsfmt.spec.js","skipped":false,"dir":"tests"},{"name":"keeps cursor inside formatted node","suites":[],"updatePoint":{"line":27,"column":40,"index":789},"line":27,"code":"test(\"keeps cursor inside formatted node\", async () => {\n  const code = \"return         15\";\n  expect(await prettier.formatWithCursor(code, {\n    parser: \"babel\",\n    cursorOffset: 14\n  })).toMatchObject({\n    formatted: \"return 15;\\n\",\n    cursorOffset: 7\n  });\n});","file":"format/js/cursor/jsfmt.spec.js","skipped":false,"dir":"tests"},{"name":"doesn't insert second placeholder for nonexistent TypeAnnotation","suites":[],"updatePoint":{"line":37,"column":70,"index":1086},"line":37,"code":"test(\"doesn't insert second placeholder for nonexistent TypeAnnotation\", async () => {\n  const code = \"\\n\" + outdent`\n      foo('bar', cb => {\n        console.log('stuff')\n      })\n    `;\n  expect(await prettier.formatWithCursor(code, {\n    parser: \"babel\",\n    cursorOffset: 24\n  })).toMatchObject({\n    formatted: outdent`\n        foo(\"bar\", (cb) => {\n          console.log(\"stuff\");\n        });\n      ` + \"\\n\",\n    cursorOffset: 25\n  });\n});","file":"format/js/cursor/jsfmt.spec.js","skipped":false,"dir":"tests"},{"name":"cursorOffset === rangeStart","suites":[],"updatePoint":{"line":55,"column":33,"index":1494},"line":55,"code":"test(\"cursorOffset === rangeStart\", async () => {\n  const code = \"1.0000\\n2.0000\\n3.0000\";\n  expect(await prettier.formatWithCursor(code, {\n    parser: \"babel\",\n    cursorOffset: 7,\n    rangeStart: 7,\n    rangeEnd: 8\n  })).toMatchObject({\n    formatted: \"1.0000\\n2.0;\\n3.0000\",\n    cursorOffset: 7\n  });\n});","file":"format/js/cursor/jsfmt.spec.js","skipped":false,"dir":"tests"}]}