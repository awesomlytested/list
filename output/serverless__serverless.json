{"repo":"serverless/serverless","url":"https://github.com/serverless/serverless","branch":"master","configs":[{"package":"serverless","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should create service in tmp directory","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":59,"column":44,"index":1839},"line":59,"code":"  it('should create service in tmp directory', async () => {\n    await spawn(serverlessExec, ['create', '--template', templateName, '--name', serviceName], spawnOptions);\n    expect(fs.existsSync(path.join(tmpDir, 'serverless.yml'))).to.be.equal(true);\n    expect(fs.existsSync(path.join(tmpDir, 'handler.js'))).to.be.equal(true);\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should deploy service to aws","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":64,"column":34,"index":2166},"line":64,"code":"  it('should deploy service to aws', async () => {\n    await spawn(serverlessExec, ['deploy'], {\n      cwd: tmpDir,\n      env\n    });\n    const d = await awsRequest(CloudFormationService, 'describeStacks', {\n      StackName\n    });\n    expect(d.Stacks[0].StackStatus).to.be.equal('UPDATE_COMPLETE');\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should invoke function from aws","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":74,"column":37,"index":2475},"line":74,"code":"  it('should invoke function from aws', async () => {\n    const {\n      stdoutBuffer: invoked\n    } = await spawn(serverlessExec, ['invoke', '--function', 'hello'], spawnOptions);\n    const result = JSON.parse(invoked);\n    // parse it once again because the body is stringified to be LAMBDA-PROXY ready\n    const message = JSON.parse(result.body).message;\n    expect(message).to.be.equal('Go Serverless v1.0! Your function executed successfully!');\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should deploy updated service to aws","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":83,"column":42,"index":2936},"line":83,"code":"  it('should deploy updated service to aws', () => {\n    const newHandler = `\n        'use strict';\n\n        module.exports.hello = (event, context, cb) => cb(null,\n          { message: 'Service Update Succeeded' }\n        );\n      `;\n    fs.writeFileSync(path.join(tmpDir, 'handler.js'), newHandler);\n    return spawn(serverlessExec, ['deploy'], spawnOptions);\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should invoke updated function from aws","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":94,"column":45,"index":3307},"line":94,"code":"  it('should invoke updated function from aws', async () => {\n    const {\n      stdoutBuffer: invoked\n    } = await spawn(serverlessExec, ['invoke', '--function', 'hello'], spawnOptions);\n    const result = JSON.parse(invoked);\n    expect(result.message).to.be.equal('Service Update Succeeded');\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should list existing deployments and roll back to first deployment","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":101,"column":72,"index":3636},"line":101,"code":"  it('should list existing deployments and roll back to first deployment', async () => {\n    let timestamp;\n    const {\n      stdoutBuffer: listDeploys\n    } = await spawn(serverlessExec, ['deploy', 'list'], spawnOptions);\n    const output = stripAnsi(listDeploys.toString());\n    const match = output.match(new RegExp('Timestamp: (.+)'));\n    if (match) {\n      timestamp = match[1];\n    }\n    expect(timestamp).to.not.undefined;\n    await spawn(serverlessExec, ['rollback', '-t', timestamp], {\n      cwd: tmpDir,\n      env\n    });\n    const {\n      stdoutBuffer: invoked\n    } = await spawn(serverlessExec, ['invoke', '--function', 'hello'], spawnOptions);\n    const result = JSON.parse(invoked);\n    // parse it once again because the body is stringified to be LAMBDA-PROXY ready\n    const message = JSON.parse(result.body).message;\n    expect(message).to.be.equal('Go Serverless v1.0! Your function executed successfully!');\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should remove service from aws","suites":["Service Lifecyle Integration Test"],"updatePoint":{"line":124,"column":36,"index":4535},"line":124,"code":"  it('should remove service from aws', async () => {\n    await spawn(serverlessExec, ['remove'], {\n      cwd: tmpDir,\n      env\n    });\n    const d = await (async () => {\n      try {\n        return await awsRequest(CloudFormationService, 'describeStacks', {\n          StackName\n        });\n      } catch (error) {\n        if (error.message.indexOf('does not exist') > -1) return null;\n        throw error;\n      }\n    })();\n    if (!d) return;\n    expect(d.Stacks[0].StackStatus).to.be.equal('DELETE_COMPLETE');\n  });","file":"integration-basic.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible GET HTTP endpoint","suites":["AWS - API Gateway with External REST API Integration Test"],"updatePoint":{"line":69,"column":51,"index":2285},"line":69,"code":"  it('should expose an accessible GET HTTP endpoint', async () => {\n    return fetch(endpoint, {\n      method: 'GET'\n    }).then(response => response.json()).then(json => expect(json.message).to.equal('Hello from API Gateway! - (minimal)'));\n  });","file":"integration/aws/api-gateway-external.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible POST HTTP endpoint","suites":["AWS - API Gateway with External REST API Integration Test"],"updatePoint":{"line":74,"column":52,"index":2534},"line":74,"code":"  it('should expose an accessible POST HTTP endpoint', async () => {\n    const testEndpoint = `${endpoint}/minimal-1`;\n    return fetch(testEndpoint, {\n      method: 'POST'\n    }).then(response => response.json()).then(json => expect(json.message).to.equal('Hello from API Gateway! - (minimal)'));\n  });","file":"integration/aws/api-gateway-external.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible GET HTTP endpoint","suites":["AWS - API Gateway Integration Test","Minimal Setup"],"updatePoint":{"line":55,"column":53,"index":1784},"line":55,"code":"    it('should expose an accessible GET HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}`;\n      return fetch(testEndpoint, {\n        method: 'GET'\n      }).then(response => response.json()).then(json => expect(json.message).to.equal(expectedMessage));\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible POST HTTP endpoint","suites":["AWS - API Gateway Integration Test","Minimal Setup"],"updatePoint":{"line":61,"column":54,"index":2067},"line":61,"code":"    it('should expose an accessible POST HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/minimal-1`;\n      return fetch(testEndpoint, {\n        method: 'POST'\n      }).then(response => response.json()).then(json => expect(json.message).to.equal(expectedMessage));\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible PUT HTTP endpoint","suites":["AWS - API Gateway Integration Test","Minimal Setup"],"updatePoint":{"line":67,"column":53,"index":2360},"line":67,"code":"    it('should expose an accessible PUT HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/minimal-2`;\n      return fetch(testEndpoint, {\n        method: 'PUT'\n      }).then(response => response.json()).then(json => expect(json.message).to.equal(expectedMessage));\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible DELETE HTTP endpoint","suites":["AWS - API Gateway Integration Test","Minimal Setup"],"updatePoint":{"line":73,"column":56,"index":2655},"line":73,"code":"    it('should expose an accessible DELETE HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/minimal-3`;\n      return fetch(testEndpoint, {\n        method: 'DELETE'\n      }).then(response => response.json()).then(json => expect(json.message).to.equal(expectedMessage));\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should setup simple CORS support via cors: true config","suites":["AWS - API Gateway Integration Test","CORS"],"updatePoint":{"line":81,"column":62,"index":2992},"line":81,"code":"    it('should setup simple CORS support via cors: true config', async () => {\n      const testEndpoint = `${endpoint}/simple-cors`;\n      return fetch(testEndpoint, {\n        method: 'OPTIONS'\n      }).then(response => {\n        const headers = response.headers;\n        const allowHeaders = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent', 'X-Amzn-Trace-Id'].join(',');\n        expect(headers.get('access-control-allow-headers')).to.equal(allowHeaders);\n        expect(headers.get('access-control-allow-methods')).to.equal('OPTIONS,GET');\n        expect(headers.get('access-control-allow-credentials')).to.equal(null);\n        expect(headers.get('access-control-allow-origin')).to.equal('*');\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should setup CORS support with complex object config","suites":["AWS - API Gateway Integration Test","CORS"],"updatePoint":{"line":94,"column":60,"index":3759},"line":94,"code":"    it('should setup CORS support with complex object config', async () => {\n      const testEndpoint = `${endpoint}/complex-cors`;\n      return fetch(testEndpoint, {\n        method: 'OPTIONS'\n      }).then(response => {\n        const headers = response.headers;\n        const allowHeaders = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent', 'X-Amzn-Trace-Id'].join(',');\n        expect(headers.get('access-control-allow-headers')).to.equal(allowHeaders);\n        expect(headers.get('access-control-allow-methods')).to.equal('OPTIONS,GET');\n        expect(headers.get('access-control-allow-credentials')).to.equal('true');\n        expect(headers.get('access-control-allow-origin')).to.equal('*');\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should reject requests without authorization","suites":["AWS - API Gateway Integration Test","Custom Authorizers"],"updatePoint":{"line":113,"column":52,"index":4665},"line":113,"code":"    it('should reject requests without authorization', async () => {\n      return fetch(testEndpoint).then(response => {\n        expect(response.status).to.equal(401);\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should reject requests with wrong authorization","suites":["AWS - API Gateway Integration Test","Custom Authorizers"],"updatePoint":{"line":118,"column":55,"index":4854},"line":118,"code":"    it('should reject requests with wrong authorization', async () => {\n      return fetch(testEndpoint, {\n        headers: {\n          Authorization: 'Bearer ShouldNotBeAuthorized'\n        }\n      }).then(response => {\n        expect(response.status).to.equal(401);\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should authorize requests with correct authorization","suites":["AWS - API Gateway Integration Test","Custom Authorizers"],"updatePoint":{"line":127,"column":60,"index":5144},"line":127,"code":"    it('should authorize requests with correct authorization', async () => {\n      return fetch(testEndpoint, {\n        headers: {\n          Authorization: 'Bearer ShouldBeAuthorized'\n        }\n      }).then(response => response.json()).then(json => {\n        expect(json.message).to.equal('Hello from API Gateway! - (customAuthorizers)');\n        expect(json.event.requestContext.authorizer.principalId).to.equal('SomeRandomId');\n        expect(json.event.headers.Authorization).to.equal('Bearer ShouldBeAuthorized');\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should succeed if correct API key is given","suites":["AWS - API Gateway Integration Test","API Keys"],"updatePoint":{"line":146,"column":50,"index":5851},"line":146,"code":"    it('should succeed if correct API key is given', async function self() {\n      const response = await fetch(testEndpoint, {\n        headers: {\n          'X-API-Key': apiKey\n        }\n      });\n      const result = await response.json();\n      // API Key may take a moment to propagate, retry\n      if (response.status === 403 && startTime > Date.now() - 1000 * 60 * 3) {\n        log.notice('API Key rejected, retry');\n        return self();\n      }\n      expect(response.status).to.equal(200);\n      expect(result.message).to.equal('Hello from API Gateway! - (apiKeys)');\n      return null;\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should reject a request with an invalid API Key","suites":["AWS - API Gateway Integration Test","API Keys"],"updatePoint":{"line":162,"column":55,"index":6459},"line":162,"code":"    it('should reject a request with an invalid API Key', async () => {\n      return fetch(testEndpoint).then(response => {\n        expect(response.status).to.equal(403);\n      });\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should update the stage without service interruptions","suites":["AWS - API Gateway Integration Test","Using stage specific configuration"],"updatePoint":{"line":186,"column":61,"index":7053},"line":186,"code":"    it('should update the stage without service interruptions', async () => {\n      // re-using the endpoint from the \"minimal\" test case\n      const testEndpoint = `${endpoint}`;\n      return confirmCloudWatchLogs(`/aws/api-gateway/${stackName}`, () => fetch(`${testEndpoint}`, {\n        method: 'GET'\n      }).then(response => response.json())\n      // Confirm that APIGW responds as expected\n      .then(json => expect(json.message).to.equal('Hello from API Gateway! - (minimal)'))\n      // Confirm that CloudWatch logs for APIGW are written\n      ).then(events => expect(events.length > 0).to.equal(true));\n    });","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should result with 504 status code","suites":["AWS - API Gateway Integration Test","Integration Lambda Timeout"],"updatePoint":{"line":199,"column":42,"index":7708},"line":199,"code":"    it('should result with 504 status code', async () => fetch(`${endpoint}/integration-lambda-timeout`).then(response => expect(response.status).to.equal(504)));","file":"integration/aws/api-gateway.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a user is created","suites":["AWS - Cognito User Pool Integration Test","New Setup","Basic Setup"],"updatePoint":{"line":81,"column":55,"index":3198},"line":81,"code":"      it('should invoke function when a user is created', async () => {\n        const functionName = 'basic';\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolBasicSetup);\n        let counter = 0;\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => createUser(userPoolId, `johndoe${++counter}`, '!!!wAsD123456wAsD!!!'), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('userName');\n          }\n        });\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(`\"userPoolId\":\"${userPoolId}\"`);\n        expect(logs).to.include('\"userName\":\"johndoe');\n        expect(logs).to.include('\"triggerSource\":\"PreSignUp_AdminCreateUser\"');\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a user is created and sent verification code via email","suites":["AWS - Cognito User Pool Integration Test","New Setup","Custom Sender Trigger"],"updatePoint":{"line":100,"column":92,"index":4191},"line":100,"code":"      it('should invoke function when a user is created and sent verification code via email', async () => {\n        const functionName = 'customEmailSender';\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolCustomEmailSenderSetup);\n        let counter = 0;\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => createUser(userPoolId, `janedoe${++counter}@email.com`, '!!!wAsD123456wAsD!!!', 'email'), {\n          checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes('customEmailSenderRequestV1')\n        });\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(`\"userPoolId\":\"${userPoolId}\"`);\n        expect(logs).to.include('\"userName\":\"janedoe');\n        expect(logs).to.include('\"type\":\"customEmailSenderRequestV1\"');\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a user is created","suites":["AWS - Cognito User Pool Integration Test","Existing Setup","single function / single trigger pool setup"],"updatePoint":{"line":118,"column":55,"index":5200},"line":118,"code":"      it('should invoke function when a user is created', async () => {\n        const functionName = 'existingSimple';\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolExistingSimpleSetup);\n        let counter = 0;\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => createUser(userPoolId, `janedoe${++counter}`, '!!!wAsD123456wAsD!!!'), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('PreSignUp_AdminCreateUser');\n          }\n        });\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(`\"userPoolId\":\"${userPoolId}\"`);\n        expect(logs).to.include('\"userName\":\"janedoe');\n        expect(logs).to.include('\"triggerSource\":\"PreSignUp_AdminCreateUser\"');\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should not overwrite existing User Pool configurations","suites":["AWS - Cognito User Pool Integration Test","Existing Setup","single function / single trigger pool setup"],"updatePoint":{"line":135,"column":64,"index":6146},"line":135,"code":"      it('should not overwrite existing User Pool configurations', async () => {\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolExistingSimpleSetup);\n        const config = await describeUserPool(userPoolId);\n        expect(config.UserPool.EmailVerificationMessage).to.equal(poolExistingSimpleSetupConfig.EmailVerificationMessage);\n        expect(config.UserPool.EmailVerificationSubject).to.equal(poolExistingSimpleSetupConfig.EmailVerificationSubject);\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a user inits auth after being created","suites":["AWS - Cognito User Pool Integration Test","Existing Setup","single function / multi trigger pool setup"],"updatePoint":{"line":145,"column":75,"index":6732},"line":145,"code":"      it('should invoke function when a user inits auth after being created', async () => {\n        const functionName = 'existingMulti';\n        const usernamePrefix = 'janedoe';\n        const password = '!!!wAsD123456wAsD!!!';\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolExistingMultiSetup);\n        const client = await createUserPoolClient('myClient', userPoolId);\n        const clientId = client.UserPoolClient.ClientId;\n        let counter = 0;\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => {\n          const username = `${usernamePrefix}${++counter}`;\n          await createUser(userPoolId, username, password);\n          await setUserPassword(userPoolId, username, password);\n          await initiateAuth(clientId, username, password);\n        }, {\n          checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes('PreAuthentication_Authentication')\n        });\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(`\"userPoolId\":\"${userPoolId}\"`);\n        expect(logs).to.include(`\"userName\":\"${usernamePrefix}`);\n        expect(logs).to.include('\"triggerSource\":\"PreSignUp_AdminCreateUser\"');\n        expect(logs).to.include('\"triggerSource\":\"PreAuthentication_Authentication\"');\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a user is created and sent verification code via email","suites":["AWS - Cognito User Pool Integration Test","Existing Setup","Custom Sender Trigger"],"updatePoint":{"line":171,"column":92,"index":8207},"line":171,"code":"      it('should invoke function when a user is created and sent verification code via email', async () => {\n        const functionName = 'existingCustomEmailSender';\n        const {\n          Id: userPoolId\n        } = await findUserPoolByName(poolExistingCustomEmailSenderSetup);\n        let counter = 0;\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => createUser(userPoolId, `janedoe${++counter}@email.com`, '!!!wAsD123456wAsD!!!', 'email'), {\n          checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes('customEmailSenderRequestV1')\n        });\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(`\"userPoolId\":\"${userPoolId}\"`);\n        expect(logs).to.include('\"userName\":\"janedoe');\n        expect(logs).to.include('\"type\":\"customEmailSenderRequestV1\"');\n      });","file":"integration/aws/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should deploy in the configured aws bucket","suites":["Base AWS provider test"],"updatePoint":{"line":37,"column":48,"index":912},"line":37,"code":"  it('should deploy in the configured aws bucket', async () => {\n    // we cannot deploy an empty fixture like aws so we go for a small one\n    const res = await awsRequest(S3Service, 'listObjects', {\n      Bucket: bucketName\n    });\n    expect(res.Contents.filter(obj => /compiled-cloudformation-template.json$/.test(obj.Key)).length).to.equal(1);\n  });","file":"integration/aws/custom-deployment-bucket.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using deprecated CustomResource deployment pattern","Default Event Bus"],"updatePoint":{"line":94,"column":71,"index":2881},"line":94,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusDefault';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents('default', putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using deprecated CustomResource deployment pattern","Custom Event Bus"],"updatePoint":{"line":107,"column":71,"index":3721},"line":107,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusCustom';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents(namedEventBusName, putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using deprecated CustomResource deployment pattern","Arn Event Bus"],"updatePoint":{"line":120,"column":71,"index":4565},"line":120,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusArn';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents(arnEventBusName, putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using native CloudFormation deployment pattern","Default Event Bus"],"updatePoint":{"line":196,"column":71,"index":7424},"line":196,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusDefault';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents('default', putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using native CloudFormation deployment pattern","Custom Event Bus"],"updatePoint":{"line":209,"column":71,"index":8264},"line":209,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusCustom';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents(namedEventBusName, putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an event is sent to the event bus","suites":["AWS - Event Bridge Integration Test","Using native CloudFormation deployment pattern","Arn Event Bus"],"updatePoint":{"line":222,"column":71,"index":9108},"line":222,"code":"      it('should invoke function when an event is sent to the event bus', async () => {\n        const functionName = 'eventBusArn';\n        const markers = getMarkers(functionName);\n        const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putEvents(arnEventBusName, putEventEntries), {\n          checkIsComplete: data => data.find(event => event.message.includes(markers.start)) && data.find(event => event.message.includes(markers.end))\n        });\n        const logs = events.map(event => event.message).join('\\n');\n        expect(logs).to.include(`\"source\":\"${eventSource}\"`);\n        expect(logs).to.include(`\"detail-type\":\"${putEventEntries[0].DetailType}\"`);\n        expect(logs).to.include(`\"detail\":${putEventEntries[0].Detail}`);\n      });","file":"integration/aws/event-bridge.test.js","skipped":false,"dir":"test"},{"name":"should return valid response from Lambda URL","suites":["test/integration/aws/function-url.test.js"],"updatePoint":{"line":66,"column":50,"index":2101},"line":66,"code":"  it('should return valid response from Lambda URL', async () => {\n    const expectedMessage = 'Basic';\n    const response = await fetch(basicEndpoint, {\n      method: 'GET'\n    });\n    const jsonResponse = await response.json();\n    expect(jsonResponse.message).to.equal(expectedMessage);\n  });","file":"integration/aws/function-url.test.js","skipped":false,"dir":"test"},{"name":"should return valid response from Lambda URL with authorizer with valid signature","suites":["test/integration/aws/function-url.test.js"],"updatePoint":{"line":74,"column":87,"index":2434},"line":74,"code":"  it('should return valid response from Lambda URL with authorizer with valid signature', async () => {\n    const expectedMessage = 'Basic';\n    const signedParams = aws4.sign({\n      service: 'lambda',\n      region: 'us-east-1',\n      method: 'GET',\n      host: url.parse(authedEndpoint).hostname\n    }, {\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n    });\n    const response = await fetch(authedEndpoint, signedParams);\n    const jsonResponse = await response.json();\n    expect(jsonResponse.message).to.equal(expectedMessage);\n  });","file":"integration/aws/function-url.test.js","skipped":false,"dir":"test"},{"name":"should return invalid response from Lambda URL with authorizer without passed signature","suites":["test/integration/aws/function-url.test.js"],"updatePoint":{"line":89,"column":93,"index":3040},"line":89,"code":"  it('should return invalid response from Lambda URL with authorizer without passed signature', async () => {\n    const expectedMessage = 'Forbidden';\n    const response = await fetch(authedEndpoint, {\n      method: 'GET'\n    });\n    const jsonResponse = await response.json();\n    expect(jsonResponse.Message).to.equal(expectedMessage);\n  });","file":"integration/aws/function-url.test.js","skipped":false,"dir":"test"},{"name":"should return expected CORS headers from Lambda URL","suites":["test/integration/aws/function-url.test.js"],"updatePoint":{"line":97,"column":57,"index":3348},"line":97,"code":"  it('should return expected CORS headers from Lambda URL', async () => {\n    const response = await fetch(otherEndpoint, {\n      method: 'GET',\n      headers: {\n        Origin: 'https://serverless.com'\n      }\n    });\n    const headers = response.headers;\n    expect(headers.get('access-control-expose-headers')).to.equal('x-foo');\n    expect(headers.get('access-control-allow-credentials')).to.equal('true');\n  });","file":"integration/aws/function-url.test.js","skipped":false,"dir":"test"},{"name":"should invoke destination target on async invocation","suites":["test/integration/aws/function.test.js"],"updatePoint":{"line":52,"column":58,"index":1379},"line":52,"code":"  it('should invoke destination target on async invocation', async () => {\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-target`, async () => {\n      await awsRequest(LambdaService, 'invoke', {\n        FunctionName: `${stackName}-trigger`,\n        InvocationType: 'Event'\n      });\n    }, {\n      checkIsComplete: soFarEvents => soFarEvents.length\n    });\n    expect(events.length > 0).to.equal(true);\n  });","file":"integration/aws/function.test.js","skipped":false,"dir":"test"},{"name":"should run lambda in `arm64` architecture","suites":["test/integration/aws/function.test.js"],"updatePoint":{"line":63,"column":47,"index":1803},"line":63,"code":"  it('should run lambda in `arm64` architecture', async () => {\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-arch`, async () => {\n      await awsRequest(LambdaService, 'invoke', {\n        FunctionName: `${stackName}-arch`,\n        InvocationType: 'Event'\n      });\n    }, {\n      checkIsComplete: soFarEvents => soFarEvents.length\n    });\n    expect(events.length > 0).to.equal(true);\n  });","file":"integration/aws/function.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible POST HTTP endpoint","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":133,"column":54,"index":4654},"line":133,"code":"    it('should expose an accessible POST HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/some-post`;\n      const response = await fetch(testEndpoint, {\n        method: 'POST'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'POST',\n        path: '/some-post'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible paramed GET HTTP endpoint","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":144,"column":61,"index":5014},"line":144,"code":"    it('should expose an accessible paramed GET HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/bar/whatever`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/bar/whatever'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should return 404 on not supported method","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":155,"column":49,"index":5366},"line":155,"code":"    it('should return 404 on not supported method', async () => {\n      const testEndpoint = `${endpoint}/foo`;\n      const response = await fetch(testEndpoint, {\n        method: 'POST'\n      });\n      expect(response.status).to.equal(404);\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should return 404 on not configured path","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":162,"column":48,"index":5614},"line":162,"code":"    it('should return 404 on not configured path', async () => {\n      const testEndpoint = `${endpoint}/not-configured`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(response.status).to.equal(404);\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect timeout settings","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":169,"column":39,"index":5863},"line":169,"code":"    it('should respect timeout settings', async () => {\n      const testEndpoint = `${endpoint}/bar/timeout`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(response.status).to.equal(500);\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should support CORS when indicated","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":176,"column":42,"index":6112},"line":176,"code":"    it('should support CORS when indicated', async () => {\n      const testEndpoint = `${endpoint}/bar/whatever`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET',\n        headers: {\n          Origin: 'https://serverless.com'\n        }\n      });\n      expect(response.headers.get('access-control-allow-origin')).to.equal('*');\n      expect(response.headers.get('access-control-expose-headers')).to.equal('x-foo');\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose a GET HTTP endpoint backed by JWT authorization","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":187,"column":69,"index":6585},"line":187,"code":"    it('should expose a GET HTTP endpoint backed by JWT authorization', async () => {\n      const testEndpoint = `${endpoint}/foo`;\n      const responseUnauthorized = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(responseUnauthorized.status).to.equal(401);\n      const token = (await awsRequest(CognitoIdentityServiceProviderService, 'initiateAuth', {\n        AuthFlow: 'USER_PASSWORD_AUTH',\n        AuthParameters: {\n          USERNAME: userName,\n          PASSWORD: userPassword\n        },\n        ClientId: clientId\n      })).AuthenticationResult.IdToken;\n      const responseAuthorized = await fetch(testEndpoint, {\n        method: 'GET',\n        headers: {\n          Authorization: token\n        }\n      });\n      const json = await responseAuthorized.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/foo'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose a GET HTTP endpoint backed by simple custom request authorization","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":213,"column":87,"index":7492},"line":213,"code":"    it('should expose a GET HTTP endpoint backed by simple custom request authorization', async () => {\n      const testEndpoint = `${endpoint}/behind-simple-authorizer`;\n      const responseUnauthorized = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(responseUnauthorized.status).to.equal(403);\n      const responseAuthorized = await fetch(testEndpoint, {\n        method: 'GET',\n        headers: {\n          Authorization: 'secretToken'\n        }\n      });\n      const json = await responseAuthorized.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/behind-simple-authorizer'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose a GET HTTP endpoint backed by standard custom request authorization","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":231,"column":89,"index":8149},"line":231,"code":"    it('should expose a GET HTTP endpoint backed by standard custom request authorization', async () => {\n      const testEndpoint = `${endpoint}/behind-standard-authorizer`;\n      const responseUnauthorized = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(responseUnauthorized.status).to.equal(403);\n      const responseAuthorized = await fetch(testEndpoint, {\n        method: 'GET',\n        headers: {\n          Authorization: 'secretToken'\n        }\n      });\n      const json = await responseAuthorized.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/behind-standard-authorizer'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose access logs when configured to","suites":["HTTP API Integration Test","Specific endpoints"],"updatePoint":{"line":249,"column":52,"index":8773},"line":249,"code":"    it('should expose access logs when configured to', () => confirmCloudWatchLogs(`/aws/http-api/${stackName}`, async () => {\n      const response = await fetch(`${endpoint}/some-post`, {\n        method: 'POST'\n      });\n      await response.json();\n    }).then(events => {\n      expect(events.length > 0).to.equal(true);\n    }));","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should catch all root endpoint","suites":["HTTP API Integration Test","Catch-all endpoints"],"updatePoint":{"line":274,"column":38,"index":9682},"line":274,"code":"    it('should catch all root endpoint', async () => {\n      const testEndpoint = `${endpoint}`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should catch all whatever endpoint","suites":["HTTP API Integration Test","Catch-all endpoints"],"updatePoint":{"line":285,"column":42,"index":10002},"line":285,"code":"    it('should catch all whatever endpoint', async () => {\n      const testEndpoint = `${endpoint}/whatever`;\n      const response = await fetch(testEndpoint, {\n        method: 'PATCH'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'PATCH',\n        path: '/whatever'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should catch all methods on method catch all endpoint","suites":["HTTP API Integration Test","Catch-all endpoints"],"updatePoint":{"line":296,"column":61,"index":10362},"line":296,"code":"    it('should catch all methods on method catch all endpoint', async () => {\n      const testEndpoint = `${endpoint}/foo`;\n      const response = await fetch(testEndpoint, {\n        method: 'PATCH'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'PATCH',\n        path: '/foo'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible POST HTTP endpoint","suites":["HTTP API Integration Test","Shared API"],"updatePoint":{"line":346,"column":54,"index":11948},"line":346,"code":"    it('should expose an accessible POST HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/some-post`;\n      const response = await fetch(testEndpoint, {\n        method: 'POST'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'POST',\n        path: '/some-post'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible paramed GET HTTP endpoint","suites":["HTTP API Integration Test","Shared API"],"updatePoint":{"line":357,"column":61,"index":12308},"line":357,"code":"    it('should expose an accessible paramed GET HTTP endpoint', async () => {\n      const testEndpoint = `${endpoint}/bar/whatever`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      const json = await response.json();\n      expect(json).to.deep.equal({\n        method: 'GET',\n        path: '/bar/whatever'\n      });\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should return 404 on not supported method","suites":["HTTP API Integration Test","Shared API"],"updatePoint":{"line":368,"column":49,"index":12660},"line":368,"code":"    it('should return 404 on not supported method', async () => {\n      const testEndpoint = `${endpoint}/foo`;\n      const response = await fetch(testEndpoint, {\n        method: 'POST'\n      });\n      expect(response.status).to.equal(404);\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"should return 404 on not configured path","suites":["HTTP API Integration Test","Shared API"],"updatePoint":{"line":375,"column":48,"index":12908},"line":375,"code":"    it('should return 404 on not configured path', async () => {\n      const testEndpoint = `${endpoint}/not-configured`;\n      const response = await fetch(testEndpoint, {\n        method: 'GET'\n      });\n      expect(response.status).to.equal(404);\n    });","file":"integration/aws/http-api.test.js","skipped":false,"dir":"test"},{"name":"correctly processes messages from Active MQ queue","suites":["AWS - Active MQ Integration Test"],"updatePoint":{"line":88,"column":55,"index":3050},"line":88,"code":"  it('correctly processes messages from Active MQ queue', async () => {\n    const functionName = 'consumer';\n    const message = 'Hello from Apache MQ Integration test!';\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => await awsRequest(LambdaService, 'invoke', {\n      FunctionName: `${stackName}-producer`,\n      InvocationType: 'RequestResponse'\n    }), {\n      checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes(message)\n    });\n    const logs = events.reduce((data, event) => data + event.message, '');\n    expect(logs).to.include(functionName);\n    expect(logs).to.include(message);\n  });","file":"integration/aws/infra-dependent/active-mq.test.js","skipped":true,"dir":"test"},{"name":"should be able to write to efs and read from it in a separate function","suites":["AWS - FileSystemConfig Integration Test"],"updatePoint":{"line":72,"column":76,"index":2264},"line":72,"code":"  it('should be able to write to efs and read from it in a separate function', async function self() {\n    try {\n      await awsRequest(LambdaService, 'invoke', {\n        FunctionName: `${stackName}-writer`,\n        InvocationType: 'RequestResponse'\n      });\n    } catch (e) {\n      // Sometimes EFS is not available right away which causes invoke to fail,\n      // here we retry it to avoid that issue\n      if (retryableMountErrors.has(e.code) && Date.now() - startTime < EFS_MAX_PROPAGATION_TIME) {\n        log.warn('Failed to invoke, retry');\n        return self();\n      }\n      throw e;\n    }\n    const readerResult = await awsRequest(LambdaService, 'invoke', {\n      FunctionName: `${stackName}-reader`,\n      InvocationType: 'RequestResponse'\n    });\n    const payload = JSON.parse(readerResult.Payload);\n    expect(payload).to.deep.equal({\n      result: 'fromlambda'\n    });\n    return null;\n  });","file":"integration/aws/infra-dependent/file-system-config.test.js","skipped":false,"dir":"test"},{"name":"correctly processes messages from MSK topic","suites":["AWS - MSK Integration Test"],"updatePoint":{"line":78,"column":49,"index":2490},"line":78,"code":"  it('correctly processes messages from MSK topic', async () => {\n    const functionName = 'consumer';\n    const message = 'Hello from MSK Integration test!';\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => await awsRequest(LambdaService, 'invoke', {\n      FunctionName: `${stackName}-producer`,\n      InvocationType: 'RequestResponse'\n    }), {\n      checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes(message)\n    });\n    const logs = events.reduce((data, event) => data + event.message, '');\n    expect(logs).to.include(functionName);\n    expect(logs).to.include(message);\n  });","file":"integration/aws/infra-dependent/msk.test.js","skipped":false,"dir":"test"},{"name":"correctly processes messages from RabbitMQ queue","suites":["AWS - RabbitMQ Integration Test"],"updatePoint":{"line":92,"column":54,"index":3227},"line":92,"code":"  it('correctly processes messages from RabbitMQ queue', async () => {\n    const functionName = 'consumer';\n    const message = 'Hello from RabbitMQ Integration test!';\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => await awsRequest(LambdaService, 'invoke', {\n      FunctionName: `${stackName}-producer`,\n      InvocationType: 'RequestResponse'\n    }), {\n      checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes(message)\n    });\n    const logs = events.reduce((data, event) => data + event.message, '');\n    expect(logs).to.include(functionName);\n    expect(logs).to.include(message);\n  });","file":"integration/aws/infra-dependent/rabbit-mq.test.js","skipped":true,"dir":"test"},{"name":"setup a new IoT Thing with the provisioning template","suites":["test/integration/aws/iotFleetProvisioning.test.js"],"updatePoint":{"line":79,"column":58,"index":2651},"line":79,"code":"  it('setup a new IoT Thing with the provisioning template', async () => {\n    const [{\n      certificatePem,\n      keyPair\n    }, iotEndpoint] = await Promise.all([awsRequest(IotService, 'createProvisioningClaim', {\n      templateName: await resolveTemplateName()\n    }), resolveIotEndpoint()]);\n    const {\n      Payload\n    } = await awsRequest(LambdaService, 'invoke', {\n      FunctionName: `${stackName}-registerDevice`,\n      InvocationType: 'RequestResponse',\n      Payload: JSON.stringify({\n        iotEndpoint,\n        certificatePem,\n        privateKey: keyPair.PrivateKey\n      })\n    });\n    const payload = JSON.parse(Payload);\n    ({\n      certificateId\n    } = payload);\n    const {\n      thingName: provisionnedThingName,\n      errorMessage\n    } = payload;\n    if (errorMessage) throw new Error(`Invocation errored with: ${errorMessage}`);\n    expect(provisionnedThingName).to.equal(thingName);\n  });","file":"integration/aws/iot-fleet-provisioning.test.js","skipped":false,"dir":"test"},{"name":"should invoke on a topic message matching the rule","suites":["AWS - IoT Integration Test","Basic Setup"],"updatePoint":{"line":37,"column":58,"index":1017},"line":37,"code":"    it('should invoke on a topic message matching the rule', async () => {\n      const functionName = 'iotBasic';\n      const message = JSON.stringify({\n        message: 'Hello from IoT!'\n      });\n\n      // NOTE: This test may fail on fresh accounts where the IoT endpoint has not completed provisioning\n      const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => publishIotData(iotTopic, message), {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes(message);\n        }\n      });\n      const logs = events.reduce((data, event) => data + event.message, '');\n      expect(logs).to.include(message);\n    });","file":"integration/aws/iot.test.js","skipped":false,"dir":"test"},{"name":"should be correctly invoked by sqs event","suites":["AWS - Provisioned Concurrency Integration Test"],"updatePoint":{"line":51,"column":46,"index":1685},"line":51,"code":"  it('should be correctly invoked by sqs event', async () => {\n    const functionName = 'provisionedFunc';\n    const message = 'Hello from SQS!';\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => sendSqsMessage(queueName, message), {\n      checkIsComplete: items => items.find(item => item.message.includes(message))\n    });\n    const logs = events.reduce((data, event) => data + event.message, '');\n    expect(logs).to.include(functionName);\n    expect(logs).to.include(message);\n  });","file":"integration/aws/provisioned-concurrency.test.js","skipped":false,"dir":"test"},{"name":"should be correctly invoked by kinesis event","suites":["AWS - Provisioned Concurrency Integration Test"],"updatePoint":{"line":61,"column":50,"index":2223},"line":61,"code":"  it('should be correctly invoked by kinesis event', async () => {\n    const functionName = 'provisionedFunc';\n    const message = 'Hello from Kinesis!';\n    const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putKinesisRecord(streamName, message), {\n      checkIsComplete: items => items.find(item => item.message.includes(message))\n    });\n    const logs = events.reduce((data, event) => data + event.message, '');\n    expect(logs).to.include(functionName);\n    expect(logs).to.include(message);\n  });","file":"integration/aws/provisioned-concurrency.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an object is created","suites":["AWS - S3 Integration Test","Minimal Setup"],"updatePoint":{"line":55,"column":56,"index":1906},"line":55,"code":"    it('should invoke function when an object is created', () => {\n      const functionName = 'minimal';\n      const expectedMessage = `Hello from S3! - (${functionName})`;\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketMinimalSetup), {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes('ObjectCreated:Put');\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(/aws:s3/g.test(logs)).to.equal(true);\n        expect(/ObjectCreated:Put/g.test(logs)).to.equal(true);\n        expect(logs.includes(expectedMessage)).to.equal(true);\n      });\n    });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an object is removed","suites":["AWS - S3 Integration Test","Extended Setup"],"updatePoint":{"line":72,"column":56,"index":2748},"line":72,"code":"    it('should invoke function when an object is removed', () => {\n      const functionName = 'extended';\n      const expectedMessage = `Hello from S3! - (${functionName})`;\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExtendedSetup, {\n        prefix: 'photos/',\n        suffix: '.jpg'\n      }), {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes('ObjectRemoved:Delete');\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(/aws:s3/g.test(logs)).to.equal(true);\n        expect(/ObjectRemoved:Delete/g.test(logs)).to.equal(true);\n        expect(logs.includes(expectedMessage)).to.equal(true);\n      });\n    });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an object is created","suites":["AWS - S3 Integration Test","Custom Setup"],"updatePoint":{"line":92,"column":56,"index":3657},"line":92,"code":"    it('should invoke function when an object is created', () => {\n      const functionName = 'custom';\n      const expectedMessage = `Hello from S3! - (${functionName})`;\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketCustomName), {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes('ObjectCreated:Put');\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(/aws:s3/g.test(logs)).to.equal(true);\n        expect(/ObjectCreated:Put/g.test(logs)).to.equal(true);\n        expect(logs.includes(expectedMessage)).to.equal(true);\n      });\n    });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when an object is created","suites":["AWS - S3 Integration Test","Existing Setup","Single function / single bucket setup"],"updatePoint":{"line":110,"column":58,"index":4560},"line":110,"code":"      it('should invoke function when an object is created', () => {\n        const functionName = 'existing';\n        const expectedMessage = `Hello from S3! - (${functionName})`;\n        return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExistingSimpleSetup, {\n          prefix: 'Files/',\n          suffix: '.TXT'\n        }), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('ObjectCreated:Put');\n          }\n        }).then(events => {\n          const logs = events.reduce((data, event) => data + event.message, '');\n          expect(/aws:s3/g.test(logs)).to.equal(true);\n          expect(/ObjectCreated:Put/g.test(logs)).to.equal(true);\n          expect(logs.includes(expectedMessage)).to.equal(true);\n        });\n      });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a .jpg object is created","suites":["AWS - S3 Integration Test","Existing Setup","Multi function / multi bucket setup"],"updatePoint":{"line":130,"column":62,"index":5535},"line":130,"code":"      it('should invoke function when a .jpg object is created', () => {\n        const functionName = 'existingCreated';\n        const expectedMessage = `Hello from S3! - (${functionName})`;\n        return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExistingComplexSetup, {\n          prefix: 'photos',\n          suffix: '.jpg'\n        }), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('ObjectCreated:Put');\n          }\n        }).then(events => {\n          const logs = events.reduce((data, event) => data + event.message, '');\n          expect(/aws:s3/g.test(logs)).to.equal(true);\n          expect(/ObjectCreated:Put/g.test(logs)).to.equal(true);\n          expect(logs.includes(expectedMessage)).to.equal(true);\n        });\n      });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a .jpg object is removed","suites":["AWS - S3 Integration Test","Existing Setup","Multi function / multi bucket setup"],"updatePoint":{"line":148,"column":62,"index":6450},"line":148,"code":"      it('should invoke function when a .jpg object is removed', () => {\n        const functionName = 'existingRemoved';\n        const expectedMessage = `Hello from S3! - (${functionName})`;\n        return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExistingComplexSetup, {\n          prefix: 'photos',\n          suffix: '.jpg'\n        }), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('ObjectRemoved:Delete');\n          }\n        }).then(events => {\n          const logs = events.reduce((data, event) => data + event.message, '');\n          expect(/aws:s3/g.test(logs)).to.equal(true);\n          expect(/ObjectRemoved:Delete/g.test(logs)).to.equal(true);\n          expect(logs.includes(expectedMessage)).to.equal(true);\n        });\n      });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a .png object is created","suites":["AWS - S3 Integration Test","Existing Setup","Multi function / multi bucket setup"],"updatePoint":{"line":166,"column":62,"index":7371},"line":166,"code":"      it('should invoke function when a .png object is created', async () => {\n        const functionName = 'existingCreated';\n        const expectedMessage = `Hello from S3! - (${functionName})`;\n        return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExistingComplexSetup, {\n          prefix: 'photos',\n          suffix: '.png'\n        }), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('ObjectCreated:Put');\n          }\n        }).then(events => {\n          const logs = events.reduce((data, event) => data + event.message, '');\n          expect(/aws:s3/g.test(logs)).to.equal(true);\n          expect(/ObjectCreated:Put/g.test(logs)).to.equal(true);\n          expect(logs.includes(expectedMessage)).to.equal(true);\n        });\n      });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke function when a .png object is removed","suites":["AWS - S3 Integration Test","Existing Setup","Multi function / multi bucket setup"],"updatePoint":{"line":184,"column":62,"index":8292},"line":184,"code":"      it('should invoke function when a .png object is removed', async () => {\n        const functionName = 'existingRemoved';\n        const expectedMessage = `Hello from S3! - (${functionName})`;\n        return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => createAndRemoveInBucket(bucketExistingComplexSetup, {\n          prefix: 'photos',\n          suffix: '.png'\n        }), {\n          checkIsComplete: soFarEvents => {\n            const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n            return logs.includes('ObjectRemoved:Delete');\n          }\n        }).then(events => {\n          const logs = events.reduce((data, event) => data + event.message, '');\n          expect(/aws:s3/g.test(logs)).to.equal(true);\n          expect(/ObjectRemoved:Delete/g.test(logs)).to.equal(true);\n          expect(logs.includes(expectedMessage)).to.equal(true);\n        });\n      });","file":"integration/aws/s3.test.js","skipped":false,"dir":"test"},{"name":"should invoke every minute","suites":["AWS - Schedule Integration Test","Minimal Setup"],"updatePoint":{"line":30,"column":34,"index":795},"line":30,"code":"    it('should invoke every minute', async () => {\n      const functionName = 'scheduleMinimal';\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => {}, {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes(functionName);\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n      });\n    });","file":"integration/aws/schedule.test.js","skipped":false,"dir":"test"},{"name":"should invoke every minute with transformed input","suites":["AWS - Schedule Integration Test","Extended Setup"],"updatePoint":{"line":44,"column":57,"index":1409},"line":44,"code":"    it('should invoke every minute with transformed input', async () => {\n      const functionName = 'scheduleExtended';\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => {}, {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes('transformedInput');\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n        expect(logs).to.include('transformedInput');\n      });\n    });","file":"integration/aws/schedule.test.js","skipped":false,"dir":"test"},{"name":"should invoke every minute with transformed input","suites":["AWS - Schedule Integration Test","Extended Setup (array)"],"updatePoint":{"line":59,"column":57,"index":2097},"line":59,"code":"    it('should invoke every minute with transformed input', () => {\n      const functionName = 'scheduleExtendedArray';\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, async () => {}, {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes('transformedInput');\n        }\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n        expect(logs).to.include('transformedInput');\n      });\n    });","file":"integration/aws/schedule.test.js","skipped":false,"dir":"test"},{"name":"should invoke on a topic message","suites":["AWS - SNS Integration Test","Minimal Setup"],"updatePoint":{"line":50,"column":40,"index":1530},"line":50,"code":"    it('should invoke on a topic message', async () => {\n      const functionName = 'snsMinimal';\n      const message = 'Hello from SNS!';\n      const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => publishSnsMessage(minimalTopicName, message), {\n        checkIsComplete: soFarEvents => {\n          const logs = soFarEvents.reduce((data, event) => data + event.message, '');\n          return logs.includes(message);\n        }\n      });\n      const logs = events.reduce((data, event) => data + event.message, '');\n      expect(logs).to.include(functionName);\n      expect(logs).to.include(message);\n    });","file":"integration/aws/sns.test.js","skipped":false,"dir":"test"},{"name":"should invoke on a topic message that matches filter","suites":["AWS - SNS Integration Test","Multiple and Filtered Setup"],"updatePoint":{"line":65,"column":60,"index":2257},"line":65,"code":"    it('should invoke on a topic message that matches filter', async () => {\n      const leftFunctionName = 'snsMultipleFilteredLeft';\n      const rightFunctionName = 'snsMultipleFilteredRight';\n      const leftMessage = 'Hello to the left-side from SNS!';\n      const rightMessage = 'Hello to the right-side from SNS!';\n      const middleMessage = 'Hello to the middle-side from SNS!';\n      const leftAttributes = {\n        side: {\n          DataType: 'String',\n          StringValue: 'left'\n        }\n      };\n      const middleAttributes = {\n        side: {\n          DataType: 'String',\n          StringValue: 'middle'\n        }\n      };\n      const rightAttributes = {\n        side: {\n          DataType: 'String',\n          StringValue: 'right'\n        }\n      };\n      return Promise.all([confirmCloudWatchLogs(`/aws/lambda/${stackName}-${leftFunctionName}`, async () => {\n        await publishSnsMessage(filteredTopicName, middleMessage, middleAttributes);\n        await publishSnsMessage(filteredTopicName, leftMessage, leftAttributes);\n      }, {\n        checkIsComplete: events => events.reduce((data, event) => data + event.message, '').includes(leftMessage)\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(leftFunctionName);\n        expect(logs).to.include(leftMessage);\n        expect(logs).not.to.include(middleMessage);\n        expect(logs).not.to.include(rightMessage);\n      }), confirmCloudWatchLogs(`/aws/lambda/${stackName}-${rightFunctionName}`, async () => {\n        await publishSnsMessage(filteredTopicName, middleMessage, middleAttributes);\n        await publishSnsMessage(filteredTopicName, rightMessage, rightAttributes);\n      }, {\n        checkIsComplete: events => events.reduce((data, event) => data + event.message, '').includes(rightMessage)\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(rightFunctionName);\n        expect(logs).not.to.include(leftMessage);\n        expect(logs).not.to.include(middleMessage);\n        expect(logs).to.include(rightMessage);\n      })]);\n    });","file":"integration/aws/sns.test.js","skipped":false,"dir":"test"},{"name":"should invoke on an existing topic message","suites":["AWS - SNS Integration Test","Existing Setup"],"updatePoint":{"line":115,"column":50,"index":4482},"line":115,"code":"    it('should invoke on an existing topic message', async () => {\n      const functionName = 'snsExisting';\n      const message = 'Hello from an existing SNS!';\n      const events = await confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => publishSnsMessage(existingTopicName, message), {\n        checkIsComplete: soFarEvents => soFarEvents.reduce((data, event) => data + event.message, '').includes(message)\n      });\n      const logs = events.reduce((data, event) => data + event.message, '');\n      expect(logs).to.include(functionName);\n      expect(logs).to.include(message);\n    });","file":"integration/aws/sns.test.js","skipped":false,"dir":"test"},{"name":"should invoke on queue message(s)","suites":["AWS - SQS Integration Test","Basic Setup"],"updatePoint":{"line":49,"column":41,"index":1465},"line":49,"code":"    it('should invoke on queue message(s)', async () => {\n      const functionName = 'sqsBasic';\n      const message = 'Hello from SQS!';\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => sendSqsMessage(queueName, message), {\n        checkIsComplete: events => events.reduce((data, event) => data + event.message, '').includes(message)\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n        expect(logs).to.include(message);\n      });\n    });","file":"integration/aws/sqs.test.js","skipped":false,"dir":"test"},{"name":"should invoke on kinesis messages from the trim horizon","suites":["AWS - Stream Integration Test","Kinesis Streams"],"updatePoint":{"line":51,"column":63,"index":1655},"line":51,"code":"    it('should invoke on kinesis messages from the trim horizon', async () => {\n      const functionName = 'streamKinesis';\n      const message = 'Hello from Kinesis!';\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => putKinesisRecord(streamName, message), {\n        checkIsComplete: events => events.reduce((data, event) => data + event.message, '').includes(message)\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n        expect(logs).to.include(message);\n        expect(logs).to.include(historicStreamMessage);\n      });\n    });","file":"integration/aws/stream.test.js","skipped":false,"dir":"test"},{"name":"should invoke on dynamodb messages from the latest position","suites":["AWS - Stream Integration Test","DynamoDB Streams"],"updatePoint":{"line":65,"column":67,"index":2377},"line":65,"code":"    it('should invoke on dynamodb messages from the latest position', async () => {\n      const functionName = 'streamDynamoDb';\n      const item = {\n        id: String(Date.now())\n      };\n      return confirmCloudWatchLogs(`/aws/lambda/${stackName}-${functionName}`, () => {\n        item.hello = `from dynamo!${Math.random().toString(36).slice(2)}`;\n        return putDynamoDbItem(tableName, item);\n      }, {\n        checkIsComplete: events => events.reduce((data, event) => data + event.message, '').includes(functionName)\n      }).then(events => {\n        const logs = events.reduce((data, event) => data + event.message, '');\n        expect(logs).to.include(functionName);\n        expect(logs).to.include('INSERT');\n        expect(logs).to.include(item.id);\n      });\n    });","file":"integration/aws/stream.test.js","skipped":false,"dir":"test"},{"name":"should expose a websocket route that can reply to a message","suites":["AWS - API Gateway Websocket Integration Test","Two-Way Setup"],"updatePoint":{"line":54,"column":67,"index":1694},"line":54,"code":"    it('should expose a websocket route that can reply to a message', async () => {\n      const webSocketServerUrl = await getWebSocketServerUrl();\n      return new Promise((resolve, reject) => {\n        const ws = new WebSocket(webSocketServerUrl);\n        reject = (promiseReject => error => {\n          promiseReject(error);\n          try {\n            ws.close();\n          } catch (closeError) {\n            // safe to ignore\n          }\n        })(reject);\n        const sendMessage = () => {\n          log.debug(\"Sending message to 'hello' route\");\n          ws.send(JSON.stringify({\n            action: 'hello',\n            name: 'serverless'\n          }));\n          timeoutId = setTimeout(sendMessage, 1000);\n        };\n        ws.on('error', reject);\n        ws.on('open', sendMessage);\n        ws.on('close', resolve);\n        ws.on('message', event => {\n          clearTimeout(timeoutId);\n          try {\n            log.debug(`Received WebSocket message: ${event}`);\n            expect(event).to.equal('Hello, serverless');\n          } finally {\n            ws.close();\n          }\n        });\n      }).finally(() => clearTimeout(timeoutId));\n    });","file":"integration/aws/websocket.test.js","skipped":false,"dir":"test"},{"name":"should expose an accessible websocket endpoint","suites":["AWS - API Gateway Websocket Integration Test","Minimal Setup"],"updatePoint":{"line":90,"column":54,"index":2888},"line":90,"code":"    it('should expose an accessible websocket endpoint', async () => {\n      const webSocketServerUrl = await getWebSocketServerUrl();\n      log.debug(`WebSocket Server URL ${webSocketServerUrl}`);\n      expect(webSocketServerUrl).to.match(/wss:\\/\\/.+\\.execute-api\\..+\\.amazonaws\\.com.+/);\n      return new Promise((resolve, reject) => {\n        const ws = new WebSocket(webSocketServerUrl);\n        let isRejected = false;\n        reject = (promiseReject => error => {\n          isRejected = true;\n          promiseReject(error);\n          try {\n            ws.close();\n          } catch (closeError) {\n            // safe to ignore\n          }\n        })(reject);\n        ws.on('error', reject);\n        ws.on('open', () => {\n          confirmCloudWatchLogs(`/aws/websocket/${stackName}`, () => {\n            if (isRejected) throw new Error('Stop propagation');\n            ws.send('test message');\n            return wait(500);\n          }).then(events => {\n            expect(events.length > 0).to.equal(true);\n            ws.close();\n          }, reject);\n        });\n        ws.on('close', resolve);\n        ws.on('message', event => {\n          log.debug('Unexpected WebSocket message', event);\n          reject(new Error('Unexpected message'));\n        });\n      });\n    });","file":"integration/aws/websocket.test.js","skipped":false,"dir":"test"},{"name":"should add the routes to the referenced API","suites":["AWS - API Gateway Websocket Integration Test","Minimal Setup","when using an existing websocket API"],"updatePoint":{"line":160,"column":53,"index":5551},"line":160,"code":"      it('should add the routes to the referenced API', async () => {\n        const routes = await getRoutes(websocketApiId);\n        expect(routes.length).to.equal(4);\n      });","file":"integration/aws/websocket.test.js","skipped":false,"dir":"test"},{"name":"should generate scaffolding for \"aws-nodejs\" template in provided path and rename service","suites":["test/integration/create.test.js"],"updatePoint":{"line":16,"column":95,"index":495},"line":16,"code":"  it('should generate scaffolding for \"aws-nodejs\" template in provided path and rename service', async () => {\n    const tmpDir = getTmpDirPath();\n    await spawn(serverlessExec, ['create', '--template', 'aws-nodejs', '--path', tmpDir, '--name', 'new-service-name']);\n    const dirContent = await fsp.readdir(tmpDir);\n    expect(dirContent).to.include('handler.js');\n    expect(dirContent).to.include('serverless.yml');\n    expect(dirContent).to.include('.gitignore');\n    const serverlessYmlfileContent = (await fsp.readFile(path.join(tmpDir, 'serverless.yml'))).toString();\n    expect(serverlessYmlfileContent).to.include('service: new-service-name');\n  });","file":"integration/create.test.js","skipped":false,"dir":"test"},{"name":"should generate scaffolding for \"aws-nodejs\" template in current directory","suites":["test/integration/create.test.js"],"updatePoint":{"line":26,"column":80,"index":1141},"line":26,"code":"  it('should generate scaffolding for \"aws-nodejs\" template in current directory', async () => {\n    const tmpDir = getTmpDirPath();\n    await fse.ensureDir(tmpDir);\n    await spawn(serverlessExec, ['create', '--template', 'aws-nodejs'], {\n      cwd: tmpDir\n    });\n    const dirContent = await fsp.readdir(tmpDir);\n    expect(dirContent).to.include('handler.js');\n    expect(dirContent).to.include('serverless.yml');\n    expect(dirContent).to.include('.gitignore');\n    const serverlessYmlfileContent = (await fsp.readFile(path.join(tmpDir, 'serverless.yml'))).toString();\n    // We are checking that it includes basename of dir as it will be included in service name\n    expect(serverlessYmlfileContent).to.include(path.basename(tmpDir));\n  });","file":"integration/create.test.js","skipped":false,"dir":"test"},{"name":"should generate scaffolding for \"plugin\" template","suites":["test/integration/create.test.js"],"updatePoint":{"line":40,"column":55,"index":1863},"line":40,"code":"  it('should generate scaffolding for \"plugin\" template', async () => {\n    const tmpDir = getTmpDirPath();\n    await fse.ensureDir(tmpDir);\n    await spawn(serverlessExec, ['create', '--template', 'plugin'], {\n      cwd: tmpDir\n    });\n    const dirContent = await fsp.readdir(tmpDir);\n    expect(dirContent).to.include('index.js');\n    expect(dirContent).to.include('README.md');\n    expect(dirContent).to.include('package.json');\n  });","file":"integration/create.test.js","skipped":false,"dir":"test"},{"name":"should error out when trying to create project in current working dir and the project files are already present in it","suites":["test/integration/create.test.js"],"updatePoint":{"line":51,"column":123,"index":2370},"line":51,"code":"  it('should error out when trying to create project in current working dir and the project files are already present in it', async () => {\n    const tmpDir = getTmpDirPath();\n    await fse.ensureDir(tmpDir);\n    await fsp.writeFile(path.join(tmpDir, 'handler.js'), '');\n    let err;\n    try {\n      await spawn(serverlessExec, ['create', '--template', 'aws-nodejs'], {\n        cwd: tmpDir\n      });\n    } catch (e) {\n      err = e;\n    }\n    expect(err.stdoutBuffer.toString()).to.contain('Move it and try again');\n  });","file":"integration/create.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-python-requirements\"","suites":["test/integration/curated-plugins-python.test.js"],"updatePoint":{"line":29,"column":60,"index":797},"line":29,"code":"  it('should be extended by \"serverless-python-requirements\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-python-requirements']\n    });\n    await spawn(serverlessExec, ['package'], {\n      cwd: serviceDir\n    });\n    const packagePath = path.resolve(serviceDir, '.serverless', `${serviceConfig.service}.zip`);\n    const filesInZip = await listZipFiles(packagePath);\n    expect(filesInZip).to.include('requests/__init__.py');\n  });","file":"integration/curated-plugins-python.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-offline\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":41,"column":48,"index":1127},"line":41,"code":"  it('should be extended by \"serverless-offline\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-offline']\n    });\n    const slsProcessPromise = spawn(serverlessExec, ['offline'], {\n      cwd: serviceDir\n    });\n    const slsProcess = slsProcessPromise.child;\n    let output = '';\n    slsProcess.stderr.on('data', function self(data) {\n      output += data;\n      if (output.includes('Server ready:')) {\n        slsProcess.stderr.off('data', self);\n        got('http://localhost:3000/dev/foo').json().then(async responseBody => {\n          expect(responseBody.message).to.equal('Test');\n        }).finally(() => slsProcess.kill('SIGINT'));\n      }\n    });\n    await slsProcessPromise;\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-webpack\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":61,"column":48,"index":1839},"line":61,"code":"  it('should be extended by \"serverless-webpack\"', async () => {\n    await spawn(serverlessExec, ['package'], {\n      cwd: serviceDir\n    });\n    const packagePath = path.resolve(serviceDir, '.serverless', `${serviceConfig.service}.zip`);\n    const originalPackageSize = (await fsp.stat(packagePath)).size;\n    await updateConfig({\n      plugins: ['serverless-webpack']\n    });\n    await spawn(serverlessExec, ['package'], {\n      cwd: serviceDir\n    });\n    const bundledPackageSize = (await fsp.stat(packagePath)).size;\n    expect(originalPackageSize / 10).to.be.above(bundledPackageSize);\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-domain-manager\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":76,"column":55,"index":2444},"line":76,"code":"  it('should be extended by \"serverless-domain-manager\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-domain-manager']\n    });\n    const {\n      stderrBuffer\n    } = await spawn(serverlessExec, ['info'], {\n      cwd: serviceDir\n    });\n    expect(String(stderrBuffer)).to.include('Serverless Domain Manager:');\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-prune-plugin\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":87,"column":53,"index":2782},"line":87,"code":"  it('should be extended by \"serverless-prune-plugin\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-prune-plugin']\n    });\n    const {\n      stderrBuffer\n    } = await spawn(serverlessExec, ['prune', '-n', '10'], {\n      cwd: serviceDir\n    });\n    expect(String(stderrBuffer)).to.include('Pruning of functions complete');\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-dotenv-plugin\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":98,"column":54,"index":3135},"line":98,"code":"  it('should be extended by \"serverless-dotenv-plugin\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-dotenv-plugin']\n    });\n    const {\n      stderrBuffer\n    } = await spawn(serverlessExec, ['package'], {\n      cwd: serviceDir\n    });\n    expect(String(stderrBuffer)).to.include('DOTENV: Loading environment variables');\n    const cfTemplate = JSON.parse(await fsp.readFile(path.resolve(serviceDir, '.serverless/cloudformation-template-update-stack.json')));\n    expect(cfTemplate.Resources.FunctionLambdaFunction.Properties.Environment.Variables.DOTENV_PLUGIN_TEST).to.equal('passed');\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-iam-roles-per-function\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":111,"column":63,"index":3762},"line":111,"code":"  it('should be extended by \"serverless-iam-roles-per-function\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-iam-roles-per-function'],\n      functions: {\n        function: {\n          iamRoleStatementsName: 'fn-plugin-role-name',\n          iamRoleStatements: [{\n            Effect: 'Allow',\n            Action: ['dynamodb:GetItem'],\n            Resource: 'arn:aws:dynamodb:${aws:region}:*:table/mytable'\n          }]\n        }\n      }\n    });\n    try {\n      await spawn(serverlessExec, ['package'], {\n        cwd: serviceDir\n      });\n      const cfTemplate = JSON.parse(await fsp.readFile(path.resolve(serviceDir, '.serverless/cloudformation-template-update-stack.json')));\n      expect(cfTemplate.Resources.FunctionIamRoleLambdaExecution.Properties.RoleName).to.equal('fn-plugin-role-name');\n    } finally {\n      await updateConfig({\n        functions: {\n          function: {\n            iamRoleStatementsName: null,\n            iamRoleStatements: null\n          }\n        }\n      });\n    }\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-plugin-typescript\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":142,"column":58,"index":4783},"line":142,"code":"  it('should be extended by \"serverless-plugin-typescript\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-plugin-typescript'],\n      functions: {\n        functionTs: {\n          handler: 'index-ts.handler'\n        }\n      }\n    });\n    try {\n      await spawn(serverlessExec, ['package'], {\n        cwd: serviceDir\n      });\n      const zip = new AdmZip(path.resolve(serviceDir, `.serverless/${serviceConfig.service}.zip`));\n      const zipEntry = zip.getEntries().find(({\n        entryName\n      }) => entryName === 'index-ts.js');\n      const tmpModulePath = path.resolve(serviceDir, '.serverless/test-ts.js');\n      await fsp.writeFile(tmpModulePath, zipEntry.getData());\n      expect(require(tmpModulePath).testData).to.deep.equal({\n        value: 'test-ts-compilation'\n      });\n    } finally {\n      await updateConfig({\n        functions: {\n          functionTs: null\n        }\n      });\n    }\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should be extended by \"serverless-step-functions\"","suites":["test/integration/curated-plugins.test.js"],"updatePoint":{"line":172,"column":55,"index":5709},"line":172,"code":"  it('should be extended by \"serverless-step-functions\"', async () => {\n    await updateConfig({\n      plugins: ['serverless-step-functions'],\n      stepFunctions: {\n        stateMachines: {\n          testMachine: {\n            definition: {\n              StartAt: 'FirstState',\n              States: {\n                FirstState: {\n                  Type: 'Task',\n                  Resource: {\n                    'Fn::GetAtt': ['entry', 'Arn']\n                  },\n                  Next: 'mapped_task'\n                },\n                mapped_task: {\n                  Type: 'Map',\n                  Iterator: {\n                    StartAt: 'FirstMapTask',\n                    States: {\n                      FirstMapTask: {\n                        Type: 'Task',\n                        Resource: {\n                          'Fn::GetAtt': ['mapTask', 'Arn']\n                        },\n                        End: true\n                      }\n                    }\n                  },\n                  End: true\n                }\n              }\n            }\n          }\n        },\n        validate: true\n      }\n    });\n    try {\n      await spawn(serverlessExec, ['package'], {\n        cwd: serviceDir\n      });\n      const cfTemplate = JSON.parse(await fsp.readFile(path.resolve(serviceDir, '.serverless/cloudformation-template-update-stack.json')));\n      expect(cfTemplate.Resources.TestMachineStepFunctionsStateMachine.Type).to.equal('AWS::StepFunctions::StateMachine');\n    } finally {\n      await updateConfig({\n        stepFunctions: null\n      });\n    }\n  });","file":"integration/curated-plugins.test.js","skipped":false,"dir":"test"},{"name":"should install plugin","suites":["test/integration/plugin-install.test.js"],"updatePoint":{"line":25,"column":27,"index":807},"line":25,"code":"  it('should install plugin', async () => {\n    await fsp.access(path.resolve(serviceDir, 'node_modules/serverless-offline'));\n  });","file":"integration/plugin-install.test.js","skipped":false,"dir":"test"},{"name":"should print health status after command which triggered deprecation","suites":["test/unit/commands/doctor.test.js"],"updatePoint":{"line":16,"column":74,"index":573},"line":16,"code":"  it('should print health status after command which triggered deprecation', async () => {\n    const {\n      servicePath: serviceDir\n    } = await fixturesEngine.setup('http-api', {\n      configExt: {\n        provider: {\n          httpApi: {\n            useProviderTags: true\n          }\n        }\n      }\n    });\n    // Trigger deprecation\n    await spawn('node', [serverlessPath, 'print'], {\n      cwd: serviceDir\n    });\n\n    // Gather Health status\n    expect(String((await spawn('node', [serverlessPath, 'doctor'])).stdoutBuffer)).to.include('deprecation triggered in the last command');\n  });","file":"unit/commands/doctor.test.js","skipped":false,"dir":"test"},{"name":"should inform of no issues when no health status found","suites":["test/unit/commands/doctor.test.js"],"updatePoint":{"line":36,"column":60,"index":1158},"line":36,"code":"  it('should inform of no issues when no health status found', async () => {\n    // Trigger command that reports no issues\n    await spawn('node', [serverlessPath, 'config', '--help']);\n\n    // Gather Health status\n    expect(String((await spawn('node', [serverlessPath, 'doctor'])).stdoutBuffer)).to.be.empty;\n  });","file":"unit/commands/doctor.test.js","skipped":false,"dir":"test"},{"name":"Should auto choose console with \"--console\" flag","suites":["test/unit/commands/login.test.js"],"updatePoint":{"line":26,"column":54,"index":897},"line":26,"code":"  it('Should auto choose console with \"--console\" flag', async () => {\n    await login({\n      options: {\n        console: true\n      }\n    });\n    expect(loginConsoleStub.calledOnce).to.be.true;\n    expect(loginDashboardStub.notCalled).to.be.true;\n  });","file":"unit/commands/login.test.js","skipped":false,"dir":"test"},{"name":"Should auto choose dashboard with \"--dashboard\" flag","suites":["test/unit/commands/login.test.js"],"updatePoint":{"line":35,"column":58,"index":1156},"line":35,"code":"  it('Should auto choose dashboard with \"--dashboard\" flag', async () => {\n    await login({\n      options: {\n        dashboard: true\n      }\n    });\n    expect(loginDashboardStub.calledOnce).to.be.true;\n    expect(loginConsoleStub.notCalled).to.be.true;\n  });","file":"unit/commands/login.test.js","skipped":false,"dir":"test"},{"name":"Should auto choose dashboard in dashboard enabled service","suites":["test/unit/commands/login.test.js"],"updatePoint":{"line":44,"column":63,"index":1422},"line":44,"code":"  it('Should auto choose dashboard in dashboard enabled service', async () => {\n    await login({\n      configuration: {\n        org: 'foo',\n        app: 'foo'\n      },\n      options: {}\n    });\n    expect(loginDashboardStub.calledOnce).to.be.true;\n    expect(loginConsoleStub.notCalled).to.be.true;\n  });","file":"unit/commands/login.test.js","skipped":false,"dir":"test"},{"name":"Should prompt user in non service context","suites":["test/unit/commands/login.test.js"],"updatePoint":{"line":55,"column":47,"index":1712},"line":55,"code":"  it('Should prompt user in non service context', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        identityName: 'console'\n      }\n    });\n    const {\n      history\n    } = await login({\n      options: {}\n    });\n    expect(loginConsoleStub.calledOnce).to.be.true;\n    expect(loginDashboardStub.notCalled).to.be.true;\n    expect(Array.from(history.valuesMap())).to.deep.equal([['identityName', 'console']]);\n  });","file":"unit/commands/login.test.js","skipped":false,"dir":"test"},{"name":"should logout","suites":["test/unit/commands/logout.test.js"],"updatePoint":{"line":37,"column":19,"index":1050},"line":37,"code":"  it('should logout', async () => {\n    expect(configUtils.getLoggedInUser()).to.equal(null);\n  });","file":"unit/commands/logout.test.js","skipped":false,"dir":"test"},{"name":"should install plugin","suites":["test/unit/commands/plugin-install.test.js","without plugins in configuration"],"updatePoint":{"line":45,"column":29,"index":1455},"line":45,"code":"    it('should install plugin', () => {\n      const firstCall = spawnFake.firstCall;\n      const command = [firstCall.args[0], ...firstCall.args[1]].join(' ');\n      const expectedCommand = `${npmCommand} install --save-dev ${pluginName}`;\n      expect(command).to.have.string(expectedCommand);\n    });","file":"unit/commands/plugin-install.test.js","skipped":false,"dir":"test"},{"name":"should add plugin to serverless file","suites":["test/unit/commands/plugin-install.test.js","without plugins in configuration"],"updatePoint":{"line":51,"column":44,"index":1773},"line":51,"code":"    it('should add plugin to serverless file', async () => {\n      const serverlessFileObj = yaml.load(await fse.readFile(configurationFilePath, 'utf8'), {\n        filename: configurationFilePath\n      });\n      expect(serverlessFileObj.plugins).to.include(pluginName);\n    });","file":"unit/commands/plugin-install.test.js","skipped":false,"dir":"test"},{"name":"should not add plugin to serverless file if it is already present in configuration but configured behind a variable","suites":["test/unit/commands/plugin-install.test.js","with plugins in configuration"],"updatePoint":{"line":59,"column":123,"index":2188},"line":59,"code":"    it('should not add plugin to serverless file if it is already present in configuration but configured behind a variable', async () => {\n      const fixture = await fixturesEngine.setup('function', {\n        configExt: {\n          plugins: ['${self:custom.pluginName}'],\n          custom: {\n            pluginName\n          }\n        }\n      });\n      const configuration = fixture.serviceConfig;\n\n      // Simulate that the variable has been resolved\n      configuration.plugins = [pluginName];\n      const serviceDir = fixture.servicePath;\n      const configurationFilePath = await resolveConfigurationPath({\n        cwd: serviceDir\n      });\n      const configurationFilename = configurationFilePath.slice(serviceDir.length + 1);\n      const options = {\n        name: pluginName\n      };\n      await installPlugin({\n        configuration,\n        serviceDir,\n        configurationFilename,\n        options\n      });\n      const serverlessFileObj = yaml.load(await fse.readFile(configurationFilePath, 'utf8'), {\n        filename: configurationFilePath\n      });\n      expect(serverlessFileObj.plugins).not.to.include(pluginName);\n    });","file":"unit/commands/plugin-install.test.js","skipped":false,"dir":"test"},{"name":"should uninstall plugin","suites":["test/unit/commands/plugin-uninstall.test.js"],"updatePoint":{"line":46,"column":29,"index":1397},"line":46,"code":"  it('should uninstall plugin', () => {\n    const firstCall = spawnFake.firstCall;\n    const command = [firstCall.args[0], ...firstCall.args[1]].join(' ');\n    const expectedCommand = `${npmCommand} uninstall --save-dev ${pluginName}`;\n    expect(command).to.have.string(expectedCommand);\n  });","file":"unit/commands/plugin-uninstall.test.js","skipped":false,"dir":"test"},{"name":"should remove plugin from serverless file","suites":["test/unit/commands/plugin-uninstall.test.js"],"updatePoint":{"line":52,"column":47,"index":1710},"line":52,"code":"  it('should remove plugin from serverless file', async () => {\n    const serverlessFileObj = yaml.load(await fse.readFile(configurationFilePath, 'utf8'), {\n      filename: configurationFilePath\n    });\n    expect(serverlessFileObj.plugins).to.be.undefined;\n  });","file":"unit/commands/plugin-uninstall.test.js","skipped":false,"dir":"test"},{"name":"Should properly detect credentials","suites":["test/unit/lib/aws/has-local-credentials.test.js","In environment credentials"],"updatePoint":{"line":28,"column":42,"index":949},"line":28,"code":"    it('Should properly detect credentials', () => {\n      expect(uncachedHasLocalCredentials()).to.equal(true);\n    });","file":"unit/lib/aws/has-local-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should properly detect credentials","suites":["test/unit/lib/aws/has-local-credentials.test.js","With profile in `.aws`"],"updatePoint":{"line":43,"column":42,"index":1698},"line":43,"code":"    it('Should properly detect credentials', () => {\n      expect(uncachedHasLocalCredentials()).to.equal(true);\n    });","file":"unit/lib/aws/has-local-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should properly report lack of credentials","suites":["test/unit/lib/aws/has-local-credentials.test.js","Without credentials in `.aws` or in env"],"updatePoint":{"line":61,"column":50,"index":2297},"line":61,"code":"    it('Should properly report lack of credentials', () => {\n      expect(uncachedHasLocalCredentials()).to.equal(false);\n    });","file":"unit/lib/aws/has-local-credentials.test.js","skipped":false,"dir":"test"},{"name":"should produce a meaningful error when no supported credentials are provided","suites":["#request","Credentials support"],"updatePoint":{"line":28,"column":84,"index":891},"line":28,"code":"    it('should produce a meaningful error when no supported credentials are provided', async () => {\n      const awsRequest = require('../../../../lib/aws/request');\n      return expect(awsRequest({\n        name: 'S3'\n      }, 'putObject', {\n        Bucket: 'test-bucket',\n        Key: 'test-key'\n      })).to.be.eventually.rejected.and.have.property('code', 'AWS_CREDENTIALS_NOT_FOUND');\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should support passing params without credentials","suites":["#request","Credentials support"],"updatePoint":{"line":37,"column":57,"index":1261},"line":37,"code":"    it('should support passing params without credentials', async () => {\n      const awsRequest = require('../../../../lib/aws/request');\n      return expect(awsRequest({\n        name: 'S3',\n        params: {\n          isS3TransferAccelerationEnabled: true\n        }\n      }, 'putObject', {\n        Bucket: 'test-bucket',\n        Key: 'test-key'\n      })).to.be.rejectedWith('AWS provider credentials not found.');\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should invoke expected AWS SDK methods","suites":["#request","Credentials support"],"updatePoint":{"line":50,"column":44,"index":1678},"line":50,"code":"  it('should invoke expected AWS SDK methods', async () => {\n    class FakeS3 {\n      putObject() {\n        return {\n          promise: async () => {\n            return {\n              called: true\n            };\n          }\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        S3: FakeS3\n      }\n    });\n    const res = await awsRequest({\n      name: 'S3'\n    }, 'putObject');\n    expect(res.called).to.equal(true);\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should support string for service argument","suites":["#request","Credentials support"],"updatePoint":{"line":72,"column":48,"index":2172},"line":72,"code":"  it('should support string for service argument', async () => {\n    class FakeS3 {\n      putObject() {\n        return {\n          promise: async () => {\n            return {\n              called: true\n            };\n          }\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        S3: FakeS3\n      }\n    });\n    const res = await awsRequest('S3', 'putObject', {});\n    return expect(res.called).to.equal(true);\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should handle subclasses","suites":["#request","Credentials support"],"updatePoint":{"line":92,"column":30,"index":2639},"line":92,"code":"  it('should handle subclasses', async () => {\n    class DocumentClient {\n      put() {\n        return {\n          promise: () => {\n            return {\n              called: true\n            };\n          }\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        DynamoDB: {\n          DocumentClient\n        }\n      }\n    });\n    const res = await awsRequest({\n      name: 'DynamoDB.DocumentClient'\n    }, 'put', {});\n    return expect(res.called).to.equal(true);\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should request to the specified region if region in options set","suites":["#request","Credentials support"],"updatePoint":{"line":116,"column":69,"index":3212},"line":116,"code":"  it('should request to the specified region if region in options set', async () => {\n    class FakeCloudFormation {\n      constructor(config) {\n        this.config = config;\n      }\n      describeStacks() {\n        return {\n          promise: async () => ({\n            region: this.config.region\n          })\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        CloudFormation: FakeCloudFormation\n      }\n    });\n    const res = await awsRequest({\n      name: 'CloudFormation',\n      params: {\n        credentials: {},\n        region: 'ap-northeast-1'\n      }\n    }, 'describeStacks', {\n      StackName: 'foo'\n    });\n    return expect(res).to.eql({\n      region: 'ap-northeast-1'\n    });\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should retry on retryable errors (429)","suites":["#request","Retries"],"updatePoint":{"line":148,"column":46,"index":3983},"line":148,"code":"    it('should retry on retryable errors (429)', async () => {\n      const error = {\n        statusCode: 429,\n        retryable: true,\n        message: 'Testing retry'\n      };\n      const sendFake = {\n        promise: sinon.stub()\n      };\n      sendFake.promise.onCall(0).returns(Promise.reject(error));\n      sendFake.promise.onCall(1).returns(Promise.resolve({\n        data: {}\n      }));\n      class FakeS3 {\n        error() {\n          return sendFake;\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        },\n        'timers-ext/promise/sleep': async () => {}\n      });\n      const res = await awsRequest({\n        name: 'S3'\n      }, 'error');\n      expect(sendFake.promise).to.have.been.calledTwice;\n      expect(res).to.exist;\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should retry if error code is 429 and retryable is set to false","suites":["#request","Retries"],"updatePoint":{"line":178,"column":71,"index":4837},"line":178,"code":"    it('should retry if error code is 429 and retryable is set to false', async () => {\n      const error = {\n        statusCode: 429,\n        retryable: false,\n        message: 'Testing retry'\n      };\n      const sendFake = {\n        promise: sinon.stub()\n      };\n      sendFake.promise.onCall(0).returns(Promise.reject(error));\n      sendFake.promise.onCall(1).returns(Promise.resolve({}));\n      class FakeS3 {\n        error() {\n          return sendFake;\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        },\n        'timers-ext/promise/sleep': async () => {}\n      });\n      const res = await awsRequest({\n        name: 'S3'\n      }, 'error');\n      expect(res).to.exist;\n      expect(sendFake.promise).to.have.been.calledTwice;\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should not retry if status code is 403 and retryable is set to true","suites":["#request","Retries"],"updatePoint":{"line":206,"column":75,"index":5672},"line":206,"code":"    it('should not retry if status code is 403 and retryable is set to true', async () => {\n      const error = {\n        providerError: {\n          statusCode: 403,\n          retryable: true,\n          code: 'retry',\n          message: 'Testing retry'\n        }\n      };\n      const sendFake = {\n        promise: sinon.stub()\n      };\n      sendFake.promise.onFirstCall().rejects(error);\n      sendFake.promise.onSecondCall().resolves({});\n      class FakeS3 {\n        error() {\n          return sendFake;\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        }\n      });\n      expect(awsRequest({\n        name: 'S3'\n      }, 'error')).to.be.rejected;\n      return expect(sendFake.promise).to.have.been.calledOnce;\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should not retry if error code is ExpiredTokenException and retryable is set to true","suites":["#request","Retries"],"updatePoint":{"line":235,"column":92,"index":6497},"line":235,"code":"    it('should not retry if error code is ExpiredTokenException and retryable is set to true', async () => {\n      const error = {\n        providerError: {\n          statusCode: 400,\n          retryable: true,\n          code: 'ExpiredTokenException',\n          message: 'Testing retry'\n        }\n      };\n      const sendFake = {\n        promise: sinon.stub()\n      };\n      sendFake.promise.onFirstCall().rejects(error);\n      sendFake.promise.onSecondCall().resolves({});\n      class FakeS3 {\n        error() {\n          return sendFake;\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        }\n      });\n      expect(awsRequest({\n        name: 'S3'\n      }, 'error')).to.be.rejected;\n      return expect(sendFake.promise).to.have.been.calledOnce;\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should expose non-retryable errors","suites":["#request","Retries"],"updatePoint":{"line":264,"column":42,"index":7288},"line":264,"code":"    it('should expose non-retryable errors', async () => {\n      const error = {\n        statusCode: 500,\n        message: 'Some error message',\n        code: 'SomeError'\n      };\n      class FakeS3 {\n        test() {\n          return {\n            promise: async () => {\n              throw error;\n            }\n          };\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        }\n      });\n      await expect(awsRequest({\n        name: 'S3'\n      }, 'test')).to.eventually.be.rejected.and.have.property('code', 'AWS_S3_TEST_SOME_ERROR');\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should handle numeric error codes","suites":["#request","Retries"],"updatePoint":{"line":288,"column":41,"index":7919},"line":288,"code":"    it('should handle numeric error codes', async () => {\n      const error = {\n        statusCode: 500,\n        message: 'Some error message',\n        code: 500\n      };\n      class FakeS3 {\n        test() {\n          return {\n            promise: async () => {\n              throw error;\n            }\n          };\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          S3: FakeS3\n        }\n      });\n      await expect(awsRequest({\n        name: 'S3'\n      }, 'test')).to.eventually.be.rejected.and.have.property('code', 'AWS_S3_TEST_HTTP_500_ERROR');\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should expose original error message in thrown error message","suites":["#request","Retries"],"updatePoint":{"line":313,"column":66,"index":8577},"line":313,"code":"  it('should expose original error message in thrown error message', () => {\n    const awsErrorResponse = {\n      message: 'Something went wrong...',\n      code: 'Forbidden',\n      region: null,\n      time: '2019-01-24T00:29:01.780Z',\n      requestId: 'DAF12C1111A62C6',\n      extendedRequestId: '1OnSExiLCOsKrsdjjyds31w=',\n      statusCode: 403,\n      retryable: false,\n      retryDelay: 13.433158364430508\n    };\n    class FakeS3 {\n      error() {\n        return {\n          promise: async () => Promise.reject(awsErrorResponse)\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        S3: FakeS3\n      }\n    });\n    return expect(awsRequest({\n      name: 'S3'\n    }, 'error')).to.be.rejectedWith(awsErrorResponse.message);\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should default to error code if error message is non-existent","suites":["#request","Retries"],"updatePoint":{"line":341,"column":67,"index":9373},"line":341,"code":"  it('should default to error code if error message is non-existent', () => {\n    const awsErrorResponse = {\n      message: null,\n      code: 'Forbidden',\n      region: null,\n      time: '2019-01-24T00:29:01.780Z',\n      requestId: 'DAF12C1111A62C6',\n      extendedRequestId: '1OnSExiLCOsKrsdjjyds31w=',\n      statusCode: 403,\n      retryable: false,\n      retryDelay: 13.433158364430508\n    };\n    class FakeS3 {\n      error() {\n        return {\n          promise: async () => Promise.reject(awsErrorResponse)\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        S3: FakeS3\n      }\n    });\n    return expect(awsRequest({\n      name: 'S3'\n    }, 'error')).to.be.rejectedWith(awsErrorResponse.code);\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should enable S3 acceleration if \"--aws-s3-accelerate\" CLI option is provided","suites":["#request","Retries"],"updatePoint":{"line":369,"column":83,"index":10161},"line":369,"code":"  it('should enable S3 acceleration if \"--aws-s3-accelerate\" CLI option is provided', async () => {\n    // mocking S3 for testing\n    class FakeS3 {\n      constructor(params) {\n        this.useAccelerateEndpoint = params.useAccelerateEndpoint;\n      }\n      putObject() {\n        return {\n          promise: async () => this\n        };\n      }\n    }\n    const awsRequest = proxyquire('../../../../lib/aws/request', {\n      './sdk-v2': {\n        S3: FakeS3\n      }\n    });\n    const service = await awsRequest({\n      name: 'S3',\n      params: {\n        isS3TransferAccelerationEnabled: true\n      }\n    }, 'putObject', {});\n    return expect(service.useAccelerateEndpoint).to.be.true;\n  });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should reuse the result if arguments are the same","suites":["#request","Caching through memoize"],"updatePoint":{"line":395,"column":57,"index":10872},"line":395,"code":"    it('should reuse the result if arguments are the same', async () => {\n      // mocking CF for testing\n      const expectedResult = {\n        called: true\n      };\n      const promiseStub = sinon.stub().returns(Promise.resolve({\n        called: true\n      }));\n      class FakeCF {\n        describeStacks() {\n          return {\n            promise: promiseStub\n          };\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          CloudFormation: FakeCF\n        }\n      });\n      const numTests = 100;\n      const executeRequest = () => awsRequest.memoized({\n        name: 'CloudFormation',\n        params: {\n          credentials: {},\n          useCache: true\n        }\n      }, 'describeStacks', {});\n      const requests = [];\n      for (let n = 0; n < numTests; n++) {\n        requests.push(executeRequest());\n      }\n      return Promise.all(requests).then(results => {\n        expect(Object.keys(results).length).to.equal(numTests);\n        results.forEach(result => {\n          expect(result).to.deep.equal(expectedResult);\n        });\n        expect(promiseStub).to.have.been.calledOnce;\n      });\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should not reuse the result if the region change","suites":["#request","Caching through memoize"],"updatePoint":{"line":435,"column":56,"index":12050},"line":435,"code":"    it('should not reuse the result if the region change', async () => {\n      const expectedResult = {\n        called: true\n      };\n      const promiseStub = sinon.stub().returns(Promise.resolve({\n        called: true\n      }));\n      class FakeCF {\n        constructor(credentials) {\n          this.credentials = credentials;\n        }\n        describeStacks() {\n          return {\n            promise: promiseStub\n          };\n        }\n      }\n      const awsRequest = proxyquire('../../../../lib/aws/request', {\n        './sdk-v2': {\n          CloudFormation: FakeCF\n        }\n      });\n      const executeRequestWithRegion = region => awsRequest({\n        name: 'CloudFormation',\n        params: {\n          region,\n          credentials: {},\n          useCache: true\n        }\n      }, 'describeStacks', {\n        StackName: 'same-stack'\n      });\n      const requests = [];\n      requests.push(executeRequestWithRegion('us-east-1'));\n      requests.push(executeRequestWithRegion('ap-northeast-1'));\n      return Promise.all(requests).then(results => {\n        expect(Object.keys(results).length).to.equal(2);\n        results.forEach(result => {\n          expect(result).to.deep.equal(expectedResult);\n        });\n        return expect(promiseStub.callCount).to.equal(2);\n      });\n    });","file":"unit/lib/aws/request.test.js","skipped":false,"dir":"test"},{"name":"should set the serverless instance","suites":["CLI","#constructor()"],"updatePoint":{"line":20,"column":42,"index":455},"line":20,"code":"    it('should set the serverless instance', () => {\n      cli = new CLI(serverless);\n      expect(cli.serverless).to.deep.equal(serverless);\n    });","file":"unit/lib/classes/cli.test.js","skipped":false,"dir":"test"},{"name":"should set an empty loadedPlugins array","suites":["CLI","#constructor()"],"updatePoint":{"line":24,"column":47,"index":610},"line":24,"code":"    it('should set an empty loadedPlugins array', () => {\n      cli = new CLI(serverless);\n      expect(cli.loadedPlugins.length).to.equal(0);\n    });","file":"unit/lib/classes/cli.test.js","skipped":false,"dir":"test"},{"name":"should set the loadedPlugins array with the given plugin instances","suites":["CLI","#setLoadedPlugins()"],"updatePoint":{"line":30,"column":74,"index":836},"line":30,"code":"    it('should set the loadedPlugins array with the given plugin instances', () => {\n      class PluginMock {}\n      const pluginMock = new PluginMock();\n      const plugins = [pluginMock];\n      cli = new CLI(serverless);\n      cli.setLoadedPlugins(plugins);\n      expect(cli.loadedPlugins[0]).to.equal(pluginMock);\n    });","file":"unit/lib/classes/cli.test.js","skipped":false,"dir":"test"},{"name":"should freeze parts of schema for service","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#constructor"],"updatePoint":{"line":13,"column":49,"index":498},"line":13,"code":"    it('should freeze parts of schema for service', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        expect(() => {\n          serverless.configSchemaHandler.schema.properties.service.name = 'changed';\n        }).to.throw(Error);\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should freeze parts of schema for plugins","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#constructor"],"updatePoint":{"line":23,"column":49,"index":846},"line":23,"code":"    it('should freeze parts of schema for plugins', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        expect(() => {\n          serverless.configSchemaHandler.schema.properties.plugins.properties = 'changed';\n        }).to.throw(Error);\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should freeze parts of schema for resources","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#constructor"],"updatePoint":{"line":33,"column":51,"index":1202},"line":33,"code":"    it('should freeze parts of schema for resources', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        expect(() => {\n          serverless.configSchemaHandler.schema.properties.resources.something = 'changed';\n        }).to.throw(Error);\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should freeze parts of schema for package","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#constructor"],"updatePoint":{"line":43,"column":49,"index":1557},"line":43,"code":"    it('should freeze parts of schema for package', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        expect(() => {\n          serverless.configSchemaHandler.schema.properties.package.properties.oneMore = {\n            type: 'string'\n          };\n        }).to.throw(Error);\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should freeze parts of schema for layers","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#constructor"],"updatePoint":{"line":55,"column":48,"index":1949},"line":55,"code":"    it('should freeze parts of schema for layers', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        expect(() => {\n          serverless.configSchemaHandler.schema.properties.layers.properties = 'changed';\n        }).to.throw(Error);\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should run without errors for valid config","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#validateConfig"],"updatePoint":{"line":67,"column":50,"index":2347},"line":67,"code":"    it('should run without errors for valid config', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      });\n      expect(getConfigurationValidationResult(serverless.configurationInput)).to.be.true;\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineFunctionEvent method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEvent"],"updatePoint":{"line":78,"column":60,"index":2715},"line":78,"code":"    it('should extend schema with defineFunctionEvent method', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        const expectedPieceOfSchema = {\n          type: 'object',\n          properties: {\n            someEvent: {\n              type: 'object',\n              properties: {\n                someRequiredStringProp: {\n                  type: 'string'\n                },\n                someNumberProp: {\n                  type: 'number'\n                }\n              },\n              required: ['someRequiredStringProp'],\n              additionalProperties: false\n            }\n          },\n          required: ['someEvent'],\n          additionalProperties: false\n        };\n        expect(serverless.serverless.configSchemaHandler.schema.properties.functions.patternProperties[FUNCTION_NAME_PATTERN].properties.events.items.anyOf.find(definition => definition.required[0] === 'someEvent')).to.deep.equal(expectedPieceOfSchema);\n        return;\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineFunctionEvent is used with an already defined event","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEvent"],"updatePoint":{"line":107,"column":83,"index":3805},"line":107,"code":"    it('should throw when defineFunctionEvent is used with an already defined event', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-function-event']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineFunctionEventProperties method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEventProperties"],"updatePoint":{"line":118,"column":70,"index":4251},"line":118,"code":"    it('should extend schema with defineFunctionEventProperties method', async () => {\n      const serverless = await runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      });\n      const existingEventDefinition = serverless.serverless.configSchemaHandler.schema.properties.functions.patternProperties[FUNCTION_NAME_PATTERN].properties.events.items.anyOf.find(definition => definition.required[0] === 'existingEvent').properties.existingEvent;\n      expect(existingEventDefinition.properties).to.have.deep.property('somePluginAdditionalEventProp', {\n        type: 'string'\n      });\n      expect(existingEventDefinition.required).to.include('somePluginAdditionalEventProp');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineFunctionEventProperties method on complex event schema","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEventProperties"],"updatePoint":{"line":129,"column":94,"index":4995},"line":129,"code":"    it('should extend schema with defineFunctionEventProperties method on complex event schema', async () => {\n      const serverless = await runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      });\n      const existingEventDefinition = serverless.serverless.configSchemaHandler.schema.properties.functions.patternProperties[FUNCTION_NAME_PATTERN].properties.events.items.anyOf.find(definition => definition.required[0] === 'existingComplexEvent').properties.existingComplexEvent;\n      expect(existingEventDefinition).to.deep.equal({\n        anyOf: [{\n          type: 'string'\n        }, {\n          type: 'object',\n          properties: {\n            existingPropForObjectEventDefinition: {\n              type: 'string'\n            },\n            somePluginAdditionalComplexEventProp: {\n              type: 'string'\n            }\n          },\n          required: ['somePluginAdditionalComplexEventProp']\n        }]\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineFunctionEventProperties is used on non existing event name","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEventProperties"],"updatePoint":{"line":152,"column":90,"index":5964},"line":152,"code":"    it('should throw when defineFunctionEventProperties is used on non existing event name', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-non-existing-event-error']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'UNRECOGNIZED_FUNCTION_EVENT_SCHEMA');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineFunctionEventProperties is used on event without object definition","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEventProperties"],"updatePoint":{"line":161,"column":98,"index":6397},"line":161,"code":"    it('should throw when defineFunctionEventProperties is used on event without object definition', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-complex-event-without-object-definition']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'FUNCTION_EVENT_SCHEMA_NOT_OBJECT');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineFunctionEventProperties is used with an already defined property","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionEventProperties"],"updatePoint":{"line":170,"column":96,"index":6841},"line":170,"code":"    it('should throw when defineFunctionEventProperties is used with an already defined property', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-function-event-property']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineFunctionProperties method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionProperties"],"updatePoint":{"line":181,"column":65,"index":7286},"line":181,"code":"    it('should extend schema with defineFunctionProperties method', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        const actualFunctionProperties = serverless.serverless.configSchemaHandler.schema.properties.functions.patternProperties[FUNCTION_NAME_PATTERN].properties;\n        expect(actualFunctionProperties).to.have.deep.property('someFunctionStringProp', {\n          type: 'string'\n        });\n        expect(actualFunctionProperties).to.have.deep.property('someRequiredFunctionNumberProp', {\n          type: 'number'\n        });\n        return;\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineFunctionProperties is used with an already defined property","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineFunctionProperties"],"updatePoint":{"line":196,"column":91,"index":7984},"line":196,"code":"    it('should throw when defineFunctionProperties is used with an already defined property', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-function-property']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineCustomProperties method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineCustomProperties"],"updatePoint":{"line":207,"column":63,"index":8419},"line":207,"code":"    it('should extend schema with defineCustomProperties method', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        const someCustomStringProp = {\n          type: 'string'\n        };\n        expect(serverless.serverless.configSchemaHandler.schema.properties.custom.properties.someCustomStringProp).to.deep.equal(someCustomStringProp);\n        return;\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineCustomProperties is used with an already defined property","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineCustomProperties"],"updatePoint":{"line":219,"column":89,"index":8914},"line":219,"code":"    it('should throw when defineCustomProperties is used with an already defined property', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-custom-property']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineTopLevelProperty method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineTopLevelProperty"],"updatePoint":{"line":230,"column":63,"index":9347},"line":230,"code":"    it('should extend schema with defineTopLevelProperty method', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        const expectedAppPropSchema = {\n          type: 'string'\n        };\n        expect(serverless.serverless.configSchemaHandler.schema.properties.top).to.deep.equal(expectedAppPropSchema);\n        return;\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineTopLevelProperty is used with an already defined property","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineTopLevelProperty"],"updatePoint":{"line":242,"column":89,"index":9809},"line":242,"code":"    it('should throw when defineTopLevelProperty is used with an already defined property', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-top-level-property']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should extend schema with defineProvider method","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineProvider"],"updatePoint":{"line":253,"column":55,"index":10229},"line":253,"code":"    it('should extend schema with defineProvider method', async () => {\n      return runServerless({\n        fixture: 'config-schema-extensions',\n        command: 'info'\n      }).then(serverless => {\n        const providerPieceOfSchema = {\n          type: 'object',\n          properties: {\n            name: {\n              const: 'someProvider'\n            },\n            stage: {\n              type: 'string'\n            }\n          },\n          required: ['name'],\n          additionalProperties: false\n        };\n        expect(serverless.serverless.configSchemaHandler.schema.properties.provider).to.deep.equal(providerPieceOfSchema);\n        const expectedHandlerPieceOfSchema = {\n          type: 'string'\n        };\n        expect(serverless.serverless.configSchemaHandler.schema.properties.functions.patternProperties[FUNCTION_NAME_PATTERN].properties.handler).to.deep.equal(expectedHandlerPieceOfSchema);\n        return;\n      });\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineProvider is used with an already defined property in provider","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineProvider"],"updatePoint":{"line":279,"column":93,"index":11215},"line":279,"code":"    it('should throw when defineProvider is used with an already defined property in provider', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-provider-property-in-provider']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when defineProvider is used with an already defined property in function","suites":["test/unit/lib/classes/ConfigSchemaHandler/index.test.js","#defineProvider"],"updatePoint":{"line":288,"column":93,"index":11640},"line":288,"code":"    it('should throw when defineProvider is used with an already defined property in function', async () => {\n      await expect(runServerless({\n        fixture: 'config-schema-extensions-error',\n        command: 'info',\n        configExt: {\n          plugins: ['./test-plugin-with-colliding-provider-property-in-function']\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'SCHEMA_COLLISION');\n    });","file":"unit/lib/classes/config-schema-handler/index.test.js","skipped":false,"dir":"test"},{"name":"should report error for unrecognized root property","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":243,"column":58,"index":6246},"line":243,"code":"    it('should report error for unrecognized root property', () => expect(errors.some(error => {\n      if (error.instancePath !== '') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      error.isExpected = true;\n      return true;\n    })).to.be.true);","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report error for unrecognized deep level property","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":249,"column":64,"index":6537},"line":249,"code":"    it('should report error for unrecognized deep level property', () => expect(errors.some(error => {\n      if (error.instancePath !== '/package') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      error.isExpected = true;\n      return true;\n    })).to.be.true);","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report error for invalid function name","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":255,"column":53,"index":6825},"line":255,"code":"    it('should report error for invalid function name', () => expect(errors.some(error => {\n      if (error.instancePath !== '/functions') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      error.isExpected = true;\n      return true;\n    })).to.be.true);","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report error for unrecognized event","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":261,"column":50,"index":7112},"line":261,"code":"    it('should report error for unrecognized event', () => expect(errors.some(error => {\n      if (error.instancePath !== '/functions/foo/events/0') return false;\n      if (error.keyword !== 'anyOf') return false;\n      error.isExpected = true;\n      return true;\n    })).to.be.true);","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report error for unrecognized property at event type configuration level","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":267,"column":87,"index":7434},"line":267,"code":"    it('should report error for unrecognized property at event type configuration level', () => expect(errors.some(error => {\n      if (error.instancePath !== '/functions/foo/events/1') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      error.isExpected = true;\n      return true;\n    })).to.be.true);","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report the duplicated erorr message if more than one dependency is missing only once","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":329,"column":99,"index":10739},"line":329,"code":"    it('should report the duplicated erorr message if more than one dependency is missing only once', () => {\n      const depsErrors = errors.filter(item => item.keyword === 'dependencies');\n      expect(depsErrors).to.have.lengthOf(1);\n      depsErrors[0].isExpected = true;\n    });","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should not report side errors","suites":["#normalizeAjvErrors","Reporting"],"updatePoint":{"line":334,"column":37,"index":10961},"line":334,"code":"    it('should not report side errors', () => expect(errors.filter(error => !error.isExpected)).to.deep.equal([]));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report \"additionalProperties\" error with meaningful message","suites":["#normalizeAjvErrors","Message customization"],"updatePoint":{"line":337,"column":74,"index":11164},"line":337,"code":"    it('should report \"additionalProperties\" error with meaningful message', () => expect(errors.find(error => {\n      if (error.instancePath !== '/package') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      return true;\n    }).message).to.include('unrecognized property '));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report invalid function name error with meaningful message","suites":["#normalizeAjvErrors","Message customization"],"updatePoint":{"line":342,"column":73,"index":11475},"line":342,"code":"    it('should report invalid function name error with meaningful message', () => expect(errors.find(error => {\n      if (error.instancePath !== '/functions') return false;\n      if (error.keyword !== 'additionalProperties') return false;\n      return true;\n    }).message).to.include('must be alphanumeric'));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report unrecognized event error with a meaningful message","suites":["#normalizeAjvErrors","Message customization"],"updatePoint":{"line":347,"column":72,"index":11785},"line":347,"code":"    it('should report unrecognized event error with a meaningful message', () => expect(errors.find(error => {\n      if (error.instancePath !== '/functions/foo/events/0') return false;\n      if (error.keyword !== 'anyOf') return false;\n      return true;\n    }).message).to.include('unsupported function event'));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report value which do not match multiple constants with a meaningful message","suites":["#normalizeAjvErrors","Message customization"],"updatePoint":{"line":352,"column":91,"index":12118},"line":352,"code":"    it('should report value which do not match multiple constants with a meaningful message', () => expect(errors.find(error => {\n      if (error.instancePath !== '/custom/someCustom') return false;\n      if (error.keyword !== 'anyOf') return false;\n      return true;\n    }).message).to.include('unsupported value'));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"should report value which do not match multiple string formats with a meaningful message","suites":["#normalizeAjvErrors","Message customization"],"updatePoint":{"line":357,"column":96,"index":12442},"line":357,"code":"    it('should report value which do not match multiple string formats with a meaningful message', () => expect(errors.find(error => {\n      if (error.instancePath !== '/custom/someString') return false;\n      if (error.keyword !== 'anyOf') return false;\n      return true;\n    }).message).to.include('unsupported string format'));","file":"unit/lib/classes/config-schema-handler/normalize-ajv-errors.test.js","skipped":false,"dir":"test"},{"name":"generates schema validation file","suites":["test/unit/lib/classes/ConfigSchemaHandler/resolveAjvValidate.test.js"],"updatePoint":{"line":24,"column":38,"index":823},"line":24,"code":"  it('generates schema validation file', async () => {\n    await resolveAjvValidate(schema);\n    const schemaHash = objectHash(deepSortObjectByKey(schema));\n    const fileStat = await fsp.lstat(path.resolve(process.env.SLS_SCHEMA_CACHE_BASE_DIR || os.homedir(), `.serverless/artifacts/ajv-validate-${require('ajv/package').version}`, `${schemaHash}.js`));\n    expect(fileStat.isFile()).to.be.true;\n  });","file":"unit/lib/classes/config-schema-handler/resolve-ajv-validate.test.js","skipped":false,"dir":"test"},{"name":"regenerates schema validation file if schema changes","suites":["test/unit/lib/classes/ConfigSchemaHandler/resolveAjvValidate.test.js"],"updatePoint":{"line":30,"column":58,"index":1247},"line":30,"code":"  it('regenerates schema validation file if schema changes', async () => {\n    await resolveAjvValidate(schema);\n    const updatedSchema = {\n      ...schema,\n      title: 'ChangedTitle'\n    };\n    await resolveAjvValidate(updatedSchema);\n    const schemaHash = objectHash(deepSortObjectByKey(updatedSchema));\n    const fileStat = await fsp.lstat(path.resolve(process.env.SLS_SCHEMA_CACHE_BASE_DIR || os.homedir(), `.serverless/artifacts/ajv-validate-${require('ajv/package').version}`, `${schemaHash}.js`));\n    expect(fileStat.isFile()).to.be.true;\n  });","file":"unit/lib/classes/config-schema-handler/resolve-ajv-validate.test.js","skipped":false,"dir":"test"},{"name":"should attach serverless instance","suites":["Config","#constructor()"],"updatePoint":{"line":12,"column":41,"index":346},"line":12,"code":"    it('should attach serverless instance', () => {\n      const configInstance = new Config(serverless);\n      expect(typeof configInstance.serverless.version).to.be.equal('string');\n    });","file":"unit/lib/classes/config.test.js","skipped":false,"dir":"test"},{"name":"should add config if provided","suites":["Config","#constructor()"],"updatePoint":{"line":16,"column":37,"index":533},"line":16,"code":"    it('should add config if provided', () => {\n      const configInstance = new Config(serverless, {\n        servicePath: 'string'\n      });\n      expect(configInstance.servicePath).to.be.equal('string');\n    });","file":"unit/lib/classes/config.test.js","skipped":false,"dir":"test"},{"name":"should update config","suites":["Config","#update()"],"updatePoint":{"line":24,"column":28,"index":776},"line":24,"code":"    it('should update config', () => {\n      const configInstance = new Config(serverless, {\n        servicePath: 'config1'\n      });\n      expect(configInstance.servicePath).to.be.equal('config1');\n      configInstance.update({\n        servicePath: 'config2'\n      });\n      expect(configInstance.servicePath).to.be.equal('config2');\n    });","file":"unit/lib/classes/config.test.js","skipped":false,"dir":"test"},{"name":"should set the serverless instance","suites":["PluginManager","#constructor()"],"updatePoint":{"line":389,"column":42,"index":11863},"line":389,"code":"    it('should set the serverless instance', () => {\n      expect(pluginManager.serverless).to.deep.equal(serverless);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should create an empty cliOptions object","suites":["PluginManager","#constructor()"],"updatePoint":{"line":392,"column":48,"index":11996},"line":392,"code":"    it('should create an empty cliOptions object', () => {\n      expect(pluginManager.cliOptions).to.deep.equal({});\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should create an empty cliCommands array","suites":["PluginManager","#constructor()"],"updatePoint":{"line":395,"column":48,"index":12121},"line":395,"code":"    it('should create an empty cliCommands array', () => {\n      expect(pluginManager.cliCommands.length).to.equal(0);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should create an empty plugins array","suites":["PluginManager","#constructor()"],"updatePoint":{"line":398,"column":44,"index":12244},"line":398,"code":"    it('should create an empty plugins array', () => {\n      expect(pluginManager.plugins.length).to.equal(0);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should create an empty commands object","suites":["PluginManager","#constructor()"],"updatePoint":{"line":401,"column":46,"index":12365},"line":401,"code":"    it('should create an empty commands object', () => {\n      expect(pluginManager.commands).to.deep.equal({});\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should set the cliOptions object","suites":["PluginManager","#setCliOptions()"],"updatePoint":{"line":406,"column":40,"index":12525},"line":406,"code":"    it('should set the cliOptions object', () => {\n      const options = {\n        foo: 'bar'\n      };\n      pluginManager.setCliOptions(options);\n      expect(pluginManager.cliOptions).to.deep.equal(options);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should set the cliCommands array","suites":["PluginManager","#setCliCommands()"],"updatePoint":{"line":415,"column":40,"index":12789},"line":415,"code":"    it('should set the cliCommands array', () => {\n      const commands = ['foo', 'bar'];\n      pluginManager.setCliCommands(commands);\n      expect(pluginManager.cliCommands).to.equal(commands);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should convert shortcuts into options when a one level deep command matches","suites":["PluginManager","#convertShortcutsIntoOptions()"],"updatePoint":{"line":422,"column":83,"index":13095},"line":422,"code":"    it('should convert shortcuts into options when a one level deep command matches', () => {\n      const cliOptionsMock = {\n        r: 'eu-central-1',\n        region: 'us-east-1'\n      };\n      const cliCommandsMock = ['deploy']; // command with one level deepness\n      const commandMock = {\n        options: {\n          region: {\n            shortcut: 'r'\n          }\n        }\n      };\n      pluginManager.setCliCommands(cliCommandsMock);\n      pluginManager.setCliOptions(cliOptionsMock);\n      pluginManager.convertShortcutsIntoOptions(commandMock);\n      expect(pluginManager.cliOptions.region).to.equal(cliOptionsMock.r);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not convert shortcuts into options when the shortcut is not given","suites":["PluginManager","#convertShortcutsIntoOptions()"],"updatePoint":{"line":440,"column":80,"index":13730},"line":440,"code":"    it('should not convert shortcuts into options when the shortcut is not given', () => {\n      const cliOptionsMock = {\n        r: 'eu-central-1',\n        region: 'us-east-1'\n      };\n      const cliCommandsMock = ['deploy'];\n      const commandMock = {\n        options: {\n          region: {}\n        }\n      };\n      pluginManager.setCliCommands(cliCommandsMock);\n      pluginManager.setCliOptions(cliOptionsMock);\n      pluginManager.convertShortcutsIntoOptions(commandMock);\n      expect(pluginManager.cliOptions.region).to.equal(cliOptionsMock.region);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should add a plugin instance to the plugins array","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":458,"column":57,"index":14316},"line":458,"code":"    it('should add a plugin instance to the plugins array', () => {\n      pluginManager.addPlugin(SynchronousPluginMock);\n      expect(pluginManager.plugins[0]).to.be.instanceof(SynchronousPluginMock);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load two plugins that happen to have the same class name","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":462,"column":71,"index":14540},"line":462,"code":"    it('should load two plugins that happen to have the same class name', () => {\n      function getFirst() {\n        return class PluginMock {};\n      }\n      function getSecond() {\n        return class PluginMock {};\n      }\n      const first = getFirst();\n      const second = getSecond();\n      pluginManager.addPlugin(first);\n      pluginManager.addPlugin(second);\n      expect(pluginManager.plugins[0]).to.be.instanceof(first);\n      expect(pluginManager.plugins[1]).to.be.instanceof(second);\n      expect(pluginManager.plugins.length).to.equal(2);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load the plugin commands","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":477,"column":39,"index":15071},"line":477,"code":"    it('should load the plugin commands', () => {\n      pluginManager.addPlugin(SynchronousPluginMock);\n      expect(pluginManager.commands).to.have.property('deploy');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should skip service related plugins which not match the services provider","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":481,"column":81,"index":15290},"line":481,"code":"    it('should skip service related plugins which not match the services provider', () => {\n      pluginManager.serverless.service.provider.name = 'someProvider';\n      class Plugin {\n        constructor() {\n          this.provider = 'someOtherProvider';\n        }\n      }\n      pluginManager.addPlugin(Plugin);\n      expect(pluginManager.plugins.length).to.equal(0);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should add service related plugins when provider property is the providers name","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":491,"column":87,"index":15672},"line":491,"code":"    it('should add service related plugins when provider property is the providers name', () => {\n      pluginManager.serverless.service.provider.name = 'someProvider';\n      class Plugin {\n        constructor() {\n          this.provider = 'someProvider';\n        }\n      }\n      pluginManager.addPlugin(Plugin);\n      expect(pluginManager.plugins[0]).to.be.an.instanceOf(Plugin);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should add service related plugins when provider propery is provider plugin","suites":["PluginManager","#addPlugin()"],"updatePoint":{"line":501,"column":83,"index":16057},"line":501,"code":"    it('should add service related plugins when provider propery is provider plugin', () => {\n      pluginManager.serverless.service.provider.name = 'someProvider';\n      class ProviderPlugin {\n        static getProviderName() {\n          return 'someProvider';\n        }\n      }\n      const providerPlugin = new ProviderPlugin();\n      class Plugin {\n        constructor() {\n          this.provider = providerPlugin;\n        }\n      }\n      pluginManager.addPlugin(Plugin);\n      expect(pluginManager.plugins[0]).to.be.an.instanceOf(Plugin);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should call async init on plugins that have it","suites":["PluginManager","#asyncPluginInit()"],"updatePoint":{"line":519,"column":54,"index":16626},"line":519,"code":"    it('should call async init on plugins that have it', async () => {\n      const plugin1 = new ServicePluginMock1();\n      plugin1.asyncInit = sinon.stub().returns(Promise.resolve());\n      pluginManager.plugins = [plugin1];\n      return pluginManager.asyncPluginInit().then(() => {\n        expect(plugin1.asyncInit.calledOnce).to.equal(true);\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load only core plugins when no service plugins are given","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":535,"column":71,"index":17336},"line":535,"code":"    it('should load only core plugins when no service plugins are given', async () => {\n      // Note: We need the Create plugin for this test to pass\n      await pluginManager.loadAllPlugins();\n\n      // note: this test will be refactored as the Create plugin will be moved\n      // to another directory\n      expect(pluginManager.plugins.length).to.be.above(0);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load all plugins when service plugins are given","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":543,"column":62,"index":17699},"line":543,"code":"    it('should load all plugins when service plugins are given', async () => {\n      const servicePlugins = ['ServicePluginMock1', 'ServicePluginMock2'];\n      await pluginManager.loadAllPlugins(servicePlugins);\n      expect(pluginManager.plugins.some(plugin => plugin instanceof ServicePluginMock1)).to.equal(true);\n      expect(pluginManager.plugins.some(plugin => plugin instanceof ServicePluginMock2)).to.equal(true);\n      expect(pluginManager.plugins.some(plugin => plugin instanceof EnterprisePluginMock)).to.equal(true);\n      // note: this test will be refactored as the Create plugin will be moved\n      // to another directory\n      expect(pluginManager.plugins.length).to.be.above(2);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load all plugins in the correct order","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":553,"column":52,"index":18394},"line":553,"code":"    it('should load all plugins in the correct order', async () => {\n      const servicePlugins = ['ServicePluginMock1', 'ServicePluginMock2'];\n      await pluginManager.loadAllPlugins(servicePlugins);\n      const pluginIndexes = [pluginManager.plugins.findIndex(plugin => plugin instanceof Create), pluginManager.plugins.findIndex(plugin => plugin instanceof ServicePluginMock1), pluginManager.plugins.findIndex(plugin => plugin instanceof ServicePluginMock2), pluginManager.plugins.findIndex(plugin => plugin instanceof EnterprisePluginMock)];\n      expect(pluginIndexes).to.deep.equal(pluginIndexes.slice().sort((a, b) => a - b));\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load the Serverless core plugins","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":559,"column":47,"index":19031},"line":559,"code":"    it('should load the Serverless core plugins', async () => {\n      await pluginManager.loadAllPlugins();\n      expect(pluginManager.plugins.length).to.be.above(1);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when trying to load unknown plugin","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":563,"column":64,"index":19223},"line":563,"code":"    it('should throw an error when trying to load unknown plugin', () => {\n      const servicePlugins = ['ServicePluginMock3', 'ServicePluginMock1'];\n      return expect(pluginManager.loadAllPlugins(servicePlugins)).to.be.rejectedWith(ServerlessError);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not throw error when trying to load unknown plugin with help flag","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":567,"column":80,"index":19500},"line":567,"code":"    it('should not throw error when trying to load unknown plugin with help flag', async () => {\n      const servicePlugins = ['ServicePluginMock3', 'ServicePluginMock1'];\n      pluginManager.setCliOptions({\n        help: true\n      });\n      resolveInput.clear();\n      return overrideArgv({\n        args: ['serverless', '--help']\n      }, () => {\n        return expect(pluginManager.loadAllPlugins(servicePlugins)).to.not.be.rejectedWith(ServerlessError);\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should pass through an error when plugin load fails","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":579,"column":59,"index":19955},"line":579,"code":"    it('should pass through an error when plugin load fails', () => {\n      const servicePlugins = ['BrokenPluginMock'];\n      return expect(pluginManager.loadAllPlugins(servicePlugins)).to.be.rejectedWith(brokenPluginError);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not throw error when running the plugin commands and given plugins does not exist","suites":["PluginManager","#loadAllPlugins()"],"updatePoint":{"line":583,"column":96,"index":20226},"line":583,"code":"    it('should not throw error when running the plugin commands and given plugins does not exist', () => {\n      const servicePlugins = ['ServicePluginMock3'];\n      const cliCommandsMock = ['plugin'];\n      pluginManager.setCliCommands(cliCommandsMock);\n      return expect(pluginManager.loadAllPlugins(servicePlugins)).to.not.be.rejectedWith(ServerlessError);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should resolve the service plugins","suites":["PluginManager","#resolveServicePlugins()"],"updatePoint":{"line":602,"column":42,"index":21089},"line":602,"code":"    it('should resolve the service plugins', async () => {\n      const servicePlugins = ['ServicePluginMock1', './RelativePath/ServicePluginMock2'];\n      expect(await pluginManager.resolveServicePlugins(servicePlugins)).to.deep.equal([ServicePluginMock1, ServicePluginMock2]);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not error if plugins = null","suites":["PluginManager","#resolveServicePlugins()"],"updatePoint":{"line":606,"column":42,"index":21375},"line":606,"code":"    it('should not error if plugins = null', () => {\n      // Happens when `plugins` property exists but is empty\n      const servicePlugins = null;\n      return expect(pluginManager.resolveServicePlugins(servicePlugins)).to.not.be.rejected;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not error if plugins = undefined","suites":["PluginManager","#resolveServicePlugins()"],"updatePoint":{"line":611,"column":47,"index":21630},"line":611,"code":"    it('should not error if plugins = undefined', () => {\n      // Happens when `plugins` property does not exist\n      const servicePlugins = undefined;\n      return expect(pluginManager.resolveServicePlugins(servicePlugins)).to.not.be.rejected;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should parse array object","suites":["PluginManager","#parsePluginsObject()"],"updatePoint":{"line":626,"column":33,"index":22257},"line":626,"code":"    it('should parse array object', () => {\n      const servicePlugins = ['ServicePluginMock1', 'ServicePluginMock2'];\n      parsePluginsObjectAndVerifyResult(servicePlugins, {\n        modules: servicePlugins,\n        localPath: path.join(serverless.serviceDir, '.serverless_plugins')\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should parse plugins object","suites":["PluginManager","#parsePluginsObject()"],"updatePoint":{"line":633,"column":35,"index":22562},"line":633,"code":"    it('should parse plugins object', () => {\n      const servicePlugins = {\n        modules: ['ServicePluginMock1', 'ServicePluginMock2'],\n        localPath: './myplugins'\n      };\n      parsePluginsObjectAndVerifyResult(servicePlugins, {\n        modules: servicePlugins.modules,\n        localPath: servicePlugins.localPath\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should parse plugins object if format is not correct","suites":["PluginManager","#parsePluginsObject()"],"updatePoint":{"line":643,"column":60,"index":22930},"line":643,"code":"    it('should parse plugins object if format is not correct', () => {\n      const servicePlugins = {};\n      parsePluginsObjectAndVerifyResult(servicePlugins, {\n        modules: [],\n        localPath: path.join(serverless.serviceDir, '.serverless_plugins')\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should parse plugins object if modules property is not an array","suites":["PluginManager","#parsePluginsObject()"],"updatePoint":{"line":650,"column":71,"index":23217},"line":650,"code":"    it('should parse plugins object if modules property is not an array', () => {\n      const servicePlugins = {\n        modules: {}\n      };\n      parsePluginsObjectAndVerifyResult(servicePlugins, {\n        modules: [],\n        localPath: path.join(serverless.serviceDir, '.serverless_plugins')\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should parse plugins object if localPath is not correct","suites":["PluginManager","#parsePluginsObject()"],"updatePoint":{"line":659,"column":63,"index":23523},"line":659,"code":"    it('should parse plugins object if localPath is not correct', () => {\n      const servicePlugins = {\n        modules: ['ServicePluginMock1', 'ServicePluginMock2'],\n        localPath: {}\n      };\n      parsePluginsObjectAndVerifyResult(servicePlugins, {\n        modules: servicePlugins.modules,\n        localPath: path.join(serverless.serviceDir, '.serverless_plugins')\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should return an alias target","suites":["PluginManager","command aliases","#getAliasCommandTarget"],"updatePoint":{"line":672,"column":39,"index":23981},"line":672,"code":"      it('should return an alias target', () => {\n        pluginManager.aliases = {\n          cmd1: {\n            cmd2: {\n              command: 'command1'\n            },\n            cmd3: {\n              cmd4: {\n                command: 'command2'\n              }\n            }\n          }\n        };\n        expect(pluginManager.getAliasCommandTarget(['cmd1', 'cmd2'])).to.equal('command1');\n        expect(pluginManager.getAliasCommandTarget(['cmd1', 'cmd3', 'cmd4'])).to.equal('command2');\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should return undefined if alias does not exist","suites":["PluginManager","command aliases","#getAliasCommandTarget"],"updatePoint":{"line":688,"column":57,"index":24503},"line":688,"code":"      it('should return undefined if alias does not exist', () => {\n        pluginManager.aliases = {\n          cmd1: {\n            cmd2: {\n              command: 'command1'\n            },\n            cmd3: {\n              cmd4: {\n                command: 'command2'\n              }\n            }\n          }\n        };\n        expect(pluginManager.getAliasCommandTarget(['cmd1'])).to.be.undefined;\n        expect(pluginManager.getAliasCommandTarget(['cmd1', 'cmd3'])).to.be.undefined;\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should create an alias for a command","suites":["PluginManager","command aliases","#createCommandAlias"],"updatePoint":{"line":706,"column":46,"index":25040},"line":706,"code":"      it('should create an alias for a command', () => {\n        pluginManager.aliases = {};\n        expect(pluginManager.createCommandAlias('cmd1:alias2', 'cmd2:cmd3:cmd4')).to.not.throw;\n        expect(pluginManager.createCommandAlias('cmd1:alias2:alias3', 'cmd2:cmd3:cmd5')).to.not.throw;\n        expect(pluginManager.aliases).to.deep.equal({\n          cmd1: {\n            alias2: {\n              command: 'cmd2:cmd3:cmd4',\n              alias3: {\n                command: 'cmd2:cmd3:cmd5'\n              }\n            }\n          }\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should fail if the alias already exists","suites":["PluginManager","command aliases","#createCommandAlias"],"updatePoint":{"line":721,"column":49,"index":25600},"line":721,"code":"      it('should fail if the alias already exists', () => {\n        pluginManager.aliases = {\n          cmd1: {\n            alias2: {\n              command: 'cmd2:cmd3:cmd4',\n              alias3: {\n                command: 'cmd2:cmd3:cmd5'\n              }\n            }\n          }\n        };\n        expect(() => pluginManager.createCommandAlias('cmd1:alias2', 'mycmd')).to.throw(/Alias \"cmd1:alias2\" is already defined/);\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should fail if the alias overwrites a command","suites":["PluginManager","command aliases","#createCommandAlias"],"updatePoint":{"line":734,"column":55,"index":26041},"line":734,"code":"      it('should fail if the alias overwrites a command', () => {\n        const synchronousPluginMockInstance = new SynchronousPluginMock();\n        pluginManager.loadCommands(synchronousPluginMockInstance);\n        expect(() => pluginManager.createCommandAlias('deploy', 'mycmd')).to.throw(/Command \"deploy\" cannot be overriden/);\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should fail if the alias overwrites the very own command","suites":["PluginManager","command aliases","#createCommandAlias"],"updatePoint":{"line":739,"column":66,"index":26394},"line":739,"code":"      it('should fail if the alias overwrites the very own command', () => {\n        const synchronousPluginMockInstance = new SynchronousPluginMock();\n        synchronousPluginMockInstance.commands.deploy.commands.onpremises.aliases = ['deploy'];\n        expect(() => pluginManager.loadCommands(synchronousPluginMockInstance)).to.throw(/Command \"deploy\" cannot be overriden/);\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load the plugin commands","suites":["PluginManager","#loadCommands()"],"updatePoint":{"line":747,"column":39,"index":26807},"line":747,"code":"    it('should load the plugin commands', () => {\n      const synchronousPluginMockInstance = new SynchronousPluginMock();\n      pluginManager.loadCommands(synchronousPluginMockInstance);\n      expect(pluginManager.commands).to.have.property('deploy');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should merge plugin commands","suites":["PluginManager","#loadCommands()"],"updatePoint":{"line":752,"column":36,"index":27065},"line":752,"code":"    it('should merge plugin commands', () => {\n      pluginManager.loadCommands({\n        commands: {\n          deploy: {\n            lifecycleEvents: ['one'],\n            options: {\n              foo: {}\n            }\n          }\n        }\n      });\n      pluginManager.loadCommands({\n        commands: {\n          deploy: {\n            lifecycleEvents: ['one', 'two'],\n            options: {\n              bar: {}\n            },\n            commands: {\n              fn: {}\n            }\n          }\n        }\n      });\n      expect(pluginManager.commands.deploy).to.have.property('options').that.has.all.keys('foo', 'bar');\n      expect(pluginManager.commands.deploy).to.have.property('lifecycleEvents').that.is.an('array').that.deep.equals(['one', 'two']);\n      expect(pluginManager.commands.deploy.commands).to.have.property('fn');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should fail if there is already an alias for a command","suites":["PluginManager","#loadCommands()"],"updatePoint":{"line":780,"column":62,"index":27937},"line":780,"code":"    it('should fail if there is already an alias for a command', () => {\n      pluginManager.aliases = {\n        deploy: {\n          command: 'my:deploy'\n        }\n      };\n      const synchronousPluginMockInstance = new SynchronousPluginMock();\n      expect(() => pluginManager.loadCommands(synchronousPluginMockInstance)).to.throw(/Command \"deploy\" cannot override an existing alias/);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should replace deprecated events with the new ones","suites":["PluginManager","#loadHooks()"],"updatePoint":{"line":801,"column":58,"index":28677},"line":801,"code":"    it('should replace deprecated events with the new ones', () => {\n      pluginManager.loadHooks(deprecatedPluginInstance);\n      expect(pluginManager.hooks['deprecated:deprecated']).to.equal(undefined);\n      expect(pluginManager.hooks['new:new'][0].pluginName).to.equal('DeprecatedLifecycleEventsPluginMock');\n      expect(pluginManager.hooks['untouched:untouched'][0].pluginName).to.equal('DeprecatedLifecycleEventsPluginMock');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should return all loaded plugins","suites":["PluginManager","#getPlugins()"],"updatePoint":{"line":813,"column":40,"index":29296},"line":813,"code":"    it('should return all loaded plugins', async () => {\n      const servicePlugins = ['ServicePluginMock1', 'ServicePluginMock2'];\n      await pluginManager.loadAllPlugins(servicePlugins);\n      const plugins = pluginManager.getPlugins();\n      expect(plugins.length).to.be.above(3);\n      expect(plugins.some(plugin => plugin instanceof ServicePluginMock1)).to.be.true;\n      expect(plugins.some(plugin => plugin instanceof ServicePluginMock2)).to.be.true;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should find commands","suites":["PluginManager","#validateCommand()"],"updatePoint":{"line":827,"column":28,"index":29920},"line":827,"code":"    it('should find commands', () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      expect(() => pluginManager.validateCommand(['mycmd', 'mysubcmd'])).to.not.throw(ServerlessError);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should find container children commands","suites":["PluginManager","#validateCommand()"],"updatePoint":{"line":831,"column":47,"index":30143},"line":831,"code":"    it('should find container children commands', () => {\n      pluginManager.addPlugin(ContainerPluginMock);\n      expect(() => pluginManager.validateCommand(['mycontainer', 'mysubcmd'])).to.not.throw(ServerlessError);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should assign default values to empty options","suites":["PluginManager","#assignDefaultOptions()"],"updatePoint":{"line":837,"column":53,"index":30429},"line":837,"code":"    it('should assign default values to empty options', () => {\n      pluginManager.commands = {\n        foo: {\n          options: {\n            bar: {\n              required: true,\n              default: 'foo'\n            }\n          }\n        }\n      };\n      const foo = pluginManager.commands.foo;\n      pluginManager.assignDefaultOptions(foo);\n      expect(pluginManager.cliOptions.bar).to.equal(foo.options.bar.default);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should not assign default values to non-empty options","suites":["PluginManager","#assignDefaultOptions()"],"updatePoint":{"line":852,"column":61,"index":30872},"line":852,"code":"    it('should not assign default values to non-empty options', () => {\n      pluginManager.commands = {\n        foo: {\n          options: {\n            bar: {\n              required: true,\n              default: 'foo'\n            }\n          }\n        }\n      };\n      const foo = pluginManager.commands.foo;\n      pluginManager.setCliOptions({\n        bar: 100\n      });\n      pluginManager.assignDefaultOptions(foo);\n      expect(pluginManager.cliOptions.bar).to.equal(100);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"assigns valid falsy default value ' to empty options","suites":["PluginManager","#assignDefaultOptions()"],"updatePoint":{"line":871,"column":77,"index":31419},"line":871,"code":"      it(`assigns valid falsy default value '${defaultValue} to empty options`, () => {\n        pluginManager.commands = {\n          foo: {\n            options: {\n              bar: {\n                required: true,\n                default: defaultValue\n              }\n            }\n          }\n        };\n        const foo = pluginManager.commands.foo;\n        pluginManager.assignDefaultOptions(foo);\n        expect(pluginManager.cliOptions.bar).to.equal(defaultValue);\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should continue loading if the configDependent property is absent","suites":["PluginManager","#validateServerlessConfigDependency()"],"updatePoint":{"line":900,"column":73,"index":32331},"line":900,"code":"    it('should continue loading if the configDependent property is absent', () => {\n      pluginManagerInstance.commands = {\n        foo: {}\n      };\n      const foo = pluginManagerInstance.commands.foo;\n      expect(pluginManagerInstance.validateServerlessConfigDependency(foo)).to.be.undefined;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load if the configDependent property is false and config is null","suites":["PluginManager","#validateServerlessConfigDependency()"],"updatePoint":{"line":907,"column":79,"index":32642},"line":907,"code":"    it('should load if the configDependent property is false and config is null', () => {\n      pluginManagerInstance.commands = {\n        foo: {\n          configDependent: false\n        }\n      };\n      const foo = pluginManagerInstance.commands.foo;\n      expect(pluginManagerInstance.validateServerlessConfigDependency(foo)).to.be.undefined;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if configDependent is true and no config is found","suites":["PluginManager","#validateServerlessConfigDependency()"],"updatePoint":{"line":916,"column":79,"index":32995},"line":916,"code":"    it('should throw an error if configDependent is true and no config is found', () => {\n      pluginManagerInstance.commands = {\n        foo: {\n          configDependent: true\n        }\n      };\n      const foo = pluginManagerInstance.commands.foo;\n      expect(() => {\n        pluginManager.validateServerlessConfigDependency(foo);\n      }).to.throw(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if configDependent is true and config is an empty string","suites":["PluginManager","#validateServerlessConfigDependency()"],"updatePoint":{"line":927,"column":86,"index":33371},"line":927,"code":"    it('should throw an error if configDependent is true and config is an empty string', () => {\n      pluginManagerInstance.commands = {\n        foo: {\n          configDependent: true\n        }\n      };\n      const foo = pluginManagerInstance.commands.foo;\n      expect(() => {\n        pluginManager.validateServerlessConfigDependency(foo);\n      }).to.throw(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load if the configDependent property is true and config exists","suites":["PluginManager","#validateServerlessConfigDependency()"],"updatePoint":{"line":938,"column":77,"index":33738},"line":938,"code":"    it('should load if the configDependent property is true and config exists', () => {\n      pluginManagerInstance.serverless.configurationInput = {\n        servicePath: 'foo'\n      };\n      pluginManagerInstance.commands = {\n        foo: {\n          configDependent: true\n        }\n      };\n      const foo = pluginManagerInstance.commands.foo;\n      expect(pluginManagerInstance.validateServerlessConfigDependency(foo)).to.be.undefined;\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the given command is not available","suites":["PluginManager","#run()"],"updatePoint":{"line":952,"column":69,"index":34213},"line":952,"code":"    it('should throw an error when the given command is not available', () => {\n      pluginManager.addPlugin(SynchronousPluginMock);\n      const commandsArray = ['foo'];\n      return expect(pluginManager.run(commandsArray)).to.be.rejectedWith(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the given command is an entrypoint","suites":["PluginManager","#run()"],"updatePoint":{"line":957,"column":69,"index":34473},"line":957,"code":"    it('should throw an error when the given command is an entrypoint', () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commandsArray = ['myep'];\n      return expect(pluginManager.run(commandsArray)).to.be.rejectedWith(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should NOT throw an error when the given command is a child of a container","suites":["PluginManager","#run()"],"updatePoint":{"line":962,"column":82,"index":34746},"line":962,"code":"    it('should NOT throw an error when the given command is a child of a container', () => {\n      pluginManager.addPlugin(ContainerPluginMock);\n      const commandsArray = ['mycontainer', 'mysubcmd'];\n      return expect(pluginManager.run(commandsArray)).to.not.be.rejectedWith(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the given command is a child of an entrypoint","suites":["PluginManager","#run()"],"updatePoint":{"line":967,"column":80,"index":35039},"line":967,"code":"    it('should throw an error when the given command is a child of an entrypoint', () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commandsArray = ['mysubcmd'];\n      return expect(pluginManager.run(commandsArray)).to.be.rejectedWith(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run the hooks in the correct order","suites":["PluginManager","#run()"],"updatePoint":{"line":972,"column":49,"index":35283},"line":972,"code":"    it('should run the hooks in the correct order', async () => {\n      class CorrectHookOrderPluginMock {\n        constructor() {\n          this.commands = {\n            run: {\n              usage: 'Pushes the current hook status on the hookStatus array',\n              lifecycleEvents: ['beforeHookStatus', 'midHookStatus', 'afterHookStatus']\n            }\n          };\n          this.hooks = {\n            'initialize': async () => this.initializeHookStatus(),\n            'before:run:beforeHookStatus': async () => this.beforeHookStatus(),\n            'run:midHookStatus': async () => this.midHookStatus(),\n            'after:run:afterHookStatus': async () => this.afterHookStatus()\n          };\n\n          // used to test if the hooks were run in the correct order\n          this.hookStatus = [];\n        }\n        initializeHookStatus() {\n          this.hookStatus.push('initialize');\n        }\n        beforeHookStatus() {\n          this.hookStatus.push('before');\n        }\n        midHookStatus() {\n          this.hookStatus.push('mid');\n        }\n        afterHookStatus() {\n          this.hookStatus.push('after');\n        }\n      }\n      pluginManager.addPlugin(CorrectHookOrderPluginMock);\n      const commandsArray = ['run'];\n      return pluginManager.run(commandsArray).then(() => {\n        expect(pluginManager.plugins[0].hookStatus[0]).to.equal('initialize');\n        expect(pluginManager.plugins[0].hookStatus[1]).to.equal('before');\n        expect(pluginManager.plugins[0].hookStatus[2]).to.equal('mid');\n        expect(pluginManager.plugins[0].hookStatus[3]).to.equal('after');\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run a simple command","suites":["PluginManager","#run()","when using a synchronous hook function","when running a simple command"],"updatePoint":{"line":1018,"column":39,"index":37100},"line":1018,"code":"        it('should run a simple command', async () => {\n          const commandsArray = ['deploy'];\n          return pluginManager.run(commandsArray).then(() => expect(pluginManager.plugins[0].deployedFunctions).to.equal(1));\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run the nested command","suites":["PluginManager","#run()","when using a synchronous hook function","when running a nested command"],"updatePoint":{"line":1024,"column":41,"index":37406},"line":1024,"code":"        it('should run the nested command', async () => {\n          const commandsArray = ['deploy', 'onpremises'];\n          return pluginManager.run(commandsArray).then(() => expect(pluginManager.plugins[0].deployedResources).to.equal(1));\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run the simple command","suites":["PluginManager","#run()","when using a promise based hook function","when running a simple command"],"updatePoint":{"line":1035,"column":41,"index":37886},"line":1035,"code":"        it('should run the simple command', async () => {\n          const commandsArray = ['deploy'];\n          return pluginManager.run(commandsArray).then(() => expect(pluginManager.plugins[0].deployedFunctions).to.equal(1));\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run the nested command","suites":["PluginManager","#run()","when using a promise based hook function","when running a nested command"],"updatePoint":{"line":1041,"column":41,"index":38192},"line":1041,"code":"        it('should run the nested command', async () => {\n          const commandsArray = ['deploy', 'onpremises'];\n          return pluginManager.run(commandsArray).then(() => expect(pluginManager.plugins[0].deployedResources).to.equal(1));\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load only the providers plugins (if the provider is specified)","suites":["PluginManager","#run()","when using provider specific plugins"],"updatePoint":{"line":1056,"column":79,"index":38925},"line":1056,"code":"      it('should load only the providers plugins (if the provider is specified)', async () => {\n        const commandsArray = ['deploy'];\n        return pluginManager.run(commandsArray).then(() => {\n          expect(pluginManager.plugins.length).to.equal(2);\n          expect(pluginManager.plugins[0].deployedFunctions).to.equal(1);\n          expect(pluginManager.plugins[0].provider).to.equal('provider1');\n          expect(pluginManager.plugins[1].deployedFunctions).to.equal(1);\n          expect(pluginManager.plugins[1].provider).to.equal(undefined);\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should run commands with internal lifecycles","suites":["PluginManager","#run()","when using provider specific plugins"],"updatePoint":{"line":1067,"column":52,"index":39483},"line":1067,"code":"    it('should run commands with internal lifecycles', async () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commandsArray = ['mycmd', 'spawncmd'];\n      return pluginManager.run(commandsArray).then(() => {\n        expect(pluginManager.plugins[0].callResult).to.equal('>subInitialize>subFinalize>initialize>finalize>run>subEPInitialize>subEPFinalize');\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should hide entrypoints on any level and only return commands","suites":["PluginManager","#getCommands()"],"updatePoint":{"line":1076,"column":69,"index":39939},"line":1076,"code":"    it('should hide entrypoints on any level and only return commands', () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commands = pluginManager.getCommands();\n      expect(commands).to.have.a.property('mycmd');\n      expect(commands).to.have.a.nested.property('mycmd.commands.mysubcmd');\n      expect(commands).to.have.a.nested.property('mycmd.commands.spawncmd');\n      // Check for omitted entrypoints\n      expect(commands).to.not.have.a.property('myep');\n      expect(commands).to.not.have.a.nested.property('myep.commands.mysubep');\n      expect(commands).to.not.have.a.nested.property('mycmd.commands.spawnep');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should return aliases","suites":["PluginManager","#getCommands()"],"updatePoint":{"line":1087,"column":29,"index":40551},"line":1087,"code":"    it('should return aliases', () => {\n      pluginManager.addPlugin(AliasPluginMock);\n      const commands = pluginManager.getCommands();\n      expect(commands).to.have.a.property('on').that.has.a.nested.property('commands.premise');\n      expect(commands).to.have.a.property('premise');\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the given command is not available","suites":["PluginManager","#spawn()"],"updatePoint":{"line":1159,"column":69,"index":42973},"line":1159,"code":"    it('should throw an error when the given command is not available', async () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commandsArray = ['foo'];\n      return expect(pluginManager.spawn(commandsArray)).to.eventually.be.rejectedWith(Error);\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should succeed","suites":["PluginManager","#spawn()","when invoking a command"],"updatePoint":{"line":1165,"column":24,"index":43254},"line":1165,"code":"      it('should succeed', async () => {\n        pluginManager.addPlugin(EntrypointPluginMock);\n        const commandsArray = ['mycmd'];\n        return pluginManager.spawn(commandsArray).then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>run');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should spawn nested commands","suites":["PluginManager","#spawn()","when invoking a command"],"updatePoint":{"line":1172,"column":38,"index":43562},"line":1172,"code":"      it('should spawn nested commands', async () => {\n        pluginManager.addPlugin(EntrypointPluginMock);\n        const commandsArray = ['mycmd', 'mysubcmd'];\n        return pluginManager.spawn(commandsArray).then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>subInitialize>subFinalize');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should terminate the hook chain if requested","suites":["PluginManager","#spawn()","when invoking a command"],"updatePoint":{"line":1179,"column":54,"index":43920},"line":1179,"code":"      it('should terminate the hook chain if requested', async () => {\n        pluginManager.addPlugin(EntrypointPluginMock);\n        const commandsArray = ['mycmd', 'mysubcmd'];\n        return expect(pluginManager.spawn(commandsArray, {\n          terminateLifecycleAfterExecution: true\n        })).to.be.rejectedWith('Terminating mycmd:mysubcmd').then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>subInitialize>subFinalize');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should spawn nested commands","suites":["PluginManager","#spawn()","when invoking a container"],"updatePoint":{"line":1190,"column":38,"index":44439},"line":1190,"code":"      it('should spawn nested commands', async () => {\n        pluginManager.addPlugin(ContainerPluginMock);\n        const commandsArray = ['mycontainer', 'mysubcmd'];\n        return pluginManager.spawn(commandsArray).then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>mysubcmdEvent1>mysubcmdEvent2');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should succeed","suites":["PluginManager","#spawn()","when invoking an entrypoint"],"updatePoint":{"line":1199,"column":24,"index":44836},"line":1199,"code":"      it('should succeed', async () => {\n        pluginManager.addPlugin(EntrypointPluginMock);\n        const commandsArray = ['myep'];\n        return pluginManager.spawn(commandsArray).then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>initialize>finalize');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should spawn nested entrypoints","suites":["PluginManager","#spawn()","when invoking an entrypoint"],"updatePoint":{"line":1206,"column":41,"index":45162},"line":1206,"code":"      it('should spawn nested entrypoints', async () => {\n        pluginManager.addPlugin(EntrypointPluginMock);\n        const commandsArray = ['myep', 'mysubep'];\n        return pluginManager.spawn(commandsArray).then(() => {\n          expect(pluginManager.plugins[0].callResult).to.equal('>subEPInitialize>subEPFinalize');\n        });\n      });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should succeed","suites":["PluginManager","#spawn()","when invoking an entrypoint","with string formatted syntax"],"updatePoint":{"line":1214,"column":26,"index":45549},"line":1214,"code":"        it('should succeed', async () => {\n          pluginManager.addPlugin(EntrypointPluginMock);\n          return pluginManager.spawn('myep').then(() => {\n            expect(pluginManager.plugins[0].callResult).to.equal('>initialize>finalize');\n          });\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should spawn nested entrypoints","suites":["PluginManager","#spawn()","when invoking an entrypoint","with string formatted syntax"],"updatePoint":{"line":1220,"column":43,"index":45840},"line":1220,"code":"        it('should spawn nested entrypoints', async () => {\n          pluginManager.addPlugin(EntrypointPluginMock);\n          return pluginManager.spawn('myep:mysubep').then(() => {\n            expect(pluginManager.plugins[0].callResult).to.equal('>subEPInitialize>subEPFinalize');\n          });\n        });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should spawn entrypoints with internal lifecycles","suites":["PluginManager","#spawn()","when invoking an entrypoint","with string formatted syntax"],"updatePoint":{"line":1228,"column":57,"index":46181},"line":1228,"code":"    it('should spawn entrypoints with internal lifecycles', async () => {\n      pluginManager.addPlugin(EntrypointPluginMock);\n      const commandsArray = ['myep', 'spawnep'];\n      return pluginManager.spawn(commandsArray).then(() => {\n        expect(pluginManager.plugins[0].callResult).to.equal('>subInitialize>subFinalize>initialize>finalize>run>subEPInitialize>subEPFinalize');\n      });\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load plugins from .serverless_plugins","suites":["PluginManager","Plugin / Load local plugins"],"updatePoint":{"line":1246,"column":52,"index":46915},"line":1246,"code":"    it('should load plugins from .serverless_plugins', async () => {\n      const localPluginDir = path.join(serviceDir, '.serverless_plugins', 'local-plugin');\n      installPlugin(localPluginDir, SynchronousPluginMock);\n      await pluginManager.loadAllPlugins(['local-plugin']);\n      expect(pluginManager.plugins).to.satisfy(plugins => plugins.some(plugin => plugin.constructor.name === 'SynchronousPluginMock'));\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load plugins from custom folder","suites":["PluginManager","Plugin / Load local plugins"],"updatePoint":{"line":1252,"column":46,"index":47333},"line":1252,"code":"    it('should load plugins from custom folder', async () => {\n      const localPluginDir = path.join(serviceDir, 'serverless-plugins-custom', 'local-plugin');\n      installPlugin(localPluginDir, SynchronousPluginMock);\n      await pluginManager.loadAllPlugins({\n        localPath: path.join(serviceDir, 'serverless-plugins-custom'),\n        modules: ['local-plugin']\n      });\n      // Had to use constructor.name because the class will be loaded via\n      // require and the reference will not match with SynchronousPluginMock\n      expect(pluginManager.plugins).to.satisfy(plugins => plugins.some(plugin => plugin.constructor.name === 'SynchronousPluginMock'));\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load plugins from custom folder outside of serviceDir","suites":["PluginManager","Plugin / Load local plugins"],"updatePoint":{"line":1263,"column":68,"index":48028},"line":1263,"code":"    it('should load plugins from custom folder outside of serviceDir', async () => {\n      serviceDir = path.join(tmpDir, 'serverless-plugins-custom');\n      const localPluginDir = path.join(serviceDir, 'local-plugin');\n      installPlugin(localPluginDir, SynchronousPluginMock);\n      await pluginManager.loadAllPlugins({\n        localPath: serviceDir,\n        modules: ['local-plugin']\n      });\n      // Had to use constructor.name because the class will be loaded via\n      // require and the reference will not match with SynchronousPluginMock\n      expect(pluginManager.plugins).to.satisfy(plugins => plugins.some(plugin => plugin.constructor.name === 'SynchronousPluginMock'));\n    });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load plugins relatively to the working directory","suites":["test/unit/lib/classes/PluginManager.test.js"],"updatePoint":{"line":1286,"column":61,"index":48958},"line":1286,"code":"  it('should load plugins relatively to the working directory', async () => {\n    const {\n      servicePath: serviceDir\n    } = await fixtures.setup('aws');\n    const localPluginDir = path.join(serviceDir, 'node_modules', 'local-plugin');\n    const parentPluginDir = path.join(serviceDir, '..', 'node_modules', 'parent-plugin');\n    installPlugin(localPluginDir, SynchronousPluginMock);\n    installPlugin(parentPluginDir, PromisePluginMock);\n    await fsp.appendFile(path.join(serviceDir, 'serverless.yml'), 'plugins:\\n  - local-plugin\\n  - parent-plugin');\n    const {\n      serverless\n    } = await runServerless({\n      cwd: serviceDir,\n      command: 'print'\n    });\n    const pluginNames = new Set(serverless.pluginManager.plugins.map(plugin => plugin.constructor.name));\n    expect(pluginNames).to.contain('SynchronousPluginMock');\n    expect(pluginNames).to.contain('PromisePluginMock');\n  });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should pass log writers to external plugins","suites":["test/unit/lib/classes/PluginManager.test.js"],"updatePoint":{"line":1305,"column":49,"index":49847},"line":1305,"code":"  it('should pass log writers to external plugins', async () => {\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'plugin',\n      command: 'print'\n    });\n    const plugin = Array.from(serverless.pluginManager.externalPlugins).find(externalPlugin => externalPlugin.constructor.name === 'TestPlugin');\n    expect(typeof plugin.utils.log).to.equal('function');\n    expect(typeof plugin.utils.progress.create).to.equal('function');\n    expect(typeof plugin.utils.writeText).to.equal('function');\n  });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should error out for duplicate plugin definiton","suites":["test/unit/lib/classes/PluginManager.test.js"],"updatePoint":{"line":1317,"column":53,"index":50376},"line":1317,"code":"  it('should error out for duplicate plugin definiton', async () => {\n    await expect(runServerless({\n      fixture: 'plugin',\n      command: 'print',\n      configExt: {\n        plugins: ['./plugin', './plugin']\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'DUPLICATE_PLUGIN_DEFINITION');\n  });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should pass through an error when trying to load a plugin with error","suites":["test/unit/lib/classes/PluginManager.test.js"],"updatePoint":{"line":1326,"column":74,"index":50716},"line":1326,"code":"  it('should pass through an error when trying to load a plugin with error', async () => {\n    await expect(runServerless({\n      fixture: 'plugin',\n      command: 'print',\n      configExt: {\n        plugins: ['./broken-plugin']\n      }\n    })).to.be.eventually.rejectedWith(Error, 'failed to load plugin');\n  });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should load ESM plugins","suites":["test/unit/lib/classes/PluginManager.test.js"],"updatePoint":{"line":1335,"column":29,"index":50985},"line":1335,"code":"  it('should load ESM plugins', async () => {\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'plugin',\n      command: 'print',\n      configExt: {\n        plugins: ['./local-esm-plugin', 'esm-plugin']\n      }\n    });\n    const pluginNames = new Set(serverless.pluginManager.plugins.map(plugin => plugin.constructor.name));\n    expect(pluginNames).to.include('LocalESMPlugin');\n    expect(pluginNames).to.include('ESMPlugin');\n  });","file":"unit/lib/classes/plugin-manager.test.js","skipped":false,"dir":"test"},{"name":"should reject when the service name is missing","suites":["Service","#load()"],"updatePoint":{"line":14,"column":54,"index":373},"line":14,"code":"    it('should reject when the service name is missing', () => expect(runServerless({\n      fixture: 'blank',\n      command: 'print'\n    })).to.eventually.be.rejected.and.have.property('code', 'SERVICE_NAME_MISSING'));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should reject if provider property is missing","suites":["Service","#load()"],"updatePoint":{"line":18,"column":53,"index":591},"line":18,"code":"    it('should reject if provider property is missing', () => expect(runServerless({\n      fixture: 'blank',\n      configExt: {\n        service: 'foo'\n      },\n      command: 'print'\n    })).to.eventually.be.rejected.and.have.property('code', 'PROVIDER_NAME_MISSING'));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should reject if frameworkVersion is not satisfied","suites":["Service","#load()"],"updatePoint":{"line":25,"column":58,"index":866},"line":25,"code":"    it('should reject if frameworkVersion is not satisfied', () => expect(runServerless({\n      fixture: 'aws',\n      configExt: {\n        frameworkVersion: '1.0'\n      },\n      command: 'print'\n    })).to.eventually.be.rejected.and.have.property('code', 'FRAMEWORK_VERSION_MISMATCH'));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should pass if frameworkVersion is satisfied","suites":["Service","#load()"],"updatePoint":{"line":32,"column":52,"index":1147},"line":32,"code":"    it('should pass if frameworkVersion is satisfied', async () => runServerless({\n      fixture: 'aws',\n      configExt: {\n        frameworkVersion: version\n      },\n      command: 'print'\n    }).then(() => runServerless({\n      fixture: 'aws',\n      configExt: {\n        frameworkVersion: '*'\n      },\n      command: 'print'\n    })).then(() => runServerless({\n      fixture: 'aws',\n      configExt: {\n        frameworkVersion: version.split('.')[0]\n      },\n      command: 'print'\n    })));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should merge resources given as an array","suites":["Service","#mergeArrays"],"updatePoint":{"line":53,"column":48,"index":1677},"line":53,"code":"    it('should merge resources given as an array', async () => runServerless({\n      fixture: 'aws',\n      configExt: {\n        resources: [{\n          Resources: {\n            resource1: {\n              Type: 'value'\n            }\n          }\n        }, {\n          Resources: {\n            resource2: {\n              Type: 'value2'\n            }\n          }\n        }]\n      },\n      command: 'package'\n    }).then(({\n      cfTemplate: {\n        Resources\n      }\n    }) => {\n      expect(Resources).to.be.an('object');\n      expect(Resources.resource1).to.deep.equal({\n        Type: 'value'\n      });\n      expect(Resources.resource2).to.deep.equal({\n        Type: 'value2'\n      });\n    }));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should merge functions given as an array","suites":["Service","#mergeArrays"],"updatePoint":{"line":84,"column":48,"index":2373},"line":84,"code":"    it('should merge functions given as an array', async () => runServerless({\n      fixture: 'aws',\n      configExt: {\n        functions: [{\n          a: {}\n        }, {\n          b: {}\n        }]\n      },\n      command: 'print'\n    }).then(({\n      serverless: {\n        service: {\n          functions\n        }\n      }\n    }) => {\n      expect(functions).to.be.an('object');\n      expect(functions.a).to.be.an('object');\n      expect(functions.b).to.be.an('object');\n    }));","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should make sure function name contains the default stage","suites":["Service","#setFunctionNames()"],"updatePoint":{"line":107,"column":65,"index":2917},"line":107,"code":"    it('should make sure function name contains the default stage', async () => {\n      const {\n        cfTemplate,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      expect(cfTemplate.Resources[awsNaming.getLambdaLogicalId('basic')].Properties.FunctionName).to.include('dev-basic');\n    });","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should throw when receives function with non-object configuration","suites":["Service","#setFunctionNames()"],"updatePoint":{"line":117,"column":73,"index":3288},"line":117,"code":"    it('should throw when receives function with non-object configuration', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            bar: true\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'NON_OBJECT_FUNCTION_CONFIGURATION_ERROR');\n    });","file":"unit/lib/classes/service.test.js","skipped":false,"dir":"test"},{"name":"should create a scoped tmp directory","suites":["Utils","#getTmpDirPath()"],"updatePoint":{"line":28,"column":44,"index":684},"line":28,"code":"    it('should create a scoped tmp directory', () => {\n      const dirPath = serverless.utils.getTmpDirPath();\n      const stats = fse.statSync(dirPath);\n      expect(dirPath).to.include('tmpdirs-serverless');\n      expect(stats.isDirectory()).to.equal(true);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should detect if a directory exists","suites":["Utils","#dirExistsSync()","When reading a directory"],"updatePoint":{"line":37,"column":45,"index":1047},"line":37,"code":"      it('should detect if a directory exists', () => {\n        const dir = serverless.utils.dirExistsSync(__dirname);\n        expect(dir).to.equal(true);\n      });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should detect if a directory doesn't exist","suites":["Utils","#dirExistsSync()","When reading a directory"],"updatePoint":{"line":41,"column":52,"index":1219},"line":41,"code":"      it(\"should detect if a directory doesn't exist\", () => {\n        const noDir = serverless.utils.dirExistsSync(path.join(__dirname, '..', 'XYZ'));\n        expect(noDir).to.equal(false);\n      });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file exists","suites":["Utils","#fileExistsSync()","When reading a file"],"updatePoint":{"line":49,"column":40,"index":1506},"line":49,"code":"      it('should detect if a file exists', () => {\n        const file = serverless.utils.fileExistsSync(__filename);\n        expect(file).to.equal(true);\n      });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file doesn't exist","suites":["Utils","#fileExistsSync()","When reading a file"],"updatePoint":{"line":53,"column":47,"index":1677},"line":53,"code":"      it(\"should detect if a file doesn't exist\", () => {\n        const noFile = serverless.utils.fileExistsSync(path.join(__dirname, 'XYZ.json'));\n        expect(noFile).to.equal(false);\n      });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should create a directory for the path of the given file","suites":["Utils","#writeFileDir()"],"updatePoint":{"line":60,"column":64,"index":1944},"line":60,"code":"    it('should create a directory for the path of the given file', () => {\n      const tmpDirPath = getTmpDirPath();\n      const fileDir = path.join(tmpDirPath, 'foo', 'bar');\n      serverless.utils.writeFileDir(path.join(fileDir, 'somefile.js'));\n      expect(serverless.utils.dirExistsSync(fileDir)).to.equal(true);\n      // it should only create the directories and not the file\n      expect(serverless.utils.fileExistsSync(path.join(fileDir, 'somefile.js'))).to.equal(false);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should write a .json file synchronously","suites":["Utils","#writeFileSync()"],"updatePoint":{"line":70,"column":47,"index":2460},"line":70,"code":"    it('should write a .json file synchronously', () => {\n      const tmpFilePath = getTmpFilePath('anything.json');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      const obj = serverless.utils.readFileSync(tmpFilePath);\n      expect(obj.foo).to.equal('bar');\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should write a .yml file synchronously","suites":["Utils","#writeFileSync()"],"updatePoint":{"line":78,"column":46,"index":2766},"line":78,"code":"    it('should write a .yml file synchronously', async () => {\n      const tmpFilePath = getTmpFilePath('anything.yml');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      return expect(serverless.yamlParser.parse(tmpFilePath)).to.be.fulfilled.then(obj => {\n        expect(obj.foo).to.equal('bar');\n      });\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should write a .yaml file synchronously","suites":["Utils","#writeFileSync()"],"updatePoint":{"line":87,"column":47,"index":3120},"line":87,"code":"    it('should write a .yaml file synchronously', async () => {\n      const tmpFilePath = getTmpFilePath('anything.yaml');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      return expect(serverless.yamlParser.parse(tmpFilePath)).to.be.fulfilled.then(obj => {\n        expect(obj.foo).to.equal('bar');\n      });\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should throw error if invalid path is provided","suites":["Utils","#writeFileSync()"],"updatePoint":{"line":96,"column":54,"index":3482},"line":96,"code":"    it('should throw error if invalid path is provided', () => {\n      expect(() => {\n        serverless.utils.writeFileSync(null);\n      }).to.throw(Error);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should write a file asynchronously","suites":["Utils","#writeFile()"],"updatePoint":{"line":103,"column":42,"index":3677},"line":103,"code":"    it('should write a file asynchronously', async () => {\n      const tmpFilePath = getTmpFilePath('anything.json');\n\n      // note: use return when testing promises otherwise you'll have unhandled rejection errors\n      return expect(serverless.utils.writeFile(tmpFilePath, {\n        foo: 'bar'\n      })).to.be.fulfilled.then(() => {\n        const obj = serverless.utils.readFileSync(tmpFilePath);\n        expect(obj.foo).to.equal('bar');\n      });\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should append a line to a text file","suites":["Utils","#appendFileSync()"],"updatePoint":{"line":116,"column":43,"index":4183},"line":116,"code":"    it('should append a line to a text file', () => {\n      const tmpFilePath = getTmpFilePath('appendedfile.txt');\n      serverless.utils.writeFileSync(tmpFilePath, `line 1 ${os.EOL}`);\n      serverless.utils.appendFileSync(tmpFilePath, 'line 2');\n      const data = serverless.utils.readFileSync(tmpFilePath);\n      expect(data.indexOf('line 1')).to.be.greaterThan(-1);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should throw error if invalid path is provided","suites":["Utils","#appendFileSync()"],"updatePoint":{"line":123,"column":54,"index":4574},"line":123,"code":"    it('should throw error if invalid path is provided', () => {\n      expect(() => {\n        serverless.utils.readFileSync(null);\n      }).to.throw(Error);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should read a file synchronously","suites":["Utils","#readFileSync()"],"updatePoint":{"line":130,"column":40,"index":4769},"line":130,"code":"    it('should read a file synchronously', () => {\n      const tmpFilePath = getTmpFilePath('anything.json');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      const obj = serverless.utils.readFileSync(tmpFilePath);\n      expect(obj.foo).to.equal('bar');\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yml","suites":["Utils","#readFileSync()"],"updatePoint":{"line":138,"column":45,"index":5074},"line":138,"code":"    it('should read a filename extension .yml', () => {\n      const tmpFilePath = getTmpFilePath('anything.yml');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      const obj = serverless.utils.readFileSync(tmpFilePath);\n      expect(obj.foo).to.equal('bar');\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yaml","suites":["Utils","#readFileSync()"],"updatePoint":{"line":146,"column":46,"index":5379},"line":146,"code":"    it('should read a filename extension .yaml', () => {\n      const tmpFilePath = getTmpFilePath('anything.yaml');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n      const obj = serverless.utils.readFileSync(tmpFilePath);\n      expect(obj.foo).to.equal('bar');\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should throw YAMLException with filename if yml file is invalid format","suites":["Utils","#readFileSync()"],"updatePoint":{"line":154,"column":78,"index":5717},"line":154,"code":"    it('should throw YAMLException with filename if yml file is invalid format', () => {\n      const tmpFilePath = getTmpFilePath('invalid.yml');\n      serverless.utils.writeFileSync(tmpFilePath, ': a');\n      expect(() => {\n        serverless.utils.readFileSync(tmpFilePath);\n      }).to.throw(/.*invalid.yml/);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should read a file asynchronously","suites":["Utils","#readFile()"],"updatePoint":{"line":163,"column":41,"index":6041},"line":163,"code":"    it('should read a file asynchronously', async () => {\n      const tmpFilePath = getTmpFilePath('anything.json');\n      serverless.utils.writeFileSync(tmpFilePath, {\n        foo: 'bar'\n      });\n\n      // note: use return when testing promises otherwise you'll have unhandled rejection errors\n      return expect(serverless.utils.readFile(tmpFilePath)).to.be.fulfilled.then(obj => {\n        expect(obj.foo).to.equal('bar');\n      });\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should return an array with corresponding paths to the found files","suites":["Utils","#walkDirSync()"],"updatePoint":{"line":176,"column":74,"index":6562},"line":176,"code":"    it('should return an array with corresponding paths to the found files', () => {\n      const tmpDirPath = getTmpDirPath();\n      const nestedDir1 = path.join(tmpDirPath, 'foo');\n      const nestedDir2 = path.join(tmpDirPath, 'foo', 'bar');\n      const nestedDir3 = path.join(tmpDirPath, 'baz');\n      const tmpFilePath1 = path.join(nestedDir1, 'foo.js');\n      const tmpFilePath2 = path.join(nestedDir2, 'bar.js');\n      const tmpFilePath3 = path.join(nestedDir3, 'baz.js');\n      serverless.utils.writeFileSync(tmpFilePath1, 'foo');\n      serverless.utils.writeFileSync(tmpFilePath2, 'bar');\n      serverless.utils.writeFileSync(tmpFilePath3, 'baz');\n      const filePaths = serverless.utils.walkDirSync(tmpDirPath);\n      expect(filePaths).to.include(tmpFilePath1);\n      expect(filePaths).to.include(tmpFilePath2);\n      expect(filePaths).to.include(tmpFilePath3);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should recursively copy directory files","suites":["Utils","#copyDirContentsSync()"],"updatePoint":{"line":194,"column":47,"index":7466},"line":194,"code":"    it('should recursively copy directory files', () => {\n      const tmpSrcDirPath = path.join(process.cwd(), 'testSrc');\n      const tmpDestDirPath = path.join(process.cwd(), 'testDest');\n      const srcFile1 = path.join(tmpSrcDirPath, 'file1.txt');\n      const srcFile2 = path.join(tmpSrcDirPath, 'folder', 'file2.txt');\n      const srcFile3 = path.join(tmpSrcDirPath, 'folder', 'folder', 'file3.txt');\n      const destFile1 = path.join(tmpDestDirPath, 'file1.txt');\n      const destFile2 = path.join(tmpDestDirPath, 'folder', 'file2.txt');\n      const destFile3 = path.join(tmpDestDirPath, 'folder', 'folder', 'file3.txt');\n      serverless.utils.writeFileSync(srcFile1, 'foo');\n      serverless.utils.writeFileSync(srcFile2, 'foo');\n      serverless.utils.writeFileSync(srcFile3, 'foo');\n      serverless.utils.copyDirContentsSync(tmpSrcDirPath, tmpDestDirPath);\n      expect(serverless.utils.fileExistsSync(destFile1)).to.equal(true);\n      expect(serverless.utils.fileExistsSync(destFile2)).to.equal(true);\n      expect(serverless.utils.fileExistsSync(destFile3)).to.equal(true);\n      fse.removeSync(tmpSrcDirPath);\n      fse.removeSync(tmpDestDirPath);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should generate a shortId","suites":["Utils","#generateShortId()"],"updatePoint":{"line":215,"column":33,"index":8669},"line":215,"code":"    it('should generate a shortId', () => {\n      const id = serverless.utils.generateShortId();\n      expect(id).to.be.a('string');\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should generate a shortId for the given length","suites":["Utils","#generateShortId()"],"updatePoint":{"line":219,"column":54,"index":8831},"line":219,"code":"    it('should generate a shortId for the given length', () => {\n      const id = serverless.utils.generateShortId(6);\n      expect(id.length).to.be.equal(6);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should return true if the event is used and false otherwise","suites":["Utils","#isEventUsed()"],"updatePoint":{"line":225,"column":67,"index":9054},"line":225,"code":"    it('should return true if the event is used and false otherwise', () => {\n      const functions = {\n        create: {\n          events: [{\n            schedule: 'rate(5 minutes)'\n          }]\n        }\n      };\n      expect(utils.isEventUsed(functions, 'schedule')).to.equal(true);\n      expect(utils.isEventUsed(functions, 'http')).to.equal(false);\n    });","file":"unit/lib/classes/utils.test.js","skipped":false,"dir":"test"},{"name":"should parse a simple .yaml file","suites":["YamlParser","#parse()"],"updatePoint":{"line":24,"column":40,"index":555},"line":24,"code":"    it('should parse a simple .yaml file', () => {\n      const tmpFilePath = getTmpFilePath('simple.yaml');\n      serverless.utils.writeFileSync(tmpFilePath, yaml.dump({\n        foo: 'bar'\n      }));\n      return expect(serverless.yamlParser.parse(tmpFilePath)).to.eventually.have.property('foo').to.equal('bar');\n    });","file":"unit/lib/classes/yaml-parser.test.js","skipped":false,"dir":"test"},{"name":"should parse a simple .yml file","suites":["YamlParser","#parse()"],"updatePoint":{"line":31,"column":39,"index":876},"line":31,"code":"    it('should parse a simple .yml file', () => {\n      const tmpFilePath = getTmpFilePath('simple.yml');\n      serverless.utils.writeFileSync(tmpFilePath, yaml.dump({\n        foo: 'bar'\n      }));\n      return expect(serverless.yamlParser.parse(tmpFilePath)).to.eventually.have.property('foo').to.equal('bar');\n    });","file":"unit/lib/classes/yaml-parser.test.js","skipped":false,"dir":"test"},{"name":"should parse a .yml file with JSON-REF to YAML","suites":["YamlParser","#parse()"],"updatePoint":{"line":38,"column":54,"index":1211},"line":38,"code":"    it('should parse a .yml file with JSON-REF to YAML', () => {\n      const tmpDirPath = getTmpDirPath();\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'ref.yml'), {\n        foo: 'bar'\n      });\n      const testYml = {\n        main: {\n          $ref: './ref.yml'\n        }\n      };\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'test.yml'), testYml);\n      return expect(serverless.yamlParser.parse(path.join(tmpDirPath, 'test.yml'))).to.eventually.have.nested.property('main.foo').to.equal('bar');\n    });","file":"unit/lib/classes/yaml-parser.test.js","skipped":false,"dir":"test"},{"name":"should parse a .yml file with JSON-REF to JSON","suites":["YamlParser","#parse()"],"updatePoint":{"line":51,"column":54,"index":1745},"line":51,"code":"    it('should parse a .yml file with JSON-REF to JSON', () => {\n      const tmpDirPath = getTmpDirPath();\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'ref.json'), {\n        foo: 'bar'\n      });\n      const testYml = {\n        main: {\n          $ref: './ref.json'\n        }\n      };\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'test.yml'), testYml);\n      return expect(serverless.yamlParser.parse(path.join(tmpDirPath, 'test.yml'))).to.eventually.have.nested.property('main.foo').to.equal('bar');\n    });","file":"unit/lib/classes/yaml-parser.test.js","skipped":false,"dir":"test"},{"name":"should parse a .yml file with recursive JSON-REF","suites":["YamlParser","#parse()"],"updatePoint":{"line":64,"column":56,"index":2283},"line":64,"code":"    it('should parse a .yml file with recursive JSON-REF', () => {\n      const tmpDirPath = getTmpDirPath();\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'three.yml'), {\n        foo: 'bar'\n      });\n      const twoYml = {\n        two: {\n          $ref: './three.yml'\n        }\n      };\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'two.yml'), twoYml);\n      const oneYml = {\n        one: {\n          $ref: './two.yml'\n        }\n      };\n      serverless.utils.writeFileSync(path.join(tmpDirPath, 'one.yml'), oneYml);\n      return expect(serverless.yamlParser.parse(path.join(tmpDirPath, 'one.yml'))).to.eventually.have.nested.property('one.two.foo').to.equal('bar');\n    });","file":"unit/lib/classes/yaml-parser.test.js","skipped":false,"dir":"test"},{"name":"should expose no service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":8,"column":39,"index":257},"line":8,"code":"  it('should expose no service commands', () => expect(awsServiceCommands.get('create')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":9,"column":36,"index":373},"line":9,"code":"  it('should expose service commands', () => expect(awsServiceCommands.get('package')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose AWS service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":10,"column":40,"index":494},"line":10,"code":"  it('should expose AWS service commands', () => expect(awsServiceCommands.get('deploy')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose no service options on AWS service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":11,"column":62,"index":636},"line":11,"code":"  it('should expose no service options on AWS service commands', () => expect(awsServiceCommands.get('deploy').options).to.have.property('help'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose service options on AWS service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":12,"column":59,"index":780},"line":12,"code":"  it('should expose service options on AWS service commands', () => expect(awsServiceCommands.get('deploy').options).to.have.property('config'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose AWS options on AWS service commands","suites":["test/unit/lib/cli/commands-schema/aws-service.test.js"],"updatePoint":{"line":13,"column":55,"index":922},"line":13,"code":"  it('should expose AWS options on AWS service commands', () => expect(awsServiceCommands.get('deploy').options).to.have.property('region'));","file":"unit/lib/cli/commands-schema/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose global common options","suites":["test/unit/lib/cli/commands-schema/common-options/aws-service.test.js"],"updatePoint":{"line":8,"column":41,"index":297},"line":8,"code":"  it('should expose global common options', () => expect(awsServiceCommonOptions).to.have.property('help'));","file":"unit/lib/cli/commands-schema/common-options/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose service common options","suites":["test/unit/lib/cli/commands-schema/common-options/aws-service.test.js"],"updatePoint":{"line":9,"column":42,"index":407},"line":9,"code":"  it('should expose service common options', () => expect(awsServiceCommonOptions).to.have.property('config'));","file":"unit/lib/cli/commands-schema/common-options/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose AWS service common options","suites":["test/unit/lib/cli/commands-schema/common-options/aws-service.test.js"],"updatePoint":{"line":10,"column":46,"index":523},"line":10,"code":"  it('should expose AWS service common options', () => expect(awsServiceCommonOptions).to.have.property('region'));","file":"unit/lib/cli/commands-schema/common-options/aws-service.test.js","skipped":false,"dir":"test"},{"name":"should expose global common options","suites":["test/unit/lib/cli/commands-schema/common-options/global.test.js"],"updatePoint":{"line":8,"column":41,"index":283},"line":8,"code":"  it('should expose global common options', () => expect(globalCommonOptions).to.have.property('help'));","file":"unit/lib/cli/commands-schema/common-options/global.test.js","skipped":false,"dir":"test"},{"name":"should not expose service common options","suites":["test/unit/lib/cli/commands-schema/common-options/global.test.js"],"updatePoint":{"line":9,"column":46,"index":393},"line":9,"code":"  it('should not expose service common options', () => expect(globalCommonOptions).to.not.have.property('config'));","file":"unit/lib/cli/commands-schema/common-options/global.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service common options","suites":["test/unit/lib/cli/commands-schema/common-options/global.test.js"],"updatePoint":{"line":10,"column":50,"index":513},"line":10,"code":"  it('should not expose AWS service common options', () => expect(globalCommonOptions).to.not.have.property('region'));","file":"unit/lib/cli/commands-schema/common-options/global.test.js","skipped":false,"dir":"test"},{"name":"should expose global common options","suites":["test/unit/lib/cli/commands-schema/common-options/service.test.js"],"updatePoint":{"line":8,"column":41,"index":286},"line":8,"code":"  it('should expose global common options', () => expect(serviceCommonOptions).to.have.property('help'));","file":"unit/lib/cli/commands-schema/common-options/service.test.js","skipped":false,"dir":"test"},{"name":"should expose service common options","suites":["test/unit/lib/cli/commands-schema/common-options/service.test.js"],"updatePoint":{"line":9,"column":42,"index":393},"line":9,"code":"  it('should expose service common options', () => expect(serviceCommonOptions).to.have.property('config'));","file":"unit/lib/cli/commands-schema/common-options/service.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service common options","suites":["test/unit/lib/cli/commands-schema/common-options/service.test.js"],"updatePoint":{"line":10,"column":50,"index":510},"line":10,"code":"  it('should not expose AWS service common options', () => expect(serviceCommonOptions).to.not.have.property('region'));","file":"unit/lib/cli/commands-schema/common-options/service.test.js","skipped":false,"dir":"test"},{"name":"should expose no service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":8,"column":39,"index":254},"line":8,"code":"  it('should expose no service commands', () => expect(noServiceCommands.get('create')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should not expose service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":9,"column":40,"index":373},"line":9,"code":"  it('should not expose service commands', () => expect(noServiceCommands.has('package')).to.be.false);","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":10,"column":44,"index":481},"line":10,"code":"  it('should not expose AWS service commands', () => expect(noServiceCommands.has('deploy')).to.be.false);","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should expose no service options on no service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":11,"column":61,"index":605},"line":11,"code":"  it('should expose no service options on no service commands', () => expect(noServiceCommands.get('config').options).to.have.property('help'));","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should not expose service options on no service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":12,"column":62,"index":751},"line":12,"code":"  it('should not expose service options on no service commands', () => expect(noServiceCommands.get('config').options).to.not.have.property('config'));","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service options on no service commands","suites":["test/unit/lib/cli/commands-schema/no-service.test.js"],"updatePoint":{"line":13,"column":66,"index":907},"line":13,"code":"  it('should not expose AWS service options on no service commands', () => expect(noServiceCommands.get('config').options).to.not.have.property('region'));","file":"unit/lib/cli/commands-schema/no-service.test.js","skipped":false,"dir":"test"},{"name":"should expose no service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":48,"column":41,"index":1326},"line":48,"code":"    it('should expose no service commands', () => expect(commands.get('create')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":49,"column":38,"index":1434},"line":49,"code":"    it('should expose service commands', () => expect(commands.get('package')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should not expose not adapted AWS service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":50,"column":58,"index":1563},"line":50,"code":"    it('should not expose not adapted AWS service commands', () => expect(commands.has('metrics')).to.be.false);","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose adapted AWS service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":51,"column":50,"index":1668},"line":51,"code":"    it('should expose adapted AWS service commands', () => expect(commands.get('logs')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should extend adapted and extended AWS service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":52,"column":63,"index":1799},"line":52,"code":"    it('should extend adapted and extended AWS service commands', () => {\n      expect(commands.get('deploy').options).to.have.property('dryrun');\n      expect(commands.get('deploy list').options).to.have.property('resourceGroup');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS specific optionson extended AWS service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":56,"column":78,"index":2054},"line":56,"code":"    it('should not expose AWS specific optionson extended AWS service commands', () => {\n      expect(commands.get('deploy').options).to.not.have.property('app');\n      expect(commands.get('logs').options).to.not.have.property('app');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should support introduction of new commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":60,"column":51,"index":2270},"line":60,"code":"    it('should support introduction of new commands', () => {\n      expect(commands.get('deploy apim').usage).to.equal('Deploys APIM');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose no service options on new service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":63,"column":64,"index":2427},"line":63,"code":"    it('should expose no service options on new service commands', () => expect(commands.get('deploy apim').options).to.have.property('help'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose service options on new service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","Non-AWS provider"],"updatePoint":{"line":64,"column":61,"index":2568},"line":64,"code":"    it('should expose service options on new service commands', () => expect(commands.get('deploy apim').options).to.have.property('config'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose no service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":106,"column":41,"index":3762},"line":106,"code":"    it('should expose no service commands', () => expect(commands.get('create')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":107,"column":38,"index":3870},"line":107,"code":"    it('should expose service commands', () => expect(commands.get('package')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose all AWS service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":108,"column":46,"index":3987},"line":108,"code":"    it('should expose all AWS service commands', () => expect(commands.get('metrics')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should extend existing commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":109,"column":39,"index":4097},"line":109,"code":"    it('should extend existing commands', () => {\n      expect(commands.get('deploy').options).to.have.property('dryrun');\n      expect(commands.get('deploy list').options).to.have.property('resourceGroup');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should support introduction of new commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":113,"column":51,"index":4325},"line":113,"code":"    it('should support introduction of new commands', () => {\n      expect(commands.get('deploy apim').usage).to.equal('Deploys APIM');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose AWS specific options on newly introduced commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":116,"column":71,"index":4489},"line":116,"code":"    it('should expose AWS specific options on newly introduced commands', () => {\n      expect(commands.get('deploy apim').options).to.have.property('app');\n    });","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose no service options on new service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":119,"column":64,"index":4647},"line":119,"code":"    it('should expose no service options on new service commands', () => expect(commands.get('deploy apim').options).to.have.property('help'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose service options on new service commands","suites":["test/unit/lib/cli/commands-schema/resolve-final.test.js","AWS provider"],"updatePoint":{"line":120,"column":61,"index":4788},"line":120,"code":"    it('should expose service options on new service commands', () => expect(commands.get('deploy apim').options).to.have.property('config'));","file":"unit/lib/cli/commands-schema/resolve-final.test.js","skipped":false,"dir":"test"},{"name":"should expose no service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":8,"column":39,"index":246},"line":8,"code":"  it('should expose no service commands', () => expect(serviceCommands.get('create')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should expose service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":9,"column":36,"index":359},"line":9,"code":"  it('should expose service commands', () => expect(serviceCommands.get('package')).to.have.property('options'));","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":10,"column":44,"index":481},"line":10,"code":"  it('should not expose AWS service commands', () => expect(serviceCommands.has('deploy')).to.be.false);","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should expose no service options on service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":11,"column":58,"index":600},"line":11,"code":"  it('should expose no service options on service commands', () => expect(serviceCommands.get('plugin install').options).to.have.property('help'));","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should expose service options on service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":12,"column":55,"index":745},"line":12,"code":"  it('should expose service options on service commands', () => expect(serviceCommands.get('plugin install').options).to.have.property('config'));","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should not expose AWS service options on service commands","suites":["test/unit/lib/cli/commands-schema/service.test.js"],"updatePoint":{"line":13,"column":63,"index":900},"line":13,"code":"  it('should not expose AWS service options on service commands', () => expect(serviceCommands.get('plugin install').options).to.not.have.property('region'));","file":"unit/lib/cli/commands-schema/service.test.js","skipped":false,"dir":"test"},{"name":"should load environment variables from default .env file if no matching stage","suites":["test/unit/lib/cli/conditionally-load-dotenv.test.js"],"updatePoint":{"line":27,"column":83,"index":982},"line":27,"code":"  it('should load environment variables from default .env file if no matching stage', async () => {\n    await conditionallyLoadDotenv({}, {\n      useDotenv: true\n    });\n    expect(process.env.DEFAULT_ENV_VARIABLE).to.equal('valuefromdefault');\n    expect(process.env.STAGE_ENV_VARIABLE).to.be.undefined;\n  });","file":"unit/lib/cli/conditionally-load-dotenv.test.js","skipped":false,"dir":"test"},{"name":"should load environment variables from stage .env file if matching stage","suites":["test/unit/lib/cli/conditionally-load-dotenv.test.js"],"updatePoint":{"line":34,"column":78,"index":1288},"line":34,"code":"  it('should load environment variables from stage .env file if matching stage', async () => {\n    await conditionallyLoadDotenv({\n      stage: 'testing'\n    }, {\n      useDotenv: true\n    });\n    expect(process.env.DEFAULT_ENV_VARIABLE).to.be.undefined;\n    expect(process.env.STAGE_ENV_VARIABLE).to.equal('valuefromstage');\n  });","file":"unit/lib/cli/conditionally-load-dotenv.test.js","skipped":false,"dir":"test"},{"name":"should do nothing on valid command","suites":["test/unit/lib/cli/ensure-supported-command.test.js"],"updatePoint":{"line":14,"column":40,"index":536},"line":14,"code":"  it('should do nothing on valid command', async () => {\n    resolveInput.clear();\n    triggeredDeprecations.clear();\n    overrideArgv({\n      args: ['serverless', 'login']\n    }, () => resolveInput());\n    ensureSupportedCommand();\n  });","file":"unit/lib/cli/ensure-supported-command.test.js","skipped":false,"dir":"test"},{"name":"should do nothing on container commmand","suites":["test/unit/lib/cli/ensure-supported-command.test.js"],"updatePoint":{"line":22,"column":45,"index":780},"line":22,"code":"  it('should do nothing on container commmand', async () => {\n    resolveInput.clear();\n    triggeredDeprecations.clear();\n    overrideArgv({\n      args: ['serverless', 'plugin']\n    }, () => resolveInput());\n    ensureSupportedCommand();\n  });","file":"unit/lib/cli/ensure-supported-command.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid command","suites":["test/unit/lib/cli/ensure-supported-command.test.js"],"updatePoint":{"line":30,"column":35,"index":1015},"line":30,"code":"  it('should reject invalid command', async () => {\n    resolveInput.clear();\n    triggeredDeprecations.clear();\n    overrideArgv({\n      args: ['serverless', 'hablo']\n    }, () => resolveInput());\n    expect(() => ensureSupportedCommand()).to.throw(ServerlessError).with.property('code', 'UNRECOGNIZED_CLI_COMMAND');\n  });","file":"unit/lib/cli/ensure-supported-command.test.js","skipped":false,"dir":"test"},{"name":"should report invalid options","suites":["test/unit/lib/cli/ensure-supported-command.test.js"],"updatePoint":{"line":38,"column":35,"index":1339},"line":38,"code":"  it('should report invalid options', async () => {\n    resolveInput.clear();\n    triggeredDeprecations.clear();\n    overrideArgv({\n      args: ['serverless', 'login', '--hadsfa']\n    }, () => resolveInput());\n    expect(() => ensureSupportedCommand()).to.throw(ServerlessError).with.property('code', 'UNSUPPORTED_CLI_OPTIONS');\n  });","file":"unit/lib/cli/ensure-supported-command.test.js","skipped":false,"dir":"test"},{"name":"should reject missing options","suites":["test/unit/lib/cli/ensure-supported-command.test.js"],"updatePoint":{"line":46,"column":35,"index":1674},"line":46,"code":"  it('should reject missing options', async () => {\n    resolveInput.clear();\n    triggeredDeprecations.clear();\n    overrideArgv({\n      args: ['serverless', 'config', 'credentials']\n    }, () => resolveInput());\n    expect(() => ensureSupportedCommand()).to.throw(ServerlessError).with.property('code', 'MISSING_REQUIRED_CLI_OPTION');\n  });","file":"unit/lib/cli/ensure-supported-command.test.js","skipped":false,"dir":"test"},{"name":"should recognize just command schema options if passsed","suites":["test/unit/lib/cli/filter-supported-options.test.js"],"updatePoint":{"line":8,"column":61,"index":274},"line":8,"code":"  it('should recognize just command schema options if passsed', () => {\n    expect(filterSupportedOptions({\n      supString: 'string',\n      supBool: false,\n      supMultiple: ['multiple'],\n      unSupString: 'string',\n      unSupBool: false,\n      unSupMultiple: ['multiple']\n    }, {\n      commandSchema: {\n        options: {\n          supString: {},\n          supBool: {},\n          supMultiple: {},\n          extra: {}\n        }\n      }\n    })).to.deep.equal({\n      supString: 'string',\n      supBool: false,\n      supMultiple: ['multiple'],\n      extra: null\n    });\n  });","file":"unit/lib/cli/filter-supported-options.test.js","skipped":false,"dir":"test"},{"name":"should recognize just AWS service options when no command schema and AWS provider","suites":["test/unit/lib/cli/filter-supported-options.test.js"],"updatePoint":{"line":32,"column":87,"index":879},"line":32,"code":"  it('should recognize just AWS service options when no command schema and AWS provider', () => {\n    expect(filterSupportedOptions({\n      stage: 'marko',\n      region: 'elo',\n      unSupString: 'string',\n      unSupBool: false,\n      unSupMultiple: ['multiple']\n    }, {\n      providerName: 'aws'\n    })).to.deep.equal({\n      'param': null,\n      'region': 'elo',\n      'aws-profile': null,\n      'help': null,\n      'version': null,\n      'config': null,\n      'stage': 'marko',\n      'app': null,\n      'org': null,\n      'use-local-credentials': null,\n      'verbose': null,\n      'debug': null\n    });\n  });","file":"unit/lib/cli/filter-supported-options.test.js","skipped":false,"dir":"test"},{"name":"should recognize just any service options when no command schema and no AWS provider","suites":["test/unit/lib/cli/filter-supported-options.test.js"],"updatePoint":{"line":56,"column":90,"index":1497},"line":56,"code":"  it('should recognize just any service options when no command schema and no AWS provider', () => {\n    expect(filterSupportedOptions({\n      stage: 'marko',\n      region: 'elo',\n      unSupString: 'string',\n      unSupBool: false,\n      unSupMultiple: ['multiple']\n    }, {})).to.deep.equal({\n      param: null,\n      help: null,\n      version: null,\n      config: null,\n      stage: 'marko',\n      verbose: null,\n      debug: null\n    });\n  });","file":"unit/lib/cli/filter-supported-options.test.js","skipped":false,"dir":"test"},{"name":"should output error","suites":["test/unit/lib/cli/handle-error.test.js"],"updatePoint":{"line":12,"column":25,"index":513},"line":12,"code":"  it('should output error', async () => {\n    const output = await observeOutput(() => handleError(new ServerlessError('Test error')));\n    expect(output).to.have.string('Test error');\n  });","file":"unit/lib/cli/handle-error.test.js","skipped":false,"dir":"test"},{"name":"should report standalone installation","suites":["test/unit/lib/cli/handle-error.test.js"],"updatePoint":{"line":17,"column":45,"index":756},"line":17,"code":"    it('should report standalone installation', async () => {\n      const output = await observeOutput(() => handleError(new ServerlessError('Test error')));\n      expect(output).to.have.string('(standalone)');\n    });","file":"unit/lib/cli/handle-error.test.js","skipped":false,"dir":"test"},{"name":"should handle non-error objects","suites":["test/unit/lib/cli/handle-error.test.js"],"updatePoint":{"line":22,"column":37,"index":971},"line":22,"code":"  it('should handle non-error objects', async () => {\n    const output = await observeOutput(() => handleError(handleError('NON-ERROR')));\n    expect(output).to.have.string('NON-ERROR');\n  });","file":"unit/lib/cli/handle-error.test.js","skipped":false,"dir":"test"},{"name":"should add `location` to `failureReason` in telemetry if error code missing","suites":["test/unit/lib/cli/handle-error.test.js","with mocked telemetry"],"updatePoint":{"line":30,"column":83,"index":1313},"line":30,"code":"    it('should add `location` to `failureReason` in telemetry if error code missing', async () => {\n      const {\n        telemetryData: {\n          failureReason\n        }\n      } = await handleError(new ServerlessError('Test error'), {});\n      expect(failureReason).to.have.property('location');\n    });","file":"unit/lib/cli/handle-error.test.js","skipped":false,"dir":"test"},{"name":"should add `location` to `failureReason` in telemetry for non-user errors","suites":["test/unit/lib/cli/handle-error.test.js","with mocked telemetry"],"updatePoint":{"line":38,"column":81,"index":1618},"line":38,"code":"    it('should add `location` to `failureReason` in telemetry for non-user errors', async () => {\n      const {\n        telemetryData: {\n          failureReason\n        }\n      } = await handleError(new Error('Test error'), {});\n      expect(failureReason).to.have.property('location');\n    });","file":"unit/lib/cli/handle-error.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at service path","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":60,"column":53,"index":1667},"line":60,"code":"  it('Should be ineffective, when not at service path', async () => {\n    const context = {};\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_IN_SERVICE_DIRECTORY');\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at AWS service","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":65,"column":52,"index":1912},"line":65,"code":"  it('Should be ineffective, when not at AWS service', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {},\n      configurationFilename: 'serverless.yml'\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NON_AWS_PROVIDER');\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when user has default provider set","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":74,"column":63,"index":2269},"line":74,"code":"  it('Should be ineffective, when user has default provider set', async () => {\n    const internalMockedSdk = {\n      ...mockedSdk,\n      getProviders: async () => {\n        return {\n          result: [{\n            alias: 'someprovider',\n            providerName: 'aws',\n            providerType: 'roleArn',\n            providerUid: 'provideruid',\n            isDefault: true,\n            providerDetails: {\n              roleArn: 'arn:xxx'\n            }\n          }]\n        };\n      }\n    };\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n      '@serverless/dashboard-plugin/lib/client-utils': {\n        getPlatformClientWithAccessKey: async () => internalMockedSdk\n      },\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp'\n      },\n      configurationFilename: 'serverless.yml'\n    };\n    expect(await mockedStep.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('DEFAULT_PROVIDER_CONFIGURED');\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when existing service already has a provider set","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":112,"column":77,"index":3485},"line":112,"code":"  it('Should be ineffective, when existing service already has a provider set', async () => {\n    const internalMockedSdk = {\n      ...mockedSdk,\n      getProviders: async () => {\n        return {\n          result: [{\n            alias: 'someprovider',\n            providerName: 'aws',\n            providerType: 'roleArn',\n            providerUid: 'provideruid',\n            isDefault: false,\n            providerDetails: {\n              roleArn: 'arn:xxx'\n            }\n          }]\n        };\n      }\n    };\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n      '@serverless/dashboard-plugin/lib/client-utils': {\n        getPlatformClientWithAccessKey: async () => internalMockedSdk\n      },\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n      './utils': {\n        doesServiceInstanceHaveLinkedProvider: () => true\n      }\n    });\n    const context = {\n      history: new Set(),\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp',\n        service: 'service'\n      },\n      options: {},\n      configurationFilename: 'serverless.yml'\n    };\n    expect(await mockedStep.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('LINKED_PROVIDER_CONFIGURED');\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be effective, when existing service instance does not have a provider set","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":156,"column":86,"index":4869},"line":156,"code":"  it('Should be effective, when existing service instance does not have a provider set', async () => {\n    const internalMockedSdk = {\n      ...mockedSdk,\n      getProviders: async () => {\n        return {\n          result: [{\n            alias: 'someprovider',\n            providerName: 'aws',\n            providerType: 'roleArn',\n            providerUid: 'provideruid',\n            isDefault: false,\n            providerDetails: {\n              roleArn: 'arn:xxx'\n            }\n          }]\n        };\n      }\n    };\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n      '@serverless/dashboard-plugin/lib/client-utils': {\n        getPlatformClientWithAccessKey: async () => internalMockedSdk\n      },\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n      './utils': {\n        doesServiceInstanceHaveLinkedProvider: () => false\n      }\n    });\n    expect(await mockedStep.isApplicable({\n      history: new Set(),\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp',\n        service: 'service'\n      },\n      options: {},\n      configurationFilename: 'serverless.yml'\n    })).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective when dashboard is not available","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":198,"column":59,"index":6111},"line":198,"code":"  it('Should be ineffective when dashboard is not available', async () => {\n    const internalMockedSdk = {\n      ...mockedSdk,\n      getProviders: async () => {\n        const err = new Error('unavailable');\n        err.statusCode = 500;\n        throw err;\n      }\n    };\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n      '@serverless/dashboard-plugin/lib/client-utils': {\n        getPlatformClientWithAccessKey: async () => internalMockedSdk\n      },\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n    });\n    expect(await mockedStep.isApplicable({\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp'\n      },\n      configurationFilename: 'serverless.yml'\n    })).to.be.false;\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be effective, at AWS service and no credentials are set","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":225,"column":68,"index":6983},"line":225,"code":"  it('Should be effective, at AWS service and no credentials are set', async () => expect(await step.isApplicable({\n    serviceDir: process.cwd(),\n    configuration: {\n      provider: {\n        name: 'aws'\n      }\n    },\n    configurationFilename: 'serverless.yml'\n  })).to.equal(true));","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should allow to skip credentials setup","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js"],"updatePoint":{"line":234,"column":44,"index":7247},"line":234,"code":"  it('Should allow to skip credentials setup', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        credentialsSetupChoice: '_skip_'\n      }\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      stepHistory: new StepHistory(),\n      options: {}\n    };\n    let stdoutData = '';\n    await overrideStdoutWrite(data => stdoutData += data, async () => await step.run(context));\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_skip_']]));\n  });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when credentials are set in environment","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","In environment credentials"],"updatePoint":{"line":269,"column":70,"index":8381},"line":269,"code":"    it('Should be ineffective, when credentials are set in environment', async () => {\n      expect(await uncachedStep.isApplicable({\n        serviceDir: process.cwd(),\n        configuration: {\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml'\n      })).to.equal(false);\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, When credentials are set in AWS config","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","AWS config handling","Existing credentials case"],"updatePoint":{"line":291,"column":71,"index":9238},"line":291,"code":"      it('Should be ineffective, When credentials are set in AWS config', async () => expect(await step.isApplicable({\n        serviceDir: process.cwd(),\n        configuration: {\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml'\n      })).to.equal(false));","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should setup credentials for users not having an AWS account","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","AWS config handling","Existing credentials case"],"updatePoint":{"line":301,"column":68,"index":9567},"line":301,"code":"    it('Should setup credentials for users not having an AWS account', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_local_'\n        },\n        confirm: {\n          hasAwsAccount: false\n        },\n        input: {\n          createAwsAccountPrompt: '',\n          generateAwsCredsPrompt: '',\n          accessKeyId,\n          secretAccessKey\n        }\n      });\n      const context = {\n        configuration: {\n          provider: {}\n        },\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await step.run(context);\n      expect(openBrowserUrls.length).to.equal(2);\n      expect(openBrowserUrls[0].includes('signup')).to.be.true;\n      expect(openBrowserUrls[1].includes('console.aws.amazon.com')).to.be.true;\n      resolveFileProfiles().then(profiles => {\n        expect(profiles).to.deep.equal(new Map([['default', {\n          accessKeyId,\n          secretAccessKey\n        }]]));\n      });\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_local_'], ['createAwsAccountPrompt', '_continuation_'], ['generateAwsCredsPrompt', '_continuation_'], ['accessKeyId', '_user_input_'], ['secretAccessKey', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should setup credentials for users having an AWS account","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","AWS config handling","Existing credentials case"],"updatePoint":{"line":335,"column":64,"index":10823},"line":335,"code":"    it('Should setup credentials for users having an AWS account', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_local_'\n        },\n        confirm: {\n          hasAwsAccount: true\n        },\n        input: {\n          generateAwsCredsPrompt: '',\n          accessKeyId,\n          secretAccessKey\n        }\n      });\n      const context = {\n        configuration: {\n          provider: {}\n        },\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await step.run(context);\n      expect(openBrowserUrls.length).to.equal(1);\n      expect(openBrowserUrls[0].includes('console.aws.amazon.com')).to.be.true;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_local_'], ['generateAwsCredsPrompt', '_continuation_'], ['accessKeyId', '_user_input_'], ['secretAccessKey', '_user_input_']]));\n      return resolveFileProfiles().then(profiles => {\n        expect(profiles).to.deep.equal(new Map([['default', {\n          accessKeyId,\n          secretAccessKey\n        }]]));\n      });\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should not accept invalid access key id","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","AWS config handling","Existing credentials case"],"updatePoint":{"line":367,"column":47,"index":11920},"line":367,"code":"    it('Should not accept invalid access key id', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_local_'\n        },\n        confirm: {\n          hasAwsAccount: true\n        },\n        input: {\n          generateAwsCredsPrompt: '',\n          accessKeyId: 'foo',\n          secretAccessKey\n        }\n      });\n      const context = {\n        configuration: {\n          provider: {}\n        },\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'INVALID_ANSWER');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_local_'], ['generateAwsCredsPrompt', '_continuation_'], ['accessKeyId', undefined]]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should not accept invalid secret access key","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","AWS config handling","Existing credentials case"],"updatePoint":{"line":391,"column":51,"index":12744},"line":391,"code":"    it('Should not accept invalid secret access key', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_local_'\n        },\n        confirm: {\n          hasAwsAccount: true\n        },\n        input: {\n          generateAwsCredsPrompt: '',\n          accessKeyId,\n          secretAccessKey: 'foo'\n        }\n      });\n      const context = {\n        configuration: {\n          provider: {}\n        },\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'INVALID_ANSWER');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_local_'], ['generateAwsCredsPrompt', '_continuation_'], ['accessKeyId', '_user_input_'], ['secretAccessKey', undefined]]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should correctly setup with newly created provider when no previous providers exist","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","Provider config handling"],"updatePoint":{"line":417,"column":91,"index":13698},"line":417,"code":"    it('Should correctly setup with newly created provider when no previous providers exist', async () => {\n      const mockedOpenBrowser = sinon.stub().returns();\n      const mockedDisconnect = sinon.stub().returns();\n      const mockedCreateProviderLink = sinon.stub().resolves();\n      const providerUid = 'provideruid';\n      const internalMockedSdk = {\n        ...mockedSdk,\n        connect: ({\n          onEvent\n        }) => {\n          onEvent({\n            data: {\n              object: {\n                provider_uid: providerUid\n              }\n            }\n          });\n        },\n        disconnect: mockedDisconnect,\n        createProviderLink: mockedCreateProviderLink\n      };\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n        '@serverless/dashboard-plugin/lib/client-utils': {\n          getPlatformClientWithAccessKey: async () => internalMockedSdk\n        },\n        '../../utils/open-browser': mockedOpenBrowser,\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_create_provider_'\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        options: {},\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      expect(mockedOpenBrowser).to.have.been.calledWith('https://app.serverless.com/someorg/settings/providers?source=cli&providerId=new&provider=aws');\n      expect(mockedDisconnect).to.have.been.called;\n      expect(mockedCreateProviderLink).not.to.have.been.called;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_create_provider_']]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should correctly setup with newly created provider when previous providers exist","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","Provider config handling"],"updatePoint":{"line":470,"column":88,"index":15689},"line":470,"code":"    it('Should correctly setup with newly created provider when previous providers exist', async () => {\n      const mockedOpenBrowser = sinon.stub().returns();\n      const mockedDisconnect = sinon.stub().returns();\n      const mockedCreateProviderLink = sinon.stub().resolves();\n      const providerUid = 'provideruid';\n      const internalMockedSdk = {\n        ...mockedSdk,\n        connect: ({\n          onEvent\n        }) => {\n          onEvent({\n            data: {\n              object: {\n                provider_uid: providerUid\n              }\n            }\n          });\n        },\n        getProviders: async () => {\n          return {\n            result: [{\n              alias: 'someprovider',\n              providerName: 'aws',\n              providerType: 'roleArn',\n              providerUid,\n              providerDetails: {\n                roleArn: 'arn:xxx'\n              }\n            }]\n          };\n        },\n        disconnect: mockedDisconnect,\n        createProviderLink: mockedCreateProviderLink\n      };\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n        '@serverless/dashboard-plugin/lib/client-utils': {\n          getPlatformClientWithAccessKey: async () => internalMockedSdk\n        },\n        '../../utils/open-browser': mockedOpenBrowser,\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: '_create_provider_'\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        options: {},\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      expect(mockedOpenBrowser).to.have.been.calledWith('https://app.serverless.com/someorg/settings/providers?source=cli&providerId=new&provider=aws');\n      expect(mockedDisconnect).to.have.been.called;\n      expect(mockedCreateProviderLink).to.have.been.calledWith('org-uid', 'instance', 'appName|someapp|serviceName|someservice|stage|dev|region|us-east-1', providerUid);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_create_provider_']]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should correctly setup with existing provider","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","Provider config handling"],"updatePoint":{"line":536,"column":53,"index":18090},"line":536,"code":"    it('Should correctly setup with existing provider', async () => {\n      const providerUid = 'provideruid';\n      const mockedCreateProviderLink = sinon.stub().resolves();\n      const internalMockedSdk = {\n        ...mockedSdk,\n        getProviders: async () => {\n          return {\n            result: [{\n              alias: 'someprovider',\n              providerName: 'aws',\n              providerType: 'accessKey',\n              providerUid,\n              providerDetails: {\n                accessKeyId: 'axx'\n              }\n            }]\n          };\n        },\n        createProviderLink: mockedCreateProviderLink\n      };\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n        '@serverless/dashboard-plugin/lib/client-utils': {\n          getPlatformClientWithAccessKey: async () => internalMockedSdk\n        },\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: providerUid\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        options: {},\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      expect(mockedCreateProviderLink).to.have.been.calledWith('org-uid', 'instance', 'appName|someapp|serviceName|someservice|stage|dev|region|us-east-1', 'provideruid');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should handle gently dashboard unavailabiilty when linking provider","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","Provider config handling"],"updatePoint":{"line":585,"column":75,"index":19881},"line":585,"code":"    it('Should handle gently dashboard unavailabiilty when linking provider', async () => {\n      const providerUid = 'provideruid';\n      const mockedCreateProviderLink = sinon.stub().callsFake(async () => {\n        const err = new Error('error');\n        err.statusCode = 500;\n        throw err;\n      });\n      const internalMockedSdk = {\n        ...mockedSdk,\n        getProviders: async () => {\n          return {\n            result: [{\n              alias: 'someprovider',\n              providerName: 'aws',\n              providerType: 'roleArn',\n              providerUid,\n              providerDetails: {\n                roleArn: 'arn:xxx'\n              }\n            }]\n          };\n        },\n        createProviderLink: mockedCreateProviderLink\n      };\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n        '@serverless/dashboard-plugin/lib/client-utils': {\n          getPlatformClientWithAccessKey: async () => internalMockedSdk\n        },\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          credentialsSetupChoice: providerUid\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        options: {},\n        stepHistory: new StepHistory(),\n        configurationFilename: 'serverless.yml'\n      };\n      await mockedStep.run(context);\n      expect(mockedCreateProviderLink).to.have.been.calledWith('org-uid', 'instance', 'appName|someapp|serviceName|someservice|stage|dev|region|us-east-1', 'provideruid');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['credentialsSetupChoice', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should handle gently dashboard unavailabiilty when fetching providers","suites":["test/unit/lib/cli/interactive-setup/aws-credentials.test.js","Provider config handling"],"updatePoint":{"line":638,"column":77,"index":21783},"line":638,"code":"    it('Should handle gently dashboard unavailabiilty when fetching providers', async () => {\n      const internalMockedSdk = {\n        ...mockedSdk,\n        getProviders: async () => {\n          const err = new Error('unavailable');\n          err.statusCode = 500;\n          throw err;\n        }\n      };\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/aws-credentials', {\n        '@serverless/dashboard-plugin/lib/client-utils': {\n          getPlatformClientWithAccessKey: async () => internalMockedSdk\n        },\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true\n      });\n      await mockedStep.run({\n        serviceDir: process.cwd(),\n        configuration: {\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        options: {},\n        configurationFilename: 'serverless.yml'\n      });\n    });","file":"unit/lib/cli/interactive-setup/aws-credentials.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not in console dev mode context","suites":["test/unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js"],"updatePoint":{"line":89,"column":65,"index":2818},"line":89,"code":"  it('Should be ineffective, when not in console dev mode context', async () => {\n    const context = {\n      isConsoleDevMode: false,\n      options: {}\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NON_DEV_MODE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when no org is selected","suites":["test/unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js"],"updatePoint":{"line":97,"column":52,"index":3109},"line":97,"code":"  it('Should be ineffective, when no org is selected', async () => {\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: null\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('UNRESOLVED_ORG');\n  });","file":"unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when functions are targeted","suites":["test/unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js"],"updatePoint":{"line":106,"column":56,"index":3414},"line":106,"code":"  it('Should be ineffective, when functions are targeted', async () => {\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: {\n        orgId: fakeOrgId\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NO_TARGET_FUNCTIONS');\n  });","file":"unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js","skipped":false,"dir":"test"},{"name":"Should be effective and connect to websocket","suites":["test/unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js"],"updatePoint":{"line":117,"column":50,"index":3748},"line":117,"code":"  it('Should be effective and connect to websocket', async () => {\n    const context = {\n      isConsoleDevMode: true,\n      options: {\n        verbose: true\n      },\n      org: {\n        orgId: fakeOrgId\n      },\n      consoleDevModeTargetFunctions,\n      awsAccountId: fakeAWSAccountId,\n      serverless: {\n        service: {\n          provider: fakeRegion\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.true;\n    const waitForConnection = () => new Promise(resolve => {\n      socketServer = new WebSocket.Server({\n        port: 9988\n      });\n      step.run(context);\n      socketServer.on('connection', ws => {\n        ws.on('message', () => {\n          ws.send(JSON.stringify({\n            message: 'filters successfully applied',\n            resetThrottle: true\n          }));\n        });\n        resolve(ws);\n      });\n    });\n    socketConnection = await waitForConnection();\n\n    /**\n     * Set of messages containing 👇\n     *\n     * 1. request\n     * 2. JSON log\n     * 3. text log\n     * 4. JSON parsable text log\n     * 5. s3 span\n     * 6. Warning event\n     * 7. Error event\n     * 8. response\n     *\n     * It also included the aws.lambda* spans that should be ignored :)\n     */\n    const mockMessages = [[{\n      body: '{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}',\n      timestamp: '2023-03-20T21:26:10.790Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'aws-lambda-request',\n      sequenceId: 1679347571057\n    }], [{\n      name: 'aws.lambda.initialization',\n      timestamp: '2023-03-20T21:26:10.365Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'span',\n      sequenceId: 1679347571276\n    }], [{\n      body: '{\"message\":\"Hi dev mode 👋\"}\\n',\n      severityNumber: '1',\n      severityText: 'INFO',\n      timestamp: '2023-03-20T21:26:10.802Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'log',\n      sequenceId: 1679344258090\n    }, {\n      body: 'text log\\n',\n      severityNumber: '1',\n      severityText: 'INFO',\n      timestamp: '2023-03-20T21:26:10.802Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'log',\n      sequenceId: 1679344258091\n    }, {\n      body: '\"hello\"',\n      severityNumber: '1',\n      severityText: 'INFO',\n      timestamp: '2023-03-20T21:26:10.802Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'log',\n      sequenceId: 1679344258091\n    }], [{\n      customTags: '{}',\n      input: '{\"Bucket\":\"fake-bucket\"}',\n      name: 'aws.sdk.s3.listobjectsv2',\n      output: '{\"message\": \"s3 output\"}',\n      timestamp: '2023-03-20T21:26:10.804Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'span',\n      sequenceId: 1679347571306\n    }, {\n      customTags: '{\"foo\":\"bar\"}',\n      eventName: 'telemetry.warning.generated.v1',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        },\n        warning: {\n          message: 'This is a warning',\n          stacktrace: 'at module.exports.handler (/var/task/index.js:12:7)\\nat process.processTicksAndRejections (node:internal/process/task_queues:95:5)',\n          type: 'WARNING_TYPE_USER'\n        }\n      },\n      timestamp: '2023-03-20T21:26:10.916Z',\n      type: 'event',\n      sequenceId: 1679347571307\n    }, {\n      customTags: '{\"foo\":\"bar\"}',\n      eventName: 'telemetry.error.generated.v1',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        },\n        error: {\n          message: 'Oh no!',\n          name: 'Error',\n          stacktrace: 'at module.exports.handler (/var/task/index.js:13:20)\\nat process.processTicksAndRejections (node:internal/process/task_queues:95:5)',\n          type: 'ERROR_TYPE_CAUGHT_USER'\n        }\n      },\n      timestamp: '2023-03-20T21:26:10.924Z',\n      type: 'event',\n      sequenceId: 1679347571308\n    }], [{\n      customTags: '{}',\n      name: 'aws.lambda.invocation',\n      timestamp: '2023-03-20T21:26:10.790Z',\n      type: 'span',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      sequenceId: 1679347572067\n    }, {\n      customTags: '{}',\n      isHistorical: false,\n      name: 'aws.lambda',\n      timestamp: '2023-03-20T21:26:10.365Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'span',\n      sequenceId: 1679347572068\n    }], [{\n      body: '{\"response\":\"hello there\"}',\n      timestamp: '2023-03-20T21:26:11.934Z',\n      tags: {\n        aws: {\n          resourceName: 'example-dev-function1'\n        }\n      },\n      type: 'aws-lambda-response',\n      sequenceId: 1679347572127\n    }]];\n\n    // Send all messages\n    for (const message of mockMessages) {\n      socketConnection.send(JSON.stringify(message));\n    }\n\n    // Wait for all messages to be processed\n    await sleep(600);\n\n    // Publish dev mode events\n    await timers[1]();\n\n    // Close connection to socket\n    socketConnection.terminate();\n\n    // Assert that each message had a header and our text log was written\n    expect(fakeGreyWriter.callCount).to.equal(12);\n    expect(fakeGreyWriter.getCall(0).args[0]).to.equal(`\\n${fakeTime} • example-dev-function1 • Invocation Started\\n`);\n    // Plain text log message\n    expect(fakeGreyWriter.getCall(3).args[0]).to.equal('text log\\n');\n    // Empty text log message\n    expect(fakeGreyWriter.getCall(5).args[0]).to.equal('\"hello\"\\n');\n    expect(fakeGreyWriter.getCall(6).args[0]).to.equal(`\\n${fakeTime} • example-dev-function1 • Span • aws.sdk.s3.listobjectsv2\\n`);\n    // Check end message is last\n    expect(fakeGreyWriter.getCall(10).args[0]).to.equal(`\\n${fakeTime} • example-dev-function1 • Invocation Ended\\n`);\n\n    // Assert that our first log message was processed as JSON and both the warning and error event were printed to the console\n    expect(fakeJSONWriter.callCount).to.equal(7);\n    expect(fakeJSONWriter.getCall(0).args[0]).to.equal(`${JSON.stringify(JSON.parse(mockMessages[0][0].body), null, 2)}`);\n    expect(fakeJSONWriter.getCall(1).args[0]).to.equal(`${JSON.stringify(JSON.parse(mockMessages[2][0].body), null, 2)}`);\n    expect(fakeJSONWriter.getCall(2).args[0]).to.equal(`${JSON.stringify(JSON.parse(mockMessages[3][0].input), null, 2)}`);\n    expect(fakeJSONWriter.getCall(3).args[0]).to.equal(`${JSON.stringify(JSON.parse(mockMessages[3][0].output), null, 2)}`);\n    expect(fakeJSONWriter.getCall(4).args[0]).to.equal(`${JSON.stringify(mockMessages[3][1].tags.warning, null, 2)}`);\n    expect(fakeJSONWriter.getCall(5).args[0]).to.equal(`${JSON.stringify(mockMessages[3][2].tags.error, null, 2)}`);\n    expect(fakeJSONWriter.getCall(5).args[1].colors.BRACE).to.equal('#FD5750');\n\n    // Assert that the error event was printed with the error\n    expect(fakeErrorWriter.callCount).to.equal(1);\n    expect(fakeErrorWriter.getCall(0).args[0]).to.equal(`\\n${fakeTime} • example-dev-function1 • ERROR • fake\\n`);\n\n    // Validate publish event was called\n    expect(publishFake.callCount).to.equal(1);\n    expect(publishFake.getCall(0).args[0].body.event.logBatches).to.equal(3);\n    expect(publishFake.getCall(0).args[0].body.event.responses).to.equal(1);\n    expect(publishFake.getCall(0).args[0].body.event.events).to.equal(2);\n    expect(publishFake.getCall(0).args[0].body.event.source).to.equal('cli:serverless');\n  });","file":"unit/lib/cli/interactive-setup/console-dev-mode-feed.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not in console dev mode context","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":50,"column":65,"index":1750},"line":50,"code":"  it('Should be ineffective, when not in console dev mode context', async () => {\n    configureStep({\n      functionExistResponse: {},\n      checkInstrumentationResponse: {}\n    });\n    const context = {\n      isConsoleDevMode: false,\n      options: {}\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NON_DEV_MODE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when no org is selected","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":62,"column":52,"index":2141},"line":62,"code":"  it('Should be ineffective, when no org is selected', async () => {\n    configureStep({\n      functionExistResponse: {},\n      checkInstrumentationResponse: {}\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: null\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('UNRESOLVED_ORG');\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when functions are already instrumented","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":75,"column":68,"index":2558},"line":75,"code":"  it('Should be ineffective, when functions are already instrumented', async () => {\n    configureStep({\n      functionExistResponse: {\n        total: expectedFunctionCount,\n        hits: expectedFunctionHits\n      },\n      checkInstrumentationResponse: {\n        total: expectedFunctionCount,\n        hits: expectedFunctionHits\n      }\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: {\n        orgId: fakeOrgId\n      },\n      serverless: {\n        service: {\n          provider: {\n            region: fakeRegion\n          },\n          setFunctionNames: () => {},\n          getAllFunctionsNames: () => expectedServiceFunctionNames\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('ALREADY_INSTRUMENTED');\n    expect(context.targetInstrumentations.length).to.equal(1);\n    expect(context.consoleDevModeTargetFunctions.length).to.equal(1);\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective and cancel, when only one function exists and it is not included in the integration","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":107,"column":111,"index":3576},"line":107,"code":"  it('Should be ineffective and cancel, when only one function exists and it is not included in the integration', async () => {\n    configureStep({\n      functionExistResponse: {\n        total: 0,\n        hits: []\n      },\n      checkInstrumentationResponse: {\n        total: 0,\n        hits: []\n      }\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: {\n        orgId: fakeOrgId\n      },\n      serverless: {\n        service: {\n          provider: {\n            region: fakeRegion\n          },\n          setFunctionNames: () => {},\n          getAllFunctionsNames: () => expectedServiceFunctionNames\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NO_FUNCTIONS_EXIST');\n    expect(context.targetInstrumentations).to.be.undefined;\n    expect(context.consoleDevModeTargetFunctions).to.be.undefined;\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be effective and only update functions that were found in the integration","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":139,"column":86,"index":4485},"line":139,"code":"  it('Should be effective and only update functions that were found in the integration', async () => {\n    // Add a function that is not in the integration to the serverless service\n    expectedServiceFunctionNames.push('function2');\n    // Set up the expected responses from the API\n    const functionExistResponse = {\n      total: expectedFunctionCount,\n      hits: expectedFunctionHits\n    };\n    const checkInstrumentationResponse = {\n      total: 0,\n      hits: []\n    };\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: {\n        orgId: fakeOrgId\n      },\n      serverless: {\n        service: {\n          provider: {\n            region: fakeRegion\n          },\n          setFunctionNames: () => {},\n          getAllFunctionsNames: () => expectedServiceFunctionNames\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.true;\n    expect(context.targetInstrumentations.length).to.equal(1);\n    expect(context.consoleDevModeTargetFunctions.length).to.equal(1);\n\n    // Re-proxyquire step so we can update the response to the checkInstrumentation call\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse: {\n        total: expectedFunctionCount,\n        hits: expectedFunctionHits\n      }\n    });\n    expect(await step.run(context)).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be effective and only target function from -f option","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":185,"column":65,"index":5896},"line":185,"code":"  it('Should be effective and only target function from -f option', async () => {\n    const functionExistResponse = {\n      total: expectedFunctionCount,\n      hits: expectedFunctionHits\n    };\n    const checkInstrumentationResponse = {\n      total: 0,\n      hits: []\n    };\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {\n        function: expectedServiceFunctionNames[0]\n      },\n      org: {\n        orgId: fakeOrgId\n      },\n      serverless: {\n        service: {\n          provider: {\n            region: fakeRegion\n          },\n          setFunctionNames: () => {},\n          getFunction: name => ({\n            name\n          }),\n          getAllFunctionsNames: () => []\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.true;\n    expect(context.targetInstrumentations.length).to.equal(1);\n    expect(context.consoleDevModeTargetFunctions.length).to.equal(1);\n\n    // Re-proxyquire step so we can update the response to the checkInstrumentation call\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse: {\n        total: expectedFunctionCount,\n        hits: expectedFunctionHits\n      }\n    });\n    expect(await step.run(context)).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be effective and update 50 functions at a time","suites":["test/unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js"],"updatePoint":{"line":233,"column":59,"index":7216},"line":233,"code":"  it('Should be effective and update 50 functions at a time', async () => {\n    expectedFunctionHits = new Array(100).fill(0).map((_, i) => ({\n      aws_lambda_name: `function${i + 1}`\n    }));\n    expectedFunctionCount = expectedFunctionHits.length;\n    expectedServiceFunctionNames = expectedFunctionHits.map(hit => hit.aws_lambda_name);\n    const functionExistResponse = {\n      total: expectedFunctionCount,\n      hits: expectedFunctionHits\n    };\n    const checkInstrumentationResponse = {\n      total: 0,\n      hits: []\n    };\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse\n    });\n    const context = {\n      isConsoleDevMode: true,\n      options: {},\n      org: {\n        orgId: fakeOrgId\n      },\n      serverless: {\n        service: {\n          provider: {\n            region: fakeRegion\n          },\n          setFunctionNames: () => {},\n          getFunction: () => ({}),\n          getAllFunctionsNames: () => expectedServiceFunctionNames\n        }\n      }\n    };\n    expect(await step.isApplicable(context)).to.be.true;\n    expect(context.targetInstrumentations.length).to.equal(expectedFunctionCount);\n    expect(context.consoleDevModeTargetFunctions.length).to.equal(expectedFunctionCount);\n\n    // Re-proxyquire step so we can update the response to the checkInstrumentation call\n    configureStep({\n      functionExistResponse,\n      checkInstrumentationResponse: {\n        total: expectedFunctionCount,\n        hits: expectedFunctionHits\n      }\n    });\n    expect(await step.run(context)).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/console-enable-dev-mode.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not in console context","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":25,"column":56,"index":924},"line":25,"code":"  it('Should be ineffective, when not in console context', async () => {\n    const context = {\n      isConsole: false\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NON_CONSOLE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when logged in","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":32,"column":43,"index":1179},"line":32,"code":"  it('Should be ineffective, when logged in', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      isConsole: true,\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      initial: {},\n      inquirer\n    };\n    expect(await overrideCwd(serviceDir, async () => requireUncached(async () => require('../../../../../lib/cli/interactive-setup/console-login').isApplicable(context)))).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('ALREADY_LOGGED_IN');\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should login when user decides to login/register","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":51,"column":54,"index":1882},"line":51,"code":"  it('Should login when user decides to login/register', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldLoginOrRegister: true\n      }\n    });\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/console-login', {\n      '../../../lib/commands/login/console': loginStub\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs14.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      initial: {},\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldLoginOrRegister', true]]));\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should login and skip question when user providers `org` option","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":80,"column":69,"index":2765},"line":80,"code":"  it('Should login and skip question when user providers `org` option', async () => {\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/console-login', {\n      '../../../lib/commands/login/console': loginStub\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs14.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {\n        org: 'someorg',\n        console: true\n      },\n      initial: {},\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should login and skip question when `org` configured","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":104,"column":58,"index":3451},"line":104,"code":"  it('Should login and skip question when `org` configured', async () => {\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/console-login', {\n      '../../../lib/commands/login/console': loginStub\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        org: 'someorg',\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs14.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      initial: {},\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should not login when user decides not to login/register","suites":["test/unit/lib/cli/interactive-setup/console-login.test.js"],"updatePoint":{"line":128,"column":62,"index":4141},"line":128,"code":"  it('Should not login when user decides not to login/register', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldLoginOrRegister: false\n      }\n    });\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/console-login', {\n      '../../../lib/commands/login/console': loginStub\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      initial: {},\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.called).to.be.false;\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldLoginOrRegister', false]]));\n  });","file":"unit/lib/cli/interactive-setup/console-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when --console not passed","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js"],"updatePoint":{"line":49,"column":54,"index":1543},"line":49,"code":"  it('Should be ineffective, when --console not passed', async () => {\n    const context = {\n      initial: {},\n      options: {}\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NON_CONSOLE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not logged in","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js"],"updatePoint":{"line":57,"column":47,"index":1816},"line":57,"code":"  it('Should be ineffective, when not logged in', async () => {\n    const context = {\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer\n    };\n    authMode = null;\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_LOGGED_IN');\n  });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when no orgs are resolved","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js"],"updatePoint":{"line":70,"column":54,"index":2183},"line":70,"code":"  it('Should be ineffective, when no orgs are resolved', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer\n    };\n    await overrideCwd(serviceDir, async () => {\n      expect(await step.isApplicable(context)).to.be.false;\n    });\n    expect(context.inapplicabilityReasonCode).to.equal('NO_ORGS_AVAILABLE');\n  });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should recognize and skip, when single org is assigned to the account","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js","Monitoring setup"],"updatePoint":{"line":92,"column":77,"index":2875},"line":92,"code":"    it('Should recognize and skip, when single org is assigned to the account', async () => {\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-console-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          console: true\n        },\n        isConsole: true,\n        initial: {},\n        inquirer\n      };\n      mockOrgNames = ['testinteractivecli'];\n      await overrideCwd(serviceDir, async () => {\n        expect(await step.isApplicable(context)).to.be.false;\n      });\n      expect(context.inapplicabilityReasonCode).to.equal('ONLY_ORG');\n      expect(context.org).to.deep.equal({\n        orgName: 'testinteractivecli'\n      });\n    });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should ask for org if passed in one is invalid","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js","Monitoring setup"],"updatePoint":{"line":117,"column":54,"index":3671},"line":117,"code":"    it('Should ask for org if passed in one is invalid', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'testinteractivecli'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-console-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          console: true,\n          org: 'foo'\n        },\n        isConsole: true,\n        initial: {},\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      mockOrgNames = ['testinteractivecli'];\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      expect(Array.from(context.stepHistory.valuesMap())).to.deep.equal(Array.from(new Map([['orgName', '_user_choice_']])));\n      expect(context.org).to.deep.equal({\n        orgName: 'testinteractivecli'\n      });\n    });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for chosen org","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js","Monitoring setup"],"updatePoint":{"line":151,"column":46,"index":4808},"line":151,"code":"    it('Should setup monitoring for chosen org', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'testinteractivecli'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-console-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          console: true\n        },\n        isConsole: true,\n        initial: {},\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      mockOrgNames = ['testinteractivecli', 'someotherorg'];\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_']]));\n      expect(context.org).to.deep.equal({\n        orgName: 'testinteractivecli'\n      });\n    });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for org based on access key","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js","Monitoring setup"],"updatePoint":{"line":184,"column":59,"index":5928},"line":184,"code":"    it('Should setup monitoring for org based on access key', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'fromaccesskey'\n        }\n      });\n      const context = {\n        options: {\n          console: true\n        },\n        isConsole: true,\n        initial: {},\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      authMode = 'org';\n      // TODO: Decide whether that test needs to stay\n      mockOrgNames = ['fromaccesskey'];\n      await overrideEnv({\n        variables: {\n          SLS_ORG_TOKEN: 'token'\n        }\n      }, async () => {\n        expect(await step.isApplicable(context)).to.be.false;\n      });\n      expect(context.inapplicabilityReasonCode).to.equal('ONLY_ORG');\n      expect(context.org).to.deep.equal({\n        orgName: 'fromaccesskey'\n      });\n    });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to skip setting monitoring when selecting org","suites":["test/unit/lib/cli/interactive-setup/console-resolve-org.test.js","Monitoring setup"],"updatePoint":{"line":214,"column":66,"index":6778},"line":214,"code":"    it('Should allow to skip setting monitoring when selecting org', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-console-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          console: true\n        },\n        isConsole: true,\n        initial: {},\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      mockOrgNames = ['testinteractivecli', 'someother'];\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n      expect(context).to.not.have.property('org');\n    });","file":"unit/lib/cli/interactive-setup/console-resolve-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when --console not passed","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":120,"column":54,"index":4108},"line":120,"code":"  it('Should be ineffective, when --console not passed', async () => {\n    const context = {\n      initial: {},\n      options: {}\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NON_CONSOLE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not logged in","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":128,"column":47,"index":4381},"line":128,"code":"  it('Should be ineffective, when not logged in', async () => {\n    const context = {\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer\n    };\n    authMode = null;\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_LOGGED_IN');\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when no org is resolved","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":141,"column":52,"index":4746},"line":141,"code":"  it('Should be ineffective, when no org is resolved', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer\n    };\n    await overrideCwd(serviceDir, async () => {\n      expect(await step.isApplicable(context)).to.be.false;\n    });\n    expect(context.inapplicabilityReasonCode).to.equal('UNRESOLVED_ORG');\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when logged in account is already integrated","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":162,"column":73,"index":5392},"line":162,"code":"  it('Should be ineffective, when logged in account is already integrated', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer,\n      org: {\n        orgId: 'integrated'\n      },\n      awsAccountId: '12345'\n    };\n    await overrideCwd(serviceDir, async () => {\n      expect(await step.isApplicable(context)).to.be.false;\n    });\n    expect(context.inapplicabilityReasonCode).to.equal('INTEGRATED');\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when CF stack of given name is already deployed","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":187,"column":76,"index":6116},"line":187,"code":"  it('Should be ineffective, when CF stack of given name is already deployed', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer,\n      org: {\n        orgId: 'tobeintegrated'\n      },\n      awsAccountId: '12345'\n    };\n    stackAlreadyExists = true;\n    await overrideCwd(serviceDir, async () => {\n      expect(await step.isApplicable(context)).to.be.false;\n    });\n    expect(context.inapplicabilityReasonCode).to.equal('AWS_ACCOUNT_ALREADY_INTEGRATED');\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should setup integration","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":213,"column":30,"index":6849},"line":213,"code":"  it('Should setup integration', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldSetupConsoleIamRole: true\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer,\n      org: {\n        orgId: 'tobeintegrated'\n      },\n      awsAccountId: '12345',\n      stepHistory: new StepHistory()\n    };\n    await overrideCwd(serviceDir, async () => {\n      const stepData = await step.isApplicable(context);\n      if (!stepData) throw new Error('Step resolved as not applicable');\n      const deferredRun = step.run(context, stepData);\n      await wait(1000);\n      isIntegrated = true;\n      expect(await deferredRun).to.be.true;\n    });\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should abort gently if CF deployment fails","suites":["test/unit/lib/cli/interactive-setup/console-setup-iam-role.test.js"],"updatePoint":{"line":248,"column":48,"index":7848},"line":248,"code":"  it('Should abort gently if CF deployment fails', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldSetupConsoleIamRole: true\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-console-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {\n        console: true\n      },\n      isConsole: true,\n      initial: {},\n      inquirer,\n      org: {\n        orgId: 'tobeintegrated'\n      },\n      awsAccountId: '12345',\n      stepHistory: new StepHistory()\n    };\n    await overrideCwd(serviceDir, async () => {\n      const stepData = await step.isApplicable(context);\n      if (!stepData) throw new Error('Step resolved as not applicable');\n      stackCreationOutcome = 'failure';\n      expect(await step.run(context, stepData)).to.be.false;\n    });\n  });","file":"unit/lib/cli/interactive-setup/console-setup-iam-role.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":41,"column":53,"index":1415},"line":41,"code":"  it('Should be ineffective, when not at service path', async () => {\n    const context = {\n      options: {},\n      isDashboard: true\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_IN_SERVICE_DIRECTORY');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not in dashboard context","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":49,"column":58,"index":1710},"line":49,"code":"  it('Should be ineffective, when not in dashboard context', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {},\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('CONSOLE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at AWS service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":61,"column":57,"index":2114},"line":61,"code":"  it('Should be ineffective, when not at AWS service path', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {},\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NON_AWS_PROVIDER');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at supported runtime service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":74,"column":71,"index":2558},"line":74,"code":"  it('Should be ineffective, when not at supported runtime service path', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'java8'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('UNSUPPORTED_RUNTIME');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when logged in","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":92,"column":43,"index":3064},"line":92,"code":"  it('Should be ineffective, when logged in', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await overrideCwd(serviceDir, async () => await step.isApplicable(context))).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('ALREADY_LOGGED_IN');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should login when user decides to login/register","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":109,"column":54,"index":3648},"line":109,"code":"  it('Should login when user decides to login/register', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldLoginOrRegister: true\n      }\n    });\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/dashboard-login', {\n      '../../../lib/commands/login/dashboard': loginStub,\n      '@serverless/platform-client': {\n        ServerlessSDK: ServerlessSDKMock\n      }\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldLoginOrRegister', true]]));\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should login and skip question when user providers `org` option","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":140,"column":69,"index":4620},"line":140,"code":"  it('Should login and skip question when user providers `org` option', async () => {\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/dashboard-login', {\n      '../../../lib/commands/login/dashboard': loginStub,\n      '@serverless/platform-client': {\n        ServerlessSDK: ServerlessSDKMock\n      }\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {\n        org: 'someorg'\n      },\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should login and skip question when `org` configured","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":167,"column":58,"index":5401},"line":167,"code":"  it('Should login and skip question when `org` configured', async () => {\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/dashboard-login', {\n      '../../../lib/commands/login/dashboard': loginStub,\n      '@serverless/platform-client': {\n        ServerlessSDK: ServerlessSDKMock\n      }\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        org: 'someorg',\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.calledOnce).to.be.true;\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should not login when user decides not to login/register","suites":["test/unit/lib/cli/interactive-setup/dashboard-login.test.js"],"updatePoint":{"line":193,"column":62,"index":6180},"line":193,"code":"  it('Should not login when user decides not to login/register', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldLoginOrRegister: false\n      }\n    });\n    const loginStep = proxyquire('../../../../../lib/cli/interactive-setup/dashboard-login', {\n      '../../../lib/commands/login/dashboard': loginStub,\n      '@serverless/platform-client': {\n        ServerlessSDK: ServerlessSDKMock\n      }\n    });\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await loginStep.run(context);\n    expect(loginStub.called).to.be.false;\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldLoginOrRegister', false]]));\n  });","file":"unit/lib/cli/interactive-setup/dashboard-login.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":102,"column":53,"index":2916},"line":102,"code":"  it('Should be ineffective, when not at service path', async () => {\n    const context = {\n      initial: {},\n      isDashboard: true\n    };\n    expect(await step.isApplicable(context)).to.be.false;\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_IN_SERVICE_DIRECTORY');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not in dashboard context","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":110,"column":58,"index":3211},"line":110,"code":"  it('Should be ineffective, when not in dashboard context', async () => {\n    const context = {\n      initial: {},\n      serviceDir: process.cwd(),\n      configuration: {},\n      configurationFilename: 'serverless.yml',\n      options: {},\n      isDashboard: false,\n      isConsole: false\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('CONSOLE_CONTEXT');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at AWS service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":123,"column":57,"index":3649},"line":123,"code":"  it('Should be ineffective, when not at AWS service path', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {},\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NON_AWS_PROVIDER');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not at supported runtime service path","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":136,"column":71,"index":4093},"line":136,"code":"  it('Should be ineffective, when not at supported runtime service path', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'some-aws-service',\n        provider: {\n          name: 'aws',\n          runtime: 'java8'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('UNSUPPORTED_RUNTIME');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when not logged in","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":155,"column":47,"index":4640},"line":155,"code":"  it('Should be ineffective, when not logged in', async () => {\n    const context = {\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'some-aws-service',\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x'\n        }\n      },\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_LOGGED_IN');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when no orgs are resolved","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":174,"column":54,"index":5193},"line":174,"code":"  it('Should be ineffective, when no orgs are resolved', async () => {\n    const freshStep = proxyquire('../../../../../lib/cli/interactive-setup/dashboard-set-org', {\n      '@serverless/platform-client': {\n        ServerlessSDK: class ServerlessSDK {\n          constructor() {\n            this.metadata = {\n              get: async () => {\n                return {\n                  awsAccountId: '377024778620',\n                  supportedRuntimes: ['nodejs10.x', 'nodejs12.x'],\n                  supportedRegions: ['us-east-1']\n                };\n              }\n            };\n            this.organizations = {\n              list: async () => []\n            };\n          }\n          config() {}\n        }\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    await overrideCwd(serviceDir, async () => {\n      expect(await freshStep.isApplicable(context)).to.be.false;\n    });\n    expect(context.inapplicabilityReasonCode).to.equal('NO_ORGS_AVAILABLE');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be ineffective, when project has monitoring setup with recognized org and app","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":214,"column":90,"index":6484},"line":214,"code":"  it('Should be ineffective, when project has monitoring setup with recognized org and app', async () => {\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-monitored-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer\n    };\n    await overrideCwd(serviceDir, async () => {\n      expect(await step.isApplicable(context)).to.be.false;\n    });\n    expect(await overrideCwd(serviceDir, async () => await step.isApplicable(context))).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('HAS_MONITORING_SETUP');\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should reject an invalid app name","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":234,"column":39,"index":7182},"line":234,"code":"  it('Should reject an invalid app name', async () => {\n    configureInquirerStub(inquirer, {\n      input: {\n        newAppName: 'invalid app name /* Ć */'\n      },\n      list: {\n        orgName: 'testinteractivecli',\n        appName: '_create_'\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await expect(overrideCwd(serviceDir, async () => {\n      const stepData = await step.isApplicable(context);\n      if (!stepData) throw new Error('Step resolved as not applicable');\n      await step.run(context, stepData);\n    })).to.eventually.be.rejected.and.have.property('code', 'INVALID_ANSWER');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_create_'], ['newAppName', undefined]]));\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should recognize an invalid org and allow to opt out","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":265,"column":58,"index":8289},"line":265,"code":"  it('Should recognize an invalid org and allow to opt out', async () => {\n    configureInquirerStub(inquirer, {\n      confirm: {\n        shouldUpdateOrg: false\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-wrongorg-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await overrideCwd(serviceDir, async () => {\n      const stepData = await step.isApplicable(context);\n      if (!stepData) throw new Error('Step resolved as not applicable');\n      await step.run(context, stepData);\n    });\n    expect(context.configuration).to.not.have.property('org');\n    expect(context.configuration).to.not.have.property('app');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldUpdateOrg', false]]));\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should recognize an invalid app and allow to opt out","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js"],"updatePoint":{"line":294,"column":58,"index":9295},"line":294,"code":"  it('Should recognize an invalid app and allow to opt out', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        appUpdateType: '_skip_'\n      }\n    });\n    const {\n      servicePath: serviceDir,\n      serviceConfig: configuration\n    } = await fixtures.setup('aws-loggedin-wrongapp-service');\n    const context = {\n      serviceDir,\n      configuration,\n      configurationFilename: 'serverless.yml',\n      options: {},\n      initial: {},\n      isDashboard: true,\n      inquirer,\n      stepHistory: new StepHistory()\n    };\n    await overrideCwd(serviceDir, async () => {\n      const stepData = await step.isApplicable(context);\n      if (!stepData) throw new Error('Step resolved as not applicable');\n      await step.run(context, stepData);\n    });\n    expect(context.configuration.org).to.equal('testinteractivecli');\n    expect(context.configuration.app).to.equal('not-created-app');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appUpdateType', '_skip_']]));\n  });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for chosen org and app","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup"],"updatePoint":{"line":324,"column":54,"index":10346},"line":324,"code":"    it('Should setup monitoring for chosen org and app', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'testinteractivecli',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for chosen app and org based on access key","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup"],"updatePoint":{"line":357,"column":74,"index":11710},"line":357,"code":"    it('Should setup monitoring for chosen app and org based on access key', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'fromaccesskey',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideEnv({\n        variables: {\n          SERVERLESS_ACCESS_KEY: 'validkey'\n        }\n      }, async () => {\n        await overrideCwd(serviceDir, async () => {\n          const stepData = await step.isApplicable(context);\n          if (!stepData) throw new Error('Step resolved as not applicable');\n          await step.run(context, stepData);\n        });\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('fromaccesskey');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('fromaccesskey');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to skip monitoring when org is resolved from access key","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup"],"updatePoint":{"line":396,"column":76,"index":13205},"line":396,"code":"    it('Should allow to skip monitoring when org is resolved from access key', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideEnv({\n        variables: {\n          SERVERLESS_ACCESS_KEY: 'validkey'\n        }\n      }, async () => {\n        await overrideCwd(serviceDir, async () => {\n          const stepData = await step.isApplicable(context);\n          if (!stepData) throw new Error('Step resolved as not applicable');\n          await step.run(context, stepData);\n        });\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.be.undefined;\n      expect(serviceConfig.app).to.be.undefined;\n      expect(context.configuration.org).to.be.undefined;\n      expect(context.configuration.app).to.be.undefined;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to skip setting monitoring when selecting org","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup"],"updatePoint":{"line":434,"column":66,"index":14582},"line":434,"code":"    it('Should allow to skip setting monitoring when selecting org', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.be.undefined;\n      expect(serviceConfig.app).to.be.undefined;\n      expect(context.configuration.org).to.be.undefined;\n      expect(context.configuration.app).to.be.undefined;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should not automatically pre choose single available org if login/register step was not presented","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when only one org available"],"updatePoint":{"line":482,"column":105,"index":16234},"line":482,"code":"    it('Should not automatically pre choose single available org if login/register step was not presented', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.be.undefined;\n      expect(serviceConfig.app).to.be.undefined;\n      expect(context.configuration.org).to.be.undefined;\n      expect(context.configuration.app).to.be.undefined;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should not automatically pre choose single available org if context history is not available","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when only one org available"],"updatePoint":{"line":514,"column":100,"index":17501},"line":514,"code":"    it('Should not automatically pre choose single available org if context history is not available', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.be.undefined;\n      expect(serviceConfig.app).to.be.undefined;\n      expect(context.configuration.org).to.be.undefined;\n      expect(context.configuration.app).to.be.undefined;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should not automatically pre choose single available org if login/register step was presented but service step was not","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when only one org available"],"updatePoint":{"line":546,"column":126,"index":18794},"line":546,"code":"    it('Should not automatically pre choose single available org if login/register step was presented but service step was not', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: '_skip_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map([['dashboardLogin', []]]),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.be.undefined;\n      expect(serviceConfig.app).to.be.undefined;\n      expect(context.configuration.org).to.be.undefined;\n      expect(context.configuration.app).to.be.undefined;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_skip_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring with the only available org if login/register and service steps were presented","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when only one org available"],"updatePoint":{"line":579,"column":110,"index":20123},"line":579,"code":"    it('Should setup monitoring with the only available org if login/register and service steps were presented', async () => {\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {},\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map([['dashboardLogin', []], ['service', []]]),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('orgwithoutapps');\n      expect(serviceConfig.app).to.equal(configuration.service);\n      expect(context.configuration.org).to.equal('orgwithoutapps');\n      expect(context.configuration.app).to.equal(configuration.service);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map());\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for chosen org and app","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":609,"column":54,"index":21400},"line":609,"code":"    it('Should setup monitoring for chosen org and app', async () => {\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'testinteractivecli',\n          app: 'other-app'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map());\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should setup monitoring for chosen org and app even if already configured","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":640,"column":81,"index":22664},"line":640,"code":"    it('Should setup monitoring for chosen org and app even if already configured', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldOverrideDashboardConfig: true\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-monitored-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'otherorg',\n          app: 'app-from-flag'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('otherorg');\n      expect(serviceConfig.app).to.equal('app-from-flag');\n      expect(context.configuration.org).to.equal('otherorg');\n      expect(context.configuration.app).to.equal('app-from-flag');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldOverrideDashboardConfig', true]]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should not setup monitoring for chosen org and app even if already configured if rejected","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":676,"column":97,"index":24102},"line":676,"code":"    it('Should not setup monitoring for chosen org and app even if already configured if rejected', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldOverrideDashboardConfig: false\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-monitored-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'otherorg',\n          app: 'app-from-flag'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      expect(context.configuration).to.not.have.property('org');\n      expect(context.configuration).to.not.have.property('app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldOverrideDashboardConfig', false]]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should ask for org if passed in one is invalid","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":709,"column":54,"index":25284},"line":709,"code":"    it('Should ask for org if passed in one is invalid', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'testinteractivecli',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'invalid-testinteractivecli',\n          app: 'irrelevant'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should ask for org if passed in one is invalid and there is a valid on in config","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":746,"column":88,"index":26772},"line":746,"code":"    it('Should ask for org if passed in one is invalid and there is a valid on in config', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldOverrideDashboardConfig: true\n        },\n        list: {\n          orgName: 'otherorg',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-monitored-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'invalid-testinteractivecli',\n          app: 'irrelevant'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('otherorg');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('otherorg');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_user_choice_'], ['shouldOverrideDashboardConfig', true]]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should ask for app if passed in one is invalid and there is a valid on in config","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":786,"column":88,"index":28357},"line":786,"code":"    it('Should ask for app if passed in one is invalid and there is a valid on in config', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldOverrideDashboardConfig: true\n        },\n        list: {\n          orgName: 'testinteractivecli',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-monitored-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'invalid-testinteractivecli',\n          app: 'irrelevant'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_user_choice_'], ['shouldOverrideDashboardConfig', true]]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should ask for app if passed in one is invalid","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":826,"column":54,"index":29938},"line":826,"code":"    it('Should ask for app if passed in one is invalid', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          orgName: 'testinteractivecli',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        options: {\n          org: 'testinteractivecli',\n          app: 'invalid'\n        },\n        initial: {},\n        isDashboard: true,\n        inquirer,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should create new app when requested, and setup monitoring with it","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup from CLI flags"],"updatePoint":{"line":863,"column":74,"index":31371},"line":863,"code":"    it('Should create new app when requested, and setup monitoring with it', async () => {\n      configureInquirerStub(inquirer, {\n        input: {\n          newAppName: 'frominput'\n        },\n        list: {\n          orgName: 'testinteractivecli',\n          appName: '_create_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('frominput');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('frominput');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['orgName', '_user_choice_'], ['appName', '_create_'], ['newAppName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should provide a way to setup monitoring with an invalid org setting","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when invalid org"],"updatePoint":{"line":902,"column":76,"index":32915},"line":902,"code":"    it('Should provide a way to setup monitoring with an invalid org setting', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldUpdateOrg: true\n        },\n        list: {\n          orgName: 'testinteractivecli',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-wrongorg-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldUpdateOrg', true], ['orgName', '_user_choice_'], ['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to setup app","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when no app"],"updatePoint":{"line":941,"column":33,"index":34421},"line":941,"code":"    it('Should allow to setup app', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-noapp-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to setup app","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when no app with --app flag"],"updatePoint":{"line":976,"column":33,"index":35780},"line":976,"code":"    it('Should allow to setup app', async () => {\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-noapp-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {\n          app: 'app-from-flag'\n        },\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('app-from-flag');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('app-from-flag');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map());\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should create a default app if no apps exist","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when no app with --app flag"],"updatePoint":{"line":1006,"column":52,"index":36996},"line":1006,"code":"    it('Should create a default app if no apps exist', async () => {\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-noapp-service', {\n        configExt: {\n          org: 'orgwithoutapps'\n        }\n      });\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('orgwithoutapps');\n      expect(serviceConfig.app).to.equal(configuration.service);\n      expect(context.configuration.org).to.equal('orgwithoutapps');\n      expect(context.configuration.app).to.equal(configuration.service);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map());\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should allow to setup app when app is invalid","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when no app with --app flag"],"updatePoint":{"line":1038,"column":53,"index":38251},"line":1038,"code":"    it('Should allow to setup app when app is invalid', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-noapp-service');\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {\n          app: 'invalid-app-from-flag'\n        },\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should recognize an invalid app and allow to create it","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when invalid app"],"updatePoint":{"line":1075,"column":62,"index":39676},"line":1075,"code":"    it('Should recognize an invalid app and allow to create it', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          appUpdateType: '_create_'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service', {\n        configExt: {\n          org: 'testinteractivecli',\n          app: 'not-created-app'\n        }\n      });\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('not-created-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('not-created-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appUpdateType', '_create_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should recognize an invalid app and allow to replace it with existing one","suites":["test/unit/lib/cli/interactive-setup/dashboard-set-org.test.js","Monitoring setup when invalid app"],"updatePoint":{"line":1113,"column":81,"index":41134},"line":1113,"code":"    it('Should recognize an invalid app and allow to replace it with existing one', async () => {\n      configureInquirerStub(inquirer, {\n        list: {\n          appUpdateType: '_choose_existing_',\n          appName: 'other-app'\n        }\n      });\n      const {\n        servicePath: serviceDir,\n        serviceConfig: configuration\n      } = await fixtures.setup('aws-loggedin-service', {\n        configExt: {\n          org: 'testinteractivecli',\n          app: 'not-created-app'\n        }\n      });\n      const context = {\n        serviceDir,\n        configuration,\n        configurationFilename: 'serverless.yml',\n        inquirer,\n        options: {},\n        initial: {},\n        isDashboard: true,\n        history: new Map(),\n        stepHistory: new StepHistory()\n      };\n      await overrideCwd(serviceDir, async () => {\n        const stepData = await step.isApplicable(context);\n        if (!stepData) throw new Error('Step resolved as not applicable');\n        await step.run(context, stepData);\n      });\n      const serviceConfig = yaml.load(String(await fsp.readFile(join(serviceDir, 'serverless.yml'))));\n      expect(serviceConfig.org).to.equal('testinteractivecli');\n      expect(serviceConfig.app).to.equal('other-app');\n      expect(context.configuration.org).to.equal('testinteractivecli');\n      expect(context.configuration.app).to.equal('other-app');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['appUpdateType', '_choose_existing_'], ['appName', '_user_choice_']]));\n    });","file":"unit/lib/cli/interactive-setup/dashboard-set-org.test.js","skipped":false,"dir":"test"},{"name":"Should be not applied, when not at service path","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":19,"column":53,"index":680},"line":19,"code":"  it('Should be not applied, when not at service path', async () => {\n    const context = {\n      options: {}\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NOT_IN_SERVICE_DIRECTORY');\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be not applied, when service is not configured with AWS provider","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":26,"column":77,"index":973},"line":26,"code":"  it('Should be not applied, when service is not configured with AWS provider', async () => {\n    const context = {\n      configuration: {\n        provider: {\n          name: 'notaws'\n        }\n      },\n      serviceDir: '/foo',\n      options: {},\n      isOnboarding: true,\n      history: new Map([['service', []]])\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('NON_AWS_PROVIDER');\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be not applied, when service is not in onboarding context","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":41,"column":70,"index":1433},"line":41,"code":"  it('Should be not applied, when service is not in onboarding context', async () => {\n    const context = {\n      configuration: {\n        provider: {\n          name: 'aws'\n        }\n      },\n      serviceDir: '/foo',\n      options: {},\n      isOnboarding: false,\n      history: new Map([['awsCredentials', []]]),\n      initial: {\n        isInServiceContext: true\n      }\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('CONSOLE_INTEGRATION');\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be not applied, when in console context","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":59,"column":52,"index":1942},"line":59,"code":"  it('Should be not applied, when in console context', async () => {\n    const context = {\n      configuration: {\n        provider: {\n          name: 'aws'\n        }\n      },\n      serviceDir: '/foo',\n      options: {},\n      isOnboarding: true,\n      isConsole: true,\n      history: new Map([['awsCredentials', []]]),\n      initial: {\n        isInServiceContext: true\n      }\n    };\n    expect(await step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('CONSOLE_INTEGRATION');\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be applied if user configured local credentials","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":78,"column":60,"index":2481},"line":78,"code":"  it('Should be applied if user configured local credentials', async () => {\n    await overrideEnv({\n      variables: {\n        AWS_ACCESS_KEY_ID: 'somekey',\n        AWS_SECRET_ACCESS_KEY: 'somesecret'\n      }\n    }, async () => {\n      expect(await step.isApplicable({\n        configuration: {\n          provider: {\n            name: 'aws'\n          }\n        },\n        serviceDir: '/foo',\n        options: {},\n        isOnboarding: true,\n        history: new Map([['awsCredentials', []]])\n      })).to.equal(true);\n    });\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be applied if service instance has a linked provider","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":98,"column":65,"index":3018},"line":98,"code":"  it('Should be applied if service instance has a linked provider', async () => {\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n      './utils': {\n        doesServiceInstanceHaveLinkedProvider: () => true\n      }\n    });\n    expect(await mockedStep.isApplicable({\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp'\n      },\n      serviceDir: '/foo',\n      options: {},\n      isOnboarding: true,\n      history: new Map([['awsCredentials', []]])\n    })).to.equal(true);\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"Should be applied if service instance has a linked provider but disabled dashboard monitoring","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js"],"updatePoint":{"line":119,"column":99,"index":3710},"line":119,"code":"  it('Should be applied if service instance has a linked provider but disabled dashboard monitoring', async () => {\n    const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n      '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n      './utils': {\n        doesServiceInstanceHaveLinkedProvider: () => true\n      }\n    });\n    expect(await mockedStep.isApplicable({\n      configuration: {\n        provider: {\n          name: 'aws'\n        },\n        org: 'someorg',\n        app: 'someapp',\n        dashboard: {\n          disableMonitoring: true\n        }\n      },\n      serviceDir: '/foo',\n      options: {},\n      isOnboarding: true,\n      history: new Map([['awsCredentials', []]])\n    })).to.equal(true);\n  });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle skipping deployment for new service not configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":144,"column":97,"index":4492},"line":144,"code":"    it('should correctly handle skipping deployment for new service not configured with dashboard', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: false\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: false\n        },\n        isOnboarding: true\n      };\n      await step.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', false]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle skipping deployment for existing service not configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":169,"column":102,"index":5262},"line":169,"code":"    it('should correctly handle skipping deployment for existing service not configured with dashboard', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: false\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: true\n        },\n        isOnboarding: true\n      };\n      await step.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', false]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle skipping deployment for new service configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":194,"column":93,"index":6022},"line":194,"code":"    it('should correctly handle skipping deployment for new service configured with dashboard', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: false\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: false\n        },\n        isOnboarding: true\n      };\n      await step.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', false]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle skipping deployment for existing service configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":221,"column":98,"index":6840},"line":221,"code":"    it('should correctly handle skipping deployment for existing service configured with dashboard', async () => {\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: false\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: true\n        },\n        isOnboarding: true\n      };\n      await step.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', false]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle deployment for new service configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":248,"column":84,"index":7643},"line":248,"code":"    it('should correctly handle deployment for new service configured with dashboard', async () => {\n      const mockedInit = sinon.stub().resolves();\n      const mockedRun = sinon.stub().resolves();\n      class MockedServerless {\n        constructor() {\n          this.init = mockedInit;\n          this.run = mockedRun;\n          this.pluginManager = {\n            addPlugin: () => ({}),\n            plugins: [{\n              constructor: {\n                name: 'InteractiveDeployProgress'\n              },\n              progress: {}\n            }],\n            dashboardPlugin: {}\n          };\n        }\n      }\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n        '../../serverless': MockedServerless,\n        '@serverless/dashboard-plugin/lib/dashboard': {\n          getDashboardInteractUrl: () => 'https://app.serverless-dev.com/path/to/dashboard'\n        }\n      });\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: true\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: false\n        },\n        isOnboarding: true\n      };\n      await mockedStep.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', true]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle deployment for existing service configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":299,"column":89,"index":9273},"line":299,"code":"    it('should correctly handle deployment for existing service configured with dashboard', async () => {\n      const mockedInit = sinon.stub().resolves();\n      const mockedRun = sinon.stub().resolves();\n      class MockedServerless {\n        constructor() {\n          this.init = mockedInit;\n          this.run = mockedRun;\n          this.pluginManager = {\n            addPlugin: () => ({}),\n            plugins: [{\n              constructor: {\n                name: 'InteractiveDeployProgress'\n              },\n              progress: {}\n            }],\n            dashboardPlugin: {}\n          };\n        }\n      }\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n        '../../serverless': MockedServerless,\n        '@serverless/dashboard-plugin/lib/dashboard': {\n          getDashboardInteractUrl: () => 'https://app.serverless-dev.com/path/to/dashboard'\n        }\n      });\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: true\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          },\n          org: 'someorg',\n          app: 'someapp'\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: true\n        },\n        isOnboarding: true\n      };\n      await mockedStep.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', true]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle deployment for new service not configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":350,"column":88,"index":10901},"line":350,"code":"    it('should correctly handle deployment for new service not configured with dashboard', async () => {\n      const mockedInit = sinon.stub().resolves();\n      const mockedRun = sinon.stub().resolves();\n      class MockedServerless {\n        constructor() {\n          this.init = mockedInit;\n          this.run = mockedRun;\n          this.pluginManager = {\n            addPlugin: () => ({}),\n            plugins: [{\n              constructor: {\n                name: 'InteractiveDeployProgress'\n              },\n              progress: {}\n            }]\n          };\n        }\n      }\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n        '../../serverless': MockedServerless\n      });\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: true\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: false\n        },\n        isOnboarding: true\n      };\n      await mockedStep.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', true]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle deployment for existing service not configured with dashboard","suites":["test/unit/lib/cli/interactive-setup/deploy.test.js","run"],"updatePoint":{"line":395,"column":93,"index":12291},"line":395,"code":"    it('should correctly handle deployment for existing service not configured with dashboard', async () => {\n      const mockedInit = sinon.stub().resolves();\n      const mockedRun = sinon.stub().resolves();\n      class MockedServerless {\n        constructor() {\n          this.init = mockedInit;\n          this.run = mockedRun;\n          this.pluginManager = {\n            addPlugin: () => ({}),\n            plugins: [{\n              constructor: {\n                name: 'InteractiveDeployProgress'\n              },\n              progress: {}\n            }]\n          };\n        }\n      }\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/deploy', {\n        '../../serverless': MockedServerless\n      });\n      configureInquirerStub(inquirer, {\n        confirm: {\n          shouldDeploy: true\n        }\n      });\n      const context = {\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'someservice',\n          provider: {\n            name: 'aws'\n          }\n        },\n        configurationFilename: 'serverless.yml',\n        stepHistory: new StepHistory(),\n        history: new Map(),\n        initial: {\n          isInServiceContext: true\n        },\n        isOnboarding: true\n      };\n      await mockedStep.run(context);\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['shouldDeploy', true]]));\n    });","file":"unit/lib/cli/interactive-setup/deploy.test.js","skipped":false,"dir":"test"},{"name":"should configure interactive setup flow","suites":["test/unit/lib/cli/interactive-setup/index.test.js"],"updatePoint":{"line":10,"column":45,"index":457},"line":10,"code":"  it('should configure interactive setup flow', async () => {\n    const slsProcessPromise = spawn('node', [serverlessPath, '--template-path', path.join(fixturesPath, 'aws')], {\n      env: {\n        ...process.env,\n        SLS_INTERACTIVE_SETUP_ENABLE: '1',\n        SLS_INTERACTIVE_SETUP_TEST: '1',\n        BROWSER: 'none'\n      }\n    });\n    const slsProcess = slsProcessPromise.child;\n    let output = '';\n    const program = [\n    // service\n    {\n      instructionString: 'What do you want to call this project?',\n      input: 'interactive-setup-test'\n    },\n    // dashboard-login\n    {\n      instructionString: 'Do you want to login/register to Serverless Dashboard?',\n      input: 'n' // Move cursor down by one line\n    },\n    // aws-credentials\n    {\n      instructionString: 'No AWS credentials found, what credentials do you want to use?'\n    }, {\n      instructionString: 'AWS account',\n      input: 'Y'\n    }, {\n      instructionString: 'press [Enter]'\n    }, {\n      instructionString: 'AWS Access Key Id',\n      input: 'AKIAIOSFODNN7EXAMPLE'\n    }, {\n      instructionString: 'AWS Secret Access Key',\n      input: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n    },\n    // deploy\n    {\n      instructionString: 'Do you want to deploy now?',\n      input: 'n'\n    }];\n    slsProcess.stdout.on('data', data => {\n      output += data;\n      const programItem = program[0];\n      if (!programItem) return;\n      if (output.includes(programItem.instructionString)) {\n        program.shift();\n        output = '';\n        slsProcess.stdin.write(`${programItem.input || ''}\\n`);\n      }\n    });\n    slsProcess.stdout.pipe(process.stdout);\n    slsProcess.stderr.pipe(process.stderr);\n    await slsProcessPromise;\n  });","file":"unit/lib/cli/interactive-setup/index.test.js","skipped":false,"dir":"test"},{"name":"Should be not applied, when at service path","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":26,"column":49,"index":990},"line":26,"code":"  it('Should be not applied, when at service path', () => {\n    const context = {\n      serviceDir: '/foo',\n      options: {}\n    };\n    expect(step.isApplicable(context)).to.equal(false);\n    expect(context.inapplicabilityReasonCode).to.equal('IN_SERVICE_DIRECTORY');\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should be applied, when not at service path","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":34,"column":49,"index":1265},"line":34,"code":"  it('Should be applied, when not at service path', () => {\n    const context = {\n      options: {}\n    };\n    expect(step.isApplicable(context)).to.equal(true);\n    expect(context.inapplicabilityReasonCode).to.be.undefined;\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should result in an error when at service path with `template-path` options provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":41,"column":90,"index":1537},"line":41,"code":"  it('Should result in an error when at service path with `template-path` options provided', () => {\n    expect(() => step.isApplicable({\n      serviceDir: '/foo',\n      options: {\n        'template-path': 'path/to/template'\n      }\n    })).to.throw().and.have.property('code', 'NOT_APPLICABLE_SERVICE_OPTIONS');\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should result in an error when at service path with `template` option provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":49,"column":84,"index":1850},"line":49,"code":"  it('Should result in an error when at service path with `template` option provided', () => {\n    expect(() => step.isApplicable({\n      serviceDir: '/foo',\n      options: {\n        template: 'test-template'\n      }\n    })).to.throw().and.have.property('code', 'NOT_APPLICABLE_SERVICE_OPTIONS');\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should result in an error when at service path with `template-url` option provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":57,"column":88,"index":2157},"line":57,"code":"  it('Should result in an error when at service path with `template-url` option provided', () => {\n    expect(() => step.isApplicable({\n      serviceDir: '/foo',\n      options: {\n        'template-url': 'test-template'\n      }\n    })).to.throw().and.have.property('code', 'NOT_APPLICABLE_SERVICE_OPTIONS');\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should abort if user choses 'other' template","suites":["test/unit/lib/cli/interactive-setup/service.test.js"],"updatePoint":{"line":65,"column":50,"index":2432},"line":65,"code":"  it(\"Should abort if user choses 'other' template\", async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        projectType: 'other'\n      }\n    });\n    const context = {\n      options: {},\n      stepHistory: new StepHistory()\n    };\n    await step.run(context);\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'other']]));\n    return confirmEmptyWorkingDir();\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should create project at not existing directory","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":80,"column":55,"index":2895},"line":80,"code":"    it('Should create project at not existing directory', async () => {\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            await fsp.mkdir(projectName);\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        },\n        input: {\n          projectName: 'test-project'\n        }\n      });\n      const context = {\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(downloadTemplateFromRepoStub).to.have.been.calledWith('https://github.com/serverless/examples/tree/v3/aws-node', 'aws-node', 'test-project');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should remove `serverless.template.yml` if its a part of the template","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":113,"column":77,"index":4331},"line":113,"code":"    it('Should remove `serverless.template.yml` if its a part of the template', async () => {\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            await fsp.mkdir(projectName);\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n            await fsp.writeFile(path.join(projectName, 'serverless.template.yml'), '');\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        },\n        input: {\n          projectName: 'test-project-template'\n        }\n      });\n      const context = {\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project-template/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(downloadTemplateFromRepoStub).to.have.been.calledWith('https://github.com/serverless/examples/tree/v3/aws-node', 'aws-node', 'test-project-template');\n      await expect(fsp.lstat('test-proejct-template/serverless.template.yml')).to.eventually.be.rejected.and.have.property('code', 'ENOENT');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should run `npm install` if `package.json` present","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":148,"column":58,"index":6005},"line":148,"code":"    it('Should run `npm install` if `package.json` present', async () => {\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const spawnStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        'child-process-ext/spawn': spawnStub,\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            await fsp.mkdir(projectName);\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n            await fsp.writeFile(path.join(projectName, 'package.json'), '{}');\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        },\n        input: {\n          projectName: 'test-project-package-json'\n        }\n      });\n      const context = {\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project-package-json/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(downloadTemplateFromRepoStub).to.have.been.calledWith('https://github.com/serverless/examples/tree/v3/aws-node', 'aws-node', 'test-project-package-json');\n      expect(spawnStub).to.have.been.calledWith('npm', ['install'], {\n        cwd: path.join(process.cwd(), 'test-project-package-json')\n      });\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should emit warning if npm installation not found","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":187,"column":57,"index":7770},"line":187,"code":"    it('Should emit warning if npm installation not found', async () => {\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        'child-process-ext/spawn': sinon.stub().rejects({\n          message: 'Error message'\n        }),\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            await fsp.mkdir(projectName);\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n            await fsp.writeFile(path.join(projectName, 'package.json'), '{}');\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        },\n        input: {\n          projectName: 'test-project-failed-install'\n        }\n      });\n      const context = {\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await expect(mockedStep.run(context)).to.be.eventually.rejected.and.have.property('code', 'DEPENDENCIES_INSTALL_FAILED');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should create project at not existing directory from a provided `template-path`","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":221,"column":87,"index":9242},"line":221,"code":"    it('Should create project at not existing directory from a provided `template-path`', async () => {\n      configureInquirerStub(inquirer, {\n        input: {\n          projectName: 'test-project-from-local-template'\n        }\n      });\n      const context = {\n        options: {\n          'template-path': path.join(fixturesPath, 'aws')\n        },\n        stepHistory: new StepHistory()\n      };\n      await step.run(context);\n      const stats = await fsp.lstat('test-project-from-local-template/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should create project at not existing directory with provided `name`","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":238,"column":76,"index":9903},"line":238,"code":"    it('Should create project at not existing directory with provided `name`', async () => {\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: sinon.stub().callsFake(async (templateUrl, projectType, projectName) => {\n            await fsp.mkdir(projectName);\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        }\n      });\n      const context = {\n        options: {\n          name: 'test-project-from-cli-option'\n        },\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project-from-cli-option/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should create project at not existing directory with provided template","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":268,"column":78,"index":11085},"line":268,"code":"    it('Should create project at not existing directory with provided template', async () => {\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.mkdir(projectName);\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        input: {\n          projectName: 'test-project-from-provided-template'\n        }\n      });\n      const context = {\n        options: {\n          template: 'test-template'\n        },\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project-from-provided-template/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(downloadTemplateFromRepoStub).to.have.been.calledWith('https://github.com/serverless/examples/tree/v3/test-template', 'test-template', 'test-project-from-provided-template');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should create project at not existing directory with provided `template-url`","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":300,"column":84,"index":12562},"line":300,"code":"    it('Should create project at not existing directory with provided `template-url`', async () => {\n      const providedTemplateUrl = 'https://github.com/serverless/examples/tree/v3/test-template';\n      const downloadTemplateFromRepoStub = sinon.stub();\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: downloadTemplateFromRepoStub.callsFake(async (templateUrl, projectType, projectName) => {\n            const serverlessYmlContent = `\n            service: service\n            provider:\n              name: aws\n           `;\n            await fsp.mkdir(projectName);\n            await fsp.writeFile(path.join(projectName, 'serverless.yml'), serverlessYmlContent);\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        input: {\n          projectName: 'test-project-from-provided-template-url'\n        }\n      });\n      const context = {\n        options: {\n          'template-url': providedTemplateUrl\n        },\n        stepHistory: new StepHistory()\n      };\n      await mockedStep.run(context);\n      const stats = await fsp.lstat('test-project-from-provided-template-url/serverless.yml');\n      expect(stats.isFile()).to.be.true;\n      expect(downloadTemplateFromRepoStub).to.have.been.calledWith(providedTemplateUrl, null, 'test-project-from-provided-template-url');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error when template cannot be downloaded","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":333,"column":64,"index":14085},"line":333,"code":"    it('Should throw an error when template cannot be downloaded', async () => {\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: sinon.stub().callsFake(async () => {\n            throw new ServerlessError();\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        list: {\n          projectType: 'aws-node'\n        },\n        input: {\n          projectName: 'test-error-during-download'\n        }\n      });\n      const context = {\n        options: {},\n        stepHistory: new StepHistory()\n      };\n      await expect(mockedStep.run(context)).to.be.eventually.rejected.and.have.property('code', 'TEMPLATE_DOWNLOAD_FAILED');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error when provided template cannot be found","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":356,"column":68,"index":15010},"line":356,"code":"    it('Should throw an error when provided template cannot be found', async () => {\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: sinon.stub().rejects({\n            code: 'ENOENT'\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        input: {\n          projectName: 'test-error-during-download'\n        }\n      });\n      const context = {\n        options: {\n          template: 'test-template'\n        },\n        stepHistory: new StepHistory()\n      };\n      await expect(mockedStep.run(context)).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error when template provided with url cannot be found","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":378,"column":77,"index":15863},"line":378,"code":"    it('Should throw an error when template provided with url cannot be found', async () => {\n      const mockedStep = proxyquire('../../../../../lib/cli/interactive-setup/service', {\n        '../../utils/download-template-from-repo': {\n          downloadTemplateFromRepo: sinon.stub().callsFake(async () => {\n            throw new ServerlessError();\n          })\n        }\n      });\n      configureInquirerStub(inquirer, {\n        input: {\n          projectName: 'test-error-during-download-custom-template'\n        }\n      });\n      const context = {\n        options: {\n          'template-url': 'test-template-url'\n        },\n        stepHistory: new StepHistory()\n      };\n      await expect(mockedStep.run(context)).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE_URL');\n      expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectName', '_user_input_']]));\n    });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should not allow project creation in a directory in which already service is configured","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":401,"column":93,"index":16796},"line":401,"code":"  it('Should not allow project creation in a directory in which already service is configured', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        projectType: 'aws-node'\n      },\n      input: {\n        projectName: 'existing'\n      }\n    });\n    await fsp.mkdir('existing');\n    const context = {\n      options: {},\n      stepHistory: new StepHistory()\n    };\n    await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'INVALID_ANSWER');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', undefined]]));\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should not allow project creation in a directory in which already service is configured when `name` flag provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":418,"column":119,"index":17446},"line":418,"code":"  it('Should not allow project creation in a directory in which already service is configured when `name` flag provided', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        projectType: 'aws-node'\n      }\n    });\n    await fsp.mkdir('anotherexisting');\n    const context = {\n      options: {\n        name: 'anotherexisting'\n      },\n      stepHistory: new StepHistory()\n    };\n    await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'TARGET_FOLDER_ALREADY_EXISTS');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node']]));\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should not allow project creation using an invalid project name","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":434,"column":69,"index":18022},"line":434,"code":"  it('Should not allow project creation using an invalid project name', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        projectType: 'aws-node'\n      },\n      input: {\n        projectName: 'elo grzegżółka'\n      }\n    });\n    const context = {\n      options: {},\n      stepHistory: new StepHistory()\n    };\n    await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'INVALID_ANSWER');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node'], ['projectName', undefined]]));\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should not allow project creation using an invalid project name when `name` flag provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":450,"column":95,"index":18621},"line":450,"code":"  it('Should not allow project creation using an invalid project name when `name` flag provided', async () => {\n    configureInquirerStub(inquirer, {\n      list: {\n        projectType: 'aws-node'\n      }\n    });\n    const context = {\n      options: {\n        name: 'elo grzegżółka'\n      },\n      stepHistory: new StepHistory()\n    };\n    await expect(step.run(context)).to.eventually.be.rejected.and.have.property('code', 'INVALID_PROJECT_NAME');\n    expect(context.stepHistory.valuesMap()).to.deep.equal(new Map([['projectType', 'aws-node']]));\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"Should not allow project creation if multiple template-related options are provided","suites":["test/unit/lib/cli/interactive-setup/service.test.js","Create new project"],"updatePoint":{"line":465,"column":89,"index":19168},"line":465,"code":"  it('Should not allow project creation if multiple template-related options are provided', async () => {\n    await expect(step.run({\n      options: {\n        'template': 'some-template',\n        'template-url': 'https://template.com'\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'MULTIPLE_TEMPLATE_OPTIONS_PROVIDED');\n  });","file":"unit/lib/cli/interactive-setup/service.test.js","skipped":false,"dir":"test"},{"name":"correctly resolves when credentials resolved","suites":["test/unit/lib/cli/interactive-setup/utils.test.js","doesServiceInstanceHaveLinkedProvider"],"updatePoint":{"line":17,"column":52,"index":468},"line":17,"code":"    it('correctly resolves when credentials resolved', async () => {\n      const {\n        doesServiceInstanceHaveLinkedProvider\n      } = proxyquire('../../../../../lib/cli/interactive-setup/utils', {\n        '@serverless/dashboard-plugin/lib/resolve-provider-credentials': () => {\n          return {\n            accessKeyId: 'someaccess',\n            secretAccessKey: 'somesecret',\n            sessionToken: 'sometoken'\n          };\n        }\n      });\n      expect(await doesServiceInstanceHaveLinkedProvider({\n        configuration,\n        options\n      })).to.be.true;\n    });","file":"unit/lib/cli/interactive-setup/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly resolves when credentials missing","suites":["test/unit/lib/cli/interactive-setup/utils.test.js","doesServiceInstanceHaveLinkedProvider"],"updatePoint":{"line":34,"column":51,"index":1050},"line":34,"code":"    it('correctly resolves when credentials missing', async () => {\n      const {\n        doesServiceInstanceHaveLinkedProvider\n      } = proxyquire('../../../../../lib/cli/interactive-setup/utils', {\n        '@serverless/dashboard-plugin/lib/resolve-provider-credentials': () => {\n          return null;\n        }\n      });\n      expect(await doesServiceInstanceHaveLinkedProvider({\n        configuration,\n        options\n      })).to.be.false;\n    });","file":"unit/lib/cli/interactive-setup/utils.test.js","skipped":false,"dir":"test"},{"name":"throws when credentials resolution results in an error","suites":["test/unit/lib/cli/interactive-setup/utils.test.js","doesServiceInstanceHaveLinkedProvider"],"updatePoint":{"line":47,"column":62,"index":1515},"line":47,"code":"    it('throws when credentials resolution results in an error', async () => {\n      const {\n        doesServiceInstanceHaveLinkedProvider\n      } = proxyquire('../../../../../lib/cli/interactive-setup/utils', {\n        '@serverless/dashboard-plugin/lib/resolve-provider-credentials': () => {\n          const err = new Error('Error');\n          err.statusCode = 500;\n          throw err;\n        }\n      });\n      expect(doesServiceInstanceHaveLinkedProvider({\n        configuration,\n        options\n      })).to.eventually.be.rejected.and.have.property('code', 'DASHBOARD_UNAVAILABLE');\n    });","file":"unit/lib/cli/interactive-setup/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly resolves for service context and dashboard enabled","suites":["test/unit/lib/cli/interactive-setup/utils.test.js","resolveInitialContext"],"updatePoint":{"line":64,"column":68,"index":2167},"line":64,"code":"    it('correctly resolves for service context and dashboard enabled', async () => {\n      const configuration = {\n        app: 'someapp',\n        service: 'someservice',\n        org: 'someorg'\n      };\n      const serviceDir = '/path/to/service/dir';\n      const {\n        resolveInitialContext\n      } = proxyquire('../../../../../lib/cli/interactive-setup/utils', {\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n        '../../aws/has-local-credentials': () => true\n      });\n      expect(resolveInitialContext({\n        configuration,\n        serviceDir\n      })).to.deep.equal({\n        hasLocalAwsCredentials: true,\n        isLoggedIntoDashboard: true,\n        isDashboardEnabled: true,\n        isInServiceContext: true\n      });\n    });","file":"unit/lib/cli/interactive-setup/utils.test.js","skipped":false,"dir":"test"},{"name":"correctly resolves without service context","suites":["test/unit/lib/cli/interactive-setup/utils.test.js","resolveInitialContext"],"updatePoint":{"line":87,"column":50,"index":2920},"line":87,"code":"    it('correctly resolves without service context', async () => {\n      const configuration = null;\n      const serviceDir = null;\n      const {\n        resolveInitialContext\n      } = proxyquire('../../../../../lib/cli/interactive-setup/utils', {\n        '@serverless/dashboard-plugin/lib/is-authenticated': () => true,\n        '../../aws/has-local-credentials': () => true\n      });\n      expect(resolveInitialContext({\n        configuration,\n        serviceDir\n      })).to.deep.equal({\n        hasLocalAwsCredentials: true,\n        isLoggedIntoDashboard: true,\n        isDashboardEnabled: false,\n        isInServiceContext: false\n      });\n    });","file":"unit/lib/cli/interactive-setup/utils.test.js","skipped":false,"dir":"test"},{"name":"should load matching stage env file if present","suites":["test/unit/lib/cli/load-dotenv.test.js"],"updatePoint":{"line":28,"column":52,"index":1045},"line":28,"code":"  it('should load matching stage env file if present', async () => {\n    await loadEnv('testing');\n    expect(process.env).to.not.have.property('FROM_DEFAULT');\n    expect(process.env.FROM_STAGE).to.equal('valuefromstage');\n  });","file":"unit/lib/cli/load-dotenv.test.js","skipped":false,"dir":"test"},{"name":"should load from default env file if present and no matching stage file found","suites":["test/unit/lib/cli/load-dotenv.test.js"],"updatePoint":{"line":33,"column":83,"index":1306},"line":33,"code":"  it('should load from default env file if present and no matching stage file found', async () => {\n    await loadEnv('nonmatchingstage');\n    expect(process.env.FROM_DEFAULT).to.equal('valuefromdefault');\n    expect(process.env).to.not.have.property('FROM_STAGE');\n  });","file":"unit/lib/cli/load-dotenv.test.js","skipped":false,"dir":"test"},{"name":"should throw ServerlessError if dotenv returns error other than missing file","suites":["test/unit/lib/cli/load-dotenv.test.js"],"updatePoint":{"line":38,"column":82,"index":1577},"line":38,"code":"  it('should throw ServerlessError if dotenv returns error other than missing file', () => {\n    const errorMessage = 'Unexpected error while loading env';\n    const dotenvResult = sinon.stub(dotenv, 'config').returns({\n      error: new Error(errorMessage)\n    });\n    expect(() => loadEnv('testing')).to.throw(ServerlessError).with.property('code', 'DOTENV_LOAD_ERROR');\n    dotenvResult.restore();\n  });","file":"unit/lib/cli/load-dotenv.test.js","skipped":false,"dir":"test"},{"name":"should resolve with `null` when no local installation is found","suites":["test/unit/lib/cli/local-serverless.test.js"],"updatePoint":{"line":14,"column":68,"index":425},"line":14,"code":"  it('should resolve with `null` when no local installation is found', () => {\n    expect(require('../../../../lib/cli/local-serverless-path')).to.equal(null);\n  });","file":"unit/lib/cli/local-serverless-path.test.js","skipped":false,"dir":"test"},{"name":"should resolve with `null` when no local installation is found","suites":["test/unit/lib/cli/local-serverless.test.js"],"updatePoint":{"line":17,"column":68,"index":591},"line":17,"code":"  it('should resolve with `null` when no local installation is found', async () => {\n    const tmpServerlessPath = path.resolve(await fsp.realpath(os.homedir()), 'node_modules/serverless');\n    await fse.ensureDir(path.resolve(tmpServerlessPath, 'lib'));\n    await Promise.all([fse.ensureFile(path.resolve(tmpServerlessPath, 'lib/serverless.js')), fsp.writeFile(path.resolve(tmpServerlessPath, 'package.json'), JSON.stringify({\n      main: 'lib/serverless.js'\n    }))]);\n    expect(await fsp.realpath(require('../../../../lib/cli/local-serverless-path'))).to.equal(tmpServerlessPath);\n  });","file":"unit/lib/cli/local-serverless-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize string param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":18,"column":35,"index":1193},"line":18,"code":"  it('should recognize string param', async () => {\n    expect(parsedArgs.string).to.equal('one space separated');\n    delete parsedArgs.string;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize unspecified string param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":22,"column":47,"index":1356},"line":22,"code":"  it('should recognize unspecified string param', async () => {\n    expect(parsedArgs['unspecified-string']).to.equal('two space separated');\n    delete parsedArgs['unspecified-string'];\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize unspecified boolean param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":26,"column":48,"index":1550},"line":26,"code":"  it('should recognize unspecified boolean param', async () => {\n    expect(parsedArgs['unspecified-boolean']).to.equal(true);\n    delete parsedArgs['unspecified-boolean'];\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize unspecified multiple param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":30,"column":49,"index":1730},"line":30,"code":"  it('should recognize unspecified multiple param', async () => {\n    expect(parsedArgs['unspecified-multiple']).to.deep.equal(['one', null, null, 'test', 'another', 'another2']);\n    expect(parsedArgs['unspecified-multiple2']).to.deep.equal(['one', 'other']);\n    delete parsedArgs['unspecified-multiple'];\n    delete parsedArgs['unspecified-multiple2'];\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize multiple param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":36,"column":37,"index":2080},"line":36,"code":"  it('should recognize multiple param', async () => {\n    expect(parsedArgs.multiple).to.deep.equal(['single', null, 'other']);\n    delete parsedArgs.multiple;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize alias","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":40,"column":28,"index":2237},"line":40,"code":"  it('should recognize alias', async () => {\n    expect(parsedArgs.alias).to.equal('value');\n    delete parsedArgs.alias;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize boolean","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":44,"column":30,"index":2367},"line":44,"code":"  it('should recognize boolean', async () => {\n    expect(parsedArgs.boolean).to.equal(true);\n    delete parsedArgs.boolean;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize negated boolean","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":48,"column":38,"index":2506},"line":48,"code":"  it('should recognize negated boolean', async () => {\n    expect(parsedArgs['other-boolean']).to.equal(false);\n    delete parsedArgs['other-boolean'];\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize mutliple aliases shortcut","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":52,"column":48,"index":2674},"line":52,"code":"  it('should recognize mutliple aliases shortcut', async () => {\n    expect(parsedArgs.b).to.equal(true);\n    expect(parsedArgs.c).to.equal(true);\n    delete parsedArgs.b;\n    delete parsedArgs.c;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize empty value","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":58,"column":34,"index":2863},"line":58,"code":"  it('should recognize empty value', async () => {\n    expect(parsedArgs.empty).to.equal(null);\n    expect(parsedArgs['string-empty']).to.equal(null);\n    delete parsedArgs.empty;\n    delete parsedArgs['string-empty'];\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize underscore chars in params","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":64,"column":49,"index":3103},"line":64,"code":"  it('should recognize underscore chars in params', async () => {\n    expect(parsedArgs.underscore_separator).to.equal('underscored_value');\n    delete parsedArgs.underscore_separator;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize uppercased params","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":68,"column":40,"index":3285},"line":68,"code":"  it('should recognize uppercased params', async () => {\n    expect(parsedArgs.UPPER_CASE_PARAM).to.equal('UPPER_CASE_VALUE');\n    delete parsedArgs.UPPER_CASE_PARAM;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should recognize positional arguments","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":72,"column":43,"index":3461},"line":72,"code":"  it('should recognize positional arguments', async () => {\n    expect(parsedArgs._).to.deep.equal(['elo', 'foo', '--ignored1', '--ignored2']);\n    delete parsedArgs._;\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should not expose unexpected properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":76,"column":45,"index":3638},"line":76,"code":"  it('should not expose unexpected properties', async () => {\n    expect(parsedArgs).to.deep.equal({});\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should not throw if -h or --help param","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":79,"column":44,"index":3747},"line":79,"code":"  it('should not throw if -h or --help param', () => {\n    parseArgs(['-ab=foo', '--help'], {});\n    parseArgs(['--boolean=value', '-h'], {\n      boolean: new Set(['boolean'])\n    });\n  });","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject value for mutliple boolean properties alias","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":85,"column":63,"index":3956},"line":85,"code":"  it('should reject value for mutliple boolean properties alias', () => expect(() => parseArgs(['-ab=foo'], {})).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject multiple values for aliased boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":86,"column":66,"index":4152},"line":86,"code":"  it('should reject multiple values for aliased boolean properties', () => expect(() => parseArgs(['-a', 'foo', '-ab'], {})).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_MULTIPLE_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject value for negated boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":87,"column":56,"index":4356},"line":87,"code":"  it('should reject value for negated boolean properties', () => expect(() => parseArgs(['--no-boolean=value'], {\n    boolean: new Set(['boolean'])\n  })).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject multiple values for negated boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":90,"column":66,"index":4600},"line":90,"code":"  it('should reject multiple values for negated boolean properties', () => expect(() => parseArgs(['--boolean', 'foo', '--no-boolean'], {})).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_MULTIPLE_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject value for boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":91,"column":48,"index":4812},"line":91,"code":"  it('should reject value for boolean properties', () => expect(() => parseArgs(['--boolean=value'], {\n    boolean: new Set(['boolean'])\n  })).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject multiple values for boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":94,"column":58,"index":5045},"line":94,"code":"  it('should reject multiple values for boolean properties', () => expect(() => parseArgs(['--boolean', 'foo', '--boolean'], {})).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_MULTIPLE_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject boolean value for string property","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":95,"column":53,"index":5259},"line":95,"code":"  it('should reject boolean value for string property', () => expect(() => parseArgs(['--string'], {\n    string: new Set(['string'])\n  })).to.throw(ServerlessError).with.property('code', 'MISSING_CLI_PARAM_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject multiple values for singular properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":98,"column":59,"index":5481},"line":98,"code":"  it('should reject multiple values for singular properties', () => expect(() => parseArgs(['--string', 'foo', '--string=bar'], {\n    string: new Set(['string'])\n  })).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_MULTIPLE_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should reject multiple values for unspecified boolean properties","suites":["test/unit/lib/cli/parse-args.test.js"],"updatePoint":{"line":101,"column":70,"index":5749},"line":101,"code":"  it('should reject multiple values for unspecified boolean properties', () => expect(() => parseArgs(['--boolean', '--boolean=foo'], {})).to.throw(ServerlessError).with.property('code', 'UNEXPECTED_CLI_PARAM_MULTIPLE_VALUE'));","file":"unit/lib/cli/parse-args.test.js","skipped":false,"dir":"test"},{"name":"should show help","suites":["test/unit/lib/cli/render-help/command.test.js"],"updatePoint":{"line":10,"column":22,"index":363},"line":10,"code":"  it('should show help', async () => {\n    const output = await observeOutput(() => renderCommandHelp('deploy'));\n    expect(output).to.have.string('deploy');\n    expect(output).to.have.string('deploy function');\n    expect(output).to.have.string('--help');\n    expect(output).to.have.string(commandsSchema.get('deploy').usage);\n    expect(output).to.have.string(commandsSchema.get('deploy function').usage);\n  });","file":"unit/lib/cli/render-help/command.test.js","skipped":false,"dir":"test"},{"name":"should show help for container command","suites":["test/unit/lib/cli/render-help/command.test.js"],"updatePoint":{"line":18,"column":44,"index":800},"line":18,"code":"  it('should show help for container command', async () => {\n    const output = await observeOutput(() => renderCommandHelp('plugin'));\n    expect(output).to.have.string('plugin install');\n    expect(output).to.have.string(commandsSchema.get('plugin install').usage);\n    expect(output).to.have.string(commandsSchema.get('plugin uninstall').usage);\n  });","file":"unit/lib/cli/render-help/command.test.js","skipped":false,"dir":"test"},{"name":"should show help","suites":["test/unit/lib/cli/render-help/general.test.js"],"updatePoint":{"line":9,"column":22,"index":289},"line":9,"code":"  it('should show help', async () => {\n    const output = await observeOutput(() => renderGeneralHelp(new Set()));\n    expect(output).to.have.string('Usage');\n    expect(output).to.have.string('deploy function');\n  });","file":"unit/lib/cli/render-help/general.test.js","skipped":false,"dir":"test"},{"name":"should generate usage info","suites":["test/unit/lib/cli/render-help/generate-command-usage.test.js"],"updatePoint":{"line":9,"column":32,"index":351},"line":9,"code":"  it('should generate usage info', async () => {\n    const commandSchema = commandsSchema.get('config');\n    const resultString = generateCommandUsage('config', commandSchema);\n    expect(resultString).to.have.string('config');\n    expect(resultString).to.have.string(commandSchema.usage);\n  });","file":"unit/lib/cli/render-help/generate-command-usage.test.js","skipped":false,"dir":"test"},{"name":"should show general help on main command","suites":["test/unit/lib/cli/render-help/index.test.js"],"updatePoint":{"line":11,"column":46,"index":427},"line":11,"code":"  it('should show general help on main command', async () => {\n    resolveInput.clear();\n    overrideArgv({\n      args: ['serverless', '--help']\n    }, () => resolveInput());\n    const output = await observeOutput(() => renderHelp(new Set()));\n    expect(output).to.have.string('Usage');\n    expect(output).to.have.string('deploy function');\n  });","file":"unit/lib/cli/render-help/index.test.js","skipped":false,"dir":"test"},{"name":"should show interactive help when requested","suites":["test/unit/lib/cli/render-help/index.test.js"],"updatePoint":{"line":20,"column":49,"index":778},"line":20,"code":"  it('should show interactive help when requested', async () => {\n    resolveInput.clear();\n    overrideArgv({\n      args: ['serverless', '--help-interactive']\n    }, () => resolveInput());\n    const output = await observeOutput(() => renderHelp(new Set()));\n    expect(output).to.have.string('Interactive CLI');\n    expect(output).to.have.string('--help-interactive');\n  });","file":"unit/lib/cli/render-help/index.test.js","skipped":false,"dir":"test"},{"name":"should show general help on help command","suites":["test/unit/lib/cli/render-help/index.test.js"],"updatePoint":{"line":29,"column":46,"index":1151},"line":29,"code":"  it('should show general help on help command', async () => {\n    resolveInput.clear();\n    overrideArgv({\n      args: ['serverless', 'help']\n    }, () => resolveInput());\n    const output = await observeOutput(() => renderHelp(new Set()));\n    expect(output).to.have.string('Usage');\n    expect(output).to.have.string('deploy function');\n  });","file":"unit/lib/cli/render-help/index.test.js","skipped":false,"dir":"test"},{"name":"should show specific commmand help with specific command","suites":["test/unit/lib/cli/render-help/index.test.js"],"updatePoint":{"line":38,"column":62,"index":1513},"line":38,"code":"  it('should show specific commmand help with specific command', async () => {\n    resolveInput.clear();\n    const {\n      commandsSchema\n    } = overrideArgv({\n      args: ['serverless', 'deploy', '--help']\n    }, () => resolveInput());\n    const output = await observeOutput(() => renderHelp(new Set()));\n    expect(output).to.have.string('deploy');\n    expect(output).to.have.string('deploy function');\n    expect(output).to.have.string('--help');\n    expect(output).to.have.string(commandsSchema.get('deploy').usage);\n    expect(output).to.have.string(commandsSchema.get('deploy function').usage);\n  });","file":"unit/lib/cli/render-help/index.test.js","skipped":false,"dir":"test"},{"name":"should show help","suites":["test/unit/lib/cli/render-help/interactive-setup.test.js"],"updatePoint":{"line":9,"column":22,"index":318},"line":9,"code":"  it('should show help', async () => {\n    const output = await observeOutput(() => renderInteractiveSetupHelp());\n    expect(output).to.have.string('Interactive CLI');\n    expect(output).to.have.string('--help-interactive');\n  });","file":"unit/lib/cli/render-help/interactive-setup.test.js","skipped":false,"dir":"test"},{"name":"should list options","suites":["test/unit/lib/cli/render-help/options.test.js"],"updatePoint":{"line":9,"column":25,"index":292},"line":9,"code":"  it('should list options', async () => {\n    const output = await observeOutput(() => renderOptionsHelp({\n      foo: {\n        usage: 'Some option',\n        shortcut: 'b',\n        required: true\n      },\n      bar: {\n        usage: 'Elo'\n      },\n      noData: {}\n    }));\n    expect(output).to.have.string('--foo');\n    expect(output).to.have.string('-b');\n    expect(output).to.have.string('Some option');\n  });","file":"unit/lib/cli/render-help/options.test.js","skipped":false,"dir":"test"},{"name":"should log version","suites":["test/unit/lib/cli/list-version.test.js"],"updatePoint":{"line":9,"column":24,"index":270},"line":9,"code":"  it('should log version', async () => {\n    const output = await observeOutput(() => listVersion());\n    expect(output).to.have.string('Framework Core: ');\n    expect(output).to.have.string('SDK: ');\n  });","file":"unit/lib/cli/render-version.test.js","skipped":false,"dir":"test"},{"name":"should not resolve a path in not a service context","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":26,"column":56,"index":873},"line":26,"code":"  it('should not resolve a path in not a service context', async () => {\n    expect(await resolveServerlessConfigPath()).to.equal(null);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.yml\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":29,"column":39,"index":999},"line":29,"code":"  it('should recognize \"serverless.yml\"', async () => {\n    configurationPath = path.resolve('serverless.yml');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.yaml\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":34,"column":40,"index":1240},"line":34,"code":"  it('should recognize \"serverless.yaml\"', async () => {\n    configurationPath = path.resolve('serverless.yaml');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.json\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":39,"column":40,"index":1482},"line":39,"code":"  it('should recognize \"serverless.json\"', async () => {\n    configurationPath = path.resolve('serverless.json');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.js\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":44,"column":38,"index":1722},"line":44,"code":"  it('should recognize \"serverless.js\"', async () => {\n    configurationPath = path.resolve('serverless.js');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.ts\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":49,"column":38,"index":1960},"line":49,"code":"  it('should recognize \"serverless.ts\"', async () => {\n    configurationPath = path.resolve('serverless.ts');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.cjs\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":54,"column":39,"index":2199},"line":54,"code":"  it('should recognize \"serverless.cjs\"', async () => {\n    configurationPath = path.resolve('serverless.cjs');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless.mjs\"","suites":["test/unit/lib/cli/resolve-configuration-path.test.js"],"updatePoint":{"line":59,"column":39,"index":2439},"line":59,"code":"  it('should recognize \"serverless.mjs\"', async () => {\n    configurationPath = path.resolve('serverless.mjs');\n    await fse.ensureFile(configurationPath);\n    expect(await resolveServerlessConfigPath()).to.equal(configurationPath);\n  });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should accept absolute path, pointing configuration in current working directory","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":69,"column":88,"index":3059},"line":69,"code":"    it('should accept absolute path, pointing configuration in current working directory', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config', path.resolve('custom.yml')]\n      }, async () => expect(await resolveServerlessConfigPath()).to.equal(path.resolve('custom.yml')));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should temporarily support nested path","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":74,"column":46,"index":3330},"line":74,"code":"    it('should temporarily support nested path', async () => {\n      await overrideEnv(async () => {\n        process.env.SLS_DEPRECATION_NOTIFICATION_MODE = 'warn';\n        const uncached = requireUncached(() => ({\n          resolveServerlessConfigPath: require('../../../../lib/cli/resolve-configuration-path')\n        }));\n        await overrideArgv({\n          args: ['serverless', '--config', 'nested/custom.yml']\n        }, async () => {\n          await expect(uncached.resolveServerlessConfigPath()).to.eventually.be.rejected.and.have.property('code', 'NESTED_CUSTOM_CONFIGURATION_PATH');\n        });\n      });\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should reject unsupported extension","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":87,"column":43,"index":3952},"line":87,"code":"    it('should reject unsupported extension', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config', 'custom.foo']\n      }, () => expect(resolveServerlessConfigPath()).to.eventually.be.rejected.and.have.property('code', 'INVALID_SERVICE_CONFIG_PATH'));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should reject not existing file","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":92,"column":39,"index":4236},"line":92,"code":"    it('should reject not existing file', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config', 'not-existing.yml']\n      }, () => expect(resolveServerlessConfigPath()).to.eventually.be.rejected.and.have.property('code', 'INVALID_SERVICE_CONFIG_PATH'));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should reject directory","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":97,"column":31,"index":4518},"line":97,"code":"    it('should reject directory', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config', 'custom-dir.yml']\n      }, () => expect(resolveServerlessConfigPath()).to.eventually.be.rejected.and.have.property('code', 'INVALID_SERVICE_CONFIG_PATH'));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize top level file with supported extension","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":102,"column":64,"index":4831},"line":102,"code":"    it('should recognize top level file with supported extension', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config', 'custom.yml']\n      }, async () => expect(await resolveServerlessConfigPath()).to.equal(path.resolve('custom.yml')));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"param=value\" format","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","\"--config\" param support"],"updatePoint":{"line":107,"column":45,"index":5087},"line":107,"code":"    it('should recognize \"param=value\" format', async () => {\n      await overrideArgv({\n        args: ['serverless', '--config=custom.yml']\n      }, async () => expect(await resolveServerlessConfigPath()).to.equal(path.resolve('custom.yml')));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should support custom cwd","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","options support"],"updatePoint":{"line":118,"column":33,"index":5576},"line":118,"code":"    it('should support custom cwd', async () => {\n      expect(await resolveServerlessConfigPath({\n        cwd: 'normal'\n      })).to.equal(path.resolve('normal/serverless.yml'));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should support custom cli options","suites":["test/unit/lib/cli/resolve-configuration-path.test.js","options support"],"updatePoint":{"line":123,"column":41,"index":5772},"line":123,"code":"    it('should support custom cli options', async () => {\n      expect(await resolveServerlessConfigPath({\n        cwd: 'custom',\n        options: {\n          config: 'custom.yml'\n        }\n      })).to.equal(path.resolve('custom/custom.yml'));\n    });","file":"unit/lib/cli/resolve-configuration-path.test.js","skipped":false,"dir":"test"},{"name":"should resolve commands","suites":["test/unit/lib/cli/resolve-input.test.js","when commands"],"updatePoint":{"line":20,"column":31,"index":785},"line":20,"code":"    it('should resolve commands', async () => {\n      expect(data.commands).to.deep.equal(['cmd1', 'cmd2']);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --version as boolean","suites":["test/unit/lib/cli/resolve-input.test.js","when commands"],"updatePoint":{"line":23,"column":45,"index":916},"line":23,"code":"    it('should recognize --version as boolean', async () => {\n      expect(data.options.version).to.equal(true);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --help as boolean","suites":["test/unit/lib/cli/resolve-input.test.js","when commands"],"updatePoint":{"line":26,"column":42,"index":1034},"line":26,"code":"    it('should recognize --help as boolean', async () => {\n      expect(data.options.help).to.equal(true);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --config","suites":["test/unit/lib/cli/resolve-input.test.js","when commands"],"updatePoint":{"line":29,"column":33,"index":1140},"line":29,"code":"    it('should recognize --config', async () => {\n      expect(data.options.config).to.equal('conf');\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize stage alias","suites":["test/unit/lib/cli/resolve-input.test.js","\"-s\" handling","Normal command"],"updatePoint":{"line":42,"column":38,"index":1534},"line":42,"code":"      it('should recognize stage alias', async () => {\n        expect(data.options.stage).to.equal('stage');\n      });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize stage alias","suites":["test/unit/lib/cli/resolve-input.test.js","\"-s\" handling","Command with custom -s alias"],"updatePoint":{"line":54,"column":38,"index":1926},"line":54,"code":"      it('should recognize stage alias', async () => {\n        expect(data.options).to.not.have.property('stage');\n      });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should resolve empty commands list","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":67,"column":42,"index":2292},"line":67,"code":"    it('should resolve empty commands list', async () => {\n      expect(data.commands).to.deep.equal([]);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize -v as --version alias","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":70,"column":46,"index":2410},"line":70,"code":"    it('should recognize -v as --version alias', async () => {\n      expect(data.options.version).to.equal(true);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --h alias","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":73,"column":34,"index":2520},"line":73,"code":"    it('should recognize --h alias', async () => {\n      expect(data.options.help).to.equal(true);\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --c alias","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":76,"column":34,"index":2627},"line":76,"code":"    it('should recognize --c alias', async () => {\n      expect(data.options.config).to.equal('conf');\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize --version","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":79,"column":34,"index":2738},"line":79,"code":"    it('should recognize --version', async () => {\n      resolveInput.clear();\n      data = overrideArgv({\n        args: ['serverless', '--version']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get(''),\n        command: '',\n        commands: [],\n        options: {\n          version: true\n        },\n        isHelpRequest: true,\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize interactive setup","suites":["test/unit/lib/cli/resolve-input.test.js","when no commands"],"updatePoint":{"line":95,"column":42,"index":3176},"line":95,"code":"    it('should recognize interactive setup', async () => {\n      resolveInput.clear();\n      data = overrideArgv({\n        args: ['serverless', '--app', 'foo']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get(''),\n        command: '',\n        commands: [],\n        options: {\n          app: 'foo'\n        },\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should not mark regular command","suites":["test/unit/lib/cli/resolve-input.test.js","isHelpRequest"],"updatePoint":{"line":112,"column":39,"index":3624},"line":112,"code":"    it('should not mark regular command', async () => {\n      resolveInput.clear();\n      const data = overrideArgv({\n        args: ['serverless', 'package']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get('package'),\n        command: 'package',\n        commands: ['package'],\n        options: {},\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"--help\"","suites":["test/unit/lib/cli/resolve-input.test.js","isHelpRequest"],"updatePoint":{"line":125,"column":33,"index":4018},"line":125,"code":"    it('should recognize \"--help\"', async () => {\n      resolveInput.clear();\n      const data = overrideArgv({\n        args: ['serverless', '--help']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get(''),\n        command: '',\n        commands: [],\n        options: {\n          help: true\n        },\n        isHelpRequest: true,\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize command \"--help\"","suites":["test/unit/lib/cli/resolve-input.test.js","isHelpRequest"],"updatePoint":{"line":141,"column":41,"index":4455},"line":141,"code":"    it('should recognize command \"--help\"', async () => {\n      resolveInput.clear();\n      const data = overrideArgv({\n        args: ['serverless', 'package', '--help']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get('package'),\n        command: 'package',\n        commands: ['package'],\n        options: {\n          help: true\n        },\n        isHelpRequest: true,\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"--help-interactive\"","suites":["test/unit/lib/cli/resolve-input.test.js","isHelpRequest"],"updatePoint":{"line":157,"column":45,"index":4930},"line":157,"code":"    it('should recognize \"--help-interactive\"', async () => {\n      resolveInput.clear();\n      const data = overrideArgv({\n        args: ['serverless', '--help-interactive']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get(''),\n        command: '',\n        commands: [],\n        options: {\n          'help-interactive': true\n        },\n        isHelpRequest: true,\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"help\" command","suites":["test/unit/lib/cli/resolve-input.test.js","isHelpRequest"],"updatePoint":{"line":173,"column":39,"index":5391},"line":173,"code":"    it('should recognize \"help\" command', async () => {\n      resolveInput.clear();\n      const data = overrideArgv({\n        args: ['serverless', 'help']\n      }, () => resolveInput());\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get('help'),\n        command: 'help',\n        commands: ['help'],\n        options: {},\n        isHelpRequest: true,\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize multiple env options","suites":["test/unit/lib/cli/resolve-input.test.js","multiple handling"],"updatePoint":{"line":196,"column":45,"index":6077},"line":196,"code":"    it('should recognize multiple env options', async () => {\n      expect(data).to.deep.equal({\n        commandSchema: commandsSchema.get('invoke local'),\n        command: 'invoke local',\n        commands: ['invoke', 'local'],\n        options: {\n          env: ['foo=bar', 'bar=baz']\n        },\n        commandsSchema\n      });\n    });","file":"unit/lib/cli/resolve-input.test.js","skipped":false,"dir":"test"},{"name":"should recognize \"serverless-tencent\" unonditionally when in China and not at service context","suites":["test/unit/lib/cli/triage/index.test.js","CLI params"],"updatePoint":{"line":20,"column":101,"index":688},"line":20,"code":"    it('should recognize \"serverless-tencent\" unonditionally when in China and not at service context', async () => overrideEnv({\n      variables: {\n        SLS_GEO_LOCATION: 'cn'\n      }\n    }, async () => overrideArgv({\n      args: ['sls any']\n    }, async () => {\n      expect(await triage()).to.equal('serverless-tencent');\n    })));","file":"unit/lib/cli/triage/index.test.js","skipped":false,"dir":"test"},{"name":"should unconditionally favor \"serverless\" for version check","suites":["test/unit/lib/cli/triage/index.test.js","CLI params"],"updatePoint":{"line":29,"column":67,"index":992},"line":29,"code":"    it('should unconditionally favor \"serverless\" for version check', async () => overrideEnv({\n      variables: {\n        SERVERLESS_PLATFORM_VENDOR: 'tencent',\n        SLS_GEO_LOCATION: 'cn'\n      }\n    }, async () => {\n      await overrideArgv({\n        args: ['sls', '-v']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n      await overrideArgv({\n        args: ['sls', '--version']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n    }));","file":"unit/lib/cli/triage/index.test.js","skipped":false,"dir":"test"},{"name":"should favor \"serverless\" in other cases","suites":["test/unit/lib/cli/triage/index.test.js","CLI params"],"updatePoint":{"line":46,"column":48,"index":1497},"line":46,"code":"    it('should favor \"serverless\" in other cases', async () => {\n      await overrideArgv({\n        args: ['sls', 'print']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n      await overrideArgv({\n        args: ['sls', 'deploy']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n      await overrideArgv({\n        args: ['sls']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n      await overrideArgv({\n        args: ['sls', '--help']\n      }, async () => {\n        expect(await triage()).to.equal('serverless');\n      });\n    });","file":"unit/lib/cli/triage/index.test.js","skipped":false,"dir":"test"},{"name":"should not resolve to `@serverless/compose` with compose config present when command should be ignored","suites":["test/unit/lib/cli/triage/index.test.js","Service configuration with CLI params","regular commands"],"updatePoint":{"line":117,"column":112,"index":4157},"line":117,"code":"      it('should not resolve to `@serverless/compose` with compose config present when command should be ignored', async () => {\n        await overrideCwd(path.resolve(fixturesDirname, '@serverless/compose', 'yml', 'project'), async () => {\n          expect(await triage()).to.equal('serverless');\n        });\n      });","file":"unit/lib/cli/triage/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve to `@serverless/compose` with `--help` when compose config present","suites":["test/unit/lib/cli/triage/index.test.js","Service configuration with CLI params","--help handling"],"updatePoint":{"line":133,"column":91,"index":4699},"line":133,"code":"      it('should resolve to `@serverless/compose` with `--help` when compose config present', async () => {\n        await overrideCwd(path.resolve(fixturesDirname, '@serverless/compose', 'yml', 'project'), async () => {\n          expect(await triage()).to.equal('@serverless/compose');\n        });\n      });","file":"unit/lib/cli/triage/index.test.js","skipped":false,"dir":"test"},{"name":"should login","suites":["test/unit/lib/commands/login/dashboard.test.js"],"updatePoint":{"line":37,"column":18,"index":1015},"line":37,"code":"  it('should login', async () => {\n    const userData = configUtils.getLoggedInUser();\n    expect(userData.userId).to.equal('user_uid');\n    expect(userData.refreshToken).to.equal('refreshToken');\n  });","file":"unit/lib/commands/login/dashboard.test.js","skipped":false,"dir":"test"},{"name":"should  validation for ","suites":["test/unit/lib/configSchema.test.js"],"updatePoint":{"line":79,"column":67,"index":1920},"line":79,"code":"    it(`should ${passOrFail} validation for ${someCase.description}`, async () => runServerless({\n      fixture: 'config-schema-extensions',\n      configExt: someCase.mutation,\n      command: 'info'\n    }).then(() => {\n      if (!someCase.isValid) {\n        expect(false).to.be.true;\n      }\n      return;\n    }, err => {\n      try {\n        expect(err.message).to.include(someCase.errorMessage);\n      } catch (error) {\n        throw err;\n      }\n    }));","file":"unit/lib/config-schema.test.js","skipped":false,"dir":"test"},{"name":"should return boolean","suites":["test/unit/lib/configuration/is-dashboard-enabled.test.js"],"updatePoint":{"line":8,"column":27,"index":248},"line":8,"code":"  it('should return boolean', () => {\n    expect(typeof isDashboardEnabled({\n      configuration: {},\n      options: {}\n    })).to.equal('boolean');\n  });","file":"unit/lib/configuration/is-dashboard-enabled.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.yml\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":18,"column":34,"index":542},"line":18,"code":"  it('should read \"serverless.yml\"', async () => {\n    configurationPath = 'serverless.yml';\n    await fsp.writeFile(configurationPath, 'service: test-yml\\nprovider:\\n  name: aws\\n');\n    expect(await readConfiguration(configurationPath)).to.deep.equal({\n      service: 'test-yml',\n      provider: {\n        name: 'aws'\n      }\n    });\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.yaml\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":28,"column":35,"index":885},"line":28,"code":"  it('should read \"serverless.yaml\"', async () => {\n    configurationPath = 'serverless.yaml';\n    await fsp.writeFile(configurationPath, 'service: test-yaml\\nprovider:\\n  name: aws\\n');\n    expect(await readConfiguration(configurationPath)).to.deep.equal({\n      service: 'test-yaml',\n      provider: {\n        name: 'aws'\n      }\n    });\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should support AWS CloudFormation shortcut syntax","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":38,"column":55,"index":1251},"line":38,"code":"  it('should support AWS CloudFormation shortcut syntax', async () => {\n    configurationPath = 'serverless.yml';\n    await fsp.writeFile(configurationPath, 'service: test-cf-shortcut\\nprovider:\\n  name: aws\\n  cfProperty: !GetAtt MyResource.Arn');\n    expect(await readConfiguration(configurationPath)).to.deep.equal({\n      service: 'test-cf-shortcut',\n      provider: {\n        name: 'aws',\n        cfProperty: {\n          'Fn::GetAtt': ['MyResource', 'Arn']\n        }\n      }\n    });\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.json\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":51,"column":35,"index":1725},"line":51,"code":"  it('should read \"serverless.json\"', async () => {\n    configurationPath = 'serverless.json';\n    const configuration = {\n      service: 'test-json',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fsp.writeFile(configurationPath, JSON.stringify(configuration));\n    expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.js\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":62,"column":33,"index":2093},"line":62,"code":"  it('should read \"serverless.js\"', async () => {\n    configurationPath = 'serverless.js';\n    const configuration = {\n      service: 'test-js',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fsp.writeFile(configurationPath, `module.exports = ${JSON.stringify(configuration)}`);\n    expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.ts\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":73,"column":33,"index":2479},"line":73,"code":"  it('should read \"serverless.ts\"', async () => {\n    await fse.ensureDir('node_modules');\n    try {\n      await fsp.writeFile('node_modules/ts-node.js', 'module.exports.register = () => null;');\n      configurationPath = 'serverless.ts';\n      const configuration = {\n        service: 'test-ts',\n        provider: {\n          name: 'aws'\n        }\n      };\n      await fsp.writeFile(configurationPath, `module.exports = ${JSON.stringify(configuration)}`);\n      expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n    } finally {\n      await fse.remove('node_modules');\n    }\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.cjs\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":90,"column":34,"index":3092},"line":90,"code":"  it('should read \"serverless.cjs\"', async () => {\n    configurationPath = 'serverless.cjs';\n    const configuration = {\n      service: 'test-js',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fsp.writeFile(configurationPath, `module.exports = ${JSON.stringify(configuration)}`);\n    expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read \"serverless.mjs\"","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":101,"column":34,"index":3480},"line":101,"code":"  it('should read \"serverless.mjs\"', async () => {\n    configurationPath = 'serverless.mjs';\n    const configuration = {\n      service: 'test-js',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fsp.writeFile(configurationPath, `export default ${JSON.stringify(configuration)}`);\n    expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should register ts-node only if it is not already registered","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":112,"column":66,"index":3898},"line":112,"code":"  it('should register ts-node only if it is not already registered', async () => {\n    try {\n      expect(process[Symbol.for('ts-node.register.instance')]).to.be.undefined;\n      process[Symbol.for('ts-node.register.instance')] = 'foo';\n      configurationPath = 'serverless.ts';\n      const configuration = {\n        service: 'test-ts',\n        provider: {\n          name: 'aws'\n        }\n      };\n      await fsp.writeFile(configurationPath, `module.exports = ${JSON.stringify(configuration)}`);\n      expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n    } finally {\n      delete process[Symbol.for('ts-node.register.instance')];\n    }\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should support deferred configuration result","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":129,"column":50,"index":4558},"line":129,"code":"  it('should support deferred configuration result', async () => {\n    // JS configurations are required (so immune to modules caching).\n    // In this tests we cannot use same JS configuration path twice for testing\n    configurationPath = 'serverless-deferred.js';\n    const configuration = {\n      service: 'test-deferred',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fsp.writeFile(configurationPath, `module.exports = Promise.resolve(${JSON.stringify(configuration)})`);\n    expect(await readConfiguration(configurationPath)).to.deep.equal(configuration);\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject not existing file","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":142,"column":37,"index":5130},"line":142,"code":"  it('should reject not existing file', async () => {\n    await expect(readConfiguration('serverless.yml')).to.eventually.be.rejected.and.have.property('code', 'CONFIGURATION_NOT_FOUND');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject unknown type","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":145,"column":32,"index":5319},"line":145,"code":"  it('should reject unknown type', async () => {\n    configurationPath = 'serverless.foo';\n    await fse.ensureFile(configurationPath);\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'UNSUPPORTED_CONFIGURATION_TYPE');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject YAML syntax error","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":150,"column":37,"index":5608},"line":150,"code":"  it('should reject YAML syntax error', async () => {\n    configurationPath = 'serverless.yaml';\n    await fsp.writeFile(configurationPath, 'service: test-yaml\\np [\\nr\\novider:\\n  name: aws\\n');\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'CONFIGURATION_PARSE_ERROR');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject JSON syntax error","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":155,"column":37,"index":5946},"line":155,"code":"  it('should reject JSON syntax error', async () => {\n    configurationPath = 'serverless.json';\n    await fsp.writeFile(configurationPath, '{foom,sdfs}');\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'CONFIGURATION_PARSE_ERROR');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject JS intialization error","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":160,"column":42,"index":6250},"line":160,"code":"  it('should reject JS intialization error', async () => {\n    configurationPath = 'serverless-errored.js';\n    await fsp.writeFile(configurationPath, 'throw new Error(\"Stop!\")');\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'CONFIGURATION_INITIALIZATION_ERROR');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject TS configuration if \"ts-node\" is not found","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":165,"column":62,"index":6602},"line":165,"code":"  it('should reject TS configuration if \"ts-node\" is not found', async () => {\n    // Test against different service dir, to not fall into cached `require.resolve` value\n    configurationPath = 'other/serverless-errored.ts';\n    const configuration = {\n      service: 'test-ts',\n      provider: {\n        name: 'aws'\n      }\n    };\n    await fse.ensureFile(configurationPath);\n    await fsp.writeFile(configurationPath, `module.exports = ${JSON.stringify(configuration)}`);\n    await expect(proxyquire('../../../../lib/configuration/read', {\n      'child-process-ext/spawn': async () => {\n        throw Object.assign(new Error('Not found'), {\n          code: 'ENOENT'\n        });\n      }\n    })(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'CONFIGURATION_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject non object configuration","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":184,"column":44,"index":7392},"line":184,"code":"  it('should reject non object configuration', async () => {\n    configurationPath = 'serverless.json';\n    await fsp.writeFile(configurationPath, JSON.stringify([]));\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'INVALID_CONFIGURATION_EXPORT');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should reject non JSON like structures","suites":["test/unit/lib/configuration/read.test.js"],"updatePoint":{"line":189,"column":44,"index":7706},"line":189,"code":"  it('should reject non JSON like structures', async () => {\n    configurationPath = 'serverless-custom.js';\n    await fsp.writeFile(configurationPath, 'exports.foo = exports');\n    await expect(readConfiguration(configurationPath)).to.eventually.be.rejected.and.have.property('code', 'INVALID_CONFIGURATION_STRUCTURE');\n  });","file":"unit/lib/configuration/read.test.js","skipped":false,"dir":"test"},{"name":"should read name from \"provider\"","suites":["test/unit/lib/configuration/resolve-provider-name.test.js"],"updatePoint":{"line":9,"column":38,"index":331},"line":9,"code":"  it('should read name from \"provider\"', () => {\n    expect(resolveProviderName({\n      provider: 'foo'\n    })).to.equal('foo');\n  });","file":"unit/lib/configuration/resolve-provider-name.test.js","skipped":false,"dir":"test"},{"name":"should read name from \"provider.name\"","suites":["test/unit/lib/configuration/resolve-provider-name.test.js"],"updatePoint":{"line":14,"column":43,"index":471},"line":14,"code":"  it('should read name from \"provider.name\"', () => {\n    expect(resolveProviderName({\n      provider: {\n        name: 'foo'\n      }\n    })).to.equal('foo');\n  });","file":"unit/lib/configuration/resolve-provider-name.test.js","skipped":false,"dir":"test"},{"name":"should reject missing \"provider.name\"","suites":["test/unit/lib/configuration/resolve-provider-name.test.js"],"updatePoint":{"line":21,"column":43,"index":635},"line":21,"code":"  it('should reject missing \"provider.name\"', () => {\n    expect(() => resolveProviderName({\n      provider: {}\n    })).to.throw(ServerlessError).with.property('code', 'INVALID_CONFIGURATION_PROVIDER_NAME_MISSING');\n  });","file":"unit/lib/configuration/resolve-provider-name.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid \"provider.name\"","suites":["test/unit/lib/configuration/resolve-provider-name.test.js"],"updatePoint":{"line":26,"column":43,"index":857},"line":26,"code":"  it('should reject invalid \"provider.name\"', () => {\n    expect(() => resolveProviderName({\n      provider: {\n        name: {}\n      }\n    })).to.throw(ServerlessError).with.property('code', 'INVALID_CONFIGURATION_PROVIDER_NAME_MISSING');\n  });","file":"unit/lib/configuration/resolve-provider-name.test.js","skipped":false,"dir":"test"},{"name":"should reject missing \"provider\"","suites":["test/unit/lib/configuration/resolve-provider-name.test.js"],"updatePoint":{"line":33,"column":38,"index":1098},"line":33,"code":"  it('should reject missing \"provider\"', () => {\n    expect(() => resolveProviderName({})).to.throw(ServerlessError).with.property('code', 'INVALID_CONFIGURATION_PROVIDER_NAME_MISSING');\n  });","file":"unit/lib/configuration/resolve-provider-name.test.js","skipped":false,"dir":"test"},{"name":"should return \"false\" on no errors","suites":["test/unit/lib/configuration/variables/eventually-report-resolution-errors.test.js"],"updatePoint":{"line":15,"column":40,"index":678},"line":15,"code":"  it('should return \"false\" on no errors', () => {\n    const configuration = {\n      foo: 'bar'\n    };\n    const variablesMeta = resolveMeta(configuration);\n    expect(eventuallyReportResolutionErrors(process.cwd(), configuration, variablesMeta)).to.equal(false);\n  });","file":"unit/lib/configuration/variables/eventually-report-resolution-errors.test.js","skipped":false,"dir":"test"},{"name":"should throw error in regular circumstances","suites":["test/unit/lib/configuration/variables/eventually-report-resolution-errors.test.js","On errors"],"updatePoint":{"line":23,"column":51,"index":991},"line":23,"code":"    it('should throw error in regular circumstances', () => {\n      const configuration = {\n        foo: '${foo:raz'\n      };\n      const variablesMeta = resolveMeta(configuration);\n      overrideArgv({\n        args: ['serverless', 'foo']\n      }, () => expect(() => eventuallyReportResolutionErrors(process.cwd(), configuration, variablesMeta)).to.throw(ServerlessError).with.property('code', 'VARIABLES_RESOLUTION_ERROR'));\n    });","file":"unit/lib/configuration/variables/eventually-report-resolution-errors.test.js","skipped":false,"dir":"test"},{"name":"should resolve human frendly path string","suites":["test/unit/lib/configuration/variables/humanize-property-path-tokens.test.js"],"updatePoint":{"line":8,"column":46,"index":314},"line":8,"code":"  it('should resolve human frendly path string', () => {\n    expect(humanizePropertyPathTokens(['foo'])).to.equal('foo');\n    expect(humanizePropertyPathTokens(['foo', 'bar'])).to.equal('foo.bar');\n    expect(humanizePropertyPathTokens(['foo', 'bar', '1'])).to.equal('foo.bar.1');\n  });","file":"unit/lib/configuration/variables/humanize-property-path-keys.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"env\" source","suites":["test/unit/lib/configuration/variables/index.test.js"],"updatePoint":{"line":33,"column":33,"index":830},"line":33,"code":"  it('should resolve \"env\" source', () => expect(configuration.env).to.equal('foobar'));","file":"unit/lib/configuration/variables/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"file\" source","suites":["test/unit/lib/configuration/variables/index.test.js"],"updatePoint":{"line":34,"column":34,"index":920},"line":34,"code":"  it('should resolve \"file\" source', () => expect(configuration.file).to.deep.equal({\n    json: 'content'\n  }));","file":"unit/lib/configuration/variables/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"opt\" source","suites":["test/unit/lib/configuration/variables/index.test.js"],"updatePoint":{"line":37,"column":33,"index":1032},"line":37,"code":"  it('should resolve \"opt\" source', () => expect(configuration.opt).to.equal('bar'));","file":"unit/lib/configuration/variables/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"self\" source","suites":["test/unit/lib/configuration/variables/index.test.js"],"updatePoint":{"line":38,"column":34,"index":1119},"line":38,"code":"  it('should resolve \"self\" source', () => expect(configuration.self).to.equal('bar'));","file":"unit/lib/configuration/variables/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"strToBool\" source","suites":["test/unit/lib/configuration/variables/index.test.js"],"updatePoint":{"line":39,"column":39,"index":1212},"line":39,"code":"  it('should resolve \"strToBool\" source', () => expect(configuration.strToBool).to.equal(false));","file":"unit/lib/configuration/variables/index.test.js","skipped":false,"dir":"test"},{"name":"should match property directly","suites":["test/unit/lib/configuration/variables/is-property-resolved.test.js"],"updatePoint":{"line":21,"column":36,"index":588},"line":21,"code":"  it('should match property directly', () => {\n    expect(isPropertyResolved(variablesMeta, 'root')).to.be.false;\n    expect(isPropertyResolved(variablesMeta, 'childParent\\0child')).to.be.false;\n  });","file":"unit/lib/configuration/variables/is-property-path-resolved.test.js","skipped":false,"dir":"test"},{"name":"should match if children are behind variables","suites":["test/unit/lib/configuration/variables/is-property-resolved.test.js"],"updatePoint":{"line":25,"column":51,"index":804},"line":25,"code":"  it('should match if children are behind variables', () => {\n    expect(isPropertyResolved(variablesMeta, 'childParent')).to.be.false;\n  });","file":"unit/lib/configuration/variables/is-property-path-resolved.test.js","skipped":false,"dir":"test"},{"name":"should match if parent is behind variables","suites":["test/unit/lib/configuration/variables/is-property-resolved.test.js"],"updatePoint":{"line":28,"column":48,"index":943},"line":28,"code":"  it('should match if parent is behind variables', () => {\n    expect(isPropertyResolved(variablesMeta, 'parent\\0parentChild')).to.be.false;\n  });","file":"unit/lib/configuration/variables/is-property-path-resolved.test.js","skipped":false,"dir":"test"},{"name":"should not match not affected","suites":["test/unit/lib/configuration/variables/is-property-resolved.test.js"],"updatePoint":{"line":31,"column":35,"index":1077},"line":31,"code":"  it('should not match not affected', () => {\n    expect(isPropertyResolved(variablesMeta, 'rooto')).to.be.true;\n    expect(isPropertyResolved(variablesMeta, 'childParent\\0ok')).to.be.true;\n  });","file":"unit/lib/configuration/variables/is-property-path-resolved.test.js","skipped":false,"dir":"test"},{"name":"should not match not existing","suites":["test/unit/lib/configuration/variables/is-property-resolved.test.js"],"updatePoint":{"line":35,"column":35,"index":1273},"line":35,"code":"  it('should not match not existing', () => {\n    expect(isPropertyResolved(variablesMeta, 'elo')).to.be.true;\n    expect(isPropertyResolved(variablesMeta, 'childParent\\0none')).to.be.true;\n  });","file":"unit/lib/configuration/variables/is-property-path-resolved.test.js","skipped":false,"dir":"test"},{"name":"should support partially variable value at begin of a string","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":10,"column":68,"index":369},"line":10,"code":"    it('should support partially variable value at begin of a string', () => expect(parse('${type:address}foo')).to.deep.equal([{\n      start: 0,\n      end: 15,\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support partially variable value at end of a string","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":20,"column":66,"index":643},"line":20,"code":"    it('should support partially variable value at end of a string', () => expect(parse('foo${type:address}')).to.deep.equal([{\n      start: 3,\n      end: 18,\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support partially variable value in a middle of a string","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":30,"column":71,"index":922},"line":30,"code":"    it('should support partially variable value in a middle of a string', () => expect(parse('foo${type:address}bar')).to.deep.equal([{\n      start: 3,\n      end: 18,\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support type only notation","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":42,"column":41,"index":1191},"line":42,"code":"    it('should support type only notation', () => expect(parse('${type:}')).to.deep.equal([{\n      sources: [{\n        type: 'type'\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support type and address","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":49,"column":39,"index":1364},"line":49,"code":"    it('should support type and address', () => expect(parse('${type:address}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support type and address with colons","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":59,"column":51,"index":1625},"line":59,"code":"    it('should support type and address with colons', () => expect(parse('${type:address:with:colons}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address:with:colons'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support param","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":69,"column":28,"index":1874},"line":69,"code":"    it('should support param', () => expect(parse('${type(param)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support multiple params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":79,"column":38,"index":2116},"line":79,"code":"    it('should support multiple params', () => expect(parse('${type(param1, param2)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: 'param2'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support double quoted params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":91,"column":43,"index":2429},"line":91,"code":"    it('should support double quoted params', () => expect(parse('${type(param1, \",},${\\\\\"param2\", param3)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: ',},${\"param2'\n        }, {\n          value: 'param3'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support single quoted params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":105,"column":43,"index":2798},"line":105,"code":"    it('should support single quoted params', () => expect(parse(\"${type(param1, ',},${param2' )}\")).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: ',},${param2'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support number params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":117,"column":36,"index":3105},"line":117,"code":"    it('should support number params', () => expect(parse('${type(param1, 232, param3)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: 232\n        }, {\n          value: 'param3'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support boolean params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":131,"column":37,"index":3440},"line":131,"code":"    it('should support boolean params', () => expect(parse('${type(param1, true, param3)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: true\n        }, {\n          value: 'param3'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support null params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":145,"column":34,"index":3775},"line":145,"code":"    it('should support null params', () => expect(parse('${type(param1, null, param3) }')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param1'\n        }, {\n          value: null\n        }, {\n          value: 'param3'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support param and address","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":159,"column":40,"index":4109},"line":159,"code":"    it('should support param and address', () => expect(parse('${type(param):address}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }],\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support quoted address","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":172,"column":37,"index":4423},"line":172,"code":"    it('should support quoted address', () => expect(parse('${type(param):\",},${\\\\\"address\"}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }],\n        address: {\n          value: ',},${\"address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support single quoted address","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":185,"column":44,"index":4756},"line":185,"code":"    it('should support single quoted address', () => expect(parse(\"${type(param):'}$address' }\")).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }],\n        address: {\n          value: '}$address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support fallback sources","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":198,"column":39,"index":5112},"line":198,"code":"    it('should support fallback sources', () => expect(parse('${type1(param1), type2(param2):\"address2\", type3:, type4:address4}')).to.deep.equal([{\n      sources: [{\n        type: 'type1',\n        params: [{\n          value: 'param1'\n        }]\n      }, {\n        type: 'type2',\n        params: [{\n          value: 'param2'\n        }],\n        address: {\n          value: 'address2'\n        }\n      }, {\n        type: 'type3'\n      }, {\n        type: 'type4',\n        address: {\n          value: 'address4'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support double quoted string as fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":223,"column":62,"index":5707},"line":223,"code":"    it('should support double quoted string as fallback source', () => expect(parse('${type(param), \"foo, bar\"}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }, {\n        value: 'foo, bar'\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support single quoted string as fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":235,"column":62,"index":6026},"line":235,"code":"    it('should support single quoted string as fallback source', () => {\n      expect(parse(\"${type(param), 'foo, bar' }\")).to.deep.equal([{\n        sources: [{\n          type: 'type',\n          params: [{\n            value: 'param'\n          }]\n        }, {\n          value: 'foo, bar'\n        }]\n      }]);\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support number as a fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":249,"column":50,"index":6359},"line":249,"code":"    it('should support number as a fallback source', () => expect(parse('${type(param), 232}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }, {\n        value: 232\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support bolean \"true\" as a fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":261,"column":57,"index":6652},"line":261,"code":"    it('should support bolean \"true\" as a fallback source', () => expect(parse('${type(param), true}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }, {\n        value: true\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support bolean \"false\" as a fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":273,"column":58,"index":6950},"line":273,"code":"    it('should support bolean \"false\" as a fallback source', () => expect(parse('${type(param), false }')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }, {\n        value: false\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support null as a fallback source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":285,"column":48,"index":7239},"line":285,"code":"    it('should support null as a fallback source', () => expect(parse('${type(param), null}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: 'param'\n        }]\n      }, {\n        value: null\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support empty parens","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":297,"column":35,"index":7501},"line":297,"code":"    it('should support empty parens', () => expect(parse('${type()}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: []\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore any whitespace between brackets","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":305,"column":53,"index":7705},"line":305,"code":"    it('should ignore any whitespace between brackets', () => expect(parse('${type(\\t)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: []\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support skipping arguments","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":313,"column":41,"index":7899},"line":313,"code":"    it('should support skipping arguments', () => expect(parse('${type(,,)}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: null\n        }, {\n          value: null\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support variables in params","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":325,"column":42,"index":8228},"line":325,"code":"    it('should support variables in params', () => expect(parse('${type(${innerType(innerParam, ${deep:}):innerAddress}, foo${bar:}): address}')).to.deep.equal([{\n      sources: [{\n        type: 'type',\n        params: [{\n          value: '${innerType(innerParam, ${deep:}):innerAddress}',\n          variables: [{\n            sources: [{\n              type: 'innerType',\n              params: [{\n                value: 'innerParam'\n              }, {\n                value: '${deep:}',\n                variables: [{\n                  sources: [{\n                    type: 'deep'\n                  }]\n                }]\n              }],\n              address: {\n                value: 'innerAddress'\n              }\n            }]\n          }]\n        }, {\n          value: 'foo${bar:}',\n          variables: [{\n            start: 3,\n            end: 10,\n            sources: [{\n              type: 'bar'\n            }]\n          }]\n        }],\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support variables in address","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":366,"column":43,"index":9361},"line":366,"code":"    it('should support variables in address', () => {\n      expect(parse('${type(param):${innerType(innerParam):innerAddress}}')).to.deep.equal([{\n        sources: [{\n          type: 'type',\n          params: [{\n            value: 'param'\n          }],\n          address: {\n            value: '${innerType(innerParam):innerAddress}',\n            variables: [{\n              sources: [{\n                type: 'innerType',\n                params: [{\n                  value: 'innerParam'\n                }],\n                address: {\n                  value: 'innerAddress'\n                }\n              }]\n            }]\n          }\n        }]\n      }]);\n      expect(parse('${type(param):foo${innerType(innerParam)}}')).to.deep.equal([{\n        sources: [{\n          type: 'type',\n          params: [{\n            value: 'param'\n          }],\n          address: {\n            value: 'foo${innerType(innerParam)}',\n            variables: [{\n              start: 3,\n              end: 27,\n              sources: [{\n                type: 'innerType',\n                params: [{\n                  value: 'innerParam'\n                }]\n              }]\n            }]\n          }\n        }]\n      }]);\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support dots in type notation","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":413,"column":44,"index":10598},"line":413,"code":"    it('should support dots in type notation', () => expect(parse('${type.dot(param)}')).to.deep.equal([{\n      sources: [{\n        type: 'type.dot',\n        params: [{\n          value: 'param'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support hyphens in type notation","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":423,"column":47,"index":10858},"line":423,"code":"    it('should support hyphens in type notation', () => expect(parse('${type.us-east-1(param)}')).to.deep.equal([{\n      sources: [{\n        type: 'type.us-east-1',\n        params: [{\n          value: 'param'\n        }]\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support variable nested in foreign variable","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":433,"column":58,"index":11140},"line":433,"code":"    it('should support variable nested in foreign variable', () => expect(parse('${AWS::${type:address}}')).to.deep.equal([{\n      start: 7,\n      end: 22,\n      sources: [{\n        type: 'type',\n        address: {\n          value: 'address'\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support multiple variables in a value","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":445,"column":52,"index":11453},"line":445,"code":"    it('should support multiple variables in a value', () => expect(parse('${type1:}elo${type2:}')).to.deep.equal([{\n      start: 0,\n      end: 9,\n      sources: [{\n        type: 'type1'\n      }]\n    }, {\n      start: 12,\n      end: 21,\n      sources: [{\n        type: 'type2'\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should recognize variables in address, if it's followed by source","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":461,"column":73,"index":11852},"line":461,"code":"    it(\"should recognize variables in address, if it's followed by source\", () => expect(parse('${s:${s:}, 1}')).to.deep.equal([{\n      sources: [{\n        type: 's',\n        address: {\n          value: '${s:}',\n          variables: [{\n            sources: [{\n              type: 's'\n            }]\n          }]\n        }\n      }, {\n        value: 1\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should resolve nested sources, when at least one parent source was resolved","suites":["test/unit/lib/configuration/variables/parse.test.js","Valid"],"updatePoint":{"line":479,"column":83,"index":12314},"line":479,"code":"    it('should resolve nested sources, when at least one parent source was resolved', () => expect(parse('${s:, s:${s:}}')).to.deep.equal([{\n      sources: [{\n        type: 's'\n      }, {\n        type: 's',\n        address: {\n          value: '${s:}',\n          variables: [{\n            sources: [{\n              type: 's'\n            }]\n          }]\n        }\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid configuration in params","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":497,"column":53,"index":12745},"line":497,"code":"    it('should reject invalid configuration in params', () => expect(() => parse('${type(${invalid.notation}):address}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_TYPE'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid configuration in address","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":500,"column":54,"index":13004},"line":500,"code":"    it('should reject invalid configuration in address', () => expect(() => parse('${type(params):${innerType(innerParam):${sdfs.fefef}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_TYPE'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should detect not closed variable","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":503,"column":41,"index":13228},"line":503,"code":"    it('should detect not closed variable', () => {\n      expect(() => parse('${type:address')).to.throw(ServerlessError).with.property('code', 'UNTERMINATED_VARIABLE');\n      expect(() => parse('${type(foo)')).to.throw(ServerlessError).with.property('code', 'UNTERMINATED_VARIABLE');\n      expect(() => parse('${s:, s:${s:}')).to.throw(ServerlessError).with.property('code', 'UNTERMINATED_VARIABLE');\n      expect(() => parse('${s:, s:${s:')).to.throw(ServerlessError).with.property('code', 'UNTERMINATED_VARIABLE');\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid string literal","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":511,"column":44,"index":13779},"line":511,"code":"    it('should reject invalid string literal', () => expect(() => parse('${type(\"\\\\u\")}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_STRING_LITERAL'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid source literal","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":514,"column":44,"index":13981},"line":514,"code":"    it('should reject invalid source literal', () => expect(() => parse('${type:foo, elo}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_LITERAL_SOURCE'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject missing colon for address","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":517,"column":47,"index":14188},"line":517,"code":"    it('should reject missing colon for address', () => expect(() => parse(\"${type('foo')bar}\")).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_ADDRESS'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid address configuration","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":520,"column":51,"index":14398},"line":520,"code":"    it('should reject invalid address configuration', () => expect(() => parse('${type:\"address\"marko}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_ADDRESS'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid following source","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":526,"column":46,"index":14678},"line":526,"code":"    it('should reject invalid following source', () => {\n      expect(() => parse('${type:foo, ___}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE');\n      expect(() => parse('${type:foo, --}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_LITERAL_SOURCE');\n      expect(() => parse('${type:foo, 000:}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE');\n      expect(() => parse('${type:foo, 000()}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE');\n      expect(() => parse('${type:foo, aa--}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_LITERAL_SOURCE');\n      expect(() => parse('${type:foo, aa__}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE');\n      expect(() => parse('${type:foo,\"dev\",20}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE');\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject nested foreign variables","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":538,"column":46,"index":15684},"line":538,"code":"    it('should reject nested foreign variables', () => {\n      expect(() => parse('${type(${AWS::Region})}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_TYPE');\n      expect(() => parse('${type(${foo::Region})}')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_ADDRESS');\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject closing bracket at unexpected location","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":545,"column":60,"index":16062},"line":545,"code":"    it('should reject closing bracket at unexpected location', () => {\n      expect(() => parse('${type(foo})')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_PARAM');\n      expect(() => parse('${type(foo,})')).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_PARAM');\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should reject unexpected content after param string","suites":["test/unit/lib/configuration/variables/parse.test.js","Invalid"],"updatePoint":{"line":551,"column":59,"index":16401},"line":551,"code":"    it('should reject unexpected content after param string', () => expect(() => parse(\"${type('foo'bar)}\")).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_PARAM'));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore empty value","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":555,"column":33,"index":16607},"line":555,"code":"    it('should ignore empty value', () => expect(parse('${}')).to.equal(null));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore nested foreign notations","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":558,"column":46,"index":16726},"line":558,"code":"    it('should ignore nested foreign notations', () => expect(parse('${${AWS::Region}}')).to.equal(null));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore just type name string","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":561,"column":43,"index":16846},"line":561,"code":"    it('should ignore just type name string', () => expect(parse('${type}')).to.equal(null));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore double clon vars ","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":565,"column":39,"index":16981},"line":565,"code":"    it('should ignore double clon vars ', () => {\n      expect(parse('${AWS::Region}')).to.equal(null);\n      expect(parse('${foo::Region}')).to.equal(null);\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore AWS CF references","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":572,"column":39,"index":17202},"line":572,"code":"    it('should ignore AWS CF references', () => {\n      expect(parse('${Database}')).to.equal(null);\n      expect(parse('foo ${stageVariables.stageName} var')).to.equal(null);\n    });","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should ignore nested not supported notations","suites":["test/unit/lib/configuration/variables/parse.test.js","Foreign"],"updatePoint":{"line":578,"column":52,"index":17431},"line":578,"code":"    it('should ignore nested not supported notations', () => expect(parse('fo${bla${foo}}o  ${so,ur${inner.type}ce} var')).to.equal(null));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should return null","suites":["test/unit/lib/configuration/variables/parse.test.js","Not used"],"updatePoint":{"line":582,"column":26,"index":17600},"line":582,"code":"    it('should return null', () => expect(parse('fo$o b$$ar ()')).to.equal(null));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should support escape character","suites":["test/unit/lib/configuration/variables/parse.test.js","Not used"],"updatePoint":{"line":585,"column":39,"index":17716},"line":585,"code":"    it('should support escape character', () => expect(parse('e\\\\${s:}n\\\\$${s:}qe\\\\\\\\\\\\${s:}qn\\\\\\\\${s:}')).to.deep.equal([{\n      start: 1,\n      end: 3,\n      value: '$'\n    }, {\n      start: 10,\n      end: 15,\n      sources: [{\n        type: 's'\n      }]\n    }, {\n      start: 17,\n      end: 21,\n      value: '\\\\$'\n    }, {\n      start: 27,\n      end: 29,\n      value: '\\\\'\n    }, {\n      start: 29,\n      end: 34,\n      sources: [{\n        type: 's'\n      }]\n    }]));","file":"unit/lib/configuration/variables/parse.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables map","suites":["test/unit/lib/configuration/variables/resolve-meta.test.js"],"updatePoint":{"line":8,"column":34,"index":255},"line":8,"code":"  it('should resolve variables map', () => {\n    const meta = Array.from(resolveMeta({\n      string: 'bar',\n      number: 12,\n      boolean: true,\n      array: ['bar', 'foo${marko:}', [12, {}, '${nestedArray:}']],\n      object: {\n        var: '${var:}',\n        other: 'strg',\n        nested: {\n          number: 12,\n          var: '${elo:}',\n          error: 'sdf${fpp:'\n        }\n      },\n      var: '${halo()}'\n    }));\n\n    // Normalize (workaround for lack of property matchers on chai side)\n    for (const [, value] of meta) {\n      if (value.error) value.error = value.error.code;\n    }\n    expect(meta).to.deep.equal([[`array${'\\0'}1`, {\n      value: 'foo${marko:}',\n      variables: [{\n        start: 3,\n        end: 12,\n        sources: [{\n          type: 'marko'\n        }]\n      }]\n    }], [`array${'\\0'}2${'\\0'}2`, {\n      value: '${nestedArray:}',\n      variables: [{\n        sources: [{\n          type: 'nestedArray'\n        }]\n      }]\n    }], ['object\\0var', {\n      value: '${var:}',\n      variables: [{\n        sources: [{\n          type: 'var'\n        }]\n      }]\n    }], ['object\\0nested\\0var', {\n      value: '${elo:}',\n      variables: [{\n        sources: [{\n          type: 'elo'\n        }]\n      }]\n    }], ['object\\0nested\\0error', {\n      value: 'sdf${fpp:',\n      error: 'UNTERMINATED_VARIABLE'\n    }], ['var', {\n      value: '${halo()}',\n      variables: [{\n        sources: [{\n          type: 'halo',\n          params: []\n        }]\n      }]\n    }]]);\n  });","file":"unit/lib/configuration/variables/resolve-meta.test.js","skipped":false,"dir":"test"},{"name":"should resolve all not resolved sources","suites":["test/unit/lib/configuration/variables/resolve-unresolved-source-types.test.js"],"updatePoint":{"line":48,"column":45,"index":1927},"line":48,"code":"  it('should resolve all not resolved sources', () => {\n    expect(Array.from(resultMap).map(([name, set]) => [name, Array.from(set).sort()])).to.deep.equal([['unrecognized', ['unrecognized', 'unrecognizedInParens', 'unrecognizedInAddress', 'unrecognizedInParensAndAddress', 'otherUnrecognizedFallback', 'deep\\0unrecognized', 'deep\\0unrecognizedInParens', 'deep\\0unrecognizedInAddress', 'deep\\0unrecognizedInParensAndAddress', 'deep\\0otherUnrecognizedFallback'].sort()], ['unrecognized2', ['unrecognizedInParens', 'unrecognizedInParensAndAddress', 'deep\\0unrecognizedInParens', 'deep\\0unrecognizedInParensAndAddress'].sort()], ['recognized', ['unrecognizedInAddress', 'unrecognizedInParens', 'unrecognizedInParensAndAddress', 'deep\\0unrecognizedInAddress', 'deep\\0unrecognizedInParens', 'deep\\0unrecognizedInParensAndAddress'].sort()], ['unrecognized3', ['unrecognizedInParensAndAddress', 'deep\\0unrecognizedInParensAndAddress'].sort()]]);\n  });","file":"unit/lib/configuration/variables/resolve-unresolved-source-types.test.js","skipped":false,"dir":"test"},{"name":"should resolve non-string variable","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":276,"column":42,"index":9806},"line":276,"code":"    it('should resolve non-string variable', () => {\n      expect(configuration.direct).to.equal(234);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variable concatenated with string value","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":279,"column":62,"index":9937},"line":279,"code":"    it('should resolve variable concatenated with string value', () => {\n      expect(configuration.withString).to.equal('foo234');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should pass params to source resolvers","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":282,"column":46,"index":10061},"line":282,"code":"    it('should pass params to source resolvers', () => {\n      expect(configuration.foo.params).to.equal('2marap|1marap');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should pass address to source resolvers","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":285,"column":47,"index":10193},"line":285,"code":"    it('should pass address to source resolvers', () => {\n      expect(configuration.address).to.equal('footluser-sserdda');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables in params","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":288,"column":42,"index":10321},"line":288,"code":"    it('should resolve variables in params', () => {\n      expect(configuration.foo.varParam).to.equal('432');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables in address","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":291,"column":43,"index":10441},"line":291,"code":"    it('should resolve variables in address', () => {\n      expect(configuration.varAddress).to.equal('foo234');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should allow sources to get values of other properties","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":294,"column":62,"index":10581},"line":294,"code":"    it('should allow sources to get values of other properties', () => {\n      expect(configuration.property).to.equal(234);\n      expect(configuration.otherProperty).to.equal('foo234');\n      expect(configuration.static).to.equal(true);\n      expect(configuration.deepProperty).to.deep.equal({\n        params: '2marap|1marap',\n        varParam: '432'\n      });\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should clear escapes","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":303,"column":28,"index":10917},"line":303,"code":"    it('should clear escapes', () => {\n      expect(configuration.escape).to.equal('e${sourceDirect:}n\\\\$footluser-sserddaqe\\\\${sourceProperty(direct)}qn\\\\footluser-sserdda');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should support incomplete sources","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":306,"column":41,"index":11114},"line":306,"code":"    it('should support incomplete sources', () => {\n      expect(variablesMeta.get('incomplete')).to.have.property('variables');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark with error missing source without fallback","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":309,"column":62,"index":11272},"line":309,"code":"    it('should mark with error missing source without fallback', () => {\n      const valueMeta = variablesMeta.get('missing');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('MISSING_VARIABLE_RESULT');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should support fallback on missing source","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":314,"column":49,"index":11525},"line":314,"code":"    it('should support fallback on missing source', () => {\n      expect(configuration.missingFallback).to.equal('234elofoo');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should report not existing property with null","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":317,"column":53,"index":11664},"line":317,"code":"    it('should report not existing property with null', () => {\n      expect(configuration.notExistingProperty).to.equal('notExistingFallback');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should support `null` fallback on missing source","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":320,"column":56,"index":11820},"line":320,"code":"    it('should support `null` fallback on missing source', () => {\n      expect(configuration.missingFallbackNull).to.equal(null);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables in returned results","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":323,"column":52,"index":11955},"line":323,"code":"    it('should resolve variables in returned results', () => {\n      expect(configuration.resolvesResultVariablesObject).to.deep.equal({\n        foo: 234\n      });\n      expect(configuration.resolvesResultVariablesArray).to.deep.equal([1, 234]);\n      expect(configuration.resolvesResultVariablesString).to.equal(234);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables in resolved strings which are subject to concatenation","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":330,"column":87,"index":12317},"line":330,"code":"    it('should resolve variables in resolved strings which are subject to concatenation', () => {\n      expect(configuration.resolveDeepVariablesConcat).to.equal('234foo234');\n      expect(configuration.resolveDeepVariablesConcatInParam).to.equal('432oof432');\n      expect(configuration.resolveDeepVariablesConcatInAddress).to.equal('432oof432');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should provide working resolveVariablesInString util","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":335,"column":60,"index":12646},"line":335,"code":"    it('should provide working resolveVariablesInString util', () => {\n      expect(configuration.resolveVariablesInString).to.deep.equal({\n        params: '2marap|1marap',\n        varParam: '432'\n      });\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve same sources across resolution batches without shared caching","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":343,"column":84,"index":12946},"line":343,"code":"    it('should resolve same sources across resolution batches without shared caching', () => {\n      expect(configuration.sharedSourceResolution1).to.deep.equal({\n        sharedFinal: 'foo',\n        sharedInner: 'foo'\n      });\n      expect(configuration.sharedSourceResolution2).to.equal('foo');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve same properties across resolution batches without shared caching","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":352,"column":87,"index":13315},"line":352,"code":"    it('should resolve same properties across resolution batches without shared caching', () => {\n      expect(configuration.sharedPropertyResolution1).to.deep.equal({\n        sharedFinal: 'foo',\n        sharedInner: 'foo'\n      });\n      expect(configuration.sharedSourceResolution2).to.equal('foo');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should handle gentle parallel resolution of same variable via different resolution patches","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":361,"column":98,"index":13698},"line":361,"code":"    it('should handle gentle parallel resolution of same variable via different resolution patches', () => {\n      expect(configuration.sharedPropertyRaceCondition1).to.deep.equal({\n        sharedFinal: 'foo',\n        sharedInner: 'foo'\n      });\n      expect(configuration.sharedPropertyRaceCondition2).to.equal('foo');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should not resolve variables for unrecognized sources","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":368,"column":61,"index":13990},"line":368,"code":"    it('should not resolve variables for unrecognized sources', () => {\n      expect(variablesMeta.get('nestUnrecognized\\0unrecognized')).to.have.property('variables');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error or non stringifiable value as part of a string","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":371,"column":67,"index":14173},"line":371,"code":"    it('should error or non stringifiable value as part of a string', () => {\n      const valueMeta = variablesMeta.get('nonStringStringPart');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('NON_STRING_VARIABLE_RESULT');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark errored resolution in param with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":376,"column":58,"index":14450},"line":376,"code":"    it('should mark errored resolution in param with error', () => {\n      const valueMeta = variablesMeta.get('erroredParam');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark errored resolution in address with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":381,"column":60,"index":14721},"line":381,"code":"    it('should mark errored resolution in address with error', () => {\n      const valueMeta = variablesMeta.get('nestErrored\\0erroredAddress');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark ServerlessError errored resolution with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":386,"column":65,"index":15012},"line":386,"code":"    it('should mark ServerlessError errored resolution with error', () => {\n      const valueMeta = variablesMeta.get('erroredSourceServerlessError');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark non ServerlessError errored resolution with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":391,"column":69,"index":15308},"line":391,"code":"    it('should mark non ServerlessError errored resolution with error', () => {\n      const valueMeta = variablesMeta.get('erroredSourceNonServerlessError');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark non error exception errored resolution with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":396,"column":69,"index":15607},"line":396,"code":"    it('should mark non error exception errored resolution with error', () => {\n      const valueMeta = variablesMeta.get('erroredSourceNonErrorException');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark json result with circular references with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":401,"column":67,"index":15903},"line":401,"code":"    it('should mark json result with circular references with error', () => {\n      const valueMeta = variablesMeta.get('invalidResultCircular');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark non json result with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":406,"column":46,"index":16169},"line":406,"code":"    it('should mark non json result with error', () => {\n      const valueMeta = variablesMeta.get('invalidResultNonJson');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark circular dependency among properties with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":411,"column":67,"index":16455},"line":411,"code":"    it('should mark circular dependency among properties with error', () => {\n      const valueMeta = variablesMeta.get('propertyCircularA');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error on infinite variables resolution recursion","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":416,"column":63,"index":16734},"line":416,"code":"    it('should error on infinite variables resolution recursion', () => {\n      const valueMeta = variablesMeta.get('infiniteDeepVariablesConcat');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('EXCESSIVE_RESOLVED_VARIABLES_NEST_DEPTH');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark deep circular dependency among properties with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":421,"column":72,"index":17046},"line":421,"code":"    it('should mark deep circular dependency among properties with error', () => {\n      const valueMeta = variablesMeta.get('propertyDeepCircularA');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark property root reference with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":426,"column":54,"index":17320},"line":426,"code":"    it('should mark property root reference with error', () => {\n      const valueMeta = variablesMeta.get('propertyRoot');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should not resolve dependency on unresolved property","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":431,"column":60,"index":17591},"line":431,"code":"    it('should not resolve dependency on unresolved property', () => {\n      const valueMeta = variablesMeta.get('deepPropertyUnrecognized');\n      expect(valueMeta).to.have.property('variables');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should not resolve dependencies of unrecognized source","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":435,"column":62,"index":17798},"line":435,"code":"    it('should not resolve dependencies of unrecognized source', () => {\n      const valueMeta = variablesMeta.get('recognizedInUnrecognized');\n      expect(valueMeta.variables[0].sources[0].params[0]).to.have.property('variables');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should mark dependency on errored property with error","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":439,"column":61,"index":18038},"line":439,"code":"    it('should mark dependency on errored property with error', () => {\n      const valueMeta = variablesMeta.get('deepPropertyErrored');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error on infinite resolution recursion","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":444,"column":53,"index":18309},"line":444,"code":"    it('should error on infinite resolution recursion', () => {\n      const valueMeta = variablesMeta.get(`infiniteResolutionRecursion${'\\0nest'.repeat(10)}`);\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('EXCESSIVE_RESOLVED_PROPERTIES_NEST_DEPTH');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error on invalid variable notation in returned result","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":449,"column":68,"index":18640},"line":449,"code":"    it('should error on invalid variable notation in returned result', () => {\n      const valueMeta = variablesMeta.get('resolvesResultVariablesStringInvalid');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('UNTERMINATED_VARIABLE');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error on invalid source resolution resolt","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":454,"column":56,"index":18927},"line":454,"code":"    it('should error on invalid source resolution resolt', () => {\n      const valueMeta = variablesMeta.get('invalidResultValue');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should allow to re-resolve fulfilled sources","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":459,"column":52,"index":19196},"line":459,"code":"    it('should allow to re-resolve fulfilled sources', async () => {\n      await resolve({\n        serviceDir: process.cwd(),\n        configuration,\n        variablesMeta,\n        sources: {\n          ...sources,\n          sourceIncomplete: {\n            resolve: () => ({\n              value: 'complete'\n            })\n          }\n        },\n        options: {},\n        fulfilledSources: new Set()\n      });\n      expect(configuration.incomplete).to.equal('234elocomplete');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should remove from variables meta data on resolved properties","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":477,"column":69,"index":19698},"line":477,"code":"    it('should remove from variables meta data on resolved properties', () => {\n      expect(Array.from(variablesMeta.keys())).to.deep.equal(['deepPropertyUnrecognized', 'deepPropertyErrored', 'propertyUnrecognized', 'propertyErrored', 'propertyCircularA', 'propertyCircularB', 'propertyDeepCircularA', 'propertyDeepCircularB', 'propertyDeepCircularC', 'propertyRoot', 'resolvesResultVariablesStringInvalid', 'infiniteDeepVariablesConcat', 'resolvesVariablesInvalid1', 'resolvesVariablesInvalid2', 'missing', 'nonStringStringPart', 'nestUnrecognized\\0unrecognized', 'recognizedInUnrecognized', 'erroredParam', 'nestErrored\\0erroredAddress', 'erroredSourceServerlessError', 'erroredSourceNonServerlessError', 'erroredSourceNonErrorException', 'invalidResultCircular', 'invalidResultNonJson', 'invalidResultNonJsonCircular', 'invalidResultValue', 'nullWithCustomErrorMessage', `infiniteResolutionRecursion${'\\0nest'.repeat(10)}`]);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should correctly record encountered variable sources","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution"],"updatePoint":{"line":480,"column":60,"index":20627},"line":480,"code":"    it('should correctly record encountered variable sources', () => {\n      expect(Array.from(variableSourcesInConfig)).to.deep.equal(['sourceParam', 'sourceDirect', 'sourceAddress', 'sourceProperty', 'sourceResultVariables', 'sourceInfiniteString', 'sourceResolveVariablesInString', 'sourceResolveVariable', 'sourceIncomplete', 'sourceMissing', 'sourceUnrecognized', 'sourceError', 'sourceInfinite', 'sourceShared', 'sourceSharedProperty', 'sourceSharedRaceCondition', 'sourceDeferredNull', 'sourceDirectNull']);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve variable","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution","\"resolveVariable\" source util"],"updatePoint":{"line":484,"column":33,"index":21177},"line":484,"code":"      it('should resolve variable', () => {\n        expect(configuration.resolvesVariables).to.equal('432');\n      });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should support multiple sources","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution","\"resolveVariable\" source util"],"updatePoint":{"line":487,"column":41,"index":21304},"line":487,"code":"      it('should support multiple sources', () => {\n        expect(configuration.resolvesVariablesFallback).to.equal(null);\n      });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should error on invalid input","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution","\"resolveVariable\" source util"],"updatePoint":{"line":490,"column":39,"index":21436},"line":490,"code":"      it('should error on invalid input', () => {\n        let valueMeta = variablesMeta.get('resolvesVariablesInvalid1');\n        expect(valueMeta).to.not.have.property('variables');\n        expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n        valueMeta = variablesMeta.get('resolvesVariablesInvalid2');\n        expect(valueMeta).to.not.have.property('variables');\n        expect(valueMeta.error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n      });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should recognize custom error message for null values","suites":["test/unit/lib/configuration/variables/resolve.test.js","Complete resolution","\"resolveVariable\" source util"],"updatePoint":{"line":499,"column":61,"index":21940},"line":499,"code":"    it('should recognize custom error message for null values', () => {\n      const valueMeta = variablesMeta.get('nullWithCustomErrorMessage');\n      expect(valueMeta).to.not.have.property('variables');\n      expect(valueMeta.error.code).to.equal('MISSING_VARIABLE_RESULT');\n      expect(valueMeta.error.message).to.include('Custom error message from source');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve directly pointed property","suites":["test/unit/lib/configuration/variables/resolve.test.js","Partial resolution"],"updatePoint":{"line":551,"column":48,"index":23489},"line":551,"code":"    it('should resolve directly pointed property', () => {\n      expect(configuration.direct).to.equal(234);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve dependency of pointed property","suites":["test/unit/lib/configuration/variables/resolve.test.js","Partial resolution"],"updatePoint":{"line":554,"column":53,"index":23611},"line":554,"code":"    it('should resolve dependency of pointed property', () => {\n      expect(configuration.behindVar).to.equal(234);\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve parent of pointed property","suites":["test/unit/lib/configuration/variables/resolve.test.js","Partial resolution"],"updatePoint":{"line":557,"column":49,"index":23732},"line":557,"code":"    it('should resolve parent of pointed property', () => {\n      expect(configuration.childParent.child).to.equal('marko');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should resolve child of pointed property","suites":["test/unit/lib/configuration/variables/resolve.test.js","Partial resolution"],"updatePoint":{"line":560,"column":48,"index":23864},"line":560,"code":"    it('should resolve child of pointed property', () => {\n      expect(configuration.parent).to.deep.equal({\n        parentChild: 234\n      });\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should note resolve not pointed properties","suites":["test/unit/lib/configuration/variables/resolve.test.js","Partial resolution"],"updatePoint":{"line":565,"column":50,"index":24019},"line":565,"code":"    it('should note resolve not pointed properties', () => {\n      const valueMeta = variablesMeta.get('unresolved');\n      expect(valueMeta).to.have.property('variables');\n    });","file":"unit/lib/configuration/variables/resolve.test.js","skipped":false,"dir":"test"},{"name":"should store message","suites":["test/unit/lib/configuration/variables/source-resolution-error.test.js"],"updatePoint":{"line":8,"column":26,"index":287},"line":8,"code":"  it('should store message', () => {\n    const error = new VariableSourceResolutionError('Some message');\n    expect(error.message).to.be.equal('Some message');\n  });","file":"unit/lib/configuration/variables/source-resolution-error.test.js","skipped":false,"dir":"test"},{"name":"should expose constructor name","suites":["test/unit/lib/configuration/variables/source-resolution-error.test.js"],"updatePoint":{"line":12,"column":36,"index":464},"line":12,"code":"  it('should expose constructor name', () => {\n    const error = new VariableSourceResolutionError('Some message');\n    expect(error.name).to.be.equal('VariableSourceResolutionError');\n  });","file":"unit/lib/configuration/variables/source-resolution-error.test.js","skipped":false,"dir":"test"},{"name":"should store code","suites":["test/unit/lib/configuration/variables/source-resolution-error.test.js"],"updatePoint":{"line":16,"column":23,"index":642},"line":16,"code":"  it('should store code', () => {\n    const error = new VariableSourceResolutionError('Some message', 'ERROR_CODE');\n    expect(error.code).to.be.equal('ERROR_CODE');\n  });","file":"unit/lib/configuration/variables/source-resolution-error.test.js","skipped":false,"dir":"test"},{"name":"message should always resolve as string","suites":["test/unit/lib/configuration/variables/source-resolution-error.test.js"],"updatePoint":{"line":20,"column":45,"index":837},"line":20,"code":"  it('message should always resolve as string', () => {\n    const error = new VariableSourceResolutionError({});\n    expect(typeof error.message).to.be.equal('string');\n  });","file":"unit/lib/configuration/variables/source-resolution-error.test.js","skipped":false,"dir":"test"},{"name":"should have stack trace","suites":["test/unit/lib/configuration/variables/source-resolution-error.test.js"],"updatePoint":{"line":24,"column":29,"index":996},"line":24,"code":"  it('should have stack trace', () => {\n    function testStackFrame() {\n      throw new VariableSourceResolutionError('Some message');\n    }\n    try {\n      testStackFrame();\n    } catch (error) {\n      expect(error.stack).to.have.string('testStackFrame');\n    }\n  });","file":"unit/lib/configuration/variables/source-resolution-error.test.js","skipped":false,"dir":"test"},{"name":"should resolve environment variable","suites":["test/unit/lib/configuration/variables/sources/env.test.js"],"updatePoint":{"line":37,"column":41,"index":1249},"line":37,"code":"  it('should resolve environment variable', () => expect(configuration.env).to.equal('foobar'));","file":"unit/lib/configuration/variables/sources/env.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing environment variable","suites":["test/unit/lib/configuration/variables/sources/env.test.js"],"updatePoint":{"line":38,"column":57,"index":1362},"line":38,"code":"  it('should resolve null on missing environment variable', () => expect(configuration.envMissing).to.equal('fallback'));","file":"unit/lib/configuration/variables/sources/env.test.js","skipped":false,"dir":"test"},{"name":"should resolve environment variable that is empty","suites":["test/unit/lib/configuration/variables/sources/env.test.js"],"updatePoint":{"line":39,"column":55,"index":1482},"line":39,"code":"  it('should resolve environment variable that is empty', () => expect(configuration.envEmpty).to.equal(''));","file":"unit/lib/configuration/variables/sources/env.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address argument","suites":["test/unit/lib/configuration/variables/sources/env.test.js"],"updatePoint":{"line":40,"column":58,"index":1595},"line":40,"code":"  it('should report with an error missing address argument', () => expect(variablesMeta.get('noAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/env.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address argument","suites":["test/unit/lib/configuration/variables/sources/env.test.js"],"updatePoint":{"line":41,"column":63,"index":1757},"line":41,"code":"  it('should report with an error a non-string address argument', () => expect(variablesMeta.get('nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/env.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"yaml\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":69,"column":40,"index":3443},"line":69,"code":"  it('should resolve \"yaml\" file sources', () => expect(configuration.yaml).to.deep.equal({\n    result: 'yaml'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"yml\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":72,"column":39,"index":3560},"line":72,"code":"  it('should resolve \"yml\" file sources', () => expect(configuration.yml).to.deep.equal({\n    result: 'yml'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"json\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":75,"column":40,"index":3676},"line":75,"code":"  it('should resolve \"json\" file sources', () => expect(configuration.json).to.deep.equal({\n    result: 'json'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"tfstate\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":78,"column":43,"index":3797},"line":78,"code":"  it('should resolve \"tfstate\" file sources', () => expect(configuration.tfstate).to.deep.equal({\n    result: 'tfstate'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"js\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":81,"column":38,"index":3919},"line":81,"code":"  it('should resolve \"js\" file sources', () => expect(configuration.js).to.deep.equal({\n    result: 'js'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"cjs\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":84,"column":39,"index":4032},"line":84,"code":"  it('should resolve \"cjs\" file sources', () => expect(configuration.cjs).to.deep.equal({\n    result: 'cjs'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support function resolvers in \"js\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":87,"column":60,"index":4168},"line":87,"code":"  it('should support function resolvers in \"js\" file sources', () => expect(configuration.jsFunction).to.deep.equal({\n    result: 'js-function'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support function property resolvers in \"js\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":90,"column":69,"index":4328},"line":90,"code":"  it('should support function property resolvers in \"js\" file sources', () => expect(configuration.jsPropertyFunction).to.deep.equal({\n    result: 'js-property-function'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support promise property resolvers in \"js\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":93,"column":68,"index":4504},"line":93,"code":"  it('should support promise property resolvers in \"js\" file sources', () => expect(configuration.jsFilePropertyPromise).to.deep.equal({\n    result: 'js-property-promise'\n  }));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolves properties on objects returned by function property resolvers in \"js\" file sources","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":96,"column":104,"index":4718},"line":96,"code":"  it('should resolves properties on objects returned by function property resolvers in \"js\" file sources', () => expect(configuration.jsPropertyFunctionProperty).to.equal('js-property-function'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support \"address\" argument","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":97,"column":39,"index":4850},"line":97,"code":"  it('should support \"address\" argument', () => expect(configuration.addressSupport).to.equal('json'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support internal variable resolution","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":98,"column":49,"index":4964},"line":98,"code":"  it('should support internal variable resolution', () => {\n    expect(configuration.jsFunctionResolveVariable).to.deep.equal({\n      varResult: {\n        result: 'yaml'\n      }\n    });\n    expect(configuration.jsPropertyFunctionResolveVariable).to.deep.equal({\n      varResult: {\n        result: 'json'\n      }\n    });\n    expect(configuration.jsFunctionResolveManyVariables).to.deep.equal({\n      varResult: {\n        result: ['yml', 'yml', 'yml', 'yml', 'yml', 'yml', 'yml', 'yml', 'yml', 'yml']\n      }\n    });\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables across address resolution","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":115,"column":56,"index":5492},"line":115,"code":"  it('should resolve variables across address resolution', () => {\n    expect(configuration.nestedVariablesAddressResolution).to.deep.equal('result');\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should uncoditionally split \"address\" property keys by \".\"","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":118,"column":64,"index":5657},"line":118,"code":"  it('should uncoditionally split \"address\" property keys by \".\"', () => expect(configuration.ambiguousAddress).to.equal('object'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with null non existing files","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":119,"column":48,"index":5774},"line":119,"code":"  it('should report with null non existing files', () => expect(configuration.nonExistingYaml).to.equal(null));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with null non existing JSON files","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":120,"column":53,"index":5891},"line":120,"code":"  it('should report with null non existing JSON files', () => expect(configuration.nonExistingJson).to.equal(null));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with null non existing JS files","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":121,"column":51,"index":6006},"line":121,"code":"  it('should report with null non existing JS files', () => expect(configuration.nonExistingJs).to.equal(null));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with null non existing addresses","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":122,"column":52,"index":6120},"line":122,"code":"  it('should report with null non existing addresses', () => {\n    expect(configuration.primitiveAddress).to.equal(null);\n    expect(configuration.deepNotExistingAddress).to.equal(null);\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve plain text content on unrecognized extension","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":126,"column":65,"index":6326},"line":126,"code":"  it('should resolve plain text content on unrecognized extension', () =>\n  // .trim() as depending on local .git settings and OS (Windows or other)\n  // checked out fixture may end with differen type of EOL (\\n on linux, and \\r\\n on Windows)\n  expect(configuration.nonStandardExt.trim()).to.equal('result: non-standard'.trim()));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should mark as unresolved if function crashes with misisng property dependency","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":130,"column":84,"index":6676},"line":130,"code":"  it('should mark as unresolved if function crashes with misisng property dependency', () => {\n    const propertyMeta = variablesMeta.get('jsFileFunctionAccessUnresolvableProperty');\n    if (propertyMeta.error) throw propertyMeta.error;\n    expect(propertyMeta).to.have.property('variables');\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should mark as unresolved if property function crashes with misisng property dependency","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":135,"column":93,"index":6984},"line":135,"code":"  it('should mark as unresolved if property function crashes with misisng property dependency', () => {\n    const propertyMeta = variablesMeta.get('jsFilePropertyFunctionAccessUnresolvableProperty');\n    if (propertyMeta.error) throw propertyMeta.error;\n    expect(propertyMeta).to.have.property('variables');\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error promise rejected with error","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":140,"column":61,"index":7268},"line":140,"code":"  it('should report with an error promise rejected with error', () => expect(variablesMeta.get('jsFilePromiseRejected').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error promise rejected with non error value","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":141,"column":71,"index":7450},"line":141,"code":"  it('should report with an error promise rejected with non error value', () => expect(variablesMeta.get('jsFilePromiseRejectedNonError').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error function resolver that crashes with error","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":142,"column":75,"index":7644},"line":142,"code":"  it('should report with an error function resolver that crashes with error', () => expect(variablesMeta.get('jsFileFunctionErrored').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error function resolver that crashes not with error","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":143,"column":79,"index":7834},"line":143,"code":"  it('should report with an error function resolver that crashes not with error', () => expect(variablesMeta.get('jsFileFunctionErroredNonError').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error property function resolver that crashes with error","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":144,"column":84,"index":8037},"line":144,"code":"  it('should report with an error property function resolver that crashes with error', () => expect(variablesMeta.get('jsFilePropertyFunctionErrored').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error property function resolver that crashes not with error","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":145,"column":88,"index":8244},"line":145,"code":"  it('should report with an error property function resolver that crashes not with error', () => expect(variablesMeta.get('jsFilePropertyFunctionErroredNonError').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error non file paths","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":146,"column":48,"index":8419},"line":146,"code":"  it('should report with an error non file paths', () => expect(variablesMeta.get('notFile').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing path argument","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":147,"column":55,"index":8571},"line":147,"code":"  it('should report with an error missing path argument', () => {\n    expect(variablesMeta.get('noParams').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    expect(variablesMeta.get('noParams2').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error an invalid YAML file","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":151,"column":54,"index":8827},"line":151,"code":"  it('should report with an error an invalid YAML file', () => expect(variablesMeta.get('invalidYaml').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error an invalid JSON file","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":152,"column":54,"index":8982},"line":152,"code":"  it('should report with an error an invalid JSON file', () => expect(variablesMeta.get('invalidJson').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error an invalid JS file","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":153,"column":52,"index":9135},"line":153,"code":"  it('should report with an error an invalid JS file', () => {\n    expect(variablesMeta.get('invalidJs').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n    expect(variablesMeta.get('invalidJs2').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error if JS function attempts to resolve missing source","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":157,"column":83,"index":9422},"line":157,"code":"  it('should report with an error if JS function attempts to resolve missing source', () => expect(variablesMeta.get('jsFunctionResolveVariableMissingSource').error.code).to.equal('MISSING_VARIABLE_RESULT'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should report with an error if JS function property attempts to resolve missing source","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":158,"column":92,"index":9640},"line":158,"code":"  it('should report with an error if JS function property attempts to resolve missing source', () => expect(variablesMeta.get('jsPropertyFunctionResolveVariableMissingSource').error.code).to.equal('MISSING_VARIABLE_RESULT'));","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should support reaching out beyond service directory","suites":["test/unit/lib/configuration/variables/sources/file.test.js"],"updatePoint":{"line":159,"column":58,"index":9832},"line":159,"code":"  it('should support reaching out beyond service directory', async () => {\n    configuration = {\n      yml: '${file(../file.yml)}'\n    };\n    variablesMeta = resolveMeta(configuration);\n    await resolve({\n      serviceDir: path.resolve(serviceDir, 'foo'),\n      configuration,\n      variablesMeta,\n      sources: {\n        file: fileSource\n      },\n      options: {},\n      fulfilledSources: new Set(['file'])\n    });\n    expect(configuration.yml).to.deep.equal({\n      result: 'yml'\n    });\n  });","file":"unit/lib/configuration/variables/sources/file.test.js","skipped":false,"dir":"test"},{"name":"should resolve `accountId`","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js"],"updatePoint":{"line":65,"column":32,"index":2023},"line":65,"code":"  it('should resolve `accountId`', async () => {\n    await initializeServerless();\n    expect(configuration.custom.accountId).to.equal('1234567890');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js"],"updatePoint":{"line":69,"column":49,"index":2196},"line":69,"code":"  it('should report with an error missing address', () => expect(variablesMeta.get('custom\\0missingAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js","skipped":false,"dir":"test"},{"name":"should report with an error invalid address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js"],"updatePoint":{"line":70,"column":49,"index":2357},"line":70,"code":"  it('should report with an error invalid address', () => expect(variablesMeta.get('custom\\0invalidAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js"],"updatePoint":{"line":71,"column":54,"index":2523},"line":71,"code":"  it('should report with an error a non-string address', () => expect(variablesMeta.get('custom\\0nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js","skipped":false,"dir":"test"},{"name":"should resolve ${aws:region}","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js"],"updatePoint":{"line":72,"column":34,"index":2671},"line":72,"code":"  it('should resolve ${aws:region}', async () => {\n    // us-east-1 by default\n    await initializeServerless();\n    expect(configuration.custom.region).to.equal('us-east-1');\n    // Resolves to provider.region if it exists\n    await initializeServerless({\n      provider: {\n        region: 'eu-west-1'\n      }\n    });\n    expect(configuration.custom.region).to.equal('eu-west-1');\n    // Resolves to `--region=` if the option is set\n    await initializeServerless({\n      provider: {\n        region: 'eu-west-1'\n      }\n    }, {\n      region: 'eu-central-1'\n    });\n    expect(configuration.custom.region).to.equal('eu-central-1');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-aws.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing output","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":70,"column":36,"index":2244},"line":70,"code":"  it('should resolve existing output', () => {\n    if (variablesMeta.get('custom\\0existing')) throw variablesMeta.get('custom\\0existing').error;\n    expect(configuration.custom.existing).to.equal('someValue');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing output in specific region","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":74,"column":55,"index":2479},"line":74,"code":"  it('should resolve existing output in specific region', () => {\n    if (variablesMeta.get('custom\\0existingInRegion')) {\n      throw variablesMeta.get('custom\\0existingInRegion').error;\n    }\n    expect(configuration.custom.existingInRegion).to.equal('eu-west-1');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing output","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":80,"column":43,"index":2740},"line":80,"code":"  it('should resolve null on missing output', () => {\n    if (variablesMeta.get('custom\\0noOutput')) throw variablesMeta.get('custom\\0noOutput').error;\n    expect(configuration.custom.noOutput).to.equal(null);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing stack","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":84,"column":42,"index":2955},"line":84,"code":"  it('should resolve null on missing stack', () => {\n    if (variablesMeta.get('custom\\0noStack')) throw variablesMeta.get('custom\\0noStack').error;\n    expect(configuration.custom.noStack).to.equal(null);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":88,"column":49,"index":3174},"line":88,"code":"  it('should report with an error missing address', () => expect(variablesMeta.get('custom\\0missingAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should report with an error invalid address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":89,"column":49,"index":3335},"line":89,"code":"  it('should report with an error invalid address', () => expect(variablesMeta.get('custom\\0invalidAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js"],"updatePoint":{"line":90,"column":54,"index":3501},"line":90,"code":"  it('should report with an error a non-string address', () => expect(variablesMeta.get('custom\\0nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-cf.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing output","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":63,"column":36,"index":2006},"line":63,"code":"  it('should resolve existing output', () => {\n    if (variablesMeta.get('custom\\0existing')) throw variablesMeta.get('custom\\0existing').error;\n    expect(configuration.custom.existing).to.equal('foo');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing key","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":67,"column":40,"index":2220},"line":67,"code":"  it('should resolve null on missing key', () => {\n    if (variablesMeta.get('custom\\0noKey')) throw variablesMeta.get('custom\\0noKey').error;\n    expect(configuration.custom.noKey).to.equal(null);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing bucket","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":71,"column":48,"index":2432},"line":71,"code":"  it('should report with an error missing bucket', () => expect(variablesMeta.get('custom\\0noBucket').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":72,"column":49,"index":2587},"line":72,"code":"  it('should report with an error missing address', () => expect(variablesMeta.get('custom\\0missingAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should report with an error invalid address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":73,"column":49,"index":2748},"line":73,"code":"  it('should report with an error invalid address', () => expect(variablesMeta.get('custom\\0invalidAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js"],"updatePoint":{"line":74,"column":54,"index":2914},"line":74,"code":"  it('should report with an error a non-string address', () => expect(variablesMeta.get('custom\\0nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-s3.test.js","skipped":false,"dir":"test"},{"name":"should resolve ${sls.instanceId}","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":59,"column":38,"index":1884},"line":59,"code":"  it('should resolve ${sls.instanceId}', async () => {\n    await initializeServerless();\n    if (variablesMeta.get('custom\\0sls')) throw variablesMeta.get('custom\\0sls').error;\n    expect(typeof serverlessInstance.instanceId).to.equal('string');\n    expect(configuration.custom.sls).to.equal(serverlessInstance.instanceId);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should keep  ${sls:instanceId} pending when no serverless instance available","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":65,"column":82,"index":2258},"line":65,"code":"  it('should keep  ${sls:instanceId} pending when no serverless instance available', async () => {\n    // Dev by default\n    await initializeServerless({\n      setupOptions: {\n        withoutInstance: true\n      }\n    });\n    expect(variablesMeta.get('custom\\0sls')).to.have.property('variables');\n    expect(variablesMeta.get('custom\\0sls')).to.not.have.property('error');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should resolve ${sls:stage}","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":75,"column":33,"index":2589},"line":75,"code":"  it('should resolve ${sls:stage}', async () => {\n    // Dev by default\n    await initializeServerless();\n    expect(configuration.custom.stage).to.equal('dev');\n    // Resolves to provider.stage if it exists\n    await initializeServerless({\n      configExt: {\n        provider: {\n          stage: 'prod'\n        }\n      }\n    });\n    expect(configuration.custom.stage).to.equal('prod');\n    // Resolves to `--stage=` if the option is set\n    await initializeServerless({\n      configExt: {\n        provider: {\n          stage: 'prod'\n        }\n      },\n      options: {\n        stage: 'staging'\n      }\n    });\n    expect(configuration.custom.stage).to.equal('staging');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should resolve ${sls:stage} when no serverless instance available","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":101,"column":71,"index":3305},"line":101,"code":"  it('should resolve ${sls:stage} when no serverless instance available', async () => {\n    // Dev by default\n    await initializeServerless({\n      setupOptions: {\n        withoutInstance: true\n      }\n    });\n    expect(configuration.custom.stage).to.equal('dev');\n    // Resolves to provider.stage if it exists\n    await initializeServerless({\n      setupOptions: {\n        withoutInstance: true\n      },\n      configExt: {\n        provider: {\n          stage: 'prod'\n        }\n      }\n    });\n    expect(configuration.custom.stage).to.equal('prod');\n    // Resolves to `--stage=` if the option is set\n    await initializeServerless({\n      setupOptions: {\n        withoutInstance: true\n      },\n      configExt: {\n        provider: {\n          stage: 'prod'\n        }\n      },\n      options: {\n        stage: 'staging'\n      }\n    });\n    expect(configuration.custom.stage).to.equal('staging');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":137,"column":49,"index":4188},"line":137,"code":"  it('should report with an error missing address', async () => {\n    await initializeServerless();\n    return expect(variablesMeta.get('custom\\0missingAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should report with an error unsupported address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":141,"column":53,"index":4411},"line":141,"code":"  it('should report with an error unsupported address', async () => {\n    await initializeServerless();\n    return expect(variablesMeta.get('custom\\0unsupportedAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js"],"updatePoint":{"line":145,"column":54,"index":4639},"line":145,"code":"  it('should report with an error a non-string address', async () => {\n    await initializeServerless();\n    return expect(variablesMeta.get('custom\\0nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-sls.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing string param","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":101,"column":42,"index":3567},"line":101,"code":"  it('should resolve existing string param', () => {\n    if (variablesMeta.get('custom\\0existing')) throw variablesMeta.get('custom\\0existing').error;\n    expect(configuration.custom.existing).to.equal('value');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing string list param","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":105,"column":47,"index":3790},"line":105,"code":"  it('should resolve existing string list param', () => {\n    if (variablesMeta.get('custom\\0existingList')) {\n      throw variablesMeta.get('custom\\0existingList').error;\n    }\n    expect(configuration.custom.existingList).to.deep.equal(['one', 'two', 'three']);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should support \"raw\" output for list param","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":111,"column":48,"index":4061},"line":111,"code":"  it('should support \"raw\" output for list param', () => {\n    if (variablesMeta.get('custom\\0existingListRaw')) {\n      throw variablesMeta.get('custom\\0existingListRaw').error;\n    }\n    expect(configuration.custom.existingListRaw).to.equal('one,two,three');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing encrypted AWS secret manager data","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":117,"column":63,"index":4343},"line":117,"code":"  it('should resolve existing encrypted AWS secret manager data', () => {\n    if (variablesMeta.get('custom\\0secretManager')) {\n      throw variablesMeta.get('custom\\0secretManager').error;\n    }\n    expect(configuration.custom.secretManager).to.deep.equal({\n      someSecret: 'someValue'\n    });\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing encrypted data","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":125,"column":44,"index":4627},"line":125,"code":"  it('should resolve existing encrypted data', () => {\n    if (variablesMeta.get('custom\\0existingEncrypted')) {\n      throw variablesMeta.get('custom\\0existingEncrypted').error;\n    }\n    if (variablesMeta.get('custom\\0existingDirect')) {\n      throw variablesMeta.get('custom\\0existingDirect').error;\n    }\n    if (variablesMeta.get('custom\\0encryptedWithSkipDecrypt')) {\n      throw variablesMeta.get('custom\\0encryptedWithSkipDecrypt').error;\n    }\n    if (variablesMeta.get('custom\\0encryptedWithSkipDecryptAndRegion')) {\n      throw variablesMeta.get('custom\\0encryptedWithSkipDecrypt').error;\n    }\n    expect(configuration.custom.existingEncrypted).to.deep.equal({\n      someSecret: 'someValue'\n    });\n    expect(configuration.custom.existingEncryptedDirect).to.equal('12345678901234567890');\n    expect(configuration.custom.encryptedWithSkipDecrypt).to.equal('ENCRYPTED');\n    expect(configuration.custom.encryptedWithSkipDecryptAndRegion).to.equal('ENCRYPTED');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should support \"raw\" output for decrypted data","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":145,"column":52,"index":5614},"line":145,"code":"  it('should support \"raw\" output for decrypted data', () => {\n    if (variablesMeta.get('custom\\0existingEncryptedRaw')) {\n      throw variablesMeta.get('custom\\0existingEncryptedRaw').error;\n    }\n    expect(configuration.custom.existingEncryptedRaw).to.equal('{\"someSecret\":\"someValue\"}');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve existing output in specific region","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":151,"column":55,"index":5916},"line":151,"code":"  it('should resolve existing output in specific region', () => {\n    if (variablesMeta.get('custom\\0existingInRegion')) {\n      throw variablesMeta.get('custom\\0existingInRegion').error;\n    }\n    expect(configuration.custom.existingInRegion).to.equal('eu-west-1');\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing param","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":157,"column":42,"index":6176},"line":157,"code":"  it('should resolve null on missing param', () => {\n    if (variablesMeta.get('custom\\0notExisting')) {\n      throw variablesMeta.get('custom\\0notExisting').error;\n    }\n    expect(configuration.custom.notExisting).to.equal(null);\n  });","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":163,"column":49,"index":6421},"line":163,"code":"  it('should report with an error missing address', () => expect(variablesMeta.get('custom\\0missingAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address","suites":["test/unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js"],"updatePoint":{"line":164,"column":54,"index":6587},"line":164,"code":"  it('should report with an error a non-string address', () => expect(variablesMeta.get('custom\\0nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/instance-dependent/get-ssm.test.js","skipped":false,"dir":"test"},{"name":"should resolve string option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","fulfilled"],"updatePoint":{"line":39,"column":36,"index":1245},"line":39,"code":"    it('should resolve string option', () => expect(configuration.opt).to.equal('elo'));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should resolve bool option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","fulfilled"],"updatePoint":{"line":40,"column":34,"index":1332},"line":40,"code":"    it('should resolve bool option', () => expect(configuration.optBool).to.equal(false));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should resolve null on missing option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","fulfilled"],"updatePoint":{"line":41,"column":45,"index":1434},"line":41,"code":"    it('should resolve null on missing option', () => expect(configuration.optMissing).to.equal('fallback'));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should expose all options when no address is providerd","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","fulfilled"],"updatePoint":{"line":42,"column":62,"index":1561},"line":42,"code":"    it('should expose all options when no address is providerd', () => expect(configuration.noAddress).to.deep.equal({\n      foobar: 'elo',\n      bool: false\n    }));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a non-string address argument","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","fulfilled"],"updatePoint":{"line":46,"column":65,"index":1731},"line":46,"code":"    it('should report with an error a non-string address argument', () => expect(variablesMeta.get('nonStringAddress').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should resolve string option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","pending"],"updatePoint":{"line":73,"column":36,"index":2501},"line":73,"code":"    it('should resolve string option', () => expect(configuration.opt).to.equal('elo'));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should resolve bool option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","pending"],"updatePoint":{"line":74,"column":34,"index":2588},"line":74,"code":"    it('should resolve bool option', () => expect(configuration.optBool).to.equal(false));","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should not resolve missing option","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","pending"],"updatePoint":{"line":75,"column":41,"index":2686},"line":75,"code":"    it('should not resolve missing option', () => expect(variablesMeta.has('optMissing')).to.be.true);","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should not resolve when no address is provided","suites":["test/unit/lib/configuration/variables/sources/opt.test.js","pending"],"updatePoint":{"line":76,"column":54,"index":2802},"line":76,"code":"    it('should not resolve when no address is provided', () => expect(variablesMeta.has('noAddress')).to.be.true);","file":"unit/lib/configuration/variables/sources/opt.test.js","skipped":false,"dir":"test"},{"name":"should resolve external plugin sources","suites":["test/unit/lib/configuration/variables/sources/resolve-external-plugin-resources.test.js"],"updatePoint":{"line":9,"column":44,"index":416},"line":9,"code":"  it('should resolve external plugin sources', () => {\n    const sources = {};\n    const fulfilledSources = new Set();\n    const externalPlugins = [{\n      configurationVariablesSources: {\n        ext1: {\n          resolve: () => {}\n        },\n        ext2: {\n          resolve: () => {}\n        }\n      }\n    }, {\n      configurationVariablesSources: {\n        ext3: {\n          resolve: () => {}\n        }\n      }\n    }];\n    resolveExternalPluginSources({}, {\n      sources,\n      fulfilledSources\n    }, new Set(externalPlugins));\n    expect(sources).to.deep.equal({\n      ...externalPlugins[0].configurationVariablesSources,\n      ...externalPlugins[1].configurationVariablesSources\n    });\n    expect(fulfilledSources).to.deep.equal(new Set(Object.keys(sources)));\n  });","file":"unit/lib/configuration/variables/sources/resolve-external-plugin-resources.test.js","skipped":false,"dir":"test"},{"name":"should reject meaningfully invalid sources configuration","suites":["test/unit/lib/configuration/variables/sources/resolve-external-plugin-resources.test.js"],"updatePoint":{"line":38,"column":62,"index":1211},"line":38,"code":"  it('should reject meaningfully invalid sources configuration', () => {\n    expect(() => resolveExternalPluginSources({}, {\n      sources: {},\n      fulfilledSources: new Set()\n    }, new Set([{\n      configurationVariablesSources: 'foo'\n    }]))).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCES_CONFIGURATION');\n    expect(() => resolveExternalPluginSources({}, {\n      sources: {\n        existing: {\n          resolve: () => {}\n        }\n      },\n      fulfilledSources: new Set(['existing'])\n    }, new Set([{\n      configurationVariablesSources: {\n        existing: {\n          resolve: () => {}\n        }\n      }\n    }]))).to.throw(ServerlessError).with.property('code', 'DUPLICATE_VARIABLE_SOURCE_CONFIGURATION');\n    expect(() => resolveExternalPluginSources({}, {\n      sources: {},\n      fulfilledSources: new Set()\n    }, new Set([{\n      configurationVariablesSources: {\n        source: 'foo'\n      }\n    }]))).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE_CONFIGURATION');\n    expect(() => resolveExternalPluginSources({}, {\n      sources: {},\n      fulfilledSources: new Set()\n    }, new Set([{\n      configurationVariablesSources: {\n        source: {\n          resolve: 'foo '\n        }\n      }\n    }]))).to.throw(ServerlessError).with.property('code', 'INVALID_VARIABLE_SOURCE_RESOLVER_CONFIGURATION');\n  });","file":"unit/lib/configuration/variables/sources/resolve-external-plugin-resources.test.js","skipped":false,"dir":"test"},{"name":"should resolve \"self\" sources","suites":["test/unit/lib/configuration/variables/sources/self.test.js"],"updatePoint":{"line":10,"column":35,"index":431},"line":10,"code":"  it('should resolve \"self\" sources', async () => {\n    const configuration = {\n      nest: {\n        prop1: '${self:nest2.prop}',\n        prop2: 'bar',\n        prop3: '${self:nest.prop2}'\n      },\n      nest2: {\n        prop: 'nest2',\n        otherProp: '${self:nest.prop2}'\n      },\n      full: '${self:nest}',\n      nonExisting: '${self:hola.mola}'\n    };\n    await resolve({\n      serviceDir: process.cwd(),\n      configuration,\n      variablesMeta: resolveMeta(configuration),\n      sources: {\n        self: selfSource\n      },\n      options: {},\n      fulfilledSources: new Set(['self'])\n    });\n    expect(configuration).to.deep.equal({\n      nest: {\n        prop1: 'nest2',\n        prop2: 'bar',\n        prop3: 'bar'\n      },\n      nest2: {\n        prop: 'nest2',\n        otherProp: 'bar'\n      },\n      full: {\n        prop1: 'nest2',\n        prop2: 'bar',\n        prop3: 'bar'\n      },\n      nonExisting: '${self:hola.mola}'\n    });\n  });","file":"unit/lib/configuration/variables/sources/self.test.js","skipped":false,"dir":"test"},{"name":"should reject cicular reference","suites":["test/unit/lib/configuration/variables/sources/self.test.js"],"updatePoint":{"line":52,"column":37,"index":1382},"line":52,"code":"  it('should reject cicular reference', async () => {\n    const configuration = {\n      foo: '${self:}'\n    };\n    const variablesMeta = resolveMeta(configuration);\n    await resolve({\n      serviceDir: process.cwd(),\n      configuration,\n      variablesMeta,\n      sources: {\n        self: selfSource\n      },\n      options: {},\n      fulfilledSources: new Set(['self'])\n    });\n    expect(configuration).to.deep.equal({\n      foo: '${self:}'\n    });\n    expect(variablesMeta.get('foo').error.code).to.equal('VARIABLE_RESOLUTION_ERROR');\n  });","file":"unit/lib/configuration/variables/sources/self.test.js","skipped":false,"dir":"test"},{"name":"should resolve truthy input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":33,"column":33,"index":1063},"line":33,"code":"  it('should resolve truthy input', () => expect(configuration.truthy).to.equal(true));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should resolve falsy input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":34,"column":32,"index":1150},"line":34,"code":"  it('should resolve falsy input', () => expect(configuration.falsy).to.equal(false));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should resolve uppercase truthy input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":35,"column":43,"index":1248},"line":35,"code":"  it('should resolve uppercase truthy input', () => expect(configuration.truthyUppercase).to.equal(true));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should resolve mixed case falsy input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":36,"column":43,"index":1355},"line":36,"code":"  it('should resolve mixed case falsy input', () => expect(configuration.falsyMixedCase).to.equal(false));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should report with an error missing input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":37,"column":47,"index":1466},"line":37,"code":"  it('should report with an error missing input', () => expect(variablesMeta.get('noParam').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should report with an error a unexpected string input","suites":["test/unit/lib/configuration/variables/sources/str-to-bool.test.js"],"updatePoint":{"line":38,"column":59,"index":1622},"line":38,"code":"  it('should report with an error a unexpected string input', () => expect(variablesMeta.get('invalid').error.code).to.equal('VARIABLE_RESOLUTION_ERROR'));","file":"unit/lib/configuration/variables/sources/str-to-bool.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsCommon","#constructor()"],"updatePoint":{"line":25,"column":25,"index":821},"line":25,"code":"    it('should have hooks', () => expect(awsCommon.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["AwsCommon","#constructor()"],"updatePoint":{"line":26,"column":28,"index":900},"line":26,"code":"    it('should have commands', () => expect(awsCommon.commands).to.be.not.empty);","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCommon","#constructor()"],"updatePoint":{"line":27,"column":70,"index":1024},"line":27,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCommon.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should call validate","suites":["AwsCommon","hooks","aws:common:validate:validate"],"updatePoint":{"line":31,"column":30,"index":1209},"line":31,"code":"      it('should call validate', async () => {\n        const validateStub = sinon.stub(awsCommon, 'validate').resolves();\n        return awsCommon.hooks['aws:common:validate:validate']().then(() => {\n          expect(validateStub.calledOnce).to.be.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should call cleanupTempDir","suites":["AwsCommon","hooks","aws:common:cleanupTempDir:cleanup"],"updatePoint":{"line":39,"column":36,"index":1564},"line":39,"code":"      it('should call cleanupTempDir', async () => {\n        const cleanupTempDirStub = sinon.stub(awsCommon, 'cleanupTempDir').resolves();\n        return awsCommon.hooks['aws:common:cleanupTempDir:cleanup']().then(() => {\n          expect(cleanupTempDirStub.calledOnce).to.be.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should call cleanupTempDir","suites":["AwsCommon","hooks","aws:common:moveArtifactsToPackage:move"],"updatePoint":{"line":47,"column":36,"index":1947},"line":47,"code":"      it('should call cleanupTempDir', async () => {\n        const moveArtifactsToPackageStub = sinon.stub(awsCommon, 'moveArtifactsToPackage').resolves();\n        return awsCommon.hooks['aws:common:moveArtifactsToPackage:move']().then(() => {\n          expect(moveArtifactsToPackageStub.calledOnce).to.be.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should call cleanupTempDir","suites":["AwsCommon","hooks","aws:common:moveArtifactsToTemp:move"],"updatePoint":{"line":55,"column":36,"index":2356},"line":55,"code":"      it('should call cleanupTempDir', async () => {\n        const moveArtifactsToTempStub = sinon.stub(awsCommon, 'moveArtifactsToTemp').resolves();\n        return awsCommon.hooks['aws:common:moveArtifactsToTemp:move']().then(() => {\n          expect(moveArtifactsToTempStub.calledOnce).to.be.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should be only entrypoints","suites":["AwsCommon","commands"],"updatePoint":{"line":64,"column":34,"index":2728},"line":64,"code":"    it('should be only entrypoints', () => {\n      expect(awsCommon.commands).to.have.nested.property('aws.type', 'entrypoint');\n    });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["AwsCommon","commands","aws:common:validate"],"updatePoint":{"line":68,"column":22,"index":2897},"line":68,"code":"      it('should exist', () => {\n        expect(awsCommon.commands).to.have.nested.property('aws.commands.common.commands.validate');\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["AwsCommon","commands","aws:common:cleanupTempDir"],"updatePoint":{"line":73,"column":22,"index":3099},"line":73,"code":"      it('should exist', () => {\n        expect(awsCommon.commands).to.have.nested.property('aws.commands.common.commands.cleanupTempDir');\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["AwsCommon","commands","aws:common:moveArtifactsToPackage"],"updatePoint":{"line":78,"column":22,"index":3315},"line":78,"code":"      it('should exist', () => {\n        expect(awsCommon.commands).to.have.nested.property('aws.commands.common.commands.moveArtifactsToPackage');\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["AwsCommon","commands","aws:common:moveArtifactsToTemp"],"updatePoint":{"line":83,"column":22,"index":3536},"line":83,"code":"      it('should exist', () => {\n        expect(awsCommon.commands).to.have.nested.property('aws.commands.common.commands.moveArtifactsToTemp');\n      });","file":"unit/lib/plugins/aws/common/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve if servicePath is not present","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":32,"column":50,"index":1037},"line":32,"code":"  it('should resolve if servicePath is not present', () => {\n    delete serverless.serviceDir;\n    return awsCommon.moveArtifactsToPackage();\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no package is set","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":36,"column":41,"index":1176},"line":36,"code":"  it('should resolve if no package is set', () => awsCommon.moveArtifactsToPackage());","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should use package option as target","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":37,"column":41,"index":1263},"line":37,"code":"  it('should use package option as target', async () => {\n    const testFileSource = path.join(moveServerlessPath, 'moveTestFile.tmp');\n    const targetPath = path.join(moveBasePath, 'target');\n    awsCommon.options.package = targetPath;\n    serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    return awsCommon.moveArtifactsToPackage().then(() => {\n      const testFileTarget = path.join(targetPath, 'moveTestFile.tmp');\n      expect(serverless.utils.dirExistsSync(targetPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileTarget)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should use service package path as target","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":48,"column":47,"index":1885},"line":48,"code":"  it('should use service package path as target', async () => {\n    const testFileSource = path.join(moveServerlessPath, 'moveTestFile.tmp');\n    const targetPath = path.join(moveBasePath, 'target');\n    serverless.service.package.path = targetPath;\n    serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    return awsCommon.moveArtifactsToPackage().then(() => {\n      const testFileTarget = path.join(targetPath, 'moveTestFile.tmp');\n      expect(serverless.utils.dirExistsSync(targetPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileTarget)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should not fail with non existing temp dir","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":59,"column":48,"index":2514},"line":59,"code":"  it('should not fail with non existing temp dir', async () => {\n    const targetPath = path.join(moveBasePath, 'target');\n    if (serverless.utils.dirExistsSync(moveServerlessPath)) {\n      fse.removeSync(moveServerlessPath);\n    }\n    awsCommon.options.package = targetPath;\n    return awsCommon.moveArtifactsToPackage().then(() => {\n      expect(serverless.utils.dirExistsSync(targetPath)).to.be.equal(false);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should not fail with existing package dir","suites":["#moveArtifactsToPackage()"],"updatePoint":{"line":69,"column":47,"index":2940},"line":69,"code":"  it('should not fail with existing package dir', async () => {\n    const testFileSource = path.join(moveServerlessPath, 'moveTestFile.tmp');\n    const targetPath = path.join(moveBasePath, 'target');\n    const testFileTarget = path.join(targetPath, 'moveTestFile.tmp');\n    if (!serverless.utils.dirExistsSync(targetPath)) {\n      serverless.utils.writeFileDir(targetPath);\n      serverless.utils.writeFileSync(testFileTarget, '!!!MOVE TEST FILE!!!');\n    }\n    serverless.service.package.path = targetPath;\n    serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    return awsCommon.moveArtifactsToPackage().then(() => {\n      expect(serverless.utils.dirExistsSync(targetPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileTarget)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should resolve if servicePath is not present","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":107,"column":50,"index":4465},"line":107,"code":"  it('should resolve if servicePath is not present', () => {\n    delete serverless.serviceDir;\n    return awsCommon.moveArtifactsToTemp();\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no package is set","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":111,"column":41,"index":4601},"line":111,"code":"  it('should resolve if no package is set', () => awsCommon.moveArtifactsToTemp());","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should use package option as source path","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":112,"column":46,"index":4690},"line":112,"code":"  it('should use package option as source path', async () => {\n    const testFileSource = path.join(moveTargetPath, 'moveTestFile.tmp');\n    serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    awsCommon.options.package = moveTargetPath;\n    return awsCommon.moveArtifactsToTemp().then(() => {\n      const testFileTarget = path.join(moveServerlessPath, 'moveTestFile.tmp');\n      expect(serverless.utils.dirExistsSync(moveServerlessPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileTarget)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should use package option as source path","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":122,"column":46,"index":5266},"line":122,"code":"  it('should use package option as source path', async () => {\n    const testFileSource = path.join(moveTargetPath, 'moveTestFile.tmp');\n    serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    serverless.service.package.path = moveTargetPath;\n    return awsCommon.moveArtifactsToTemp().then(() => {\n      const testFileTarget = path.join(moveServerlessPath, 'moveTestFile.tmp');\n      expect(serverless.utils.dirExistsSync(moveServerlessPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileTarget)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should not fail with non existing source path","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":132,"column":51,"index":5853},"line":132,"code":"  it('should not fail with non existing source path', async () => {\n    if (serverless.utils.dirExistsSync(moveTargetPath)) {\n      fse.removeSync(moveTargetPath);\n    }\n    awsCommon.options.package = moveTargetPath;\n    return awsCommon.moveArtifactsToTemp().then(() => {\n      expect(serverless.utils.dirExistsSync(moveTargetPath)).to.be.equal(false);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should not fail with existing temp dir","suites":["#moveArtifactsToTemp()"],"updatePoint":{"line":141,"column":44,"index":6215},"line":141,"code":"  it('should not fail with existing temp dir', async () => {\n    const testFileSource = path.join(moveServerlessPath, 'moveTestFile.tmp');\n    const testFileTarget = path.join(moveTargetPath, 'moveTestFile.tmp');\n    if (!serverless.utils.dirExistsSync(moveServerlessPath)) {\n      serverless.utils.writeFileDir(moveServerlessPath);\n      serverless.utils.writeFileSync(testFileSource, '!!!MOVE TEST FILE!!!');\n    }\n    serverless.service.package.path = moveTargetPath;\n    serverless.utils.writeFileSync(testFileTarget, '!!!MOVE TEST FILE!!!');\n    return awsCommon.moveArtifactsToTemp().then(() => {\n      expect(serverless.utils.dirExistsSync(moveServerlessPath)).to.be.equal(true);\n      expect(serverless.utils.fileExistsSync(testFileSource)).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/artifacts.test.js","skipped":false,"dir":"test"},{"name":"should remove .serverless in the service directory","suites":["#cleanupTempDir()"],"updatePoint":{"line":23,"column":56,"index":687},"line":23,"code":"  it('should remove .serverless in the service directory', async () => {\n    const serverlessTmpDirPath = path.join(packageService.serverless.serviceDir, '.serverless', 'README');\n    serverless.utils.writeFileSync(serverlessTmpDirPath, 'Some README content');\n    return packageService.cleanupTempDir().then(() => {\n      expect(serverless.utils.dirExistsSync(path.join(packageService.serverless.serviceDir, '.serverless'))).to.equal(false);\n    });\n  });","file":"unit/lib/plugins/aws/common/lib/cleanup-temp-dir.test.js","skipped":false,"dir":"test"},{"name":"should resolve if servicePath is not present","suites":["#cleanupTempDir()"],"updatePoint":{"line":30,"column":50,"index":1138},"line":30,"code":"  it('should resolve if servicePath is not present', async () => {\n    delete serverless.serviceDir;\n    return expect(packageService.cleanupTempDir()).to.eventually.be.fulfilled;\n  });","file":"unit/lib/plugins/aws/common/lib/cleanup-temp-dir.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the .serverless directory is not present","suites":["#cleanupTempDir()"],"updatePoint":{"line":34,"column":64,"index":1338},"line":34,"code":"  it('should resolve if the .serverless directory is not present', async () => {\n    return expect(packageService.cleanupTempDir()).to.eventually.be.fulfilled;\n  });","file":"unit/lib/plugins/aws/common/lib/cleanup-temp-dir.test.js","skipped":false,"dir":"test"},{"name":"should have the command \"config\"","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":54,"column":40,"index":1857},"line":54,"code":"    it('should have the command \"config\"', () => {\n      expect(awsConfigCredentials.commands.config).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should have the sub-command \"credentials\"","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":57,"column":49,"index":2001},"line":57,"code":"    it('should have the sub-command \"credentials\"', () => {\n      expect(awsConfigCredentials.commands.config.commands.credentials).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should have no lifecycle event","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":60,"column":38,"index":2155},"line":60,"code":"    it('should have no lifecycle event', () => {\n      expect(awsConfigCredentials.commands.config.lifecycleEvents).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should have the lifecycle event \"config\" for the \"credentials\" sub-command","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":63,"column":82,"index":2344},"line":63,"code":"    it('should have the lifecycle event \"config\" for the \"credentials\" sub-command', () => {\n      expect(awsConfigCredentials.commands.config.commands.credentials.lifecycleEvents).to.deep.equal(['config']);\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should have the req. options \"key\" and \"secret\" for the \"credentials\" sub-command","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":66,"column":89,"index":2567},"line":66,"code":"    it('should have the req. options \"key\" and \"secret\" for the \"credentials\" sub-command', () => {\n      // eslint-disable-next-line no-unused-expressions\n      expect(awsConfigCredentials.commands.config.commands.credentials.options.key.required).to.be.true;\n      // eslint-disable-next-line no-unused-expressions\n      expect(awsConfigCredentials.commands.config.commands.credentials.options.secret.required).to.be.true;\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should have a \"config:credentials:config\" hook","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":72,"column":54,"index":2965},"line":72,"code":"    it('should have a \"config:credentials:config\" hook', () => {\n      expect(awsConfigCredentials.hooks['config:credentials:config']).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"config:credentials:config\" hook","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":75,"column":78,"index":3157},"line":75,"code":"    it('should run promise chain in order for \"config:credentials:config\" hook', async () => {\n      const awsConfigCredentialsStub = sandbox.stub(awsConfigCredentials, 'configureCredentials').resolves();\n      return awsConfigCredentials.hooks['config:credentials:config']().then(() => {\n        expect(awsConfigCredentialsStub.calledOnce).to.equal(true);\n        awsConfigCredentials.configureCredentials.restore();\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the home directory was not found","suites":["AwsConfigCredentials","#constructor()"],"updatePoint":{"line":82,"column":65,"index":3580},"line":82,"code":"    it('should throw an error if the home directory was not found', () => {\n      sandbox.stub(os, 'homedir').returns(null);\n      try {\n        expect(() => new AwsConfigCredentials(serverless, {})).to.throw(Error);\n      } finally {\n        sandbox.restore();\n      }\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should lowercase the provider option","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":92,"column":44,"index":3889},"line":92,"code":"    it('should lowercase the provider option', async () => {\n      awsConfigCredentials.options.provider = 'SOMEPROVIDER';\n      return awsConfigCredentials.configureCredentials().then(() => {\n        expect(awsConfigCredentials.options.provider).to.equal('someprovider');\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should use the \"default\" profile if option is not given","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":98,"column":63,"index":4199},"line":98,"code":"    it('should use the \"default\" profile if option is not given', async () => awsConfigCredentials.configureCredentials().then(() => {\n      expect(awsConfigCredentials.options.profile).to.equal('default');\n    }));","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the provider option is not \"aws\"","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":101,"column":58,"index":4410},"line":101,"code":"    it('should resolve if the provider option is not \"aws\"', async () => {\n      awsConfigCredentials.options.provider = 'invalid-provider';\n      return expect(awsConfigCredentials.configureCredentials()).to.be.eventually.fulfilled;\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the \"key\" and \"secret\" options are not given","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":105,"column":77,"index":4671},"line":105,"code":"    it('should throw an error if the \"key\" and \"secret\" options are not given', async () => {\n      awsConfigCredentials.options.key = false;\n      awsConfigCredentials.options.secret = false;\n      return awsConfigCredentials.configureCredentials().then(() => {\n        throw new Error('Unexpected');\n      }, error => expect(error.message).to.include('Please include --key and --secret options for AWS'));\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should update the profile","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":112,"column":33,"index":5043},"line":112,"code":"    it('should update the profile', async () => {\n      awsConfigCredentials.options.profile = 'my-profile';\n      awsConfigCredentials.options.key = 'my-new-profile-key';\n      awsConfigCredentials.options.secret = 'my-new-profile-secret';\n      awsConfigCredentials.options.overwrite = true;\n      fse.outputFileSync(credentialsFilePath, credentialsFileContent);\n      return awsConfigCredentials.configureCredentials().then(() => {\n        const UpdatedCredentialsFileContent = fs.readFileSync(credentialsFilePath).toString();\n        const lineByLineContent = UpdatedCredentialsFileContent.split('\\n');\n        expect(lineByLineContent[0]).to.equal('[my-profile]');\n        expect(lineByLineContent[1]).to.equal('aws_access_key_id=my-new-profile-key');\n        expect(lineByLineContent[2]).to.equal('aws_secret_access_key=my-new-profile-secret');\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should not alter other profiles when updating a profile","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":126,"column":63,"index":5942},"line":126,"code":"    it('should not alter other profiles when updating a profile', async () => {\n      awsConfigCredentials.options.profile = 'my-profile';\n      awsConfigCredentials.options.key = 'my-new-profile-key';\n      awsConfigCredentials.options.secret = 'my-new-profile-secret';\n      awsConfigCredentials.options.overwrite = true;\n      const newCredentialsFileContent = [credentialsFileContent, '[my-other-profile]', 'aws_access_key_id = my-other-profile-key', 'aws_secret_access_key = my-other-profile-secret'].join('\\n');\n      fse.outputFileSync(credentialsFilePath, newCredentialsFileContent);\n      return awsConfigCredentials.configureCredentials().then(() => {\n        const UpdatedCredentialsFileContent = fs.readFileSync(credentialsFilePath).toString();\n        const lineByLineContent = UpdatedCredentialsFileContent.split('\\n');\n        expect(lineByLineContent[0]).to.equal('[my-profile]');\n        expect(lineByLineContent[1]).to.equal('aws_access_key_id=my-new-profile-key');\n        expect(lineByLineContent[2]).to.equal('aws_secret_access_key=my-new-profile-secret');\n        expect(lineByLineContent[6]).to.equal('aws_secret_access_key=my-other-profile-secret');\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should add the missing credentials to the updated profile","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":142,"column":65,"index":7136},"line":142,"code":"    it('should add the missing credentials to the updated profile', async () => {\n      const newCredentialsFileContent = [credentialsFileContent, '[my-profile]', 'aws_secret_access_key = my-profile-secret'].join('\\n');\n      awsConfigCredentials.options.profile = 'my-profile';\n      awsConfigCredentials.options.key = 'my-new-profile-key';\n      awsConfigCredentials.options.secret = 'my-new-profile-secret';\n      awsConfigCredentials.options.overwrite = true;\n      fse.outputFileSync(credentialsFilePath, newCredentialsFileContent);\n      return awsConfigCredentials.configureCredentials().then(() => {\n        const UpdatedCredentialsFileContent = fs.readFileSync(credentialsFilePath).toString();\n        const lineByLineContent = UpdatedCredentialsFileContent.split('\\n');\n        expect(lineByLineContent[0]).to.equal('[my-profile]');\n        expect(lineByLineContent[1]).to.equal('aws_access_key_id=my-new-profile-key');\n        expect(lineByLineContent[2]).to.equal('aws_secret_access_key=my-new-profile-secret');\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should append the profile to the credentials file","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":157,"column":57,"index":8170},"line":157,"code":"    it('should append the profile to the credentials file', async () => {\n      awsConfigCredentials.options.profile = 'my-profile';\n      awsConfigCredentials.options.key = 'my-profile-key';\n      awsConfigCredentials.options.secret = 'my-profile-secret';\n      return awsConfigCredentials.configureCredentials().then(() => {\n        const UpdatedCredentialsFileContent = fs.readFileSync(credentialsFilePath).toString();\n        const lineByLineContent = UpdatedCredentialsFileContent.split('\\n');\n        expect(lineByLineContent[0]).to.equal('[my-profile]');\n        expect(lineByLineContent[1]).to.equal('aws_access_key_id=my-profile-key');\n        expect(lineByLineContent[2]).to.equal('aws_secret_access_key=my-profile-secret');\n      });\n    });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should set the permissions of the credentials file to be owner-only read/write","suites":["AwsConfigCredentials","#configureCredentials()"],"updatePoint":{"line":170,"column":88,"index":8991},"line":170,"code":"      it('should set the permissions of the credentials file to be owner-only read/write', async () => awsConfigCredentials.configureCredentials().then(() => {\n        const fileMode = fs.statSync(credentialsFilePath).mode;\n        const filePermissions = fileMode & ~(fs.constants || constants).S_IFMT;\n        const readableByOwnerPermission = (fs.constants || constants).S_IRUSR;\n        const writableByOwnerPermission = (fs.constants || constants).S_IWUSR;\n        const expectedFilePermissions = readableByOwnerPermission | writableByOwnerPermission;\n        expect(filePermissions).to.equal(expectedFilePermissions);\n      }));","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should fail if profile is already set and overwrite is not set","suites":["test/unit/lib/plugins/aws/configCredentials.test.js"],"updatePoint":{"line":182,"column":68,"index":9694},"line":182,"code":"  it('should fail if profile is already set and overwrite is not set', async () => {\n    const credentialsFilePath = path.join(os.homedir(), '.aws', 'credentials');\n    const credentialsFileContent = ['[default]', 'aws_access_key_id = my-old-profile-key', 'aws_secret_access_key = my-old-profile-secret'].join('\\n');\n    await fse.outputFile(credentialsFilePath, credentialsFileContent);\n    await expect(runServerless({\n      noService: true,\n      command: 'config credentials',\n      options: {\n        provider: 'aws',\n        key: 'key',\n        secret: 'secret'\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'CREDENTIALS_PROFILE_ALREADY_CONFIGURED');\n  });","file":"unit/lib/plugins/aws/config-credentials.test.js","skipped":false,"dir":"test"},{"name":"should generate a zip file with the contents of the resources directory","suites":["test/unit/lib/plugins/aws/customResources/generateZip.test.js","when generating a zip file"],"updatePoint":{"line":17,"column":79,"index":625},"line":17,"code":"    it('should generate a zip file with the contents of the resources directory', async () => {\n      const zipFilePath = await requireUncached(async () => require('../../../../../../lib/plugins/aws/custom-resources/generate-zip')());\n\n      // List the files in the zip to make sure it is valid\n      const filesInZip = await listZipFiles(zipFilePath);\n      const filesInResourceDir = await globby('**', {\n        cwd: resourcesDir\n      });\n      expect(filesInZip).to.have.all.members(filesInResourceDir);\n    });","file":"unit/lib/plugins/aws/custom-resources/generate-zip.test.js","skipped":false,"dir":"test"},{"name":"should add one IAM role and the custom resources to the service","suites":["#addCustomResourceToService()"],"updatePoint":{"line":50,"column":69,"index":1720},"line":50,"code":"  it('should add one IAM role and the custom resources to the service', () => BbPromise.all([\n  // add the custom S3 resource\n  addCustomResourceToService(provider, 's3', [...iamRoleStatements, {\n    Effect: 'Allow',\n    Resource: 'arn:aws:s3:::some-bucket',\n    Action: ['s3:PutBucketNotification', 's3:GetBucketNotification']\n  }]),\n  // add the custom Cognito User Pool resource\n  addCustomResourceToService(provider, 'cognitoUserPool', [...iamRoleStatements, {\n    Effect: 'Allow',\n    Resource: '*',\n    Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool']\n  }]),\n  // add the custom Event Bridge resource\n  addCustomResourceToService(provider, 'eventBridge', [...iamRoleStatements, {\n    Effect: 'Allow',\n    Resource: 'arn:aws:events:*:*:rule/some-rule',\n    Action: ['events:PutRule', 'events:RemoveTargets', 'events:PutTargets', 'events:DeleteRule']\n  }, {\n    Action: ['events:CreateEventBus', 'events:DeleteEventBus'],\n    Effect: 'Allow',\n    Resource: 'arn:aws:events:*:*:event-bus/some-event-bus'\n  }])]).then(() => {\n    const {\n      Resources\n    } = serverless.service.provider.compiledCloudFormationTemplate;\n\n    // S3 Lambda Function\n    expect(Resources.CustomDashresourceDashexistingDashs3LambdaFunction).to.deep.equal({\n      Type: 'AWS::Lambda::Function',\n      Properties: {\n        Code: {\n          S3Bucket: {\n            Ref: 'ServerlessDeploymentBucket'\n          },\n          S3Key: 'artifact-dir-name/custom-resources.zip'\n        },\n        FunctionName: `${serviceName}-dev-custom-resource-existing-s3`,\n        Handler: 's3/handler.handler',\n        MemorySize: 1024,\n        Role: {\n          'Fn::GetAtt': ['IamRoleCustomResourcesLambdaExecution', 'Arn']\n        },\n        Runtime: 'nodejs16.x',\n        Timeout: 180\n      },\n      DependsOn: ['IamRoleCustomResourcesLambdaExecution']\n    });\n    // Cognito User Pool Lambda Function\n    expect(Resources.CustomDashresourceDashexistingDashcupLambdaFunction).to.deep.equal({\n      Type: 'AWS::Lambda::Function',\n      Properties: {\n        Code: {\n          S3Bucket: {\n            Ref: 'ServerlessDeploymentBucket'\n          },\n          S3Key: 'artifact-dir-name/custom-resources.zip'\n        },\n        FunctionName: `${serviceName}-dev-custom-resource-existing-cup`,\n        Handler: 'cognito-user-pool/handler.handler',\n        MemorySize: 1024,\n        Role: {\n          'Fn::GetAtt': ['IamRoleCustomResourcesLambdaExecution', 'Arn']\n        },\n        Runtime: 'nodejs16.x',\n        Timeout: 180\n      },\n      DependsOn: ['IamRoleCustomResourcesLambdaExecution']\n    });\n    // Event Bridge Lambda Function\n    expect(Resources.CustomDashresourceDasheventDashbridgeLambdaFunction).to.deep.equal({\n      Type: 'AWS::Lambda::Function',\n      Properties: {\n        Code: {\n          S3Bucket: {\n            Ref: 'ServerlessDeploymentBucket'\n          },\n          S3Key: 'artifact-dir-name/custom-resources.zip'\n        },\n        FunctionName: `${serviceName}-dev-custom-resource-event-bridge`,\n        Handler: 'event-bridge/handler.handler',\n        MemorySize: 1024,\n        Role: {\n          'Fn::GetAtt': ['IamRoleCustomResourcesLambdaExecution', 'Arn']\n        },\n        Runtime: 'nodejs16.x',\n        Timeout: 180\n      },\n      DependsOn: ['IamRoleCustomResourcesLambdaExecution']\n    });\n    // Iam Role\n    const RoleProps = Resources.IamRoleCustomResourcesLambdaExecution.Properties;\n    expect(RoleProps.AssumeRolePolicyDocument).to.deep.equal({\n      Statement: [{\n        Action: ['sts:AssumeRole'],\n        Effect: 'Allow',\n        Principal: {\n          Service: ['lambda.amazonaws.com']\n        }\n      }],\n      Version: '2012-10-17'\n    });\n    expect(RoleProps.Policies[0].PolicyDocument.Statement).to.have.deep.members([{\n      Effect: 'Allow',\n      Resource: 'arn:aws:lambda:*:*:function:custom-resource-func',\n      Action: ['lambda:AddPermission', 'lambda:RemovePermission']\n    }, {\n      Effect: 'Allow',\n      Resource: 'arn:aws:s3:::some-bucket',\n      Action: ['s3:PutBucketNotification', 's3:GetBucketNotification']\n    }, {\n      Effect: 'Allow',\n      Resource: '*',\n      Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool']\n    }, {\n      Action: ['events:PutRule', 'events:RemoveTargets', 'events:PutTargets', 'events:DeleteRule'],\n      Effect: 'Allow',\n      Resource: 'arn:aws:events:*:*:rule/some-rule'\n    }, {\n      Action: ['events:CreateEventBus', 'events:DeleteEventBus'],\n      Resource: 'arn:aws:events:*:*:event-bus/some-event-bus',\n      Effect: 'Allow'\n    }]);\n  }));","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"should use custom role when deployment role is provided","suites":["#addCustomResourceToService()"],"updatePoint":{"line":174,"column":61,"index":6320},"line":174,"code":"  it('should use custom role when deployment role is provided', async () => {\n    const role = 'arn:aws:iam::999999999999:role/my-role';\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'function',\n      command: 'package',\n      configExt: {\n        provider: {\n          iam: {\n            deploymentRole: role\n          }\n        },\n        functions: {\n          foo: {\n            handler: 'foo.bar',\n            events: [{\n              s3: {\n                bucket: 'my-bucket',\n                existing: true\n              }\n            }, {\n              cognitoUserPool: {\n                pool: 'my-user-pool',\n                trigger: 'PreSignUp',\n                existing: true\n              }\n            }]\n          }\n        }\n      }\n    });\n    const {\n      Resources\n    } = cfTemplate;\n    expect([Resources.CustomDashresourceDashexistingDashs3LambdaFunction.Properties.Role,\n    // S3\n    Resources.CustomDashresourceDashexistingDashcupLambdaFunction.Properties.Role // Cognito User Pool\n    ]).to.eql([role, role]);\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"should setup CloudWatch Logs when logs.frameworkLambda is true","suites":["#addCustomResourceToService()"],"updatePoint":{"line":214,"column":68,"index":7397},"line":214,"code":"  it('should setup CloudWatch Logs when logs.frameworkLambda is true', () => {\n    serverless.service.provider.logs = {\n      frameworkLambda: true\n    };\n    return BbPromise.all([\n    // add the custom S3 resource\n    addCustomResourceToService(provider, 's3', [...iamRoleStatements, {\n      Effect: 'Allow',\n      Resource: 'arn:aws:s3:::some-bucket',\n      Action: ['s3:PutBucketNotification', 's3:GetBucketNotification']\n    }]),\n    // add the custom Cognito User Pool resource\n    addCustomResourceToService(provider, 'cognitoUserPool', [...iamRoleStatements, {\n      Effect: 'Allow',\n      Resource: '*',\n      Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool']\n    }]),\n    // add the custom Event Bridge resource\n    addCustomResourceToService(provider, 'eventBridge', [...iamRoleStatements, {\n      Effect: 'Allow',\n      Resource: 'arn:aws:events:*:*:rule/some-rule',\n      Action: ['events:PutRule', 'events:RemoveTargets', 'events:PutTargets', 'events:DeleteRule']\n    }, {\n      Action: ['events:CreateEventBus', 'events:DeleteEventBus'],\n      Effect: 'Allow',\n      Resource: 'arn:aws:events:*:*:event-bus/some-event-bus'\n    }])]).then(() => {\n      const {\n        Resources\n      } = serverless.service.provider.compiledCloudFormationTemplate;\n\n      // S3 Lambda Function\n      expect(Resources.CustomDashresourceDashexistingDashs3LambdaFunction.DependsOn).to.include('CustomDashresourceDashexistingDashs3LogGroup');\n      // Cognito User Pool Lambda Function\n      expect(Resources.CustomDashresourceDashexistingDashcupLambdaFunction.DependsOn).to.include('CustomDashresourceDashexistingDashcupLogGroup');\n      // Event Bridge Lambda Function\n      expect(Resources.CustomDashresourceDasheventDashbridgeLambdaFunction.DependsOn).to.include('CustomDashresourceDasheventDashbridgeLogGroup');\n      // Iam Role\n      const RoleProps = Resources.IamRoleCustomResourcesLambdaExecution.Properties;\n      expect(RoleProps.Policies[0].PolicyDocument.Statement).to.include.deep.members([{\n        Effect: 'Allow',\n        Action: ['logs:CreateLogStream', 'logs:CreateLogGroup', 'logs:TagResource'],\n        Resource: [{\n          'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}' + ':log-group:/aws/lambda/some-service-dev*:*'\n        }]\n      }, {\n        Effect: 'Allow',\n        Action: ['logs:PutLogEvents'],\n        Resource: [{\n          'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}' + ':log-group:/aws/lambda/some-service-dev*:*:*'\n        }]\n      }]);\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when an unknown custom resource is used","suites":["#addCustomResourceToService()"],"updatePoint":{"line":268,"column":58,"index":9975},"line":268,"code":"  it('should throw when an unknown custom resource is used', () => {\n    return expect(addCustomResourceToService(provider, 'unknown', [])).to.be.rejectedWith('No implementation found');\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure function name doesn't extend maximum length","suites":["#addCustomResourceToService()"],"updatePoint":{"line":271,"column":63,"index":10173},"line":271,"code":"  it(\"should ensure function name doesn't extend maximum length\", () => {\n    serverless.service.service = 'some-unexpectedly-long-service-name';\n    return BbPromise.all([\n    // add the custom S3 resource\n    addCustomResourceToService(provider, 's3', [...iamRoleStatements, {\n      Effect: 'Allow',\n      Resource: 'arn:aws:s3:::some-bucket',\n      Action: ['s3:PutBucketNotification', 's3:GetBucketNotification']\n    }])]).then(() => {\n      const {\n        Resources\n      } = serverless.service.provider.compiledCloudFormationTemplate;\n      // S3 Lambda Function\n      expect(Resources.CustomDashresourceDashexistingDashs3LambdaFunction.Properties.FunctionName.length).to.be.below(65);\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"correctly takes stage from cli into account when constructing apiGatewayCloudWatchRole resource","suites":["test/unit/lib/plugins/aws/customResources/index.test.js"],"updatePoint":{"line":289,"column":101,"index":10998},"line":289,"code":"  it('correctly takes stage from cli into account when constructing apiGatewayCloudWatchRole resource', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      options: {\n        stage: 'testing'\n      },\n      configExt: {\n        provider: {\n          logs: {\n            restApi: true\n          }\n        }\n      }\n    });\n    const properties = cfTemplate.Resources.CustomDashresourceDashapigwDashcwDashroleLambdaFunction.Properties;\n    expect(properties.FunctionName.endsWith('testing-custom-resource-apigw-cw-role')).to.be.true;\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"correctly takes stage from config into account when constructing apiGatewayCloudWatchRole resource","suites":["test/unit/lib/plugins/aws/customResources/index.test.js"],"updatePoint":{"line":309,"column":104,"index":11622},"line":309,"code":"  it('correctly takes stage from config into account when constructing apiGatewayCloudWatchRole resource', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          stage: 'testing',\n          logs: {\n            restApi: true\n          }\n        }\n      }\n    });\n    const properties = cfTemplate.Resources.CustomDashresourceDashapigwDashcwDashroleLambdaFunction.Properties;\n    expect(properties.FunctionName.endsWith('testing-custom-resource-apigw-cw-role')).to.be.true;\n  });","file":"unit/lib/plugins/aws/custom-resources/index.test.js","skipped":false,"dir":"test"},{"name":"should append \"target\" suffix on  and ensure output targetId length is less than or equal 64","suites":["#getEventBusTargetId()"],"updatePoint":{"line":18,"column":111,"index":545},"line":18,"code":"    it(`should append \"target\" suffix on ${ruleName} and ensure output targetId length is less than or equal 64`, () => {\n      const targetId = getEventBusTargetId(ruleName);\n      expect(targetId.endsWith('target')).to.be.true;\n      expect(targetId).lengthOf.lte(64);\n    });","file":"unit/lib/plugins/aws/custom-resources/test/eventBridge.test.js","skipped":false,"dir":"test"},{"name":"should return the Lambda arn","suites":["#getLambdaArn()"],"updatePoint":{"line":11,"column":34,"index":251},"line":11,"code":"  it('should return the Lambda arn', () => {\n    const partition = 'aws';\n    const region = 'us-east-1';\n    const accountId = '123456';\n    const functionName = 'some-function';\n    const arn = getLambdaArn(partition, region, accountId, functionName);\n    expect(arn).to.equal('arn:aws:lambda:us-east-1:123456:function:some-function');\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return the govcloud Lambda arn","suites":["#getLambdaArn() govloud west"],"updatePoint":{"line":21,"column":43,"index":657},"line":21,"code":"  it('should return the govcloud Lambda arn', () => {\n    const partition = 'aws-us-gov';\n    const region = 'us-gov-west-1';\n    const accountId = '123456';\n    const functionName = 'some-function';\n    const arn = getLambdaArn(partition, region, accountId, functionName);\n    expect(arn).to.equal('arn:aws-us-gov:lambda:us-gov-west-1:123456:function:some-function');\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return the govcloud Lambda arn","suites":["#getLambdaArn() govcloud east"],"updatePoint":{"line":31,"column":43,"index":1086},"line":31,"code":"  it('should return the govcloud Lambda arn', () => {\n    const partition = 'aws-us-gov';\n    const region = 'us-gov-east-1';\n    const accountId = '123456';\n    const functionName = 'some-function';\n    const arn = getLambdaArn(partition, region, accountId, functionName);\n    expect(arn).to.equal('arn:aws-us-gov:lambda:us-gov-east-1:123456:function:some-function');\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return the china Lambda arn","suites":["#getLambdaArn() china region"],"updatePoint":{"line":41,"column":40,"index":1511},"line":41,"code":"  it('should return the china Lambda arn', () => {\n    const partition = 'aws-cn';\n    const region = 'cn-north-1';\n    const accountId = '123456';\n    const functionName = 'some-function';\n    const arn = getLambdaArn(partition, region, accountId, functionName);\n    expect(arn).to.equal('arn:aws-cn:lambda:cn-north-1:123456:function:some-function');\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return an object with information about the execution environment","suites":["#getEnvironment()"],"updatePoint":{"line":51,"column":78,"index":1949},"line":51,"code":"  it('should return an object with information about the execution environment', () => {\n    const context = {\n      invokedFunctionArn: 'arn:aws:lambda:us-east-1:123456:function:some-function'\n    };\n    const env = getEnvironment(context);\n    expect(env).to.deep.equal({\n      LambdaArn: 'arn:aws:lambda:us-east-1:123456:function:some-function',\n      Partition: 'aws',\n      Region: 'us-east-1',\n      AccountId: '123456',\n      LambdaName: 'some-function'\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return an object with information about the govcloud execution environment","suites":["#getEnvironment() govcloud east"],"updatePoint":{"line":66,"column":87,"index":2489},"line":66,"code":"  it('should return an object with information about the govcloud execution environment', () => {\n    const context = {\n      invokedFunctionArn: 'arn:aws-us-gov:lambda:us-gov-east-1:123456:function:some-function'\n    };\n    const env = getEnvironment(context);\n    expect(env).to.deep.equal({\n      LambdaArn: 'arn:aws-us-gov:lambda:us-gov-east-1:123456:function:some-function',\n      Partition: 'aws-us-gov',\n      Region: 'us-gov-east-1',\n      AccountId: '123456',\n      LambdaName: 'some-function'\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return an object with information about the govcloud execution environment","suites":["#getEnvironment() govcloud west"],"updatePoint":{"line":81,"column":87,"index":3062},"line":81,"code":"  it('should return an object with information about the govcloud execution environment', () => {\n    const context = {\n      invokedFunctionArn: 'arn:aws-us-gov:lambda:us-gov-west-1:123456:function:some-function'\n    };\n    const env = getEnvironment(context);\n    expect(env).to.deep.equal({\n      LambdaArn: 'arn:aws-us-gov:lambda:us-gov-west-1:123456:function:some-function',\n      Partition: 'aws-us-gov',\n      Region: 'us-gov-west-1',\n      AccountId: '123456',\n      LambdaName: 'some-function'\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should return an object with information about the china region execution environment","suites":["#getEnvironment() china region"],"updatePoint":{"line":96,"column":91,"index":3638},"line":96,"code":"  it('should return an object with information about the china region execution environment', () => {\n    const context = {\n      invokedFunctionArn: 'arn:aws-cn:lambda:cn-north-1:123456:function:some-function'\n    };\n    const env = getEnvironment(context);\n    expect(env).to.deep.equal({\n      LambdaArn: 'arn:aws-cn:lambda:cn-north-1:123456:function:some-function',\n      Partition: 'aws-cn',\n      Region: 'cn-north-1',\n      AccountId: '123456',\n      LambdaName: 'some-function'\n    });\n  });","file":"unit/lib/plugins/aws/custom-resources/test/utils.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsDeployFunction","#constructor()"],"updatePoint":{"line":75,"column":25,"index":1979},"line":75,"code":"    it('should have hooks', () => expect(awsDeployFunction.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsDeployFunction","#constructor()"],"updatePoint":{"line":76,"column":70,"index":2108},"line":76,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsDeployFunction.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should set an empty options object if no options are given","suites":["AwsDeployFunction","#constructor()"],"updatePoint":{"line":77,"column":66,"index":2250},"line":77,"code":"    it('should set an empty options object if no options are given', () => {\n      const awsDeployFunctionWithEmptyOptions = new AwsDeployFunction(serverless);\n      expect(awsDeployFunctionWithEmptyOptions.options).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"it should throw error if function is not provided","suites":["AwsDeployFunction","#checkIfFunctionExists()"],"updatePoint":{"line":94,"column":57,"index":2820},"line":94,"code":"    it('it should throw error if function is not provided', async () => {\n      serverless.service.functions = {};\n      await expect(awsDeployFunction.checkIfFunctionExists()).to.eventually.be.rejected;\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should check if the function is deployed and save the result","suites":["AwsDeployFunction","#checkIfFunctionExists()"],"updatePoint":{"line":98,"column":68,"index":3043},"line":98,"code":"    it('should check if the function is deployed and save the result', async () => {\n      awsDeployFunction.serverless.service.functions = {\n        first: {\n          name: 'first',\n          handler: 'handler.first'\n        }\n      };\n      await awsDeployFunction.checkIfFunctionExists();\n      expect(getFunctionStub.calledOnce).to.be.equal(true);\n      expect(getFunctionStub.calledWithExactly('Lambda', 'getFunction', {\n        FunctionName: 'first'\n      })).to.be.equal(true);\n      expect(awsDeployFunction.serverless.service.provider.remoteFunctionData).to.deep.equal({\n        func: {\n          name: 'first'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should return unmodified ARN if ARN was provided","suites":["AwsDeployFunction","#normalizeArnRole"],"updatePoint":{"line":146,"column":56,"index":4645},"line":146,"code":"    it('should return unmodified ARN if ARN was provided', async () => {\n      const arn = 'arn:aws:iam::123456789012:role/role';\n      const result = await awsDeployFunction.normalizeArnRole(arn);\n      expect(getAccountInfoStub).to.not.have.been.called;\n      expect(result).to.be.equal(arn);\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should return compiled ARN if role name was provided","suites":["AwsDeployFunction","#normalizeArnRole"],"updatePoint":{"line":152,"column":60,"index":4952},"line":152,"code":"    it('should return compiled ARN if role name was provided', async () => {\n      const roleName = 'MyCustomRole';\n      const result = await awsDeployFunction.normalizeArnRole(roleName);\n      expect(getAccountInfoStub).to.have.been.called;\n      expect(result).to.be.equal('arn:aws:iam::123456789012:role/role_123');\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should return compiled ARN if object role was provided","suites":["AwsDeployFunction","#normalizeArnRole"],"updatePoint":{"line":158,"column":62,"index":5282},"line":158,"code":"    it('should return compiled ARN if object role was provided', async () => {\n      const roleObj = {\n        'Fn::GetAtt': ['role_2', 'Arn']\n      };\n      const result = await awsDeployFunction.normalizeArnRole(roleObj);\n      expect(getRoleStub.calledOnce).to.be.equal(true);\n      expect(getAccountInfoStub).to.not.have.been.called;\n      expect(result).to.be.equal('arn:aws:iam::123456789012:role/role_2');\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should deploy the function if the hashes are different","suites":["AwsDeployFunction","#deployFunction()"],"updatePoint":{"line":194,"column":62,"index":6736},"line":194,"code":"    it('should deploy the function if the hashes are different', async () => {\n      cryptoStub.createHash().update().digest.onCall(0).returns('local-hash-zip-file');\n      await awsDeployFunction.deployFunction();\n      const data = fs.readFileSync(artifactFilePath);\n      expect(updateFunctionCodeStub.calledOnce).to.be.equal(true);\n      expect(readFileSyncStub.called).to.equal(true);\n      expect(updateFunctionCodeStub.calledWithExactly('Lambda', 'updateFunctionCode', {\n        FunctionName: 'first',\n        ZipFile: data\n      })).to.be.equal(true);\n      expect(readFileSyncStub.calledWithExactly(artifactFilePath)).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should deploy the function if the hashes are same but the \"force\" option is used","suites":["AwsDeployFunction","#deployFunction()"],"updatePoint":{"line":206,"column":88,"index":7413},"line":206,"code":"    it('should deploy the function if the hashes are same but the \"force\" option is used', async () => {\n      awsDeployFunction.options.force = true;\n      cryptoStub.createHash().update().digest.onCall(0).returns('remote-hash-zip-file');\n      await awsDeployFunction.deployFunction();\n      const data = fs.readFileSync(artifactFilePath);\n      expect(updateFunctionCodeStub.calledOnce).to.be.equal(true);\n      expect(readFileSyncStub.called).to.equal(true);\n      expect(updateFunctionCodeStub.calledWithExactly('Lambda', 'updateFunctionCode', {\n        FunctionName: 'first',\n        ZipFile: data\n      })).to.be.equal(true);\n      expect(readFileSyncStub.calledWithExactly(artifactFilePath)).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the hashes are the same","suites":["AwsDeployFunction","#deployFunction()"],"updatePoint":{"line":219,"column":49,"index":8098},"line":219,"code":"    it('should resolve if the hashes are the same', async () => {\n      cryptoStub.createHash().update().digest.onCall(0).returns('remote-hash-zip-file');\n      await awsDeployFunction.deployFunction();\n      expect(updateFunctionCodeStub.calledOnce).to.be.equal(false);\n      expect(readFileSyncStub.calledOnce).to.equal(true);\n      expect(readFileSyncStub.calledWithExactly(artifactFilePath)).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should log artifact size","suites":["AwsDeployFunction","#deployFunction()"],"updatePoint":{"line":226,"column":32,"index":8501},"line":226,"code":"    it('should log artifact size', async () => {\n      // awnY7Oi280gp5kTCloXzsqJCO4J766x6hATWqQsN/uM= <-- hash of the local zip file\n      readFileSyncStub.returns(Buffer.from('my-service.zip content'));\n      await awsDeployFunction.deployFunction();\n      expect(readFileSyncStub.calledOnce).to.equal(true);\n      expect(statSyncStub.calledOnce).to.equal(true);\n      expect(readFileSyncStub.calledWithExactly(artifactFilePath)).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should read the provided artifact","suites":["AwsDeployFunction","#deployFunction()","when artifact is provided"],"updatePoint":{"line":248,"column":43,"index":9400},"line":248,"code":"      it('should read the provided artifact', async () => {\n        await awsDeployFunction.deployFunction();\n        const data = fs.readFileSync(artifactZipFile);\n        expect(readFileSyncStub).to.have.been.calledWithExactly(artifactZipFile);\n        expect(statSyncStub).to.have.been.calledWithExactly(artifactZipFile);\n        expect(getFunctionStub).to.have.been.calledWithExactly('first');\n        expect(updateFunctionCodeStub.calledOnce).to.equal(true);\n        expect(updateFunctionCodeStub.calledWithExactly('Lambda', 'updateFunctionCode', {\n          FunctionName: 'first',\n          ZipFile: data\n        })).to.be.equal(true);\n      });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should support deploying function that has image defined with sha","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":308,"column":71,"index":11918},"line":308,"code":"  it('should support deploying function that has image defined with sha', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'foo'\n      },\n      awsRequestStubMap,\n      configExt: {\n        functions: {\n          foo: {\n            image: imageWithSha\n          }\n        }\n      }\n    });\n    expect(updateFunctionCodeStub).to.be.calledOnce;\n    expect(updateFunctionCodeStub.args[0][0].ImageUri).to.equal(imageWithSha);\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should support updating function with image config","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":327,"column":56,"index":12418},"line":327,"code":"  it('should support updating function with image config', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'foo'\n      },\n      awsRequestStubMap,\n      configExt: {\n        functions: {\n          foo: {\n            image: {\n              uri: imageWithSha,\n              workingDirectory: './workdir',\n              entryPoint: ['executable', 'param1'],\n              command: ['anotherexecutable']\n            }\n          }\n        }\n      }\n    });\n    expect(updateFunctionCodeStub).to.be.calledOnce;\n    expect(updateFunctionCodeStub.args[0][0].ImageUri).to.equal(imageWithSha);\n    expect(updateFunctionConfigurationStub).to.be.calledOnce;\n    expect(updateFunctionConfigurationStub.args[0][0].ImageConfig).to.deep.equal({\n      Command: ['anotherexecutable'],\n      EntryPoint: ['executable', 'param1'],\n      WorkingDirectory: './workdir'\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should skip updating function configuration if image config did not change","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":357,"column":80,"index":13391},"line":357,"code":"  it('should skip updating function configuration if image config did not change', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              CodeSha256: imageSha,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              ImageConfigResponse: {\n                ImageConfig: {\n                  Command: ['anotherexecutable'],\n                  EntryPoint: ['executable', 'param1'],\n                  WorkingDirectory: './workdir'\n                }\n              }\n            }\n          }\n        }\n      },\n      configExt: {\n        functions: {\n          basic: {\n            handler: null,\n            image: {\n              uri: imageWithSha,\n              workingDirectory: './workdir',\n              entryPoint: ['executable', 'param1'],\n              command: ['anotherexecutable']\n            }\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should skip deployment if image sha did not change","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":401,"column":56,"index":14647},"line":401,"code":"  it('should skip deployment if image sha did not change', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              CodeSha256: imageSha,\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      },\n      configExt: {\n        functions: {\n          basic: {\n            image: imageWithSha\n          }\n        }\n      }\n    });\n    expect(updateFunctionCodeStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should fail if function with image was previously defined with handler","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":432,"column":76,"index":15452},"line":432,"code":"  it('should fail if function with image was previously defined with handler', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      },\n      configExt: {\n        functions: {\n          basic: {\n            image: imageWithSha\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'DEPLOY_FUNCTION_CHANGE_BETWEEN_HANDLER_AND_IMAGE_ERROR');\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should fail if function with image was previously defined with handler","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":462,"column":76,"index":16320},"line":462,"code":"  it('should fail if function with image was previously defined with handler', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Image',\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'DEPLOY_FUNCTION_CHANGE_BETWEEN_HANDLER_AND_IMAGE_ERROR');\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should handle retry when `updateFunctionConfiguration` returns `ResourceConflictException` error","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":485,"column":102,"index":17094},"line":485,"code":"  it('should handle retry when `updateFunctionConfiguration` returns `ResourceConflictException` error', async () => {\n    const innerUpdateFunctionConfigurationStub = sinon.stub().onFirstCall().throws({\n      providerError: {\n        code: 'ResourceConflictException'\n      }\n    }).onSecondCall().resolves({});\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          updateFunctionConfiguration: innerUpdateFunctionConfigurationStub\n        }\n      },\n      modulesCacheStub: {\n        'timers-ext/promise/sleep': sinon.stub().returns({})\n      },\n      configExt: {\n        functions: {\n          basic: {\n            timeout: 50\n          }\n        }\n      }\n    });\n    expect(innerUpdateFunctionConfigurationStub.callCount).to.equal(2);\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should update function configuration if configuration changed","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":517,"column":67,"index":18015},"line":517,"code":"  it('should update function configuration if configuration changed', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            kmsKeyArn,\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            onError: onErrorHandler,\n            role,\n            timeout,\n            vpc: {\n              securityGroupIds: ['sg-111', 'sg-222'],\n              subnetIds: ['subnet-111', 'subnet-222']\n            },\n            layers: [layerArn, secondLayerArn]\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      KMSKeyArn: kmsKeyArn,\n      Description: description,\n      Handler: handler,\n      Environment: {\n        Variables: {\n          ANOTHERVAR: 'anothervalue',\n          VARIABLE: 'value'\n        }\n      },\n      MemorySize: memorySize,\n      Timeout: timeout,\n      DeadLetterConfig: {\n        TargetArn: onErrorHandler\n      },\n      Role: role,\n      VpcConfig: {\n        SecurityGroupIds: ['sg-111', 'sg-222'],\n        SubnetIds: ['subnet-111', 'subnet-222']\n      },\n      Layers: [layerArn, secondLayerArn]\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should update function configuration if configuration changed where all arn layers were removed","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":590,"column":101,"index":19958},"line":590,"code":"  it('should update function configuration if configuration changed where all arn layers were removed', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: secondLayerArn\n              }, {\n                Arn: layerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            layers: []\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      Layers: []\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should update function configuration if the configuration changed and is managed by serverless console","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":651,"column":108,"index":21598},"line":651,"code":"  it('should update function configuration if the configuration changed and is managed by serverless console', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value',\n                  AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n                  SLS_ORG_ID: '123'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: layerArn\n              }, {\n                Arn: consoleLayerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value',\n              VARIABLE2: 'value2'\n            },\n            name: functionName,\n            memorySize,\n            layers: [layerArn, secondLayerArn]\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      Environment: {\n        Variables: {\n          ANOTHERVAR: 'anothervalue',\n          VARIABLE: 'value',\n          VARIABLE2: 'value2',\n          AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n          SLS_ORG_ID: '123'\n        }\n      },\n      Layers: [layerArn, secondLayerArn, consoleLayerArn]\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should update function configuration and remove local arn layers if the configuration changed and is managed by serverless console","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":724,"column":136,"index":23737},"line":724,"code":"  it('should update function configuration and remove local arn layers if the configuration changed and is managed by serverless console', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value',\n                  AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n                  SLS_ORG_ID: '123'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: layerArn\n              }, {\n                Arn: consoleLayerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {},\n            name: functionName,\n            memorySize,\n            layers: []\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      Environment: {\n        Variables: {\n          ANOTHERVAR: 'anothervalue',\n          AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n          SLS_ORG_ID: '123'\n        }\n      },\n      Layers: [consoleLayerArn]\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should skip updating properties that contain references","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":792,"column":61,"index":25611},"line":792,"code":"  it('should skip updating properties that contain references', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      },\n      configExt: {\n        functions: {\n          basic: {\n            name: functionName,\n            role,\n            timeout,\n            vpc: {\n              securityGroupIds: ['sg-111', {\n                Ref: 'mySGRef'\n              }],\n              subnetIds: ['subnet-111', 'subnet-222']\n            },\n            environment: {\n              VARIABLE: {\n                Ref: 'SomeReference'\n              }\n            }\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      Handler: 'basic.handler',\n      Timeout: timeout,\n      VpcConfig: {\n        SubnetIds: ['subnet-111', 'subnet-222']\n      },\n      Role: role\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should update function configuration with provider-level properties","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":844,"column":73,"index":26960},"line":844,"code":"  it('should update function configuration with provider-level properties', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              State: 'Active',\n              LastUpdateStatus: 'Successful'\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue',\n            VARIABLE: 'value'\n          },\n          memorySize,\n          iam: {\n            role\n          },\n          timeout,\n          vpc: {\n            securityGroupIds: ['sg-111', 'sg-222'],\n            subnetIds: ['subnet-111', 'subnet-222']\n          }\n        },\n        functions: {\n          basic: {\n            name: functionName\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).to.be.calledWithExactly({\n      FunctionName: functionName,\n      Handler: 'basic.handler',\n      Environment: {\n        Variables: {\n          ANOTHERVAR: 'anothervalue',\n          VARIABLE: 'value'\n        }\n      },\n      MemorySize: memorySize,\n      Timeout: timeout,\n      Role: role,\n      VpcConfig: {\n        SecurityGroupIds: ['sg-111', 'sg-222'],\n        SubnetIds: ['subnet-111', 'subnet-222']\n      }\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should not update function configuration if configuration did not change","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":906,"column":78,"index":28537},"line":906,"code":"  it('should not update function configuration if configuration did not change', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              KMSKeyArn: kmsKeyArn,\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              DeadLetterConfig: {\n                TargetArn: onErrorHandler\n              },\n              Timeout: timeout,\n              Layers: [{\n                Arn: secondLayerArn\n              }, {\n                Arn: layerArn\n              }],\n              Role: role,\n              VpcConfig: {\n                VpcId: 'vpc-xxxx',\n                SecurityGroupIds: ['sg-111', 'sg-222'],\n                SubnetIds: ['subnet-222', 'subnet-111']\n              }\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            kmsKeyArn,\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            onError: onErrorHandler,\n            role,\n            timeout,\n            vpc: {\n              securityGroupIds: ['sg-111', 'sg-222'],\n              subnetIds: ['subnet-111', 'subnet-222']\n            },\n            layers: [layerArn, secondLayerArn]\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should not update function configuration if configuration includes console managed functions","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":983,"column":98,"index":30743},"line":983,"code":"  it('should not update function configuration if configuration includes console managed functions', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              KMSKeyArn: kmsKeyArn,\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value',\n                  AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n                  SLS_ORG_ID: '123'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              DeadLetterConfig: {\n                TargetArn: onErrorHandler\n              },\n              Timeout: timeout,\n              Layers: [{\n                Arn: secondLayerArn\n              }, {\n                Arn: layerArn\n              }, {\n                Arn: consoleLayerArn\n              }],\n              Role: role,\n              VpcConfig: {\n                VpcId: 'vpc-xxxx',\n                SecurityGroupIds: ['sg-111', 'sg-222'],\n                SubnetIds: ['subnet-222', 'subnet-111']\n              }\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            kmsKeyArn,\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            onError: onErrorHandler,\n            role,\n            timeout,\n            vpc: {\n              securityGroupIds: ['sg-111', 'sg-222'],\n              subnetIds: ['subnet-111', 'subnet-222']\n            },\n            layers: [layerArn, secondLayerArn]\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should not update function configuration if configuration includes console managed layers locally","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1064,"column":103,"index":33124},"line":1064,"code":"  it('should not update function configuration if configuration includes console managed layers locally', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value',\n                  AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n                  SLS_ORG_ID: '123'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: secondLayerArn\n              }, {\n                Arn: layerArn\n              }, {\n                Arn: consoleLayerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value',\n              AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n              SLS_ORG_ID: '123'\n            },\n            name: functionName,\n            memorySize,\n            layers: [layerArn, secondLayerArn, consoleLayerArn]\n          }\n        }\n      }\n    });\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should not update function configuration if function is console managed and has reference layers","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1128,"column":102,"index":35008},"line":1128,"code":"  it('should not update function configuration if function is console managed and has reference layers', async () => {\n    const runServerlessConfig = {\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value',\n                  AWS_LAMBDA_EXEC_WRAPPER: '/opt/lib/libthundra-wrapper.so',\n                  SLS_ORG_ID: '123'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: layerArn\n              }, {\n                Arn: consoleLayerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            layers: [layerArn, {\n              Ref: 'TestLambdaLayer'\n            }]\n          }\n        }\n      }\n    };\n    await runServerless(runServerlessConfig);\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should not update function configuration if function has reference layers","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1191,"column":79,"index":36782},"line":1191,"code":"  it('should not update function configuration if function has reference layers', async () => {\n    const runServerlessConfig = {\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000',\n              PackageType: 'Zip',\n              Description: description,\n              Handler: handler,\n              State: 'Active',\n              LastUpdateStatus: 'Successful',\n              Environment: {\n                Variables: {\n                  ANOTHERVAR: 'anothervalue',\n                  VARIABLE: 'value'\n                }\n              },\n              FunctionName: functionName,\n              MemorySize: memorySize,\n              Layers: [{\n                Arn: layerArn\n              }]\n            }\n          }\n        }\n      },\n      configExt: {\n        provider: {\n          environment: {\n            ANOTHERVAR: 'anothervalue'\n          }\n        },\n        functions: {\n          basic: {\n            description,\n            handler,\n            environment: {\n              VARIABLE: 'value'\n            },\n            name: functionName,\n            memorySize,\n            layers: [layerArn, {\n              Ref: 'TestLambdaLayer'\n            }]\n          }\n        }\n      }\n    };\n    await runServerless(runServerlessConfig);\n    expect(updateFunctionConfigurationStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"configuration uses `provider.kmsKeyArn` if no `kmsKeyArn` provided on function level","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1250,"column":90,"index":38397},"line":1250,"code":"  it('configuration uses `provider.kmsKeyArn` if no `kmsKeyArn` provided on function level', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      lastLifecycleHookName: 'deploy:function:deploy',\n      awsRequestStubMap,\n      configExt: {\n        provider: {\n          kmsKeyArn: 'arn:aws:kms:us-east-1:oldKey'\n        },\n        functions: {\n          basic: {\n            handler: 'index.handler',\n            name: 'foobar'\n          }\n        }\n      }\n    });\n    sinon.assert.calledWith(updateFunctionConfigurationStub, {\n      Handler: 'index.handler',\n      FunctionName: 'foobar',\n      KMSKeyArn: 'arn:aws:kms:us-east-1:oldKey'\n    });\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should surface request error if it's not about function not being found","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1277,"column":77,"index":39142},"line":1277,"code":"  it(\"should surface request error if it's not about function not being found\", async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      lastLifecycleHookName: 'deploy:function:deploy',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: () => {\n            throw new Error('Some side error');\n          }\n        }\n      }\n    })).to.be.eventually.rejectedWith('Some side error');\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should surface meaningful error if function is not yet deployed","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1296,"column":69,"index":39716},"line":1296,"code":"  it('should surface meaningful error if function is not yet deployed', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      lastLifecycleHookName: 'deploy:function:deploy',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: () => {\n            throw Object.assign(new Error('Function not found'), {\n              providerError: {\n                code: 'ResourceNotFoundException'\n              }\n            });\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'FUNCTION_NOT_YET_DEPLOYED');\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should handle situation where function is not immediately in desired state","suites":["test/unit/lib/plugins/aws/deployFunction.test.js"],"updatePoint":{"line":1319,"column":80,"index":40465},"line":1319,"code":"  it('should handle situation where function is not immediately in desired state', async () => {\n    const successResponse = {\n      Configuration: {\n        LastModified: '2020-05-20T15:34:16.494+0000',\n        State: 'Active',\n        LastUpdateStatus: 'Successful'\n      }\n    };\n    const getFunctionStub = sinon.stub().resolves(successResponse).onCall(1).resolves({\n      Configuration: {\n        LastModified: '2020-05-20T15:34:16.494+0000',\n        State: 'Active',\n        LastUpdateStatus: 'InProgress'\n      }\n    }).onCall(2).resolves(successResponse);\n    await runServerless({\n      fixture: 'function',\n      command: 'deploy function',\n      options: {\n        function: 'basic'\n      },\n      lastLifecycleHookName: 'deploy:function:deploy',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        Lambda: {\n          ...awsRequestStubMap.Lambda,\n          getFunction: getFunctionStub\n        }\n      }\n    });\n    expect(getFunctionStub).to.have.been.calledThrice;\n  });","file":"unit/lib/plugins/aws/deploy-function.test.js","skipped":false,"dir":"test"},{"name":"should print no deployments in case there are none","suites":["AwsDeployList","#listDeployments()"],"updatePoint":{"line":31,"column":58,"index":1071},"line":31,"code":"    it('should print no deployments in case there are none', async () => {\n      const s3Response = {\n        Contents: []\n      };\n      const listObjectsStub = sinon.stub(awsDeployList.provider, 'request').resolves(s3Response);\n      await awsDeployList.listDeployments();\n      expect(listObjectsStub.calledOnce).to.be.equal(true);\n      expect(listObjectsStub.calledWithExactly('S3', 'listObjectsV2', {\n        Bucket: awsDeployList.bucketName,\n        Prefix: `${s3Key}`\n      })).to.be.equal(true);\n      awsDeployList.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"should display all available deployments","suites":["AwsDeployList","#listDeployments()"],"updatePoint":{"line":44,"column":48,"index":1622},"line":44,"code":"    it('should display all available deployments', async () => {\n      const s3Response = {\n        Contents: [{\n          Key: `${s3Key}/113304333331-2016-08-18T13:40:06/artifact.zip`\n        }, {\n          Key: `${s3Key}/113304333331-2016-08-18T13:40:06/cloudformation.json`\n        }, {\n          Key: `${s3Key}/903940390431-2016-08-18T23:42:08/artifact.zip`\n        }, {\n          Key: `${s3Key}/903940390431-2016-08-18T23:42:08/cloudformation.json`\n        }]\n      };\n      const listObjectsStub = sinon.stub(awsDeployList.provider, 'request').resolves(s3Response);\n      await awsDeployList.listDeployments();\n      expect(listObjectsStub.calledOnce).to.be.equal(true);\n      expect(listObjectsStub.calledWithExactly('S3', 'listObjectsV2', {\n        Bucket: awsDeployList.bucketName,\n        Prefix: `${s3Key}`\n      })).to.be.equal(true);\n      awsDeployList.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["AwsDeployList","#listFunctions()"],"updatePoint":{"line":80,"column":41,"index":3115},"line":80,"code":"    it('should run promise chain in order', async () => {\n      await awsDeployList.listFunctions();\n      expect(getFunctionsStub.calledOnce).to.equal(true);\n      expect(getFunctionVersionsStub.calledAfter(getFunctionsStub)).to.equal(true);\n      expect(displayFunctionsStub.calledAfter(getFunctionVersionsStub)).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"should get all service related functions","suites":["AwsDeployList","#getFunctions()"],"updatePoint":{"line":113,"column":48,"index":4203},"line":113,"code":"    it('should get all service related functions', async () => {\n      const expectedResult = [{\n        FunctionName: 'listDeployments-dev-func1'\n      }, {\n        FunctionName: 'listDeployments-dev-func2'\n      }];\n      const result = await awsDeployList.getFunctions();\n      expect(listFunctionsStub.callCount).to.equal(2);\n      expect(result).to.deep.equal(expectedResult);\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"should return the versions for the provided function when response is paginated","suites":["AwsDeployList","#getFunctionPaginatedVersions()"],"updatePoint":{"line":142,"column":87,"index":5164},"line":142,"code":"    it('should return the versions for the provided function when response is paginated', async () => {\n      const params = {\n        FunctionName: 'listDeployments-dev-func'\n      };\n      const result = await awsDeployList.getFunctionPaginatedVersions(params);\n      const expectedResult = {\n        Versions: [{\n          FunctionName: 'listDeployments-dev-func',\n          Version: '1'\n        }, {\n          FunctionName: 'listDeployments-dev-func',\n          Version: '2'\n        }]\n      };\n      expect(result).to.deep.equal(expectedResult);\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"should return the versions for the provided functions","suites":["AwsDeployList","#getFunctionVersions()"],"updatePoint":{"line":172,"column":61,"index":6108},"line":172,"code":"    it('should return the versions for the provided functions', async () => {\n      const funcs = [{\n        FunctionName: 'listDeployments-dev-func1'\n      }, {\n        FunctionName: 'listDeployments-dev-func2'\n      }];\n      const result = await awsDeployList.getFunctionVersions(funcs);\n      const expectedResult = [{\n        Versions: [{\n          FunctionName: 'listDeployments-dev-func',\n          Version: '$LATEST'\n        }]\n      }, {\n        Versions: [{\n          FunctionName: 'listDeployments-dev-func',\n          Version: '$LATEST'\n        }]\n      }];\n      expect(listVersionsByFunctionStub.calledTwice).to.equal(true);\n      expect(result).to.deep.equal(expectedResult);\n    });","file":"unit/lib/plugins/aws/deploy-list.test.js","skipped":false,"dir":"test"},{"name":"with nonexistent stack - first deploy","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls"],"updatePoint":{"line":23,"column":45,"index":740},"line":23,"code":"    it('with nonexistent stack - first deploy', async () => {\n      const describeStacksStub = sinon.stub().onFirstCall().throws('error', 'stack does not exist').onSecondCall().resolves({\n        Stacks: [{}]\n      });\n      const createStackStub = sinon.stub().resolves({});\n      const updateStackStub = sinon.stub().resolves({});\n      const s3UploadStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves({});\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: s3UploadStub,\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: describeStacksStub,\n          createStack: createStackStub,\n          updateStack: updateStackStub,\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'CREATE_COMPLETE'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          provider: {\n            deploymentMethod: 'direct'\n          }\n        }\n      });\n      expect(createStackStub).to.be.calledOnce;\n      expect(updateStackStub).to.be.calledOnce;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).not.to.be.called;\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with nonexistent stack - first deploy with custom deployment bucket","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls"],"updatePoint":{"line":87,"column":75,"index":3006},"line":87,"code":"    it('with nonexistent stack - first deploy with custom deployment bucket', async () => {\n      const describeStacksStub = sinon.stub().onFirstCall().throws('error', 'stack does not exist').onSecondCall().resolves({\n        Stacks: [{}]\n      });\n      const createStackStub = sinon.stub().resolves({});\n      const updateStackStub = sinon.stub().resolves({});\n      const s3UploadStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves({});\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: s3UploadStub,\n          headBucket: {},\n          getBucketLocation: () => {\n            return {\n              LocationConstraint: 'us-east-1'\n            };\n          }\n        },\n        CloudFormation: {\n          describeStacks: describeStacksStub,\n          createStack: createStackStub,\n          updateStack: updateStackStub,\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'CREATE_COMPLETE'\n            }]\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          provider: {\n            deploymentBucket: 'existing-s3-bucket',\n            deploymentMethod: 'direct'\n          }\n        }\n      });\n      expect(createStackStub).to.be.calledOnce;\n      expect(updateStackStub).not.to.be.called;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).not.to.be.called;\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - subsequent deploy","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls"],"updatePoint":{"line":152,"column":47,"index":5276},"line":152,"code":"    it('with existing stack - subsequent deploy', async () => {\n      const s3BucketPrefix = 'serverless/test-aws-deploy-with-existing-stack/dev';\n      const s3UploadStub = sinon.stub().resolves();\n      const createStackStub = sinon.stub().resolves({});\n      const updateStackStub = sinon.stub().resolves({});\n      const listObjectsV2Stub = sinon.stub().onFirstCall().resolves({\n        Contents: []\n      }).onSecondCall().resolves({\n        Contents: [{\n          Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/artifact.zip`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704352-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704352-2020-05-20T15:31:44.359Z/artifact.zip`\n        }]\n      });\n      const deleteObjectsStub = sinon.stub().resolves();\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: listObjectsV2Stub,\n          upload: s3UploadStub,\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          createStack: createStackStub,\n          updateStack: updateStackStub,\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'UPDATE_COMPLETE'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          // Default, non-deterministic service-name invalidates this test as S3 Bucket cleanup relies on it\n          service: 'test-aws-deploy-with-existing-stack',\n          provider: {\n            deploymentMethod: 'direct',\n            deploymentBucket: {\n              maxPreviousDeploymentArtifacts: 1\n            }\n          }\n        }\n      });\n      expect(createStackStub).not.to.be.called;\n      expect(updateStackStub).to.be.calledOnce;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).to.be.calledWithExactly({\n        Bucket: 's3-bucket-resource',\n        Delete: {\n          Objects: [{\n            Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n          }, {\n            Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/artifact.zip`\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - with deployment bucket resource missing from CloudFormation template","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls"],"updatePoint":{"line":247,"column":98,"index":8920},"line":247,"code":"    it('with existing stack - with deployment bucket resource missing from CloudFormation template', async () => {\n      const createStackStub = sinon.stub().resolves({});\n      const updateStackStub = sinon.stub().resolves({});\n      const describeStackResourceStub = sinon.stub().onFirstCall().throws(() => {\n        const err = new Error('does not exist for stack');\n        err.providerError = {\n          code: 'ValidationError'\n        };\n        return err;\n      }).onSecondCall().resolves({\n        StackResourceDetail: {\n          PhysicalResourceId: 's3-bucket-resource'\n        }\n      });\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          headBucket: () => {\n            const err = new Error();\n            err.code = 'AWS_S3_HEAD_BUCKET_NOT_FOUND';\n            throw err;\n          }\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          validateTemplate: {},\n          createStack: createStackStub,\n          updateStack: updateStackStub,\n          getTemplate: () => {\n            return {\n              TemplateBody: JSON.stringify({})\n            };\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'UPDATE_COMPLETE'\n            }]\n          },\n          describeStackResource: describeStackResourceStub\n        }\n      };\n      const {\n        serverless,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          provider: {\n            deploymentMethod: 'direct'\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges'\n      });\n      expect(createStackStub).not.to.be.called;\n      expect(updateStackStub).to.be.calledWithExactly({\n        StackName: awsNaming.getStackName(),\n        Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],\n        Parameters: [],\n        NotificationARNs: [],\n        Tags: [{\n          Key: 'STAGE',\n          Value: 'dev'\n        }],\n        TemplateBody: JSON.stringify({\n          Resources: serverless.service.provider.coreCloudFormationTemplate.Resources,\n          Outputs: serverless.service.provider.coreCloudFormationTemplate.Outputs\n        })\n      });\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support custom deployment role","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":427,"column":47,"index":14462},"line":427,"code":"      it('should support custom deployment role', () => {\n        expect(createStackStub.getCall(0).args[0].RoleARN).to.equal(deploymentRole);\n        expect(updateStackStub.getCall(0).args[0].RoleARN).to.equal(deploymentRole);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `notificationsArns`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":431,"column":44,"index":14697},"line":431,"code":"      it('should support `notificationsArns`', () => {\n        expect(createStackStub.getCall(0).args[0].NotificationARNs).to.deep.equal(notificationArns);\n        expect(updateStackStub.getCall(0).args[0].NotificationARNs).to.deep.equal(notificationArns);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackParameters`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":435,"column":42,"index":14962},"line":435,"code":"      it('should support `stackParameters`', () => {\n        expect(createStackStub.getCall(0).args[0].Parameters).to.deep.equal(stackParameters);\n        expect(updateStackStub.getCall(0).args[0].Parameters).to.deep.equal(stackParameters);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackPolicy`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":439,"column":38,"index":15209},"line":439,"code":"      it('should support `stackPolicy`', () => {\n        expect(updateStackStub.getCall(0).args[0].StackPolicyBody).to.deep.equal(JSON.stringify({\n          Statement: stackPolicy\n        }));\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `rollbackConfiguration`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":444,"column":48,"index":15422},"line":444,"code":"      it('should support `rollbackConfiguration`', () => {\n        expect(updateStackStub.getCall(0).args[0].RollbackConfiguration).to.deep.equal(rollbackConfiguration);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `disableRollback`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":447,"column":42,"index":15596},"line":447,"code":"      it('should support `disableRollback`', () => {\n        expect(createStackStub.getCall(0).args[0].DisableRollback).to.be.true;\n        expect(updateStackStub.getCall(0).args[0].DisableRollback).to.be.true;\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackTags`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with direct create/update calls","custom deployment-related properties"],"updatePoint":{"line":451,"column":36,"index":15811},"line":451,"code":"      it('should support `stackTags`', () => {\n        expect(createStackStub.getCall(0).args[0].Tags).to.deep.equal([{\n          Key: 'STAGE',\n          Value: 'dev'\n        }, {\n          Key: 'TAG',\n          Value: 'value'\n        }, {\n          Key: 'ANOTHERTAG',\n          Value: 'anotherval'\n        }]);\n        expect(updateStackStub.getCall(0).args[0].Tags).to.deep.equal([{\n          Key: 'STAGE',\n          Value: 'dev'\n        }, {\n          Key: 'TAG',\n          Value: 'value'\n        }, {\n          Key: 'ANOTHERTAG',\n          Value: 'anotherval'\n        }]);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with nonexistent stack - first deploy with custom deployment bucket","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":476,"column":75,"index":16490},"line":476,"code":"    it('with nonexistent stack - first deploy with custom deployment bucket', async () => {\n      const describeStacksStub = sinon.stub().onFirstCall().throws('error', 'stack does not exist').onSecondCall().resolves({\n        Stacks: [{}]\n      });\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const s3UploadStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves({});\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: s3UploadStub,\n          headBucket: {},\n          getBucketLocation: () => {\n            return {\n              LocationConstraint: 'us-east-1'\n            };\n          }\n        },\n        CloudFormation: {\n          describeStacks: describeStacksStub,\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          deleteChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'CREATE_COMPLETE'\n            }]\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          provider: {\n            deploymentBucket: 'existing-s3-bucket'\n          }\n        }\n      });\n      expect(createChangeSetStub).to.be.calledOnce;\n      expect(createChangeSetStub.getCall(0).args[0].ChangeSetType).to.equal('CREATE');\n      expect(executeChangeSetStub).to.be.calledOnce;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).not.to.be.called;\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with nonexistent stack - first deploy","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":548,"column":45,"index":19100},"line":548,"code":"    it('with nonexistent stack - first deploy', async () => {\n      const describeStacksStub = sinon.stub().onFirstCall().throws('error', 'stack does not exist').onSecondCall().resolves({\n        Stacks: [{}]\n      });\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const s3UploadStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves({});\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: s3UploadStub,\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: describeStacksStub,\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          deleteChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'CREATE_COMPLETE'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap\n      });\n      expect(createChangeSetStub).to.be.calledTwice;\n      expect(createChangeSetStub.getCall(0).args[0].ChangeSetType).to.equal('CREATE');\n      expect(createChangeSetStub.getCall(1).args[0].ChangeSetType).to.equal('UPDATE');\n      expect(executeChangeSetStub).to.be.calledTwice;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).not.to.be.called;\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with nonexistent stack - should output an appropriate error message for an abnormal stack state","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":616,"column":103,"index":21760},"line":616,"code":"    it('with nonexistent stack - should output an appropriate error message for an abnormal stack state', async () => {\n      const describeStacksStub = sinon.stub().onFirstCall().resolves({\n        Stacks: [{\n          StackStatus: 'REVIEW_IN_PROGRESS'\n        }]\n      });\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const s3UploadStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves({});\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: s3UploadStub,\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: describeStacksStub,\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          deleteChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          describeStackEvents: {},\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap\n      })).to.have.been.eventually.rejected.with.property('code', 'AWS_CLOUDFORMATION_INACTIVE_STACK');\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - subsequent deploy","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":670,"column":47,"index":23586},"line":670,"code":"    it('with existing stack - subsequent deploy', async () => {\n      const s3BucketPrefix = 'serverless/test-aws-deploy-with-existing-stack/dev';\n      const s3UploadStub = sinon.stub().resolves();\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const listObjectsV2Stub = sinon.stub().onFirstCall().resolves({\n        Contents: []\n      }).onSecondCall().resolves({\n        Contents: [{\n          Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/artifact.zip`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704352-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n        }, {\n          Key: `${s3BucketPrefix}/1589988704352-2020-05-20T15:31:44.359Z/artifact.zip`\n        }]\n      });\n      const deleteObjectsStub = sinon.stub().resolves();\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: listObjectsV2Stub,\n          upload: s3UploadStub,\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          deleteChangeSet: {},\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'UPDATE_COMPLETE'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        configExt: {\n          // Default, non-deterministic service-name invalidates this test as S3 Bucket cleanup relies on it\n          service: 'test-aws-deploy-with-existing-stack',\n          provider: {\n            deploymentBucket: {\n              maxPreviousDeploymentArtifacts: 1\n            }\n          }\n        }\n      });\n      expect(createChangeSetStub).to.be.calledOnce;\n      expect(createChangeSetStub.getCall(0).args[0].ChangeSetType).to.equal('UPDATE');\n      expect(executeChangeSetStub).to.be.calledOnce;\n      const wasCloudFormationTemplateUploadInitiated = s3UploadStub.args.some(call => call[0].Key.endsWith('compiled-cloudformation-template.json'));\n      expect(wasCloudFormationTemplateUploadInitiated).to.be.true;\n      expect(deleteObjectsStub).to.be.calledWithExactly({\n        Bucket: 's3-bucket-resource',\n        Delete: {\n          Objects: [{\n            Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json`\n          }, {\n            Key: `${s3BucketPrefix}/1589988704351-2020-05-20T15:31:44.359Z/artifact.zip`\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - subsequent deploy with empty changeset","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":766,"column":68,"index":27314},"line":766,"code":"    it('with existing stack - subsequent deploy with empty changeset', async () => {\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const deleteChangeSetStub = sinon.stub().resolves();\n      const deleteObjectsStub = sinon.stub().resolves();\n      let objectsToRemove;\n      const listObjectsV2Stub = sinon.stub().onFirstCall().resolves({\n        Contents: []\n      }).onSecondCall().callsFake(params => {\n        objectsToRemove = [{\n          Key: `${params.Prefix}/compiled-cloudformation-template.json`\n        }, {\n          Key: `${params.Prefix}/artifact.zip`\n        }];\n        return {\n          Contents: objectsToRemove\n        };\n      });\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: listObjectsV2Stub,\n          upload: {},\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          deleteChangeSet: deleteChangeSetStub,\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'FAILED',\n            StatusReason: 'No updates are to be performed.'\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap\n      });\n      expect(createChangeSetStub).to.be.calledOnce;\n      expect(createChangeSetStub.getCall(0).args[0].ChangeSetType).to.equal('UPDATE');\n      expect(executeChangeSetStub).not.to.be.called;\n      expect(deleteChangeSetStub).to.be.calledTwice;\n      expect(deleteObjectsStub).to.be.calledWithExactly({\n        Bucket: 's3-bucket-resource',\n        Delete: {\n          Objects: objectsToRemove\n        }\n      });\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should fail if cannot create a change set","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":838,"column":49,"index":29740},"line":838,"code":"    it('should fail if cannot create a change set', async () => {\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          deleteObjects: {},\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: {},\n          headBucket: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          deleteChangeSet: {},\n          createChangeSet: {},\n          executeChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'FAILED',\n            StatusReason: 'Some internal reason'\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 's3-bucket-resource'\n            }\n          },\n          validateTemplate: {},\n          listStackResources: {}\n        }\n      };\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap\n      })).to.have.been.eventually.rejected.with.property('code', 'AWS_CLOUD_FORMATION_CHANGE_SET_CREATION_FAILED');\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - with deployment bucket resource missing from CloudFormation template","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets"],"updatePoint":{"line":885,"column":98,"index":31207},"line":885,"code":"    it('with existing stack - with deployment bucket resource missing from CloudFormation template', async () => {\n      const createChangeSetStub = sinon.stub().resolves({});\n      const executeChangeSetStub = sinon.stub().resolves({});\n      const describeStackResourceStub = sinon.stub().onFirstCall().throws(() => {\n        const err = new Error('does not exist for stack');\n        err.providerError = {\n          code: 'ValidationError'\n        };\n        return err;\n      }).onSecondCall().resolves({\n        StackResourceDetail: {\n          PhysicalResourceId: 's3-bucket-resource'\n        }\n      });\n      const awsRequestStubMap = {\n        ...baseAwsRequestStubMap,\n        ECR: {\n          describeRepositories: sinon.stub().throws({\n            providerError: {\n              code: 'RepositoryNotFoundException'\n            }\n          })\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          headBucket: () => {\n            const err = new Error();\n            err.code = 'AWS_S3_HEAD_BUCKET_NOT_FOUND';\n            throw err;\n          }\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          validateTemplate: {},\n          deleteChangeSet: {},\n          createChangeSet: createChangeSetStub,\n          executeChangeSet: executeChangeSetStub,\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          },\n          getTemplate: () => {\n            return {\n              TemplateBody: JSON.stringify({})\n            };\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              EventId: '1e2f3g4h',\n              StackName: 'new-service-dev',\n              LogicalResourceId: 'new-service-dev',\n              ResourceType: 'AWS::CloudFormation::Stack',\n              Timestamp: new Date(),\n              ResourceStatus: 'UPDATE_COMPLETE'\n            }]\n          },\n          describeStackResource: describeStackResourceStub\n        }\n      };\n      const {\n        serverless,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'deploy',\n        awsRequestStubMap,\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges'\n      });\n      expect(createChangeSetStub).to.be.calledWithExactly({\n        StackName: awsNaming.getStackName(),\n        ChangeSetName: awsNaming.getStackChangeSetName(),\n        ChangeSetType: 'UPDATE',\n        Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],\n        Parameters: [],\n        NotificationARNs: [],\n        Tags: [{\n          Key: 'STAGE',\n          Value: 'dev'\n        }],\n        TemplateBody: JSON.stringify({\n          Resources: serverless.service.provider.coreCloudFormationTemplate.Resources,\n          Outputs: serverless.service.provider.coreCloudFormationTemplate.Outputs\n        })\n      });\n      expect(executeChangeSetStub).to.be.calledWithExactly({\n        StackName: awsNaming.getStackName(),\n        ChangeSetName: awsNaming.getStackChangeSetName()\n      });\n    });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support custom deployment role","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1081,"column":47,"index":37551},"line":1081,"code":"      it('should support custom deployment role', () => {\n        expect(createChangeSetStub.getCall(0).args[0].RoleARN).to.equal(deploymentRole);\n        expect(createChangeSetStub.getCall(1).args[0].RoleARN).to.equal(deploymentRole);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `notificationsArns`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1085,"column":44,"index":37794},"line":1085,"code":"      it('should support `notificationsArns`', () => {\n        expect(createChangeSetStub.getCall(0).args[0].NotificationARNs).to.deep.equal(notificationArns);\n        expect(createChangeSetStub.getCall(1).args[0].NotificationARNs).to.deep.equal(notificationArns);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackParameters`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1089,"column":42,"index":38067},"line":1089,"code":"      it('should support `stackParameters`', () => {\n        expect(createChangeSetStub.getCall(1).args[0].Parameters).to.deep.equal(stackParameters);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackPolicy`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1092,"column":38,"index":38224},"line":1092,"code":"      it('should support `stackPolicy`', () => {\n        expect(setStackPolicyStub.getCall(0).args[0].StackPolicyBody).to.equal(JSON.stringify({\n          Statement: stackPolicy\n        }));\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should only set `stackPolicy` after applying change set","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1097,"column":65,"index":38452},"line":1097,"code":"      it('should only set `stackPolicy` after applying change set', () => {\n        expect(setStackPolicyStub).to.not.be.calledBefore(executeChangeSetStub);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `rollbackConfiguration`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1100,"column":48,"index":38602},"line":1100,"code":"      it('should support `rollbackConfiguration`', () => {\n        expect(createChangeSetStub.getCall(1).args[0].RollbackConfiguration).to.deep.equal(rollbackConfiguration);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `disableRollback`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1103,"column":42,"index":38780},"line":1103,"code":"      it('should support `disableRollback`', () => {\n        expect(executeChangeSetStub.getCall(0).args[0].DisableRollback).to.be.true;\n        expect(executeChangeSetStub.getCall(1).args[0].DisableRollback).to.be.true;\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should support `stackTags`","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1107,"column":36,"index":39005},"line":1107,"code":"      it('should support `stackTags`', () => {\n        expect(createChangeSetStub.getCall(0).args[0].Tags).to.deep.equal([{\n          Key: 'STAGE',\n          Value: 'dev'\n        }, {\n          Key: 'TAG',\n          Value: 'value'\n        }, {\n          Key: 'ANOTHERTAG',\n          Value: 'anotherval'\n        }]);\n        expect(createChangeSetStub.getCall(1).args[0].Tags).to.deep.equal([{\n          Key: 'STAGE',\n          Value: 'dev'\n        }, {\n          Key: 'TAG',\n          Value: 'value'\n        }, {\n          Key: 'ANOTHERTAG',\n          Value: 'anotherval'\n        }]);\n      });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - should skip deploy if nothing changed","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1131,"column":65,"index":39643},"line":1131,"code":"  it('with existing stack - should skip deploy if nothing changed', async () => {\n    const s3UploadStub = sinon.stub().resolves();\n    const listObjectsV2Stub = sinon.stub().resolves({\n      Contents: [{\n        Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json',\n        LastModified: new Date(),\n        ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n        Size: 356,\n        StorageClass: 'STANDARD'\n      }, {\n        Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/serverless-state.json',\n        LastModified: new Date(),\n        ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n        Size: 356,\n        StorageClass: 'STANDARD'\n      }, {\n        Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/my-own.zip',\n        LastModified: new Date(),\n        ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n        Size: 356,\n        StorageClass: 'STANDARD'\n      }]\n    });\n    const s3HeadObjectStub = sinon.stub();\n    s3HeadObjectStub.withArgs({\n      Bucket: 's3-bucket-resource',\n      Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/compiled-cloudformation-template.json'\n    }).returns({\n      Metadata: {\n        filesha256: 'ehiUQMDbrQnzl3h86rfG0T6nICXzNTiQ0xXZSuIw98s='\n      }\n    });\n    s3HeadObjectStub.withArgs({\n      Bucket: 's3-bucket-resource',\n      Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/serverless-state.json'\n    }).returns({\n      Metadata: {\n        filesha256: 'JZ0oWM9ZWnYOxa3CRNeBRE5HAg+Q9RSwdxcKbik33d8='\n      }\n    });\n    s3HeadObjectStub.withArgs({\n      Bucket: 's3-bucket-resource',\n      Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/my-own.zip'\n    }).returns({\n      Metadata: {\n        filesha256: 'T0qEYHOE4Xv2E8Ar03xGogAlElcdf/dQh/lh9ao7Glo='\n      }\n    });\n    const awsRequestStubMap = {\n      ...baseAwsRequestStubMap,\n      S3: {\n        headObject: s3HeadObjectStub,\n        listObjectsV2: listObjectsV2Stub,\n        upload: s3UploadStub,\n        headBucket: {}\n      },\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        describeStackEvents: {\n          StackEvents: [{\n            EventId: '1e2f3g4h',\n            StackName: 'new-service-dev',\n            LogicalResourceId: 'new-service-dev',\n            ResourceType: 'AWS::CloudFormation::Stack',\n            Timestamp: new Date(),\n            ResourceStatus: 'UPDATE_COMPLETE'\n          }]\n        },\n        describeStackResource: {\n          StackResourceDetail: {\n            PhysicalResourceId: 's3-bucket-resource'\n          }\n        },\n        validateTemplate: {},\n        listStackResources: {}\n      }\n    };\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'package-artifact-in-serverless-dir',\n      command: 'deploy',\n      awsRequestStubMap,\n      configExt: {\n        // Default, non-deterministic service-name invalidates this test\n        service: 'test-aws-deploy-should-be-skipped'\n      }\n    });\n    expect(serverless.service.provider.shouldNotDeploy).to.be.true;\n    expect(s3UploadStub).to.not.be.called;\n  });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - missing custom deployment bucket","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1224,"column":60,"index":42885},"line":1224,"code":"  it('with existing stack - missing custom deployment bucket', async () => {\n    const awsRequestStubMap = {\n      ...baseAwsRequestStubMap,\n      ECR: {\n        describeRepositories: sinon.stub().throws({\n          providerError: {\n            code: 'RepositoryNotFoundException'\n          }\n        })\n      },\n      S3: {\n        getBucketLocation: () => {\n          throw new Error();\n        }\n      },\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        validateTemplate: {}\n      }\n    };\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy',\n      awsRequestStubMap,\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n      configExt: {\n        provider: {\n          deploymentBucket: 'bucket-name'\n        }\n      }\n    })).to.eventually.have.been.rejected.and.have.property('code', 'DEPLOYMENT_BUCKET_NOT_FOUND');\n  });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - with custom deployment bucket in different region","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1258,"column":77,"index":43818},"line":1258,"code":"  it('with existing stack - with custom deployment bucket in different region', async () => {\n    const awsRequestStubMap = {\n      ...baseAwsRequestStubMap,\n      ECR: {\n        describeRepositories: sinon.stub().throws({\n          providerError: {\n            code: 'RepositoryNotFoundException'\n          }\n        })\n      },\n      S3: {\n        getBucketLocation: () => {\n          return {\n            LocationConstraint: 'us-west-1'\n          };\n        }\n      },\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        validateTemplate: {}\n      }\n    };\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy',\n      awsRequestStubMap,\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n      configExt: {\n        provider: {\n          deploymentBucket: 'bucket-name'\n        }\n      }\n    })).to.eventually.have.been.rejected.and.have.property('code', 'DEPLOYMENT_BUCKET_INVALID_REGION');\n  });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"with existing stack - with deployment bucket from CloudFormation deleted manually","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1294,"column":87,"index":44813},"line":1294,"code":"  it('with existing stack - with deployment bucket from CloudFormation deleted manually', async () => {\n    const awsRequestStubMap = {\n      ...baseAwsRequestStubMap,\n      ECR: {\n        describeRepositories: sinon.stub().throws({\n          providerError: {\n            code: 'RepositoryNotFoundException'\n          }\n        })\n      },\n      S3: {\n        headBucket: () => {\n          const err = new Error();\n          err.code = 'AWS_S3_HEAD_BUCKET_NOT_FOUND';\n          throw err;\n        }\n      },\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        validateTemplate: {},\n        describeStackResource: {\n          StackResourceDetail: {\n            PhysicalResourceId: 's3-bucket-resource'\n          }\n        }\n      }\n    };\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy',\n      awsRequestStubMap,\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges'\n    })).to.eventually.have.been.rejected.and.have.property('code', 'DEPLOYMENT_BUCKET_REMOVED_MANUALLY');\n  });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when deployment bucket cannot be accessed","suites":["test/unit/lib/plugins/aws/deploy/index.test.js","with change-sets","custom deployment-related properties"],"updatePoint":{"line":1330,"column":60,"index":45851},"line":1330,"code":"  it('should throw when deployment bucket cannot be accessed', async () => {\n    const awsRequestStubMap = {\n      ...baseAwsRequestStubMap,\n      ECR: {\n        describeRepositories: sinon.stub().throws({\n          providerError: {\n            code: 'RepositoryNotFoundException'\n          }\n        })\n      },\n      S3: {\n        headBucket: () => {\n          const err = new Error();\n          err.code = 'AWS_S3_HEAD_BUCKET_FORBIDDEN';\n          throw err;\n        }\n      },\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        validateTemplate: {},\n        describeStackResource: {\n          StackResourceDetail: {\n            PhysicalResourceId: 's3-bucket-resource'\n          }\n        }\n      }\n    };\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'deploy',\n      awsRequestStubMap,\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges'\n    })).to.eventually.have.been.rejected.and.have.property('code', 'AWS_S3_HEAD_BUCKET_FORBIDDEN');\n  });","file":"unit/lib/plugins/aws/deploy/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the \"force\" option is used","suites":["checkForChanges","#checkForChanges()"],"updatePoint":{"line":81,"column":52,"index":3158},"line":81,"code":"    it('should resolve if the \"force\" option is used', async () => {\n      awsDeploy.options.force = true;\n      return expect(awsDeploy.checkForChanges()).to.be.fulfilled.then(() => {\n        expect(getMostRecentObjectsStub).to.not.have.been.called;\n        expect(getObjectMetadataStub).to.not.have.been.called;\n        expect(checkIfDeploymentIsNecessaryStub).to.not.have.been.called;\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should translate error if rejected due to missing bucket","suites":["checkForChanges","#getMostRecentObjects()"],"updatePoint":{"line":99,"column":64,"index":3918},"line":99,"code":"    it('should translate error if rejected due to missing bucket', () => {\n      listObjectsV2Stub.rejects(new ServerlessError('The specified bucket does not exist'));\n      return expect(awsDeploy.getMostRecentObjects()).to.be.rejectedWith([`The serverless deployment bucket \"${awsDeploy.bucketName}\" does not exist.`, 'Create it manually if you want to reuse the CloudFormation stack \"my-service-dev\",', 'or delete the stack if it is no longer required.'].join(' '));\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should throw original error if rejected not due to missing bucket","suites":["checkForChanges","#getMostRecentObjects()"],"updatePoint":{"line":103,"column":73,"index":4405},"line":103,"code":"    it('should throw original error if rejected not due to missing bucket', () => {\n      listObjectsV2Stub.rejects(new ServerlessError('Other reason'));\n      return expect(awsDeploy.getMostRecentObjects()).to.be.rejectedWith('Other reason');\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if result array is empty","suites":["checkForChanges","#getMostRecentObjects()"],"updatePoint":{"line":107,"column":47,"index":4631},"line":107,"code":"    it('should resolve if result array is empty', async () => {\n      const serviceObjects = {\n        Contents: []\n      };\n      listObjectsV2Stub.resolves(serviceObjects);\n      return expect(awsDeploy.getMostRecentObjects()).to.be.fulfilled.then(result => {\n        expect(listObjectsV2Stub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: 'serverless/my-service/dev/'\n        });\n        expect(result).to.deep.equal([]);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve with the most recently deployed objects","suites":["checkForChanges","#getMostRecentObjects()"],"updatePoint":{"line":120,"column":62,"index":5157},"line":120,"code":"    it('should resolve with the most recently deployed objects', async () => {\n      const serviceObjects = {\n        Contents: [{\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/artifact.zip`\n        }, {\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}/141264711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}/141264711231-2016-08-18T15:42:00/cloudformation.json`\n        }]\n      };\n      listObjectsV2Stub.resolves(serviceObjects);\n      return expect(awsDeploy.getMostRecentObjects()).to.be.fulfilled.then(result => {\n        expect(listObjectsV2Stub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: 'serverless/my-service/dev/'\n        });\n        expect(result).to.deep.equal([{\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/artifact.zip`\n        }]);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no objects are provided as input","suites":["checkForChanges","#getObjectMetadata()"],"updatePoint":{"line":154,"column":58,"index":6465},"line":154,"code":"    it('should resolve if no objects are provided as input', async () => {\n      const input = [];\n      return expect(awsDeploy.getObjectMetadata(input)).to.be.fulfilled.then(result => {\n        expect(headObjectStub).to.not.have.been.called;\n        expect(result).to.deep.equal([]);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should request the object detailed information","suites":["checkForChanges","#getObjectMetadata()"],"updatePoint":{"line":161,"column":54,"index":6765},"line":161,"code":"    it('should request the object detailed information', async () => {\n      const input = [{\n        Key: `${s3Key}/151224711231-2016-08-18T15:43:00/artifact.zip`\n      }, {\n        Key: `${s3Key}/151224711231-2016-08-18T15:43:00/cloudformation.json`\n      }, {\n        Key: `${s3Key}/141264711231-2016-08-18T15:42:00/artifact.zip`\n      }, {\n        Key: `${s3Key}/141264711231-2016-08-18T15:42:00/cloudformation.json`\n      }];\n      return expect(awsDeploy.getObjectMetadata(input)).to.be.fulfilled.then(() => {\n        expect(headObjectStub.callCount).to.equal(4);\n        expect(headObjectStub).to.have.been.calledWithExactly('S3', 'headObject', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/artifact.zip`\n        });\n        expect(headObjectStub).to.have.been.calledWithExactly('S3', 'headObject', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${s3Key}/151224711231-2016-08-18T15:43:00/cloudformation.json`\n        });\n        expect(headObjectStub).to.have.been.calledWithExactly('S3', 'headObject', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${s3Key}/141264711231-2016-08-18T15:42:00/artifact.zip`\n        });\n        expect(headObjectStub).to.have.been.calledWithExactly('S3', 'headObject', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${s3Key}/141264711231-2016-08-18T15:42:00/cloudformation.json`\n        });\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no input is provided","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":206,"column":46,"index":8825},"line":206,"code":"    it('should resolve if no input is provided', async () => expect(awsDeploy.checkIfDeploymentIsNecessary([])).to.be.fulfilled.then(() => {\n      expect(normalizeCloudFormationTemplateStub).to.not.have.been.called;\n      expect(globbySyncStub).to.not.have.been.called;\n      expect(readFileStub).to.not.have.been.called;\n    }));","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no objects are provided as input","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":211,"column":58,"index":9168},"line":211,"code":"    it('should resolve if no objects are provided as input', async () => {\n      const input = [];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.not.have.been.called;\n        expect(globbySyncStub).to.not.have.been.called;\n        expect(readFileStub).to.not.have.been.called;\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if objects are given, but no function last modified date","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":219,"column":79,"index":9589},"line":219,"code":"    it('should resolve if objects are given, but no function last modified date', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('local-hash-cf-template');\n      const input = [{\n        Metadata: {\n          filesha256: 'remote-hash-cf-template'\n        }\n      }];\n      await awsDeploy.checkIfDeploymentIsNecessary(input);\n      expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n      expect(globbySyncStub).to.have.been.calledOnce;\n      expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n      expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n        cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n        dot: true,\n        silent: true\n      });\n      expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n      expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not set a flag if there are more remote hashes","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":239,"column":61,"index":10677},"line":239,"code":"    it('should not set a flag if there are more remote hashes', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('local-hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('local-hash-zip-file-1');\n      const input = [{\n        Metadata: {\n          filesha256: 'remote-hash-cf-template'\n        }\n      }, {\n        Metadata: {\n          filesha256: 'remote-hash-zip-file-1'\n        }\n      }, {\n        Metadata: {\n          /* no filesha256 available */\n        }\n      } // will be translated to ''\n      ];\n\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not set a flag if remote and local hashes are different","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":271,"column":70,"index":12136},"line":271,"code":"    it('should not set a flag if remote and local hashes are different', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('local-hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('local-hash-zip-file-1');\n      const input = [{\n        Metadata: {\n          filesha256: 'remote-hash-cf-template'\n        }\n      }, {\n        Metadata: {\n          filesha256: 'remote-hash-zip-file-1'\n        }\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not set a flag if remote and local hashes are the same but are duplicated","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":297,"column":88,"index":13496},"line":297,"code":"    it('should not set a flag if remote and local hashes are the same but are duplicated', async () => {\n      globbySyncStub.returns(['func1.zip', 'func2.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('remote-hash-cf-template');\n      // happens when package.individually is used\n      cryptoStub.createHash().update().digest.onCall(1).returns('remote-hash-zip-file-1');\n      cryptoStub.createHash().update().digest.onCall(2).returns('remote-hash-zip-file-1');\n      const input = [{\n        Metadata: {\n          filesha256: 'remote-hash-cf-template'\n        }\n      }, {\n        Metadata: {\n          filesha256: 'remote-hash-zip-file-1'\n        }\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/func1.zip'));\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/func2.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not set a flag if the hashes are equal, but the objects were modified after their functions","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":326,"column":106,"index":15147},"line":326,"code":"    it('should not set a flag if the hashes are equal, but the objects were modified after their functions', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('hash-zip-file-1');\n      const now = new Date();\n      const inThePast = new Date(new Date().getTime() - 100000);\n      const inTheFuture = new Date(new Date().getTime() + 100000);\n      const input = [{\n        Metadata: {\n          filesha256: 'hash-cf-template'\n        },\n        LastModified: inThePast\n      }, {\n        Metadata: {\n          filesha256: 'hash-zip-file-1'\n        },\n        LastModified: inTheFuture\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input, now)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should set a flag if the remote and local hashes are equal","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":357,"column":66,"index":16694},"line":357,"code":"    it('should set a flag if the remote and local hashes are equal', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('hash-state');\n      cryptoStub.createHash().update().digest.onCall(2).returns('hash-zip-file-1');\n      let fileCounter = 0;\n      const input = [{\n        Metadata: {\n          filesha256: 'hash-cf-template'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-state'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-zip-file-1'\n        },\n        Key: `file${++fileCounter}.zip`\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should set a flag if the remote and local hashes are equal, and the edit times are ordered","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":392,"column":98,"index":18342},"line":392,"code":"    it('should set a flag if the remote and local hashes are equal, and the edit times are ordered', async () => {\n      globbySyncStub.returns(['my-service.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('hash-state');\n      cryptoStub.createHash().update().digest.onCall(2).returns('hash-zip-file-1');\n      const longAgo = new Date(new Date().getTime() - 100000);\n      const longerAgo = new Date(new Date().getTime() - 200000);\n      let fileCounter = 0;\n      const input = [{\n        Metadata: {\n          filesha256: 'hash-cf-template'\n        },\n        LastModified: longerAgo,\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-state'\n        },\n        LastModified: longerAgo,\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-zip-file-1'\n        },\n        LastModified: longerAgo,\n        Key: `file${++fileCounter}.zip`\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input, longAgo)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/my-service.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should set a flag if the remote and local hashes are duplicated and equal","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":432,"column":81,"index":20209},"line":432,"code":"    it('should set a flag if the remote and local hashes are duplicated and equal', async () => {\n      globbySyncStub.returns(['func1.zip', 'func2.zip']);\n      cryptoStub.createHash().update().digest.onCall(0).returns('hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('hash-state');\n      // happens when package.individually is used\n      cryptoStub.createHash().update().digest.onCall(2).returns('hash-zip-file-1');\n      cryptoStub.createHash().update().digest.onCall(3).returns('hash-zip-file-1');\n      let fileCounter = 0;\n      const input = [{\n        Metadata: {\n          filesha256: 'hash-cf-template'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-state'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-zip-file-1'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-zip-file-1'\n        },\n        Key: `file${++fileCounter}.zip`\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/func1.zip'));\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, '.serverless/func2.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not set a flag if the remote and local hashes are different for package.artifact","suites":["checkForChanges","#checkIfDeploymentIsNecessary()"],"updatePoint":{"line":475,"column":95,"index":22240},"line":475,"code":"    it('should not set a flag if the remote and local hashes are different for package.artifact', async () => {\n      awsDeploy.serverless.service.package = {\n        artifact: 'foo/bar/my-own.zip'\n      };\n      globbySyncStub.returns([]);\n      cryptoStub.createHash().update().digest.onCall(0).returns('hash-cf-template');\n      cryptoStub.createHash().update().digest.onCall(1).returns('hash-state');\n      cryptoStub.createHash().update().digest.onCall(2).returns('local-my-own-hash');\n      let fileCounter = 0;\n      const input = [{\n        Metadata: {\n          filesha256: 'hash-cf-template'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'hash-state'\n        },\n        Key: `file${++fileCounter}.zip`\n      }, {\n        Metadata: {\n          filesha256: 'remote-my-own-hash'\n        },\n        Key: `file${++fileCounter}.zip`\n      }];\n      return expect(awsDeploy.checkIfDeploymentIsNecessary(input)).to.be.fulfilled.then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(globbySyncStub).to.have.been.calledOnce;\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly(awsDeploy.serverless.service.provider.compiledCloudFormationTemplate);\n        expect(globbySyncStub).to.have.been.calledWithExactly(['**.zip'], {\n          cwd: path.join(awsDeploy.serverless.serviceDir, '.serverless'),\n          dot: true,\n          silent: true\n        });\n        expect(readFileStub).to.have.been.calledWith(path.resolve(awsDeploy.serverless.serviceDir, 'foo/bar/my-own.zip'));\n        expect(awsDeploy.serverless.service.provider.shouldNotDeploy).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"Should recognize package.artifact","suites":["checkForChanges #2"],"updatePoint":{"line":516,"column":39,"index":23955},"line":516,"code":"  it('Should recognize package.artifact', async () => runServerless({\n    fixture: 'package-artifact',\n    command: 'deploy',\n    env: {\n      AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n    },\n    lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n    awsRequestStubMap: {\n      CloudFormation: {\n        describeStacks: {\n          Stacks: [{}]\n        },\n        describeStackResource: {\n          StackResourceDetail: {\n            PhysicalResourceId: 'deployment-bucket'\n          }\n        }\n      },\n      Lambda: {\n        getFunction: {\n          Configuration: {\n            LastModified: '2020-05-20T15:34:16.494+0000'\n          }\n        }\n      },\n      S3: {\n        headObject: {\n          Metadata: {\n            filesha256: 'RRYyTm4Ri8mocpvx44pvas4JKLYtdJS3Z8MOlrZrDXA='\n          }\n        },\n        listObjectsV2: {\n          Contents: [{\n            Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/artifact.zip',\n            LastModified: new Date(),\n            ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n            Size: 356,\n            StorageClass: 'STANDARD'\n          }]\n        },\n        headBucket: {}\n      },\n      STS: {\n        getCallerIdentity: {\n          ResponseMetadata: {\n            RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n          },\n          UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n          Account: '999999999999',\n          Arn: 'arn:aws:iam::999999999999:user/test'\n        }\n      }\n    }\n  }).then(({\n    cfTemplate\n  }) => {\n    expect(cfTemplate.Resources.FooLambdaFunction.Properties.Code.S3Key.endsWith('/artifact.zip')).to.be.true;\n  }));","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"TODO: should not deploy if artifacts in bucket are same as locally and modification dates for all functions are later than uploaded artifacts dates","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":659,"code":"  it.skip('TODO: should not deploy if artifacts in bucket are same as locally and modification dates for all functions are later than uploaded artifacts dates', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy with --force option","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":700,"code":"  it.skip('TODO: should deploy with --force option', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy when deployment bucket is empty (first deployment)","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":735,"code":"  it.skip('TODO: should deploy when deployment bucket is empty (first deployment)', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should compare against latest deployment artifacts","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":765,"code":"  it.skip('TODO: should compare against latest deployment artifacts', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if new function was introduced and otherwise there were no other changes","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":799,"code":"  it.skip('TODO: should deploy if new function was introduced and otherwise there were no other changes', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if individually packaged function was removed","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":829,"code":"  it.skip('TODO: should deploy if individually packaged function was removed', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if remote hashes are different","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":877,"code":"  it.skip('TODO: should deploy if remote hashes are different', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if count of hashes (not their content) differs","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":910,"code":"  it.skip('TODO: should deploy if count of hashes (not their content) differs', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if uploaded artifacts are newer than function configuration modification date","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":948,"code":"  it.skip('TODO: should deploy if uploaded artifacts are newer than function configuration modification date', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should deploy if custom package.artifact have changed","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":984,"code":"  it.skip('TODO: should deploy if custom package.artifact have changed', async () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"should skip a deployment with identical hashes and package.artifact targeting .serverless directory","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"updatePoint":{"line":1024,"column":105,"index":43306},"line":1024,"code":"  it('should skip a deployment with identical hashes and package.artifact targeting .serverless directory', async () => {\n    let serverless;\n    await runServerless({\n      fixture: 'package-artifact-in-serverless-dir',\n      command: 'deploy',\n      configExt: {\n        // runServerless by default makes this: `test-${fixtureName}-${TIME_BASED_HASH}`\n        // for safety of concurrent test runs. Unfortunately this will make our\n        // normalized CF template values **different** in a way that defeats the entire\n        // purpose of this test. So, for this test only, use a single, deterministic\n        // service name to allow consistent, known hashing.\n        service: 'test-packageArtifactInServerlessDir'\n      },\n      env: {\n        AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n      },\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n      hooks: {\n        beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n      },\n      awsRequestStubMap: {\n        ...commonAwsSdkMock,\n        Lambda: {\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000'\n            }\n          }\n        },\n        S3: {\n          headBucket: {},\n          headObject: async params => generateMatchingHeadObjectResponse(serverless, params),\n          listObjectsV2: async () => generateMatchingListObjectsResponse(serverless)\n        }\n      }\n    });\n    expect(serverless.service.provider.shouldNotDeploy).to.equal(true);\n  });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"TODO: should crash meaningfully if bucket does not exist","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":1062,"code":"  it.skip('TODO: should crash meaningfully if bucket does not exist', () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"TODO: should handle gently other AWS SDK errors","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"line":1085,"code":"  it.skip('TODO: should handle gently other AWS SDK errors', () => {","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":true,"dir":"test"},{"name":"Should gently handle error of accessing objects from S3 bucket","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js"],"updatePoint":{"line":1108,"column":68,"index":46369},"line":1108,"code":"  it('Should gently handle error of accessing objects from S3 bucket', async () => {\n    await expect(runServerless({\n      fixture: 'check-for-changes',\n      command: 'deploy',\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n      env: {\n        AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n      },\n      awsRequestStubMap: {\n        ...commonAwsSdkMock,\n        S3: {\n          headObject: () => {\n            const err = new Error('err');\n            err.code = 'AWS_S3_HEAD_OBJECT_FORBIDDEN';\n            throw err;\n          },\n          headBucket: () => {},\n          listObjectsV2: () => {\n            return {\n              Contents: [{\n                Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/artifact.zip',\n                LastModified: new Date(),\n                ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n                Size: 356,\n                StorageClass: 'STANDARD'\n              }]\n            };\n          }\n        }\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'AWS_S3_HEAD_OBJECT_FORBIDDEN');\n  });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not attempt to delete and add filter for same destination","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1141,"column":72,"index":47558},"line":1141,"code":"    it('should not attempt to delete and add filter for same destination', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: async () => generateMatchingListObjectsResponse(serverless),\n            headObject: async params => generateMatchingHeadObjectResponse(serverless, params),\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                StackResourceDetail: {\n                  StackName: naming.getStackName(),\n                  LogicalResourceId: params.LogicalResourceId,\n                  PhysicalResourceId: `${naming.getStackName()}-${params.LogicalResourceId}-xxxxx`\n                }\n              };\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: async () => {\n              const functionName = serverless.service.getFunction('fn1').name;\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  // destinationArn `arn:{partition}:lambda:{region}:{accountId}:function:{functionName}`\n                  // filterName {stack name}-{logical id}-{random alphanumeric characters}\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: `arn:aws:lambda:us-east-1:999999999999:function:${functionName}`\n                }]\n              };\n            }\n          }\n        }\n      });\n      expect(deleteStub).to.not.have.been.called;\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should not attempt to delete filter for 2 subscription filter per log group include externals","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1213,"column":101,"index":50364},"line":1213,"code":"    it('should not attempt to delete filter for 2 subscription filter per log group include externals', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: async () => generateMatchingListObjectsResponse(serverless),\n            headObject: async params => generateMatchingHeadObjectResponse(serverless, params),\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              throw new Error(`Resource ${params.LogicalResourceId} does not exist for stack ${naming.getStackName()}`);\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: async () => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  // destinationArn `arn:{partition}:lambda:{region}:{accountId}:function:{functionName}`\n                  // filterName {stack name}-{logical id}-{random alphanumeric characters}\n                  filterName: `external-stack-dev-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: 'arn:aws:lambda:us-east-1:999999999999:function:test-checkForChanges-cdr3ogg-dev-fn1'\n                }]\n              };\n            }\n          }\n        }\n      });\n      expect(deleteStub).to.not.have.been.called;\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if external defined subscription filter cause over 2 subscription filter per log group.","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1278,"column":117,"index":52932},"line":1278,"code":"    it('should throw an error if external defined subscription filter cause over 2 subscription filter per log group.', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      const promise = runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }, {\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: {\n              Contents: []\n            },\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              throw new Error(`Resource ${params.LogicalResourceId} does not exist for stack ${naming.getStackName()}`);\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: async () => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  // destinationArn `arn:{partition}:lambda:{region}:{accountId}:function:{functionName}`\n                  // filterName {stack name}-{logical id}-{random alphanumeric characters}\n                  filterName: `external-stack-dev-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: 'arn:aws:lambda:us-east-1:999999999999:function:test-checkForChanges-cdr3ogg-dev-fn1'\n                }]\n              };\n            }\n          }\n        }\n      });\n      await expect(promise).to.eventually.be.rejected.and.have.property('code', 'CLOUDWATCHLOG_LOG_GROUP_EVENT_PER_FUNCTION_LIMIT_EXCEEDED');\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should attempt to delete subscription filter not match as any of new subscription filter","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1346,"column":96,"index":55537},"line":1346,"code":"    it('should attempt to delete subscription filter not match as any of new subscription filter', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      const {\n        awsNaming\n      } = await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: {\n              Contents: []\n            },\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                StackResourceDetail: {\n                  StackName: naming.getStackName(),\n                  LogicalResourceId: params.LogicalResourceId,\n                  PhysicalResourceId: `${naming.getStackName()}-${params.LogicalResourceId}-xxxxx`\n                }\n              };\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: async () => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  // destinationArn `arn:{partition}:lambda:{region}:{accountId}:function:{functionName}`\n                  // filterName {stack name}-{logical id}-{random alphanumeric characters}\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn2', 1)}-xxxxx`,\n                  destinationArn: 'arn:aws:lambda:us-east-1:999999999999:function:test-checkForChanges-cdr3ogg-dev-fn1'\n                }]\n              };\n            }\n          }\n        }\n      });\n      expect(deleteStub).to.have.been.calledOnceWith({\n        logGroupName: 'someLogGroupName',\n        filterName: `${awsNaming.getStackName()}-${awsNaming.getCloudWatchLogLogicalId('Fn2', 1)}-xxxxx`\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should attempt to delete filter if order of cloudwatch events changed","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1423,"column":77,"index":58346},"line":1423,"code":"    it('should attempt to delete filter if order of cloudwatch events changed', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      const {\n        awsNaming\n      } = await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName1'\n              }, {\n                cloudwatchLog: 'someLogGroupName2'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: {\n              Contents: []\n            },\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                StackResourceDetail: {\n                  StackName: naming.getStackName(),\n                  LogicalResourceId: params.LogicalResourceId,\n                  PhysicalResourceId: `${naming.getStackName()}-${params.LogicalResourceId}-xxxxx`\n                }\n              };\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: sandbox.stub().onFirstCall().callsFake(async () => {\n              const functionName = serverless.service.getFunction('fn1').name;\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: `arn:aws:lambda:us-east-1:999999999999:function:${functionName}`\n                }]\n              };\n            }).onSecondCall().callsFake(async () => {\n              const functionName = serverless.service.getFunction('fn1').name;\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  // someLogGroupeName2 was previously the first event\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: `arn:aws:lambda:us-east-1:999999999999:function:${functionName}`\n                }]\n              };\n            })\n          }\n        }\n      });\n      expect(deleteStub).to.have.been.calledOnceWith({\n        logGroupName: 'someLogGroupName2',\n        filterName: `${awsNaming.getStackName()}-${awsNaming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should attempt to delete multiple filters","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1511,"column":49,"index":61679},"line":1511,"code":"    it('should attempt to delete multiple filters', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      const {\n        awsNaming\n      } = await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }, {\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: {\n              Contents: []\n            },\n            headBucket: {}\n          },\n          CloudFormation: {\n            ...commonAwsSdkMock.CloudFormation,\n            describeStackResource: sandbox.stub().onFirstCall().resolves({\n              StackResourceDetail: {\n                PhysicalResourceId: 'deployment-bucket'\n              }\n            }).callsFake(async params => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                StackResourceDetail: {\n                  StackName: naming.getStackName(),\n                  LogicalResourceId: params.LogicalResourceId,\n                  PhysicalResourceId: `${naming.getStackName()}-${params.LogicalResourceId}-xxxxx`\n                }\n              };\n            })\n          },\n          CloudWatchLogs: {\n            deleteSubscriptionFilter: deleteStub,\n            describeSubscriptionFilters: sandbox.stub().onFirstCall().callsFake(async () => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn2', 1)}-xxxxx`,\n                  destinationArn: 'arn:aws:lambda:us-east-1:999999999999:function:test-checkForChanges-cdr3ogg-dev-fn2'\n                }, {\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn2', 2)}-xxxxx`,\n                  destinationArn: 'arn:aws:lambda:us-east-1:999999999999:function:test-checkForChanges-cdr3ogg-dev-fn2'\n                }]\n              };\n            })\n          }\n        }\n      });\n      expect(deleteStub).to.have.been.calledTwice;\n      expect(deleteStub).to.have.been.calledWith({\n        logGroupName: 'someLogGroupName',\n        filterName: `${awsNaming.getStackName()}-${awsNaming.getCloudWatchLogLogicalId('Fn2', 1)}-xxxxx`\n      });\n      expect(deleteStub).to.have.been.calledWith({\n        logGroupName: 'someLogGroupName',\n        filterName: `${awsNaming.getStackName()}-${awsNaming.getCloudWatchLogLogicalId('Fn2', 2)}-xxxxx`\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should recognize custom partition","suites":["test/unit/lib/plugins/aws/deploy/lib/checkForChanges.test.js","checkLogGroupSubscriptionFilterResourceLimitExceeded"],"updatePoint":{"line":1596,"column":41,"index":64870},"line":1596,"code":"    it('should recognize custom partition', async () => {\n      const deleteStub = sandbox.stub();\n      let serverless;\n      await runServerless({\n        fixture: 'check-for-changes',\n        command: 'deploy',\n        configExt: {\n          functions: {\n            fn1: {\n              events: [{\n                cloudwatchLog: 'someLogGroupName'\n              }]\n            }\n          }\n        },\n        lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n        env: {\n          AWS_CONTAINER_CREDENTIALS_FULL_URI: 'ignore'\n        },\n        hooks: {\n          beforeInstanceInit: serverlessInstance => serverless = serverlessInstance\n        },\n        awsRequestStubMap: {\n          ...commonAwsSdkMock,\n          STS: {\n            getCallerIdentity: {\n              ResponseMetadata: {\n                RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n              },\n              UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n              Account: '999999999999',\n              Arn: 'arn:aws-us-gov:iam::999999999999:user/test'\n            }\n          },\n          Lambda: {\n            getFunction: {\n              Configuration: {\n                LastModified: '2021-05-20T15:34:16.494+0000'\n              }\n            }\n          },\n          S3: {\n            listObjectsV2: async () => generateMatchingListObjectsResponse(serverless),\n            headObject: async params => generateMatchingHeadObjectResponse(serverless, params),\n            headBucket: {}\n          },\n          CloudWatchLogs: {\n            describeSubscriptionFilters: sandbox.stub().callsFake(async () => {\n              const naming = serverless.getProvider('aws').naming;\n              return {\n                subscriptionFilters: [{\n                  filterName: `${naming.getStackName()}-${naming.getCloudWatchLogLogicalId('Fn1', 1)}-xxxxx`,\n                  destinationArn: `arn:aws-us-gov:lambda:us-east-1:999999999999:function:${serverless.service.getFunction('fn1').name}`\n                }]\n              };\n            }),\n            deleteSubscriptionFilter: deleteStub\n          }\n        }\n      });\n      expect(deleteStub).to.not.have.been.called;\n    });","file":"unit/lib/plugins/aws/deploy/lib/check-for-changes.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no objects are found","suites":["cleanupS3Bucket","#getObjectsToRemove()"],"updatePoint":{"line":37,"column":46,"index":1293},"line":37,"code":"    it('should resolve if no objects are found', async () => {\n      const serviceObjects = {\n        Contents: []\n      };\n      const listObjectsStub = sinon.stub(awsDeploy.provider, 'request').resolves(serviceObjects);\n      return awsDeploy.getObjectsToRemove().then(() => {\n        expect(listObjectsStub).to.have.been.calledOnce;\n        expect(listObjectsStub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: `${s3Key}`\n        });\n        awsDeploy.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should return all to be removed service objects (except the last 4)","suites":["cleanupS3Bucket","#getObjectsToRemove()"],"updatePoint":{"line":51,"column":75,"index":1891},"line":51,"code":"    it('should return all to be removed service objects (except the last 4)', async () => {\n      const serviceObjects = {\n        Contents: [{\n          Key: `${s3Key}/151224711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}/151224711231-2016-08-18T15:42:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}/141264711231-2016-08-18T15:43:00/artifact.zip`\n        }, {\n          Key: `${s3Key}/141264711231-2016-08-18T15:43:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}/141321321541-2016-08-18T11:23:02/artifact.zip`\n        }, {\n          Key: `${s3Key}/141321321541-2016-08-18T11:23:02/cloudformation.json`\n        }, {\n          Key: `${s3Key}/142003031341-2016-08-18T12:46:04/artifact.zip`\n        }, {\n          Key: `${s3Key}/142003031341-2016-08-18T12:46:04/cloudformation.json`\n        }, {\n          Key: `${s3Key}/113304333331-2016-08-18T13:40:06/artifact.zip`\n        }, {\n          Key: `${s3Key}/113304333331-2016-08-18T13:40:06/cloudformation.json`\n        }, {\n          Key: `${s3Key}/903940390431-2016-08-18T23:42:08/artifact.zip`\n        }, {\n          Key: `${s3Key}/903940390431-2016-08-18T23:42:08/cloudformation.json`\n        }]\n      };\n      const listObjectsStub = sinon.stub(awsDeploy.provider, 'request').resolves(serviceObjects);\n      return awsDeploy.getObjectsToRemove().then(objectsToRemove => {\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/141321321541-2016-08-18T11:23:02/artifact.zip`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/141321321541-2016-08-18T11:23:02/cloudformation.json`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/142003031341-2016-08-18T12:46:04/artifact.zip`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/142003031341-2016-08-18T12:46:04/cloudformation.json`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/151224711231-2016-08-18T15:42:00/artifact.zip`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/151224711231-2016-08-18T15:42:00/cloudformation.json`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/903940390431-2016-08-18T23:42:08/artifact.zip`\n        });\n        expect(objectsToRemove).to.not.include({\n          Key: `${s3Key}${s3Key}/903940390431-2016-08-18T23:42:08/cloudformation.json`\n        });\n        expect(listObjectsStub.calledOnce).to.be.equal(true);\n        expect(listObjectsStub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: `${s3Key}`\n        });\n        awsDeploy.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should return an empty array if there are less than 4 directories available","suites":["cleanupS3Bucket","#getObjectsToRemove()"],"updatePoint":{"line":113,"column":83,"index":4731},"line":113,"code":"    it('should return an empty array if there are less than 4 directories available', async () => {\n      const serviceObjects = {\n        Contents: [{\n          Key: `${s3Key}151224711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}151224711231-2016-08-18T15:42:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}141264711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}141264711231-2016-08-18T15:42:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}141321321541-2016-08-18T11:23:02/artifact.zip`\n        }, {\n          Key: `${s3Key}141321321541-2016-08-18T11:23:02/cloudformation.json`\n        }]\n      };\n      const listObjectsStub = sinon.stub(awsDeploy.provider, 'request').resolves(serviceObjects);\n      return awsDeploy.getObjectsToRemove().then(objectsToRemove => {\n        expect(objectsToRemove.length).to.equal(0);\n        expect(listObjectsStub.calledOnce).to.be.equal(true);\n        expect(listObjectsStub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: `${s3Key}`\n        });\n        awsDeploy.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should return an empty array if there are exactly 4 directories available","suites":["cleanupS3Bucket","#getObjectsToRemove()"],"updatePoint":{"line":140,"column":81,"index":5928},"line":140,"code":"    it('should return an empty array if there are exactly 4 directories available', async () => {\n      const serviceObjects = {\n        Contents: [{\n          Key: `${s3Key}151224711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}151224711231-2016-08-18T15:42:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}141264711231-2016-08-18T15:42:00/artifact.zip`\n        }, {\n          Key: `${s3Key}141264711231-2016-08-18T15:42:00/cloudformation.json`\n        }, {\n          Key: `${s3Key}141321321541-2016-08-18T11:23:02/artifact.zip`\n        }, {\n          Key: `${s3Key}141321321541-2016-08-18T11:23:02/cloudformation.json`\n        }, {\n          Key: `${s3Key}142003031341-2016-08-18T12:46:04/artifact.zip`\n        }, {\n          Key: `${s3Key}142003031341-2016-08-18T12:46:04/cloudformation.json`\n        }]\n      };\n      const listObjectsStub = sinon.stub(awsDeploy.provider, 'request').resolves(serviceObjects);\n      return awsDeploy.getObjectsToRemove().then(objectsToRemove => {\n        expect(objectsToRemove).to.have.lengthOf(0);\n        expect(listObjectsStub).to.have.been.calledOnce;\n        expect(listObjectsStub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsDeploy.bucketName,\n          Prefix: `${s3Key}`\n        });\n        awsDeploy.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should allow configuring the number of artifacts to preserve","suites":["cleanupS3Bucket","#getObjectsToRemove()","custom maxPreviousDeploymentArtifacts"],"updatePoint":{"line":176,"column":70,"index":7500},"line":176,"code":"      it('should allow configuring the number of artifacts to preserve', async () => {\n        // configure the provider to allow only a single artifact\n        serverless.service.provider.deploymentBucketObject = {\n          maxPreviousDeploymentArtifacts: 1\n        };\n        const serviceObjects = {\n          Contents: [{\n            Key: `${s3Key}/141321321541-2016-08-18T11:23:02/artifact.zip`\n          }, {\n            Key: `${s3Key}/141321321541-2016-08-18T11:23:02/cloudformation.json`\n          }, {\n            Key: `${s3Key}/151224711231-2016-08-18T15:42:00/artifact.zip`\n          }, {\n            Key: `${s3Key}/151224711231-2016-08-18T15:42:00/cloudformation.json`\n          }, {\n            Key: `${s3Key}/141264711231-2016-08-18T15:43:00/artifact.zip`\n          }, {\n            Key: `${s3Key}/141264711231-2016-08-18T15:43:00/cloudformation.json`\n          }]\n        };\n        const listObjectsStub = sinon.stub(awsDeploy.provider, 'request').resolves(serviceObjects);\n        return awsDeploy.getObjectsToRemove().then(objectsToRemove => {\n          expect(objectsToRemove).to.deep.include.members([{\n            Key: `${s3Key}/141321321541-2016-08-18T11:23:02/artifact.zip`\n          }, {\n            Key: `${s3Key}/141321321541-2016-08-18T11:23:02/cloudformation.json`\n          }, {\n            Key: `${s3Key}/151224711231-2016-08-18T15:42:00/artifact.zip`\n          }, {\n            Key: `${s3Key}/151224711231-2016-08-18T15:42:00/cloudformation.json`\n          }]);\n          expect(objectsToRemove).to.not.deep.include({\n            Key: `${s3Key}/141264711231-2016-08-18T15:43:00/artifact.zip`\n          });\n          expect(objectsToRemove).to.not.deep.include({\n            Key: `${s3Key}/141264711231-2016-08-18T15:43:00/cloudformation.json`\n          });\n          expect(listObjectsStub.calledOnce).to.be.equal(true);\n          expect(listObjectsStub).to.have.been.calledWithExactly('S3', 'listObjectsV2', {\n            Bucket: awsDeploy.bucketName,\n            Prefix: `${s3Key}`\n          });\n          awsDeploy.provider.request.restore();\n        });\n      });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no service objects are found in the S3 bucket","suites":["cleanupS3Bucket","#removeObjects()"],"updatePoint":{"line":228,"column":71,"index":9792},"line":228,"code":"    it('should resolve if no service objects are found in the S3 bucket', async () => awsDeploy.removeObjects().then(() => {\n      expect(deleteObjectsStub.calledOnce).to.be.equal(false);\n      awsDeploy.provider.request.restore();\n    }));","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should remove all old service files from the S3 bucket if available","suites":["cleanupS3Bucket","#removeObjects()"],"updatePoint":{"line":232,"column":75,"index":10037},"line":232,"code":"    it('should remove all old service files from the S3 bucket if available', async () => {\n      const objectsToRemove = [{\n        Key: `${s3Key}113304333331-2016-08-18T13:40:06/artifact.zip`\n      }, {\n        Key: `${s3Key}113304333331-2016-08-18T13:40:06/cloudformation.json`\n      }, {\n        Key: `${s3Key}141264711231-2016-08-18T15:42:00/artifact.zip`\n      }, {\n        Key: `${s3Key}141264711231-2016-08-18T15:42:00/cloudformation.json`\n      }];\n      return awsDeploy.removeObjects(objectsToRemove).then(() => {\n        expect(deleteObjectsStub).to.have.been.calledOnce;\n        expect(deleteObjectsStub).to.have.been.calledWithExactly('S3', 'deleteObjects', {\n          Bucket: awsDeploy.bucketName,\n          Delete: {\n            Objects: objectsToRemove\n          }\n        });\n        awsDeploy.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["cleanupS3Bucket","#cleanupS3Bucket()"],"updatePoint":{"line":255,"column":41,"index":10909},"line":255,"code":"    it('should run promise chain in order', async () => {\n      const getObjectsToRemoveStub = sinon.stub(awsDeploy, 'getObjectsToRemove').resolves();\n      const removeObjectsStub = sinon.stub(awsDeploy, 'removeObjects').resolves();\n      return awsDeploy.cleanupS3Bucket().then(() => {\n        expect(getObjectsToRemoveStub.calledOnce).to.be.equal(true);\n        expect(removeObjectsStub.calledAfter(getObjectsToRemoveStub)).to.be.equal(true);\n        awsDeploy.getObjectsToRemove.restore();\n        awsDeploy.removeObjects.restore();\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/cleanup-s3-bucket.test.js","skipped":false,"dir":"test"},{"name":"should throw error if state file does not exist","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":66,"column":55,"index":2077},"line":66,"code":"    it('should throw error if state file does not exist', async () => {\n      fileExistsSyncStub.returns(false);\n      await expect(awsDeploy.extendedValidate()).to.eventually.be.rejectedWith(Error);\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should throw error if packaged individually but functions packages do not exist","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":70,"column":87,"index":2317},"line":70,"code":"    it('should throw error if packaged individually but functions packages do not exist', async () => {\n      fileExistsSyncStub.onCall(0).returns(true);\n      fileExistsSyncStub.onCall(1).returns(false);\n      readFileSyncStub.returns(stateFileMock);\n      awsDeploy.serverless.service.package.individually = true;\n      await expect(awsDeploy.extendedValidate()).to.eventually.be.rejectedWith(Error);\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should throw error if service package does not exist","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":77,"column":60,"index":2701},"line":77,"code":"    it('should throw error if service package does not exist', async () => {\n      fileExistsSyncStub.onCall(0).returns(true);\n      fileExistsSyncStub.onCall(1).returns(false);\n      readFileSyncStub.returns(stateFileMock);\n      await expect(awsDeploy.extendedValidate()).to.eventually.be.rejectedWith(Error);\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if service has no functions and no service package","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":83,"column":81,"index":3042},"line":83,"code":"    it('should not throw error if service has no functions and no service package', async () => {\n      stateFileMock.service.functions = {};\n      fileExistsSyncStub.returns(true);\n      readFileSyncStub.returns(stateFileMock);\n      await awsDeploy.extendedValidate();\n      expect(fileExistsSyncStub.calledOnce).to.equal(true);\n      expect(readFileSyncStub.calledOnce).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if service has no functions and no function packages","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":91,"column":83,"index":3441},"line":91,"code":"    it('should not throw error if service has no functions and no function packages', async () => {\n      stateFileMock.service.functions = {};\n      awsDeploy.serverless.service.package.individually = true;\n      fileExistsSyncStub.returns(true);\n      readFileSyncStub.returns(stateFileMock);\n      await awsDeploy.extendedValidate();\n      expect(fileExistsSyncStub.calledOnce).to.equal(true);\n      expect(readFileSyncStub.calledOnce).to.equal(true);\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if individual packaging defined on a function level","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":100,"column":82,"index":3903},"line":100,"code":"    it('should not throw error if individual packaging defined on a function level', async () => {\n      awsDeploy.serverless.service.package.individually = false;\n      stateFileMock.service.functions = {\n        first: {\n          package: {\n            individually: true\n          }\n        }\n      };\n      fileExistsSyncStub.returns(true);\n      readFileSyncStub.returns(stateFileMock);\n      return awsDeploy.extendedValidate();\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should use function package level artifact when provided","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":113,"column":64,"index":4329},"line":113,"code":"    it('should use function package level artifact when provided', async () => {\n      stateFileMock.service.functions = {\n        first: {\n          package: {\n            artifact: 'artifact.zip'\n          }\n        }\n      };\n      awsDeploy.serverless.service.package.individually = true;\n      fileExistsSyncStub.returns(true);\n      readFileSyncStub.returns(stateFileMock);\n      await awsDeploy.extendedValidate();\n      expect(fileExistsSyncStub.calledTwice).to.equal(true);\n      expect(readFileSyncStub.calledOnce).to.equal(true);\n      expect(fileExistsSyncStub).to.have.been.calledWithExactly('artifact.zip');\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should throw error if specified package artifact does not exist","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":129,"column":71,"index":4966},"line":129,"code":"    it('should throw error if specified package artifact does not exist', async () => {\n      // const fileExistsSyncStub = sinon.stub(awsDeploy.serverless.utils, 'fileExistsSync');\n      fileExistsSyncStub.onCall(0).returns(true);\n      fileExistsSyncStub.onCall(1).returns(false);\n      readFileSyncStub.returns(stateFileMock);\n      awsDeploy.serverless.service.package.artifact = 'some/file.zip';\n      await expect(awsDeploy.extendedValidate()).to.eventually.be.rejectedWith(Error);\n      delete awsDeploy.serverless.service.package.artifact;\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if specified package artifact exists","suites":["extendedValidate","extendedValidate()"],"updatePoint":{"line":138,"column":67,"index":5518},"line":138,"code":"    it('should not throw error if specified package artifact exists', async () => {\n      // const fileExistsSyncStub = sinon.stub(awsDeploy.serverless.utils, 'fileExistsSync');\n      fileExistsSyncStub.onCall(0).returns(true);\n      fileExistsSyncStub.onCall(1).returns(true);\n      readFileSyncStub.returns(stateFileMock);\n      awsDeploy.serverless.service.package.artifact = 'some/file.zip';\n      await awsDeploy.extendedValidate();\n      delete awsDeploy.serverless.service.package.artifact;\n    });","file":"unit/lib/plugins/aws/deploy/lib/extended-validate.test.js","skipped":false,"dir":"test"},{"name":"should upload the CloudFormation file to the S3 bucket","suites":["uploadArtifacts","#uploadCloudFormationFile()"],"updatePoint":{"line":71,"column":62,"index":2362},"line":71,"code":"    it('should upload the CloudFormation file to the S3 bucket', async () => {\n      crypto.createHash().update().digest.onCall(0).returns('local-hash-cf-template');\n      return awsDeploy.uploadCloudFormationFile().then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledWithExactly('S3', 'upload', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${awsDeploy.serverless.service.package.artifactDirectoryName}/compiled-cloudformation-template.json`,\n          Body: JSON.stringify({\n            foo: 'bar'\n          }),\n          ContentType: 'application/json',\n          Metadata: {\n            filesha256: 'local-hash-cf-template'\n          }\n        });\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly({\n          foo: 'bar'\n        });\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the CloudFormation file to a bucket with SSE bucket policy","suites":["uploadArtifacts","#uploadCloudFormationFile()"],"updatePoint":{"line":92,"column":80,"index":3316},"line":92,"code":"    it('should upload the CloudFormation file to a bucket with SSE bucket policy', async () => {\n      crypto.createHash().update().digest.onCall(0).returns('local-hash-cf-template');\n      awsDeploy.serverless.service.provider.deploymentBucketObject = {\n        serverSideEncryption: 'AES256'\n      };\n      return awsDeploy.uploadCloudFormationFile().then(() => {\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledWithExactly('S3', 'upload', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${awsDeploy.serverless.service.package.artifactDirectoryName}/compiled-cloudformation-template.json`,\n          Body: JSON.stringify({\n            foo: 'bar'\n          }),\n          ContentType: 'application/json',\n          ServerSideEncryption: 'AES256',\n          Metadata: {\n            filesha256: 'local-hash-cf-template'\n          }\n        });\n        expect(normalizeCloudFormationTemplateStub).to.have.been.calledWithExactly({\n          foo: 'bar'\n        });\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should throw for null artifact paths","suites":["uploadArtifacts","#uploadZipFile()"],"updatePoint":{"line":129,"column":44,"index":4749},"line":129,"code":"    it('should throw for null artifact paths', async () => {\n      await expect(awsDeploy.uploadZipFile(null)).to.be.rejectedWith(Error);\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the .zip file to the S3 bucket","suites":["uploadArtifacts","#uploadZipFile()"],"updatePoint":{"line":132,"column":52,"index":4903},"line":132,"code":"    it('should upload the .zip file to the S3 bucket', async () => {\n      crypto.createHash().update().digest.onCall(0).returns('local-hash-zip-file');\n      const tmpDirPath = getTmpDirPath();\n      const artifactFilePath = path.join(tmpDirPath, 'artifact.zip');\n      serverless.utils.writeFileSync(artifactFilePath, 'artifact.zip file content');\n      return awsDeploy.uploadZipFile({\n        filename: artifactFilePath,\n        s3KeyDirname: awsDeploy.serverless.service.package.artifactDirectoryName\n      }).then(() => {\n        expect(uploadStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledWithExactly('S3', 'upload', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${awsDeploy.serverless.service.package.artifactDirectoryName}/artifact.zip`,\n          Body: sinon.match.object.and(sinon.match.has('path', artifactFilePath)),\n          ContentType: 'application/zip',\n          Metadata: {\n            filesha256: 'local-hash-zip-file'\n          }\n        });\n        expect(readFileSyncStub).to.have.been.calledWithExactly(artifactFilePath);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the .zip file to a bucket with SSE bucket policy","suites":["uploadArtifacts","#uploadZipFile()"],"updatePoint":{"line":154,"column":70,"index":6028},"line":154,"code":"    it('should upload the .zip file to a bucket with SSE bucket policy', async () => {\n      crypto.createHash().update().digest.onCall(0).returns('local-hash-zip-file');\n      const tmpDirPath = getTmpDirPath();\n      const artifactFilePath = path.join(tmpDirPath, 'artifact.zip');\n      serverless.utils.writeFileSync(artifactFilePath, 'artifact.zip file content');\n      awsDeploy.serverless.service.provider.deploymentBucketObject = {\n        serverSideEncryption: 'AES256'\n      };\n      return awsDeploy.uploadZipFile({\n        filename: artifactFilePath,\n        s3KeyDirname: awsDeploy.serverless.service.package.artifactDirectoryName\n      }).then(() => {\n        expect(uploadStub).to.have.been.calledOnce;\n        expect(readFileSyncStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledWithExactly('S3', 'upload', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${awsDeploy.serverless.service.package.artifactDirectoryName}/artifact.zip`,\n          Body: sinon.match.object.and(sinon.match.has('path', artifactFilePath)),\n          ContentType: 'application/zip',\n          ServerSideEncryption: 'AES256',\n          Metadata: {\n            filesha256: 'local-hash-zip-file'\n          }\n        });\n        expect(readFileSyncStub).to.have.been.calledWithExactly(artifactFilePath);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the service artifact file to the S3 bucket","suites":["uploadArtifacts","#uploadFunctionsAndLayers()"],"updatePoint":{"line":194,"column":64,"index":7746},"line":194,"code":"    it('should upload the service artifact file to the S3 bucket', async () => {\n      awsDeploy.serverless.serviceDir = 'some/path';\n      awsDeploy.serverless.service.service = 'new-service';\n      return awsDeploy.uploadFunctionsAndLayers().then(() => {\n        expect(uploadZipFileStub.calledOnce).to.be.equal(true);\n        const expectedPath = path.join('foo', '.serverless', 'new-service.zip');\n        expect(uploadZipFileStub.args[0][0].filename).to.be.equal(expectedPath);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload a single .zip file to the S3 bucket when not packaging individually","suites":["uploadArtifacts","#uploadFunctionsAndLayers()"],"updatePoint":{"line":203,"column":89,"index":8272},"line":203,"code":"    it('should upload a single .zip file to the S3 bucket when not packaging individually', async () => {\n      awsDeploy.serverless.service.functions = {\n        first: {\n          package: {\n            artifact: 'artifact.zip'\n          }\n        },\n        second: {\n          package: {\n            artifact: 'artifact.zip'\n          }\n        }\n      };\n      return awsDeploy.uploadFunctionsAndLayers().then(() => {\n        expect(uploadZipFileStub.calledOnce).to.be.equal(true);\n        expect(uploadZipFileStub.args[0][0].filename).to.be.equal('artifact.zip');\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the function .zip files to the S3 bucket","suites":["uploadArtifacts","#uploadFunctionsAndLayers()"],"updatePoint":{"line":221,"column":62,"index":8833},"line":221,"code":"    it('should upload the function .zip files to the S3 bucket', async () => {\n      awsDeploy.serverless.service.package.individually = true;\n      awsDeploy.serverless.service.functions = {\n        first: {\n          package: {\n            artifact: 'first-artifact.zip'\n          }\n        },\n        second: {\n          package: {\n            artifact: 'second-artifact.zip'\n          }\n        }\n      };\n      return awsDeploy.uploadFunctionsAndLayers().then(() => {\n        expect(uploadZipFileStub.calledTwice).to.be.equal(true);\n        expect(uploadZipFileStub.args[0][0].filename).to.be.equal(awsDeploy.serverless.service.functions.first.package.artifact);\n        expect(uploadZipFileStub.args[1][0].filename).to.be.equal(awsDeploy.serverless.service.functions.second.package.artifact);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload single function artifact and service artifact","suites":["uploadArtifacts","#uploadFunctionsAndLayers()"],"updatePoint":{"line":241,"column":67,"index":9655},"line":241,"code":"    it('should upload single function artifact and service artifact', async () => {\n      awsDeploy.serverless.service.package.artifact = 'second-artifact.zip';\n      awsDeploy.serverless.service.functions = {\n        first: {\n          handler: 'bar',\n          package: {\n            artifact: 'first-artifact.zip',\n            individually: true\n          }\n        },\n        second: {\n          handler: 'foo'\n        }\n      };\n      return awsDeploy.uploadFunctionsAndLayers().then(() => {\n        expect(uploadZipFileStub.calledTwice).to.be.equal(true);\n        expect(uploadZipFileStub.args[0][0].filename).to.be.equal(awsDeploy.serverless.service.functions.first.package.artifact);\n        expect(uploadZipFileStub.args[1][0].filename).to.be.equal(awsDeploy.serverless.service.package.artifact);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should not attempt to upload a custom resources if the artifact does not exist","suites":["uploadArtifacts","#uploadCustomResources()"],"updatePoint":{"line":284,"column":86,"index":11515},"line":284,"code":"    it('should not attempt to upload a custom resources if the artifact does not exist', async () => {\n      return expect(awsDeploy.uploadCustomResources()).to.eventually.be.fulfilled.then(() => {\n        expect(uploadStub).not.to.be.calledOnce;\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload the custom resources .zip file to the S3 bucket","suites":["uploadArtifacts","#uploadCustomResources()"],"updatePoint":{"line":289,"column":69,"index":11763},"line":289,"code":"    it('should upload the custom resources .zip file to the S3 bucket', async () => {\n      fse.ensureFileSync(customResourcesFilePath);\n      crypto.createHash().update().digest.onCall(0).returns('local-hash-zip-file');\n      return expect(awsDeploy.uploadCustomResources()).to.eventually.be.fulfilled.then(() => {\n        expect(uploadStub).to.have.been.calledOnce;\n        expect(uploadStub).to.have.been.calledWithExactly('S3', 'upload', {\n          Bucket: awsDeploy.bucketName,\n          Key: `${awsDeploy.serverless.service.package.artifactDirectoryName}/custom-resources.zip`,\n          Body: sinon.match.object.and(sinon.match.has('path', customResourcesFilePath)),\n          ContentType: 'application/zip',\n          Metadata: {\n            filesha256: 'local-hash-zip-file'\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should upload state file","suites":["test/unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js"],"updatePoint":{"line":308,"column":30,"index":12643},"line":308,"code":"  it('should upload state file', async () => {\n    const uploadStub = sinon.stub().resolves({});\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'deploy',\n      lastLifecycleHookName: 'aws:deploy:deploy:uploadArtifacts',\n      awsRequestStubMap: {\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          }\n        },\n        Lambda: {\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000'\n            }\n          }\n        },\n        S3: {\n          headObject: {\n            Metadata: {\n              filesha256: 'RRYyTm4Ri8mocpvx44pvas4JKLYtdJS3Z8MOlrZrDXA='\n            }\n          },\n          listObjectsV2: {\n            Contents: [{\n              Key: 'serverless/test-package-artifact/dev/1589988704359-2020-05-20T15:31:44.359Z/artifact.zip',\n              LastModified: new Date(),\n              ETag: '\"5102a4cf710cae6497dba9e61b85d0a4\"',\n              Size: 356,\n              StorageClass: 'STANDARD'\n            }]\n          },\n          headBucket: {},\n          upload: uploadStub\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws:iam::999999999999:user/test'\n          }\n        }\n      }\n    });\n    const [statePayload] = uploadStub.args.find(([params]) => params.Key.endsWith(awsNaming.getServiceStateFileName()));\n    expect(statePayload.Body.includes('\"service\":')).to.be.true;\n    expect(statePayload.ContentType).to.equal('application/json');\n  });","file":"unit/lib/plugins/aws/deploy/lib/upload-artifacts.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the CloudFormation template is valid","suites":["validateTemplate","#validateTemplate()"],"updatePoint":{"line":43,"column":62,"index":1384},"line":43,"code":"    it('should resolve if the CloudFormation template is valid', async () => {\n      validateTemplateStub.resolves();\n      await awsDeploy.validateTemplate();\n      expect(validateTemplateStub).to.have.been.calledOnce;\n      expect(validateTemplateStub).to.have.been.calledWithExactly('CloudFormation', 'validateTemplate', {\n        TemplateURL: 'https://s3.amazonaws.com/deployment-bucket/somedir/compiled-cloudformation-template.json'\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/validate-template.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the CloudFormation template is invalid","suites":["validateTemplate","#validateTemplate()"],"updatePoint":{"line":51,"column":71,"index":1849},"line":51,"code":"    it('should throw an error if the CloudFormation template is invalid', async () => {\n      validateTemplateStub.rejects({\n        message: 'Some error while validating'\n      });\n      return expect(awsDeploy.validateTemplate()).to.be.rejected.then(error => {\n        expect(validateTemplateStub).to.have.been.calledOnce;\n        expect(validateTemplateStub).to.have.been.calledWithExactly('CloudFormation', 'validateTemplate', {\n          TemplateURL: 'https://s3.amazonaws.com/deployment-bucket/somedir/compiled-cloudformation-template.json'\n        });\n        expect(error.message).to.match(/is invalid: Some error while validating/);\n      });\n    });","file":"unit/lib/plugins/aws/deploy/lib/validate-template.test.js","skipped":false,"dir":"test"},{"name":"should register api gateway api keys section","suites":["test/unit/lib/plugins/aws/info/display.test.js"],"updatePoint":{"line":81,"column":50,"index":2401},"line":81,"code":"  it('should register api gateway api keys section', () => {\n    expect(serverless.serviceOutputs.get('api keys')).to.deep.equal(['test-key-name: test-key-value']);\n  });","file":"unit/lib/plugins/aws/info/display.test.js","skipped":false,"dir":"test"},{"name":"should register endpoints section","suites":["test/unit/lib/plugins/aws/info/display.test.js"],"updatePoint":{"line":84,"column":39,"index":2561},"line":84,"code":"  it('should register endpoints section', () => {\n    expect(serverless.serviceOutputs.get('endpoints')).to.deep.equal(['GET - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev', 'POST - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev/minimal-1', 'GET - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev/foo', 'POST - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev/some-post', 'GET - https://xxxxx.execute-api.us-east-1.amazonaws.com/dev/bar/{marko}', 'withUrl: https://sub.lambda.com']);\n  });","file":"unit/lib/plugins/aws/info/display.test.js","skipped":false,"dir":"test"},{"name":"should register functions section","suites":["test/unit/lib/plugins/aws/info/display.test.js"],"updatePoint":{"line":87,"column":39,"index":3077},"line":87,"code":"  it('should register functions section', () => {\n    expect(serverless.serviceOutputs.get('functions')).to.deep.equal([`minimal: ${serviceName}-dev-minimal`, `foo: ${serviceName}-dev-foo`, `other: ${serviceName}-dev-other`, `withUrl: ${serviceName}-dev-withUrl`]);\n  });","file":"unit/lib/plugins/aws/info/display.test.js","skipped":false,"dir":"test"},{"name":"should register layers section","suites":["test/unit/lib/plugins/aws/info/display.test.js"],"updatePoint":{"line":90,"column":36,"index":3346},"line":90,"code":"  it('should register layers section', () => {\n    expect(serverless.serviceOutputs.get('layers')).to.deep.equal(['layer: arn:aws:lambda:us-east-1:00000000:layer:layer:1']);\n  });","file":"unit/lib/plugins/aws/info/display.test.js","skipped":false,"dir":"test"},{"name":"should add API Key values to this.gatheredData if API key names are available","suites":["#getApiKeyValues()"],"updatePoint":{"line":29,"column":83,"index":948},"line":29,"code":"  it('should add API Key values to this.gatheredData if API key names are available', async () => {\n    // set the API Keys for the service\n    awsInfo.serverless.service.provider.apiGateway = {\n      apiKeys: ['foo', 'bar']\n    };\n    awsInfo.gatheredData = {\n      info: {}\n    };\n    requestStub.onCall(0).resolves({\n      StackResources: [{\n        PhysicalResourceId: 'giwn5zgpqj',\n        ResourceType: 'AWS::ApiGateway::ApiKey'\n      }, {\n        PhysicalResourceId: 'e5wssvzmla',\n        ResourceType: 'AWS::ApiGateway::ApiKey'\n      }, {\n        PhysicalResourceId: 's3cwoo',\n        ResourceType: 'AWS::ApiGateway::Deployment'\n      }]\n    });\n    requestStub.onCall(1).resolves({\n      id: 'giwn5zgpqj',\n      value: 'valueForKeyFoo',\n      name: 'foo'\n    });\n    requestStub.onCall(2).resolves({\n      id: 'e5wssvzmla',\n      value: 'valueForKeyBar',\n      name: 'bar',\n      description: 'bar description',\n      customerId: 'bar customer id'\n    });\n    const expectedGatheredDataObj = {\n      info: {\n        apiKeys: [{\n          customerId: undefined,\n          description: undefined,\n          name: 'foo',\n          value: 'valueForKeyFoo'\n        }, {\n          customerId: 'bar customer id',\n          description: 'bar description',\n          name: 'bar',\n          value: 'valueForKeyBar'\n        }]\n      }\n    };\n    return awsInfo.getApiKeyValues().then(() => {\n      expect(requestStub.calledThrice).to.equal(true);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-api-key-values.test.js","skipped":false,"dir":"test"},{"name":"should resolve if AWS does not return API key values","suites":["#getApiKeyValues()"],"updatePoint":{"line":81,"column":58,"index":2457},"line":81,"code":"  it('should resolve if AWS does not return API key values', async () => {\n    // set the API Keys for the service\n    awsInfo.serverless.service.provider.apiGateway = {\n      apiKeys: ['foo', 'bar']\n    };\n    awsInfo.gatheredData = {\n      info: {}\n    };\n    const apiKeyItems = {\n      items: []\n    };\n    requestStub.resolves(apiKeyItems);\n    const expectedGatheredDataObj = {\n      info: {\n        apiKeys: []\n      }\n    };\n    return awsInfo.getApiKeyValues().then(() => {\n      expect(requestStub.calledOnce).to.equal(true);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-api-key-values.test.js","skipped":false,"dir":"test"},{"name":"should resolve if API key names are not available","suites":["#getApiKeyValues()"],"updatePoint":{"line":103,"column":55,"index":3079},"line":103,"code":"  it('should resolve if API key names are not available', async () => {\n    awsInfo.serverless.service.provider.apiGateway = {};\n    awsInfo.gatheredData = {\n      info: {}\n    };\n    const expectedGatheredDataObj = {\n      info: {\n        apiKeys: []\n      }\n    };\n    return awsInfo.getApiKeyValues().then(() => {\n      expect(requestStub.calledOnce).to.equal(false);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-api-key-values.test.js","skipped":false,"dir":"test"},{"name":"attach resourceCount to this.gatheredData after listStackResources call","suites":["#getResourceCount()"],"updatePoint":{"line":35,"column":77,"index":1111},"line":35,"code":"  it('attach resourceCount to this.gatheredData after listStackResources call', async () => {\n    const listStackResourcesResponse = {\n      ResponseMetadata: {\n        RequestId: '81386aed-258b-11e8-b3e8-a937105b7db3'\n      },\n      StackResourceSummaries: [{\n        LogicalResourceId: 'ApiGatewayDeployment1520814106863',\n        PhysicalResourceId: 'eoa2a2',\n        ResourceType: 'AWS::ApiGateway::Deployment',\n        LastUpdatedTimestamp: '2018-03-12T00:22:40.680Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'ApiGatewayMethodHelloGet',\n        PhysicalResourceId: 'hello-ApiGa-11R27BUE48W38',\n        ResourceType: 'AWS::ApiGateway::Method',\n        LastUpdatedTimestamp: '2018-03-12T00:22:37.478Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'ApiGatewayResourceHello',\n        PhysicalResourceId: 'az5f7l',\n        ResourceType: 'AWS::ApiGateway::Resource',\n        LastUpdatedTimestamp: '2018-03-12T00:22:22.916Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'ApiGatewayRestApi',\n        PhysicalResourceId: 'n1uk4p7kl0',\n        ResourceType: 'AWS::ApiGateway::RestApi',\n        LastUpdatedTimestamp: '2018-03-12T00:22:19.768Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'HelloLambdaFunction',\n        PhysicalResourceId: 'hello-world-2-dev-hello',\n        ResourceType: 'AWS::Lambda::Function',\n        LastUpdatedTimestamp: '2018-03-12T00:22:34.095Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'HelloLambdaPermissionApiGateway',\n        PhysicalResourceId: 'hello-world-2-dev-HelloLambdaPermissionApiGateway-18KKZXJG1DPF5',\n        ResourceType: 'AWS::Lambda::Permission',\n        LastUpdatedTimestamp: '2018-03-12T00:22:46.950Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'HelloLambdaVersiongZDaMtQjEhvXacHdpTLnQ61zDCdI2IWVYCbuE50pj8',\n        PhysicalResourceId: 'arn:aws:lambda:us-east-1:111111111:function:hello-world-2-dev-hello:2',\n        ResourceType: 'AWS::Lambda::Version',\n        LastUpdatedTimestamp: '2018-03-12T00:22:37.256Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'HelloLogGroup',\n        PhysicalResourceId: '/aws/lambda/hello-world-2-dev-hello',\n        ResourceType: 'AWS::Logs::LogGroup',\n        LastUpdatedTimestamp: '2018-03-12T00:22:20.095Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'IamRoleLambdaExecution',\n        PhysicalResourceId: 'hello-world-2-dev-us-east-1-lambdaRole',\n        ResourceType: 'AWS::IAM::Role',\n        LastUpdatedTimestamp: '2018-03-12T00:22:30.995Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }, {\n        LogicalResourceId: 'ServerlessDeploymentBucket',\n        PhysicalResourceId: 'hello-world-2-dev-serverlessdeploymentbucket-1e3l68m8zaz7i',\n        ResourceType: 'AWS::S3::Bucket',\n        LastUpdatedTimestamp: '2018-03-12T00:22:11.380Z',\n        ResourceStatus: 'CREATE_COMPLETE'\n      }]\n    };\n    listStackResourcesStub.resolves(listStackResourcesResponse);\n    awsInfo.gatheredData = {\n      info: {\n        functions: [],\n        endpoints: [],\n        service: '',\n        stage: '',\n        region: '',\n        stack: ''\n      },\n      outputs: []\n    };\n    return expect(awsInfo.getResourceCount()).to.be.fulfilled.then(() => {\n      expect(listStackResourcesStub.calledOnce).to.equal(true);\n      expect(listStackResourcesStub.calledWithExactly('CloudFormation', 'listStackResources', {\n        StackName: awsInfo.provider.naming.getStackName(),\n        NextToken: undefined\n      })).to.equal(true);\n      expect(awsInfo.gatheredData.info.resourceCount).to.equal(10);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-resource-count.test.js","skipped":false,"dir":"test"},{"name":"attach info from describeStack call to this.gatheredData if result is available","suites":["#getStackInfo()"],"updatePoint":{"line":40,"column":85,"index":1172},"line":40,"code":"  it('attach info from describeStack call to this.gatheredData if result is available', async () => {\n    const describeStacksResponse = {\n      Stacks: [{\n        StackId: 'arn:aws:cloudformation:us-east-1:123456789012:' + 'stack/myteststack/466df9e0-0dff-08e3-8e2f-5088487c4896',\n        Description: 'AWS CloudFormation Sample Template S3_Bucket: ' + 'Sample template showing how to create a publicly accessible S3 bucket.',\n        Tags: [],\n        Outputs: [{\n          Description: 'URL of the service endpoint',\n          OutputKey: 'ServiceEndpoint',\n          OutputValue: 'ab12cd34ef.execute-api.us-east-1.amazonaws.com/dev'\n        }, {\n          Description: 'first',\n          OutputKey: 'ApiGatewayApiKey1Value',\n          OutputValue: 'xxx'\n        }, {\n          Description: 'second',\n          OutputKey: 'ApiGatewayApiKey2Value',\n          OutputValue: 'yyy'\n        }, {\n          Description: 'Current Lambda layer version',\n          OutputKey: 'TestLambdaLayerQualifiedArn',\n          OutputValue: 'arn:aws:lambda:region:NNNNNNNNNNNN:layer:test:1'\n        }, {\n          Description: 'CloudFront Distribution Id',\n          OutputKey: 'CloudFrontDistribution',\n          OutputValue: 'a12bcdef3g45hi'\n        }, {\n          Description: 'CloudFront Distribution Domain Name',\n          OutputKey: 'CloudFrontDistributionDomainName',\n          OutputValue: 'a12bcdef3g45hi.cloudfront.net'\n        }],\n        StackStatusReason: null,\n        CreationTime: '2013-08-23T01:02:15.422Z',\n        Capabilities: [],\n        StackName: 'myteststack',\n        StackStatus: 'CREATE_COMPLETE',\n        DisableRollback: false\n      }]\n    };\n    describeStacksStub.resolves(describeStacksResponse);\n    const expectedGatheredDataObj = {\n      info: {\n        functions: [{\n          name: 'hello',\n          deployedName: 'my-service-dev-hello',\n          artifactSize: undefined\n        }, {\n          name: 'world',\n          deployedName: 'customized',\n          artifactSize: undefined\n        }],\n        layers: [{\n          name: 'test',\n          arn: 'arn:aws:lambda:region:NNNNNNNNNNNN:layer:test:1'\n        }],\n        endpoints: ['ab12cd34ef.execute-api.us-east-1.amazonaws.com/dev'],\n        cloudFront: 'a12bcdef3g45hi.cloudfront.net',\n        service: 'my-service',\n        stage: 'dev',\n        region: 'us-east-1',\n        stack: 'my-service-dev'\n      },\n      outputs: [{\n        Description: 'URL of the service endpoint',\n        OutputKey: 'ServiceEndpoint',\n        OutputValue: 'ab12cd34ef.execute-api.us-east-1.amazonaws.com/dev'\n      }, {\n        Description: 'first',\n        OutputKey: 'ApiGatewayApiKey1Value',\n        OutputValue: 'xxx'\n      }, {\n        Description: 'second',\n        OutputKey: 'ApiGatewayApiKey2Value',\n        OutputValue: 'yyy'\n      }, {\n        Description: 'Current Lambda layer version',\n        OutputKey: 'TestLambdaLayerQualifiedArn',\n        OutputValue: 'arn:aws:lambda:region:NNNNNNNNNNNN:layer:test:1'\n      }, {\n        Description: 'CloudFront Distribution Id',\n        OutputKey: 'CloudFrontDistribution',\n        OutputValue: 'a12bcdef3g45hi'\n      }, {\n        Description: 'CloudFront Distribution Domain Name',\n        OutputKey: 'CloudFrontDistributionDomainName',\n        OutputValue: 'a12bcdef3g45hi.cloudfront.net'\n      }]\n    };\n    return awsInfo.getStackInfo().then(() => {\n      expect(describeStacksStub.calledOnce).to.equal(true);\n      expect(describeStacksStub.calledWithExactly('CloudFormation', 'describeStacks', {\n        StackName: awsInfo.provider.naming.getStackName()\n      })).to.equal(true);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-stack-info.test.js","skipped":false,"dir":"test"},{"name":"should resolve if result is empty","suites":["#getStackInfo()"],"updatePoint":{"line":136,"column":39,"index":4813},"line":136,"code":"  it('should resolve if result is empty', async () => {\n    const describeStacksResponse = null;\n    describeStacksStub.resolves(describeStacksResponse);\n    const expectedGatheredDataObj = {\n      info: {\n        functions: [],\n        layers: [],\n        endpoints: [],\n        service: 'my-service',\n        stage: 'dev',\n        region: 'us-east-1',\n        stack: 'my-service-dev'\n      },\n      outputs: []\n    };\n    return awsInfo.getStackInfo().then(() => {\n      expect(describeStacksStub.calledOnce).to.equal(true);\n      expect(describeStacksStub.calledWithExactly('CloudFormation', 'describeStacks', {\n        StackName: awsInfo.provider.naming.getStackName()\n      })).to.equal(true);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-stack-info.test.js","skipped":false,"dir":"test"},{"name":"should attach info from api gateway if httpApi is used","suites":["#getStackInfo()"],"updatePoint":{"line":159,"column":60,"index":5622},"line":159,"code":"  it('should attach info from api gateway if httpApi is used', async () => {\n    serverless.service.provider.httpApi = {\n      id: 'http-api-id'\n    };\n    describeStacksStub.withArgs('CloudFormation', 'describeStacks', {\n      StackName: awsInfo.provider.naming.getStackName()\n    }).resolves(null);\n    describeStacksStub.withArgs('ApiGatewayV2', 'getApi', {\n      ApiId: 'http-api-id'\n    }).resolves({\n      ApiEndpoint: 'my-endpoint'\n    });\n    const expectedGatheredDataObj = {\n      info: {\n        functions: [],\n        layers: [],\n        endpoints: ['httpApi: my-endpoint'],\n        service: 'my-service',\n        stage: 'dev',\n        region: 'us-east-1',\n        stack: 'my-service-dev'\n      },\n      outputs: []\n    };\n    return awsInfo.getStackInfo().then(() => {\n      expect(describeStacksStub.calledTwice).to.equal(true);\n      expect(describeStacksStub.calledWithExactly('CloudFormation', 'describeStacks', {\n        StackName: awsInfo.provider.naming.getStackName()\n      })).to.equal(true);\n      expect(describeStacksStub.calledWithExactly('ApiGatewayV2', 'getApi', {\n        ApiId: 'http-api-id'\n      })).to.equal(true);\n      expect(awsInfo.gatheredData).to.deep.equal(expectedGatheredDataObj);\n    });\n  });","file":"unit/lib/plugins/aws/info/get-stack-info.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsInfo","#constructor()"],"updatePoint":{"line":61,"column":25,"index":2347},"line":61,"code":"    it('should have hooks', () => expect(awsInfo.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/info/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to the AwsProvider instance","suites":["AwsInfo","#constructor()"],"updatePoint":{"line":62,"column":68,"index":2464},"line":62,"code":"    it('should set the provider variable to the AwsProvider instance', () => expect(awsInfo.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/info/index.test.js","skipped":false,"dir":"test"},{"name":"should set an empty options object if no options are given","suites":["AwsInfo","#constructor()"],"updatePoint":{"line":63,"column":66,"index":2596},"line":63,"code":"    it('should set an empty options object if no options are given', () => {\n      const awsInfoWithEmptyOptions = new AwsInfo(serverless);\n      expect(awsInfoWithEmptyOptions.options).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/info/index.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"info:info\" hook","suites":["AwsInfo","#constructor()"],"updatePoint":{"line":67,"column":62,"index":2805},"line":67,"code":"    it('should run promise chain in order for \"info:info\" hook', async () => awsInfo.hooks['info:info']().then(() => {\n      expect(validateStub.calledOnce).to.equal(true);\n      expect(getStackInfoStub.calledAfter(validateStub)).to.equal(true);\n      expect(getResourceCountStub.calledAfter(getStackInfoStub)).to.equal(true);\n      expect(displayServiceInfoStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      expect(displayApiKeysStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      expect(displayEndpointsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      expect(displayFunctionsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      expect(displayLayersStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      expect(displayStackOutputsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n    }));","file":"unit/lib/plugins/aws/info/index.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order if no deploy is not set","suites":["AwsInfo","#constructor()","when running \"deploy:deploy\" hook"],"updatePoint":{"line":79,"column":67,"index":3708},"line":79,"code":"      it('should run promise chain in order if no deploy is not set', async () => awsInfo.hooks['deploy:deploy']().then(() => {\n        expect(validateStub.calledOnce).to.equal(true);\n        expect(getStackInfoStub.calledAfter(validateStub)).to.equal(true);\n        expect(getResourceCountStub.calledAfter(getStackInfoStub)).to.equal(true);\n        expect(displayServiceInfoStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n        expect(displayApiKeysStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n        expect(displayEndpointsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n        expect(displayFunctionsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n        expect(displayLayersStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n        expect(displayStackOutputsStub.calledAfter(getApiKeyValuesStub)).to.equal(true);\n      }));","file":"unit/lib/plugins/aws/info/index.test.js","skipped":false,"dir":"test"},{"name":"should not throw error when there are no input data","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":115,"column":59,"index":3441},"line":115,"code":"    it('should not throw error when there are no input data', async () => {\n      awsInvokeLocal.options.data = undefined;\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.equal('');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should throw error if function is not provided","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":120,"column":57,"index":3697},"line":120,"code":"    it('it should throw error if function is not provided', () => {\n      serverless.service.functions = null;\n      return expect(awsInvokeLocal.extendedValidate()).to.be.rejected;\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should keep data if it is a simple string","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":124,"column":49,"index":3879},"line":124,"code":"    it('should keep data if it is a simple string', async () => {\n      awsInvokeLocal.options.data = 'simple-string';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.equal('simple-string');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should parse data if it is a json string","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":129,"column":48,"index":4145},"line":129,"code":"    it('should parse data if it is a json string', async () => {\n      awsInvokeLocal.options.data = '{\"key\": \"value\"}';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.deep.equal({\n        key: 'value'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should skip parsing data if \"raw\" requested","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":136,"column":51,"index":4437},"line":136,"code":"    it('should skip parsing data if \"raw\" requested', async () => {\n      awsInvokeLocal.options.data = '{\"key\": \"value\"}';\n      awsInvokeLocal.options.raw = true;\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.deep.equal('{\"key\": \"value\"}');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should parse context if it is a json string","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":142,"column":51,"index":4758},"line":142,"code":"    it('should parse context if it is a json string', async () => {\n      awsInvokeLocal.options.context = '{\"key\": \"value\"}';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.context).to.deep.equal({\n        key: 'value'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should skip parsing context if \"raw\" requested","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":149,"column":54,"index":5059},"line":149,"code":"    it('should skip parsing context if \"raw\" requested', async () => {\n      awsInvokeLocal.options.context = '{\"key\": \"value\"}';\n      awsInvokeLocal.options.raw = true;\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.context).to.deep.equal('{\"key\": \"value\"}');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should parse file if relative file path is provided","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":155,"column":62,"index":5397},"line":155,"code":"    it('it should parse file if relative file path is provided', async () => {\n      serverless.serviceDir = getTmpDirPath();\n      const data = {\n        testProp: 'testValue'\n      };\n      serverless.utils.writeFileSync(path.join(serverless.serviceDir, 'data.json'), JSON.stringify(data));\n      awsInvokeLocal.options.contextPath = 'data.json';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.context).to.deep.equal(data);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should parse file if absolute file path is provided","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":165,"column":62,"index":5891},"line":165,"code":"    it('it should parse file if absolute file path is provided', async () => {\n      serverless.serviceDir = getTmpDirPath();\n      const data = {\n        event: {\n          testProp: 'testValue'\n        }\n      };\n      const dataFile = path.join(serverless.serviceDir, 'data.json');\n      serverless.utils.writeFileSync(dataFile, JSON.stringify(data));\n      awsInvokeLocal.options.path = dataFile;\n      awsInvokeLocal.options.contextPath = false;\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.deep.equal(data);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should parse a yaml file if file path is provided","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":179,"column":60,"index":6482},"line":179,"code":"    it('it should parse a yaml file if file path is provided', async () => {\n      serverless.serviceDir = getTmpDirPath();\n      const yamlContent = 'event: data';\n      serverless.utils.writeFileSync(path.join(serverless.serviceDir, 'data.yml'), yamlContent);\n      awsInvokeLocal.options.path = 'data.yml';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.deep.equal({\n        event: 'data'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should require a js file if file path is provided","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":189,"column":60,"index":6961},"line":189,"code":"    it('it should require a js file if file path is provided', async () => {\n      serverless.serviceDir = getTmpDirPath();\n      const jsContent = ['module.exports = {', '  headers: { \"Content-Type\" : \"application/json\" },', '  body: JSON.stringify([100, 200]),', '}'].join('\\n');\n      serverless.utils.writeFileSync(path.join(serverless.serviceDir, 'data.js'), jsContent);\n      awsInvokeLocal.options.path = 'data.js';\n      await expect(awsInvokeLocal.extendedValidate()).to.be.fulfilled;\n      expect(awsInvokeLocal.options.data).to.deep.equal({\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: '[100,200]'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should reject error if file path does not exist","suites":["AwsInvokeLocal","#extendedValidate()"],"updatePoint":{"line":202,"column":58,"index":7630},"line":202,"code":"    it('it should reject error if file path does not exist', () => {\n      serverless.serviceDir = getTmpDirPath();\n      awsInvokeLocal.options.path = 'some/path';\n      return expect(awsInvokeLocal.extendedValidate()).to.be.rejected;\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns empty object when credentials is not set","suites":["AwsInvokeLocal","#getCredentialEnvVars()"],"updatePoint":{"line":209,"column":56,"index":7924},"line":209,"code":"    it('returns empty object when credentials is not set', () => {\n      provider.cachedCredentials = null;\n      const credentialEnvVars = awsInvokeLocal.getCredentialEnvVars();\n      expect(credentialEnvVars).to.be.eql({});\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns credential env vars from cached credentials","suites":["AwsInvokeLocal","#getCredentialEnvVars()"],"updatePoint":{"line":214,"column":59,"index":8161},"line":214,"code":"    it('returns credential env vars from cached credentials', () => {\n      provider.cachedCredentials = {\n        credentials: {\n          accessKeyId: 'ID',\n          secretAccessKey: 'SECRET',\n          sessionToken: 'TOKEN'\n        }\n      };\n      const credentialEnvVars = awsInvokeLocal.getCredentialEnvVars();\n      expect(credentialEnvVars).to.be.eql({\n        AWS_ACCESS_KEY_ID: 'ID',\n        AWS_SECRET_ACCESS_KEY: 'SECRET',\n        AWS_SESSION_TOKEN: 'TOKEN'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should load provider env vars","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":253,"column":40,"index":9223},"line":253,"code":"    it('it should load provider env vars', async () => {\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.providerVar).to.be.equal('providerValue');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should load provider profile env","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":257,"column":43,"index":9401},"line":257,"code":"    it('it should load provider profile env', async () => {\n      serverless.service.provider.profile = 'jdoe';\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.AWS_PROFILE).to.be.equal('jdoe');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should load function env vars","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":262,"column":40,"index":9619},"line":262,"code":"    it('it should load function env vars', async () => {\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.functionVar).to.be.equal('functionValue');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should load default lambda env vars","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":266,"column":46,"index":9800},"line":266,"code":"    it('it should load default lambda env vars', async () => {\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.LANG).to.equal('en_US.UTF-8');\n      expect(process.env.LD_LIBRARY_PATH).to.equal('/usr/local/lib64/node-v4.3.x/lib:/lib64:/usr/lib64:/var/runtime:/var/runtime/lib:/var/task:/var/task/lib');\n      expect(process.env.LAMBDA_TASK_ROOT).to.equal('/var/task');\n      expect(process.env.LAMBDA_RUNTIME_DIR).to.equal('/var/runtime');\n      expect(process.env.AWS_REGION).to.equal('us-east-1');\n      expect(process.env.AWS_DEFAULT_REGION).to.equal('us-east-1');\n      expect(process.env.AWS_LAMBDA_LOG_GROUP_NAME).to.equal('/aws/lambda/serviceName-dev-hello');\n      expect(process.env.AWS_LAMBDA_LOG_STREAM_NAME).to.equal('2016/12/02/[$LATEST]f77ff5e4026c45bda9a9ebcec6bc9cad');\n      expect(process.env.AWS_LAMBDA_FUNCTION_NAME).to.equal('serviceName-dev-hello');\n      expect(process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE).to.equal('1024');\n      expect(process.env.AWS_LAMBDA_FUNCTION_VERSION).to.equal('$LATEST');\n      expect(process.env.NODE_PATH).to.equal('/var/runtime:/var/task:/var/runtime/node_modules');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should set credential env vars #1","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":281,"column":44,"index":10945},"line":281,"code":"    it('it should set credential env vars #1', async () => {\n      provider.cachedCredentials = {\n        credentials: {\n          accessKeyId: 'ID',\n          secretAccessKey: 'SECRET'\n        }\n      };\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.AWS_ACCESS_KEY_ID).to.equal('ID');\n      expect(process.env.AWS_SECRET_ACCESS_KEY).to.equal('SECRET');\n      expect('AWS_SESSION_TOKEN' in process.env).to.equal(false);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should set credential env vars #2","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":293,"column":44,"index":11394},"line":293,"code":"    it('it should set credential env vars #2', async () => {\n      provider.cachedCredentials = {\n        credentials: {\n          sessionToken: 'TOKEN'\n        }\n      };\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.AWS_SESSION_TOKEN).to.equal('TOKEN');\n      expect('AWS_ACCESS_KEY_ID' in process.env).to.equal(false);\n      expect('AWS_SECRET_ACCESS_KEY' in process.env).to.equal(false);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should work without cached credentials set","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":304,"column":53,"index":11824},"line":304,"code":"    it('it should work without cached credentials set', async () => {\n      provider.cachedCredentials = null;\n      await awsInvokeLocal.loadEnvVars();\n      expect('AWS_SESSION_TOKEN' in process.env).to.equal(false);\n      expect('AWS_ACCESS_KEY_ID' in process.env).to.equal(false);\n      expect('AWS_SECRET_ACCESS_KEY' in process.env).to.equal(false);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should fallback to service provider configuration when options are not available","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":311,"column":88,"index":12222},"line":311,"code":"    it('should fallback to service provider configuration when options are not available', async () => {\n      awsInvokeLocal.provider.options.region = null;\n      awsInvokeLocal.serverless.service.provider.region = 'us-west-1';\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.AWS_REGION).to.equal('us-west-1');\n      expect(process.env.AWS_DEFAULT_REGION).to.equal('us-west-1');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"it should overwrite provider env vars","suites":["AwsInvokeLocal","#loadEnvVars()"],"updatePoint":{"line":318,"column":45,"index":12586},"line":318,"code":"    it('it should overwrite provider env vars', async () => {\n      awsInvokeLocal.options.functionObj.environment.providerVar = 'providerValueOverwritten';\n      await awsInvokeLocal.loadEnvVars();\n      expect(process.env.providerVar).to.be.equal('providerValueOverwritten');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalNodeJs when no runtime is set","suites":["AwsInvokeLocal","#invokeLocal()"],"updatePoint":{"line":353,"column":60,"index":14078},"line":353,"code":"    it('should call invokeLocalNodeJs when no runtime is set', async () => {\n      await awsInvokeLocal.invokeLocal();\n      expect(invokeLocalNodeJsStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalNodeJsStub.calledWithExactly('handler', 'hello', {}, undefined)).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalNodeJs for any node.js runtime version for ","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":366,"column":90,"index":14640},"line":366,"code":"        it(`should call invokeLocalNodeJs for any node.js runtime version for ${item.path}`, async () => {\n          awsInvokeLocal.options.functionObj.handler = item.path;\n          awsInvokeLocal.options.functionObj.runtime = 'nodejs12.x';\n          await awsInvokeLocal.invokeLocal();\n          expect(invokeLocalNodeJsStub.calledOnce).to.be.equal(true);\n          expect(invokeLocalNodeJsStub.calledWithExactly(item.expected, 'hello', {}, undefined)).to.be.equal(true);\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalNodeJs with custom context if provided","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":375,"column":69,"index":15123},"line":375,"code":"    it('should call invokeLocalNodeJs with custom context if provided', async () => {\n      awsInvokeLocal.options.context = 'custom context';\n      await awsInvokeLocal.invokeLocal();\n      expect(invokeLocalNodeJsStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalNodeJsStub.calledWithExactly('handler', 'hello', {}, 'custom context')).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalPython when python2.7 runtime is set","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":381,"column":67,"index":15495},"line":381,"code":"    it('should call invokeLocalPython when python2.7 runtime is set', async () => {\n      awsInvokeLocal.options.functionObj.runtime = 'python2.7';\n      await awsInvokeLocal.invokeLocal();\n      // NOTE: this is important so that tests on Windows won't fail\n      const runtime = process.platform === 'win32' ? 'python.exe' : 'python2.7';\n      expect(invokeLocalPythonStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalPythonStub.calledWithExactly(runtime, 'handler', 'hello', {}, undefined)).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalJava when java8 runtime is set","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":389,"column":61,"index":16020},"line":389,"code":"    it('should call invokeLocalJava when java8 runtime is set', async () => {\n      awsInvokeLocal.options.functionObj.runtime = 'java8';\n      await awsInvokeLocal.invokeLocal();\n      expect(invokeLocalJavaStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalJavaStub.calledWithExactly('java', 'handler.hello', 'handleRequest', undefined, {}, undefined)).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalRuby when ruby2.5 runtime is set","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":395,"column":63,"index":16413},"line":395,"code":"    it('should call invokeLocalRuby when ruby2.5 runtime is set', async () => {\n      awsInvokeLocal.options.functionObj.runtime = 'ruby2.5';\n      await awsInvokeLocal.invokeLocal();\n      // NOTE: this is important so that tests on Windows won't fail\n      const runtime = process.platform === 'win32' ? 'ruby.exe' : 'ruby';\n      expect(invokeLocalRubyStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalRubyStub.calledWithExactly(runtime, 'handler', 'hello', {}, undefined)).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalDocker if using runtime provided","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":403,"column":63,"index":16927},"line":403,"code":"    it('should call invokeLocalDocker if using runtime provided', async () => {\n      awsInvokeLocal.options.functionObj.runtime = 'provided';\n      awsInvokeLocal.options.functionObj.handler = 'handler.foobar';\n      await awsInvokeLocal.invokeLocal();\n      expect(invokeLocalDockerStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalDockerStub.calledWithExactly()).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should call invokeLocalDocker if using --docker option with nodejs12.x","suites":["AwsInvokeLocal","#invokeLocal()","for different handler paths"],"updatePoint":{"line":410,"column":78,"index":17345},"line":410,"code":"    it('should call invokeLocalDocker if using --docker option with nodejs12.x', async () => {\n      awsInvokeLocal.options.functionObj.runtime = 'nodejs12.x';\n      awsInvokeLocal.options.functionObj.handler = 'handler.foobar';\n      awsInvokeLocal.options.docker = true;\n      await awsInvokeLocal.invokeLocal();\n      expect(invokeLocalDockerStub.calledOnce).to.be.equal(true);\n      expect(invokeLocalDockerStub.calledWithExactly()).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"spawns java process with correct arguments","suites":["AwsInvokeLocal","#callJavaBridge()"],"updatePoint":{"line":440,"column":50,"index":18395},"line":440,"code":"    it('spawns java process with correct arguments', async () => {\n      await invokeLocalSpawnStubbed.callJavaBridge(tmpServicePath, 'com.serverless.Handler', 'handleRequest', '{}');\n      expect(writeChildStub.calledOnce).to.be.equal(true);\n      expect(endChildStub.calledOnce).to.be.equal(true);\n      expect(writeChildStub.calledWithExactly('{}')).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should invoke callJavaBridge when bridge is built","suites":["AwsInvokeLocal","#invokeLocalJava()"],"updatePoint":{"line":470,"column":57,"index":19519},"line":470,"code":"    it('should invoke callJavaBridge when bridge is built', async () => {\n      await awsInvokeLocal.invokeLocalJava('java', 'com.serverless.Handler', 'handleRequest', tmpServicePath, {});\n      expect(callJavaBridgeStub.calledOnce).to.be.equal(true);\n      expect(callJavaBridgeStub.calledWithExactly(tmpServicePath, 'com.serverless.Handler', 'handleRequest', JSON.stringify({\n        event: {},\n        context: {\n          name: 'hello',\n          version: 'LATEST',\n          logGroupName: '/aws/lambda/hello',\n          timeout: 4\n        }\n      }))).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"if it's not present yet","suites":["AwsInvokeLocal","#invokeLocalJava()","when attempting to build the Java bridge"],"updatePoint":{"line":484,"column":33,"index":20144},"line":484,"code":"      it(\"if it's not present yet\", async () => {\n        await awsInvokeLocal.invokeLocalJava('java', 'com.serverless.Handler', 'handleRequest', tmpServicePath, {});\n        expect(callJavaBridgeStub.calledOnce).to.be.equal(true);\n        expect(callJavaBridgeStub.calledWithExactly(tmpServicePath, 'com.serverless.Handler', 'handleRequest', JSON.stringify({\n          event: {},\n          context: {\n            name: 'hello',\n            version: 'LATEST',\n            logGroupName: '/aws/lambda/hello',\n            timeout: 4\n          }\n        }))).to.be.equal(true);\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"calls docker with packaged artifact","suites":["AwsInvokeLocal","#invokeLocalDocker()"],"updatePoint":{"line":530,"column":43,"index":21768},"line":530,"code":"    it('calls docker with packaged artifact', async () => {\n      await awsInvokeLocal.invokeLocalDocker();\n      expect(pluginMangerSpawnPackageStub.calledOnce).to.equal(true);\n      expect(spawnExtStub.getCall(0).args).to.deep.equal(['docker', ['version']]);\n      expect(spawnExtStub.getCall(1).args).to.deep.equal(['docker', ['images', '-q', 'lambci/lambda:nodejs12.x']]);\n      expect(spawnExtStub.getCall(3).args).to.deep.equal(['docker', ['run', '--rm', '-v', 'servicePath:/var/task:ro,delegated', '--env', 'AWS_REGION=us-east-1', '--env', 'AWS_DEFAULT_REGION=us-east-1', '--env', 'AWS_LAMBDA_LOG_GROUP_NAME=/aws/lambda/hello', '--env', 'AWS_LAMBDA_FUNCTION_NAME=hello', '--env', 'AWS_LAMBDA_FUNCTION_MEMORY_SIZE=1024', '--env', 'AWS_ACCESS_KEY_ID=foo', '--env', 'AWS_SECRET_ACCESS_KEY=bar', '--env', 'providerVar=providerValue', '--env', 'functionVar=functionValue', '--env', 'commandLineEnvVar=commandLineEnvVarValue', '-p', '9292:9292', 'sls-docker-nodejs12.x', 'handler.hello', '{}']]);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns empty object when env option is not set","suites":["AwsInvokeLocal","#getEnvVarsFromOptions"],"updatePoint":{"line":539,"column":55,"index":22837},"line":539,"code":"    it('returns empty object when env option is not set', () => {\n      delete awsInvokeLocal.options.env;\n      const envVarsFromOptions = awsInvokeLocal.getEnvVarsFromOptions();\n      expect(envVarsFromOptions).to.be.eql({});\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns empty object when env option empty","suites":["AwsInvokeLocal","#getEnvVarsFromOptions"],"updatePoint":{"line":544,"column":50,"index":23068},"line":544,"code":"    it('returns empty object when env option empty', () => {\n      awsInvokeLocal.options.env = '';\n      const envVarsFromOptions = awsInvokeLocal.getEnvVarsFromOptions();\n      expect(envVarsFromOptions).to.be.eql({});\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns key value for option separated by =","suites":["AwsInvokeLocal","#getEnvVarsFromOptions"],"updatePoint":{"line":549,"column":51,"index":23298},"line":549,"code":"    it('returns key value for option separated by =', () => {\n      awsInvokeLocal.options.env = 'SOME_ENV_VAR=some-value';\n      const envVarsFromOptions = awsInvokeLocal.getEnvVarsFromOptions();\n      expect(envVarsFromOptions).to.be.eql({\n        SOME_ENV_VAR: 'some-value'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns key with empty value for option without =","suites":["AwsInvokeLocal","#getEnvVarsFromOptions"],"updatePoint":{"line":556,"column":57,"index":23599},"line":556,"code":"    it('returns key with empty value for option without =', () => {\n      awsInvokeLocal.options.env = 'SOME_ENV_VAR';\n      const envVarsFromOptions = awsInvokeLocal.getEnvVarsFromOptions();\n      expect(envVarsFromOptions).to.be.eql({\n        SOME_ENV_VAR: ''\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns key with single value for option multiple =s","suites":["AwsInvokeLocal","#getEnvVarsFromOptions"],"updatePoint":{"line":563,"column":60,"index":23882},"line":563,"code":"    it('returns key with single value for option multiple =s', () => {\n      awsInvokeLocal.options.env = 'SOME_ENV_VAR=value1=value2';\n      const envVarsFromOptions = awsInvokeLocal.getEnvVarsFromOptions();\n      expect(envVarsFromOptions).to.be.eql({\n        SOME_ENV_VAR: 'value1=value2'\n      });\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns empty list when docker-arg option is absent","suites":["AwsInvokeLocal","#getDockerArgsFromOptions"],"updatePoint":{"line":572,"column":59,"index":24245},"line":572,"code":"    it('returns empty list when docker-arg option is absent', () => {\n      delete awsInvokeLocal.options['docker-arg'];\n      const dockerArgsFromOptions = awsInvokeLocal.getDockerArgsFromOptions();\n      expect(dockerArgsFromOptions).to.eql([]);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns arg split by space when single docker-arg option is present","suites":["AwsInvokeLocal","#getDockerArgsFromOptions"],"updatePoint":{"line":577,"column":75,"index":24517},"line":577,"code":"    it('returns arg split by space when single docker-arg option is present', () => {\n      awsInvokeLocal.options['docker-arg'] = '-p 9229:9229';\n      const dockerArgsFromOptions = awsInvokeLocal.getDockerArgsFromOptions();\n      expect(dockerArgsFromOptions).to.eql(['-p', '9229:9229']);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns args split by space when multiple docker-arg options are present","suites":["AwsInvokeLocal","#getDockerArgsFromOptions"],"updatePoint":{"line":582,"column":80,"index":24821},"line":582,"code":"    it('returns args split by space when multiple docker-arg options are present', () => {\n      awsInvokeLocal.options['docker-arg'] = ['-p 9229:9229', '-v /var/logs:/host-var-logs'];\n      const dockerArgsFromOptions = awsInvokeLocal.getDockerArgsFromOptions();\n      expect(dockerArgsFromOptions).to.eql(['-p', '9229:9229', '-v', '/var/logs:/host-var-logs']);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"returns arg split only by first space when docker-arg option has multiple space","suites":["AwsInvokeLocal","#getDockerArgsFromOptions"],"updatePoint":{"line":587,"column":87,"index":25199},"line":587,"code":"    it('returns arg split only by first space when docker-arg option has multiple space', () => {\n      awsInvokeLocal.options['docker-arg'] = '-v /My Docs:/docs';\n      const dockerArgsFromOptions = awsInvokeLocal.getDockerArgsFromOptions();\n      expect(dockerArgsFromOptions).to.eql(['-v', '/My Docs:/docs']);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"TODO: should accept no data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution"],"updatePoint":{"line":598,"column":37,"index":25708},"line":598,"code":"      it('TODO: should accept no data', async () => {\n        // Confirm outcome on { stdout }\n        await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName\n          }\n        });\n\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L149-L154\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L476-L482\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L489-L498\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L511-L547\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L567-L582\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L627-L637\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L671-L680\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L1076-L1086\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L1116-L1173\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L1208-L1256\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L1301-L1334\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should should support plain string data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution"],"updatePoint":{"line":623,"column":55,"index":27823},"line":623,"code":"      it('TODO: should should support plain string data', async () => {\n        // Confirm outcome on { stdout }\n        await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName,\n            data: 'inputData'\n          }\n        });\n\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L161-L166\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support JSON string data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","Automated JSON parsing"],"updatePoint":{"line":652,"column":49,"index":28755},"line":652,"code":"        it('TODO: should support JSON string data', () => {\n          // Replaces\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L168-L173\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support JSON string client context","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","Automated JSON parsing"],"updatePoint":{"line":656,"column":59,"index":29021},"line":656,"code":"        it('TODO: should support JSON string client context', () => {\n          // Replaces\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L183-L188\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L502-L509\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should should not attempt to parse data with raw option","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","\"--raw\" option"],"updatePoint":{"line":676,"column":73,"index":29890},"line":676,"code":"        it('TODO: should should not attempt to parse data with raw option', () => {\n          // Replaces\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L175-L181\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should should not attempt to parse client context with raw option","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","\"--raw\" option"],"updatePoint":{"line":680,"column":83,"index":30180},"line":680,"code":"        it('TODO: should should not attempt to parse client context with raw option', () => {\n          // Replaces\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L190-L196\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support JSON file path as data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":699,"column":55,"index":30868},"line":699,"code":"        it('TODO: should support JSON file path as data', () => {\n          // Replaces\n          // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L198-L211\n        });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support JSON file path as client context","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":703,"column":65,"index":31140},"line":703,"code":"        it('TODO: should support JSON file path as client context', () => {});","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support YAML file path as data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":705,"column":53,"index":31217},"line":705,"code":"      it('TODO: should support YAML file path as data', async () => {\n        await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName,\n            path: 'payload.yaml'\n          }\n        });\n\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L229-L241\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support JS file path for data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":720,"column":52,"index":31714},"line":720,"code":"      it('TODO: should support JS file path for data', async () => {\n        await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName,\n            path: 'payload.js'\n          }\n        });\n\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L243-L263\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support absolute file path as data","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":735,"column":57,"index":32214},"line":735,"code":"      it('TODO: should support absolute file path as data', async () => {\n        await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName,\n            path: '' /* TODO: Pass absolute path to payload.json in fixture */\n          }\n        });\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L213-L227\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should throw error if data file path does not exist","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":749,"column":67,"index":32771},"line":749,"code":"      it('TODO: should throw error if data file path does not exist', async () => {\n        await expect(runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: functionName,\n            path: 'not-existing.yaml'\n          }\n        })).to.eventually.be.rejected.and.have.property('code', 'TODO');\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L270-L275\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should throw error if function does not exist","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Input resolution","JSON file input"],"updatePoint":{"line":763,"column":61,"index":33349},"line":763,"code":"      it('TODO: should throw error if function does not exist', async () => {\n        await expect(runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            ...options,\n            function: 'notExisting'\n          }\n        })).to.eventually.be.rejected.and.have.property('code', 'TODO');\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L156-L159\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"TODO: should expose eventual AWS credentials in environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":824,"column":80,"index":35349},"line":824,"code":"      xit('TODO: should expose eventual AWS credentials in environment variables', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L284-L327\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L390-L402\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L404-L415\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L417-L424\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"TODO: should expose `provider.env` in environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":831,"column":70,"index":36100},"line":831,"code":"      xit('TODO: should expose `provider.env` in environment variables', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L354-L357\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"TODO: should expose `provider.profile` in environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":835,"column":74,"index":36375},"line":835,"code":"      xit('TODO: should expose `provider.profile` in environment variables', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L359-L363\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"TODO: should expose `functions[].env` in environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":839,"column":73,"index":36649},"line":839,"code":"      xit('TODO: should expose `functions[].env` in environment variables', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L365-L368\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"should expose `--env` vars in environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":843,"column":61,"index":36911},"line":843,"code":"      it('should expose `--env` vars in environment variables', async () => expect(responseBody.env.PARAM_ENV_VAR).to.equal('-Dblart=snort'));","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"TODO: should expose default lambda environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":844,"column":67,"index":37060},"line":844,"code":"      xit('TODO: should expose default lambda environment variables', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L370-L388\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"TODO: should resolve region from `service.provider` if not provided via option","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":848,"column":89,"index":37350},"line":848,"code":"      xit('TODO: should resolve region from `service.provider` if not provided via option', () => {\n        // Replaces\n        // https://github.com/serverless/serverless/blob/95c0bc09421b869ae1d8fc5dea42a2fce1c2023e/test/unit/lib/plugins/aws/invokeLocal/index.test.js#L426-L441\n      });","skipped":true,"file":"unit/lib/plugins/aws/invoke-local/index.test.js","dir":"test"},{"name":"should not expose null environment variables","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Environment variables"],"updatePoint":{"line":852,"column":54,"index":37605},"line":852,"code":"      it('should not expose null environment variables', async () => expect(responseBody.env).to.not.have.property('NULL_VAR'));","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support success resolution via async function","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":857,"column":60,"index":37812},"line":857,"code":"    it('should support success resolution via async function', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'async'\n        }\n      });\n      expect(output).to.include('Invoked');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support success resolution via context.done","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":869,"column":58,"index":38131},"line":869,"code":"    it('should support success resolution via context.done', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'contextDone'\n        }\n      });\n      expect(output).to.include('Invoked');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support success resolution via context.succeed","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":881,"column":61,"index":38459},"line":881,"code":"    it('should support success resolution via context.succeed', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'contextSucceed'\n        }\n      });\n      expect(output).to.include('Invoked');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support immediate failure at initialization","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":893,"column":58,"index":38787},"line":893,"code":"    it('should support immediate failure at initialization', async () => {\n      await expect(runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'initFail'\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'INVOKE_LOCAL_LAMBDA_INITIALIZATION_FAILED');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support immediate failure at invocation","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":902,"column":54,"index":39133},"line":902,"code":"    it('should support immediate failure at invocation', async () => {\n      await expect(runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'invocationFail'\n        }\n      })).to.eventually.be.rejectedWith('Invocation fail');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support failure resolution via async function","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":911,"column":60,"index":39443},"line":911,"code":"    it('should support failure resolution via async function', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'async',\n          data: '{\"shouldFail\":true}'\n        }\n      });\n      expect(output).to.include('Failed on request');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support failure resolution via callback","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":924,"column":54,"index":39807},"line":924,"code":"    it('should support failure resolution via callback', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'callback',\n          data: '{\"shouldFail\":true}'\n        }\n      });\n      expect(output).to.include('Failed on request');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support failure resolution via context.done","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":937,"column":58,"index":40178},"line":937,"code":"    it('should support failure resolution via context.done', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'contextDone',\n          data: '{\"shouldFail\":true}'\n        }\n      });\n      expect(output).to.include('Failed on request');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support failure resolution via context.fail","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":950,"column":58,"index":40552},"line":950,"code":"    it('should support failure resolution via context.fail', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'contextSucceed',\n          data: '{\"shouldFail\":true}'\n        }\n      });\n      expect(output).to.include('Failed on request');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should recognize first resolution","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":963,"column":41,"index":40912},"line":963,"code":"    it('should recognize first resolution', async () => {\n      const {\n        output: firstRunOutput\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'doubledResolutionCallbackFirst'\n        }\n      });\n      const {\n        output: secondRunOutput\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'doubledResolutionPromiseFirst'\n        }\n      });\n      expect(firstRunOutput).to.include('callback');\n      expect(secondRunOutput).to.include('promise');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support context.remainingTimeInMillis()","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":985,"column":54,"index":41563},"line":985,"code":"    it('should support context.remainingTimeInMillis()', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'remainingTime'\n        }\n      });\n      const body = JSON.parse(output).body;\n      const [firstRemainingMs, secondRemainingMs, thirdRemainingMs] = JSON.parse(body).data;\n      expect(firstRemainingMs).to.be.lte(3000);\n      expect(secondRemainingMs).to.be.lte(2910);\n      expect(thirdRemainingMs).to.be.lte(secondRemainingMs);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support handlers with `.cjs` extension","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":1001,"column":53,"index":42136},"line":1001,"code":"    it('should support handlers with `.cjs` extension', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'asyncCjs'\n        }\n      });\n      expect(output).to.include('Invoked');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support handlers that are ES modules","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Node.js"],"updatePoint":{"line":1013,"column":51,"index":42451},"line":1013,"code":"    it('should support handlers that are ES modules', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'asyncEsm'\n        }\n      });\n      expect(output).to.include('Invoked');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support context.get_remaining_time_in_millis()","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Python","context.remainingTimeInMillis"],"updatePoint":{"line":1037,"column":63,"index":43172},"line":1037,"code":"      it('should support context.get_remaining_time_in_millis()', async () => {\n        const {\n          output\n        } = await runServerless({\n          fixture: 'invocation',\n          command: 'invoke local',\n          options: {\n            function: 'pythonRemainingTime'\n          }\n        });\n        const {\n          start,\n          stop\n        } = JSON.parse(output);\n        expect(start).to.lte(3000);\n        expect(stop).to.lte(2910);\n      });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support class/module address in handler for \"ruby*\" runtime","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Ruby"],"updatePoint":{"line":1066,"column":74,"index":43986},"line":1066,"code":"    it('should support class/module address in handler for \"ruby*\" runtime', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'rubyClass'\n        }\n      });\n      expect(output).to.include('rubyclass');\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support context.get_remaining_time_in_millis()","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Ruby"],"updatePoint":{"line":1078,"column":61,"index":44314},"line":1078,"code":"    it('should support context.get_remaining_time_in_millis()', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'rubyRemainingTime'\n        }\n      });\n      const {\n        start,\n        stop\n      } = JSON.parse(output);\n      expect(start).to.lte(6000);\n      expect(stop).to.lte(5910);\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"should support context.deadline_ms","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Ruby"],"updatePoint":{"line":1095,"column":42,"index":44724},"line":1095,"code":"    it('should support context.deadline_ms', async () => {\n      const {\n        output\n      } = await runServerless({\n        fixture: 'invocation',\n        command: 'invoke local',\n        options: {\n          function: 'rubyDeadline'\n        }\n      });\n      const {\n        deadlineMs\n      } = JSON.parse(output);\n      expect(deadlineMs).to.be.gt(Date.now());\n    });","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":false,"dir":"test"},{"name":"TODO: should support \"provided\" runtime in docker invocation","suites":["test/unit/lib/plugins/aws/invokeLocal/index.test.js","Docker"],"updatePoint":{"line":1126,"column":68,"index":45892},"line":1126,"code":"    it('TODO: should support \"provided\" runtime in docker invocation', () => {});","file":"unit/lib/plugins/aws/invoke-local/index.test.js","skipped":true,"dir":"test"},{"name":"should invoke AWS SDK with expected params","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":42,"column":50,"index":1326},"line":42,"code":"    it('should invoke AWS SDK with expected params', () => {\n      expect(lambdaInvokeStub).to.be.calledOnce;\n      expect(lambdaInvokeStub).to.be.calledWith({\n        FunctionName: result.serverless.service.getFunction('callback').name,\n        InvocationType: 'RequestResponse',\n        LogType: 'Tail',\n        Payload: Buffer.from(JSON.stringify({\n          inputKey: 'inputValue'\n        }))\n      });\n    });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support JSON string data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":53,"column":39,"index":1730},"line":53,"code":"    it('should support JSON string data', async () => {\n      expect(lambdaInvokeStub).to.be.calledWith({\n        FunctionName: result.serverless.service.getFunction('callback').name,\n        InvocationType: 'RequestResponse',\n        LogType: 'Tail',\n        Payload: Buffer.from(JSON.stringify({\n          inputKey: 'inputValue'\n        }))\n      });\n    });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should include payload response in output","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":63,"column":49,"index":2101},"line":63,"code":"    it('should include payload response in output', () => {\n      expect(result.output).to.contain('\"inputKey\": \"inputValue\"');\n    });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should include logs in output","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":66,"column":37,"index":2225},"line":66,"code":"    it('should include logs in output', () => {\n      expect(result.output).to.contain('testlogline');\n      expect(result.output).not.to.contain('enterpriseline');\n    });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should accept no data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":71,"column":27,"index":2394},"line":71,"code":"  it('should accept no data', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support plain string data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":95,"column":38,"index":3088},"line":95,"code":"  it('should support plain string data', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        data: 'simple-string'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from(JSON.stringify('simple-string'))\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should should not attempt to parse data with raw option","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":120,"column":61,"index":3863},"line":120,"code":"  it('should should not attempt to parse data with raw option', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        data: '{\"inputKey\":\"inputValue\"}',\n        raw: true\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from(JSON.stringify('{\"inputKey\":\"inputValue\"}'))\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support JSON file path as data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":146,"column":43,"index":4663},"line":146,"code":"  it('should support JSON file path as data', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        path: 'payload.json'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from(JSON.stringify({\n        dataInputKey: 'dataInputValue'\n      }))\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support absolute file path as data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":173,"column":47,"index":5456},"line":173,"code":"  it('should support absolute file path as data', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const {\n      servicePath: serviceDir\n    } = await fixtures.setup('invocation');\n    const pathToPayload = path.join(serviceDir, 'payload.json');\n    const result = await runServerless({\n      cwd: serviceDir,\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        path: pathToPayload\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from(JSON.stringify({\n        dataInputKey: 'dataInputValue'\n      }))\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support YAML file path as data","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":204,"column":43,"index":6389},"line":204,"code":"  it('should support YAML file path as data', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        path: 'payload.yaml'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from(JSON.stringify({\n        dataInputKey: 'dataInputValue'\n      }))\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should throw error if data file path does not exist","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":231,"column":57,"index":7192},"line":231,"code":"  it('should throw error if data file path does not exist', async () => {\n    await expect(runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        path: 'not-existing.yaml'\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'FILE_NOT_FOUND');\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should throw error if function is not provided","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":241,"column":52,"index":7522},"line":241,"code":"  it('should throw error if function is not provided', async () => {\n    await expect(runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'notExisting'\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'FUNCTION_MISSING_IN_SERVICE');\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support --type option","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":250,"column":34,"index":7815},"line":250,"code":"  it('should support --type option', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        type: 'Event'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'Event',\n      LogType: 'None',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support --qualifier option","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":275,"column":39,"index":8523},"line":275,"code":"  it('should support --qualifier option', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        qualifier: 'foo'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Qualifier: 'foo',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support `--context` param","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":301,"column":38,"index":9267},"line":301,"code":"  it('should support `--context` param', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        context: 'somecontext'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub).to.have.been.calledOnce;\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      ClientContext: 'InNvbWVjb250ZXh0Ig==',\n      // \"somecontext\"\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support `--context` param with `--raw` param","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":329,"column":57,"index":10134},"line":329,"code":"  it('should support `--context` param with `--raw` param', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        context: '{\"ctx\": \"somecontext\"}',\n        raw: true\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub).to.have.been.calledOnce;\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      ClientContext: 'IntcImN0eFwiOiBcInNvbWVjb250ZXh0XCJ9Ig==',\n      // \"{\\\"ctx\\\": \\\"somecontext\\\"}\"\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should support `--contextPath` param","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":358,"column":42,"index":11051},"line":358,"code":"  it('should support `--contextPath` param', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const contextDataFilePath = path.join(__dirname, '..', '..', '..', '..', 'fixtures', 'programmatic', 'invocation', 'context.json');\n    const result = await runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        contextPath: contextDataFilePath\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    });\n    expect(lambdaInvokeStub).to.have.been.calledOnce;\n    expect(lambdaInvokeStub.args[0][0]).to.deep.equal({\n      ClientContext: 'eyJ0ZXN0UHJvcCI6InRlc3RWYWx1ZSJ9',\n      // {\"testProp\":\"testValue\"}\n      FunctionName: result.serverless.service.getFunction('callback').name,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: Buffer.from('{}')\n    });\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should throw error on invoke with contextPath if file not exists","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":387,"column":70,"index":12100},"line":387,"code":"  it('should throw error on invoke with contextPath if file not exists', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    const contextDataFilePath = path.join(getTmpDirPath(), 'context.json');\n    await expect(runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        contextPath: contextDataFilePath\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    })).to.be.eventually.rejectedWith(ServerlessError).and.have.property('code', 'FILE_NOT_FOUND');\n    expect(lambdaInvokeStub).to.have.been.callCount(0);\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should fail the process for failed invocations","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":408,"column":52,"index":12829},"line":408,"code":"  it('should fail the process for failed invocations', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    await expect(runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback'\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns({\n              Payload: args.Payload,\n              LogResult: Buffer.from('test').toString('base64'),\n              FunctionError: true\n            });\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    })).to.be.eventually.rejectedWith(Error, 'Invoked function failed');\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should resolve if path is not given","suites":["test/unit/lib/plugins/aws/invoke.test.js","Common"],"updatePoint":{"line":430,"column":41,"index":13488},"line":430,"code":"  it('should resolve if path is not given', async () => {\n    const lambdaInvokeStub = sinon.stub();\n    await expect(runServerless({\n      fixture: 'invocation',\n      command: 'invoke',\n      options: {\n        function: 'callback',\n        path: false\n      },\n      awsRequestStubMap: {\n        Lambda: {\n          invoke: args => {\n            lambdaInvokeStub.returns('payload');\n            return lambdaInvokeStub(args);\n          }\n        }\n      }\n    })).to.be.eventually.fulfilled;\n  });","file":"unit/lib/plugins/aws/invoke.test.js","skipped":false,"dir":"test"},{"name":"should use the default state file path if the \"package\" option is not used","suites":["#getServiceState()"],"updatePoint":{"line":31,"column":80,"index":1108},"line":31,"code":"  it('should use the default state file path if the \"package\" option is not used', () => {\n    const stateFilePath = path.resolve('my-service', '.serverless', 'serverless-state.json');\n    awsPlugin.getServiceState();\n    expect(readFileSyncStub).to.be.calledWithExactly(stateFilePath);\n  });","file":"unit/lib/plugins/aws/lib/get-service-state.test.js","skipped":false,"dir":"test"},{"name":"should use the argument-based state file path if the \"package\" option is used ","suites":["#getServiceState()"],"updatePoint":{"line":36,"column":84,"index":1405},"line":36,"code":"  it('should use the argument-based state file path if the \"package\" option is used ', () => {\n    const stateFilePath = path.resolve('my-service', 'some-package-path', 'serverless-state.json');\n    options.package = 'some-package-path';\n    awsPlugin.getServiceState();\n    expect(readFileSyncStub).to.be.calledWithExactly(stateFilePath);\n  });","file":"unit/lib/plugins/aws/lib/get-service-state.test.js","skipped":false,"dir":"test"},{"name":"should skip monitoring if the stack was already created","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":31,"column":63,"index":995},"line":31,"code":"    it('should skip monitoring if the stack was already created', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      return awsPlugin.monitorStack('update', 'alreadyCreated', {\n        frequency: 10\n      }).then(() => {\n        expect(describeStackEventsStub.callCount).to.be.equal(0);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should keep monitoring until CREATE_COMPLETE stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":40,"column":65,"index":1398},"line":40,"code":"    it('should keep monitoring until CREATE_COMPLETE stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_IN_PROGRESS'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('create', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('CREATE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should keep monitoring until UPDATE_COMPLETE stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":78,"column":65,"index":2905},"line":78,"code":"    it('should keep monitoring until UPDATE_COMPLETE stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('UPDATE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should keep monitoring until DELETE_COMPLETE stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":116,"column":65,"index":4412},"line":116,"code":"    it('should keep monitoring until DELETE_COMPLETE stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('delete', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('DELETE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should not stop monitoring on CREATE_COMPLETE nested stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":154,"column":73,"index":5927},"line":154,"code":"    it('should not stop monitoring on CREATE_COMPLETE nested stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_IN_PROGRESS'\n        }]\n      };\n      const nestedStackEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4z',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'nested-stack-name',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_COMPLETE'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(nestedStackEvent);\n      describeStackEventsStub.onCall(2).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('create', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(3);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('CREATE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should not stop monitoring on UPDATE_COMPLETE nested stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":203,"column":73,"index":7839},"line":203,"code":"    it('should not stop monitoring on UPDATE_COMPLETE nested stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const nestedStackEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4z',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'nested-stack-name',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_COMPLETE'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(nestedStackEvent);\n      describeStackEventsStub.onCall(2).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(3);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('UPDATE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should not stop monitoring on DELETE_COMPLETE nested stack status","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":252,"column":73,"index":9751},"line":252,"code":"    it('should not stop monitoring on DELETE_COMPLETE nested stack status', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }]\n      };\n      const nestedStackEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4z',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'nested-stack-name',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_COMPLETE'\n        }]\n      };\n      const updateFinishedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(nestedStackEvent);\n      describeStackEventsStub.onCall(2).resolves(updateFinishedEvent);\n      return awsPlugin.monitorStack('delete', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(3);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('DELETE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should keep monitoring until DELETE_COMPLETE or stack not found catch","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":301,"column":77,"index":11667},"line":301,"code":"    it('should keep monitoring until DELETE_COMPLETE or stack not found catch', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }]\n      };\n      const stackNotFoundError = {\n        message: 'Stack new-service-dev does not exist'\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).rejects(stackNotFoundError);\n      return awsPlugin.monitorStack('delete', cfDataMock, {\n        frequency: 10\n      }).then(stackStatus => {\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        expect(stackStatus).to.be.equal('DELETE_COMPLETE');\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should output all stack events information with the --verbose option","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":332,"column":76,"index":12953},"line":332,"code":"    it('should output all stack events information with the --verbose option', () => {\n      awsPlugin.options.verbose = true;\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const updateFailedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'mochaS3',\n          ResourceType: 'AWS::S3::Bucket',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_FAILED',\n          ResourceStatusReason: 'Bucket already exists'\n        }]\n      };\n      const updateRollbackEvent = {\n        StackEvents: [{\n          EventId: '1i2j3k4l',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_ROLLBACK_IN_PROGRESS'\n        }]\n      };\n      const updateRollbackComplete = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'ROLLBACK_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateFailedEvent);\n      describeStackEventsStub.onCall(2).resolves(updateRollbackEvent);\n      describeStackEventsStub.onCall(3).resolves(updateRollbackComplete);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).catch(e => {\n        let errorMessage = 'An error occurred: ';\n        errorMessage += 'mochaS3 - Bucket already exists.';\n        if (e.name !== 'ServerlessError') throw e;\n        expect(e.name).to.be.equal('ServerlessError');\n        expect(e.message).to.be.equal(errorMessage);\n        expect(describeStackEventsStub.callCount).to.be.equal(4);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should keep monitoring when 1st ResourceType is not \"AWS::CloudFormation::Stack\"","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":398,"column":88,"index":15571},"line":398,"code":"    it('should keep monitoring when 1st ResourceType is not \"AWS::CloudFormation::Stack\"', async () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const firstNoStackResourceTypeEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'somebucket',\n          ResourceType: 'AWS::S3::Bucket',\n          Timestamp: new Date()\n        }]\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const updateComplete = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(firstNoStackResourceTypeEvent);\n      describeStackEventsStub.onCall(1).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(2).resolves(updateComplete);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).then(() => {\n        expect(describeStackEventsStub.callCount).to.be.equal(3);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should catch describeStackEvents error if stack was not in deleting state","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":445,"column":81,"index":17375},"line":445,"code":"    it('should catch describeStackEvents error if stack was not in deleting state', () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const failedDescribeStackEvents = {\n        message: 'Something went wrong.'\n      };\n      describeStackEventsStub.onCall(0).rejects(failedDescribeStackEvents);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).catch(e => {\n        expect(e.message).to.be.equal('Something went wrong.');\n        expect(describeStackEventsStub.callCount).to.be.equal(1);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should throw an error and exit immediately if stack status is *_FAILED","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":465,"column":78,"index":18253},"line":465,"code":"    it('should throw an error and exit immediately if stack status is *_FAILED', () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const updateFailedEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          LogicalResourceId: 'mochaS3',\n          ResourceType: 'S3::Bucket',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_FAILED',\n          ResourceStatusReason: 'Bucket already exists'\n        }]\n      };\n      const updateRollbackEvent = {\n        StackEvents: [{\n          EventId: '1i2j3k4l',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_ROLLBACK_IN_PROGRESS'\n        }]\n      };\n      const updateRollbackFailedEvent = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_ROLLBACK_FAILED'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateFailedEvent);\n      describeStackEventsStub.onCall(2).resolves(updateRollbackEvent);\n      describeStackEventsStub.onCall(3).resolves(updateRollbackFailedEvent);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).catch(e => {\n        let errorMessage = 'An error occurred: ';\n        errorMessage += 'mochaS3 - Bucket already exists.';\n        expect(e.name).to.be.equal('ServerlessError');\n        expect(e.message).to.be.equal(errorMessage);\n        // callCount is 2 because Serverless will immediately exits and shows the error\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should throw an error and exit immediately if stack status is DELETE_FAILED","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":526,"column":83,"index":20679},"line":526,"code":"    it('should throw an error and exit immediately if stack status is DELETE_FAILED', () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const deleteStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }]\n      };\n      const deleteItemEvent = {\n        StackEvents: [{\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'mochaLambda',\n          ResourceType: 'AWS::Lambda::Function',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }]\n      };\n      const deleteItemFailedEvent = {\n        StackEvents: [{\n          EventId: '1i2j3k4l',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'mochaLambda',\n          ResourceType: 'AWS::Lambda::Function',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_FAILED',\n          ResourceStatusReason: 'You are not authorized to perform this operation'\n        }]\n      };\n      const deleteFailedEvent = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_FAILED'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(deleteStartEvent);\n      describeStackEventsStub.onCall(1).resolves(deleteItemEvent);\n      describeStackEventsStub.onCall(2).resolves(deleteItemFailedEvent);\n      describeStackEventsStub.onCall(3).resolves(deleteFailedEvent);\n      return awsPlugin.monitorStack('delete', cfDataMock, {\n        frequency: 10\n      }).catch(e => {\n        let errorMessage = 'An error occurred: ';\n        errorMessage += 'mochaLambda - You are not authorized to perform this operation.';\n        expect(e.name).to.be.equal('ServerlessError');\n        expect(e.message).to.be.equal(errorMessage);\n        // callCount is 2 because Serverless will immediately exits and shows the error\n        expect(describeStackEventsStub.callCount).to.be.equal(3);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should resolve properly first stack event (when CREATE fails and is followed with DELETE)","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":712,"column":97,"index":28270},"line":712,"code":"    it('should resolve properly first stack event (when CREATE fails and is followed with DELETE)', async () => {\n      awsPlugin.options.verbose = true;\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const createStartEvent = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_COMPLETE'\n        }, {\n          EventId: '1i2j3k4l',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'myBucket',\n          ResourceType: 'AWS::S3::Bucket',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }, {\n          EventId: '1a2b3c4e',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'DELETE_IN_PROGRESS'\n        }, {\n          EventId: '1e2f3g4h',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'myBucket',\n          ResourceType: 'AWS::S3::Bucket',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_FAILED',\n          ResourceStatusReason: 'Invalid Property for X'\n        }, {\n          EventId: '1a2b3c4d',\n          StackName: 'new-service-dev',\n          LogicalResourceId: 'new-service-dev',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'CREATE_IN_PROGRESS'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(createStartEvent);\n      await expect(awsPlugin.monitorStack('create', cfDataMock, {\n        frequency: 10\n      })).to.eventually.be.rejectedWith('myBucket - Invalid Property for X.');\n      awsPlugin.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should record an error and fail if status is UPDATE_ROLLBACK_IN_PROGRESS","suites":["monitorStack","#monitorStack()"],"updatePoint":{"line":763,"column":80,"index":30254},"line":763,"code":"    it('should record an error and fail if status is UPDATE_ROLLBACK_IN_PROGRESS', () => {\n      const describeStackEventsStub = sinon.stub(awsPlugin.provider, 'request');\n      const cfDataMock = {\n        StackId: 'new-service-dev'\n      };\n      const updateStartEvent = {\n        StackEvents: [{\n          EventId: '1a2b3c4d',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_IN_PROGRESS'\n        }]\n      };\n      const updateRollbackEvent = {\n        StackEvents: [{\n          EventId: '1i2j3k4l',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_ROLLBACK_IN_PROGRESS'\n        }]\n      };\n      const updateRollbackCompleteEvent = {\n        StackEvents: [{\n          EventId: '1m2n3o4p',\n          LogicalResourceId: 'mocha',\n          ResourceType: 'AWS::CloudFormation::Stack',\n          Timestamp: new Date(),\n          ResourceStatus: 'UPDATE_ROLLBACK_COMPLETE'\n        }]\n      };\n      describeStackEventsStub.onCall(0).resolves(updateStartEvent);\n      describeStackEventsStub.onCall(1).resolves(updateRollbackEvent);\n      describeStackEventsStub.onCall(2).resolves(updateRollbackCompleteEvent);\n      return awsPlugin.monitorStack('update', cfDataMock, {\n        frequency: 10\n      }).catch(e => {\n        let errorMessage = 'An error occurred: ';\n        errorMessage += 'mocha - UPDATE_ROLLBACK_IN_PROGRESS.';\n        expect(e.name).to.be.equal('ServerlessError');\n        expect(e.message).to.be.equal(errorMessage);\n        // callCount is 2 because Serverless will immediately exits and shows the error\n        expect(describeStackEventsStub.callCount).to.be.equal(2);\n        expect(describeStackEventsStub.calledWithExactly('CloudFormation', 'describeStackEvents', {\n          StackName: cfDataMock.StackId\n        })).to.be.equal(true);\n        awsPlugin.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/lib/monitor-stack.test.js","skipped":false,"dir":"test"},{"name":"should capitalize the first letter","suites":["#naming()","#normalizeName()"],"updatePoint":{"line":22,"column":42,"index":587},"line":22,"code":"    it('should capitalize the first letter', () => {\n      expect(sdk.naming.normalizeName('name')).to.equal('Name');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should have no effect on caps","suites":["#naming()","#normalizeName()"],"updatePoint":{"line":25,"column":37,"index":708},"line":25,"code":"    it('should have no effect on caps', () => {\n      expect(sdk.naming.normalizeName('Name')).to.equal('Name');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should have no effect on the rest of the name","suites":["#naming()","#normalizeName()"],"updatePoint":{"line":28,"column":53,"index":845},"line":28,"code":"    it('should have no effect on the rest of the name', () => {\n      expect(sdk.naming.normalizeName('nAME')).to.equal('NAME');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should strip non-alpha-numeric characters","suites":["#naming()","#normalizeNameToAlphaNumericOnly()"],"updatePoint":{"line":33,"column":49,"index":1041},"line":33,"code":"    it('should strip non-alpha-numeric characters', () => {\n      expect(sdk.naming.normalizeNameToAlphaNumericOnly('`!@#$%^&*()-={}|[]\\\\:\";\\'<>?,./')).to.equal('');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should apply normalizeName to the remaining characters","suites":["#naming()","#normalizeNameToAlphaNumericOnly()"],"updatePoint":{"line":36,"column":62,"index":1228},"line":36,"code":"    it('should apply normalizeName to the remaining characters', () => {\n      expect(sdk.naming.normalizeNameToAlphaNumericOnly('a-b-c')).to.equal('Abc');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts `-` to `Dash`","suites":["#naming()","#normalizePathPart()"],"updatePoint":{"line":41,"column":30,"index":1409},"line":41,"code":"    it('converts `-` to `Dash`', () => {\n      expect(sdk.naming.normalizePathPart('a-path')).to.equal('ADashpath');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts variable declarations (`${var}`) to `VariableVar`","suites":["#naming()","#normalizePathPart()"],"updatePoint":{"line":44,"column":66,"index":1570},"line":44,"code":"    it('converts variable declarations (`${var}`) to `VariableVar`', () => {\n      expect(sdk.naming.normalizePathPart('${variable}')).to.equal('VariableVar');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts variable declarations prefixes to `VariableVarpath`","suites":["#naming()","#normalizePathPart()"],"updatePoint":{"line":47,"column":68,"index":1740},"line":47,"code":"    it('converts variable declarations prefixes to `VariableVarpath`', () => {\n      expect(sdk.naming.normalizePathPart('${variable}Path')).to.equal('VariableVarpath');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts variable declarations suffixes to `PathvariableVar`","suites":["#naming()","#normalizePathPart()"],"updatePoint":{"line":50,"column":68,"index":1918},"line":50,"code":"    it('converts variable declarations suffixes to `PathvariableVar`', () => {\n      expect(sdk.naming.normalizePathPart('path${variable}')).to.equal('PathvariableVar');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts variable declarations in center to `PathvariableVardir`","suites":["#naming()","#normalizePathPart()"],"updatePoint":{"line":53,"column":72,"index":2100},"line":53,"code":"    it('converts variable declarations in center to `PathvariableVardir`', () => {\n      expect(sdk.naming.normalizePathPart('path${variable}Dir')).to.equal('PathvariableVardir');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match the prefix","suites":["#naming()","#getServiceEndpointRegex()"],"updatePoint":{"line":58,"column":31,"index":2302},"line":58,"code":"    it('should match the prefix', () => {\n      expect(sdk.naming.getServiceEndpointRegex().test('ServiceEndpoint')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should not match a name without the prefix","suites":["#naming()","#getServiceEndpointRegex()"],"updatePoint":{"line":61,"column":50,"index":2462},"line":61,"code":"    it('should not match a name without the prefix', () => {\n      expect(sdk.naming.getServiceEndpointRegex().test('NotThePrefixServiceEndpoint')).to.equal(false);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match a name with the prefix","suites":["#naming()","#getServiceEndpointRegex()"],"updatePoint":{"line":64,"column":43,"index":2628},"line":64,"code":"    it('should match a name with the prefix', () => {\n      expect(sdk.naming.getServiceEndpointRegex().test('ServiceEndpointForAService')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should use the service name & stage if custom stack name not provided","suites":["#naming()","#getStackName()"],"updatePoint":{"line":69,"column":77,"index":2870},"line":69,"code":"    it('should use the service name & stage if custom stack name not provided', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getStackName()).to.equal(`${serverless.service.service}-${sdk.naming.provider.getStage()}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should use the custom stack name if provided","suites":["#naming()","#getStackName()"],"updatePoint":{"line":73,"column":52,"index":3106},"line":73,"code":"    it('should use the custom stack name if provided', () => {\n      serverless.service.provider.stackName = 'app-dev-testApp';\n      serverless.service.service = 'myService';\n      serverless.service.provider.stage = sdk.naming.provider.getStage();\n      expect(sdk.naming.getStackName()).to.equal('app-dev-testApp');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should use the service name & stage if custom stack name not provided","suites":["#naming()","#getStackChangeSetName()"],"updatePoint":{"line":81,"column":77,"index":3511},"line":81,"code":"    it('should use the service name & stage if custom stack name not provided', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getStackChangeSetName()).to.equal(`${serverless.service.service}-${sdk.naming.provider.getStage()}-change-set`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should use the custom stack name if provided","suites":["#naming()","#getStackChangeSetName()"],"updatePoint":{"line":85,"column":52,"index":3767},"line":85,"code":"    it('should use the custom stack name if provided', () => {\n      serverless.service.provider.stackName = 'app-dev-testApp';\n      serverless.service.service = 'myService';\n      serverless.service.provider.stage = sdk.naming.provider.getStage();\n      expect(sdk.naming.getStackChangeSetName()).to.equal('app-dev-testApp-change-set');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return `/`","suites":["#naming()","#getRolePath()"],"updatePoint":{"line":93,"column":25,"index":4130},"line":93,"code":"    it('should return `/`', () => {\n      expect(sdk.naming.getRolePath()).to.equal('/');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"uses custom role path","suites":["#naming()","#getRolePath()"],"updatePoint":{"line":96,"column":29,"index":4232},"line":96,"code":"    it('uses custom role path', () => {\n      const customRolePath = '/custom-role-path/';\n      _.set(sdk.naming.provider, 'serverless.service.provider.iam.role.path', customRolePath);\n      expect(sdk.naming.getRolePath()).to.eql(customRolePath);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"uses the service name, stage, and region to generate a role name","suites":["#naming()","#getRoleName()"],"updatePoint":{"line":103,"column":72,"index":4575},"line":103,"code":"    it('uses the service name, stage, and region to generate a role name', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getRoleName()).to.eql({\n        'Fn::Join': ['-', [serverless.service.service, sdk.naming.provider.getStage(), {\n          Ref: 'AWS::Region'\n        }, 'lambdaRole']]\n      });\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"uses custom role name","suites":["#naming()","#getRoleName()"],"updatePoint":{"line":111,"column":29,"index":4873},"line":111,"code":"    it('uses custom role name', () => {\n      const customRoleName = 'custom-default-role';\n      _.set(sdk.naming.provider, 'serverless.service.provider.iam.role.name', customRoleName);\n      expect(sdk.naming.getRoleName()).to.eql(customRoleName);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the expected role name (IamRoleLambdaExecution)","suites":["#naming()","#getRoleLogicalId()"],"updatePoint":{"line":118,"column":69,"index":5219},"line":118,"code":"    it('should return the expected role name (IamRoleLambdaExecution)', () => {\n      expect(sdk.naming.getRoleLogicalId()).to.equal('IamRoleLambdaExecution');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should use the stage and service name","suites":["#naming()","#getPolicyName()"],"updatePoint":{"line":123,"column":45,"index":5408},"line":123,"code":"    it('should use the stage and service name', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getPolicyName()).to.eql({\n        'Fn::Join': ['-', [serverless.service.service, sdk.naming.provider.getStage(), 'lambda']]\n      });\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should prefix the normalized function name to \"LogGroup\"","suites":["#naming()","#getLogicalLogGroupName()"],"updatePoint":{"line":131,"column":64,"index":5751},"line":131,"code":"    it('should prefix the normalized function name to \"LogGroup\"', () => {\n      expect(sdk.naming.getLogGroupLogicalId('functionName')).to.equal('FunctionNameLogGroup');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should add the function name to the log group name","suites":["#naming()","#getLogGroupName()"],"updatePoint":{"line":136,"column":58,"index":5971},"line":136,"code":"    it('should add the function name to the log group name', () => {\n      expect(sdk.naming.getLogGroupName('functionName')).to.equal('/aws/lambda/functionName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the given functionName","suites":["#naming()","#getNormalizedFunctionName()"],"updatePoint":{"line":141,"column":47,"index":6189},"line":141,"code":"    it('should normalize the given functionName', () => {\n      expect(sdk.naming.getNormalizedFunctionName('functionName')).to.equal('FunctionName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the given functionName with an underscore","suites":["#naming()","#getNormalizedFunctionName()"],"updatePoint":{"line":144,"column":66,"index":6367},"line":144,"code":"    it('should normalize the given functionName with an underscore', () => {\n      expect(sdk.naming.getNormalizedFunctionName('hello_world')).to.equal('HelloUnderscoreworld');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the given functionName with a dash","suites":["#naming()","#getNormalizedFunctionName()"],"updatePoint":{"line":147,"column":59,"index":6545},"line":147,"code":"    it('should normalize the given functionName with a dash', () => {\n      expect(sdk.naming.getNormalizedFunctionName('hello-world')).to.equal('HelloDashworld');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should extract everything after the last colon and dash","suites":["#naming()","#extractAuthorizerNameFromArn()"],"updatePoint":{"line":152,"column":63,"index":6781},"line":152,"code":"    it('should extract everything after the last colon and dash', () => {\n      const arn = 'arn:aws:lambda:us-east-1:0123456789:my-dev-lambda';\n      expect(sdk.naming.extractAuthorizerNameFromArn(arn)).to.equal('lambda');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should extract everything after the last colon","suites":["#naming()","#extractLambdaNameFromArn()"],"updatePoint":{"line":158,"column":54,"index":7060},"line":158,"code":"    it('should extract everything after the last colon', () => {\n      const arn = 'arn:aws:lambda:us-east-1:0123456789:my-dev-lambda';\n      expect(sdk.naming.extractLambdaNameFromArn(arn)).to.equal('my-dev-lambda');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the logical suffix","suites":["#naming()","#getLambdaLogicalId()"],"updatePoint":{"line":164,"column":69,"index":7351},"line":164,"code":"    it('should normalize the function name and add the logical suffix', () => {\n      expect(sdk.naming.getLambdaLogicalId('functionName')).to.equal('FunctionNameLambdaFunction');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match the suffix","suites":["#naming()","#getLambdaLogicalIdRegex()"],"updatePoint":{"line":169,"column":31,"index":7556},"line":169,"code":"    it('should match the suffix', () => {\n      expect(sdk.naming.getLambdaLogicalIdRegex().test('LambdaFunction')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should not match a name without the suffix","suites":["#naming()","#getLambdaLogicalIdRegex()"],"updatePoint":{"line":172,"column":50,"index":7715},"line":172,"code":"    it('should not match a name without the suffix', () => {\n      expect(sdk.naming.getLambdaLogicalIdRegex().test('LambdaFunctionNotTheSuffix')).to.equal(false);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match a name with the suffix","suites":["#naming()","#getLambdaLogicalIdRegex()"],"updatePoint":{"line":175,"column":43,"index":7880},"line":175,"code":"    it('should match a name with the suffix', () => {\n      expect(sdk.naming.getLambdaLogicalIdRegex().test('AFunctionNameLambdaFunction')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of stage & service name if custom name not provided","suites":["#naming()","#getWebsocketsApiName()"],"updatePoint":{"line":180,"column":89,"index":8143},"line":180,"code":"    it('should return the composition of stage & service name if custom name not provided', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getWebsocketsApiName()).to.equal(`${sdk.naming.provider.getStage()}-${serverless.service.service}-websockets`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the custom api name if provided","suites":["#naming()","#getWebsocketsApiName()"],"updatePoint":{"line":184,"column":53,"index":8399},"line":184,"code":"    it('should return the custom api name if provided', () => {\n      serverless.service.provider.websocketsApiName = 'app-dev-websockets-testApi';\n      serverless.service.service = 'myService';\n      serverless.service.provider.stage = sdk.naming.provider.getStage();\n      expect(sdk.naming.getWebsocketsApiName()).to.equal('app-dev-websockets-testApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the websocket API logical id","suites":["#naming()","#getWebsocketsApiLogicalId()"],"updatePoint":{"line":192,"column":50,"index":8819},"line":192,"code":"    it('should return the websocket API logical id', () => {\n      expect(sdk.naming.getWebsocketsApiLogicalId()).to.equal('WebsocketsApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the integrations logical id","suites":["#naming()","#getWebsocketsIntegrationLogicalId()"],"updatePoint":{"line":197,"column":49,"index":9032},"line":197,"code":"    it('should return the integrations logical id', () => {\n      expect(sdk.naming.getWebsocketsIntegrationLogicalId('myFunc')).to.equal('MyFuncWebsocketsIntegration');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the route responses logical id","suites":["#naming()","#getWebsocketsRouteResponseLogicalId()"],"updatePoint":{"line":202,"column":52,"index":9280},"line":202,"code":"    it('should return the route responses logical id', () => {\n      expect(sdk.naming.getWebsocketsRouteResponseLogicalId('$connect')).to.equal('SconnectWebsocketsRouteResponse');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the lambda websocket permission logical id","suites":["#naming()","#getLambdaWebsocketsPermissionLogicalId()"],"updatePoint":{"line":207,"column":64,"index":9551},"line":207,"code":"    it('should return the lambda websocket permission logical id', () => {\n      expect(sdk.naming.getLambdaWebsocketsPermissionLogicalId('myFunc')).to.equal('MyFuncLambdaPermissionWebsockets');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return a normalized version of the route key","suites":["#naming()","#getNormalizedWebsocketsRouteKey()"],"updatePoint":{"line":212,"column":59,"index":9812},"line":212,"code":"    it('should return a normalized version of the route key', () => {\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('$connect')).to.equal('Sconnect');\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('foo/bar')).to.equal('fooSlashbar');\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('foo-bar')).to.equal('fooDashbar');\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('foo_bar')).to.equal('fooUnderscorebar');\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('foo.bar')).to.equal('fooPeriodbar');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts multiple `-` correctly","suites":["#naming()","#getNormalizedWebsocketsRouteKey()"],"updatePoint":{"line":219,"column":39,"index":10338},"line":219,"code":"    it('converts multiple `-` correctly', () => {\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('a-longer-path')).to.equal('aDashlongerDashpath');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"converts multiple `-` and `_` correctly","suites":["#naming()","#getNormalizedWebsocketsRouteKey()"],"updatePoint":{"line":222,"column":47,"index":10511},"line":222,"code":"    it('converts multiple `-` and `_` correctly', () => {\n      expect(sdk.naming.getNormalizedWebsocketsRouteKey('a-long_er-path_still')).to.equal('aDashlongUnderscoreerDashpathUnderscorestill');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the websockets route logical id","suites":["#naming()","#getWebsocketsRouteLogicalId()"],"updatePoint":{"line":227,"column":53,"index":10781},"line":227,"code":"    it('should return the websockets route logical id', () => {\n      expect(sdk.naming.getWebsocketsRouteLogicalId('$connect')).to.equal('SconnectWebsocketsRoute');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the websockets deployment logical id","suites":["#naming()","#getWebsocketsDeploymentLogicalId()"],"updatePoint":{"line":232,"column":58,"index":11024},"line":232,"code":"    it('should return the websockets deployment logical id', () => {\n      expect(sdk.naming.getWebsocketsDeploymentLogicalId('Abc+123=')).to.equal('WebsocketsDeploymentAbc123');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the websockets stage logical id","suites":["#naming()","#getWebsocketsStageLogicalId()"],"updatePoint":{"line":237,"column":53,"index":11265},"line":237,"code":"    it('should return the websockets stage logical id', () => {\n      expect(sdk.naming.getWebsocketsStageLogicalId()).to.equal('WebsocketsDeploymentStage');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the websockets authorizer logical id","suites":["#naming()","#getWebsocketsAuthorizerLogicalId()"],"updatePoint":{"line":242,"column":58,"index":11500},"line":242,"code":"    it('should return the websockets authorizer logical id', () => {\n      expect(sdk.naming.getWebsocketsAuthorizerLogicalId('auth')).to.equal('AuthWebsocketsAuthorizer');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the Websockets log group logical id","suites":["#naming()","#getWebsocketsLogGroupLogicalId()"],"updatePoint":{"line":247,"column":57,"index":11742},"line":247,"code":"    it('should return the Websockets log group logical id', () => {\n      expect(sdk.naming.getWebsocketsLogGroupLogicalId()).to.equal('WebsocketsLogGroup');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of service & stage name if custom name not provided and shouldStartNameWithService is true","suites":["#naming()","#getApiGatewayName()"],"updatePoint":{"line":252,"column":128,"index":12028},"line":252,"code":"    it('should return the composition of service & stage name if custom name not provided and shouldStartNameWithService is true', () => {\n      serverless.service.service = 'myService';\n      serverless.service.provider.apiGateway = {\n        shouldStartNameWithService: true\n      };\n      expect(sdk.naming.getApiGatewayName()).to.equal(`${serverless.service.service}-${sdk.naming.provider.getStage()}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of stage & service name if custom name not provided","suites":["#naming()","#getApiGatewayName()"],"updatePoint":{"line":259,"column":89,"index":12405},"line":259,"code":"    it('should return the composition of stage & service name if custom name not provided', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getApiGatewayName()).to.equal(`${sdk.naming.provider.getStage()}-${serverless.service.service}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the custom api name if provided","suites":["#naming()","#getApiGatewayName()"],"updatePoint":{"line":263,"column":53,"index":12647},"line":263,"code":"    it('should return the custom api name if provided', () => {\n      serverless.service.provider.apiName = 'app-dev-testApi';\n      serverless.service.service = 'myService';\n      serverless.service.provider.stage = sdk.naming.provider.getStage();\n      expect(sdk.naming.getApiGatewayName()).to.equal('app-dev-testApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return ApiGatewayDeployment with a suffix","suites":["#naming()","#generateApiGatewayDeploymentLogicalId()"],"updatePoint":{"line":271,"column":56,"index":13050},"line":271,"code":"    it('should return ApiGatewayDeployment with a suffix', () => {\n      expect(sdk.naming.generateApiGatewayDeploymentLogicalId(1234)).to.equal('ApiGatewayDeployment1234');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return ApiGatewayRestApi","suites":["#naming()","#getRestApiLogicalId()"],"updatePoint":{"line":276,"column":39,"index":13266},"line":276,"code":"    it('should return ApiGatewayRestApi', () => {\n      expect(sdk.naming.getRestApiLogicalId()).to.equal('ApiGatewayRestApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"normalize the authorizer name","suites":["#naming()","#getNormalizedAuthorizerName()"],"updatePoint":{"line":281,"column":37,"index":13459},"line":281,"code":"    it('normalize the authorizer name', () => {\n      expect(sdk.naming.getNormalizedAuthorizerName('authorizerName')).to.equal('AuthorizerName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the authorizer name and add the standard suffix","suites":["#naming()","#getAuthorizerLogicalId()"],"updatePoint":{"line":286,"column":72,"index":13703},"line":286,"code":"    it('should normalize the authorizer name and add the standard suffix', () => {\n      expect(sdk.naming.getAuthorizerLogicalId('authorizerName')).to.equal('AuthorizerNameApiGatewayAuthorizer');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should extract the authorizer name from an ARN","suites":["#naming()","#extractAuthorizerNameFromArn()"],"updatePoint":{"line":291,"column":54,"index":13950},"line":291,"code":"    it('should extract the authorizer name from an ARN', () => {\n      const arn = 'arn:aws:lambda:us-east-1:0123456789:my-dev-lambda';\n      expect(sdk.naming.extractAuthorizerNameFromArn(arn)).to.equal('lambda');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize each part of the resource path and remove non-alpha-numeric characters","suites":["#naming()","#normalizePath()"],"updatePoint":{"line":297,"column":95,"index":14259},"line":297,"code":"    it('should normalize each part of the resource path and remove non-alpha-numeric characters', () => {\n      expect(sdk.naming.normalizePath('my/path/to/a-${var}-resource')).to.equal('MyPathToADashvarVarDashresource');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the resource and add the standard suffix","suites":["#naming()","#getResourceLogicalId()"],"updatePoint":{"line":302,"column":65,"index":14511},"line":302,"code":"    it('should normalize the resource and add the standard suffix', () => {\n      expect(sdk.naming.getResourceLogicalId('my/path/to/a-${var}-resource')).to.equal('ApiGatewayResourceMyPathToADashvarVarDashresource');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should extract the normalized resource name","suites":["#naming()","#extractResourceId()"],"updatePoint":{"line":307,"column":51,"index":14771},"line":307,"code":"    it('should extract the normalized resource name', () => {\n      expect(sdk.naming.extractResourceId('ApiGatewayResourceMyPathToADashvarVarDashResource')).to.equal('MyPathToADashvarVarDashResource');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should capitalize the first letter and lowercase any other characters","suites":["#naming()","#normalizeMethodName()"],"updatePoint":{"line":312,"column":77,"index":15059},"line":312,"code":"    it('should capitalize the first letter and lowercase any other characters', () => {\n      expect(sdk.naming.normalizeMethodName('gET')).to.equal('Get');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"","suites":["#naming()","#getMethodLogicalId()"],"updatePoint":{"line":317,"column":8,"index":15205},"line":317,"code":"    it('', () => {\n      expect(sdk.naming.getMethodLogicalId('ResourceId', 'get')).to.equal('ApiGatewayMethodResourceIdGet');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"","suites":["#naming()","#getValidatorLogicalId()"],"updatePoint":{"line":322,"column":8,"index":15393},"line":322,"code":"    it('', () => {\n      serverless.service.service = 'my-Service';\n      expect(sdk.naming.getValidatorLogicalId()).to.equal('ApiGatewayMyServiceRequestValidator');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"","suites":["#naming()","#getEndpointModelLogicalId()"],"updatePoint":{"line":328,"column":8,"index":15624},"line":328,"code":"    it('', () => {\n      expect(sdk.naming.getEndpointModelLogicalId('ResourceId', 'get', 'application/x-www-form-urlencoded')).to.equal('ApiGatewayMethodResourceIdGetApplicationXWwwFormUrlencodedModel');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should produce the given index with ApiGatewayApiKey as a prefix","suites":["#naming()","#getApiKeyLogicalId(keyIndex)"],"updatePoint":{"line":333,"column":72,"index":15959},"line":333,"code":"    it('should produce the given index with ApiGatewayApiKey as a prefix', () => {\n      expect(sdk.naming.getApiKeyLogicalId(1)).to.equal('ApiGatewayApiKey1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should support API Key names","suites":["#naming()","#getApiKeyLogicalId(keyIndex)"],"updatePoint":{"line":336,"column":36,"index":16092},"line":336,"code":"    it('should support API Key names', () => {\n      expect(sdk.naming.getApiKeyLogicalId(1, 'free')).to.equal('ApiGatewayApiKeyFree1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match the prefix","suites":["#naming()","#getApiKeyLogicalIdRegex()"],"updatePoint":{"line":341,"column":31,"index":16287},"line":341,"code":"    it('should match the prefix', () => {\n      expect(sdk.naming.getApiKeyLogicalIdRegex().test('ApiGatewayApiKey')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should not match a name without the prefix","suites":["#naming()","#getApiKeyLogicalIdRegex()"],"updatePoint":{"line":344,"column":50,"index":16448},"line":344,"code":"    it('should not match a name without the prefix', () => {\n      expect(sdk.naming.getApiKeyLogicalIdRegex().test('NotThePrefixApiGatewayApiKey')).to.equal(false);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should match a name with the prefix","suites":["#naming()","#getApiKeyLogicalIdRegex()"],"updatePoint":{"line":347,"column":43,"index":16615},"line":347,"code":"    it('should match a name with the prefix', () => {\n      expect(sdk.naming.getApiKeyLogicalIdRegex().test('ApiGatewayApiKeySuffix')).to.equal(true);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the default ApiGateway usage plan logical id","suites":["#naming()","#getUsagePlanLogicalId()"],"updatePoint":{"line":352,"column":66,"index":16851},"line":352,"code":"    it('should return the default ApiGateway usage plan logical id', () => {\n      expect(sdk.naming.getUsagePlanLogicalId()).to.equal('ApiGatewayUsagePlan');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the named ApiGateway usage plan logical id","suites":["#naming()","#getUsagePlanLogicalId()"],"updatePoint":{"line":355,"column":64,"index":17016},"line":355,"code":"    it('should return the named ApiGateway usage plan logical id', () => {\n      expect(sdk.naming.getUsagePlanLogicalId('free')).to.equal('ApiGatewayUsagePlanFree');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should produce the given index with ApiGatewayUsagePlanKey as a prefix","suites":["#naming()","#getUsagePlanKeyLogicalId()"],"updatePoint":{"line":360,"column":78,"index":17261},"line":360,"code":"    it('should produce the given index with ApiGatewayUsagePlanKey as a prefix', () => {\n      expect(sdk.naming.getUsagePlanKeyLogicalId(1)).to.equal('ApiGatewayUsagePlanKey1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should support API Key names","suites":["#naming()","#getUsagePlanKeyLogicalId()"],"updatePoint":{"line":363,"column":36,"index":17406},"line":363,"code":"    it('should support API Key names', () => {\n      expect(sdk.naming.getUsagePlanKeyLogicalId(1, 'free')).to.equal('ApiGatewayUsagePlanKeyFree1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the API Gateway stage logical id","suites":["#naming()","#getStageLogicalId()"],"updatePoint":{"line":368,"column":54,"index":17630},"line":368,"code":"    it('should return the API Gateway stage logical id', () => {\n      expect(sdk.naming.getStageLogicalId()).to.equal('ApiGatewayStage');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the API Gateway log group logical id","suites":["#naming()","#getApiGatewayLogGroupLogicalId()"],"updatePoint":{"line":373,"column":58,"index":17843},"line":373,"code":"    it('should return the API Gateway log group logical id', () => {\n      expect(sdk.naming.getApiGatewayLogGroupLogicalId()).to.equal('ApiGatewayLogGroup');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return \"ServerlessDeploymentBucket\"","suites":["#naming()","#getDeploymentBucketLogicalId()"],"updatePoint":{"line":378,"column":50,"index":18062},"line":378,"code":"    it('should return \"ServerlessDeploymentBucket\"', () => {\n      expect(sdk.naming.getDeploymentBucketLogicalId()).to.equal('ServerlessDeploymentBucket');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return \"ServerlessDeploymentBucketName\"","suites":["#naming()","#getDeploymentBucketOutputLogicalId()"],"updatePoint":{"line":383,"column":54,"index":18297},"line":383,"code":"    it('should return \"ServerlessDeploymentBucketName\"', () => {\n      expect(sdk.naming.getDeploymentBucketOutputLogicalId()).to.equal('ServerlessDeploymentBucketName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return \"ServerlessDeploymentBucketPolicy\"","suites":["#naming()","#getDeploymentBucketPolicyLogicalId()"],"updatePoint":{"line":388,"column":56,"index":18544},"line":388,"code":"    it('should return \"ServerlessDeploymentBucketPolicy\"', () => {\n      expect(sdk.naming.getDeploymentBucketPolicyLogicalId()).to.equal('ServerlessDeploymentBucketPolicy');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should remove all non-alpha-numeric characters and capitalize the first letter","suites":["#naming()","#normalizeBucketName()"],"updatePoint":{"line":393,"column":86,"index":18808},"line":393,"code":"    it('should remove all non-alpha-numeric characters and capitalize the first letter', () => {\n      expect(sdk.naming.normalizeBucketName('b!u@c#k$e%t^N&a*m(e')).to.equal('BucketName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the bucket name and add the standard prefix","suites":["#naming()","#getBucketLogicalId()"],"updatePoint":{"line":398,"column":68,"index":19037},"line":398,"code":"    it('should normalize the bucket name and add the standard prefix', () => {\n      expect(sdk.naming.getBucketLogicalId('b!u@c#k$e%t^N&a*m(e')).to.equal('S3BucketBucketName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should remove all non-alpha-numeric characters and capitalize the first letter","suites":["#naming()","#normalizeTopicName()"],"updatePoint":{"line":403,"column":86,"index":19291},"line":403,"code":"    it('should remove all non-alpha-numeric characters and capitalize the first letter', () => {\n      expect(sdk.naming.normalizeTopicName('t!o@p#i$c%N^a&m*e')).to.equal('TopicName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should remove all non-alpha-numeric characters and capitalize the first letter","suites":["#naming()","#getTopicLogicalId()"],"updatePoint":{"line":408,"column":86,"index":19533},"line":408,"code":"    it('should remove all non-alpha-numeric characters and capitalize the first letter', () => {\n      expect(sdk.naming.getTopicLogicalId('t!o@p#i$c%N^a&m*e')).to.equal('SNSTopicTopicName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should add the standard suffix","suites":["#naming()","#getScheduleId()"],"updatePoint":{"line":413,"column":38,"index":19730},"line":413,"code":"    it('should add the standard suffix', () => {\n      expect(sdk.naming.getScheduleId('functionName')).to.equal('functionNameSchedule');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including the index","suites":["#naming()","#getScheduleLogicalId()"],"updatePoint":{"line":418,"column":90,"index":19980},"line":418,"code":"    it('should normalize the function name and add the standard suffix including the index', () => {\n      expect(sdk.naming.getScheduleLogicalId('functionName', 0)).to.equal('FunctionNameEventsRuleSchedule0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should add the standard suffix","suites":["#naming()","#getStreamConsumerName()"],"updatePoint":{"line":423,"column":38,"index":20200},"line":423,"code":"    it('should add the standard suffix', () => {\n      expect(sdk.naming.getStreamConsumerName('functionName', 'streamName')).to.equal('functionNamestreamNameConsumer');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the stream consumer name and add the standard suffix","suites":["#naming()","#getStreamConsumerLogicalId()"],"updatePoint":{"line":428,"column":77,"index":20475},"line":428,"code":"    it('should normalize the stream consumer name and add the standard suffix', () => {\n      expect(sdk.naming.getStreamConsumerLogicalId('streamConsumerName')).to.equal('StreamConsumerNameStreamConsumer');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should add the standard suffix","suites":["#naming()","#getCloudWatchEventId()"],"updatePoint":{"line":433,"column":38,"index":20704},"line":433,"code":"    it('should add the standard suffix', () => {\n      expect(sdk.naming.getCloudWatchEventId('functionName')).to.equal('functionNameCloudWatchEvent');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including the index","suites":["#naming()","#getCloudWatchEventLogicalId()"],"updatePoint":{"line":438,"column":90,"index":20975},"line":438,"code":"    it('should normalize the function name and add the standard suffix including the index', () => {\n      expect(sdk.naming.getCloudWatchEventLogicalId('functionName', 0)).to.equal('FunctionNameEventsRuleCloudWatchEvent0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including the index","suites":["#naming()","#getCloudWatchLogLogicalId()"],"updatePoint":{"line":443,"column":90,"index":21265},"line":443,"code":"    it('should normalize the function name and add the standard suffix including the index', () => {\n      expect(sdk.naming.getCloudWatchLogLogicalId('functionName', 0)).to.equal('FunctionNameLogsSubscriptionFilterCloudWatchLog0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the user pool name and add the standard prefix","suites":["#naming()","#getCognitoUserPoolLogicalId()"],"updatePoint":{"line":448,"column":71,"index":21546},"line":448,"code":"    it('should normalize the user pool name and add the standard prefix', () => {\n      expect(sdk.naming.getCognitoUserPoolLogicalId('us-east-1_v123sDAS1')).to.equal('CognitoUserPoolUseast1v123sDAS1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix","suites":["#naming()","#getLambdaS3PermissionLogicalId()"],"updatePoint":{"line":453,"column":70,"index":21818},"line":453,"code":"    it('should normalize the function name and add the standard suffix', () => {\n      expect(sdk.naming.getLambdaS3PermissionLogicalId('functionName', 'bucket')).to.equal('FunctionNameLambdaPermissionBucketS3');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including event index","suites":["#naming()","#getLambdaSchedulePermissionLogicalId()"],"updatePoint":{"line":463,"column":92,"index":22469},"line":463,"code":"    it('should normalize the function name and add the standard suffix including event index', () => {\n      expect(sdk.naming.getLambdaSchedulePermissionLogicalId('functionName', 0)).to.equal('FunctionNameLambdaPermissionEventsRuleSchedule0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including event index","suites":["#naming()","#getLambdaCloudWatchEventPermissionLogicalId()"],"updatePoint":{"line":468,"column":92,"index":22797},"line":468,"code":"    it('should normalize the function name and add the standard suffix including event index', () => {\n      expect(sdk.naming.getLambdaCloudWatchEventPermissionLogicalId('functionName', 0)).to.equal('FunctionNameLambdaPermissionEventsRuleCloudWatchEvent0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append the standard suffix","suites":["#naming()","#getLambdaApiGatewayPermissionLogicalId()"],"updatePoint":{"line":473,"column":73,"index":23115},"line":473,"code":"    it('should normalize the function name and append the standard suffix', () => {\n      expect(sdk.naming.getLambdaApiGatewayPermissionLogicalId('functionName')).to.equal('FunctionNameLambdaPermissionApiGateway');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including the index","suites":["#naming()","#getIotLogicalId()"],"updatePoint":{"line":478,"column":90,"index":23403},"line":478,"code":"    it('should normalize the function name and add the standard suffix including the index', () => {\n      expect(sdk.naming.getIotLogicalId('functionName', 0)).to.equal('FunctionNameIotTopicRule0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including event index","suites":["#naming()","#getLambdaIotPermissionLogicalId()"],"updatePoint":{"line":483,"column":92,"index":23676},"line":483,"code":"    it('should normalize the function name and add the standard suffix including event index', () => {\n      expect(sdk.naming.getLambdaIotPermissionLogicalId('functionName', 0)).to.equal('FunctionNameLambdaPermissionIotTopicRule0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append the standard suffix","suites":["#naming()","#getLambdaAlexaSkillPermissionLogicalId()"],"updatePoint":{"line":488,"column":73,"index":23969},"line":488,"code":"    it('should normalize the function name and append the standard suffix', () => {\n      expect(sdk.naming.getLambdaAlexaSkillPermissionLogicalId('functionName', 2)).to.equal('FunctionNameLambdaPermissionAlexaSkill2');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append a default suffix if not defined","suites":["#naming()","#getLambdaAlexaSkillPermissionLogicalId()"],"updatePoint":{"line":491,"column":85,"index":24209},"line":491,"code":"    it('should normalize the function name and append a default suffix if not defined', () => {\n      expect(sdk.naming.getLambdaAlexaSkillPermissionLogicalId('functionName')).to.equal('FunctionNameLambdaPermissionAlexaSkill0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append the standard suffix","suites":["#naming()","#getLambdaAlexaSmartHomePermissionLogicalId()"],"updatePoint":{"line":496,"column":73,"index":24508},"line":496,"code":"    it('should normalize the function name and append the standard suffix', () => {\n      expect(sdk.naming.getLambdaAlexaSmartHomePermissionLogicalId('functionName', 0)).to.equal('FunctionNameLambdaPermissionAlexaSmartHome0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append the standard suffix","suites":["#naming()","#getLambdaSnsSubscriptionLogicalId()"],"updatePoint":{"line":501,"column":73,"index":24809},"line":501,"code":"    it('should normalize the function name and append the standard suffix', () => {\n      expect(sdk.naming.getLambdaSnsSubscriptionLogicalId('functionName', 'topicName')).to.equal('FunctionNameSnsSubscriptionTopicName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix including event index","suites":["#naming()","#getLambdaCloudWatchLogPermissionLogicalId()"],"updatePoint":{"line":506,"column":92,"index":25131},"line":506,"code":"    it('should normalize the function name and add the standard suffix including event index', () => {\n      expect(sdk.naming.getLambdaCloudWatchLogPermissionLogicalId('functionName')).to.equal('FunctionNameLambdaPermissionLogsSubscriptionFilterCloudWatchLog');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix","suites":["#naming()","#getLambdaCognitoUserPoolPermissionLogicalId()"],"updatePoint":{"line":511,"column":70,"index":25455},"line":511,"code":"    it('should normalize the function name and add the standard suffix', () => {\n      expect(sdk.naming.getLambdaCognitoUserPoolPermissionLogicalId('functionName', 'Pool1', 'PreSignUp_ExternalProvider')).to.equal('FunctionNameLambdaPermissionCognitoUserPoolPool1TriggerSourcePreSignUpExternalProvider');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name","suites":["#naming()","#getLambdaCognitoUserPoolPermissionLogicalId()","#getLambdaAlbPermissionLogicalId()"],"updatePoint":{"line":515,"column":44,"index":25801},"line":515,"code":"      it('should normalize the function name', () => {\n        expect(sdk.naming.getLambdaAlbPermissionLogicalId('functionName')).to.equal('FunctionNameLambdaPermissionAlb');\n      });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the correct suffix","suites":["#naming()","#getLambdaCognitoUserPoolPermissionLogicalId()","#getLambdaRegisterTargetPermissionLogicalId()"],"updatePoint":{"line":520,"column":71,"index":26091},"line":520,"code":"      it('should normalize the function name and add the correct suffix', () => {\n        expect(sdk.naming.getLambdaRegisterTargetPermissionLogicalId('functionName')).to.equal('FunctionNameLambdaPermissionRegisterTarget');\n      });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add the standard suffix","suites":["#naming()","#getQueueLogicalId()"],"updatePoint":{"line":526,"column":70,"index":26381},"line":526,"code":"    it('should normalize the function name and add the standard suffix', () => {\n      expect(sdk.naming.getQueueLogicalId('functionName', 'MyQueue')).to.equal('FunctionNameEventSourceMappingSQSMyQueue');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append topic name","suites":["#naming()","#getKafkaEventLogicalId()"],"updatePoint":{"line":531,"column":64,"index":26642},"line":531,"code":"    it('should normalize the function name and append topic name', () => {\n      expect(sdk.naming.getKafkaEventLogicalId('functionName', 'kafka-topic')).to.equal('FunctionNameEventSourceMappingKafkaKafkatopic');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize long function name and append topic name","suites":["#naming()","#getKafkaEventLogicalId()"],"updatePoint":{"line":534,"column":65,"index":26864},"line":534,"code":"    it('should normalize long function name and append topic name', () => {\n      expect(sdk.naming.getKafkaEventLogicalId('functionName', 'myVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicName')).to.equal('FunctionNameEventSourceMappingKafkaMyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVeryLongTopicNamemyVery');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and append normalized cluster and topic names","suites":["#naming()","#getMSKEventLogicalId()"],"updatePoint":{"line":539,"column":88,"index":27488},"line":539,"code":"    it('should normalize the function name and append normalized cluster and topic names', () => {\n      expect(sdk.naming.getMSKEventLogicalId('functionName', 'my-kafka-cluster', 'kafka-topic')).to.equal('FunctionNameEventSourceMappingMSKMykafkaclusterKafkatopic');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name","suites":["#naming()","#getAlbTargetGroupLogicalId()"],"updatePoint":{"line":544,"column":42,"index":27775},"line":544,"code":"    it('should normalize the function name', () => {\n      expect(sdk.naming.getAlbTargetGroupLogicalId('functionName', 'abc123')).to.equal('FunctionNameAlbTargetGroupabc123');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add MultiValue prefix if multiValueHeader is true","suites":["#naming()","#getAlbTargetGroupLogicalId()"],"updatePoint":{"line":547,"column":96,"index":28014},"line":547,"code":"    it('should normalize the function name and add MultiValue prefix if multiValueHeader is true', () => {\n      expect(sdk.naming.getAlbTargetGroupLogicalId('functionName', 'abc123', true)).to.equal('FunctionNameAlbMultiValueTargetGroupabc123');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the function name and add an index","suites":["#naming()","#getAlbListenerRuleLogicalId()"],"updatePoint":{"line":552,"column":59,"index":28291},"line":552,"code":"    it('should normalize the function name and add an index', () => {\n      expect(sdk.naming.getAlbListenerRuleLogicalId('functionName', 0)).to.equal('FunctionNameAlbListenerRule0');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return a unique identifier based on the service name, function name, alb id, multi-value attribute and stage","suites":["#naming()","#generateAlbTargetGroupName()"],"updatePoint":{"line":557,"column":123,"index":28605},"line":557,"code":"    it('should return a unique identifier based on the service name, function name, alb id, multi-value attribute and stage', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.generateAlbTargetGroupName('functionName', 'abc123', true)).to.equal('79039bd239ac0b3f6ff6d9296f23e27c');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return a prefixed unique identifier of not longer than 32 characters if alb.targetGroupPrefix is set","suites":["#naming()","#generateAlbTargetGroupName()"],"updatePoint":{"line":561,"column":115,"index":28917},"line":561,"code":"    it('should return a prefixed unique identifier of not longer than 32 characters if alb.targetGroupPrefix is set', () => {\n      serverless.service.service = 'myService';\n      serverless.service.provider.alb = {};\n      serverless.service.provider.alb.targetGroupPrefix = 'myPrefix-';\n      expect(sdk.naming.generateAlbTargetGroupName('functionName', 'abc123', true)).to.equal('myPrefix-79039bd239ac0b3f6ff6d92');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of service name, function name, alb id, multi-value attribute and stage","suites":["#naming()","#getAlbTargetGroupNameTagValue()"],"updatePoint":{"line":569,"column":109,"index":29399},"line":569,"code":"    it('should return the composition of service name, function name, alb id, multi-value attribute and stage', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getAlbTargetGroupNameTagValue('functionName', 'abc123', true)).to.equal(`${serverless.service.service}-functionName-abc123-multi-value-${sdk.naming.provider.getStage()}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the custom resources artifact directory name","suites":["#naming()","#getCustomResourcesArtifactName()"],"updatePoint":{"line":575,"column":66,"index":29790},"line":575,"code":"    it('should return the custom resources artifact directory name', () => {\n      expect(sdk.naming.getCustomResourcesArtifactName()).to.equal('custom-resources.zip');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the custom resources role logical id","suites":["#naming()","#getCustomResourcesRoleLogicalId()"],"updatePoint":{"line":580,"column":58,"index":30022},"line":580,"code":"    it('should return the custom resources role logical id', () => {\n      expect(sdk.naming.getCustomResourcesRoleLogicalId()).to.equal('IamRoleCustomResourcesLambdaExecution');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the S3 custom resource handler function","suites":["#naming()","#getCustomResourceS3HandlerFunctionName()"],"updatePoint":{"line":585,"column":73,"index":30294},"line":585,"code":"    it('should return the name of the S3 custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceS3HandlerFunctionName()).to.equal('custom-resource-existing-s3');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the S3 custom resource handler function","suites":["#naming()","#getCustomResourceS3HandlerFunctionLogicalId()"],"updatePoint":{"line":590,"column":79,"index":30574},"line":590,"code":"    it('should return the logical id of the S3 custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceS3HandlerFunctionLogicalId()).to.equal('CustomDashresourceDashexistingDashs3LambdaFunction');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the S3 custom resource","suites":["#naming()","#getCustomResourceS3ResourceLogicalId()"],"updatePoint":{"line":595,"column":62,"index":30858},"line":595,"code":"    it('should return the logical id of the S3 custom resource', () => {\n      const functionName = 'my-function';\n      expect(sdk.naming.getCustomResourceS3ResourceLogicalId(functionName)).to.equal('MyDashfunctionCustomS31');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the Cognito User Pool custom resource handler function","suites":["#naming()","#getCustomResourceCognitoUserPoolHandlerFunctionName()"],"updatePoint":{"line":601,"column":88,"index":31203},"line":601,"code":"    it('should return the name of the Cognito User Pool custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceCognitoUserPoolHandlerFunctionName()).to.equal('custom-resource-existing-cup');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the Cognito User Pool custom resource handler function","suites":["#naming()","#getCustomResourceCognitoUserPoolHandlerFunctionLogicalId()"],"updatePoint":{"line":606,"column":94,"index":31525},"line":606,"code":"    it('should return the logical id of the Cognito User Pool custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceCognitoUserPoolHandlerFunctionLogicalId()).to.equal('CustomDashresourceDashexistingDashcupLambdaFunction');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the Cognito User Pool custom resource","suites":["#naming()","#getCustomResourceCognitoUserPoolResourceLogicalId()"],"updatePoint":{"line":611,"column":77,"index":31851},"line":611,"code":"    it('should return the logical id of the Cognito User Pool custom resource', () => {\n      const functionName = 'my-function';\n      expect(sdk.naming.getCustomResourceCognitoUserPoolResourceLogicalId(functionName)).to.equal('MyDashfunctionCustomCognitoUserPool1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the Event Bridge custom resource handler function","suites":["#naming()","#getCustomResourceEventBridgeHandlerFunctionName()"],"updatePoint":{"line":617,"column":83,"index":32213},"line":617,"code":"    it('should return the name of the Event Bridge custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceEventBridgeHandlerFunctionName()).to.equal('custom-resource-event-bridge');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the Event Bridge custom resource handler function","suites":["#naming()","#getCustomResourceEventBridgeHandlerFunctionLogicalId()"],"updatePoint":{"line":622,"column":89,"index":32522},"line":622,"code":"    it('should return the logical id of the Event Bridge custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceEventBridgeHandlerFunctionLogicalId()).to.equal('CustomDashresourceDasheventDashbridgeLambdaFunction');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the Event Bridge custom resource","suites":["#naming()","#getCustomResourceEventBridgeResourceLogicalId()"],"updatePoint":{"line":627,"column":72,"index":32835},"line":627,"code":"    it('should return the logical id of the Event Bridge custom resource', () => {\n      const functionName = 'my-function';\n      const index = 1;\n      expect(sdk.naming.getCustomResourceEventBridgeResourceLogicalId(functionName, index)).to.equal('MyDashfunctionCustomEventBridge1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the APIGW Account CloudWatch role custom resource handler function","suites":["#naming()","#getCustomResourceApiGatewayAccountCloudWatchRoleHandlerFunctionName()"],"updatePoint":{"line":634,"column":100,"index":33256},"line":634,"code":"    it('should return the name of the APIGW Account CloudWatch role custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceApiGatewayAccountCloudWatchRoleHandlerFunctionName()).to.equal('custom-resource-apigw-cw-role');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the APIGW Account CloudWatch role custom resource handler function","suites":["#naming()","#getCustomResourceApiGatewayAccountCloudWatchRoleHandlerFunctionLogicalId()"],"updatePoint":{"line":639,"column":106,"index":33623},"line":639,"code":"    it('should return the logical id of the APIGW Account CloudWatch role custom resource handler function', () => {\n      expect(sdk.naming.getCustomResourceApiGatewayAccountCloudWatchRoleHandlerFunctionLogicalId()).to.equal('CustomDashresourceDashapigwDashcwDashroleLambdaFunction');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the logical id of the APIGW Account CloudWatch role custom resource","suites":["#naming()","#getCustomResourceApiGatewayAccountCloudWatchRoleResourceLogicalId()"],"updatePoint":{"line":644,"column":89,"index":33997},"line":644,"code":"    it('should return the logical id of the APIGW Account CloudWatch role custom resource', () => {\n      expect(sdk.naming.getCustomResourceApiGatewayAccountCloudWatchRoleResourceLogicalId()).to.equal('CustomApiGatewayAccountCloudWatchRole');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return CloudFront distribution logical id","suites":["#naming()","#getCloudFrontDistributionLogicalId()"],"updatePoint":{"line":649,"column":56,"index":34282},"line":649,"code":"    it('should return CloudFront distribution logical id', () => {\n      expect(sdk.naming.getCloudFrontDistributionLogicalId()).to.equal('CloudFrontDistribution');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return CloudFront distribution domain name logical id","suites":["#naming()","#getCloudFrontDistributionDomainNameLogicalId()"],"updatePoint":{"line":654,"column":68,"index":34543},"line":654,"code":"    it('should return CloudFront distribution domain name logical id', () => {\n      expect(sdk.naming.getCloudFrontDistributionDomainNameLogicalId()).to.equal('CloudFrontDistributionDomainName');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return lambda@edge invoke permission logical id","suites":["#naming()","#getLambdaAtEdgeInvokePermissionLogicalId()"],"updatePoint":{"line":659,"column":62,"index":34814},"line":659,"code":"    it('should return lambda@edge invoke permission logical id', () => {\n      expect(sdk.naming.getLambdaAtEdgeInvokePermissionLogicalId('functionName')).to.equal('FunctionNameLambdaFunctionInvokePermission');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return CloudFront origin id for s3 origin","suites":["#naming()","#getCloudFrontOriginId()"],"updatePoint":{"line":664,"column":56,"index":35080},"line":664,"code":"    it('should return CloudFront origin id for s3 origin', () => {\n      expect(sdk.naming.getCloudFrontOriginId({\n        S3OriginConfig: {},\n        DomainName: 'domain.name',\n        OriginPath: '/path'\n      })).to.equal('s3/domain.name/path');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return CloudFront origin id for custom origin","suites":["#naming()","#getCloudFrontOriginId()"],"updatePoint":{"line":671,"column":60,"index":35341},"line":671,"code":"    it('should return CloudFront origin id for custom origin', () => {\n      expect(sdk.naming.getCloudFrontOriginId({\n        CustomOriginConfig: {},\n        DomainName: 'domain.name',\n        OriginPath: '/path'\n      })).to.equal('custom/domain.name/path');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return CloudFront origin id from domain as a object","suites":["#naming()","#getCloudFrontOriginId()"],"updatePoint":{"line":678,"column":66,"index":35616},"line":678,"code":"    it('should return CloudFront origin id from domain as a object', () => {\n      expect(sdk.naming.getCloudFrontOriginId({\n        CustomOriginConfig: {},\n        DomainName: {\n          'Fn::Join': ['', ['Ref: ApiGatewayRestApi', '.execute-api.']]\n        }\n      })).to.equal('custom/FnJoinRefApiGatewayRestApiexecuteapi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should correctly trim trailing dash and ensure no consecutive dashes are present","suites":["#naming()","#getEcrRepositoryName"],"updatePoint":{"line":688,"column":88,"index":36024},"line":688,"code":"    it('should correctly trim trailing dash and ensure no consecutive dashes are present', () => {\n      serverless.service.serviceObject = {\n        name: 'service--with-weird-dashes---'\n      };\n      sdk.options.stage = 'stage--with-dash-';\n      expect(sdk.naming.getEcrRepositoryName()).to.equal('serverless-service-with-weird-dashes-stage-with-dash');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the event bus name and append correct suffix","suites":["#naming()","#getEventBridgeEventBusLogicalId()"],"updatePoint":{"line":697,"column":69,"index":36434},"line":697,"code":"    it('should normalize the event bus name and append correct suffix', () => {\n      expect(sdk.naming.getEventBridgeEventBusLogicalId('ExampleEventBusName')).to.equal('ExampleEventBusNameEventBridgeEventBus');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the rule name and append correct suffix","suites":["#naming()","#getEventBridgeRuleLogicalId()"],"updatePoint":{"line":702,"column":64,"index":36708},"line":702,"code":"    it('should normalize the rule name and append correct suffix', () => {\n      expect(sdk.naming.getEventBridgeRuleLogicalId('exampleRuleName')).to.equal('ExampleRuleNameEventBridgeRule');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the name and append correct suffix with index","suites":["#naming()","#getEventBridgeLambdaPermissionLogicalId()"],"updatePoint":{"line":707,"column":70,"index":36984},"line":707,"code":"    it('should normalize the name and append correct suffix with index', () => {\n      expect(sdk.naming.getEventBridgeLambdaPermissionLogicalId('exampleFunction', 1)).to.equal('ExampleFunctionEventBridgeLambdaPermission1');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the name and append correct suffix","suites":["#naming()","#getLambdaAuthorizerHttpApiPermissionLogicalId()"],"updatePoint":{"line":712,"column":59,"index":37283},"line":712,"code":"    it('should normalize the name and append correct suffix', () => {\n      expect(sdk.naming.getLambdaAuthorizerHttpApiPermissionLogicalId('authorizerName')).to.equal('AuthorizerNameLambdaAuthorizerPermissionHttpApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should normalize the name and append correct suffix","suites":["#naming()","#getLambdaFnUrlPermissionLogicalId()"],"updatePoint":{"line":717,"column":59,"index":37576},"line":717,"code":"    it('should normalize the name and append correct suffix', () => {\n      expect(sdk.naming.getLambdaFnUrlPermissionLogicalId('fnName')).to.equal('FnNameLambdaPermissionFnUrl');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of service & stage name if custom name not provided and shouldStartNameWithService is true","suites":["#naming()","#getHttpApiName()"],"updatePoint":{"line":722,"column":128,"index":37879},"line":722,"code":"    it('should return the composition of service & stage name if custom name not provided and shouldStartNameWithService is true', () => {\n      serverless.service.service = 'myService';\n      serverless.service.provider.httpApi = {\n        shouldStartNameWithService: true\n      };\n      expect(sdk.naming.getHttpApiName()).to.equal(`${serverless.service.service}-${sdk.naming.provider.getStage()}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the composition of stage & service name if custom name not provided","suites":["#naming()","#getHttpApiName()"],"updatePoint":{"line":729,"column":89,"index":38250},"line":729,"code":"    it('should return the composition of stage & service name if custom name not provided', () => {\n      serverless.service.service = 'myService';\n      expect(sdk.naming.getHttpApiName()).to.equal(`${sdk.naming.provider.getStage()}-${serverless.service.service}`);\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should return the custom api name if provided","suites":["#naming()","#getHttpApiName()"],"updatePoint":{"line":733,"column":53,"index":38489},"line":733,"code":"    it('should return the custom api name if provided', () => {\n      serverless.service.provider.httpApi = {\n        name: 'app-dev-testApi'\n      };\n      serverless.service.service = 'myService';\n      serverless.service.provider.stage = sdk.naming.provider.getStage();\n      expect(sdk.naming.getHttpApiName()).to.equal('app-dev-testApi');\n    });","file":"unit/lib/plugins/aws/lib/naming.test.js","skipped":false,"dir":"test"},{"name":"should reset the S3 code keys for Lambda functions","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":7,"column":58,"index":294},"line":7,"code":"    it('should reset the S3 code keys for Lambda functions', () => {\n      const input = {\n        Resources: {\n          MyLambdaFunction: {\n            Type: 'AWS::Lambda::Function',\n            Properties: {\n              Code: {\n                S3Key: 'some-s3-key-for-the-code'\n              }\n            }\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          MyLambdaFunction: {\n            Type: 'AWS::Lambda::Function',\n            Properties: {\n              Code: {\n                S3Key: ''\n              }\n            }\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should reset the S3 content keys for Lambda layer versions","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":34,"column":66,"index":997},"line":34,"code":"    it('should reset the S3 content keys for Lambda layer versions', () => {\n      const input = {\n        Resources: {\n          MyLambdaLayer: {\n            Type: 'AWS::Lambda::LayerVersion',\n            Properties: {\n              Content: {\n                S3Key: 'some-s3-key-for-the-layer'\n              }\n            }\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          MyLambdaLayer: {\n            Type: 'AWS::Lambda::LayerVersion',\n            Properties: {\n              Content: {\n                S3Key: ''\n              }\n            }\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should remove the API Gateway Deployment random id","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":61,"column":58,"index":1701},"line":61,"code":"    it('should remove the API Gateway Deployment random id', () => {\n      const input = {\n        Resources: {\n          ApiGatewayDeploymentR4ND0M: {\n            Type: 'AWS::ApiGateway::Deployment',\n            Properties: {\n              RestApiId: 'rest-api-id',\n              StageName: 'dev'\n            }\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          ApiGatewayDeployment: {\n            Type: 'AWS::ApiGateway::Deployment',\n            Properties: {\n              RestApiId: 'rest-api-id',\n              StageName: 'dev'\n            }\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should remove the Websocket deployment random id","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":86,"column":56,"index":2410},"line":86,"code":"    it('should remove the Websocket deployment random id', () => {\n      const input = {\n        Resources: {\n          WebsocketsDeploymentR4ND0M: {\n            Type: 'AWS::ApiGatewayV2::Deployment',\n            Properties: {\n              ApiId: {\n                Ref: 'WebsocketsApi'\n              }\n            }\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          WebsocketsDeployment: {\n            Type: 'AWS::ApiGatewayV2::Deployment',\n            Properties: {\n              ApiId: {\n                Ref: 'WebsocketsApi'\n              }\n            }\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should remove the random id from Websocket deployment stage","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":113,"column":67,"index":3144},"line":113,"code":"    it('should remove the random id from Websocket deployment stage', () => {\n      const input = {\n        Resources: {\n          WebsocketsDeploymentStage: {\n            Type: 'AWS::ApiGatewayV2::Stage',\n            Properties: {\n              ApiId: {\n                Ref: 'WebsocketsApi'\n              },\n              DeploymentId: {\n                Ref: 'WebsocketsDeploymentR4ND0M'\n              },\n              StageName: 'dev'\n            }\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          WebsocketsDeploymentStage: {\n            Type: 'AWS::ApiGatewayV2::Stage',\n            Properties: {\n              ApiId: {\n                Ref: 'WebsocketsApi'\n              },\n              DeploymentId: {\n                Ref: 'WebsocketsDeployment'\n              },\n              StageName: 'dev'\n            }\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should keep other resources untouched","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":148,"column":45,"index":4102},"line":148,"code":"    it('should keep other resources untouched', () => {\n      const input = {\n        Resources: {\n          MyOtherResource: {\n            Type: 'AWS::XXX::XXX'\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          MyOtherResource: {\n            Type: 'AWS::XXX::XXX'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should sort resources and outputs alphabetically","suites":["normalizeFiles","#normalizeCloudFormationTemplate()"],"updatePoint":{"line":165,"column":56,"index":4543},"line":165,"code":"    it('should sort resources and outputs alphabetically', () => {\n      const input = {\n        Resources: {\n          ResourceThatShouldBeLast: {\n            Type: 'AWS::XXX::XXX'\n          },\n          ResourceThatShouldBeFirst: {\n            Type: 'AWS::XXX::XXX'\n          }\n        },\n        Outputs: {\n          OutputThatShouldBeLast: {\n            Value: 'SomeValue'\n          },\n          OutputThatShouldBeFirst: {\n            Value: 'AnotherValue'\n          }\n        }\n      };\n      const result = normalizeFiles.normalizeCloudFormationTemplate(input);\n      expect(result).to.deep.equal({\n        Resources: {\n          ResourceThatShouldBeFirst: {\n            Type: 'AWS::XXX::XXX'\n          },\n          ResourceThatShouldBeLast: {\n            Type: 'AWS::XXX::XXX'\n          }\n        },\n        Outputs: {\n          OutputThatShouldBeLast: {\n            Value: 'SomeValue'\n          },\n          OutputThatShouldBeFirst: {\n            Value: 'AnotherValue'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/lib/normalize-files.test.js","skipped":false,"dir":"test"},{"name":"should store the name of the Serverless deployment bucket","suites":["#setBucketName()"],"updatePoint":{"line":26,"column":63,"index":962},"line":26,"code":"  it('should store the name of the Serverless deployment bucket', async () => awsDeploy.setBucketName().then(() => {\n    expect(awsDeploy.bucketName).to.equal('bucket-name');\n    expect(getServerlessDeploymentBucketNameStub.calledOnce).to.be.equal(true);\n    expect(getServerlessDeploymentBucketNameStub.calledWithExactly()).to.be.equal(true);\n    awsDeploy.provider.getServerlessDeploymentBucketName.restore();\n  }));","file":"unit/lib/plugins/aws/lib/set-bucket-name.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the bucketName is already set","suites":["#setBucketName()"],"updatePoint":{"line":32,"column":53,"index":1371},"line":32,"code":"  it('should resolve if the bucketName is already set', async () => {\n    const bucketName = 'someBucket';\n    awsDeploy.bucketName = bucketName;\n    return awsDeploy.setBucketName().then(() => expect(getServerlessDeploymentBucketNameStub.calledOnce).to.be.false).then(() => expect(awsDeploy.bucketName).to.equal(bucketName));\n  });","file":"unit/lib/plugins/aws/lib/set-bucket-name.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsLogs","#constructor()"],"updatePoint":{"line":40,"column":25,"index":1092},"line":40,"code":"    it('should have hooks', () => expect(awsLogs.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should set an empty options object if no options are given","suites":["AwsLogs","#constructor()"],"updatePoint":{"line":41,"column":66,"index":1207},"line":41,"code":"    it('should set an empty options object if no options are given', () => {\n      const awsLogsWithEmptyOptions = new AwsLogs(serverless);\n      expect(awsLogsWithEmptyOptions.options).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsLogs","#constructor()"],"updatePoint":{"line":45,"column":70,"index":1424},"line":45,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsLogs.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["AwsLogs","#constructor()"],"updatePoint":{"line":46,"column":41,"index":1531},"line":46,"code":"    it('should run promise chain in order', async () => {\n      const validateStub = sinon.stub(awsLogs, 'extendedValidate').resolves();\n      const getLogStreamsStub = sinon.stub(awsLogs, 'getLogStreams').resolves();\n      const showLogsStub = sinon.stub(awsLogs, 'showLogs').resolves();\n      await awsLogs.hooks['logs:logs']();\n      expect(validateStub.calledOnce).to.be.equal(true);\n      expect(getLogStreamsStub.calledAfter(validateStub)).to.be.equal(true);\n      expect(showLogsStub.calledAfter(getLogStreamsStub)).to.be.equal(true);\n      awsLogs.extendedValidate.restore();\n      awsLogs.getLogStreams.restore();\n      awsLogs.showLogs.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"it should throw error if function is not provided","suites":["AwsLogs","#extendedValidate()"],"updatePoint":{"line":82,"column":57,"index":2710},"line":82,"code":"    it('it should throw error if function is not provided', () => {\n      serverless.service.functions = null;\n      expect(() => awsLogs.extendedValidate()).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"it should set default options","suites":["AwsLogs","#extendedValidate()"],"updatePoint":{"line":86,"column":37,"index":2873},"line":86,"code":"    it('it should set default options', () => {\n      awsLogs.extendedValidate();\n      expect(awsLogs.options.stage).to.deep.equal('dev');\n      expect(awsLogs.options.region).to.deep.equal('us-east-1');\n      expect(awsLogs.options.function).to.deep.equal('first');\n      expect(awsLogs.options.interval).to.be.equal(1000);\n      expect(awsLogs.options.logGroupName).to.deep.equal(awsLogs.provider.naming.getLogGroupName('customName'));\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should get log streams with correct params","suites":["AwsLogs","#getLogStreams()"],"updatePoint":{"line":105,"column":50,"index":3667},"line":105,"code":"    it('should get log streams with correct params', async () => {\n      const replyMock = {\n        logStreams: [{\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          creationTime: 1469687512311\n        }, {\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          creationTime: 1469687512311\n        }]\n      };\n      const getLogStreamsStub = sinon.stub(awsLogs.provider, 'request').resolves(replyMock);\n      const logStreamNames = await awsLogs.getLogStreams();\n      expect(getLogStreamsStub.calledOnce).to.be.equal(true);\n      expect(getLogStreamsStub.calledWithExactly('CloudWatchLogs', 'describeLogStreams', {\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        descending: true,\n        limit: 50,\n        orderBy: 'LastEventTime'\n      })).to.be.equal(true);\n      expect(logStreamNames[0]).to.be.equal('2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba');\n      expect(logStreamNames[1]).to.be.equal('2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba');\n      awsLogs.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should throw error if no log streams found","suites":["AwsLogs","#getLogStreams()"],"updatePoint":{"line":128,"column":50,"index":4807},"line":128,"code":"    it('should throw error if no log streams found', async () => {\n      sinon.stub(awsLogs.provider, 'request').resolves();\n      await expect(awsLogs.getLogStreams()).to.eventually.be.rejected.and.have.property('name', 'ServerlessError');\n      awsLogs.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should call filterLogEvents API with correct params","suites":["AwsLogs","#showLogs()"],"updatePoint":{"line":145,"column":59,"index":5469},"line":145,"code":"    it('should call filterLogEvents API with correct params', async () => {\n      const replyMock = {\n        events: [{\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }, {\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }]\n      };\n      const logStreamNamesMock = ['2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba', '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba'];\n      const filterLogEventsStub = sinon.stub(awsLogs.provider, 'request').resolves(replyMock);\n      awsLogs.serverless.service.service = 'new-service';\n      awsLogs.options = {\n        stage: 'dev',\n        region: 'us-east-1',\n        function: 'first',\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        startTime: '3h',\n        filter: 'error'\n      };\n      await awsLogs.showLogs(logStreamNamesMock);\n      expect(filterLogEventsStub.calledOnce).to.be.equal(true);\n      expect(filterLogEventsStub.calledWithExactly('CloudWatchLogs', 'filterLogEvents', {\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        interleaved: true,\n        logStreamNames: logStreamNamesMock,\n        filterPattern: 'error',\n        startTime: fakeTime - 3 * 60 * 60 * 1000 // -3h\n      })).to.be.equal(true);\n      awsLogs.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should call filterLogEvents API with standard start time","suites":["AwsLogs","#showLogs()"],"updatePoint":{"line":179,"column":64,"index":6994},"line":179,"code":"    it('should call filterLogEvents API with standard start time', async () => {\n      const replyMock = {\n        events: [{\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }, {\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }]\n      };\n      const logStreamNamesMock = ['2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba', '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba'];\n      const filterLogEventsStub = sinon.stub(awsLogs.provider, 'request').resolves(replyMock);\n      awsLogs.serverless.service.service = 'new-service';\n      awsLogs.options = {\n        stage: 'dev',\n        region: 'us-east-1',\n        function: 'first',\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        startTime: '2010-10-20',\n        filter: 'error'\n      };\n      await awsLogs.showLogs(logStreamNamesMock);\n      expect(filterLogEventsStub.calledOnce).to.be.equal(true);\n      expect(filterLogEventsStub.calledWithExactly('CloudWatchLogs', 'filterLogEvents', {\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        interleaved: true,\n        logStreamNames: logStreamNamesMock,\n        startTime: 1287532800000,\n        // '2010-10-20'\n        filterPattern: 'error'\n      })).to.be.equal(true);\n      awsLogs.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should call filterLogEvents API with latest 10 minutes if startTime not given","suites":["AwsLogs","#showLogs()"],"updatePoint":{"line":214,"column":85,"index":8549},"line":214,"code":"    it('should call filterLogEvents API with latest 10 minutes if startTime not given', async () => {\n      const replyMock = {\n        events: [{\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }, {\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }]\n      };\n      const logStreamNamesMock = ['2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba', '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba'];\n      const filterLogEventsStub = sinon.stub(awsLogs.provider, 'request').resolves(replyMock);\n      awsLogs.serverless.service.service = 'new-service';\n      awsLogs.options = {\n        stage: 'dev',\n        region: 'us-east-1',\n        function: 'first',\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first')\n      };\n      await awsLogs.showLogs(logStreamNamesMock);\n      expect(filterLogEventsStub.calledOnce).to.be.equal(true);\n      expect(filterLogEventsStub.calledWithExactly('CloudWatchLogs', 'filterLogEvents', {\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        interleaved: true,\n        logStreamNames: logStreamNamesMock,\n        startTime: fakeTime - 10 * 60 * 1000 // fakeTime - 10 minutes\n      })).to.be.equal(true);\n      awsLogs.provider.request.restore();\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should call filterLogEvents API which starts 10 seconds in the past if tail given","suites":["AwsLogs","#showLogs()"],"updatePoint":{"line":245,"column":89,"index":10031},"line":245,"code":"    it('should call filterLogEvents API which starts 10 seconds in the past if tail given', async () => {\n      const replyMock = {\n        events: [{\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }, {\n          logStreamName: '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba',\n          timestamp: 1469687512311,\n          message: 'test'\n        }]\n      };\n      const logStreamNamesMock = ['2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba', '2016/07/28/[$LATEST]83f5206ab2a8488290349b9c1fbfe2ba'];\n      const timersSleep = sinon.stub().rejects();\n      const MockedAwsLogs = proxyquire('../../../../../lib/plugins/aws/logs', {\n        'timers-ext/promise/sleep': timersSleep\n      });\n      const options = {\n        stage: 'dev',\n        region: 'us-east-1',\n        function: 'first'\n      };\n      serverless = new Serverless({\n        commands: [],\n        options: {}\n      });\n      const provider = new AwsProvider(serverless, options);\n      provider.cachedCredentials = {\n        credentials: {\n          accessKeyId: 'foo',\n          secretAccessKey: 'bar'\n        }\n      };\n      serverless.setProvider('aws', provider);\n      serverless.processedInput = {\n        commands: ['logs']\n      };\n      const mockedAwsLogs = new MockedAwsLogs(serverless, options);\n      const filterLogEventsStub = sinon.stub(mockedAwsLogs.provider, 'request').resolves(replyMock);\n      mockedAwsLogs.serverless.service.service = 'new-service';\n      mockedAwsLogs.options = {\n        stage: 'dev',\n        region: 'us-east-1',\n        function: 'first',\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        tail: true\n      };\n      try {\n        await mockedAwsLogs.showLogs(logStreamNamesMock);\n      } catch {\n        // timersSleep has to reject or it'll loop forever\n      }\n      expect(filterLogEventsStub.calledOnce).to.be.equal(true);\n      expect(filterLogEventsStub.calledWithExactly('CloudWatchLogs', 'filterLogEvents', {\n        logGroupName: awsLogs.provider.naming.getLogGroupName('new-service-dev-first'),\n        interleaved: true,\n        logStreamNames: logStreamNamesMock,\n        startTime: fakeTime - 10 * 1000 // fakeTime - 10 minutes\n      })).to.be.equal(true);\n    });","file":"unit/lib/plugins/aws/logs.test.js","skipped":false,"dir":"test"},{"name":"should set the serverless instance to this.serverless","suites":["AwsMetrics","#constructor()"],"updatePoint":{"line":29,"column":61,"index":989},"line":29,"code":"    it('should set the serverless instance to this.serverless', () => {\n      expect(awsMetrics.serverless).to.deep.equal(serverless);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the passed in options to this.options","suites":["AwsMetrics","#constructor()"],"updatePoint":{"line":32,"column":56,"index":1127},"line":32,"code":"    it('should set the passed in options to this.options', () => {\n      expect(awsMetrics.options).to.deep.equal({\n        stage: 'dev',\n        region: 'us-east-1'\n      });\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to the AwsProvider instance","suites":["AwsMetrics","#constructor()"],"updatePoint":{"line":38,"column":68,"index":1323},"line":38,"code":"    it('should set the provider variable to the AwsProvider instance', () => expect(awsMetrics.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should have a \"metrics:metrics\" hook","suites":["AwsMetrics","#constructor()"],"updatePoint":{"line":39,"column":44,"index":1436},"line":39,"code":"    it('should have a \"metrics:metrics\" hook', () => {\n      // eslint-disable-next-line no-unused-expressions\n      expect(awsMetrics.hooks['metrics:metrics']).to.not.be.undefined;\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"metrics:metrics\" hook","suites":["AwsMetrics","#constructor()"],"updatePoint":{"line":43,"column":68,"index":1650},"line":43,"code":"    it('should run promise chain in order for \"metrics:metrics\" hook', async () => {\n      const extendedValidateStub = sinon.stub(awsMetrics, 'extendedValidate').resolves();\n      const getMetricsStub = sinon.stub(awsMetrics, 'getMetrics').resolves();\n      const showMetricsStub = sinon.stub(awsMetrics, 'showMetrics').resolves();\n      await awsMetrics.hooks['metrics:metrics']();\n      expect(extendedValidateStub.calledOnce).to.equal(true);\n      expect(getMetricsStub.calledAfter(extendedValidateStub)).to.equal(true);\n      expect(showMetricsStub.calledAfter(getMetricsStub)).to.equal(true);\n      awsMetrics.extendedValidate.restore();\n      awsMetrics.getMetrics.restore();\n      awsMetrics.showMetrics.restore();\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should call the shared validate() function","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":69,"column":50,"index":2789},"line":69,"code":"    it('should call the shared validate() function', () => {\n      awsMetrics.extendedValidate();\n      expect(validateStub.calledOnce).to.equal(true);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the startTime to yesterday as the default value if not provided","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":73,"column":82,"index":2981},"line":73,"code":"    it('should set the startTime to yesterday as the default value if not provided', () => {\n      awsMetrics.options.startTime = null;\n      let yesterday = new Date();\n      yesterday = yesterday.setDate(yesterday.getDate() - 1);\n      yesterday = new Date(yesterday);\n      const yesterdaysYear = yesterday.getFullYear();\n      const yesterdaysMonth = yesterday.getMonth() + 1;\n      const yesterdaysDay = yesterday.getDate();\n      const yesterdaysDate = `${yesterdaysYear}-${yesterdaysMonth}-${yesterdaysDay}`;\n      awsMetrics.extendedValidate();\n      const defaultsStartTime = dayjs(awsMetrics.options.startTime);\n      const defaultsDate = defaultsStartTime.format('YYYY-M-D');\n      expect(defaultsDate).to.equal(yesterdaysDate);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the startTime to the provided value","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":87,"column":54,"index":3701},"line":87,"code":"    it('should set the startTime to the provided value', () => {\n      awsMetrics.options.startTime = '1970-01-01';\n      awsMetrics.extendedValidate();\n      const startTime = awsMetrics.options.startTime.toISOString();\n      const expectedStartTime = new Date('1970-01-01').toISOString();\n      expect(startTime).to.equal(expectedStartTime);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should translate human friendly syntax (e.g. 24h) for startTime","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":94,"column":71,"index":4070},"line":94,"code":"    it('should translate human friendly syntax (e.g. 24h) for startTime', () => {\n      awsMetrics.options.startTime = '24h'; // 24 hours ago\n\n      let yesterday = new Date();\n      yesterday = yesterday.setDate(yesterday.getDate() - 1);\n      yesterday = new Date(yesterday);\n      const yesterdaysYear = yesterday.getFullYear();\n      const yesterdaysMonth = yesterday.getMonth() + 1;\n      const yesterdaysDay = yesterday.getDate();\n      const yesterdaysDate = `${yesterdaysYear}-${yesterdaysMonth}-${yesterdaysDay}`;\n      awsMetrics.extendedValidate();\n      const translatedStartTime = dayjs(awsMetrics.options.startTime);\n      const translatedDate = translatedStartTime.format('YYYY-M-D');\n      expect(translatedDate).to.equal(yesterdaysDate);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the endTime to today as the default value if not provided","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":109,"column":76,"index":4838},"line":109,"code":"    it('should set the endTime to today as the default value if not provided', () => {\n      awsMetrics.options.endTime = null;\n      const today = new Date();\n      const todaysYear = today.getFullYear();\n      const todaysMonth = today.getMonth() + 1;\n      const todaysDay = today.getDate();\n      const todaysDate = `${todaysYear}-${todaysMonth}-${todaysDay}`;\n      awsMetrics.extendedValidate();\n      const defaultsStartTime = dayjs(awsMetrics.options.endTime);\n      const defaultsDate = defaultsStartTime.format('YYYY-M-D');\n      expect(defaultsDate).to.equal(todaysDate);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should set the endTime to the provided value","suites":["AwsMetrics","#extendedValidate()"],"updatePoint":{"line":121,"column":52,"index":5405},"line":121,"code":"    it('should set the endTime to the provided value', () => {\n      awsMetrics.options.endTime = '1970-01-01';\n      awsMetrics.extendedValidate();\n      const endTime = awsMetrics.options.endTime.toISOString();\n      const expectedEndTime = new Date('1970-01-01').toISOString();\n      expect(endTime).to.equal(expectedEndTime);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should gather service wide function metrics if no function option is specified","suites":["AwsMetrics","#getMetrics()"],"updatePoint":{"line":147,"column":86,"index":6300},"line":147,"code":"    it('should gather service wide function metrics if no function option is specified', async () => {\n      // stubs for function1\n      // invocations\n      requestStub.onCall(0).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func1'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      });\n      // throttles\n      requestStub.onCall(1).resolves({\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func1'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      });\n      // errors\n      requestStub.onCall(2).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func1'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      });\n      // duration\n      requestStub.onCall(3).resolves({\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func1'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      });\n      // stubs for function2\n      // invocations\n      requestStub.onCall(4).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func2'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      });\n      // throttles\n      requestStub.onCall(5).resolves({\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func2'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      });\n      // errors\n      requestStub.onCall(6).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func2'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      });\n      // duration\n      requestStub.onCall(7).resolves({\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func2'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      });\n      const expectedResult = [[{\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func1'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func1'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func1'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func1'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      }], [{\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func2'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func2'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func2'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func2'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      }]];\n      const result = await awsMetrics.getMetrics();\n      expect(result).to.deep.equal(expectedResult);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should gather function metrics if function option is specified","suites":["AwsMetrics","#getMetrics()"],"updatePoint":{"line":266,"column":70,"index":9708},"line":266,"code":"    it('should gather function metrics if function option is specified', async () => {\n      // only display metrics for function1\n      awsMetrics.options.function = 'function1';\n\n      // stubs for function1\n      // invocations\n      requestStub.onCall(0).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func1'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      });\n      // throttles\n      requestStub.onCall(1).resolves({\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func1'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      });\n      // errors\n      requestStub.onCall(2).resolves({\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func1'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      });\n      // duration\n      requestStub.onCall(3).resolves({\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func1'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      });\n      const expectedResult = [[{\n        ResponseMetadata: {\n          RequestId: '1f50045b-b569-11e6-86c6-eb54d1aaa755-func1'\n        },\n        Label: 'Invocations',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f59059b-b569-11e6-aa18-c7bab68810d2-func1'\n        },\n        Label: 'Throttles',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f50c7b1-b569-11e6-b1b6-ab86694b617b-func1'\n        },\n        Label: 'Errors',\n        Datapoints: []\n      }, {\n        ResponseMetadata: {\n          RequestId: '1f63db14-b569-11e6-8501-d98a275ce164-func1'\n        },\n        Label: 'Duration',\n        Datapoints: []\n      }]];\n      const result = await awsMetrics.getMetrics();\n      expect(result).to.deep.equal(expectedResult);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should gather metrics with 1 hour period for time span < 24 hours","suites":["AwsMetrics","#getMetrics()"],"updatePoint":{"line":331,"column":73,"index":11624},"line":331,"code":"    it('should gather metrics with 1 hour period for time span < 24 hours', async () => {\n      awsMetrics.options.startTime = new Date('1970-01-01T09:00');\n      awsMetrics.options.endTime = new Date('1970-01-01T16:00');\n      await awsMetrics.getMetrics();\n      expect(requestStub.calledWith(sinon.match.string, sinon.match.string, sinon.match.has('Period', 3600))).to.equal(true);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should gather metrics with 1 day period for time span > 24 hours","suites":["AwsMetrics","#getMetrics()"],"updatePoint":{"line":337,"column":72,"index":12016},"line":337,"code":"    it('should gather metrics with 1 day period for time span > 24 hours', async () => {\n      awsMetrics.options.startTime = new Date('1970-01-01');\n      awsMetrics.options.endTime = new Date('1970-01-03');\n      await awsMetrics.getMetrics();\n      expect(requestStub.calledWith(sinon.match.string, sinon.match.string, sinon.match.has('Period', 24 * 3600))).to.equal(true);\n    });","file":"unit/lib/plugins/aws/metrics.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties with minimal configuration","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":67,"column":98,"index":2082},"line":67,"code":"    it('should correctly compile EventSourceMapping resource properties with minimal configuration', () => {\n      expect(minimalEventSourceMappingResource.Properties).to.deep.equal({\n        EventSourceArn: brokerArn,\n        SourceAccessConfigurations: [{\n          Type: 'BASIC_AUTH',\n          URI: basicAuthArn\n        }],\n        Queues: [queue],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('basic'), 'Arn']\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with DescribeBroker statement","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":80,"column":68,"index":2525},"line":80,"code":"    it('should update default IAM role with DescribeBroker statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['mq:DescribeBroker'],\n        Resource: [brokerArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with SecretsManager statement","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":87,"column":68,"index":2811},"line":87,"code":"    it('should update default IAM role with SecretsManager statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [basicAuthArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource DependsOn ","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":94,"column":71,"index":3115},"line":94,"code":"    it('should correctly compile EventSourceMapping resource DependsOn ', () => {\n      expect(minimalEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n      expect(allParamsEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource with all parameters","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":98,"column":80,"index":3408},"line":98,"code":"    it('should correctly compile EventSourceMapping resource with all parameters', () => {\n      expect(allParamsEventSourceMappingResource.Properties).to.deep.equal({\n        EventSourceArn: brokerArn,\n        BatchSize: batchSize,\n        MaximumBatchingWindowInSeconds: maximumBatchingWindow,\n        Enabled: enabled,\n        SourceAccessConfigurations: [{\n          Type: 'BASIC_AUTH',\n          URI: basicAuthArn\n        }],\n        Queues: [queue],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('other'), 'Arn']\n        },\n        FilterCriteria: {\n          Filters: [{\n            Pattern: JSON.stringify({\n              value: {\n                a: [1, 2]\n              }\n            })\n          }, {\n            Pattern: JSON.stringify({\n              value: [3]\n            })\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with EC2 statement","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when there are activemq events defined"],"updatePoint":{"line":127,"column":57,"index":4244},"line":127,"code":"    it('should update default IAM role with EC2 statement', async () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should not add dependsOn for imported role","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","configuring activemq events"],"updatePoint":{"line":136,"column":50,"index":4711},"line":136,"code":"    it('should not add dependsOn for imported role', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              role: {\n                'Fn::ImportValue': 'MyImportedRole'\n              },\n              events: [{\n                activemq: {\n                  queue,\n                  arn: brokerArn,\n                  basicAuthArn\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const eventSourceMappingResource = cfTemplate.Resources[awsNaming.getActiveMQEventLogicalId('basic', queue)];\n      expect(eventSourceMappingResource.DependsOn).to.deep.equal([]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should not modify the default IAM role","suites":["test/unit/lib/plugins/aws/package/compile/events/activemq.test.js","when no activemq events are defined"],"updatePoint":{"line":165,"column":46,"index":5553},"line":165,"code":"    it('should not modify the default IAM role', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      const defaultIamRole = cfTemplate.Resources.IamRoleLambdaExecution;\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['mq:DescribeBroker'],\n        Resource: [brokerArn]\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [basicAuthArn]\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/activemq.test.js","skipped":false,"dir":"test"},{"name":"should \"deny\" by default","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","should support `onUnauthenticatedRequest`"],"updatePoint":{"line":149,"column":32,"index":4278},"line":149,"code":"    it('should \"deny\" by default', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnAuthorizerOnUnauthenticatedRequestDeny', 1);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Type).to.equal('AWS::ElasticLoadBalancingV2::ListenerRule');\n      expect(rule.Properties.Actions).to.have.length(2);\n      expect(rule.Properties.Actions[0].Type).to.equal('authenticate-cognito');\n      expect(rule.Properties.Actions[0].Order).to.equal(1);\n      expect(rule.Properties.Actions[0].AuthenticateCognitoConfig).to.deep.equal(baseAuthenticateCognitoConfig());\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"supports support `allow`","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","should support `onUnauthenticatedRequest`"],"updatePoint":{"line":158,"column":32,"index":4900},"line":158,"code":"    it('supports support `allow`', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnAuthorizerOnUnauthenticatedRequestAllow', 2);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Properties.Actions[0].AuthenticateCognitoConfig).to.deep.equal(baseAuthenticateCognitoConfig({\n        OnUnauthenticatedRequest: 'allow'\n      }));\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should support `authenticate`","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","should support `onUnauthenticatedRequest`"],"updatePoint":{"line":165,"column":37,"index":5303},"line":165,"code":"    it('should support `authenticate`', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnAuthorizerOnUnauthenticatedRequestAuthenticate', 3);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Properties.Actions[0].AuthenticateCognitoConfig).to.deep.equal(baseAuthenticateCognitoConfig({\n        OnUnauthenticatedRequest: 'authenticate'\n      }));\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should support rule without path","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","alb rule conditions"],"updatePoint":{"line":174,"column":40,"index":5771},"line":174,"code":"    it('should support rule without path', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnConditionsHostOnly', 4);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Type).to.equal('AWS::ElasticLoadBalancingV2::ListenerRule');\n      expect(rule.Properties.Conditions).to.have.length(1);\n      expect(rule.Properties.Conditions[0].Field).to.equal('host-header');\n      expect(rule.Properties.Conditions[0].HostHeaderConfig.Values).to.have.length(1);\n      expect(rule.Properties.Conditions[0].HostHeaderConfig.Values[0]).to.equal('example.com');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should should support rule with path","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","alb rule conditions"],"updatePoint":{"line":183,"column":44,"index":6391},"line":183,"code":"    it('should should support rule with path', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnConditionsPathOnly', 5);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Type).to.equal('AWS::ElasticLoadBalancingV2::ListenerRule');\n      expect(rule.Properties.Conditions).to.have.length(1);\n      expect(rule.Properties.Conditions[0].Field).to.equal('path-pattern');\n      expect(rule.Properties.Conditions[0].Values).to.have.length(1);\n      expect(rule.Properties.Conditions[0].Values[0]).to.equal('/');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should support multiple host rules","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","alb rule conditions"],"updatePoint":{"line":192,"column":42,"index":6966},"line":192,"code":"    it('should support multiple host rules', () => {\n      const albListenerRuleLogicalId = naming.getAlbListenerRuleLogicalId('fnConditionsMultipleHostsOnly', 6);\n      const rule = cfResources[albListenerRuleLogicalId];\n      expect(rule.Type).to.equal('AWS::ElasticLoadBalancingV2::ListenerRule');\n      expect(rule.Properties.Conditions).to.have.length(1);\n      expect(rule.Properties.Conditions[0].Field).to.equal('host-header');\n      expect(rule.Properties.Conditions[0].HostHeaderConfig.Values).to.have.length(2);\n      expect(rule.Properties.Conditions[0].HostHeaderConfig.Values[0]).to.equal('example1.com');\n      expect(rule.Properties.Conditions[0].HostHeaderConfig.Values[1]).to.equal('example2.com');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should fail validation if no conditions are set","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","alb rule conditions"],"updatePoint":{"line":202,"column":55,"index":7704},"line":202,"code":"    it('should fail validation if no conditions are set', async () => {\n      const runServerlessAction = () => runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            fnConditionsHostOnly: {\n              handler: 'index.handler',\n              events: [{\n                alb: {\n                  ...baseEventConfig,\n                  priority: 1,\n                  conditions: {}\n                }\n              }]\n            }\n          }\n        }\n      });\n      await expect(runServerlessAction()).to.eventually.be.rejectedWith(ServerlessError).and.have.property('code', 'ALB_NO_CONDITIONS');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should use it if defined","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","should support `functions[].events[].alb.targetGroupName` property"],"updatePoint":{"line":225,"column":32,"index":8457},"line":225,"code":"    it('should use it if defined', async () => {\n      const albListenerRuleLogicalId = naming.getAlbTargetGroupLogicalId('fnAlbTargetGroupName', albId, false);\n      expect(cfResources[albListenerRuleLogicalId].Properties.Name).to.equal('custom-targetgroup-name');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should reject if `provider.alb.targetGroupPrefix` is also specified","suites":["test/unit/lib/plugins/aws/package/compile/events/alb/index.test.js","should support `functions[].events[].alb.targetGroupName` property"],"updatePoint":{"line":229,"column":75,"index":8774},"line":229,"code":"    it('should reject if `provider.alb.targetGroupPrefix` is also specified', async () => {\n      const runServerlessAction = () => runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            alb: {\n              targetGroupPrefix: 'a-prefix'\n            }\n          },\n          functions: {\n            fnTargetGroupName: {\n              handler: 'index.handler',\n              events: [{\n                alb: {\n                  ...validBaseEventConfig,\n                  priority: 1,\n                  targetGroupName: 'custom-targetgroup-name'\n                }\n              }]\n            }\n          }\n        }\n      });\n      await expect(runServerlessAction()).to.eventually.be.rejectedWith(ServerlessError).and.have.property('code', 'ALB_TARGET_GROUP_NAME_EXCLUSIVE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/index.test.js","skipped":false,"dir":"test"},{"name":"should be forcibly reverted to its default state (disabled) if healthCheck is not set","suites":["ALB TargetGroup Health Checks"],"updatePoint":{"line":115,"column":91,"index":3027},"line":115,"code":"  it('should be forcibly reverted to its default state (disabled) if healthCheck is not set', () => {\n    const albTargetGroupName = naming.getAlbTargetGroupLogicalId('default', '50dc6c495c0c9188');\n    const targetGroup = cfResources[albTargetGroupName];\n    expect(targetGroup.Type).to.equal('AWS::ElasticLoadBalancingV2::TargetGroup');\n    const properties = targetGroup.Properties;\n    expect(properties.HealthCheckEnabled).to.equal(healthCheckDefaults.HealthCheckEnabled);\n    expect(properties.HealthCheckPath).to.be.undefined;\n    expect(properties.HealthCheckIntervalSeconds).to.be.undefined;\n    expect(properties.HealthCheckTimeoutSeconds).to.be.undefined;\n    expect(properties.HealthyThresholdCount).to.be.undefined;\n    expect(properties.UnhealthyThresholdCount).to.be.undefined;\n    expect(properties.Matcher).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/health-check.test.js","skipped":false,"dir":"test"},{"name":"should be disabled when healthCheck is explicitly false","suites":["ALB TargetGroup Health Checks"],"updatePoint":{"line":128,"column":61,"index":3844},"line":128,"code":"  it('should be disabled when healthCheck is explicitly false', () => {\n    const albTargetGroupName = naming.getAlbTargetGroupLogicalId('enabledFalse', '50dc6c495c0c9188');\n    const targetGroup = cfResources[albTargetGroupName];\n    expect(targetGroup.Type).to.equal('AWS::ElasticLoadBalancingV2::TargetGroup');\n    const properties = targetGroup.Properties;\n    expect(properties.HealthCheckEnabled).to.be.false;\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/health-check.test.js","skipped":false,"dir":"test"},{"name":"should be enabled with default settings when healthCheck is explicitly true","suites":["ALB TargetGroup Health Checks"],"updatePoint":{"line":135,"column":81,"index":4286},"line":135,"code":"  it('should be enabled with default settings when healthCheck is explicitly true', () => {\n    const albTargetGroupName = naming.getAlbTargetGroupLogicalId('enabledTrue', '50dc6c495c0c9188');\n    const targetGroup = cfResources[albTargetGroupName];\n    expect(targetGroup.Type).to.equal('AWS::ElasticLoadBalancingV2::TargetGroup');\n    const properties = targetGroup.Properties;\n    expect(properties.HealthCheckEnabled).to.be.true;\n    expect(properties.HealthCheckPath).to.equal(healthCheckDefaults.HealthCheckPath);\n    expect(properties.HealthCheckIntervalSeconds).to.equal(healthCheckDefaults.HealthCheckIntervalSeconds);\n    expect(properties.HealthCheckTimeoutSeconds).to.equal(healthCheckDefaults.HealthCheckTimeoutSeconds);\n    expect(properties.HealthyThresholdCount).to.equal(healthCheckDefaults.HealthyThresholdCount);\n    expect(properties.UnhealthyThresholdCount).to.equal(healthCheckDefaults.UnhealthyThresholdCount);\n    expect(properties.Matcher).to.deep.equal(healthCheckDefaults.Matcher);\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/health-check.test.js","skipped":false,"dir":"test"},{"name":"should be enabled with custom settings when healthCheck value is an object","suites":["ALB TargetGroup Health Checks"],"updatePoint":{"line":148,"column":80,"index":5300},"line":148,"code":"  it('should be enabled with custom settings when healthCheck value is an object', () => {\n    const albTargetGroupName = naming.getAlbTargetGroupLogicalId('enabledAdvanced', '50dc6c495c0c9188');\n    const targetGroup = cfResources[albTargetGroupName];\n    expect(targetGroup.Type).to.equal('AWS::ElasticLoadBalancingV2::TargetGroup');\n    const properties = targetGroup.Properties;\n    expect(properties.HealthCheckEnabled).to.be.true;\n    expect(properties.HealthCheckPath).to.equal('/health');\n    expect(properties.HealthCheckIntervalSeconds).to.equal(70);\n    expect(properties.HealthCheckTimeoutSeconds).to.equal(50);\n    expect(properties.HealthyThresholdCount).to.equal(7);\n    expect(properties.UnhealthyThresholdCount).to.equal(7);\n    expect(properties.Matcher.HttpCode).to.equal('200-299');\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/health-check.test.js","skipped":false,"dir":"test"},{"name":"should use defaults for any undefined advanced settings","suites":["ALB TargetGroup Health Checks"],"updatePoint":{"line":161,"column":61,"index":6090},"line":161,"code":"  it('should use defaults for any undefined advanced settings', () => {\n    const albTargetGroupName = naming.getAlbTargetGroupLogicalId('enabledAdvancedPartial', '50dc6c495c0c9188');\n    const targetGroup = cfResources[albTargetGroupName];\n    expect(targetGroup.Type).to.equal('AWS::ElasticLoadBalancingV2::TargetGroup');\n    const properties = targetGroup.Properties;\n    expect(properties.HealthCheckEnabled).to.be.true;\n    expect(properties.HealthCheckPath).to.equal('/health');\n    expect(properties.HealthCheckIntervalSeconds).to.equal(70);\n    expect(properties.HealthCheckTimeoutSeconds).to.equal(healthCheckDefaults.HealthCheckTimeoutSeconds);\n    expect(properties.HealthyThresholdCount).to.equal(healthCheckDefaults.HealthyThresholdCount);\n    expect(properties.UnhealthyThresholdCount).to.equal(healthCheckDefaults.UnhealthyThresholdCount);\n    expect(properties.Matcher).to.deep.equal(healthCheckDefaults.Matcher);\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/health-check.test.js","skipped":false,"dir":"test"},{"name":"should create ELB listener rule resources","suites":["#compileListenerRules()"],"updatePoint":{"line":21,"column":47,"index":838},"line":21,"code":"  it('should create ELB listener rule resources', () => {\n    awsCompileAlbEvents.validated = {\n      events: [{\n        functionName: 'first',\n        albId: '50dc6c495c0c9188',\n        listenerId: 'f2f7dc8efc522ab2',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 1,\n        conditions: {\n          host: ['example.com'],\n          path: ['/hello']\n        }\n      }, {\n        functionName: 'second',\n        albId: '50dc6c495c0c9188',\n        listenerId: 'f2f7dc8efc522ab2',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 2,\n        conditions: {\n          path: ['/world']\n        }\n      }, {\n        functionName: 'third',\n        albId: '50dc6c495c0c9188',\n        listenerId: 'f2f7dc8efc522ab2',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 3,\n        conditions: {\n          path: ['/auth']\n        },\n        authorizers: ['myFirstAuth', 'mySecondAuth']\n      }],\n      authorizers: {\n        myFirstAuth: {\n          type: 'cognito',\n          userPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341',\n          userPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE',\n          userPoolDomain: 'my-test-user-pool-domain',\n          onUnauthenticatedRequest: 'allow'\n        },\n        mySecondAuth: {\n          type: 'oidc',\n          authorizationEndpoint: 'https://example.com',\n          clientId: 'i-am-client',\n          clientSecret: 'i-am-secret',\n          issuer: 'https://www.iamscam.com',\n          tokenEndpoint: 'http://somewhere.org',\n          userInfoEndpoint: 'https://another-example.com',\n          onUnauthenticatedRequest: 'deny'\n        }\n      }\n    };\n    awsCompileAlbEvents.compileListenerRules();\n    const resources = awsCompileAlbEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.FirstAlbListenerRule1).to.deep.equal({\n      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule',\n      Properties: {\n        Actions: [{\n          TargetGroupArn: {\n            Ref: 'FirstAlbTargetGroup50dc6c495c0c9188'\n          },\n          Type: 'forward'\n        }],\n        Conditions: [{\n          Field: 'path-pattern',\n          Values: ['/hello']\n        }, {\n          Field: 'host-header',\n          HostHeaderConfig: {\n            Values: ['example.com']\n          }\n        }],\n        ListenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        Priority: 1\n      }\n    });\n    expect(resources.SecondAlbListenerRule2).to.deep.equal({\n      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule',\n      Properties: {\n        Actions: [{\n          TargetGroupArn: {\n            Ref: 'SecondAlbTargetGroup50dc6c495c0c9188'\n          },\n          Type: 'forward'\n        }],\n        Conditions: [{\n          Field: 'path-pattern',\n          Values: ['/world']\n        }],\n        ListenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        Priority: 2\n      }\n    });\n    expect(resources.ThirdAlbListenerRule3).to.deep.equal({\n      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule',\n      Properties: {\n        Actions: [{\n          Type: 'authenticate-cognito',\n          Order: 1,\n          AuthenticateCognitoConfig: {\n            UserPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341',\n            UserPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE',\n            UserPoolDomain: 'my-test-user-pool-domain',\n            OnUnauthenticatedRequest: 'allow',\n            AuthenticationRequestExtraParams: undefined,\n            Scope: undefined,\n            SessionCookieName: undefined,\n            SessionTimeout: undefined\n          }\n        }, {\n          Type: 'authenticate-oidc',\n          Order: 2,\n          AuthenticateOidcConfig: {\n            AuthorizationEndpoint: 'https://example.com',\n            ClientId: 'i-am-client',\n            ClientSecret: 'i-am-secret',\n            Issuer: 'https://www.iamscam.com',\n            TokenEndpoint: 'http://somewhere.org',\n            UserInfoEndpoint: 'https://another-example.com',\n            OnUnauthenticatedRequest: 'deny',\n            AuthenticationRequestExtraParams: undefined,\n            Scope: undefined,\n            SessionCookieName: undefined,\n            SessionTimeout: undefined\n          }\n        }, {\n          TargetGroupArn: {\n            Ref: 'ThirdAlbTargetGroup50dc6c495c0c9188'\n          },\n          Order: 3,\n          Type: 'forward'\n        }],\n        Conditions: [{\n          Field: 'path-pattern',\n          Values: ['/auth']\n        }],\n        ListenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        Priority: 3\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/listener-rules.test.js","skipped":false,"dir":"test"},{"name":"should create Lambda permission resources","suites":["#compilePermissions()"],"updatePoint":{"line":23,"column":47,"index":927},"line":23,"code":"  it('should create Lambda permission resources', () => {\n    awsCompileAlbEvents.validated = {\n      events: [{\n        functionName: 'first',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 1,\n        conditions: {\n          host: 'example.com',\n          path: '/hello'\n        },\n        albId: '50dc6c495c0c9188'\n      }, {\n        functionName: 'second',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 2,\n        conditions: {\n          path: '/world'\n        },\n        albId: '50dc6c495c0c9188'\n      }]\n    };\n    awsCompileAlbEvents.compilePermissions();\n    const resources = awsCompileAlbEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.FirstLambdaPermissionAlb).to.deep.equal({\n      Type: 'AWS::Lambda::Permission',\n      Properties: {\n        Action: 'lambda:InvokeFunction',\n        FunctionName: {\n          'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n        },\n        Principal: 'elasticloadbalancing.amazonaws.com',\n        SourceArn: {\n          Ref: 'FirstAlbTargetGroup50dc6c495c0c9188'\n        }\n      }\n    });\n    expect(resources.FirstLambdaPermissionRegisterTarget).to.deep.equal({\n      Type: 'AWS::Lambda::Permission',\n      Properties: {\n        Action: 'lambda:InvokeFunction',\n        FunctionName: {\n          'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n        },\n        Principal: 'elasticloadbalancing.amazonaws.com'\n      }\n    });\n    expect(resources.SecondLambdaPermissionAlb).to.deep.equal({\n      Type: 'AWS::Lambda::Permission',\n      Properties: {\n        Action: 'lambda:InvokeFunction',\n        FunctionName: {\n          'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n        },\n        Principal: 'elasticloadbalancing.amazonaws.com',\n        SourceArn: {\n          Ref: 'SecondAlbTargetGroup50dc6c495c0c9188'\n        }\n      }\n    });\n    expect(resources.SecondLambdaPermissionRegisterTarget).to.deep.equal({\n      Type: 'AWS::Lambda::Permission',\n      Properties: {\n        Action: 'lambda:InvokeFunction',\n        FunctionName: {\n          'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n        },\n        Principal: 'elasticloadbalancing.amazonaws.com'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should create ELB target group resources","suites":["#compileTargetGroups()"],"updatePoint":{"line":23,"column":46,"index":927},"line":23,"code":"  it('should create ELB target group resources', () => {\n    awsCompileAlbEvents.validated = {\n      events: [{\n        functionName: 'first',\n        albId: '50dc6c495c0c9188',\n        multiValueHeaders: true,\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 1,\n        conditions: {\n          host: 'example.com',\n          path: '/hello'\n        }\n      }, {\n        functionName: 'second',\n        albId: '50dc6c495c0c9188',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n        priority: 2,\n        conditions: {\n          path: '/world'\n        }\n      }, {\n        // Same function, same alb, different listener/priority\n        functionName: 'second',\n        albId: '50dc6c495c0c9188',\n        listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/4e83ccee674eb02d',\n        priority: 3,\n        conditions: {\n          path: '/world'\n        }\n      }]\n    };\n    awsCompileAlbEvents.compileTargetGroups();\n    const resources = awsCompileAlbEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.FirstAlbMultiValueTargetGroup50dc6c495c0c9188).to.deep.equal({\n      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup',\n      Properties: {\n        Name: 'cee340765bf4be569254b8969c1d07a0',\n        TargetType: 'lambda',\n        Targets: [{\n          Id: {\n            'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n          }\n        }],\n        TargetGroupAttributes: [{\n          Key: 'lambda.multi_value_headers.enabled',\n          Value: true\n        }],\n        Tags: [{\n          Key: 'Name',\n          Value: 'some-service-first-50dc6c495c0c9188-dev'\n        }],\n        HealthCheckEnabled: false\n      },\n      DependsOn: ['FirstLambdaPermissionRegisterTarget']\n    });\n    expect(resources.SecondAlbTargetGroup50dc6c495c0c9188).to.deep.equal({\n      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup',\n      Properties: {\n        Name: '2107a18b6db85bd904d38cb2bdf5af5c',\n        TargetType: 'lambda',\n        Targets: [{\n          Id: {\n            'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n          }\n        }],\n        TargetGroupAttributes: [{\n          Key: 'lambda.multi_value_headers.enabled',\n          Value: false\n        }],\n        Tags: [{\n          Key: 'Name',\n          Value: 'some-service-second-50dc6c495c0c9188-dev'\n        }],\n        HealthCheckEnabled: false\n      },\n      DependsOn: ['SecondLambdaPermissionRegisterTarget']\n    });\n    // Target groups are unique to functions/albs, so there should only be 2 target groups\n    expect(Object.keys(resources).length).to.be.equal(2);\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/target-groups.test.js","skipped":false,"dir":"test"},{"name":"should detect alb event definitions","suites":["#validate()"],"updatePoint":{"line":21,"column":41,"index":820},"line":21,"code":"  it('should detect alb event definitions', () => {\n    awsCompileAlbEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          alb: {\n            listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n            priority: 1,\n            conditions: {\n              host: 'example.com',\n              path: '/hello',\n              method: 'GET',\n              ip: ['192.168.0.1/1', 'fe80:0000:0000:0000:0204:61ff:fe9d:f156/3']\n            }\n          }\n        }]\n      },\n      second: {\n        events: [{\n          alb: {\n            listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n            priority: 2,\n            conditions: {\n              path: '/world',\n              method: ['POST', 'GET'],\n              query: {\n                foo: 'bar'\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileAlbEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      albId: '50dc6c495c0c9188',\n      listenerId: 'f2f7dc8efc522ab2',\n      listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n      priority: 1,\n      conditions: {\n        host: ['example.com'],\n        path: ['/hello'],\n        method: ['GET'],\n        ip: ['192.168.0.1/1', 'fe80:0000:0000:0000:0204:61ff:fe9d:f156/3']\n      }\n    }, {\n      functionName: 'second',\n      albId: '50dc6c495c0c9188',\n      listenerId: 'f2f7dc8efc522ab2',\n      listenerArn: 'arn:aws:elasticloadbalancing:' + 'us-east-1:123456789012:listener/app/my-load-balancer/' + '50dc6c495c0c9188/f2f7dc8efc522ab2',\n      priority: 2,\n      conditions: {\n        path: ['/world'],\n        method: ['POST', 'GET'],\n        query: {\n          foo: 'bar'\n        }\n      }\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should detect all alb authorizers declared in provider","suites":["#validate()"],"updatePoint":{"line":81,"column":60,"index":2848},"line":81,"code":"  it('should detect all alb authorizers declared in provider', () => {\n    awsCompileAlbEvents.serverless.service.functions = {};\n    awsCompileAlbEvents.serverless.service.provider.alb = {\n      authorizers: {\n        myFirstAuth: {\n          type: 'cognito',\n          userPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341',\n          userPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE',\n          userPoolDomain: 'your-test-domain',\n          onUnauthenticatedRequest: 'allow'\n        },\n        mySecondAuth: {\n          type: 'oidc',\n          authorizationEndpoint: 'https://example.com',\n          clientId: 'i-am-client',\n          clientSecret: 'i-am-secret',\n          issuer: 'https://www.iamscam.com',\n          tokenEndpoint: 'http://somewhere.org',\n          userInfoEndpoint: 'https://another-example.com'\n        }\n      }\n    };\n    const validated = awsCompileAlbEvents.validate();\n    expect(validated.authorizers).to.deep.equal({\n      myFirstAuth: {\n        type: 'cognito',\n        userPoolArn: 'arn:aws:cognito-idp:us-east-1:123412341234:userpool/us-east-1_123412341',\n        userPoolClientId: '1h57kf5cpq17m0eml12EXAMPLE',\n        userPoolDomain: 'your-test-domain',\n        onUnauthenticatedRequest: 'allow'\n      },\n      mySecondAuth: {\n        type: 'oidc',\n        authorizationEndpoint: 'https://example.com',\n        clientId: 'i-am-client',\n        clientSecret: 'i-am-secret',\n        issuer: 'https://www.iamscam.com',\n        tokenEndpoint: 'http://somewhere.org',\n        userInfoEndpoint: 'https://another-example.com',\n        onUnauthenticatedRequest: 'deny'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"returns the alb ID when given a valid listener ARN","suites":["#validate()","#validateListenerArnAndExtractAlbId()"],"updatePoint":{"line":125,"column":58,"index":4554},"line":125,"code":"    it('returns the alb ID when given a valid listener ARN', () => {\n      const listenerArn = 'arn:aws:elasticloadbalancing:us-east-1:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2';\n      expect(awsCompileAlbEvents.validateListenerArn(listenerArn, 'functionname')).to.deep.equal({\n        albId: '50dc6c495c0c9188',\n        listenerId: 'f2f7dc8efc522ab2'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"returns the alb ID when given a valid listener ARN using non-standard partition","suites":["#validate()","#validateListenerArnAndExtractAlbId()"],"updatePoint":{"line":132,"column":87,"index":4988},"line":132,"code":"    it('returns the alb ID when given a valid listener ARN using non-standard partition', () => {\n      const listenerArn = 'arn:aws-us-gov:elasticloadbalancing:us-east-1:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2';\n      expect(awsCompileAlbEvents.validateListenerArn(listenerArn, 'functionname')).to.deep.equal({\n        albId: '50dc6c495c0c9188',\n        listenerId: 'f2f7dc8efc522ab2'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"returns the ref when given an object for the listener ARN","suites":["#validate()","#validateListenerArnAndExtractAlbId()"],"updatePoint":{"line":139,"column":65,"index":5407},"line":139,"code":"    it('returns the ref when given an object for the listener ARN', () => {\n      const listenerArn = {\n        Ref: 'HTTPListener1'\n      };\n      expect(awsCompileAlbEvents.validateListenerArn(listenerArn, 'functionname')).to.deep.equal({\n        albId: 'HTTPListener1',\n        listenerId: 'HTTPListener1'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw if multiple events use the same priority and the same listener","suites":["#validate()","#validatePriorities()"],"updatePoint":{"line":150,"column":83,"index":5802},"line":150,"code":"    it('should throw if multiple events use the same priority and the same listener', () => {\n      const albEvents = [{\n        priority: 1,\n        listenerId: 'aaa',\n        functionName: 'foo'\n      }, {\n        priority: 1,\n        listenerId: 'aaa',\n        functionName: 'bar'\n      }];\n      expect(() => awsCompileAlbEvents.validatePriorities(albEvents)).to.throw(/^((?!Serverless limitation).)*$/);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw a special error if multiple events use the same priority and a different listener in the same function","suites":["#validate()","#validatePriorities()"],"updatePoint":{"line":162,"column":123,"index":6259},"line":162,"code":"    it('should throw a special error if multiple events use the same priority and a different listener in the same function', () => {\n      const albEvents = [{\n        priority: 1,\n        listenerId: 'aaa',\n        functionName: 'foo'\n      }, {\n        priority: 1,\n        listenerId: 'bbb',\n        functionName: 'foo'\n      }];\n      expect(() => awsCompileAlbEvents.validatePriorities(albEvents)).to.throw(/Serverless limitation/);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw if multiple events use the same priority and a different listener in different functions","suites":["#validate()","#validatePriorities()"],"updatePoint":{"line":174,"column":113,"index":6696},"line":174,"code":"    it('should not throw if multiple events use the same priority and a different listener in different functions', () => {\n      const albEvents = [{\n        priority: 1,\n        listenerId: 'aaa',\n        functionName: 'foo'\n      }, {\n        priority: 1,\n        listenerId: 'bbb',\n        functionName: 'bar'\n      }];\n      expect(() => awsCompileAlbEvents.validatePriorities(albEvents)).to.not.throw();\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw when all priorities are unique","suites":["#validate()","#validatePriorities()"],"updatePoint":{"line":186,"column":55,"index":7056},"line":186,"code":"    it('should not throw when all priorities are unique', () => {\n      const albEvents = [{\n        priority: 1,\n        listenerId: 'aaa',\n        functionName: 'foo'\n      }, {\n        priority: 2,\n        listenerId: 'bbb',\n        functionName: 'bar'\n      }];\n      expect(() => awsCompileAlbEvents.validatePriorities(albEvents)).to.not.throw();\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"returns valid authorizer array when string provided","suites":["#validate()","#validateEventAuthorizers()"],"updatePoint":{"line":200,"column":59,"index":7476},"line":200,"code":"    it('returns valid authorizer array when string provided', () => {\n      const event = {\n        alb: {\n          authorizer: 'myFirstAuth'\n        }\n      };\n      const auths = {\n        myFirstAuth: {}\n      };\n      expect(awsCompileAlbEvents.validateEventAuthorizers(event, auths, '')).to.deep.equal(['myFirstAuth']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"returns valid authorizer array when array provided","suites":["#validate()","#validateEventAuthorizers()"],"updatePoint":{"line":211,"column":58,"index":7809},"line":211,"code":"    it('returns valid authorizer array when array provided', () => {\n      const event = {\n        alb: {\n          authorizer: ['myFirstAuth', 'mySecondAuth']\n        }\n      };\n      const auths = {\n        myFirstAuth: {},\n        mySecondAuth: {}\n      };\n      expect(awsCompileAlbEvents.validateEventAuthorizers(event, auths, '')).to.deep.equal(['myFirstAuth', 'mySecondAuth']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"throws an error when authorizer does not match any registered authorizers in provider","suites":["#validate()","#validateEventAuthorizers()"],"updatePoint":{"line":223,"column":93,"index":8237},"line":223,"code":"    it('throws an error when authorizer does not match any registered authorizers in provider', () => {\n      const event = {\n        alb: {\n          authorizer: 'unknownAuth'\n        }\n      };\n      const auths = {\n        myFirstAuth: {}\n      };\n      expect(() => awsCompileAlbEvents.validateEventAuthorizers(event, auths, 'functionName')).to.throw('No match for \"unknownAuth\" in function \"functionName\" found in registered ALB authorizers');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alb/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileAlexaSkillEvents","#constructor()"],"updatePoint":{"line":23,"column":70,"index":919},"line":23,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileAlexaSkillEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should should hook into the \"deploy:compileEvents\" hook","suites":["AwsCompileAlexaSkillEvents","#constructor()"],"updatePoint":{"line":24,"column":63,"index":1067},"line":24,"code":"    it('should should hook into the \"deploy:compileEvents\" hook', () => expect(awsCompileAlexaSkillEvents.hooks['package:compileEvents']).to.not.equal(undefined));","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when multiple alexaSkill events are provided","suites":["AwsCompileAlexaSkillEvents","#compileAlexaSkillEvents()"],"updatePoint":{"line":27,"column":90,"index":1313},"line":27,"code":"    it('should create corresponding resources when multiple alexaSkill events are provided', () => {\n      const skillId1 = 'amzn1.ask.skill.xx-xx-xx-xx';\n      const skillId2 = 'amzn1.ask.skill.yy-yy-yy-yy';\n      awsCompileAlexaSkillEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            alexaSkill: skillId1\n          }, {\n            alexaSkill: {\n              appId: skillId2\n            }\n          }]\n        }\n      };\n      awsCompileAlexaSkillEvents.compileAlexaSkillEvents();\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.Principal).to.equal('alexa-appkit.amazon.com');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.EventSourceToken).to.equal(skillId1);\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill2.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill2.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill2.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill2.Properties.Principal).to.equal('alexa-appkit.amazon.com');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill2.Properties.EventSourceToken).to.equal(skillId2);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when a disabled alexaSkill event is provided","suites":["AwsCompileAlexaSkillEvents","#compileAlexaSkillEvents()"],"updatePoint":{"line":57,"column":90,"index":3882},"line":57,"code":"    it('should create corresponding resources when a disabled alexaSkill event is provided', () => {\n      const skillId1 = 'amzn1.ask.skill.xx-xx-xx-xx';\n      awsCompileAlexaSkillEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            alexaSkill: {\n              appId: skillId1,\n              enabled: false\n            }\n          }]\n        }\n      };\n      awsCompileAlexaSkillEvents.compileAlexaSkillEvents();\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.Action).to.equal('lambda:DisableInvokeFunction');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.Principal).to.equal('alexa-appkit.amazon.com');\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSkill1.Properties.EventSourceToken).to.equal(skillId1);\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when alexaSkill event is not given","suites":["AwsCompileAlexaSkillEvents","#compileAlexaSkillEvents()"],"updatePoint":{"line":78,"column":84,"index":5361},"line":78,"code":"    it('should not create corresponding resources when alexaSkill event is not given', () => {\n      awsCompileAlexaSkillEvents.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileAlexaSkillEvents.compileAlexaSkillEvents();\n      expect(awsCompileAlexaSkillEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should not not throw error when other events are present","suites":["AwsCompileAlexaSkillEvents","#compileAlexaSkillEvents()"],"updatePoint":{"line":87,"column":64,"index":5756},"line":87,"code":"    it('should not not throw error when other events are present', () => {\n      awsCompileAlexaSkillEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            http: {\n              method: 'get',\n              path: '/'\n            }\n          }]\n        }\n      };\n      expect(() => awsCompileAlexaSkillEvents.compileAlexaSkillEvents()).to.not.throw();\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-skill.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileAlexaSmartHomeEvents","#constructor()"],"updatePoint":{"line":23,"column":70,"index":980},"line":23,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileAlexaSmartHomeEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/alexa-smart-home.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when alexaSmartHome events are given","suites":["AwsCompileAlexaSmartHomeEvents","#compileAlexaSmartHomeEvents()"],"updatePoint":{"line":26,"column":82,"index":1210},"line":26,"code":"    it('should create corresponding resources when alexaSmartHome events are given', () => {\n      awsCompileAlexaSmartHomeEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            alexaSmartHome: {\n              appId: 'amzn1.ask.skill.xx-xx-xx-xx',\n              enabled: false\n            }\n          }, {\n            alexaSmartHome: {\n              appId: 'amzn1.ask.skill.yy-yy-yy-yy',\n              enabled: true\n            }\n          }, {\n            alexaSmartHome: 'amzn1.ask.skill.zz-zz-zz-zz'\n          }]\n        }\n      };\n      awsCompileAlexaSmartHomeEvents.compileAlexaSmartHomeEvents();\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Properties.FunctionName).to.deep.equal({\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      });\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Properties.Action).to.equal('lambda:DisableInvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Properties.Principal).to.equal('alexa-connectedhome.amazon.com');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Properties.Principal).to.equal('alexa-connectedhome.amazon.com');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Properties.Principal).to.equal('alexa-connectedhome.amazon.com');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Properties.EventSourceToken).to.equal('amzn1.ask.skill.xx-xx-xx-xx');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Properties.EventSourceToken).to.equal('amzn1.ask.skill.yy-yy-yy-yy');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Properties.EventSourceToken).to.equal('amzn1.ask.skill.zz-zz-zz-zz');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-smart-home.test.js","skipped":false,"dir":"test"},{"name":"should respect enabled variable, defaulting to true","suites":["AwsCompileAlexaSmartHomeEvents","#compileAlexaSmartHomeEvents()"],"updatePoint":{"line":67,"column":59,"index":5101},"line":67,"code":"    it('should respect enabled variable, defaulting to true', () => {\n      awsCompileAlexaSmartHomeEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            alexaSmartHome: {\n              appId: 'amzn1.ask.skill.xx-xx-xx-xx',\n              enabled: false\n            }\n          }, {\n            alexaSmartHome: {\n              appId: 'amzn1.ask.skill.yy-yy-yy-yy',\n              enabled: true\n            }\n          }, {\n            alexaSmartHome: {\n              appId: 'amzn1.ask.skill.jj-jj-jj-jj'\n            }\n          }, {\n            alexaSmartHome: 'amzn1.ask.skill.zz-zz-zz-zz'\n          }]\n        }\n      };\n      awsCompileAlexaSmartHomeEvents.compileAlexaSmartHomeEvents();\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome1.Properties.Action).to.equal('lambda:DisableInvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome2.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome3.Properties.Action).to.equal('lambda:InvokeFunction');\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionAlexaSmartHome4.Properties.Action).to.equal('lambda:InvokeFunction');\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-smart-home.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when alexaSmartHome events are not given","suites":["AwsCompileAlexaSmartHomeEvents","#compileAlexaSmartHomeEvents()"],"updatePoint":{"line":95,"column":90,"index":6688},"line":95,"code":"    it('should not create corresponding resources when alexaSmartHome events are not given', () => {\n      awsCompileAlexaSmartHomeEvents.serverless.service.functions = {\n        first: {\n          events: ['alexaSkill']\n        }\n      };\n      awsCompileAlexaSmartHomeEvents.compileAlexaSmartHomeEvents();\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-smart-home.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when events are not given","suites":["AwsCompileAlexaSmartHomeEvents","#compileAlexaSmartHomeEvents()"],"updatePoint":{"line":104,"column":75,"index":7122},"line":104,"code":"    it('should not create corresponding resources when events are not given', () => {\n      awsCompileAlexaSmartHomeEvents.serverless.service.functions = {\n        first: {}\n      };\n      awsCompileAlexaSmartHomeEvents.compileAlexaSmartHomeEvents();\n      expect(awsCompileAlexaSmartHomeEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/alexa-smart-home.test.js","skipped":false,"dir":"test"},{"name":" - should be a known type","suites":["test/unit/lib/plugins/aws/package/compile/events/alias.test.js","test/unit/lib/plugins/aws/package/compile/events/alias.test.js - "],"updatePoint":{"line":278,"column":47,"index":8863},"line":278,"code":"              it(`${r} - should be a known type`, () => {\n                expect(Object.keys(resourceTypeToLambdaLookup)).to.include(resource.Type);\n              });","file":"unit/lib/plugins/aws/package/compile/events/alias.test.js","skipped":false,"dir":"test"},{"name":" - should reference lambda alias ''","suites":["test/unit/lib/plugins/aws/package/compile/events/alias.test.js","test/unit/lib/plugins/aws/package/compile/events/alias.test.js - "],"updatePoint":{"line":284,"column":77,"index":9186},"line":284,"code":"                it(`${r} - should reference lambda alias '${check.aliasName}'`, () => {\n                  expect(lambdaReference).to.deep.equal({\n                    'Fn::Join': [':', [{\n                      'Fn::GetAtt': [lambdaLogicalId, 'Arn']\n                    }, check.aliasName]]\n                  });\n                });","file":"unit/lib/plugins/aws/package/compile/events/alias.test.js","skipped":false,"dir":"test"},{"name":" - should depend on lambda alias ''","suites":["test/unit/lib/plugins/aws/package/compile/events/alias.test.js","test/unit/lib/plugins/aws/package/compile/events/alias.test.js - "],"updatePoint":{"line":291,"column":77,"index":9517},"line":291,"code":"                it(`${r} - should depend on lambda alias '${check.aliasName}'`, () => {\n                  expect(resource.DependsOn).to.include(check.aliasLogicalId);\n                });","file":"unit/lib/plugins/aws/package/compile/events/alias.test.js","skipped":false,"dir":"test"},{"name":" - should not reference lambda alias","suites":["test/unit/lib/plugins/aws/package/compile/events/alias.test.js","test/unit/lib/plugins/aws/package/compile/events/alias.test.js - "],"updatePoint":{"line":295,"column":60,"index":9710},"line":295,"code":"                it(`${r} - should not reference lambda alias`, () => {\n                  expect(lambdaReference).to.deep.equal({\n                    'Fn::GetAtt': [lambdaLogicalId, 'Arn']\n                  });\n                });","file":"unit/lib/plugins/aws/package/compile/events/alias.test.js","skipped":false,"dir":"test"},{"name":"Check resource count","suites":["test/unit/lib/plugins/aws/package/compile/events/alias.test.js","test/unit/lib/plugins/aws/package/compile/events/alias.test.js - "],"updatePoint":{"line":307,"column":26,"index":9984},"line":307,"code":"  it('Check resource count', () => {\n    expect(lambdaResourceCount).to.gte(1);\n  });","file":"unit/lib/plugins/aws/package/compile/events/alias.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsCompileApigEvents","#constructor()"],"updatePoint":{"line":74,"column":25,"index":3381},"line":74,"code":"    it('should have hooks', () => expect(awsCompileApigEvents.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to be an instanceof AwsProvider","suites":["AwsCompileApigEvents","#constructor()"],"updatePoint":{"line":75,"column":72,"index":3515},"line":75,"code":"    it('should set the provider variable to be an instanceof AwsProvider', () => expect(awsCompileApigEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should setup an empty array to gather the method logical ids","suites":["AwsCompileApigEvents","#constructor()"],"updatePoint":{"line":76,"column":68,"index":3662},"line":76,"code":"    it('should setup an empty array to gather the method logical ids', () => expect(awsCompileApigEvents.apiGatewayMethodLogicalIds).to.deep.equal([]));","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"package:compileEvents\" promise chain in order","suites":["AwsCompileApigEvents","#constructor()"],"updatePoint":{"line":77,"column":65,"index":3812},"line":77,"code":"    it('should run \"package:compileEvents\" promise chain in order', async () => {\n      const validateStub = sinon.stub(awsCompileApigEvents, 'validate').returns({\n        events: [{\n          functionName: 'first',\n          http: {\n            path: 'users',\n            method: 'POST'\n          }\n        }]\n      });\n      return awsCompileApigEvents.hooks['package:compileEvents']().then(() => {\n        expect(validateStub.calledOnce).to.be.equal(true);\n        expect(compileRestApiStub.calledAfter(validateStub)).to.be.equal(true);\n        expect(compileResourcesStub.calledAfter(compileRestApiStub)).to.be.equal(true);\n        expect(compileMethodsStub.calledAfter(compileResourcesStub)).to.be.equal(true);\n        expect(compileRequestValidatorsStub.calledAfter(compileMethodsStub)).to.be.equal(true);\n        expect(compileDeploymentStub.calledAfter(compileRequestValidatorsStub)).to.be.equal(true);\n        expect(compileUsagePlanStub.calledAfter(compileDeploymentStub)).to.be.equal(true);\n        expect(compilePermissionsStub.calledAfter(compileUsagePlanStub)).to.be.equal(true);\n        expect(compileStageStub.calledAfter(compilePermissionsStub)).to.be.equal(true);\n        awsCompileApigEvents.validate.restore();\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should run the promise chain in order","suites":["AwsCompileApigEvents","#constructor()","when running the \"after:deploy:deploy\" promise chain"],"updatePoint":{"line":108,"column":47,"index":5349},"line":108,"code":"      it('should run the promise chain in order', async () => {\n        getServiceStateStub.returns({\n          service: {\n            functions: {\n              first: {\n                events: [{\n                  http: {\n                    path: 'users',\n                    method: 'POST'\n                  }\n                }]\n              }\n            }\n          }\n        });\n        return awsCompileApigEvents.hooks['after:deploy:deploy']().then(() => {\n          expect(updateStageStub.calledOnce).to.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should not skip the updateStage step when no http events are found","suites":["AwsCompileApigEvents","#constructor()","when running the \"after:deploy:deploy\" promise chain"],"updatePoint":{"line":127,"column":76,"index":5928},"line":127,"code":"      it('should not skip the updateStage step when no http events are found', async () => {\n        getServiceStateStub.returns({\n          service: {\n            functions: {\n              first: {\n                events: []\n              }\n            }\n          }\n        });\n        return awsCompileApigEvents.hooks['after:deploy:deploy']().then(() => {\n          expect(updateStageStub.calledOnce).to.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"before:remove:remove\" promise chain in order","suites":["AwsCompileApigEvents","#constructor()","when running the \"after:deploy:deploy\" promise chain"],"updatePoint":{"line":142,"column":64,"index":6368},"line":142,"code":"    it('should run \"before:remove:remove\" promise chain in order', async () => {\n      const validateStub = sinon.stub(validate, 'validate').returns();\n      return awsCompileApigEvents.hooks['before:remove:remove']().then(() => {\n        expect(validateStub.calledOnce).to.equal(true);\n        expect(disassociateUsagePlanStub.calledAfter(validateStub)).to.equal(true);\n        validate.validate.restore();\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no functions are given","suites":["AwsCompileApigEvents","#constructor()","when running the \"after:deploy:deploy\" promise chain"],"updatePoint":{"line":150,"column":48,"index":6778},"line":150,"code":"    it('should resolve if no functions are given', () => {\n      awsCompileApigEvents.serverless.service.functions = {};\n      return awsCompileApigEvents.hooks['package:compileEvents']();\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/index.test.js","skipped":false,"dir":"test"},{"name":"should support api key notation","suites":["#compileApiKeys()"],"updatePoint":{"line":30,"column":37,"index":1201},"line":30,"code":"  it('should support api key notation', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      apiKeys: ['1234567890', {\n        name: '2345678901'\n      }, {\n        value: 'valueForKeyWithoutName',\n        description: 'Api key description'\n      }, {\n        name: '3456789012',\n        value: 'valueForKey3456789012'\n      }, {\n        name: '9876543211',\n        value: 'valueForKey9876543211',\n        customerId: 'customerid98765'\n      }],\n      // Added purely to test https://github.com/serverless/serverless/issues/7844 regression\n      usagePlan: {\n        quota: {\n          limit: 5000\n        }\n      }\n    };\n    awsCompileApigEvents.compileApiKeys();\n    const expectedApiKeys = [{\n      name: '1234567890',\n      value: undefined,\n      description: undefined,\n      customerId: undefined\n    }, {\n      name: '2345678901',\n      value: undefined,\n      description: undefined,\n      customerId: undefined\n    }, {\n      name: undefined,\n      value: 'valueForKeyWithoutName',\n      description: 'Api key description',\n      customerId: undefined\n    }, {\n      name: '3456789012',\n      value: 'valueForKey3456789012',\n      description: undefined,\n      customerId: undefined\n    }, {\n      name: '9876543211',\n      value: 'valueForKey9876543211',\n      description: undefined,\n      customerId: 'customerid98765'\n    }];\n    expectedApiKeys.forEach((apiKey, index) => {\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Type).to.equal('AWS::ApiGateway::ApiKey');\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.Enabled).to.equal(true);\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.Name).to.equal(apiKey.name);\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.Description).to.equal(apiKey.description);\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.CustomerId).to.equal(apiKey.customerId);\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.Value).to.equal(apiKey.value);\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.StageKeys[0].RestApiId.Ref).to.equal('ApiGatewayRestApi');\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].Properties.StageKeys[0].StageName).to.equal('dev');\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getApiKeyLogicalId(index + 1)].DependsOn).to.equal('ApiGatewayDeploymentTest');\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/api-keys.test.js","skipped":false,"dir":"test"},{"name":"should disable keys when enabled: false","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/apiKeys.test.js"],"updatePoint":{"line":143,"column":45,"index":5746},"line":143,"code":"  it('should disable keys when enabled: false', () => {\n    const resource = cfResources[naming.getApiKeyLogicalId(1, 'disabled')];\n    expect(resource.Properties.Enabled).to.be.false;\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/api-keys.test.js","skipped":false,"dir":"test"},{"name":"should support usage plan notation","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/apiKeys.test.js"],"updatePoint":{"line":147,"column":40,"index":5932},"line":147,"code":"  it('should support usage plan notation', () => {\n    const expectedApiKeys = {\n      free: [{\n        name: '1234567890',\n        value: undefined,\n        description: undefined\n      }, {\n        name: '2345678901',\n        value: undefined,\n        description: undefined\n      }, {\n        name: undefined,\n        value: 'valueForKeyWithoutName',\n        description: 'Api key description'\n      }, {\n        name: '3456789012',\n        value: 'valueForKey3456789012',\n        description: undefined\n      }, {\n        name: undefined,\n        value: undefined,\n        description: 'descriptionForKeyWithoutNameOrValue'\n      }],\n      paid: [{\n        name: '0987654321',\n        value: undefined,\n        description: undefined\n      }, {\n        name: 'jihgfedcba',\n        value: undefined,\n        description: undefined\n      }]\n    };\n    apiGatewayExt.apiKeys.slice(0, 2).forEach(plan => {\n      const planName = Object.keys(plan)[0]; // free || paid\n      const apiKeys = expectedApiKeys[planName];\n      apiKeys.forEach((apiKey, index) => {\n        const resource = cfResources[naming.getApiKeyLogicalId(index + 1, planName)];\n        expect(resource.Type).to.equal('AWS::ApiGateway::ApiKey');\n        expect(resource.Properties.Enabled).to.equal(true);\n        expect(resource.Properties.Name).to.equal(apiKey.name);\n        expect(resource.Properties.Description).to.equal(apiKey.description);\n        expect(resource.Properties.Value).to.equal(apiKey.value);\n        expect(resource.Properties.StageKeys[0].RestApiId.Ref).to.equal('ApiGatewayRestApi');\n        expect(resource.Properties.StageKeys[0].StageName).to.equal('dev');\n        expect(resource.DependsOn).to.equal(naming.generateApiGatewayDeploymentLogicalId(serverlessInstance.instanceId));\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/api-keys.test.js","skipped":false,"dir":"test"},{"name":"should create an authorizer with minimal configuration","suites":["#compileAuthorizers()"],"updatePoint":{"line":24,"column":60,"index":1060},"line":24,"code":"  it('should create an authorizer with minimal configuration', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          arn: {\n            'Fn::GetAtt': ['SomeLambdaFunction', 'Arn']\n          },\n          resultTtlInSeconds: 300,\n          identitySource: 'method.request.header.Authorization'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Type).to.equal('AWS::ApiGateway::Authorizer');\n    expect(resource.Properties.AuthorizerResultTtlInSeconds).to.equal(300);\n    expect(resource.Properties.AuthorizerUri).to.deep.equal({\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':apigateway:', {\n        Ref: 'AWS::Region'\n      }, ':lambda:path/2015-03-31/functions/', {\n        'Fn::GetAtt': ['SomeLambdaFunction', 'Arn']\n      }, '/invocations']]\n    });\n    expect(resource.Properties.IdentitySource).to.equal('method.request.header.Authorization');\n    expect(resource.Properties.IdentityValidationExpression).to.equal(undefined);\n    expect(resource.Properties.Name).to.equal('authorizer');\n    expect(resource.Properties.RestApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(resource.Properties.Type).to.equal('TOKEN');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should create an authorizer with provided configuration","suites":["#compileAuthorizers()"],"updatePoint":{"line":58,"column":61,"index":2536},"line":58,"code":"  it('should create an authorizer with provided configuration', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          arn: 'foo',\n          resultTtlInSeconds: 500,\n          identitySource: 'method.request.header.Custom',\n          identityValidationExpression: 'regex'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Type).to.equal('AWS::ApiGateway::Authorizer');\n    expect(resource.Properties.AuthorizerUri).to.deep.equal({\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':apigateway:', {\n        Ref: 'AWS::Region'\n      }, ':lambda:path/2015-03-31/functions/', 'foo', '/invocations']]\n    });\n    expect(resource.Properties.AuthorizerResultTtlInSeconds).to.equal(500);\n    expect(resource.Properties.IdentitySource).to.equal('method.request.header.Custom');\n    expect(resource.Properties.IdentityValidationExpression).to.equal('regex');\n    expect(resource.Properties.Name).to.equal('authorizer');\n    expect(resource.Properties.RestApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(resource.Properties.Type).to.equal('TOKEN');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should apply optional provided type value to Authorizer Type","suites":["#compileAuthorizers()"],"updatePoint":{"line":89,"column":66,"index":3930},"line":89,"code":"  it('should apply optional provided type value to Authorizer Type', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          arn: 'foo',\n          resultTtlInSeconds: 500,\n          identityValidationExpression: 'regex',\n          type: 'request'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Type).to.equal('AWS::ApiGateway::Authorizer');\n    expect(resource.Properties.Type).to.equal('REQUEST');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should apply TOKEN as authorizer Type when not given a type value","suites":["#compileAuthorizers()"],"updatePoint":{"line":108,"column":71,"index":4658},"line":108,"code":"  it('should apply TOKEN as authorizer Type when not given a type value', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          arn: 'foo',\n          resultTtlInSeconds: 500,\n          identityValidationExpression: 'regex'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Type).to.equal('AWS::ApiGateway::Authorizer');\n    expect(resource.Properties.Type).to.equal('TOKEN');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should create a valid cognito user pool authorizer","suites":["#compileAuthorizers()"],"updatePoint":{"line":126,"column":56,"index":5342},"line":126,"code":"  it('should create a valid cognito user pool authorizer', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Properties.Name).to.equal('authorizer');\n    expect(resource.Properties.ProviderARNs[0]).to.equal('arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ');\n    expect(resource.Properties.Type).to.equal('COGNITO_USER_POOLS');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should create a valid cognito user pool authorizer using Fn::GetAtt","suites":["#compileAuthorizers()"],"updatePoint":{"line":143,"column":73,"index":6137},"line":143,"code":"  it('should create a valid cognito user pool authorizer using Fn::GetAtt', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/create',\n        method: 'POST',\n        authorizer: {\n          name: 'authorizer',\n          type: 'COGNITO_USER_POOLS',\n          arn: {\n            'Fn::GetAtt': ['CognitoUserPool', 'Arn']\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileAuthorizers();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerApiGatewayAuthorizer;\n    expect(resource.Properties.Name).to.equal('authorizer');\n    expect(resource.Properties.ProviderARNs[0]).to.deep.equal({\n      'Fn::GetAtt': ['CognitoUserPool', 'Arn']\n    });\n    expect(resource.Properties.Type).to.equal('COGNITO_USER_POOLS');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"Should reference provisioned alias when pointing local lambda authorizer","suites":["#compileAuthorizers() #2"],"updatePoint":{"line":167,"column":78,"index":7033},"line":167,"code":"  it('Should reference provisioned alias when pointing local lambda authorizer', async () => runServerless({\n    fixture: 'function',\n    configExt: {\n      functions: {\n        basic: {\n          provisionedConcurrency: 1\n        },\n        authorized: {\n          handler: 'index.handler',\n          events: [{\n            http: {\n              method: 'get',\n              path: '/authorized',\n              authorizer: {\n                name: 'basic',\n                identitySource: 'method.request.header.Authorization'\n              }\n            }\n          }]\n        }\n      }\n    },\n    command: 'package'\n  }).then(({\n    awsNaming,\n    cfTemplate\n  }) => {\n    const authorizerLogicalId = awsNaming.getAuthorizerLogicalId('basic');\n    const authorizerPermissionLogicalId = awsNaming.getLambdaApiGatewayPermissionLogicalId('basic');\n    expect(JSON.stringify(cfTemplate.Resources[authorizerLogicalId].Properties.AuthorizerUri)).to.include('provisioned');\n    expect(cfTemplate.Resources[authorizerPermissionLogicalId].Properties.FunctionName).to.deep.equal({\n      Ref: awsNaming.getLambdaProvisionedConcurrencyAliasLogicalId('basic')\n    });\n  }));","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should create preflight method for CORS enabled resource","suites":["#compileCors()"],"updatePoint":{"line":64,"column":62,"index":2104},"line":64,"code":"  it('should create preflight method for CORS enabled resource', () => {\n    awsCompileApigEvents.validated.corsPreflight = {\n      'users/update': {\n        origin: 'http://example.com',\n        origins: [],\n        headers: ['*'],\n        methods: ['OPTIONS', 'PUT'],\n        allowCredentials: false,\n        maxAge: 86400,\n        cacheControl: 'max-age=600, s-maxage=600'\n      },\n      'users/create': {\n        origins: ['http://localhost:3000', 'https://*.example.com'],\n        headers: ['*'],\n        methods: ['OPTIONS', 'POST'],\n        allowCredentials: true,\n        maxAge: 86400,\n        cacheControl: 'max-age=600, s-maxage=600'\n      },\n      'users/delete': {\n        origins: ['*'],\n        headers: ['CustomHeaderA', 'CustomHeaderB'],\n        methods: ['OPTIONS', 'DELETE'],\n        allowCredentials: false,\n        maxAge: 86400,\n        cacheControl: 'max-age=600, s-maxage=600'\n      },\n      'users/any': {\n        origin: 'http://localhost:3000,http://example.com',\n        headers: ['*'],\n        methods: ['OPTIONS', 'ANY'],\n        allowCredentials: false\n      }\n    };\n    awsCompileApigEvents.compileCors();\n    // users/create\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.equal(\"'http://localhost:3000'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal('#set($origin = $input.params(\"Origin\"))\\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://.+[.]example[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Headers']).to.equal(\"'*'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Methods']).to.equal(\"'OPTIONS,POST'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.equal(\"'true'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Max-Age']).to.equal(\"'86400'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Cache-Control']).to.equal(\"'max-age=600, s-maxage=600'\");\n\n    // users/update\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.equal(\"'http://example.com'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Methods']).to.equal(\"'OPTIONS,PUT'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.be.undefined;\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Max-Age']).to.equal(\"'86400'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdateOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Cache-Control']).to.equal(\"'max-age=600, s-maxage=600'\");\n\n    // users/delete\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.equal(\"'*'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Headers']).to.equal(\"'CustomHeaderA,CustomHeaderB'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Methods']).to.equal(\"'OPTIONS,DELETE'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.be.undefined;\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Max-Age']).to.equal(\"'86400'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersDeleteOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Cache-Control']).to.equal(\"'max-age=600, s-maxage=600'\");\n\n    // users/any\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersAnyOptions.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal('#set($origin = $input.params(\"Origin\"))\\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"http://example[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersAnyOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Headers']).to.equal(\"'*'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersAnyOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Methods']).to.equal(\"'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersAnyOptions.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/cors.test.js","skipped":false,"dir":"test"},{"name":"should add the methods resource logical id to the array of method logical ids","suites":["#compileCors()"],"updatePoint":{"line":129,"column":83,"index":10039},"line":129,"code":"  it('should add the methods resource logical id to the array of method logical ids', () => {\n    awsCompileApigEvents.validated.corsPreflight = {\n      'users/create': {\n        origins: ['*', 'http://example.com'],\n        headers: ['*'],\n        methods: ['OPTIONS', 'POST'],\n        allowCredentials: true,\n        maxAge: 86400\n      },\n      'users/any': {\n        origins: ['http://example.com'],\n        headers: ['*'],\n        methods: ['OPTIONS', 'ANY'],\n        allowCredentials: false\n      }\n    };\n    awsCompileApigEvents.compileCors();\n    expect(awsCompileApigEvents.apiGatewayMethodLogicalIds).to.deep.equal(['ApiGatewayMethodUsersCreateOptions', 'ApiGatewayMethodUsersAnyOptions']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/cors.test.js","skipped":false,"dir":"test"},{"name":"should create a deployment resource","suites":["#compileDeployment()"],"updatePoint":{"line":31,"column":41,"index":1178},"line":31,"code":"  it('should create a deployment resource', () => {\n    awsCompileApigEvents.compileDeployment();\n    const apiGatewayDeploymentLogicalId = Object.keys(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)[0];\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[apiGatewayDeploymentLogicalId]).to.deep.equal({\n      Type: 'AWS::ApiGateway::Deployment',\n      DependsOn: ['method-dependency1', 'method-dependency2'],\n      Properties: {\n        RestApiId: {\n          Ref: awsCompileApigEvents.apiGatewayRestApiLogicalId\n        },\n        Description: undefined,\n        StageName: 'dev'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should create a deployment resource with description","suites":["#compileDeployment()"],"updatePoint":{"line":46,"column":58,"index":1891},"line":46,"code":"  it('should create a deployment resource with description', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      description: 'Some Description'\n    };\n    awsCompileApigEvents.compileDeployment();\n    const apiGatewayDeploymentLogicalId = Object.keys(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)[0];\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[apiGatewayDeploymentLogicalId]).to.deep.equal({\n      Type: 'AWS::ApiGateway::Deployment',\n      DependsOn: ['method-dependency1', 'method-dependency2'],\n      Properties: {\n        RestApiId: {\n          Ref: awsCompileApigEvents.apiGatewayRestApiLogicalId\n        },\n        Description: 'Some Description',\n        StageName: 'dev'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should add service endpoint output","suites":["#compileDeployment()"],"updatePoint":{"line":64,"column":40,"index":2708},"line":64,"code":"  it('should add service endpoint output', () => {\n    awsCompileApigEvents.compileDeployment();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Outputs.ServiceEndpoint).to.deep.equal({\n      Description: 'URL of the service endpoint',\n      Value: {\n        'Fn::Join': ['', ['https://', {\n          Ref: awsCompileApigEvents.apiGatewayRestApiLogicalId\n        }, '.execute-api.', {\n          Ref: 'AWS::Region'\n        }, '.', {\n          Ref: 'AWS::URLSuffix'\n        }, '/dev']]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should remove association from the usage plan","suites":["#disassociateUsagePlan()"],"updatePoint":{"line":57,"column":51,"index":1860},"line":57,"code":"  it('should remove association from the usage plan', async () => {\n    disassociateUsagePlan.serverless.service.provider.apiGateway = {\n      apiKeys: ['apiKey1']\n    };\n    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n      expect(providerRequestStub.callCount).to.be.equal(3);\n      expect(providerRequestStub.calledWithExactly('CloudFormation', 'describeStackResource', {\n        StackName: `${awsProvider.naming.getStackName()}`,\n        LogicalResourceId: 'ApiGatewayRestApi'\n      })).to.be.equal(true);\n      expect(providerRequestStub.calledWithExactly('APIGateway', 'getUsagePlans', {})).to.be.equal(true);\n      expect(providerRequestStub.calledWithExactly('APIGateway', 'updateUsagePlan', {\n        usagePlanId: 'usage-plan-id',\n        patchOperations: [{\n          op: 'remove',\n          path: '/apiStages',\n          value: 'resource-id:dev'\n        }]\n      })).to.be.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/disassociate-usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no api keys are given","suites":["#disassociateUsagePlan()"],"updatePoint":{"line":78,"column":45,"index":2787},"line":78,"code":"  it('should resolve if no api keys are given', async () => {\n    disassociateUsagePlan.serverless.service.provider.apiGateway = {\n      apiKeys: []\n    };\n    return disassociateUsagePlan.disassociateUsagePlan().then(() => {\n      expect(providerRequestStub.callCount).to.be.equal(0);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/disassociate-usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should update the stage based on the serverless file configuration","suites":["#updateStage()"],"updatePoint":{"line":129,"column":72,"index":3753},"line":129,"code":"  it('should update the stage based on the serverless file configuration', async () => {\n    context.state.service.provider.tags = {\n      'Containing Space': 'bar',\n      'bar': 'high-priority'\n    };\n    context.state.service.provider.stackTags = {\n      bar: 'low-priority',\n      num: 123\n    };\n    context.state.service.provider.tracing = {\n      apiGateway: true\n    };\n    context.state.service.provider.apiGateway = {\n      metrics: true\n    };\n    context.state.service.provider.logs = {\n      restApi: true\n    };\n    return updateStage.call(context).then(() => {\n      const patchOperations = [{\n        op: 'replace',\n        path: '/tracingEnabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/metrics/enabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/destinationArn',\n        value: 'arn:aws:logs:us-east-1:123456:log-group:/aws/api-gateway/my-service-dev'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/format',\n        value: 'requestId: $context.requestId, ip: $context.identity.sourceIp, caller: $context.identity.caller, user: $context.identity.user, requestTime: $context.requestTime, httpMethod: $context.httpMethod, resourcePath: $context.resourcePath, status: $context.status, protocol: $context.protocol, responseLength: $context.responseLength'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/dataTrace',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/loglevel',\n        value: 'INFO'\n      }];\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(6);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[3][1]).to.equal('updateStage');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev',\n        patchOperations\n      });\n      expect(providerRequestStub.args[4][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[4][1]).to.equal('tagResource');\n      expect(providerRequestStub.args[4][2]).to.deep.equal({\n        resourceArn: 'arn:aws:apigateway:us-east-1::/restapis/devRestApiId/stages/dev',\n        tags: {\n          'Containing Space': 'bar',\n          'bar': 'high-priority',\n          'num': '123'\n        }\n      });\n      expect(providerRequestStub.args[5][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[5][1]).to.equal('untagResource');\n      expect(providerRequestStub.args[5][2]).to.deep.equal({\n        resourceArn: 'arn:aws:apigateway:us-east-1::/restapis/devRestApiId/stages/dev',\n        tagKeys: ['old']\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should support gov regions","suites":["#updateStage()"],"updatePoint":{"line":212,"column":32,"index":6982},"line":212,"code":"  it('should support gov regions', async () => {\n    options.region = 'us-gov-east-1';\n    awsProvider.getAccountInfo.restore();\n    providerGetAccountInfoStub = sinon.stub(awsProvider, 'getAccountInfo').resolves({\n      accountId: '123456',\n      partition: 'aws-us-gov'\n    });\n    context.state.service.provider.tags = {\n      'Containing Space': 'bar',\n      'bar': 'high-priority'\n    };\n    context.state.service.provider.stackTags = {\n      bar: 'low-priority',\n      num: 123\n    };\n    context.state.service.provider.tracing = {\n      apiGateway: true\n    };\n    context.state.service.provider.apiGateway = {\n      metrics: true\n    };\n    context.state.service.provider.logs = {\n      restApi: true\n    };\n    return updateStage.call(context).then(() => {\n      const patchOperations = [{\n        op: 'replace',\n        path: '/tracingEnabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/metrics/enabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/destinationArn',\n        value: 'arn:aws-us-gov:logs:us-gov-east-1:123456:log-group:/aws/api-gateway/my-service-dev'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/format',\n        value: 'requestId: $context.requestId, ip: $context.identity.sourceIp, caller: $context.identity.caller, user: $context.identity.user, requestTime: $context.requestTime, httpMethod: $context.httpMethod, resourcePath: $context.resourcePath, status: $context.status, protocol: $context.protocol, responseLength: $context.responseLength'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/dataTrace',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/loglevel',\n        value: 'INFO'\n      }];\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(6);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[3][1]).to.equal('updateStage');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev',\n        patchOperations\n      });\n      expect(providerRequestStub.args[4][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[4][1]).to.equal('tagResource');\n      expect(providerRequestStub.args[4][2]).to.deep.equal({\n        resourceArn: 'arn:aws-us-gov:apigateway:us-gov-east-1::/restapis/devRestApiId/stages/dev',\n        tags: {\n          'Containing Space': 'bar',\n          'bar': 'high-priority',\n          'num': '123'\n        }\n      });\n      expect(providerRequestStub.args[5][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[5][1]).to.equal('untagResource');\n      expect(providerRequestStub.args[5][2]).to.deep.equal({\n        resourceArn: 'arn:aws-us-gov:apigateway:us-gov-east-1::/restapis/devRestApiId/stages/dev',\n        tagKeys: ['old']\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should support all partitions","suites":["#updateStage()"],"updatePoint":{"line":301,"column":35,"index":10478},"line":301,"code":"  it('should support all partitions', async () => {\n    options.region = 'cn-northwest-1';\n    awsProvider.getAccountInfo.restore();\n    providerGetAccountInfoStub = sinon.stub(awsProvider, 'getAccountInfo').resolves({\n      accountId: '123456',\n      partition: 'aws-cn'\n    });\n    context.state.service.provider.tags = {\n      'Containing Space': 'bar',\n      'bar': 'high-priority'\n    };\n    context.state.service.provider.stackTags = {\n      bar: 'low-priority',\n      num: 123\n    };\n    context.state.service.provider.tracing = {\n      apiGateway: true\n    };\n    context.state.service.provider.apiGateway = {\n      metrics: true\n    };\n    context.state.service.provider.logs = {\n      restApi: true\n    };\n    return updateStage.call(context).then(() => {\n      const patchOperations = [{\n        op: 'replace',\n        path: '/tracingEnabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/metrics/enabled',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/destinationArn',\n        value: 'arn:aws-cn:logs:cn-northwest-1:123456:log-group:/aws/api-gateway/my-service-dev'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/format',\n        value: 'requestId: $context.requestId, ip: $context.identity.sourceIp, caller: $context.identity.caller, user: $context.identity.user, requestTime: $context.requestTime, httpMethod: $context.httpMethod, resourcePath: $context.resourcePath, status: $context.status, protocol: $context.protocol, responseLength: $context.responseLength'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/dataTrace',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/loglevel',\n        value: 'INFO'\n      }];\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(6);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[3][1]).to.equal('updateStage');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev',\n        patchOperations\n      });\n      expect(providerRequestStub.args[4][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[4][1]).to.equal('tagResource');\n      expect(providerRequestStub.args[4][2]).to.deep.equal({\n        resourceArn: 'arn:aws-cn:apigateway:cn-northwest-1::/restapis/devRestApiId/stages/dev',\n        tags: {\n          'Containing Space': 'bar',\n          'bar': 'high-priority',\n          'num': '123'\n        }\n      });\n      expect(providerRequestStub.args[5][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[5][1]).to.equal('untagResource');\n      expect(providerRequestStub.args[5][2]).to.deep.equal({\n        resourceArn: 'arn:aws-cn:apigateway:cn-northwest-1::/restapis/devRestApiId/stages/dev',\n        tagKeys: ['old']\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should not perform any actions if settings are not configure","suites":["#updateStage()"],"updatePoint":{"line":390,"column":66,"index":13993},"line":390,"code":"  it('should not perform any actions if settings are not configure', async () => {\n    context.state.service.provider.tags = {\n      old: 'tag'\n    };\n    return updateStage.call(context).then(() => {\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(4);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('CloudWatchLogs');\n      expect(providerRequestStub.args[3][1]).to.equal('deleteLogGroup');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        logGroupName: '/aws/api-gateway/my-service-dev'\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should create a new stage and proceed as usual if none can be found","suites":["#updateStage()"],"updatePoint":{"line":416,"column":73,"index":15130},"line":416,"code":"  it('should create a new stage and proceed as usual if none can be found', async () => {\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    providerRequestStub.withArgs('APIGateway', 'getStage', {\n      restApiId: 'devRestApiId',\n      stageName: 'dev'\n    }).rejects();\n    providerRequestStub.withArgs('APIGateway', 'getDeployments', {\n      restApiId: 'devRestApiId',\n      limit: 500\n    }).resolves({\n      items: [{\n        id: 'someDeploymentId'\n      }]\n    });\n    providerRequestStub.withArgs('APIGateway', 'createStage', {\n      deploymentId: 'someDeploymentId',\n      restApiId: 'devRestApiId',\n      stageName: 'dev'\n    }).resolves();\n    return updateStage.call(context).then(() => {\n      const patchOperations = [{\n        op: 'replace',\n        path: '/tracingEnabled',\n        value: 'false'\n      }];\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(6);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[1][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[1][1]).to.equal('getDeployments');\n      expect(providerRequestStub.args[1][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        limit: 500\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[3][1]).to.equal('createStage');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        deploymentId: 'someDeploymentId',\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[4][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[4][1]).to.equal('updateStage');\n      expect(providerRequestStub.args[4][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev',\n        patchOperations\n      });\n      expect(providerRequestStub.args[5][0]).to.equal('CloudWatchLogs');\n      expect(providerRequestStub.args[5][1]).to.equal('deleteLogGroup');\n      expect(providerRequestStub.args[5][2]).to.deep.equal({\n        logGroupName: '/aws/api-gateway/my-service-dev'\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should ignore external api gateway","suites":["#updateStage()"],"updatePoint":{"line":484,"column":40,"index":17753},"line":484,"code":"  it('should ignore external api gateway', async () => {\n    context.state.service.provider.apiGateway = {\n      restApiId: 'foobarfoo1'\n    };\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    return updateStage.call(context).then(() => {\n      expect(context.isExternalRestApi).to.equal(true);\n      expect(context.apiGatewayRestApiId).to.equal(null);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should resolve custom APIGateway name","suites":["#updateStage()"],"updatePoint":{"line":496,"column":43,"index":18156},"line":496,"code":"  it('should resolve custom APIGateway name', async () => {\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    providerRequestStub.withArgs('APIGateway', 'getRestApis', {\n      limit: 500,\n      position: undefined\n    }).resolves({\n      items: [{\n        name: 'custom-api-gateway-name',\n        id: 'restapicus'\n      }]\n    });\n    providerRequestStub.withArgs('APIGateway', 'getDeployments', {\n      restApiId: 'restapicus',\n      limit: 500\n    }).resolves({\n      items: [{\n        id: 'someDeploymentId'\n      }]\n    });\n    providerRequestStub.withArgs('APIGateway', 'getStage', {\n      restApiId: 'restapicus',\n      stageName: 'dev'\n    }).resolves({\n      variables: {\n        old: 'tag'\n      }\n    });\n    context.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayRestApi.Properties.Name = 'custom-api-gateway-name';\n    context.state.service.provider.apiName = 'custom-api-gateway-name';\n    return updateStage.call(context).then(() => {\n      expect(context.apiGatewayRestApiId).to.equal('restapicus');\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should resolve custom APIGateway resource","suites":["#updateStage()"],"updatePoint":{"line":531,"column":47,"index":19253},"line":531,"code":"  it('should resolve custom APIGateway resource', async () => {\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    const resources = context.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    resources.CustomApiGatewayRestApi = resources.ApiGatewayRestApi;\n    delete resources.ApiGatewayRestApi;\n    resources.CustomApiGatewayRestApi.Properties.Name = 'custom-rest-api-name';\n    resources.ApiGatewayRestApiDeployment.Properties.RestApiId.Ref = 'CustomApiGatewayRestApi';\n    providerRequestStub.withArgs('APIGateway', 'getDeployments', {\n      restApiId: 'customRestApiId',\n      limit: 500\n    }).resolves({\n      items: [{\n        id: 'someDeploymentId'\n      }]\n    });\n    return updateStage.call(context).then(() => {\n      expect(context.apiGatewayRestApiId).to.equal('customRestApiId');\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should not resolve if the AWS::ApiGateway::Resource is not present","suites":["#updateStage()"],"updatePoint":{"line":552,"column":72,"index":20142},"line":552,"code":"  it('should not resolve if the AWS::ApiGateway::Resource is not present', async () => {\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    const resources = context.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    delete resources.ApiGatewayRestApi;\n    options.stage = 'prod';\n    return updateStage.call(context).then(() => {\n      expect(context.apiGatewayRestApiId).to.equal(null);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should resolve expected restApiId when beyond 500 APIs are deployed","suites":["#updateStage()"],"updatePoint":{"line":563,"column":73,"index":20600},"line":563,"code":"  it('should resolve expected restApiId when beyond 500 APIs are deployed', async () => {\n    context.state.service.provider.tracing = {\n      apiGateway: false\n    };\n    providerRequestStub.withArgs('APIGateway', 'getRestApis', {\n      limit: 500,\n      position: undefined\n    }).resolves({\n      items: [],\n      position: 'foobarfoo1'\n    });\n    providerRequestStub.withArgs('APIGateway', 'getRestApis', {\n      limit: 500,\n      position: 'foobarfoo1'\n    }).resolves({\n      items: [{\n        name: 'dev-my-service',\n        id: 'devRestApiId'\n      }]\n    });\n    return updateStage.call(context).then(() => {\n      expect(context.apiGatewayRestApiId).to.equal('devRestApiId');\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should update the stage with a custom APIGW log format if given","suites":["#updateStage()"],"updatePoint":{"line":605,"column":69,"index":22052},"line":605,"code":"  it('should update the stage with a custom APIGW log format if given', async () => {\n    context.state.service.provider.logs = {\n      restApi: {\n        format: 'requestId: $context.requestId'\n      }\n    };\n    return updateStage.call(context).then(() => {\n      const patchOperations = [{\n        op: 'replace',\n        path: '/accessLogSettings/destinationArn',\n        value: 'arn:aws:logs:us-east-1:123456:log-group:/aws/api-gateway/my-service-dev'\n      }, {\n        op: 'replace',\n        path: '/accessLogSettings/format',\n        value: 'requestId: $context.requestId'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/dataTrace',\n        value: 'true'\n      }, {\n        op: 'replace',\n        path: '/*/*/logging/loglevel',\n        value: 'INFO'\n      }];\n      expect(providerGetAccountInfoStub).to.be.calledOnce;\n      expect(providerRequestStub.args).to.have.length(4);\n      expect(providerRequestStub.args[0][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[0][1]).to.equal('getRestApis');\n      expect(providerRequestStub.args[0][2]).to.deep.equal({\n        limit: 500,\n        position: undefined\n      });\n      expect(providerRequestStub.args[2][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[2][1]).to.equal('getStage');\n      expect(providerRequestStub.args[2][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev'\n      });\n      expect(providerRequestStub.args[3][0]).to.equal('APIGateway');\n      expect(providerRequestStub.args[3][1]).to.equal('updateStage');\n      expect(providerRequestStub.args[3][2]).to.deep.equal({\n        restApiId: 'devRestApiId',\n        stageName: 'dev',\n        patchOperations\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should use the default log level if no log level is given","suites":["#updateStage()"],"updatePoint":{"line":677,"column":63,"index":24500},"line":677,"code":"  it('should use the default log level if no log level is given', () => {\n    return checkLogLevel(null, defaultApiGatewayLogLevel);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should update the stage with a custom APIGW log level if given ","suites":["#updateStage()"],"updatePoint":{"line":681,"column":82,"index":24700},"line":681,"code":"    it(`should update the stage with a custom APIGW log level if given ${logLevel}`, () => {\n      return checkLogLevel(logLevel, logLevel);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should disable execution logging when executionLogging is set to false","suites":["#updateStage()"],"updatePoint":{"line":685,"column":76,"index":24849},"line":685,"code":"  it('should disable execution logging when executionLogging is set to false', async () => {\n    context.state.service.provider.logs = {\n      restApi: {\n        executionLogging: false\n      }\n    };\n    return updateStage.call(context).then(() => {\n      const patchOperation = {\n        op: 'replace',\n        path: '/*/*/logging/loglevel',\n        value: 'OFF'\n      };\n      expectPatchOperation(patchOperation);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should disable existing access log settings when accessLogging is set to false","suites":["#updateStage()"],"updatePoint":{"line":700,"column":84,"index":25289},"line":700,"code":"  it('should disable existing access log settings when accessLogging is set to false', async () => {\n    context.state.service.provider.logs = {\n      restApi: {\n        accessLogging: false\n      }\n    };\n    return updateStage.call(context).then(() => {\n      const removeOperation = {\n        op: 'remove',\n        path: '/accessLogSettings'\n      };\n      expectPatchOperation(removeOperation);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should delete any existing CloudWatch LogGroup when accessLogging is set to false","suites":["#updateStage()"],"updatePoint":{"line":714,"column":87,"index":25705},"line":714,"code":"  it('should delete any existing CloudWatch LogGroup when accessLogging is set to false', async () => {\n    context.state.service.provider.logs = {\n      restApi: {\n        accessLogging: false\n      }\n    };\n    return updateStage.call(context).then(() => {\n      expect(providerRequestStub.args[4][0]).to.equal('CloudWatchLogs');\n      expect(providerRequestStub.args[4][1]).to.equal('deleteLogGroup');\n      expect(providerRequestStub.args[4][2]).to.deep.equal({\n        logGroupName: '/aws/api-gateway/my-service-dev'\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should disable tracing if fullExecutionData is set to false","suites":["#updateStage()"],"updatePoint":{"line":743,"column":65,"index":26620},"line":743,"code":"  it('should disable tracing if fullExecutionData is set to false', () => {\n    return checkDataTrace(false);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should enable tracing if fullExecutionData is set to true","suites":["#updateStage()"],"updatePoint":{"line":746,"column":63,"index":26734},"line":746,"code":"  it('should enable tracing if fullExecutionData is set to true', () => {\n    return checkDataTrace(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should correctly add and remove stage tags during update","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/updateStage.test.js"],"updatePoint":{"line":751,"column":62,"index":26959},"line":751,"code":"  it('should correctly add and remove stage tags during update', async () => {\n    const tagResourceStub = sinon.stub();\n    const untagResourceStub = sinon.stub();\n    await runServerless({\n      fixture: 'api-gateway',\n      command: 'deploy',\n      configExt: {\n        provider: {\n          apiName: 'test-api-name',\n          stackTags: {\n            key: 'value'\n          }\n        }\n      },\n      lastLifecycleHookName: 'aws:deploy:deploy:checkForChanges',\n      awsRequestStubMap: {\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          }\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws-us-gov:iam::999999999999:user/test'\n          }\n        },\n        Lambda: {\n          getFunction: {\n            Configuration: {\n              LastModified: '2020-05-20T15:34:16.494+0000'\n            }\n          }\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          headObject: {},\n          headBucket: {}\n        },\n        APIGateway: {\n          getRestApis: () => ({\n            items: [{\n              name: 'test-api-name',\n              id: 'api-id'\n            }]\n          }),\n          getDeployments: () => ({\n            items: [{\n              id: 'deployment-id'\n            }]\n          }),\n          getStage: () => ({\n            id: 'stage-id',\n            tags: {\n              'keytoremove': 'valuetoremove',\n              'aws:xxx': 'tokeep'\n            }\n          }),\n          tagResource: tagResourceStub,\n          untagResource: untagResourceStub\n        }\n      }\n    });\n    expect(tagResourceStub).to.have.been.calledOnce;\n    expect(tagResourceStub.args[0][0].tags).to.deep.equal({\n      key: 'value'\n    });\n    expect(untagResourceStub).to.have.been.calledOnce;\n    expect(untagResourceStub.args[0][0].tagKeys).to.deep.equal(['keytoremove']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should correctly resolve `apiId` during deployment","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/updateStage.test.js"],"updatePoint":{"line":832,"column":56,"index":29197},"line":832,"code":"  it('should correctly resolve `apiId` during deployment', async () => {\n    const {\n      serviceConfig,\n      servicePath,\n      updateConfig\n    } = await fixtures.setup('api-gateway');\n    const getDeploymentsStub = sinon.stub().returns({\n      items: [{\n        id: 'deployment-id'\n      }]\n    });\n    const stage = 'dev';\n    await updateConfig({\n      provider: {\n        apiGateway: {\n          shouldStartNameWithService: true\n        },\n        stackTags: {\n          key: 'value'\n        }\n      }\n    });\n    await runServerless({\n      command: 'deploy',\n      cwd: servicePath,\n      options: {\n        stage\n      },\n      lastLifecycleHookName: 'after:deploy:deploy',\n      awsRequestStubMap: {\n        APIGateway: {\n          createStage: {},\n          getDeployments: getDeploymentsStub,\n          getRestApis: {\n            items: [{\n              id: 'api-id',\n              name: `${serviceConfig.service}-${stage}`\n            }]\n          },\n          tagResource: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              ResourceStatus: 'UPDATE_COMPLETE',\n              ResourceType: 'AWS::CloudFormation::Stack'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          },\n          listStackResources: {},\n          validateTemplate: {},\n          deleteChangeSet: {},\n          createChangeSet: {},\n          executeChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          }\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: {},\n          headBucket: {}\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws-us-gov:iam::999999999999:user/test'\n          }\n        }\n      }\n    });\n    expect(getDeploymentsStub).to.have.been.calledOnce;\n    expect(getDeploymentsStub.args[0][0].restApiId).to.equal('api-id');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should use stage defined under apiGateway config if passed","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/updateStage.test.js"],"updatePoint":{"line":922,"column":64,"index":31654},"line":922,"code":"  it('should use stage defined under apiGateway config if passed', async () => {\n    const {\n      serviceConfig,\n      servicePath,\n      updateConfig\n    } = await fixtures.setup('api-gateway');\n    const getDeploymentsStub = sinon.stub().returns({\n      items: [{\n        id: 'deployment-id'\n      }]\n    });\n    const getStageStub = sinon.stub().resolves({});\n    const createStageStub = sinon.stub();\n    const updateStageStub = sinon.stub();\n    const stage = 'dev';\n    await updateConfig({\n      provider: {\n        stage,\n        apiGateway: {\n          shouldStartNameWithService: true,\n          stage: 'customStage'\n        },\n        stackTags: {\n          key: 'value'\n        },\n        logs: {\n          restApi: true\n        }\n      }\n    });\n    await runServerless({\n      command: 'deploy',\n      cwd: servicePath,\n      lastLifecycleHookName: 'after:deploy:deploy',\n      awsRequestStubMap: {\n        APIGateway: {\n          createStage: createStageStub,\n          getStage: getStageStub,\n          updateStage: updateStageStub,\n          getDeployments: getDeploymentsStub,\n          getRestApis: {\n            items: [{\n              id: 'api-id',\n              name: `${serviceConfig.service}-${stage}`\n            }]\n          },\n          tagResource: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              ResourceStatus: 'UPDATE_COMPLETE',\n              ResourceType: 'AWS::CloudFormation::Stack'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          },\n          listStackResources: {},\n          validateTemplate: {},\n          deleteChangeSet: {},\n          createChangeSet: {},\n          executeChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          }\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: {},\n          headBucket: {}\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws-us-gov:iam::999999999999:user/test'\n          }\n        }\n      }\n    });\n    expect(getStageStub.args[0][0].stageName).to.be.equal('customStage');\n    expect(createStageStub.args[0][0].stageName).to.be.equal('customStage');\n    expect(updateStageStub.args[0][0].stageName).to.be.equal('customStage');\n    const accessLogSettingsDestinationArn = updateStageStub.args[0][0].patchOperations.filter(op => op.path === '/accessLogSettings/destinationArn')[0].value;\n    expect(accessLogSettingsDestinationArn).to.be.a('string').and.satisfy(arn => arn.endsWith('customStage'));\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should update stage, and remove log group using stage defined under apiGateway config if configured such","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/hack/updateStage.test.js"],"updatePoint":{"line":1022,"column":110,"index":34808},"line":1022,"code":"  it('should update stage, and remove log group using stage defined under apiGateway config if configured such', async () => {\n    const {\n      serviceConfig,\n      servicePath,\n      updateConfig\n    } = await fixtures.setup('api-gateway');\n    const getDeploymentsStub = sinon.stub().returns({\n      items: [{\n        id: 'deployment-id'\n      }]\n    });\n    const updateStageStub = sinon.stub();\n    const deleteLogGroupStub = sinon.stub();\n    const stage = 'dev';\n    await updateConfig({\n      provider: {\n        stage,\n        apiGateway: {\n          shouldStartNameWithService: true,\n          stage: 'customStage'\n        },\n        stackTags: {\n          key: 'value'\n        },\n        tracing: {\n          apiGateway: true\n        }\n      }\n    });\n    await runServerless({\n      command: 'deploy',\n      cwd: servicePath,\n      lastLifecycleHookName: 'after:deploy:deploy',\n      awsRequestStubMap: {\n        APIGateway: {\n          updateStage: updateStageStub,\n          getStage: 'dev',\n          getDeployments: getDeploymentsStub,\n          getRestApis: {\n            items: [{\n              id: 'api-id',\n              name: `${serviceConfig.service}-${stage}`\n            }]\n          },\n          tagResource: {}\n        },\n        CloudFormation: {\n          describeStacks: {\n            Stacks: [{}]\n          },\n          describeStackEvents: {\n            StackEvents: [{\n              ResourceStatus: 'UPDATE_COMPLETE',\n              ResourceType: 'AWS::CloudFormation::Stack'\n            }]\n          },\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          },\n          listStackResources: {},\n          validateTemplate: {},\n          deleteChangeSet: {},\n          createChangeSet: {},\n          executeChangeSet: {},\n          describeChangeSet: {\n            ChangeSetName: 'new-service-dev-change-set',\n            ChangeSetId: 'some-change-set-id',\n            StackName: 'new-service-dev',\n            Status: 'CREATE_COMPLETE'\n          }\n        },\n        S3: {\n          listObjectsV2: {\n            Contents: []\n          },\n          upload: {},\n          headBucket: {}\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws-us-gov:iam::999999999999:user/test'\n          }\n        },\n        CloudWatchLogs: {\n          deleteLogGroup: deleteLogGroupStub\n        }\n      }\n    });\n    expect(updateStageStub.args[0][0].stageName).to.be.equal('customStage');\n    expect(deleteLogGroupStub.args[0][0].logGroupName).to.be.a('string').and.satisfy(logGroupName => logGroupName.endsWith('customStage'));\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/hack/update-stage.test.js","skipped":false,"dir":"test"},{"name":"should have request parameters defined when they are set","suites":["#compileMethods()"],"updatePoint":{"line":64,"column":62,"index":2225},"line":64,"code":"  it('should have request parameters defined when they are set', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS',\n        request: {\n          parameters: {\n            'method.request.querystring.foo': true,\n            'method.request.querystring.bar': false,\n            'method.request.header.foo': true,\n            'method.request.header.bar': false,\n            'method.request.path.foo': true,\n            'method.request.path.bar': false\n          }\n        },\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.header.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.header.bar']).to.equal(false);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.querystring.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.querystring.bar']).to.equal(false);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.path.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.path.bar']).to.equal(false);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should not have integration RequestParameters when no request parameters are set","suites":["#compileMethods()"],"updatePoint":{"line":98,"column":86,"index":4298},"line":98,"code":"  it('should not have integration RequestParameters when no request parameters are set', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration).to.not.have.key('RequestParameters');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should create method resources when http events given","suites":["#compileMethods()"],"updatePoint":{"line":110,"column":59,"index":4799},"line":110,"code":"  it('should create method resources when http events given', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post'\n      }\n    }, {\n      functionName: 'Second',\n      http: {\n        method: 'get',\n        path: 'users/list'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Type).to.equal('AWS::ApiGateway::Method');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Type).to.equal('AWS::ApiGateway::Method');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support AWS integration type","suites":["#compileMethods()"],"updatePoint":{"line":128,"column":41,"index":5519},"line":128,"code":"  it('should support AWS integration type', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS',\n        request: {\n          parameters: {\n            'method.request.querystring.foo': true,\n            'method.request.querystring.bar': false,\n            'method.request.path.foo': true,\n            'method.request.path.bar': false,\n            'method.request.header.foo': true,\n            'method.request.header.bar': false\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('AWS');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters).to.deep.equal({\n      'integration.request.querystring.foo': 'method.request.querystring.foo',\n      'integration.request.querystring.bar': 'method.request.querystring.bar',\n      'integration.request.path.foo': 'method.request.path.foo',\n      'integration.request.path.bar': 'method.request.path.bar',\n      'integration.request.header.foo': 'method.request.header.foo',\n      'integration.request.header.bar': 'method.request.header.bar'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support AWS_PROXY integration type","suites":["#compileMethods()"],"updatePoint":{"line":158,"column":47,"index":6972},"line":158,"code":"  it('should support AWS_PROXY integration type', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS_PROXY'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('AWS_PROXY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP integration type","suites":["#compileMethods()"],"updatePoint":{"line":170,"column":42,"index":7452},"line":170,"code":"  it('should support HTTP integration type', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'HTTP',\n        request: {\n          uri: 'https://example.com',\n          parameters: {\n            'method.request.querystring.foo': true,\n            'method.request.querystring.bar': false,\n            'method.request.path.foo': true,\n            'method.request.path.bar': false,\n            'method.request.header.foo': true,\n            'method.request.header.bar': false\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('HTTP');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Uri).to.equal('https://example.com');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.IntegrationHttpMethod).to.equal('POST');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates).to.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters).to.deep.equal({\n      'integration.request.querystring.foo': 'method.request.querystring.foo',\n      'integration.request.querystring.bar': 'method.request.querystring.bar',\n      'integration.request.path.foo': 'method.request.path.foo',\n      'integration.request.path.bar': 'method.request.path.bar',\n      'integration.request.header.foo': 'method.request.header.foo',\n      'integration.request.header.bar': 'method.request.header.bar'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP integration type with custom request options","suites":["#compileMethods()"],"updatePoint":{"line":204,"column":70,"index":9554},"line":204,"code":"  it('should support HTTP integration type with custom request options', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'HTTP',\n        request: {\n          uri: 'https://example.com',\n          method: 'put'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('HTTP');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Uri).to.equal('https://example.com');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.IntegrationHttpMethod).to.equal('PUT');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP_PROXY integration type","suites":["#compileMethods()"],"updatePoint":{"line":222,"column":48,"index":10512},"line":222,"code":"  it('should support HTTP_PROXY integration type', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'HTTP_PROXY',\n        request: {\n          uri: 'https://example.com',\n          method: 'patch',\n          parameters: {\n            'method.request.querystring.foo': true,\n            'method.request.querystring.bar': false,\n            'method.request.path.foo': true,\n            'method.request.path.bar': false,\n            'method.request.header.foo': true,\n            'method.request.header.bar': false\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('HTTP_PROXY');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Uri).to.equal('https://example.com');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.IntegrationHttpMethod).to.equal('PATCH');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters).to.deep.equal({\n      'integration.request.querystring.foo': 'method.request.querystring.foo',\n      'integration.request.querystring.bar': 'method.request.querystring.bar',\n      'integration.request.path.foo': 'method.request.path.foo',\n      'integration.request.path.bar': 'method.request.path.bar',\n      'integration.request.header.foo': 'method.request.header.foo',\n      'integration.request.header.bar': 'method.request.header.bar'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should support MOCK integration type","suites":["#compileMethods()"],"updatePoint":{"line":256,"column":42,"index":12431},"line":256,"code":"  it('should support MOCK integration type', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'MOCK'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Type).to.equal('MOCK');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add request parameter when async config is used","suites":["#compileMethods()"],"updatePoint":{"line":268,"column":60,"index":12919},"line":268,"code":"  it('should add request parameter when async config is used', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        async: true\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters['integration.request.header.X-Amz-Invocation-Type']).to.equal(\"'Event'\");\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add request parameter when integration type is AWS_PROXY and async","suites":["#compileMethods()"],"updatePoint":{"line":280,"column":79,"index":13486},"line":280,"code":"  it('should add request parameter when integration type is AWS_PROXY and async', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS_PROXY',\n        async: true\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters['integration.request.header.X-Amz-Invocation-Type']).to.equal(\"'Event'\");\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add request parameter mapped value when explicitly defined","suites":["#compileMethods()"],"updatePoint":{"line":293,"column":71,"index":14079},"line":293,"code":"  it('should add request parameter mapped value when explicitly defined', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'HTTP_PROXY',\n        request: {\n          uri: 'https://example.com',\n          parameters: {\n            'method.request.querystring.foo': {\n              required: true,\n              mappedValue: 'fooValue'\n            },\n            'method.request.querystring.bar': {\n              required: false,\n              mappedValue: 'barValue'\n            },\n            'method.request.path.foo': {\n              required: true,\n              mappedValue: 'fooValue'\n            },\n            'method.request.path.bar': {\n              required: false,\n              mappedValue: 'barValue'\n            },\n            'method.request.header.foo': {\n              required: true,\n              mappedValue: 'fooValue'\n            },\n            'method.request.header.bar': {\n              required: false,\n              mappedValue: 'barValue'\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.header.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.header.bar']).to.equal(false);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.querystring.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.querystring.bar']).to.equal(false);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.path.foo']).to.equal(true);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.path.bar']).to.equal(false);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestParameters).to.deep.equal({\n      'integration.request.querystring.foo': 'fooValue',\n      'integration.request.querystring.bar': 'barValue',\n      'integration.request.path.foo': 'fooValue',\n      'integration.request.path.bar': 'barValue',\n      'integration.request.header.foo': 'fooValue',\n      'integration.request.header.bar': 'barValue'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set required to true when omitted from mapped value","suites":["#compileMethods()"],"updatePoint":{"line":347,"column":64,"index":17038},"line":347,"code":"  it('should set required to true when omitted from mapped value', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      command: 'package',\n      fixture: 'function',\n      configExt: {\n        functions: {\n          basic: {\n            events: [{\n              http: {\n                path: 'users/create',\n                method: 'post',\n                integration: 'HTTP_PROXY',\n                request: {\n                  uri: 'https://example.com',\n                  parameters: {\n                    querystrings: {\n                      foo: {\n                        mappedValue: 'bar'\n                      }\n                    }\n                  }\n                }\n              }\n            }]\n          }\n        }\n      }\n    });\n    expect(cfTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.RequestParameters['method.request.querystring.foo']).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer config for AWS_IAM","suites":["#compileMethods()"],"updatePoint":{"line":379,"column":46,"index":17946},"line":379,"code":"  it('should set authorizer config for AWS_IAM', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        authorizer: {\n          type: 'AWS_IAM'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('AWS_IAM');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set custom authorizer config with authorizerId","suites":["#compileMethods()"],"updatePoint":{"line":393,"column":59,"index":18467},"line":393,"code":"  it('should set custom authorizer config with authorizerId', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        authorizer: {\n          type: 'COGNITO_USER_POOLS',\n          authorizerId: 'gy7lyj'\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('COGNITO_USER_POOLS');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizerId).to.equal('gy7lyj');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer config if given as ARN string","suites":["#compileMethods()"],"updatePoint":{"line":409,"column":57,"index":19220},"line":409,"code":"  it('should set authorizer config if given as ARN string', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'Authorizer'\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('CUSTOM');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizerId.Ref).to.equal('AuthorizerApiGatewayAuthorizer');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer config for a cognito user pool when given authorizer arn","suites":["#compileMethods()"],"updatePoint":{"line":425,"column":84,"index":20002},"line":425,"code":"  it('should set authorizer config for a cognito user pool when given authorizer arn', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n          scopes: ['myapp/read', 'myapp/write']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('COGNITO_USER_POOLS');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationScopes).to.contain('myapp/read');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizerId.Ref).to.equal('AuthorizerApiGatewayAuthorizer');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json']).to.not.match(/undefined/);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer config for a cognito user pool when given authorizerId Ref","suites":["#compileMethods()"],"updatePoint":{"line":445,"column":86,"index":21334},"line":445,"code":"  it('should set authorizer config for a cognito user pool when given authorizerId Ref', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          type: 'COGNITO_USER_POOLS',\n          authorizerId: {\n            Ref: 'CognitoAuthorizer'\n          },\n          scopes: ['myapp/read', 'myapp/write']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('COGNITO_USER_POOLS');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationScopes).to.contain('myapp/read');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizerId.Ref).to.equal('CognitoAuthorizer');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json']).to.not.match(/undefined/);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer config for a cognito user pool when given cognito arn object","suites":["#compileMethods()"],"updatePoint":{"line":468,"column":88,"index":22694},"line":468,"code":"  it('should set authorizer config for a cognito user pool when given cognito arn object', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          type: 'COGNITO_USER_POOLS',\n          arn: {\n            'Fn::GetAtt': ['CognitoUserPool', 'Arn']\n          },\n          scopes: ['myapp/read', 'myapp/write']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationType).to.equal('COGNITO_USER_POOLS');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizationScopes).to.contain('myapp/read');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.AuthorizerId.Ref).to.equal('AuthorizerApiGatewayAuthorizer');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json']).to.not.match(/undefined/);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should not scopes for a cognito user pool when given empty scopes array","suites":["#compileMethods()"],"updatePoint":{"line":491,"column":77,"index":24063},"line":491,"code":"  it('should not scopes for a cognito user pool when given empty scopes array', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          type: 'COGNITO_USER_POOLS',\n          authorizerId: {\n            Ref: 'CognitoAuthorizer'\n          },\n          scopes: []\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties).to.not.have.property('AuthorizationScopes');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should pass on import functions for a cognito user pool authorizer scopes","suites":["#compileMethods()"],"updatePoint":{"line":511,"column":79,"index":24777},"line":511,"code":"  it('should pass on import functions for a cognito user pool authorizer scopes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          type: 'COGNITO_USER_POOLS',\n          authorizerId: {\n            Ref: 'CognitoAuthorizer'\n          },\n          scopes: [{\n            'Fn::ImportValue': 'ImportedScope'\n          }]\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    const resource = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost;\n    expect(resource.Properties.AuthorizationScopes[0]).to.deep.equal({\n      'Fn::ImportValue': 'ImportedScope'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set claims for a cognito user pool","suites":["#compileMethods()"],"updatePoint":{"line":536,"column":47,"index":25593},"line":536,"code":"  it('should set claims for a cognito user pool', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n          claims: ['email']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    const jsonRequestTemplatesString = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json'];\n    const cognitoPoolClaimsRegex = /\"cognitoPoolClaims\"\\s*:\\s*(\\{[^}]*\\})/;\n    const cognitoPoolClaimsString = jsonRequestTemplatesString.match(cognitoPoolClaimsRegex)[1];\n    const cognitoPoolClaims = JSON.parse(cognitoPoolClaimsString);\n    expect(cognitoPoolClaims.email).to.equal('$context.authorizer.claims.email');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set multiple claims for a cognito user pool","suites":["#compileMethods()"],"updatePoint":{"line":557,"column":56,"index":26606},"line":557,"code":"  it('should set multiple claims for a cognito user pool', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n          claims: ['email', 'gender']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    const jsonRequestTemplatesString = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json'];\n    const cognitoPoolClaimsRegex = /\"cognitoPoolClaims\"\\s*:\\s*(\\{[^}]*\\})/;\n    const cognitoPoolClaimsString = jsonRequestTemplatesString.match(cognitoPoolClaimsRegex)[1];\n    const cognitoPoolClaims = JSON.parse(cognitoPoolClaimsString);\n    expect(cognitoPoolClaims.email).to.equal('$context.authorizer.claims.email');\n    expect(cognitoPoolClaims.gender).to.equal('$context.authorizer.claims.gender');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should properly set claims for custom properties inside the cognito user pool","suites":["#compileMethods()"],"updatePoint":{"line":579,"column":83,"index":27740},"line":579,"code":"  it('should properly set claims for custom properties inside the cognito user pool', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n          claims: ['email', 'custom:score']\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    const jsonRequestTemplatesString = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json'];\n    const cognitoPoolClaimsRegex = /\"cognitoPoolClaims\"\\s*:\\s*(\\{[^}]*\\})/;\n    const cognitoPoolClaimsString = jsonRequestTemplatesString.match(cognitoPoolClaimsRegex)[1];\n    const cognitoPoolClaims = JSON.parse(cognitoPoolClaimsString);\n    expect(cognitoPoolClaims.email).to.equal('$context.authorizer.claims.email');\n    expect(cognitoPoolClaims.score).to.equal(\"$context.authorizer.claims['custom:score']\");\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should replace the extra claims in the template if there are none","suites":["#compileMethods()"],"updatePoint":{"line":601,"column":71,"index":28876},"line":601,"code":"  it('should replace the extra claims in the template if there are none', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ'\n        },\n        integration: 'AWS',\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.RequestTemplates['application/json']).to.not.match(/extraCognitoPoolClaims/);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should not create method resources when http events are not given","suites":["#compileMethods()"],"updatePoint":{"line":617,"column":71,"index":29565},"line":617,"code":"  it('should not create method resources when http events are not given', () => {\n    awsCompileApigEvents.validated.events = [];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should update the method logical ids array","suites":["#compileMethods()"],"updatePoint":{"line":622,"column":48,"index":29842},"line":622,"code":"  it('should update the method logical ids array', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post'\n      }\n    }, {\n      functionName: 'Second',\n      http: {\n        method: 'get',\n        path: 'users/list'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.apiGatewayMethodLogicalIds.length).to.equal(2);\n    expect(awsCompileApigEvents.apiGatewayMethodLogicalIds).to.deep.equal(['ApiGatewayMethodUsersCreatePost', 'ApiGatewayMethodUsersListGet']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set api key as required if private endpoint","suites":["#compileMethods()"],"updatePoint":{"line":640,"column":56,"index":30452},"line":640,"code":"  it('should set api key as required if private endpoint', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        private: true\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.ApiKeyRequired).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set api key as not required if private property is not specified","suites":["#compileMethods()"],"updatePoint":{"line":652,"column":77,"index":30947},"line":652,"code":"  it('should set api key as not required if private property is not specified', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.ApiKeyRequired).to.equal(false);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set the correct lambdaUri","suites":["#compileMethods()"],"updatePoint":{"line":663,"column":38,"index":31381},"line":663,"code":"  it('should set the correct lambdaUri', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post'\n      }\n    }, {\n      functionName: 'Second',\n      http: {\n        method: 'get',\n        path: 'users/list'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.Uri).to.deep.equal({\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':apigateway:', {\n        Ref: 'AWS::Region'\n      }, ':lambda:path/2015-03-31/functions/', {\n        'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n      }, '/invocations']]\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.Uri).to.deep.equal({\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':apigateway:', {\n        Ref: 'AWS::Region'\n      }, ':lambda:path/2015-03-31/functions/', {\n        'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n      }, '/invocations']]\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"Should point target alias if set","suites":["#compileMethods()"],"updatePoint":{"line":697,"column":38,"index":32609},"line":697,"code":"  it('Should point target alias if set', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'Provisioned',\n      http: {\n        method: 'get',\n        path: 'users/list'\n      }\n    }];\n    serverless.service.functions.Provisioned = {\n      targetAlias: {\n        name: 'provisioned',\n        logicalId: 'IrrelevantLogicalId'\n      }\n    };\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.Uri).to.deep.equal({\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':apigateway:', {\n        Ref: 'AWS::Region'\n      }, ':lambda:path/2015-03-31/functions/', {\n        'Fn::GetAtt': ['ProvisionedLambdaFunction', 'Arn']\n      }, ':', 'provisioned', '/invocations']]\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add CORS origins to method only when CORS is enabled","suites":["#compileMethods()"],"updatePoint":{"line":722,"column":65,"index":33505},"line":722,"code":"  it('should add CORS origins to method only when CORS is enabled', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS',\n        cors: {\n          origin: 'http://example.com'\n        },\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }, {\n      functionName: 'Second',\n      http: {\n        method: 'get',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }, {\n      functionName: 'Third',\n      http: {\n        path: 'users/update',\n        method: 'PUT',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        },\n        cors: {\n          origins: ['*']\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.equal(\"'http://example.com'\");\n\n    // CORS not enabled!\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.not.equal(\"'*'\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersUpdatePut.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Origin']).to.equal(\"'*'\");\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set CORS allowCredentials to method only when specified","suites":["#compileMethods()"],"updatePoint":{"line":779,"column":68,"index":35454},"line":779,"code":"  it('should set CORS allowCredentials to method only when specified', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS',\n        cors: {\n          origin: 'http://example.com',\n          allowCredentials: true\n        },\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }, {\n      functionName: 'Second',\n      http: {\n        method: 'get',\n        path: 'users/list',\n        integration: 'AWS',\n        cors: {\n          origin: 'http://example.com'\n        },\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.equal('true');\n\n    // allowCredentials not enabled\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Access-Control-Allow-Credentials']).to.not.equal('true');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should setup a default \"application/json\" template","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":823,"column":58,"index":36972},"line":823,"code":"    it('should setup a default \"application/json\" template', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'Second',\n        http: {\n          method: 'get',\n          path: 'users/list',\n          integration: 'AWS',\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.RequestTemplates['application/json']).to.have.length.above(0);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should setup a default \"application/x-www-form-urlencoded\" template","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":842,"column":75,"index":37671},"line":842,"code":"    it('should setup a default \"application/x-www-form-urlencoded\" template', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'Second',\n        http: {\n          method: 'get',\n          path: 'users/list',\n          integration: 'AWS',\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.RequestTemplates['application/x-www-form-urlencoded']).to.have.length.above(0);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should use defined pass-through behavior","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":861,"column":48,"index":38360},"line":861,"code":"    it('should use defined pass-through behavior', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          request: {\n            passThrough: 'WHEN_NO_TEMPLATES'\n          },\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.PassthroughBehavior).to.equal('WHEN_NO_TEMPLATES');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should use defined content-handling behavior (request)","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":883,"column":62,"index":39113},"line":883,"code":"    it('should use defined content-handling behavior (request)', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          request: {\n            contentHandling: 'CONVERT_TO_TEXT'\n          },\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.ContentHandling).to.equal('CONVERT_TO_TEXT');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should use defined response content-handling behavior for 2XX only (response)","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":905,"column":85,"index":39885},"line":905,"code":"    it('should use defined response content-handling behavior for 2XX only (response)', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          response: {\n            contentHandling: 'CONVERT_TO_BINARY',\n            statusCodes: {\n              200: {\n                pattern: ''\n              },\n              400: {\n                pattern: '400'\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ContentHandling).to.equal('CONVERT_TO_BINARY');\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ContentHandling).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set custom request templates","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":929,"column":43,"index":40896},"line":929,"code":"    it('should set custom request templates', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          request: {\n            template: {\n              'template/1': '{ \"stage\" : \"$context.stage\" }',\n              'template/2': '{ \"httpMethod\" : \"$context.httpMethod\" }'\n            }\n          },\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.RequestTemplates['template/1']).to.equal('{ \"stage\" : \"$context.stage\" }');\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.RequestTemplates['template/2']).to.equal('{ \"httpMethod\" : \"$context.httpMethod\" }');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should be possible to overwrite default request templates","suites":["#compileMethods()","when dealing with request configuration"],"updatePoint":{"line":955,"column":65,"index":42043},"line":955,"code":"    it('should be possible to overwrite default request templates', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          request: {\n            template: {\n              'application/json': 'overwritten-request-template-content'\n            }\n          },\n          response: {\n            statusCodes: {\n              200: {\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.RequestTemplates['application/json']).to.equal('overwritten-request-template-content');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set the custom headers","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":981,"column":37,"index":42942},"line":981,"code":"    it('should set the custom headers', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          response: {\n            statusCodes: {\n              200: {\n                pattern: '',\n                headers: {\n                  'Content-Type': \"'text/plain'\",\n                  'My-Custom-Header': 'my/custom/header'\n                }\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Content-Type']).to.equal(\"'text/plain'\");\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.My-Custom-Header']).to.equal('my/custom/header');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should set the custom template","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1005,"column":38,"index":44074},"line":1005,"code":"    it('should set the custom template', () => {\n      awsCompileApigEvents.validated.events = [{\n        functionName: 'First',\n        http: {\n          method: 'GET',\n          path: 'users/list',\n          integration: 'AWS',\n          response: {\n            statusCodes: {\n              200: {\n                template: \"$input.path('$.foo')\",\n                pattern: ''\n              }\n            }\n          }\n        }\n      }];\n      awsCompileApigEvents.compileMethods();\n      expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal(\"$input.path('$.foo')\");\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add method responses for different status codes","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1026,"column":60,"index":44847},"line":1026,"code":"  it('should add method responses for different status codes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'get',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            },\n            202: {\n              pattern: 'foo'\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.MethodResponses[0].StatusCode).to.equal('200');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.MethodResponses[1].StatusCode).to.equal('202');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add integration responses for different status codes","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1049,"column":65,"index":45724},"line":1049,"code":"  it('should add integration responses for different status codes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'get',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              pattern: ''\n            },\n            202: {\n              pattern: 'foo'\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1]).to.deep.equal({\n      StatusCode: '202',\n      SelectionPattern: 'foo',\n      ResponseParameters: {},\n      ResponseTemplates: {},\n      ContentHandling: undefined\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0]).to.deep.equal({\n      StatusCode: '200',\n      SelectionPattern: '',\n      ResponseParameters: {},\n      ResponseTemplates: {},\n      ContentHandling: undefined\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add fall back headers and template to statusCodes","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1084,"column":62,"index":46917},"line":1084,"code":"  it('should add fall back headers and template to statusCodes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'GET',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          headers: {\n            'Content-Type': 'text/csv'\n          },\n          template: 'foo',\n          statusCodes: {\n            400: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal('foo');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Content-Type']).to.equal('text/csv');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add custom response codes","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1108,"column":38,"index":47917},"line":1108,"code":"  it('should add custom response codes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'GET',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              pattern: '',\n              template: \"$input.path('$.foo')\"\n            },\n            404: {\n              pattern: '.*\"statusCode\":404,.*',\n              template: \"$input.path('$.errorMessage')\",\n              headers: {\n                'Content-Type': 'text/html'\n              }\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal(\"$input.path('$.foo')\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].SelectionPattern).to.equal('');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ResponseTemplates['application/json']).to.equal(\"$input.path('$.errorMessage')\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].SelectionPattern).to.equal('.*\"statusCode\":404,.*');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ResponseParameters['method.response.header.Content-Type']).to.equal('text/html');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should add multiple response templates for a custom response codes","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1139,"column":72,"index":49839},"line":1139,"code":"  it('should add multiple response templates for a custom response codes', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'GET',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          statusCodes: {\n            200: {\n              template: \"$input.path('$.foo')\",\n              headers: {\n                'Content-Type': 'text/csv'\n              }\n            },\n            404: {\n              pattern: '.*\"statusCode\":404,.*',\n              template: {\n                'application/json': \"$input.path('$.errorMessage')\",\n                'application/xml': \"$input.path('$.xml.errorMessage')\"\n              },\n              headers: {\n                'Content-Type': 'text/html'\n              }\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseTemplates['application/json']).to.equal(\"$input.path('$.foo')\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].SelectionPattern).to.equal('');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ResponseParameters['method.response.header.Content-Type']).to.equal('text/csv');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ResponseTemplates['application/json']).to.equal(\"$input.path('$.errorMessage')\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ResponseTemplates['application/xml']).to.equal(\"$input.path('$.xml.errorMessage')\");\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].SelectionPattern).to.equal('.*\"statusCode\":404,.*');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[1].ResponseParameters['method.response.header.Content-Type']).to.equal('text/html');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should use defined content-handling behavior","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1177,"column":50,"index":52443},"line":1177,"code":"  it('should use defined content-handling behavior', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        method: 'get',\n        path: 'users/list',\n        integration: 'AWS',\n        response: {\n          contentHandling: 'CONVERT_TO_BINARY',\n          statusCodes: {\n            200: {\n              pattern: ''\n            }\n          }\n        }\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersListGet.Properties.Integration.IntegrationResponses[0].ContentHandling).to.equal('CONVERT_TO_BINARY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should handle root resource methods","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1197,"column":41,"index":53128},"line":1197,"code":"  it('should handle root resource methods', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: '',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodGet.Properties.ResourceId).to.deep.equal({\n      'Fn::GetAtt': ['ApiGatewayRestApi', 'RootResourceId']\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should include operation id as OperationName when it is set","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1210,"column":65,"index":53627},"line":1210,"code":"  it('should include operation id as OperationName when it is set', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS',\n        operationId: 'createUser'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties.OperationName).to.equal('createUser');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should not include operation id when it is not set","suites":["#compileMethods()","when dealing with response configuration"],"updatePoint":{"line":1223,"column":56,"index":54148},"line":1223,"code":"  it('should not include operation id when it is not set', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'users/create',\n        method: 'post',\n        integration: 'AWS'\n      }\n    }];\n    awsCompileApigEvents.compileMethods();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayMethodUsersCreatePost.Properties).to.not.have.key('OperationName');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should delete the default \"application/x-www-form-urlencoded\" template if it's overriden with null","suites":["#compileMethods v2()","request configuration"],"updatePoint":{"line":1238,"column":107,"index":54770},"line":1238,"code":"    it('should delete the default \"application/x-www-form-urlencoded\" template if it\\'s overriden with null', async () => {\n      const {\n        awsNaming,\n        cfTemplate: {\n          Resources: cfResources\n        }\n      } = await runServerless({\n        fixture: 'api-gateway',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                http: {\n                  integration: 'AWS',\n                  request: {\n                    template: {\n                      'application/x-www-form-urlencoded': null\n                    }\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const apiGatewayMethodConfig = cfResources[awsNaming.getMethodLogicalId('Foo', 'GET')];\n      expect(apiGatewayMethodConfig.Properties.Integration.RequestTemplates).to.not.have.property('application/x-www-form-urlencoded');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set method authorization properties","suites":["#compileMethods v2()","method authorization"],"updatePoint":{"line":1269,"column":60,"index":55722},"line":1269,"code":"    it('should correctly set method authorization properties', async () => {\n      const {\n        awsNaming,\n        cfTemplate: {\n          Resources: cfResources\n        }\n      } = await runServerless({\n        fixture: 'api-gateway',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                http: {\n                  authorizer: {\n                    type: 'REQUEST',\n                    authorizerId: 'some-id'\n                  }\n                }\n              }, {\n                http: {\n                  authorizer: {\n                    type: 'TOKEN',\n                    authorizerId: 'another-id'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const apiGatewayRequestMethodConfig = cfResources[awsNaming.getMethodLogicalId('Foo', 'GET')];\n      expect(apiGatewayRequestMethodConfig.Properties.AuthorizationType).to.equal('CUSTOM');\n      expect(apiGatewayRequestMethodConfig.Properties.AuthorizerId).to.deep.equal('some-id');\n      const apiGatewayTokenMethodConfig = cfResources[awsNaming.getMethodLogicalId('SomeDashpost', 'POST')];\n      expect(apiGatewayTokenMethodConfig.Properties.AuthorizationType).to.equal('CUSTOM');\n      expect(apiGatewayTokenMethodConfig.Properties.AuthorizerId).to.deep.equal('another-id');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"should depends on permission resource","suites":["#compileMethods v2()","method authorization"],"updatePoint":{"line":1308,"column":43,"index":57090},"line":1308,"code":"  it('should depends on permission resource', async () => {\n    const {\n      awsNaming,\n      cfTemplate: {\n        Resources: cfResources\n      }\n    } = await runServerless({\n      command: 'package',\n      fixture: 'api-gateway'\n    });\n    const FooApiGatewayMethodConfig = cfResources[awsNaming.getMethodLogicalId('Foo', 'GET')];\n    const OtherApiGatewayMethodConfig = cfResources[awsNaming.getMethodLogicalId('BarMarkoVar', 'GET')];\n    const permNameFoo = awsNaming.getLambdaApiGatewayPermissionLogicalId('Foo');\n    const permNameOther = awsNaming.getLambdaApiGatewayPermissionLogicalId('Other');\n    expect(FooApiGatewayMethodConfig.DependsOn).to.include(permNameFoo);\n    expect(OtherApiGatewayMethodConfig.DependsOn).to.include(permNameOther);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/index.test.js","skipped":false,"dir":"test"},{"name":"Should set required headers, querystring, and path params","suites":["ApiGatewayEvents","Request parameters"],"updatePoint":{"line":69,"column":65,"index":2040},"line":69,"code":"    it('Should set required headers, querystring, and path params', () => {\n      const methodResourceProps = cfResources[naming.getMethodLogicalId('Foo', 'get')].Properties;\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.header.someRequiredHeader', true);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.header.someOptionalHeader', false);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.header.someRequiredMappedHeader', true);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.header.someOptionalMappedHeader', false);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.path.somePathParam', true);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.path.someMappedPathParam', true);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.querystring.someQueryString', true);\n      expect(methodResourceProps.RequestParameters).to.have.property('method.request.querystring.someMappedQueryString', true);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/request-parameters.test.js","skipped":false,"dir":"test"},{"name":"Should map integration request values","suites":["ApiGatewayEvents","Request parameters"],"updatePoint":{"line":80,"column":45,"index":3179},"line":80,"code":"    it('Should map integration request values', () => {\n      const methodResourceProps = cfResources[naming.getMethodLogicalId('Foo', 'get')].Properties;\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.header.someRequiredHeader', 'method.request.header.someRequiredHeader');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.header.someOptionalHeader', 'method.request.header.someOptionalHeader');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.header.someRequiredMappedHeader', 'someRequiredValue');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.header.someOptionalMappedHeader', 'someOptionalValue');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.path.somePathParam', 'method.request.path.somePathParam');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.path.someMappedPathParam', 'someValue');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.querystring.someQueryString', 'method.request.querystring.someQueryString');\n      expect(methodResourceProps.Integration.RequestParameters).to.have.property('integration.request.querystring.someMappedQueryString', 'someValue');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/method/request-parameters.test.js","skipped":false,"dir":"test"},{"name":"should create limited permission resource scope to REST API","suites":["#awsCompilePermissions()"],"updatePoint":{"line":22,"column":65,"index":936},"line":22,"code":"  it('should create limited permission resource scope to REST API', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'foo/bar',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'FirstLambdaFunction',\n      resourceName: 'FooBar',\n      event: {\n        http: {\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'First'\n      }\n    }];\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionApiGateway.Properties.FunctionName['Fn::GetAtt'][0]).to.equal('FirstLambdaFunction');\n    const deepObj = {\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':execute-api:', {\n        Ref: 'AWS::Region'\n      }, ':', {\n        Ref: 'AWS::AccountId'\n      }, ':', {\n        Ref: 'ApiGatewayRestApi'\n      }, '/*/*']]\n    };\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionApiGateway.Properties.SourceArn).to.deep.equal(deepObj);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should create limited permission resource scope to REST API with restApiId provided","suites":["#awsCompilePermissions()"],"updatePoint":{"line":57,"column":89,"index":2230},"line":57,"code":"  it('should create limited permission resource scope to REST API with restApiId provided', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: 'xxxxx'\n    };\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'foo/bar',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'FirstLambdaFunction',\n      resourceName: 'FooBar',\n      event: {\n        http: {\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'First'\n      }\n    }];\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionApiGateway.Properties.FunctionName['Fn::GetAtt'][0]).to.equal('FirstLambdaFunction');\n    const deepObj = {\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':execute-api:', {\n        Ref: 'AWS::Region'\n      }, ':', {\n        Ref: 'AWS::AccountId'\n      }, ':', 'xxxxx', '/*/*']]\n    };\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionApiGateway.Properties.SourceArn).to.deep.equal(deepObj);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should setup permissions for an alias in case of provisioned function","suites":["#awsCompilePermissions()"],"updatePoint":{"line":93,"column":75,"index":3575},"line":93,"code":"  it('should setup permissions for an alias in case of provisioned function', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: 'xxxxx'\n    };\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        path: 'foo/bar',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'FirstLambdaFunction',\n      lambdaAliasName: 'provisioned',\n      resourceName: 'FooBar',\n      event: {\n        http: {\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'First'\n      }\n    }];\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionApiGateway.Properties.FunctionName['Fn::Join'][1][1]).to.equal('provisioned');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should create limited permission resources for authorizers","suites":["#awsCompilePermissions()"],"updatePoint":{"line":120,"column":64,"index":4535},"line":120,"code":"  it('should create limited permission resources for authorizers', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: {\n            'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n          }\n        },\n        path: 'foo/bar',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'AuthorizerLambdaFunction',\n      event: {\n        http: {\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'authorizer'\n      }\n    }, {\n      lambdaLogicalId: 'FirstLambdaFunction',\n      resourceName: 'FooBar',\n      event: {\n        http: {\n          authorizer: {\n            name: 'authorizer',\n            arn: {\n              'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n            }\n          },\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'First'\n      }\n    }];\n    const deepObj = {\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':execute-api:', {\n        Ref: 'AWS::Region'\n      }, ':', {\n        Ref: 'AWS::AccountId'\n      }, ':', {\n        Ref: 'ApiGatewayRestApi'\n      }, '/*/*']]\n    };\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerLambdaPermissionApiGateway.Properties.FunctionName).to.deep.equal({\n      'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerLambdaPermissionApiGateway.Properties.SourceArn).to.deep.equal(deepObj);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should create limited permission resources for aliased authorizers","suites":["#awsCompilePermissions()"],"updatePoint":{"line":178,"column":72,"index":6369},"line":178,"code":"  it('should create limited permission resources for aliased authorizers', () => {\n    awsCompileApigEvents.validated.events = [{\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: {\n            'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n          }\n        },\n        path: 'foo/bar',\n        method: 'post'\n      }\n    }];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'AuthorizerLambdaFunction',\n      lambdaAliasName: 'provisioned',\n      event: {\n        http: {\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'authorizer'\n      }\n    }, {\n      lambdaLogicalId: 'FirstLambdaFunction',\n      resourceName: 'FooBar',\n      event: {\n        http: {\n          authorizer: {\n            name: 'authorizer',\n            arn: {\n              'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n            }\n          },\n          path: 'foo/bar',\n          method: 'post'\n        },\n        functionName: 'First'\n      }\n    }];\n    const deepObj = {\n      'Fn::Join': ['', ['arn:', {\n        Ref: 'AWS::Partition'\n      }, ':execute-api:', {\n        Ref: 'AWS::Region'\n      }, ':', {\n        Ref: 'AWS::AccountId'\n      }, ':', {\n        Ref: 'ApiGatewayRestApi'\n      }, '/*/*']]\n    };\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerLambdaPermissionApiGateway.Properties.FunctionName).to.deep.equal({\n      'Fn::Join': [':', [{\n        'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n      }, 'provisioned']]\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.AuthorizerLambdaPermissionApiGateway.Properties.SourceArn).to.deep.equal(deepObj);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should not create permission resources when http events are not given","suites":["#awsCompilePermissions()"],"updatePoint":{"line":239,"column":75,"index":8298},"line":239,"code":"  it('should not create permission resources when http events are not given', () => {\n    awsCompileApigEvents.validated.events = [];\n    awsCompileApigEvents.permissionMapping = [];\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should not create permission resources when the authorizer is managed externally","suites":["#awsCompilePermissions()"],"updatePoint":{"line":245,"column":86,"index":8666},"line":245,"code":"  it('should not create permission resources when the authorizer is managed externally', () => {\n    const event = {\n      functionName: 'First',\n      http: {\n        authorizer: {\n          name: 'authorizer',\n          arn: {\n            'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n          },\n          managedExternally: true\n        },\n        path: 'foo/bar',\n        method: 'post'\n      }\n    };\n    awsCompileApigEvents.validated.events = [event];\n    awsCompileApigEvents.apiGatewayRestApiLogicalId = 'ApiGatewayRestApi';\n    awsCompileApigEvents.permissionMapping = [{\n      lambdaLogicalId: 'FirstLambdaFunction',\n      resourceName: 'FooBar',\n      event\n    }];\n\n    // the important thing in this object is that it does *not* contain\n    // a permission allowing API Gateway to call the authorizer. If\n    // managedExternally was false (as it is in other tests), then the\n    // permission would be created.\n    const deepObj = {\n      FirstLambdaPermissionApiGateway: {\n        DependsOn: undefined,\n        Properties: {\n          Action: 'lambda:InvokeFunction',\n          FunctionName: {\n            'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n          },\n          Principal: 'apigateway.amazonaws.com',\n          SourceArn: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':execute-api:', {\n              Ref: 'AWS::Region'\n            }, ':', {\n              Ref: 'AWS::AccountId'\n            }, ':', {\n              Ref: 'ApiGatewayRestApi'\n            }, '/*/*']]\n          }\n        },\n        Type: 'AWS::Lambda::Permission'\n      }\n    };\n    awsCompileApigEvents.compilePermissions();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal(deepObj);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"Should process schema from apiGateway provider, full config","suites":["#compileRequestValidators() - schemas"," reusable schemas "],"updatePoint":{"line":27,"column":67,"index":779},"line":27,"code":"    it('Should process schema from apiGateway provider, full config', () => {\n      const modelLogicalId = naming.getModelLogicalId('TestModel');\n      const modelResource = cfResources[modelLogicalId];\n      expect(modelResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'application/json',\n          Description: 'Test Description',\n          Name: 'TestModel',\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Schema: {\n            $schema: 'http://json-schema.org/draft-04/schema#',\n            definitions: {},\n            properties: {\n              id: {\n                pattern: '[0-9]+',\n                title: 'ID for object',\n                type: 'number'\n              }\n            },\n            required: ['id'],\n            title: 'Test Validation Schema',\n            type: 'object'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"Should process schema from apiGateway provider, missing name and description","suites":["#compileRequestValidators() - schemas"," reusable schemas "],"updatePoint":{"line":56,"column":84,"index":1731},"line":56,"code":"    it('Should process schema from apiGateway provider, missing name and description', () => {\n      const modelLogicalId = naming.getModelLogicalId('TestModelSimple');\n      const modelResource = cfResources[modelLogicalId];\n      expect(modelResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'application/json',\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Schema: {\n            $schema: 'http://json-schema.org/draft-04/schema#',\n            definitions: {},\n            properties: {\n              id: {\n                pattern: '[0-9]+',\n                title: 'ID for object',\n                type: 'number'\n              }\n            },\n            required: ['id'],\n            title: 'Test Validation Schema',\n            type: 'object'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"Should not create a model that is never referenced in the events","suites":["#compileRequestValidators() - schemas"," reusable schemas "],"updatePoint":{"line":83,"column":72,"index":2605},"line":83,"code":"    it('Should not create a model that is never referenced in the events', () => {\n      const modelLogicalId = naming.getModelLogicalId('UnusedModel');\n      const modelResource = cfResources[modelLogicalId] || null;\n      expect(modelResource).to.be.null;\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should reference model from provider:apiGateway:requestSchemas","suites":["#compileRequestValidators() - schemas","functionConfiguration"],"updatePoint":{"line":94,"column":70,"index":3148},"line":94,"code":"    it('should reference model from provider:apiGateway:requestSchemas', () => {\n      const modelLogicalId = naming.getModelLogicalId('test-model');\n      const validatorLogicalId = naming.getValidatorLogicalId();\n      const methodLogicalId = naming.getMethodLogicalId('TestDashmodelDashfull', 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource.Properties).to.have.property('RequestModels');\n      expect(methodResource.Properties).to.have.property('RequestValidatorId');\n      expect(methodResource.Properties.RequestModels['application/json']).to.deep.equal({\n        Ref: modelLogicalId\n      });\n      expect(methodResource.Properties.RequestValidatorId).to.deep.equal({\n        Ref: validatorLogicalId\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should create a new model from a schema only","suites":["#compileRequestValidators() - schemas","functionConfiguration"],"updatePoint":{"line":108,"column":52,"index":3901},"line":108,"code":"    it('should create a new model from a schema only', () => {\n      const modelLogicalId = naming.getEndpointModelLogicalId('TestDashdirectDashsimple', 'get', 'application/json');\n      const validatorLogicalId = naming.getValidatorLogicalId();\n      const methodLogicalId = naming.getMethodLogicalId('TestDashdirectDashsimple', 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource.Properties).to.have.property('RequestModels');\n      expect(methodResource.Properties).to.have.property('RequestValidatorId');\n      expect(methodResource.Properties.RequestModels['application/json']).to.deep.equal({\n        Ref: modelLogicalId\n      });\n      expect(methodResource.Properties.RequestValidatorId).to.deep.equal({\n        Ref: validatorLogicalId\n      });\n      const modelResource = cfResources[modelLogicalId];\n      expect(modelResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'application/json',\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Description: undefined,\n          Name: undefined,\n          Schema: {\n            $schema: 'http://json-schema.org/draft-04/schema#',\n            definitions: {},\n            properties: {\n              id: {\n                pattern: '[0-9]+',\n                title: 'ID for object',\n                type: 'number'\n              }\n            },\n            required: ['id'],\n            title: 'Test Validation Schema',\n            type: 'object'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should create a new model from a schema with name and description","suites":["#compileRequestValidators() - schemas","functionConfiguration"],"updatePoint":{"line":148,"column":73,"index":5497},"line":148,"code":"    it('should create a new model from a schema with name and description', () => {\n      const modelLogicalId = naming.getEndpointModelLogicalId('TestDashdirectDashfull', 'get', 'application/json');\n      const validatorLogicalId = naming.getValidatorLogicalId();\n      const methodLogicalId = naming.getMethodLogicalId('TestDashdirectDashfull', 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource.Properties).to.have.property('RequestModels');\n      expect(methodResource.Properties).to.have.property('RequestValidatorId');\n      expect(methodResource.Properties.RequestModels['application/json']).to.deep.equal({\n        Ref: modelLogicalId\n      });\n      expect(methodResource.Properties.RequestValidatorId).to.deep.equal({\n        Ref: validatorLogicalId\n      });\n      const modelResource = cfResources[modelLogicalId];\n      expect(modelResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'application/json',\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Name: 'TestMethodModel',\n          Description: 'Test Method Model Desc',\n          Schema: {\n            $schema: 'http://json-schema.org/draft-04/schema#',\n            definitions: {},\n            properties: {\n              id: {\n                pattern: '[0-9]+',\n                title: 'ID for object',\n                type: 'number'\n              }\n            },\n            required: ['id'],\n            title: 'Test Validation Schema',\n            type: 'object'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should allow multiple schemas to be defined","suites":["#compileRequestValidators() - schemas","functionConfiguration"],"updatePoint":{"line":188,"column":51,"index":7090},"line":188,"code":"    it('should allow multiple schemas to be defined', () => {\n      const modelJsonLogicalId = naming.getEndpointModelLogicalId('TestDashmultiple', 'get', 'application/json');\n      const modelPlainTextLogicalId = naming.getEndpointModelLogicalId('TestDashmultiple', 'get', 'text/plain');\n      const validatorLogicalId = naming.getValidatorLogicalId();\n      const methodLogicalId = naming.getMethodLogicalId('TestDashmultiple', 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource.Properties).to.have.property('RequestModels');\n      expect(methodResource.Properties).to.have.property('RequestValidatorId');\n      expect(methodResource.Properties.RequestModels['application/json']).to.deep.equal({\n        Ref: modelJsonLogicalId\n      });\n      expect(methodResource.Properties.RequestModels['text/plain']).to.deep.equal({\n        Ref: modelPlainTextLogicalId\n      });\n      expect(methodResource.Properties.RequestValidatorId).to.deep.equal({\n        Ref: validatorLogicalId\n      });\n      const modelJsonResource = cfResources[modelJsonLogicalId];\n      const modelPlainTextResource = cfResources[modelPlainTextLogicalId];\n      expect(modelJsonResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'application/json',\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Description: undefined,\n          Name: undefined,\n          Schema: {\n            $schema: 'http://json-schema.org/draft-04/schema#',\n            definitions: {},\n            properties: {\n              id: {\n                pattern: '[0-9]+',\n                title: 'ID for object',\n                type: 'number'\n              }\n            },\n            required: ['id'],\n            title: 'Test Validation Schema',\n            type: 'object'\n          }\n        }\n      });\n      expect(modelPlainTextResource).to.deep.equal({\n        Type: 'AWS::ApiGateway::Model',\n        Properties: {\n          ContentType: 'text/plain',\n          Description: undefined,\n          Name: undefined,\n          RestApiId: {\n            Ref: 'ApiGatewayRestApi'\n          },\n          Schema: 'foo'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should create validator with that includes `service` and `stage`","suites":["#compileRequestValidators() - schemas","functionConfiguration"],"updatePoint":{"line":245,"column":72,"index":9338},"line":245,"code":"    it('should create validator with that includes `service` and `stage`', () => {\n      const validatorLogicalId = naming.getValidatorLogicalId();\n      const validatorResource = cfResources[validatorLogicalId];\n      expect(validatorResource.Properties.Name).to.equal(`${serviceName}-${stage} | Validate request body and querystring parameters`);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"no validator: ","suites":["#compileRequestValidators() - parameters"],"updatePoint":{"line":271,"column":29,"index":10387},"line":271,"code":"    it(`no validator: ${name}`, () => {\n      const methodLogicalId = naming.getMethodLogicalId(naming.getNormalizedResourceName(name), 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource).to.exist;\n      expect(methodResource.Properties).to.not.have.property('RequestValidatorId');\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"with validator: ","suites":["#compileRequestValidators() - parameters"],"updatePoint":{"line":279,"column":31,"index":10763},"line":279,"code":"    it(`with validator: ${name}`, () => {\n      const methodLogicalId = naming.getMethodLogicalId(naming.getNormalizedResourceName(name), 'get');\n      const methodResource = cfResources[methodLogicalId];\n      expect(methodResource).to.exist;\n      expect(methodResource.Properties).to.have.deep.property('RequestValidatorId', {\n        Ref: validatorLogicalId\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/request-validator.test.js","skipped":false,"dir":"test"},{"name":"should construct the correct (sorted) resourcePaths array","suites":["#compileResources()"],"updatePoint":{"line":25,"column":63,"index":979},"line":25,"code":"  it('should construct the correct (sorted) resourcePaths array', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: '',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'foo/bar',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'bar/-',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/foo',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}/foobar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{foo_id}',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{foo_id}/foobar',\n        method: 'GET'\n      }\n    }];\n    expect(Object.keys(awsCompileApigEvents.getResourcePaths())).to.deep.equal(['foo', 'foo/bar', 'bar', 'bar/-', 'bar/foo', 'bar/{id}', 'bar/{id}/foobar', 'bar/{foo_id}', 'bar/{foo_id}/foobar']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should reference the appropriate ParentId","suites":["#compileResources()"],"updatePoint":{"line":69,"column":47,"index":1928},"line":69,"code":"  it('should reference the appropriate ParentId', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'foo/bar',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'bar/-',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/foo',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}/foobar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFoo.Properties.ParentId['Fn::GetAtt'][0]).to.equal('ApiGatewayRestApi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFoo.Properties.ParentId['Fn::GetAtt'][1]).to.equal('RootResourceId');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFooBar.Properties.ParentId.Ref).to.equal('ApiGatewayResourceFoo');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceBarIdVar.Properties.ParentId.Ref).to.equal('ApiGatewayResourceBar');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should construct the correct resourceLogicalIds object","suites":["#compileResources()"],"updatePoint":{"line":102,"column":60,"index":3249},"line":102,"code":"  it('should construct the correct resourceLogicalIds object', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: '',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'foo',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'foo/{foo_id}/bar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'baz/foo',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    const expectedResourceLogicalIds = {\n      'baz': 'ApiGatewayResourceBaz',\n      'baz/foo': 'ApiGatewayResourceBazFoo',\n      'foo': 'ApiGatewayResourceFoo',\n      'foo/{foo_id}': 'ApiGatewayResourceFooFooidVar',\n      'foo/{foo_id}/bar': 'ApiGatewayResourceFooFooidVarBar'\n    };\n    Object.keys(expectedResourceLogicalIds).forEach(path => {\n      expect(awsCompileApigEvents.apiGatewayResources[path].resourceLogicalId).equal(expectedResourceLogicalIds[path]);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should construct resourceLogicalIds that do not collide","suites":["#compileResources()"],"updatePoint":{"line":136,"column":61,"index":4204},"line":136,"code":"  it('should construct resourceLogicalIds that do not collide', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'foo/bar',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'foo/{bar}',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    const expectedResourceLogicalIds = {\n      'foo': 'ApiGatewayResourceFoo',\n      'foo/bar': 'ApiGatewayResourceFooBar',\n      'foo/{bar}': 'ApiGatewayResourceFooBarVar'\n    };\n    Object.keys(expectedResourceLogicalIds).forEach(path => {\n      expect(awsCompileApigEvents.apiGatewayResources[path].resourceLogicalId).equal(expectedResourceLogicalIds[path]);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should set the appropriate Pathpart","suites":["#compileResources()"],"updatePoint":{"line":158,"column":41,"index":4882},"line":158,"code":"  it('should set the appropriate Pathpart', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'foo/{bar}',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'foo/bar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'foo/{bar}/baz',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFooBar.Properties.PathPart).to.equal('bar');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFooBarVar.Properties.PathPart).to.equal('{bar}');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFooBarVarBaz.Properties.PathPart).to.equal('baz');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should handle root resource references","suites":["#compileResources()"],"updatePoint":{"line":180,"column":44,"index":5779},"line":180,"code":"  it('should handle root resource references', () => {\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: '',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should create child resources only if there are predefined parent resources","suites":["#compileResources()"],"updatePoint":{"line":190,"column":81,"index":6160},"line":190,"code":"  it('should create child resources only if there are predefined parent resources', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: '6fyzt1pfpk',\n      restApiRootResourceId: 'z5d4qh4oqi',\n      restApiResources: {\n        '/foo': 'axcybf2i39',\n        '/users': 'zxcvbnmasd',\n        '/users/friends': 'fcasdoojp1',\n        '/groups': 'iuoyiusduo'\n      }\n    };\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'foo/bar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'foo/bar',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'foo/bar',\n        method: 'DELETE'\n      }\n    }, {\n      http: {\n        path: 'bar/-',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/foo',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}/foobar',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'bar/{id}',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/friends/comments',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/me/posts',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'groups/categories',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    try {\n      awsCompileApigEvents.getResourceId('users/{userId}');\n      throw new Error('Expected API Gateway resource not found error, got success');\n    } catch (e) {\n      expect(e.message).to.equal('Can not find API Gateway resource from path users/{userId}');\n    }\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFoo).to.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceBar.Properties.RestApiId).to.equal('6fyzt1pfpk');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceBar.Properties.ParentId).to.equal('z5d4qh4oqi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFooBar.Properties.ParentId).to.equal('axcybf2i39');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceBarIdVar.Properties.ParentId.Ref).to.equal('ApiGatewayResourceBar');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceUsersMePosts).not.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceUsersFriendsComments.Properties.ParentId).to.equal('fcasdoojp1');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should not create any child resources if all resources exists","suites":["#compileResources()"],"updatePoint":{"line":267,"column":67,"index":8931},"line":267,"code":"  it('should not create any child resources if all resources exists', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: '6fyzt1pfpk',\n      restApiRootResourceId: 'z5d4qh4oqi',\n      restApiResources: {\n        'foo': 'axcybf2i39',\n        'users': 'zxcvbnmasd',\n        'users/friends': 'fcasdoojp1',\n        'users/is/this/a/long/path': 'sadvgpoujk'\n      }\n    };\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'foo',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/friends',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/is/this/a/long/path',\n        method: 'GET'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceFoo).to.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceUsers).to.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceUsersFriends).to.equal(undefined);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.ApiGatewayResourceUsersIsThis).to.equal(undefined);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should throw error if parent of existing resources is required","suites":["#compileResources()"],"updatePoint":{"line":305,"column":68,"index":10368},"line":305,"code":"  it('should throw error if parent of existing resources is required', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: '6fyzt1pfpk',\n      restApiRootResourceId: 'z5d4qh4oqi',\n      restApiResources: {\n        'users/friends': 'fcasdoojp1'\n      }\n    };\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/friends/{friendId}',\n        method: 'GET'\n      }\n    }];\n    expect(() => awsCompileApigEvents.compileResources()).to.throw(Error, 'Resource ID for path users is required');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should named all method paths if all resources are predefined","suites":["#compileResources()"],"updatePoint":{"line":326,"column":67,"index":11007},"line":326,"code":"  it('should named all method paths if all resources are predefined', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: '6fyzt1pfpk',\n      restApiRootResourceId: 'z5d4qh4oqi',\n      restApiResources: {\n        'users/friends': 'fcasdoojp1',\n        'users/friends/{id}': 'fcasdoojp1'\n      }\n    };\n    awsCompileApigEvents.validated.events = [{\n      http: {\n        path: 'users/friends',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/friends',\n        method: 'POST'\n      }\n    }, {\n      http: {\n        path: 'users/friends',\n        method: 'DELETE'\n      }\n    }, {\n      http: {\n        path: 'users/friends/{id}',\n        method: 'GET'\n      }\n    }, {\n      http: {\n        path: 'users/friends/{id}',\n        method: 'POST'\n      }\n    }];\n    awsCompileApigEvents.compileResources();\n    expect(Object.keys(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).every(k => ['ApiGatewayMethodundefinedGet', 'ApiGatewayMethodundefinedPost'].indexOf(k) === -1)).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/resources.test.js","skipped":false,"dir":"test"},{"name":"should create a REST API resource","suites":["#compileRestApi()"],"updatePoint":{"line":39,"column":39,"index":1305},"line":39,"code":"  it('should create a REST API resource', () => {\n    awsCompileApigEvents.compileRestApi();\n    const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.ApiGatewayRestApi).to.deep.equal({\n      Type: 'AWS::ApiGateway::RestApi',\n      Properties: {\n        BinaryMediaTypes: undefined,\n        DisableExecuteApiEndpoint: undefined,\n        Name: 'dev-new-service',\n        EndpointConfiguration: {\n          Types: ['EDGE']\n        },\n        Policy: ''\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should create a REST API resource with resource policy","suites":["#compileRestApi()"],"updatePoint":{"line":55,"column":60,"index":1875},"line":55,"code":"  it('should create a REST API resource with resource policy', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      resourcePolicy: [{\n        Effect: 'Allow',\n        Principal: '*',\n        Action: 'execute-api:Invoke',\n        Resource: ['execute-api:/*/*/*'],\n        Condition: {\n          IpAddress: {\n            'aws:SourceIp': ['123.123.123.123']\n          }\n        }\n      }]\n    };\n    awsCompileApigEvents.compileRestApi();\n    const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.ApiGatewayRestApi).to.deep.equal({\n      Type: 'AWS::ApiGateway::RestApi',\n      Properties: {\n        Name: 'dev-new-service',\n        BinaryMediaTypes: undefined,\n        DisableExecuteApiEndpoint: undefined,\n        EndpointConfiguration: {\n          Types: ['EDGE']\n        },\n        Policy: {\n          Version: '2012-10-17',\n          Statement: [{\n            Effect: 'Allow',\n            Principal: '*',\n            Action: 'execute-api:Invoke',\n            Resource: ['execute-api:/*/*/*'],\n            Condition: {\n              IpAddress: {\n                'aws:SourceIp': ['123.123.123.123']\n              }\n            }\n          }]\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should provide open policy if no policy specified","suites":["#compileRestApi()"],"updatePoint":{"line":97,"column":55,"index":3150},"line":97,"code":"  it('should provide open policy if no policy specified', () => {\n    const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    awsCompileApigEvents.compileRestApi();\n    expect(resources.ApiGatewayRestApi).to.deep.equal({\n      Type: 'AWS::ApiGateway::RestApi',\n      Properties: {\n        Name: 'dev-new-service',\n        BinaryMediaTypes: undefined,\n        DisableExecuteApiEndpoint: undefined,\n        EndpointConfiguration: {\n          Types: ['EDGE']\n        },\n        Policy: ''\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should ignore REST API resource creation if there is predefined restApi config","suites":["#compileRestApi()"],"updatePoint":{"line":113,"column":84,"index":3744},"line":113,"code":"  it('should ignore REST API resource creation if there is predefined restApi config', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      restApiId: '6fyzt1pfpk',\n      restApiRootResourceId: 'z5d4qh4oqi'\n    };\n    awsCompileApigEvents.compileRestApi();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should set binary media types if defined at the apiGateway provider config level","suites":["#compileRestApi()"],"updatePoint":{"line":121,"column":86,"index":4159},"line":121,"code":"  it('should set binary media types if defined at the apiGateway provider config level', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      binaryMediaTypes: ['*/*']\n    };\n    awsCompileApigEvents.compileRestApi();\n    const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources.ApiGatewayRestApi).to.deep.equal({\n      Type: 'AWS::ApiGateway::RestApi',\n      Properties: {\n        BinaryMediaTypes: ['*/*'],\n        DisableExecuteApiEndpoint: undefined,\n        EndpointConfiguration: {\n          Types: ['EDGE']\n        },\n        Name: 'dev-new-service',\n        Policy: ''\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should throw error if endpointType property is not PRIVATE and vpcEndpointIds property is [id1]","suites":["#compileRestApi()"],"updatePoint":{"line":140,"column":101,"index":4875},"line":140,"code":"  it('should throw error if endpointType property is not PRIVATE and vpcEndpointIds property is [id1]', () => {\n    awsCompileApigEvents.serverless.service.provider.endpointType = 'Testing';\n    awsCompileApigEvents.serverless.service.provider.vpcEndpointIds = ['id1'];\n    expect(() => awsCompileApigEvents.compileRestApi()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should not disable the default execute-api endpoint by default","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/restApi.test.js"],"updatePoint":{"line":147,"column":68,"index":5285},"line":147,"code":"  it('should not disable the default execute-api endpoint by default', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package'\n    });\n    const resource = cfTemplate.Resources.ApiGatewayRestApi;\n    expect(resource.Properties.DisableExecuteApiEndpoint).to.equal(undefined);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.apiGateway.disableDefaultEndpoint`","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/restApi.test.js"],"updatePoint":{"line":157,"column":65,"index":5635},"line":157,"code":"  it('should support `provider.apiGateway.disableDefaultEndpoint`', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            disableDefaultEndpoint: true\n          }\n        }\n      }\n    });\n    const resource = cfTemplate.Resources.ApiGatewayRestApi;\n    expect(resource.Properties.DisableExecuteApiEndpoint).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.apiGateway.resourcePolicy[].Principal.AWS with Fn::If`","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/restApi.test.js"],"updatePoint":{"line":174,"column":85,"index":6135},"line":174,"code":"  it('should support `provider.apiGateway.resourcePolicy[].Principal.AWS with Fn::If`', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            resourcePolicy: [{\n              Effect: 'Allow',\n              Principal: {\n                AWS: {\n                  'Fn::If': ['Condition', 'FirstVal', 'SecondVal']\n                }\n              },\n              Action: 'execute-api:Invoke',\n              Resource: ['execute-api:/*/*/*']\n            }]\n          }\n        }\n      }\n    });\n    const resource = cfTemplate.Resources.ApiGatewayRestApi;\n    expect(resource.Properties.Policy.Statement[0].Principal.AWS).to.deep.equal({\n      'Fn::If': ['Condition', 'FirstVal', 'SecondVal']\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.apiGateway.minimumCompressionSize to be set to 0`","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/restApi.test.js"],"updatePoint":{"line":202,"column":80,"index":6980},"line":202,"code":"  it('should support `provider.apiGateway.minimumCompressionSize to be set to 0`', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            minimumCompressionSize: 0\n          }\n        }\n      }\n    });\n    const resource = cfTemplate.Resources.ApiGatewayRestApi;\n    expect(resource.Properties.MinimumCompressionSize).to.equal(0);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.apiGateway.description`","suites":["lib/plugins/aws/package/compile/events/apiGateway/lib/restApi.test.js"],"updatePoint":{"line":219,"column":54,"index":7440},"line":219,"code":"  it('should support `provider.apiGateway.description`', async () => {\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            description: 'API Test DEV'\n          }\n        }\n      }\n    });\n    const resource = cfTemplate.Resources.ApiGatewayRestApi;\n    expect(resource.Properties.Description).to.equal('API Test DEV');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/rest-api.test.js","skipped":false,"dir":"test"},{"name":"should create a dedicated stage resource if tracing is configured","suites":["#compileStage()","tracing"],"line":64,"code":"    it.skip('should create a dedicated stage resource if tracing is configured', async () => awsCompileApigEvents.compileStage().then(() => {","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":true,"dir":"test"},{"name":"should NOT create a dedicated stage resource if tracing is not enabled","suites":["#compileStage()","tracing"],"updatePoint":{"line":84,"column":78,"index":3306},"line":84,"code":"    it('should NOT create a dedicated stage resource if tracing is not enabled', async () => {\n      awsCompileApigEvents.serverless.service.provider.tracing = {};\n      return awsCompileApigEvents.compileStage().then(() => {\n        const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n\n        // eslint-disable-next-line\n        expect(resources[stageLogicalId]).not.to.exist;\n        expect(resources[awsCompileApigEvents.apiGatewayDeploymentLogicalId]).to.deep.equal({\n          Properties: {\n            StageName: stage\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should create a dedicated stage resource if provider.stackTags is configured","suites":["#compileStage()","tags"],"line":100,"code":"    it.skip('should create a dedicated stage resource if provider.stackTags is configured', async () => {","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":true,"dir":"test"},{"name":"should create a dedicated stage resource if provider.tags is configured","suites":["#compileStage()","tags"],"line":128,"code":"    it.skip('should create a dedicated stage resource if provider.tags is configured', async () => {","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":true,"dir":"test"},{"name":"should override provider.stackTags by provider.tags","suites":["#compileStage()","tags"],"line":156,"code":"    it.skip('should override provider.stackTags by provider.tags', async () => {","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":true,"dir":"test"},{"name":"should create a dedicated stage resource if logs are configured","suites":["#compileStage()","logs"],"line":202,"code":"    it.skip('should create a dedicated stage resource if logs are configured', async () => awsCompileApigEvents.compileStage().then(() => {","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":true,"dir":"test"},{"name":"should create a Log Group resource","suites":["#compileStage()","logs"],"updatePoint":{"line":235,"column":42,"index":9044},"line":235,"code":"    it('should create a Log Group resource', async () => {\n      return awsCompileApigEvents.compileStage().then(() => {\n        const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(resources[logGroupLogicalId]).to.deep.equal({\n          Type: 'AWS::Logs::LogGroup',\n          Properties: {\n            LogGroupName: '/aws/api-gateway/my-service-dev'\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should set log retention if provider.logRetentionInDays is set","suites":["#compileStage()","logs"],"updatePoint":{"line":246,"column":70,"index":9536},"line":246,"code":"    it('should set log retention if provider.logRetentionInDays is set', async () => {\n      serverless.service.provider.logRetentionInDays = 30;\n      return awsCompileApigEvents.compileStage().then(() => {\n        const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(resources[logGroupLogicalId]).to.deep.equal({\n          Type: 'AWS::Logs::LogGroup',\n          Properties: {\n            LogGroupName: '/aws/api-gateway/my-service-dev',\n            RetentionInDays: serverless.service.provider.logRetentionInDays\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure CloudWatch role custom resource","suites":["#compileStage()","logs"],"updatePoint":{"line":259,"column":53,"index":10147},"line":259,"code":"    it('should ensure CloudWatch role custom resource', async () => {\n      return awsCompileApigEvents.compileStage().then(() => {\n        const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(_.isObject(resources[awsCompileApigEvents.provider.naming.getCustomResourceApiGatewayAccountCloudWatchRoleResourceLogicalId()])).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should skip CloudWatch role custom resource when restApi.roleManagedExternally is set","suites":["#compileStage()","logs"],"updatePoint":{"line":265,"column":93,"index":10614},"line":265,"code":"    it('should skip CloudWatch role custom resource when restApi.roleManagedExternally is set', async () => {\n      awsCompileApigEvents.serverless.service.provider.logs.restApi = {\n        roleManagedExternally: true\n      };\n      return awsCompileApigEvents.compileStage().then(() => {\n        const resources = awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(_.isObject(resources[awsCompileApigEvents.provider.naming.getCustomResourceApiGatewayAccountCloudWatchRoleResourceLogicalId()])).to.equal(false);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should not create LogGroup if `accessLogging` set to false","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/stage/index.test.js"],"updatePoint":{"line":277,"column":64,"index":11284},"line":277,"code":"  it('should not create LogGroup if `accessLogging` set to false', async () => {\n    const {\n      cfTemplate,\n      awsNaming\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          logs: {\n            restApi: {\n              accessLogging: false\n            }\n          }\n        }\n      }\n    });\n    expect(cfTemplate.Resources[awsNaming.getApiGatewayLogGroupLogicalId()]).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should create LogGroup with `logs.restApi` set to `true`","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/stage/index.test.js"],"updatePoint":{"line":296,"column":62,"index":11762},"line":296,"code":"  it('should create LogGroup with `logs.restApi` set to `true`', async () => {\n    const {\n      cfTemplate,\n      awsNaming,\n      serverless\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          logs: {\n            restApi: true\n          }\n        }\n      }\n    });\n    expect(cfTemplate.Resources[awsNaming.getApiGatewayLogGroupLogicalId()]).to.deep.equal({\n      Type: 'AWS::Logs::LogGroup',\n      Properties: {\n        LogGroupName: `/aws/api-gateway/${serverless.service.service}-dev`\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should create LogGroup with default setting for `accessLogging`","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/stage/index.test.js"],"updatePoint":{"line":319,"column":69,"index":12364},"line":319,"code":"  it('should create LogGroup with default setting for `accessLogging`', async () => {\n    const {\n      cfTemplate,\n      awsNaming,\n      serverless\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          logs: {\n            restApi: {\n              executionLogging: false\n            }\n          }\n        }\n      }\n    });\n    expect(cfTemplate.Resources[awsNaming.getApiGatewayLogGroupLogicalId()]).to.deep.equal({\n      Type: 'AWS::Logs::LogGroup',\n      Properties: {\n        LogGroupName: `/aws/api-gateway/${serverless.service.service}-dev`\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should set DataProtectionPolicy if provider.logDataProtectionPolicy is set","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/stage/index.test.js"],"updatePoint":{"line":344,"column":80,"index":13026},"line":344,"code":"  it('should set DataProtectionPolicy if provider.logDataProtectionPolicy is set', async () => {\n    const policy = {\n      Name: 'data-protection-policy',\n      Version: '2021-06-01',\n      Statement: []\n    };\n    const {\n      cfTemplate,\n      awsNaming,\n      serverless\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          logs: {\n            restApi: true\n          },\n          logDataProtectionPolicy: policy\n        }\n      }\n    });\n    expect(cfTemplate.Resources[awsNaming.getApiGatewayLogGroupLogicalId()]).to.deep.equal({\n      Type: 'AWS::Logs::LogGroup',\n      Properties: {\n        LogGroupName: `/aws/api-gateway/${serverless.service.service}-dev`,\n        DataProtectionPolicy: policy\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should use stage name from provider if provider.apiGateway.stage is configured","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/stage/index.test.js"],"updatePoint":{"line":374,"column":84,"index":13839},"line":374,"code":"  it('should use stage name from provider if provider.apiGateway.stage is configured', async () => {\n    // https://github.com/serverless/serverless/issues/11675\n    const {\n      cfTemplate,\n      awsNaming\n    } = await runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            stage: 'foo'\n          }\n        }\n      }\n    });\n    expect(awsNaming.provider.getApiGatewayStage()).to.equal('foo');\n    const [apiGatewayDeploymentKey] = Object.keys(cfTemplate.Resources).filter(k => k.startsWith('ApiGatewayDeployment'));\n    const apiGatewayDeployment = cfTemplate.Resources[apiGatewayDeploymentKey];\n    expect(apiGatewayDeployment.Properties.StageName).to.equal('foo');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/stage/index.test.js","skipped":false,"dir":"test"},{"name":"should support api key notation","suites":["#compileUsagePlanKeys()"],"updatePoint":{"line":30,"column":37,"index":1154},"line":30,"code":"  it('should support api key notation', () => {\n    const defaultUsagePlanLogicalId = awsCompileApigEvents.provider.naming.getUsagePlanLogicalId();\n    awsCompileApigEvents.apiGatewayUsagePlanNames = ['default'];\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      apiKeys: ['1234567890', {\n        name: 'abcdefghij',\n        value: 'abcdefghijvalue'\n      }]\n    };\n    awsCompileApigEvents.compileUsagePlanKeys();\n    // key 1\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(1)].Type).to.equal('AWS::ApiGateway::UsagePlanKey');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(1)].Properties.KeyId.Ref).to.equal('ApiGatewayApiKey1');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(1)].Properties.KeyType).to.equal('API_KEY');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(1)].Properties.UsagePlanId.Ref).to.equal(defaultUsagePlanLogicalId);\n\n    // key 2\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(2)].Type).to.equal('AWS::ApiGateway::UsagePlanKey');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(2)].Properties.KeyId.Ref).to.equal('ApiGatewayApiKey2');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(2)].Properties.KeyType).to.equal('API_KEY');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(2)].Properties.UsagePlanId.Ref).to.equal(defaultUsagePlanLogicalId);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan-keys.test.js","skipped":false,"dir":"test"},{"name":"should support usage plan notation","suites":["#compileUsagePlanKeys()","when using usage plan notation"],"updatePoint":{"line":53,"column":42,"index":3436},"line":53,"code":"    it('should support usage plan notation', () => {\n      const freeUsagePlanName = 'free';\n      const paidUsagePlanName = 'paid';\n      const logicalIds = {\n        free: awsCompileApigEvents.provider.naming.getUsagePlanLogicalId(freeUsagePlanName),\n        paid: awsCompileApigEvents.provider.naming.getUsagePlanLogicalId(paidUsagePlanName)\n      };\n      awsCompileApigEvents.apiGatewayUsagePlanNames = [freeUsagePlanName, paidUsagePlanName];\n      awsCompileApigEvents.serverless.service.provider.apiGateway = {\n        apiKeys: [{\n          free: ['1234567890', {\n            name: 'abcdefghij',\n            value: 'abcdefghijvalue'\n          }]\n        }, {\n          paid: ['0987654321', 'jihgfedcba']\n        }]\n      };\n      awsCompileApigEvents.compileUsagePlanKeys();\n      awsCompileApigEvents.serverless.service.provider.apiGateway.apiKeys.forEach(plan => {\n        const planName = Object.keys(plan)[0]; // free || paid\n        const apiKeys = plan[planName];\n        apiKeys.forEach((apiKey, index) => {\n          expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(index + 1, planName)].Type).to.equal('AWS::ApiGateway::UsagePlanKey');\n          expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(index + 1, planName)].Properties.KeyId.Ref).to.equal(`ApiGatewayApiKey${_.capitalize(planName)}${index + 1}`);\n          expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(index + 1, planName)].Properties.KeyType).to.equal('API_KEY');\n          expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanKeyLogicalId(index + 1, planName)].Properties.UsagePlanId.Ref).to.equal(logicalIds[planName]);\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan-keys.test.js","skipped":false,"dir":"test"},{"name":"should throw if api key name does not match a usage plan","suites":["#compileUsagePlanKeys()","when using usage plan notation"],"updatePoint":{"line":83,"column":64,"index":5513},"line":83,"code":"    it('should throw if api key name does not match a usage plan', () => {\n      awsCompileApigEvents.apiGatewayUsagePlanNames = ['default'];\n      awsCompileApigEvents.serverless.service.provider.apiGateway = {\n        apiKeys: [{\n          free: ['1234567890']\n        }]\n      };\n      expect(() => awsCompileApigEvents.compileUsagePlanKeys()).to.throw(/has no usage plan defined/);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan-keys.test.js","skipped":false,"dir":"test"},{"name":"should compile default usage plan resource","suites":["#compileUsagePlan()"],"updatePoint":{"line":30,"column":48,"index":1214},"line":30,"code":"  it('should compile default usage plan resource', () => {\n    serverless.service.provider.apiGateway = {\n      apiKeys: ['1234567890']\n    };\n    awsCompileApigEvents.compileUsagePlan();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Type).to.equal('AWS::ApiGateway::UsagePlan');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].DependsOn).to.equal('ApiGatewayDeploymentTest');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Properties.ApiStages[0].ApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Properties.ApiStages[0].Stage).to.equal('dev');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Properties.Description).to.equal('Usage plan for first-service dev stage');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Properties.UsagePlanName).to.equal('first-service-dev');\n    expect(awsCompileApigEvents.apiGatewayUsagePlanNames).to.deep.equal(['default']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should support custom usage plan resource via single object notation","suites":["#compileUsagePlan()"],"updatePoint":{"line":43,"column":74,"index":2840},"line":43,"code":"  it('should support custom usage plan resource via single object notation', () => {\n    serverless.service.provider.apiGateway = {\n      usagePlan: {\n        quota: {\n          limit: 500,\n          offset: 10,\n          period: 'MONTH'\n        },\n        throttle: {\n          burstLimit: 200,\n          rateLimit: 100\n        }\n      }\n    };\n    awsCompileApigEvents.compileUsagePlan();\n    const logicalId = awsCompileApigEvents.provider.naming.getUsagePlanLogicalId();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Type).to.equal('AWS::ApiGateway::UsagePlan');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].DependsOn).to.equal('ApiGatewayDeploymentTest');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.ApiStages[0].ApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.ApiStages[0].Stage).to.equal('dev');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.Description).to.equal('Usage plan for first-service dev stage');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.Quota).to.deep.equal({\n      Limit: 500,\n      Offset: 10,\n      Period: 'MONTH'\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.Throttle).to.deep.equal({\n      BurstLimit: 200,\n      RateLimit: 100\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalId].Properties.UsagePlanName).to.equal('first-service-dev');\n    expect(awsCompileApigEvents.apiGatewayUsagePlanNames).to.deep.equal(['default']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should support custom usage plan resources via array notation","suites":["#compileUsagePlan()"],"updatePoint":{"line":76,"column":67,"index":4827},"line":76,"code":"  it('should support custom usage plan resources via array notation', () => {\n    const freePlanName = 'free';\n    const paidPlanName = 'paid';\n    const logicalIdFree = awsCompileApigEvents.provider.naming.getUsagePlanLogicalId(freePlanName);\n    const logicalIdPaid = awsCompileApigEvents.provider.naming.getUsagePlanLogicalId(paidPlanName);\n    serverless.service.provider.apiGateway = {\n      usagePlan: [{\n        [freePlanName]: {\n          quota: {\n            limit: 1000,\n            offset: 100,\n            period: 'MONTH'\n          },\n          throttle: {\n            burstLimit: 1,\n            rateLimit: 1\n          }\n        }\n      }, {\n        [paidPlanName]: {\n          quota: {\n            limit: 1000000,\n            offset: 200,\n            period: 'MONTH'\n          },\n          throttle: {\n            burstLimit: 1000,\n            rateLimit: 1000\n          }\n        }\n      }]\n    };\n    awsCompileApigEvents.compileUsagePlan();\n    // resources for the \"free\" plan\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Type).to.equal('AWS::ApiGateway::UsagePlan');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].DependsOn).to.equal('ApiGatewayDeploymentTest');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.ApiStages[0].ApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.ApiStages[0].Stage).to.equal('dev');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.Description).to.equal(`Usage plan \"${freePlanName}\" for first-service dev stage`);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.Quota).to.deep.equal({\n      Limit: 1000,\n      Offset: 100,\n      Period: 'MONTH'\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.Throttle).to.deep.equal({\n      BurstLimit: 1,\n      RateLimit: 1\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdFree].Properties.UsagePlanName).to.equal(`first-service-${freePlanName}-dev`);\n\n    // resources for the \"paid\" plan\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Type).to.equal('AWS::ApiGateway::UsagePlan');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].DependsOn).to.equal('ApiGatewayDeploymentTest');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.ApiStages[0].ApiId.Ref).to.equal('ApiGatewayRestApi');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.ApiStages[0].Stage).to.equal('dev');\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.Description).to.equal(`Usage plan \"${paidPlanName}\" for first-service dev stage`);\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.Quota).to.deep.equal({\n      Limit: 1000000,\n      Offset: 200,\n      Period: 'MONTH'\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.Throttle).to.deep.equal({\n      BurstLimit: 1000,\n      RateLimit: 1000\n    });\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[logicalIdPaid].Properties.UsagePlanName).to.equal(`first-service-${paidPlanName}-dev`);\n    expect(awsCompileApigEvents.apiGatewayUsagePlanNames).to.deep.equal([freePlanName, paidPlanName]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should compile custom usage plan resource with restApiId provided","suites":["#compileUsagePlan()"],"updatePoint":{"line":144,"column":71,"index":8962},"line":144,"code":"  it('should compile custom usage plan resource with restApiId provided', () => {\n    awsCompileApigEvents.serverless.service.provider.apiGateway = {\n      apiKeys: ['1234567890'],\n      restApiId: 'xxxxx'\n    };\n    awsCompileApigEvents.compileUsagePlan();\n    expect(awsCompileApigEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources[awsCompileApigEvents.provider.naming.getUsagePlanLogicalId()].Properties.ApiStages[0].ApiId).to.equal('xxxxx');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"Should have values for throttle","suites":["UsagePlan"],"updatePoint":{"line":187,"column":37,"index":10032},"line":187,"code":"  it('Should have values for throttle', async () => {\n    serverlessConfigurationExtension.provider.apiGateway = {\n      usagePlan: {\n        throttle\n      }\n    };\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      configExt: serverlessConfigurationExtension,\n      command: 'package'\n    });\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.BurstLimit).to.be.equal(burstLimit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.RateLimit).to.be.equal(rateLimit);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"Should have values for quota","suites":["UsagePlan"],"updatePoint":{"line":203,"column":34,"index":10590},"line":203,"code":"  it('Should have values for quota', async () => {\n    serverlessConfigurationExtension.provider.apiGateway = {\n      usagePlan: {\n        quota\n      }\n    };\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      configExt: serverlessConfigurationExtension,\n      command: 'package'\n    });\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Limit).to.be.equal(limit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Offset).to.be.equal(offset);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Period).to.be.equal(period);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"Should have values for throttle and not quota","suites":["UsagePlan"],"updatePoint":{"line":220,"column":51,"index":11238},"line":220,"code":"  it('Should have values for throttle and not quota', async () => {\n    serverlessConfigurationExtension.provider.apiGateway = {\n      usagePlan: {\n        throttle\n      }\n    };\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      configExt: serverlessConfigurationExtension,\n      command: 'package'\n    });\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.BurstLimit).to.be.equal(burstLimit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.RateLimit).to.be.equal(rateLimit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties).to.not.have.property('quota');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"Should have values for quota and throttle","suites":["UsagePlan"],"updatePoint":{"line":237,"column":47,"index":11904},"line":237,"code":"  it('Should have values for quota and throttle', async () => {\n    serverlessConfigurationExtension.provider.apiGateway = {\n      usagePlan: {\n        throttle,\n        quota\n      }\n    };\n    const {\n      cfTemplate\n    } = await runServerless({\n      fixture: 'api-gateway',\n      configExt: serverlessConfigurationExtension,\n      command: 'package'\n    });\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.BurstLimit).to.be.equal(burstLimit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Throttle.RateLimit).to.be.equal(rateLimit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Limit).to.be.equal(limit);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Offset).to.be.equal(offset);\n    expect(cfTemplate.Resources.ApiGatewayUsagePlan.Properties.Quota.Period).to.be.equal(period);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/usage-plan.test.js","skipped":false,"dir":"test"},{"name":"should ignore non-http events","suites":["#validate()"],"updatePoint":{"line":29,"column":35,"index":1111},"line":29,"code":"  it('should ignore non-http events', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          ignored: {}\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(0);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should reject an invalid http event","suites":["#validate()"],"updatePoint":{"line":40,"column":41,"index":1427},"line":40,"code":"  it('should reject an invalid http event', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: true\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should filter non-http events","suites":["#validate()"],"updatePoint":{"line":50,"column":35,"index":1685},"line":50,"code":"  it('should filter non-http events', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar'\n          }\n        }, {}]\n      },\n      second: {\n        events: [{\n          other: {}\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should discard a starting slash from paths","suites":["#validate()"],"updatePoint":{"line":69,"column":48,"index":2150},"line":69,"code":"  it('should discard a starting slash from paths', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'POST',\n            path: '/foo/bar'\n          }\n        }, {\n          http: 'GET /foo/bar'\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(2);\n    expect(validated.events[0].http).to.have.property('path', 'foo/bar');\n    expect(validated.events[1].http).to.have.property('path', 'foo/bar');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw if an cognito claims are being with a lambda proxy","suites":["#validate()"],"updatePoint":{"line":87,"column":69,"index":2751},"line":87,"code":"  it('should throw if an cognito claims are being with a lambda proxy', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            integration: 'lambda-proxy',\n            authorizer: {\n              arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n              claims: ['email', 'nickname']\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw if an cognito claims are undefined with a lambda proxy","suites":["#validate()"],"updatePoint":{"line":105,"column":77,"index":3320},"line":105,"code":"  it('should not throw if an cognito claims are undefined with a lambda proxy', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: '/{proxy+}',\n            method: 'ANY',\n            integration: 'lambda-proxy',\n            authorizer: {\n              arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n              name: 'CognitoAuthorier'\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw if an cognito claims are empty arrays with a lambda proxy","suites":["#validate()"],"updatePoint":{"line":123,"column":80,"index":3893},"line":123,"code":"  it('should not throw if an cognito claims are empty arrays with a lambda proxy', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: '/{proxy+}',\n            method: 'ANY',\n            integration: 'lambda-proxy',\n            authorizer: {\n              arn: 'arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ',\n              name: 'CognitoAuthorier',\n              claims: []\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw when using a cognito string authorizer","suites":["#validate()"],"updatePoint":{"line":142,"column":61,"index":4473},"line":142,"code":"  it('should not throw when using a cognito string authorizer', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: '/{proxy+}',\n            method: 'ANY',\n            integration: 'lambda-proxy',\n            authorizer: 'arn:aws:cognito-idp:us-east-1:$XXXXX:userpool/some-user-pool'\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw when using a cognito authorizer without a name","suites":["#validate()"],"updatePoint":{"line":157,"column":65,"index":4960},"line":157,"code":"  it('should throw when using a cognito authorizer without a name', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: '/{proxy+}',\n            method: 'ANY',\n            integration: 'lambda-proxy',\n            authorizer: {\n              type: 'COGNITO_USER_POOLS',\n              arn: {\n                'Fn::GetAtt': ['CognitoUserPool', 'Arn']\n              }\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw when using an object cognito authorizer with a name","suites":["#validate()"],"updatePoint":{"line":177,"column":74,"index":5541},"line":177,"code":"  it('should not throw when using an object cognito authorizer with a name', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: '/{proxy+}',\n            method: 'ANY',\n            integration: 'lambda-proxy',\n            authorizer: {\n              type: 'COGNITO_USER_POOLS',\n              name: 'MyAuthorizer',\n              arn: {\n                'Fn::GetAtt': ['CognitoUserPool', 'Arn']\n              }\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).not.to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept AWS_IAM as authorizer","suites":["#validate()"],"updatePoint":{"line":198,"column":41,"index":6129},"line":198,"code":"  it('should accept AWS_IAM as authorizer', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      foo: {},\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: 'aws_iam'\n          }\n        }]\n      },\n      second: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: {\n              type: 'aws_iam'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(2);\n    expect(validated.events[0].http.authorizer.type).to.equal('AWS_IAM');\n    expect(validated.events[1].http.authorizer.type).to.equal('AWS_IAM');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept an authorizer as a string","suites":["#validate()"],"updatePoint":{"line":227,"column":45,"index":6921},"line":227,"code":"  it('should accept an authorizer as a string', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      foo: {},\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: 'foo'\n          }\n        }]\n      },\n      second: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: 'sss:dev-authorizer'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(2);\n    expect(validated.events[0].http.authorizer.name).to.equal('foo');\n    expect(validated.events[0].http.authorizer.arn).to.deep.equal({\n      'Fn::GetAtt': ['FooLambdaFunction', 'Arn']\n    });\n    expect(validated.events[1].http.authorizer.name).to.equal('authorizer');\n    expect(validated.events[1].http.authorizer.arn).to.equal('sss:dev-authorizer');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer defaults","suites":["#validate()"],"updatePoint":{"line":258,"column":36,"index":7883},"line":258,"code":"  it('should set authorizer defaults', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: {\n              arn: 'sss:dev-authorizer'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    const authorizer = validated.events[0].http.authorizer;\n    expect(authorizer.resultTtlInSeconds).to.equal(300);\n    expect(authorizer.identitySource).to.equal('method.request.header.Authorization');\n    expect(authorizer.managedExternally).to.equal(false);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept authorizer config","suites":["#validate()"],"updatePoint":{"line":278,"column":37,"index":8538},"line":278,"code":"  it('should accept authorizer config', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      foo: {},\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: {\n              name: 'foo',\n              resultTtlInSeconds: 500,\n              identitySource: 'method.request.header.Custom',\n              identityValidationExpression: 'foo',\n              managedExternally: true\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    const authorizer = validated.events[0].http.authorizer;\n    expect(authorizer.resultTtlInSeconds).to.equal(500);\n    expect(authorizer.identitySource).to.equal('method.request.header.Custom');\n    expect(authorizer.identityValidationExpression).to.equal('foo');\n    expect(authorizer.managedExternally).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept authorizer config with a type","suites":["#validate()"],"updatePoint":{"line":304,"column":49,"index":9458},"line":304,"code":"  it('should accept authorizer config with a type', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      foo: {},\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: {\n              name: 'foo',\n              type: 'request',\n              resultTtlInSeconds: 500,\n              identitySource: 'method.request.header.Custom',\n              identityValidationExpression: 'foo'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    const authorizer = validated.events[0].http.authorizer;\n    expect(authorizer.type).to.equal('request');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept authorizer config when resultTtlInSeconds is 0","suites":["#validate()"],"updatePoint":{"line":327,"column":66,"index":10173},"line":327,"code":"  it('should accept authorizer config when resultTtlInSeconds is 0', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      foo: {},\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'foo/bar',\n            authorizer: {\n              name: 'foo',\n              resultTtlInSeconds: 0,\n              identitySource: 'method.request.header.Custom',\n              identityValidationExpression: 'foo'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    const authorizer = validated.events[0].http.authorizer;\n    expect(authorizer.resultTtlInSeconds).to.equal(0);\n    expect(authorizer.identitySource).to.equal('method.request.header.Custom');\n    expect(authorizer.identityValidationExpression).to.equal('foo');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept cors headers as a single string value","suites":["#validate()"],"updatePoint":{"line":351,"column":57,"index":11001},"line":351,"code":"  it('should accept cors headers as a single string value', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'POST',\n            path: '/foo/bar',\n            cors: {\n              headers: 'X-Foo-Bar'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.cors.headers).to.deep.equal(['X-Foo-Bar']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process cors options","suites":["#validate()"],"updatePoint":{"line":369,"column":33,"index":11524},"line":369,"code":"  it('should process cors options', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'POST',\n            path: '/foo/bar',\n            cors: {\n              headers: ['X-Foo-Bar'],\n              origins: ['acme.com'],\n              methods: ['POST', 'OPTIONS'],\n              maxAge: 86400,\n              cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.cors).to.deep.equal({\n      headers: ['X-Foo-Bar'],\n      methods: ['POST', 'OPTIONS'],\n      origins: ['acme.com'],\n      allowCredentials: false,\n      maxAge: 86400,\n      cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should merge all preflight cors options for a path","suites":["#validate()"],"updatePoint":{"line":398,"column":56,"index":12456},"line":398,"code":"  it('should merge all preflight cors options for a path', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users',\n            cors: {\n              origins: ['http://example.com'],\n              allowCredentials: true,\n              maxAge: 10000,\n              cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'\n            }\n          }\n        }, {\n          http: {\n            method: 'POST',\n            path: 'users',\n            cors: {\n              origins: ['http://example2.com'],\n              maxAge: 86400\n            }\n          }\n        }, {\n          http: {\n            method: 'PUT',\n            path: 'users/{id}',\n            cors: {\n              headers: ['TestHeader']\n            }\n          }\n        }, {\n          http: {\n            method: 'DELETE',\n            path: 'users/{id}',\n            cors: {\n              headers: ['TestHeader2']\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.corsPreflight['users/{id}'].methods).to.deep.equal(['OPTIONS', 'DELETE', 'PUT']);\n    expect(validated.corsPreflight.users.origins).to.deep.equal(['http://example2.com', 'http://example.com']);\n    expect(validated.corsPreflight['users/{id}'].headers).to.deep.equal(['TestHeader2', 'TestHeader']);\n    expect(validated.corsPreflight.users.maxAge).to.equal(86400);\n    expect(validated.corsPreflight.users.cacheControl).to.equal('max-age=600, s-maxage=600, proxy-revalidate');\n    expect(validated.corsPreflight.users.allowCredentials).to.equal(true);\n    expect(validated.corsPreflight['users/{id}'].allowCredentials).to.equal(false);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add default statusCode to custom statusCodes","suites":["#validate()"],"updatePoint":{"line":449,"column":57,"index":14225},"line":449,"code":"  it('should add default statusCode to custom statusCodes', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda',\n            response: {\n              statusCodes: {\n                404: {\n                  pattern: '.*\"statusCode\":404,.*',\n                  template: \"$input.path('$.errorMessage')\",\n                  headers: {\n                    'Content-Type': 'text/html'\n                  }\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.response.statusCodes).to.deep.equal({\n      200: {\n        pattern: ''\n      },\n      404: {\n        pattern: '.*\"statusCode\":404,.*',\n        template: \"$input.path('$.errorMessage')\",\n        headers: {\n          'Content-Type': 'text/html'\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should allow custom statusCode with default pattern","suites":["#validate()"],"updatePoint":{"line":487,"column":57,"index":15298},"line":487,"code":"  it('should allow custom statusCode with default pattern', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda',\n            response: {\n              statusCodes: {\n                418: {\n                  pattern: '',\n                  template: \"$input.path('$.foo')\"\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.response.statusCodes).to.deep.equal({\n      418: {\n        pattern: '',\n        template: \"$input.path('$.foo')\"\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should handle expicit methods","suites":["#validate()"],"updatePoint":{"line":516,"column":35,"index":16081},"line":516,"code":"  it('should handle expicit methods', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'POST',\n            path: '/foo/bar',\n            cors: {\n              methods: ['POST']\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.cors.methods).to.deep.equal(['POST', 'OPTIONS']);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer.arn when provided a name string","suites":["#validate()"],"updatePoint":{"line":534,"column":59,"index":16633},"line":534,"code":"  it('should set authorizer.arn when provided a name string', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      authorizer: {},\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: 'authorizer'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.authorizer.name).to.equal('authorizer');\n    expect(validated.events[0].http.authorizer.arn).to.deep.equal({\n      'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer.arn when provided an ARN string","suites":["#validate()"],"updatePoint":{"line":554,"column":59,"index":17299},"line":554,"code":"  it('should set authorizer.arn when provided an ARN string', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: 'xxx:dev-authorizer'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.authorizer.name).to.equal('authorizer');\n    expect(validated.events[0].http.authorizer.arn).to.equal('xxx:dev-authorizer');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should handle authorizer.name object","suites":["#validate()"],"updatePoint":{"line":571,"column":42,"index":17886},"line":571,"code":"  it('should handle authorizer.name object', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      authorizer: {},\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: {\n              name: 'authorizer'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.authorizer.name).to.equal('authorizer');\n    expect(validated.events[0].http.authorizer.arn).to.deep.equal({\n      'Fn::GetAtt': ['AuthorizerLambdaFunction', 'Arn']\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should handle an authorizer.arn object","suites":["#validate()"],"updatePoint":{"line":593,"column":44,"index":18573},"line":593,"code":"  it('should handle an authorizer.arn object', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: {\n              arn: 'xxx:dev-authorizer'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.authorizer.name).to.equal('authorizer');\n    expect(validated.events[0].http.authorizer.arn).to.equal('xxx:dev-authorizer');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should handle an authorizer.arn with an explicit authorizer.name object","suites":["#validate()"],"updatePoint":{"line":612,"column":77,"index":19230},"line":612,"code":"  it('should handle an authorizer.arn with an explicit authorizer.name object', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: {\n              arn: 'xxx:dev-authorizer',\n              name: 'custom-name'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.authorizer.name).to.equal('custom-name');\n    expect(validated.events[0].http.authorizer.arn).to.equal('xxx:dev-authorizer');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process request parameters for lambda integration","suites":["#validate()"],"updatePoint":{"line":632,"column":62,"index":19908},"line":632,"code":"  it('should process request parameters for lambda integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            integration: 'lambda',\n            path: 'foo/bar',\n            method: 'GET',\n            request: {\n              parameters: {\n                querystrings: {\n                  foo: true,\n                  bar: false\n                },\n                paths: {\n                  foo: true,\n                  bar: false\n                },\n                headers: {\n                  foo: true,\n                  bar: false\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.parameters).to.deep.equal({\n      'method.request.querystring.foo': true,\n      'method.request.querystring.bar': false,\n      'method.request.path.foo': true,\n      'method.request.path.bar': false,\n      'method.request.header.foo': true,\n      'method.request.header.bar': false\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process request parameters for lambda-proxy integration","suites":["#validate()"],"updatePoint":{"line":671,"column":68,"index":21079},"line":671,"code":"  it('should process request parameters for lambda-proxy integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            integration: 'lambda-proxy',\n            path: 'foo/bar',\n            method: 'GET',\n            request: {\n              parameters: {\n                querystrings: {\n                  foo: true,\n                  bar: false\n                },\n                paths: {\n                  foo: true,\n                  bar: false\n                },\n                headers: {\n                  foo: true,\n                  bar: false\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.parameters).to.deep.equal({\n      'method.request.querystring.foo': true,\n      'method.request.querystring.bar': false,\n      'method.request.path.foo': true,\n      'method.request.path.bar': false,\n      'method.request.header.foo': true,\n      'method.request.header.bar': false\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"throw error if authorizer property is an object but no name or arn provided","suites":["#validate()"],"updatePoint":{"line":710,"column":81,"index":22269},"line":710,"code":"  it('throw error if authorizer property is an object but no name or arn provided', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            path: 'foo/bar',\n            method: 'GET',\n            authorizer: {}\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set \"AWS_PROXY\" as the default integration type","suites":["#validate()"],"updatePoint":{"line":724,"column":60,"index":22644},"line":724,"code":"  it('should set \"AWS_PROXY\" as the default integration type', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('AWS_PROXY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support LAMBDA integration","suites":["#validate()"],"updatePoint":{"line":739,"column":39,"index":23096},"line":739,"code":"  it('should support LAMBDA integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'LAMBDA'\n          }\n        }, {\n          http: {\n            method: 'PUT',\n            path: 'users/list',\n            integration: 'lambda'\n          }\n        }, {\n          http: {\n            method: 'POST',\n            path: 'users/list',\n            integration: 'lambda-proxy'\n          }\n        }, {\n          http: {\n            method: 'POST',\n            path: 'users/list',\n            integration: 'aws'\n          }\n        }, {\n          http: {\n            method: 'POST',\n            path: 'users/list',\n            integration: 'AWS_PROXY'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(5);\n    expect(validated.events[0].http.integration).to.equal('AWS');\n    expect(validated.events[1].http.integration).to.equal('AWS');\n    expect(validated.events[2].http.integration).to.equal('AWS_PROXY');\n    expect(validated.events[3].http.integration).to.equal('AWS');\n    expect(validated.events[4].http.integration).to.equal('AWS_PROXY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP integration","suites":["#validate()"],"updatePoint":{"line":783,"column":37,"index":24404},"line":783,"code":"  it('should support HTTP integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP',\n            request: {\n              uri: 'https://example.com'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('HTTP');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process request parameters for HTTP integration","suites":["#validate()"],"updatePoint":{"line":802,"column":60,"index":24984},"line":802,"code":"  it('should process request parameters for HTTP integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP',\n            request: {\n              uri: 'https://example.com',\n              parameters: {\n                querystrings: {\n                  foo: true,\n                  bar: false\n                },\n                paths: {\n                  foo: true,\n                  bar: false\n                },\n                headers: {\n                  foo: true,\n                  bar: false\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.parameters).to.deep.equal({\n      'method.request.querystring.foo': true,\n      'method.request.querystring.bar': false,\n      'method.request.path.foo': true,\n      'method.request.path.bar': false,\n      'method.request.header.foo': true,\n      'method.request.header.bar': false\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw if no uri is set in HTTP integration","suites":["#validate()"],"updatePoint":{"line":842,"column":55,"index":26185},"line":842,"code":"  it('should throw if no uri is set in HTTP integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP'\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP_PROXY integration","suites":["#validate()"],"updatePoint":{"line":856,"column":43,"index":26551},"line":856,"code":"  it('should support HTTP_PROXY integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP_PROXY',\n            request: {\n              uri: 'https://example.com'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('HTTP_PROXY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process request parameters for HTTP_PROXY integration","suites":["#validate()"],"updatePoint":{"line":875,"column":66,"index":27149},"line":875,"code":"  it('should process request parameters for HTTP_PROXY integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP_PROXY',\n            request: {\n              uri: 'https://example.com',\n              parameters: {\n                querystrings: {\n                  foo: true,\n                  bar: false\n                },\n                paths: {\n                  foo: true,\n                  bar: false\n                },\n                headers: {\n                  foo: true,\n                  bar: false\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.parameters).to.deep.equal({\n      'method.request.querystring.foo': true,\n      'method.request.querystring.bar': false,\n      'method.request.path.foo': true,\n      'method.request.path.bar': false,\n      'method.request.header.foo': true,\n      'method.request.header.bar': false\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw if no uri is set in HTTP_PROXY integration","suites":["#validate()"],"updatePoint":{"line":915,"column":61,"index":28362},"line":915,"code":"  it('should throw if no uri is set in HTTP_PROXY integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'HTTP_PROXY'\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(Error);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support MOCK integration","suites":["#validate()"],"updatePoint":{"line":929,"column":37,"index":28728},"line":929,"code":"  it('should support MOCK integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'MOCK'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('MOCK');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support async AWS integration","suites":["#validate()"],"updatePoint":{"line":945,"column":42,"index":29211},"line":945,"code":"  it('should support async AWS integration', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            async: true\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('AWS');\n    expect(validated.events[0].http.async);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not show a warning message when using request.parameter with LAMBDA-PROXY","suites":["#validate()"],"updatePoint":{"line":962,"column":86,"index":29773},"line":962,"code":"  it('should not show a warning message when using request.parameter with LAMBDA-PROXY', async () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda-proxy',\n            request: {\n              parameters: {\n                querystrings: {\n                  foo: true,\n                  bar: false\n                },\n                paths: {\n                  foo: true,\n                  bar: false\n                },\n                headers: {\n                  foo: true,\n                  bar: false\n                }\n              }\n            }\n          }\n        }]\n      }\n    };\n    // initialize so we get the log method from the CLI in place\n    return serverless.init().then(() => {\n      const logStub = sinon.stub(serverless.cli, 'log');\n      awsCompileApigEvents.validate();\n      expect(logStub.called).to.be.equal(false);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should remove non-parameter request/response config with LAMBDA-PROXY","suites":["#validate()"],"updatePoint":{"line":997,"column":75,"index":30774},"line":997,"code":"  it('should remove non-parameter request/response config with LAMBDA-PROXY', async () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda-proxy',\n            request: {\n              template: {\n                'template/1': '{ \"stage\" : \"$context.stage\" }'\n              },\n              parameters: {\n                paths: {\n                  foo: true\n                }\n              }\n            },\n            response: {}\n          }\n        }]\n      }\n    };\n    // initialize so we get the log method from the CLI in place\n    return serverless.init().then(() => {\n      // don't want to print the logs in this test\n      sinon.stub(serverless.cli, 'log');\n      const validated = awsCompileApigEvents.validate();\n      expect(validated.events).to.be.an('Array').with.length(1);\n      expect(validated.events[0].http.response).to.equal(undefined);\n      expect(validated.events[0].http.request.parameters).to.deep.equal({\n        'method.request.path.foo': true\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should accept a valid passThrough","suites":["#validate()"],"updatePoint":{"line":1032,"column":39,"index":31890},"line":1032,"code":"  it('should accept a valid passThrough', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda',\n            request: {\n              passThrough: 'WHEN_NO_MATCH'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.passThrough).to.equal('WHEN_NO_MATCH');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should default pass through to NEVER for lambda","suites":["#validate()"],"updatePoint":{"line":1051,"column":53,"index":32484},"line":1051,"code":"  it('should default pass through to NEVER for lambda', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.passThrough).to.equal('NEVER');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not set default pass through http","suites":["#validate()"],"updatePoint":{"line":1067,"column":46,"index":32982},"line":1067,"code":"  it('should not set default pass through http', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'http',\n            integrationMethod: 'GET',\n            request: {\n              uri: 'http://my.uri/me'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.request.passThrough).to.equal(undefined);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support HTTP_PROXY integration with VPC_LINK connection type","suites":["#validate()"],"updatePoint":{"line":1087,"column":73,"index":33621},"line":1087,"code":"  it('should support HTTP_PROXY integration with VPC_LINK connection type', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'http-proxy',\n            connectionType: 'vpc-link',\n            connectionId: 'deltabravo',\n            request: {\n              uri: 'http://my.uri/me'\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.integration).to.equal('HTTP_PROXY');\n    expect(validated.events[0].http.connectionType).to.equal('VPC_LINK');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when connectionId is not provided with VPC_LINK","suites":["#validate()"],"updatePoint":{"line":1109,"column":75,"index":34379},"line":1109,"code":"  it('should throw an error when connectionId is not provided with VPC_LINK', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'http-proxy',\n            connectionType: 'vpc-link',\n            request: {\n              uri: 'http://my.uri/me'\n            }\n          }\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(/to set connectionId/);\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should reject if http event is present and stage contains invalid chars","suites":["#validate()"],"updatePoint":{"line":1127,"column":77,"index":34917},"line":1127,"code":"  it('should reject if http event is present and stage contains invalid chars', () => {\n    const invalidOptions = {\n      stage: 'my@stage',\n      region: 'us-east-1'\n    };\n    serverless.setProvider('aws', new AwsProvider(serverless, invalidOptions));\n    awsCompileApigEvents = new AwsCompileApigEvents(serverless, invalidOptions);\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: 'GET foo/bar'\n        }]\n      }\n    };\n    expect(() => awsCompileApigEvents.validate()).to.throw(ServerlessError, ['Invalid stage name my@stage: it should contains only [-_a-zA-Z0-9]', 'for AWS provider if http event are present', 'according to API Gateway limitation.'].join(' '));\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should set default statusCodes to response for lambda by default","suites":["#validate()"],"updatePoint":{"line":1143,"column":70,"index":35645},"line":1143,"code":"  it('should set default statusCodes to response for lambda by default', () => {\n    awsCompileApigEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          http: {\n            method: 'GET',\n            path: 'users/list',\n            integration: 'lambda',\n            integrationMethod: 'GET'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileApigEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(1);\n    expect(validated.events[0].http.response.statusCodes).to.deep.equal({\n      200: {\n        pattern: ''\n      },\n      400: {\n        pattern: '[\\\\s\\\\S]*\\\\[400\\\\][\\\\s\\\\S]*'\n      },\n      401: {\n        pattern: '[\\\\s\\\\S]*\\\\[401\\\\][\\\\s\\\\S]*'\n      },\n      403: {\n        pattern: '[\\\\s\\\\S]*\\\\[403\\\\][\\\\s\\\\S]*'\n      },\n      404: {\n        pattern: '[\\\\s\\\\S]*\\\\[404\\\\][\\\\s\\\\S]*'\n      },\n      422: {\n        pattern: '[\\\\s\\\\S]*\\\\[422\\\\][\\\\s\\\\S]*'\n      },\n      500: {\n        pattern: '[\\\\s\\\\S]*(Process\\\\s?exited\\\\s?before\\\\s?completing\\\\s?request|\\\\[500\\\\])[\\\\s\\\\S]*'\n      },\n      502: {\n        pattern: '[\\\\s\\\\S]*\\\\[502\\\\][\\\\s\\\\S]*'\n      },\n      504: {\n        pattern: '([\\\\s\\\\S]*\\\\[504\\\\][\\\\s\\\\S]*)|(.*Task timed out after \\\\d+\\\\.\\\\d+ seconds$)'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should process cors defaults","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1238,"column":36,"index":38369},"line":1238,"code":"    it('should process cors defaults', async () => {\n      const expected = {\n        'method.response.header.Access-Control-Allow-Headers': `'${['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent', 'X-Amzn-Trace-Id'].join(',')}'`,\n        'method.response.header.Access-Control-Allow-Methods': `'${['OPTIONS', 'POST'].join(',')}'`,\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\"\n      };\n      expect(getApiGatewayMethod('/cors-default-set-by-boolean', 'OPTIONS').Properties.Integration.IntegrationResponses[0].ResponseParameters).to.deep.eq(expected);\n      expect(getApiGatewayMethod('/cors-default-set-by-object', 'OPTIONS').Properties.Integration.IntegrationResponses[0].ResponseParameters).to.deep.eq(expected);\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"Should not set default `identitySource` for `request` authorizers with caching disabled","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1247,"column":95,"index":39226},"line":1247,"code":"    it('Should not set default `identitySource` for `request` authorizers with caching disabled', async () => {\n      expect(cfResources[naming.getAuthorizerLogicalId('basic')].Properties.IdentitySource).to.be.undefined;\n    });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when restApiRootResourceId is not provided with restApiId","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1251,"column":85,"index":39451},"line":1251,"code":"  it('should throw an error when restApiRootResourceId is not provided with restApiId', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            restApiId: 'ivrcdpj7y2'\n          }\n        },\n        functions: {\n          first: {\n            handler: 'index.handler',\n            events: [{\n              http: {\n                method: 'GET',\n                path: 'foo/bar'\n              }\n            }]\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'API_GATEWAY_MISSING_REST_API_ROOT_RESOURCE_ID');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should throw when using a CUSTOM authorizer without an authorizer id","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1275,"column":74,"index":40113},"line":1275,"code":"  it('should throw when using a CUSTOM authorizer without an authorizer id', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'package',\n      configExt: {\n        functions: {\n          first: {\n            handler: 'index.handler',\n            events: [{\n              http: {\n                method: 'POST',\n                path: '/custom-authorizer',\n                integration: 'lambda-proxy',\n                authorizer: {\n                  type: 'CUSTOM'\n                }\n              }\n            }]\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'API_GATEWAY_MISSING_AUTHORIZER_NAME_OR_ARN');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should not throw when using CUSTOM authorizer with an authorizer id","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1298,"column":73,"index":40807},"line":1298,"code":"  it('should not throw when using CUSTOM authorizer with an authorizer id', async () => {\n    const result = await runServerless({\n      fixture: 'function',\n      command: 'package',\n      configExt: {\n        functions: {\n          first: {\n            handler: 'index.handler',\n            events: [{\n              http: {\n                method: 'POST',\n                path: '/custom-authorizer',\n                integration: 'lambda-proxy',\n                authorizer: {\n                  type: 'CUSTOM',\n                  authorizerId: 'MyAuthorizerId'\n                }\n              }\n            }]\n          }\n        }\n      }\n    });\n    cfResources = result.cfTemplate.Resources;\n    naming = result.awsNaming;\n    const resource = getApiGatewayMethod('/custom-authorizer', 'POST');\n    expect(resource.Properties.AuthorizationType).to.equal('CUSTOM');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"Should error when using external API Gateway and enabling tracing","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1326,"column":71,"index":41678},"line":1326,"code":"  it('Should error when using external API Gateway and enabling tracing', async () => {\n    await expect(runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            restApiId: 'xxx',\n            restApiRootResourceId: 'yyy'\n          },\n          tracing: {\n            apiGateway: true\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'API_GATEWAY_EXTERNAL_API_TRACING');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"Should error when using external API Gateway and enabling logs","suites":["test/unit/lib/plugins/aws/package/compile/events/apiGateway/lib/validate.test.js","regular"],"updatePoint":{"line":1343,"column":68,"index":42182},"line":1343,"code":"  it('Should error when using external API Gateway and enabling logs', async () => {\n    await expect(runServerless({\n      fixture: 'api-gateway',\n      command: 'package',\n      configExt: {\n        provider: {\n          apiGateway: {\n            restApiId: 'xxx',\n            restApiRootResourceId: 'yyy'\n          },\n          logs: {\n            restApi: true\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'API_GATEWAY_EXTERNAL_API_LOGS');\n  });","file":"unit/lib/plugins/aws/package/compile/events/api-gateway/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should correctly deep merge arrays with objects","suites":["AwsCompileCloudFrontEvents","#compileCloudFrontEvents()"],"updatePoint":{"line":78,"column":55,"index":2185},"line":78,"code":"    it('should correctly deep merge arrays with objects', () => {\n      awsCompileCloudFrontEvents.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            cloudFront: {\n              eventType: 'viewer-request',\n              origin: {\n                DomainName: 'bucketname.s3.amazonaws.com',\n                OriginPath: '/app*',\n                S3OriginConfig: {\n                  OriginAccessIdentity: {\n                    'Fn::Join': ['', ['origin-access-identity/cloudfront/', {\n                      Ref: 'CloudFrontOAI'\n                    }]]\n                  }\n                }\n              }\n            }\n          }]\n        },\n        second: {\n          name: 'second',\n          events: [{\n            cloudFront: {\n              eventType: 'origin-request',\n              origin: {\n                DomainName: 'bucketname.s3.amazonaws.com',\n                OriginPath: '/app*',\n                S3OriginConfig: {\n                  OriginAccessIdentity: {\n                    'Fn::Join': ['', ['origin-access-identity/cloudfront/', {\n                      Ref: 'CloudFrontOAI'\n                    }]]\n                  }\n                }\n              }\n            }\n          }]\n        }\n      };\n      awsCompileCloudFrontEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources = {\n        FirstLambdaFunction: {\n          Type: 'AWS::Lambda::Function',\n          Properties: {\n            FunctionName: 'first'\n          }\n        },\n        SecondLambdaFunction: {\n          Type: 'AWS::Lambda::Function',\n          Properties: {\n            FunctionName: 'second'\n          }\n        }\n      };\n      awsCompileCloudFrontEvents.compileCloudFrontEvents();\n      expect(awsCompileCloudFrontEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CloudFrontDistribution.Properties.DistributionConfig.Origins[0]).to.eql({\n        Id: 's3/bucketname.s3.amazonaws.com/app*',\n        DomainName: 'bucketname.s3.amazonaws.com',\n        OriginPath: '/app*',\n        S3OriginConfig: {\n          OriginAccessIdentity: {\n            'Fn::Join': ['', ['origin-access-identity/cloudfront/', {\n              Ref: 'CloudFrontOAI'\n            }]]\n          }\n        }\n      });\n      expect(awsCompileCloudFrontEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CloudFrontDistribution.Properties.DistributionConfig.Origins.length).to.equal(1);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should show preconfigured notice on \"sls remove\" if service has cloudFront event","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","TODO: Removal notice"],"updatePoint":{"line":152,"column":88,"index":4844},"line":152,"code":"    it('should show preconfigured notice on \"sls remove\" if service has cloudFront event', async () => {\n      // Replaces\n      // https://github.com/serverless/serverless/blob/85e480b5771d5deeb45ae5eb586723c26cf61a90/lib/plugins/aws/package/compile/events/cloudFront/index.test.js#L88-L109\n\n      // Inspect result.stdoutData\n      await runServerless({\n        fixture: 'function',\n        command: 'remove',\n        lastLifecycleHookName: 'before:remove:remove'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":true,"dir":"test"},{"name":"should not show preconfigured notice on \"sls remove\" if service doesn't have cloudFront event","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","TODO: Removal notice"],"updatePoint":{"line":163,"column":102,"index":5342},"line":163,"code":"    it('should not show preconfigured notice on \"sls remove\" if service doesn\\'t have cloudFront event', async () => {\n      // Replaces\n      // https://github.com/serverless/serverless/blob/85e480b5771d5deeb45ae5eb586723c26cf61a90/lib/plugins/aws/package/compile/events/cloudFront/index.test.js#L113-L118\n\n      // Inspect result.stdoutData\n      await runServerless({\n        fixture: 'function',\n        command: 'remove',\n        lastLifecycleHookName: 'before:remove:remove'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":true,"dir":"test"},{"name":"should throw if function `memorySize` is greater than 128 for `functions[].events.cloudfront.evenType: \"viewer-request\"`","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":176,"column":128,"index":5906},"line":176,"code":"    it('should throw if function `memorySize` is greater than 128 for `functions[].events.cloudfront.evenType: \"viewer-request\"`', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            basic: {\n              memorySize: 129,\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'LAMBDA_EDGE_UNSUPPORTED_MEMORY_SIZE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if function `timeout` is greater than 5 for for `functions[].events.cloudfront.evenType: \"viewer-request\"","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":195,"column":126,"index":6588},"line":195,"code":"    it('should throw if function `timeout` is greater than 5 for for `functions[].events.cloudfront.evenType: \"viewer-request\"', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              timeout: 6,\n              handler: 'index.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'LAMBDA_EDGE_UNSUPPORTED_TIMEOUT_VALUE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if function `timeout` is greater than 30 for `functions[].events.cloudfront.evenType: \"origin-request\"`","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":215,"column":124,"index":7305},"line":215,"code":"    it('should throw if function `timeout` is greater than 30 for `functions[].events.cloudfront.evenType: \"origin-request\"`', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              handler: 'index.handler',\n              timeout: 31,\n              events: [{\n                cloudFront: {\n                  eventType: 'origin-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'LAMBDA_EDGE_UNSUPPORTED_TIMEOUT_VALUE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if function `timeout` is greater than 30 for `functions[].events.cloudfront.evenType: \"origin-response\"`","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":235,"column":125,"index":8024},"line":235,"code":"    it('should throw if function `timeout` is greater than 30 for `functions[].events.cloudfront.evenType: \"origin-response\"`', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              handler: 'index.handler',\n              timeout: 31,\n              events: [{\n                cloudFront: {\n                  eventType: 'origin-response',\n                  origin: 's3://bucketname.s3.amazonaws.com/files'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'LAMBDA_EDGE_UNSUPPORTED_TIMEOUT_VALUE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the region is not us-east-1","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":255,"column":60,"index":8679},"line":255,"code":"    it('should throw an error if the region is not us-east-1', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        options: {\n          region: 'eu-central-1'\n        },\n        configExt: {\n          functions: {\n            basic: {\n              name: 'first',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'CLOUDFRONT_INVALID_REGION');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than one cloudfront event with different origins were defined as a default","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":277,"column":103,"index":9389},"line":277,"code":"    it('should throw if more than one cloudfront event with different origins were defined as a default', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              name: 'first',\n              handler: 'first.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  isDefaultOrigin: true\n                }\n              }]\n            },\n            second: {\n              name: 'second',\n              handler: 'second.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://anotherbucket.s3.amazonaws.com/files',\n                  isDefaultOrigin: true\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'CLOUDFRONT_MULTIPLE_DEFAULT_ORIGIN_EVENTS');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if none of the cloudfront events with different origins were defined as a default","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":309,"column":102,"index":10488},"line":309,"code":"    it('should throw if none of the cloudfront events with different origins were defined as a default', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              name: 'first',\n              handler: 'first.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            },\n            second: {\n              name: 'second',\n              handler: 'second.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://anotherbucket.s3.amazonaws.com/files',\n                  pathPattern: '/anotherfiles/*'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'CLOUDFRONT_MULTIPLE_DEFAULT_ORIGIN_EVENTS');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should throw if lambda config refers a non-existing cache policy by name","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Validation"],"updatePoint":{"line":341,"column":80,"index":11576},"line":341,"code":"    it('Should throw if lambda config refers a non-existing cache policy by name', () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            basic: {\n              handler: 'myLambdaAtEdge.handler',\n              events: [{\n                cloudFront: {\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  eventType: 'viewer-response',\n                  cachePolicy: {\n                    name: 'not-existing-cache-policy'\n                  }\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'UNRECOGNIZED_CLOUDFRONT_CACHE_POLICY');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should not create cloudfront distribution when no cloudFront events are given","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Alternative cases"],"updatePoint":{"line":365,"column":85,"index":12385},"line":365,"code":"    it('should not create cloudfront distribution when no cloudFront events are given', async () => {\n      return expect(await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              handler: 'first.handler',\n              name: 'first'\n            },\n            second: {\n              name: 'second',\n              handler: 'second.handler',\n              events: [{\n                http: 'GET /'\n              }]\n            }\n          }\n        }\n      })).to.not.have.any.keys('CloudFrontDistribution');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create DefaultCacheBehavior if there are no events without PathPattern configured","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Alternative cases"],"updatePoint":{"line":386,"column":96,"index":13012},"line":386,"code":"    it('should create DefaultCacheBehavior if there are no events without PathPattern configured', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              name: 'first',\n              handler: 'first.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            }\n          }\n        }\n      });\n      const cfCloudFrontDistributionConfig = cfTemplate.Resources.CloudFrontDistribution.Properties.DistributionConfig;\n      expect(cfCloudFrontDistributionConfig.DefaultCacheBehavior).to.eql({\n        CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6',\n        TargetOriginId: 's3/bucketname.s3.amazonaws.com/files',\n        ViewerProtocolPolicy: 'allow-all'\n      });\n      expect(cfCloudFrontDistributionConfig.CacheBehaviors.length).to.equal(1);\n      expect(cfCloudFrontDistributionConfig.CacheBehaviors[0]).to.have.deep.include({\n        CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6',\n        TargetOriginId: 's3/bucketname.s3.amazonaws.com/files',\n        ViewerProtocolPolicy: 'allow-all',\n        PathPattern: '/files/*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than one origin with the same PathPattern","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Alternative cases"],"updatePoint":{"line":422,"column":70,"index":14408},"line":422,"code":"    it('should throw if more than one origin with the same PathPattern', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              name: 'first',\n              handler: 'first.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            },\n            second: {\n              name: 'second',\n              handler: 'second.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'origin-request',\n                  origin: 's3://anotherbucket.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'CLOUDFRONT_MULTIPLE_BEHAVIORS_FOR_SINGLE_PATH_PATTERN');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than one origin with the same event type","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Alternative cases"],"updatePoint":{"line":454,"column":69,"index":15490},"line":454,"code":"    it('should throw if more than one origin with the same event type', async () => {\n      return expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            first: {\n              name: 'first',\n              handler: 'first.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            },\n            second: {\n              name: 'second',\n              handler: 'second.handler',\n              events: [{\n                cloudFront: {\n                  eventType: 'viewer-request',\n                  origin: 's3://bucketname.s3.amazonaws.com/files',\n                  pathPattern: '/files/*'\n                }\n              }]\n            }\n          }\n        }\n      })).to.eventually.be.rejected.and.have.property('code', 'CLOUDFRONT_EVENT_TYPE_NON_UNIQUE_CACHE_BEHAVIOR');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should configure needed resources","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":758,"column":41,"index":25852},"line":758,"code":"    it('should configure needed resources', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginRequest');\n      const iamRoleDocument = cfResources[naming.getRoleLogicalId()];\n      expect(cfDistribution.Type).to.equal('AWS::CloudFront::Distribution');\n      expect(cfDistribution.Properties.DistributionConfig.Enabled).to.equal(true);\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy).to.equal('allow-all');\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior.TargetOriginId).to.equal('custom/example.com');\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations[0]).to.includes({\n        EventType: 'origin-response'\n      });\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations[0]).to.includes({\n        EventType: 'origin-response'\n      });\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior).to.have.nested.property('LambdaFunctionAssociations[0].LambdaFunctionARN.Ref').to.be.a('string').and.match(/^FnOriginResponseLambdaVersion.*$/);\n      expect(cfDistribution.Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'example.com',\n        CustomOriginConfig: {\n          OriginProtocolPolicy: 'match-viewer'\n        },\n        Id: 'custom/example.com'\n      }]);\n      expect(iamRoleDocument.Properties.AssumeRolePolicyDocument.Statement[0]).to.deep.eql({\n        Effect: 'Allow',\n        Principal: {\n          Service: ['lambda.amazonaws.com', 'edgelambda.amazonaws.com']\n        },\n        Action: ['sts:AssumeRole']\n      });\n      expect(iamRoleDocument.Properties.Policies[0].PolicyDocument.Statement).to.deep.include.members([{\n        Effect: 'Allow',\n        Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents', 'logs:TagResource'],\n        Resource: [{\n          'Fn::Sub': 'arn:${AWS::Partition}:logs:*:*:*'\n        }]\n      }]);\n      expect(cfResources[edgeResolvedName].DeletionPolicy).to.equal('Retain');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should configure distribution config comment","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":795,"column":52,"index":27990},"line":795,"code":"    it('should configure distribution config comment', () => {\n      const distributionConfig = cfResources[naming.getCloudFrontDistributionLogicalId()].Properties.DistributionConfig;\n      expect(distributionConfig.Comment).to.equal(`${serviceName} ${stage}`);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ensure that triggered functions are versioned","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":799,"column":60,"index":28268},"line":799,"code":"    it('should ensure that triggered functions are versioned', () => {\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnOriginRequest'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCustomOriginRequest'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnOriginResponse'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicy'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicyManaged'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicyManagedSetViaBehavior'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicySetViaCachePolicyIdAndBehavior'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicySetViaCachePolicyNameAndBehavior'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnLegacyCacheSettings'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnCachePolicyManagedSetViaBehaviorRequest'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnOrginPath'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnMultiOrigin'));\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('fnSameOriginDifferentProtcol'));\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ensure that triggered functions have 128MB as default `memorySize`","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":814,"column":81,"index":29807},"line":814,"code":"    it('should ensure that triggered functions have 128MB as default `memorySize`', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginRequest');\n      expect(cfResources[edgeResolvedName].Properties.MemorySize).to.equal(128);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ensure that triggered functions have 5s for default `timeout`","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":818,"column":76,"index":30060},"line":818,"code":"    it('should ensure that triggered functions have 5s for default `timeout`', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginRequest');\n      expect(cfResources[edgeResolvedName].Properties.Timeout).to.equal(5);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create different origins for different domains with the same path","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":822,"column":80,"index":30312},"line":822,"code":"    it('should create different origins for different domains with the same path', () => {\n      expect(cfDistribution.Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'bucketname.s3.amazonaws.com',\n        OriginPath: '/files',\n        S3OriginConfig: {},\n        Id: 's3/bucketname.s3.amazonaws.com/files'\n      }, {\n        DomainName: 'anotherbucket.s3.amazonaws.com',\n        OriginPath: '/files',\n        S3OriginConfig: {},\n        Id: 's3/anotherbucket.s3.amazonaws.com/files'\n      }]);\n      expect(cfDistribution.Properties.DistributionConfig.Origins.length).to.greaterThanOrEqual(2);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create different origins for the same domains with the same path but different protocols","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":836,"column":103,"index":30976},"line":836,"code":"    it('should create different origins for the same domains with the same path but different protocols', () => {\n      expect(cfDistribution.Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'protocol.s3.amazonaws.com',\n        OriginPath: '/files',\n        CustomOriginConfig: {\n          OriginProtocolPolicy: 'match-viewer'\n        },\n        Id: 'custom/protocol.s3.amazonaws.com/files'\n      }, {\n        DomainName: 'protocol.s3.amazonaws.com',\n        OriginPath: '/files',\n        S3OriginConfig: {},\n        Id: 's3/protocol.s3.amazonaws.com/files'\n      }]);\n      expect(cfDistribution.Properties.DistributionConfig.Origins.length).to.greaterThanOrEqual(2);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create different origins with different ids for different domains in the same function","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":852,"column":101,"index":31688},"line":852,"code":"    it('should create different origins with different ids for different domains in the same function', () => {\n      expect(cfDistribution.Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'one.s3.amazonaws.com',\n        OriginPath: '/files',\n        S3OriginConfig: {},\n        Id: 's3/one.s3.amazonaws.com/files'\n      }, {\n        DomainName: 'two.s3.amazonaws.com',\n        OriginPath: '/files',\n        S3OriginConfig: {},\n        Id: 's3/two.s3.amazonaws.com/files'\n      }]);\n      expect(cfDistribution.Properties.DistributionConfig.Origins.length).to.greaterThanOrEqual(2);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should use previous created origin for the same params","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":866,"column":62,"index":32277},"line":866,"code":"    it('should use previous created origin for the same params', () => {\n      expect(cfDistribution.Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'bucketname.s3.amazonaws.com',\n        S3OriginConfig: {},\n        Id: 's3/bucketname.s3.amazonaws.com'\n      }]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should support origin customization","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":873,"column":43,"index":32568},"line":873,"code":"    it('should support origin customization', () => {\n      expect(cfResources[naming.getCloudFrontDistributionLogicalId()].Properties.DistributionConfig.Origins).to.deep.include.members([{\n        DomainName: 'amazonaws.com',\n        CustomOriginConfig: {\n          OriginKeepaliveTimeout: 1,\n          OriginReadTimeout: 2,\n          OriginProtocolPolicy: 'http-only'\n        },\n        Id: 'custom/amazonaws.com'\n      }]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should assign a DefaultCacheBehavior behavior to event without PathPattern","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":884,"column":82,"index":33042},"line":884,"code":"    it('should assign a DefaultCacheBehavior behavior to event without PathPattern', () => {\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior).to.include({\n        ViewerProtocolPolicy: 'allow-all',\n        CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6',\n        TargetOriginId: 'custom/example.com'\n      });\n      expect(cfDistribution.Properties.DistributionConfig.DefaultCacheBehavior).to.have.nested.property('LambdaFunctionAssociations[0].LambdaFunctionARN.Ref').to.be.a('string').and.match(/^FnOriginResponseLambdaVersion.*$/);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create DefaultCacheBehavior if there are no events without PathPattern configured and isDefaultOrigin flag was set","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":892,"column":129,"index":33669},"line":892,"code":"    it('should create DefaultCacheBehavior if there are no events without PathPattern configured and isDefaultOrigin flag was set', async () => {\n      expect(cfDistribution.Properties.DistributionConfig).to.contain.keys('DefaultCacheBehavior');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should support behavior customization","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":895,"column":45,"index":33839},"line":895,"code":"    it('should support behavior customization', () => {\n      expect(getAssociatedCacheBehavior('managedPolicySetViaBehaviorRequest')).to.have.deep.includes({\n        TargetOriginId: 's3/bucketname.s3.amazonaws.com/files',\n        ViewerProtocolPolicy: 'https-only',\n        ForwardedValues: {\n          QueryString: true,\n          Headers: ['*']\n        },\n        AllowedMethods: ['GET', 'HEAD', 'OPTIONS'],\n        CachedMethods: ['GET', 'HEAD', 'OPTIONS']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ignore environment variables if provided in function properties","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":907,"column":78,"index":34351},"line":907,"code":"    it('should ignore environment variables if provided in function properties', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginRequest');\n      expect(cfResources[edgeResolvedName].Properties).not.to.contain.keys('Environment');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should ignore VPC config if provided in function properties","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":911,"column":67,"index":34605},"line":911,"code":"    it('Should ignore VPC config if provided in function properties', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginRequest');\n      expect(cfResources[edgeResolvedName].Properties).not.to.contain.keys('VpcConfig');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ignore provider environment variables","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":915,"column":52,"index":34842},"line":915,"code":"    it('should ignore provider environment variables', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginResponse');\n      expect(cfResources[edgeResolvedName].Properties).not.to.contain.keys('Environment');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should ignore provider VPC config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":919,"column":41,"index":35071},"line":919,"code":"    it('should ignore provider VPC config', () => {\n      const edgeResolvedName = naming.getLambdaLogicalId('fnOriginResponse');\n      const otherResolvedName = naming.getLambdaLogicalId('basic');\n      expect(cfResources[edgeResolvedName].Properties).not.to.contain.keys('VpcConfig');\n      expect(cfResources[otherResolvedName].Properties).to.contain.keys('VpcConfig');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should create cache policies listed in provider.cloudFront.cachePolicies property","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":925,"column":89,"index":35500},"line":925,"code":"    it('should create cache policies listed in provider.cloudFront.cachePolicies property', () => {\n      const cachePolicyLogicalId = naming.getCloudFrontCachePolicyLogicalId(cachePolicyName);\n      const cachePolicyConfigProperties = cfResources[cachePolicyLogicalId].Properties.CachePolicyConfig;\n      expect(cachePolicyConfigProperties).to.deep.eq({\n        Name: `${serviceName}-${stage}-${cachePolicyName}`,\n        ...cachePolicyConfig\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should attach a cache policy to a cloudfront behavior when specified by name in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":933,"column":101,"index":35974},"line":933,"code":"    it('should attach a cache policy to a cloudfront behavior when specified by name in lambda config', () => {\n      const cachePolicyLogicalId = naming.getCloudFrontCachePolicyLogicalId(cachePolicyName);\n      expect(getAssociatedCacheBehavior('userConfiguredPolicy').CachePolicyId).to.deep.eq({\n        Ref: cachePolicyLogicalId\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a cache policy to a cloudfront behavior when specified by id in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":939,"column":99,"index":36322},"line":939,"code":"    it('Should attach a cache policy to a cloudfront behavior when specified by id in lambda config', () => {\n      expect(getAssociatedCacheBehavior('managedPolicy').CachePolicyId).to.eq(cachePolicyId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a cache policy to a cloudfront behavior when specified by id via `behavior.CachePolicyId` in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":942,"column":128,"index":36563},"line":942,"code":"    it('Should attach a cache policy to a cloudfront behavior when specified by id via `behavior.CachePolicyId` in lambda config', () => {\n      expect(getAssociatedCacheBehavior('managedPolicySetViaBehavior').CachePolicyId).to.eq(cachePolicyId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a response headers policy to a cloudfront behavior when specified by id via `behavior.ResponseHeadersPolicyId` in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":945,"column":149,"index":36839},"line":945,"code":"    it('Should attach a response headers policy to a cloudfront behavior when specified by id via `behavior.ResponseHeadersPolicyId` in lambda config', () => {\n      expect(getAssociatedCacheBehavior('managedPolicySetViaBehavior').ResponseHeadersPolicyId).to.eq(responseHeadersPolicyId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a cache policy specified via `cachePolicy.id` to a cloudfront behavior when specified via both of `cachePolicy.id` and `behavior.CachePolicyId` in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":948,"column":182,"index":37168},"line":948,"code":"    it('Should attach a cache policy specified via `cachePolicy.id` to a cloudfront behavior when specified via both of `cachePolicy.id` and `behavior.CachePolicyId` in lambda config', () => {\n      expect(getAssociatedCacheBehavior('policySetViaCachePolicyIdAndBehavior').CachePolicyId).to.eq(cachePolicyId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a cache policy specified via `cachePolicy.name` to a cloudfront behavior when specified via both of `cachePolicy.name` and `behavior.CachePolicyId` in lambda config","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":951,"column":186,"index":37490},"line":951,"code":"    it('Should attach a cache policy specified via `cachePolicy.name` to a cloudfront behavior when specified via both of `cachePolicy.name` and `behavior.CachePolicyId` in lambda config', () => {\n      const cachePolicyLogicalId = naming.getCloudFrontCachePolicyLogicalId(cachePolicyName);\n      expect(getAssociatedCacheBehavior('policySetViaCachePolicyNameAndBehavior').CachePolicyId).to.deep.eq({\n        Ref: cachePolicyLogicalId\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should attach a default cache policy when none are provided","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":957,"column":67,"index":37824},"line":957,"code":"    it('Should attach a default cache policy when none are provided', () => {\n      // Default Managed-CachingOptimized Cache Policy id\n      const defaultCachePolicyId = '658327ea-f89d-4fab-a63d-7e88639e58f6';\n      expect(getAssociatedCacheBehavior('noPolicy').CachePolicyId).to.eq(defaultCachePolicyId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"Should use legacy cache settings","suites":["test/unit/lib/plugins/aws/package/compile/events/cloudFront.test.js","Resource generation"],"updatePoint":{"line":962,"column":40,"index":38112},"line":962,"code":"    it('Should use legacy cache settings', () => {\n      expect(getAssociatedCacheBehavior('legacyCacheSettings')).not.to.contain.keys('CachePolicyId');\n      expect(getAssociatedCacheBehavior('legacyCacheSettings')).to.contain.keys('MinTTL', 'MaxTTL', 'DefaultTTL', 'ForwardedValues');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-front.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["awsCompileCloudWatchEventEvents","#constructor()"],"updatePoint":{"line":23,"column":70,"index":987},"line":23,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileCloudWatchEventEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when cloudwatch events are given","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":26,"column":78,"index":1215},"line":26,"code":"    it('should create corresponding resources when cloudwatch events are given', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false\n            }\n          }, {\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: true\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Type).to.equal('AWS::Events::Rule');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent2.Type).to.equal('AWS::Events::Rule');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionEventsRuleCloudWatchEvent1.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionEventsRuleCloudWatchEvent2.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect enabled variable, defaulting to true","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":60,"column":59,"index":2916},"line":60,"code":"    it('should respect enabled variable, defaulting to true', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false\n            }\n          }, {\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: true\n            }\n          }, {\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              }\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.State).to.equal('DISABLED');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent2.Properties.State).to.equal('ENABLED');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent3.Properties.State).to.equal('ENABLED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect inputPath variable","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":103,"column":41,"index":4675},"line":103,"code":"    it('should respect inputPath variable', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              inputPath: '$.stageVariables'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Targets[0].InputPath).to.equal('$.stageVariables');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect input variable","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":124,"column":37,"index":5507},"line":124,"code":"    it('should respect input variable', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              input: '{\"key\":\"value\"}'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Targets[0].Input).to.equal('{\"key\":\"value\"}');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect inputTransformer variable","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":145,"column":48,"index":6340},"line":145,"code":"    it('should respect inputTransformer variable', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              inputTransformer: {\n                inputPathsMap: {\n                  eventTime: '$.time'\n                },\n                inputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}'\n              }\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Targets[0].InputTransformer).to.eql({\n        InputTemplate: '{\"time\": <eventTime>, \"key1\": \"value1\"}',\n        InputPathsMap: {\n          eventTime: '$.time'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect description variable","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":176,"column":43,"index":7474},"line":176,"code":"    it('should respect description variable', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              input: '{\"key\":\"value\"}',\n              description: 'test description'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Description).to.equal('test description');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect name variable","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":198,"column":36,"index":8338},"line":198,"code":"    it('should respect name variable', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              input: '{\"key\":\"value\"}',\n              name: 'test-event-name'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Name).to.equal('test-event-name');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect input variable as an object","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":220,"column":50,"index":9200},"line":220,"code":"    it('should respect input variable as an object', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              input: {\n                key: 'value'\n              }\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Targets[0].Input).to.equal('{\"key\":\"value\"}');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should respect variables if multi-line variables is given","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":243,"column":65,"index":10079},"line":243,"code":"    it('should respect variables if multi-line variables is given', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchEvent: {\n              event: {\n                'source': ['aws.ec2'],\n                'detail-type': ['EC2 Instance State-change Notification \\n with newline'],\n                'detail': {\n                  state: ['pending']\n                }\n              },\n              enabled: false,\n              input: {\n                key: 'value\\n'\n              }\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.EventPattern['detail-type'][0]).to.equal('EC2 Instance State-change Notification  with newline');\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventsRuleCloudWatchEvent1.Properties.Targets[0].Input).to.equal('{\"key\":\"value\"}');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when cloudwatch events are not given","suites":["awsCompileCloudWatchEventEvents","#compileCloudWatchEventEvents()"],"updatePoint":{"line":267,"column":86,"index":11252},"line":267,"code":"    it('should not create corresponding resources when cloudwatch events are not given', () => {\n      awsCompileCloudWatchEventEvents.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileCloudWatchEventEvents.compileCloudWatchEventEvents();\n      expect(awsCompileCloudWatchEventEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-event.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileCloudWatchLogEvents","#constructor()"],"updatePoint":{"line":23,"column":70,"index":973},"line":23,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileCloudWatchLogEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when cloudwatchLog events are given","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":26,"column":81,"index":1200},"line":26,"code":"    it('should create corresponding resources when cloudwatchLog events are given', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1'\n            }\n          }, {\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello2'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.LogGroupName).to.equal('/aws/lambda/hello2');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should respect 2 cloudwatchLog events for log group","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":49,"column":59,"index":3102},"line":49,"code":"    it('should respect 2 cloudwatchLog events for log group', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1'\n            }\n          }]\n        },\n        second: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should respect \"filter\" variable","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":76,"column":40,"index":5249},"line":76,"code":"    it('should respect \"filter\" variable', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1',\n              filter: '{$.userIdentity.type = Root}'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('{$.userIdentity.type = Root}');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should respect \"filter\" variable of plain text","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":90,"column":54,"index":5891},"line":90,"code":"    it('should respect \"filter\" variable of plain text', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1',\n              filter: '\"Total amount\" -\"level=Debug\"'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('\"Total amount\" -\"level=Debug\"');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should respect escaped \"filter\" variable of plain text","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":104,"column":62,"index":6543},"line":104,"code":"    it('should respect escaped \"filter\" variable of plain text', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1',\n              filter: '\\\\\"Total amount\\\\\" -\\\\\"level=Debug\\\\\"'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('\"Total amount\" -\"level=Debug\"');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should set an empty string for FilterPattern statement when \"filter\" variable is not given","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":118,"column":98,"index":7239},"line":118,"code":"    it('should set an empty string for FilterPattern statement when \"filter\" variable is not given', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lambda/hello1'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when cloudwatchLog events are given as a string","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":131,"column":93,"index":7838},"line":131,"code":"    it('should create corresponding resources when cloudwatchLog events are given as a string', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: '/aws/lambda/hello1'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello2'\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Type).to.equal('AWS::Logs::SubscriptionFilter');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.LogGroupName).to.equal('/aws/lambda/hello2');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.FilterPattern).to.equal('');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should create a longest-common suffix of logGroup to minimize scope","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":150,"column":75,"index":9676},"line":150,"code":"    it('should create a longest-common suffix of logGroup to minimize scope', () => {\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1'])).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1', '/aws/lambda/hello2'])).to.equal('/aws/lambda/hello*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1', '/aws/lambda/hot'])).to.equal('/aws/lambda/h*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1', '/aws/lambda/tweet'])).to.equal('/aws/lambda/*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1', '/aws/lex/log1', '/aws/lightsail/log1'])).to.equal('/aws/l*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/hello1', '/aws/batch/log1'])).to.equal('/aws/*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/*', '/aws/lambda/hello'])).to.equal('/aws/*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/*', '/aws/lambda/hello'])).to.equal('/aws/lambda/*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda', '/aws/lambda/hello'])).to.equal('/aws/lambda*');\n      expect(awsCompileCloudWatchLogEvents.longestCommonSuffix(['/aws/lambda/yada-dev-dummy', '/aws/lambda/yada-dev-dummy2'])).to.equal('/aws/lambda/yada-dev-dummy*');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if \"logGroup\" is configured more than twice in one CloudFormation stack","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":162,"column":101,"index":11149},"line":162,"code":"    it('should throw an error if \"logGroup\" is configured more than twice in one CloudFormation stack', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: '/aws/lambda/hello1'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello2'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello1'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello1'\n          }]\n        }\n      };\n      expect(() => awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents()).to.throw(Error);\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: '/aws/lambda/hello1'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello2'\n          }, {\n            cloudwatchLog: '/aws/lambda/hello1'\n          }]\n        },\n        second: {\n          events: [{\n            cloudwatchLog: '/aws/lambda/hello1'\n          }]\n        }\n      };\n      expect(() => awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents()).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should respect variables if multi-line variables are given","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":195,"column":66,"index":12226},"line":195,"code":"    it('should respect variables if multi-line variables are given', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: {\n              logGroup: '/aws/lam\\nbda/hello1',\n              filter: '{$.userIden\\ntity.type = Root}'\n            }\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello1');\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('{$.userIdentity.type = Root}');\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cloudwatchLog: '/aws/lam\\nbda/hello3'\n          }]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal('/aws/lambda/hello3');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when cloudwatchLog event is not given","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":219,"column":87,"index":13582},"line":219,"code":"    it('should not create corresponding resources when cloudwatchLog event is not given', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {\n          events: [{}]\n        }\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when \"events\" property is not given","suites":["AwsCompileCloudWatchLogEvents","#compileCloudWatchLogEvents()"],"updatePoint":{"line":228,"column":85,"index":14012},"line":228,"code":"    it('should not create corresponding resources when \"events\" property is not given', () => {\n      awsCompileCloudWatchLogEvents.serverless.service.functions = {\n        first: {}\n      };\n      awsCompileCloudWatchLogEvents.compileCloudWatchLogEvents();\n      expect(awsCompileCloudWatchLogEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/cloud-watch-log.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileCognitoUserPoolEvents","#constructor()"],"updatePoint":{"line":164,"column":70,"index":5639},"line":164,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileCognitoUserPoolEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when CUP events are given as separate functions","suites":["AwsCompileCognitoUserPoolEvents","#newCognitoUserPools()"],"updatePoint":{"line":167,"column":79,"index":5859},"line":167,"code":"    it('should create resources when CUP events are given as separate functions', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool1',\n              trigger: 'PreSignUp'\n            }\n          }]\n        },\n        second: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool2',\n              trigger: 'PostConfirmation'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPool1TriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLambdaPermissionCognitoUserPoolMyUserPool2TriggerSourcePostConfirmation.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when CUP events are given with the same function","suites":["AwsCompileCognitoUserPoolEvents","#newCognitoUserPools()"],"updatePoint":{"line":194,"column":80,"index":7634},"line":194,"code":"    it('should create resources when CUP events are given with the same function', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool1',\n              trigger: 'PreSignUp'\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'MyUserPool2',\n              trigger: 'PostConfirmation'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPool1TriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPool2TriggerSourcePostConfirmation.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when CUP events are given with diff funcs and single event","suites":["AwsCompileCognitoUserPoolEvents","#newCognitoUserPools()"],"updatePoint":{"line":218,"column":90,"index":9370},"line":218,"code":"    it('should create resources when CUP events are given with diff funcs and single event', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool1',\n              trigger: 'PreSignUp'\n            }\n          }]\n        },\n        second: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool2',\n              trigger: 'PreSignUp'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool1.Properties.LambdaConfig.PreSignUp['Fn::GetAtt'][0]).to.equal(serverless.service.serverless.getProvider('aws').naming.getLambdaLogicalId('first'));\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.DependsOn).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool2.Properties.LambdaConfig.PreSignUp['Fn::GetAtt'][0]).to.equal(serverless.service.serverless.getProvider('aws').naming.getLambdaLogicalId('second'));\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPool1TriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLambdaPermissionCognitoUserPoolMyUserPool2TriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create single user pool resource when the same pool referenced repeatedly","suites":["AwsCompileCognitoUserPoolEvents","#newCognitoUserPools()"],"updatePoint":{"line":247,"column":88,"index":11716},"line":247,"code":"    it('should create single user pool resource when the same pool referenced repeatedly', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool',\n              trigger: 'PreSignUp'\n            }\n          }]\n        },\n        second: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool',\n              trigger: 'PostConfirmation'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Type).to.equal('AWS::Cognito::UserPool');\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties.LambdaConfig)).to.have.lengthOf(2);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.DependsOn).to.have.lengthOf(2);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePostConfirmation.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should not create resources when CUP events are not given","suites":["AwsCompileCognitoUserPoolEvents","#newCognitoUserPools()"],"updatePoint":{"line":273,"column":65,"index":13313},"line":273,"code":"    it('should not create resources when CUP events are not given', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resources for the most minimal configuration","suites":["AwsCompileCognitoUserPoolEvents","#existingCognitoUserPools()"],"updatePoint":{"line":284,"column":80,"index":13791},"line":284,"code":"    it('should create the necessary resources for the most minimal configuration', async () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'CustomMessage',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileCognitoUserPoolEvents.existingCognitoUserPools()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('cognitoUserPool');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool'],\n          Effect: 'Allow',\n          Resource: '*'\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:lambda:*:*:function:first'\n          }\n        }, {\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:iam::*:role/*'\n          },\n          Action: ['iam:PassRole']\n        }]);\n        expect(Resources.FirstCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: 'first',\n            UserPoolName: 'existing-cognito-user-pool',\n            UserPoolConfigs: [{\n              Trigger: 'CustomMessage'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should support `forceDeploy` setting","suites":["AwsCompileCognitoUserPoolEvents","#existingCognitoUserPools()"],"updatePoint":{"line":338,"column":44,"index":15878},"line":338,"code":"    it('should support `forceDeploy` setting', async () => {\n      const result = await runServerless({\n        fixture: 'cognito-user-pool',\n        configExt: {\n          functions: {\n            existingSimple: {\n              events: [{\n                cognitoUserPool: {\n                  forceDeploy: true\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const {\n        Resources\n      } = result.cfTemplate;\n      const {\n        awsNaming\n      } = result;\n      const customResource = Resources[awsNaming.getCustomResourceCognitoUserPoolResourceLogicalId('existingSimple')];\n      expect(typeof customResource.Properties.ForceDeploy).to.equal('number');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resources for a service using multiple event definitions","suites":["AwsCompileCognitoUserPoolEvents","#existingCognitoUserPools()"],"updatePoint":{"line":363,"column":92,"index":16664},"line":363,"code":"    it('should create the necessary resources for a service using multiple event definitions', async () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'CustomMessage',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'PreSignUp',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'DefineAuthChallenge',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileCognitoUserPoolEvents.existingCognitoUserPools()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('cognitoUserPool');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool'],\n          Effect: 'Allow',\n          Resource: '*'\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:lambda:*:*:function:first'\n          }\n        }, {\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:iam::*:role/*'\n          },\n          Action: ['iam:PassRole']\n        }]);\n        expect(Resources.FirstCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: 'first',\n            UserPoolName: 'existing-cognito-user-pool',\n            UserPoolConfigs: [{\n              Trigger: 'CustomMessage'\n            }, {\n              Trigger: 'PreSignUp'\n            }, {\n              Trigger: 'DefineAuthChallenge'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create DependsOn clauses when one cognito user pool is used in more than 1 custom resources","suites":["AwsCompileCognitoUserPoolEvents","#existingCognitoUserPools()"],"updatePoint":{"line":433,"column":106,"index":19287},"line":433,"code":"    it('should create DependsOn clauses when one cognito user pool is used in more than 1 custom resources', async () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'CustomMessage',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'PreSignUp',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'DefineAuthChallenge',\n              existing: true\n            }\n          }]\n        },\n        second: {\n          name: 'second',\n          events: [{\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'PostConfirmation',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'PreAuthentication',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'PostAuthentication',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileCognitoUserPoolEvents.existingCognitoUserPools()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('cognitoUserPool');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool'],\n          Effect: 'Allow',\n          Resource: '*'\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:lambda:*:*:function:first'\n          }\n        }, {\n          Action: ['cognito-idp:ListUserPools', 'cognito-idp:DescribeUserPool', 'cognito-idp:UpdateUserPool'],\n          Effect: 'Allow',\n          Resource: '*'\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:lambda:*:*:function:second'\n          }\n        }, {\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Sub': 'arn:${AWS::Partition}:iam::*:role/*'\n          },\n          Action: ['iam:PassRole']\n        }]);\n        expect(Object.keys(Resources)).to.have.length(2);\n        expect(Resources.FirstCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: 'first',\n            UserPoolName: 'existing-cognito-user-pool',\n            UserPoolConfigs: [{\n              Trigger: 'CustomMessage'\n            }, {\n              Trigger: 'PreSignUp'\n            }, {\n              Trigger: 'DefineAuthChallenge'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n        expect(Resources.SecondCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['SecondLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction', 'FirstCustomCognitoUserPool1'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: 'second',\n            UserPoolName: 'existing-cognito-user-pool',\n            UserPoolConfigs: [{\n              Trigger: 'PostConfirmation'\n            }, {\n              Trigger: 'PreAuthentication'\n            }, {\n              Trigger: 'PostAuthentication'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than 1 Cognito User Pool is configured per function","suites":["AwsCompileCognitoUserPoolEvents","#existingCognitoUserPools()"],"updatePoint":{"line":556,"column":80,"index":23748},"line":556,"code":"    it('should throw if more than 1 Cognito User Pool is configured per function', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool',\n              trigger: 'CustomMessage',\n              existing: true\n            }\n          }, {\n            cognitoUserPool: {\n              pool: 'existing-cognito-user-pool-2',\n              trigger: 'PreSignUp',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(() => awsCompileCognitoUserPoolEvents.existingCognitoUserPools()).to.throw('Only one Cognito User Pool');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"does not merge if no custom resource is found in Resources","suites":["AwsCompileCognitoUserPoolEvents","#mergeWithCustomResources()"],"updatePoint":{"line":579,"column":66,"index":24522},"line":579,"code":"    it('does not merge if no custom resource is found in Resources', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool',\n              trigger: 'PreSignUp'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.serverless.service.resources = {};\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      awsCompileCognitoUserPoolEvents.mergeWithCustomResources();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Type).to.equal('AWS::Cognito::UserPool');\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties)).to.have.lengthOf(2);\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties.LambdaConfig)).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should merge custom resources found in Resources","suites":["AwsCompileCognitoUserPoolEvents","#mergeWithCustomResources()"],"updatePoint":{"line":598,"column":56,"index":25845},"line":598,"code":"    it('should merge custom resources found in Resources', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool',\n              trigger: 'PreSignUp'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.serverless.service.resources = {\n        CognitoUserPoolMyUserPool: {\n          Type: 'AWS::Cognito::UserPool',\n          Properties: {\n            UserPoolName: 'ProdMyUserPool',\n            MfaConfiguration: 'OFF',\n            EmailVerificationSubject: 'Your verification code',\n            EmailVerificationMessage: 'Your verification code is {####}.',\n            SmsVerificationMessage: 'Your verification code is {####}.'\n          }\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      awsCompileCognitoUserPoolEvents.mergeWithCustomResources();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Type).to.equal('AWS::Cognito::UserPool');\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties)).to.have.lengthOf(6);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.DependsOn).to.have.lengthOf(1);\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties.LambdaConfig)).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should merge `DependsOn` clauses correctly if being overridden from Resources","suites":["AwsCompileCognitoUserPoolEvents","#mergeWithCustomResources()"],"updatePoint":{"line":629,"column":85,"index":27793},"line":629,"code":"    it('should merge `DependsOn` clauses correctly if being overridden from Resources', () => {\n      awsCompileCognitoUserPoolEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            cognitoUserPool: {\n              pool: 'MyUserPool',\n              trigger: 'PreSignUp'\n            }\n          }]\n        }\n      };\n      awsCompileCognitoUserPoolEvents.serverless.service.resources = {\n        CognitoUserPoolMyUserPool: {\n          DependsOn: ['Something', 'SomethingElse', ['Nothing', 'NothingAtAll']],\n          Type: 'AWS::Cognito::UserPool',\n          Properties: {\n            UserPoolName: 'ProdMyUserPool',\n            MfaConfiguration: 'OFF',\n            EmailVerificationSubject: 'Your verification code',\n            EmailVerificationMessage: 'Your verification code is {####}.',\n            SmsVerificationMessage: 'Your verification code is {####}.'\n          }\n        }\n      };\n      awsCompileCognitoUserPoolEvents.newCognitoUserPools();\n      awsCompileCognitoUserPoolEvents.mergeWithCustomResources();\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Type).to.equal('AWS::Cognito::UserPool');\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.DependsOn).to.have.lengthOf(4);\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties)).to.have.lengthOf(6);\n      expect(Object.keys(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.CognitoUserPoolMyUserPool.Properties.LambdaConfig)).to.have.lengthOf(1);\n      expect(awsCompileCognitoUserPoolEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionCognitoUserPoolMyUserPoolTriggerSourcePreSignUp.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than 1 KMS Key is configured per new Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Schema Issues"],"updatePoint":{"line":679,"column":85,"index":30275},"line":679,"code":"      it('should throw if more than 1 KMS Key is configured per new Cognito User Pool', async () => {\n        return await expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                events: [{\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomSMSSender',\n                    kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1'\n                  }\n                }, {\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomEmailSender',\n                    kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/22222222-9abc-def0-1234-56789abcdef1'\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejectedWith('Only one KMS Key');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than 1 KMS Key is configured per existing Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Schema Issues"],"updatePoint":{"line":704,"column":90,"index":31250},"line":704,"code":"      it('should throw if more than 1 KMS Key is configured per existing Cognito User Pool', async () => {\n        return await expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                events: [{\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomSMSSender',\n                    kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n                    existing: true\n                  }\n                }, {\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomEmailSender',\n                    kmsKeyId: 'arn:aws:kms:eu-west-1:111111111111:key/22222222-9abc-def0-1234-56789abcdef1',\n                    existing: true\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejectedWith('Only one KMS Key');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should throw if no KMS Key is configured for a new Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Schema Issues"],"updatePoint":{"line":731,"column":78,"index":32285},"line":731,"code":"      it('should throw if no KMS Key is configured for a new Cognito User Pool', () => {\n        return expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              first: {\n                handler: 'index.js',\n                events: [{\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomSMSSender'\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejectedWith('KMS Key must be set');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should throw if no KMS Key is configured for an existing Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Schema Issues"],"updatePoint":{"line":750,"column":84,"index":32896},"line":750,"code":"      it('should throw if no KMS Key is configured for an existing Cognito User Pool', () => {\n        return expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              first: {\n                handler: 'index.js',\n                events: [{\n                  cognitoUserPool: {\n                    pool: 'MyUserPool1',\n                    trigger: 'CustomSMSSender',\n                    existing: true\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejectedWith('KMS Key must be set');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a KMS Key is configured as a string","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","New Pools"],"updatePoint":{"line":772,"column":74,"index":33575},"line":772,"code":"      it('should create resources when a KMS Key is configured as a string', () => {\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsStringARN.Type).to.equal('AWS::Cognito::UserPool');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsStringARN.DependsOn).to.have.lengthOf(1);\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsStringARN.Properties.LambdaConfig.KMSKeyID).to.equal('arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsStringARN.Properties.LambdaConfig.CustomSMSSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['SingleCustomSenderSourceKmsStringARNLambdaFunction', 'Arn']\n        });\n        expect(cfResources.SingleCustomSenderSourceKmsStringARNLambdaPermissionCognitoUserPoolSingleCustomSenderSourceKmsStringARNTriggerSourceCustomSMSSender.Type).to.equal('AWS::Lambda::Permission');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a KMS Key is configured as ARN Reference","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","New Pools"],"updatePoint":{"line":781,"column":79,"index":34555},"line":781,"code":"      it('should create resources when a KMS Key is configured as ARN Reference', () => {\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsRefARN.Type).to.equal('AWS::Cognito::UserPool');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsRefARN.DependsOn).to.have.lengthOf(1);\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsRefARN.Properties.LambdaConfig.KMSKeyID).to.deep.equal({\n          'Fn::GetAtt': ['kmsKey', 'Arn']\n        });\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceKmsRefARN.Properties.LambdaConfig.CustomSMSSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['SingleCustomSenderSourceKmsRefARNLambdaFunction', 'Arn']\n        });\n        expect(cfResources.SingleCustomSenderSourceKmsRefARNLambdaPermissionCognitoUserPoolSingleCustomSenderSourceKmsRefARNTriggerSourceCustomSMSSender.Type).to.equal('AWS::Lambda::Permission');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when CUP events that specify multiple custom sender sources are given","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","New Pools"],"updatePoint":{"line":792,"column":103,"index":35519},"line":792,"code":"      it('should create resources when CUP events that specify multiple custom sender sources are given', () => {\n        expect(cfResources.CognitoUserPoolMultipleCustomSenderSourceForSinglePool.Type).to.equal('AWS::Cognito::UserPool');\n        expect(cfResources.CognitoUserPoolMultipleCustomSenderSourceForSinglePool.DependsOn).to.have.lengthOf(2);\n        expect(cfResources.CognitoUserPoolMultipleCustomSenderSourceForSinglePool.Properties.LambdaConfig.KMSKeyID).to.equal('arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1');\n        expect(cfResources.CognitoUserPoolMultipleCustomSenderSourceForSinglePool.Properties.LambdaConfig.CustomSMSSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['MultipleCustomSenderSourceForSinglePoolLambdaFunction', 'Arn']\n        });\n        expect(cfResources.CognitoUserPoolMultipleCustomSenderSourceForSinglePool.Properties.LambdaConfig.CustomEmailSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['MultipleCustomSenderSourceForSinglePoolLambdaFunction', 'Arn']\n        });\n        expect(cfResources.MultipleCustomSenderSourceForSinglePoolLambdaPermissionCognitoUserPoolMultipleCustomSenderSourceForSinglePoolTriggerSourceCustomSMSSender.Type).to.equal('AWS::Lambda::Permission');\n        expect(cfResources.MultipleCustomSenderSourceForSinglePoolLambdaPermissionCognitoUserPoolMultipleCustomSenderSourceForSinglePoolTriggerSourceCustomEmailSender.Type).to.equal('AWS::Lambda::Permission');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a single KMS Key is configured per new Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","New Pools"],"updatePoint":{"line":805,"column":95,"index":36998},"line":805,"code":"      it('should create resources when a single KMS Key is configured per new Cognito User Pool', () => {\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools1.Type).to.equal('AWS::Cognito::UserPool');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools1.DependsOn).to.have.lengthOf(1);\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools1.Properties.LambdaConfig.KMSKeyID).to.equal('arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools1.Properties.LambdaConfig.CustomSMSSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['SingleCustomSenderSourceForMultiplePools1LambdaFunction', 'Arn']\n        });\n        expect(cfResources.SingleCustomSenderSourceForMultiplePools1LambdaPermissionCognitoUserPoolSingleCustomSenderSourceForMultiplePools1TriggerSourceCustomSMSSender.Type).to.equal('AWS::Lambda::Permission');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools2.Type).to.equal('AWS::Cognito::UserPool');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools2.Properties.LambdaConfig.KMSKeyID).to.equal('arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1');\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools2.DependsOn).to.have.lengthOf(1);\n        expect(cfResources.CognitoUserPoolSingleCustomSenderSourceForMultiplePools2.Properties.LambdaConfig.CustomSMSSender.LambdaArn).to.deep.equal({\n          'Fn::GetAtt': ['SingleCustomSenderSourceForMultiplePools2LambdaFunction', 'Arn']\n        });\n        expect(cfResources.SingleCustomSenderSourceForMultiplePools2LambdaPermissionCognitoUserPoolSingleCustomSenderSourceForMultiplePools2TriggerSourceCustomSMSSender.Type).to.equal('AWS::Lambda::Permission');\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a KMS Key is configured as a string","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Existing Pools"],"updatePoint":{"line":823,"column":74,"index":38970},"line":823,"code":"      it('should create resources when a KMS Key is configured as a string', () => {\n        const functionName = cfResources.SingleCustomSenderSourceKmsStringARNExistingLambdaFunction.Properties.FunctionName;\n        expect(cfResources.SingleCustomSenderSourceKmsStringARNExistingCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['SingleCustomSenderSourceKmsStringARNExistingLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: functionName,\n            UserPoolName: 'SingleCustomSenderSourceKmsStringARNExisting',\n            UserPoolConfigs: [{\n              Trigger: 'CustomSMSSender',\n              KMSKeyID: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n              LambdaVersion: 'V1_0'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a KMS Key is configured as ARN Reference","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Existing Pools"],"updatePoint":{"line":844,"column":79,"index":40071},"line":844,"code":"      it('should create resources when a KMS Key is configured as ARN Reference', () => {\n        const functionName = cfResources.SingleCustomSenderSourceKmsRefARNExistingLambdaFunction.Properties.FunctionName;\n        expect(cfResources.SingleCustomSenderSourceKmsRefARNExistingCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['SingleCustomSenderSourceKmsRefARNExistingLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: functionName,\n            UserPoolName: 'SingleCustomSenderSourceKmsRefARNExisting',\n            UserPoolConfigs: [{\n              Trigger: 'CustomSMSSender',\n              KMSKeyID: {\n                'Fn::GetAtt': ['kmsKey', 'Arn']\n              },\n              LambdaVersion: 'V1_0'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when CUP events that specify multiple custom sender sources are given","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Existing Pools"],"updatePoint":{"line":867,"column":103,"index":41172},"line":867,"code":"      it('should create resources when CUP events that specify multiple custom sender sources are given', () => {\n        const functionName = cfResources.MultipleCustomSenderSourceForSinglePoolExistingLambdaFunction.Properties.FunctionName;\n        expect(cfResources.MultipleCustomSenderSourceForSinglePoolExistingCustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['MultipleCustomSenderSourceForSinglePoolExistingLambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: functionName,\n            UserPoolName: 'MultipleCustomSenderSourceForSinglePoolExisting',\n            UserPoolConfigs: [{\n              Trigger: 'CustomSMSSender',\n              KMSKeyID: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n              LambdaVersion: 'V1_0'\n            }, {\n              Trigger: 'CustomEmailSender',\n              KMSKeyID: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n              LambdaVersion: 'V1_0'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create resources when a single KMS Key is configured per new Cognito User Pool","suites":["lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","Custom Sender Sources","Existing Pools"],"updatePoint":{"line":892,"column":95,"index":42501},"line":892,"code":"      it('should create resources when a single KMS Key is configured per new Cognito User Pool', () => {\n        const functionName1 = cfResources.SingleCustomSenderSourceForMultiplePoolsExisting1LambdaFunction.Properties.FunctionName;\n        expect(cfResources.SingleCustomSenderSourceForMultiplePoolsExisting1CustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['SingleCustomSenderSourceForMultiplePoolsExisting1LambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: functionName1,\n            UserPoolName: 'SingleCustomSenderSourceForMultiplePoolsExisting1',\n            UserPoolConfigs: [{\n              Trigger: 'CustomSMSSender',\n              KMSKeyID: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n              LambdaVersion: 'V1_0'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n        const functionName2 = cfResources.SingleCustomSenderSourceForMultiplePoolsExisting2LambdaFunction.Properties.FunctionName;\n        expect(cfResources.SingleCustomSenderSourceForMultiplePoolsExisting2CustomCognitoUserPool1).to.deep.equal({\n          Type: 'Custom::CognitoUserPool',\n          Version: 1,\n          DependsOn: ['SingleCustomSenderSourceForMultiplePoolsExisting2LambdaFunction', 'CustomDashresourceDashexistingDashcupLambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashcupLambdaFunction', 'Arn']\n            },\n            FunctionName: functionName2,\n            UserPoolName: 'SingleCustomSenderSourceForMultiplePoolsExisting2',\n            UserPoolConfigs: [{\n              Trigger: 'CustomSMSSender',\n              KMSKeyID: 'arn:aws:kms:eu-west-1:111111111111:key/11111111-9abc-def0-1234-56789abcdef1',\n              LambdaVersion: 'V1_0'\n            }],\n            ForceDeploy: undefined\n          }\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/cognito-user-pool.test.js","skipped":false,"dir":"test"},{"name":"should create the correct policy Statement","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":164,"column":50,"index":4677},"line":164,"code":"    it('should create the correct policy Statement', () => {\n      const roleId = naming.getCustomResourcesRoleLogicalId('default', '12345');\n      const [firstStatement, secondStatement, thirdStatment] = cfResources[roleId].Properties.Policies[0].PolicyDocument.Statement;\n      expect(firstStatement.Effect).to.be.eq('Allow');\n      expect(firstStatement.Resource['Fn::Join'][1]).to.deep.include('arn');\n      expect(firstStatement.Resource['Fn::Join'][1]).to.deep.include('events');\n      expect(firstStatement.Resource['Fn::Join'][1]).to.deep.include('event-bus/*');\n      expect(firstStatement.Action).to.be.deep.eq(['events:CreateEventBus', 'events:DeleteEventBus']);\n      expect(secondStatement.Effect).to.be.eq('Allow');\n      expect(secondStatement.Resource['Fn::Join'][1]).to.deep.include('events');\n      expect(secondStatement.Resource['Fn::Join'][1]).to.deep.include('rule/*');\n      expect(secondStatement.Action).to.be.deep.eq(['events:PutRule', 'events:RemoveTargets', 'events:PutTargets', 'events:DeleteRule']);\n      expect(thirdStatment.Effect).to.be.eq('Allow');\n      expect(thirdStatment.Resource['Fn::Join'][1]).to.deep.include('function');\n      expect(thirdStatment.Resource['Fn::Join'][1]).to.deep.include('lambda');\n      expect(thirdStatment.Action).to.be.deep.eq(['lambda:AddPermission', 'lambda:RemovePermission']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resource","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":181,"column":44,"index":6026},"line":181,"code":"    it('should create the necessary resource', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('default');\n      expect(eventBridgeConfig.RuleName).to.include('dev-default-rule-1');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure state is enabled by default","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":185,"column":49,"index":6238},"line":185,"code":"    it('should ensure state is enabled by default', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('default');\n      expect(eventBridgeConfig.State).to.be.eq('ENABLED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure state is enabled when explicity set","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":189,"column":57,"index":6442},"line":189,"code":"    it('should ensure state is enabled when explicity set', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('enabled');\n      expect(eventBridgeConfig.State).to.be.eq('ENABLED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure state is disabled when explicity set","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":193,"column":58,"index":6647},"line":193,"code":"    it('should ensure state is disabled when explicity set', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('disabled');\n      expect(eventBridgeConfig.State).to.be.eq('DISABLED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should ensure rule name doesn't exceed 64 chars","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":197,"column":55,"index":6851},"line":197,"code":"    it(\"should ensure rule name doesn't exceed 64 chars\", () => {\n      const eventBridgeConfig = getEventBridgeConfigById(NAME_OVER_64_CHARS);\n      expect(eventBridgeConfig.RuleName.endsWith('rule-1')).to.be.true;\n      expect(eventBridgeConfig.RuleName).lengthOf.lte(64);\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support input configuration","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":202,"column":42,"index":7121},"line":202,"code":"    it('should support input configuration', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('configureInput');\n      expect(eventBridgeConfig.Input.key1).be.eq('value1');\n      expect(eventBridgeConfig.Input.key2).be.deep.eq({\n        nested: 'value2'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support arn at eventBus","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":209,"column":38,"index":7405},"line":209,"code":"    it('should support arn at eventBus', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('configureInput');\n      expect(eventBridgeConfig.EventBus).be.eq('arn:aws:events:us-east-1:12345:event-bus/some-event-bus');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support inputPath configuration","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":213,"column":46,"index":7653},"line":213,"code":"    it('should support inputPath configuration', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('inputPathConfiguration');\n      expect(eventBridgeConfig.InputPath).be.eq('$.stageVariables');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support inputTransformer configuration","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":217,"column":53,"index":7878},"line":217,"code":"    it('should support inputTransformer configuration', () => {\n      const eventBridgeConfig = getEventBridgeConfigById('inputTransformer');\n      const {\n        InputTemplate,\n        InputPathsMap: {\n          eventTime\n        }\n      } = eventBridgeConfig.InputTransformer;\n      expect(InputTemplate).be.eq('{\"time\": <eventTime>, \"key1\": \"value1\"}');\n      expect(eventTime).be.eq('$.time');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should register created and delete event bus permissions for non default event bus","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":228,"column":90,"index":8322},"line":228,"code":"    it('should register created and delete event bus permissions for non default event bus', () => {\n      const roleId = naming.getCustomResourcesRoleLogicalId('customSaas', '12345');\n      const [firstStatement] = cfResources[roleId].Properties.Policies[0].PolicyDocument.Statement;\n      expect(firstStatement.Action[0]).to.be.eq('events:CreateEventBus');\n      expect(firstStatement.Action[1]).to.be.eq('events:DeleteEventBus');\n      expect(firstStatement.Effect).to.be.eq('Allow');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should fail when trying to set RetryPolicy","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":235,"column":50,"index":8778},"line":235,"code":"    it('should fail when trying to set RetryPolicy', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        configExt: {\n          disabledDeprecations: ['AWS_EVENT_BRIDGE_CUSTOM_RESOURCE_LEGACY_OPT_IN'],\n          provider: {\n            eventBridge: {\n              useCloudFormation: false\n            }\n          },\n          functions: {\n            basic: {\n              events: [{\n                eventBridge: {\n                  retryPolicy: {\n                    maximumEventAge: 4200,\n                    maximumRetryAttempts: 180\n                  },\n                  pattern: {\n                    source: ['aws.something']\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.be.eventually.rejected.and.have.property('code', 'ERROR_INVALID_RETRY_POLICY_TO_EVENT_BUS_CUSTOM_RESOURCE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should fail when trying to set DeadLetterQueueArn","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":264,"column":57,"index":9703},"line":264,"code":"    it('should fail when trying to set DeadLetterQueueArn', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        configExt: {\n          disabledDeprecations: ['AWS_EVENT_BRIDGE_CUSTOM_RESOURCE_LEGACY_OPT_IN'],\n          provider: {\n            eventBridge: {\n              useCloudFormation: false\n            }\n          },\n          functions: {\n            basic: {\n              events: [{\n                eventBridge: {\n                  deadLetterQueueArn: {\n                    'Fn::GetAtt': ['not-supported', 'Arn']\n                  },\n                  pattern: {\n                    source: ['aws.something']\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.be.eventually.rejected.and.have.property('code', 'ERROR_INVALID_DEAD_LETTER_CONFIG_TO_EVENT_BUS_CUSTOM_RESOURCE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should fail when trying to reference event bus via CF intrinsic function","suites":["EventBridgeEvents","using custom resources deployment pattern"],"updatePoint":{"line":292,"column":80,"index":10634},"line":292,"code":"    it('should fail when trying to reference event bus via CF intrinsic function', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        configExt: {\n          disabledDeprecations: ['AWS_EVENT_BRIDGE_CUSTOM_RESOURCE_LEGACY_OPT_IN'],\n          provider: {\n            eventBridge: {\n              useCloudFormation: false\n            }\n          },\n          functions: {\n            basic: {\n              events: [{\n                eventBridge: {\n                  eventBus: {\n                    Ref: 'ImportedEventBus'\n                  },\n                  schedule: 'rate(10 minutes)'\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.be.eventually.rejected.and.have.property('code', 'ERROR_INVALID_REFERENCE_TO_EVENT_BUS_CUSTOM_RESOURCE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create an EventBus resource","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":430,"column":44,"index":14896},"line":430,"code":"      it('should create an EventBus resource', () => {\n        expect(cfResources[eventBusLogicalId].Properties).to.deep.equal({\n          Name: eventBusName\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set ScheduleExpression on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":435,"column":67,"index":15099},"line":435,"code":"      it('should correctly set ScheduleExpression on a created rule', () => {\n        expect(ruleResource.Properties.ScheduleExpression).to.equal('rate(10 minutes)');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set State by default on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":438,"column":65,"index":15274},"line":438,"code":"      it('should correctly set State by default on a created rule', () => {\n        expect(ruleResource.Properties.State).to.equal('ENABLED');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set State when disabled on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":441,"column":68,"index":15430},"line":441,"code":"      it('should correctly set State when disabled on a created rule', () => {\n        const disabledRuleResource = getRuleResourceEndingWith(cfResources, '4');\n        expect(disabledRuleResource.Properties.State).to.equal('DISABLED');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set State when enabled on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":445,"column":67,"index":15676},"line":445,"code":"      it('should correctly set State when enabled on a created rule', () => {\n        const enabledRuleResource = getRuleResourceEndingWith(cfResources, '5');\n        expect(enabledRuleResource.Properties.State).to.equal('ENABLED');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set EventPattern on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":449,"column":61,"index":15913},"line":449,"code":"      it('should correctly set EventPattern on a created rule', () => {\n        expect(ruleResource.Properties.EventPattern).to.deep.equal(pattern);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set Input on the target for the created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":452,"column":71,"index":16082},"line":452,"code":"      it('should correctly set Input on the target for the created rule', () => {\n        expect(ruleTarget.Input).to.deep.equal(JSON.stringify(input));\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set InputPath on the target for the created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":455,"column":75,"index":16249},"line":455,"code":"      it('should correctly set InputPath on the target for the created rule', () => {\n        const inputPathRuleResource = getRuleResourceEndingWith(cfResources, '2');\n        const inputPathRuleTarget = inputPathRuleResource.Properties.Targets[0];\n        expect(inputPathRuleTarget.InputPath).to.deep.equal(inputPath);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set InputTransformer on the target for the created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":460,"column":82,"index":16588},"line":460,"code":"      it('should correctly set InputTransformer on the target for the created rule', () => {\n        const inputTransformerRuleResource = getRuleResourceEndingWith(cfResources, '3');\n        const inputTransformerRuleTarget = inputTransformerRuleResource.Properties.Targets[0];\n        expect(inputTransformerRuleTarget.InputTransformer.InputPathsMap).to.deep.equal(inputTransformer.inputPathsMap);\n        expect(inputTransformerRuleTarget.InputTransformer.InputTemplate).to.deep.equal(inputTransformer.inputTemplate);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support retryPolicy configuration","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":466,"column":50,"index":17086},"line":466,"code":"      it('should support retryPolicy configuration', () => {\n        const retryPolicyRuleTarget = getRuleResourceEndingWith(cfResources, '6').Properties.Targets[0];\n        expect(retryPolicyRuleTarget.RetryPolicy).to.deep.equal({\n          MaximumEventAgeInSeconds: 7200,\n          MaximumRetryAttempts: 9\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should support deadLetterQueueArn configuration","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":473,"column":57,"index":17423},"line":473,"code":"      it('should support deadLetterQueueArn configuration', () => {\n        const deadLetterConfigRuleTarget = getRuleResourceEndingWith(cfResources, '7').Properties.Targets[0];\n        expect(deadLetterConfigRuleTarget.DeadLetterConfig).to.have.property('Arn');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a rule that depends on created EventBus","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":477,"column":63,"index":17702},"line":477,"code":"      it('should create a rule that depends on created EventBus', () => {\n        expect(ruleResource.DependsOn).to.equal(eventBusLogicalId);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a rule that references correct function in target","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":480,"column":73,"index":17864},"line":480,"code":"      it('should create a rule that references correct function in target', () => {\n        expect(ruleTarget.Arn['Fn::GetAtt'][0]).to.equal(naming.getLambdaLogicalId('basic'));\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a lambda permission resource that correctly references event bus in SourceArn","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":483,"column":101,"index":18080},"line":483,"code":"      it('should create a lambda permission resource that correctly references event bus in SourceArn', () => {\n        const lambdaPermissionResource = cfResources[naming.getEventBridgeLambdaPermissionLogicalId('basic', 1)];\n        expect(lambdaPermissionResource.Properties.SourceArn['Fn::Join'][1][5]['Fn::Join'][1][1]).to.deep.equal(eventBusName);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set ScheduleExpression on a created rule","suites":["EventBridgeEvents","using native CloudFormation","when event bus is created as a part of the stack"],"updatePoint":{"line":487,"column":67,"index":18409},"line":487,"code":"      it('should correctly set ScheduleExpression on a created rule', () => {\n        const descriptionResource = getRuleResourceEndingWith(cfResources, '8');\n        expect(descriptionResource.Properties.Description).to.equal('My lambda description');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should not create an EventBus if it is provided or default","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":542,"column":68,"index":20197},"line":542,"code":"      it('should not create an EventBus if it is provided or default', async () => {\n        expect(Object.values(cfResources).some(value => value.Type === 'AWS::Events::EventBus')).to.be.false;\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a lambda permission resource that correctly references arn event bus in SourceArn","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":545,"column":105,"index":20439},"line":545,"code":"      it('should create a lambda permission resource that correctly references arn event bus in SourceArn', () => {\n        const lambdaPermissionResource = cfResources[naming.getEventBridgeLambdaPermissionLogicalId('basic', 1)];\n        expect(lambdaPermissionResource.Properties.SourceArn['Fn::Join'][1][5]['Fn::Join'][1][1]).to.deep.equal('arn:xxxxx');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a lambda permission resource that correctly references CF event bus in SourceArn","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":549,"column":104,"index":20804},"line":549,"code":"      it('should create a lambda permission resource that correctly references CF event bus in SourceArn', () => {\n        const lambdaPermissionResource = cfResources[naming.getEventBridgeLambdaPermissionLogicalId('basic', 2)];\n        expect(lambdaPermissionResource.Properties.SourceArn['Fn::Join'][1][5]['Fn::Join'][1][1]).to.deep.equal({\n          Ref: 'ImportedEventBus'\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a lambda permission resource that correctly references explicit default event bus in SourceArn","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":555,"column":118,"index":21217},"line":555,"code":"      it('should create a lambda permission resource that correctly references explicit default event bus in SourceArn', () => {\n        const lambdaPermissionResource = cfResources[naming.getEventBridgeLambdaPermissionLogicalId('basic', 3)];\n        expect(lambdaPermissionResource.Properties.SourceArn['Fn::Join'][1][5]['Fn::Join'][1][1]).to.equal('default');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should create a lambda permission resource that correctly references implicit default event bus in SourceArn","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":559,"column":118,"index":21589},"line":559,"code":"      it('should create a lambda permission resource that correctly references implicit default event bus in SourceArn', () => {\n        const lambdaPermissionResource = cfResources[naming.getEventBridgeLambdaPermissionLogicalId('basic', 4)];\n        expect(lambdaPermissionResource.Properties.SourceArn['Fn::Join'][1][5]['Fn::Join'][1]).not.to.include('default');\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly set event name when set","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":563,"column":50,"index":21896},"line":563,"code":"      it('should correctly set event name when set', () => {\n        const eventBridgeResource = cfResources[naming.getEventBridgeRuleLogicalId('Eventbridgelambdarule5')];\n        const customName = 'custom-event-name-test';\n        expect(eventBridgeResource.Properties.Name).to.eq(customName);\n      });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should trigger deprecation when `useCloudFormation` is set without any `eventBridge` events","suites":["EventBridgeEvents","using native CloudFormation","when it references already existing EventBus or uses default one"],"updatePoint":{"line":570,"column":97,"index":22263},"line":570,"code":"  it('should trigger deprecation when `useCloudFormation` is set without any `eventBridge` events', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'package',\n      configExt: {\n        provider: {\n          eventBridge: {\n            useCloudFormation: true\n          }\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'REJECTED_DEPRECATION_AWS_EVENT_BRIDGE_CUSTOM_RESOURCE_LEGACY_OPT_IN');\n  });","file":"unit/lib/plugins/aws/package/compile/events/event-bridge/index.test.js","skipped":false,"dir":"test"},{"name":"should not configure HTTP API resources when no events are configured","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js"],"updatePoint":{"line":10,"column":75,"index":338},"line":10,"code":"  it('should not configure HTTP API resources when no events are configured', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: 'aws'\n    },\n    command: 'package'\n  }).then(({\n    serverless\n  }) => {\n    const cfResources = serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    const naming = serverless.getProvider('aws').naming;\n    expect(cfResources[naming.getHttpApiLogicalId()]).to.equal();\n    expect(cfResources[naming.getHttpApiStageLogicalId()]).to.equal();\n  }));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure API resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":92,"column":37,"index":2443},"line":92,"code":"    it('should configure API resource', () => {\n      const resource = cfResources[naming.getHttpApiLogicalId()];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Api');\n      expect(resource.Properties).to.have.property('Name');\n      expect(resource.Properties.ProtocolType).to.equal('HTTP');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure stage resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":98,"column":39,"index":2756},"line":98,"code":"    it('should configure stage resource', () => {\n      const resource = cfResources[naming.getHttpApiStageLogicalId()];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Stage');\n      expect(resource.Properties.StageName).to.equal('$default');\n      expect(resource.Properties.AutoDeploy).to.equal(true);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure output for HttpApiId","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":104,"column":45,"index":3084},"line":104,"code":"    it('should configure output for HttpApiId', () => {\n      const output = cfOutputs.HttpApiId;\n      expect(output).to.have.property('Value');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure output for HttpApiUrl","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":108,"column":46,"index":3239},"line":108,"code":"    it('should configure output for HttpApiUrl', () => {\n      const output = cfOutputs.HttpApiUrl;\n      expect(output).to.have.property('Value');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":112,"column":33,"index":3382},"line":112,"code":"    it('should configure endpoint', () => {\n      const routeKey = 'POST /some-post';\n      const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n      expect(resource.Properties.RouteKey).to.equal(routeKey);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure endpoint integration","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":118,"column":45,"index":3696},"line":118,"code":"    it('should configure endpoint integration', () => {\n      const resource = cfResources[naming.getHttpApiIntegrationLogicalId('foo')];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Integration');\n      expect(resource.Properties.IntegrationType).to.equal('AWS_PROXY');\n      expect(resource.Properties.PayloadFormatVersion).to.equal('2.0');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure catch all endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":124,"column":43,"index":4057},"line":124,"code":"    it('should configure catch all endpoint', () => {\n      const routeKey = '*';\n      const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n      expect(resource.Properties.RouteKey).to.equal('$default');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure method catch all endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":130,"column":50,"index":4364},"line":130,"code":"    it('should configure method catch all endpoint', () => {\n      const routeKey = 'ANY /method-catch-all';\n      const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n      expect(resource.Properties.RouteKey).to.equal(routeKey);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure endpoint with specific method and path","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":136,"column":63,"index":4702},"line":136,"code":"    it('should configure endpoint with specific method and path', () => {\n      const routeKey = 'OPTIONS /payload';\n      const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n      expect(resource.Properties.RouteKey).to.equal(routeKey);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure method catch all endpoint with same path as a specific method endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":142,"column":95,"index":5067},"line":142,"code":"    it('should configure method catch all endpoint with same path as a specific method endpoint', () => {\n      const routeKey = 'ANY /payload';\n      const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n      expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n      expect(resource.Properties.RouteKey).to.equal(routeKey);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should set the default api gateway timeout by setting the TimeoutInMillis property","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":148,"column":90,"index":5423},"line":148,"code":"    it('should set the default api gateway timeout by setting the TimeoutInMillis property', () => {\n      const resource = cfResources[naming.getHttpApiIntegrationLogicalId('foo')];\n      expect(resource.Properties.TimeoutInMillis).to.equal(30000);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure lambda permissions","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":152,"column":43,"index":5634},"line":152,"code":"    it('should configure lambda permissions', () => {\n      const resource = cfResources[naming.getLambdaHttpApiPermissionLogicalId('foo')];\n      expect(resource.Type).to.equal('AWS::Lambda::Permission');\n      expect(resource.Properties.Action).to.equal('lambda:InvokeFunction');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not configure default route","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":157,"column":42,"index":5923},"line":157,"code":"    it('should not configure default route', () => {\n      const resource = cfResources[naming.getHttpApiLogicalId()];\n      expect(resource.Properties).to.not.have.property('RouteKey');\n      expect(resource.Properties).to.not.have.property('Target');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not configure optional resources and properties by default","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":162,"column":73,"index":6215},"line":162,"code":"    it('should not configure optional resources and properties by default', () => {\n      const apiResource = cfResources[naming.getHttpApiLogicalId()];\n      expect(apiResource.Properties).to.not.have.property('CorsConfiguration');\n      expect(cfResources).to.not.have.property(naming.getHttpApiLogGroupLogicalId());\n      const stageResource = cfResources[naming.getHttpApiStageLogicalId()];\n      expect(stageResource.Properties.DefaultRouteSettings.DetailedMetricsEnabled).to.equal(false);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not disable default execute-api endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":169,"column":55,"index":6700},"line":169,"code":"    it('should not disable default execute-api endpoint', () => {\n      const apiResource = cfResources[naming.getHttpApiLogicalId()];\n      expect(apiResource.Properties.DisableExecuteApiEndpoint).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should support payload format version per function","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Basic configuration"],"updatePoint":{"line":173,"column":58,"index":6930},"line":173,"code":"    it('should support payload format version per function', async () => {\n      const resource = cfResources[naming.getHttpApiIntegrationLogicalId('payload')];\n      expect(resource.Properties.PayloadFormatVersion).to.equal('1.0');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.httpApi.name`","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":245,"column":46,"index":9167},"line":245,"code":"    it('should support `provider.httpApi.name`', () => {\n      expect(cfApi.Properties.Name).to.equal('TestHttpApi');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.tags`","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":248,"column":38,"index":9285},"line":248,"code":"    it('should support `provider.tags`', () => {\n      const providerConfig = serviceConfig.provider;\n      const expectedTags = providerConfig.tags;\n      const {\n        Tags\n      } = cfApi.Properties;\n      expect(Tags).to.be.a('object');\n      expect(Tags).to.deep.equal(expectedTags);\n      const {\n        Tags: stageTags\n      } = cfStage.Properties;\n      expect(stageTags).to.be.a('object');\n      expect(stageTags).to.deep.equal(expectedTags);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should set payload format version","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":262,"column":41,"index":9751},"line":262,"code":"    it('should set payload format version', () => {\n      expect(cfIntegration.Type).to.equal('AWS::ApiGatewayV2::Integration');\n      expect(cfIntegration.Properties.IntegrationType).to.equal('AWS_PROXY');\n      expect(cfIntegration.Properties.PayloadFormatVersion).to.equal('1.0');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure detailed metrics","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":267,"column":41,"index":10043},"line":267,"code":"    it('should configure detailed metrics', () => {\n      expect(cfStage.Properties.DefaultRouteSettings.DetailedMetricsEnabled).to.equal(true);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure log group resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":270,"column":43,"index":10198},"line":270,"code":"    it('should configure log group resource', () => {\n      expect(cfLogGroup.Type).to.equal('AWS::Logs::LogGroup');\n      expect(cfLogGroup.Properties).to.have.property('LogGroupName');\n      expect(cfLogGroup.Properties).to.have.property('RetentionInDays');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup logs format on stage","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":275,"column":41,"index":10464},"line":275,"code":"    it('should setup logs format on stage', () => {\n      expect(cfStage.Properties.AccessLogSettings).to.have.property('Format');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.httpApi.disableDefaultEndpoint`","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties"],"updatePoint":{"line":278,"column":64,"index":10626},"line":278,"code":"    it('should support `provider.httpApi.disableDefaultEndpoint`', () => {\n      expect(cfApi.Properties.DisableExecuteApiEndpoint).to.equal(true);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set AllowCredentials","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":283,"column":43,"index":10837},"line":283,"code":"        it('should not set AllowCredentials', () => expect(cfCors.AllowCredentials).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include default set of headers at AllowHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":284,"column":65,"index":10956},"line":284,"code":"        it('should include default set of headers at AllowHeaders', () => expect(cfCors.AllowHeaders).to.include('Content-Type'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include \"OPTIONS\" method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":285,"column":59,"index":11081},"line":285,"code":"        it('should include \"OPTIONS\" method at AllowMethods', () => expect(cfCors.AllowMethods).to.include('OPTIONS'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include used method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":286,"column":54,"index":11196},"line":286,"code":"        it('should include used method at AllowMethods', () => {\n          expect(cfCors.AllowMethods).to.include('GET');\n          expect(cfCors.AllowMethods).to.include('POST');\n        });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not include not used method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":290,"column":62,"index":11396},"line":290,"code":"        it('should not include not used method at AllowMethods', () => {\n          expect(cfCors.AllowMethods).to.not.include('PATCH');\n          expect(cfCors.AllowMethods).to.not.include('DELETE');\n        });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should allow all origins at AllowOrigins","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":294,"column":52,"index":11598},"line":294,"code":"        it('should allow all origins at AllowOrigins', () => expect(cfCors.AllowOrigins).to.include('*'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set ExposeHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":295,"column":40,"index":11693},"line":295,"code":"        it('should not set ExposeHeaders', () => expect(cfCors.ExposeHeaders).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set MaxAge","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","`true` configuration"],"updatePoint":{"line":296,"column":33,"index":11777},"line":296,"code":"        it('should not set MaxAge', () => expect(cfCors.MaxAge).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set AllowCredentials","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":318,"column":43,"index":12517},"line":318,"code":"        it('should not set AllowCredentials', () => expect(cfCors.AllowCredentials).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include default set of headers at AllowHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":319,"column":65,"index":12636},"line":319,"code":"        it('should include default set of headers at AllowHeaders', () => expect(cfCors.AllowHeaders).to.include('Content-Type'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include \"OPTIONS\" method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":320,"column":59,"index":12761},"line":320,"code":"        it('should include \"OPTIONS\" method at AllowMethods', () => expect(cfCors.AllowMethods).to.include('OPTIONS'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should include used method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":321,"column":54,"index":12876},"line":321,"code":"        it('should include used method at AllowMethods', () => {\n          expect(cfCors.AllowMethods).to.include('GET');\n          expect(cfCors.AllowMethods).to.include('POST');\n        });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not include not used method at AllowMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":325,"column":62,"index":13076},"line":325,"code":"        it('should not include not used method at AllowMethods', () => {\n          expect(cfCors.AllowMethods).to.not.include('PATCH');\n          expect(cfCors.AllowMethods).to.not.include('DELETE');\n        });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect allowedOrigins","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":329,"column":41,"index":13267},"line":329,"code":"        it('should respect allowedOrigins', () => expect(cfCors.AllowOrigins).to.deep.equal(['https://serverless.com']));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect exposedResponseHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":330,"column":49,"index":13397},"line":330,"code":"        it('should respect exposedResponseHeaders', () => expect(cfCors.ExposeHeaders).to.deep.equal(['Content-Length', 'X-Kuma-Revision']));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set MaxAge","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #1"],"updatePoint":{"line":331,"column":33,"index":13523},"line":331,"code":"        it('should not set MaxAge', () => expect(cfCors.MaxAge).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect allowCredentials","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":355,"column":43,"index":14291},"line":355,"code":"        it('should respect allowCredentials', () => expect(cfCors.AllowCredentials).to.equal(true));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect allowedHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":356,"column":41,"index":14390},"line":356,"code":"        it('should respect allowedHeaders', () => expect(cfCors.AllowHeaders).to.deep.equal(['Authorization']));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect allowedMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":357,"column":41,"index":14503},"line":357,"code":"        it('should respect allowedMethods', () => expect(cfCors.AllowMethods).to.deep.equal(['GET']));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should fallback AllowOrigins to default","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":358,"column":51,"index":14616},"line":358,"code":"        it('should fallback AllowOrigins to default', () => expect(cfCors.AllowOrigins).to.include('*'));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not set ExposeHeaders","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":359,"column":40,"index":14711},"line":359,"code":"        it('should not set ExposeHeaders', () => expect(cfCors.ExposeHeaders).to.equal());","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect maxAge","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","Object configuration #2"],"updatePoint":{"line":360,"column":33,"index":14795},"line":360,"code":"        it('should respect maxAge', () => expect(cfCors.MaxAge).to.equal(300));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should respect all allowedMethods","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Provider properties","Cors","With a catch-all route"],"updatePoint":{"line":379,"column":45,"index":15394},"line":379,"code":"        it('should respect all allowedMethods', () => expect(cfCors.AllowMethods.sort()).to.deep.equal(['GET', 'POST', 'PUT', 'PATCH', 'OPTIONS', 'HEAD', 'DELETE'].sort()));","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure authorizer resource that references function from service","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":445,"column":82,"index":17494},"line":445,"code":"    it('should configure authorizer resource that references function from service', () => {\n      expect(cfResources[naming.getHttpApiAuthorizerLogicalId('someAuthorizer')]).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Authorizer',\n        DependsOn: undefined,\n        Properties: {\n          ApiId: {\n            Ref: naming.getHttpApiLogicalId()\n          },\n          AuthorizerPayloadFormatVersion: '2.0',\n          AuthorizerResultTtlInSeconds: 300,\n          AuthorizerType: 'REQUEST',\n          EnableSimpleResponses: true,\n          IdentitySource: ['$request.header.Authorization'],\n          Name: 'someAuthorizer',\n          AuthorizerUri: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':apigateway:', {\n              Ref: 'AWS::Region'\n            }, ':lambda:path/2015-03-31/functions/', {\n              'Fn::GetAtt': ['OtherLambdaFunction', 'Arn']\n            }, '/invocations']]\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup authorizer properties on an endpoint configured","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":471,"column":68,"index":18468},"line":471,"code":"    it('should setup authorizer properties on an endpoint configured', () => {\n      const routeResourceProps = cfResources[naming.getHttpApiRouteLogicalId('GET /foo')].Properties;\n      expect(routeResourceProps.AuthorizationType).to.equal('CUSTOM');\n      expect(routeResourceProps.AuthorizerId).to.deep.equal({\n        Ref: naming.getHttpApiAuthorizerLogicalId('someAuthorizer')\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should create permission resource when authorizer references function from service","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":478,"column":90,"index":18890},"line":478,"code":"    it('should create permission resource when authorizer references function from service', () => {\n      const authorizerPermissionLogicalId = naming.getLambdaAuthorizerHttpApiPermissionLogicalId('someAuthorizer');\n      expect(cfResources[authorizerPermissionLogicalId]).to.deep.equal({\n        Type: 'AWS::Lambda::Permission',\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': ['OtherLambdaFunction', 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com',\n          SourceArn: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':execute-api:', {\n              Ref: 'AWS::Region'\n            }, ':', {\n              Ref: 'AWS::AccountId'\n            }, ':', {\n              Ref: naming.getHttpApiLogicalId()\n            }, '/*']]\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure authorizer resource that references function outside of service","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":502,"column":88,"index":19785},"line":502,"code":"    it('should configure authorizer resource that references function outside of service', () => {\n      expect(cfResources[naming.getHttpApiAuthorizerLogicalId('authorizerWithExternalFunction')]).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Authorizer',\n        DependsOn: undefined,\n        Properties: {\n          ApiId: {\n            Ref: naming.getHttpApiLogicalId()\n          },\n          AuthorizerPayloadFormatVersion: '2.0',\n          AuthorizerResultTtlInSeconds: 300,\n          AuthorizerType: 'REQUEST',\n          EnableSimpleResponses: true,\n          IdentitySource: ['$request.header.Authorization'],\n          Name: 'authorizerWithExternalFunction',\n          AuthorizerUri: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':apigateway:', {\n              Ref: 'AWS::Region'\n            }, ':lambda:path/2015-03-31/functions/', 'arn:aws:lambda:us-east-2:xxx:function:my-function:1', '/invocations']]\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup authorizer properties on an endpoint configured for authorizer that references function outside of service","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":526,"column":127,"index":20829},"line":526,"code":"    it('should setup authorizer properties on an endpoint configured for authorizer that references function outside of service', () => {\n      const routeResourceProps = cfResources[naming.getHttpApiRouteLogicalId('GET /anotherfunc')].Properties;\n      expect(routeResourceProps.AuthorizationType).to.equal('CUSTOM');\n      expect(routeResourceProps.AuthorizerId).to.deep.equal({\n        Ref: naming.getHttpApiAuthorizerLogicalId('authorizerWithExternalFunction')\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not create permission resource when authorizer references externally managed function","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":533,"column":100,"index":21285},"line":533,"code":"    it('should not create permission resource when authorizer references externally managed function', () => {\n      const authorizerPermissionLogicalId = naming.getLambdaAuthorizerHttpApiPermissionLogicalId('authorizerWithExternalFunction');\n      expect(cfResources[authorizerPermissionLogicalId]).to.be.undefined;\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should correctly set `DependsOn` property on permission resource for functions with provisioned concurrency","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":537,"column":115,"index":21625},"line":537,"code":"    it('should correctly set `DependsOn` property on permission resource for functions with provisioned concurrency', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'http-api',\n        configExt: {\n          provider: {\n            httpApi: {\n              authorizers: {\n                someAuthorizer: {\n                  type: 'request',\n                  identitySource: '$request.header.Authorization',\n                  functionName: 'other',\n                  resultTtlInSeconds: 300,\n                  enableSimpleResponses: true,\n                  payloadVersion: '2.0'\n                }\n              }\n            }\n          },\n          functions: {\n            other: {\n              provisionedConcurrency: 1\n            },\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    name: 'someAuthorizer'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const authorizerPermissionLogicalId = awsNaming.getLambdaAuthorizerHttpApiPermissionLogicalId('someAuthorizer');\n      expect(cfTemplate.Resources[authorizerPermissionLogicalId]).to.deep.equal({\n        Type: 'AWS::Lambda::Permission',\n        Properties: {\n          FunctionName: {\n            'Fn::Join': [':', [{\n              'Fn::GetAtt': ['OtherLambdaFunction', 'Arn']\n            }, 'provisioned']]\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com',\n          SourceArn: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':execute-api:', {\n              Ref: 'AWS::Region'\n            }, ':', {\n              Ref: 'AWS::AccountId'\n            }, ':', {\n              Ref: naming.getHttpApiLogicalId()\n            }, '/*']]\n          }\n        },\n        DependsOn: 'OtherProvConcLambdaAlias'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when request authorizer does not have \"functionName\" and \"functionArn\" defined","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":601,"column":99,"index":23612},"line":601,"code":"    it('should throw when request authorizer does not have \"functionName\" and \"functionArn\" defined', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          provider: {\n            httpApi: {\n              authorizers: {\n                someAuthorizer: {\n                  type: 'request'\n                }\n              }\n            }\n          },\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    name: 'someAuthorizer'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_CUSTOM_AUTHORIZER_NEITHER_FUNCTION_ARN_NOR_FUNCTION_NAME_DEFINED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when request authorizer have both \"functionName\" and \"functionArn\" defined","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":629,"column":95,"index":24448},"line":629,"code":"    it('should throw when request authorizer have both \"functionName\" and \"functionArn\" defined', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          provider: {\n            httpApi: {\n              authorizers: {\n                someAuthorizer: {\n                  type: 'request',\n                  functionName: 'bar',\n                  functionArn: 'arn:xxxx'\n                }\n              }\n            }\n          },\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    name: 'someAuthorizer'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_CUSTOM_AUTHORIZER_BOTH_FUNCTION_ARN_AND_FUNCTION_NAME_DEFINED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when request authorizer have both references \"functionName\" not defined in service","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":659,"column":103,"index":25371},"line":659,"code":"    it('should throw when request authorizer have both references \"functionName\" not defined in service', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          provider: {\n            httpApi: {\n              authorizers: {\n                someAuthorizer: {\n                  type: 'request',\n                  functionName: 'notdefined'\n                }\n              }\n            }\n          },\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    name: 'someAuthorizer'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_CUSTOM_AUTHORIZER_FUNCTION_NOT_FOUND_IN_SERVICE');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when request authorizer has caching enabled but does not have \"identitySource\" defined","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":688,"column":107,"index":26248},"line":688,"code":"    it('should throw when request authorizer has caching enabled but does not have \"identitySource\" defined', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          provider: {\n            httpApi: {\n              authorizers: {\n                someAuthorizer: {\n                  type: 'request',\n                  functionName: 'other',\n                  resultTtlInSeconds: 300\n                }\n              }\n            }\n          },\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    name: 'someAuthorizer'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_CUSTOM_AUTHORIZER_IDENTITY_SOURCE_MISSING_WHEN_CACHING_ENABLED');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when authorizer with `request` type does not have name or id configured","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: REQUEST (Custom Lambda Authorizer)"],"updatePoint":{"line":718,"column":92,"index":27163},"line":718,"code":"    it('should throw when authorizer with `request` type does not have name or id configured', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    type: 'request'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_AUTHORIZER_MISSING_ID_OR_NAME');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure authorizer resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: JWT"],"updatePoint":{"line":776,"column":44,"index":28649},"line":776,"code":"    it('should configure authorizer resource', () => {\n      expect(cfResources[naming.getHttpApiAuthorizerLogicalId('someAuthorizer')]).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Authorizer',\n        Properties: {\n          ApiId: {\n            Ref: naming.getHttpApiLogicalId()\n          },\n          AuthorizerType: 'JWT',\n          IdentitySource: ['$request.header.Authorization'],\n          JwtConfiguration: {\n            Audience: ['audiencexxx'],\n            Issuer: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_xxx'\n          },\n          Name: 'someAuthorizer'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup authorizer properties on an endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: JWT"],"updatePoint":{"line":793,"column":57,"index":29279},"line":793,"code":"    it('should setup authorizer properties on an endpoint', () => {\n      const routeResourceProps = cfResources[naming.getHttpApiRouteLogicalId('GET /foo')].Properties;\n      expect(routeResourceProps.AuthorizationType).to.equal('JWT');\n      expect(routeResourceProps.AuthorizationScopes).to.deep.equal(['foo']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when authorizer with `jwt` type does not have name or id configured","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: JWT"],"updatePoint":{"line":798,"column":88,"index":29633},"line":798,"code":"    it('should throw when authorizer with `jwt` type does not have name or id configured', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    type: 'jwt'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_AUTHORIZER_MISSING_ID_OR_NAME');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup correct properties on an endpoint","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: AWS_IAM"],"updatePoint":{"line":819,"column":54,"index":30228},"line":819,"code":"    it('should setup correct properties on an endpoint', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'http-api',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    type: 'aws_iam'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const routeResourceProps = cfTemplate.Resources[awsNaming.getHttpApiRouteLogicalId('GET /foo')].Properties;\n      expect(routeResourceProps.AuthorizationType).to.equal('AWS_IAM');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should throw when authorizer with `aws_iam` type receives additional properties","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","Authorizers: AWS_IAM"],"updatePoint":{"line":843,"column":87,"index":30951},"line":843,"code":"    it('should throw when authorizer with `aws_iam` type receives additional properties', async () => {\n      await expect(runServerless({\n        fixture: 'http-api',\n        configExt: {\n          functions: {\n            foo: {\n              events: [{\n                httpApi: {\n                  authorizer: {\n                    type: 'aws_iam',\n                    name: 'something'\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'HTTP_API_AUTHORIZER_AWS_IAM_UNEXPECTED_PROPERTIES');\n    });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup authorizer properties on an endpoint for JWT authorizer","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External authorizers","correct configuration"],"updatePoint":{"line":909,"column":78,"index":32813},"line":909,"code":"      it('should setup authorizer properties on an endpoint for JWT authorizer', () => {\n        const routeResourceProps = cfResources[naming.getHttpApiRouteLogicalId('GET /foo')].Properties;\n        expect(routeResourceProps.AuthorizerId).to.equal('externalAuthorizer');\n        expect(routeResourceProps.AuthorizationType).to.equal('JWT');\n        expect(routeResourceProps.AuthorizationScopes).to.deep.equal(['foo']);\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should setup authorizer properties on an endpoint for REQUEST authorizer","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External authorizers","correct configuration"],"updatePoint":{"line":915,"column":82,"index":33249},"line":915,"code":"      it('should setup authorizer properties on an endpoint for REQUEST authorizer', () => {\n        const routeResourceProps = cfResources[naming.getHttpApiRouteLogicalId('GET /requestauthorizer')].Properties;\n        expect(routeResourceProps.AuthorizerId).to.equal('externalRequestAuthorizer');\n        expect(routeResourceProps.AuthorizationType).to.equal('CUSTOM');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not allow external authorizer without external httpApi","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External authorizers","disallowed configurations"],"updatePoint":{"line":922,"column":71,"index":33677},"line":922,"code":"      it('should not allow external authorizer without external httpApi', () => {\n        return expect(runServerless({\n          fixture: 'http-api',\n          configExt: {\n            functions: {\n              foo: {\n                events: [{\n                  httpApi: {\n                    authorizer: {\n                      id: 'externalAuthorizer',\n                      scopes: 'foo'\n                    }\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejected.and.have.property('code', 'EXTERNAL_HTTP_API_AUTHORIZER_WITHOUT_EXTERNAL_HTTP_API');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not configure API resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":970,"column":43,"index":34933},"line":970,"code":"      it('should not configure API resource', () => {\n        expect(cfResources).to.not.have.property(naming.getHttpApiLogicalId());\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not configure stage resource","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":973,"column":45,"index":35079},"line":973,"code":"      it('should not configure stage resource', () => {\n        expect(cfResources).to.not.have.property(naming.getHttpApiStageLogicalId());\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not configure output","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":976,"column":37,"index":35222},"line":976,"code":"      it('should not configure output', () => {\n        expect(cfOutputs).to.not.have.property('HttpApiId');\n        expect(cfOutputs).to.not.have.property('HttpApiUrl');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure endpoint that attaches to external API","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":980,"column":65,"index":35431},"line":980,"code":"      it('should configure endpoint that attaches to external API', () => {\n        const routeKey = 'POST /some-post';\n        const resource = cfResources[naming.getHttpApiRouteLogicalId(routeKey)];\n        expect(resource.Type).to.equal('AWS::ApiGatewayV2::Route');\n        expect(resource.Properties.RouteKey).to.equal(routeKey);\n        expect(resource.Properties.ApiId).to.equal(apiId);\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure endpoint integration","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":987,"column":47,"index":35816},"line":987,"code":"      it('should configure endpoint integration', () => {\n        const resource = cfResources[naming.getHttpApiIntegrationLogicalId('foo')];\n        expect(resource.Type).to.equal('AWS::ApiGatewayV2::Integration');\n        expect(resource.Properties.IntegrationType).to.equal('AWS_PROXY');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should configure lambda permissions","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","correct configuration"],"updatePoint":{"line":992,"column":45,"index":36115},"line":992,"code":"      it('should configure lambda permissions', () => {\n        const resource = cfResources[naming.getLambdaHttpApiPermissionLogicalId('foo')];\n        expect(resource.Type).to.equal('AWS::Lambda::Permission');\n        expect(resource.Properties.Action).to.equal('lambda:InvokeFunction');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not allow defined cors rules","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","disallowed configurations"],"updatePoint":{"line":999,"column":45,"index":36473},"line":999,"code":"      it('should not allow defined cors rules', () => {\n        return expect(runServerless({\n          fixture: 'http-api',\n          configExt: {\n            provider: {\n              httpApi: {\n                id: apiId,\n                cors: true\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejected.and.have.property('code', 'EXTERNAL_HTTP_API_CORS_CONFIG');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not allow defined authorizers","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","disallowed configurations"],"updatePoint":{"line":1013,"column":46,"index":36905},"line":1013,"code":"      it('should not allow defined authorizers', () => {\n        return expect(runServerless({\n          fixture: 'http-api',\n          configExt: {\n            provider: {\n              httpApi: {\n                id: apiId,\n                authorizers: {\n                  someAuthorizer: {\n                    identitySource: '$request.header.Authorization',\n                    issuerUrl: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_xxx',\n                    audience: 'audiencexxx'\n                  }\n                }\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejected.and.have.property('code', 'EXTERNAL_HTTP_API_AUTHORIZERS_CONFIG');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should not allow defined logs","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","disallowed configurations"],"updatePoint":{"line":1033,"column":39,"index":37620},"line":1033,"code":"      it('should not allow defined logs', () => {\n        return expect(runServerless({\n          fixture: 'http-api',\n          configExt: {\n            provider: {\n              httpApi: {\n                id: apiId\n              },\n              logs: {\n                httpApi: true\n              }\n            }\n          },\n          command: 'package'\n        })).to.eventually.be.rejected.and.have.property('code', 'EXTERNAL_HTTP_API_LOGS_CONFIG');\n      });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should trigger a deprecation when `provider.httpApi.useProviderTags` is set","suites":["lib/plugins/aws/package/compile/events/httpApi.test.js","External HTTP API","disallowed configurations"],"updatePoint":{"line":1051,"column":81,"index":38142},"line":1051,"code":"  it('should trigger a deprecation when `provider.httpApi.useProviderTags` is set', async () => {\n    await expect(runServerless({\n      fixture: 'http-api',\n      configExt: {\n        provider: {\n          httpApi: {\n            useProviderTags: true\n          }\n        }\n      },\n      command: 'package'\n    })).to.eventually.be.rejected.and.have.property('code', 'REJECTED_DEPRECATION_AWS_HTTP_API_USE_PROVIDER_TAGS_PROPERTY');\n  });","file":"unit/lib/plugins/aws/package/compile/events/http-api.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding template resource","suites":["lib/plugins/aws/package/compile/events/iotFleetProvisioning/index.test.js","nominal configurations"],"updatePoint":{"line":69,"column":53,"index":2195},"line":69,"code":"    it('should create corresponding template resource', () => {\n      const iotProvisioningTemplateResource = cfResources[naming.getIotFleetProvisioningLogicalId(functionName)];\n      expect(iotProvisioningTemplateResource).to.deep.equal({\n        Type: 'AWS::IoT::ProvisioningTemplate',\n        Properties: {\n          Enabled: true,\n          PreProvisioningHook: {\n            TargetArn: {\n              'Fn::GetAtt': [naming.getLambdaLogicalId(functionName), 'Arn']\n            }\n          },\n          ProvisioningRoleArn: 'arn:aws:iam::123456789:role/provisioning-role',\n          TemplateBody: JSON.stringify(templateBody).replace(/\\$\\{self:service}/g, serviceName).replace(/\\$\\{sls:stage}/g, stage)\n        },\n        DependsOn: [naming.getLambdaIotFleetProvisioningPermissionLogicalId(functionName)]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot-fleet-provisioning/index.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding permission resource","suites":["lib/plugins/aws/package/compile/events/iotFleetProvisioning/index.test.js","nominal configurations"],"updatePoint":{"line":86,"column":55,"index":3024},"line":86,"code":"    it('should create corresponding permission resource', () => {\n      const lambdaPermissionResource = cfResources[naming.getLambdaIotFleetProvisioningPermissionLogicalId(functionName)];\n      expect(lambdaPermissionResource).to.deep.equal({\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: undefined,\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': [naming.getLambdaLogicalId(functionName), 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'iot.amazonaws.com'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot-fleet-provisioning/index.test.js","skipped":false,"dir":"test"},{"name":"should allow disabling of a provisioning template","suites":["lib/plugins/aws/package/compile/events/iotFleetProvisioning/index.test.js","nominal configurations"],"updatePoint":{"line":100,"column":57,"index":3589},"line":100,"code":"    it('should allow disabling of a provisioning template', () => {\n      const iotProvisioningTemplateResource = cfResources[naming.getIotFleetProvisioningLogicalId(disabledFunctionName)];\n      expect(iotProvisioningTemplateResource.Properties.Enabled).to.eq(false);\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot-fleet-provisioning/index.test.js","skipped":false,"dir":"test"},{"name":"should allow customization of a provisioning template TemplateName","suites":["lib/plugins/aws/package/compile/events/iotFleetProvisioning/index.test.js","nominal configurations"],"updatePoint":{"line":104,"column":74,"index":3883},"line":104,"code":"    it('should allow customization of a provisioning template TemplateName', () => {\n      const iotProvisioningTemplateResource = cfResources[naming.getIotFleetProvisioningLogicalId(namedFunctionName)];\n      expect(iotProvisioningTemplateResource.Properties.TemplateName).to.eq('MyTemplate');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot-fleet-provisioning/index.test.js","skipped":false,"dir":"test"},{"name":"It should throw if there are more than one iotFleetProvisioning per lambda","suites":["lib/plugins/aws/package/compile/events/iotFleetProvisioning/index.test.js","disallowed configurations"],"updatePoint":{"line":110,"column":82,"index":4248},"line":110,"code":"    it('It should throw if there are more than one iotFleetProvisioning per lambda', () => {\n      return expect(runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            iotFleetProvisioningBasic: {\n              handler: 'index.main',\n              events: [{\n                iotFleetProvisioning: {\n                  templateBody,\n                  provisioningRoleArn: 'arn:aws:iam::123456789:role/provisioning-role',\n                  templateName: 'MyTemplate1'\n                }\n              }, {\n                iotFleetProvisioning: {\n                  templateBody,\n                  provisioningRoleArn: 'arn:aws:iam::123456789:role/provisioning-role',\n                  templateName: 'MyTemplate2'\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      })).to.eventually.be.rejected.and.have.property('code', 'MULTIPLE_IOT_PROVISIONING_TEMPLATE_HOOK');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot-fleet-provisioning/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileIoTEvents","#constructor()"],"updatePoint":{"line":23,"column":70,"index":901},"line":23,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileIoTEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when iot events are given","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":26,"column":71,"index":1101},"line":26,"code":"    it('should create corresponding resources when iot events are given', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }, {\n            iot: {\n              sql: \"SELECT * FROM 'topic_2'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Type).to.equal('AWS::IoT::TopicRule');\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule2.Type).to.equal('AWS::IoT::TopicRule');\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.Sql).to.equal(\"SELECT * FROM 'topic_1'\");\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule2.Properties.TopicRulePayload.Sql).to.equal(\"SELECT * FROM 'topic_2'\");\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.RuleDisabled).to.equal(false);\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule2.Properties.TopicRulePayload.RuleDisabled).to.equal(false);\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionIotTopicRule1.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionIotTopicRule2.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect \"name\" variable","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":50,"column":38,"index":2926},"line":50,"code":"    it('should respect \"name\" variable', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              name: 'iotEventName',\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.RuleName).to.equal('iotEventName');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect \"enabled\" variable","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":64,"column":41,"index":3443},"line":64,"code":"    it('should respect \"enabled\" variable', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              enabled: false,\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        },\n        second: {\n          events: [{\n            iot: {\n              enabled: true,\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.RuleDisabled).to.equal(true);\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondIotTopicRule1.Properties.TopicRulePayload.RuleDisabled).to.equal(false);\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect \"sqlVersion\" variable","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":87,"column":44,"index":4319},"line":87,"code":"    it('should respect \"sqlVersion\" variable', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              sqlVersion: '2016-03-23',\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.AwsIotSqlVersion).to.equal('2016-03-23');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect \"description\" variable","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":101,"column":45,"index":4867},"line":101,"code":"    it('should respect \"description\" variable', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              description: 'iot event description',\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.Description).to.equal('iot event description');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect enabled variable if the \"enabled\" property is not given","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":115,"column":78,"index":5466},"line":115,"code":"    it('should respect enabled variable if the \"enabled\" property is not given', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              sql: \"SELECT * FROM 'topic_1'\"\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.RuleDisabled).to.equal(false);\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should respect variables if multi-line variables is given","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":128,"column":65,"index":5983},"line":128,"code":"    it('should respect variables if multi-line variables is given', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            iot: {\n              description: 'iot event description\\n with newline',\n              sql: \"SELECT * FROM 'topic_1'\\n WHERE value = 2\",\n              sqlVersion: 'beta\\n',\n              name: 'iotEventName\\n'\n            }\n          }]\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.Sql).to.equal(\"SELECT * FROM 'topic_1' WHERE value = 2\");\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.AwsIotSqlVersion).to.equal('beta');\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.TopicRulePayload.Description).to.equal('iot event description with newline');\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstIotTopicRule1.Properties.RuleName).to.equal('iotEventName');\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when iot events are not given","suites":["AwsCompileIoTEvents","#awsCompileIoTEvents()"],"updatePoint":{"line":147,"column":79,"index":7263},"line":147,"code":"    it('should not create corresponding resources when iot events are not given', () => {\n      awsCompileIoTEvents.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileIoTEvents.compileIoTEvents();\n      expect(awsCompileIoTEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/iot.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties with minimal configuration","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","when there are kafka events defined"],"updatePoint":{"line":70,"column":98,"index":2497},"line":70,"code":"    it('should correctly compile EventSourceMapping resource properties with minimal configuration', () => {\n      expect(minimalEventSourceMappingResource.Properties).to.deep.equal({\n        SelfManagedEventSource: {\n          Endpoints: {\n            KafkaBootstrapServers: ['abc.xyz:9092']\n          }\n        },\n        SourceAccessConfigurations: [{\n          Type: 'SASL_SCRAM_256_AUTH',\n          URI: saslScram256AuthArn\n        }],\n        StartingPosition: 'TRIM_HORIZON',\n        Topics: [topic],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('basic'), 'Arn']\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with SecretsManager statement","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","when there are kafka events defined"],"updatePoint":{"line":88,"column":68,"index":3095},"line":88,"code":"    it('should update default IAM role with SecretsManager statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [saslScram256AuthArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource DependsOn ","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","when there are kafka events defined"],"updatePoint":{"line":95,"column":71,"index":3406},"line":95,"code":"    it('should correctly compile EventSourceMapping resource DependsOn ', () => {\n      expect(minimalEventSourceMappingResource.DependsOn).to.contain('IamRoleLambdaExecution');\n      expect(allParamsEventSourceMappingResource.DependsOn).to.contain('IamRoleLambdaExecution');\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource with all parameters","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","when there are kafka events defined"],"updatePoint":{"line":99,"column":80,"index":3699},"line":99,"code":"    it('should correctly compile EventSourceMapping resource with all parameters', () => {\n      expect(allParamsEventSourceMappingResource.Properties).to.deep.equal({\n        BatchSize: batchSize,\n        MaximumBatchingWindowInSeconds: maximumBatchingWindow,\n        Enabled: enabled,\n        SelfManagedEventSource: {\n          Endpoints: {\n            KafkaBootstrapServers: ['abc.xyz:9092']\n          }\n        },\n        SourceAccessConfigurations: [{\n          Type: 'SASL_SCRAM_256_AUTH',\n          URI: saslScram256AuthArn\n        }],\n        StartingPosition: startingPosition,\n        Topics: [topic],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('other'), 'Arn']\n        },\n        FilterCriteria: {\n          Filters: [{\n            Pattern: JSON.stringify({\n              eventName: 'INSERT'\n            })\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for VPC_SECURITY_GROUP and VPC_SUBNET","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":150,"column":111,"index":5352},"line":150,"code":"      it('should correctly compile EventSourceMapping resource properties for VPC_SECURITY_GROUP and VPC_SUBNET', async () => {\n        const vpcSecurityGroup = 'sg-abc4567890';\n        const vpcSubnet = 'subnet-abc4567890';\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              vpcSecurityGroup,\n              vpcSubnet\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'VPC_SECURITY_GROUP',\n                URI: `security_group:${vpcSecurityGroup}`\n              }, {\n                Type: 'VPC_SUBNET',\n                URI: `subnet:${vpcSubnet}`\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for multiple VPC_SUBNETS","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":186,"column":98,"index":6591},"line":186,"code":"      it('should correctly compile EventSourceMapping resource properties for multiple VPC_SUBNETS', async () => {\n        const vpcSecurityGroup = 'sg-abc4567890';\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              vpcSubnet: ['subnet-0011001100', 'subnet-0022002200'],\n              vpcSecurityGroup\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'VPC_SUBNET',\n                URI: 'subnet:subnet-0011001100'\n              }, {\n                Type: 'VPC_SUBNET',\n                URI: 'subnet:subnet-0022002200'\n              }, {\n                Type: 'VPC_SECURITY_GROUP',\n                URI: `security_group:${vpcSecurityGroup}`\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should fail to compile EventSourceMapping resource properties for VPC_SUBNET with no VPC_SECURITY GROUP","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":224,"column":113,"index":7950},"line":224,"code":"      it('should fail to compile EventSourceMapping resource properties for VPC_SUBNET with no VPC_SECURITY GROUP', async () => {\n        await expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                events: [{\n                  kafka: {\n                    topic,\n                    bootstrapServers: ['abc.xyz:9092'],\n                    accessConfigurations: {\n                      vpcSubnet: 'subnet-abc4567890'\n                    }\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.be.rejected.and.eventually.contain({\n          code: 'FUNCTION_KAFKA_VPC_ACCESS_CONFIGURATION_INVALID'\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should fail to compile EventSourceMapping resource properties for VPC_SECURITY GROUP with no VPC_SUBNET","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":247,"column":113,"index":8726},"line":247,"code":"      it('should fail to compile EventSourceMapping resource properties for VPC_SECURITY GROUP with no VPC_SUBNET', async () => {\n        await expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                events: [{\n                  kafka: {\n                    topic,\n                    bootstrapServers: ['abc.xyz:9092'],\n                    accessConfigurations: {\n                      vpcSecurityGroup: 'sg-abc4567890'\n                    }\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.be.rejected.and.eventually.contain({\n          code: 'FUNCTION_KAFKA_VPC_ACCESS_CONFIGURATION_INVALID'\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for SASL_PLAIN_AUTH","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":270,"column":93,"index":9485},"line":270,"code":"      it('should correctly compile EventSourceMapping resource properties for SASL_PLAIN_AUTH', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              saslPlainAuth: 'arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslPlainSecretName'\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'BASIC_AUTH',\n                URI: 'arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslPlainSecretName'\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for SASL_SCRAM_256_AUTH","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":300,"column":97,"index":10604},"line":300,"code":"      it('should correctly compile EventSourceMapping resource properties for SASL_SCRAM_256_AUTH', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              saslScram256Auth: saslScram256AuthArn\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'SASL_SCRAM_256_AUTH',\n                URI: saslScram256AuthArn\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for SASL_SCRAM_512_AUTH","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":330,"column":97,"index":11627},"line":330,"code":"      it('should correctly compile EventSourceMapping resource properties for SASL_SCRAM_512_AUTH', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              saslScram512Auth: 'arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslScram512SecretName'\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'SASL_SCRAM_512_AUTH',\n                URI: 'arn:aws:secretsmanager:us-east-1:01234567890:secret:SaslScram512SecretName'\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for CLIENT_CERTIFICATE_TLS_AUTH","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":360,"column":105,"index":12772},"line":360,"code":"      it('should correctly compile EventSourceMapping resource properties for CLIENT_CERTIFICATE_TLS_AUTH', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              clientCertificateTlsAuth: clientCertificateTlsAuthArn\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'CLIENT_CERTIFICATE_TLS_AUTH',\n                URI: clientCertificateTlsAuthArn\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for SERVER_ROOT_CA_CERTIFICATE","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":390,"column":104,"index":13834},"line":390,"code":"      it('should correctly compile EventSourceMapping resource properties for SERVER_ROOT_CA_CERTIFICATE', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              clientCertificateTlsAuth: clientCertificateTlsAuthArn,\n              serverRootCaCertificate: serverRootCaCertificateArn\n            }\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'CLIENT_CERTIFICATE_TLS_AUTH',\n                URI: clientCertificateTlsAuthArn\n              }, {\n                Type: 'SERVER_ROOT_CA_CERTIFICATE',\n                URI: serverRootCaCertificateArn\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for ConsumerGroupId","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":424,"column":93,"index":15071},"line":424,"code":"      it('should correctly compile EventSourceMapping resource properties for ConsumerGroupId', async () => {\n        const eventConfig = {\n          event: {\n            topic,\n            bootstrapServers: ['abc.xyz:9092'],\n            accessConfigurations: {\n              clientCertificateTlsAuth: clientCertificateTlsAuthArn\n            },\n            consumerGroupId: 'my-consumer-group-id'\n          },\n          resource: awsNaming => {\n            return {\n              SelfManagedEventSource: {\n                Endpoints: {\n                  KafkaBootstrapServers: ['abc.xyz:9092']\n                }\n              },\n              SourceAccessConfigurations: [{\n                Type: 'CLIENT_CERTIFICATE_TLS_AUTH',\n                URI: clientCertificateTlsAuthArn\n              }],\n              StartingPosition: 'TRIM_HORIZON',\n              Topics: [topic],\n              FunctionName: {\n                'Fn::GetAtt': [awsNaming.getLambdaLogicalId('basic'), 'Arn']\n              },\n              SelfManagedKafkaEventSourceConfig: {\n                ConsumerGroupId: 'my-consumer-group-id'\n              }\n            };\n          }\n        };\n        await runCompileEventSourceMappingTest(eventConfig);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with EC2 statement when VPC accessConfiguration is provided","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","accessConfigurations"],"updatePoint":{"line":458,"column":100,"index":16306},"line":458,"code":"      it('should update default IAM role with EC2 statement when VPC accessConfiguration is provided', async () => {\n        const {\n          cfTemplate\n        } = await runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                events: [{\n                  kafka: {\n                    topic,\n                    bootstrapServers: ['abc.xyz:9092'],\n                    accessConfigurations: {\n                      vpcSecurityGroup: 'sg-abc4567890',\n                      vpcSubnet: 'subnet-abc4567890'\n                    }\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        });\n        const defaultIamRole = cfTemplate.Resources.IamRoleLambdaExecution;\n        expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n          Effect: 'Allow',\n          Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n          Resource: '*'\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should fail to compile EventSourceMapping resource properties for startingPosition AT_TIMESTAMP with no startingPositionTimestamp","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","startingPositionTimestamp"],"updatePoint":{"line":490,"column":139,"index":17561},"line":490,"code":"      it('should fail to compile EventSourceMapping resource properties for startingPosition AT_TIMESTAMP with no startingPositionTimestamp', async () => {\n        await expect(runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                role: {\n                  'Fn::ImportValue': 'MyImportedRole'\n                },\n                events: [{\n                  kafka: {\n                    topic,\n                    bootstrapServers: ['abc.xyz:9092'],\n                    accessConfigurations: {\n                      saslScram256Auth: saslScram256AuthArn\n                    },\n                    startingPosition: 'AT_TIMESTAMP'\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        })).to.be.rejected.and.eventually.contain({\n          code: 'FUNCTION_KAFKA_STARTING_POSITION_TIMESTAMP_INVALID'\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for startingPosition","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","startingPositionTimestamp"],"updatePoint":{"line":517,"column":94,"index":18479},"line":517,"code":"      it('should correctly compile EventSourceMapping resource properties for startingPosition', async () => {\n        const {\n          awsNaming,\n          cfTemplate\n        } = await runServerless({\n          fixture: 'function',\n          configExt: {\n            functions: {\n              basic: {\n                role: {\n                  'Fn::ImportValue': 'MyImportedRole'\n                },\n                events: [{\n                  kafka: {\n                    topic,\n                    bootstrapServers: ['abc.xyz:9092'],\n                    accessConfigurations: {\n                      saslScram256Auth: saslScram256AuthArn\n                    },\n                    startingPosition: 'AT_TIMESTAMP',\n                    startingPositionTimestamp: 123\n                  }\n                }]\n              }\n            }\n          },\n          command: 'package'\n        });\n        const eventSourceMappingResource = cfTemplate.Resources[awsNaming.getKafkaEventLogicalId('basic', 'TestingTopic')];\n        expect(eventSourceMappingResource.Properties.StartingPositionTimestamp).to.deep.equal(123);\n      });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should not add dependsOn for imported role","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","startingPositionTimestamp"],"updatePoint":{"line":549,"column":50,"index":19571},"line":549,"code":"    it('should not add dependsOn for imported role', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              role: {\n                'Fn::ImportValue': 'MyImportedRole'\n              },\n              events: [{\n                kafka: {\n                  topic,\n                  bootstrapServers: ['abc.xyz:9092'],\n                  accessConfigurations: {\n                    saslScram256Auth: saslScram256AuthArn\n                  }\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const eventSourceMappingResource = cfTemplate.Resources[awsNaming.getKafkaEventLogicalId('basic', 'TestingTopic')];\n      expect(eventSourceMappingResource.DependsOn).to.deep.equal([]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties for filterPatterns","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","configuring kafka events","startingPositionTimestamp"],"updatePoint":{"line":578,"column":90,"index":20505},"line":578,"code":"    it('should correctly compile EventSourceMapping resource properties for filterPatterns', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              role: {\n                'Fn::ImportValue': 'MyImportedRole'\n              },\n              events: [{\n                kafka: {\n                  topic,\n                  bootstrapServers: ['abc.xyz:9092'],\n                  accessConfigurations: {\n                    saslScram256Auth: saslScram256AuthArn\n                  },\n                  filterPatterns: [{\n                    value: {\n                      a: [1, 2]\n                    }\n                  }, {\n                    value: [3]\n                  }]\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const eventSourceMappingResource = cfTemplate.Resources[awsNaming.getKafkaEventLogicalId('basic', 'TestingTopic')];\n      expect(eventSourceMappingResource.Properties.FilterCriteria).to.deep.equal({\n        Filters: [{\n          Pattern: JSON.stringify({\n            value: {\n              a: [1, 2]\n            }\n          })\n        }, {\n          Pattern: JSON.stringify({\n            value: [3]\n          })\n        }]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should not modify the default IAM role","suites":["test/unit/lib/plugins/aws/package/compile/events/kafka.test.js","when no kafka events are defined"],"updatePoint":{"line":628,"column":46,"index":21899},"line":628,"code":"    it('should not modify the default IAM role', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      const defaultIamRole = cfTemplate.Resources.IamRoleLambdaExecution;\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [saslScram256AuthArn]\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/kafka.test.js","skipped":false,"dir":"test"},{"name":"should add the custom REST API role to the resources","suites":["ensureApiGatewayCloudWatchRole","when using a custom REST API role"],"updatePoint":{"line":42,"column":60,"index":1405},"line":42,"code":"    it('should add the custom REST API role to the resources', async () => {\n      provider.serverless.service.provider.logs = {\n        restApi: {\n          role: 'arn:aws:iam::XXXXX:role/api-gateway-role'\n        }\n      };\n      return expect(ensureApiGatewayCloudWatchRole(provider)).to.eventually.be.fulfilled.then(() => {\n        expect(resources[customResourceLogicalId]).to.deep.equal({\n          Type: 'Custom::ApiGatewayAccountRole',\n          Version: 1,\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['bar', 'Arn']\n            },\n            RoleArn: 'arn:aws:iam::XXXXX:role/api-gateway-role'\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/lib/ensure-api-gateway-cloud-watch-role.test.js","skipped":false,"dir":"test"},{"name":"should not add any custom resources","suites":["ensureApiGatewayCloudWatchRole","when role assignment is managed externally"],"updatePoint":{"line":63,"column":43,"index":2141},"line":63,"code":"    it('should not add any custom resources', async () => {\n      provider.serverless.service.provider.logs = {\n        restApi: {\n          role: 'arn:aws:iam::XXXXX:role/api-gateway-role',\n          roleManagedExternally: true\n        }\n      };\n      return expect(ensureApiGatewayCloudWatchRole(provider)).to.eventually.be.fulfilled.then(() => {\n        expect(resources[customResourceLogicalId]).to.be.undefined;\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/lib/ensure-api-gateway-cloud-watch-role.test.js","skipped":false,"dir":"test"},{"name":"Should memoize custom resource generator","suites":["ensureApiGatewayCloudWatchRole","when leveraging custom resources"],"updatePoint":{"line":76,"column":48,"index":2643},"line":76,"code":"    it('Should memoize custom resource generator', async () => {\n      return expect(BbPromise.all([ensureApiGatewayCloudWatchRole(provider), ensureApiGatewayCloudWatchRole(provider)])).to.eventually.be.fulfilled.then(() => {\n        expect(addCustomResourceToServiceStub.calledOnce).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/lib/ensure-api-gateway-cloud-watch-role.test.js","skipped":false,"dir":"test"},{"name":"Should ensure custom resource on template","suites":["ensureApiGatewayCloudWatchRole","when leveraging custom resources"],"updatePoint":{"line":81,"column":49,"index":2962},"line":81,"code":"    it('Should ensure custom resource on template', async () => {\n      return expect(ensureApiGatewayCloudWatchRole(provider)).to.eventually.be.fulfilled.then(() => {\n        expect(resources[customResourceLogicalId]).to.deep.equal({\n          Type: 'Custom::ApiGatewayAccountRole',\n          Version: 1,\n          Properties: {\n            RoleArn: undefined,\n            ServiceToken: {\n              'Fn::GetAtt': ['bar', 'Arn']\n            }\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/lib/ensure-api-gateway-cloud-watch-role.test.js","skipped":false,"dir":"test"},{"name":"with ARN","suites":["getMskClusterNameToken"],"updatePoint":{"line":9,"column":14,"index":270},"line":9,"code":"  it('with ARN', () => {\n    const eventSourceArn = 'arn:aws:kafka:us-east-1:111111111111:cluster/ClusterName/a1a1a1a1a1a1a1a1a';\n    const result = getMskClusterNameToken(eventSourceArn);\n    expect(result).to.equal('ClusterName');\n  });","file":"unit/lib/plugins/aws/package/compile/events/msk/get-msk-cluster-name-token.test.js","skipped":false,"dir":"test"},{"name":"with Fn::ImportValue","suites":["getMskClusterNameToken"],"updatePoint":{"line":14,"column":26,"index":521},"line":14,"code":"  it('with Fn::ImportValue', () => {\n    const eventSourceArn = {\n      'Fn::ImportValue': 'importvalue'\n    };\n    const result = getMskClusterNameToken(eventSourceArn);\n    expect(result).to.equal('importvalue');\n  });","file":"unit/lib/plugins/aws/package/compile/events/msk/get-msk-cluster-name-token.test.js","skipped":false,"dir":"test"},{"name":"with Ref","suites":["getMskClusterNameToken"],"updatePoint":{"line":21,"column":14,"index":730},"line":21,"code":"  it('with Ref', () => {\n    const eventSourceArn = {\n      Ref: 'ReferencedResource'\n    };\n    const result = getMskClusterNameToken(eventSourceArn);\n    expect(result).to.equal('ReferencedResource');\n  });","file":"unit/lib/plugins/aws/package/compile/events/msk/get-msk-cluster-name-token.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties with minimal configuration","suites":["AwsCompileMSKEvents","when there are msk events defined"],"updatePoint":{"line":74,"column":98,"index":2285},"line":74,"code":"    it('should correctly compile EventSourceMapping resource properties with minimal configuration', () => {\n      expect(minimalEventSourceMappingResource.Properties).to.deep.equal({\n        EventSourceArn: arn,\n        StartingPosition: 'TRIM_HORIZON',\n        Topics: [topic],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('basic'), 'Arn']\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with MSK statement","suites":["AwsCompileMSKEvents","when there are msk events defined"],"updatePoint":{"line":84,"column":57,"index":2644},"line":84,"code":"    it('should update default IAM role with MSK statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['kafka:DescribeCluster', 'kafka:GetBootstrapBrokers'],\n        Resource: [arn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with EC2 statement","suites":["AwsCompileMSKEvents","when there are msk events defined"],"updatePoint":{"line":91,"column":57,"index":2946},"line":91,"code":"    it('should update default IAM role with EC2 statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource DependsOn ","suites":["AwsCompileMSKEvents","when there are msk events defined"],"updatePoint":{"line":98,"column":71,"index":3372},"line":98,"code":"    it('should correctly compile EventSourceMapping resource DependsOn ', () => {\n      expect(minimalEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n      expect(allParamsEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly complie EventSourceMapping resource with all parameters","suites":["AwsCompileMSKEvents","when there are msk events defined"],"updatePoint":{"line":102,"column":80,"index":3665},"line":102,"code":"    it('should correctly complie EventSourceMapping resource with all parameters', () => {\n      expect(allParamsEventSourceMappingResource.Properties).to.deep.equal({\n        BatchSize: batchSize,\n        MaximumBatchingWindowInSeconds: maximumBatchingWindow,\n        Enabled: enabled,\n        EventSourceArn: arn,\n        StartingPosition: startingPosition,\n        SourceAccessConfigurations: sourceAccessConfigurations,\n        Topics: [topic],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('other'), 'Arn']\n        },\n        AmazonManagedKafkaEventSourceConfig: {\n          ConsumerGroupId: consumerGroupId\n        },\n        FilterCriteria: {\n          Filters: [{\n            Pattern: JSON.stringify({\n              value: {\n                a: [1, 2]\n              }\n            })\n          }, {\n            Pattern: JSON.stringify({\n              value: [3]\n            })\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should not modify the default IAM role","suites":["AwsCompileMSKEvents","when no msk events are defined"],"updatePoint":{"line":134,"column":46,"index":4643},"line":134,"code":"    it('should not modify the default IAM role', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      const defaultIamRole = cfTemplate.Resources.IamRoleLambdaExecution;\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['kafka:DescribeCluster', 'kafka:GetBootstrapBrokers'],\n        Resource: []\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/msk/index.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource properties with minimal configuration","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":69,"column":98,"index":2140},"line":69,"code":"    it('should correctly compile EventSourceMapping resource properties with minimal configuration', () => {\n      expect(minimalEventSourceMappingResource.Properties).to.deep.equal({\n        EventSourceArn: brokerArn,\n        SourceAccessConfigurations: [{\n          Type: 'BASIC_AUTH',\n          URI: basicAuthArn\n        }],\n        Queues: [queue],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('basic'), 'Arn']\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with DescribeBroker statement","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":82,"column":68,"index":2583},"line":82,"code":"    it('should update default IAM role with DescribeBroker statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['mq:DescribeBroker'],\n        Resource: [brokerArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with SecretsManager statement","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":89,"column":68,"index":2869},"line":89,"code":"    it('should update default IAM role with SecretsManager statement', () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [basicAuthArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource DependsOn ","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":96,"column":71,"index":3173},"line":96,"code":"    it('should correctly compile EventSourceMapping resource DependsOn ', () => {\n      expect(minimalEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n      expect(allParamsEventSourceMappingResource.DependsOn).to.include('IamRoleLambdaExecution');\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should correctly compile EventSourceMapping resource with all parameters","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":100,"column":80,"index":3466},"line":100,"code":"    it('should correctly compile EventSourceMapping resource with all parameters', () => {\n      expect(allParamsEventSourceMappingResource.Properties).to.deep.equal({\n        EventSourceArn: brokerArn,\n        BatchSize: batchSize,\n        MaximumBatchingWindowInSeconds: maximumBatchingWindow,\n        Enabled: enabled,\n        SourceAccessConfigurations: [{\n          Type: 'BASIC_AUTH',\n          URI: basicAuthArn\n        }, {\n          Type: 'VIRTUAL_HOST',\n          URI: virtualHost\n        }],\n        Queues: [queue],\n        FunctionName: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('other'), 'Arn']\n        },\n        FilterCriteria: {\n          Filters: [{\n            Pattern: JSON.stringify({\n              value: {\n                a: [1, 2]\n              }\n            })\n          }, {\n            Pattern: JSON.stringify({\n              value: [3]\n            })\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should update default IAM role with EC2 statement","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when there are rabbitmq events defined"],"updatePoint":{"line":132,"column":57,"index":4374},"line":132,"code":"    it('should update default IAM role with EC2 statement', async () => {\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should not add dependsOn for imported role","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","configuring rabbitmq events"],"updatePoint":{"line":141,"column":50,"index":4841},"line":141,"code":"    it('should not add dependsOn for imported role', async () => {\n      const {\n        awsNaming,\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              role: {\n                'Fn::ImportValue': 'MyImportedRole'\n              },\n              events: [{\n                rabbitmq: {\n                  queue,\n                  arn: brokerArn,\n                  basicAuthArn,\n                  virtualHost\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const eventSourceMappingResource = cfTemplate.Resources[awsNaming.getRabbitMQEventLogicalId('basic', queue)];\n      expect(eventSourceMappingResource.DependsOn).to.deep.equal([]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should not modify the default IAM role","suites":["test/unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","when no rabbitmq events are defined"],"updatePoint":{"line":171,"column":46,"index":5714},"line":171,"code":"    it('should not modify the default IAM role', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      const defaultIamRole = cfTemplate.Resources.IamRoleLambdaExecution;\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['mq:DescribeBroker'],\n        Resource: [brokerArn]\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['secretsmanager:GetSecretValue'],\n        Resource: [basicAuthArn]\n      });\n      expect(defaultIamRole.Properties.Policies[0].PolicyDocument.Statement).not.to.deep.include({\n        Effect: 'Allow',\n        Action: ['ec2:CreateNetworkInterface', 'ec2:DescribeNetworkInterfaces', 'ec2:DescribeVpcs', 'ec2:DeleteNetworkInterface', 'ec2:DescribeSubnets', 'ec2:DescribeSecurityGroups'],\n        Resource: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/rabbitmq.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileS3Events","#constructor()"],"updatePoint":{"line":47,"column":70,"index":1626},"line":47,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileS3Events.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when S3 events are given","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":50,"column":70,"index":1817},"line":50,"code":"    it('should create corresponding resources when S3 events are given', () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'first-function-bucket-one'\n          }, {\n            s3: {\n              bucket: 'first-function-bucket-two',\n              event: 's3:ObjectCreated:Put',\n              rules: [{\n                prefix: 'subfolder/'\n              }]\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbucketone.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbuckettwo.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFirstfunctionbucketoneS3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFirstfunctionbuckettwoS3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbuckettwo.Properties.NotificationConfiguration.LambdaConfigurations[0].Filter).to.deep.equal({\n        S3Key: {\n          Rules: [{\n            Name: 'prefix',\n            Value: 'subfolder/'\n          }]\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create single bucket resource when the same bucket referenced repeatedly","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":80,"column":87,"index":3418},"line":80,"code":"    it('should create single bucket resource when the same bucket referenced repeatedly', () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'first-function-bucket-one'\n          }, {\n            s3: {\n              bucket: 'first-function-bucket-one',\n              event: 's3:ObjectCreated:Put',\n              rules: [{\n                prefix: 'subfolder/'\n              }]\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbucketone.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbucketone.Properties.NotificationConfiguration.LambdaConfigurations.length).to.equal(2);\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFirstfunctionbucketoneS3.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should add the permission resource logical id to the buckets DependsOn array","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":101,"column":84,"index":4523},"line":101,"code":"    it('should add the permission resource logical id to the buckets DependsOn array', () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'first-function-bucket-one'\n          }, {\n            s3: {\n              bucket: 'first-function-bucket-two'\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbucketone.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbuckettwo.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFirstfunctionbucketoneS3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFirstfunctionbuckettwoS3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbucketone.DependsOn).to.deep.equal(['FirstLambdaPermissionFirstfunctionbucketoneS3']);\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketFirstfunctionbuckettwo.DependsOn).to.deep.equal(['FirstLambdaPermissionFirstfunctionbuckettwoS3']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when S3 events are not given","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":121,"column":78,"index":6062},"line":121,"code":"    it('should not create corresponding resources when S3 events are not given', () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should generate a valid bucket name from provider.s3 entry","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":130,"column":66,"index":6424},"line":130,"code":"    it('should generate a valid bucket name from provider.s3 entry', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketone: {}\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: {\n              bucket: 'bucketone'\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketone.Properties.BucketName).to.equal('bucketone');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should use logical id from provider s3 specification if exists","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":146,"column":70,"index":7004},"line":146,"code":"    it('should use logical id from provider s3 specification if exists', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketOne: 1\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'bucketone'\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketone.Type).to.equal('AWS::S3::Bucket');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionBucketoneS3.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketone.DependsOn).to.deep.equal(['FirstLambdaPermissionBucketoneS3']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should use name from provider s3 specification if exists","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":162,"column":64,"index":7888},"line":162,"code":"    it('should use name from provider s3 specification if exists', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketOne: {\n          name: 'my-awesome-bucket'\n        }\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'bucketOne'\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketOne.Properties.BucketName).to.equal('my-awesome-bucket');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should use bucketName over name property","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":178,"column":48,"index":8461},"line":178,"code":"    it('should use bucketName over name property', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketOne: {\n          name: 'not-used',\n          bucketName: 'my-awesome-bucket'\n        }\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: 'bucketOne'\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketOne.Properties.BucketName).to.equal('my-awesome-bucket');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should merge notification configuration","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":195,"column":47,"index":9067},"line":195,"code":"    it('should merge notification configuration', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketone: {\n          notificationConfiguration: {\n            QueueConfigurations: [1, 2, 3]\n          }\n        }\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: {\n              bucket: 'bucketone'\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketone.Properties.NotificationConfiguration).to.deep.equal({\n        LambdaConfigurations: [{\n          Event: 's3:ObjectCreated:*',\n          Function: {\n            'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n          }\n        }],\n        QueueConfigurations: [1, 2, 3]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should convert camel case properties to pascal case","suites":["AwsCompileS3Events","#newS3Buckets()"],"updatePoint":{"line":223,"column":59,"index":9971},"line":223,"code":"    it('should convert camel case properties to pascal case', () => {\n      awsCompileS3Events.serverless.service.provider.s3 = {\n        bucketone: {\n          tags: [1, 2, 3]\n        }\n      };\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          events: [{\n            s3: {\n              bucket: 'bucketone'\n            }\n          }]\n        }\n      };\n      awsCompileS3Events.newS3Buckets();\n      expect(awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate.Resources.S3BucketBucketone.Properties.Tags).to.deep.equal([1, 2, 3]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resources for the most minimal configuration","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":243,"column":80,"index":10642},"line":243,"code":"    it('should create the necessary resources for the most minimal configuration', async () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileS3Events.existingS3Buckets()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('s3');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['s3:PutBucketNotification', 's3:GetBucketNotification'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 's3', '', '', 'existing-s3-bucket']]\n          }\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 'lambda', {\n              Ref: 'AWS::Region'\n            }, {\n              Ref: 'AWS::AccountId'\n            }, 'function', '*']]\n          }\n        }]);\n        expect(Resources.FirstCustomS31).to.deep.equal({\n          Type: 'Custom::S3',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n            },\n            FunctionName: 'first',\n            BucketName: 'existing-s3-bucket',\n            BucketConfigs: [{\n              Event: 's3:ObjectCreated:*',\n              Rules: []\n            }]\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resources for a service using different config parameters","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":300,"column":93,"index":12693},"line":300,"code":"    it('should create the necessary resources for a service using different config parameters', async () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'second',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectCreated:Put',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpg'\n              }],\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileS3Events.existingS3Buckets()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('s3');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['s3:PutBucketNotification', 's3:GetBucketNotification'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 's3', '', '', 'existing-s3-bucket']]\n          }\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 'lambda', {\n              Ref: 'AWS::Region'\n            }, {\n              Ref: 'AWS::AccountId'\n            }, 'function', '*']]\n          }\n        }]);\n        expect(Resources.FirstCustomS31).to.deep.equal({\n          Type: 'Custom::S3',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n            },\n            FunctionName: 'second',\n            BucketName: 'existing-s3-bucket',\n            BucketConfigs: [{\n              Event: 's3:ObjectCreated:Put',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpg'\n              }]\n            }]\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should support `forceDeploy` setting","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":367,"column":44,"index":14971},"line":367,"code":"    it('should support `forceDeploy` setting', async () => {\n      const result = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              events: [{\n                s3: {\n                  bucket: 'existing-s3-bucket',\n                  forceDeploy: true,\n                  existing: true\n                }\n              }]\n            }\n          }\n        },\n        command: 'package'\n      });\n      const {\n        Resources\n      } = result.cfTemplate;\n      const {\n        awsNaming\n      } = result;\n      const customResource = Resources[awsNaming.getCustomResourceS3ResourceLogicalId('basic')];\n      expect(typeof customResource.Properties.ForceDeploy).to.equal('number');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create the necessary resources for a service using multiple event definitions","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":394,"column":92,"index":15786},"line":394,"code":"    it('should create the necessary resources for a service using multiple event definitions', async () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'second',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectCreated:Put',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpg'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectRemoved:Delete',\n              rules: [{\n                prefix: 'downloads'\n              }, {\n                suffix: '.txt'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectRestore:Post',\n              rules: [{\n                prefix: 'avatars'\n              }, {\n                suffix: '.png'\n              }],\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileS3Events.existingS3Buckets()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][1]).to.equal('s3');\n        expect(addCustomResourceToServiceStub.args[0][2]).to.deep.equal([{\n          Action: ['s3:PutBucketNotification', 's3:GetBucketNotification'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 's3', '', '', 'existing-s3-bucket']]\n          }\n        }, {\n          Action: ['lambda:AddPermission', 'lambda:RemovePermission'],\n          Effect: 'Allow',\n          Resource: {\n            'Fn::Join': [':', ['arn', {\n              Ref: 'AWS::Partition'\n            }, 'lambda', {\n              Ref: 'AWS::Region'\n            }, {\n              Ref: 'AWS::AccountId'\n            }, 'function', '*']]\n          }\n        }]);\n        expect(Resources.FirstCustomS31).to.deep.equal({\n          Type: 'Custom::S3',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n            },\n            FunctionName: 'second',\n            BucketName: 'existing-s3-bucket',\n            BucketConfigs: [{\n              Event: 's3:ObjectCreated:Put',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpg'\n              }]\n            }, {\n              Event: 's3:ObjectRemoved:Delete',\n              Rules: [{\n                Prefix: 'downloads'\n              }, {\n                Suffix: '.txt'\n              }]\n            }, {\n              Event: 's3:ObjectRestore:Post',\n              Rules: [{\n                Prefix: 'avatars'\n              }, {\n                Suffix: '.png'\n              }]\n            }]\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create a valid policy for an S3 bucket using !ImportValue","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":497,"column":72,"index":19060},"line":497,"code":"    it('should create a valid policy for an S3 bucket using !ImportValue', async () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            s3: {\n              bucket: {\n                'Fn::ImportValue': 'existing-s3-bucket'\n              },\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileS3Events.existingS3Buckets()).to.be.fulfilled.then(() => {\n        expect(addCustomResourceToServiceStub).to.have.been.calledOnce;\n        expect(addCustomResourceToServiceStub.args[0][2][0].Resource).to.deep.equal({\n          'Fn::Join': [':', ['arn', {\n            Ref: 'AWS::Partition'\n          }, 's3', '', '', {\n            'Fn::ImportValue': 'existing-s3-bucket'\n          }]]\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create DependsOn clauses when one bucket is used in more than 1 custom resources","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":522,"column":95,"index":19927},"line":522,"code":"    it('should create DependsOn clauses when one bucket is used in more than 1 custom resources', async () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'first',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectCreated:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpg'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectCreated:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpeg'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectCreated:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.png'\n              }],\n              existing: true\n            }\n          }]\n        },\n        second: {\n          name: 'second',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectRemoved:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpg'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectRemoved:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.jpeg'\n              }],\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket',\n              event: 's3:ObjectRemoved:*',\n              rules: [{\n                prefix: 'uploads'\n              }, {\n                suffix: '.png'\n              }],\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(awsCompileS3Events.existingS3Buckets()).to.be.fulfilled.then(() => {\n        const {\n          Resources\n        } = awsCompileS3Events.serverless.service.provider.compiledCloudFormationTemplate;\n        expect(Object.keys(Resources)).to.have.length(2);\n        expect(Resources.FirstCustomS31).to.deep.equal({\n          Type: 'Custom::S3',\n          Version: 1,\n          DependsOn: ['FirstLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n            },\n            FunctionName: 'first',\n            BucketName: 'existing-s3-bucket',\n            BucketConfigs: [{\n              Event: 's3:ObjectCreated:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpg'\n              }]\n            }, {\n              Event: 's3:ObjectCreated:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpeg'\n              }]\n            }, {\n              Event: 's3:ObjectCreated:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.png'\n              }]\n            }]\n          }\n        });\n        expect(Resources.SecondCustomS31).to.deep.equal({\n          Type: 'Custom::S3',\n          Version: 1,\n          DependsOn: ['SecondLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction', 'FirstCustomS31'],\n          Properties: {\n            ServiceToken: {\n              'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n            },\n            FunctionName: 'second',\n            BucketName: 'existing-s3-bucket',\n            BucketConfigs: [{\n              Event: 's3:ObjectRemoved:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpg'\n              }]\n            }, {\n              Event: 's3:ObjectRemoved:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.jpeg'\n              }]\n            }, {\n              Event: 's3:ObjectRemoved:*',\n              Rules: [{\n                Prefix: 'uploads'\n              }, {\n                Suffix: '.png'\n              }]\n            }]\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should throw if more than 1 S3 bucket is configured per function","suites":["AwsCompileS3Events","#existingS3Buckets()"],"updatePoint":{"line":674,"column":72,"index":24387},"line":674,"code":"    it('should throw if more than 1 S3 bucket is configured per function', () => {\n      awsCompileS3Events.serverless.service.functions = {\n        first: {\n          name: 'second',\n          events: [{\n            s3: {\n              bucket: 'existing-s3-bucket',\n              existing: true\n            }\n          }, {\n            s3: {\n              bucket: 'existing-s3-bucket-2',\n              existing: true\n            }\n          }]\n        }\n      };\n      return expect(() => awsCompileS3Events.existingS3Buckets()).to.throw('Only one S3 Bucket');\n    });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create lambda permissions policy with wild card","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":771,"column":60,"index":26914},"line":771,"code":"  it('should create lambda permissions policy with wild card', async () => {\n    const expectedResource = ['arn', {\n      Ref: 'AWS::Partition'\n    }, 'lambda', {\n      Ref: 'AWS::Region'\n    }, {\n      Ref: 'AWS::AccountId'\n    }, 'function', '*'];\n    const lambdaPermissionsPolicies = cfResources.IamRoleCustomResourcesLambdaExecution.Properties.Policies['0'].PolicyDocument.Statement.filter(x => x.Action[0].includes('AddPermission'));\n    expect(lambdaPermissionsPolicies).to.have.length(1);\n    const actualResource = lambdaPermissionsPolicies[0].Resource['Fn::Join'][1];\n    expect(actualResource).to.deep.equal(expectedResource);\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should support `bucket` provided as CF function","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":784,"column":53,"index":27551},"line":784,"code":"  it('should support `bucket` provided as CF function', () => {\n    expect(cfResources[naming.getCustomResourceS3ResourceLogicalId('other')]).to.deep.equal({\n      Type: 'Custom::S3',\n      Version: 1,\n      DependsOn: ['OtherLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n      Properties: {\n        ServiceToken: {\n          'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n        },\n        FunctionName: `${serverlessInstance.service.service}-dev-other`,\n        BucketName: {\n          Ref: 'SomeBucket'\n        },\n        BucketConfigs: [{\n          Event: 's3:ObjectCreated:*',\n          Rules: []\n        }]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should support `bucket` provided as CF If function","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":804,"column":56,"index":28245},"line":804,"code":"  it('should support `bucket` provided as CF If function', () => {\n    expect(cfResources[naming.getCustomResourceS3ResourceLogicalId('withIf')]).to.deep.equal({\n      Type: 'Custom::S3',\n      Version: 1,\n      DependsOn: ['WithIfLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n      Properties: {\n        ServiceToken: {\n          'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n        },\n        FunctionName: `${serverlessInstance.service.service}-dev-withIf`,\n        BucketName: {\n          'Fn::If': ['isFirstBucketEmtpy', {\n            Ref: 'FirstBucket'\n          }, {\n            Ref: 'SecondBucket'\n          }]\n        },\n        BucketConfigs: [{\n          Event: 's3:ObjectCreated:*',\n          Rules: []\n        }]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should support `prefix` and `suffix` provided as CF function","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":828,"column":66,"index":29060},"line":828,"code":"  it('should support `prefix` and `suffix` provided as CF function', () => {\n    expect(cfResources[naming.getCustomResourceS3ResourceLogicalId('prefixSuffixWithCfFunction')]).to.deep.equal({\n      Type: 'Custom::S3',\n      Version: 1,\n      DependsOn: ['PrefixSuffixWithCfFunctionLambdaFunction', 'CustomDashresourceDashexistingDashs3LambdaFunction'],\n      Properties: {\n        ServiceToken: {\n          'Fn::GetAtt': ['CustomDashresourceDashexistingDashs3LambdaFunction', 'Arn']\n        },\n        FunctionName: `${serverlessInstance.service.service}-dev-prefixSuffixWithCfFunction`,\n        BucketName: 'TestBucket',\n        BucketConfigs: [{\n          Event: 's3:ObjectCreated:*',\n          Rules: [{\n            Prefix: {\n              'Fn::Join': ['-', ['test', 'join']]\n            }\n          }, {\n            Suffix: {\n              'Fn::Join': ['-', ['test', 'join']]\n            }\n          }]\n        }]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should disallow referencing multiple buckets in context of single function with CF references","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":854,"column":99,"index":30033},"line":854,"code":"  it('should disallow referencing multiple buckets in context of single function with CF references', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      configExt: {\n        functions: {\n          basic: {\n            events: [{\n              s3: {\n                bucket: {\n                  Ref: 'SomeBucket'\n                },\n                event: 's3:ObjectCreated:*',\n                existing: true\n              }\n            }, {\n              s3: {\n                bucket: {\n                  Ref: 'AnotherBucket'\n                },\n                event: 's3:ObjectCreated:*',\n                existing: true\n              }\n            }]\n          }\n        }\n      },\n      command: 'package'\n    })).to.be.eventually.rejected.and.have.property('code', 'S3_MULTIPLE_BUCKETS_PER_FUNCTION');\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should throw when `bucket` is specified as CF function but without setting `existing: true`","suites":["test/unit/lib/plugins/aws/package/compile/events/s3/index.test.js"],"updatePoint":{"line":883,"column":97,"index":30869},"line":883,"code":"  it('should throw when `bucket` is specified as CF function but without setting `existing: true`', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      configExt: {\n        functions: {\n          basic: {\n            events: [{\n              s3: {\n                bucket: {\n                  Ref: 'SomeBucket'\n                },\n                event: 's3:ObjectCreated:*'\n              }\n            }]\n          }\n        }\n      },\n      command: 'package'\n    })).to.be.eventually.rejected.and.have.property('code', 'S3_INVALID_NEW_BUCKET_FORMAT');\n  });","file":"unit/lib/plugins/aws/package/compile/events/s3/index.test.js","skipped":false,"dir":"test"},{"name":"should create the corresponding schedule resources when schedule events are given","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":101,"column":87,"index":2791},"line":101,"code":"  it('should create the corresponding schedule resources when schedule events are given', () => {\n    for (const scheduleCfResource of scheduleCfResources) {\n      expect(scheduleCfResource.Type).to.equal('AWS::Events::Rule');\n    }\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the given rate expressions","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":106,"column":47,"index":2990},"line":106,"code":"  it('should respect the given rate expressions', () => {\n    expect(scheduleCfResources[0].Properties.ScheduleExpression).to.equal('rate(10 minutes)');\n    expect(scheduleCfResources[1].Properties.ScheduleExpression).to.equal('rate(1 hour)');\n    expect(scheduleCfResources[2].Properties.ScheduleExpression).to.equal('rate(10 minutes)');\n    expect(scheduleCfResources[3].Properties.ScheduleExpression).to.equal('rate(10 minutes)');\n    expect(scheduleCfResources[4].Properties.ScheduleExpression).to.equal('cron(5,35 12 ? * 6l 2002-2005)');\n    expect(scheduleCfResources[5].Properties.ScheduleExpression).to.equal('cron(0 0/4 ? * MON-FRI *)');\n    expect(scheduleCfResources[6].Properties.ScheduleExpression).to.equal('rate(1 hour)');\n    expect(scheduleCfResources[7].Properties.ScheduleExpression).to.equal('rate(1 hour)');\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"enabled\" variable, defaulting to true","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":116,"column":63,"index":3841},"line":116,"code":"  it('should respect the \"enabled\" variable, defaulting to true', () => {\n    expect(scheduleCfResources[0].Properties.State).to.equal('DISABLED');\n    expect(scheduleCfResources[1].Properties.State).to.equal('ENABLED');\n    expect(scheduleCfResources[2].Properties.State).to.equal('ENABLED');\n    expect(scheduleCfResources[3].Properties.State).to.equal('ENABLED');\n    expect(scheduleCfResources[4].Properties.State).to.equal('ENABLED');\n    expect(scheduleCfResources[5].Properties.State).to.equal('DISABLED');\n    expect(scheduleCfResources[6].Properties.State).to.equal('DISABLED');\n    expect(scheduleCfResources[7].Properties.State).to.equal('ENABLED');\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"name\" variable","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":126,"column":40,"index":4485},"line":126,"code":"  it('should respect the \"name\" variable', () => {\n    expect(scheduleCfResources[0].Properties.Name).to.equal('your-scheduled-event-name');\n    expect(scheduleCfResources[1].Properties.Name).to.equal('your-scheduled-event-name-array');\n    expect(scheduleCfResources[2].Properties.Name).to.be.undefined;\n    expect(scheduleCfResources[3].Properties.Name).to.be.undefined;\n    expect(scheduleCfResources[4].Properties.Name).to.be.undefined;\n    expect(scheduleCfResources[5].Properties.Name).to.be.undefined;\n    expect(scheduleCfResources[6].Properties.Name).to.be.undefined;\n    expect(scheduleCfResources[7].Properties.Name).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if a \"name\" variable is specified when defining more than one rate expression","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":136,"column":105,"index":5201},"line":136,"code":"  it('should throw an error if a \"name\" variable is specified when defining more than one rate expression', async () => {\n    const events = [{\n      schedule: {\n        rate: ['cron(0 0/4 ? * MON-FRI *)', 'rate(1 hour)'],\n        enabled: false,\n        name: 'your-scheduled-event-name'\n      }\n    }];\n    await expect(run(events)).to.be.eventually.rejectedWith(ServerlessError, 'You cannot specify a name when defining more than one rate expression');\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"description\" variable","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":146,"column":47,"index":5605},"line":146,"code":"  it('should respect the \"description\" variable', () => {\n    expect(scheduleCfResources[0].Properties.Description).to.equal('your scheduled event description');\n    expect(scheduleCfResources[1].Properties.Description).to.be.undefined;\n    expect(scheduleCfResources[2].Properties.Description).to.be.undefined;\n    expect(scheduleCfResources[3].Properties.Description).to.be.undefined;\n    expect(scheduleCfResources[4].Properties.Description).to.be.undefined;\n    expect(scheduleCfResources[5].Properties.Description).to.equal('your scheduled event description (array)');\n    expect(scheduleCfResources[6].Properties.Description).to.equal('your scheduled event description (array)');\n    expect(scheduleCfResources[7].Properties.Description).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"inputPath\" variable","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":156,"column":45,"index":6370},"line":156,"code":"  it('should respect the \"inputPath\" variable', () => {\n    expect(scheduleCfResources[0].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[1].Properties.Targets[0].InputPath).to.equal('$.stageVariables');\n    expect(scheduleCfResources[2].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[3].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[4].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[5].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[6].Properties.Targets[0].InputPath).to.be.undefined;\n    expect(scheduleCfResources[7].Properties.Targets[0].InputPath).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"input\" variable","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":166,"column":41,"index":7113},"line":166,"code":"  it('should respect the \"input\" variable', () => {\n    expect(scheduleCfResources[0].Properties.Targets[0].Input).to.be.undefined;\n    expect(scheduleCfResources[1].Properties.Targets[0].Input).to.be.undefined;\n    expect(scheduleCfResources[2].Properties.Targets[0].Input).to.equal('{\"key\":\"array\"}');\n    expect(scheduleCfResources[3].Properties.Targets[0].Input).to.be.undefined;\n    expect(scheduleCfResources[4].Properties.Targets[0].Input).to.be.undefined;\n    expect(scheduleCfResources[5].Properties.Targets[0].Input).to.equal('{\"key\":\"array\"}');\n    expect(scheduleCfResources[6].Properties.Targets[0].Input).to.equal('{\"key\":\"array\"}');\n    expect(scheduleCfResources[7].Properties.Targets[0].Input).to.be.undefined;\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should respect the \"inputTransformer\" variable","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":176,"column":52,"index":7858},"line":176,"code":"  it('should respect the \"inputTransformer\" variable', () => {\n    expect(scheduleCfResources[0].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[1].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[2].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[3].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[4].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[5].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[6].Properties.Targets[0].InputTransformer).to.be.undefined;\n    expect(scheduleCfResources[7].Properties.Targets[0].InputTransformer).to.deep.equal({\n      InputTemplate: '{\"time\": <eventTime>, \"key\": \"value\"}',\n      InputPathsMap: {\n        eventTime: '$.time'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should not create schedule resources when no scheduled event is given","suites":["test/unit/lib/plugins/aws/package/compile/events/schedule.test.js"],"updatePoint":{"line":191,"column":75,"index":8806},"line":191,"code":"  it('should not create schedule resources when no scheduled event is given', async () => {\n    expect(await run([])).to.be.empty;\n  });","file":"unit/lib/plugins/aws/package/compile/events/schedule.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsCompileSNSEvents","#constructor()"],"updatePoint":{"line":25,"column":70,"index":899},"line":25,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsCompileSNSEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if SNS event type is not a string or an object","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":28,"column":76,"index":1101},"line":28,"code":"    it('should throw an error if SNS event type is not a string or an object', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: 42\n          }]\n        }\n      };\n      expect(() => awsCompileSNSEvents.compileSNSEvents()).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when SNS events are given","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":38,"column":71,"index":1416},"line":38,"code":"    it('should create corresponding resources when SNS events are given', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1',\n              filterPolicy: {\n                pet: ['dog', 'cat']\n              },\n              filterPolicyScope: 'MessageBody'\n            }\n          }, {\n            sns: 'Topic 2'\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic2.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic2SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.FilterPolicy).to.eql({\n        pet: ['dog', 'cat']\n      });\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.FilterPolicyScope).to.eql('MessageBody');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should allow SNS topic without displayName","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":66,"column":50,"index":3166},"line":66,"code":"    it('should allow SNS topic without displayName', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Properties).to.to.not.have.property('DisplayName');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding resources when topic is defined in resources","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":79,"column":80,"index":3677},"line":79,"code":"    it('should create corresponding resources when topic is defined in resources', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1',\n              filterPolicy: {\n                pet: ['dog', 'cat']\n              }\n            }\n          }, {\n            sns: 'Topic 2'\n          }]\n        }\n      };\n      Object.assign(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources, {\n        SNSTopicTopic2: {\n          Type: 'AWS::SNS::Topic',\n          Properties: {\n            TopicName: 'Topic 2',\n            DisplayName: 'Display name for topic 2'\n          }\n        }\n      });\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic2.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic2SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.FilterPolicy).to.eql({\n        pet: ['dog', 'cat']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create single SNS topic when the same topic is referenced repeatedly","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":114,"column":83,"index":5545},"line":114,"code":"    it('should create single SNS topic when the same topic is referenced repeatedly', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1'\n            }\n          }, {\n            sns: 'Topic 1'\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the event an object and the displayName is not given","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":132,"column":87,"index":6454},"line":132,"code":"    it('should throw an error when the event an object and the displayName is not given', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              displayName: 'Display name for topic 1'\n            }\n          }]\n        }\n      };\n      expect(() => {\n        awsCompileSNSEvents.compileSNSEvents();\n      }).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should not create corresponding resources when SNS events are not given","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":146,"column":79,"index":6863},"line":146,"code":"    it('should not create corresponding resources when SNS events are not given', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: []\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create SNS topic when arn is given as a string","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":155,"column":61,"index":7227},"line":155,"code":"    it('should create SNS topic when arn is given as a string', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: 'arn:aws:foo'\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFooSNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Properties.FilterPolicy).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create SNS topic when only arn is given as an object property","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":169,"column":76,"index":8176},"line":169,"code":"    it('should create SNS topic when only arn is given as an object property', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              arn: 'arn:aws:sns:region:accountid:foo'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFooSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create a cross region subscription when SNS topic arn in a different region than provider","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":184,"column":104,"index":9037},"line":184,"code":"    it('should create a cross region subscription when SNS topic arn in a different region than provider', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              arn: 'arn:aws:sns:some-other-region:accountid:foo'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Properties.Region).to.equal('some-other-region');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFooSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create a cross region subscription when SNS topic arn in a different region is using pseudo params","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":200,"column":113,"index":10094},"line":200,"code":"    it('should create a cross region subscription when SNS topic arn in a different region is using pseudo params', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              arn: 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:foo'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Properties.Region).to.equal('${AWS::Region}');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFooSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when the arn an object and the value is not a string","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":216,"column":82,"index":11122},"line":216,"code":"    it('should throw an error when the arn an object and the value is not a string', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              arn: 123\n            }\n          }]\n        }\n      };\n      expect(() => {\n        awsCompileSNSEvents.compileSNSEvents();\n      }).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create SNS topic when both arn and topicName are given as object properties","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":230,"column":90,"index":11511},"line":230,"code":"    it('should create SNS topic when both arn and topicName are given as object properties', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'bar',\n              arn: 'arn:aws:sns:region:accountid:bar'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionBar.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionBarSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create two SNS topic subsriptions for ARNs with the same topic name in two regions when different topicName parameters are specified","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":246,"column":147,"index":12447},"line":246,"code":"    it('should create two SNS topic subsriptions for ARNs with the same topic name in two regions when different topicName parameters are specified', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'first',\n              arn: 'arn:aws:sns:region-1:accountid:bar'\n            }\n          }, {\n            sns: {\n              topicName: 'second',\n              arn: 'arn:aws:sns:region-2:accountid:bar'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(4);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFirst.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionSecond.Type).to.equal('AWS::SNS::Subscription');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should override SNS topic subsription CF resource name when arn and topicName are given as object properties","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":267,"column":116,"index":13495},"line":267,"code":"    it('should override SNS topic subsription CF resource name when arn and topicName are given as object properties', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'foo',\n              arn: 'arn:aws:sns:region:accountid:bar'\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionFoo.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionFooSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create SNS topic when arn object and topicName are given as object properties","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":285,"column":92,"index":14417},"line":285,"code":"    it('should create SNS topic when arn object and topicName are given as object properties', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'bar',\n              arn: {\n                'Fn::Join': [':', ['arn:aws:sns', '${AWS::Region}', '${AWS::AccountId}', 'bar']]\n              }\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionBar.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionBarSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when arn object and no topicName are given as object properties","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":305,"column":93,"index":15420},"line":305,"code":"    it('should throw an error when arn object and no topicName are given as object properties', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              arn: {\n                'Fn::Join': [':', ['arn:aws:sns', '${AWS::Region}', '${AWS::AccountId}', 'bar']]\n              }\n            }\n          }]\n        }\n      };\n      expect(() => {\n        awsCompileSNSEvents.compileSNSEvents();\n      }).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should create SNS topic when arn, topicName, and filterPolicy are given as object","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":321,"column":89,"index":15919},"line":321,"code":"    it('should create SNS topic when arn, topicName, and filterPolicy are given as object', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'bar',\n              arn: 'arn:aws:sns:region:accountid:bar',\n              filterPolicy: {\n                pet: ['dog', 'cat']\n              }\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(Object.keys(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources)).to.have.length(2);\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionBar.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionBar.Properties.FilterPolicy).to.eql({\n        pet: ['dog', 'cat']\n      });\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionBarSNS.Type).to.equal('AWS::Lambda::Permission');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should link topic to corresponding dlq when redrivePolicy is defined by arn string","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":343,"column":90,"index":17079},"line":343,"code":"    it('should link topic to corresponding dlq when redrivePolicy is defined by arn string', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1',\n              redrivePolicy: {\n                deadLetterTargetArn: 'arn:aws:sqs:us-east-1:11111111111:myDLQ'\n              }\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.RedrivePolicy).to.eql({\n        deadLetterTargetArn: 'arn:aws:sqs:us-east-1:11111111111:myDLQ'\n      });\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.Topic1ToFirstDLQPolicy.Type).to.equal('AWS::SQS::QueuePolicy');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.Topic1ToFirstDLQPolicy.Properties.Queues).to.deep.equal([{\n        'Fn::Join': ['', ['https://sqs.us-east-1.', {\n          Ref: 'AWS::URLSuffix'\n        }, '/11111111111/myDLQ']]\n      }]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should link topic to corresponding dlq when redrivePolicy is defined with resource ref","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":371,"column":94,"index":18819},"line":371,"code":"    it('should link topic to corresponding dlq when redrivePolicy is defined with resource ref', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1',\n              redrivePolicy: {\n                deadLetterTargetRef: 'SNSDLQ'\n              }\n            }\n          }]\n        }\n      };\n      Object.assign(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources, {\n        SNSDLQ: {\n          Type: 'AWS::SQS::Queue',\n          Properties: {\n            QueueName: 'SNSDLQ'\n          }\n        }\n      });\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.RedrivePolicy).to.eql({\n        deadLetterTargetArn: {\n          'Fn::GetAtt': ['SNSDLQ', 'Arn']\n        }\n      });\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.Topic1ToFirstDLQPolicy.Type).to.equal('AWS::SQS::QueuePolicy');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should link topic to corresponding dlq when redrivePolicy is defined with resource ref","suites":["AwsCompileSNSEvents","#compileSNSEvents()"],"updatePoint":{"line":404,"column":94,"index":20499},"line":404,"code":"    it('should link topic to corresponding dlq when redrivePolicy is defined with resource ref', () => {\n      awsCompileSNSEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            sns: {\n              topicName: 'Topic 1',\n              displayName: 'Display name for topic 1',\n              redrivePolicy: {\n                deadLetterTargetImport: {\n                  arn: 'myDLQArn',\n                  url: 'myDLQUrl'\n                }\n              }\n            }\n          }]\n        }\n      };\n      awsCompileSNSEvents.compileSNSEvents();\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.SNSTopicTopic1.Type).to.equal('AWS::SNS::Topic');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionTopic1SNS.Type).to.equal('AWS::Lambda::Permission');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Type).to.equal('AWS::SNS::Subscription');\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstSnsSubscriptionTopic1.Properties.RedrivePolicy).to.eql({\n        deadLetterTargetArn: {\n          'Fn::ImportValue': 'myDLQArn'\n        }\n      });\n      expect(awsCompileSNSEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.Topic1ToFirstDLQPolicy.Type).to.equal('AWS::SQS::QueuePolicy');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sns.test.js","skipped":false,"dir":"test"},{"name":"should suport direct ARN string","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":87,"column":39,"index":3241},"line":87,"code":"    it('should suport direct ARN string', () => {\n      const directSqsArn = 'arn:aws:sqs:region:account:MyQueue';\n      expect(directArnEventSourceMappingResource.Properties.EventSourceArn).to.equal(directSqsArn);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should support `arn` (string)","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":91,"column":37,"index":3462},"line":91,"code":"    it('should support `arn` (string)', () => {\n      const basicSqsArn = 'arn:aws:sqs:region:account:some-queue-name';\n      expect(basicEventSourceMappingResource.Properties.EventSourceArn).to.equal(basicSqsArn);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should suport `arn` (CF Fn::GetAtt)","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":95,"column":43,"index":3691},"line":95,"code":"    it('should suport `arn` (CF Fn::GetAtt)', () => {\n      const getAttSqsArn = {\n        'Fn::GetAtt': ['SomeQueue', 'Arn']\n      };\n      expect(arnCfGetAttEventSourceMappingResource.Properties.EventSourceArn['Fn::GetAtt']).to.deep.equal(getAttSqsArn['Fn::GetAtt']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should suport `arn` (CF Fn::ImportValue)","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":101,"column":48,"index":3974},"line":101,"code":"    it('should suport `arn` (CF Fn::ImportValue)', () => {\n      const cfImportArn = {\n        'Fn::ImportValue': 'ForeignQueue'\n      };\n      expect(arnCfImportEventSourceMappingResource.Properties.EventSourceArn['Fn::ImportValue']).to.deep.equal(cfImportArn['Fn::ImportValue']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should suport `arn` (CF Fn::Join)","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":107,"column":41,"index":4257},"line":107,"code":"    it('should suport `arn` (CF Fn::Join)', () => {\n      const cfJoinArn = {\n        'Fn::Join': [':', ['arn', 'aws', 'sqs', {\n          Ref: 'AWS::Region'\n        }, {\n          Ref: 'AWS::AccountId'\n        }, 'MyQueue']]\n      };\n      expect(arnCfJoinEventSourceMappingResource.Properties.EventSourceArn['Fn::Join']).to.deep.equal(cfJoinArn['Fn::Join']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should suport `batchSize`","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":117,"column":33,"index":4617},"line":117,"code":"    it('should suport `batchSize`', () => {\n      const requestedBatchSize = 10;\n      expect(basicEventSourceMappingResource.Properties.BatchSize).to.equal(requestedBatchSize);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should suport `functionResponseType`","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":121,"column":44,"index":4814},"line":121,"code":"    it('should suport `functionResponseType`', () => {\n      const requestedFunctionResponseType = 'ReportBatchItemFailures';\n      expect(basicEventSourceMappingResource.Properties.FunctionResponseTypes).to.include.members([requestedFunctionResponseType]);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should ensure necessary IAM statememnts","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","regular configuration"],"updatePoint":{"line":125,"column":47,"index":5083},"line":125,"code":"    it('should ensure necessary IAM statememnts', () => {\n      const iamRoleStatments = [{\n        Effect: 'Allow',\n        Action: ['sqs:ReceiveMessage', 'sqs:DeleteMessage', 'sqs:GetQueueAttributes'],\n        Resource: ['arn:aws:sqs:region:account:some-queue-name', 'arn:aws:sqs:region:account:MyQueue', {\n          'Fn::GetAtt': ['SomeQueue', 'Arn']\n        }, {\n          'Fn::ImportValue': 'ForeignQueue'\n        }, {\n          'Fn::Join': [':', ['arn', 'aws', 'sqs', {\n            Ref: 'AWS::Region'\n          }, {\n            Ref: 'AWS::AccountId'\n          }, 'MyQueue']]\n        }]\n      }];\n      expect(iamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement).to.deep.include.members(iamRoleStatments);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should reference provisioned alias","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":179,"column":42,"index":6835},"line":179,"code":"    it('should reference provisioned alias', () => {\n      expect(JSON.stringify(eventSourceMappingResource.Properties.FunctionName['Fn::Join'])).to.include('provisioned');\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should depend on provisioned alias","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":182,"column":42,"index":7016},"line":182,"code":"    it('should depend on provisioned alias', () => {\n      const aliasLogicalId = naming.getLambdaProvisionedConcurrencyAliasLogicalId('basic');\n      expect(eventSourceMappingResource.DependsOn).to.include(aliasLogicalId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should have correct batch size","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":186,"column":38,"index":7244},"line":186,"code":"    it('should have correct batch size', () => {\n      expect(eventSourceMappingResource.Properties.BatchSize).to.equal(10);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should have correct batching window size","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":189,"column":48,"index":7387},"line":189,"code":"    it('should have correct batching window size', () => {\n      expect(eventSourceMappingResource.Properties.MaximumBatchingWindowInSeconds).to.equal(100);\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should have correct filtering patterns","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":192,"column":46,"index":7550},"line":192,"code":"    it('should have correct filtering patterns', () => {\n      expect(eventSourceMappingResource.Properties.FilterCriteria).to.deep.equal({\n        Filters: [{\n          Pattern: JSON.stringify({\n            a: [1, 2]\n          })\n        }, {\n          Pattern: JSON.stringify({\n            b: [3, 4]\n          })\n        }]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should have correct maximum concurrency","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":205,"column":47,"index":7895},"line":205,"code":"    it('should have correct maximum concurrency', () => {\n      expect(eventSourceMappingResource.Properties.ScalingConfig).to.deep.equal({\n        MaximumConcurrency: 250\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should not depend on default IAM role when custom role defined","suites":["test/unit/lib/plugins/aws/package/compile/events/sqs.test.js","with provisioned concurrency"],"updatePoint":{"line":211,"column":68,"index":8112},"line":211,"code":"  it('should not depend on default IAM role when custom role defined', async () => {\n    const {\n      awsNaming,\n      cfTemplate\n    } = await runServerless({\n      fixture: 'function',\n      configExt: {\n        provider: {\n          iam: {\n            role: {\n              'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:role/iam-role-name'\n            }\n          }\n        },\n        functions: {\n          basic: {\n            events: [{\n              sqs: {\n                arn: 'arn:aws:sqs:region:account:MyQueue'\n              }\n            }]\n          }\n        }\n      },\n      command: 'package'\n    });\n    const queueLogicalId = awsNaming.getQueueLogicalId('basic', 'MyQueue');\n    const eventSourceMappingResource = cfTemplate.Resources[queueLogicalId];\n    expect(eventSourceMappingResource.DependsOn).to.deep.equal([]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/sqs.test.js","skipped":false,"dir":"test"},{"name":"should not throw error or merge role statements if default policy is not present","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":34,"column":88,"index":1229},"line":34,"code":"    it('should not throw error or merge role statements if default policy is not present', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role is set in function","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":51,"column":68,"index":2034},"line":51,"code":"    it('should not throw error if custom IAM role is set in function', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          role: 'arn:aws:iam::account:role/foo',\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.be.instanceof(Array);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn.length).to.equal(0);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role name reference is set in function","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":71,"column":83,"index":3250},"line":71,"code":"    it('should not throw error if custom IAM role name reference is set in function', () => {\n      const roleLogicalId = 'RoleLogicalId';\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          role: roleLogicalId,\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.include(roleLogicalId);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role reference is set in function","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":91,"column":78,"index":4319},"line":91,"code":"    it('should not throw error if custom IAM role reference is set in function', () => {\n      const roleLogicalId = 'RoleLogicalId';\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          role: {\n            'Fn::GetAtt': [roleLogicalId, 'Arn']\n          },\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.include(roleLogicalId);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role is set in provider","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":113,"column":68,"index":5427},"line":113,"code":"    it('should not throw error if custom IAM role is set in provider', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      awsCompileStreamEvents.serverless.service.provider.role = 'arn:aws:iam::account:role/foo';\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.be.instanceof(Array);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn.length).to.equal(0);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if IAM role is referenced from cloudformation parameters","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":133,"column":87,"index":6695},"line":133,"code":"    it('should not throw error if IAM role is referenced from cloudformation parameters', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          role: {\n            Ref: 'MyStreamRoleArn'\n          },\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn.length).to.equal(0);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if IAM role is imported","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":154,"column":54,"index":7723},"line":154,"code":"    it('should not throw error if IAM role is imported', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          role: {\n            'Fn::ImportValue': 'ExportedRoleId'\n          },\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn.length).to.equal(0);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role reference is set in provider","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":175,"column":78,"index":8788},"line":175,"code":"    it('should not throw error if custom IAM role reference is set in provider', () => {\n      const roleLogicalId = 'RoleLogicalId';\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      awsCompileStreamEvents.serverless.service.provider.role = {\n        'Fn::GetAtt': [roleLogicalId, 'Arn']\n      };\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.include(roleLogicalId);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should not throw error if custom IAM role name reference is set in provider","suites":["AwsCompileStreamEvents","#compileStreamEvents()"],"updatePoint":{"line":197,"column":83,"index":9951},"line":197,"code":"    it('should not throw error if custom IAM role name reference is set in provider', () => {\n      const roleLogicalId = 'RoleLogicalId';\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            // doesn't matter if DynamoDB or Kinesis stream\n            stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n          }]\n        }\n      };\n\n      // pretend that the default IamRoleLambdaExecution is not in place\n      awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution = null;\n      awsCompileStreamEvents.serverless.service.provider.role = roleLogicalId;\n      expect(() => {\n        awsCompileStreamEvents.compileStreamEvents();\n      }).to.not.throw(Error);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.include(roleLogicalId);\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution).to.equal(null);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should create event source mappings when a DynamoDB stream ARN is given","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":218,"column":81,"index":11131},"line":218,"code":"      it('should create event source mappings when a DynamoDB stream ARN is given', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/foo/stream/1',\n                batchSize: 1,\n                startingPosition: 'STARTING_POSITION_ONE',\n                enabled: false\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/bar/stream/2',\n                batchWindow: 15,\n                maximumRetryAttempts: 4\n              }\n            }, {\n              stream: 'arn:aws:dynamodb:region:account:table/baz/stream/3'\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/buzz/stream/4',\n                bisectBatchOnFunctionError: true,\n                batchWindow: 0,\n                maximumRecordAgeInSeconds: 120\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/fizz/stream/5',\n                destinations: {\n                  onFailure: 'arn:aws:sns:region:account:snstopic'\n                }\n              }\n            }]\n          }\n        };\n        awsCompileStreamEvents.compileStreamEvents();\n\n        // event 1\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Properties.BatchSize).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.batchSize);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Properties.StartingPosition).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.startingPosition);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Properties.Enabled).to.equal(false);\n\n        // event 2\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[1].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.MaximumBatchingWindowInSeconds).to.equal(15);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.MaximumRetryAttempts).to.equal(4);\n\n        // event 3\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[2].stream);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.BisectBatchOnFunctionError).to.equal(undefined);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.MaximumRecordAgeInSeconds).to.equal(undefined);\n\n        // event 4\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[3].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.BisectBatchOnFunctionError).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.MaximumRecordAgeInSeconds).to.equal(120);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBuzz.Properties.MaximumBatchingWindowInSeconds).to.equal(0);\n\n        // event 5\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[4].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFizz.Properties.DestinationConfig.OnFailure.Destination).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[4].stream.destinations.onFailure);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should allow specifying DynamoDB and Kinesis streams as CFN reference types","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":303,"column":85,"index":20414},"line":303,"code":"      it('should allow specifying DynamoDB and Kinesis streams as CFN reference types', () => {\n        awsCompileStreamEvents.serverless.service.resources.Parameters = {\n          SomeDdbTableStreamArn: {\n            Type: 'String'\n          },\n          ForeignKinesisStreamArn: {\n            Type: 'String'\n          }\n        };\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: {\n                  'Fn::GetAtt': ['SomeDdbTable', 'StreamArn']\n                },\n                type: 'dynamodb'\n              }\n            }, {\n              stream: {\n                arn: {\n                  'Fn::ImportValue': 'ForeignKinesis'\n                },\n                type: 'kinesis'\n              }\n            }, {\n              stream: {\n                arn: {\n                  'Fn::Join': [':', ['arn', 'aws', 'kinesis', {\n                    Ref: 'AWS::Region'\n                  }, {\n                    Ref: 'AWS::AccountId'\n                  }, 'stream/MyStream']]\n                },\n                type: 'kinesis'\n              }\n            }, {\n              stream: {\n                arn: {\n                  Ref: 'SomeDdbTableStreamArn'\n                },\n                type: 'dynamodb'\n              }\n            }, {\n              stream: {\n                arn: {\n                  Ref: 'ForeignKinesisStreamArn'\n                },\n                type: 'kinesis'\n              }\n            }]\n          }\n        };\n        awsCompileStreamEvents.compileStreamEvents();\n\n        // dynamodb with Fn::GetAtt\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbSomeDdbTable.Properties.EventSourceArn).to.deep.equal({\n          'Fn::GetAtt': ['SomeDdbTable', 'StreamArn']\n        });\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[0]).to.deep.equal({\n          Action: ['dynamodb:GetRecords', 'dynamodb:GetShardIterator', 'dynamodb:DescribeStream', 'dynamodb:ListStreams'],\n          Effect: 'Allow',\n          Resource: [{\n            'Fn::GetAtt': ['SomeDdbTable', 'StreamArn']\n          }, {\n            Ref: 'SomeDdbTableStreamArn'\n          }]\n        });\n\n        // kinesis with Fn::ImportValue\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisForeignKinesis.Properties.EventSourceArn).to.deep.equal({\n          'Fn::ImportValue': 'ForeignKinesis'\n        });\n\n        // kinesis with Fn::Join\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisMyStream.Properties.EventSourceArn).to.deep.equal({\n          'Fn::Join': [':', ['arn', 'aws', 'kinesis', {\n            Ref: 'AWS::Region'\n          }, {\n            Ref: 'AWS::AccountId'\n          }, 'stream/MyStream']]\n        });\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[1]).to.deep.equal({\n          Effect: 'Allow',\n          Action: ['kinesis:GetRecords', 'kinesis:GetShardIterator', 'kinesis:DescribeStream', 'kinesis:ListStreams'],\n          Resource: [{\n            'Fn::ImportValue': 'ForeignKinesis'\n          }, {\n            'Fn::Join': [':', ['arn', 'aws', 'kinesis', {\n              Ref: 'AWS::Region'\n            }, {\n              Ref: 'AWS::AccountId'\n            }, 'stream/MyStream']]\n          }, {\n            Ref: 'ForeignKinesisStreamArn'\n          }]\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should allow specifying OnFailure destinations as CFN reference types","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":401,"column":79,"index":24205},"line":401,"code":"      it('should allow specifying OnFailure destinations as CFN reference types', () => {\n        awsCompileStreamEvents.serverless.service.resources.Parameters = {\n          SomeSNSArn: {\n            Type: 'String'\n          },\n          ForeignSQSArn: {\n            Type: 'String'\n          }\n        };\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/foo/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      'Fn::GetAtt': ['SomeSNS', 'Arn']\n                    },\n                    type: 'sns'\n                  }\n                }\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/bar/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      'Fn::ImportValue': 'ForeignSQS'\n                    },\n                    type: 'sqs'\n                  }\n                }\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/baz/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      'Fn::Join': [':', ['arn', 'aws', 'sqs', {\n                        Ref: 'AWS::Region'\n                      }, {\n                        Ref: 'AWS::AccountId'\n                      }, 'MyQueue']]\n                    },\n                    type: 'sqs'\n                  }\n                }\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/buzz/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      Ref: 'SomeSNSArn'\n                    },\n                    type: 'sns'\n                  }\n                }\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/fizz/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      Ref: 'ForeignSQSArn'\n                    },\n                    type: 'sqs'\n                  }\n                }\n              }\n            }]\n          }\n        };\n        awsCompileStreamEvents.compileStreamEvents();\n\n        // sns with Fn::GetAtt\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbFoo.Properties.DestinationConfig.OnFailure.Destination).to.deep.equal({\n          'Fn::GetAtt': ['SomeSNS', 'Arn']\n        });\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[1]).to.deep.equal({\n          Action: ['sns:Publish'],\n          Effect: 'Allow',\n          Resource: [{\n            'Fn::GetAtt': ['SomeSNS', 'Arn']\n          }, {\n            Ref: 'SomeSNSArn'\n          }]\n        });\n\n        // sqs with Fn::ImportValue\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBar.Properties.DestinationConfig.OnFailure.Destination).to.deep.equal({\n          'Fn::ImportValue': 'ForeignSQS'\n        });\n\n        // sqs with Fn::Join\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingDynamodbBaz.Properties.DestinationConfig.OnFailure.Destination).to.deep.equal({\n          'Fn::Join': [':', ['arn', 'aws', 'sqs', {\n            Ref: 'AWS::Region'\n          }, {\n            Ref: 'AWS::AccountId'\n          }, 'MyQueue']]\n        });\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[2]).to.deep.equal({\n          Effect: 'Allow',\n          Action: ['sqs:ListQueues', 'sqs:SendMessage'],\n          Resource: [{\n            'Fn::ImportValue': 'ForeignSQS'\n          }, {\n            'Fn::Join': [':', ['arn', 'aws', 'sqs', {\n              Ref: 'AWS::Region'\n            }, {\n              Ref: 'AWS::AccountId'\n            }, 'MyQueue']]\n          }, {\n            Ref: 'ForeignSQSArn'\n          }]\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"fails if Ref/dynamic stream ARN is used without defining it to the CF parameters","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":524,"column":90,"index":28708},"line":524,"code":"      it('fails if Ref/dynamic stream ARN is used without defining it to the CF parameters', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: {\n                  Ref: 'SomeDdbTableStreamArn'\n                }\n              }\n            }]\n          }\n        };\n        expect(() => awsCompileStreamEvents.compileStreamEvents()).to.throw(Error);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"fails if Ref/dynamic onFailure ARN is used without defining it to the CF parameters","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":538,"column":93,"index":29178},"line":538,"code":"      it('fails if Ref/dynamic onFailure ARN is used without defining it to the CF parameters', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/fizz/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      Ref: 'ForeignSQSArn'\n                    }\n                  }\n                }\n              }\n            }]\n          }\n        };\n        expect(() => awsCompileStreamEvents.compileStreamEvents()).to.throw(Error);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"fails if Fn::GetAtt/dynamic stream ARN is used without a type","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":557,"column":71,"index":29807},"line":557,"code":"      it('fails if Fn::GetAtt/dynamic stream ARN is used without a type', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: {\n                  'Fn::GetAtt': ['SomeDdbTable', 'StreamArn']\n                }\n              }\n            }]\n          }\n        };\n        expect(() => awsCompileStreamEvents.compileStreamEvents()).to.throw(Error);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"fails if Fn::GetAtt/dynamic onFailure ARN is used without a type","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":571,"column":74,"index":30273},"line":571,"code":"      it('fails if Fn::GetAtt/dynamic onFailure ARN is used without a type', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/foo/stream/1',\n                destinations: {\n                  onFailure: {\n                    arn: {\n                      'Fn::GetAtt': ['SomeSNS', 'Arn']\n                    }\n                  }\n                }\n              }\n            }]\n          }\n        };\n        expect(() => awsCompileStreamEvents.compileStreamEvents()).to.throw(Error);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should add the necessary IAM role statements","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a DynamoDB stream ARN is given"],"updatePoint":{"line":590,"column":54,"index":30896},"line":590,"code":"      it('should add the necessary IAM role statements', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: 'arn:aws:dynamodb:region:account:table/foo/stream/1'\n            }, {\n              stream: {\n                arn: 'arn:aws:dynamodb:region:account:table/bar/stream/2',\n                destinations: {\n                  onFailure: 'arn:aws:sns:region:account:snstopic'\n                }\n              }\n            }]\n          }\n        };\n        const iamRoleStatements = [{\n          Effect: 'Allow',\n          Action: ['dynamodb:GetRecords', 'dynamodb:GetShardIterator', 'dynamodb:DescribeStream', 'dynamodb:ListStreams'],\n          Resource: ['arn:aws:dynamodb:region:account:table/foo/stream/1', 'arn:aws:dynamodb:region:account:table/bar/stream/2']\n        }, {\n          Effect: 'Allow',\n          Action: ['sns:Publish'],\n          Resource: ['arn:aws:sns:region:account:snstopic']\n        }];\n        awsCompileStreamEvents.compileStreamEvents();\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement).to.deep.equal(iamRoleStatements);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should create event source mappings when a Kinesis stream ARN is given","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a Kinesis stream ARN is given"],"updatePoint":{"line":619,"column":80,"index":32262},"line":619,"code":"      it('should create event source mappings when a Kinesis stream ARN is given', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/foo',\n                batchSize: 1,\n                startingPosition: 'STARTING_POSITION_ONE',\n                enabled: false,\n                parallelizationFactor: 10\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/bar',\n                batchWindow: 15,\n                maximumRetryAttempts: 5\n              }\n            }, {\n              stream: 'arn:aws:kinesis:region:account:stream/baz'\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/buzz',\n                bisectBatchOnFunctionError: true,\n                maximumRecordAgeInSeconds: 180\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:table/fizz/stream/5',\n                destinations: {\n                  onFailure: 'arn:aws:sns:region:account:snstopic'\n                }\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/abc',\n                consumer: true,\n                startingPosition: 'AT_TIMESTAMP',\n                startingPositionTimestamp: 123\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/xyz',\n                consumer: 'arn:aws:kinesis:region:account:stream/xyz/consumer/foobar:1558544531'\n              }\n            }, {\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/def',\n                consumer: false\n              }\n            }]\n          }\n        };\n        awsCompileStreamEvents.compileStreamEvents();\n\n        // event 1\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Properties.BatchSize).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.batchSize);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Properties.StartingPosition).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.startingPosition);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Properties.ParallelizationFactor).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.parallelizationFactor);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFoo.Properties.Enabled).to.equal(false);\n\n        // event 2\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[1].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.ParallelizationFactor).to.equal(undefined);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.MaximumBatchingWindowInSeconds).to.equal(15);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBar.Properties.MaximumRetryAttempts).to.equal(5);\n\n        // event 3\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[2].stream);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.BisectBatchOnFunctionError).to.equal(undefined);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBaz.Properties.MaximumRecordAgeInSeconds).to.equal(undefined);\n\n        // event 4\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[3].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.ParallelizationFactor).to.equal(undefined);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.BisectBatchOnFunctionError).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisBuzz.Properties.MaximumRecordAgeInSeconds).to.equal(180);\n\n        // event 5\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[4].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisFizz.Properties.DestinationConfig.OnFailure.Destination).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[4].stream.destinations.onFailure);\n\n        // event 6\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.DependsOn).to.eql(['IamRoleLambdaExecution', 'FirstabcConsumerStreamConsumer']);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Properties.EventSourceArn).to.eql({\n          Ref: 'FirstabcConsumerStreamConsumer'\n        });\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Properties.StartingPosition).to.equal('AT_TIMESTAMP');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Properties.StartingPositionTimestamp).to.equal(123);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisAbc.Properties.Enabled).to.equal(true);\n\n        // event 7\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.Properties.EventSourceArn).to.equal('arn:aws:kinesis:region:account:stream/xyz/consumer/foobar:1558544531');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisXyz.Properties.Enabled).to.equal(true);\n\n        // event 8\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Type).to.equal('AWS::Lambda::EventSourceMapping');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.DependsOn).to.include('IamRoleLambdaExecution');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.EventSourceArn).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[7].stream.arn);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.BatchSize).to.equal(10);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.StartingPosition).to.equal('TRIM_HORIZON');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.Enabled).to.equal(true);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.BisectBatchOnFunctionError).to.equal(undefined);\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstEventSourceMappingKinesisDef.Properties.MaximumRecordAgeInSeconds).to.equal(undefined);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should create stream consumer when a Kinesis stream with consumer \"true\" is given","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a Kinesis stream ARN is given"],"updatePoint":{"line":752,"column":91,"index":46820},"line":752,"code":"      it('should create stream consumer when a Kinesis stream with consumer \"true\" is given', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: {\n                arn: 'arn:aws:kinesis:region:account:stream/abc',\n                consumer: true\n              }\n            }]\n          }\n        };\n        awsCompileStreamEvents.compileStreamEvents();\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstabcConsumerStreamConsumer.Type).to.equal('AWS::Kinesis::StreamConsumer');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstabcConsumerStreamConsumer.Properties.ConsumerName).to.equal('firstabcConsumer');\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstabcConsumerStreamConsumer.Properties.StreamARN).to.equal(awsCompileStreamEvents.serverless.service.functions.first.events[0].stream.arn);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should add the necessary IAM role statements","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a Kinesis stream ARN is given"],"updatePoint":{"line":768,"column":54,"index":47859},"line":768,"code":"      it('should add the necessary IAM role statements', () => {\n        awsCompileStreamEvents.serverless.service.functions = {\n          first: {\n            events: [{\n              stream: 'arn:aws:kinesis:region:account:stream/foo'\n            }, {\n              stream: 'arn:aws:kinesis:region:account:stream/bar'\n            }, {\n              stream: {\n                type: 'kinesis',\n                arn: 'arn:aws:kinesis:region:account:stream/fizz',\n                consumer: true\n              }\n            }, {\n              stream: {\n                type: 'kinesis',\n                arn: 'arn:aws:kinesis:region:account:stream/buzz',\n                consumer: 'arn:aws:kinesis:region:account:stream/buzz/consumer/abc:1558544531'\n              }\n            }]\n          }\n        };\n        const iamRoleStatements = [{\n          Effect: 'Allow',\n          Action: ['kinesis:GetRecords', 'kinesis:GetShardIterator', 'kinesis:DescribeStream', 'kinesis:ListStreams'],\n          Resource: ['arn:aws:kinesis:region:account:stream/foo', 'arn:aws:kinesis:region:account:stream/bar']\n        }, {\n          Effect: 'Allow',\n          Action: ['kinesis:GetRecords', 'kinesis:GetShardIterator', 'kinesis:DescribeStreamSummary', 'kinesis:ListShards'],\n          Resource: ['arn:aws:kinesis:region:account:stream/fizz', 'arn:aws:kinesis:region:account:stream/buzz']\n        }, {\n          Effect: 'Allow',\n          Action: ['kinesis:SubscribeToShard'],\n          Resource: [{\n            Ref: 'FirstfizzConsumerStreamConsumer'\n          }, 'arn:aws:kinesis:region:account:stream/buzz/consumer/abc:1558544531']\n        }];\n        awsCompileStreamEvents.compileStreamEvents();\n        expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement).to.deep.equal(iamRoleStatements);\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should fail to compile EventSourceMapping resource properties for startingPosition AT_TIMESTAMP with no startingPositionTimestamp","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a Kinesis stream ARN is given"],"updatePoint":{"line":808,"column":139,"index":49848},"line":808,"code":"      it('should fail to compile EventSourceMapping resource properties for startingPosition AT_TIMESTAMP with no startingPositionTimestamp', () => {\n        expect(() => {\n          awsCompileStreamEvents.serverless.service.functions = {\n            first: {\n              events: [{\n                stream: {\n                  arn: 'arn:aws:kinesis:region:account:stream/abc',\n                  consumer: true,\n                  startingPosition: 'AT_TIMESTAMP'\n                }\n              }]\n            }\n          };\n          awsCompileStreamEvents.compileStreamEvents();\n        }).to.throw('You must specify startingPositionTimestamp for function: first when startingPosition is AT_TIMESTAMP');\n      });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should remove all non-alphanumerics from stream names for the resource logical ids","suites":["AwsCompileStreamEvents","#compileStreamEvents()","when a Kinesis stream ARN is given"],"updatePoint":{"line":825,"column":90,"index":50524},"line":825,"code":"    it('should remove all non-alphanumerics from stream names for the resource logical ids', () => {\n      awsCompileStreamEvents.serverless.service.functions = {\n        first: {\n          events: [{\n            stream: 'arn:aws:kinesis:region:account:stream/some-long-name'\n          }]\n        }\n      };\n      awsCompileStreamEvents.compileStreamEvents();\n      expect(awsCompileStreamEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.have.any.keys('FirstEventSourceMappingKinesisSomelongname');\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"TODO: should support ARN String for `arn`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1013,"code":"    it.skip('TODO: should support ARN String for `arn`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::GetAtt for `arn`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1022,"code":"    it.skip('TODO: should support Fn::GetAtt for `arn`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::ImportValue for `arn`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1028,"code":"    it.skip('TODO: should support Fn::ImportValue for `arn`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::Join for `arn`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1034,"code":"    it.skip('TODO: should support Fn::Join for `arn`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Ref for `arn`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1040,"code":"    it.skip('TODO: should support Ref for `arn`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `batchSize`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1048,"code":"    it.skip('TODO: should support `batchSize`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `startingPosition`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1055,"code":"    it.skip('TODO: should support `startingPosition`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `enabled`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1062,"code":"    it.skip('TODO: should support `enabled`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `batchWindow`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1069,"code":"    it.skip('TODO: should support `batchWindow`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `maximumRetryAttempts`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1076,"code":"    it.skip('TODO: should support `maximumRetryAttempts`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `maximumRecordAgeInSeconds`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1083,"code":"    it.skip('TODO: should support `maximumRecordAgeInSeconds`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `parallelizationFactor`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1090,"code":"    it.skip('TODO: should support `parallelizationFactor`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `bisectBatchOnFunctionError`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1096,"code":"    it.skip('TODO: should support `bisectBatchOnFunctionError`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `consumer`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1102,"code":"    it.skip('TODO: should support `consumer`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support ARN string for `destinations.onFailure`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1111,"code":"    it.skip('TODO: should support ARN string for `destinations.onFailure`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::GetAtt for `destinations.onFailure`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1117,"code":"    it.skip('TODO: should support Fn::GetAtt for `destinations.onFailure`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::ImportValue for `destinations.onFailure`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1123,"code":"    it.skip('TODO: should support Fn::ImportValue for `destinations.onFailure`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Fn::Join for `destinations.onFailure`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1129,"code":"    it.skip('TODO: should support Fn::Join for `destinations.onFailure`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support Ref for `destinations.onFailure`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1135,"code":"    it.skip('TODO: should support Ref for `destinations.onFailure`', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"should support `functionResponseType`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"updatePoint":{"line":1143,"column":45,"index":65344},"line":1143,"code":"    it('should support `functionResponseType`', () => {\n      expect(eventSourceMappingResource.Properties.FunctionResponseTypes).to.include.members(['ReportBatchItemFailures']);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should support `tumblingWindowInSeconds`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"updatePoint":{"line":1146,"column":48,"index":65534},"line":1146,"code":"    it('should support `tumblingWindowInSeconds`', () => {\n      expect(eventSourceMappingResource.Properties.TumblingWindowInSeconds).to.equal(30);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should support `filterPatterns`","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"updatePoint":{"line":1149,"column":39,"index":65682},"line":1149,"code":"    it('should support `filterPatterns`', () => {\n      expect(eventSourceMappingResource.Properties.FilterCriteria).to.deep.equal({\n        Filters: [{\n          Pattern: JSON.stringify({\n            eventName: ['INSERT']\n          })\n        }, {\n          Pattern: JSON.stringify({\n            eventName: ['MODIFY']\n          })\n        }]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"TODO: should ensure necessary IAM statememnts","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","regular"],"line":1162,"code":"    it.skip('TODO: should ensure necessary IAM statememnts', () => {","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"should fail if stream `type` is not set and couldn't be assumed","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","TODO: failures"],"updatePoint":{"line":1172,"column":71,"index":66807},"line":1172,"code":"    it(\"should fail if stream `type` is not set and couldn't be assumed\", async () => {\n      // Replaces\n      // https://github.com/serverless/serverless/blob/f64f7c68abb1d6837ecaa6173f4b605cf3975acf/test/unit/lib/plugins/aws/package/compile/events/stream.test.js#L918-L932\n      // https://github.com/serverless/serverless/blob/f64f7c68abb1d6837ecaa6173f4b605cf3975acf/test/unit/lib/plugins/aws/package/compile/events/stream.test.js#L955-L969\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            basic: {\n              events: [{\n                stream: {\n                  arn: {\n                    Ref: 'SomeDdbTableStreamArn'\n                  }\n                }\n              }]\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'TODO');\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"should fail if destination `type` is not set and couldn't be assumed","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","TODO: failures"],"updatePoint":{"line":1194,"column":76,"index":67710},"line":1194,"code":"    it(\"should fail if destination `type` is not set and couldn't be assumed\", async () => {\n      // Replaces\n      // https://github.com/serverless/serverless/blob/f64f7c68abb1d6837ecaa6173f4b605cf3975acf/test/unit/lib/plugins/aws/package/compile/events/stream.test.js#L934-L953\n      // https://github.com/serverless/serverless/blob/f64f7c68abb1d6837ecaa6173f4b605cf3975acf/test/unit/lib/plugins/aws/package/compile/events/stream.test.js#L971-L990\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            basic: {\n              events: [{\n                stream: {\n                  arn: 'arn:aws:dynamodb:region:account:table/fizz/stream/1',\n                  destinations: {\n                    onFailure: {\n                      arn: {\n                        Ref: 'ForeignSQSArn'\n                      }\n                    }\n                  }\n                }\n              }]\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'TODO');\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":true,"dir":"test"},{"name":"should reference provisioned alias","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","with provisioned concurrency"],"updatePoint":{"line":1247,"column":42,"index":69520},"line":1247,"code":"    it('should reference provisioned alias', () => {\n      expect(eventSourceMappingResource.Properties.FunctionName).to.deep.equal({\n        'Fn::Join': [':', [{\n          'Fn::GetAtt': ['BasicLambdaFunction', 'Arn']\n        }, 'provisioned']]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should depend on provisioned alias","suites":["test/unit/lib/plugins/aws/package/compile/events/stream.test.js","with provisioned concurrency"],"updatePoint":{"line":1254,"column":42,"index":69783},"line":1254,"code":"    it('should depend on provisioned alias', () => {\n      const aliasLogicalId = naming.getLambdaProvisionedConcurrencyAliasLogicalId('basic');\n      expect(eventSourceMappingResource.DependsOn).to.include(aliasLogicalId);\n    });","file":"unit/lib/plugins/aws/package/compile/events/stream.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsCompileWebsocketsEvents","#constructor()"],"updatePoint":{"line":62,"column":25,"index":2549},"line":62,"code":"    it('should have hooks', () => expect(awsCompileWebsocketsEvents.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to be an instanceof AwsProvider","suites":["AwsCompileWebsocketsEvents","#constructor()"],"updatePoint":{"line":63,"column":72,"index":2689},"line":63,"code":"    it('should set the provider variable to be an instanceof AwsProvider', () => expect(awsCompileWebsocketsEvents.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should run the promise chain in order","suites":["AwsCompileWebsocketsEvents","#constructor()","\"package:compileEvents\" promise chain"],"updatePoint":{"line":68,"column":47,"index":2972},"line":68,"code":"      it('should run the promise chain in order', async () => {\n        const validateStub = sinon.stub(awsCompileWebsocketsEvents, 'validate').returns({\n          events: [{\n            functionName: 'first',\n            websocket: {\n              route: 'echo'\n            }\n          }]\n        });\n        return awsCompileWebsocketsEvents.hooks['package:compileEvents']().then(() => {\n          expect(validateStub.calledOnce).to.be.equal(true);\n          expect(compileApiStub.calledAfter(validateStub)).to.be.equal(true);\n          expect(compileIntegrationsStub.calledAfter(compileApiStub)).to.be.equal(true);\n          expect(compileAuthorizersStub.calledAfter(compileIntegrationsStub)).to.be.equal(true);\n          expect(compilePermissionsStub.calledAfter(compileAuthorizersStub)).to.be.equal(true);\n          expect(compileRoutesStub.calledAfter(compilePermissionsStub)).to.be.equal(true);\n          expect(compileStageStub.calledAfter(compileRoutesStub)).to.be.equal(true);\n          expect(compileDeploymentStub.calledAfter(compileStageStub)).to.be.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no functions are given","suites":["AwsCompileWebsocketsEvents","#constructor()","\"package:compileEvents\" promise chain"],"updatePoint":{"line":89,"column":48,"index":4079},"line":89,"code":"    it('should resolve if no functions are given', () => {\n      awsCompileWebsocketsEvents.serverless.service.functions = {};\n      return awsCompileWebsocketsEvents.hooks['package:compileEvents']();\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should create a websocket api resource","suites":["test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","regular configuration"],"updatePoint":{"line":122,"column":46,"index":4944},"line":122,"code":"    it('should create a websocket api resource', () => {\n      const websocketsApiName = awsNaming.getWebsocketsApiName();\n      expect(cfTemplate.Resources.WebsocketsApi).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Api',\n        Properties: {\n          Name: websocketsApiName,\n          RouteSelectionExpression: '$request.body.action',\n          Description: 'Serverless Websockets',\n          ProtocolType: 'WEBSOCKET'\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should configure expected IAM","suites":["test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","regular configuration"],"updatePoint":{"line":134,"column":37,"index":5392},"line":134,"code":"    it('should configure expected IAM', () => {\n      const id = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources[id].Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n        Effect: 'Allow',\n        Action: ['execute-api:ManageConnections'],\n        Resource: [{\n          'Fn::Sub': 'arn:${AWS::Partition}:execute-api:*:*:*/@connections/*'\n        }]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should create a websocket api resource with tags","suites":["test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","regular configuration with tags"],"updatePoint":{"line":177,"column":56,"index":6516},"line":177,"code":"    it('should create a websocket api resource with tags', () => {\n      const websocketsApiName = awsNaming.getWebsocketsApiName();\n      expect(cfTemplate.Resources.WebsocketsApi).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Api',\n        Properties: {\n          Name: websocketsApiName,\n          RouteSelectionExpression: '$request.body.action',\n          Description: 'Serverless Websockets',\n          ProtocolType: 'WEBSOCKET',\n          Tags: {\n            tag: 'bar'\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should not create a websocket api resource","suites":["test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","external websocket API"],"updatePoint":{"line":222,"column":50,"index":7700},"line":222,"code":"    it('should not create a websocket api resource', () => {\n      expect(cfTemplate.Resources.WebsocketsApi).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should not configure IAM policies with custom roles","suites":["test/unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","external websocket API"],"updatePoint":{"line":225,"column":59,"index":7848},"line":225,"code":"    it('should not configure IAM policies with custom roles', () => {\n      const id = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources[id]).to.equal(undefined);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/index.test.js","skipped":false,"dir":"test"},{"name":"should create an authorizer resource","suites":["#compileAuthorizers()","for routes with authorizer definition"],"updatePoint":{"line":44,"column":44,"index":1699},"line":44,"code":"    it('should create an authorizer resource', () => {\n      awsCompileWebsocketsEvents.compileAuthorizers();\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources).to.deep.equal({\n        AuthWebsocketsAuthorizer: {\n          DependsOn: undefined,\n          Type: 'AWS::ApiGatewayV2::Authorizer',\n          Properties: {\n            ApiId: {\n              Ref: 'WebsocketsApi'\n            },\n            Name: 'auth',\n            AuthorizerType: 'REQUEST',\n            AuthorizerUri: {\n              'Fn::Join': ['', ['arn:', {\n                Ref: 'AWS::Partition'\n              }, ':apigateway:', {\n                Ref: 'AWS::Region'\n              }, ':lambda:path/2015-03-31/functions/', {\n                'Fn::GetAtt': ['AuthLambdaFunction', 'Arn']\n              }, '/invocations']]\n            },\n            IdentitySource: ['route.request.header.Auth']\n          }\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should use existing Api if there is predefined websocketApi config","suites":["#compileAuthorizers()","for routes with authorizer definition"],"updatePoint":{"line":71,"column":74,"index":2720},"line":71,"code":"    it('should use existing Api if there is predefined websocketApi config', () => {\n      awsCompileWebsocketsEvents.serverless.service.provider.apiGateway = {\n        websocketApiId: '5ezys3sght'\n      };\n      awsCompileWebsocketsEvents.compileAuthorizers();\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources.AuthWebsocketsAuthorizer.Properties).to.contain({\n        ApiId: '5ezys3sght'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should NOT create an authorizer resource for routes with not authorizer definition","suites":["#compileAuthorizers()","for routes without authorizer definition"],"updatePoint":{"line":101,"column":90,"index":3954},"line":101,"code":"    it('should NOT create an authorizer resource for routes with not authorizer definition', () => {\n      awsCompileWebsocketsEvents.validated = {\n        events: [{\n          functionName: 'First',\n          route: '$connect'\n        }]\n      };\n      awsCompileWebsocketsEvents.compileAuthorizers();\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/authorizers.test.js","skipped":false,"dir":"test"},{"name":"should create a deployment resource and output","suites":["#compileDeployment()"],"updatePoint":{"line":26,"column":52,"index":1057},"line":26,"code":"  it('should create a deployment resource and output', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileDeployment();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    const outputs = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Outputs;\n    const deploymentLogicalId = Object.keys(resources)[0];\n    expect(deploymentLogicalId).to.match(/WebsocketsDeployment/);\n    expect(resources[deploymentLogicalId]).to.deep.equal({\n      Type: 'AWS::ApiGatewayV2::Deployment',\n      DependsOn: ['SconnectWebsocketsRoute', 'SdisconnectWebsocketsRoute'],\n      Properties: {\n        ApiId: {\n          Ref: 'WebsocketsApi'\n        },\n        Description: 'Serverless Websockets'\n      }\n    });\n    expect(outputs).to.deep.equal({\n      ServiceEndpointWebsocket: {\n        Description: 'URL of the service endpoint',\n        Value: {\n          'Fn::Join': ['', ['wss://', {\n            Ref: 'WebsocketsApi'\n          }, '.execute-api.', {\n            Ref: 'AWS::Region'\n          }, '.', {\n            Ref: 'AWS::URLSuffix'\n          }, '/dev']]\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should create a deployment resource with stage reference if websocketApiId is specified","suites":["#compileDeployment()"],"updatePoint":{"line":66,"column":93,"index":2482},"line":66,"code":"  it('should create a deployment resource with stage reference if websocketApiId is specified', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    awsCompileWebsocketsEvents.serverless.service.provider.apiGateway = {\n      websocketApiId: 'xyz123abc'\n    };\n    awsCompileWebsocketsEvents.compileDeployment();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    const deploymentLogicalId = Object.keys(resources)[0];\n    expect(deploymentLogicalId).to.match(/WebsocketsDeployment/);\n    expect(resources[deploymentLogicalId]).to.deep.equal({\n      Type: 'AWS::ApiGatewayV2::Deployment',\n      DependsOn: ['SconnectWebsocketsRoute', 'SdisconnectWebsocketsRoute'],\n      Properties: {\n        ApiId: 'xyz123abc',\n        StageName: awsCompileWebsocketsEvents.provider.getStage(),\n        Description: 'Serverless Websockets'\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should add deployment logical id to stage if no websocketApiId specified","suites":["#compileDeployment()"],"updatePoint":{"line":93,"column":78,"index":3551},"line":93,"code":"  it('should add deployment logical id to stage if no websocketApiId specified', async () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    return awsCompileWebsocketsEvents.compileStage().then(() => {\n      awsCompileWebsocketsEvents.compileDeployment();\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources.WebsocketsDeploymentStage.Properties.DeploymentId).to.deep.equal({\n        Ref: awsCompileWebsocketsEvents.websocketsDeploymentLogicalId\n      });\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/deployment.test.js","skipped":false,"dir":"test"},{"name":"should create an integration resource for every event","suites":["#compileIntegrations()"],"updatePoint":{"line":25,"column":59,"index":1041},"line":25,"code":"  it('should create an integration resource for every event', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileIntegrations();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      FirstWebsocketsIntegration: {\n        Type: 'AWS::ApiGatewayV2::Integration',\n        DependsOn: undefined,\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          IntegrationType: 'AWS_PROXY',\n          IntegrationUri: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':apigateway:', {\n              Ref: 'AWS::Region'\n            }, ':lambda:path/2015-03-31/functions/', {\n              'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n            }, '/invocations']]\n          }\n        }\n      },\n      SecondWebsocketsIntegration: {\n        Type: 'AWS::ApiGatewayV2::Integration',\n        DependsOn: undefined,\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          IntegrationType: 'AWS_PROXY',\n          IntegrationUri: {\n            'Fn::Join': ['', ['arn:', {\n              Ref: 'AWS::Partition'\n            }, ':apigateway:', {\n              Ref: 'AWS::Region'\n            }, ':lambda:path/2015-03-31/functions/', {\n              'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n            }, '/invocations']]\n          }\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/integrations.test.js","skipped":false,"dir":"test"},{"name":"should create a permission resource for every event","suites":["#compilePermissions()"],"updatePoint":{"line":26,"column":57,"index":1054},"line":26,"code":"  it('should create a permission resource for every event', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    awsCompileWebsocketsEvents.compilePermissions();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      FirstLambdaPermissionWebsockets: {\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: ['WebsocketsApi', 'FirstLambdaFunction'],\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com'\n        }\n      },\n      SecondLambdaPermissionWebsockets: {\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: ['WebsocketsApi', 'SecondLambdaFunction'],\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': ['SecondLambdaFunction', 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com'\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"should create a permission resource for authorizer function","suites":["#compilePermissions()"],"updatePoint":{"line":63,"column":65,"index":2305},"line":63,"code":"  it('should create a permission resource for authorizer function', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect',\n        authorizer: {\n          name: 'auth',\n          permission: 'AuthLambdaFunction'\n        }\n      }]\n    };\n    awsCompileWebsocketsEvents.compilePermissions();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      FirstLambdaPermissionWebsockets: {\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: ['WebsocketsApi', 'FirstLambdaFunction'],\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': ['FirstLambdaFunction', 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com'\n        }\n      },\n      AuthLambdaPermissionWebsockets: {\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: ['WebsocketsApi', 'AuthLambdaFunction'],\n        Properties: {\n          FunctionName: {\n            'Fn::GetAtt': ['AuthLambdaFunction', 'Arn']\n          },\n          Action: 'lambda:InvokeFunction',\n          Principal: 'apigateway.amazonaws.com'\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/permissions.test.js","skipped":false,"dir":"test"},{"name":"picks resources from a CloudFormation template related to WebsocketsApi","suites":["#pickWebsocketsTemplatePart"],"updatePoint":{"line":6,"column":77,"index":341},"line":6,"code":"  it('picks resources from a CloudFormation template related to WebsocketsApi', () => {\n    const initialCloudFormationTemplate = {\n      Resources: {\n        ConnectLambdaFunction: {\n          Type: 'AWS::Lambda::Function'\n        },\n        ConnectLambdaVersionvrs0fircL2xSCvlNyt7PIt2ARu2EKctxNJziUZEeHs: {\n          Type: 'AWS::Lambda::Version',\n          DeletionPolicy: 'Retain'\n        },\n        WebsocketsApi: {\n          Type: 'AWS::ApiGatewayV2::Api',\n          Properties: {\n            ProtocolType: 'WEBSOCKET'\n          }\n        },\n        DefaultLambdaPermissionWebsockets: {\n          Type: 'AWS::Lambda::Permission',\n          DependsOn: ['WebsocketsApi']\n        },\n        SconnectWebsocketsRoute: {\n          Type: 'AWS::ApiGatewayV2::Route',\n          Properties: {\n            ApiId: {\n              Ref: 'WebsocketsApi'\n            },\n            RouteKey: '$connect'\n          }\n        }\n      }\n    };\n    const expectedTemplatePart = {\n      WebsocketsApi: {\n        Type: 'AWS::ApiGatewayV2::Api',\n        Properties: {\n          ProtocolType: 'WEBSOCKET'\n        }\n      },\n      DefaultLambdaPermissionWebsockets: {\n        Type: 'AWS::Lambda::Permission',\n        DependsOn: ['WebsocketsApi']\n      },\n      SconnectWebsocketsRoute: {\n        Type: 'AWS::ApiGatewayV2::Route',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteKey: '$connect'\n        }\n      }\n    };\n    expect(pickWebsocketsTemplatePart(initialCloudFormationTemplate, 'WebsocketsApi')).to.deep.equal(expectedTemplatePart);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/pick-websockets-template-part.test.js","skipped":false,"dir":"test"},{"name":"should create a RouteResponse resource for events with selection expression","suites":["#compileRouteResponses()"],"updatePoint":{"line":21,"column":81,"index":987},"line":21,"code":"  it('should create a RouteResponse resource for events with selection expression', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect',\n        routeResponseSelectionExpression: '$default'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileRouteResponses();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      SconnectWebsocketsRouteResponse: {\n        Type: 'AWS::ApiGatewayV2::RouteResponse',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteId: {\n            Ref: 'SconnectWebsocketsRoute'\n          },\n          RouteResponseKey: '$default'\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/route-responses.test.js","skipped":false,"dir":"test"},{"name":"should NOT create a RouteResponse for events without selection expression","suites":["#compileRouteResponses()"],"updatePoint":{"line":46,"column":79,"index":1805},"line":46,"code":"  it('should NOT create a RouteResponse for events without selection expression', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileRouteResponses();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({});\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/route-responses.test.js","skipped":false,"dir":"test"},{"name":"should create a route resource for every event","suites":["#compileRoutes()"],"updatePoint":{"line":21,"column":52,"index":950},"line":21,"code":"  it('should create a route resource for every event', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect'\n      }, {\n        functionName: 'Second',\n        route: '$disconnect'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileRoutes();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      SconnectWebsocketsRoute: {\n        Type: 'AWS::ApiGatewayV2::Route',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteKey: '$connect',\n          AuthorizationType: 'NONE',\n          Target: {\n            'Fn::Join': ['/', ['integrations', {\n              Ref: 'FirstWebsocketsIntegration'\n            }]]\n          }\n        }\n      },\n      SdisconnectWebsocketsRoute: {\n        Type: 'AWS::ApiGatewayV2::Route',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteKey: '$disconnect',\n          AuthorizationType: 'NONE',\n          Target: {\n            'Fn::Join': ['/', ['integrations', {\n              Ref: 'SecondWebsocketsIntegration'\n            }]]\n          }\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/routes.test.js","skipped":false,"dir":"test"},{"name":"should set routeResponseSelectionExpression when configured","suites":["#compileRoutes()"],"updatePoint":{"line":66,"column":65,"index":2248},"line":66,"code":"  it('should set routeResponseSelectionExpression when configured', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect',\n        routeResponseSelectionExpression: '$default'\n      }]\n    };\n    awsCompileWebsocketsEvents.compileRoutes();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      SconnectWebsocketsRoute: {\n        Type: 'AWS::ApiGatewayV2::Route',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteKey: '$connect',\n          AuthorizationType: 'NONE',\n          RouteResponseSelectionExpression: '$default',\n          Target: {\n            'Fn::Join': ['/', ['integrations', {\n              Ref: 'FirstWebsocketsIntegration'\n            }]]\n          }\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/routes.test.js","skipped":false,"dir":"test"},{"name":"should set authorizer property for the connect route","suites":["#compileRoutes()"],"updatePoint":{"line":95,"column":58,"index":3175},"line":95,"code":"  it('should set authorizer property for the connect route', () => {\n    awsCompileWebsocketsEvents.validated = {\n      events: [{\n        functionName: 'First',\n        route: '$connect',\n        authorizer: {\n          name: 'auth'\n        }\n      }]\n    };\n    awsCompileWebsocketsEvents.compileRoutes();\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    expect(resources).to.deep.equal({\n      SconnectWebsocketsRoute: {\n        Type: 'AWS::ApiGatewayV2::Route',\n        Properties: {\n          ApiId: {\n            Ref: 'WebsocketsApi'\n          },\n          RouteKey: '$connect',\n          AuthorizationType: 'CUSTOM',\n          AuthorizerId: {\n            Ref: awsCompileWebsocketsEvents.provider.naming.getWebsocketsAuthorizerLogicalId('auth')\n          },\n          Target: {\n            'Fn::Join': ['/', ['integrations', {\n              Ref: 'FirstWebsocketsIntegration'\n            }]]\n          }\n        }\n      }\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/routes.test.js","skipped":false,"dir":"test"},{"name":"should create a stage resource if no websocketApiId specified","suites":["#compileStage()"],"updatePoint":{"line":44,"column":67,"index":1818},"line":44,"code":"  it('should create a stage resource if no websocketApiId specified', async () => awsCompileWebsocketsEvents.compileStage().then(() => {\n    const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n    const resourceKeys = Object.keys(resources);\n    expect(resourceKeys[0]).to.equal(stageLogicalId);\n    expect(resources.WebsocketsDeploymentStage.Type).to.equal('AWS::ApiGatewayV2::Stage');\n    expect(resources.WebsocketsDeploymentStage.Properties.ApiId).to.deep.equal({\n      Ref: awsCompileWebsocketsEvents.websocketsApiLogicalId\n    });\n    expect(resources.WebsocketsDeploymentStage.Properties.StageName).to.equal('dev');\n    expect(resources.WebsocketsDeploymentStage.Properties.Description).to.equal('Serverless Websockets');\n  }));","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should not create a stage resource if a websocketApiId is specified","suites":["#compileStage()"],"updatePoint":{"line":55,"column":73,"index":2623},"line":55,"code":"  it('should not create a stage resource if a websocketApiId is specified', async () => {\n    awsCompileWebsocketsEvents.serverless.service.provider.apiGateway = {\n      websocketApiId: 'xyz123abc'\n    };\n    return awsCompileWebsocketsEvents.compileStage().then(() => {\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      const resourceKeys = Object.keys(resources);\n      expect(resourceKeys.length).to.equal(0);\n    });\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should create a dedicated stage resource if logs are configured","suites":["#compileStage()","logs"],"updatePoint":{"line":74,"column":71,"index":3429},"line":74,"code":"    it('should create a dedicated stage resource if logs are configured', async () => awsCompileWebsocketsEvents.compileStage().then(() => {\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources[stageLogicalId]).to.deep.equal({\n        Type: 'AWS::ApiGatewayV2::Stage',\n        Properties: {\n          ApiId: {\n            Ref: awsCompileWebsocketsEvents.websocketsApiLogicalId\n          },\n          StageName: 'dev',\n          Description: 'Serverless Websockets',\n          AccessLogSettings: {\n            DestinationArn: {\n              'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WebsocketsLogGroup}'\n            },\n            Format: ['$context.identity.sourceIp', '$context.identity.caller', '$context.identity.user', '[$context.requestTime]', '\"$context.eventType $context.routeKey $context.connectionId\"', '$context.requestId'].join(' ')\n          },\n          DefaultRouteSettings: {\n            DataTraceEnabled: true,\n            LoggingLevel: 'INFO'\n          }\n        }\n      });\n    }));","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should create a Log Group resource","suites":["#compileStage()","logs"],"updatePoint":{"line":97,"column":42,"index":4536},"line":97,"code":"    it('should create a Log Group resource', async () => awsCompileWebsocketsEvents.compileStage().then(() => {\n      const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n      expect(resources[logGroupLogicalId]).to.deep.equal({\n        Type: 'AWS::Logs::LogGroup',\n        Properties: {\n          LogGroupName: '/aws/websocket/my-service-dev'\n        }\n      });\n    }));","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set a RetentionInDays in a Log Group if provider has logRetentionInDays","suites":["#compileStage()","logs"],"updatePoint":{"line":106,"column":86,"index":5016},"line":106,"code":"    it('should set a RetentionInDays in a Log Group if provider has logRetentionInDays', async () => {\n      awsCompileWebsocketsEvents.serverless.service.provider.logRetentionInDays = 42;\n      return awsCompileWebsocketsEvents.compileStage().then(() => {\n        const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(resources[logGroupLogicalId]).to.deep.equal({\n          Type: 'AWS::Logs::LogGroup',\n          Properties: {\n            LogGroupName: '/aws/websocket/my-service-dev',\n            RetentionInDays: 42\n          }\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should use valid logging level","suites":["#compileStage()","logs"],"updatePoint":{"line":119,"column":38,"index":5605},"line":119,"code":"    it('should use valid logging level', async () => {\n      awsCompileWebsocketsEvents.serverless.service.provider.logs = {\n        websocket: {\n          level: 'ERROR'\n        }\n      };\n      return awsCompileWebsocketsEvents.compileStage().then(() => {\n        const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(resources[stageLogicalId].Properties.DefaultRouteSettings.LoggingLevel).equal('ERROR');\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should reject invalid logging level","suites":["#compileStage()","logs"],"updatePoint":{"line":130,"column":43,"index":6112},"line":130,"code":"    it('should reject invalid logging level', () => {\n      awsCompileWebsocketsEvents.serverless.service.provider.logs = {\n        websocket: {\n          level: 'FOOBAR'\n        }\n      };\n      expect(awsCompileWebsocketsEvents.compileStage()).to.be.rejectedWith('invalid value');\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should ensure ClousWatch role custom resource","suites":["#compileStage()","logs"],"updatePoint":{"line":138,"column":53,"index":6413},"line":138,"code":"    it('should ensure ClousWatch role custom resource', async () => {\n      return awsCompileWebsocketsEvents.compileStage().then(() => {\n        const resources = awsCompileWebsocketsEvents.serverless.service.provider.compiledCloudFormationTemplate.Resources;\n        expect(_.isObject(resources[awsCompileWebsocketsEvents.provider.naming.getCustomResourceApiGatewayAccountCloudWatchRoleResourceLogicalId()])).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set a specific log Format if provider has format option","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with several custom options"],"updatePoint":{"line":171,"column":70,"index":7660},"line":171,"code":"    it('should set a specific log Format if provider has format option', async () => {\n      expect(resource.Properties.AccessLogSettings.Format).to.equal(customLogFormat);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set DataTraceEnabled if provider has fullExecutionData option","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with several custom options"],"updatePoint":{"line":174,"column":76,"index":7847},"line":174,"code":"    it('should set DataTraceEnabled if provider has fullExecutionData option', async () => {\n      expect(resource.Properties.DefaultRouteSettings.DataTraceEnabled).to.equal(false);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set LoggingLevel if provider has level option","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with several custom options"],"updatePoint":{"line":177,"column":60,"index":8021},"line":177,"code":"    it('should set LoggingLevel if provider has level option', async () => {\n      expect(resource.Properties.DefaultRouteSettings.LoggingLevel).to.equal('ERROR');\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set accessLogging true as default value","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with several custom options"],"updatePoint":{"line":180,"column":54,"index":8187},"line":180,"code":"    it('should set accessLogging true as default value', async () => {\n      expect(resource.Properties.AccessLogSettings.DestinationArn).to.deep.equal({\n        'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WebsocketsLogGroup}'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set executionLogging true as default value","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with several custom options"],"updatePoint":{"line":185,"column":57,"index":8475},"line":185,"code":"    it('should set executionLogging true as default value', async () => {\n      expect(resource.Properties.DefaultRouteSettings.LoggingLevel).to.not.equal('OFF');\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set accessLogging off","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with full custom options"],"updatePoint":{"line":224,"column":36,"index":9723},"line":224,"code":"    it('should set accessLogging off', async () => {\n      expect(resource.Properties.AccessLogSettings).to.be.undefined;\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set executionLogging off","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with full custom options"],"updatePoint":{"line":227,"column":39,"index":9856},"line":227,"code":"    it('should set executionLogging off', async () => {\n      expect(resource.Properties.DefaultRouteSettings.LoggingLevel).to.equal('OFF');\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set fullExecutionData true","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with full custom options"],"updatePoint":{"line":230,"column":41,"index":10007},"line":230,"code":"    it('should set fullExecutionData true', async () => {\n      expect(resource.Properties.DefaultRouteSettings.DataTraceEnabled).to.equal(true);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should set DataProtectionPolicy","suites":["lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","logs with full custom options"],"updatePoint":{"line":233,"column":39,"index":10159},"line":233,"code":"    it('should set DataProtectionPolicy', () => {\n      expect(logGroupResource.Properties.DataProtectionPolicy).to.deep.equal(logDataProtectionPolicy);\n    });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/stage.test.js","skipped":false,"dir":"test"},{"name":"should support the simplified string syntax","suites":["#validate()"],"updatePoint":{"line":23,"column":49,"index":907},"line":23,"code":"  it('should support the simplified string syntax', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          websocket: '$connect'\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect'\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should support the extended object syntax","suites":["#validate()"],"updatePoint":{"line":37,"column":47,"index":1296},"line":37,"code":"  it('should support the extended object syntax', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect'\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add authorizer config when authorizer is specified as a string","suites":["#validate()"],"updatePoint":{"line":53,"column":75,"index":1746},"line":53,"code":"  it('should add authorizer config when authorizer is specified as a string', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      auth: {\n        events: []\n      },\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect',\n            authorizer: 'auth'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect',\n      authorizer: {\n        name: 'auth',\n        uri: {\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':apigateway:', {\n            Ref: 'AWS::Region'\n          }, ':lambda:path/2015-03-31/functions/', {\n            'Fn::GetAtt': ['AuthLambdaFunction', 'Arn']\n          }, '/invocations']]\n        },\n        identitySource: ['route.request.header.Auth'],\n        permission: 'AuthLambdaFunction'\n      }\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add authorizer config when authorizer is specified as a string with arn","suites":["#validate()"],"updatePoint":{"line":87,"column":84,"index":2725},"line":87,"code":"  it('should add authorizer config when authorizer is specified as a string with arn', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect',\n            authorizer: 'arn:aws:auth'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect',\n      authorizer: {\n        name: 'auth',\n        uri: {\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':apigateway:', {\n            Ref: 'AWS::Region'\n          }, ':lambda:path/2015-03-31/functions/', 'arn:aws:auth', '/invocations']]\n        },\n        identitySource: ['route.request.header.Auth'],\n        permission: 'arn:aws:auth'\n      }\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add authorizer config when authorizer is specified as an object","suites":["#validate()"],"updatePoint":{"line":116,"column":76,"index":3601},"line":116,"code":"  it('should add authorizer config when authorizer is specified as an object', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      auth: {\n        events: []\n      },\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect',\n            authorizer: {\n              name: 'auth',\n              identitySource: ['route.request.header.Auth', 'route.request.querystring.Auth']\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect',\n      authorizer: {\n        name: 'auth',\n        uri: {\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':apigateway:', {\n            Ref: 'AWS::Region'\n          }, ':lambda:path/2015-03-31/functions/', {\n            'Fn::GetAtt': ['AuthLambdaFunction', 'Arn']\n          }, '/invocations']]\n        },\n        identitySource: ['route.request.header.Auth', 'route.request.querystring.Auth'],\n        permission: 'AuthLambdaFunction'\n      }\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add authorizer config when authorizer is specified as an object with arn","suites":["#validate()"],"updatePoint":{"line":153,"column":85,"index":4746},"line":153,"code":"  it('should add authorizer config when authorizer is specified as an object with arn', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect',\n            authorizer: {\n              arn: 'arn:aws:auth',\n              identitySource: ['route.request.header.Auth', 'route.request.querystring.Auth']\n            }\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect',\n      authorizer: {\n        name: 'auth',\n        uri: {\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':apigateway:', {\n            Ref: 'AWS::Region'\n          }, ':lambda:path/2015-03-31/functions/', 'arn:aws:auth', '/invocations']]\n        },\n        identitySource: ['route.request.header.Auth', 'route.request.querystring.Auth'],\n        permission: 'arn:aws:auth'\n      }\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should add routeResponse when routeResponseSelectionExpression is configured","suites":["#validate()"],"updatePoint":{"line":185,"column":82,"index":5792},"line":185,"code":"  it('should add routeResponse when routeResponseSelectionExpression is configured', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          websocket: {\n            route: '$connect',\n            routeResponseSelectionExpression: '$default'\n          }\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.deep.equal([{\n      functionName: 'first',\n      route: '$connect',\n      routeResponseSelectionExpression: '$default'\n    }]);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should ignore non-websocket events","suites":["#validate()"],"updatePoint":{"line":203,"column":40,"index":6317},"line":203,"code":"  it('should ignore non-websocket events', () => {\n    awsCompileWebsocketsEvents.serverless.service.functions = {\n      first: {\n        events: [{\n          ignored: {}\n        }]\n      }\n    };\n    const validated = awsCompileWebsocketsEvents.validate();\n    expect(validated.events).to.be.an('Array').with.length(0);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should use provided authorizer name when name field is supplied","suites":["#validate() using runServerless util"],"updatePoint":{"line":216,"column":69,"index":6734},"line":216,"code":"  it('should use provided authorizer name when name field is supplied', async () => {\n    const nameField = 'authName';\n    const {\n      cfTemplate,\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      configExt: {\n        functions: {\n          [nameField]: {\n            handler: 'index.handler'\n          },\n          first: {\n            handler: 'index.handler',\n            events: [{\n              websocket: {\n                route: '$connect',\n                authorizer: {\n                  name: nameField,\n                  arn: {\n                    'Fn::Join': [':', ['arn', 'arnName']]\n                  }\n                }\n              }\n            }]\n          }\n        }\n      },\n      command: 'package'\n    });\n    const cfResources = cfTemplate.Resources;\n    const naming = awsNaming;\n    expect(cfResources[naming.getWebsocketsAuthorizerLogicalId(nameField)]).to.exist;\n    expect(cfResources[naming.getWebsocketsAuthorizerLogicalId(nameField)].Properties.Name).to.deep.equal(nameField);\n  });","file":"unit/lib/plugins/aws/package/compile/events/websockets/lib/validate.test.js","skipped":false,"dir":"test"},{"name":"should download the file and replace the artifact path for function packages","suites":["AwsCompileFunctions","#downloadPackageArtifacts()"],"updatePoint":{"line":81,"column":84,"index":3306},"line":81,"code":"    it('should download the file and replace the artifact path for function packages', async () => {\n      awsCompileFunctions.serverless.service.package.individually = true;\n      awsCompileFunctions.serverless.service.functions[functionName].package.artifact = `https://s3.amazonaws.com/${s3BucketName}/${s3ArtifactName}`;\n      return expect(awsCompileFunctions.downloadPackageArtifacts()).to.be.fulfilled.then(() => {\n        const artifactFileName = awsCompileFunctions.serverless.service.functions[functionName].package.artifact.split(path.sep).pop();\n        expect(requestStub.callCount).to.equal(1);\n        expect(artifactFileName).to.equal(s3ArtifactName);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should download the file and replace the artifact path for service-wide packages","suites":["AwsCompileFunctions","#downloadPackageArtifacts()"],"updatePoint":{"line":90,"column":88,"index":3996},"line":90,"code":"    it('should download the file and replace the artifact path for service-wide packages', async () => {\n      awsCompileFunctions.serverless.service.package.individually = false;\n      awsCompileFunctions.serverless.service.functions[functionName].package.artifact = false;\n      awsCompileFunctions.serverless.service.package.artifact = `https://s3.amazonaws.com/${s3BucketName}/${s3ArtifactName}`;\n      return expect(awsCompileFunctions.downloadPackageArtifacts()).to.be.fulfilled.then(() => {\n        const artifactFileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n        expect(requestStub.callCount).to.equal(1);\n        expect(artifactFileName).to.equal(s3ArtifactName);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should not access AWS.S3 if URL is not an S3 URl","suites":["AwsCompileFunctions","#downloadPackageArtifacts()"],"updatePoint":{"line":100,"column":56,"index":4702},"line":100,"code":"    it('should not access AWS.S3 if URL is not an S3 URl', async () => {\n      AWS.S3.restore();\n      const myRequestStub = sinon.stub(AWS, 'S3').returns({\n        getObject: () => {\n          throw new Error('should not be invoked');\n        }\n      });\n      awsCompileFunctions.serverless.service.functions[functionName].package.artifact = 'https://s33amazonaws.com/this/that';\n      return expect(awsCompileFunctions.downloadPackageArtifacts()).to.be.fulfilled.then(() => {\n        expect(myRequestStub.callCount).to.equal(1);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should use function artifact if individually","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":114,"column":52,"index":5296},"line":114,"code":"    it('should use function artifact if individually', async () => {\n      awsCompileFunctions.serverless.service.package.individually = true;\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        const functionResource = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources[compiledFunctionName];\n        const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n        const s3FileName = awsCompileFunctions.serverless.service.functions[functionName].package.artifact.split(path.sep).pop();\n        expect(functionResource.Properties.Code.S3Key).to.deep.equal(`${s3Folder}/${s3FileName}`);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should add an ARN function role","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":123,"column":39,"index":6002},"line":123,"code":"    it('should add an ARN function role', async () => {\n      awsCompileFunctions.serverless.service.provider.name = 'aws';\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          role: 'arn:aws:xxx:*:*'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.DependsOn).to.deep.equal(['FuncLogGroup']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Role).to.deep.equal(awsCompileFunctions.serverless.service.functions.func.role);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should honour provider.iam.role option when set","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":137,"column":55,"index":6843},"line":137,"code":"    it('should honour provider.iam.role option when set', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          disabledDeprecations: ['PROVIDER_IAM_SETTINGS_V3'],\n          provider: {\n            role: 'role-a',\n            iam: {\n              role: 'role-b'\n            }\n          }\n        },\n        command: 'package'\n      });\n      expect(cfTemplate.Resources.BasicLambdaFunction.Properties.Role).to.eql({\n        'Fn::GetAtt': ['role-b', 'Arn']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should add a logical role name function role","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":157,"column":52,"index":7399},"line":157,"code":"    it('should add a logical role name function role', async () => {\n      awsCompileFunctions.serverless.service.provider.name = 'aws';\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          role: 'LogicalRoleName'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.DependsOn).to.deep.equal(['FuncLogGroup', 'LogicalRoleName']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Role).to.deep.equal({\n          'Fn::GetAtt': [awsCompileFunctions.serverless.service.functions.func.role, 'Arn']\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should add a \"Fn::GetAtt\" Object function role","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":173,"column":54,"index":8303},"line":173,"code":"    it('should add a \"Fn::GetAtt\" Object function role', async () => {\n      awsCompileFunctions.serverless.service.provider.name = 'aws';\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          role: {\n            'Fn::GetAtt': ['LogicalRoleName', 'Arn']\n          }\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.DependsOn).to.deep.equal(['FuncLogGroup', 'LogicalRoleName']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Role).to.deep.equal(awsCompileFunctions.serverless.service.functions.func.role);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should add a \"Fn::ImportValue\" Object function role","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":189,"column":59,"index":9216},"line":189,"code":"    it('should add a \"Fn::ImportValue\" Object function role', async () => {\n      awsCompileFunctions.serverless.service.provider.name = 'aws';\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          role: {\n            'Fn::ImportValue': 'Foo'\n          }\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.DependsOn).to.deep.equal(['FuncLogGroup']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Role).to.deep.equal(awsCompileFunctions.serverless.service.functions.func.role);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should add function declared roles","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":205,"column":42,"index":10077},"line":205,"code":"    it('should add function declared roles', async () => {\n      awsCompileFunctions.serverless.service.provider.name = 'aws';\n      awsCompileFunctions.serverless.service.functions = {\n        func0: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func0',\n          role: 'arn:aws:xx0:*:*'\n        },\n        func1: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func1',\n          role: 'arn:aws:xx1:*:*'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.Func0LambdaFunction.DependsOn).to.deep.equal(['Func0LogGroup']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.Func0LambdaFunction.Properties.Role).to.deep.equal(awsCompileFunctions.serverless.service.functions.func0.role);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.Func1LambdaFunction.DependsOn).to.deep.equal(['Func1LogGroup']);\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.Func1LambdaFunction.Properties.Role).to.deep.equal(awsCompileFunctions.serverless.service.functions.func1.role);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create a simple function resource","suites":["AwsCompileFunctions","#compileFunctions()"],"updatePoint":{"line":226,"column":48,"index":11450},"line":226,"code":"    it('should create a simple function resource', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func'\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary resources if a SNS arn is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using onError config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":279,"column":70,"index":13540},"line":279,"code":"        it('should create necessary resources if a SNS arn is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              onError: 'arn:aws:sns:region:accountid:foo'\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              DeadLetterConfig: {\n                TargetArn: 'arn:aws:sns:region:accountid:foo'\n              }\n            }\n          };\n          const compiledDlqStatement = {\n            Effect: 'Allow',\n            Action: ['sns:Publish'],\n            Resource: ['arn:aws:sns:region:accountid:foo']\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            const dlqStatement = compiledCfTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[0];\n            expect(functionResource).to.deep.equal(compiledFunction);\n            expect(dlqStatement).to.deep.equal(compiledDlqStatement);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary resources if a Ref is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using onError config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":323,"column":66,"index":15436},"line":323,"code":"        it('should create necessary resources if a Ref is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              onError: {\n                Ref: 'DLQ'\n              }\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              DeadLetterConfig: {\n                TargetArn: {\n                  Ref: 'DLQ'\n                }\n              }\n            }\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            expect(functionResource).to.deep.equal(compiledFunction);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary resources if a Fn::ImportValue is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using onError config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":364,"column":78,"index":16982},"line":364,"code":"        it('should create necessary resources if a Fn::ImportValue is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              onError: {\n                'Fn::ImportValue': 'DLQ'\n              }\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              DeadLetterConfig: {\n                TargetArn: {\n                  'Fn::ImportValue': 'DLQ'\n                }\n              }\n            }\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            expect(functionResource).to.deep.equal(compiledFunction);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary resources if a Fn::GetAtt is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using onError config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":405,"column":73,"index":18551},"line":405,"code":"        it('should create necessary resources if a Fn::GetAtt is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              onError: {\n                'Fn::GetAtt': ['DLQ', 'Arn']\n              }\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              DeadLetterConfig: {\n                TargetArn: {\n                  'Fn::GetAtt': ['DLQ', 'Arn']\n                }\n              }\n            }\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            expect(functionResource).to.deep.equal(compiledFunction);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary function resources if a SNS arn is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using onError config","when IamRoleLambdaExecution is not used"],"updatePoint":{"line":448,"column":79,"index":20210},"line":448,"code":"        it('should create necessary function resources if a SNS arn is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              onError: 'arn:aws:sns:region:accountid:foo'\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              DeadLetterConfig: {\n                TargetArn: 'arn:aws:sns:region:accountid:foo'\n              }\n            }\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            expect(functionResource).to.deep.equal(compiledFunction);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create necessary resources if a tracing config is provided","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":507,"column":77,"index":22534},"line":507,"code":"        it('should create necessary resources if a tracing config is provided', async () => {\n          awsCompileFunctions.serverless.service.functions = {\n            func: {\n              handler: 'func.function.handler',\n              name: 'new-service-dev-func',\n              tracing: 'Active'\n            }\n          };\n          const compiledFunction = {\n            Type: 'AWS::Lambda::Function',\n            DependsOn: ['FuncLogGroup'],\n            Properties: {\n              Code: {\n                S3Key: `${s3Folder}/${s3FileName}`,\n                S3Bucket: {\n                  Ref: 'ServerlessDeploymentBucket'\n                }\n              },\n              FunctionName: 'new-service-dev-func',\n              Handler: 'func.function.handler',\n              MemorySize: 1024,\n              Role: {\n                'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n              },\n              Runtime: 'nodejs14.x',\n              Timeout: 6,\n              TracingConfig: {\n                Mode: 'Active'\n              }\n            }\n          };\n          const compiledXrayStatement = {\n            Effect: 'Allow',\n            Action: ['xray:PutTraceSegments', 'xray:PutTelemetryRecords'],\n            Resource: ['*']\n          };\n          return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n            const compiledCfTemplate = awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate;\n            const functionResource = compiledCfTemplate.Resources.FuncLambdaFunction;\n            const xrayStatement = compiledCfTemplate.Resources.IamRoleLambdaExecution.Properties.Policies[0].PolicyDocument.Statement[0];\n            expect(functionResource).to.deep.equal(compiledFunction);\n            expect(xrayStatement).to.deep.equal(compiledXrayStatement);\n          });\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create a function resource with function level environment config","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":553,"column":80,"index":24413},"line":553,"code":"    it('should create a function resource with function level environment config', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          environment: {\n            test1: 'test1'\n          }\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6,\n          Environment: {\n            Variables: {\n              test1: 'test1'\n            }\n          }\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should accept an environment variable with CF ref and functions","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":594,"column":71,"index":25890},"line":594,"code":"    it('should accept an environment variable with CF ref and functions', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          environment: {\n            counter: {\n              Ref: 'TestVariable'\n            },\n            list: {\n              'Fn::Join:': [', ', ['a', 'b', 'c']]\n            }\n          }\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Environment.Variables.counter).to.eql({\n          Ref: 'TestVariable'\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should consider function based config when creating a function resource","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":615,"column":79,"index":26681},"line":615,"code":"    it('should consider function based config when creating a function resource', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          name: 'customized-func-function',\n          handler: 'func.function.handler',\n          memorySize: 128,\n          timeout: 10\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'customized-func-function',\n          Handler: 'func.function.handler',\n          MemorySize: 128,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 10\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should include description if specified","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":650,"column":47,"index":28021},"line":650,"code":"    it('should include description if specified', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          description: 'Lambda function description'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Properties.Description).to.equal('Lambda function description');\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create corresponding function output and version objects","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":661,"column":71,"index":28595},"line":661,"code":"    it('should create corresponding function output and version objects', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler'\n        },\n        anotherFunc: {\n          handler: 'anotherFunc.function.handler'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Outputs.FuncLambdaFunctionQualifiedArn).to.exist;\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Outputs.AnotherFuncLambdaFunctionQualifiedArn).to.exist;\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should include description under version too if function is specified","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":675,"column":77,"index":29312},"line":675,"code":"    it('should include description under version too if function is specified', async () => {\n      const lambdaDescription = 'Lambda function description';\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          description: lambdaDescription\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        let versionDescription;\n        for (const [key, value] of Object.entries(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources)) {\n          if (key.startsWith('FuncLambdaVersion')) {\n            versionDescription = value.Properties.Description;\n            break;\n          }\n        }\n        return expect(versionDescription).to.equal(lambdaDescription);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set function declared reserved concurrency limit","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":694,"column":63,"index":30144},"line":694,"code":"    it('should set function declared reserved concurrency limit', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          reservedConcurrency: 5\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          ReservedConcurrentExecutions: 5,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set function declared provisioned concurrency limit","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":729,"column":66,"index":31522},"line":729,"code":"    it('should set function declared provisioned concurrency limit', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          provisionedConcurrency: 5,\n          versionFunction: false\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncProvConcLambdaAlias.Properties.ProvisionedConcurrencyConfig).to.deep.equal({\n          ProvisionedConcurrentExecutions: 5\n        });\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set function declared reserved concurrency limit even if it is zero","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":744,"column":82,"index":32218},"line":744,"code":"    it('should set function declared reserved concurrency limit even if it is zero', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          reservedConcurrency: 0\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          ReservedConcurrentExecutions: 0,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set function SnapStart ApplyOn to PublishedVersions when enabled","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":779,"column":79,"index":33609},"line":779,"code":"    it('should set function SnapStart ApplyOn to PublishedVersions when enabled', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              snapStart: true\n            }\n          }\n        },\n        command: 'package'\n      });\n      expect(cfTemplate.Resources.BasicLambdaFunction.Properties.SnapStart).to.deep.equal({\n        ApplyOn: 'PublishedVersions'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should not configure function SnapStart ApplyOn when disabled","suites":["AwsCompileFunctions","#compileFunctions()","when using tracing config","when IamRoleLambdaExecution is used"],"updatePoint":{"line":797,"column":69,"index":34105},"line":797,"code":"    it('should not configure function SnapStart ApplyOn when disabled', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              snapStart: false\n            }\n          }\n        },\n        command: 'package'\n      });\n      expect(cfTemplate.Resources.BasicLambdaFunction.Properties).to.not.have.property('SnapStart');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should not set unset properties when not specified in yml (layers, vpc, etc)","suites":["AwsCompileFunctions","#compileRole()"],"updatePoint":{"line":815,"column":84,"index":34622},"line":815,"code":"    it('should not set unset properties when not specified in yml (layers, vpc, etc)', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func'\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set Layers when specified","suites":["AwsCompileFunctions","#compileRole()"],"updatePoint":{"line":848,"column":40,"index":35897},"line":848,"code":"    it('should set Layers when specified', async () => {\n      const s3Folder = awsCompileFunctions.serverless.service.package.artifactDirectoryName;\n      const s3FileName = awsCompileFunctions.serverless.service.package.artifact.split(path.sep).pop();\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          layers: ['arn:aws:xxx:*:*']\n        }\n      };\n      const compiledFunction = {\n        Type: 'AWS::Lambda::Function',\n        DependsOn: ['FuncLogGroup'],\n        Properties: {\n          Code: {\n            S3Key: `${s3Folder}/${s3FileName}`,\n            S3Bucket: {\n              Ref: 'ServerlessDeploymentBucket'\n            }\n          },\n          FunctionName: 'new-service-dev-func',\n          Handler: 'func.function.handler',\n          MemorySize: 1024,\n          Role: {\n            'Fn::GetAtt': ['IamRoleLambdaExecution', 'Arn']\n          },\n          Runtime: 'nodejs14.x',\n          Timeout: 6,\n          Layers: ['arn:aws:xxx:*:*']\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction).to.deep.equal(compiledFunction);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should set Condition when specified","suites":["AwsCompileFunctions","#compileRole()"],"updatePoint":{"line":883,"column":43,"index":37253},"line":883,"code":"    it('should set Condition when specified', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          condition: 'IsE2eTest'\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.Condition).to.equal('IsE2eTest');\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should include DependsOn when specified","suites":["AwsCompileFunctions","#compileRole()"],"updatePoint":{"line":895,"column":47,"index":37792},"line":895,"code":"    it('should include DependsOn when specified', async () => {\n      awsCompileFunctions.serverless.service.functions = {\n        func: {\n          handler: 'func.function.handler',\n          name: 'new-service-dev-func',\n          dependsOn: ['MyThing', 'MyOtherThing']\n        }\n      };\n      return expect(awsCompileFunctions.compileFunctions()).to.be.fulfilled.then(() => {\n        expect(awsCompileFunctions.serverless.service.provider.compiledCloudFormationTemplate.Resources.FuncLambdaFunction.DependsOn).to.deep.equal(['FuncLogGroup', 'MyThing', 'MyOtherThing']);\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `package.artifact`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1004,"column":41,"index":41835},"line":1004,"code":"    it('should support `package.artifact`', async () => {\n      const {\n        Code: {\n          S3Key\n        }\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(S3Key.endsWith('artifact.zip')).to.be.true;\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].package.artifact` over service.package.artifact","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1012,"column":82,"index":42123},"line":1012,"code":"    it('should prefer `functions[].package.artifact` over service.package.artifact', () => {\n      const {\n        Code: {\n          S3Key\n        }\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(S3Key.endsWith('artifact-function.zip')).to.be.true;\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.vpc`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1020,"column":37,"index":42371},"line":1020,"code":"    it('should support `provider.vpc`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        VpcConfig\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(VpcConfig.SecurityGroupIds).to.deep.equal(providerConfig.vpc.securityGroupIds);\n      expect(VpcConfig.SubnetIds).to.deep.equal(providerConfig.vpc.subnetIds);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].vpc` over `provider.vpc`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1028,"column":59,"index":42776},"line":1028,"code":"    it('should prefer `functions[].vpc` over `provider.vpc`', () => {\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        VpcConfig\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(VpcConfig.SecurityGroupIds).to.deep.equal(fooFunctionConfig.vpc.securityGroupIds);\n      expect(VpcConfig.SubnetIds).to.deep.equal(fooFunctionConfig.vpc.subnetIds);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should allow `functions[].vpc` to specify no vpc","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1036,"column":56,"index":43190},"line":1036,"code":"    it('should allow `functions[].vpc` to specify no vpc', () => {\n      const Properties = cfResources[naming.getLambdaLogicalId('vpcNullify')].Properties;\n      expect(Properties.VpcConfig).to.be.undefined;\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.tags`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1040,"column":38,"index":43389},"line":1040,"code":"    it('should support `provider.tags`', () => {\n      const providerConfig = serviceConfig.provider;\n      const expectedTags = Object.entries(providerConfig.tags).map(([Key, Value]) => ({\n        Key,\n        Value\n      }));\n      const {\n        Tags\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(Tags).to.deep.include.members(expectedTags);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support both `provider.tags and `function[].tags`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1051,"column":64,"index":43806},"line":1051,"code":"    it('should support both `provider.tags and `function[].tags`', () => {\n      const providerConfig = serviceConfig.provider;\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const expectedTags = Object.entries({\n        ...providerConfig.tags,\n        ...fooFunctionConfig.tags\n      }).map(([Key, Value]) => ({\n        Key,\n        Value\n      }));\n      const {\n        Tags\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(Tags).to.deep.include.members(expectedTags);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.kmsKeyArn`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1066,"column":43,"index":44319},"line":1066,"code":"    it('should support `provider.kmsKeyArn`', () => {\n      const {\n        KmsKeyArn\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(KmsKeyArn).to.equal(serviceConfig.provider.kmsKeyArn);\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['kms:Decrypt'],\n        Resource: [serviceConfig.provider.kmsKeyArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].kmsKeyArn` over `provider.kmsKeyArn`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1077,"column":71,"index":44756},"line":1077,"code":"    it('should prefer `functions[].kmsKeyArn` over `provider.kmsKeyArn`', () => {\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        KmsKeyArn\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(KmsKeyArn).to.equal(fooFunctionConfig.kmsKeyArn);\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['kms:Decrypt'],\n        Resource: [fooFunctionConfig.kmsKeyArn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.tracing.lambda`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1089,"column":48,"index":45219},"line":1089,"code":"    it('should support `provider.tracing.lambda`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        TracingConfig\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(TracingConfig).to.deep.equal({\n        Mode: providerConfig.tracing.lambda\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['xray:PutTraceSegments', 'xray:PutTelemetryRecords'],\n        Resource: ['*']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].tracing` over `provider.tracing.lambda`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1103,"column":74,"index":45755},"line":1103,"code":"    it('should prefer `functions[].tracing` over `provider.tracing.lambda`', () => {\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        TracingConfig\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(TracingConfig).to.deep.equal({\n        Mode: fooFunctionConfig.tracing\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['xray:PutTraceSegments', 'xray:PutTelemetryRecords'],\n        Resource: ['*']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.environment`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1117,"column":45,"index":46264},"line":1117,"code":"    it('should support `provider.environment`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        Environment: {\n          Variables\n        }\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(Variables).to.deep.equal(providerConfig.environment);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].environment` over `provider.environment`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1126,"column":75,"index":46615},"line":1126,"code":"    it('should prefer `functions[].environment` over `provider.environment`', () => {\n      const providerConfig = serviceConfig.provider;\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        Environment: {\n          Variables\n        }\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      const expectedVariables = {\n        ...providerConfig.environment,\n        ...fooFunctionConfig.environment\n      };\n      expect(Variables).to.deep.equal(expectedVariables);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.memorySize`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1140,"column":44,"index":47108},"line":1140,"code":"    it('should support `provider.memorySize`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        MemorySize\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(MemorySize).to.equal(providerConfig.memorySize);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].memorySize` over `provider.memorySize`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1147,"column":73,"index":47418},"line":1147,"code":"    it('should prefer `functions[].memorySize` over `provider.memorySize`', () => {\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        MemorySize\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(MemorySize).to.equal(fooFunctionConfig.memorySize);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.runtime`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1154,"column":41,"index":47705},"line":1154,"code":"    it('should support `provider.runtime`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        Runtime\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties;\n      expect(Runtime).to.equal(providerConfig.runtime);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].runtime` over `provider.runtime`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1161,"column":67,"index":48000},"line":1161,"code":"    it('should prefer `functions[].runtime` over `provider.runtime`', () => {\n      const fooFunctionConfig = serviceConfig.functions.foo;\n      const {\n        Runtime\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(Runtime).to.equal(fooFunctionConfig.runtime);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.runtimeManagement`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1168,"column":51,"index":48288},"line":1168,"code":"    it('should support `provider.runtimeManagement`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        UpdateRuntimeOn\n      } = cfResources[naming.getLambdaLogicalId('other')].Properties.RuntimeManagementConfig;\n      expect(UpdateRuntimeOn.toLowerCase()).to.equal(providerConfig.runtimeManagement.mode);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].runtimeManagement` over `provider.runtimeManagement`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1175,"column":87,"index":48672},"line":1175,"code":"    it('should prefer `functions[].runtimeManagement` over `provider.runtimeManagement`', () => {\n      const {\n        UpdateRuntimeOn\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties.RuntimeManagementConfig;\n      expect(UpdateRuntimeOn).to.equal('FunctionUpdate');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.versionFunctions: false`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1181,"column":57,"index":48936},"line":1181,"code":"    it('should support `provider.versionFunctions: false`', () => {\n      expect(cfOutputs).to.not.have.property(naming.getLambdaVersionOutputLogicalId('other'));\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].versionFunction` over `provider.versionFunctions`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1184,"column":84,"index":49134},"line":1184,"code":"    it('should prefer `functions[].versionFunction` over `provider.versionFunctions`', () => {\n      expect(cfOutputs).to.have.property(naming.getLambdaVersionOutputLogicalId('foo'));\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.deploymentBucket`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1187,"column":50,"index":49292},"line":1187,"code":"    it('should support `provider.deploymentBucket`', () => {\n      const providerConfig = serviceConfig.provider;\n      const {\n        Code: {\n          S3Bucket\n        }\n      } = cfResources[naming.getLambdaLogicalId('foo')].Properties;\n      expect(S3Bucket).to.deep.equal(providerConfig.deploymentBucket);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].fileSystemConfig` with vpc configured on provider","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1196,"column":85,"index":49647},"line":1196,"code":"    it('should support `functions[].fileSystemConfig` with vpc configured on provider', () => {\n      const functionServiceConfig = serviceConfig.functions.fnFileSystemConfig;\n      const fileSystemCfConfig = cfResources[naming.getLambdaLogicalId('fnFileSystemConfig')].Properties;\n      const {\n        arn,\n        localMountPath\n      } = functionServiceConfig.fileSystemConfig;\n      expect(arn).to.match(/^arn/);\n      expect(localMountPath).to.be.a('string');\n      expect(fileSystemCfConfig.FileSystemConfigs).to.deep.equal([{\n        Arn: arn,\n        LocalMountPath: localMountPath\n      }]);\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['elasticfilesystem:ClientMount', 'elasticfilesystem:ClientWrite'],\n        Resource: [arn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.architecture`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1215,"column":46,"index":50417},"line":1215,"code":"    it('should support `provider.architecture`', async () => {\n      const imageSha = '6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38';\n      const imageWithSha = `000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:${imageSha}`;\n      const {\n        awsNaming: localNaming,\n        cfTemplate: {\n          Resources: localResources\n        }\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            fnImage: {\n              image: imageWithSha\n            }\n          },\n          provider: {\n            architecture: 'arm64'\n          }\n        }\n      });\n      expect(localResources[localNaming.getLambdaLogicalId('basic')].Properties.Architectures).to.deep.equal(['arm64']);\n      expect(localResources[localNaming.getLambdaLogicalId('fnImage')].Properties.Architectures).to.deep.equal(['arm64']);\n      expect(cfResources[naming.getLambdaLogicalId('fnImage')].Properties).to.not.have.property('Architectures');\n      expect(cfResources[naming.getLambdaLogicalId('foo')].Properties).to.not.have.property('Architectures');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `vpc` defined with `Fn::Split`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties"],"updatePoint":{"line":1242,"column":53,"index":51586},"line":1242,"code":"    it('should support `vpc` defined with `Fn::Split`', async () => {\n      const {\n        awsNaming,\n        cfTemplate,\n        fixtureData\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            vpc: {\n              subnetIds: {\n                'Fn::Split': [',', 'subnet-01010101,subnet-21212121']\n              },\n              securityGroupIds: {\n                'Fn::Split': [',', 'sg-0a0a0a0a,sg-0b0b0b0b']\n              }\n            }\n          }\n        }\n      });\n      const providerConfig = fixtureData.serviceConfig.provider;\n      const {\n        VpcConfig\n      } = cfTemplate.Resources[awsNaming.getLambdaLogicalId('basic')].Properties;\n      expect(VpcConfig.SecurityGroupIds).to.deep.equal(providerConfig.vpc.securityGroupIds);\n      expect(VpcConfig.SubnetIds).to.deep.equal(providerConfig.vpc.subnetIds);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role` as arn string","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties","when custom IAM role is used"],"updatePoint":{"line":1299,"column":58,"index":53483},"line":1299,"code":"      it('should support `provider.iam.role` as arn string', async () => {\n        const providerConfig = customRoleServiceConfig.provider;\n        expect(otherFunctionRole).to.equal(providerConfig.iam.role);\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should prefer `functions[].role` over `provider.iam.role`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties","when custom IAM role is used"],"updatePoint":{"line":1303,"column":67,"index":53711},"line":1303,"code":"      it('should prefer `functions[].role` over `provider.iam.role`', () => {\n        const basicFunctionConfig = customRoleServiceConfig.functions.basic;\n        expect(basicFunctionRole).to.equal(basicFunctionConfig.role);\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role` defined as CF function","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Provider properties","when custom IAM role is used"],"updatePoint":{"line":1307,"column":67,"index":53946},"line":1307,"code":"      it('should support `provider.iam.role` defined as CF function', async () => {\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData\n        } = await runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            provider: {\n              iam: {\n                role: {\n                  'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:role/fromFunction'\n                }\n              }\n            }\n          }\n        });\n        const functionRole = cfTemplate.Resources[awsNaming.getLambdaLogicalId('basic')].Properties.Role;\n        expect(functionRole).to.deep.equal(fixtureData.serviceConfig.provider.iam.role);\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support resource name","suites":["lib/plugins/aws/package/compile/functions/index.test.js","`provider.role` variants"],"updatePoint":{"line":1331,"column":36,"index":54685},"line":1331,"code":"    it('should support resource name', async () => {\n      const {\n        awsNaming,\n        cfTemplate,\n        fixtureData\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          provider: {\n            iam: {\n              role: 'LogicalNameRole'\n            }\n          }\n        },\n        command: 'package'\n      });\n      const funcResource = cfTemplate.Resources[awsNaming.getLambdaLogicalId('basic')];\n      expect(funcResource.DependsOn).to.deep.equal(['BasicLogGroup', 'LogicalNameRole']);\n      expect(funcResource.Properties.Role).to.deep.equal({\n        'Fn::GetAtt': [fixtureData.serviceConfig.provider.iam.role, 'Arn']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support Fn::GetAtt function","suites":["lib/plugins/aws/package/compile/functions/index.test.js","`provider.role` variants"],"updatePoint":{"line":1353,"column":42,"index":55382},"line":1353,"code":"    it('should support Fn::GetAtt function', async () => {\n      const {\n        awsNaming,\n        cfTemplate,\n        fixtureData\n      } = await runServerless({\n        fixture: 'function',\n        configExt: {\n          provider: {\n            iam: {\n              role: {\n                'Fn::GetAtt': ['LogicalNameRole', 'Arn']\n              }\n            }\n          }\n        },\n        command: 'package'\n      });\n      const funcResource = cfTemplate.Resources[awsNaming.getLambdaLogicalId('basic')];\n      expect(funcResource.DependsOn).to.deep.equal(['BasicLogGroup', 'LogicalNameRole']);\n      expect(funcResource.Properties.Role).to.deep.equal(fixtureData.serviceConfig.provider.iam.role);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"CodeSha256 for functions should be the same for default hashing and for 20200924 version","suites":["lib/plugins/aws/package/compile/functions/index.test.js","`provider.lambdaHashingVersion` support"],"updatePoint":{"line":1377,"column":96,"index":56217},"line":1377,"code":"    it('CodeSha256 for functions should be the same for default hashing and for 20200924 version', async () => {\n      const {\n        servicePath: serviceDir,\n        updateConfig\n      } = await fixtures.setup('function', {\n        configExt: {\n          provider: {\n            versionFunctions: true\n          }\n        }\n      });\n      const {\n        cfTemplate: originalTemplate,\n        awsNaming\n      } = await runServerless({\n        cwd: serviceDir,\n        command: 'package'\n      });\n      const functionCfLogicalId = awsNaming.getLambdaLogicalId('basic');\n      const originalVersionCfConfig = Object.values(originalTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n      await updateConfig({\n        disabledDeprecations: ['LAMBDA_HASHING_VERSION_PROPERTY'],\n        provider: {\n          lambdaHashingVersion: '20200924'\n        }\n      });\n      const {\n        cfTemplate: updatedTemplate\n      } = await runServerless({\n        cwd: serviceDir,\n        command: 'package'\n      });\n      const updatedVersionCfConfig = Object.values(updatedTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n      expect(originalVersionCfConfig.CodeSha256).to.deep.equal(updatedVersionCfConfig.CodeSha256);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"TODO: should support `functions[].package.artifact`, referencing local file","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1621,"code":"    it.skip('TODO: should support `functions[].package.artifact`, referencing local file', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should generate expected function resource","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1625,"code":"    it.skip('TODO: should generate expected function resource', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].role`, expressed via arn","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1634,"code":"    it.skip('TODO: should support `functions[].role`, expressed via arn', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].role`, expressed via resource name","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1639,"code":"    it.skip('TODO: should support `functions[].role`, expressed via resource name', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].role`, expressed via Fn::GetAtt","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1643,"code":"    it.skip('TODO: should support `functions[].role`, expressed via Fn::GetAtt', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].role`, expressed via Fn::ImportValue","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1647,"code":"    it.skip('TODO: should support `functions[].role`, expressed via Fn::ImportValue', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].vpc`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1651,"code":"    it.skip('TODO: should support `functions[].vpc`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `function[].tags`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1655,"code":"    it.skip('TODO: should support `function[].tags`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].tracing`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1659,"code":"    it.skip('TODO: should support `functions[].tracing`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].onError` as arn","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1666,"code":"    it.skip('TODO: should support `functions[].onError` as arn', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].onError` as Ref","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1672,"code":"    it.skip('TODO: should support `functions[].onError` as Ref', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].onError` as Fn::ImportValue","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1679,"code":"    it.skip('TODO: should support `functions[].onError` as Fn::ImportValue', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].onError` as Fn::GetAtt","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1683,"code":"    it.skip('TODO: should support `functions[].onError` as Fn::GetAtt', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].kmsKeyArn` as Fn::GetAtt","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1687,"code":"    it.skip('TODO: should support `functions[].kmsKeyArn` as Fn::GetAtt', () => {});","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].kmsKeyArn` as Ref","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1688,"code":"    it.skip('TODO: should support `functions[].kmsKeyArn` as Ref', () => {});","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].kmsKeyArn` as Fn::ImportValue","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1689,"code":"    it.skip('TODO: should support `functions[].kmsKeyArn` as Fn::ImportValue', () => {});","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].environment`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1690,"code":"    it.skip('TODO: should support `functions[].environment`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].environment` as CF intrinsic function","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1694,"code":"    it.skip('TODO: should support `functions[].environment` as CF intrinsic function', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].name`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1698,"code":"    it.skip('TODO: should support `functions[].name`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].memorySize`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1702,"code":"    it.skip('TODO: should support `functions[].memorySize`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].timeout`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1706,"code":"    it.skip('TODO: should support `functions[].timeout`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"should default to \"nodejs14.x\" runtime`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1710,"column":47,"index":70129},"line":1710,"code":"    it('should default to \"nodejs14.x\" runtime`', () => {\n      const funcResource = cfResources[naming.getLambdaLogicalId('target')];\n      expect(funcResource.Properties.Runtime).to.equal('nodejs14.x');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"TODO: should support `functions[].runtime`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1714,"code":"    it.skip('TODO: should support `functions[].runtime`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].description`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1718,"code":"    it.skip('TODO: should support `functions[].description`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should create lambda version resource and the output","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1725,"code":"    it.skip('TODO: should create lambda version resource and the output', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].versionFunction`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1729,"code":"    it.skip('TODO: should support `functions[].versionFunction`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].reservedConcurrency`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1736,"code":"    it.skip('TODO: should support `functions[].reservedConcurrency`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].provisionedConcurrency`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1743,"code":"    it.skip('TODO: should support `functions[].provisionedConcurrency`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].layers`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1747,"code":"    it.skip('TODO: should support `functions[].layers`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"should support `Ref` references to external layers (not defined as a part of `layers` top-level property in configuration)","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1751,"column":130,"index":72903},"line":1751,"code":"    it('should support `Ref` references to external layers (not defined as a part of `layers` top-level property in configuration)', async () => {\n      expect(cfResources[naming.getLambdaLogicalId('fnExternalLayer')].Properties.Layers).to.deep.equal([{\n        Ref: 'ExternalLambdaLayer'\n      }]);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"TODO: should support `functions[].conditions`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1756,"code":"    it.skip('TODO: should support `functions[].conditions`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"TODO: should support `functions[].dependsOn`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"line":1760,"code":"    it.skip('TODO: should support `functions[].dependsOn`', () => {","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"should support `functions[].url` set to `true`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1764,"column":54,"index":73666},"line":1764,"code":"    it('should support `functions[].url` set to `true`', () => {\n      expect(cfResources[naming.getLambdaFunctionUrlLogicalId('fnUrl')].Properties).to.deep.equal({\n        AuthType: 'NONE',\n        TargetFunctionArn: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('fnUrl'), 'Arn']\n        }\n      });\n      expect(cfOutputs[naming.getLambdaFunctionUrlLogicalId('fnUrl')].Value).to.deep.equal({\n        'Fn::GetAtt': [naming.getLambdaFunctionUrlOutputLogicalId('fnUrl'), 'FunctionUrl']\n      });\n      expect(cfResources[naming.getLambdaFnUrlPermissionLogicalId('fnUrl')].Properties).to.deep.equal({\n        Action: 'lambda:InvokeFunctionUrl',\n        FunctionName: {\n          'Fn::GetAtt': ['FnUrlLambdaFunction', 'Arn']\n        },\n        FunctionUrlAuthType: 'NONE',\n        Principal: '*'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].url` set to `true` with provisionedConcurrency set","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1783,"column":86,"index":74516},"line":1783,"code":"    it('should support `functions[].url` set to `true` with provisionedConcurrency set', () => {\n      expect(cfResources[naming.getLambdaFunctionUrlLogicalId('fnUrlWithProvisioned')].Properties).to.deep.equal({\n        AuthType: 'NONE',\n        TargetFunctionArn: {\n          'Fn::Join': [':', [{\n            'Fn::GetAtt': ['FnUrlWithProvisionedLambdaFunction', 'Arn']\n          }, 'provisioned']]\n        }\n      });\n      expect(cfResources[naming.getLambdaFunctionUrlLogicalId('fnUrlWithProvisioned')].DependsOn).to.equal('FnUrlWithProvisionedProvConcLambdaAlias');\n      expect(cfResources[naming.getLambdaFnUrlPermissionLogicalId('fnUrl')].Properties).to.deep.equal({\n        Action: 'lambda:InvokeFunctionUrl',\n        FunctionName: {\n          'Fn::GetAtt': ['FnUrlLambdaFunction', 'Arn']\n        },\n        FunctionUrlAuthType: 'NONE',\n        Principal: '*'\n      });\n      expect(cfResources[naming.getLambdaFnUrlPermissionLogicalId('fnUrlWithProvisioned')].DependsOn).to.equal('FnUrlWithProvisionedProvConcLambdaAlias');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].url` set to an object with authorizer and cors","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1803,"column":82,"index":75553},"line":1803,"code":"    it('should support `functions[].url` set to an object with authorizer and cors', () => {\n      expect(cfResources[naming.getLambdaFunctionUrlLogicalId('fnUrlWithAuthAndCors')].Properties).to.deep.equal({\n        AuthType: 'AWS_IAM',\n        TargetFunctionArn: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('fnUrlWithAuthAndCors'), 'Arn']\n        },\n        Cors: {\n          AllowMethods: ['*'],\n          AllowOrigins: ['*'],\n          AllowHeaders: ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amzn-Trace-Id'],\n          MaxAge: 3600,\n          AllowCredentials: undefined,\n          ExposeHeaders: undefined\n        }\n      });\n      expect(cfOutputs[naming.getLambdaFunctionUrlLogicalId('fnUrlWithAuthAndCors')].Value).to.deep.equal({\n        'Fn::GetAtt': [naming.getLambdaFunctionUrlOutputLogicalId('fnUrlWithAuthAndCors'), 'FunctionUrl']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support nullifying default cors value with `null` for `functions[].url`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1822,"column":86,"index":76474},"line":1822,"code":"    it('should support nullifying default cors value with `null` for `functions[].url`', () => {\n      expect(cfResources[naming.getLambdaFunctionUrlLogicalId('fnUrlNullifyDefaultCorsValue')].Properties).to.deep.equal({\n        AuthType: 'AWS_IAM',\n        TargetFunctionArn: {\n          'Fn::GetAtt': [naming.getLambdaLogicalId('fnUrlNullifyDefaultCorsValue'), 'Arn']\n        },\n        Cors: {\n          AllowMethods: ['*'],\n          AllowOrigins: ['*'],\n          AllowHeaders: undefined,\n          MaxAge: undefined,\n          AllowCredentials: undefined,\n          ExposeHeaders: undefined\n        }\n      });\n      expect(cfOutputs[naming.getLambdaFunctionUrlLogicalId('fnUrlNullifyDefaultCorsValue')].Value).to.deep.equal({\n        'Fn::GetAtt': [naming.getLambdaFunctionUrlOutputLogicalId('fnUrlNullifyDefaultCorsValue'), 'FunctionUrl']\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].architecture`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1841,"column":49,"index":77301},"line":1841,"code":"    it('should support `functions[].architecture`', () => {\n      expect(cfResources[naming.getLambdaLogicalId('fnArch')].Properties.Architectures).to.deep.equal(['arm64']);\n      expect(cfResources[naming.getLambdaLogicalId('fnImageArch')].Properties.Architectures).to.deep.equal(['arm64']);\n      expect(cfResources[naming.getLambdaLogicalId('fnImage')].Properties).to.not.have.property('Architectures');\n      expect(cfResources[naming.getLambdaLogicalId('target')].Properties).to.not.have.property('Architectures');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` referencing function in same stack","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1847,"column":94,"index":77874},"line":1847,"code":"    it('should support `functions[].destinations.onSuccess` referencing function in same stack', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('trigger')].Properties.DestinationConfig;\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: {\n            'Fn::GetAtt': [naming.getLambdaLogicalId('target'), 'Arn']\n          }\n        }\n      });\n      expect(destinationConfig).to.not.have.property('OnFailure');\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'lambda:InvokeFunction',\n        Resource: {\n          'Fn::Sub': `arn:\\${AWS::Partition}:lambda:\\${AWS::Region}:\\${AWS::AccountId}:function:${serverless.service.getFunction('target').name}`\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onFailure` referencing function in same stack","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1865,"column":94,"index":78682},"line":1865,"code":"    it('should support `functions[].destinations.onFailure` referencing function in same stack', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsOnFailure')].Properties.DestinationConfig;\n      expect(destinationConfig).to.not.have.property('OnSuccess');\n      expect(destinationConfig).to.deep.equal({\n        OnFailure: {\n          Destination: {\n            'Fn::GetAtt': [naming.getLambdaLogicalId('fnTargetFailure'), 'Arn']\n          }\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'lambda:InvokeFunction',\n        Resource: {\n          'Fn::Sub': `arn:\\${AWS::Partition}:lambda:\\${AWS::Region}:\\${AWS::AccountId}:function:${serverless.service.getFunction('fnTargetFailure').name}`\n        }\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` referencing arn","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1883,"column":75,"index":79505},"line":1883,"code":"    it('should support `functions[].destinations.onSuccess` referencing arn', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsArn')].Properties.DestinationConfig;\n      const arn = serviceConfig.functions.fnDestinationsArn.destinations.onSuccess;\n      expect(arn).to.match(/^arn/);\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'lambda:InvokeFunction',\n        Resource: arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` as `Ref` for `sns`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1898,"column":78,"index":80125},"line":1898,"code":"    it('should support `functions[].destinations.onSuccess` as `Ref` for `sns`', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsRefSns')].Properties.DestinationConfig;\n      const property = serviceConfig.functions.fnDestinationsRefSns.destinations.onSuccess;\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: property.arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'sns:Publish',\n        Resource: property.arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` as `Ref` for `sqs`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1912,"column":78,"index":80728},"line":1912,"code":"    it('should support `functions[].destinations.onSuccess` as `Ref` for `sqs`', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsRefSqs')].Properties.DestinationConfig;\n      const property = serviceConfig.functions.fnDestinationsRefSqs.destinations.onSuccess;\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: property.arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'sqs:SendMessage',\n        Resource: property.arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` as `Ref` for `eventBus`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1926,"column":83,"index":81340},"line":1926,"code":"    it('should support `functions[].destinations.onSuccess` as `Ref` for `eventBus`', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsRefEventBus')].Properties.DestinationConfig;\n      const property = serviceConfig.functions.fnDestinationsRefEventBus.destinations.onSuccess;\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: property.arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'events:PutEvents',\n        Resource: property.arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onSuccess` as `Ref` for `function`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1940,"column":83,"index":81963},"line":1940,"code":"    it('should support `functions[].destinations.onSuccess` as `Ref` for `function`', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsRefFunction')].Properties.DestinationConfig;\n      const property = serviceConfig.functions.fnDestinationsRefFunction.destinations.onSuccess;\n      expect(destinationConfig).to.deep.equal({\n        OnSuccess: {\n          Destination: property.arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'lambda:InvokeFunction',\n        Resource: property.arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].destinations.onFailure` as `Ref`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1954,"column":68,"index":82576},"line":1954,"code":"    it('should support `functions[].destinations.onFailure` as `Ref`', () => {\n      const destinationConfig = cfResources[naming.getLambdaEventConfigLogicalId('fnDestinationsRefOnFailure')].Properties.DestinationConfig;\n      const property = serviceConfig.functions.fnDestinationsRefOnFailure.destinations.onFailure;\n      expect(destinationConfig).to.deep.equal({\n        OnFailure: {\n          Destination: property.arn\n        }\n      });\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: 'sns:Publish',\n        Resource: property.arn\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].disableLogs`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1968,"column":48,"index":83161},"line":1968,"code":"    it('should support `functions[].disableLogs`', () => {\n      expect(cfResources[naming.getLambdaLogicalId('fnDisabledLogs')]).to.not.have.property('DependsOn');\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].maximumEventAge`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1971,"column":52,"index":83338},"line":1971,"code":"    it('should support `functions[].maximumEventAge`', () => {\n      const maximumEventAge = serviceConfig.functions.fnMaximumEventAge.maximumEventAge;\n      expect(maximumEventAge).to.be.a('number');\n      expect(cfResources[naming.getLambdaEventConfigLogicalId('fnMaximumEventAge')].Properties.MaximumEventAgeInSeconds).to.equal(maximumEventAge);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].maximumRetryAttempts`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1976,"column":57,"index":83700},"line":1976,"code":"    it('should support `functions[].maximumRetryAttempts`', () => {\n      const maximumRetryAttempts = serviceConfig.functions.fnMaximumRetryAttempts.maximumRetryAttempts;\n      expect(maximumRetryAttempts).to.be.a('number');\n      expect(cfResources[naming.getLambdaEventConfigLogicalId('fnMaximumRetryAttempts')].Properties.MaximumRetryAttempts).to.equal(maximumRetryAttempts);\n      expect(cfResources[naming.getLambdaEventConfigLogicalId('fnProvisioned')].DependsOn).to.equal(naming.getLambdaProvisionedConcurrencyAliasLogicalId('fnProvisioned'));\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].ephemeralStorageSize`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1982,"column":57,"index":84260},"line":1982,"code":"    it('should support `functions[].ephemeralStorageSize`', () => {\n      const ephemeralStorageSize = serviceConfig.functions.fnEphemeralStorage.ephemeralStorageSize;\n      expect(ephemeralStorageSize).to.be.a('number');\n      expect(cfResources[naming.getLambdaLogicalId('fnEphemeralStorage')].Properties.EphemeralStorage).to.deep.equal({\n        Size: ephemeralStorageSize\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].fileSystemConfig` (with vpc configured on function)","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":1989,"column":87,"index":84684},"line":1989,"code":"    it('should support `functions[].fileSystemConfig` (with vpc configured on function)', () => {\n      const functionServiceConfig = serviceConfig.functions.fnFileSystemConfig;\n      const fileSystemCfConfig = cfResources[naming.getLambdaLogicalId('fnFileSystemConfig')].Properties;\n      const {\n        arn,\n        localMountPath\n      } = functionServiceConfig.fileSystemConfig;\n      expect(arn).to.match(/^arn/);\n      expect(localMountPath).to.be.a('string');\n      expect(fileSystemCfConfig.FileSystemConfigs).to.deep.equal([{\n        Arn: arn,\n        LocalMountPath: localMountPath\n      }]);\n      expect(iamRolePolicyStatements).to.deep.include({\n        Effect: 'Allow',\n        Action: ['elasticfilesystem:ClientMount', 'elasticfilesystem:ClientWrite'],\n        Resource: [arn]\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with sha","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":2011,"column":51,"index":85659},"line":2011,"code":"    it('should support `functions[].image` with sha', () => {\n      const functionServiceConfig = serviceConfig.functions.fnImage;\n      const functionCfLogicalId = naming.getLambdaLogicalId('fnImage');\n      const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n      expect(functionCfConfig.Code).to.deep.equal({\n        ImageUri: functionServiceConfig.image\n      });\n      expect(functionCfConfig).to.not.have.property('Handler');\n      expect(functionCfConfig).to.not.have.property('Runtime');\n      const imageDigest = functionServiceConfig.image.slice(functionServiceConfig.image.lastIndexOf('@') + 1);\n      expect(imageDigest).to.match(/^sha256:[a-f0-9]{64}$/);\n      const imageDigestSha = imageDigest.slice('sha256:'.length);\n      const versionCfConfig = Object.values(cfResources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n      expect(versionCfConfig.CodeSha256).to.equal(imageDigestSha);\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with image config properties","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Function properties"],"updatePoint":{"line":2026,"column":71,"index":86699},"line":2026,"code":"    it('should support `functions[].image` with image config properties', () => {\n      const functionCfLogicalId = naming.getLambdaLogicalId('fnImageWithConfig');\n      const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n      expect(functionCfConfig.ImageConfig).to.deep.equal({\n        Command: ['anotherexecutable'],\n        EntryPoint: ['executable', 'param1'],\n        WorkingDirectory: './workdir'\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should throw error when `functions[].fileSystemConfig` is configured with no vpc","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Validation"],"updatePoint":{"line":2037,"column":88,"index":87196},"line":2037,"code":"    it('should throw error when `functions[].fileSystemConfig` is configured with no vpc', () => {\n      return runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              fileSystemConfig: {\n                localMountPath: '/mnt/path',\n                arn: 'arn:aws:elasticfilesystem:us-east-1:111111111111:access-point/fsap-a1a1a1a1a1a1a1a1a'\n              }\n            }\n          }\n        },\n        command: 'package'\n      }).catch(error => {\n        expect(error).to.have.property('code', 'LAMBDA_FILE_SYSTEM_CONFIG_MISSING_VPC');\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should throw error when `SnapStart` and `ProvisionedConcurrency` is enabled on the function","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Validation"],"updatePoint":{"line":2055,"column":99,"index":87829},"line":2055,"code":"    it('should throw error when `SnapStart` and `ProvisionedConcurrency` is enabled on the function', () => {\n      return runServerless({\n        fixture: 'function',\n        configExt: {\n          functions: {\n            basic: {\n              snapStart: true,\n              provisionedConcurrency: 10\n            }\n          }\n        },\n        command: 'package'\n      }).catch(error => {\n        expect(error).to.have.property('code', 'FUNCTION_BOTH_PROVISIONED_CONCURRENCY_AND_SNAPSTART_ENABLED_ERROR');\n      });\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create a different version if configuration changed","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution"],"updatePoint":{"line":2080,"column":68,"index":88634},"line":2080,"code":"      it('should create a different version if configuration changed', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('function', {\n          configExt\n        });\n        const {\n          cfTemplate: originalTemplate\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'package'\n        });\n        const originalVersionArn = originalTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        await updateConfig({\n          functions: {\n            basic: {\n              environment: {\n                MY_ENV_VAR: 'myvalue'\n              }\n            }\n          }\n        });\n        const {\n          cfTemplate: updatedTemplate\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'package'\n        });\n        const updatedVersionArn = updatedTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        expect(updatedTemplate.Resources.BasicLambdaFunction.Properties.Environment.Variables.MY_ENV_VAR).to.equal('myvalue');\n        expect(originalVersionArn).to.not.equal(updatedVersionArn);\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should not create a different version if only function-wide configuration changed","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution"],"updatePoint":{"line":2113,"column":91,"index":89811},"line":2113,"code":"      it('should not create a different version if only function-wide configuration changed', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('function', {\n          configExt\n        });\n        const {\n          cfTemplate: originalTemplate\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'package'\n        });\n        const originalVersionArn = originalTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        await updateConfig({\n          functions: {\n            basic: {\n              tags: {\n                basic: 'bar'\n              },\n              reservedConcurrency: 1\n            }\n          }\n        });\n        const {\n          cfTemplate: updatedTemplate\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'package'\n        });\n        const updatedVersionArn = updatedTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        expect(updatedTemplate.Resources.BasicLambdaFunction.Properties.ReservedConcurrentExecutions).to.equal(1);\n        expect(originalVersionArn).to.equal(updatedVersionArn);\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create different version ids for identical lambdas with and without layers","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2177,"column":93,"index":91855},"line":2177,"code":"        it('should create different version ids for identical lambdas with and without layers', () => {\n          expect(firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref).to.not.equal(firstCfTemplate.Outputs.NoLayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should generate different lambda version id when lambda layer properties are different","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2180,"column":98,"index":92151},"line":2180,"code":"        it('should generate different lambda version id when lambda layer properties are different', async () => {\n          const firstVersionId = firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n          await updateConfig({\n            layers: {\n              testLayer: {\n                path: 'test-layer',\n                description: 'Different description'\n              }\n            }\n          });\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstVersionId).to.not.equal(data.cfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should ignore changing character of S3Key paths when generating layer version id","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2197,"column":92,"index":92884},"line":2197,"code":"        it('should ignore changing character of S3Key paths when generating layer version id', async () => {\n          // the S3Key path is timestamped and so changes on every deployment regardless of layer changes, and should\n          // therefore not be included in the version id digest\n          const firstVersionId = firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n          const firstS3Key = firstCfTemplate.Resources.TestLayerLambdaLayer.Properties.Content.S3Key;\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstS3Key).to.not.equal(data.cfTemplate.Resources.TestLayerLambdaLayer.Properties.Content.S3Key);\n          expect(firstVersionId).to.equal(data.cfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should ignore properties order when generating layer version id","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2210,"column":75,"index":93783},"line":2210,"code":"        it('should ignore properties order when generating layer version id', async () => {\n          const firstVersionId = firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n          await updateConfig({\n            functions: {\n              layerFunc: {\n                layers: [{\n                  Ref: 'TestLayerLambdaLayer'\n                }],\n                handler: 'index.handler'\n              }\n            }\n          });\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstVersionId).to.equal(data.cfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create different lambda version id for different property keys (but no different values)","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2229,"column":107,"index":94575},"line":2229,"code":"        it('should create different lambda version id for different property keys (but no different values)', async () => {\n          const firstVersionId = firstCfTemplate.Outputs.LayerFuncWithConfigLambdaFunctionQualifiedArn.Value.Ref;\n          await updateConfig({\n            functions: {\n              layerFuncWithConfig: {\n                handler: 'index.handler',\n                timeout: 128\n              }\n            }\n          });\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstVersionId).to.not.equal(data.cfTemplate.Outputs.LayerFuncWithConfigLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create same version id when layer source and config are unchanged","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2246,"column":84,"index":95315},"line":2246,"code":"        it('should create same version id when layer source and config are unchanged', async () => {\n          const firstVersionId = firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstVersionId).to.equal(data.cfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should generate different lambda version id when lambda layer arns are different","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers"],"updatePoint":{"line":2255,"column":92,"index":95831},"line":2255,"code":"        it('should generate different lambda version id when lambda layer arns are different', async () => {\n          const firstVersionId = firstCfTemplate.Outputs.ArnLayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n          await updateConfig({\n            functions: {\n              arnLayerFunc: {\n                handler: 'index.handler',\n                layers: ['arn:aws:lambda:us-east-2:123456789012:layer:my-layer:2']\n              }\n            }\n          });\n          const data = await runServerless({\n            cwd: serviceDir,\n            command: 'package',\n            awsRequestStubMap: mockDescribeStackResponse\n          });\n          expect(firstVersionId).to.not.equal(data.cfTemplate.Outputs.ArnLayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n        });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should create different lambda version id","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","with layers","when layer content is changed"],"updatePoint":{"line":2288,"column":55,"index":97353},"line":2288,"code":"          it('should create different lambda version id', async () => {\n            const firstVersionId = firstCfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref;\n            const data = await runServerless({\n              cwd: serviceDir,\n              command: 'package',\n              awsRequestStubMap: mockDescribeStackResponse\n            });\n            expect(firstVersionId).to.not.equal(data.cfTemplate.Outputs.LayerFuncLambdaFunctionQualifiedArn.Value.Ref);\n          });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should enforce new description configuration and version with `--enforce-hash-update` flag","suites":["lib/plugins/aws/package/compile/functions/index.test.js","Version hash resolution","lambdaHashingVersion migration"],"updatePoint":{"line":2307,"column":100,"index":98178},"line":2307,"code":"      it('should enforce new description configuration and version with `--enforce-hash-update` flag', async () => {\n        const {\n          servicePath: serviceDir\n        } = await fixtures.setup('function', {\n          configExt: {\n            disabledDeprecations: ['LAMBDA_HASHING_VERSION_V2'],\n            provider: {\n              lambdaHashingVersion: null\n            }\n          }\n        });\n        const {\n          cfTemplate: originalTemplate,\n          awsNaming\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'package'\n        });\n        const originalVersionArn = originalTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        const {\n          cfTemplate: updatedTemplate\n        } = await runServerless({\n          cwd: serviceDir,\n          command: 'deploy',\n          lastLifecycleHookName: 'before:deploy:deploy',\n          options: {\n            'enforce-hash-update': true\n          }\n        });\n        const updatedVersionArn = updatedTemplate.Outputs.BasicLambdaFunctionQualifiedArn.Value.Ref;\n        expect(originalVersionArn).not.to.equal(updatedVersionArn);\n        expect(updatedTemplate.Resources[awsNaming.getLambdaLogicalId('basic')].Properties.Description).to.equal('temporary-description-to-enforce-hash-update');\n      });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":false,"dir":"test"},{"name":"should support `package.artifact`","suites":["lib/plugins/aws/package/compile/functions/index.test.js","TODO: Download package artifact from S3 bucket"],"updatePoint":{"line":2362,"column":41,"index":99944},"line":2362,"code":"    it('should support `package.artifact`', () => {\n      // Replacement for:\n      // https://github.com/serverless/serverless/blob/d8527d8b57e7e5f0b94ba704d9f53adb34298d99/lib/plugins/aws/package/compile/functions/index.test.js#L118-L131\n      //\n      // Through `awsRequestStubMap` mock:\n      // 1. S3.getObject to return some string stream here:\n      //    https://github.com/serverless/serverless/blob/d8527d8b57e7e5f0b94ba704d9f53adb34298d99/lib/plugins/aws/package/compile/functions/index.js#L95-L98\n      // 2. S3.upload with a spy here:\n      //    https://github.com/serverless/serverless/blob/d8527d8b57e7e5f0b94ba704d9f53adb34298d99/lib/plugins/aws/deploy/lib/uploadArtifacts.js#L78\n      //    On which we would confirm that\n      //    - It's generated string that's being send\n      //    - Corresponding url is configured in CF template\n      // Test with \"deploy\" command, and configure `lastLifecycleHookName` to 'aws:deploy:deploy:uploadArtifact'\n      // It'll demand stubbing few other AWS calls for that follow this stub:\n      // https://github.com/serverless/dashboard-plugin/blob/cdd53df45dfad18d8bdd79969194a61cb8178671/lib/deployment/parse.test.js#L1585-L1627\n      // Confirm same artifact is used for all functions\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"should support `functions[].package.artifact","suites":["lib/plugins/aws/package/compile/functions/index.test.js","TODO: Download package artifact from S3 bucket"],"updatePoint":{"line":2379,"column":52,"index":101210},"line":2379,"code":"    it('should support `functions[].package.artifact', () => {\n      // Replacement for\n      // https://github.com/serverless/serverless/blob/d8527d8b57e7e5f0b94ba704d9f53adb34298d99/lib/plugins/aws/package/compile/functions/index.test.js#L100-L116\n      //\n      // Same as above just confirm on individual function (and confirm it's the only function that gets that)\n    });","file":"unit/lib/plugins/aws/package/compile/functions.test.js","skipped":true,"dir":"test"},{"name":"should support `layers[].package.artifact` with `package.individually`","suites":["lib/plugins/aws/package/compile/layers/index.test.js"],"updatePoint":{"line":75,"column":76,"index":1923},"line":75,"code":"  it('should support `layers[].package.artifact` with `package.individually`', () => {\n    const resourceName = 'layer';\n    const layerResource = cfResources[naming.getLambdaLayerLogicalId(resourceName)];\n    const s3Folder = service.package.artifactDirectoryName;\n    const s3FileName = service.layers[resourceName].package.artifact.split(path.sep).pop();\n    expect(layerResource.Properties.Content.S3Key).to.equal(`${s3Folder}/${s3FileName}`);\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should generate expected layer version resource","suites":["lib/plugins/aws/package/compile/layers/index.test.js"],"updatePoint":{"line":82,"column":53,"index":2354},"line":82,"code":"  it('should generate expected layer version resource', () => {\n    const resourceName = 'layer';\n    const layerResource = cfResources[naming.getLambdaLayerLogicalId(resourceName)];\n    const s3Folder = service.package.artifactDirectoryName;\n    const s3FileName = service.layers[resourceName].package.artifact.split(path.sep).pop();\n    expect(layerResource.Type).to.equals('AWS::Lambda::LayerVersion');\n    expect(layerResource.Properties.Content.S3Key).to.equal(`${s3Folder}/${s3FileName}`);\n    expect(layerResource.Properties.LayerName).to.equal('layer');\n    expect(layerResource.Properties.Content.S3Bucket.Ref).to.equal('ServerlessDeploymentBucket');\n    expect(cfOutputs.LayerLambdaLayerQualifiedArn.Description).to.equals('Current Lambda layer version');\n    expect(cfOutputs.LayerLambdaLayerQualifiedArn.Value.Ref).to.equals('LayerLambdaLayer');\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should ensure expected deletion policy for layer resource","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":95,"column":65,"index":3279},"line":95,"code":"    it('should ensure expected deletion policy for layer resource', () => {\n      const layerResourceNamePrefix = naming.getLambdaLayerLogicalId('layerRetain');\n      const layerResourceName = Object.keys(cfResources).find(resourceName => resourceName.startsWith(layerResourceNamePrefix));\n      expect(layerResourceName).to.not.equal(layerResourceNamePrefix);\n      const layerResource = cfResources[layerResourceName];\n      expect(layerResource.DeletionPolicy).to.equal('Retain');\n    });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should ensure expected deletion policy for layer permission resource","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":102,"column":76,"index":3782},"line":102,"code":"    it('should ensure expected deletion policy for layer permission resource', () => {\n      const layerPermissionResourceNamePrefix = naming.getLambdaLayerPermissionLogicalId('layerRetain', allowedAccount);\n      const layerPermissionResourceName = Object.keys(cfResources).find(resourceName => resourceName.startsWith(layerPermissionResourceNamePrefix));\n      expect(layerPermissionResourceName).to.not.equal(layerPermissionResourceNamePrefix);\n      const layerPermissionResource = cfResources[layerPermissionResourceName];\n      expect(layerPermissionResource.DeletionPolicy).to.equal('Retain');\n    });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should ensure unique resource id per layer version","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":109,"column":58,"index":4373},"line":109,"code":"    it('should ensure unique resource id per layer version', async () => {\n      const layerResourceNamePrefix = naming.getLambdaLayerLogicalId('layerRetain');\n      const firstLayerResourceName = Object.keys(cfResources).find(resourceName => resourceName.startsWith(layerResourceNamePrefix));\n      await updateConfig({\n        layers: {\n          layerRetain: {\n            description: 'foo'\n          }\n        }\n      });\n      const {\n        cfTemplate: {\n          Resources: secondCfResources\n        }\n      } = await runServerless({\n        cwd: serviceDir,\n        command: 'package',\n        awsRequestStubMap\n      });\n      expect(secondCfResources).to.not.have.property(firstLayerResourceName);\n      await updateConfig({\n        layers: {\n          layerRetain: {\n            description: null\n          }\n        }\n      });\n      const {\n        cfTemplate: {\n          Resources: firstCfResources\n        }\n      } = await runServerless({\n        cwd: serviceDir,\n        command: 'package',\n        awsRequestStubMap\n      });\n      expect(firstCfResources).to.have.property(firstLayerResourceName);\n    });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should generate expected permissions resource","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":148,"column":51,"index":5501},"line":148,"code":"  it('should generate expected permissions resource', () => {\n    const layerNamePermission = naming.getLambdaLayerPermissionLogicalId('LayerOne', 'Wild');\n    const layerPermission = cfResources[layerNamePermission];\n    expect(layerPermission.Type).to.equals('AWS::Lambda::LayerVersionPermission');\n    expect(layerPermission.Properties.Action).to.equals('lambda:GetLayerVersion');\n    expect(layerPermission.Properties.LayerVersionArn.Ref).to.equals('LayerOneLambdaLayer');\n    expect(layerPermission.Properties.Principal).to.equals('*');\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should support `layers[].allowedAccounts`","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":156,"column":47,"index":6045},"line":156,"code":"  it('should support `layers[].allowedAccounts`', () => {\n    const layerNamePermissionFirstUser = naming.getLambdaLayerPermissionLogicalId('layerTwo', '123456789012');\n    const layerPermissionFirstUser = cfResources[layerNamePermissionFirstUser];\n    expect(layerPermissionFirstUser.Properties.Principal).to.equals('123456789012');\n    const layerNamePermissionUserSecond = naming.getLambdaLayerPermissionLogicalId('layerTwo', '123456789013');\n    const layerPermissionSecondUser = cfResources[layerNamePermissionUserSecond];\n    expect(layerPermissionSecondUser.Properties.Principal).to.equals('123456789013');\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should support `layers[].description`","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":164,"column":43,"index":6661},"line":164,"code":"  it('should support `layers[].description`', () => {\n    const layerResourceName = naming.getLambdaLayerLogicalId('LayerTwo');\n    const layerOne = cfResources[layerResourceName];\n    expect(layerOne.Type).to.equals('AWS::Lambda::LayerVersion');\n    expect(layerOne.Properties.Description).to.equals('Layer two example');\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should support `layers[].compatibleRuntimes`","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":170,"column":50,"index":6997},"line":170,"code":"  it('should support `layers[].compatibleRuntimes`', () => {\n    const layerResourceName = naming.getLambdaLayerLogicalId('LayerTwo');\n    const layerOne = cfResources[layerResourceName];\n    expect(layerOne.Type).to.equals('AWS::Lambda::LayerVersion');\n    expect(layerOne.Properties.CompatibleRuntimes).to.deep.equals(['nodejs12.x']);\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should support `layers[].compatibleArchitectures`","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":176,"column":55,"index":7345},"line":176,"code":"  it('should support `layers[].compatibleArchitectures`', () => {\n    const layerResourceName = naming.getLambdaLayerLogicalId('LayerTwo');\n    const layerOne = cfResources[layerResourceName];\n    expect(layerOne.Properties.CompatibleArchitectures).to.deep.equals(['arm64']);\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should support `layers[].licenseInfo`","suites":["lib/plugins/aws/package/compile/layers/index.test.js","`layers[].retain` property"],"updatePoint":{"line":181,"column":43,"index":7615},"line":181,"code":"  it('should support `layers[].licenseInfo`', () => {\n    const layerResourceName = naming.getLambdaLayerLogicalId('LayerTwo');\n    const layerOne = cfResources[layerResourceName];\n    expect(layerOne.Type).to.equals('AWS::Lambda::LayerVersion');\n    expect(layerOne.Properties.LicenseInfo).to.deep.equals('GPL');\n  });","file":"unit/lib/plugins/aws/package/compile/layers.test.js","skipped":false,"dir":"test"},{"name":"should set the serverless instance","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":29,"column":42,"index":934},"line":29,"code":"    it('should set the serverless instance', () => {\n      expect(awsPackage.serverless).to.equal(serverless);\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should set options","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":32,"column":26,"index":1037},"line":32,"code":"    it('should set options', () => {\n      expect(awsPackage.options).to.equal(options);\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should set the service path if provided","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":35,"column":47,"index":1155},"line":35,"code":"    it('should set the service path if provided', () => {\n      expect(awsPackage.servicePath).to.equal('foo');\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should default to an empty service path if not provided","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":38,"column":63,"index":1291},"line":38,"code":"    it('should default to an empty service path if not provided', () => {\n      serverless.serviceDir = false;\n      awsPackage = new AwsPackage(serverless, options);\n      expect(awsPackage.servicePath).to.equal('');\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should use the options package path if provided","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":43,"column":55,"index":1509},"line":43,"code":"    it('should use the options package path if provided', () => {\n      options.package = 'package-options';\n      awsPackage = new AwsPackage(serverless, options);\n      expect(awsPackage.packagePath).to.equal('package-options');\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should use the services package path if provided","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":48,"column":56,"index":1749},"line":48,"code":"    it('should use the services package path if provided', () => {\n      serverless.service = {\n        package: {\n          path: 'package-service'\n        }\n      };\n      awsPackage = new AwsPackage(serverless, options);\n      expect(awsPackage.packagePath).to.equal('package-service');\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should default to the .serverless directory as the package path","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":57,"column":71,"index":2062},"line":57,"code":"    it('should default to the .serverless directory as the package path', () => {\n      expect(awsPackage.packagePath).to.equal(path.join('foo', '.serverless'));\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":60,"column":70,"index":2231},"line":60,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsPackage.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":61,"column":28,"index":2328},"line":61,"code":"    it('should have commands', () => expect(awsPackage.commands).to.be.not.empty);","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsPackage","#constructor()"],"updatePoint":{"line":62,"column":25,"index":2408},"line":62,"code":"    it('should have hooks', () => expect(awsPackage.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"package:cleanup\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":90,"column":41,"index":3817},"line":90,"code":"    it('should run \"package:cleanup\" hook', async () => {\n      const spawnAwsCommonValidateStub = spawnStub.withArgs('aws:common:validate').resolves();\n      const spawnAwsCommonCleanupTempDirStub = spawnStub.withArgs('aws:common:cleanupTempDir').resolves();\n      return awsPackage.hooks['package:cleanup']().then(() => {\n        expect(spawnAwsCommonValidateStub.calledOnce).to.equal(true);\n        expect(spawnAwsCommonCleanupTempDirStub.calledAfter(spawnAwsCommonValidateStub)).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"package:initialize\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":98,"column":44,"index":4337},"line":98,"code":"    it('should run \"package:initialize\" hook', async () => awsPackage.hooks['package:initialize']().then(() => {\n      expect(generateCoreTemplateStub.calledOnce).to.equal(true);\n    }));","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"package:setupProviderConfiguration\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":101,"column":60,"index":4541},"line":101,"code":"    it('should run \"package:setupProviderConfiguration\" hook', () => {\n      awsPackage.hooks['package:setupProviderConfiguration']();\n      expect(mergeIamTemplatesStub.calledOnce).to.equal(true);\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"before:package:compileFunctions\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":105,"column":57,"index":4744},"line":105,"code":"    it('should run \"before:package:compileFunctions\" hook', async () => awsPackage.hooks['before:package:compileFunctions']().then(() => {\n      expect(generateArtifactDirectoryNameStub.calledOnce).to.equal(true);\n    }));","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"package:finalize\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":108,"column":42,"index":4952},"line":108,"code":"    it('should run \"package:finalize\" hook', async () => {\n      const spawnAwsPackageFinalzeStub = spawnStub.withArgs('aws:package:finalize').resolves();\n      return awsPackage.hooks['package:finalize']().then(() => {\n        expect(spawnAwsPackageFinalzeStub.calledOnce).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"aws:package:finalize:mergeCustomProviderResources\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":114,"column":75,"index":5293},"line":114,"code":"    it('should run \"aws:package:finalize:mergeCustomProviderResources\" hook', async () => awsPackage.hooks['aws:package:finalize:mergeCustomProviderResources']().then(() => {\n      expect(mergeCustomProviderResourcesStub.calledOnce).to.equal(true);\n    }));","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"should run \"aws:package:finalize:saveServiceState\" hook","suites":["AwsPackage","hooks"],"updatePoint":{"line":117,"column":63,"index":5539},"line":117,"code":"    it('should run \"aws:package:finalize:saveServiceState\" hook', async () => {\n      const spawnAwsCommonMoveArtifactsToPackageStub = spawnStub.withArgs('aws:common:moveArtifactsToPackage').resolves();\n      return awsPackage.hooks['aws:package:finalize:saveServiceState']().then(() => {\n        expect(saveCompiledTemplateStub.calledOnce).to.equal(true);\n        expect(saveServiceStateStub.calledAfter(saveCompiledTemplateStub)).to.equal(true);\n        expect(spawnAwsCommonMoveArtifactsToPackageStub.calledAfter(saveServiceStateStub)).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/package/index.test.js","skipped":false,"dir":"test"},{"name":"Should add Export.Name for each internally generated logical id in the Outputs section","suites":["test/unit/lib/plugins/aws/package/lib/addExportNameForOutputs.test.js"],"updatePoint":{"line":28,"column":92,"index":795},"line":28,"code":"  it('Should add Export.Name for each internally generated logical id in the Outputs section', () => {\n    expect(outputs.ServiceEndpoint.Export.Name).to.equal(`sls-${service}-dev-ServiceEndpoint`);\n    expect(outputs.ServerlessDeploymentBucketName.Export.Name).to.equal(`sls-${service}-dev-ServerlessDeploymentBucketName`);\n    expect(outputs.FooLambdaFunctionQualifiedArn.Export.Name).to.equal(`sls-${service}-dev-FooLambdaFunctionQualifiedArn`);\n    expect(outputs.MinimalLambdaFunctionQualifiedArn.Export.Name).to.equal(`sls-${service}-dev-MinimalLambdaFunctionQualifiedArn`);\n    expect(outputs.OtherLambdaFunctionQualifiedArn.Export.Name).to.equal(`sls-${service}-dev-OtherLambdaFunctionQualifiedArn`);\n  });","file":"unit/lib/plugins/aws/package/lib/add-export-name-for-outputs.test.js","skipped":false,"dir":"test"},{"name":"Should not override Export.Name for user configured Outputs","suites":["test/unit/lib/plugins/aws/package/lib/addExportNameForOutputs.test.js"],"updatePoint":{"line":35,"column":65,"index":1483},"line":35,"code":"  it('Should not override Export.Name for user configured Outputs', () => {\n    expect(outputs.CustomOutput.Export.Name).to.equal('someExportName');\n  });","file":"unit/lib/plugins/aws/package/lib/add-export-name-for-outputs.test.js","skipped":false,"dir":"test"},{"name":"should generate a name for the artifact directory based on the current time","suites":["#generateArtifactDirectoryName()"],"updatePoint":{"line":23,"column":81,"index":823},"line":23,"code":"  it('should generate a name for the artifact directory based on the current time', () => {\n    awsPackage.generateArtifactDirectoryName();\n    expect(awsPackage.serverless.service.package.artifactDirectoryName).to.match(/[0-9]+-.+/);\n  });","file":"unit/lib/plugins/aws/package/lib/generate-artifact-directory-name.test.js","skipped":false,"dir":"test"},{"name":"should reject non-HTTPS requests to the deployment bucket","suites":["#generateCoreTemplate()"],"updatePoint":{"line":9,"column":63,"index":337},"line":9,"code":"  it('should reject non-HTTPS requests to the deployment bucket', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: 'aws'\n    },\n    command: 'package'\n  }).then(({\n    cfTemplate\n  }) => {\n    const serverlessDeploymentBucketPolicy = cfTemplate.Resources.ServerlessDeploymentBucketPolicy;\n    expect(serverlessDeploymentBucketPolicy).to.exist;\n    expect(serverlessDeploymentBucketPolicy.Type).to.equal('AWS::S3::BucketPolicy');\n    expect(serverlessDeploymentBucketPolicy.Properties).to.exist;\n    expect(serverlessDeploymentBucketPolicy.Properties.Bucket).to.deep.equal({\n      Ref: 'ServerlessDeploymentBucket'\n    });\n    expect(serverlessDeploymentBucketPolicy.Properties.PolicyDocument).to.exist;\n    expect(serverlessDeploymentBucketPolicy.Properties.PolicyDocument.Statement).to.exist;\n    expect(serverlessDeploymentBucketPolicy.Properties.PolicyDocument.Statement).to.deep.include({\n      Action: 's3:*',\n      Effect: 'Deny',\n      Principal: '*',\n      Resource: [{\n        'Fn::Join': ['', ['arn:', {\n          Ref: 'AWS::Partition'\n        }, ':s3:::', {\n          Ref: 'ServerlessDeploymentBucket'\n        }, '/*']]\n      }, {\n        'Fn::Join': ['', ['arn:', {\n          Ref: 'AWS::Partition'\n        }, ':s3:::', {\n          Ref: 'ServerlessDeploymentBucket'\n        }]]\n      }],\n      Condition: {\n        Bool: {\n          'aws:SecureTransport': false\n        }\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should use a custom bucket if specified","suites":["#generateCoreTemplate()"],"updatePoint":{"line":51,"column":45,"index":1763},"line":51,"code":"  it('should use a custom bucket if specified', async () => {\n    const bucketName = 'com.serverless.deploys';\n    return runServerless({\n      config: {\n        service: 'irrelevant',\n        provider: {\n          name: 'aws',\n          deploymentBucket: bucketName\n        }\n      },\n      command: 'package'\n    }).then(({\n      cfTemplate\n    }) => {\n      const template = cfTemplate;\n      expect(template.Outputs.ServerlessDeploymentBucketName.Value).to.equal(bucketName);\n      expect(template.Resources.ServerlessDeploymentBucket).to.not.exist;\n      expect(template.Resources.ServerlessDeploymentBucketPolicy).to.not.exist;\n    });\n  });","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should enable S3 Block Public Access & versioning if specified","suites":["#generateCoreTemplate()"],"updatePoint":{"line":71,"column":68,"index":2434},"line":71,"code":"  it('should enable S3 Block Public Access & versioning if specified', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: {\n        name: 'aws',\n        deploymentBucket: {\n          blockPublicAccess: true,\n          versioning: true\n        }\n      }\n    },\n    command: 'package'\n  }).then(({\n    cfTemplate\n  }) => {\n    expect(cfTemplate.Resources.ServerlessDeploymentBucket.Properties).to.deep.include({\n      PublicAccessBlockConfiguration: {\n        BlockPublicAcls: true,\n        BlockPublicPolicy: true,\n        IgnorePublicAcls: true,\n        RestrictPublicBuckets: true\n      },\n      VersioningConfiguration: {\n        Status: 'Enabled'\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should add resource tags to the bucket if present","suites":["#generateCoreTemplate()"],"updatePoint":{"line":98,"column":55,"index":3130},"line":98,"code":"  it('should add resource tags to the bucket if present', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: {\n        name: 'aws',\n        deploymentBucket: {\n          tags: {\n            FOO: 'bar',\n            BAZ: 'qux'\n          }\n        }\n      }\n    },\n    command: 'package'\n  }).then(({\n    cfTemplate\n  }) => {\n    expect(cfTemplate.Resources.ServerlessDeploymentBucket).to.be.deep.equal({\n      Type: 'AWS::S3::Bucket',\n      Properties: {\n        BucketEncryption: {\n          ServerSideEncryptionConfiguration: [{\n            ServerSideEncryptionByDefault: {\n              SSEAlgorithm: 'AES256'\n            }\n          }]\n        },\n        Tags: [{\n          Key: 'FOO',\n          Value: 'bar'\n        }, {\n          Key: 'BAZ',\n          Value: 'qux'\n        }]\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should result in error for custom bucket and accelerate flag","suites":["#generateCoreTemplate()"],"updatePoint":{"line":135,"column":66,"index":3980},"line":135,"code":"  it('should result in error for custom bucket and accelerate flag', async () => {\n    const bucketName = 'com.serverless.deploys';\n    await expect(runServerless({\n      config: {\n        service: 'irrelevant',\n        provider: {\n          name: 'aws',\n          deploymentBucket: bucketName\n        }\n      },\n      awsRequestStubMap: {\n        S3: {\n          getBucketLocation: {\n            LocationConstraint: ''\n          }\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '1234567890',\n            Arn: 'arn:aws:iam::1234567890:user/test'\n          }\n        }\n      },\n      command: 'deploy',\n      options: {\n        'aws-s3-accelerate': true\n      },\n      lastLifecycleHookName: 'before:deploy:deploy'\n    })).to.eventually.be.rejected.and.have.property('code', 'S3_TRANSFER_ACCELERATION_ON_EXISTING_BUCKET');\n  });","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should use a auto generated bucket if you does not specify deploymentBucket","suites":["#generateCoreTemplate()"],"updatePoint":{"line":169,"column":81,"index":5010},"line":169,"code":"  it('should use a auto generated bucket if you does not specify deploymentBucket', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: 'aws'\n    },\n    command: 'package'\n  }).then(({\n    cfTemplate\n  }) => {\n    expect(cfTemplate.Resources.ServerlessDeploymentBucket).to.be.deep.equal({\n      Type: 'AWS::S3::Bucket',\n      Properties: {\n        BucketEncryption: {\n          ServerSideEncryptionConfiguration: [{\n            ServerSideEncryptionByDefault: {\n              SSEAlgorithm: 'AES256'\n            }\n          }]\n        }\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should add a custom output if S3 Transfer Acceleration is enabled","suites":["#generateCoreTemplate()"],"updatePoint":{"line":191,"column":71,"index":5593},"line":191,"code":"  it('should add a custom output if S3 Transfer Acceleration is enabled', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: 'aws'\n    },\n    command: 'deploy',\n    options: {\n      'aws-s3-accelerate': true\n    },\n    lastLifecycleHookName: 'before:deploy:deploy',\n    awsRequestStubMap: {\n      STS: {\n        getCallerIdentity: {\n          ResponseMetadata: {\n            RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n          },\n          UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n          Account: '1234567890',\n          Arn: 'arn:aws:iam::1234567890:user/test'\n        }\n      }\n    }\n  }).then(({\n    cfTemplate: template\n  }) => {\n    expect(template.Outputs.ServerlessDeploymentBucketAccelerated).to.not.equal(null);\n    expect(template.Outputs.ServerlessDeploymentBucketAccelerated.Value).to.equal(true);\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should explicitly disable S3 Transfer Acceleration, if requested","suites":["#generateCoreTemplate()"],"updatePoint":{"line":219,"column":70,"index":6448},"line":219,"code":"  it('should explicitly disable S3 Transfer Acceleration, if requested', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: 'aws'\n    },\n    command: 'deploy',\n    options: {\n      'aws-s3-accelerate': false\n    },\n    lastLifecycleHookName: 'before:deploy:deploy',\n    awsRequestStubMap: {\n      STS: {\n        getCallerIdentity: {\n          ResponseMetadata: {\n            RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n          },\n          UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n          Account: '1234567890',\n          Arn: 'arn:aws:iam::1234567890:user/test'\n        }\n      }\n    }\n  }).then(({\n    cfTemplate: template\n  }) => {\n    expect(template.Resources.ServerlessDeploymentBucket).to.be.deep.equal({\n      Type: 'AWS::S3::Bucket',\n      Properties: {\n        AccelerateConfiguration: {\n          AccelerationStatus: 'Suspended'\n        },\n        BucketEncryption: {\n          ServerSideEncryptionConfiguration: [{\n            ServerSideEncryptionByDefault: {\n              SSEAlgorithm: 'AES256'\n            }\n          }]\n        }\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should exclude AccelerateConfiguration for govcloud region","suites":["#generateCoreTemplate()"],"updatePoint":{"line":260,"column":64,"index":7549},"line":260,"code":"  it('should exclude AccelerateConfiguration for govcloud region', async () => runServerless({\n    config: {\n      service: 'irrelevant',\n      provider: {\n        name: 'aws',\n        region: 'us-gov-west-1'\n      }\n    },\n    command: 'deploy',\n    awsRequestStubMap: {\n      STS: {\n        getCallerIdentity: {\n          ResponseMetadata: {\n            RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n          },\n          UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n          Account: '1234567890',\n          Arn: 'arn:aws:iam::1234567890:user/test'\n        }\n      }\n    },\n    options: {\n      'aws-s3-accelerate': false\n    },\n    lastLifecycleHookName: 'before:deploy:deploy'\n  }).then(({\n    cfTemplate: template\n  }) => {\n    expect(template.Resources.ServerlessDeploymentBucket).to.be.deep.equal({\n      Type: 'AWS::S3::Bucket',\n      Properties: {\n        BucketEncryption: {\n          ServerSideEncryptionConfiguration: [{\n            ServerSideEncryptionByDefault: {\n              SSEAlgorithm: 'AES256'\n            }\n          }]\n        }\n      }\n    });\n  }));","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"should not create ServerlessDeploymentBucketPolicy resource if requested","suites":["#generateCoreTemplate()"],"updatePoint":{"line":301,"column":78,"index":8633},"line":301,"code":"  it('should not create ServerlessDeploymentBucketPolicy resource if requested', async () => {\n    const {\n      cfTemplate,\n      awsNaming\n    } = await runServerless({\n      config: {\n        service: 'irrelevant',\n        provider: {\n          name: 'aws',\n          deploymentBucket: {\n            skipPolicySetup: true\n          }\n        }\n      },\n      command: 'package'\n    });\n    expect(cfTemplate.Resources).to.not.have.property(awsNaming.getDeploymentBucketPolicyLogicalId());\n  });","file":"unit/lib/plugins/aws/package/lib/generate-core-template.test.js","skipped":false,"dir":"test"},{"name":"correctly generates hash for existing file","suites":["getHashForFilePath"],"updatePoint":{"line":15,"column":48,"index":521},"line":15,"code":"  it('correctly generates hash for existing file', async () => {\n    const result = await getHashForFilePath(filePath);\n    expect(result).to.equal('7XACtDnprIRfIjV9giusFERzD722AW0+yUMil7nsn3M=');\n  });","file":"unit/lib/plugins/aws/package/lib/get-hash-for-file-path.test.js","skipped":false,"dir":"test"},{"name":"throws an error when fails to read the file","suites":["getHashForFilePath"],"updatePoint":{"line":19,"column":49,"index":725},"line":19,"code":"  it('throws an error when fails to read the file', () => {\n    expect(getHashForFilePath(path.join(process.cwd(), 'nonexistent.txt'))).to.eventually.be.rejected;\n  });","file":"unit/lib/plugins/aws/package/lib/get-hash-for-file-path.test.js","skipped":false,"dir":"test"},{"name":"should set an empty resources.Resources object if it is not present","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":22,"column":75,"index":1006},"line":22,"code":"    it('should set an empty resources.Resources object if it is not present', () => {\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources = {}; // reset the core CloudFormation template\n      awsPackage.serverless.service.resources.Resources = null;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should set an empty resources.Outputs object if it is not present","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":28,"column":73,"index":1458},"line":28,"code":"    it('should set an empty resources.Outputs object if it is not present', () => {\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Outputs = {}; // reset the core CloudFormation template\n      awsPackage.serverless.service.resources.Outputs = null;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Outputs).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should be able to overwrite existing string properties","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":34,"column":62,"index":1893},"line":34,"code":"    it('should be able to overwrite existing string properties', () => {\n      const customResourcesMock = {\n        Description: 'Some shiny new description'\n      };\n      awsPackage.serverless.service.resources = customResourcesMock;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Description).to.equal(customResourcesMock.Description);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should be able to overwrite existing object properties","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":42,"column":62,"index":2326},"line":42,"code":"    it('should be able to overwrite existing object properties', () => {\n      const customResourcesMock = {\n        Resources: {\n          ServerlessDeploymentBucket: {\n            Type: 'Some::New::Type',\n            FakeResource1: 'FakePropValue',\n            FakeResource2: {\n              FakePropKey: 'FakePropValue'\n            },\n            Properties: {\n              BucketEncryption: {\n                ServerSideEncryptionConfiguration: [{\n                  ServerSideEncryptionByDefault: {\n                    SSEAlgorithm: 'AES256'\n                  }\n                }]\n              }\n            }\n          }\n        }\n      };\n      awsPackage.serverless.service.resources = customResourcesMock;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.ServerlessDeploymentBucket).to.deep.equal(customResourcesMock.Resources.ServerlessDeploymentBucket);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should be able to merge in new object property definitions","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":67,"column":66,"index":3296},"line":67,"code":"    it('should be able to merge in new object property definitions', () => {\n      // make sure that the promise will resolve\n      const customResourcesMock = {\n        Resources: {\n          FakeResource1: {\n            FakePropKey: 'FakePropValue'\n          },\n          FakeResource2: {\n            FakePropKey: 'FakePropValue'\n          }\n        },\n        Outputs: {\n          FakeOutput1: {\n            Value: 'FakeValue'\n          },\n          FakeOutput2: {\n            Value: 'FakeValue'\n          }\n        },\n        CustomDefinition: {\n          Foo: 'Bar'\n        }\n      };\n      awsPackage.serverless.service.resources = customResourcesMock;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.FakeResource1).to.deep.equal(customResourcesMock.Resources.FakeResource1);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.FakeResource2).to.deep.equal(customResourcesMock.Resources.FakeResource2);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Outputs.FakeOutput1).to.deep.equal(customResourcesMock.Outputs.FakeOutput1);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Outputs.FakeOutput2).to.deep.equal(customResourcesMock.Outputs.FakeOutput2);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.CustomDefinition).to.deep.equal(customResourcesMock.CustomDefinition);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should keep the core template definitions when merging custom resources","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":98,"column":79,"index":4835},"line":98,"code":"    it('should keep the core template definitions when merging custom resources', () => {\n      const customResourcesMock = {\n        NewStringProp: 'New string prop',\n        NewObjectProp: {\n          newObjectPropKey: 'New object prop value'\n        }\n      };\n      awsPackage.serverless.service.resources = customResourcesMock;\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.AWSTemplateFormatVersion).to.equal(coreCloudFormationTemplate.AWSTemplateFormatVersion);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Description).to.equal(coreCloudFormationTemplate.Description);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.ServerlessDeploymentBucket).to.deep.equal(coreCloudFormationTemplate.Resources.ServerlessDeploymentBucket);\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Outputs.ServerlessDeploymentBucketName).to.deep.equal(coreCloudFormationTemplate.Outputs.ServerlessDeploymentBucketName);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should overwrite for resources.extensions.*.{CreationPolicy,DeletionPolicy,UpdatePolicy,UpdateReplacePolicy}","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":112,"column":116,"index":5986},"line":112,"code":"    it('should overwrite for resources.extensions.*.{CreationPolicy,DeletionPolicy,UpdatePolicy,UpdateReplacePolicy}', () => {\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources = {\n        SampleResource: {\n          Condition: 'Condition',\n          CreationPolicy: {\n            AutoScalingCreationPolicy: {\n              MinSuccessfulInstancesPercent: 10\n            },\n            ResourceSignal: {\n              Count: 3,\n              Timeout: 'PT5M'\n            }\n          },\n          DeletionPolicy: 'Retain',\n          UpdatePolicy: {\n            AutoScalingReplacingUpdate: {\n              WillReplace: false\n            }\n          },\n          UpdateReplacePolicy: 'Retain'\n        }\n      };\n\n      // note: it's quite likely that these test values don't make sense; it's up to the user\n      // to provide the values they want. This just verifies that the properties are overwritten\n      // as documented.\n      awsPackage.serverless.service.resources = {\n        extensions: {\n          SampleResource: {\n            Condition: 'New',\n            CreationPolicy: {\n              ResourceSignal: {\n                Count: 3,\n                Timeout: 'PT5M'\n              }\n            },\n            DeletionPolicy: 'Snapshot',\n            UpdatePolicy: {},\n            UpdateReplacePolicy: 'Snapshot'\n          }\n        }\n      };\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.SampleResource).to.deep.equal({\n        Condition: 'New',\n        CreationPolicy: {\n          ResourceSignal: {\n            Count: 3,\n            Timeout: 'PT5M'\n          }\n        },\n        DeletionPolicy: 'Snapshot',\n        UpdatePolicy: {},\n        UpdateReplacePolicy: 'Snapshot'\n      });\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should merge with overwrite for resources.extensions.*.Properties","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":168,"column":73,"index":7775},"line":168,"code":"    it('should merge with overwrite for resources.extensions.*.Properties', () => {\n      // this shows that PropertyA will get overwritten, not merged\n      // and both PropertyB and PropertyC will exist in the final result\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources = {\n        SampleResource: {\n          Properties: {\n            PropertyA: {\n              an: 'object'\n            },\n            PropertyB: 'b'\n          }\n        }\n      };\n      awsPackage.serverless.service.resources = {\n        extensions: {\n          SampleResource: {\n            Properties: {\n              PropertyA: {\n                another: 'object'\n              },\n              PropertyC: 'new'\n            }\n          }\n        }\n      };\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.SampleResource.Properties).to.deep.equal({\n        PropertyA: {\n          another: 'object'\n        },\n        PropertyB: 'b',\n        PropertyC: 'new'\n      });\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should append for resources.extensions.*.DependsOn","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":202,"column":58,"index":8842},"line":202,"code":"    it('should append for resources.extensions.*.DependsOn', () => {\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources = {\n        SampleResource: {\n          DependsOn: ['a']\n        }\n      };\n      awsPackage.serverless.service.resources = {\n        extensions: {\n          SampleResource: {\n            DependsOn: ['b']\n          }\n        }\n      };\n      awsPackage.mergeCustomProviderResources();\n      expect(awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources.SampleResource.DependsOn).to.deep.equal(['a', 'b']);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should throw error for unsupported resources.extensions.*.*","suites":["mergeCustomProviderResources","#mergeCustomProviderResources()"],"updatePoint":{"line":218,"column":67,"index":9445},"line":218,"code":"    it('should throw error for unsupported resources.extensions.*.*', () => {\n      awsPackage.serverless.service.provider.compiledCloudFormationTemplate.Resources = {\n        SampleResource: {}\n      };\n      awsPackage.serverless.service.resources = {\n        extensions: {\n          SampleResource: {\n            unsupported: 'property'\n          }\n        }\n      };\n      expect(() => awsPackage.mergeCustomProviderResources()).to.throw(ServerlessError).with.property('code', 'RESOURCE_EXTENSION_UNSUPPORTED_ATTRIBUTE');\n    });","file":"unit/lib/plugins/aws/package/lib/merge-custom-provider-resources.test.js","skipped":false,"dir":"test"},{"name":"should not create role resource if there are no functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","No default role"],"updatePoint":{"line":9,"column":65,"index":363},"line":9,"code":"    it('should not create role resource if there are no functions', async () => {\n      const {\n        cfTemplate,\n        awsNaming\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'package'\n      });\n      const iamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources).to.not.have.property(iamRoleLambdaExecution);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not create role resource with deprecated `provider.role`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","No default role"],"updatePoint":{"line":20,"column":71,"index":752},"line":20,"code":"    it('should not create role resource with deprecated `provider.role`', async () => {\n      const {\n        cfTemplate,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          disabledDeprecations: ['PROVIDER_IAM_SETTINGS_V3'],\n          provider: {\n            name: 'aws',\n            role: 'arn:aws:iam::YourAccountNumber:role/YourIamRole'\n          }\n        }\n      });\n      const IamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources).to.not.have.property(IamRoleLambdaExecution);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not create role resource with `provider.iam.role`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","No default role"],"updatePoint":{"line":38,"column":64,"index":1360},"line":38,"code":"    it('should not create role resource with `provider.iam.role`', async () => {\n      const {\n        cfTemplate,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            name: 'aws',\n            iam: {\n              role: 'arn:aws:iam::YourAccountNumber:role/YourIamRole'\n            }\n          }\n        }\n      });\n      const IamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources).to.not.have.property(IamRoleLambdaExecution);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not create role resource with all functions having `functions[].role`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","No default role"],"updatePoint":{"line":57,"column":84,"index":1961},"line":57,"code":"    it('should not create role resource with all functions having `functions[].role`', async () => {\n      const {\n        cfTemplate,\n        awsNaming\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            basic: {\n              role: 'some:aws:arn:xx1:*:*'\n            },\n            other: {\n              role: 'some:aws:arn:xx1:*:*'\n            }\n          }\n        }\n      });\n      const IamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n      expect(cfTemplate.Resources).to.not.have.property(IamRoleLambdaExecution);\n    });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not configure ManagedPolicyArns by default","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Defaults"],"updatePoint":{"line":111,"column":59,"index":3496},"line":111,"code":"      it('should not configure ManagedPolicyArns by default', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties\n        } = cfResources[IamRoleLambdaExecution];\n        expect(Properties).to.not.have.property('ManagedPolicyArns');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should add logGroup access policies if there are functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Defaults"],"updatePoint":{"line":118,"column":68,"index":3807},"line":118,"code":"      it('should add logGroup access policies if there are functions', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties\n        } = cfResources[IamRoleLambdaExecution];\n        const createLogStatement = Properties.Policies[0].PolicyDocument.Statement[0];\n        expect(createLogStatement.Effect).to.be.equal('Allow');\n        expect(createLogStatement.Action).to.be.deep.equal(['logs:CreateLogStream', 'logs:CreateLogGroup', 'logs:TagResource']);\n        expect(createLogStatement.Resource).to.deep.includes({\n          'Fn::Sub': `${arnLogPrefix}:log-group:/aws/lambda/${service}-dev*:*`\n        });\n        const putLogStatement = Properties.Policies[0].PolicyDocument.Statement[1];\n        expect(putLogStatement.Effect).to.be.equal('Allow');\n        expect(putLogStatement.Action).to.be.deep.equal(['logs:PutLogEvents']);\n        expect(putLogStatement.Resource).to.deep.includes({\n          'Fn::Sub': `${arnLogPrefix}:log-group:/aws/lambda/${service}-dev*:*:*`\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should add logGroup access policies for custom named functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Defaults"],"updatePoint":{"line":136,"column":72,"index":4864},"line":136,"code":"      it('should add logGroup access policies for custom named functions', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties\n        } = cfResources[IamRoleLambdaExecution];\n        const createLogStatement = Properties.Policies[0].PolicyDocument.Statement[0];\n        expect(createLogStatement.Effect).to.be.equal('Allow');\n        expect(createLogStatement.Action).to.be.deep.equal(['logs:CreateLogStream', 'logs:CreateLogGroup', 'logs:TagResource']);\n        expect(createLogStatement.Resource).to.deep.includes({\n          'Fn::Sub': `${arnLogPrefix}:log-group:/aws/lambda/myCustomName:*`\n        });\n        const putLogStatement = Properties.Policies[0].PolicyDocument.Statement[1];\n        expect(putLogStatement.Effect).to.be.equal('Allow');\n        expect(putLogStatement.Action).to.be.deep.equal(['logs:PutLogEvents']);\n        expect(putLogStatement.Resource).to.deep.includes({\n          'Fn::Sub': `${arnLogPrefix}:log-group:/aws/lambda/myCustomName:*:*`\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should configure LogGroup resources for functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Defaults"],"updatePoint":{"line":154,"column":59,"index":5902},"line":154,"code":"      it('should configure LogGroup resources for functions', () => {\n        const myFunctionWithRole = naming.getLogGroupLogicalId('myFunctionWithRole');\n        const myCustomName = cfResources[myFunctionWithRole];\n        expect(myCustomName.Type).to.be.equal('AWS::Logs::LogGroup');\n        expect(myCustomName.Properties.LogGroupName).to.be.equal('/aws/lambda/myCustomName');\n        const myFunctionName = naming.getLogGroupLogicalId('myFunction');\n        const myFunctionResource = cfResources[myFunctionName];\n        expect(myFunctionResource.Type).to.be.equal('AWS::Logs::LogGroup');\n        expect(myFunctionResource.Properties.LogGroupName).to.be.equal(`/aws/lambda/${service}-dev-myFunction`);\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iamRoleStatements`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties - deprecated properties"],"updatePoint":{"line":196,"column":53,"index":7707},"line":196,"code":"      it('should support `provider.iamRoleStatements`', async () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const iamResource = cfResources[IamRoleLambdaExecution];\n        const {\n          Statement\n        } = iamResource.Properties.Policies[0].PolicyDocument;\n        expect(Statement).to.deep.includes({\n          Effect: 'Allow',\n          Resource: '*',\n          NotAction: ['iam:DeleteUser']\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iamManagedPolicies`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties - deprecated properties"],"updatePoint":{"line":208,"column":54,"index":8167},"line":208,"code":"      it('should support `provider.iamManagedPolicies`', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties: {\n            ManagedPolicyArns\n          }\n        } = cfResources[IamRoleLambdaExecution];\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:iam::123456789012:user/*');\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:s3:::my_corporate_bucket/Development/*');\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:iam::123456789012:u*');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.rolePermissionsBoundary`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties - deprecated properties"],"updatePoint":{"line":219,"column":59,"index":8718},"line":219,"code":"      it('should support `provider.rolePermissionsBoundary`', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties: {\n            PermissionsBoundary\n          }\n        } = cfResources[IamRoleLambdaExecution];\n        expect(PermissionsBoundary).to.be.equal('arn:aws:iam::123456789012:policy/XCompanyBoundaries');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.permissionBoundary`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties - deprecated properties"],"updatePoint":{"line":228,"column":63,"index":9105},"line":228,"code":"      it('should support `provider.iam.role.permissionBoundary`', async () => {\n        const {\n          cfTemplate,\n          awsNaming\n        } = await runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            disabledDeprecations: ['PROVIDER_IAM_SETTINGS_V3'],\n            provider: {\n              iam: {\n                role: {\n                  permissionBoundary: ['arn:aws:iam::123456789012:policy/XCompanyBoundaries']\n                }\n              }\n            }\n          }\n        });\n        const IamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n        const {\n          Properties: {\n            PermissionsBoundary\n          }\n        } = cfTemplate.Resources[IamRoleLambdaExecution];\n        expect(PermissionsBoundary).to.be.equal('arn:aws:iam::123456789012:policy/XCompanyBoundaries');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.name`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":302,"column":49,"index":11514},"line":302,"code":"      it('should support `provider.iam.role.name`', async () => {\n        const iamRoleLambdaResource = cfResources[naming.getRoleLogicalId()];\n        expect(iamRoleLambdaResource.Properties.RoleName).to.be.eq('custom-default-role');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.path`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":306,"column":49,"index":11759},"line":306,"code":"      it('should support `provider.iam.role.path`', async () => {\n        const iamRoleLambdaResource = cfResources[naming.getRoleLogicalId()];\n        expect(iamRoleLambdaResource.Properties.Path).to.be.eq('/custom-role-path/');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should reject an invalid `provider.iam.role.path`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":310,"column":59,"index":12009},"line":310,"code":"      it('should reject an invalid `provider.iam.role.path`', async () => {\n        const customRolePath = '/invalid';\n        await expect(runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            provider: {\n              iam: {\n                role: {\n                  path: customRolePath\n                }\n              }\n            }\n          }\n        })).to.be.eventually.rejectedWith(/'provider.iam.role.path': must match pattern/);\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.statements`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":326,"column":55,"index":12514},"line":326,"code":"      it('should support `provider.iam.role.statements`', async () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const iamResource = cfResources[IamRoleLambdaExecution];\n        const {\n          Statement\n        } = iamResource.Properties.Policies[0].PolicyDocument;\n        expect(Statement).to.deep.includes({\n          Effect: 'Allow',\n          Resource: '*',\n          NotAction: ['iam:DeleteUser']\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.managedPolicies`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":338,"column":60,"index":12980},"line":338,"code":"      it('should support `provider.iam.role.managedPolicies`', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties: {\n            ManagedPolicyArns\n          }\n        } = cfResources[IamRoleLambdaExecution];\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:iam::123456789012:user/*');\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:s3:::my_corporate_bucket/Development/*');\n        expect(ManagedPolicyArns).to.deep.includes('arn:aws:iam::123456789012:u*');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.permissionsBoundary`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":349,"column":64,"index":13536},"line":349,"code":"      it('should support `provider.iam.role.permissionsBoundary`', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties: {\n            PermissionsBoundary\n          }\n        } = cfResources[IamRoleLambdaExecution];\n        expect(PermissionsBoundary).to.be.equal('arn:aws:iam::123456789012:policy/XCompanyBoundaries');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.permissionsBoundary` defined with CF intrinsic functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":358,"column":100,"index":13960},"line":358,"code":"      it('should support `provider.iam.role.permissionsBoundary` defined with CF intrinsic functions', async () => {\n        const {\n          cfTemplate,\n          awsNaming\n        } = await runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            provider: {\n              iam: {\n                role: {\n                  permissionsBoundary: {\n                    'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:policy/XCompanyBoundaries'\n                  }\n                }\n              }\n            }\n          }\n        });\n        const IamRoleLambdaExecution = awsNaming.getRoleLogicalId();\n        const {\n          Properties: {\n            PermissionsBoundary\n          }\n        } = cfTemplate.Resources[IamRoleLambdaExecution];\n        expect(PermissionsBoundary).to.deep.includes({\n          'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:policy/XCompanyBoundaries'\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should ensure needed IAM configuration when `provider.vpc` is configured","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":387,"column":82,"index":14895},"line":387,"code":"      it('should ensure needed IAM configuration when `provider.vpc` is configured', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const iamResource = cfResources[IamRoleLambdaExecution];\n        expect(iamResource.Properties.ManagedPolicyArns).to.deep.includes({\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole']]\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.logRetentionInDays`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":396,"column":54,"index":15340},"line":396,"code":"      it('should support `provider.logRetentionInDays`', () => {\n        const normalizedName = naming.getLogGroupLogicalId('basic');\n        const iamResource = cfResources[normalizedName];\n        expect(iamResource.Type).to.be.equal('AWS::Logs::LogGroup');\n        expect(iamResource.Properties.RetentionInDays).to.be.equal(5);\n        expect(iamResource.Properties.LogGroupName).to.be.equal(`/aws/lambda/${service}-dev-basic`);\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.logDataProtectionPolicy`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":403,"column":59,"index":15787},"line":403,"code":"      it('should support `provider.logDataProtectionPolicy`', () => {\n        const normalizedName = naming.getLogGroupLogicalId('basic');\n        const iamResource = cfResources[normalizedName];\n        expect(iamResource.Properties.DataProtectionPolicy.Name).to.equal('data-protection-policy');\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.iam.role.tags`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":408,"column":49,"index":16084},"line":408,"code":"      it('should support `provider.iam.role.tags`', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const iamResource = cfResources[IamRoleLambdaExecution];\n        expect(iamResource.Properties.Tags).to.eql([{\n          Key: 'sweet',\n          Value: 'potato'\n        }]);\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not create default role when `provider.iam.role` defined with CF intrinsic functions","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Provider properties"],"updatePoint":{"line":416,"column":101,"index":16454},"line":416,"code":"      it('should not create default role when `provider.iam.role` defined with CF intrinsic functions', async () => {\n        const {\n          cfTemplate,\n          awsNaming\n        } = await runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            provider: {\n              iam: {\n                role: {\n                  'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:role/someRole'\n                }\n              }\n            }\n          }\n        });\n        expect(cfTemplate.Resources[awsNaming.getRoleLogicalId()]).to.be.undefined;\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should ensure needed IAM configuration when `functions[].vpc` is configured","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":486,"column":85,"index":18555},"line":486,"code":"      it('should ensure needed IAM configuration when `functions[].vpc` is configured', () => {\n        const IamRoleLambdaExecution = naming.getRoleLogicalId();\n        const {\n          Properties\n        } = cfResources[IamRoleLambdaExecution];\n        expect(Properties.ManagedPolicyArns).to.deep.includes({\n          'Fn::Join': ['', ['arn:', {\n            Ref: 'AWS::Partition'\n          }, ':iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole']]\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].disableLogs`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":497,"column":50,"index":19005},"line":497,"code":"      it('should support `functions[].disableLogs`', async () => {\n        const functionName = serverless.service.getFunction('fnDisableLogs').name;\n        const functionLogGroupName = naming.getLogGroupName(functionName);\n        expect(cfResources).to.not.have.property(functionLogGroupName);\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].logRetentionInDays`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":502,"column":57,"index":19319},"line":502,"code":"      it('should support `functions[].logRetentionInDays`', async () => {\n        const functionName = serverless.service.getFunction('fnLogRetentionInDays').name;\n        const normalizedName = naming.getLogGroupLogicalId('fnLogRetentionInDays');\n        const logResource = cfResources[normalizedName];\n        expect(logResource.Type).to.be.equal('AWS::Logs::LogGroup');\n        expect(logResource.Properties.RetentionInDays).to.be.equal(5);\n        expect(logResource.Properties.LogGroupName).to.be.equal(naming.getLogGroupName(functionName));\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].logDataProtectionPolicy`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":510,"column":62,"index":19882},"line":510,"code":"      it('should support `functions[].logDataProtectionPolicy`', async () => {\n        const functionName = serverless.service.getFunction('fnLogDataProtectionPolicy').name;\n        const normalizedName = naming.getLogGroupLogicalId('fnLogDataProtectionPolicy');\n        const logResource = cfResources[normalizedName];\n        expect(logResource.Type).to.be.equal('AWS::Logs::LogGroup');\n        expect(logResource.Properties.DataProtectionPolicy.Name).to.equal('data-protection-policy');\n        expect(logResource.Properties.LogGroupName).to.be.equal(naming.getLogGroupName(functionName));\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should not have allow rights to put logs for custom named function when disableLogs option is enabled","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":518,"column":111,"index":20534},"line":518,"code":"      it('should not have allow rights to put logs for custom named function when disableLogs option is enabled', async () => {\n        expect(cfResources[naming.getRoleLogicalId()].Properties.Policies[0].PolicyDocument.Statement[0].Resource).to.not.deep.include({\n          'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:' + `log-group:/aws/lambda/${customFunctionName}:*`\n        });\n        expect(cfResources[naming.getRoleLogicalId()].Properties.Policies[0].PolicyDocument.Statement[1].Resource).to.not.deep.include({\n          'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:' + `log-group:/aws/lambda/${customFunctionName}:*`\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should have deny policy when disableLogs option is enabled`","suites":["lib/plugins/aws/package/lib/mergeIamTemplates.test.js","Default role","Function properties"],"updatePoint":{"line":526,"column":69,"index":21196},"line":526,"code":"      it('should have deny policy when disableLogs option is enabled`', async () => {\n        const functionName = serverless.service.getFunction('fnDisableLogs').name;\n        const functionLogGroupName = naming.getLogGroupName(functionName);\n        expect(cfResources[naming.getRoleLogicalId()].Properties.Policies[0].PolicyDocument.Statement).to.deep.include({\n          Effect: 'Deny',\n          Action: 'logs:PutLogEvents',\n          Resource: [{\n            'Fn::Sub': 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}' + `:log-group:${functionLogGroupName}:*`\n          }]\n        });\n      });","file":"unit/lib/plugins/aws/package/lib/merge-iam-templates.test.js","skipped":false,"dir":"test"},{"name":"should write the compiled template to disk","suites":["#saveCompiledTemplate()"],"updatePoint":{"line":35,"column":48,"index":1334},"line":35,"code":"  it('should write the compiled template to disk', async () => {\n    const filePath = path.join(awsPackage.serverless.serviceDir, '.serverless', 'compiled.json');\n    return awsPackage.saveCompiledTemplate().then(() => {\n      expect(getCompiledTemplateFileNameStub.calledOnce).to.equal(true);\n      expect(writeFileSyncStub.calledWithExactly(filePath, 'compiled content')).to.equal(true);\n    });\n  });","file":"unit/lib/plugins/aws/package/lib/save-compiled-template.test.js","skipped":false,"dir":"test"},{"name":"should write the service state file template to disk","suites":["#saveServiceState()"],"updatePoint":{"line":40,"column":58,"index":1469},"line":40,"code":"  it('should write the service state file template to disk', async () => {\n    const filePath = path.join(awsPackage.serverless.serviceDir, '.serverless', 'service-state.json');\n    await awsPackage.saveServiceState();\n    const expectedStateFileContent = {\n      service: {\n        provider: {\n          compiledCloudFormationTemplate: 'compiled content'\n        }\n      },\n      package: {\n        individually: false,\n        artifactDirectoryName: 'artifact-directory',\n        artifact: 'service.zip'\n      }\n    };\n    expect(getServiceStateFileNameStub.calledOnce).to.equal(true);\n    expect(writeFileSyncStub.calledWithExactly(filePath, expectedStateFileContent, true)).to.equal(true);\n  });","file":"unit/lib/plugins/aws/package/lib/save-service-state.test.js","skipped":false,"dir":"test"},{"name":"Should remove null properties from the final cloudformation template resources","suites":["test/unit/lib/plugins/aws/package/lib/stripNullPropsFromTemplateResources.test.js"],"updatePoint":{"line":56,"column":84,"index":1656},"line":56,"code":"  it('Should remove null properties from the final cloudformation template resources', async () => {\n    expect(Object.keys(finalTemplate.Resources.myBucket.Properties).length).to.equal(0);\n  });","file":"unit/lib/plugins/aws/package/lib/strip-null-props-from-template-resources.test.js","skipped":false,"dir":"test"},{"name":"Should remove null values within nested objects in resource properties","suites":["test/unit/lib/plugins/aws/package/lib/stripNullPropsFromTemplateResources.test.js"],"updatePoint":{"line":59,"column":76,"index":1844},"line":59,"code":"  it('Should remove null values within nested objects in resource properties', async () => {\n    expect(Object.keys(finalTemplate.Resources.myLambdaFunction.Properties.Environment.Variables).length).to.equal(0);\n  });","file":"unit/lib/plugins/aws/package/lib/strip-null-props-from-template-resources.test.js","skipped":false,"dir":"test"},{"name":"Should not affect resources without null props","suites":["test/unit/lib/plugins/aws/package/lib/stripNullPropsFromTemplateResources.test.js"],"updatePoint":{"line":62,"column":52,"index":2038},"line":62,"code":"  it('Should not affect resources without null props', async () => {\n    expect(Object.keys(finalTemplate.Resources.anotherBucket.Properties).length).to.equal(1);\n  });","file":"unit/lib/plugins/aws/package/lib/strip-null-props-from-template-resources.test.js","skipped":false,"dir":"test"},{"name":"Should strip out Properties if it is defined with null value","suites":["test/unit/lib/plugins/aws/package/lib/stripNullPropsFromTemplateResources.test.js"],"updatePoint":{"line":65,"column":66,"index":2221},"line":65,"code":"  it('Should strip out Properties if it is defined with null value', async () => {\n    expect(Object.prototype.hasOwnProperty.call(finalTemplate.Resources.resourceWithNullProperties, 'Properties')).to.equal(false);\n  });","file":"unit/lib/plugins/aws/package/lib/strip-null-props-from-template-resources.test.js","skipped":false,"dir":"test"},{"name":"should set Serverless instance","suites":["AwsProvider","#constructor()"],"updatePoint":{"line":40,"column":38,"index":1181},"line":40,"code":"    it('should set Serverless instance', () => {\n      expect(typeof awsProvider.serverless).to.not.equal('undefined');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should set the provider property","suites":["AwsProvider","#constructor()"],"updatePoint":{"line":43,"column":40,"index":1311},"line":43,"code":"    it('should set the provider property', () => {\n      expect(awsProvider.provider).to.equal(awsProvider);\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should not throw an error before variable population\n            even if http event is present and stage is ","suites":["AwsProvider","#constructor()","stage name validation"],"updatePoint":{"line":50,"column":63,"index":1676},"line":49,"code":"        it(`should not throw an error before variable population\n            even if http event is present and stage is ${stage}`, () => {\n          const config = {\n            stage,\n            commands: [],\n            options: {}\n          };\n          serverless = new Serverless(config);\n          const serverlessYml = {\n            service: 'new-service',\n            provider: {\n              name: 'aws',\n              stage\n            },\n            functions: {\n              first: {\n                events: [{\n                  http: {\n                    path: 'foo',\n                    method: 'GET'\n                  }\n                }]\n              }\n            }\n          };\n          serverless.service = new serverless.classes.Service(serverless, serverlessYml);\n          expect(() => new AwsProvider(serverless, config)).to.not.throw(Error);\n        });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should do nothing if not defined","suites":["AwsProvider","#constructor()","deploymentBucket configuration"],"updatePoint":{"line":80,"column":42,"index":2547},"line":80,"code":"      it('should do nothing if not defined', () => {\n        serverless.service.provider.deploymentBucket = undefined;\n        const newAwsProvider = new AwsProvider(serverless, options);\n        expect(newAwsProvider.serverless.service.provider.deploymentBucket).to.equal(undefined);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should do nothing if the value is a string","suites":["AwsProvider","#constructor()","deploymentBucket configuration"],"updatePoint":{"line":85,"column":52,"index":2852},"line":85,"code":"      it('should do nothing if the value is a string', () => {\n        serverless.service.provider.deploymentBucket = 'my.deployment.bucket';\n        const newAwsProvider = new AwsProvider(serverless, options);\n        expect(newAwsProvider.serverless.service.provider.deploymentBucket).to.equal('my.deployment.bucket');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return an array of values given paths to them","suites":["AwsProvider","values","#getValues"],"updatePoint":{"line":114,"column":62,"index":3623},"line":114,"code":"      it('should return an array of values given paths to them', () => {\n        expect(awsProvider.getValues(obj, paths)).to.eql(getExpected);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should ignore entries without a 'value' attribute","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":119,"column":59,"index":3818},"line":119,"code":"      it(\"should ignore entries without a 'value' attribute\", () => {\n        const input = _.cloneDeep(getExpected);\n        delete input[0].value;\n        delete input[2].value;\n        expect(awsProvider.firstValue(input)).to.eql(getExpected[1]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should ignore entries with an undefined 'value' attribute","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":125,"column":67,"index":4086},"line":125,"code":"      it(\"should ignore entries with an undefined 'value' attribute\", () => {\n        const input = _.cloneDeep(getExpected);\n        input[0].value = undefined;\n        input[2].value = undefined;\n        expect(awsProvider.firstValue(input)).to.eql(getExpected[1]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the first value","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":131,"column":39,"index":4336},"line":131,"code":"      it('should return the first value', () => {\n        expect(awsProvider.firstValue(getExpected)).to.equal(getExpected[0]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the middle value","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":134,"column":40,"index":4475},"line":134,"code":"      it('should return the middle value', () => {\n        const input = _.cloneDeep(getExpected);\n        delete input[0].value;\n        delete input[2].value;\n        expect(awsProvider.firstValue(input)).to.equal(input[1]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the last value","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":140,"column":38,"index":4710},"line":140,"code":"      it('should return the last value', () => {\n        const input = _.cloneDeep(getExpected);\n        delete input[0].value;\n        delete input[1].value;\n        expect(awsProvider.firstValue(input)).to.equal(input[2]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the last object if none have valid values","suites":["AwsProvider","values","#firstValue"],"updatePoint":{"line":146,"column":65,"index":4972},"line":146,"code":"      it('should return the last object if none have valid values', () => {\n        const input = _.cloneDeep(getExpected);\n        delete input[0].value;\n        delete input[1].value;\n        delete input[2].value;\n        expect(awsProvider.firstValue(input)).to.equal(input[2]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should pass resolved credentials as expected","suites":["AwsProvider","#request()"],"updatePoint":{"line":172,"column":52,"index":5863},"line":172,"code":"    it('should pass resolved credentials as expected', async () => {\n      awsProviderProxied.cachedCredentials = {\n        accessKeyId: 'accessKeyId',\n        secretAccessKey: 'secretAccessKey',\n        sessionToken: 'sessionToken'\n      };\n      await awsProviderProxied.request('S3', 'getObject', {});\n      expect(awsRequestStub.args[0][0]).to.deep.equal({\n        name: 'S3',\n        params: {\n          ...awsProviderProxied.cachedCredentials,\n          region: 'us-east-1',\n          isS3TransferAccelerationEnabled: false\n        }\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should trigger the expected AWS SDK invokation","suites":["AwsProvider","#request()"],"updatePoint":{"line":188,"column":54,"index":6423},"line":188,"code":"    it('should trigger the expected AWS SDK invokation', async () => {\n      return awsProviderProxied.request('S3', 'getObject', {}).then(() => {\n        expect(awsRequestStub).to.have.been.calledOnce;\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should use local cache when using {useCache: true}","suites":["AwsProvider","#request()"],"updatePoint":{"line":193,"column":58,"index":6648},"line":193,"code":"    it('should use local cache when using {useCache: true}', async () => {\n      return awsProviderProxied.request('S3', 'getObject', {}, {\n        useCache: true\n      }).then(() => awsProviderProxied.request('S3', 'getObject', {}, {\n        useCache: true\n      })).then(() => {\n        expect(awsRequestStub).to.not.have.been.called;\n        expect(awsRequestStub.memoized).to.have.been.calledTwice;\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the serverless deployment bucket","suites":["AwsProvider","#getServerlessDeploymentBucketName()"],"updatePoint":{"line":205,"column":66,"index":7142},"line":205,"code":"    it('should return the name of the serverless deployment bucket', async () => {\n      const describeStackResourcesStub = sinon.stub(awsProvider, 'request').resolves({\n        StackResourceDetail: {\n          PhysicalResourceId: 'serverlessDeploymentBucketName'\n        }\n      });\n      return awsProvider.getServerlessDeploymentBucketName().then(bucketName => {\n        expect(bucketName).to.equal('serverlessDeploymentBucketName');\n        expect(describeStackResourcesStub.calledOnce).to.be.equal(true);\n        expect(describeStackResourcesStub.calledWithExactly('CloudFormation', 'describeStackResource', {\n          StackName: awsProvider.naming.getStackName(),\n          LogicalResourceId: awsProvider.naming.getDeploymentBucketLogicalId()\n        })).to.be.equal(true);\n        awsProvider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the name of the custom deployment bucket","suites":["AwsProvider","#getServerlessDeploymentBucketName()"],"updatePoint":{"line":221,"column":62,"index":7976},"line":221,"code":"    it('should return the name of the custom deployment bucket', async () => {\n      awsProvider.serverless.service.provider.deploymentBucket = 'custom-bucket';\n      const describeStackResourcesStub = sinon.stub(awsProvider, 'request').resolves({\n        StackResourceDetail: {\n          PhysicalResourceId: 'serverlessDeploymentBucketName'\n        }\n      });\n      return awsProvider.getServerlessDeploymentBucketName().then(bucketName => {\n        expect(describeStackResourcesStub.called).to.be.equal(false);\n        expect(bucketName).to.equal('custom-bucket');\n        awsProvider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the AWS account id and partition","suites":["AwsProvider","#getAccountInfo()"],"updatePoint":{"line":236,"column":54,"index":8639},"line":236,"code":"    it('should return the AWS account id and partition', async () => {\n      const accountId = '12345678';\n      const partition = 'aws';\n      const stsGetCallerIdentityStub = sinon.stub(awsProvider, 'request').resolves({\n        ResponseMetadata: {\n          RequestId: '12345678-1234-1234-1234-123456789012'\n        },\n        UserId: 'ABCDEFGHIJKLMNOPQRSTU:VWXYZ',\n        Account: accountId,\n        Arn: 'arn:aws:sts::123456789012:assumed-role/ROLE-NAME/VWXYZ'\n      });\n      return awsProvider.getAccountInfo().then(result => {\n        expect(stsGetCallerIdentityStub.calledOnce).to.equal(true);\n        expect(result.accountId).to.equal(accountId);\n        expect(result.partition).to.equal(partition);\n        awsProvider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return the AWS account id","suites":["AwsProvider","#getAccountId()"],"updatePoint":{"line":256,"column":40,"index":9438},"line":256,"code":"    it('should return the AWS account id', async () => {\n      const accountId = '12345678';\n      const stsGetCallerIdentityStub = sinon.stub(awsProvider, 'request').resolves({\n        ResponseMetadata: {\n          RequestId: '12345678-1234-1234-1234-123456789012'\n        },\n        UserId: 'ABCDEFGHIJKLMNOPQRSTU:VWXYZ',\n        Account: accountId,\n        Arn: 'arn:aws:sts::123456789012:assumed-role/ROLE-NAME/VWXYZ'\n      });\n      return awsProvider.getAccountId().then(result => {\n        expect(stsGetCallerIdentityStub.calledOnce).to.equal(true);\n        expect(result).to.equal(accountId);\n        awsProvider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return false by default","suites":["AwsProvider","#isS3TransferAccelerationEnabled()"],"updatePoint":{"line":274,"column":38,"index":10157},"line":274,"code":"    it('should return false by default', () => {\n      awsProvider.options['aws-s3-accelerate'] = undefined;\n      return expect(awsProvider.isS3TransferAccelerationEnabled()).to.equal(false);\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should return true when CLI option is provided","suites":["AwsProvider","#isS3TransferAccelerationEnabled()"],"updatePoint":{"line":278,"column":54,"index":10374},"line":278,"code":"    it('should return true when CLI option is provided', () => {\n      awsProvider.options['aws-s3-accelerate'] = true;\n      return expect(awsProvider.isS3TransferAccelerationEnabled()).to.equal(true);\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should remove the corresponding option for the current deploy","suites":["AwsProvider","#disableTransferAccelerationForCurrentDeploy()"],"updatePoint":{"line":284,"column":69,"index":10675},"line":284,"code":"    it('should remove the corresponding option for the current deploy', () => {\n      awsProvider.options['aws-s3-accelerate'] = true;\n      awsProvider.disableTransferAccelerationForCurrentDeploy();\n      return expect(awsProvider.options['aws-s3-accelerate']).to.be.undefined;\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"`AwsProvider.getProviderName()` should resolve provider name","suites":["test/unit/lib/plugins/aws/provider.test.js","#getProviderName and #sessionCache"],"updatePoint":{"line":342,"column":68,"index":12463},"line":342,"code":"    it('`AwsProvider.getProviderName()` should resolve provider name', () => {\n      expect(AwsProvider.getProviderName()).to.equal('aws');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should retain sessionToken eventually updated internally by SDK","suites":["test/unit/lib/plugins/aws/provider.test.js","#getProviderName and #sessionCache"],"updatePoint":{"line":345,"column":71,"index":12614},"line":345,"code":"    it('should retain sessionToken eventually updated internally by SDK', async () => {\n      expect(sls.getProvider('aws').getCredentials().credentials.sessionToken).not.to.equal(expectedToken);\n      await sls.getProvider('aws').request('CloudFormation', 'describeStacks');\n      expect(sls.getProvider('aws').getCredentials().credentials.sessionToken).to.equal(expectedToken);\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from default AWS profile","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()"],"updatePoint":{"line":371,"column":55,"index":13583},"line":371,"code":"    it('should get credentials from default AWS profile', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print'\n      });\n      const awsCredentials = serverless.getProvider('aws').getCredentials();\n      expect(awsCredentials.credentials.accessKeyId).to.equal('DEFAULTKEYID');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from custom default AWS profile, set by AWS_DEFAULT_PROFILE","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()"],"updatePoint":{"line":381,"column":90,"index":13978},"line":381,"code":"    it('should get credentials from custom default AWS profile, set by AWS_DEFAULT_PROFILE', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print'\n      });\n      // getCredentials resolve the env when called\n      let awsCredentials;\n      overrideEnv(() => {\n        process.env.AWS_DEFAULT_PROFILE = 'notDefault';\n        awsCredentials = serverless.getProvider('aws').getCredentials();\n      });\n      expect(awsCredentials.credentials.accessKeyId).to.equal('NOTDEFAULTKEYID');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from `provider.profile`","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","assume role with provider.profile"],"updatePoint":{"line":412,"column":56,"index":14956},"line":412,"code":"      it('should get credentials from `provider.profile`', () => {\n        expect(awsCredentials.credentials.profile).to.equal('notDefaultWithRole');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should accept a role to assume on credentials","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","assume role with provider.profile"],"updatePoint":{"line":415,"column":55,"index":15115},"line":415,"code":"      it('should accept a role to assume on credentials', () => {\n        expect(awsCredentials.credentials.roleArn).to.equal('NOTDEFAULTWITHROLEROLE');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from environment variables","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","assume role with provider.profile"],"updatePoint":{"line":419,"column":57,"index":15288},"line":419,"code":"    it('should get credentials from environment variables', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print'\n      });\n      let awsCredentials;\n      // getCredentials resolve the env when called\n      overrideEnv(() => {\n        process.env.AWS_ACCESS_KEY_ID = 'ENVKEYID';\n        process.env.AWS_SECRET_ACCESS_KEY = 'ENVSECRET';\n        awsCredentials = serverless.getProvider('aws').getCredentials();\n      });\n      expect(awsCredentials.credentials.accessKeyId).to.equal('ENVKEYID');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from AWS_PROFILE environment variable","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with non default credentials file"],"updatePoint":{"line":465,"column":70,"index":16880},"line":465,"code":"      it('should get credentials from AWS_PROFILE environment variable', () => {\n        expect(awsCredentials.credentials.profile).to.equal('customProfile');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from AWS_SHARED_CREDENTIALS_FILE environment variable","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with non default credentials file"],"updatePoint":{"line":468,"column":86,"index":17065},"line":468,"code":"      it('should get credentials from AWS_SHARED_CREDENTIALS_FILE environment variable', () => {\n        expect(awsCredentials.credentials.accessKeyId).to.equal('CUSTOMKEYID');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from stage specific environment variables","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with non default credentials file"],"updatePoint":{"line":472,"column":72,"index":17246},"line":472,"code":"    it('should get credentials from stage specific environment variables', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        configExt: {\n          provider: {\n            stage: 'testStage'\n          }\n        }\n      });\n      let awsCredentials;\n      overrideEnv(() => {\n        process.env.AWS_TESTSTAGE_ACCESS_KEY_ID = 'TESTSTAGEACCESSKEYID';\n        process.env.AWS_TESTSTAGE_SECRET_ACCESS_KEY = 'TESTSTAGESECRET';\n        awsCredentials = serverless.getProvider('aws').getCredentials();\n      });\n      expect(awsCredentials.credentials.accessKeyId).to.equal('TESTSTAGEACCESSKEYID');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials from AWS_{stage}_PROFILE environment variable","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with non default credentials file"],"updatePoint":{"line":492,"column":76,"index":17937},"line":492,"code":"    it('should get credentials from AWS_{stage}_PROFILE environment variable', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        configExt: {\n          provider: {\n            stage: 'testStage'\n          }\n        }\n      });\n      let awsCredentials;\n      overrideEnv(() => {\n        process.env.AWS_TESTSTAGE_PROFILE = 'notDefault';\n        awsCredentials = serverless.getProvider('aws').getCredentials();\n      });\n      expect(awsCredentials.credentials.accessKeyId).to.equal('NOTDEFAULTKEYID');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should get credentials \"--aws-profile\" CLI option","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with cli and encryption"],"updatePoint":{"line":532,"column":59,"index":19091},"line":532,"code":"      it('should get credentials \"--aws-profile\" CLI option', () => {\n        expect(awsCredentials.credentials.accessKeyId).to.equal('NOTDEFAULTKEYID');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should set the signatureVersion to v4 if the serverSideEncryption is aws:kms","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with cli and encryption"],"updatePoint":{"line":535,"column":86,"index":19282},"line":535,"code":"      it('should set the signatureVersion to v4 if the serverSideEncryption is aws:kms', () => {\n        expect(awsCredentials.signatureVersion).to.equal('v4');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if a non-existent profile is set","suites":["test/unit/lib/plugins/aws/provider.test.js","#getCredentials()","profile with cli and encryption"],"updatePoint":{"line":539,"column":62,"index":19437},"line":539,"code":"    it('should throw an error if a non-existent profile is set', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        options: {\n          'aws-profile': 'nonExistent'\n        }\n      });\n      expect(() => serverless.getProvider('aws').getCredentials()).to.throw(Error);\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should default to \"us-east-1\"","suites":["test/unit/lib/plugins/aws/provider.test.js","#getRegion()"],"updatePoint":{"line":553,"column":37,"index":19817},"line":553,"code":"    it('should default to \"us-east-1\"', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print'\n      });\n      expect(serverless.getProvider('aws').getRegion()).to.equal('us-east-1');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to override via `provider.region`","suites":["test/unit/lib/plugins/aws/provider.test.js","#getRegion()"],"updatePoint":{"line":562,"column":54,"index":20099},"line":562,"code":"    it('should allow to override via `provider.region`', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        configExt: {\n          provider: {\n            region: 'eu-central-1'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getRegion()).to.equal('eu-central-1');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to override via CLI `--region` param","suites":["test/unit/lib/plugins/aws/provider.test.js","#getRegion()"],"updatePoint":{"line":576,"column":57,"index":20488},"line":576,"code":"    it('should allow to override via CLI `--region` param', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        options: {\n          region: 'us-west-1'\n        },\n        configExt: {\n          provider: {\n            region: 'eu-central-1'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getRegion()).to.equal('us-west-1');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to set via `provider.profile`","suites":["test/unit/lib/plugins/aws/provider.test.js","#getProfile()"],"updatePoint":{"line":595,"column":50,"index":20969},"line":595,"code":"    it('should allow to set via `provider.profile`', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        configExt: {\n          provider: {\n            profile: 'test-profile'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getProfile()).to.equal('test-profile');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to set via CLI `--profile` param","suites":["test/unit/lib/plugins/aws/provider.test.js","#getProfile()"],"updatePoint":{"line":609,"column":53,"index":21356},"line":609,"code":"    it('should allow to set via CLI `--profile` param', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        options: {\n          profile: 'cli-override'\n        },\n        configExt: {\n          provider: {\n            profile: 'test-profile'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getProfile()).to.equal('cli-override');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to set via CLI `--aws-profile` param","suites":["test/unit/lib/plugins/aws/provider.test.js","#getProfile()"],"updatePoint":{"line":626,"column":57,"index":21811},"line":626,"code":"    it('should allow to set via CLI `--aws-profile` param', async () => {\n      // Test with `provider.profile` `--profile` and `--aws-pofile` CLI param set\n      // Confirm that `--aws-profile` overrides\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        options: {\n          'profile': 'cli-override',\n          'aws-profile': 'aws-override'\n        },\n        configExt: {\n          provider: {\n            profile: 'test-profile'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getProfile()).to.equal('aws-override');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should put all artifacts in namespaced folder","suites":["test/unit/lib/plugins/aws/provider.test.js","#getDeploymentPrefix()"],"updatePoint":{"line":648,"column":53,"index":22487},"line":648,"code":"    it('should put all artifacts in namespaced folder', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package'\n      });\n      const functions = Object.values(cfTemplate.Resources).filter(r => r.Type === 'AWS::Lambda::Function');\n      expect(functions.length).to.be.greaterThanOrEqual(1);\n      for (const f of functions) {\n        expect(f.Properties.Code.S3Key).to.be.a('string').and.satisfy(key => key.startsWith('serverless/'));\n      }\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support custom namespaced folder","suites":["test/unit/lib/plugins/aws/provider.test.js","#getDeploymentPrefix()"],"updatePoint":{"line":661,"column":47,"index":23011},"line":661,"code":"    it('should support custom namespaced folder', async () => {\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            deploymentPrefix: 'test-prefix'\n          }\n        }\n      });\n      const functions = Object.values(cfTemplate.Resources).filter(r => r.Type === 'AWS::Lambda::Function');\n      expect(functions.length).to.be.greaterThanOrEqual(1);\n      for (const f of functions) {\n        expect(f.Properties.Code.S3Key).to.be.a('string').and.satisfy(key => key.startsWith('test-prefix/'));\n      }\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `provider.alb.targetGroupPrefix`","suites":["test/unit/lib/plugins/aws/provider.test.js","#getAlbTargetGroupPrefix()"],"updatePoint":{"line":681,"column":55,"index":23709},"line":681,"code":"    it('should support `provider.alb.targetGroupPrefix`', async () => {\n      const albId = '50dc6c495c0c9188';\n      const validBaseEventConfig = {\n        listenerArn: `arn:aws:elasticloadbalancing:us-east-1:123456789012:listener/app/my-load-balancer/${albId}/f2f7dc8efc522ab2`,\n        conditions: {\n          path: '/'\n        }\n      };\n      const {\n        cfTemplate\n      } = await runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            alb: {\n              targetGroupPrefix: 'a-prefix'\n            }\n          },\n          functions: {\n            fnTargetGroupName: {\n              handler: 'index.handler',\n              events: [{\n                alb: {\n                  ...validBaseEventConfig,\n                  priority: 1\n                }\n              }]\n            }\n          }\n        }\n      });\n      const targetGroups = Object.values(cfTemplate.Resources).filter(r => r.Type === 'AWS::ElasticLoadBalancingV2::TargetGroup');\n      expect(targetGroups.length).to.be.greaterThanOrEqual(1);\n      for (const t of targetGroups) {\n        expect(t.Properties.Name).to.be.a('string').and.satisfy(key => key.startsWith('a-prefix'));\n      }\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should default to \"dev\"","suites":["test/unit/lib/plugins/aws/provider.test.js","#getStage()"],"updatePoint":{"line":721,"column":31,"index":24968},"line":721,"code":"    it('should default to \"dev\"', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print'\n      });\n      expect(serverless.getProvider('aws').getStage()).to.equal('dev');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to override via `provider.stage`","suites":["test/unit/lib/plugins/aws/provider.test.js","#getStage()"],"updatePoint":{"line":730,"column":53,"index":25242},"line":730,"code":"    it('should allow to override via `provider.stage`', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        configExt: {\n          provider: {\n            stage: 'staging'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getStage()).to.equal('staging');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should allow to override via CLI `--stage` param","suites":["test/unit/lib/plugins/aws/provider.test.js","#getStage()"],"updatePoint":{"line":744,"column":56,"index":25618},"line":744,"code":"    it('should allow to override via CLI `--stage` param', async () => {\n      const {\n        serverless\n      } = await runServerless({\n        fixture: 'aws',\n        command: 'print',\n        options: {\n          stage: 'production'\n        },\n        configExt: {\n          provider: {\n            stage: 'staging'\n          }\n        }\n      });\n      expect(serverless.getProvider('aws').getStage()).to.equal('production');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image with both path and uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":763,"column":82,"index":26133},"line":763,"code":"    it('should fail if `functions[].image` references image with both path and uri', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                invalidimage: {\n                  path: './',\n                  uri: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n                }\n              }\n            }\n          },\n          functions: {\n            fnProviderInvalidImage: {\n              image: 'invalidimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'ECR_IMAGE_BOTH_URI_AND_PATH_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image with both buildArgs and uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":786,"column":87,"index":26948},"line":786,"code":"    it('should fail if `functions[].image` references image with both buildArgs and uri', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                invalidimage: {\n                  buildArgs: {\n                    TESTKEY: 'TESTVAL'\n                  },\n                  uri: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n                }\n              }\n            }\n          },\n          functions: {\n            fnProviderInvalidImage: {\n              image: 'invalidimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'ECR_IMAGE_BOTH_URI_AND_BUILDARGS_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image with both cacheFrom and uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":811,"column":87,"index":27829},"line":811,"code":"    it('should fail if `functions[].image` references image with both cacheFrom and uri', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                invalidimage: {\n                  cacheFrom: ['my-image:latest'],\n                  uri: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n                }\n              }\n            }\n          },\n          functions: {\n            fnProviderInvalidImage: {\n              image: 'invalidimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'ECR_IMAGE_BOTH_URI_AND_CACHEFROM_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image with both platform and uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":834,"column":86,"index":28668},"line":834,"code":"    it('should fail if `functions[].image` references image with both platform and uri', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                invalidimage: {\n                  platform: 'TESTVAL',\n                  uri: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n                }\n              }\n            }\n          },\n          functions: {\n            fnProviderInvalidImage: {\n              image: 'invalidimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'ECR_IMAGE_BOTH_URI_AND_PLATFORM_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image without path and uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":857,"column":80,"index":29489},"line":857,"code":"    it('should fail if `functions[].image` references image without path and uri', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                invalidimage: {}\n              }\n            }\n          },\n          functions: {\n            fnProviderInvalidImage: {\n              image: 'invalidimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'ECR_IMAGE_NEITHER_URI_NOR_PATH_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image from `provider.ecr.images` that has invalid path","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":877,"column":108,"index":30120},"line":877,"code":"    it('should fail if `functions[].image` references image from `provider.ecr.images` that has invalid path', async () => {\n      await expect(runServerless({\n        fixture: 'ecr',\n        command: 'package',\n        shouldStubSpawn: true,\n        configExt: {\n          provider: {\n            ecr: {\n              images: {\n                baseimage: {\n                  path: './invalid'\n                }\n              }\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'DOCKERFILE_NOT_AVAILABLE_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if `functions[].image` references image not defined in `provider.ecr.images`","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":895,"column":96,"index":30677},"line":895,"code":"    it('should fail if `functions[].image` references image not defined in `provider.ecr.images`', async () => {\n      await expect(runServerless({\n        fixture: 'function',\n        command: 'package',\n        configExt: {\n          functions: {\n            fnInvalid: {\n              image: 'undefinedimage'\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'REFERENCED_FUNCTION_IMAGE_NOT_DEFINED_IN_PROVIDER');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if both uri and name is provided for an image","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":908,"column":65,"index":31118},"line":908,"code":"    it('should fail if both uri and name is provided for an image', async () => {\n      await expect(runServerless({\n        fixture: 'ecr',\n        command: 'package',\n        shouldStubSpawn: true,\n        configExt: {\n          functions: {\n            foo: {\n              image: {\n                name: 'baseimage',\n                uri: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n              }\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'FUNCTION_IMAGE_BOTH_URI_AND_NAME_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail if neither uri nor name is provided for an image","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images"],"updatePoint":{"line":925,"column":68,"index":31774},"line":925,"code":"    it('should fail if neither uri nor name is provided for an image', async () => {\n      await expect(runServerless({\n        fixture: 'ecr',\n        command: 'package',\n        shouldStubSpawn: true,\n        configExt: {\n          functions: {\n            foo: {\n              image: {}\n            }\n          }\n        }\n      })).to.be.eventually.rejected.and.have.property('code', 'FUNCTION_IMAGE_NEITHER_URI_NOR_NAME_DEFINED_ERROR');\n    });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with implicit uri with sha","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1005,"column":71,"index":34629},"line":1005,"code":"      it('should support `functions[].image` with implicit uri with sha', () => {\n        const functionServiceConfig = serviceConfig.functions.fnImage;\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnImage');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: functionServiceConfig.image\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const imageDigest = functionServiceConfig.image.slice(functionServiceConfig.image.lastIndexOf('@') + 1);\n        expect(imageDigest).to.match(/^sha256:[a-f0-9]{64}$/);\n        const imageDigestSha = imageDigest.slice('sha256:'.length);\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageDigestSha);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with explicit uri with sha","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1020,"column":71,"index":35590},"line":1020,"code":"      it('should support `functions[].image` with explicit uri with sha', () => {\n        const functionServiceConfig = serviceConfig.functions.fnImageWithExplicitUri;\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnImageWithExplicitUri');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: functionServiceConfig.image.uri\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const imageDigest = functionServiceConfig.image.uri.slice(functionServiceConfig.image.uri.lastIndexOf('@') + 1);\n        expect(imageDigest).to.match(/^sha256:[a-f0-9]{64}$/);\n        const imageDigestSha = imageDigest.slice('sha256:'.length);\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageDigestSha);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with tag","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1035,"column":53,"index":36575},"line":1035,"code":"      it('should support `functions[].image` with tag', () => {\n        const functionServiceConfig = serviceConfig.functions.fnImageWithTag;\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnImageWithTag');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: `${functionServiceConfig.image.split(':')[0]}@${imageDigestFromECR}`\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageDigestFromECR.slice('sha256:'.length));\n        expect(describeImagesStub).to.be.calledWith({\n          imageIds: [{\n            imageTag: 'stable'\n          }],\n          registryId: '000000000000',\n          repositoryName: 'test-lambda-docker'\n        });\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` with tag and repository name with slash","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1054,"column":84,"index":37607},"line":1054,"code":"      it('should support `functions[].image` with tag and repository name with slash', () => {\n        const functionServiceConfig = serviceConfig.functions.fnImageWithTagAndRepoWithSlashes;\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnImageWithTagAndRepoWithSlashes');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: `${functionServiceConfig.image.split(':')[0]}@${imageDigestFromECR}`\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageDigestFromECR.slice('sha256:'.length));\n        expect(describeImagesStub).to.be.calledWith({\n          imageIds: [{\n            imageTag: 'stable'\n          }],\n          registryId: '000000000000',\n          repositoryName: 'test-lambda/repo-docker'\n        });\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` that references provider.ecr.images defined with explicit uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1073,"column":106,"index":38702},"line":1073,"code":"      it('should support `functions[].image` that references provider.ecr.images defined with explicit uri', () => {\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnProviderImageWithExplicitUri');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: imageWithSha\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].image` that references provider.ecr.images defined with implicit uri","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1084,"column":106,"index":39385},"line":1084,"code":"      it('should support `functions[].image` that references provider.ecr.images defined with implicit uri', () => {\n        const functionCfLogicalId = naming.getLambdaLogicalId('fnProviderImageWithImplicitUri');\n        const functionCfConfig = cfResources[functionCfLogicalId].Properties;\n        expect(functionCfConfig.Code).to.deep.equal({\n          ImageUri: imageWithSha\n        });\n        expect(functionCfConfig).to.not.have.property('Handler');\n        expect(functionCfConfig).to.not.have.property('Runtime');\n        const versionCfConfig = findVersionCfConfig(cfResources, functionCfLogicalId);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when `functions[].image` when image uri region does not match the provider region","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing existing images"],"updatePoint":{"line":1095,"column":103,"index":40065},"line":1095,"code":"      it('should fail when `functions[].image` when image uri region does not match the provider region', async () => {\n        const imageRegion = 'sa-east-1';\n        const imageWithoutSha = `000000000000.dkr.ecr.${imageRegion}.amazonaws.com/test-lambda-docker`;\n        await expect(runServerless({\n          fixture: 'function',\n          command: 'package',\n          configExt: {\n            provider: {\n              region: 'us-east-1'\n            },\n            functions: {\n              fnImageWithExplicitUriInvalidRegion: {\n                image: imageWithoutSha\n              }\n            }\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'LAMBDA_ECR_REGION_MISMATCH_ERROR');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when repository exists beforehand","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1159,"column":65,"index":42414},"line":1159,"code":"      it('should work correctly when repository exists beforehand', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = findVersionCfConfig(cfTemplate.Resources, functionCfLogicalId);\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(spawnExtStub).to.be.calledWith('docker', ['--version']);\n        expect(spawnExtStub).not.to.be.calledWith('docker', ['login', '--username', 'AWS', '--password', 'dockerauthtoken', proxyEndpoint]);\n        expect(spawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile'), './']);\n        expect(spawnExtStub).to.be.calledWith('docker', ['tag', `${awsNaming.getEcrRepositoryName()}:baseimage`, `${repositoryUri}:baseimage`]);\n        expect(spawnExtStub).to.be.calledWith('docker', ['push', `${repositoryUri}:baseimage`]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when repository does not exist beforehand and scanOnPush is set","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1197,"column":95,"index":44360},"line":1197,"code":"      it('should work correctly when repository does not exist beforehand and scanOnPush is set', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.throws({\n              providerError: {\n                code: 'RepositoryNotFoundException'\n              }\n            }),\n            createRepository: createRepositoryStubScanOnPush.resolves({\n              repository: {\n                repositoryUri\n              }\n            })\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                scanOnPush: true,\n                images: {\n                  baseimage: {\n                    path: './',\n                    file: 'Dockerfile.dev'\n                  }\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = findVersionCfConfig(cfTemplate.Resources, functionCfLogicalId);\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStubScanOnPush).to.be.calledOnce;\n        expect(createRepositoryStubScanOnPush.args[0][0].imageScanningConfiguration).to.deep.equal({\n          scanOnPush: true\n        });\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when repository does not exist beforehand","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1247,"column":73,"index":46173},"line":1247,"code":"      it('should work correctly when repository does not exist beforehand', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.throws({\n              providerError: {\n                code: 'RepositoryNotFoundException'\n              }\n            }),\n            createRepository: createRepositoryStub.resolves({\n              repository: {\n                repositoryUri\n              }\n            })\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = findVersionCfConfig(cfTemplate.Resources, functionCfLogicalId);\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub).to.be.calledOnce;\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should login and retry when docker push fails with no basic auth credentials error","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1281,"column":92,"index":47530},"line":1281,"code":"      it('should login and retry when docker push fails with no basic auth credentials error', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const innerSpawnExtStub = sinon.stub().returns({\n          stdBuffer: `digest: sha256:${imageSha} size: 1787`\n        }).onCall(3).throws({\n          stdBuffer: 'no basic auth credentials'\n        });\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': innerSpawnExtStub\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = findVersionCfConfig(cfTemplate.Resources, functionCfLogicalId);\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['--version']);\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile'), './']);\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['tag', `${awsNaming.getEcrRepositoryName()}:baseimage`, `${repositoryUri}:baseimage`]);\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['push', `${repositoryUri}:baseimage`]);\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['login', '--username', 'AWS', '--password', 'dockerauthtoken', proxyEndpoint]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should login and retry when docker push fails with token has expired error","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1327,"column":84,"index":49800},"line":1327,"code":"      it('should login and retry when docker push fails with token has expired error', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const innerSpawnExtStub = sinon.stub().returns({\n          stdBuffer: `digest: sha256:${imageSha} size: 1787`\n        }).onCall(3).throws({\n          stdBuffer: 'authorization token has expired'\n        });\n        await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': innerSpawnExtStub\n          }\n        });\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['push', `${repositoryUri}:baseimage`]);\n        expect(innerSpawnExtStub).to.be.calledWith('docker', ['login', '--username', 'AWS', '--password', 'dockerauthtoken', proxyEndpoint]);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when image is defined with implicit path in provider","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1357,"column":84,"index":50998},"line":1357,"code":"      it('should work correctly when image is defined with implicit path in provider', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: './'\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = Object.values(cfTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when image is defined with `file` set","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1396,"column":69,"index":52513},"line":1396,"code":"      it('should work correctly when image is defined with `file` set', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: {\n                    path: './',\n                    file: 'Dockerfile.dev'\n                  }\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = Object.values(cfTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(spawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile.dev'), './']);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when image is defined with `cacheFrom` set","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1442,"column":74,"index":54375},"line":1442,"code":"      it('should work correctly when image is defined with `cacheFrom` set', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: {\n                    path: './',\n                    file: 'Dockerfile.dev',\n                    cacheFrom: ['my-image:latest']\n                  }\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = Object.values(cfTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(spawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile.dev'), '--cache-from', 'my-image:latest', './']);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when image is defined with `buildArgs` set","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1489,"column":74,"index":56324},"line":1489,"code":"      it('should work correctly when image is defined with `buildArgs` set', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: {\n                    path: './',\n                    file: 'Dockerfile.dev',\n                    buildArgs: {\n                      TESTKEY: 'TESTVAL'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = Object.values(cfTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(spawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile.dev'), '--build-arg', 'TESTKEY=TESTVAL', './']);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when image is defined with `platform` set","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1538,"column":73,"index":58316},"line":1538,"code":"      it('should work correctly when image is defined with `platform` set', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate,\n          fixtureData: {\n            servicePath: serviceDir\n          }\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: {\n                    path: './',\n                    file: 'Dockerfile.dev',\n                    platform: 'TESTVAL'\n                  }\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = Object.values(cfTemplate.Resources).find(resource => resource.Type === 'AWS::Lambda::Version' && resource.Properties.FunctionName.Ref === functionCfLogicalId).Properties;\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n        expect(describeRepositoriesStub).to.be.calledOnce;\n        expect(createRepositoryStub.notCalled).to.be.true;\n        expect(spawnExtStub).to.be.calledWith('docker', ['build', '-t', `${awsNaming.getEcrRepositoryName()}:baseimage`, '-f', path.join(serviceDir, 'Dockerfile.dev'), './', '--platform=TESTVAL']);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should work correctly when `functions[].image` is defined with explicit name","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1585,"column":86,"index":60253},"line":1585,"code":"      it('should work correctly when `functions[].image` is defined with explicit name', async () => {\n        const awsRequestStubMap = {\n          ...baseAwsRequestStubMap,\n          ECR: {\n            ...baseAwsRequestStubMap.ECR,\n            describeRepositories: describeRepositoriesStub.resolves({\n              repositories: [{\n                repositoryUri\n              }]\n            }),\n            createRepository: createRepositoryStub\n          }\n        };\n        const {\n          awsNaming,\n          cfTemplate\n        } = await runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap,\n          modulesCacheStub,\n          configExt: {\n            provider: {\n              ecr: {\n                images: {\n                  baseimage: './'\n                }\n              }\n            },\n            functions: {\n              foo: {\n                image: {\n                  name: 'baseimage'\n                }\n              }\n            }\n          }\n        });\n        const functionCfLogicalId = awsNaming.getLambdaLogicalId('foo');\n        const functionCfConfig = cfTemplate.Resources[functionCfLogicalId].Properties;\n        const versionCfConfig = findVersionCfConfig(cfTemplate.Resources, functionCfLogicalId);\n        expect(functionCfConfig.Code.ImageUri).to.deep.equal(`${repositoryUri}@sha256:${imageSha}`);\n        expect(versionCfConfig.CodeSha256).to.equal(imageSha);\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when docker command is not available","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1629,"column":58,"index":61688},"line":1629,"code":"      it('should fail when docker command is not available', async () => {\n        await expect(runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap: baseAwsRequestStubMap,\n          modulesCacheStub: {\n            'child-process-ext/spawn': sinon.stub().throws()\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'DOCKER_COMMAND_NOT_AVAILABLE');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when docker build fails","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1639,"column":45,"index":62105},"line":1639,"code":"      it('should fail when docker build fails', async () => {\n        await expect(runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap: baseAwsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': sinon.stub().returns({}).onSecondCall().throws()\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'DOCKER_BUILD_ERROR');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when docker tag fails","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1650,"column":43,"index":62570},"line":1650,"code":"      it('should fail when docker tag fails', async () => {\n        await expect(runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap: baseAwsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': sinon.stub().returns({}).onCall(2).throws()\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'DOCKER_TAG_ERROR');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when docker push fails","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1661,"column":44,"index":63029},"line":1661,"code":"      it('should fail when docker push fails', async () => {\n        await expect(runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap: baseAwsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': sinon.stub().returns({}).onCall(3).throws()\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'DOCKER_PUSH_ERROR');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"should fail when docker login fails","suites":["test/unit/lib/plugins/aws/provider.test.js","when resolving images","with `functions[].image` referencing images that require building"],"updatePoint":{"line":1672,"column":45,"index":63490},"line":1672,"code":"      it('should fail when docker login fails', async () => {\n        await expect(runServerless({\n          fixture: 'ecr',\n          command: 'package',\n          awsRequestStubMap: baseAwsRequestStubMap,\n          modulesCacheStub: {\n            ...modulesCacheStub,\n            'child-process-ext/spawn': sinon.stub().returns({}).onCall(3).throws({\n              stdBuffer: 'no basic auth credentials'\n            }).onCall(4).throws()\n          }\n        })).to.be.eventually.rejected.and.have.property('code', 'DOCKER_LOGIN_ERROR');\n      });","file":"unit/lib/plugins/aws/provider.test.js","skipped":false,"dir":"test"},{"name":"executes expected operations during removal when repository does not exist","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":67,"column":80,"index":2027},"line":67,"code":"  it('executes expected operations during removal when repository does not exist', async () => {\n    describeRepositoriesStub.throws({\n      providerError: {\n        code: 'RepositoryNotFoundException'\n      }\n    });\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap\n    });\n    expect(deleteObjectsStub).to.be.calledWithExactly({\n      Bucket: 'resource-id',\n      Delete: {\n        Objects: [{\n          Key: 'first'\n        }, {\n          Key: 'second'\n        }]\n      }\n    });\n    expect(deleteStackStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(deleteStackStub.calledAfter(deleteObjectsStub)).to.be.true;\n    expect(describeStackEventsStub.calledAfter(deleteStackStub)).to.be.true;\n    expect(deleteRepositoryStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"executes expected operations during removal when repository cannot be accessed due to denied access","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":100,"column":105,"index":3041},"line":100,"code":"  it('executes expected operations during removal when repository cannot be accessed due to denied access', async () => {\n    describeRepositoriesStub.throws({\n      providerError: {\n        code: 'AccessDeniedException'\n      }\n    });\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap\n    });\n    expect(deleteObjectsStub).to.be.calledWithExactly({\n      Bucket: 'resource-id',\n      Delete: {\n        Objects: [{\n          Key: 'first'\n        }, {\n          Key: 'second'\n        }]\n      }\n    });\n    expect(deleteStackStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(deleteStackStub.calledAfter(deleteObjectsStub)).to.be.true;\n    expect(describeStackEventsStub.calledAfter(deleteStackStub)).to.be.true;\n    expect(deleteRepositoryStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"executes expected operations related to files removal when S3 bucket has files","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":133,"column":84,"index":4028},"line":133,"code":"  it('executes expected operations related to files removal when S3 bucket has files', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: []\n          },\n          headBucket: {}\n        }\n      }\n    });\n    expect(deleteObjectsStub).not.to.be.called;\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"executes expected operations related to files removal when S3 bucket is empty","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":150,"column":83,"index":4491},"line":150,"code":"  it('executes expected operations related to files removal when S3 bucket is empty', async () => {\n    await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap\n    });\n    expect(deleteObjectsStub).to.be.calledWithExactly({\n      Bucket: 'resource-id',\n      Delete: {\n        Objects: [{\n          Key: 'first'\n        }, {\n          Key: 'second'\n        }]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"skips attempts to remove S3 objects if S3 bucket not found","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":167,"column":64,"index":4896},"line":167,"code":"  it('skips attempts to remove S3 objects if S3 bucket not found', async () => {\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          deleteObjects: deleteObjectsStub,\n          listObjectsV2: {\n            Contents: [{\n              Key: 'first'\n            }, {\n              Key: 'second'\n            }]\n          },\n          headBucket: () => {\n            const err = new Error('err');\n            err.code = 'AWS_S3_HEAD_BUCKET_NOT_FOUND';\n            throw err;\n          }\n        }\n      }\n    });\n    expect(deleteObjectsStub).not.to.be.called;\n    expect(deleteStackStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub.calledAfter(deleteStackStub)).to.be.true;\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"skips attempts to remove S3 objects if S3 bucket resource missing from CloudFormation template","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":201,"column":100,"index":5925},"line":201,"code":"  it('skips attempts to remove S3 objects if S3 bucket resource missing from CloudFormation template', async () => {\n    const headBucketStub = sinon.stub();\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          ...awsRequestStubMap.S3,\n          headBucket: headBucketStub\n        },\n        CloudFormation: {\n          ...awsRequestStubMap.CloudFormation,\n          describeStackResource: () => {\n            const err = new Error('does not exist for stack');\n            err.providerError = {\n              code: 'ValidationError'\n            };\n            throw err;\n          }\n        }\n      }\n    });\n    expect(headBucketStub).not.to.be.called;\n    expect(deleteObjectsStub).not.to.be.called;\n    expect(deleteStackStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub).to.be.calledWithExactly({\n      StackName: awsNaming.getStackName()\n    });\n    expect(describeStackEventsStub.calledAfter(deleteStackStub)).to.be.true;\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"removes ECR repository if it exists","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":236,"column":41,"index":7005},"line":236,"code":"  it('removes ECR repository if it exists', async () => {\n    describeRepositoriesStub.resolves();\n    const {\n      awsNaming\n    } = await runServerless({\n      fixture: 'function',\n      command: 'remove',\n      awsRequestStubMap\n    });\n    expect(deleteRepositoryStub).to.be.calledWithExactly({\n      repositoryName: awsNaming.getEcrRepositoryName(),\n      registryId: '999999999999',\n      force: true\n    });\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should execute expected operations with versioning enabled if no object versions are present","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":251,"column":98,"index":7484},"line":251,"code":"  it('should execute expected operations with versioning enabled if no object versions are present', async () => {\n    const listObjectVersionsStub = sinon.stub().resolves();\n    const {\n      serverless\n    } = await runServerless({\n      command: 'remove',\n      fixture: 'function',\n      configExt: {\n        provider: {\n          deploymentPrefix: 'serverless',\n          deploymentBucket: {\n            name: 'bucket',\n            versioning: true\n          }\n        }\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          listObjectVersions: listObjectVersionsStub,\n          headBucket: {}\n        }\n      }\n    });\n    expect(listObjectVersionsStub).to.be.calledWithExactly({\n      Bucket: 'bucket',\n      Prefix: `serverless/${serverless.service.service}/dev`\n    });\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should execute expected operations with versioning enabled if object versions are present","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":280,"column":95,"index":8302},"line":280,"code":"  it('should execute expected operations with versioning enabled if object versions are present', async () => {\n    const listObjectVersionsStub = sinon.stub().resolves({\n      Versions: [{\n        Key: 'object1',\n        VersionId: null\n      }, {\n        Key: 'object2',\n        VersionId: 'v1'\n      }],\n      DeleteMarkers: [{\n        Key: 'object3',\n        VersionId: 'v2'\n      }]\n    });\n    const innerDeleteObjectsStub = sinon.stub().resolves({\n      Deleted: [{\n        Key: 'object1',\n        VersionId: null\n      }, {\n        Key: 'object2',\n        VersionId: 'v1'\n      }, {\n        Key: 'object3',\n        VersionId: 'v2'\n      }]\n    });\n    const {\n      serverless\n    } = await runServerless({\n      command: 'remove',\n      fixture: 'function',\n      configExt: {\n        provider: {\n          deploymentPrefix: 'serverless',\n          deploymentBucket: {\n            name: 'bucket',\n            versioning: true\n          }\n        }\n      },\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          listObjectVersions: listObjectVersionsStub,\n          deleteObjects: innerDeleteObjectsStub,\n          headBucket: {}\n        }\n      }\n    });\n    expect(listObjectVersionsStub).to.be.calledWithExactly({\n      Bucket: 'bucket',\n      Prefix: `serverless/${serverless.service.service}/dev`\n    });\n    expect(innerDeleteObjectsStub).to.be.calledWithExactly({\n      Bucket: 'bucket',\n      Delete: {\n        Objects: [{\n          Key: 'object1',\n          VersionId: null\n        }, {\n          Key: 'object2',\n          VersionId: 'v1'\n        }, {\n          Key: 'object3',\n          VersionId: 'v2'\n        }]\n      }\n    });\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when deleteObjects operation was not successfull","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":349,"column":76,"index":9964},"line":349,"code":"  it('should throw an error when deleteObjects operation was not successfull', async () => {\n    const innerDeleteObjectsStub = sinon.stub().resolves({\n      Deleted: [],\n      Errors: [{\n        Code: 'InternalError'\n      }]\n    });\n    await expect(runServerless({\n      command: 'remove',\n      fixture: 'function',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          ...awsRequestStubMap.S3,\n          deleteObjects: innerDeleteObjectsStub,\n          headBucket: {}\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'CANNOT_DELETE_S3_OBJECTS_GENERIC');\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when deleteObjects operation was not successfull due to \"AccessDenied\"","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":369,"column":98,"index":10607},"line":369,"code":"  it('should throw an error when deleteObjects operation was not successfull due to \"AccessDenied\"', async () => {\n    const innerDeleteObjectsStub = sinon.stub().resolves({\n      Deleted: [],\n      Errors: [{\n        Code: 'AccessDenied'\n      }]\n    });\n    await expect(runServerless({\n      command: 'remove',\n      fixture: 'function',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          ...awsRequestStubMap.S3,\n          deleteObjects: innerDeleteObjectsStub,\n          headBucket: {}\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'CANNOT_DELETE_S3_OBJECTS_ACCESS_DENIED');\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should throw an error when cannot list objects from the bucket","suites":["test/unit/lib/plugins/aws/remove/index.test.js"],"updatePoint":{"line":389,"column":68,"index":11225},"line":389,"code":"  it('should throw an error when cannot list objects from the bucket', async () => {\n    await expect(runServerless({\n      command: 'remove',\n      fixture: 'function',\n      awsRequestStubMap: {\n        ...awsRequestStubMap,\n        S3: {\n          ...awsRequestStubMap.S3,\n          listObjectsV2: () => {\n            const err = new Error('ff');\n            err.code = 'AWS_S3_LIST_OBJECTS_V2_ACCESS_DENIED';\n            throw err;\n          },\n          headBucket: {}\n        }\n      }\n    })).to.be.eventually.rejected.and.have.property('code', 'AWS_S3_LIST_OBJECTS_V2_ACCESS_DENIED');\n  });","file":"unit/lib/plugins/aws/remove/index.test.js","skipped":false,"dir":"test"},{"name":"should remove a stack","suites":["removeStack","#remove()"],"updatePoint":{"line":27,"column":29,"index":923},"line":27,"code":"    it('should remove a stack', async () => awsRemove.remove().then(() => {\n      expect(removeStackStub.calledOnce).to.be.equal(true);\n      expect(removeStackStub.calledWithExactly('CloudFormation', 'deleteStack', {\n        StackName: `${serverless.service.service}-${awsRemove.provider.getStage()}`\n      })).to.be.equal(true);\n      awsRemove.provider.request.restore();\n    }));","file":"unit/lib/plugins/aws/remove/lib/stack.test.js","skipped":false,"dir":"test"},{"name":"should use CloudFormation service role if it is specified","suites":["removeStack","#remove()"],"updatePoint":{"line":34,"column":65,"index":1343},"line":34,"code":"    it('should use CloudFormation service role if it is specified', async () => {\n      awsRemove.serverless.service.provider.cfnRole = 'arn:aws:iam::123456789012:role/myrole';\n      return awsRemove.remove().then(() => {\n        expect(removeStackStub.args[0][2].RoleARN).to.equal('arn:aws:iam::123456789012:role/myrole');\n        awsRemove.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/remove/lib/stack.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["removeStack","#removeStack()"],"updatePoint":{"line":43,"column":41,"index":1750},"line":43,"code":"    it('should run promise chain in order', async () => {\n      const removeStub = sinon.stub(awsRemove, 'remove').resolves();\n      return awsRemove.removeStack().then(() => {\n        expect(removeStub.calledOnce).to.be.equal(true);\n        awsRemove.remove.restore();\n      });\n    });","file":"unit/lib/plugins/aws/remove/lib/stack.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsRollbackFunction","#constructor()"],"updatePoint":{"line":57,"column":25,"index":1994},"line":57,"code":"    it('should have hooks', () => expect(awsRollbackFunction.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsRollbackFunction","#constructor()"],"updatePoint":{"line":58,"column":70,"index":2125},"line":58,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsRollbackFunction.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should set an empty options object if no options are given","suites":["AwsRollbackFunction","#constructor()"],"updatePoint":{"line":59,"column":66,"index":2269},"line":59,"code":"    it('should set an empty options object if no options are given', () => {\n      const awsRollbackFunctionWithEmptyOptions = new AwsRollbackFunction(serverless);\n      expect(awsRollbackFunctionWithEmptyOptions.options).to.deep.equal({});\n    });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["AwsRollbackFunction","#constructor()"],"updatePoint":{"line":63,"column":41,"index":2493},"line":63,"code":"    it('should run promise chain in order', async () => awsRollbackFunction.hooks['rollback:function:rollback']().then(() => {\n      expect(validateStub.calledOnce).to.equal(true);\n      expect(getFunctionToBeRestoredStub.calledAfter(validateStub)).to.equal(true);\n      expect(fetchFunctionCodeStub.calledAfter(getFunctionToBeRestoredStub)).to.equal(true);\n      expect(restoreFunctionStub.calledAfter(fetchFunctionCodeStub)).to.equal(true);\n    }));","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should return the requested function","suites":["AwsRollbackFunction","#getFunctionToBeRestored()","when function and version can be found"],"updatePoint":{"line":81,"column":46,"index":3349},"line":81,"code":"      it('should return the requested function', async () => {\n        awsRollbackFunction.options.function = 'hello';\n        awsRollbackFunction.options['function-version'] = '4711';\n        return awsRollbackFunction.getFunctionToBeRestored().then(result => {\n          expect(getFunctionStub.calledOnce).to.equal(true);\n          expect(getFunctionStub.calledWithExactly('Lambda', 'getFunction', {\n            FunctionName: 'service-dev-hello',\n            Qualifier: '4711'\n          })).to.equal(true);\n          expect(result).to.deep.equal({\n            function: 'hello'\n          });\n        });\n      });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should translate the error message to a custom error message","suites":["AwsRollbackFunction","#getFunctionToBeRestored()","when function or version could not be found"],"updatePoint":{"line":104,"column":70,"index":4343},"line":104,"code":"      it('should translate the error message to a custom error message', () => {\n        awsRollbackFunction.options.function = 'hello';\n        awsRollbackFunction.options['function-version'] = '4711';\n        return awsRollbackFunction.getFunctionToBeRestored().catch(error => {\n          expect(error.message.match(/Function \"hello\" with version \"4711\" not found/));\n          expect(getFunctionStub.calledOnce).to.equal(true);\n          expect(getFunctionStub.calledWithExactly('Lambda', 'getFunction', {\n            FunctionName: 'service-dev-hello',\n            Qualifier: '4711'\n          })).to.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should re-throw the error without translating it to a custom error message","suites":["AwsRollbackFunction","#getFunctionToBeRestored()","when other error occurred"],"updatePoint":{"line":125,"column":84,"index":5327},"line":125,"code":"      it('should re-throw the error without translating it to a custom error message', () => {\n        awsRollbackFunction.options.function = 'hello';\n        awsRollbackFunction.options['function-version'] = '4711';\n        return awsRollbackFunction.getFunctionToBeRestored().catch(error => {\n          expect(error.message.match(/something went wrong/));\n          expect(getFunctionStub.calledOnce).to.equal(true);\n          expect(getFunctionStub.calledWithExactly('Lambda', 'getFunction', {\n            FunctionName: 'service-dev-hello',\n            Qualifier: '4711'\n          })).to.equal(true);\n        });\n      });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should fetch the zip file content of the previously requested function","suites":["AwsRollbackFunction","#fetchFunctionCode()"],"updatePoint":{"line":140,"column":78,"index":6004},"line":140,"code":"    it('should fetch the zip file content of the previously requested function', async () => {\n      const func = {\n        Code: {\n          Location: 'https://foo.com/bar'\n        }\n      };\n      return awsRollbackFunction.fetchFunctionCode(func).then(() => {\n        expect(fetchStub.called).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should restore the provided function","suites":["AwsRollbackFunction","#restoreFunction()"],"updatePoint":{"line":159,"column":44,"index":6589},"line":159,"code":"    it('should restore the provided function', async () => {\n      awsRollbackFunction.options.function = 'hello';\n      const zipBuffer = Buffer.from('');\n      return awsRollbackFunction.restoreFunction(zipBuffer).then(() => {\n        expect(updateFunctionCodeStub.calledOnce).to.equal(true);\n        expect(updateFunctionCodeStub.calledWithExactly('Lambda', 'updateFunctionCode', {\n          FunctionName: 'service-dev-hello',\n          ZipFile: zipBuffer\n        })).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/rollback-function.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["AwsRollback","#constructor()"],"updatePoint":{"line":42,"column":25,"index":1430},"line":42,"code":"    it('should have hooks', () => expect(awsRollback.hooks).to.be.not.empty);","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should set the provider variable to an instance of AwsProvider","suites":["AwsRollback","#constructor()"],"updatePoint":{"line":43,"column":70,"index":1553},"line":43,"code":"    it('should set the provider variable to an instance of AwsProvider', () => expect(awsRollback.provider).to.be.instanceof(AwsProvider));","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should run \"before:rollback:initialize\" hook promise chain in order","suites":["AwsRollback","hooks"],"updatePoint":{"line":46,"column":75,"index":1732},"line":46,"code":"    it('should run \"before:rollback:initialize\" hook promise chain in order', async () => {\n      const validateStub = sinon.stub(awsRollback, 'validate').resolves();\n      return awsRollback.hooks['before:rollback:initialize']().then(() => {\n        expect(validateStub.calledOnce).to.be.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should run \"rollback:rollback\" promise chain in order","suites":["AwsRollback","hooks"],"updatePoint":{"line":52,"column":61,"index":2038},"line":52,"code":"    it('should run \"rollback:rollback\" promise chain in order', async () => {\n      const setBucketNameStub = sinon.stub(awsRollback, 'setBucketName').resolves();\n      const setStackToUpdateStub = sinon.stub(awsRollback, 'setStackToUpdate').resolves();\n      const updateStackStub = sinon.stub(awsRollback, 'updateStack').resolves();\n      return awsRollback.hooks['rollback:rollback']().then(() => {\n        expect(setBucketNameStub.calledOnce).to.be.equal(true);\n        expect(setStackToUpdateStub.calledAfter(setBucketNameStub)).to.be.equal(true);\n        expect(updateStackStub.calledAfter(setStackToUpdateStub)).to.be.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should run \"deploy:list\" if timestamp is not specified","suites":["AwsRollback","hooks"],"updatePoint":{"line":62,"column":62,"index":2695},"line":62,"code":"    it('should run \"deploy:list\" if timestamp is not specified', async () => {\n      const spawnDeployListStub = spawnStub.withArgs('deploy:list').resolves();\n      awsRollback.options.timestamp = undefined;\n      return awsRollback.hooks['rollback:rollback']().then(() => {\n        expect(spawnDeployListStub.calledOnce).to.be.equal(true);\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should resolve when the timestamp argument is passed as a string","suites":["AwsRollback","#setStackToUpdate()"],"updatePoint":{"line":71,"column":72,"index":3112},"line":71,"code":"    it('should resolve when the timestamp argument is passed as a string', async () => {\n      createInstance({\n        stage: 'dev',\n        region: 'us-east-1',\n        timestamp: '1476779096930'\n      });\n      const s3Objects = [{\n        // eslint-disable-next-line max-len\n        Key: 'serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z/compiled-cloudformation-template.json'\n      }, {\n        Key: 'serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z/test.zip'\n      }];\n      const s3Response = {\n        Contents: s3Objects\n      };\n      sinon.stub(awsRollback.provider, 'request').resolves(s3Response);\n      return awsRollback.setStackToUpdate().then(() => {\n        expect(awsRollback.serverless.service.package.artifactDirectoryName).to.be.equal('serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z');\n        awsRollback.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should reject in case no deployments are available","suites":["AwsRollback","#setStackToUpdate()"],"updatePoint":{"line":92,"column":58,"index":4016},"line":92,"code":"    it('should reject in case no deployments are available', async () => {\n      const s3Response = {\n        Contents: []\n      };\n      const listObjectsStub = sinon.stub(awsRollback.provider, 'request').resolves(s3Response);\n      return awsRollback.setStackToUpdate().then(() => {\n        assert.isNotOk(true, 'setStackToUpdate should not resolve');\n      }).catch(error => {\n        expect(error.code).to.equal('ROLLBACK_DEPLOYMENTS_NOT_FOUND');\n        expect(listObjectsStub.calledOnce).to.be.equal(true);\n        expect(listObjectsStub.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsRollback.bucketName,\n          Prefix: `${s3Key}`\n        })).to.be.equal(true);\n        awsRollback.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should reject in case this specific deployments is not available","suites":["AwsRollback","#setStackToUpdate()"],"updatePoint":{"line":109,"column":72,"index":4785},"line":109,"code":"    it('should reject in case this specific deployments is not available', async () => {\n      const s3Objects = [{\n        // eslint-disable-next-line max-len\n        Key: 'serverless/rollback/dev/2000000000000-2016-10-18T08:24:56.930Z/compiled-cloudformation-template.json'\n      }, {\n        Key: 'serverless/rollback/dev/2000000000000-2016-10-18T08:24:56.930Z/test.zip'\n      }];\n      const s3Response = {\n        Contents: s3Objects\n      };\n      const listObjectsStub = sinon.stub(awsRollback.provider, 'request').resolves(s3Response);\n      return awsRollback.setStackToUpdate().then(() => {\n        assert.isNotOk(true, 'setStackToUpdate should not resolve');\n      }).catch(error => {\n        expect(error.code).to.equal('ROLLBACK_DEPLOYMENT_NOT_FOUND');\n        expect(listObjectsStub.calledOnce).to.be.equal(true);\n        expect(listObjectsStub.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsRollback.bucketName,\n          Prefix: `${s3Key}`\n        })).to.be.equal(true);\n        awsRollback.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should resolve set the artifactDirectoryName and resolve","suites":["AwsRollback","#setStackToUpdate()"],"updatePoint":{"line":132,"column":64,"index":5847},"line":132,"code":"    it('should resolve set the artifactDirectoryName and resolve', async () => {\n      const s3Objects = [{\n        // eslint-disable-next-line max-len\n        Key: 'serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z/compiled-cloudformation-template.json'\n      }, {\n        Key: 'serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z/test.zip'\n      }];\n      const s3Response = {\n        Contents: s3Objects\n      };\n      const listObjectsStub = sinon.stub(awsRollback.provider, 'request').resolves(s3Response);\n      return awsRollback.setStackToUpdate().then(() => {\n        expect(awsRollback.serverless.service.package.artifactDirectoryName).to.be.equal('serverless/rollback/dev/1476779096930-2016-10-18T08:24:56.930Z');\n        expect(listObjectsStub.calledWithExactly('S3', 'listObjectsV2', {\n          Bucket: awsRollback.bucketName,\n          Prefix: `${s3Key}`\n        })).to.be.equal(true);\n        awsRollback.provider.request.restore();\n      });\n    });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"Should gently handle error of listing objects from S3 bucket","suites":["test/unit/lib/plugins/aws/rollback.test.js"],"updatePoint":{"line":155,"column":66,"index":6913},"line":155,"code":"  it('Should gently handle error of listing objects from S3 bucket', async () => {\n    await expect(runServerless({\n      fixture: 'function',\n      command: 'rollback',\n      awsRequestStubMap: {\n        CloudFormation: {\n          describeStacks: {},\n          describeStackResource: {\n            StackResourceDetail: {\n              PhysicalResourceId: 'deployment-bucket'\n            }\n          }\n        },\n        STS: {\n          getCallerIdentity: {\n            ResponseMetadata: {\n              RequestId: 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n            },\n            UserId: 'XXXXXXXXXXXXXXXXXXXXX',\n            Account: '999999999999',\n            Arn: 'arn:aws:iam::999999999999:user/test'\n          }\n        },\n        S3: {\n          headObject: () => {},\n          headBucket: () => {},\n          listObjectsV2: () => {\n            const err = new Error('error!');\n            err.code = 'AWS_S3_LIST_OBJECTS_V2_ACCESS_DENIED';\n            throw err;\n          }\n        }\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'AWS_S3_LIST_OBJECTS_V2_ACCESS_DENIED');\n  });","file":"unit/lib/plugins/aws/rollback.test.js","skipped":false,"dir":"test"},{"name":"should resolve file profiles","suites":["#credentials"],"updatePoint":{"line":27,"column":34,"index":959},"line":27,"code":"  it('should resolve file profiles', async () => {\n    const profiles = new Map([['my-profile1', {\n      accessKeyId: 'my-old-profile-key1',\n      secretAccessKey: 'my-old-profile-secret1'\n    }], ['my-profile2', {\n      accessKeyId: 'my-old-profile-key2',\n      secretAccessKey: 'my-old-profile-secret2'\n    }]]);\n    const [[profile1Name, profile1], [profile2Name, profile2]] = Array.from(profiles);\n    const credentialsFileContent = `${[`[${[profile1Name]}]`, `aws_access_key_id = ${profile1.accessKeyId}`, `aws_secret_access_key = ${profile1.secretAccessKey}`, '', `[${[profile2Name]}]`, `aws_access_key_id = ${profile2.accessKeyId}`, `aws_secret_access_key = ${profile2.secretAccessKey}`].join('\\n')}\\n`;\n    await outputFile(credentialsFilePath, credentialsFileContent);\n    const resolvedProfiles = await credentials.resolveFileProfiles();\n    expect(resolvedProfiles).to.deep.equal(profiles);\n  });","file":"unit/lib/plugins/aws/utils/credentials.test.js","skipped":false,"dir":"test"},{"name":"should resolve env credentials","suites":["#credentials"],"updatePoint":{"line":41,"column":36,"index":1869},"line":41,"code":"  it('should resolve env credentials', () => overrideEnv(() => {\n    process.env.AWS_ACCESS_KEY_ID = 'foo';\n    process.env.AWS_SECRET_ACCESS_KEY = 'bar';\n    expect(credentials.resolveEnvCredentials()).to.deep.equal({\n      accessKeyId: 'foo',\n      secretAccessKey: 'bar'\n    });\n  }));","file":"unit/lib/plugins/aws/utils/credentials.test.js","skipped":false,"dir":"test"},{"name":"should save file profiles","suites":["#credentials"],"updatePoint":{"line":49,"column":31,"index":2153},"line":49,"code":"  it('should save file profiles', async () => {\n    const profiles = new Map([['my-profileA', {\n      accessKeyId: 'my-old-profile-key1',\n      secretAccessKey: 'my-old-profile-secret1'\n    }], ['my-profileB', {\n      accessKeyId: 'my-old-profile-key2',\n      secretAccessKey: 'my-old-profile-secret2'\n    }]]);\n    return credentials.saveFileProfiles(profiles).then(() => credentials.resolveFileProfiles().then(resolvedProfiles => expect(resolvedProfiles).to.deep.equal(profiles)));\n  });","file":"unit/lib/plugins/aws/utils/credentials.test.js","skipped":false,"dir":"test"},{"name":"should return an empty result in case no S3 objects are provided","suites":["#findAndGroupDeployments()"],"updatePoint":{"line":6,"column":70,"index":283},"line":6,"code":"  it('should return an empty result in case no S3 objects are provided', () => {\n    const s3Response = {\n      Contents: []\n    };\n    expect(findAndGroupDeployments(s3Response, 'serverless', 'test', 'dev')).to.deep.equal([]);\n  });","file":"unit/lib/plugins/aws/utils/find-and-group-deployments.test.js","skipped":false,"dir":"test"},{"name":"should group stacks","suites":["#findAndGroupDeployments()"],"updatePoint":{"line":12,"column":25,"index":472},"line":12,"code":"  it('should group stacks', () => {\n    const s3Objects = [{\n      // eslint-disable-next-line max-len\n      Key: 'serverless/test/dev/1476779096930-2016-10-18T08:24:56.930Z/compiled-cloudformation-template.json'\n    }, {\n      Key: 'serverless/test/dev/1476779096930-2016-10-18T08:24:56.930Z/test.zip'\n    }, {\n      // eslint-disable-next-line max-len\n      Key: 'serverless/test/dev/1476779278222-2016-10-18T08:27:58.222Z/compiled-cloudformation-template.json'\n    }, {\n      Key: 'serverless/test/dev/1476779278222-2016-10-18T08:27:58.222Z/test.zip'\n    }, {\n      // eslint-disable-next-line max-len\n      Key: 'serverless/test/dev/1476781042481-2016-10-18T08:57:22.481Z/compiled-cloudformation-template.json'\n    }, {\n      Key: 'serverless/test/dev/1476781042481-2016-10-18T08:57:22.481Z/test.zip'\n    }];\n    const s3Response = {\n      Contents: s3Objects\n    };\n    const expected = [[{\n      directory: '1476779096930-2016-10-18T08:24:56.930Z',\n      file: 'compiled-cloudformation-template.json'\n    }, {\n      directory: '1476779096930-2016-10-18T08:24:56.930Z',\n      file: 'test.zip'\n    }], [{\n      directory: '1476779278222-2016-10-18T08:27:58.222Z',\n      file: 'compiled-cloudformation-template.json'\n    }, {\n      directory: '1476779278222-2016-10-18T08:27:58.222Z',\n      file: 'test.zip'\n    }], [{\n      directory: '1476781042481-2016-10-18T08:57:22.481Z',\n      file: 'compiled-cloudformation-template.json'\n    }, {\n      directory: '1476781042481-2016-10-18T08:57:22.481Z',\n      file: 'test.zip'\n    }]];\n    expect(findAndGroupDeployments(s3Response, 'serverless', 'test', 'dev')).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/find-and-group-deployments.test.js","skipped":false,"dir":"test"},{"name":"should format invocation report","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":10,"column":37,"index":327},"line":10,"code":"  it('should format invocation report', () => {\n    const msg = 'REPORT RequestId: 99c30000-b01a-11e5-93f7-b8e85631a00e\\tDuration: 0.40 ms\\tBilled Duration: 100 ms\\tMemory Size: 512 MB\\tMax Memory Used: 30 MB\\tInit Duration: 160.25 ms';\n    const expectedMsg = style.aside('END Duration: 0.40 ms (init: 160.25 ms) Memory Used: 30 MB');\n    expect(formatLambdaLogEvent(msg)).to.deep.equal(expectedMsg);\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should format invocation failures","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":15,"column":39,"index":737},"line":15,"code":"  it('should format invocation failures', () => {\n    const msg = 'Process exited before completing request';\n    expect(formatLambdaLogEvent(msg)).to.deep.equal(style.error(msg));\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should format lambda console.log lines","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":19,"column":44,"index":929},"line":19,"code":"  it('should format lambda console.log lines', () => {\n    const nodeLogLine = '2016-01-01T12:00:00Z\\t99c30000-b01a-11e5-93f7-b8e85631a00e\\tINFO\\ttest';\n    let expectedLogMessage = '';\n    const date = dayjs('2016-01-01T12:00:00Z').format('YYYY-MM-DD HH:mm:ss.SSS');\n    expectedLogMessage += `${style.aside(date)}\\t`;\n    expectedLogMessage += 'INFO\\t';\n    expectedLogMessage += 'test';\n    expect(formatLambdaLogEvent(nodeLogLine)).to.equal(expectedLogMessage);\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should format lambda python logger lines","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":28,"column":46,"index":1403},"line":28,"code":"  it('should format lambda python logger lines', () => {\n    const pythonLoggerLine = '[INFO]\\t2016-01-01T12:00:00Z\\t99c30000-b01a-11e5-93f7-b8e85631a00e\\ttest';\n    let expectedLogMessage = '';\n    const date = dayjs('2016-01-01T12:00:00Z').format('YYYY-MM-DD HH:mm:ss.SSS');\n    expectedLogMessage += `${style.aside(date)}\\t`;\n    expectedLogMessage += `${'[INFO]'}\\t`;\n    expectedLogMessage += 'test';\n    expect(formatLambdaLogEvent(pythonLoggerLine)).to.equal(expectedLogMessage);\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should pass through log lines with no tabs","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":37,"column":48,"index":1898},"line":37,"code":"  it('should pass through log lines with no tabs', () => {\n    expect(formatLambdaLogEvent('test')).to.equal('test');\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should pass through log lines with tabs but no date","suites":["#formatLambdaLogEvent()"],"updatePoint":{"line":40,"column":57,"index":2031},"line":40,"code":"  it('should pass through log lines with tabs but no date', () => {\n    const tabLine = 'foo\\tbar\\tbaz';\n    expect(formatLambdaLogEvent(tabLine)).to.equal(tabLine);\n  });","file":"unit/lib/plugins/aws/utils/format-lambda-log-event.test.js","skipped":false,"dir":"test"},{"name":"should return standard endpoint for us-east-1","suites":["getS3EndpointForRegion"],"updatePoint":{"line":6,"column":51,"index":259},"line":6,"code":"  it('should return standard endpoint for us-east-1', () => {\n    const expected = 's3.amazonaws.com';\n    const actual = getS3EndpointForRegion('us-east-1');\n    expect(actual).to.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-endpoint-for-region.test.js","skipped":false,"dir":"test"},{"name":"should return govcloud endpoint for us-gov-west-1","suites":["getS3EndpointForRegion"],"updatePoint":{"line":11,"column":55,"index":467},"line":11,"code":"  it('should return govcloud endpoint for us-gov-west-1', () => {\n    const expected = 's3-us-gov-west-1.amazonaws.com';\n    const actual = getS3EndpointForRegion('us-gov-west-1');\n    expect(actual).to.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-endpoint-for-region.test.js","skipped":false,"dir":"test"},{"name":"should return china endpoint for cn-north-1","suites":["getS3EndpointForRegion"],"updatePoint":{"line":16,"column":49,"index":687},"line":16,"code":"  it('should return china endpoint for cn-north-1', () => {\n    const expected = 's3.cn-north-1.amazonaws.com.cn';\n    const actual = getS3EndpointForRegion('cn-north-1');\n    expect(actual).to.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-endpoint-for-region.test.js","skipped":false,"dir":"test"},{"name":"should return US isolated region","suites":["getS3EndpointForRegion"],"updatePoint":{"line":21,"column":38,"index":893},"line":21,"code":"  it('should return US isolated region', () => {\n    const expected = 's3.us-iso-east-1.c2s.ic.gov';\n    const actual = getS3EndpointForRegion('us-iso-east-1');\n    expect(actual).to.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-endpoint-for-region.test.js","skipped":false,"dir":"test"},{"name":"should return US isolated B region","suites":["getS3EndpointForRegion"],"updatePoint":{"line":26,"column":40,"index":1101},"line":26,"code":"  it('should return US isolated B region', () => {\n    const expected = 's3.us-isob-east-1.sc2s.sgov.gov';\n    const actual = getS3EndpointForRegion('us-isob-east-1');\n    expect(actual).to.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-endpoint-for-region.test.js","skipped":false,"dir":"test"},{"name":"should return an empty result in case no stacks are provided","suites":["#getS3ObjectsFromStacks()"],"updatePoint":{"line":6,"column":66,"index":277},"line":6,"code":"  it('should return an empty result in case no stacks are provided', () => {\n    expect(getS3ObjectsFromStacks([], 'serverless', 'test', 'dev')).to.deep.equal([]);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-objects-from-stacks.test.js","skipped":false,"dir":"test"},{"name":"should return an empty result in case no stacks are provided","suites":["#getS3ObjectsFromStacks()"],"updatePoint":{"line":9,"column":66,"index":447},"line":9,"code":"  it('should return an empty result in case no stacks are provided', () => {\n    const stacks = [[{\n      directory: '1476779096930-2016-10-18T08:24:56.930Z',\n      file: 'compiled-cloudformation-template.json'\n    }, {\n      directory: '1476779096930-2016-10-18T08:24:56.930Z',\n      file: 'test.zip'\n    }], [{\n      directory: '1476779278222-2016-10-18T08:27:58.222Z',\n      file: 'compiled-cloudformation-template.json'\n    }, {\n      directory: '1476779278222-2016-10-18T08:27:58.222Z',\n      file: 'test.zip'\n    }]];\n    const expected = [\n    // eslint-disable-next-line max-len\n    {\n      Key: 'serverless/test/dev/1476779096930-2016-10-18T08:24:56.930Z/compiled-cloudformation-template.json'\n    }, {\n      Key: 'serverless/test/dev/1476779096930-2016-10-18T08:24:56.930Z/test.zip'\n    },\n    // eslint-disable-next-line max-len\n    {\n      Key: 'serverless/test/dev/1476779278222-2016-10-18T08:27:58.222Z/compiled-cloudformation-template.json'\n    }, {\n      Key: 'serverless/test/dev/1476779278222-2016-10-18T08:27:58.222Z/test.zip'\n    }];\n    expect(getS3ObjectsFromStacks(stacks, 'serverless', 'test', 'dev')).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/get-s3-objects-from-stacks.test.js","skipped":false,"dir":"test"},{"name":"should parse an S3 URI","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":6,"column":28,"index":240},"line":6,"code":"  it('should parse an S3 URI', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('s3://test-bucket/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse an old style S3 URL","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":14,"column":38,"index":504},"line":14,"code":"  it('should parse an old style S3 URL', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://s3.amazonaws.com/test-bucket/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse an old style S3 URL with region","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":22,"column":50,"index":800},"line":22,"code":"  it('should parse an old style S3 URL with region', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://s3.us-west-1.amazonaws.com/test-bucket/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse another old style S3 URL with region","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":30,"column":55,"index":1111},"line":30,"code":"  it('should parse another old style S3 URL with region', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://s3-us-west-1.amazonaws.com/test-bucket/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse a new style S3 URL","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":38,"column":37,"index":1404},"line":38,"code":"  it('should parse a new style S3 URL', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://test-bucket.s3.amazonaws.com/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse a new style S3 URL with region","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":46,"column":49,"index":1699},"line":46,"code":"  it('should parse a new style S3 URL with region', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://test-bucket.s3.eu-west-1.amazonaws.com/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should parse another new style S3 URL with region","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":54,"column":55,"index":2010},"line":54,"code":"  it('should parse another new style S3 URL with region', () => {\n    const expected = {\n      Bucket: 'test-bucket',\n      Key: 'path/to/artifact.zip'\n    };\n    const actual = parseS3URI('https://test-bucket.s3-eu-west-1.amazonaws.com/path/to/artifact.zip');\n    expect(actual).to.deep.equal(expected);\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should reject non S3 URLs","suites":["test/unit/lib/plugins/aws/utils/parse-s3-uri.test.js"],"updatePoint":{"line":62,"column":31,"index":2297},"line":62,"code":"  it('should reject non S3 URLs', () => {\n    const actual = parseS3URI('https://example.com/path/to/artifact.zip');\n    expect(actual).to.be.null;\n  });","file":"unit/lib/plugins/aws/utils/parse-s3-uri.test.js","skipped":false,"dir":"test"},{"name":"should return matching exported value if found","suites":["#resolveCfImportValue"],"updatePoint":{"line":6,"column":52,"index":254},"line":6,"code":"  it('should return matching exported value if found', async () => {\n    const provider = {\n      request: async () => ({\n        Exports: [{\n          Name: 'anotherName',\n          Value: 'anotherValue'\n        }, {\n          Name: 'exportName',\n          Value: 'exportValue'\n        }]\n      })\n    };\n    const result = await resolveCfImportValue(provider, 'exportName');\n    expect(result).to.equal('exportValue');\n  });","file":"unit/lib/plugins/aws/utils/resolve-cf-import-value.test.js","skipped":false,"dir":"test"},{"name":"should return matching exported value if found","suites":["#resolveCfRefValue"],"updatePoint":{"line":6,"column":52,"index":245},"line":6,"code":"  it('should return matching exported value if found', async () => {\n    const provider = {\n      naming: {\n        getStackName: () => 'stack-name'\n      },\n      request: async () => ({\n        StackResourceSummaries: [{\n          LogicalResourceId: 'myS3',\n          PhysicalResourceId: 'stack-name-s3-id'\n        }, {\n          LogicalResourceId: 'myDB',\n          PhysicalResourceId: 'stack-name-db-id'\n        }]\n      })\n    };\n    const result = await resolveCfRefValue(provider, 'myDB');\n    expect(result).to.equal('stack-name-db-id');\n  });","file":"unit/lib/plugins/aws/utils/resolve-cf-ref-value.test.js","skipped":false,"dir":"test"},{"name":"should return a reference to Lambda Arn when provisionnedConcurrency is not set","suites":["#resolveLambdaTarget"],"updatePoint":{"line":6,"column":85,"index":283},"line":6,"code":"  it('should return a reference to Lambda Arn when provisionnedConcurrency is not set', () => {\n    const functionObj = {};\n    const functionName = 'foo';\n    expect(resolveLambdaTarget(functionName, functionObj)).to.deep.equal({\n      'Fn::GetAtt': ['FooLambdaFunction', 'Arn']\n    });\n  });","file":"unit/lib/plugins/aws/utils/resolve-lambda-target.test.js","skipped":false,"dir":"test"},{"name":"should return a reference to provisioned Alias Arn when provisionnedConcurrency is set","suites":["#resolveLambdaTarget"],"updatePoint":{"line":13,"column":92,"index":584},"line":13,"code":"  it('should return a reference to provisioned Alias Arn when provisionnedConcurrency is set', () => {\n    const functionObj = {\n      targetAlias: {\n        name: 'provisioned'\n      }\n    };\n    const functionName = 'foo';\n    expect(resolveLambdaTarget(functionName, functionObj)).to.deep.equal({\n      'Fn::Join': [':', [{\n        'Fn::GetAtt': ['FooLambdaFunction', 'Arn']\n      }, 'provisioned']]\n    });\n  });","file":"unit/lib/plugins/aws/utils/resolve-lambda-target.test.js","skipped":false,"dir":"test"},{"name":"should support \"config credentials\" command","suites":["Config"],"updatePoint":{"line":12,"column":49,"index":339},"line":12,"code":"  it('should support \"config credentials\" command', () => runServerless({\n    noService: true,\n    command: 'config credentials',\n    options: {\n      provider: 'aws',\n      key: 'foo',\n      secret: 'bar'\n    }\n  }));","file":"unit/lib/plugins/config.test.js","skipped":false,"dir":"test"},{"name":"should turn on autoupdate with \"--autoupdate\"","suites":["Config"],"updatePoint":{"line":21,"column":51,"index":560},"line":21,"code":"  it('should turn on autoupdate with \"--autoupdate\"', async () => {\n    await runServerless({\n      cwd: require('os').homedir(),\n      command: 'config',\n      options: {\n        autoupdate: true\n      },\n      modulesCacheStub: {\n        './lib/utils/npm-package/is-global.js': async () => true,\n        './lib/utils/npm-package/is-writable.js': async () => true\n      }\n    });\n    expect(config.get('autoUpdate.enabled')).to.be.true;\n  });","file":"unit/lib/plugins/config.test.js","skipped":false,"dir":"test"},{"name":"should turn off autoupdate with \"--no-autoupdate\"","suites":["Config"],"updatePoint":{"line":35,"column":55,"index":1008},"line":35,"code":"  it('should turn off autoupdate with \"--no-autoupdate\"', async () => {\n    await runServerless({\n      cwd: __dirname,\n      command: 'config',\n      options: {\n        autoupdate: false\n      }\n    });\n    expect(config.get('autoUpdate.enabled')).to.be.false;\n  });","file":"unit/lib/plugins/config.test.js","skipped":false,"dir":"test"},{"name":"should generate scaffolding for local template in provided path and rename service","suites":["test/unit/lib/plugins/create/create.test.js"],"updatePoint":{"line":17,"column":88,"index":585},"line":17,"code":"  it('should generate scaffolding for local template in provided path and rename service', async () => {\n    const tmpDir = getTmpDirPath();\n    await runServerless({\n      noService: true,\n      command: 'create',\n      options: {\n        'template-path': path.join(fixturesPath, 'aws'),\n        'path': tmpDir,\n        'name': 'new-service-name'\n      }\n    });\n    const dirContent = await fsp.readdir(tmpDir);\n    expect(dirContent).to.include('serverless.yml');\n    const serverlessYmlfileContent = (await fsp.readFile(path.join(tmpDir, 'serverless.yml'))).toString();\n    expect(serverlessYmlfileContent).to.include('service: new-service-name');\n  });","file":"unit/lib/plugins/create/create.test.js","skipped":false,"dir":"test"},{"name":"should error out when trying to create project in already existing directory (other than current working dir)","suites":["test/unit/lib/plugins/create/create.test.js"],"updatePoint":{"line":33,"column":115,"index":1270},"line":33,"code":"  it('should error out when trying to create project in already existing directory (other than current working dir)', async () => {\n    const tmpDir = getTmpDirPath();\n    await fse.ensureDir(tmpDir);\n    await expect(runServerless({\n      noService: true,\n      command: 'create',\n      options: {\n        template: 'aws-nodejs',\n        path: tmpDir\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'TARGET_FOLDER_ALREADY_EXISTS');\n  });","file":"unit/lib/plugins/create/create.test.js","skipped":false,"dir":"test"},{"name":"should error out when trying to create project from nonexistent template","suites":["test/unit/lib/plugins/create/create.test.js"],"updatePoint":{"line":45,"column":78,"index":1692},"line":45,"code":"  it('should error out when trying to create project from nonexistent template', async () => {\n    await expect(runServerless({\n      noService: true,\n      command: 'create',\n      options: {\n        template: 'aws-nodejs-nonexistent'\n      }\n    })).to.eventually.be.rejected.and.have.property('code', 'NOT_SUPPORTED_TEMPLATE');\n  });","file":"unit/lib/plugins/create/create.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Deploy","#constructor()"],"updatePoint":{"line":30,"column":28,"index":805},"line":30,"code":"    it('should have commands', () => expect(deploy.commands).to.be.not.empty);","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["Deploy","#constructor()"],"updatePoint":{"line":31,"column":25,"index":881},"line":31,"code":"    it('should have hooks', () => expect(deploy.hooks).to.be.not.empty);","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should work without options","suites":["Deploy","#constructor()"],"updatePoint":{"line":32,"column":35,"index":964},"line":32,"code":"    it('should work without options', () => {\n      const noOptionDeploy = new Deploy(serverless);\n      expect(noOptionDeploy).to.have.property('options').to.be.eql({});\n    });","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the package option is set","suites":["Deploy","\"before:deploy:deploy\" hook"],"updatePoint":{"line":49,"column":51,"index":1616},"line":49,"code":"    it('should resolve if the package option is set', async () => {\n      deploy.options.package = false;\n      deploy.serverless.service.package.path = 'some_path';\n      return expect(deploy.hooks['before:deploy:deploy']()).to.be.fulfilled.then(() => expect(spawnPackageStub).to.be.not.called);\n    });","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should resolve if the service package path is set","suites":["Deploy","\"before:deploy:deploy\" hook"],"updatePoint":{"line":54,"column":57,"index":1927},"line":54,"code":"    it('should resolve if the service package path is set', async () => {\n      deploy.options.package = 'some_path';\n      deploy.serverless.service.package.path = false;\n      return expect(deploy.hooks['before:deploy:deploy']()).to.be.fulfilled.then(() => expect(spawnPackageStub).to.be.not.called);\n    });","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should use the default packaging mechanism if no packaging config is provided","suites":["Deploy","\"before:deploy:deploy\" hook"],"updatePoint":{"line":59,"column":85,"index":2266},"line":59,"code":"    it('should use the default packaging mechanism if no packaging config is provided', async () => {\n      deploy.options.package = false;\n      deploy.serverless.service.package.path = false;\n      return expect(deploy.hooks['before:deploy:deploy']()).to.be.fulfilled.then(() => BbPromise.all([expect(spawnDeployFunctionStub).to.not.be.called, expect(spawnPackageStub).to.be.calledOnce, expect(spawnPackageStub).to.be.calledWithExactly('package')]));\n    });","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if provider does not exist","suites":["Deploy","\"before:deploy:deploy\" hook"],"updatePoint":{"line":64,"column":56,"index":2698},"line":64,"code":"    it('should throw an error if provider does not exist', () => {\n      deploy.serverless.service.provider.name = 'nonExistentProvider';\n      return expect(deploy.hooks['before:deploy:deploy']()).to.be.rejectedWith('The specified provider \"nonExistentProvider\" does not exist.');\n    });","file":"unit/lib/plugins/deploy.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Info","#constructor()"],"updatePoint":{"line":20,"column":28,"index":518},"line":20,"code":"    it('should have commands', () => expect(info.commands).to.be.not.empty);","file":"unit/lib/plugins/info.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Install","#constructor()"],"updatePoint":{"line":50,"column":28,"index":1322},"line":50,"code":"    it('should have commands', () => expect(install.commands).to.be.not.empty);","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["Install","#constructor()"],"updatePoint":{"line":51,"column":25,"index":1399},"line":51,"code":"    it('should have hooks', () => expect(install.hooks).to.be.not.empty);","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"install:install\" hook","suites":["Install","#constructor()"],"updatePoint":{"line":52,"column":68,"index":1516},"line":52,"code":"    it('should run promise chain in order for \"install:install\" hook', async () => install.hooks['install:install']().then(() => {\n      expect(installStub.calledOnce).to.be.equal(true);\n    }));","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the passed URL option is not a valid URL","suites":["Install","#install()"],"updatePoint":{"line":64,"column":73,"index":1961},"line":64,"code":"    it('should throw an error if the passed URL option is not a valid URL', async () => {\n      install.options = {\n        url: 'invalidUrl'\n      };\n      try {\n        await install.install();\n      } catch (e) {\n        expect(e).to.be.instanceOf(Error);\n      }\n    });","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the passed URL is not a valid GitHub URL","suites":["Install","#install()"],"updatePoint":{"line":74,"column":73,"index":2236},"line":74,"code":"    it('should throw an error if the passed URL is not a valid GitHub URL', async () => {\n      install.options = {\n        url: 'http://no-github-url.com/foo/bar'\n      };\n      try {\n        await install.install();\n      } catch (e) {\n        expect(e).to.be.instanceOf(Error);\n      }\n    });","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if a directory with the same service name is already present","suites":["Install","#install()"],"updatePoint":{"line":84,"column":90,"index":2550},"line":84,"code":"    it('should throw an error if a directory with the same service name is already present', async () => {\n      install.options = {\n        url: 'https://github.com/johndoe/existing-service'\n      };\n      const serviceDirName = path.join(serviceDir, 'existing-service');\n      fse.mkdirsSync(serviceDirName);\n      try {\n        await install.install();\n      } catch (e) {\n        expect(e).to.be.instanceOf(Error);\n      }\n    });","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should succeed if template can be downloaded and installed","suites":["Install","#install()"],"updatePoint":{"line":96,"column":66,"index":2961},"line":96,"code":"    it('should succeed if template can be downloaded and installed', async () => {\n      install.options = {\n        url: 'https://github.com/johndoe/remote-service'\n      };\n      downloadStub.resolves('remote-service');\n      return install.install().then(() => {\n        expect(downloadStub).to.have.been.calledOnce;\n      });\n    });","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should succeed and print out the desired service name","suites":["Install","#install()"],"updatePoint":{"line":105,"column":61,"index":3294},"line":105,"code":"    it('should succeed and print out the desired service name', async () => {\n      install.options = {\n        url: 'https://github.com/johndoe/remote-service'\n      };\n      install.options.name = 'remote';\n      downloadStub.resolves('remote-service');\n      return install.install().then(() => {\n        expect(downloadStub).to.have.been.calledOnce;\n      });\n    });","file":"unit/lib/plugins/install.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Invoke","#constructor()"],"updatePoint":{"line":25,"column":28,"index":655},"line":25,"code":"    it('should have commands', () => expect(invoke.commands).to.be.not.empty);","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["Invoke","#constructor()"],"updatePoint":{"line":26,"column":25,"index":731},"line":26,"code":"    it('should have hooks', () => expect(invoke.hooks).to.be.not.empty);","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should set IS_LOCAL","suites":["Invoke","#loadEnvVarsForLocal()"],"updatePoint":{"line":29,"column":27,"index":857},"line":29,"code":"    it('should set IS_LOCAL', () => {\n      invoke.loadEnvVarsForLocal();\n      expect(process.env.IS_LOCAL).to.equal('true');\n      expect(serverless.service.provider.environment.IS_LOCAL).to.equal('true');\n    });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should leave provider env variable untouched if already defined","suites":["Invoke","#loadEnvVarsForLocal()"],"updatePoint":{"line":34,"column":71,"index":1117},"line":34,"code":"    it('should leave provider env variable untouched if already defined', () => {\n      serverless.service.provider.environment = {\n        IS_LOCAL: 'false'\n      };\n      invoke.loadEnvVarsForLocal();\n      expect(serverless.service.provider.environment.IS_LOCAL).to.equal('false');\n    });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should be an event","suites":["Invoke","hooks","invoke:local:loadEnvVars"],"updatePoint":{"line":44,"column":28,"index":1450},"line":44,"code":"      it('should be an event', () => {\n        expect(invoke.commands.invoke.commands.local.lifecycleEvents).to.contain('loadEnvVars');\n      });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should set IS_LOCAL","suites":["Invoke","hooks","invoke:local:loadEnvVars"],"updatePoint":{"line":47,"column":29,"index":1597},"line":47,"code":"      it('should set IS_LOCAL', async () => expect(invoke.hooks['invoke:local:loadEnvVars']()).to.be.fulfilled.then(() => {\n        expect(process.env.IS_LOCAL).to.equal('true');\n        expect(serverless.service.provider.environment.IS_LOCAL).to.equal('true');\n      }));","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should leave provider env variable untouched if already defined","suites":["Invoke","hooks","invoke:local:loadEnvVars"],"updatePoint":{"line":51,"column":73,"index":1914},"line":51,"code":"      it('should leave provider env variable untouched if already defined', async () => {\n        serverless.service.provider.environment = {\n          IS_LOCAL: 'false'\n        };\n        return expect(invoke.hooks['invoke:local:loadEnvVars']()).to.be.fulfilled.then(() => {\n          expect(serverless.service.provider.environment.IS_LOCAL).to.equal('false');\n        });\n      });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should accept a single env option","suites":["Invoke","hooks","invoke:local:loadEnvVars"],"updatePoint":{"line":59,"column":43,"index":2268},"line":59,"code":"      it('should accept a single env option', async () => {\n        invoke.options = {\n          env: 'NAME=value'\n        };\n        return expect(invoke.hooks['invoke:local:loadEnvVars']()).to.be.fulfilled.then(() => expect(process.env.NAME).to.equal('value'));\n      });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should accept multiple env options","suites":["Invoke","hooks","invoke:local:loadEnvVars"],"updatePoint":{"line":65,"column":44,"index":2543},"line":65,"code":"      it('should accept multiple env options', async () => {\n        invoke.options = {\n          env: ['NAME1=val1', 'NAME2=val2']\n        };\n        return expect(invoke.hooks['invoke:local:loadEnvVars']()).to.be.fulfilled.then(() => expect(process.env.NAME1).to.equal('val1')).then(() => expect(process.env.NAME2).to.equal('val2'));\n      });","file":"unit/lib/plugins/invoke.test.js","skipped":false,"dir":"test"},{"name":"should have the command \"metrics\"","suites":["Metrics","#constructor()"],"updatePoint":{"line":18,"column":41,"index":491},"line":18,"code":"    it('should have the command \"metrics\"', () => {\n      // eslint-disable-next-line no-unused-expressions\n      expect(metrics.commands.metrics).to.not.be.undefined;\n    });","file":"unit/lib/plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should have a lifecycle event \"metrics\"","suites":["Metrics","#constructor()"],"updatePoint":{"line":22,"column":47,"index":673},"line":22,"code":"    it('should have a lifecycle event \"metrics\"', () => {\n      expect(metrics.commands.metrics.lifecycleEvents).to.deep.equal(['metrics']);\n    });","file":"unit/lib/plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should exclude defaults","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":77,"column":31,"index":2303},"line":77,"code":"    it('should exclude defaults', () => {\n      expect(serviceZippedFiles).to.not.include('.gitignore');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude service config","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":80,"column":37,"index":2422},"line":80,"code":"    it('should exclude service config', () => {\n      expect(serviceZippedFiles).to.not.include('serverless.yml');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude default plugins localPath","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":83,"column":48,"index":2556},"line":83,"code":"    it('should exclude default plugins localPath', () => {\n      expect(serviceZippedFiles).to.not.include('.serverless-plugins/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.exclude`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":86,"column":40,"index":2696},"line":86,"code":"    it('should support `package.exclude`', () => {\n      expect(serviceZippedFiles, fnIndividualZippedFiles).to.not.include('dir1/subdir1/index.js');\n      expect(serviceZippedFiles, fnIndividualZippedFiles).to.include('dir1/subdir3/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.include`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":90,"column":40,"index":2949},"line":90,"code":"    it('should support `package.include`', () => {\n      expect(serviceZippedFiles, fnIndividualZippedFiles).to.include('dir1/subdir2/index.js');\n      expect(serviceZippedFiles, fnIndividualZippedFiles).to.not.include('dir1/subdir2/subsubdir1/index.js');\n      expect(serviceZippedFiles, fnIndividualZippedFiles).to.include('dir1/subdir2/subsubdir2/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].package.individually`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":95,"column":57,"index":3336},"line":95,"code":"    it('should support `functions[].package.individually`', () => {\n      expect(serverless.service.getFunction('fnIndividual').package.artifact).to.include('fnIndividual.zip');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].package.exclude`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":98,"column":52,"index":3517},"line":98,"code":"    it('should support `functions[].package.exclude`', () => {\n      expect(fnIndividualZippedFiles).to.not.include('dir3/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].package.include`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":101,"column":52,"index":3659},"line":101,"code":"    it('should support `functions[].package.include`', () => {\n      expect(fnIndividualZippedFiles).to.include('dir1/subdir4/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should package layer","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","service wide"],"updatePoint":{"line":107,"column":28,"index":4005},"line":107,"code":"    it('should package layer', () => {\n      expect(fnLayerFiles).to.include('layer-module-1.js');\n      expect(fnLayerFiles).to.include('layer-module-2.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude .env files","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","with useDotenv"],"updatePoint":{"line":113,"column":33,"index":4220},"line":113,"code":"    it('should exclude .env files', async () => {\n      const {\n        fixtureData: {\n          servicePath: serviceDir,\n          serviceConfig: {\n            service: serviceName\n          }\n        }\n      } = await runServerless({\n        fixture: 'packaging',\n        command: 'package',\n        awsRequestStubMap,\n        configExt: {\n          useDotenv: true\n        }\n      });\n      const zippedFiles = await listZipFiles(path.join(serviceDir, '.serverless', `${serviceName}.zip`));\n      expect(zippedFiles).to.not.include('.env');\n      expect(zippedFiles).to.not.include('.env.stage');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude custom plugins localPath","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","individually"],"updatePoint":{"line":168,"column":47,"index":5848},"line":168,"code":"    it('should exclude custom plugins localPath', () => {\n      expect(fnIndividualZippedFiles).to.not.include('.custom-plugins/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.individually`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","individually"],"updatePoint":{"line":171,"column":45,"index":5994},"line":171,"code":"    it('should support `package.individually`', () => {\n      expect(serverless.service.getFunction('fnIndividual').package.artifact).to.include('fnIndividual.zip');\n      expect(serverless.service.getFunction('fnService').package.artifact).to.include('fnService.zip');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.exclude`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","individually"],"updatePoint":{"line":175,"column":40,"index":6267},"line":175,"code":"    it('should support `package.exclude`', () => {\n      expect(fnIndividualZippedFiles).to.not.include('dir1/subdir1/index.js');\n      expect(fnIndividualZippedFiles).to.not.include('dir1/subdir1/index.js');\n      expect(fnIndividualZippedFiles).to.include('dir1/subdir3/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.include`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","individually"],"updatePoint":{"line":180,"column":40,"index":6559},"line":180,"code":"    it('should support `package.include`', () => {\n      expect(fnIndividualZippedFiles).to.include('dir1/subdir2/index.js');\n      expect(fnIndividualZippedFiles).to.not.include('dir1/subdir2/subsubdir1/index.js');\n      expect(fnIndividualZippedFiles).to.include('dir1/subdir2/subsubdir2/index.js');\n      expect(fnIndividualZippedFiles).to.include('dir1/subdir4/index.js');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `package.artifact`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact"],"updatePoint":{"line":220,"column":41,"index":7897},"line":220,"code":"    it('should support `package.artifact`', () => {\n      expect(serverless.service.package.artifact).is.equal('artifact.zip');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should ignore `package.artifact` if `functions[].package.individually","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact"],"updatePoint":{"line":223,"column":77,"index":8069},"line":223,"code":"    it('should ignore `package.artifact` if `functions[].package.individually', () => {\n      expect(serverless.service.getFunction('fnIndividual').package.artifact).is.not.equal(serverless.service.package.artifact);\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should support `functions[].package.artifact`","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact"],"updatePoint":{"line":226,"column":53,"index":8270},"line":226,"code":"    it('should support `functions[].package.artifact`', () => {\n      expect(serverless.service.getFunction('fnArtifact').package.artifact).is.equal('artifact-function.zip');\n    });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"for function","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact with absolute artifact path","while deploying whole service"],"updatePoint":{"line":272,"column":22,"index":9593},"line":272,"code":"      it('for function', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('package-artifact');\n        const absoluteArtifactFilePath = path.join(serviceDir, 'absolute-artifact.zip');\n        await updateConfig({\n          functions: {\n            other: {\n              package: {\n                artifact: absoluteArtifactFilePath\n              }\n            }\n          }\n        });\n        await runServerless({\n          cwd: serviceDir,\n          command: 'deploy',\n          lastLifecycleHookName: 'aws:deploy:deploy:uploadArtifacts',\n          awsRequestStubMap: innerAwsRequestStubMap\n        });\n        const callArgs = s3UploadStub.args.find(item => item[0].Key.endsWith('absolute-artifact.zip'));\n        expect(callArgs[0].Body.path).to.equal(absoluteArtifactFilePath);\n      });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"service-wide","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact with absolute artifact path","while deploying whole service"],"updatePoint":{"line":296,"column":22,"index":10460},"line":296,"code":"      it('service-wide', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('package-artifact');\n        const absoluteArtifactFilePath = path.join(serviceDir, 'absolute-artifact.zip');\n        await updateConfig({\n          package: {\n            artifact: absoluteArtifactFilePath\n          }\n        });\n        await runServerless({\n          cwd: serviceDir,\n          command: 'deploy',\n          lastLifecycleHookName: 'aws:deploy:deploy:uploadArtifacts',\n          awsRequestStubMap: innerAwsRequestStubMap\n        });\n        const callArgs = s3UploadStub.args.find(item => item[0].Key.endsWith('absolute-artifact.zip'));\n        expect(callArgs[0].Body.path).to.equal(absoluteArtifactFilePath);\n      });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"for function","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact with absolute artifact path","while deploying specific function"],"updatePoint":{"line":335,"column":22,"index":11833},"line":335,"code":"      it('for function', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('package-artifact');\n        const absoluteArtifactFilePath = path.join(serviceDir, 'absolute-artifact.zip');\n        const zipContent = await fsp.readFile(absoluteArtifactFilePath);\n        await updateConfig({\n          functions: {\n            other: {\n              package: {\n                artifact: absoluteArtifactFilePath\n              }\n            }\n          }\n        });\n        await runServerless({\n          cwd: serviceDir,\n          command: 'deploy function',\n          options: {\n            function: 'other'\n          },\n          awsRequestStubMap: innerAwsRequestStubMap\n        });\n        expect(updateFunctionCodeStub).to.have.been.calledOnce;\n        expect(updateFunctionCodeStub.args[0][0].ZipFile).to.deep.equal(Buffer.from(zipContent));\n      });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"service-wide","suites":["test/unit/lib/plugins/package/lib/packageService.test.js","pre-prepared artifact with absolute artifact path","while deploying specific function"],"updatePoint":{"line":362,"column":22,"index":12760},"line":362,"code":"      it('service-wide', async () => {\n        const {\n          servicePath: serviceDir,\n          updateConfig\n        } = await fixtures.setup('package-artifact');\n        const absoluteArtifactFilePath = path.join(serviceDir, 'absolute-artifact.zip');\n        const zipContent = await fsp.readFile(absoluteArtifactFilePath);\n        await updateConfig({\n          package: {\n            artifact: absoluteArtifactFilePath\n          }\n        });\n        await runServerless({\n          cwd: serviceDir,\n          command: 'deploy function',\n          options: {\n            function: 'foo'\n          },\n          awsRequestStubMap: innerAwsRequestStubMap\n        });\n        expect(updateFunctionCodeStub).to.have.been.calledOnce;\n        expect(updateFunctionCodeStub.args[0][0].ZipFile).to.deep.equal(Buffer.from(zipContent));\n      });","file":"unit/lib/plugins/package/lib/package-service.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order","suites":["zipService","#zipService()"],"updatePoint":{"line":58,"column":41,"index":1796},"line":58,"code":"    it('should run promise chain in order', async () => {\n      const exclude = params.exclude;\n      const include = params.include;\n      const zipFileName = params.zipFileName;\n      return expect(packagePlugin.zipService(exclude, include, zipFileName)).to.be.fulfilled.then(() => {\n        expect(excludeDevDependenciesStub).to.have.been.calledOnce;\n        expect(zipStub).to.have.been.calledOnce;\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should keep the file content as is","suites":["zipService","#getFileContentAndStat()"],"updatePoint":{"line":74,"column":42,"index":2396},"line":74,"code":"    it('should keep the file content as is', async () => {\n      const buf = Buffer.from([10, 20, 30, 40, 50]);\n      const filePath = path.join(serviceDir, 'bin-file');\n      fs.writeFileSync(filePath, buf);\n      return expect(packagePlugin.getFileContentAndStat(filePath)).to.be.fulfilled.then(result => {\n        expect(result.data).to.deep.equal(buf);\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should keep the file content as is","suites":["zipService","#getFileContent()"],"updatePoint":{"line":89,"column":42,"index":2942},"line":89,"code":"    it('should keep the file content as is', async () => {\n      const buf = Buffer.from([10, 20, 30, 40, 50]);\n      const filePath = path.join(serviceDir, 'bin-file');\n      fs.writeFileSync(filePath, buf);\n      return expect(packagePlugin.getFileContent(filePath)).to.be.fulfilled.then(result => {\n        expect(result).to.deep.equal(buf);\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should resolve when opted out of dev dependency exclusion","suites":["zipService","#excludeDevDependencies()"],"updatePoint":{"line":99,"column":65,"index":3382},"line":99,"code":"    it('should resolve when opted out of dev dependency exclusion', async () => {\n      packagePlugin.serverless.service.package.excludeDevDependencies = false;\n      return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n        expect(updatedParams).to.deep.equal(params);\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should do nothing if no packages are used","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":121,"column":51,"index":4280},"line":121,"code":"      it('should do nothing if no packages are used', async () => {\n        const filePaths = [];\n        globbySyncStub.returns(filePaths);\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub).to.not.have.been.called;\n          expect(readFileAsyncStub).to.not.have.been.called;\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me']);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should do nothing if no dependencies are found","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":140,"column":56,"index":5229},"line":140,"code":"      it('should do nothing if no dependencies are found', async () => {\n        const filePaths = ['package.json', 'node_modules'];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const depPaths = '';\n        readFileAsyncStub.resolves(depPaths);\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.been.calledTwice;\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(execAsyncStub.args[0][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[0][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[1][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[1][1].cwd).to.match(/.+/);\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me']);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should return excludes and includes if an error is thrown in the global scope","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":166,"column":87,"index":6727},"line":166,"code":"      it('should return excludes and includes if an error is thrown in the global scope', () => {\n        globbySyncStub.throws();\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub).to.not.have.been.called;\n          expect(readFileAsyncStub).to.not.have.been.called;\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me']);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should return excludes and includes if a exec Promise is rejected","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":177,"column":75,"index":7394},"line":177,"code":"      it('should return excludes and includes if a exec Promise is rejected', async () => {\n        const filePaths = ['package.json', 'node_modules'];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.onCall(0).resolves();\n        execAsyncStub.onCall(1).rejects();\n        readFileAsyncStub.resolves();\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.been.calledTwice;\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me']);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should return excludes and includes if a readFile Promise is rejected","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":192,"column":79,"index":8263},"line":192,"code":"      it('should return excludes and includes if a readFile Promise is rejected', async () => {\n        const filePaths = ['package.json', 'node_modules'];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        readFileAsyncStub.onCall(0).resolves();\n        readFileAsyncStub.onCall(1).rejects();\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.been.calledTwice;\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me']);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should fail silently and continue if \"npm ls\" call throws an error","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":207,"column":76,"index":9133},"line":207,"code":"      it('should fail silently and continue if \"npm ls\" call throws an error', async () => {\n        const filePaths = [\n        // root of the service\n        'package.json', 'node_modules',\n        // nested-dir\n        // NOTE: reading the dependencies in this directory will fail in this tests\n        path.join('1st', 'package.json'), path.join('1st', 'node_modules'),\n        // nested-dir which is nested\n        path.join('1st', '2nd', 'package.json'), path.join('1st', '2nd', 'node_modules')];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.onCall(0).resolves();\n        execAsyncStub.onCall(1).resolves();\n        execAsyncStub.onCall(2).rejects();\n        execAsyncStub.onCall(3).rejects();\n        execAsyncStub.onCall(4).resolves();\n        execAsyncStub.onCall(5).resolves();\n        const depPaths = [path.join(serviceDir, 'node_modules', 'module-1'), path.join(serviceDir, 'node_modules', 'module-2'), path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-1'), path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-2')].join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(depPaths);\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves([]);\n        readFileAsyncStub.onCall(2).resolves('{}');\n        readFileAsyncStub.onCall(3).resolves('{}');\n        readFileAsyncStub.onCall(4).resolves('{}');\n        readFileAsyncStub.onCall(5).resolves('{}');\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub.callCount).to.equal(6);\n          expect(readFileAsyncStub).to.have.callCount(6);\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'module-1', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'module-2', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-1', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-1', 'package.json'));\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(execAsyncStub.args[0][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[0][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[1][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[1][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[2][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[2][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[3][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[3][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[4][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[4][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[5][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[5][1].cwd).to.match(/.+/);\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'module-1', '**'), path.join('node_modules', 'module-2', '**'), path.join('1st', '2nd', 'node_modules', 'module-1', '**'), path.join('1st', '2nd', 'node_modules', 'module-2', '**')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude dev dependencies in the services root directory","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":262,"column":72,"index":13241},"line":262,"code":"      it('should exclude dev dependencies in the services root directory', async () => {\n        const filePaths = ['package.json', 'node_modules'];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const depPaths = [path.join(serviceDir, 'node_modules', 'module-1'), path.join(serviceDir, 'node_modules', 'module-2')].join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(depPaths);\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves([]);\n        readFileAsyncStub.onCall(2).resolves('{}');\n        readFileAsyncStub.onCall(3).resolves('{}');\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.callCount(4);\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'module-1', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'module-2', 'package.json'));\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(execAsyncStub.args[0][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[0][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[1][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[1][1].cwd).to.match(/.+/);\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'module-1', '**'), path.join('node_modules', 'module-2', '**')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude dev dependencies in deeply nested services directories","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":293,"column":79,"index":15391},"line":293,"code":"      it('should exclude dev dependencies in deeply nested services directories', async () => {\n        const filePaths = [\n        // root of the service\n        'package.json', 'node_modules',\n        // nested-dir\n        path.join('1st', 'package.json'), path.join('1st', 'node_modules'),\n        // nested-dir which is nested\n        path.join('1st', '2nd', 'package.json'), path.join('1st', '2nd', 'node_modules')];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const depPaths = [path.join(serviceDir, 'node_modules', 'module-1'), path.join(serviceDir, 'node_modules', 'module-2'), path.join(serviceDir, '1st', 'node_modules', 'module-1'), path.join(serviceDir, '1st', 'node_modules', 'module-2'), path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-1'), path.join(serviceDir, '1st', '2nd', 'node_modules', 'module-2')].join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(depPaths);\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves([]);\n        readFileAsyncStub.onCall(2).resolves('{}');\n        readFileAsyncStub.onCall(3).resolves('{}');\n        readFileAsyncStub.onCall(4).resolves('{}');\n        readFileAsyncStub.onCall(5).resolves('{}');\n        readFileAsyncStub.onCall(6).resolves('{}');\n        readFileAsyncStub.onCall(7).resolves('{}');\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub.callCount).to.equal(6);\n          expect(readFileAsyncStub).to.have.callCount(8);\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(execAsyncStub.args[0][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[0][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[1][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[1][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[2][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[2][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[3][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[3][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[4][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[4][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[5][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[5][1].cwd).to.match(/.+/);\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'module-1', '**'), path.join('node_modules', 'module-2', '**'), path.join('1st', 'node_modules', 'module-1', '**'), path.join('1st', 'node_modules', 'module-2', '**'), path.join('1st', '2nd', 'node_modules', 'module-1', '**'), path.join('1st', '2nd', 'node_modules', 'module-2', '**')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should not include packages if in both dependencies and devDependencies","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":340,"column":81,"index":18980},"line":340,"code":"      it('should not include packages if in both dependencies and devDependencies', async () => {\n        const filePaths = ['package.json', 'node_modules'];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const devDepPaths = [path.join(serviceDir, 'node_modules', 'module-1'), path.join(serviceDir, 'node_modules', 'module-2')].join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(devDepPaths);\n        const prodDepPaths = [path.join(serviceDir, 'node_modules', 'module-2')];\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves(prodDepPaths);\n        readFileAsyncStub.onCall(2).resolves('{}');\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.been.calledThrice;\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'module-1', 'package.json'));\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(execAsyncStub.args[0][0]).to.match(/npm ls --dev=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[0][1].cwd).to.match(/.+/);\n          expect(execAsyncStub.args[1][0]).to.match(/npm ls --prod=true --parseable=true --long=false --silent --all >> .+/);\n          expect(execAsyncStub.args[1][1].cwd).to.match(/.+/);\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'module-1', '**')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude dev dependency executables in node_modules/.bin","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":370,"column":72,"index":21001},"line":370,"code":"      it('should exclude dev dependency executables in node_modules/.bin', async () => {\n        const devPaths = ['node_modules/bro-module', 'node_modules/node-dude', 'node_modules/lumo-clj', 'node_modules/meowmix'];\n        const prodPaths = ['node_modules/node-dude'];\n        const filePaths = ['node_modules/', 'package.json'].concat(devPaths).concat(prodPaths);\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const mapper = depPath => path.join(`${serviceDir}`, depPath);\n        const devDepPaths = devPaths.map(mapper).join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(devDepPaths);\n        const prodDepPaths = prodPaths.map(mapper).join(os.EOL);\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves(prodDepPaths);\n        readFileAsyncStub.onCall(2).resolves('{\"name\": \"bro-module\", \"bin\": \"main.js\"}');\n        readFileAsyncStub.onCall(3).resolves('{\"name\": \"lumo-clj\", \"bin\": {\"lumo\": \"./bin/lumo.js\"}}');\n        readFileAsyncStub.onCall(4)\n        // need to handle possibility of multiple executables provided by the lib\n        .resolves('{\"name\": \"meowmix\", \"bin\": {\"meow\": \"./bin/meow.js\", \"mix\": \"./bin/mix.js\"}}');\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.been.calledOnce;\n          expect(execAsyncStub).to.have.been.calledTwice;\n          expect(readFileAsyncStub).to.have.callCount(5);\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'bro-module', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'lumo-clj', 'package.json'));\n          expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, 'node_modules', 'meowmix', 'package.json'));\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'bro-module', '**'), path.join('node_modules', '.bin', 'bro-module'), path.join('node_modules', 'lumo-clj', '**'), path.join('node_modules', '.bin', 'lumo'), path.join('node_modules', 'meowmix', '**'), path.join('node_modules', '.bin', 'meow'), path.join('node_modules', '.bin', 'mix')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude .bin executables in deeply nested folders","suites":["zipService","#excludeDevDependencies()","when dealing with Node.js runtimes"],"updatePoint":{"line":398,"column":66,"index":23449},"line":398,"code":"      it('should exclude .bin executables in deeply nested folders', async () => {\n        const filePaths = ['package.json', 'node_modules', path.join('1st', 'package.json'), path.join('1st', 'node_modules'), path.join('1st', '2nd', 'package.json'), path.join('1st', '2nd', 'node_modules')];\n        globbySyncStub.returns(filePaths);\n        execAsyncStub.resolves();\n        const deps = ['node_modules/module-1', 'node_modules/module-2', '1st/node_modules/module-1', '1st/node_modules/module-2', '1st/2nd/node_modules/module-1', '1st/2nd/node_modules/module-2'];\n        const depPaths = deps.map(depPath => path.join(`${serviceDir}`, depPath));\n        readFileAsyncStub.withArgs(sinon.match(/dev$/)).resolves(depPaths.join(os.EOL));\n        readFileAsyncStub.withArgs(sinon.match(/prod$/)).resolves([]);\n        const module1PackageJson = JSON.stringify({\n          name: 'module-1',\n          bin: {\n            'cool-module': './index.js'\n          }\n        });\n        const module2PackageJson = JSON.stringify({\n          name: 'module-2',\n          bin: './main.js'\n        });\n        readFileAsyncStub.onCall(2).resolves(module1PackageJson);\n        readFileAsyncStub.onCall(3).resolves(module2PackageJson);\n        readFileAsyncStub.onCall(4).resolves(module1PackageJson);\n        readFileAsyncStub.onCall(5).resolves(module2PackageJson);\n        readFileAsyncStub.onCall(6).resolves(module1PackageJson);\n        readFileAsyncStub.onCall(7).resolves(module2PackageJson);\n        return expect(packagePlugin.excludeDevDependencies(params)).to.be.fulfilled.then(updatedParams => {\n          expect(globbySyncStub).to.have.been.calledOnce;\n          expect(execAsyncStub.callCount).to.equal(6);\n          expect(readFileAsyncStub).to.have.callCount(8);\n          for (const depPath of deps) {\n            expect(readFileAsyncStub).to.have.been.calledWith(path.join(serviceDir, depPath, 'package.json'));\n          }\n          expect(globbySyncStub).to.have.been.calledWithExactly(['**/package.json'], {\n            cwd: packagePlugin.serverless.serviceDir,\n            dot: true,\n            silent: true,\n            follow: true,\n            nosort: true\n          });\n          expect(updatedParams.exclude).to.deep.equal(['user-defined-exclude-me', path.join('node_modules', 'module-1', '**'), path.join('node_modules', '.bin', 'cool-module'), path.join('node_modules', 'module-2', '**'), path.join('node_modules', '.bin/module-2'), path.join('1st', 'node_modules', 'module-1', '**'), path.join('1st', 'node_modules', '.bin', 'cool-module'), path.join('1st', 'node_modules', 'module-2', '**'), path.join('1st', 'node_modules', '.bin', 'module-2'), path.join('1st', '2nd', 'node_modules', 'module-1', '**'), path.join('1st', '2nd', 'node_modules', '.bin', 'cool-module'), path.join('1st', '2nd', 'node_modules', 'module-2', '**'), path.join('1st', '2nd', 'node_modules', '.bin', 'module-2')]);\n          expect(updatedParams.include).to.deep.equal(['user-defined-include-me']);\n          expect(updatedParams.zipFileName).to.equal(params.zipFileName);\n        });\n      });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should zip a whole service (without include / exclude usage)","suites":["zipService","#zip()"],"updatePoint":{"line":505,"column":68,"index":28317},"line":505,"code":"    it('should zip a whole service (without include / exclude usage)', async () => {\n      params.zipFileName = getTestArtifactFileName('whole-service');\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).filter(file => !unzippedFileData[file].dir)).to.be.lengthOf(12);\n\n        // root directory\n        expect(unzippedFileData['event.json'].name).to.equal('event.json');\n        expect(unzippedFileData['handler.js'].name).to.equal('handler.js');\n        expect(unzippedFileData['file-1'].name).to.equal('file-1');\n        expect(unzippedFileData['file-2'].name).to.equal('file-2');\n\n        // bin directory\n        expect(unzippedFileData['bin/binary-777'].name).to.equal('bin/binary-777');\n        expect(unzippedFileData['bin/binary-444'].name).to.equal('bin/binary-444');\n\n        // lib directory\n        expect(unzippedFileData['lib/file-1.js'].name).to.equal('lib/file-1.js');\n        expect(unzippedFileData['lib/directory-1/file-1.js'].name).to.equal('lib/directory-1/file-1.js');\n\n        // node_modules directory\n        expect(unzippedFileData['node_modules/directory-1/file-1'].name).to.equal('node_modules/directory-1/file-1');\n        expect(unzippedFileData['node_modules/directory-1/file-2'].name).to.equal('node_modules/directory-1/file-2');\n        expect(unzippedFileData['node_modules/directory-2/file-1'].name).to.equal('node_modules/directory-2/file-1');\n        expect(unzippedFileData['node_modules/directory-2/file-2'].name).to.equal('node_modules/directory-2/file-2');\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should keep file permissions","suites":["zipService","#zip()"],"updatePoint":{"line":535,"column":36,"index":30148},"line":535,"code":"    it('should keep file permissions', async () => {\n      params.zipFileName = getTestArtifactFileName('file-permissions');\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        if (os.platform() !== 'win32') {\n          // chmod does not work right on windows\n          // binary file is set with chmod of 777\n          expect(unzippedFileData['bin/binary-777'].unixPermissions).to.equal(Math.pow(2, 15) + 0o755);\n\n          // read only file is set with chmod of 444\n          expect(unzippedFileData['bin/binary-444'].unixPermissions).to.equal(Math.pow(2, 15) + 0o644);\n        }\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should exclude with globs","suites":["zipService","#zip()"],"updatePoint":{"line":552,"column":33,"index":31052},"line":552,"code":"    it('should exclude with globs', async () => {\n      params.zipFileName = getTestArtifactFileName('exclude-with-globs');\n      params.exclude = ['event.json', 'lib/**', 'node_modules/directory-1/**'];\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).filter(file => !unzippedFileData[file].dir)).to.be.lengthOf(7);\n\n        // root directory\n        expect(unzippedFileData['handler.js'].name).to.equal('handler.js');\n        expect(unzippedFileData['file-1'].name).to.equal('file-1');\n        expect(unzippedFileData['file-2'].name).to.equal('file-2');\n\n        // bin directory\n        expect(unzippedFileData['bin/binary-777'].name).to.equal('bin/binary-777');\n        expect(unzippedFileData['bin/binary-444'].name).to.equal('bin/binary-444');\n\n        // node_modules directory\n        expect(unzippedFileData['node_modules/directory-2/file-1'].name).to.equal('node_modules/directory-2/file-1');\n        expect(unzippedFileData['node_modules/directory-2/file-2'].name).to.equal('node_modules/directory-2/file-2');\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should re-include files using ! glob pattern","suites":["zipService","#zip()"],"updatePoint":{"line":576,"column":52,"index":32457},"line":576,"code":"    it('should re-include files using ! glob pattern', async () => {\n      params.zipFileName = getTestArtifactFileName('re-include-with-globs');\n      params.exclude = ['event.json', 'lib/**', 'node_modules/directory-1/**', '!event.json',\n      // re-include\n      '!lib/**' // re-include\n      ];\n\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).filter(file => !unzippedFileData[file].dir)).to.be.lengthOf(10);\n\n        // root directory\n        expect(unzippedFileData['event.json'].name).to.equal('event.json');\n        expect(unzippedFileData['handler.js'].name).to.equal('handler.js');\n        expect(unzippedFileData['file-1'].name).to.equal('file-1');\n        expect(unzippedFileData['file-2'].name).to.equal('file-2');\n\n        // bin directory\n        expect(unzippedFileData['bin/binary-777'].name).to.equal('bin/binary-777');\n        expect(unzippedFileData['bin/binary-444'].name).to.equal('bin/binary-444');\n\n        // lib directory\n        expect(unzippedFileData['lib/file-1.js'].name).to.equal('lib/file-1.js');\n        expect(unzippedFileData['lib/directory-1/file-1.js'].name).to.equal('lib/directory-1/file-1.js');\n\n        // node_modules directory\n        expect(unzippedFileData['node_modules/directory-2/file-1'].name).to.equal('node_modules/directory-2/file-1');\n        expect(unzippedFileData['node_modules/directory-2/file-2'].name).to.equal('node_modules/directory-2/file-2');\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should re-include files using include config","suites":["zipService","#zip()"],"updatePoint":{"line":609,"column":52,"index":34230},"line":609,"code":"    it('should re-include files using include config', async () => {\n      params.zipFileName = getTestArtifactFileName('re-include-with-include');\n      params.exclude = ['event.json', 'lib/**', 'node_modules/directory-1/**'];\n      params.include = ['event.json', 'lib/**'];\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).filter(file => !unzippedFileData[file].dir)).to.be.lengthOf(10);\n\n        // root directory\n        expect(unzippedFileData['event.json'].name).to.equal('event.json');\n        expect(unzippedFileData['handler.js'].name).to.equal('handler.js');\n        expect(unzippedFileData['file-1'].name).to.equal('file-1');\n        expect(unzippedFileData['file-2'].name).to.equal('file-2');\n\n        // bin directory\n        expect(unzippedFileData['bin/binary-777'].name).to.equal('bin/binary-777');\n        expect(unzippedFileData['bin/binary-444'].name).to.equal('bin/binary-444');\n\n        // lib directory\n        expect(unzippedFileData['lib/file-1.js'].name).to.equal('lib/file-1.js');\n        expect(unzippedFileData['lib/directory-1/file-1.js'].name).to.equal('lib/directory-1/file-1.js');\n\n        // node_modules directory\n        expect(unzippedFileData['node_modules/directory-2/file-1'].name).to.equal('node_modules/directory-2/file-1');\n        expect(unzippedFileData['node_modules/directory-2/file-2'].name).to.equal('node_modules/directory-2/file-2');\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should include files even if outside working dir","suites":["zipService","#zip()"],"updatePoint":{"line":639,"column":56,"index":35984},"line":639,"code":"    it('should include files even if outside working dir', async () => {\n      params.zipFileName = getTestArtifactFileName('include-outside-working-dir');\n      serverless.serviceDir = path.join(serverless.serviceDir, 'lib');\n      params.exclude = ['./**'];\n      params.include = ['../bin/binary-**'];\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).sort()).to.deep.equal(['bin/binary-444', 'bin/binary-777']);\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should include files only once","suites":["zipService","#zip()"],"updatePoint":{"line":652,"column":38,"index":36746},"line":652,"code":"    it('should include files only once', async () => {\n      params.zipFileName = getTestArtifactFileName('include-outside-working-dir');\n      serverless.serviceDir = path.join(serverless.serviceDir, 'lib');\n      params.exclude = ['./**'];\n      params.include = ['.././bin/**'];\n      return expect(packagePlugin.zip(params)).to.eventually.be.equal(path.join(serverless.serviceDir, '.serverless', params.zipFileName)).then(artifact => {\n        const data = fs.readFileSync(artifact);\n        return expect(zip.loadAsync(data)).to.be.fulfilled;\n      }).then(unzippedData => {\n        const unzippedFileData = unzippedData.files;\n        expect(Object.keys(unzippedFileData).sort()).to.deep.equal(['bin/binary-444', 'bin/binary-777']);\n      });\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if no files are matched","suites":["zipService","#zip()"],"updatePoint":{"line":665,"column":53,"index":37518},"line":665,"code":"    it('should throw an error if no files are matched', () => {\n      params.exclude = ['**/**'];\n      params.include = [];\n      params.zipFileName = getTestArtifactFileName('empty');\n      return expect(packagePlugin.zip(params)).to.be.rejectedWith(Error, 'file matches include / exclude');\n    });","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if no files are provided","suites":["zipService","#zipFiles()"],"updatePoint":{"line":673,"column":54,"index":37861},"line":673,"code":"    it('should throw an error if no files are provided', () => expect(packagePlugin.zipFiles([], path.resolve(__dirname, 'tmp.zip'))).to.be.rejectedWith(Error, 'No files to package'));","file":"unit/lib/plugins/package/lib/zip-service.test.js","skipped":false,"dir":"test"},{"name":"should set the serverless instance","suites":["Package","#constructor()"],"updatePoint":{"line":31,"column":42,"index":808},"line":31,"code":"    it('should set the serverless instance', () => {\n      expect(pkg.serverless).to.equal(serverless);\n    });","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should set the options","suites":["Package","#constructor()"],"updatePoint":{"line":34,"column":30,"index":908},"line":34,"code":"    it('should set the options', () => {\n      expect(pkg.options).to.equal(options);\n    });","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Package","#constructor()"],"updatePoint":{"line":37,"column":28,"index":1000},"line":37,"code":"    it('should have commands', () => expect(pkg.commands).to.be.not.empty);","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["Package","#constructor()"],"updatePoint":{"line":38,"column":25,"index":1073},"line":38,"code":"    it('should have hooks', () => expect(pkg.hooks).to.be.not.empty);","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should implement the package:createDeploymentArtifacts event","suites":["Package","hooks"],"updatePoint":{"line":51,"column":68,"index":1537},"line":51,"code":"    it('should implement the package:createDeploymentArtifacts event', () => expect(pkg.hooks).to.have.property('package:createDeploymentArtifacts'));","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should implement the package:function:package event","suites":["Package","hooks"],"updatePoint":{"line":52,"column":59,"index":1679},"line":52,"code":"    it('should implement the package:function:package event', () => expect(pkg.hooks).to.have.property('package:function:package'));","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should call packageService","suites":["Package","hooks","package:createDeploymentArtifacts"],"updatePoint":{"line":54,"column":36,"index":1847},"line":54,"code":"      it('should call packageService', async () => expect(pkg.hooks['package:createDeploymentArtifacts']()).to.be.fulfilled.then(() => expect(packageServiceStub).to.be.calledOnce));","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should call packageFunction","suites":["Package","hooks","package:function:package"],"updatePoint":{"line":57,"column":37,"index":2087},"line":57,"code":"      it('should call packageFunction', async () => {\n        pkg.options.function = 'myFunction';\n        return expect(pkg.hooks['package:function:package']()).to.be.fulfilled.then(() => expect(packageFunctionStub).to.be.calledOnce);\n      });","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should fail without function option","suites":["Package","hooks","package:function:package"],"updatePoint":{"line":61,"column":45,"index":2341},"line":61,"code":"      it('should fail without function option', async () => {\n        pkg.options.function = false;\n        return expect(pkg.hooks['package:function:package']()).to.be.rejectedWith('Function name must be set').then(() => expect(packageFunctionStub).to.be.not.called);\n      });","file":"unit/lib/plugins/package/package.test.js","skipped":false,"dir":"test"},{"name":"should fetch and return the plugins from the plugins repository","suites":["PluginUtils","#getPlugins()"],"updatePoint":{"line":48,"column":71,"index":1684},"line":48,"code":"    it('should fetch and return the plugins from the plugins repository', async () => {\n      const endpoint = 'https://raw.githubusercontent.com/serverless/plugins/master/plugins.json';\n      return pluginWithFetchStub.getPlugins().then(result => {\n        expect(fetchStub.calledOnce).to.equal(true);\n        expect(fetchStub.args[0][0]).to.equal(endpoint);\n        expect(result).to.deep.equal(plugins);\n      });\n    });","file":"unit/lib/plugins/plugin/lib/utils.test.js","skipped":false,"dir":"test"},{"name":"should display the plugins if present","suites":["PluginUtils","#display()"],"updatePoint":{"line":58,"column":45,"index":2122},"line":58,"code":"    it('should display the plugins if present', async () => {\n      const output = await observeOutput(() => pluginUtils.display(plugins));\n      let expectedMessage = '';\n      expectedMessage += 'serverless-existing-plugin Serverless Existing plugin\\n';\n      expectedMessage += 'serverless-plugin-1 Serverless Plugin 1\\n';\n      expectedMessage += 'serverless-plugin-2 Serverless Plugin 2\\n\\n';\n      expectedMessage += 'Install a plugin by running:\\n';\n      expectedMessage += '  serverless plugin install --name ...\\n\\n';\n      expectedMessage += 'It will be automatically downloaded and added to package.json and serverless.yml\\n';\n      expect(output).to.equal(expectedMessage);\n    });","file":"unit/lib/plugins/plugin/lib/utils.test.js","skipped":false,"dir":"test"},{"name":"should have the sub-command \"list\"","suites":["PluginList","#constructor()"],"updatePoint":{"line":30,"column":42,"index":886},"line":30,"code":"    it('should have the sub-command \"list\"', () => {\n      expect(pluginList.commands.plugin.commands.list).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/plugin/list.test.js","skipped":false,"dir":"test"},{"name":"should have the lifecycle event \"list\" for the \"list\" sub-command","suites":["PluginList","#constructor()"],"updatePoint":{"line":33,"column":73,"index":1058},"line":33,"code":"    it('should have the lifecycle event \"list\" for the \"list\" sub-command', () => {\n      expect(pluginList.commands.plugin.commands.list.lifecycleEvents).to.deep.equal(['list']);\n    });","file":"unit/lib/plugins/plugin/list.test.js","skipped":false,"dir":"test"},{"name":"should have a \"plugin:list:list\" hook","suites":["PluginList","#constructor()"],"updatePoint":{"line":36,"column":45,"index":1218},"line":36,"code":"    it('should have a \"plugin:list:list\" hook', () => {\n      expect(pluginList.hooks['plugin:list:list']).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/plugin/list.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"plugin:list:list\" hook","suites":["PluginList","#constructor()"],"updatePoint":{"line":39,"column":69,"index":1382},"line":39,"code":"    it('should run promise chain in order for \"plugin:list:list\" hook', async () => {\n      await pluginList.hooks['plugin:list:list']();\n      expect(listStub).to.have.been.calledOnce;\n    });","file":"unit/lib/plugins/plugin/list.test.js","skipped":false,"dir":"test"},{"name":"should print a list with all available plugins","suites":["PluginList","#list()"],"updatePoint":{"line":55,"column":54,"index":1948},"line":55,"code":"    it('should print a list with all available plugins', async () => pluginList.list().then(() => {\n      expect(getPluginsStub.calledOnce).to.equal(true);\n      expect(displayStub.calledOnce).to.equal(true);\n    }));","file":"unit/lib/plugins/plugin/list.test.js","skipped":false,"dir":"test"},{"name":"should have the sub-command \"search\"","suites":["PluginSearch","#constructor()"],"updatePoint":{"line":43,"column":44,"index":1411},"line":43,"code":"    it('should have the sub-command \"search\"', () => {\n      expect(pluginSearch.commands.plugin.commands.search).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"should have the lifecycle event \"search\" for the \"search\" sub-command","suites":["PluginSearch","#constructor()"],"updatePoint":{"line":46,"column":77,"index":1591},"line":46,"code":"    it('should have the lifecycle event \"search\" for the \"search\" sub-command', () => {\n      expect(pluginSearch.commands.plugin.commands.search.lifecycleEvents).to.deep.equal(['search']);\n    });","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"should have a required option \"query\" for the \"search\" sub-command","suites":["PluginSearch","#constructor()"],"updatePoint":{"line":49,"column":74,"index":1786},"line":49,"code":"    it('should have a required option \"query\" for the \"search\" sub-command', () => {\n      // eslint-disable-next-line no-unused-expressions\n      expect(pluginSearch.commands.plugin.commands.search.options.query.required).to.be.true;\n    });","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"should have a \"plugin:search:search\" hook","suites":["PluginSearch","#constructor()"],"updatePoint":{"line":53,"column":49,"index":2004},"line":53,"code":"    it('should have a \"plugin:search:search\" hook', () => {\n      expect(pluginSearch.hooks['plugin:search:search']).to.not.equal(undefined);\n    });","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"should run promise chain in order for \"plugin:search:search\" hook","suites":["PluginSearch","#constructor()"],"updatePoint":{"line":56,"column":73,"index":2178},"line":56,"code":"    it('should run promise chain in order for \"plugin:search:search\" hook', async () => expect(pluginSearch.hooks['plugin:search:search']()).to.be.fulfilled.then(() => {\n      expect(searchStub.calledOnce).to.equal(true);\n    }));","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"should return a list of plugins based on the search query","suites":["PluginSearch","#search()"],"updatePoint":{"line":71,"column":65,"index":2805},"line":71,"code":"    it('should return a list of plugins based on the search query', async () => {\n      pluginSearch.options.query = 'serverless-plugin-1';\n      return expect(pluginSearch.search()).to.be.fulfilled.then(() => {\n        expect(getPluginsStub.calledOnce).to.equal(true);\n        expect(displayStub.calledOnce).to.equal(true);\n      });\n    });","file":"unit/lib/plugins/plugin/search.test.js","skipped":false,"dir":"test"},{"name":"correctly prints config","suites":["test/unit/lib/plugins/print.test.js"],"updatePoint":{"line":8,"column":29,"index":262},"line":8,"code":"  it('correctly prints config', async () => {\n    const {\n      output\n    } = await runServerless({\n      fixture: 'aws',\n      command: 'print'\n    });\n    expect(output).to.include('name: aws');\n  });","file":"unit/lib/plugins/print.test.js","skipped":false,"dir":"test"},{"name":"should have access to the serverless instance","suites":["Remove","#constructor()"],"updatePoint":{"line":18,"column":53,"index":483},"line":18,"code":"    it('should have access to the serverless instance', () => {\n      expect(remove.serverless).to.deep.equal(serverless);\n    });","file":"unit/lib/plugins/remove.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["Remove","#constructor()"],"updatePoint":{"line":21,"column":28,"index":589},"line":21,"code":"    it('should have commands', () => expect(remove.commands).to.be.not.empty);","file":"unit/lib/plugins/remove.test.js","skipped":false,"dir":"test"},{"name":"should have the command \"rollback\"","suites":["Rollback","#constructor()","when dealing with normal rollbacks"],"updatePoint":{"line":18,"column":44,"index":526},"line":18,"code":"      it('should have the command \"rollback\"', () => {\n        // eslint-disable-next-line no-unused-expressions\n        expect(rollback.commands.rollback).to.not.be.undefined;\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should have a lifecycle events initialize and rollback","suites":["Rollback","#constructor()","when dealing with normal rollbacks"],"updatePoint":{"line":22,"column":64,"index":733},"line":22,"code":"      it('should have a lifecycle events initialize and rollback', () => {\n        expect(rollback.commands.rollback.lifecycleEvents).to.deep.equal(['initialize', 'rollback']);\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should not have a required option timestamp","suites":["Rollback","#constructor()","when dealing with normal rollbacks"],"updatePoint":{"line":25,"column":53,"index":909},"line":25,"code":"      it('should not have a required option timestamp', () => {\n        // eslint-disable-next-line no-unused-expressions\n        expect(rollback.commands.rollback.options.timestamp.required).to.be.false;\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should have the command \"rollback function\"","suites":["Rollback","#constructor()","when dealing with function rollbacks"],"updatePoint":{"line":31,"column":53,"index":1193},"line":31,"code":"      it('should have the command \"rollback function\"', () => {\n        // eslint-disable-next-line no-unused-expressions\n        expect(rollback.commands.rollback.commands.function).to.not.be.undefined;\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should have a lifecycle event rollback","suites":["Rollback","#constructor()","when dealing with function rollbacks"],"updatePoint":{"line":35,"column":48,"index":1402},"line":35,"code":"      it('should have a lifecycle event rollback', () => {\n        expect(rollback.commands.rollback.commands.function.lifecycleEvents).to.deep.equal(['rollback']);\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should have a required option function","suites":["Rollback","#constructor()","when dealing with function rollbacks"],"updatePoint":{"line":38,"column":48,"index":1577},"line":38,"code":"      it('should have a required option function', () => {\n        // eslint-disable-next-line no-unused-expressions\n        expect(rollback.commands.rollback.commands.function.options.function.required).to.be.true;\n      });","file":"unit/lib/plugins/rollback.test.js","skipped":false,"dir":"test"},{"name":"should have access to the serverless instance","suites":["SlStats","#constructor()"],"updatePoint":{"line":22,"column":53,"index":643},"line":22,"code":"    it('should have access to the serverless instance', () => {\n      expect(slStats.serverless).to.deep.equal(serverless);\n    });","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should have commands","suites":["SlStats","#constructor()"],"updatePoint":{"line":25,"column":28,"index":750},"line":25,"code":"    it('should have commands', () => expect(slStats.commands).to.be.not.empty);","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should have hooks","suites":["SlStats","#constructor()"],"updatePoint":{"line":26,"column":25,"index":827},"line":26,"code":"    it('should have hooks', () => expect(slStats.hooks).to.be.not.empty);","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should set config.trackingDisabled to true if disabled","suites":["SlStats","#toggleStats()"],"updatePoint":{"line":36,"column":62,"index":1130},"line":36,"code":"    it('should set config.trackingDisabled to true if disabled', () => {\n      setStub.returns();\n      slStats.options = {\n        disable: true\n      };\n      slStats.toggleStats();\n      expect(setStub.calledOnce).to.equal(true);\n      expect(setStub.calledWithExactly('trackingDisabled', true)).to.equal(true);\n    });","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should set config.trackingDisabled to false if enabled","suites":["SlStats","#toggleStats()"],"updatePoint":{"line":45,"column":62,"index":1453},"line":45,"code":"    it('should set config.trackingDisabled to false if enabled', () => {\n      setStub.returns();\n      slStats.options = {\n        enable: true\n      };\n      slStats.toggleStats();\n      expect(setStub.calledOnce).to.equal(true);\n      expect(setStub.calledWithExactly('trackingDisabled', false)).to.equal(true);\n    });","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should resolve if no \"enabled\" / \"disabled\" options is given","suites":["SlStats","#toggleStats()"],"updatePoint":{"line":54,"column":68,"index":1782},"line":54,"code":"    it('should resolve if no \"enabled\" / \"disabled\" options is given', () => {\n      setStub.returns();\n      slStats.options = {};\n      slStats.toggleStats();\n      expect(setStub.calledOnce).to.equal(false);\n    });","file":"unit/lib/plugins/slstats.test.js","skipped":false,"dir":"test"},{"name":"should store message","suites":["test/unit/lib/serverless-error.test.js"],"updatePoint":{"line":8,"column":26,"index":205},"line":8,"code":"  it('should store message', () => {\n    const error = new ServerlessError('Some message');\n    expect(error.message).to.be.equal('Some message');\n  });","file":"unit/lib/serverless-error.test.js","skipped":false,"dir":"test"},{"name":"should expose constructor name","suites":["test/unit/lib/serverless-error.test.js"],"updatePoint":{"line":12,"column":36,"index":368},"line":12,"code":"  it('should expose constructor name', () => {\n    const error = new ServerlessError('Some message');\n    expect(error.name).to.be.equal('ServerlessError');\n  });","file":"unit/lib/serverless-error.test.js","skipped":false,"dir":"test"},{"name":"should store code","suites":["test/unit/lib/serverless-error.test.js"],"updatePoint":{"line":16,"column":23,"index":518},"line":16,"code":"  it('should store code', () => {\n    const error = new ServerlessError('Some message', 'ERROR_CODE');\n    expect(error.code).to.be.equal('ERROR_CODE');\n  });","file":"unit/lib/serverless-error.test.js","skipped":false,"dir":"test"},{"name":"message should always resolve as string","suites":["test/unit/lib/serverless-error.test.js"],"updatePoint":{"line":20,"column":45,"index":699},"line":20,"code":"  it('message should always resolve as string', () => {\n    const error = new ServerlessError({});\n    expect(typeof error.message).to.be.equal('string');\n  });","file":"unit/lib/serverless-error.test.js","skipped":false,"dir":"test"},{"name":"should have stack trace","suites":["test/unit/lib/serverless-error.test.js"],"updatePoint":{"line":24,"column":29,"index":844},"line":24,"code":"  it('should have stack trace', () => {\n    function testStackFrame() {\n      throw new ServerlessError('Some message');\n    }\n    try {\n      testStackFrame();\n    } catch (error) {\n      expect(error.stack).to.have.string('testStackFrame');\n    }\n  });","file":"unit/lib/serverless-error.test.js","skipped":false,"dir":"test"},{"name":"should set an empty providers object","suites":["Serverless","#constructor()"],"updatePoint":{"line":33,"column":44,"index":1200},"line":33,"code":"    it('should set an empty providers object', () => {\n      expect(serverless.providers).to.deep.equal({});\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the Serverless version","suites":["Serverless","#constructor()"],"updatePoint":{"line":36,"column":41,"index":1314},"line":36,"code":"    it('should set the Serverless version', () => {\n      expect(serverless.version.length).to.be.at.least(1);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the YamlParser class instance","suites":["Serverless","#constructor()"],"updatePoint":{"line":39,"column":48,"index":1440},"line":39,"code":"    it('should set the YamlParser class instance', () => {\n      expect(serverless.yamlParser).to.be.instanceof(YamlParser);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the PluginManager class instance","suites":["Serverless","#constructor()"],"updatePoint":{"line":42,"column":51,"index":1576},"line":42,"code":"    it('should set the PluginManager class instance', () => {\n      expect(serverless.pluginManager).to.be.instanceof(PluginManager);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the Utils class instance","suites":["Serverless","#constructor()"],"updatePoint":{"line":45,"column":43,"index":1710},"line":45,"code":"    it('should set the Utils class instance', () => {\n      expect(serverless.utils).to.be.instanceof(Utils);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the Service class instance","suites":["Serverless","#constructor()"],"updatePoint":{"line":48,"column":45,"index":1830},"line":48,"code":"    it('should set the Service class instance', () => {\n      expect(serverless.service).to.be.instanceof(Service);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the ConfigSchemaHandler class instance","suites":["Serverless","#constructor()"],"updatePoint":{"line":51,"column":57,"index":1966},"line":51,"code":"    it('should set the ConfigSchemaHandler class instance', () => {\n      expect(serverless.configSchemaHandler).to.be.instanceof(ConfigSchemaHandler);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should have a config object","suites":["Serverless","#constructor()"],"updatePoint":{"line":54,"column":35,"index":2104},"line":54,"code":"    it('should have a config object', () => {\n      expect(serverless.config).to.not.equal(undefined);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should have a classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":57,"column":36,"index":2216},"line":57,"code":"    it('should have a classes object', () => {\n      expect(serverless.classes).to.not.equal(undefined);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the CLI class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":60,"column":60,"index":2353},"line":60,"code":"    it('should store the CLI class inside the classes object', () => {\n      expect(serverless.classes.CLI).to.deep.equal(CLI);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the YamlParser class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":63,"column":67,"index":2496},"line":63,"code":"    it('should store the YamlParser class inside the classes object', () => {\n      expect(serverless.classes.YamlParser).to.deep.equal(YamlParser);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the PluginManager class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":66,"column":70,"index":2656},"line":66,"code":"    it('should store the PluginManager class inside the classes object', () => {\n      expect(serverless.classes.PluginManager).to.deep.equal(PluginManager);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the Utils class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":69,"column":62,"index":2814},"line":69,"code":"    it('should store the Utils class inside the classes object', () => {\n      expect(serverless.classes.Utils).to.deep.equal(Utils);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the Service class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":72,"column":64,"index":2958},"line":72,"code":"    it('should store the Service class inside the classes object', () => {\n      expect(serverless.classes.Service).to.deep.equal(Service);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the ConfigSchemaHandler class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":75,"column":76,"index":3118},"line":75,"code":"    it('should store the ConfigSchemaHandler class inside the classes object', () => {\n      expect(serverless.classes.ConfigSchemaHandler).to.deep.equal(ConfigSchemaHandler);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should store the Error class inside the classes object","suites":["Serverless","#constructor()"],"updatePoint":{"line":78,"column":62,"index":3288},"line":78,"code":"    it('should store the Error class inside the classes object', () => {\n      expect(serverless.classes.Error).to.deep.equal(ServerlessError);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set an instanceId","suites":["Serverless","#init()"],"updatePoint":{"line":83,"column":32,"index":3446},"line":83,"code":"    it('should set an instanceId', async () => serverless.init().then(() => {\n      expect(serverless.instanceId).to.match(/\\d/);\n    }));","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should create a new CLI instance","suites":["Serverless","#init()"],"updatePoint":{"line":86,"column":40,"index":3593},"line":86,"code":"    it('should create a new CLI instance', async () => serverless.init().then(() => {\n      expect(serverless.cli).to.be.instanceof(CLI);\n    }));","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should allow a custom CLI instance","suites":["Serverless","#init()"],"updatePoint":{"line":89,"column":42,"index":3742},"line":89,"code":"    it('should allow a custom CLI instance', async () => {\n      class CustomCLI extends CLI {}\n      serverless.classes.CLI = CustomCLI;\n      return serverless.init().then(() => {\n        expect(serverless.cli).to.be.instanceof(CLI);\n        expect(serverless.cli.constructor.name).to.equal('CustomCLI');\n      });\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should receive the processed input form the CLI instance","suites":["Serverless","#init()"],"updatePoint":{"line":100,"column":64,"index":4253},"line":100,"code":"    it('should receive the processed input form the CLI instance', async () => serverless.init().then(() => {\n      expect(serverless.processedInput).to.not.deep.equal({});\n    }));","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should set the provider object in the provider object","suites":["Serverless","#setProvider()"],"updatePoint":{"line":106,"column":61,"index":4501},"line":106,"code":"    it('should set the provider object in the provider object', () => {\n      const myProvider = new ProviderMock();\n      serverless.setProvider('myProvider', myProvider);\n      expect(serverless.providers.myProvider).to.equal(myProvider);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should return the provider object","suites":["Serverless","#getProvider()"],"updatePoint":{"line":119,"column":41,"index":4945},"line":119,"code":"    it('should return the provider object', () => {\n      const retrivedProvider = serverless.getProvider('myProvider');\n      expect(retrivedProvider).to.deep.equal(myProvider);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should get the correct Serverless version","suites":["Serverless","#getVersion()"],"updatePoint":{"line":125,"column":49,"index":5182},"line":125,"code":"    it('should get the correct Serverless version', () => {\n      expect(semverRegex().test(serverless.getVersion())).to.equal(true);\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"Ensure that instance is setup","suites":["test/unit/lib/serverless.test.js","Legacy API interface"],"updatePoint":{"line":141,"column":37,"index":5593},"line":141,"code":"    it('Ensure that instance is setup', async () => {\n      expect(serverless.variables).to.have.property('service');\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"Ensure config.servicePath","suites":["test/unit/lib/serverless.test.js","Legacy API interface"],"updatePoint":{"line":144,"column":33,"index":5715},"line":144,"code":"    it('Ensure config.servicePath', async () => {\n      expect(serverless.config).to.have.property('servicePath');\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"Extends configuration with given values","suites":["test/unit/lib/serverless.test.js","Extend configuration"],"updatePoint":{"line":151,"column":47,"index":6093},"line":151,"code":"    it('Extends configuration with given values', async () => {\n      const customExt = {\n        custom: {}\n      };\n      const configExt = {\n        plugins: ['./extend-config-plugin/index.js'],\n        provider: {\n          stage: 'dev'\n        },\n        custom: {}\n      };\n      _.set(customExt, pluginConfig.overwriteValuePath, 'test_value');\n      const {\n        servicePath: serviceDir\n      } = await programmaticFixturesEngine.setup('plugin', {\n        configExt\n      });\n      const serverlessProcess = await spawn('node', [serverlessPath, 'print'], {\n        cwd: serviceDir\n      });\n      const configuration = yaml.load(String(serverlessProcess.stdoutBuffer));\n      const targetValue = _.get(configuration, pluginConfig.targetValuePath);\n      expect(targetValue, 'Target value should not be undefined').to.not.be.undefined;\n      const afterInitValue = _.get(configuration, pluginConfig.afterInitValuePath);\n      expect(afterInitValue, 'afterInitValue should be undefined').to.be.undefined;\n      const refValue = _.get(configuration, pluginConfig.refValuePath);\n      expect(refValue).to.deep.equal(targetValue, 'refValue should equal targetValue');\n      const overwriteValue = _.get(configuration, pluginConfig.overwriteValuePath);\n      expect(overwriteValue).to.deep.equal(targetValue, 'overwriteValue should equal targetValue');\n    });","file":"unit/lib/serverless.test.js","skipped":false,"dir":"test"},{"name":"should export string withlist of templates","suites":["test/unit/lib/templates/recommended-list.test.js"],"updatePoint":{"line":9,"column":48,"index":281},"line":9,"code":"  it('should export string withlist of templates', async () => {\n    expect(typeof humanReadable).to.equal('string');\n    expect(humanReadable).to.include('aws-nodejs');\n  });","file":"unit/lib/templates/recommended-list.test.js","skipped":false,"dir":"test"},{"name":"should create from template referenced locally","suites":["test/unit/lib/utils/create-from-local-template.test.js","Without `projectName` provided"],"updatePoint":{"line":18,"column":54,"index":642},"line":18,"code":"    it('should create from template referenced locally', async () => {\n      const tmpDirPath = path.join(getTmpDirPath(), 'some-service');\n      await createFromLocalTemplate({\n        templatePath: path.join(fixturesPath, 'function'),\n        projectDir: tmpDirPath\n      });\n      const stats = await fsp.lstat(path.join(tmpDirPath, 'serverless.yml'));\n      expect(stats.isFile()).to.be.true;\n    });","file":"unit/lib/utils/create-from-local-template.test.js","skipped":false,"dir":"test"},{"name":"should result in an error","suites":["test/unit/lib/utils/create-from-local-template.test.js","When `templatePath` does not exist"],"updatePoint":{"line":29,"column":33,"index":1089},"line":29,"code":"    it('should result in an error', async () => {\n      const tmpDirPath = path.join(getTmpDirPath(), 'some-service');\n      await expect(createFromLocalTemplate({\n        templatePath: path.join(fixturesPath, 'nonexistent'),\n        projectDir: tmpDirPath\n      })).to.eventually.be.rejected.and.have.property('code', 'INVALID_TEMPLATE_PATH');\n    });","file":"unit/lib/utils/create-from-local-template.test.js","skipped":false,"dir":"test"},{"name":"should set service name in serverless.yml","suites":["test/unit/lib/utils/create-from-local-template.test.js","With `projectName` provided"],"updatePoint":{"line":47,"column":49,"index":1805},"line":47,"code":"    it('should set service name in serverless.yml', async () => expect(yamlParse(await fsp.readFile(path.join(tmpDirPath, 'serverless.yml'))).service).to.equal('testproj'));","file":"unit/lib/utils/create-from-local-template.test.js","skipped":false,"dir":"test"},{"name":"should set name in package.json","suites":["test/unit/lib/utils/create-from-local-template.test.js","With `projectName` provided"],"updatePoint":{"line":48,"column":39,"index":1969},"line":48,"code":"    it('should set name in package.json', async () => expect(JSON.parse(await fsp.readFile(path.join(tmpDirPath, 'package.json'))).name).to.equal('testproj'));","file":"unit/lib/utils/create-from-local-template.test.js","skipped":false,"dir":"test"},{"name":"handles plain object","suites":["deepSortObjectByKey"],"updatePoint":{"line":6,"column":26,"index":207},"line":6,"code":"  it('handles plain object', () => {\n    const input = {\n      b: 'shouldBeLast',\n      a: 'shouldBeFirst'\n    };\n    const result = deepSortObjectByKey(input);\n    const expectedResult = JSON.stringify({\n      a: 'shouldBeFirst',\n      b: 'shouldBeLast'\n    });\n    expect(JSON.stringify(result)).to.equal(expectedResult);\n  });","file":"unit/lib/utils/deep-sort-object-by-key.test.js","skipped":false,"dir":"test"},{"name":"handles non-object values","suites":["deepSortObjectByKey"],"updatePoint":{"line":18,"column":31,"index":542},"line":18,"code":"  it('handles non-object values', () => {\n    const input = 'shouldbereturnedasis';\n    const result = deepSortObjectByKey(input);\n    expect(result).to.equal(input);\n  });","file":"unit/lib/utils/deep-sort-object-by-key.test.js","skipped":false,"dir":"test"},{"name":"handles array with objects","suites":["deepSortObjectByKey"],"updatePoint":{"line":23,"column":32,"index":716},"line":23,"code":"  it('handles array with objects', () => {\n    const input = [{\n      b: 'shouldBeLast',\n      a: 'shouldBeFirst'\n    }, {\n      d: 'shouldBeLast',\n      c: 'shouldBeFirst'\n    }];\n    const result = deepSortObjectByKey(input);\n    const expectedResult = JSON.stringify([{\n      a: 'shouldBeFirst',\n      b: 'shouldBeLast'\n    }, {\n      c: 'shouldBeFirst',\n      d: 'shouldBeLast'\n    }]);\n    expect(JSON.stringify(result)).to.equal(expectedResult);\n  });","file":"unit/lib/utils/deep-sort-object-by-key.test.js","skipped":false,"dir":"test"},{"name":"handles nested, complex objects","suites":["deepSortObjectByKey"],"updatePoint":{"line":41,"column":37,"index":1179},"line":41,"code":"  it('handles nested, complex objects', () => {\n    const input = {\n      b: 'shouldBeLast',\n      a: {\n        d: 'nestedPlainValue',\n        c: {\n          f: 'shouldBeLast',\n          e: 'shouldBeFirst'\n        }\n      }\n    };\n    const result = deepSortObjectByKey(input);\n    const expectedResult = JSON.stringify({\n      a: {\n        c: {\n          e: 'shouldBeFirst',\n          f: 'shouldBeLast'\n        },\n        d: 'nestedPlainValue'\n      },\n      b: 'shouldBeLast'\n    });\n    expect(JSON.stringify(result)).to.equal(expectedResult);\n  });","file":"unit/lib/utils/deep-sort-object-by-key.test.js","skipped":false,"dir":"test"},{"name":"should reject an error if the passed URL option is not a valid URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":60,"column":74,"index":1909},"line":60,"code":"    it('should reject an error if the passed URL option is not a valid URL', () => {\n      return expect(downloadTemplateFromRepo('invalidUrl')).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE_URL');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should reject an error if the passed URL is not a valid GitHub URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":63,"column":74,"index":2139},"line":63,"code":"    it('should reject an error if the passed URL is not a valid GitHub URL', () => {\n      return expect(downloadTemplateFromRepo('http://no-git-hub-url.com/foo/bar')).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE_PROVIDER');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should reject an error if a directory with the same service name is already present","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":66,"column":91,"index":2414},"line":66,"code":"    it('should reject an error if a directory with the same service name is already present', () => {\n      const serviceDirName = path.join(serviceDir, 'existing-service');\n      fse.mkdirsSync(serviceDirName);\n      return expect(downloadTemplateFromRepo('https://github.com/johndoe/existing-service')).to.be.eventually.rejected.and.have.property('code', 'TARGET_FOLDER_ALREADY_EXISTS');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download the service based on a regular .git URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":71,"column":63,"index":2784},"line":71,"code":"    it('should download the service based on a regular .git URL', async () => {\n      const url = 'https://example.com/sample-service.git';\n      return expect(downloadTemplateFromRepo(url)).to.be.fulfilled.then(() => {\n        expect(spawnStub.calledOnce).to.equal(true);\n        expect(downloadStub.calledOnce).to.equal(false);\n        expect(spawnStub.args[0][0]).to.equal('git');\n        expect(spawnStub.args[0][1][0]).to.equal('clone');\n        expect(spawnStub.args[0][1][1]).to.equal(url);\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download and rename the service based on a regular .git URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":81,"column":74,"index":3311},"line":81,"code":"    it('should download and rename the service based on a regular .git URL', async () => {\n      const url = 'https://example.com/sample-service.git';\n      const name = 'new-service-name';\n      spawnStub.resolves({\n        then: callback => {\n          const slsYml = path.join(process.cwd(), 'new-service-name', 'serverless.yml');\n          writeFileSync(slsYml, 'service: sample-service');\n          callback();\n        }\n      });\n      return expect(downloadTemplateFromRepo(url, name)).to.be.fulfilled.then(serviceName => {\n        expect(spawnStub.calledOnce).to.equal(true);\n        expect(downloadStub.calledOnce).to.equal(false);\n        expect(spawnStub.args[0][0]).to.equal('git');\n        expect(spawnStub.args[0][1][0]).to.equal('clone');\n        expect(spawnStub.args[0][1][1]).to.equal(url);\n        const yml = readFileSync(path.join(newServicePath, 'serverless.yml'));\n        expect(yml.service).to.equal(name);\n        expect(serviceName).to.equal('sample-service');\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download the service based on a regular .git URL start with git@","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":102,"column":79,"index":4322},"line":102,"code":"    it('should download the service based on a regular .git URL start with git@', async () => {\n      const url = 'git@example.com/sample-service.git';\n      return expect(downloadTemplateFromRepo(url)).to.be.fulfilled.then(() => {\n        expect(spawnStub.calledOnce).to.equal(true);\n        expect(downloadStub.calledOnce).to.equal(false);\n        expect(spawnStub.args[0][0]).to.equal('git');\n        expect(spawnStub.args[0][1][0]).to.equal('clone');\n        expect(spawnStub.args[0][1][1]).to.equal(url);\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download and rename the service based on a regular .git URL start with git@","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":112,"column":90,"index":4861},"line":112,"code":"    it('should download and rename the service based on a regular .git URL start with git@', async () => {\n      const url = 'git@example.com/sample-service.git';\n      const name = 'new-service-name';\n      spawnStub.resolves({\n        then: callback => {\n          const slsYml = path.join(process.cwd(), 'new-service-name', 'serverless.yml');\n          writeFileSync(slsYml, 'service: sample-service');\n          callback();\n        }\n      });\n      return expect(downloadTemplateFromRepo(url, name)).to.be.fulfilled.then(serviceName => {\n        expect(spawnStub.calledOnce).to.equal(true);\n        expect(downloadStub.calledOnce).to.equal(false);\n        expect(spawnStub.args[0][0]).to.equal('git');\n        expect(spawnStub.args[0][1][0]).to.equal('clone');\n        expect(spawnStub.args[0][1][1]).to.equal(url);\n        const yml = readFileSync(path.join(newServicePath, 'serverless.yml'));\n        expect(yml.service).to.equal(name);\n        expect(serviceName).to.equal('sample-service');\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download the service based on the GitHub URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":133,"column":59,"index":5848},"line":133,"code":"    it('should download the service based on the GitHub URL', async () => {\n      const url = 'https://github.com/johndoe/service-to-be-downloaded';\n      return expect(downloadTemplateFromRepo(url)).to.be.fulfilled.then(() => {\n        expect(downloadStub.calledOnce).to.equal(true);\n        expect(downloadStub.args[0][0]).to.equal(`${url}/archive/master.zip`);\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download and rename the service based on the GitHub URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":140,"column":70,"index":6241},"line":140,"code":"    it('should download and rename the service based on the GitHub URL', async () => {\n      const url = 'https://github.com/johndoe/service-to-be-downloaded';\n      const name = 'new-service-name';\n      downloadStub.resolves({\n        then: callback => {\n          const slsYml = path.join(process.cwd(), 'new-service-name', 'serverless.yml');\n          writeFileSync(slsYml, 'service: service-name');\n          callback();\n        }\n      });\n      return expect(downloadTemplateFromRepo(url, name)).to.be.fulfilled.then(serviceName => {\n        expect(downloadStub.calledOnce).to.equal(true);\n        expect(downloadStub.args[0][1]).to.contain(name);\n        expect(downloadStub.args[0][0]).to.equal(`${url}/archive/master.zip`);\n        const yml = readFileSync(path.join(newServicePath, 'serverless.yml'));\n        expect(yml.service).to.equal(name);\n        expect(serviceName).to.equal('service-to-be-downloaded');\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should download and rename the service based directories in the GitHub URL","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":159,"column":82,"index":7194},"line":159,"code":"    it('should download and rename the service based directories in the GitHub URL', async () => {\n      const url = 'https://github.com/serverless/examples/tree/master/rest-api-with-dynamodb';\n      const name = 'new-service-name';\n      downloadStub.resolves(fse.remove(newServicePath).then(() => {\n        const slsYml = path.join(os.tmpdir(), 'examples', 'rest-api-with-dynamodb', 'serverless.yml');\n        writeFileSync(slsYml, 'service: service-name');\n      }));\n      return expect(downloadTemplateFromRepo(url, name)).to.be.fulfilled.then(serviceName => {\n        expect(downloadStub.calledOnce).to.equal(true);\n        const yml = readFileSync(path.join(newServicePath, 'serverless.yml'));\n        expect(yml.service).to.equal(name);\n        expect(serviceName).to.equal('rest-api-with-dynamodb');\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if the same service name exists as directory in Github","suites":["downloadTemplateFromRepo","downloadTemplateFromRepo"],"updatePoint":{"line":173,"column":84,"index":8023},"line":173,"code":"    it('should throw an error if the same service name exists as directory in Github', () => {\n      const url = 'https://github.com/serverless/examples/tree/master/rest-api-with-dynamodb';\n      const serviceDirName = path.join(serviceDir, 'rest-api-with-dynamodb');\n      fse.mkdirsSync(serviceDirName);\n      return expect(downloadTemplateFromRepo(null, url)).to.be.eventually.rejected.and.have.property('code', 'MISSING_TEMPLATE_URL');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should reject an error if no URL is provided","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":181,"column":52,"index":8480},"line":181,"code":"    it('should reject an error if no URL is provided', () => {\n      return expect(parseRepoURL()).to.be.eventually.rejected.and.have.property('code', 'MISSING_TEMPLATE_URL');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should reject an error if URL is not valid","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":184,"column":50,"index":8662},"line":184,"code":"    it('should reject an error if URL is not valid', () => {\n      return expect(parseRepoURL('non_valid_url')).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE_URL');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should throw an error if URL is not of valid provider","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":187,"column":61,"index":8870},"line":187,"code":"    it('should throw an error if URL is not of valid provider', () => {\n      return expect(parseRepoURL('https://kostasbariotis.com/repo/owner')).to.be.eventually.rejected.and.have.property('code', 'INVALID_TEMPLATE_PROVIDER');\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitHub URL","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":190,"column":39,"index":9085},"line":190,"code":"    it('should parse a valid GitHub URL', async () => {\n      return expect(parseRepoURL('https://github.com/serverless/serverless')).to.be.fulfilled.then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://github.com/serverless/serverless/archive/master.zip',\n          isSubdirectory: false,\n          pathToDirectory: '',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitHub URL with subdirectory","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":204,"column":57,"index":9622},"line":204,"code":"    it('should parse a valid GitHub URL with subdirectory', async () => {\n      return expect(parseRepoURL('https://github.com/serverless/serverless/tree/master/assets')).to.be.fulfilled.then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://github.com/serverless/serverless/archive/master.zip',\n          isSubdirectory: true,\n          pathToDirectory: 'assets',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitHub Entreprise URL","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":218,"column":50,"index":10176},"line":218,"code":"    it('should parse a valid GitHub Entreprise URL', async () => {\n      return expect(parseRepoURL('https://github.mydomain.com/serverless/serverless')).to.be.fulfilled.then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://github.mydomain.com/serverless/serverless/archive/master.zip',\n          isSubdirectory: false,\n          pathToDirectory: '',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitHub Entreprise with subdirectory","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":232,"column":64,"index":10738},"line":232,"code":"    it('should parse a valid GitHub Entreprise with subdirectory', async () => {\n      return expect(parseRepoURL('https://github.mydomain.com/serverless/serverless/tree/master/assets')).to.be.fulfilled.then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://github.mydomain.com/serverless/serverless/archive/master.zip',\n          isSubdirectory: true,\n          pathToDirectory: 'assets',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitHub Entreprise URL with authentication","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":246,"column":70,"index":11330},"line":246,"code":"    it('should parse a valid GitHub Entreprise URL with authentication', async () => {\n      return expect(parseRepoURL('https://username:password@github.com/serverless/serverless/')).to.be.fulfilled.then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://github.com/serverless/serverless/archive/master.zip',\n          isSubdirectory: false,\n          username: 'username',\n          password: 'password',\n          pathToDirectory: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid BitBucket URL","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":260,"column":42,"index":11887},"line":260,"code":"    it('should parse a valid BitBucket URL', async () => {\n      return parseRepoURL('https://bitbucket.org/atlassian/localstack').then(output => {\n        expect(output).to.deep.eq({\n          owner: 'atlassian',\n          repo: 'localstack',\n          branch: 'master',\n          downloadUrl: 'https://bitbucket.org/atlassian/localstack/get/master.zip',\n          isSubdirectory: false,\n          pathToDirectory: '',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid BitBucket URL with subdirectory","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":274,"column":60,"index":12402},"line":274,"code":"    it('should parse a valid BitBucket URL with subdirectory', async () => {\n      return parseRepoURL('https://bitbucket.org/atlassian/localstack/src/85870856fd6941ae75c0fa946a51cf756ff2f53a/localstack/dashboard/?at=mvn').then(output => {\n        expect(output).to.deep.eq({\n          owner: 'atlassian',\n          repo: 'localstack',\n          branch: 'mvn',\n          downloadUrl: 'https://bitbucket.org/atlassian/localstack/get/mvn.zip',\n          isSubdirectory: true,\n          pathToDirectory: `localstack${path.sep}dashboard`,\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid Bitbucket Server URL","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":288,"column":49,"index":13003},"line":288,"code":"    it('should parse a valid Bitbucket Server URL', async () => {\n      return parseRepoURL('https://user:pass@mybitbucket.server.ltd/rest/api/latest/projects/myproject/repos/myrepo/archive?at=refs%2Fheads%2Fdevelop').then(output => {\n        expect(output).to.deep.eq({\n          owner: 'myproject',\n          repo: 'myrepo',\n          branch: 'refs/heads/develop',\n          downloadUrl: 'https://mybitbucket.server.ltd/rest/api/latest/projects/myproject/repos/myrepo/archive?at=refs%2Fheads%2Fdevelop&format=zip',\n          isSubdirectory: false,\n          pathToDirectory: '',\n          username: 'user',\n          password: 'pass'\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitLab URL ","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":302,"column":40,"index":13660},"line":302,"code":"    it('should parse a valid GitLab URL ', async () => {\n      return parseRepoURL('https://gitlab.com/serverless/serverless').then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'master',\n          downloadUrl: 'https://gitlab.com/serverless/serverless/-/archive/master/serverless-master.zip',\n          isSubdirectory: false,\n          pathToDirectory: '',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"should parse a valid GitLab URL with subdirectory","suites":["downloadTemplateFromRepo","parseRepoURL"],"updatePoint":{"line":316,"column":57,"index":14193},"line":316,"code":"    it('should parse a valid GitLab URL with subdirectory', async () => {\n      return parseRepoURL('https://gitlab.com/serverless/serverless/tree/dev/subdir').then(output => {\n        expect(output).to.deep.eq({\n          owner: 'serverless',\n          repo: 'serverless',\n          branch: 'dev',\n          downloadUrl: 'https://gitlab.com/serverless/serverless/-/archive/dev/serverless-dev.zip',\n          isSubdirectory: true,\n          pathToDirectory: 'subdir',\n          username: '',\n          password: ''\n        });\n      });\n    });","file":"unit/lib/utils/download-template-from-repo.test.js","skipped":false,"dir":"test"},{"name":"Should generate artifact if missing","suites":["#ensureArtifact"],"updatePoint":{"line":20,"column":41,"index":643},"line":20,"code":"  it('Should generate artifact if missing', async () => {\n    await ensureArtifact(testArtifactName, generateFunc);\n    const exists = await fse.pathExists(testArtifactPath);\n    expect(exists).to.be.true;\n  });","file":"unit/lib/utils/ensure-artifact.test.js","skipped":false,"dir":"test"},{"name":"Should generate only on first access","suites":["#ensureArtifact"],"updatePoint":{"line":25,"column":42,"index":856},"line":25,"code":"  it('Should generate only on first access', async () => {\n    await ensureArtifact(testArtifactName, generateFunc);\n    expect(invokedCount).to.equal(1);\n  });","file":"unit/lib/utils/ensure-artifact.test.js","skipped":false,"dir":"test"},{"name":"Should not generate, if generated in past","suites":["#ensureArtifact"],"updatePoint":{"line":29,"column":47,"index":1022},"line":29,"code":"  it('Should not generate, if generated in past', async () => {\n    ensureArtifact.delete(testArtifactName);\n    await ensureArtifact(testArtifactName, generateFunc);\n    expect(invokedCount).to.equal(1);\n  });","file":"unit/lib/utils/ensure-artifact.test.js","skipped":false,"dir":"test"},{"name":"Should return cache path","suites":["#ensureArtifact"],"updatePoint":{"line":34,"column":30,"index":1216},"line":34,"code":"  it('Should return cache path', async () => {\n    const cachePath = await ensureArtifact(testArtifactName, generateFunc);\n    expect(cachePath).to.include(`.serverless${path.sep}artifacts`);\n  });","file":"unit/lib/utils/ensure-artifact.test.js","skipped":false,"dir":"test"},{"name":"Should call generate if file missing","suites":["test/unit/lib/utils/ensureExists.test.js"],"updatePoint":{"line":17,"column":42,"index":548},"line":17,"code":"  it('Should call generate if file missing', async () => {\n    const testFileName = `test-${crypto.randomBytes(2).toString('hex')}`;\n    const generateStub = sinon.stub().resolves();\n    await ensureExists(path.resolve(testCacheDir, testFileName), generateStub);\n    expect(generateStub.calledOnce).to.be.true;\n  });","file":"unit/lib/utils/ensure-exists.test.js","skipped":false,"dir":"test"},{"name":"Should not call generate if file exists","suites":["test/unit/lib/utils/ensureExists.test.js"],"updatePoint":{"line":23,"column":45,"index":868},"line":23,"code":"  it('Should not call generate if file exists', async () => {\n    const testFileName = `test-${crypto.randomBytes(2).toString('hex')}`;\n    await fsp.writeFile(path.resolve(testCacheDir, testFileName), '');\n    const generateStub = sinon.stub().resolves();\n    await ensureExists(path.resolve(testCacheDir, testFileName), generateStub);\n    expect(generateStub.calledOnce).to.be.false;\n  });","file":"unit/lib/utils/ensure-exists.test.js","skipped":false,"dir":"test"},{"name":"should display sizes below 1kb literally","suites":["test/unit/lib/utils/filesize.test.js"],"updatePoint":{"line":8,"column":46,"index":217},"line":8,"code":"  it('should display sizes below 1kb literally', () => {\n    expect(filesize(1)).to.equal('1 B');\n    expect(filesize(10)).to.equal('10 B');\n    expect(filesize(12)).to.equal('12 B');\n    expect(filesize(100)).to.equal('100 B');\n    expect(filesize(123)).to.equal('123 B');\n    expect(filesize(987)).to.equal('987 B');\n  });","file":"unit/lib/utils/filesize.test.js","skipped":false,"dir":"test"},{"name":"expect to display round values without decimals","suites":["test/unit/lib/utils/filesize.test.js"],"updatePoint":{"line":16,"column":53,"index":549},"line":16,"code":"  it('expect to display round values without decimals', () => {\n    expect(filesize(1000)).to.equal('1 kB');\n    expect(filesize(3000)).to.equal('3 kB');\n    expect(filesize(1000 * 1000)).to.equal('1 MB');\n    expect(filesize(4000 * 1000)).to.equal('4 MB');\n    expect(filesize(1000 * 1000 * 1000)).to.equal('1 GB');\n    expect(filesize(4000 * 1000 * 1000)).to.equal('4 GB');\n  });","file":"unit/lib/utils/filesize.test.js","skipped":false,"dir":"test"},{"name":"expect to display not round values below 9 with decimals","suites":["test/unit/lib/utils/filesize.test.js"],"updatePoint":{"line":24,"column":62,"index":940},"line":24,"code":"  it('expect to display not round values below 9 with decimals', () => {\n    expect(filesize(1123)).to.equal('1.1 kB');\n    expect(filesize(8123)).to.equal('8.1 kB');\n    expect(filesize(1234848)).to.equal('1.2 MB');\n    expect(filesize(8123494)).to.equal('8.1 MB');\n    expect(filesize(1123484848)).to.equal('1.1 GB');\n    expect(filesize(8123494934)).to.equal('8.1 GB');\n  });","file":"unit/lib/utils/filesize.test.js","skipped":false,"dir":"test"},{"name":"expect to display not round values above 9 without decimals","suites":["test/unit/lib/utils/filesize.test.js"],"updatePoint":{"line":32,"column":65,"index":1322},"line":32,"code":"  it('expect to display not round values above 9 without decimals', () => {\n    expect(filesize(12123)).to.equal('12 kB');\n    expect(filesize(9123)).to.equal('9 kB');\n    expect(filesize(12234848)).to.equal('12 MB');\n    expect(filesize(9234949)).to.equal('9 MB');\n    expect(filesize(12348484848)).to.equal('12 GB');\n    expect(filesize(9349493432)).to.equal('9 GB');\n  });","file":"unit/lib/utils/filesize.test.js","skipped":false,"dir":"test"},{"name":"should recursively copy directory files including symbolic links","suites":["#copyDirContentsSync()"],"updatePoint":{"line":17,"column":70,"index":792},"line":17,"code":"  it('should recursively copy directory files including symbolic links', function () {\n    const tmpSrcDirPath = path.join(process.cwd(), 'testSrc');\n    const tmpDestDirPath = path.join(process.cwd(), 'testDest');\n    const srcFile1 = path.join(tmpSrcDirPath, 'file1.txt');\n    const srcFile2 = path.join(tmpSrcDirPath, 'folder', 'file2.txt');\n    const srcFile3 = path.join(tmpSrcDirPath, 'folder', 'file3.txt');\n    const destFile1 = path.join(tmpDestDirPath, 'file1.txt');\n    const destFile2 = path.join(tmpDestDirPath, 'folder', 'file2.txt');\n    const destFile3 = path.join(tmpDestDirPath, 'folder', 'file3.txt');\n    writeFileSync(srcFile1, 'foo');\n    writeFileSync(srcFile2, 'bar');\n    try {\n      fs.symlinkSync(srcFile2, srcFile3);\n    } catch (error) {\n      skipOnDisabledSymlinksInWindows(error, this, afterCallback);\n      throw error;\n    }\n    copyDirContentsSync(tmpSrcDirPath, tmpDestDirPath);\n    expect(fileExistsSync(destFile1)).to.equal(true);\n    expect(fileExistsSync(destFile2)).to.equal(true);\n    expect(fileExistsSync(destFile3)).to.equal(true);\n  });","file":"unit/lib/utils/fs/copy-dir-contents-sync.test.js","skipped":false,"dir":"test"},{"name":"should recursively copy directory files excluding symbolic links","suites":["#copyDirContentsSync()"],"updatePoint":{"line":39,"column":70,"index":1875},"line":39,"code":"  it('should recursively copy directory files excluding symbolic links', function () {\n    const tmpSrcDirPath = path.join(process.cwd(), 'testSrc');\n    const tmpDestDirPath = path.join(process.cwd(), 'testDest');\n    const srcFile1 = path.join(tmpSrcDirPath, 'file1.txt');\n    const srcFile2 = path.join(tmpSrcDirPath, 'folder', 'file2.txt');\n    const srcFile3 = path.join(tmpSrcDirPath, 'folder', 'file3.txt');\n    const destFile1 = path.join(tmpDestDirPath, 'file1.txt');\n    const destFile2 = path.join(tmpDestDirPath, 'folder', 'file2.txt');\n    const destFile3 = path.join(tmpDestDirPath, 'folder', 'file3.txt');\n    writeFileSync(srcFile1, 'foo');\n    writeFileSync(srcFile2, 'bar');\n    try {\n      fs.symlinkSync(srcFile2, srcFile3);\n    } catch (error) {\n      skipOnDisabledSymlinksInWindows(error, this, afterCallback);\n      throw error;\n    }\n    copyDirContentsSync(tmpSrcDirPath, tmpDestDirPath, {\n      noLinks: true\n    });\n    expect(fileExistsSync(destFile1)).to.equal(true);\n    expect(fileExistsSync(destFile2)).to.equal(true);\n    expect(fileExistsSync(destFile3)).to.equal(false);\n  });","file":"unit/lib/utils/fs/copy-dir-contents-sync.test.js","skipped":false,"dir":"test"},{"name":"should create a zip file with the source directory content","suites":["#createZipFile()"],"updatePoint":{"line":16,"column":64,"index":462},"line":16,"code":"  it('should create a zip file with the source directory content', async () => {\n    const toZipFilePath = createTmpFile('foo.json');\n    const zipFilePath = createTmpFile('package.zip');\n    const srcDirPath = toZipFilePath.split(path.sep).slice(0, -1).join(path.sep);\n    return createZipFile(srcDirPath, zipFilePath).then(listZipFiles).then(files => expect(files).to.deep.equal(['foo.json']));\n  });","file":"unit/lib/utils/fs/create-zip-file.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file exists","suites":["#fileExistsSync()","When reading a file"],"updatePoint":{"line":10,"column":38,"index":422},"line":10,"code":"    it('should detect if a file exists', () => {\n      const file = fileExistsSync(__filename);\n      expect(file).to.equal(true);\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file doesn't exist","suites":["#fileExistsSync()","When reading a file"],"updatePoint":{"line":14,"column":45,"index":568},"line":14,"code":"    it(\"should detect if a file doesn't exist\", () => {\n      const noFile = fileExistsSync(path.join(__dirname, 'XYZ.json'));\n      expect(noFile).to.equal(false);\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if the file exists","suites":["#fileExistsSync()","When reading a symlink to a file"],"updatePoint":{"line":20,"column":40,"index":797},"line":20,"code":"    it('should detect if the file exists', function () {\n      try {\n        fse.symlinkSync(__filename, 'sym');\n      } catch (error) {\n        skipOnDisabledSymlinksInWindows(error, this);\n        throw error;\n      }\n      const found = fileExistsSync('sym');\n      expect(found).to.equal(true);\n      fse.unlinkSync('sym');\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if the file doesn't exist w/ bad symlink","suites":["#fileExistsSync()","When reading a symlink to a file"],"updatePoint":{"line":31,"column":62,"index":1155},"line":31,"code":"    it(\"should detect if the file doesn't exist w/ bad symlink\", function () {\n      try {\n        fse.symlinkSync('oops', 'invalid-sym');\n      } catch (error) {\n        skipOnDisabledSymlinksInWindows(error, this);\n        throw error;\n      }\n      const found = fileExistsSync('invalid-sym');\n      expect(found).to.equal(false);\n      fse.unlinkSync('invalid-sym');\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if the file doesn't exist w/ symlink to dir","suites":["#fileExistsSync()","When reading a symlink to a file"],"updatePoint":{"line":42,"column":65,"index":1537},"line":42,"code":"    it(\"should detect if the file doesn't exist w/ symlink to dir\", function () {\n      try {\n        fse.symlinkSync(__dirname, 'dir-sym');\n      } catch (error) {\n        skipOnDisabledSymlinksInWindows(error, this);\n        throw error;\n      }\n      const found = fileExistsSync('dir-sym');\n      expect(found).to.equal(false);\n      fse.unlinkSync('dir-sym');\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if the file doesn't exist","suites":["#fileExistsSync()","When reading a symlink to a file"],"updatePoint":{"line":53,"column":47,"index":1892},"line":53,"code":"    it(\"should detect if the file doesn't exist\", () => {\n      const found = fileExistsSync('bogus');\n      expect(found).to.equal(false);\n    });","file":"unit/lib/utils/fs/file-exists-sync.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file exists","suites":["#fileExists()","When reading a file"],"updatePoint":{"line":13,"column":38,"index":391},"line":13,"code":"    it('should detect if a file exists', () => expect(fileExists(__filename)).to.eventually.equal(true));","file":"unit/lib/utils/fs/file-exists.test.js","skipped":false,"dir":"test"},{"name":"should detect if a file doesn't exist","suites":["#fileExists()","When reading a file"],"updatePoint":{"line":14,"column":45,"index":504},"line":14,"code":"    it(\"should detect if a file doesn't exist\", () => expect(fileExists(path.join(__dirname, 'XYZ.json'))).to.eventually.equal(false));","file":"unit/lib/utils/fs/file-exists.test.js","skipped":false,"dir":"test"},{"name":"should return a scoped tmp dir path","suites":["#getTmpDirPath()"],"updatePoint":{"line":6,"column":41,"index":212},"line":6,"code":"  it('should return a scoped tmp dir path', () => {\n    const tmpDirPath = getTmpDirPath();\n    expect(tmpDirPath).to.match(/tmpdirs-serverless/);\n  });","file":"unit/lib/utils/fs/get-tmp-dir-path.test.js","skipped":false,"dir":"test"},{"name":"should reconstitute circular references","suites":["#parse()"],"updatePoint":{"line":90,"column":45,"index":1831},"line":90,"code":"  it('should reconstitute circular references', () => {\n    const tmpFilePath = 'anything.json';\n    const fileContents = '{\"foo\":{\"$ref\":\"$\"}}';\n    const obj = parse(tmpFilePath, fileContents);\n    expect(obj).to.equal(obj.foo);\n  });","file":"unit/lib/utils/fs/parse.test.js","skipped":false,"dir":"test"},{"name":"should return contents of a non json or yaml file as a string","suites":["#parse()"],"updatePoint":{"line":96,"column":67,"index":2090},"line":96,"code":"  it('should return contents of a non json or yaml file as a string', () => {\n    const tmpFilePath = 'anything.txt';\n    const fileContents = 'serverless';\n    const obj = parse(tmpFilePath, fileContents);\n    expect(obj).to.equal('serverless');\n  });","file":"unit/lib/utils/fs/parse.test.js","skipped":false,"dir":"test"},{"name":"should convert shorthand syntax \"\"","suites":["#parse()"],"updatePoint":{"line":103,"column":65,"index":2389},"line":103,"code":"    it(`should convert shorthand syntax \"${shortHandOption.name}\"`, () => {\n      const tmpFilePath = 'anything.yml';\n      const fileContents = shortHandOption.yaml;\n      const obj = parse(tmpFilePath, fileContents);\n      expect(obj).to.eql(shortHandOption.json);\n    });","file":"unit/lib/utils/fs/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse YAML without shorthand syntax","suites":["#parse()"],"updatePoint":{"line":110,"column":48,"index":2653},"line":110,"code":"  it('should parse YAML without shorthand syntax', () => {\n    const tmpFilePath = 'anything.yml';\n    const fileContents = 'Item:\\n  Fn::Join:\\n  - \"\"\\n  - - \"arn:aws:s3::\"\\n    - !Ref MyBucket';\n    const obj = parse(tmpFilePath, fileContents);\n    expect(obj).to.eql({\n      Item: {\n        'Fn::Join': ['', ['arn:aws:s3::', {\n          Ref: 'MyBucket'\n        }]]\n      }\n    });\n  });","file":"unit/lib/utils/fs/parse.test.js","skipped":false,"dir":"test"},{"name":"should throw error with invalid shorthand syntax","suites":["#parse()"],"updatePoint":{"line":122,"column":54,"index":3049},"line":122,"code":"  it('should throw error with invalid shorthand syntax', () => {\n    const tmpFilePath = 'anything.yml';\n    const fileContents = 'Item:\\n  !Invalid\\n- \"\"\\n- - \"arn:aws:s3::\"\\n  - !Ref MyBucket';\n    let obj;\n    try {\n      obj = parse(tmpFilePath, fileContents);\n    } catch (exception) {\n      expect(exception.name).to.be.equal('YAMLException');\n    }\n    expect(obj).to.be.equal(undefined);\n  });","file":"unit/lib/utils/fs/parse.test.js","skipped":false,"dir":"test"},{"name":"should read a file synchronously","suites":["#readFileSync()"],"updatePoint":{"line":10,"column":38,"index":345},"line":10,"code":"  it('should read a file synchronously', () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    const obj = readFileSync(tmpFilePath);\n    expect(obj.foo).to.equal('bar');\n  });","file":"unit/lib/utils/fs/read-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yml","suites":["#readFileSync()"],"updatePoint":{"line":18,"column":43,"index":600},"line":18,"code":"  it('should read a filename extension .yml', () => {\n    const tmpFilePath = getTmpFilePath('anything.yml');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    const obj = readFileSync(tmpFilePath);\n    expect(obj.foo).to.equal('bar');\n  });","file":"unit/lib/utils/fs/read-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yaml","suites":["#readFileSync()"],"updatePoint":{"line":26,"column":44,"index":855},"line":26,"code":"  it('should read a filename extension .yaml', () => {\n    const tmpFilePath = getTmpFilePath('anything.yaml');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    const obj = readFileSync(tmpFilePath);\n    expect(obj.foo).to.equal('bar');\n  });","file":"unit/lib/utils/fs/read-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should throw YAMLException with filename if yml file is invalid format","suites":["#readFileSync()"],"updatePoint":{"line":34,"column":76,"index":1143},"line":34,"code":"  it('should throw YAMLException with filename if yml file is invalid format', () => {\n    const tmpFilePath = getTmpFilePath('invalid.yml');\n    writeFileSync(tmpFilePath, ': a');\n    expect(() => {\n      readFileSync(tmpFilePath);\n    }).to.throw(/.*invalid.yml/);\n  });","file":"unit/lib/utils/fs/read-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should read a file asynchronously","suites":["#readFile()"],"updatePoint":{"line":15,"column":39,"index":445},"line":15,"code":"  it('should read a file asynchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(readFile(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/read-file.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yml","suites":["#readFile()"],"updatePoint":{"line":23,"column":43,"index":722},"line":23,"code":"  it('should read a filename extension .yml', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yml');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(readFile(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/read-file.test.js","skipped":false,"dir":"test"},{"name":"should read a filename extension .yaml","suites":["#readFile()"],"updatePoint":{"line":31,"column":44,"index":999},"line":31,"code":"  it('should read a filename extension .yaml', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yaml');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(readFile(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/read-file.test.js","skipped":false,"dir":"test"},{"name":"should throw YAMLException with filename if yml file is invalid format","suites":["#readFile()"],"updatePoint":{"line":39,"column":76,"index":1309},"line":39,"code":"  it('should throw YAMLException with filename if yml file is invalid format', async () => {\n    const tmpFilePath = getTmpFilePath('invalid.yml');\n    return writeFile(tmpFilePath, ': a').then(() => readFile(tmpFilePath)).catch(e => {\n      expect(e.name).to.equal('YAMLException');\n      expect(e.message).to.match(new RegExp('.*invalid.yml'));\n    });\n  });","file":"unit/lib/utils/fs/read-file.test.js","skipped":false,"dir":"test"},{"name":"should move file to target destination","suites":["test/unit/lib/utils/fs/safeMoveFile.test.js","when file at target path does not exist"],"updatePoint":{"line":79,"column":48,"index":2792},"line":79,"code":"      it('should move file to target destination', async () => {\n        await safeMoveFile(sourceFile, destinationFile);\n        const sourceExists = fs.existsSync(sourceFile);\n        const destinationExists = fs.existsSync(destinationFile);\n        expect(sourceExists).to.be.false;\n        expect(destinationExists).to.be.true;\n        postAssertion();\n      });","file":"unit/lib/utils/fs/safe-move-file.test.js","skipped":false,"dir":"test"},{"name":"should overwrite the file at the target destination","suites":["test/unit/lib/utils/fs/safeMoveFile.test.js","when file at target path already exists"],"updatePoint":{"line":94,"column":61,"index":3465},"line":94,"code":"      it('should overwrite the file at the target destination', async () => {\n        await safeMoveFile(sourceFile, destinationFile);\n\n        // Check that the file was actually overwritten\n        const cachedData = fse.readFileSync(destinationFile).toString();\n        expect(cachedData).not.to.eq('existing destination data');\n        const sourceExists = await fs.existsSync(sourceFile);\n        expect(sourceExists).to.be.false;\n        postAssertion();\n      });","file":"unit/lib/utils/fs/safe-move-file.test.js","skipped":false,"dir":"test"},{"name":"should return an array with corresponding paths to the found files","suites":["#walkDirSync()"],"updatePoint":{"line":15,"column":72,"index":536},"line":15,"code":"  it('should return an array with corresponding paths to the found files', () => {\n    const tmpDirPath = getTmpDirPath();\n    const nestedDir1 = path.join(tmpDirPath, 'foo');\n    const nestedDir2 = path.join(tmpDirPath, 'foo', 'bar');\n    const nestedDir3 = path.join(tmpDirPath, 'baz');\n    const tmpFilePath1 = path.join(nestedDir1, 'foo.js');\n    const tmpFilePath2 = path.join(nestedDir2, 'bar.js');\n    const tmpFilePath3 = path.join(nestedDir3, 'baz.js');\n    writeFileSync(tmpFilePath1, 'foo');\n    writeFileSync(tmpFilePath2, 'bar');\n    writeFileSync(tmpFilePath3, 'baz');\n    const filePaths = walkDirSync(tmpDirPath);\n    expect(filePaths).to.include(tmpFilePath1);\n    expect(filePaths).to.include(tmpFilePath2);\n    expect(filePaths).to.include(tmpFilePath3);\n  });","file":"unit/lib/utils/fs/walk-dir-sync.test.js","skipped":false,"dir":"test"},{"name":"should check noLinks option","suites":["#walkDirSync()"],"updatePoint":{"line":31,"column":33,"index":1277},"line":31,"code":"  it('should check noLinks option', function () {\n    const tmpDirPath = getTmpDirPath();\n    const realFile = path.join(tmpDirPath, 'real');\n    writeFileSync(realFile, 'content');\n    const symLink = path.join(tmpDirPath, 'sym');\n    try {\n      fs.symlinkSync(realFile, symLink);\n    } catch (error) {\n      skipOnDisabledSymlinksInWindows(error, this);\n      throw error;\n    }\n    const filePaths = walkDirSync(tmpDirPath, {\n      noLinks: true\n    });\n    expect(filePaths).to.include(realFile);\n    expect(filePaths).not.to.include(symLink);\n  });","file":"unit/lib/utils/fs/walk-dir-sync.test.js","skipped":false,"dir":"test"},{"name":"should write a .json file synchronously","suites":["#writeFileSync()"],"updatePoint":{"line":21,"column":45,"index":574},"line":21,"code":"  it('should write a .json file synchronously', () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    const obj = readFileSync(tmpFilePath);\n    expect(obj.foo).to.equal('bar');\n  });","file":"unit/lib/utils/fs/write-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should write a .yml file synchronously","suites":["#writeFileSync()"],"updatePoint":{"line":29,"column":44,"index":830},"line":29,"code":"  it('should write a .yml file synchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yml');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    return serverless.yamlParser.parse(tmpFilePath).then(obj => {\n      expect(obj.foo).to.equal('bar');\n    });\n  });","file":"unit/lib/utils/fs/write-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should write a .yaml file synchronously","suites":["#writeFileSync()"],"updatePoint":{"line":38,"column":45,"index":1125},"line":38,"code":"  it('should write a .yaml file synchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yaml');\n    writeFileSync(tmpFilePath, {\n      foo: 'bar'\n    });\n    return serverless.yamlParser.parse(tmpFilePath).then(obj => {\n      expect(obj.foo).to.equal('bar');\n    });\n  });","file":"unit/lib/utils/fs/write-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should throw error if invalid path is provided","suites":["#writeFileSync()"],"updatePoint":{"line":47,"column":52,"index":1428},"line":47,"code":"  it('should throw error if invalid path is provided', () => {\n    expect(() => {\n      writeFileSync(null);\n    }).to.throw(Error);\n  });","file":"unit/lib/utils/fs/write-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should be able to write an object with circular references","suites":["#writeFileSync()"],"updatePoint":{"line":52,"column":64,"index":1579},"line":52,"code":"  it('should be able to write an object with circular references', async () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    const bar = {};\n    bar.foo = bar;\n    const expected = '{\\n  \"foo\": {\\n    \"$ref\": \"$\"\\n  }\\n}';\n    writeFileSync(tmpFilePath, bar, true);\n    return fsp.readFile(tmpFilePath, 'utf8').then(contents => {\n      expect(contents).to.equal(expected);\n    });\n  });","file":"unit/lib/utils/fs/write-file-sync.test.js","skipped":false,"dir":"test"},{"name":"should write a .json file asynchronously","suites":["#writeFile()"],"updatePoint":{"line":25,"column":46,"index":700},"line":25,"code":"  it('should write a .json file asynchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(readFile(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/write-file.test.js","skipped":false,"dir":"test"},{"name":"should write a .yml file synchronously","suites":["#writeFile()"],"updatePoint":{"line":33,"column":44,"index":978},"line":33,"code":"  it('should write a .yml file synchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yml');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(serverless.yamlParser.parse(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/write-file.test.js","skipped":false,"dir":"test"},{"name":"should write a .yaml file synchronously","suites":["#writeFile()"],"updatePoint":{"line":41,"column":45,"index":1275},"line":41,"code":"  it('should write a .yaml file synchronously', async () => {\n    const tmpFilePath = getTmpFilePath('anything.yaml');\n    return writeFile(tmpFilePath, {\n      foo: 'bar'\n    }).then(() => expect(serverless.yamlParser.parse(tmpFilePath)).to.eventually.deep.equal({\n      foo: 'bar'\n    }));\n  });","file":"unit/lib/utils/fs/write-file.test.js","skipped":false,"dir":"test"},{"name":"should be able to write an object with circular references","suites":["#writeFile()"],"updatePoint":{"line":49,"column":64,"index":1592},"line":49,"code":"  it('should be able to write an object with circular references', async () => {\n    const tmpFilePath = getTmpFilePath('anything.json');\n    const bar = {};\n    bar.foo = bar;\n    const expected = '{\\n  \"foo\": {\\n    \"$ref\": \"$\"\\n  }\\n}';\n    return writeFile(tmpFilePath, bar, true).then(() => expect(fsp.readFile(tmpFilePath, 'utf8')).to.eventually.equal(expected));\n  });","file":"unit/lib/utils/fs/write-file.test.js","skipped":false,"dir":"test"},{"name":"should throw on deprecation if error notifications mode set in service config","suites":["test/unit/lib/utils/logDeprecation.test.js"],"updatePoint":{"line":21,"column":83,"index":699},"line":21,"code":"  it('should throw on deprecation if error notifications mode set in service config', () => {\n    const logDeprecation = require('../../../../lib/utils/log-deprecation');\n    expect(() => logDeprecation('CODE1', 'Start using deprecation log', {\n      serviceConfig: {\n        deprecationNotificationMode: 'error'\n      }\n    })).to.throw(ServerlessError).with.property('code', 'REJECTED_DEPRECATION_CODE1');\n  });","file":"unit/lib/utils/log-deprecation.test.js","skipped":false,"dir":"test"},{"name":"should set new service in serverless.yml and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":36,"column":93,"index":877},"line":36,"code":"  it('should set new service in serverless.yml and name in package.json and package-lock.json', () => {\n    const defaultServiceYml = 'someService: foo\\notherservice: bar\\nservice: service-name\\n\\nprovider:\\n  name: aws';\n    const newServiceYml = 'someService: foo\\notherservice: bar\\nservice: new-service-name\\n\\nprovider:\\n  name: aws';\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.yml');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceYml);\n    renameService(newServiceName, serviceDir);\n    const serviceYml = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceYml).to.equal(newServiceYml);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new service in serverless.ts and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":59,"column":92,"index":2169},"line":59,"code":"  it('should set new service in serverless.ts and name in package.json and package-lock.json', () => {\n    const defaultServiceTs = \"const service = {\\nservice: 'service-name',\\n\\nprovider: {\\n  name: 'aws',\\n}\\n}\\n\";\n    const newServiceTs = \"const service = {\\nservice: 'new-service-name',\\n\\nprovider: {\\n  name: 'aws',\\n}\\n}\\n\";\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.ts');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceTs);\n    renameService(newServiceName, serviceDir);\n    const serviceTs = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceTs).to.equal(newServiceTs);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new service in commented serverless.yml and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":82,"column":103,"index":3461},"line":82,"code":"  it('should set new service in commented serverless.yml and name in package.json and package-lock.json', () => {\n    const defaultServiceYml = '# service: service-name #comment\\n\\nprovider:\\n  name: aws\\n# comment';\n    const newServiceYml = '# service: new-service-name\\n\\nprovider:\\n  name: aws\\n# comment';\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.yml');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceYml);\n    renameService(newServiceName, serviceDir);\n    const serviceYml = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceYml).to.equal(newServiceYml);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new service in commented serverless.yml without existing package.json or package-lock.json","suites":["renameService"],"updatePoint":{"line":105,"column":107,"index":4729},"line":105,"code":"  it('should set new service in commented serverless.yml without existing package.json or package-lock.json', () => {\n    const defaultServiceYml = '# service: service-name #comment\\n\\nprovider:\\n  name: aws\\n# comment';\n    const newServiceYml = '# service: new-service-name\\n\\nprovider:\\n  name: aws\\n# comment';\n    const serviceFile = path.join(serviceDir, 'serverless.yml');\n    serverless.utils.writeFileDir(serviceFile);\n    fse.writeFileSync(serviceFile, defaultServiceYml);\n    renameService('new-service-name', serviceDir);\n    const serviceYml = fse.readFileSync(serviceFile, 'utf-8');\n    expect(serviceYml).to.equal(newServiceYml);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new name of service in serverless.yml and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":115,"column":101,"index":5374},"line":115,"code":"  it('should set new name of service in serverless.yml and name in package.json and package-lock.json', () => {\n    const defaultServiceYml = 'service:\\n  name: service-name\\n\\nprovider:\\n  name: aws\\n';\n    const newServiceYml = 'service:\\n  name: new-service-name\\n\\nprovider:\\n  name: aws\\n';\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.yml');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceYml);\n    renameService(newServiceName, serviceDir);\n    const serviceYml = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceYml).to.equal(newServiceYml);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new name of service in serverless.ts and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":138,"column":100,"index":6622},"line":138,"code":"  it('should set new name of service in serverless.ts and name in package.json and package-lock.json', () => {\n    const defaultServiceTs = \"const service = {\\nservice: {\\n   name: 'service-name',\\n},\\nprovider: {\\n  name: 'aws',\\n}\\n}\\n\";\n    const newServiceTs = \"const service = {\\nservice: {\\n   name: 'new-service-name',\\n},\\nprovider: {\\n  name: 'aws',\\n}\\n}\\n\";\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.ts');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceTs);\n    renameService(newServiceName, serviceDir);\n    const serviceTs = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceTs).to.equal(newServiceTs);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should set new name of service in commented serverless.yml and name in package.json and package-lock.json","suites":["renameService"],"updatePoint":{"line":161,"column":111,"index":7950},"line":161,"code":"  it('should set new name of service in commented serverless.yml and name in package.json and package-lock.json', () => {\n    const defaultServiceYml = '# service:\\n  name: service-name #comment\\n\\nprovider:\\n  name: aws\\n# comment';\n    const newServiceYml = '# service:\\n  name: new-service-name\\n\\nprovider:\\n  name: aws\\n# comment';\n    const defaultServiceName = 'service-name';\n    const newServiceName = 'new-service-name';\n    const packageFile = path.join(serviceDir, 'package.json');\n    const packageLockFile = path.join(serviceDir, 'package-lock.json');\n    const serviceFile = path.join(serviceDir, 'serverless.yml');\n    serverless.utils.writeFileSync(packageFile, {\n      name: defaultServiceName\n    });\n    serverless.utils.writeFileSync(packageLockFile, {\n      name: defaultServiceName\n    });\n    fse.writeFileSync(serviceFile, defaultServiceYml);\n    renameService(newServiceName, serviceDir);\n    const serviceYml = fse.readFileSync(serviceFile, 'utf-8');\n    const packageJson = serverless.utils.readFileSync(packageFile);\n    const packageLockJson = serverless.utils.readFileSync(packageLockFile);\n    expect(serviceYml).to.equal(newServiceYml);\n    expect(packageJson.name).to.equal(newServiceName);\n    expect(packageLockJson.name).to.equal(newServiceName);\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should fail to set new service name in serverless.yml","suites":["renameService"],"updatePoint":{"line":184,"column":59,"index":9188},"line":184,"code":"  it('should fail to set new service name in serverless.yml', () => {\n    expect(() => renameService('new-service-name', serviceDir)).to.throw().and.have.property('code', 'MISSING_SERVICE_FILE');\n  });","file":"unit/lib/utils/rename-service.test.js","skipped":false,"dir":"test"},{"name":"should return `region` from options first if it is present","suites":["test/unit/lib/utils/resolve-region.test.js"],"updatePoint":{"line":7,"column":64,"index":272},"line":7,"code":"  it('should return `region` from options first if it is present', () => {\n    const result = resolveRegion({\n      configuration: {\n        provider: {\n          region: 'fromprovider'\n        }\n      },\n      options: {\n        region: 'fromoptions'\n      }\n    });\n    expect(result).to.equal('fromoptions');\n  });","file":"unit/lib/utils/resolve-region.test.js","skipped":false,"dir":"test"},{"name":"should return `region` from configuration if region is not passed in options","suites":["test/unit/lib/utils/resolve-region.test.js"],"updatePoint":{"line":20,"column":82,"index":608},"line":20,"code":"  it('should return `region` from configuration if region is not passed in options', () => {\n    const result = resolveRegion({\n      configuration: {\n        provider: {\n          region: 'fromprovider'\n        }\n      },\n      options: {}\n    });\n    expect(result).to.equal('fromprovider');\n  });","file":"unit/lib/utils/resolve-region.test.js","skipped":false,"dir":"test"},{"name":"should return default region if both options and configuration do not have it defined","suites":["test/unit/lib/utils/resolve-region.test.js"],"updatePoint":{"line":31,"column":91,"index":917},"line":31,"code":"  it('should return default region if both options and configuration do not have it defined', () => {\n    const result = resolveRegion({\n      configuration: {},\n      options: {}\n    });\n    expect(result).to.equal('us-east-1');\n  });","file":"unit/lib/utils/resolve-region.test.js","skipped":false,"dir":"test"},{"name":"should return `stage` from options first if it is present","suites":["test/unit/lib/utils/resolve-stage.test.js"],"updatePoint":{"line":7,"column":63,"index":268},"line":7,"code":"  it('should return `stage` from options first if it is present', () => {\n    const result = resolveStage({\n      configuration: {\n        provider: {\n          stage: 'fromprovider'\n        }\n      },\n      options: {\n        stage: 'fromoptions'\n      }\n    });\n    expect(result).to.equal('fromoptions');\n  });","file":"unit/lib/utils/resolve-stage.test.js","skipped":false,"dir":"test"},{"name":"should return `stage` from configuration if stage is not passed in options","suites":["test/unit/lib/utils/resolve-stage.test.js"],"updatePoint":{"line":20,"column":80,"index":599},"line":20,"code":"  it('should return `stage` from configuration if stage is not passed in options', () => {\n    const result = resolveStage({\n      configuration: {\n        provider: {\n          stage: 'fromprovider'\n        }\n      },\n      options: {}\n    });\n    expect(result).to.equal('fromprovider');\n  });","file":"unit/lib/utils/resolve-stage.test.js","skipped":false,"dir":"test"},{"name":"should return default stage if both options and configuration do not have it defined","suites":["test/unit/lib/utils/resolve-stage.test.js"],"updatePoint":{"line":31,"column":90,"index":905},"line":31,"code":"  it('should return default stage if both options and configuration do not have it defined', () => {\n    const result = resolveStage({\n      configuration: {},\n      options: {}\n    });\n    expect(result).to.equal('dev');\n  });","file":"unit/lib/utils/resolve-stage.test.js","skipped":false,"dir":"test"},{"name":"Should resolve standalone url","suites":["#standalone"],"updatePoint":{"line":8,"column":35,"index":185},"line":8,"code":"  it('Should resolve standalone url', () => expect(standalone.resolveUrl('v2.8.0')).to.match(/^https:\\/\\//));","file":"unit/lib/utils/standalone.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix up to last `serverless` occurence","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":7,"column":69,"index":344},"line":7,"code":"    it('Should remove common prefix up to last `serverless` occurence', () => {\n      const stacktracePaths = ['/home/xxx/serverless/yyy/zzz-serverless/serverless/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/home/xxx/serverless/yyy/zzz-serverless/serverless/lib/plugins/otherfile.js:100:10', '/home/xxx/serverless/yyy/zzz-serverless/serverless/lib/plugins/another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['/serverless/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/serverless/lib/plugins/otherfile.js:100:10', '/serverless/lib/plugins/another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should leave relative paths unaltered and do not consider them for common prefix","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":12,"column":88,"index":1028},"line":12,"code":"    it('Should leave relative paths unaltered and do not consider them for common prefix', () => {\n      const stacktracePaths = ['/home/xxx/serverless/yyy/zzz-serverless/serverless/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/home/xxx/serverless/yyy/zzz-serverless/serverless/lib/plugins/otherfile.js:100:10', 'somefile.js:100:10', 'another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['/serverless/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/serverless/lib/plugins/otherfile.js:100:10', 'somefile.js:100:10', 'another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix if `/serverless/` or `/node_modules/` not found in path","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":17,"column":91,"index":1672},"line":17,"code":"    it('Should remove common prefix if `/serverless/` or `/node_modules/` not found in path', () => {\n      const stacktracePaths = ['/home/xxx/yyy/zzz-serverless/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/home/xxx/yyy/zzz-serverless/lib/plugins/otherfile.js:100:10', '/home/xxx/yyy/zzz-serverless/lib/plugins/another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['/aws/package/lib/getHashForFilePath.js:23:13', '/otherfile.js:100:10', '/another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix up to last `node_modules` occurence if `serverless` not found","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":22,"column":97,"index":2230},"line":22,"code":"    it('Should remove common prefix up to last `node_modules` occurence if `serverless` not found', () => {\n      const stacktracePaths = ['/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/otherfile.js:100:10', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/lib/plugins/otherfile.js:100:10', '/lib/plugins/another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should strip same following file paths","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":27,"column":46,"index":2812},"line":27,"code":"    it('Should strip same following file paths', () => {\n      const stacktracePaths = ['/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/aws/package/lib/getHashForFilePath.js:3:3', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/otherfile.js:100:10', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/another.js:100:10', '/home/xxx/yyy/zzz-serverless/node_modules/lib/plugins/another.js:4:12'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['/lib/plugins/aws/package/lib/getHashForFilePath.js:23:13', '^:3:3', '/lib/plugins/otherfile.js:100:10', '/lib/plugins/another.js:100:10', '^:4:12']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should handle stacktrace with only relative paths","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":33,"column":55,"index":3598},"line":33,"code":"  it('Should handle stacktrace with only relative paths', () => {\n    const stacktracePaths = ['somefile.js:100:10', 'another.js:100:10'];\n    const result = anonymizeStacktracePaths(stacktracePaths);\n    expect(result).to.deep.equal(['somefile.js:100:10', 'another.js:100:10']);\n  });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix up to last `serverless` occurence for windows-style paths","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":39,"column":93,"index":3960},"line":39,"code":"    it('Should remove common prefix up to last `serverless` occurence for windows-style paths', () => {\n      const stacktracePaths = ['C:\\\\home\\\\xxx\\\\serverless\\\\yyy\\\\zzz-serverless\\\\serverless\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', 'C:\\\\home\\\\xxx\\\\serverless\\\\yyy\\\\zzz-serverless\\\\serverless\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'C:\\\\home\\\\xxx\\\\serverless\\\\yyy\\\\zzz-serverless\\\\serverless\\\\lib\\\\plugins\\\\another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['\\\\serverless\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', '\\\\serverless\\\\lib\\\\plugins\\\\otherfile.js:100:10', '\\\\serverless\\\\lib\\\\plugins\\\\another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix up to last `serverless` occurence for windows-style paths","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":44,"column":93,"index":4700},"line":44,"code":"    it('Should remove common prefix up to last `serverless` occurence for windows-style paths', () => {\n      const stacktracePaths = ['C:\\\\home\\\\xxx\\\\serverless\\\\yyy\\\\zzz-serverless\\\\serverless\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', 'C:\\\\home\\\\xxx\\\\serverless\\\\yyy\\\\zzz-serverless\\\\serverless\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['\\\\serverless\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', '\\\\serverless\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix if `\\serverless\\` not found in path","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":49,"column":73,"index":5318},"line":49,"code":"    it('Should remove common prefix if `\\\\serverless\\\\` not found in path', () => {\n      const stacktracePaths = ['C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\lib\\\\plugins\\\\another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', '\\\\otherfile.js:100:10', '\\\\another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should remove common prefix up to last `node_modules` occurence if `serverless` not found","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":54,"column":97,"index":5912},"line":54,"code":"    it('Should remove common prefix up to last `node_modules` occurence if `serverless` not found', () => {\n      const stacktracePaths = ['C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\another.js:100:10'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', '\\\\lib\\\\plugins\\\\otherfile.js:100:10', '\\\\lib\\\\plugins\\\\another.js:100:10']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should strip same following file paths","suites":["test/unit/lib/utils/anonymize-stacktrace-paths.test.js"],"updatePoint":{"line":59,"column":46,"index":6539},"line":59,"code":"    it('Should strip same following file paths', () => {\n      const stacktracePaths = ['C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:3:3', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\otherfile.js:100:10', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\another.js:100:10', 'C:\\\\home\\\\xxx\\\\yyy\\\\zzz-serverless\\\\node_modules\\\\lib\\\\plugins\\\\another.js:4:12'];\n      const result = anonymizeStacktracePaths(stacktracePaths);\n      expect(result).to.deep.equal(['\\\\lib\\\\plugins\\\\aws\\\\package\\\\lib\\\\getHashForFilePath.js:23:13', '^:3:3', '\\\\lib\\\\plugins\\\\otherfile.js:100:10', '\\\\lib\\\\plugins\\\\another.js:100:10', '^:4:12']);\n    });","file":"unit/lib/utils/telemetry/anonymize-stacktrace-paths.test.js","skipped":false,"dir":"test"},{"name":"Should resolve payload for AWS service","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":39,"column":44,"index":1523},"line":39,"code":"  it('Should resolve payload for AWS service', async () => {\n    const {\n      servicePath: serviceDir\n    } = await fixtures.setup('http-api', {\n      configExt: {\n        provider: {\n          runtime: 'nodejs14.x'\n        },\n        functions: {\n          withContainer: {\n            image: '000000000000.dkr.ecr.sa-east-1.amazonaws.com/test-lambda-docker@sha256:6bb600b4d6e1d7cf521097177dd0c4e9ea373edb91984a505333be8ac9455d38'\n          },\n          withUrl: {\n            handler: 'index.handler',\n            url: true\n          }\n        },\n        resources: {\n          Resources: {\n            ExtraLogGroup: {\n              Type: 'AWS::Logs::LogGroup',\n              Properties: {\n                LogGroupName: '/aws/lambda/extra-log'\n              }\n            },\n            AnotherExtraLogGroup: {\n              Type: 'AWS::Logs::LogGroup',\n              Properties: {\n                LogGroupName: '/aws/lambda/extra-log-2'\n              }\n            },\n            ExtraBucket: {\n              Type: 'AWS::S3::Bucket'\n            },\n            ExtraCustom: {\n              Type: 'Custom::Matthieu'\n            }\n          },\n          extensions: {\n            FunctionLambdaFunction: {\n              Properties: {\n                Runtime: 'nodejs14.x'\n              }\n            }\n          }\n        }\n      }\n    });\n    await fsp.writeFile(path.resolve(serviceDir, 'package.json'), JSON.stringify({\n      dependencies: {\n        fooDep: '1',\n        barDep: '2'\n      },\n      optionalDependencies: {\n        fooOpt: '1',\n        fooDep: '1'\n      },\n      devDependencies: {\n        someDev: '1',\n        otherDev: '1'\n      }\n    }));\n    const {\n      serverless\n    } = await runServerless({\n      cwd: serviceDir,\n      command: 'print'\n    });\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {},\n      commandSchema: commandsSchema.get('print'),\n      serviceDir,\n      configuration: serverless.configurationInput\n    });\n    expect(payload).to.have.property('frameworkLocalUserId');\n    delete payload.frameworkLocalUserId;\n    expect(payload).to.have.property('firstLocalInstallationTimestamp');\n    delete payload.firstLocalInstallationTimestamp;\n    expect(payload).to.have.property('timestamp');\n    delete payload.timestamp;\n    expect(payload).to.have.property('dashboard');\n    delete payload.dashboard;\n    expect(payload).to.have.property('console');\n    delete payload.console;\n    expect(payload).to.have.property('timezone');\n    delete payload.timezone;\n    expect(payload).to.have.property('ciName');\n    delete payload.ciName;\n    expect(payload).to.have.property('commandDurationMs');\n    delete payload.commandDurationMs;\n    expect(payload).to.have.property('isTtyTerminal');\n    delete payload.isTtyTerminal;\n    expect(payload).to.deep.equal({\n      cliName: 'serverless',\n      command: 'print',\n      commandOptionNames: [],\n      isConfigValid: true,\n      config: {\n        configValidationMode: 'error',\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs14.x',\n          stage: 'dev',\n          region: 'us-east-1'\n        },\n        plugins: [],\n        functions: [{\n          runtime: 'nodejs14.x',\n          events: [{\n            type: 'httpApi'\n          }, {\n            type: 'httpApi'\n          }],\n          url: false\n        }, {\n          runtime: 'nodejs14.x',\n          events: [{\n            type: 'httpApi'\n          }],\n          url: false\n        }, {\n          runtime: 'nodejs14.x',\n          events: [],\n          url: false\n        }, {\n          runtime: 'nodejs14.x',\n          events: [],\n          url: false\n        }, {\n          runtime: '$containerimage',\n          events: [],\n          url: false\n        }, {\n          runtime: 'nodejs14.x',\n          events: [],\n          url: true\n        }],\n        resources: {\n          general: ['AWS::Logs::LogGroup', 'AWS::S3::Bucket', 'Custom']\n        },\n        variableSources: [],\n        paramsCount: 0\n      },\n      isAutoUpdateEnabled: false,\n      isUsingCompose: false,\n      notificationsMode: 'on',\n      npmDependencies: ['fooDep', 'barDep', 'fooOpt', 'someDev', 'otherDev'],\n      triggeredDeprecations: [],\n      installationType: 'global:other',\n      hasLocalCredentials: false,\n      versions\n    });\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should resolve payload for custom provider service","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":193,"column":56,"index":5851},"line":193,"code":"  it('Should resolve payload for custom provider service', async () => {\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'custom-provider',\n      command: 'print'\n    });\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {},\n      commandSchema: commandsSchema.get('print'),\n      serviceDir: serverless.serviceDir,\n      configuration: serverless.configurationInput,\n      serverless\n    });\n    expect(payload).to.have.property('frameworkLocalUserId');\n    delete payload.frameworkLocalUserId;\n    expect(payload).to.have.property('firstLocalInstallationTimestamp');\n    delete payload.firstLocalInstallationTimestamp;\n    expect(payload).to.have.property('timestamp');\n    delete payload.timestamp;\n    expect(payload).to.have.property('dashboard');\n    delete payload.dashboard;\n    expect(payload).to.have.property('console');\n    delete payload.console;\n    expect(payload).to.have.property('timezone');\n    delete payload.timezone;\n    expect(payload).to.have.property('ciName');\n    delete payload.ciName;\n    expect(payload).to.have.property('commandDurationMs');\n    delete payload.commandDurationMs;\n    expect(payload).to.have.property('isTtyTerminal');\n    delete payload.isTtyTerminal;\n    expect(payload).to.deep.equal({\n      cliName: 'serverless',\n      command: 'print',\n      commandOptionNames: [],\n      isConfigValid: false,\n      // No schema for custom provider\n      config: {\n        configValidationMode: 'warn',\n        provider: {\n          name: 'customProvider',\n          runtime: 'foo',\n          stage: 'dev',\n          region: undefined\n        },\n        plugins: ['./custom-provider'],\n        functions: [{\n          runtime: 'foo',\n          events: [{\n            type: 'someEvent'\n          }],\n          url: false\n        }, {\n          runtime: 'bar',\n          events: [],\n          url: false\n        }],\n        resources: undefined,\n        variableSources: [],\n        paramsCount: 0\n      },\n      isAutoUpdateEnabled: false,\n      isUsingCompose: false,\n      notificationsMode: 'on',\n      npmDependencies: [],\n      triggeredDeprecations: [],\n      hasLocalCredentials: false,\n      installationType: 'global:other',\n      versions\n    });\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should resolve service-agnostic payload","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":266,"column":45,"index":8097},"line":266,"code":"  it('Should resolve service-agnostic payload', async () => {\n    const payload = getGeneratePayload()({\n      command: 'config',\n      options: {},\n      commandSchema: commandsSchema.get('config'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      }\n    });\n    expect(payload).to.have.property('frameworkLocalUserId');\n    delete payload.frameworkLocalUserId;\n    expect(payload).to.have.property('firstLocalInstallationTimestamp');\n    delete payload.firstLocalInstallationTimestamp;\n    expect(payload).to.have.property('timestamp');\n    delete payload.timestamp;\n    expect(payload).to.have.property('dashboard');\n    delete payload.dashboard;\n    expect(payload).to.have.property('console');\n    delete payload.console;\n    expect(payload).to.have.property('timezone');\n    delete payload.timezone;\n    expect(payload).to.have.property('ciName');\n    delete payload.ciName;\n    expect(payload).to.have.property('commandDurationMs');\n    delete payload.commandDurationMs;\n    expect(payload).to.have.property('isTtyTerminal');\n    delete payload.isTtyTerminal;\n    expect(payload).to.deep.equal({\n      cliName: 'serverless',\n      command: 'config',\n      commandOptionNames: [],\n      isAutoUpdateEnabled: false,\n      isUsingCompose: false,\n      notificationsMode: 'on',\n      triggeredDeprecations: [],\n      installationType: 'global:other',\n      versions\n    });\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should resolve service-agnostic payload for command with `serviceDependencyMode: \"optional\"`","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":307,"column":98,"index":9593},"line":307,"code":"  it('Should resolve service-agnostic payload for command with `serviceDependencyMode: \"optional\"`', () => {\n    const payload = getGeneratePayload()({\n      command: '',\n      options: {},\n      commandSchema: commandsSchema.get(''),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      }\n    });\n    expect(payload).to.have.property('frameworkLocalUserId');\n    delete payload.frameworkLocalUserId;\n    expect(payload).to.have.property('firstLocalInstallationTimestamp');\n    delete payload.firstLocalInstallationTimestamp;\n    expect(payload).to.have.property('timestamp');\n    delete payload.timestamp;\n    expect(payload).to.have.property('dashboard');\n    delete payload.dashboard;\n    expect(payload).to.have.property('console');\n    delete payload.console;\n    expect(payload).to.have.property('timezone');\n    delete payload.timezone;\n    expect(payload).to.have.property('ciName');\n    delete payload.ciName;\n    expect(payload).to.have.property('commandDurationMs');\n    delete payload.commandDurationMs;\n    expect(payload).to.have.property('isTtyTerminal');\n    delete payload.isTtyTerminal;\n    expect(payload).to.deep.equal({\n      command: '',\n      commandOptionNames: [],\n      cliName: 'serverless',\n      isConfigValid: null,\n      config: {\n        configValidationMode: 'warn',\n        variableSources: [],\n        provider: {\n          name: 'aws',\n          runtime: 'nodejs12.x',\n          stage: 'dev',\n          region: 'us-east-1'\n        },\n        plugins: [],\n        functions: [],\n        resources: {\n          general: []\n        },\n        paramsCount: 0\n      },\n      isAutoUpdateEnabled: false,\n      isUsingCompose: false,\n      triggeredDeprecations: [],\n      installationType: 'global:other',\n      notificationsMode: 'on',\n      npmDependencies: [],\n      hasLocalCredentials: false,\n      versions\n    });\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve payload with missing service configuration","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":367,"column":73,"index":11482},"line":367,"code":"  it('Should correctly resolve payload with missing service configuration', () => {\n    const payload = getGeneratePayload()({\n      command: 'plugin list',\n      options: {},\n      commandSchema: commandsSchema.get('plugin list')\n    });\n    expect(payload).to.have.property('frameworkLocalUserId');\n    delete payload.frameworkLocalUserId;\n    expect(payload).to.have.property('firstLocalInstallationTimestamp');\n    delete payload.firstLocalInstallationTimestamp;\n    expect(payload).to.have.property('timestamp');\n    delete payload.timestamp;\n    expect(payload).to.have.property('dashboard');\n    delete payload.dashboard;\n    expect(payload).to.have.property('console');\n    delete payload.console;\n    expect(payload).to.have.property('timezone');\n    delete payload.timezone;\n    expect(payload).to.have.property('ciName');\n    delete payload.ciName;\n    expect(payload).to.have.property('commandDurationMs');\n    delete payload.commandDurationMs;\n    expect(payload).to.have.property('isTtyTerminal');\n    delete payload.isTtyTerminal;\n    expect(payload).to.deep.equal({\n      cliName: 'serverless',\n      command: 'plugin list',\n      commandOptionNames: [],\n      isAutoUpdateEnabled: false,\n      isUsingCompose: false,\n      notificationsMode: 'on',\n      triggeredDeprecations: [],\n      installationType: 'global:other',\n      versions\n    });\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should resolve payload with predefined local config","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":403,"column":57,"index":12833},"line":403,"code":"  it('Should resolve payload with predefined local config', async () => {\n    await fsp.writeFile(path.resolve(os.homedir(), '.serverlessrc'), JSON.stringify({\n      frameworkId: '123',\n      userId: 'some-user-id',\n      meta: {\n        created_at: 1616151998\n      }\n    }));\n    const payload = getGeneratePayload()({\n      command: 'config',\n      options: {},\n      commandSchema: commandsSchema.get('config'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      }\n    });\n    expect(payload.dashboard.userId).to.equal('some-user-id');\n    expect(payload.frameworkLocalUserId).to.equal('123');\n    expect(payload.firstLocalInstallationTimestamp).to.equal(1616151998);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should not include userId from local config if SERVERLESS_ACCESS_KEY used","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":425,"column":79,"index":13592},"line":425,"code":"  it('Should not include userId from local config if SERVERLESS_ACCESS_KEY used', async () => {\n    await fsp.writeFile(path.resolve(os.homedir(), '.serverlessrc'), JSON.stringify({\n      frameworkId: '123',\n      userId: 'some-user-id'\n    }));\n    let payload;\n    overrideEnv({\n      variables: {\n        SERVERLESS_ACCESS_KEY: 'some-key'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'config',\n        options: {},\n        commandSchema: commandsSchema.get('config'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'aws'\n        }\n      });\n    });\n    expect(payload.dashboard.userId).to.be.null;\n    expect(payload.frameworkLocalUserId).to.equal('123');\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly detect Serverless CI/CD","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":450,"column":46,"index":14317},"line":450,"code":"  it('Should correctly detect Serverless CI/CD', () => {\n    let payload;\n    overrideEnv({\n      variables: {\n        SERVERLESS_CI_CD: 'true'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'config',\n        options: {},\n        commandSchema: commandsSchema.get('config'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'aws'\n        }\n      });\n    });\n    expect(payload.ciName).to.equal('Serverless CI/CD');\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly detect Seed CI/CD","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":470,"column":40,"index":14821},"line":470,"code":"  it('Should correctly detect Seed CI/CD', () => {\n    let payload;\n    overrideEnv({\n      variables: {\n        SEED_APP_NAME: 'some-app'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'config',\n        options: {},\n        commandSchema: commandsSchema.get('config'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'aws'\n        }\n      });\n    });\n    expect(payload.ciName).to.equal('Seed');\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `commandOptionNames` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":490,"column":60,"index":15334},"line":490,"code":"  it('Should correctly resolve `commandOptionNames` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {\n        region: 'eu-west-1',\n        format: 'json',\n        path: 'provider.name'\n      },\n      commandSchema: commandsSchema.get('print'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      }\n    });\n    expect(new Set(payload.commandOptionNames)).to.deep.equal(new Set(['region', 'format', 'path']));\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `constructs` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":507,"column":52,"index":15851},"line":507,"code":"  it('Should correctly resolve `constructs` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      commandSchema: commandsSchema.get('print'),\n      options: {},\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws',\n        constructs: {\n          jobs: {\n            type: 'queue',\n            worker: {\n              handler: 'some.handler'\n            }\n          },\n          another: {\n            type: 'queue',\n            worker: {\n              handler: 'other.handler'\n            }\n          }\n        },\n        plugins: ['serverless-lift']\n      }\n    });\n    expect(payload.config.constructs).to.deep.equal([{\n      type: 'queue'\n    }, {\n      type: 'queue'\n    }]);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `configValidationMode` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":539,"column":62,"index":16637},"line":539,"code":"  it('Should correctly resolve `configValidationMode` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      commandSchema: commandsSchema.get('print'),\n      options: {},\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws',\n        configValidationMode: 'off'\n      }\n    });\n    expect(payload.config.configValidationMode).to.equal('off');\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `hasLocalCredentials` property for AWS provider","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":553,"column":78,"index":17090},"line":553,"code":"  it('Should correctly resolve `hasLocalCredentials` property for AWS provider', () => {\n    let payload;\n    overrideEnv({\n      variables: {\n        AWS_ACCESS_KEY_ID: 'someaccesskey',\n        AWS_SECRET_ACCESS_KEY: 'secretkey'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'print',\n        options: {},\n        commandSchema: commandsSchema.get('print'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'aws'\n        }\n      });\n    });\n    expect(payload.hasLocalCredentials).to.equal(true);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `hasLocalCredentials` property for non-AWS provider","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":574,"column":82,"index":17687},"line":574,"code":"  it('Should correctly resolve `hasLocalCredentials` property for non-AWS provider', () => {\n    let payload;\n    overrideEnv({\n      variables: {\n        AWS_ACCESS_KEY_ID: 'someaccesskey',\n        AWS_SECRET_ACCESS_KEY: 'secretkey'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'print',\n        options: {},\n        commandSchema: commandsSchema.get('print'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'other'\n        }\n      });\n    });\n    expect(payload.hasLocalCredentials).to.equal(false);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `commandUsage` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":595,"column":54,"index":18259},"line":595,"code":"  it('Should correctly resolve `commandUsage` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {},\n      commandSchema: commandsSchema.get('print'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      },\n      commandUsage: [{\n        name: 'firstStep',\n        history: [{\n          key: 'firstQuestion',\n          value: 'answer',\n          timestamp: 1626220800000\n        }, {\n          key: 'otherQuestion',\n          value: 'otherAnswer',\n          timestamp: 1626220800000\n        }]\n      }]\n    });\n    expect(payload.commandUsage).to.deep.equal([{\n      name: 'firstStep',\n      history: [{\n        key: 'firstQuestion',\n        value: 'answer',\n        timestamp: 1626220800000\n      }, {\n        key: 'otherQuestion',\n        value: 'otherAnswer',\n        timestamp: 1626220800000\n      }]\n    }]);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `variableSources` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":631,"column":57,"index":19189},"line":631,"code":"  it('Should correctly resolve `variableSources` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {},\n      commandSchema: commandsSchema.get('print'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws'\n      },\n      commandUsage: [],\n      variableSources: new Set(['ssm', 'opt'])\n    });\n    expect(payload.config.variableSources).to.deep.equal(['ssm', 'opt']);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve projectId property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":646,"column":49,"index":19657},"line":646,"code":"  it('Should correctly resolve projectId property', async () => {\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'http-api',\n      command: 'print',\n      configExt: {\n        service: 'to-ensure-unique-serivce-name'\n      }\n    });\n    serverless.getProvider('aws').accountId = '1234567890';\n    const payload = getGeneratePayload()({\n      command: 'deploy',\n      options: {},\n      commandSchema: commandsSchema.get('deploy'),\n      serviceDir: serverless.serviceDir,\n      configuration: serverless.configurationInput,\n      serverless\n    });\n    expect(payload.projectId).to.deep.equal('35dsFwCaexwLHppAP4uDsjKW4ci54q1AKcN5JTNaDtw=');\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `didCreateService` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":667,"column":58,"index":20341},"line":667,"code":"  it('Should correctly resolve `didCreateService` property', async () => {\n    const {\n      serverless\n    } = await runServerless({\n      fixture: 'http-api',\n      command: 'print',\n      configExt: {\n        service: 'to-ensure-unique-serivce-name'\n      }\n    });\n    serverless.getProvider('aws').didCreateService = true;\n    const payload = getGeneratePayload()({\n      command: '',\n      options: {},\n      commandSchema: commandsSchema.get('deploy'),\n      serviceDir: serverless.serviceDir,\n      configuration: serverless.configurationInput,\n      serverless\n    });\n    expect(payload.didCreateService).to.be.true;\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `params` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":688,"column":48,"index":20964},"line":688,"code":"  it('Should correctly resolve `params` property', () => {\n    const payload = getGeneratePayload()({\n      command: 'print',\n      options: {},\n      commandSchema: commandsSchema.get('print'),\n      serviceDir: process.cwd(),\n      configuration: {\n        service: 'foo',\n        provider: 'aws',\n        params: {\n          prod: {\n            val: '1',\n            other: '2'\n          },\n          staging: {\n            val: 'dev',\n            stagingonly: '1'\n          },\n          dev: {\n            devonly: 123\n          }\n        }\n      },\n      commandUsage: []\n    });\n    expect(payload.config.paramsCount).to.equal(4);\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"Should correctly resolve `isUsingCompose` property","suites":["test/unit/lib/utils/telemetry/generatePayload.test.js"],"updatePoint":{"line":715,"column":56,"index":21615},"line":715,"code":"  it('Should correctly resolve `isUsingCompose` property', async () => {\n    let payload;\n    overrideEnv({\n      variables: {\n        SLS_COMPOSE: '1'\n      }\n    }, () => {\n      payload = getGeneratePayload()({\n        command: 'print',\n        options: {},\n        commandSchema: commandsSchema.get('print'),\n        serviceDir: process.cwd(),\n        configuration: {\n          service: 'foo',\n          provider: 'aws'\n        }\n      });\n    });\n    expect(payload.isUsingCompose).to.be.true;\n  });","file":"unit/lib/utils/telemetry/generate-payload.test.js","skipped":false,"dir":"test"},{"name":"`storeLocally` should persist an event in cacheDir","suites":["test/unit/lib/utils/telemetry/index.test.js"],"updatePoint":{"line":71,"column":56,"index":2160},"line":71,"code":"  it('`storeLocally` should persist an event in cacheDir', async () => {\n    const payload = {\n      test: 'payloadvalue'\n    };\n    storeLocally(payload);\n    const dirFilenames = await fsp.readdir(cacheDirPath);\n    expect(dirFilenames.length).to.equal(1);\n    const persistedEvent = await fse.readJson(path.join(cacheDirPath, dirFilenames[0]));\n    expect(persistedEvent.payload).to.deep.equal({\n      ...payload,\n      id: dirFilenames[0]\n    });\n    expect(persistedEvent).to.have.property('timestamp');\n  });","file":"unit/lib/utils/telemetry/index.test.js","skipped":false,"dir":"test"},{"name":"Should cache failed requests and rerun then with `send`","suites":["test/unit/lib/utils/telemetry/index.test.js"],"updatePoint":{"line":85,"column":61,"index":2680},"line":85,"code":"  it('Should cache failed requests and rerun then with `send`', async () => {\n    expectedState = 'networkError';\n    await cacheEvent();\n    await send();\n    expect(usedUrl).to.equal(telemetryUrl);\n    const dirFilenames = await fsp.readdir(cacheDirPath);\n    expect(dirFilenames.filter(isFilename).length).to.equal(1);\n    expectedState = 'success';\n    await send();\n    const dirFilenamesAfterSend = await fsp.readdir(cacheDirPath);\n    expect(dirFilenamesAfterSend.filter(isFilename).length).to.equal(0);\n\n    // Check that one event was send with request\n    expect(JSON.parse(usedOptions.body)).to.have.lengthOf(1);\n  });","file":"unit/lib/utils/telemetry/index.test.js","skipped":false,"dir":"test"},{"name":"Should ditch stale events at `send`","suites":["test/unit/lib/utils/telemetry/index.test.js"],"updatePoint":{"line":100,"column":41,"index":3290},"line":100,"code":"  it('Should ditch stale events at `send`', async () => {\n    await Promise.all([cacheEvent(0), cacheEvent(0), cacheEvent(), cacheEvent(), cacheEvent(0)]);\n    expectedState = 'success';\n    const dirFilenames = await fsp.readdir(cacheDirPath);\n    expect(dirFilenames.filter(isFilename).length).to.equal(5);\n    await send();\n    const dirFilenamesAfterSend = await fsp.readdir(cacheDirPath);\n    expect(dirFilenamesAfterSend.filter(isFilename).length).to.equal(0);\n    // Check if only two events were send with request\n    expect(JSON.parse(usedOptions.body)).to.have.lengthOf(2);\n  });","file":"unit/lib/utils/telemetry/index.test.js","skipped":false,"dir":"test"},{"name":"Should ignore body procesing error","suites":["test/unit/lib/utils/telemetry/index.test.js"],"updatePoint":{"line":111,"column":40,"index":3879},"line":111,"code":"  it('Should ignore body procesing error', async () => {\n    expectedState = 'responseBodyError';\n    await cacheEvent();\n    await send();\n    const dirFilenames = await fsp.readdir(cacheDirPath);\n    expect(dirFilenames.filter(isFilename).length).to.equal(0);\n  });","file":"unit/lib/utils/telemetry/index.test.js","skipped":false,"dir":"test"},{"name":"Should not send request when there are no events to send","suites":["test/unit/lib/utils/telemetry/index.test.js"],"updatePoint":{"line":118,"column":62,"index":4169},"line":118,"code":"  it('Should not send request when there are no events to send', async () => {\n    await send();\n    expect(usedUrl).to.be.null;\n    expect(usedOptions).to.be.null;\n  });","file":"unit/lib/utils/telemetry/index.test.js","skipped":false,"dir":"test"},{"name":"should be null when stack missing","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":7,"column":39,"index":356},"line":7,"code":"  it('should be null when stack missing', () => {\n    const err = new Error('test');\n    delete err.stack;\n    const result = resolveErrorLocation(tokenizeException(err));\n    expect(result).to.equal('<not accessible due to non-error exception>');\n  });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should be null for error with code and one-line stacktrace","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":13,"column":64,"index":635},"line":13,"code":"  it('should be null for error with code and one-line stacktrace', () => {\n    const err = new Error('test');\n    err.code = 'ERR_CODE';\n    err.stack = 'Oneline stacktrace';\n    const result = resolveErrorLocation(tokenizeException(err));\n    expect(result).to.equal('<not available>');\n  });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should be null if no matching lines found","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":20,"column":47,"index":912},"line":20,"code":"  it('should be null if no matching lines found', () => {\n    const err = new Error('test');\n    err.stack = 'no matching\\nlines in\\nstacktrace';\n    const result = resolveErrorLocation(tokenizeException(err));\n    expect(result).to.equal('<not reflected in stack>');\n  });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should not capture non-stacktrace paths","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":26,"column":45,"index":1184},"line":26,"code":"  it('should not capture non-stacktrace paths', () => {\n    const err = new Error('test');\n    err.stack = 'Could not find a version that satisfies the requirement flask (from versions: none) No matching distribution found for flask.';\n    const result = resolveErrorLocation(tokenizeException(err));\n    expect(result).to.equal('<not reflected in stack>');\n  });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle paths not enclosed in parentheses","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":33,"column":65,"index":1606},"line":33,"code":"    it('should correctly handle paths not enclosed in parentheses', () => {\n      const err = new Error('test');\n      err.stack = 'Error: spawn E2BIG\\n' + '    at ChildProcess.spawn (node:internal/child_process:403:11)\\n' + '    at Object.spawn (node:child_process:573:9)\\n' + '    at /home/xxx/api/node_modules/bestzip/lib/bestzip.js:75:29\\n' + '    at /home/xxx/api/node_modules/async/dist/async.js:1802:20\\n';\n      const result = resolveErrorLocation(tokenizeException(err));\n      expect(result).to.equal(['node:internal/child_process:403:11', 'node:child_process:573:9', '/bestzip/lib/bestzip.js:75:29', '/async/dist/async.js:1802:20'].join('\\n'));\n    });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should return at most 7 lines","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":39,"column":37,"index":2242},"line":39,"code":"    it('should return at most 7 lines', () => {\n      const err = new Error('test');\n      err.stack = 'Error:\\n' + '    at Context.it (/home/xxx/serverless/test/unit/lib/utils/resolve-error-location.test.js:10:17)\\n' + '    at callFn (/home/xxx/serverless/node_modules/mocha/lib/runnable.js:366:21)\\n' + '    at Test.Runnable.run (/home/xxx/serverless/node_modules/mocha/lib/runnable.js:354:5)\\n' + '    at Runner.runTest (/home/xxx/serverless/node_modules/mocha/lib/runner.js:677:10)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:801:12)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:802:12)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:803:12)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:804:12)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:805:12)\\n' + '    at next (/home/xxx/serverless/node_modules/mocha/lib/runner.js:594:14)\\n';\n      const result = resolveErrorLocation(tokenizeException(err));\n      expect(result).to.equal(['/test/unit/lib/utils/resolve-error-location.test.js:10:17', '/node_modules/mocha/lib/runnable.js:366:21', '^:354:5', '/node_modules/mocha/lib/runner.js:677:10', '^:801:12', '^:802:12', '^:803:12'].join('\\n'));\n    });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should correctly handle paths not enclosed in parentheses","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":47,"column":65,"index":3605},"line":47,"code":"    it('should correctly handle paths not enclosed in parentheses', () => {\n      const err = new Error('test');\n      err.stack = 'Error: spawn E2BIG\\r\\n' + '    at ChildProcess.spawn (node:internal/child_process:403:11)\\r\\n' + '    at Object.spawn (node:child_process:573:9)\\r\\n' + '    at C:\\\\home\\\\xxx\\\\api\\\\node_modules\\\\bestzip\\\\lib\\\\bestzip.js:75:29\\r\\n' + '    at C:\\\\home\\\\xxx\\\\api\\\\node_modules\\\\async\\\\dist\\\\async.js:1802:20\\r\\n';\n      const result = resolveErrorLocation(tokenizeException(err));\n      expect(result).to.equal(['node:internal/child_process:403:11', 'node:child_process:573:9', '/bestzip/lib/bestzip.js:75:29', '/async/dist/async.js:1802:20'].join('\\n'));\n    });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"should return at most 7 lines and use `/` path separator","suites":["test/unit/lib/utils/telemetry/resolve-error-location.test.js"],"updatePoint":{"line":53,"column":64,"index":4296},"line":53,"code":"    it('should return at most 7 lines and use `/` path separator', () => {\n      const err = new Error('test');\n      err.stack = 'Error:\\n' + '    at Context.it (C:\\\\home\\\\xxx\\\\serverless\\\\test\\\\unit\\\\lib\\\\utils\\\\resolve-error-location.test.js:10:17)\\r\\n' + '    at callFn (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runnable.js:366:21)\\r\\n' + '    at Test.Runnable.run (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runnable.js:354:5)\\r\\n' + '    at Runner.runTest (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:677:10)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:801:12)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:802:12)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:803:12)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:804:12)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:805:12)\\r\\n' + '    at next (C:\\\\home\\\\xxx\\\\serverless\\\\node_modules\\\\mocha\\\\lib\\\\runner.js:594:14)\\r\\n';\n      const result = resolveErrorLocation(tokenizeException(err));\n      expect(result).to.equal(['/test/unit/lib/utils/resolve-error-location.test.js:10:17', '/node_modules/mocha/lib/runnable.js:366:21', '^:354:5', '/node_modules/mocha/lib/runner.js:677:10', '^:801:12', '^:802:12', '^:803:12'].join('\\n'));\n    });","file":"unit/lib/utils/telemetry/resolve-error-location.test.js","skipped":false,"dir":"test"},{"name":"Should tokenize user error","suites":["test/unit/lib/utils/tokenize-exception.test.js"],"updatePoint":{"line":7,"column":32,"index":298},"line":7,"code":"  it('Should tokenize user error', () => {\n    const errorTokens = tokenizeError(new ServerlessError('Some error', 'ERR_CODE', {\n      decoratedMessage: 'decorated'\n    }));\n    expect(errorTokens.title).to.equal('Serverless Error');\n    expect(errorTokens.name).to.equal('ServerlessError');\n    expect(errorTokens.stack).to.include('tokenize-exception.test.js:');\n    expect(errorTokens.message).to.equal('Some error');\n    expect(errorTokens.isUserError).to.equal(true);\n    expect(errorTokens.code).to.equal('ERR_CODE');\n    expect(errorTokens.decoratedMessage).to.equal('decorated');\n  });","file":"unit/lib/utils/tokenize-exception.test.js","skipped":false,"dir":"test"},{"name":"Should tokenize programmer error","suites":["test/unit/lib/utils/tokenize-exception.test.js"],"updatePoint":{"line":19,"column":38,"index":898},"line":19,"code":"  it('Should tokenize programmer error', () => {\n    const errorTokens = tokenizeError(new TypeError('Some error'));\n    expect(errorTokens.title).to.equal('Type Error');\n    expect(errorTokens.name).to.equal('TypeError');\n    expect(errorTokens.stack).to.include('tokenize-exception.test.js:');\n    expect(errorTokens.message).to.equal('Some error');\n    expect(errorTokens.isUserError).to.equal(false);\n  });","file":"unit/lib/utils/tokenize-exception.test.js","skipped":false,"dir":"test"},{"name":"Should tokenize non-error exception","suites":["test/unit/lib/utils/tokenize-exception.test.js"],"updatePoint":{"line":27,"column":41,"index":1312},"line":27,"code":"  it('Should tokenize non-error exception', () => {\n    const errorTokens = tokenizeError(null);\n    expect(errorTokens.title).to.equal('Exception');\n    expect(errorTokens.message).to.equal('null');\n    expect(errorTokens.isUserError).to.equal(false);\n  });","file":"unit/lib/utils/tokenize-exception.test.js","skipped":false,"dir":"test"},{"name":"should add a top level object and item into the yaml file","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":28,"column":65,"index":1151},"line":28,"code":"    it('should add a top level object and item into the yaml file', () => {\n      const yamlContent = {\n        service: 'test-service'\n      };\n      const expectedResult = Object.assign({}, yamlContent, {\n        toplevel: ['foo']\n      });\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add an item under the existing object which you specify","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":37,"column":70,"index":1500},"line":37,"code":"    it('should add an item under the existing object which you specify', () => {\n      const yamlContent = {\n        toplevel: ['foo']\n      };\n      const expectedResult = {\n        toplevel: ['foo', 'bar']\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add a multiple level object and item into the yaml file","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":46,"column":70,"index":1818},"line":46,"code":"    it('should add a multiple level object and item into the yaml file', () => {\n      const yamlContent = {\n        service: 'test-service'\n      };\n      const expectedResult = Object.assign({}, yamlContent, {\n        toplevel: {\n          second: {\n            third: ['foo']\n          }\n        }\n      });\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add an item under the existing multiple level object which you specify","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":59,"column":85,"index":2258},"line":59,"code":"    it('should add an item under the existing multiple level object which you specify', () => {\n      const yamlContent = {\n        toplevel: {\n          second: {\n            third: ['foo']\n          }\n        }\n      };\n      const expectedResult = {\n        toplevel: {\n          second: {\n            third: ['foo', 'bar']\n          }\n        }\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add an item under partially existing multiple level object","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":76,"column":73,"index":2718},"line":76,"code":"    it('should add an item under partially existing multiple level object', () => {\n      const yamlContent = {\n        toplevel: {\n          first: 'foo',\n          second: {}\n        }\n      };\n      const expectedResult = {\n        toplevel: {\n          first: 'foo',\n          second: {\n            third: ['bar']\n          }\n        }\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add an item in the middle branch","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":93,"column":47,"index":3155},"line":93,"code":"    it('should add an item in the middle branch', () => {\n      const yamlContent = {\n        initiallevel: 'bar',\n        toplevel: {\n          first: 'foo'\n        },\n        bottomlevel: 'bar'\n      };\n      const expectedResult = {\n        initiallevel: 'bar',\n        toplevel: {\n          first: 'foo',\n          second: ['bar']\n        },\n        bottomlevel: 'bar'\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel.second', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should add an item with multiple top level entries","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":111,"column":58,"index":3656},"line":111,"code":"    it('should add an item with multiple top level entries', () => {\n      const yamlContent = {\n        toplevel: {\n          first: 'foo',\n          second: {}\n        },\n        nexttoplevel: {\n          first: 'bar'\n        }\n      };\n      const expectedResult = {\n        toplevel: {\n          first: 'foo',\n          second: {\n            third: ['bar']\n          }\n        },\n        nexttoplevel: {\n          first: 'bar'\n        }\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should do nothing when adding the existing item","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":134,"column":55,"index":4217},"line":134,"code":"    it('should do nothing when adding the existing item', () => {\n      const yamlContent = {\n        toplevel: ['foo']\n      };\n      const expectedResult = {\n        toplevel: ['foo']\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should survive with invalid yaml","suites":["#yamlAstParser","#addNewArrayItem()"],"updatePoint":{"line":143,"column":40,"index":4498},"line":143,"code":"    it('should survive with invalid yaml', () => {\n      const yamlContent = 'service:';\n      const expectedResult = {\n        service: null,\n        toplevel: ['foo']\n      };\n      return addNewArrayItemAndVerifyResult(yamlContent, 'toplevel', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove the existing top level object and item from the yaml file","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":161,"column":79,"index":5353},"line":161,"code":"    it('should remove the existing top level object and item from the yaml file', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: ['foo']\n      };\n      const expectedResult = {\n        service: 'test-service'\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove the existing item under the object which you specify","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":171,"column":74,"index":5715},"line":171,"code":"    it('should remove the existing item under the object which you specify', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: ['foo', 'bar']\n      };\n      const expectedResult = {\n        service: 'test-service',\n        toplevel: ['foo']\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove the multiple level object and item from the yaml file","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":182,"column":75,"index":6112},"line":182,"code":"    it('should remove the multiple level object and item from the yaml file', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['foo']\n          }\n        }\n      };\n      const expectedResult = {\n        service: 'test-service'\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove the existing item under the multiple level object which you specify","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":196,"column":89,"index":6565},"line":196,"code":"    it('should remove the existing item under the multiple level object which you specify', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['foo', 'bar']\n          }\n        }\n      };\n      const expectedResult = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['foo']\n          }\n        }\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove multilevel object from the middle branch","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":215,"column":62,"index":7088},"line":215,"code":"    it('should remove multilevel object from the middle branch', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['foo']\n          }\n        },\n        end: 'end'\n      };\n      const expectedResult = {\n        service: 'test-service',\n        end: 'end'\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove item from multilevel object from the middle branch","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":231,"column":72,"index":7564},"line":231,"code":"    it('should remove item from multilevel object from the middle branch', () => {\n      const yamlContent = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['foo', 'bar']\n          }\n        },\n        end: 'end'\n      };\n      const expectedResult = {\n        service: 'test-service',\n        toplevel: {\n          second: {\n            third: ['bar']\n          }\n        },\n        end: 'end'\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel.second.third', 'foo', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should do nothing when you can not find the object which you specify","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":252,"column":76,"index":8141},"line":252,"code":"    it('should do nothing when you can not find the object which you specify', () => {\n      const yamlContent = {\n        serveice: 'test-service',\n        toplevel: ['foo', 'bar']\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel', 'foo2', yamlContent);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should remove when with inline declaration of the array","suites":["#yamlAstParser","#removeExistingArrayItem()"],"updatePoint":{"line":259,"column":63,"index":8426},"line":259,"code":"    it('should remove when with inline declaration of the array', () => {\n      const yamlContent = 'toplevel:\\n  second: [\"foo2\", \"bar\"]';\n      const expectedResult = {\n        toplevel: {\n          second: ['foo2']\n        }\n      };\n      return removeExistingArrayItemAndVerifyResult(yamlContent, 'toplevel.second', 'bar', expectedResult);\n    });","file":"unit/lib/utils/yaml-ast-parser.test.js","skipped":false,"dir":"test"},{"name":"should display version when \"--version\" option","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":19,"column":52,"index":769},"line":19,"code":"  it('should display version when \"--version\" option', async () => {\n    const output = String((await spawn('node', [serverlessPath, '-v'])).stdoutBuffer);\n    expect(output).to.include(`Framework Core: ${version}`);\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should not prevent help output with invalid service configuration","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":23,"column":71,"index":1011},"line":23,"code":"  it('should not prevent help output with invalid service configuration', async () => {\n    const output = String((await spawn('node', [serverlessPath, '--help'], {\n      cwd: path.resolve(cliFixturesPath, 'config-syntax-error')\n    })).stdoutBuffer);\n    expect(output).to.include('serverless <command> <options>');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should report with an error invalid configuration","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":29,"column":55,"index":1318},"line":29,"code":"  it('should report with an error invalid configuration', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: path.resolve(cliFixturesPath, 'config-syntax-error')\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('Cannot parse');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should handle exceptions","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":40,"column":30,"index":1684},"line":40,"code":"  it('should handle exceptions', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: path.resolve(programmaticFixturesPath, 'exception')\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('Error: Stop');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should handle uncaught exceptions","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":51,"column":39,"index":2057},"line":51,"code":"  it('should handle uncaught exceptions', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: path.resolve(cliFixturesPath, 'uncaught-exception')\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('Error: Stop');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should handle local serverless installation","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":62,"column":49,"index":2440},"line":62,"code":"  it('should handle local serverless installation', async () => {\n    const output = String((await spawn('node', [serverlessBinPath, '--help'], {\n      cwd: (await programmaticFixturesEngine.setup('locally-installed-serverless')).servicePath\n    })).stderrBuffer);\n    expect(output).to.include('Running \"serverless\" from node_modules');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should handle no service related commands","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":68,"column":47,"index":2782},"line":68,"code":"  it('should handle no service related commands', async () => {\n    const output = String((await spawn('node', [serverlessPath, 'plugin', 'list'], {\n      cwd: path.resolve(cliFixturesPath, 'config-syntax-error')\n    })).stdoutBuffer);\n    expect(output).to.include('Install a plugin by running');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should resolve variables","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":74,"column":30,"index":3069},"line":74,"code":"  it('should resolve variables', async () => {\n    expect(String((await spawn('node', [serverlessPath, 'print'], {\n      cwd: path.resolve(cliFixturesPath, 'variables')\n    })).stdoutBuffer)).to.include('nestedInPrototype: bar-in-prototype');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should support multi service project","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":79,"column":42,"index":3330},"line":79,"code":"  it('should support multi service project', async () => {\n    expect(String((await spawn('node', [serverlessPath, 'print'], {\n      cwd: path.resolve(programmaticFixturesPath, 'multi-service/service-a')\n    })).stdoutBuffer)).to.include('self: bar');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should support \"-c\" flag","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":84,"column":30,"index":3576},"line":84,"code":"  it('should support \"-c\" flag', async () => {\n    expect(String((await spawn('node', [serverlessPath, 'print', '-c', 'serverless.custom.yml'], {\n      cwd: path.resolve(programmaticFixturesPath, 'custom-config-filename')\n    })).stdoutBuffer)).to.include('looks: good');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should support \"-c\" flag for \"aws-service\" commands","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":89,"column":57,"index":3881},"line":89,"code":"  it('should support \"-c\" flag for \"aws-service\" commands', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'info', '-c', 'serverless.custom.yml'], {\n        cwd: path.resolve(programmaticFixturesPath, 'custom-config-filename')\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      // The way to validate it is to check if command errors out with missing credentials\n      // at this point we know the configuration was resolved properly\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('AWS provider credentials not found');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should rejected unresolved \"provider\" section","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":102,"column":51,"index":4494},"line":102,"code":"  it('should rejected unresolved \"provider\" section', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: (await programmaticFixturesEngine.setup('aws', {\n          configExt: {\n            provider: '${foo:bar}'\n          }\n        })).servicePath\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('\"provider.stage\" property is not accessible');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should rejected unresolved \"provider.stage\" property","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":117,"column":58,"index":5009},"line":117,"code":"  it('should rejected unresolved \"provider.stage\" property', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: (await programmaticFixturesEngine.setup('aws', {\n          configExt: {\n            provider: {\n              stage: '${foo:bar}'\n            }\n          }\n        })).servicePath\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('\"provider.stage\" property is not accessible');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should load env variables from dotenv files","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":134,"column":49,"index":5552},"line":134,"code":"  it('should load env variables from dotenv files', async () => {\n    const {\n      servicePath: serviceDir\n    } = await programmaticFixturesEngine.setup('aws', {\n      configExt: {\n        useDotenv: true,\n        custom: {\n          fromDefaultEnv: '${env:DEFAULT_ENV_VARIABLE}'\n        }\n      }\n    });\n    await fsp.writeFile(path.resolve(serviceDir, '.env'), 'DEFAULT_ENV_VARIABLE=valuefromdefault');\n    expect(String((await spawn('node', [serverlessPath, 'print'], {\n      cwd: serviceDir\n    })).stdoutBuffer)).to.include('fromDefaultEnv: valuefromdefault');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should allow not defined environment variables in provider.stage`","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":150,"column":71,"index":6149},"line":150,"code":"  it('should allow not defined environment variables in provider.stage`', async () => {\n    const {\n      servicePath: serviceDir\n    } = await programmaticFixturesEngine.setup('aws', {\n      configExt: {\n        useDotenv: true,\n        provider: {\n          stage: \"${env:FOO, 'dev'}\"\n        },\n        custom: {\n          fromDefaultEnv: '${env:DEFAULT_ENV_VARIABLE}'\n        }\n      }\n    });\n    await fsp.writeFile(path.resolve(serviceDir, '.env'), 'DEFAULT_ENV_VARIABLE=valuefromdefault');\n    const printOut = String((await spawn('node', [serverlessPath, 'print'], {\n      cwd: serviceDir\n    })).stdoutBuffer);\n    expect(printOut).to.include('fromDefaultEnv: valuefromdefault');\n    expect(printOut).to.include('stage: dev');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should report \"env\" variables resolution conflicts with exception","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":171,"column":71,"index":6892},"line":171,"code":"  it('should report \"env\" variables resolution conflicts with exception', async () => {\n    const {\n      servicePath: serviceDir\n    } = await programmaticFixturesEngine.setup('aws', {\n      configExt: {\n        useDotenv: true,\n        provider: {\n          stage: \"${env:FOO, 'dev'}\"\n        }\n      }\n    });\n    await fsp.writeFile(path.resolve(serviceDir, '.env'), 'FOO=test');\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: serviceDir\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('Environment variable \"FOO\" which');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should support custom variable soruces","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":193,"column":44,"index":7546},"line":193,"code":"  it('should support custom variable soruces', async () => {\n    const {\n      servicePath: serviceDir\n    } = await programmaticFixturesEngine.setup('plugin', {\n      configExt: {\n        custom: {\n          otherVar: '${other:addressValue}'\n        },\n        plugins: ['./custom-variable-source']\n      }\n    });\n    expect(String((await spawn('node', [serverlessPath, 'print'], {\n      cwd: serviceDir\n    })).stdoutBuffer)).to.include('otherVar: Resolving variable addressValue');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should reject unresolved \"plugins\" property","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":208,"column":49,"index":8043},"line":208,"code":"  it('should reject unresolved \"plugins\" property', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'print'], {\n        cwd: (await programmaticFixturesEngine.setup('aws', {\n          configExt: {\n            plugins: '${foo:bar}'\n          }\n        })).servicePath\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('\"plugins\" property is not accessible');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should throw meaningful error on unrecognized command for custom provider","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":223,"column":79,"index":8571},"line":223,"code":"  it('should throw meaningful error on unrecognized command for custom provider', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'foo'], {\n        cwd: (await programmaticFixturesEngine.setup('custom-provider')).servicePath\n      });\n      throw new Error('Unexpected');\n    } catch (error) {\n      if (!error.code) throw error;\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('command \"foo\" not found');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should show help when requested and in context of invalid service configuration","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":235,"column":85,"index":9056},"line":235,"code":"  it('should show help when requested and in context of invalid service configuration', async () => {\n    const output = String((await spawn('node', [serverlessPath, '--help'], {\n      cwd: path.resolve(programmaticFixturesPath, 'config-invalid')\n    })).stdoutBuffer);\n    expect(output).to.include('serverless <command> <options>');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should print general --help to stdout","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":241,"column":43,"index":9355},"line":241,"code":"  it('should print general --help to stdout', async () => {\n    const output = String((await spawn('node', [serverlessPath, '--help'])).stdoutBuffer);\n    expect(output).to.include('serverless <command> <options>');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should print command --help to stdout","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":245,"column":43,"index":9577},"line":245,"code":"  it('should print command --help to stdout', async () => {\n    const output = String((await spawn('node', [serverlessPath, 'deploy', '--help'])).stdoutBuffer);\n    expect(output).to.include('deploy');\n    expect(output).to.include('stage');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should print not integrated command --help to stdout","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":250,"column":58,"index":9840},"line":250,"code":"  it('should print not integrated command --help to stdout', async () => {\n    const output = String((await spawn('node', [serverlessPath, 'plugin', 'install', '--help'])).stdoutBuffer);\n    expect(output).to.include('plugin install');\n    expect(output).to.include('stage');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should print interactive setup help to stdout","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":255,"column":51,"index":10115},"line":255,"code":"  it('should print interactive setup help to stdout', async () => {\n    const output = String((await spawn('node', [serverlessPath, '--help-interactive'])).stdoutBuffer);\n    expect(output).to.include('Interactive CLI');\n    expect(output).to.not.include('Main commands');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should show help when running container command","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":260,"column":53,"index":10396},"line":260,"code":"  it('should show help when running container command', async () => {\n    // Note: Arbitrarily picked \"plugin\" command for testing\n    const output = stripAnsi(String((await spawn('node', [serverlessPath, 'plugin'])).stdoutBuffer));\n    expect(output).to.include('plugin install');\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"},{"name":"should crash in required option is missing","suites":["test/unit/scripts/serverless.test.js"],"updatePoint":{"line":265,"column":48,"index":10679},"line":265,"code":"  it('should crash in required option is missing', async () => {\n    try {\n      await spawn('node', [serverlessPath, 'config', 'credentials', '-k', 'foo', '-s', 'bar']);\n      throw new Error('Unexpected');\n    } catch (error) {\n      expect(error.code).to.equal(1);\n      expect(String(error.stdoutBuffer)).to.include('command \"config credentials\" requires');\n    }\n  });","file":"unit/scripts/serverless.test.js","skipped":false,"dir":"test"}]}