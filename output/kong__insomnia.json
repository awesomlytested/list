{"repo":"Kong/insomnia","url":"https://github.com/Kong/insomnia","branch":"develop","configs":[{"package":"insomnia-smoke-test","lang":"ts","dir":"packages/insomnia-smoke-test/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-base64","lang":"js","dir":"plugins/insomnia-plugin-base64/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-cookie-jar","lang":"js","dir":"plugins/insomnia-plugin-cookie-jar/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"insomnia-plugin-file","lang":"js","dir":"plugins/insomnia-plugin-file/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-hash","lang":"js","dir":"plugins/insomnia-plugin-hash/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-now","lang":"js","dir":"plugins/insomnia-plugin-now/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-request","lang":"js","dir":"plugins/insomnia-plugin-request/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-response","lang":"js","dir":"plugins/insomnia-plugin-response/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-uuid","lang":"js","dir":"plugins/insomnia-plugin-uuid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"can send requests","suites":[],"updatePoint":{"line":6,"column":23},"line":6,"code":"test('can send requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionSmoke testsjust now');\n\n  await page.click('button:has-text(\"GETsend JSON request\")');\n  await page.click('text=http://127.0.0.1:4010/pets/1Send >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"id\": \"1\"');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('{\"id\":\"1\"}');\n\n  await page.click('button:has-text(\"GETsends dummy.csv request and shows rich response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.csvSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('a,b,c');\n\n  await page.click('button:has-text(\"GETsends dummy.xml request and shows raw response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.xmlSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('xml version=\"1.0\"');\n  await expect(responseBody).toContainText('<LoginResult>');\n\n  await page.click('button:has-text(\"GETsends dummy.pdf request and shows rich response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.pdfSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('PDF-1.4');\n\n  await page.click('button:has-text(\"GETsends request with basic authentication\")');\n  await page.click('text=http://127.0.0.1:4010/auth/basicSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('basic auth received');\n\n  await page.click('button:has-text(\"GETsends request with cookie and get cookie in response\")');\n  await page.click('text=http://127.0.0.1:4010/cookiesSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('Set-Cookie: insomnia-test-cookie=value123');\n});","file":"app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can cancel requests","suites":[],"updatePoint":{"line":64,"column":25},"line":64,"code":"test('can cancel requests', async ({ app, page }) => {\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionSmoke testsjust now');\n\n  await page.click('button:has-text(\"GETdelayed request\")');\n  await page.click('text=http://127.0.0.1:4010/delay/seconds/20Send >> button');\n\n  await page.click('[data-testid=\"response-pane\"] button:has-text(\"Cancel Request\")');\n  await page.click('text=Request was cancelled');\n});","file":"app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"url field is focused for first time users","suites":[],"updatePoint":{"line":81,"column":47},"line":81,"code":"test('url field is focused for first time users', async ({ page }) => {\n  const urlInput = ':nth-match(textarea, 2)';\n  const locator = page.locator(urlInput);\n  await expect(locator).toBeFocused();\n});","file":"app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Sign in with GitHub","suites":[],"updatePoint":{"line":3,"column":25},"line":3,"code":"test('Sign in with GitHub', async ({ app, page }) => {\n  await page.locator('text=Setup Git Sync').click();\n  await page.locator('button:has-text(\"Repository Settings\")').click();\n\n  await page.locator('li[role=\"tab\"]:has-text(\"GitHub\")').click();\n\n  // Prevent the app from opening the browser to the authorization page\n  // and return the url that would be created by following the GitHub OAuth flow.\n  // https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\n  const fakeGitHubOAuthWebFlow = app.evaluate(electron => {\n    return new Promise<{ redirectUrl: string }>(resolve => {\n      const webContents = electron.BrowserWindow.getAllWindows()[0].webContents;\n      // Remove all navigation listeners so that only the one we inject will run\n      webContents.removeAllListeners('will-navigate');\n      webContents.on('will-navigate', (e, url) => {\n        e.preventDefault();\n        const parsedUrl = new URL(url);\n        // We use the same state parameter that the app created to assert that we prevent CSRF\n        const stateSearchParam = parsedUrl.searchParams.get('state') || '';\n        const redirectUrl = `insomnia://oauth/github/authenticate?state=${stateSearchParam}&code=12345`;\n        resolve({ redirectUrl });\n      });\n    });\n  });\n\n  const [{ redirectUrl }] = await Promise.all([\n    fakeGitHubOAuthWebFlow,\n    page.locator('text=Authenticate with GitHub').click({\n      // When playwright clicks a link it waits for navigation to finish.\n      // In our case we are stubbing the navigation and we don't want to wait for it.\n      noWaitAfter: true,\n    }),\n  ]);\n\n  await page.locator('input[name=\"link\"]').click();\n\n  await page.locator('input[name=\"link\"]').fill(redirectUrl);\n\n  await page.locator('button[name=\"add-token\"]').click();\n\n  await page\n    .locator('input[name=\"uri\"]')\n    .fill('https://github.com/insomnia/example-repo');\n\n  await page.locator('text=Done').click();\n});","file":"git-sync.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can make oauth2 requests","suites":[],"updatePoint":{"line":6,"column":30},"line":6,"code":"test('can make oauth2 requests', async ({ app, page }) => {\n  test.slow();\n\n  const sendButton = page.locator('[data-testid=\"request-pane\"] button:has-text(\"Send\")');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.locator('[data-testid=\"project\"]').click();\n  await page.locator('text=Create').click();\n\n  const text = await loadFixture('oauth.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.locator('button:has-text(\"Clipboard\")').click();\n  await page.locator('text=CollectionOauth Testingjust now').click();\n\n  // Authorization code\n  await page.locator('button:has-text(\"Authorization Code\")').click();\n\n  // No PKCE\n  await page.locator('button:has-text(\"No PKCE\")').click();\n\n  const [authorizationCodePage] = await Promise.all([\n    app.context().waitForEvent('page'),\n    sendButton.click(),\n  ]);\n\n  await authorizationCodePage.waitForLoadState();\n  await authorizationCodePage.waitForFunction(\"document.cookie !== ''\");\n  await authorizationCodePage.locator('[name=\"login\"]').fill('admin');\n  await authorizationCodePage.locator('[name=\"password\"]').fill('admin');\n  await authorizationCodePage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Navigate to the OAuth2 Tab and refresh the token from there\n  await page.locator('li[role=\"tab\"]:has-text(\"OAuth 2\")').click();\n\n  const tokenInput = page.locator('[for=\"Access-Token\"] > input');\n  const prevToken = await tokenInput.inputValue();\n  await page.locator('button:has-text(\"Refresh Token\")').click();\n  await expect(tokenInput).not.toHaveValue(prevToken);\n\n  // Clear the session and tokens and fetch a token manually\n  await page.locator('text=Advanced Options').click();\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.locator('button:text-is(\"Clear\")').click();\n  await page.locator('button:has-text(\"Click to confirm\")').click();\n\n  const [refreshPage] = await Promise.all([\n    app.context().waitForEvent('page'),\n    page.locator('button:has-text(\"Fetch Tokens\")').click(),\n  ]);\n\n  await refreshPage.waitForLoadState();\n  // expect an _interaction cookie to be set with the sign in form\n  await refreshPage.waitForFunction(\"document.cookie !== ''\");\n  await refreshPage.locator('[name=\"login\"]').fill('admin');\n  await refreshPage.locator('[name=\"password\"]').fill('admin');\n  await refreshPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(tokenInput).not.toHaveValue('');\n\n  // PKCE SHA256\n  await page.locator('button:has-text(\"PKCE SHA256\")').click();\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // PKCE Plain\n  await page.locator('button:has-text(\"PKCE Plain\")').click();\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Implicit\n  await page.locator('button:has-text(\"Implicit\")').click();\n\n  // ID Token\n  await page.locator('button:has-text(\"ID Token\")').click();\n\n  const [implicitPage] = await Promise.all([\n    app.context().waitForEvent('page'),\n    sendButton.click(),\n  ]);\n  await implicitPage.waitForLoadState();\n  await implicitPage.waitForFunction(\"document.cookie !== ''\");\n  await implicitPage.locator('[name=\"login\"]').fill('admin');\n  await implicitPage.locator('[name=\"password\"]').fill('admin');\n  await implicitPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // ID and Access Token\n  await page.locator('button:has-text(\"ID and Access Token\")').click();\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Client Credentials\n  await page.locator('button:has-text(\"Client Credentials\")').click();\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"clientId\": \"client_credentials\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Resource Owner Password Credentials\n  await page.locator('button:has-text(\"Resource Owner Password Credentials\")').click();\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"foo\"');\n});","file":"oauth.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"encodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":22,"column":21,"index":527},"line":22,"code":"  it('encodes nothing', assertTemplate(['encode', 'normal', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"encodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":23,"column":23,"index":600},"line":23,"code":"  it('encodes something', assertTemplate(['encode', 'normal', 'my string'], 'bXkgc3RyaW5n'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urlencodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":24,"column":24,"index":695},"line":24,"code":"  it('urlencodes nothing', assertTemplate(['encode', 'url', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urlencodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":25,"column":26,"index":768},"line":25,"code":"  it('urlencodes something', assertTemplate(['encode', 'url', 'hello world'], 'aGVsbG8gd29ybGQ'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"decodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":26,"column":21,"index":862},"line":26,"code":"  it('decodes nothing', assertTemplate(['decode', 'normal', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"decodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":27,"column":23,"index":935},"line":27,"code":"  it('decodes something', assertTemplate(['decode', 'normal', 'bXkgc3RyaW5n'], 'my string'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urldecodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":28,"column":24,"index":1030},"line":28,"code":"  it('urldecodes nothing', assertTemplate(['decode', 'url', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urldecodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":29,"column":26,"index":1103},"line":29,"code":"  it('urldecodes something', assertTemplate(['decode', 'url', 'aGVsbG8gd29ybGQ'], 'hello world'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"fails on invalid action","suites":["Base64EncodeExtension"],"updatePoint":{"line":30,"column":29,"index":1205},"line":30,"code":"  it('fails on invalid action', assertTemplateFails(['foo', 'normal', ''], 'Unsupported operation \"foo\". Must be encode or decode.'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: no cookies for url"],"updatePoint":{"line":10,"column":33,"index":240},"line":10,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n\n      try {\n        await tag.run(context, 'https://google.com/', '');\n      } catch (err) {\n        expect(err.message).toContain('No cookies in store for url \"https://google.com/');\n      }\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: cookie not found"],"updatePoint":{"line":37,"column":33,"index":1107},"line":37,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n\n      try {\n        await tag.run(context, 'https://insomnia.rest', 'bar');\n      } catch (err) {\n        expect(err.message).toContain('No cookie with name \"bar\"');\n        expect(err.message).toContain('\"foo\"');\n      }\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: cookie name found"],"updatePoint":{"line":65,"column":33,"index":2005},"line":65,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n\n      const result = await tag.run(context, 'https://insomnia.rest', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"reads from string","suites":["FileExtension"],"updatePoint":{"line":26,"column":23,"index":672},"line":26,"code":"  it('reads from string', assertTemplate([escaped], 'Hello World!'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"fails on missing file","suites":["FileExtension"],"updatePoint":{"line":27,"column":27,"index":746},"line":27,"code":"  it('fails on missing file', assertTemplateFails([path.resolve('/foo')], `ENOENT: no such file or directory, open '${path.resolve('/foo')}'`));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"fails on no 2nd param","suites":["FileExtension"],"updatePoint":{"line":28,"column":27,"index":891},"line":28,"code":"  it('fails on no 2nd param', assertTemplateFails([], 'No file selected'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"hashes sha1","suites":["Plugin"],"updatePoint":{"line":23,"column":17,"index":524},"line":23,"code":"  it('hashes sha1', assertTemplate(['sha1', 'hex', 'foo'], '0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes sha256","suites":["Plugin"],"updatePoint":{"line":24,"column":19,"index":631},"line":24,"code":"  it('hashes sha256', assertTemplate(['sha256', 'hex', 'foo'], '2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes md5","suites":["Plugin"],"updatePoint":{"line":25,"column":16,"index":761},"line":25,"code":"  it('hashes md5', assertTemplate(['md5', 'hex', 'foo'], 'acbd18db4cc2f85cedef654fccc4a4d8'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash invalid algorithm","suites":["Plugin"],"updatePoint":{"line":26,"column":37,"index":877},"line":26,"code":"  it('fails to hash invalid algorithm', assertTemplateFails(['bad', 'hex', 'foo'], 'Digest method not supported')); // Digests","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to latin1","suites":["Plugin"],"updatePoint":{"line":28,"column":22,"index":990},"line":28,"code":"  it('hashes to latin1', assertTemplate(['md5', 'latin1', 'foo'], '¬½\u0018ÛLÂø\\\\íïeOÌÄ¤Ø'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to hex","suites":["Plugin"],"updatePoint":{"line":29,"column":19,"index":1076},"line":29,"code":"  it('hashes to hex', assertTemplate(['md5', 'hex', 'foo'], 'acbd18db4cc2f85cedef654fccc4a4d8'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to base64","suites":["Plugin"],"updatePoint":{"line":30,"column":22,"index":1177},"line":30,"code":"  it('hashes to base64', assertTemplate(['md5', 'base64', 'foo'], 'rL0Y20zC+Fzt72VPzMSk2A=='));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash to invalid","suites":["Plugin"],"updatePoint":{"line":31,"column":30,"index":1281},"line":31,"code":"  it('fails to hash to invalid', assertTemplateFails(['md5', 'bad', 'foo'], 'Invalid encoding bad. Choices are hex, latin1, base64')); // Values","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes empty string","suites":["Plugin"],"updatePoint":{"line":33,"column":25,"index":1422},"line":33,"code":"  it('hashes empty string', assertTemplate(['md5', 'hex', ''], 'd41d8cd98f00b204e9800998ecf8427e'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes no string","suites":["Plugin"],"updatePoint":{"line":34,"column":22,"index":1520},"line":34,"code":"  it('hashes no string', assertTemplate(['md5', 'hex'], 'd41d8cd98f00b204e9800998ecf8427e'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash non string","suites":["Plugin"],"updatePoint":{"line":35,"column":30,"index":1622},"line":35,"code":"  it('fails to hash non string', assertTemplateFails(['md5', 'hex', true], 'Cannot hash value of type \"boolean\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"renders default ISO","suites":["NowExtension"],"updatePoint":{"line":30,"column":25,"index":743},"line":30,"code":"  it('renders default ISO', assertTemplate([], isoRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders ISO-8601","suites":["NowExtension"],"updatePoint":{"line":31,"column":22,"index":796},"line":31,"code":"  it('renders ISO-8601', assertTemplate(['ISO-8601'], isoRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders seconds","suites":["NowExtension"],"updatePoint":{"line":32,"column":21,"index":858},"line":32,"code":"  it('renders seconds', assertTemplate(['seconds'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders s","suites":["NowExtension"],"updatePoint":{"line":33,"column":15,"index":917},"line":33,"code":"  it('renders s', assertTemplate(['s'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders unix","suites":["NowExtension"],"updatePoint":{"line":34,"column":18,"index":973},"line":34,"code":"  it('renders unix', assertTemplate(['unix'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders millis","suites":["NowExtension"],"updatePoint":{"line":35,"column":20,"index":1034},"line":35,"code":"  it('renders millis', assertTemplate(['millis'], millisRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders ms","suites":["NowExtension"],"updatePoint":{"line":36,"column":16,"index":1092},"line":36,"code":"  it('renders ms', assertTemplate(['ms'], millisRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"fails on other","suites":["NowExtension"],"updatePoint":{"line":37,"column":20,"index":1150},"line":37,"code":"  it('fails on other', assertTemplateFails(['foo'], 'Invalid date type \"foo\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"should get cookie by name","suites":["plugin","RequestExtension cookie"],"updatePoint":{"line":10,"column":33,"index":228},"line":10,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n\n      const result = await tag.run(context, 'cookie', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get url","suites":["plugin","RequestExtension url"],"updatePoint":{"line":34,"column":22,"index":975},"line":34,"code":"    it('should get url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: 'bar'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n\n      const result = await tag.run(context, 'url');\n      expect(result).toBe('https://insomnia.rest/foo/bar?foo=bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get rendered url","suites":["plugin","RequestExtension url"],"updatePoint":{"line":51,"column":31,"index":1420},"line":51,"code":"    it('should get rendered url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n\n      const result = await tag.run(context, 'url');\n      expect(result).toBe('https://insomnia.rest/foo/bar?foo=bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get url","suites":["plugin","RequestExtension header"],"updatePoint":{"line":70,"column":22,"index":1914},"line":70,"code":"    it('should get url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        headers: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n\n      const result = await tag.run(context, 'header', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get parameter","suites":["plugin","RequestExtension parameter"],"updatePoint":{"line":89,"column":28,"index":2390},"line":89,"code":"    it('should get parameter', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n\n      const result = await tag.run(context, 'parameter', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get name","suites":["plugin","RequestExtension name"],"updatePoint":{"line":108,"column":23,"index":2862},"line":108,"code":"    it('should get name', async () => {\n      const requests = [{\n        _id: 'req_1',\n        name: 'Foo',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n\n      const result = await tag.run(context, 'name');\n      expect(result).toBe('Foo');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"fails on no responses","suites":["Response tag","General"],"updatePoint":{"line":7,"column":29,"index":175},"line":7,"code":"    it('fails on no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n\n      const context = _genTestContext(requests);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('No responses for request');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no request","suites":["Response tag","General"],"updatePoint":{"line":22,"column":27,"index":570},"line":22,"code":"    it('fails on no request', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        _body: '{\"foo\": \"bar\"}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_test', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Could not find request req_test');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on empty filter","suites":["Response tag","General"],"updatePoint":{"line":43,"column":29,"index":1131},"line":43,"code":"    it('fails on empty filter', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        _body: '{\"foo\": \"bar\"}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('No body filter specified');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"basic query","suites":["Response tag","JSONPath"],"updatePoint":{"line":66,"column":19,"index":1704},"line":66,"code":"    it('basic query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      const result = await tag.run(context, 'body', 'req_1', '$.foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid JSON","suites":["Response tag","JSONPath"],"updatePoint":{"line":84,"column":29,"index":2193},"line":84,"code":"    it('fails on invalid JSON', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Invalid JSON: Unexpected end of JSON input');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid query","suites":["Response tag","JSONPath"],"updatePoint":{"line":106,"column":30,"index":2799},"line":106,"code":"    it('fails on invalid query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '$$');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: $$');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no results","suites":["Response tag","JSONPath"],"updatePoint":{"line":128,"column":27,"index":3385},"line":128,"code":"    it('fails on no results', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '$.missing');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: $.missing');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on more than 1 result","suites":["Response tag","JSONPath"],"updatePoint":{"line":150,"column":35,"index":3993},"line":150,"code":"    it('fails on more than 1 result', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"array\": [\"bar\", \"baz\"]}'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '$.array.*');\n        fail('JSON should have failed to parse');\n      } catch (err) {\n        expect(err.message).toContain('Returned more than one result: $.array.*');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"works with utf-16 encoding","suites":["Response tag","JSONPath"],"updatePoint":{"line":172,"column":34,"index":4630},"line":172,"code":"    it('works with utf-16 encoding', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json; charset=UTF-16',\n        _body: iconv.encode('{\"array\": [\"bar\", \"baz\"]}', 'UTF-16')\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'body', 'req_1', '$.array[0]')).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"body\" query","suites":["Response tag","XPath"],"updatePoint":{"line":191,"column":43,"index":5194},"line":191,"code":"    it('renders basic response \"body\" query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar>Hello World!</bar></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      const result = await tag.run(context, 'body', 'req_1', '/foo/bar');\n      expect(result).toBe('Hello World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"body\" attribute query","suites":["Response tag","XPath"],"updatePoint":{"line":209,"column":53,"index":5738},"line":209,"code":"    it('renders basic response \"body\" attribute query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar hello=\"World\">Hello World!</bar></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      const result = await tag.run(context, 'body', 'req_1', '/foo/bar/@hello');\n      expect(result).toBe('World');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders query that does not start with slash","suites":["Response tag","XPath"],"updatePoint":{"line":227,"column":52,"index":6295},"line":227,"code":"    it('renders query that does not start with slash', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar hello=\"World\">Hello World!</bar></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      const result = await tag.run(context, 'body', 'req_1', 'substring(/foo/bar, 7)');\n      expect(result).toBe('World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"no results on invalid XML","suites":["Response tag","XPath"],"updatePoint":{"line":245,"column":33,"index":6841},"line":245,"code":"    it('no results on invalid XML', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<hi></hi></sstr>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '/foo');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: /foo');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid query","suites":["Response tag","XPath"],"updatePoint":{"line":267,"column":30,"index":7430},"line":267,"code":"    it('fails on invalid query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '//');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Invalid XPath query: //');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no results","suites":["Response tag","XPath"],"updatePoint":{"line":289,"column":27,"index":8007},"line":289,"code":"    it('fails on no results', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '/missing');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: /missing');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on more than 1 result","suites":["Response tag","XPath"],"updatePoint":{"line":311,"column":35,"index":8604},"line":311,"code":"    it('fails on more than 1 result', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar>Hello World!</bar><bar>And again!</bar></foo>'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'body', 'req_1', '/foo/*');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned more than one result: /foo/*');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"header\"","suites":["Response tag","ResponseExtension Header"],"updatePoint":{"line":335,"column":39,"index":9308},"line":335,"code":"    it('renders basic response \"header\"', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: '',\n        headers: [{\n          name: 'Content-Type',\n          value: 'application/json'\n        }, {\n          name: 'Content-Length',\n          value: '20'\n        }]\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'header', 'req_1', 'content-type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'Content-Type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'CONTENT-type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'CONTENT-type    ')).toBe('application/json');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"no results on missing header","suites":["Response tag","ResponseExtension Header"],"updatePoint":{"line":361,"column":36,"index":10215},"line":361,"code":"    it('no results on missing header', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        headers: [{\n          name: 'Content-Type',\n          value: 'application/json'\n        }, {\n          name: 'Content-Length',\n          value: '20'\n        }]\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        await tag.run(context, 'header', 'req_1', 'missing');\n        fail('should have failed');\n      } catch (err) {\n        expect(err.message).toBe('No header with name \"missing\".\\n' + 'Choices are [\\n\\t\"Content-Type\",\\n\\t\"Content-Length\"\\n]');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response","suites":["Response tag","Raw"],"updatePoint":{"line":390,"column":30,"index":10997},"line":390,"code":"    it('renders basic response', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Hello World!'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1')).toBe('Hello World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=always and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":409,"column":51,"index":11517},"line":409,"code":"    it('sends when behavior=always and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'always')).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=always and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":420,"column":53,"index":11860},"line":420,"code":"    it('sends when behavior=always and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Hello World!'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'always')).toBe('Response res_2');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=no-history and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":437,"column":55,"index":12353},"line":437,"code":"    it('sends when behavior=no-history and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'no-history')).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=no-history and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":448,"column":65,"index":12712},"line":448,"code":"    it('does not send when behavior=no-history and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'no-history')).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=when-expired and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":465,"column":57,"index":13234},"line":465,"code":"    it('sends when behavior=when-expired and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 60)).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=when-expired and response is old","suites":["Response tag","Dependency sending"],"updatePoint":{"line":476,"column":60,"index":13594},"line":476,"code":"    it('sends when behavior=when-expired and response is old', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        created: Date.now() - 60000\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 30)).toBe('Response res_2');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=when-expired and response is new","suites":["Response tag","Dependency sending"],"updatePoint":{"line":489,"column":68,"index":14007},"line":489,"code":"    it('does not send when behavior=when-expired and response is new', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing',\n        created: Date.now() - 60000\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 90)).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=never and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":507,"column":58,"index":14573},"line":507,"code":"    it('does not send when behavior=never and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses);\n\n      try {\n        expect(await tag.run(context, 'raw', 'req_1', '', 'never')).toBe('Response res_1');\n      } catch (err) {\n        expect(err.message).toBe('No responses for request');\n        return;\n      }\n\n      throw new Error('Running tag should have thrown exception');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=never and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":525,"column":60,"index":15112},"line":525,"code":"    it('does not send when behavior=never and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing'\n      }];\n\n      const context = _genTestContext(requests, responses);\n\n      expect(await tag.run(context, 'raw', 'req_1', '', 'never')).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not resend if request has already sent in recursive chain","suites":["Response tag","Dependency sending"],"updatePoint":{"line":542,"column":70,"index":15642},"line":542,"code":"    it('does not resend if request has already sent in recursive chain', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses, {\n        requestChain: ['req_1']\n      });\n\n      try {\n        await tag.run(context, 'raw', 'req_1', '', 'always');\n      } catch (err) {\n        expect(err.message).toBe('No responses for request');\n        return;\n      }\n\n      throw new Error('Running tag should have thrown exception');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does send if request has not been sent in recursive chain","suites":["Response tag","Dependency sending"],"updatePoint":{"line":562,"column":65,"index":16199},"line":562,"code":"    it('does send if request has not been sent in recursive chain', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n\n      const context = _genTestContext(requests, responses, {\n        requestChain: ['req_2']\n      });\n\n      const response = await tag.run(context, 'raw', 'req_1', '', 'always');\n      expect(response).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should ensure fourth argument is maxAge","suites":["Response tag","Max Age"],"updatePoint":{"line":584,"column":47,"index":16740},"line":584,"code":"    it('should ensure fourth argument is maxAge', () => {\n      expect(maxAgeArg.displayName).toBe('Max age (seconds)');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior and max age arguments are missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":587,"column":92,"index":16914},"line":587,"code":"    it('should hide when behavior and max age arguments are missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', ''].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior=no-history and max age argument is missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":592,"column":101,"index":17167},"line":592,"code":"    it('should hide when behavior=no-history and max age argument is missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', '', 'no-history'].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should show when behavior=when-expired and max age argument is missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":597,"column":103,"index":17436},"line":597,"code":"    it('should show when behavior=when-expired and max age argument is missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', '', 'when-expired'].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(false);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior=always","suites":["Response tag","Max Age"],"updatePoint":{"line":602,"column":40,"index":17645},"line":602,"code":"    it('should hide when behavior=always', () => {\n      const args = ['raw', 'req_1', '', 'always', 60].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should show when behavior=when-expired","suites":["Response tag","Max Age"],"updatePoint":{"line":607,"column":46,"index":17857},"line":607,"code":"    it('should show when behavior=when-expired', () => {\n      const args = ['raw', 'req_1', '', 'when-expired', 60].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(false);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders default v4","suites":["UuidExtension"],"updatePoint":{"line":28,"column":24,"index":717},"line":28,"code":"  it('renders default v4', assertTemplate([], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 4","suites":["UuidExtension"],"updatePoint":{"line":29,"column":15,"index":765},"line":29,"code":"  it('renders 4', assertTemplate(['4'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 4 num","suites":["UuidExtension"],"updatePoint":{"line":30,"column":19,"index":820},"line":30,"code":"  it('renders 4 num', assertTemplate([4], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders v4","suites":["UuidExtension"],"updatePoint":{"line":31,"column":16,"index":870},"line":31,"code":"  it('renders v4', assertTemplate(['v4'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 1","suites":["UuidExtension"],"updatePoint":{"line":32,"column":15,"index":922},"line":32,"code":"  it('renders 1', assertTemplate(['1'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 1 num","suites":["UuidExtension"],"updatePoint":{"line":33,"column":19,"index":977},"line":33,"code":"  it('renders 1 num', assertTemplate([1], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders v1","suites":["UuidExtension"],"updatePoint":{"line":34,"column":16,"index":1027},"line":34,"code":"  it('renders v1', assertTemplate(['v1'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"fails on other","suites":["UuidExtension"],"updatePoint":{"line":35,"column":20,"index":1084},"line":35,"code":"  it('fails on other', assertTemplateFails(['foo'], 'Invalid UUID type \"foo\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"}]}