{
    "repo": "postcss/autoprefixer",
    "url": "https://github.com/postcss/autoprefixer",
    "branch": "main",
    "configs": [
        {
            "package": "autoprefixer",
            "lang": "ts",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "adds prefixes",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 6,
                "column": 19
            },
            "line": 6,
            "code": "  it('adds prefixes', () => {\n    let keyframes = new AtRule('@keyframes', ['-moz-', '-ms-'])\n\n    let css = parse(\n      '@-moz-keyframes b {} ' + '@-ms-keyframes a {} ' + '@keyframes a {}'\n    )\n    keyframes.process(css.last)\n    expect(css.toString()).toEqual(\n      '@-moz-keyframes b {} ' +\n        '@-ms-keyframes a {} ' +\n        '@-moz-keyframes a {} ' +\n        '@keyframes a {}'\n    )\n  })",
            "file": "at-rule.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "throws on wrong options",
            "suites": [],
            "updatePoint": {
                "line": 252,
                "column": 27
            },
            "line": 252,
            "code": "it('throws on wrong options', () => {\n  expect(() => {\n    autoprefixer({ browser: ['chrome 25', 'opera 12'] } as autoprefixer.Options)\n  }).toThrow(/overrideBrowserslist/)\n  expect(() => {\n    autoprefixer({\n      browserslist: ['chrome 25', 'opera 12']\n    } as autoprefixer.Options)\n  }).toThrow(/overrideBrowserslist/)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets options via options object",
            "suites": [],
            "updatePoint": {
                "line": 270,
                "column": 35
            },
            "line": 270,
            "code": "it('sets options via options object', () => {\n  let allOptions = Object.assign(options, { overrideBrowserslist: browsers })\n  let instance = autoprefixer(allOptions)\n  expect(instance.options).toEqual(allOptions)\n  expect(instance.browsers).toEqual(browsers)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets options via array of browsers as first argument and object",
            "suites": [],
            "updatePoint": {
                "line": 277,
                "column": 67
            },
            "line": 277,
            "code": "it('sets options via array of browsers as first argument and object', () => {\n  let instance = autoprefixer(browsers, options)\n  expect(instance.options).toEqual(options)\n  expect(instance.browsers).toEqual(browsers)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets options via browsers as arguments and options object",
            "suites": [],
            "updatePoint": {
                "line": 283,
                "column": 61
            },
            "line": 283,
            "code": "it('sets options via browsers as arguments and options object', () => {\n  let instance = autoprefixer(...browsers, options)\n  expect(instance.options).toEqual(options)\n  expect(instance.browsers).toEqual(browsers)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has default browsers",
            "suites": [],
            "updatePoint": {
                "line": 289,
                "column": 24
            },
            "line": 289,
            "code": "it('has default browsers', () => {\n  expect(autoprefixer.defaults.length).toBeDefined()\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows warning on browsers option",
            "suites": [],
            "updatePoint": {
                "line": 293,
                "column": 36
            },
            "line": 293,
            "code": "it('shows warning on browsers option', () => {\n  let consoleWarn = jest.spyOn(console, 'warn')\n  consoleWarn.mockImplementation(() => true)\n  let instance = autoprefixer({\n    browsers: ['last 1 version']\n  } as autoprefixer.Options)\n  expect(instance.browsers).toEqual(['last 1 version'])\n  expect(consoleWarn).toHaveBeenCalledTimes(1)\n  expect(consoleWarn.mock.calls[0][0]).toContain('overrideBrowserslist')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passes statistics to Browserslist",
            "suites": [],
            "updatePoint": {
                "line": 304,
                "column": 37
            },
            "line": 304,
            "code": "it('passes statistics to Browserslist', () => {\n  let stats = {\n    chrome: {\n      10: 10,\n      11: 40\n    },\n    ie: {\n      10: 10,\n      11: 40\n    }\n  }\n  expect(\n    autoprefixer({\n      overrideBrowserslist: '> 20% in my stats',\n      stats\n    }).info()\n  ).toMatch(/Browsers:\\n\\s\\sChrome: 11\\n\\s\\sIE: 11\\n/)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes values",
            "suites": [],
            "updatePoint": {
                "line": 323,
                "column": 19
            },
            "line": 323,
            "code": "it('prefixes values', () => {\n  check('values')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes @keyframes",
            "suites": [],
            "updatePoint": {
                "line": 326,
                "column": 23
            },
            "line": 326,
            "code": "it('prefixes @keyframes', () => {\n  check('keyframes')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes @viewport",
            "suites": [],
            "updatePoint": {
                "line": 329,
                "column": 22
            },
            "line": 329,
            "code": "it('prefixes @viewport', () => {\n  check('viewport')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes selectors",
            "suites": [],
            "updatePoint": {
                "line": 332,
                "column": 22
            },
            "line": 332,
            "code": "it('prefixes selectors', () => {\n  check('selectors')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes resolution query",
            "suites": [],
            "updatePoint": {
                "line": 335,
                "column": 29
            },
            "line": 335,
            "code": "it('prefixes resolution query', () => {\n  check('resolution')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes common mistakes",
            "suites": [],
            "updatePoint": {
                "line": 338,
                "column": 27
            },
            "line": 338,
            "code": "it('removes common mistakes', () => {\n  check('mistakes')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "reads notes for prefixes",
            "suites": [],
            "updatePoint": {
                "line": 341,
                "column": 28
            },
            "line": 341,
            "code": "it('reads notes for prefixes', () => {\n  check('notes')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keeps vendor-specific hacks",
            "suites": [],
            "updatePoint": {
                "line": 344,
                "column": 31
            },
            "line": 344,
            "code": "it('keeps vendor-specific hacks', () => {\n  check('vendor-hack')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keeps values with vendor hacks",
            "suites": [],
            "updatePoint": {
                "line": 347,
                "column": 34
            },
            "line": 347,
            "code": "it('keeps values with vendor hacks', () => {\n  check('value-hack')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with comments",
            "suites": [],
            "updatePoint": {
                "line": 350,
                "column": 23
            },
            "line": 350,
            "code": "it('works with comments', () => {\n  check('comments')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses visual cascade",
            "suites": [],
            "updatePoint": {
                "line": 353,
                "column": 23
            },
            "line": 353,
            "code": "it('uses visual cascade', () => {\n  check('cascade')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with properties near",
            "suites": [],
            "updatePoint": {
                "line": 356,
                "column": 30
            },
            "line": 356,
            "code": "it('works with properties near', () => {\n  check('double')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks prefixed in hacks",
            "suites": [],
            "updatePoint": {
                "line": 359,
                "column": 28
            },
            "line": 359,
            "code": "it('checks prefixed in hacks', () => {\n  check('check-down')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "normalize cascade after remove",
            "suites": [],
            "updatePoint": {
                "line": 362,
                "column": 34
            },
            "line": 362,
            "code": "it('normalize cascade after remove', () => {\n  check('uncascade')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefix decls in @supports",
            "suites": [],
            "updatePoint": {
                "line": 365,
                "column": 29
            },
            "line": 365,
            "code": "it('prefix decls in @supports', () => {\n  check('supports')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "saves declaration style",
            "suites": [],
            "updatePoint": {
                "line": 368,
                "column": 27
            },
            "line": 368,
            "code": "it('saves declaration style', () => {\n  check('style')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses ignore next control comments",
            "suites": [],
            "updatePoint": {
                "line": 371,
                "column": 37
            },
            "line": 371,
            "code": "it('uses ignore next control comments', () => {\n  check('ignore-next')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses block control comments",
            "suites": [],
            "updatePoint": {
                "line": 374,
                "column": 31
            },
            "line": 374,
            "code": "it('uses block control comments', () => {\n  check('disabled')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has actual example in docs",
            "suites": [],
            "updatePoint": {
                "line": 377,
                "column": 30
            },
            "line": 377,
            "code": "it('has actual example in docs', () => {\n  check('example')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "process grouping rules correctly",
            "suites": [],
            "updatePoint": {
                "line": 380,
                "column": 36
            },
            "line": 380,
            "code": "it('process grouping rules correctly', () => {\n  check('grouping-rule')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "transition on vendor specific rule",
            "suites": [],
            "updatePoint": {
                "line": 383,
                "column": 38
            },
            "line": 383,
            "code": "it('transition on vendor specific rule', () => {\n  check('transition-spec')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignore prefix in vendor at rules",
            "suites": [],
            "updatePoint": {
                "line": 386,
                "column": 36
            },
            "line": 386,
            "code": "it('ignore prefix in vendor at rules', () => {\n  check('at-rules')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignore content property",
            "suites": [],
            "updatePoint": {
                "line": 389,
                "column": 27
            },
            "line": 389,
            "code": "it('ignore content property', () => {\n  let input = read('content')\n  let result = postcss([prefixer('scope')]).process(input)\n  expect(result.css).toEqual(input)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses control comments to whole scope",
            "suites": [],
            "updatePoint": {
                "line": 395,
                "column": 40
            },
            "line": 395,
            "code": "it('uses control comments to whole scope', () => {\n  let input = read('scope')\n  let output = read('scope.out')\n  let result = postcss([prefixer('scope')]).process(input)\n\n  expect(result.css).toEqual(output)\n  expect(result.warnings().map(i => i.toString())).toEqual([\n    'autoprefixer: <css input>:5:3: Second Autoprefixer control comment ' +\n      'was ignored. Autoprefixer applies control comment to whole block, ' +\n      'not to next rules.'\n  ])\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets grid option via comment",
            "suites": [],
            "updatePoint": {
                "line": 408,
                "column": 32
            },
            "line": 408,
            "code": "it('sets grid option via comment', () => {\n  let input = read('grid-status')\n  let output = read('grid-status.out')\n  let ap = autoprefixer({ overrideBrowserslist: ['last 2 versions', 'IE 11'] })\n  let result = postcss([ap]).process(input)\n\n  expect(result.css).toEqual(output)\n  expect(result.warnings().map(i => i.toString())).toEqual([\n    'autoprefixer: <css input>:2:1: Second Autoprefixer grid control ' +\n      'comment was ignored. Autoprefixer applies control comments ' +\n      'to the whole block, not to the next rules.',\n    'autoprefixer: <css input>:20:3: Second Autoprefixer grid control ' +\n      'comment was ignored. Autoprefixer applies control comments ' +\n      'to the whole block, not to the next rules.',\n    'autoprefixer: <css input>:47:3: Second Autoprefixer grid control ' +\n      'comment was ignored. Autoprefixer applies control comments ' +\n      'to the whole block, not to the next rules.'\n  ])\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prefixes transition",
            "suites": [],
            "updatePoint": {
                "line": 428,
                "column": 23
            },
            "line": 428,
            "code": "it('prefixes transition', () => {\n  let input = read('transition')\n  let output = read('transition.out')\n  let result = postcss([prefixer('transition')]).process(input)\n\n  expect(result.css).toEqual(output)\n  expect(result.warnings().map(i => i.toString())).toEqual([\n    'autoprefixer: <css input>:23:3: Replace transition-property ' +\n      'to transition, because Autoprefixer could not support any cases ' +\n      'of transition-property and other transition-*'\n  ])\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not raise unnecessary warnings when prefixing transition",
            "suites": [],
            "updatePoint": {
                "line": 441,
                "column": 65
            },
            "line": 441,
            "code": "it('does not raise unnecessary warnings when prefixing transition', () => {\n  check('transition-no-warning')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with broken transition",
            "suites": [],
            "updatePoint": {
                "line": 445,
                "column": 32
            },
            "line": 445,
            "code": "it('works with broken transition', () => {\n  let input = 'a{transition:,,}'\n  let output = 'a{-webkit-transition:;-o-transition:;transition:}'\n  let result = postcss([prefixer('transition')]).process(input)\n  expect(result.css).toEqual(output)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should ignore spaces inside values",
            "suites": [],
            "updatePoint": {
                "line": 452,
                "column": 38
            },
            "line": 452,
            "code": "it('should ignore spaces inside values', () => {\n  let css = read('trim')\n  expect(postcss([flexboxer]).process(css).css).toEqual(css)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes unnecessary prefixes",
            "suites": [],
            "updatePoint": {
                "line": 457,
                "column": 32
            },
            "line": 457,
            "code": "it('removes unnecessary prefixes', () => {\n  let processor = postcss([cleaner])\n  for (let type of COMMONS) {\n    if (type === 'gradient-fix') continue\n    if (type === 'cascade') continue\n    if (type === 'mistakes') continue\n    if (type === 'flex-rewrite') continue\n    if (type === 'grid') continue\n    if (type === 'grid-gap') continue\n    if (type === 'grid-area') continue\n    if (type === 'grid-template') continue\n    if (type === 'grid-template-areas') continue\n    let input = read(type + '.out')\n    let output = read(type)\n    expect(processor.process(input).css).toEqual(output)\n  }\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "media does not should nested",
            "suites": [],
            "updatePoint": {
                "line": 475,
                "column": 32
            },
            "line": 475,
            "code": "it('media does not should nested', () => {\n  let processor = postcss([grider])\n  let input = read('grid-media-rules')\n  let output = read('grid-media-rules.out')\n  expect(processor.process(input).css).toEqual(output)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not remove unnecessary prefixes on request",
            "suites": [],
            "updatePoint": {
                "line": 482,
                "column": 51
            },
            "line": 482,
            "code": "it('does not remove unnecessary prefixes on request', () => {\n  for (let type of ['transition', 'values', 'fullscreen']) {\n    let keeper = autoprefixer({ overrideBrowserslist: [], remove: false })\n    let css = read(type + '.out')\n    expect(postcss([keeper]).process(css).css).toEqual(css)\n  }\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not add prefixes on request",
            "suites": [],
            "updatePoint": {
                "line": 490,
                "column": 36
            },
            "line": 490,
            "code": "it('does not add prefixes on request', () => {\n  for (let type of ['transition', 'values', 'fullscreen']) {\n    let remover = autoprefixer({\n      overrideBrowserslist: ['Opera 12'],\n      add: false\n    })\n    let unprefixed = read(type)\n    expect(postcss([remover]).process(unprefixed).css).toEqual(unprefixed)\n  }\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prevents doubling prefixes",
            "suites": [],
            "updatePoint": {
                "line": 501,
                "column": 30
            },
            "line": 501,
            "code": "it('prevents doubling prefixes', () => {\n  for (let type of COMMONS) {\n    let processor = postcss([prefixer(type)])\n    let input = read(type)\n    let output = read(type + '.out')\n    let result = processor.process(processor.process(input)).css\n    expect(universalizer(result)).toEqual(universalizer(output))\n  }\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does not broke AST",
            "suites": [],
            "updatePoint": {
                "line": 515,
                "column": 22
            },
            "line": 515,
            "code": "it('does not broke AST', () => {\n  function checkParent(node: Container): void {\n    node.walk(child => {\n      expect(child.parent).toBeDefined()\n      if (isContainerNode(child)) checkParent(child)\n    })\n  }\n  for (let type of COMMONS) {\n    let processor = postcss([prefixer(type)])\n    let input = read(type)\n    checkParent(processor.process(input).root)\n  }\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses difficult files",
            "suites": [],
            "updatePoint": {
                "line": 529,
                "column": 26
            },
            "line": 529,
            "code": "it('parses difficult files', () => {\n  let input = read('syntax')\n  let result = postcss([cleaner]).process(input)\n  expect(result.css).toEqual(input)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "marks parsing errors",
            "suites": [],
            "updatePoint": {
                "line": 535,
                "column": 24
            },
            "line": 535,
            "code": "it('marks parsing errors', () => {\n  expect(() => {\n    postcss([cleaner]).process('a {').css\n  }).toThrow('<css input>:1:1: Unclosed block')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows file name in parse error",
            "suites": [],
            "updatePoint": {
                "line": 541,
                "column": 34
            },
            "line": 541,
            "code": "it('shows file name in parse error', () => {\n  expect(() => {\n    postcss([cleaner]).process('a {', { from: 'a.css' }).css\n  }).toThrow(/a.css:1:1: /)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses browserslist config",
            "suites": [],
            "updatePoint": {
                "line": 547,
                "column": 28
            },
            "line": 547,
            "code": "it('uses browserslist config', () => {\n  let from = path.join(__dirname, 'cases/config/test.css')\n  let input = read('config/test')\n  let output = read('config/test.out')\n  let processor = postcss([autoprefixer])\n  expect(processor.process(input, { from }).css).toEqual(output)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sets browserslist environment",
            "suites": [],
            "updatePoint": {
                "line": 555,
                "column": 33
            },
            "line": 555,
            "code": "it('sets browserslist environment', () => {\n  let from = path.join(__dirname, 'cases/config/test.css')\n  let input = read('config/test')\n  let output = read('config/test.production')\n  let processor = postcss([autoprefixer({ env: 'production' })])\n  expect(processor.process(input, { from }).css).toEqual(output)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "takes values from other PostCSS plugins",
            "suites": [],
            "updatePoint": {
                "line": 563,
                "column": 43
            },
            "line": 563,
            "code": "it('takes values from other PostCSS plugins', () => {\n  function plugin(root: Container): void {\n    root.walkDecls(i => {\n      i.value = 'calc(0)'\n    })\n  }\n  let result = postcss([plugin, compiler]).process('a{width:0/**/0}')\n  expect(result.css).toBe('a{width:-webkit-calc(0);width:calc(0)}')\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has option to disable @supports support",
            "suites": [],
            "updatePoint": {
                "line": 573,
                "column": 43
            },
            "line": 573,
            "code": "it('has option to disable @supports support', () => {\n  let css = '@supports (cursor: grab) {}'\n  let instance = autoprefixer({\n    overrideBrowserslist: ['Chrome 28'],\n    supports: false\n  })\n  let result = postcss([instance]).process(css)\n  expect(result.css).toEqual(css)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has disabled grid options by default",
            "suites": [],
            "updatePoint": {
                "line": 583,
                "column": 40
            },
            "line": 583,
            "code": "it('has disabled grid options by default', () => {\n  let ap = autoprefixer({ overrideBrowserslist: ['Edge 12', 'IE 10'] })\n  let input = read('grid')\n  let output = read('grid.disabled')\n  let result = postcss([ap]).process(input)\n  expect(result.css).toEqual(output)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has different outputs for different grid options",
            "suites": [],
            "updatePoint": {
                "line": 591,
                "column": 52
            },
            "line": 591,
            "code": "it('has different outputs for different grid options', () => {\n  function ap(gridValue: autoprefixer.Options['grid']): Plugin {\n    return autoprefixer({\n      overrideBrowserslist: ['Edge 12', 'IE 10'],\n      grid: gridValue\n    })\n  }\n  let input = read('grid-options')\n  let outputAutoplace = read('grid-options.autoplace.out')\n  let outputNoAutoplace = read('grid-options.no-autoplace.out')\n  let outputDisabled = read('grid-options.disabled.out')\n\n  let resultAutoplace = postcss([ap('autoplace')]).process(input).css\n  let resultNoAutoplace = postcss([ap('no-autoplace')]).process(input).css\n  let resultEnabled = postcss([ap(true)]).process(input).css\n  let resultDisabled = postcss([ap(false)]).process(input).css\n\n  // output for grid: 'autoplace'\n  expect(resultAutoplace).toEqual(outputAutoplace)\n  // output for grid: 'no-autoplace'\n  expect(resultNoAutoplace).toEqual(outputNoAutoplace)\n  // output for grid: true is the same as for 'no-autoplace'\n  expect(resultEnabled).toEqual(outputNoAutoplace)\n  // output for grid: false\n  expect(resultDisabled).toEqual(outputDisabled)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has different outputs for different grid environment variables",
            "suites": [],
            "updatePoint": {
                "line": 618,
                "column": 66
            },
            "line": 618,
            "code": "it('has different outputs for different grid environment variables', () => {\n  function ap(gridValue: autoprefixer.GridValue): Plugin {\n    process.env.AUTOPREFIXER_GRID = gridValue\n    return autoprefixer({ overrideBrowserslist: ['Edge 12', 'IE 10'] })\n  }\n  let input = read('grid-options')\n  let outputAutoplace = read('grid-options.autoplace.out')\n  let outputNoAutoplace = read('grid-options.no-autoplace.out')\n\n  let resultAutoplace = postcss([ap('autoplace')]).process(input).css\n  expect(resultAutoplace).toEqual(outputAutoplace)\n\n  let resultNoAutoplace = postcss([ap('no-autoplace')]).process(input).css\n  expect(resultNoAutoplace).toEqual(outputNoAutoplace)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has option to disable flexbox support",
            "suites": [],
            "updatePoint": {
                "line": 634,
                "column": 41
            },
            "line": 634,
            "code": "it('has option to disable flexbox support', () => {\n  let css = read('flexbox')\n  let instance = autoprefixer({\n    overrideBrowserslist: ['IE 10'],\n    flexbox: false\n  })\n  let result = postcss([instance]).process(css)\n  expect(result.css).toEqual(css)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has option to disable 2009 flexbox support",
            "suites": [],
            "updatePoint": {
                "line": 644,
                "column": 46
            },
            "line": 644,
            "code": "it('has option to disable 2009 flexbox support', () => {\n  let ap = autoprefixer({\n    overrideBrowserslist: ['Chrome > 19'],\n    flexbox: 'no-2009'\n  })\n  let css = 'a{flex:1;transition:flex}'\n  let result = postcss([ap]).process(css)\n  expect(result.css).toEqual(\n    'a{' +\n      '-webkit-flex:1;flex:1;' +\n      '-webkit-transition:-webkit-flex;transition:-webkit-flex;' +\n      'transition:flex;transition:flex, -webkit-flex' +\n      '}'\n  )\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns inspect string",
            "suites": [],
            "updatePoint": {
                "line": 660,
                "column": 26
            },
            "line": 660,
            "code": "it('returns inspect string', () => {\n  expect(autoprefixer({ overrideBrowserslist: ['chrome 25'] }).info()).toMatch(\n    /Browsers:\\s+Chrome: 25/\n  )\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses browserslist config in inspect",
            "suites": [],
            "updatePoint": {
                "line": 666,
                "column": 39
            },
            "line": 666,
            "code": "it('uses browserslist config in inspect', () => {\n  let from = path.join(__dirname, 'cases/config')\n  expect(autoprefixer().info({ from })).toMatch(/Browsers:\\s+IE: 10/)\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores unknown versions on request",
            "suites": [],
            "updatePoint": {
                "line": 671,
                "column": 39
            },
            "line": 671,
            "code": "it('ignores unknown versions on request', () => {\n  expect(() => {\n    autoprefixer({ overrideBrowserslist: ['ie 100'] }).info()\n  }).toThrow(/Unknown version 100 of ie/)\n  expect(() => {\n    autoprefixer({\n      overrideBrowserslist: ['ie 100'],\n      ignoreUnknownVersions: true\n    }).info()\n  }).not.toThrow()\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with CSS Modules",
            "suites": [],
            "updatePoint": {
                "line": 683,
                "column": 26
            },
            "line": 683,
            "code": "it('works with CSS Modules', () => {\n  postcss([autoprefixer()]).process(':export { selectors: _1q6ho_2 }').css\n})",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores prefix IE filter",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 688,
                "column": 30
            },
            "line": 688,
            "code": "  it('ignores prefix IE filter', () => {\n    check('filter')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports webkit filters",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 691,
                "column": 29
            },
            "line": 691,
            "code": "  it('supports webkit filters', () => {\n    check('advanced-filter')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes border image syntax",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 694,
                "column": 33
            },
            "line": 694,
            "code": "  it('changes border image syntax', () => {\n    check('border-image')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports old Mozilla prefixes",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 697,
                "column": 35
            },
            "line": 697,
            "code": "  it('supports old Mozilla prefixes', () => {\n    check('border-radius')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports all flexbox syntaxes",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 700,
                "column": 35
            },
            "line": 700,
            "code": "  it('supports all flexbox syntaxes', () => {\n    check('flexbox')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports map flexbox props",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 703,
                "column": 32
            },
            "line": 703,
            "code": "  it('supports map flexbox props', () => {\n    check('flex-rewrite')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports all fullscreens",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 706,
                "column": 30
            },
            "line": 706,
            "code": "  it('supports all fullscreens', () => {\n    check('fullscreen')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports file-selector-button",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 709,
                "column": 35
            },
            "line": 709,
            "code": "  it('supports file-selector-button', () => {\n    check('file-selector-button')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports custom prefixes",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 712,
                "column": 30
            },
            "line": 712,
            "code": "  it('supports custom prefixes', () => {\n    check('custom-prefix')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fixes break properties",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 715,
                "column": 28
            },
            "line": 715,
            "code": "  it('fixes break properties', () => {\n    check('multicolumn')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores some 3D transforms",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 718,
                "column": 32
            },
            "line": 718,
            "code": "  it('ignores some 3D transforms', () => {\n    check('3d-transform')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports background-size",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 721,
                "column": 30
            },
            "line": 721,
            "code": "  it('supports background-size', () => {\n    check('background-size')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports background-clip",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 724,
                "column": 30
            },
            "line": 724,
            "code": "  it('supports background-clip', () => {\n    check('background-clip')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports logical properties",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 727,
                "column": 33
            },
            "line": 727,
            "code": "  it('supports logical properties', () => {\n    check('logical')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports appearance",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 730,
                "column": 25
            },
            "line": 730,
            "code": "  it('supports appearance', () => {\n    check('appearance')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports all placeholders",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 733,
                "column": 31
            },
            "line": 733,
            "code": "  it('supports all placeholders', () => {\n    check('placeholder')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports placeholder-shown",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 736,
                "column": 32
            },
            "line": 736,
            "code": "  it('supports placeholder-shown', () => {\n    check('placeholder-shown')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports image-rendering",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 739,
                "column": 30
            },
            "line": 739,
            "code": "  it('supports image-rendering', () => {\n    check('image-rendering')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports border-box mask",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 742,
                "column": 30
            },
            "line": 742,
            "code": "  it('supports border-box mask', () => {\n    check('mask-border')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports mask-composite",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 745,
                "column": 29
            },
            "line": 745,
            "code": "  it('supports mask-composite', () => {\n    check('mask-composite')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports image-set()",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 748,
                "column": 26
            },
            "line": 748,
            "code": "  it('supports image-set()', () => {\n    check('image-set')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports writing-mode",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 751,
                "column": 27
            },
            "line": 751,
            "code": "  it('supports writing-mode', () => {\n    check('writing-mode')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports cross-fade()",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 754,
                "column": 27
            },
            "line": 754,
            "code": "  it('supports cross-fade()', () => {\n    check('cross-fade')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores modern direction",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 757,
                "column": 30
            },
            "line": 757,
            "code": "  it('ignores modern direction', () => {\n    check('animation')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports overscroll-behavior",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 760,
                "column": 34
            },
            "line": 760,
            "code": "  it('supports overscroll-behavior', () => {\n    check('overscroll-behavior')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports color-adjust",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 763,
                "column": 27
            },
            "line": 763,
            "code": "  it('supports color-adjust', () => {\n    check('color-adjust')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports backdrop-filter",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 766,
                "column": 30
            },
            "line": 766,
            "code": "  it('supports backdrop-filter', () => {\n    check('backdrop-filter')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports user-select hack for IE",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 769,
                "column": 38
            },
            "line": 769,
            "code": "  it('supports user-select hack for IE', () => {\n    check('user-select')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports appearance for IE",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 773,
                "column": 32
            },
            "line": 773,
            "code": "  it('supports appearance for IE', () => {\n    let instance = autoprefixer({ overrideBrowserslist: 'Edge 15' })\n    let result = postcss([instance]).process('a { appearance: none }')\n    expect(result.css).toBe('a { -webkit-appearance: none; appearance: none }')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes angle in gradient",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 779,
                "column": 31
            },
            "line": 779,
            "code": "  it('changes angle in gradient', () => {\n    let input = read('gradient')\n    let output = read('gradient.out')\n    let result = postcss([prefixer('gradient')]).process(input)\n\n    expect(result.css).toEqual(output)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:18:3: Gradient has outdated direction ' +\n        'syntax. New syntax is like `closest-side at 0 0` instead of ' +\n        '`0 0, closest-side`.',\n      'autoprefixer: <css input>:38:3: Gradient has outdated direction ' +\n        'syntax. New syntax is like `to left` instead of `right`.',\n      'autoprefixer: <css input>:100:3: Gradient has outdated ' +\n        'direction syntax. Replace `cover` to `farthest-corner`.',\n      'autoprefixer: <css input>:104:3: Gradient has outdated ' +\n        'direction syntax. Replace `contain` to `closest-side`.'\n    ])\n\n    check('gradient-fix')\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns on old flexbox display",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 800,
                "column": 34
            },
            "line": 800,
            "code": "  it('warns on old flexbox display', () => {\n    let result = postcss([flexboxer]).process('a{ display: box; }')\n    expect(result.css).toBe('a{ display: box; }')\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:1:4: You should write display: flex ' +\n        'by final spec instead of display: box'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns on mixed support usage",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 809,
                "column": 34
            },
            "line": 809,
            "code": "  it('warns on mixed support usage', () => {\n    let css = 'a { display: flex; align-content: start; justify-content: end; }'\n    let result = postcss([\n      autoprefixer({\n        overrideBrowserslist: ['IE 11']\n      })\n    ]).process(css)\n    expect(result.css).toEqual(css)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:1:20: start value has mixed support, ' +\n        'consider using flex-start instead',\n      'autoprefixer: <css input>:1:42: end value has mixed support, ' +\n        'consider using flex-end instead'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports intrinsic sizing",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 825,
                "column": 31
            },
            "line": 825,
            "code": "  it('supports intrinsic sizing', () => {\n    let input = read('intrinsic')\n    let output = read('intrinsic.out')\n    let result = postcss([prefixer('intrinsic')]).process(input)\n\n    expect(result.css).toEqual(output)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:15:3: Replace fill to stretch, ' +\n        'because spec had been changed',\n      'autoprefixer: <css input>:19:3: Replace fill-available ' +\n        'to stretch, because spec had been changed'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports text-emphasis",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 839,
                "column": 28
            },
            "line": 839,
            "code": "  it('supports text-emphasis', () => {\n    let input = read('text-emphasis-position')\n    let output = read('text-emphasis-position.out')\n    let instance = prefixer('text-emphasis-position')\n    let result = postcss([instance]).process(input)\n\n    expect(result.css).toEqual(output)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:14:3: You should use 2 values ' +\n        'for text-emphasis-position For example, `under left` ' +\n        'instead of just `under`.'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports grid layout",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 853,
                "column": 26
            },
            "line": 853,
            "code": "  it('supports grid layout', () => {\n    let input = read('grid')\n    let output = read('grid.out')\n    let instance = prefixer('grid')\n    let result = postcss([instance]).process(input)\n\n    expect(result.css).toEqual(output)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:3:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:12:3: Autoplacement does not work ' +\n        'without grid-template-columns property',\n      'autoprefixer: <css input>:36:3: Can not prefix grid-column-end ' +\n        '(grid-column-start is not found)',\n      'autoprefixer: <css input>:37:3: IE does not support subgrid',\n      'autoprefixer: <css input>:39:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:39:3: Can not find grid areas: ' +\n        'head, nav, main, foot',\n      'autoprefixer: <css input>:57:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:57:3: Can not find grid areas: a',\n      'autoprefixer: <css input>:65:3: Can not implement grid-gap ' +\n        'without grid-template-columns',\n      'autoprefixer: <css input>:65:3: Can not find grid areas: b',\n      'autoprefixer: <css input>:73:3: Can not find grid areas: c',\n      'autoprefixer: <css input>:81:3: Can not find grid areas: d',\n      'autoprefixer: <css input>:116:3: grid-column-span is not part ' +\n        'of final Grid Layout. Use grid-column.',\n      'autoprefixer: <css input>:117:3: grid-row-span is not part ' +\n        'of final Grid Layout. Use grid-row.',\n      'autoprefixer: <css input>:118:3: grid-auto-columns is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:119:3: grid-auto-rows is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:121:33: auto-fill value is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:122:30: auto-fit value is not ' +\n        'supported by IE',\n      'autoprefixer: <css input>:138:3: Please do not use ' +\n        'display: contents; if you have grid setting enabled',\n      'autoprefixer: <css input>:142:3: IE does not support align-items ' +\n        'on grid containers. Try using align-self on child elements instead: ' +\n        '.warn_ie_align > * { align-self: center }',\n      'autoprefixer: <css input>:147:3: IE does not support justify-items ' +\n        'on grid containers. Try using justify-self on child elements ' +\n        'instead: .warn_ie_justify > * { justify-self: center }',\n      'autoprefixer: <css input>:152:3: IE does not support justify-content ' +\n        'on grid containers',\n      'autoprefixer: <css input>:157:3: IE does not support place-items ' +\n        'on grid containers. Try using place-self on child elements ' +\n        'instead: .warn_place_items > * { place-self: start end }',\n      'autoprefixer: <css input>:181:3: grid-auto-flow is not supported by IE',\n      'autoprefixer: <css input>:203:26: Autoprefixer currently does not ' +\n        'support line names. Try using grid-template-areas instead.'\n    ])\n\n    let input2 = read('grid-template')\n    let output2 = read('grid-template.out')\n    let instance2 = prefixer('grid-template')\n    let result2 = postcss([instance2]).process(input2)\n    expect(result2.css).toEqual(output2)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports grid autoplacement",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 917,
                "column": 33
            },
            "line": 917,
            "code": "  it('supports grid autoplacement', () => {\n    let input = read('grid-autoplacement')\n    let output = read('grid-autoplacement.out')\n    let instance = prefixer('grid')\n    let result = postcss([instance]).process(input)\n    expect(result.css).toEqual(output)\n\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:47:3: grid-auto-flow: dense ' +\n        'is not supported by IE',\n      'autoprefixer: <css input>:48:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:53:3: grid-auto-flow works only if grid-temp' +\n        'late-rows and grid-template-columns are present in the same rule',\n      'autoprefixer: <css input>:60:3: grid-gap only works if grid-temp' +\n        'late(-areas) is being used',\n      'autoprefixer: <css input>:64:3: Autoplacement does not work ' +\n        'without grid-template-rows property',\n      'autoprefixer: <css input>:65:3: grid-gap only works if grid-temp' +\n        'late(-areas) is being used or both rows and columns have been ' +\n        'declared and cells have not been ' +\n        'manually placed inside the explicit grid'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shows Grid warnings only for IE",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 942,
                "column": 37
            },
            "line": 942,
            "code": "  it('shows Grid warnings only for IE', () => {\n    let input = 'a { grid-template-rows: repeat(auto-fit, 1px) }'\n    let instance = autoprefixer({\n      overrideBrowserslist: 'chrome 27',\n      grid: true\n    })\n    let result = postcss([instance]).process(input)\n    expect(result.warnings()).toEqual([])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns if rule has both grid-area and grid-(row|column) decls",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 952,
                "column": 66
            },
            "line": 952,
            "code": "  it('warns if rule has both grid-area and grid-(row|column) decls', () => {\n    let input = read('grid-area')\n    let instance = prefixer('grid-area')\n    let result = postcss([instance]).process(input)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:28:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-row, not both',\n      'autoprefixer: <css input>:29:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-column, not both',\n      'autoprefixer: <css input>:34:3: You already have a grid-area ' +\n        'declaration present in the rule. You should use either ' +\n        'grid-area or grid-column, not both'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "warns if rule with grid-area has no parent with grid-template",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 969,
                "column": 67
            },
            "line": 969,
            "code": "  it('warns if rule with grid-area has no parent with grid-template', () => {\n    let input = read('grid-template-areas')\n    let instance = prefixer('grid-area')\n    let result = postcss([instance]).process(input)\n\n    expect(\n      result\n        .warnings()\n        .map(i => i.toString())\n        .filter(str => str.includes('grid-template'))\n    ).toEqual([\n      'autoprefixer: <css input>:144:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .uncle',\n      'autoprefixer: <css input>:149:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .uncle',\n      'autoprefixer: <css input>:154:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .uncle-second',\n      'autoprefixer: <css input>:159:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .uncle-second',\n      'autoprefixer: <css input>:164:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent .father.uncle',\n      'autoprefixer: <css input>:169:3: Autoprefixer cannot find ' +\n        'a grid-template containing the duplicate grid-area ' +\n        '\"child\" with full selector matching: .grand-parent.uncle .father'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should preserve @media rules with grid-area",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1001,
                "column": 49
            },
            "line": 1001,
            "code": "  it('should preserve @media rules with grid-area', () => {\n    let input = read('grid-area-media-sequence')\n    let output = read('grid-area-media-sequence.out')\n    let instance = prefixer('grid-area')\n    let result = postcss([instance]).process(input)\n    expect(result.css).toEqual(output)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should merge complex duplicate grid-area rules successfully",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1009,
                "column": 65
            },
            "line": 1009,
            "code": "  it('should merge complex duplicate grid-area rules successfully', () => {\n    let input = read('grid-areas-duplicate-complex')\n    let output = read('grid-areas-duplicate-complex.out')\n    let instance = prefixer('grid-area')\n    let result = postcss([instance]).process(input)\n    expect(result.css).toEqual(output)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores values for CSS3PIE props",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1017,
                "column": 38
            },
            "line": 1017,
            "code": "  it('ignores values for CSS3PIE props', () => {\n    let css = read('pie')\n    expect(postcss([compiler]).process(css).css).toEqual(css)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add prefix for backface-visibility for Safari 9",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1022,
                "column": 53
            },
            "line": 1022,
            "code": "  it('add prefix for backface-visibility for Safari 9', () => {\n    let input =\n      'a{ ' + 'backface-visibility: hidden; ' + 'transform-style: preserve-3d }'\n    let ap = autoprefixer({\n      overrideBrowserslist: ['Safari 9'],\n      flexbox: false\n    })\n    expect(postcss([ap]).process(input).css).toEqual(\n      'a{ ' +\n        '-webkit-backface-visibility: hidden; ' +\n        'backface-visibility: hidden; ' +\n        'transform-style: preserve-3d }'\n    )\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports text-decoration",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1037,
                "column": 30
            },
            "line": 1037,
            "code": "  it('supports text-decoration', () => {\n    let input = read('text-decoration')\n    let instance = prefixer('text-decoration')\n    let result = postcss([instance]).process(input)\n    expect(result.warnings().map(i => i.toString())).toEqual([\n      'autoprefixer: <css input>:26:3: Replace text-decoration-skip: ink ' +\n        'to text-decoration-skip-ink: auto, because spec had been changed'\n    ])\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports -webkit-line-clamp",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1047,
                "column": 33
            },
            "line": 1047,
            "code": "  it('supports -webkit-line-clamp', () => {\n    let input = read('webkit-line-clamp')\n    let result = postcss([cleaner]).process(input)\n    expect(result.css).toEqual(input)\n    expect(result.warnings()).toHaveLength(0)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "supports latest Firefox stretch",
            "suites": [
                "hacks"
            ],
            "updatePoint": {
                "line": 1054,
                "column": 37
            },
            "line": 1054,
            "code": "  it('supports latest Firefox stretch', () => {\n    let input = read('intrinsic')\n    let output = read('intrinsic.ff')\n    let result = postcss([\n      autoprefixer({ overrideBrowserslist: 'firefox 90' })\n    ]).process(input)\n    expect(result.css).toEqual(output)\n    expect(result.warnings()).toHaveLength(2)\n  })",
            "file": "autoprefixer.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses simple string",
            "suites": [
                ".parse()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "  it('parses simple string', () => {\n    expect(brackets.parse('test')).toEqual(['test'])\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses brackets",
            "suites": [
                ".parse()"
            ],
            "updatePoint": {
                "line": 8,
                "column": 21
            },
            "line": 8,
            "code": "  it('parses brackets', () => {\n    expect(brackets.parse('a (b) a')).toEqual(['a ', ['b'], ' a'])\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses many brackets",
            "suites": [
                ".parse()"
            ],
            "updatePoint": {
                "line": 12,
                "column": 26
            },
            "line": 12,
            "code": "  it('parses many brackets', () => {\n    expect(brackets.parse('a (b ()) a')).toEqual(['a ', ['b ', [''], ''], ' a'])\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses errors",
            "suites": [
                ".parse()"
            ],
            "updatePoint": {
                "line": 16,
                "column": 19
            },
            "line": 16,
            "code": "  it('parses errors', () => {\n    expect(brackets.parse('a (b (')).toEqual(['a ', ['b ', ['']]])\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stringifies simple string",
            "suites": [
                ".stringify()"
            ],
            "updatePoint": {
                "line": 22,
                "column": 31
            },
            "line": 22,
            "code": "  it('stringifies simple string', () => {\n    expect(brackets.stringify(['test'])).toBe('test')\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stringifies brackets",
            "suites": [
                ".stringify()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 26
            },
            "line": 26,
            "code": "  it('stringifies brackets', () => {\n    expect(brackets.stringify(['a ', ['b'], ' a'])).toBe('a (b) a')\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stringifies many brackets",
            "suites": [
                ".stringify()"
            ],
            "updatePoint": {
                "line": 30,
                "column": 31
            },
            "line": 30,
            "code": "  it('stringifies many brackets', () => {\n    expect(brackets.stringify(['a ', ['b ', [''], ''], ' a'])).toBe(\n      'a (b ()) a'\n    )\n  })",
            "file": "brackets.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns prefixes by default data",
            "suites": [
                ".prefixes()"
            ],
            "updatePoint": {
                "line": 7,
                "column": 38
            },
            "line": 7,
            "code": "  it('returns prefixes by default data', () => {\n    expect(Browsers.prefixes()).toEqual(['-webkit-', '-moz-', '-ms-', '-o-'])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds possible prefix",
            "suites": [
                ".withPrefix()"
            ],
            "updatePoint": {
                "line": 13,
                "column": 27
            },
            "line": 13,
            "code": "  it('finds possible prefix', () => {\n    expect(Browsers.withPrefix('1 -o-calc(1)')).toBe(true)\n    expect(Browsers.withPrefix('1 calc(1)')).toBe(false)\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows to select no browsers",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 20,
                "column": 34
            },
            "line": 20,
            "code": "  it('allows to select no browsers', () => {\n    let browsers = new Browsers(data, [])\n    expect(browsers.selected).toHaveLength(0)\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "selects by older version",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 25,
                "column": 30
            },
            "line": 25,
            "code": "  it('selects by older version', () => {\n    let browsers = new Browsers(data, ['ie < 7'])\n    expect(browsers.selected).toEqual(['ie 6', 'ie 5.5'])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "combines requirements",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 30,
                "column": 27
            },
            "line": 30,
            "code": "  it('combines requirements', () => {\n    let browsers = new Browsers(data, ['ie 10', 'ie < 6'])\n    expect(browsers.selected).toEqual(['ie 10', 'ie 5.5'])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has aliases",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 35,
                "column": 17
            },
            "line": 35,
            "code": "  it('has aliases', () => {\n    expect(new Browsers(data, ['fx 10']).selected).toEqual(['firefox 10'])\n    expect(new Browsers(data, ['ff 10']).selected).toEqual(['firefox 10'])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores case",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 18
            },
            "line": 40,
            "code": "  it('ignores case', () => {\n    expect(new Browsers(data, ['Firefox 10']).selected).toEqual(['firefox 10'])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses browserslist config",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 44,
                "column": 30
            },
            "line": 44,
            "code": "  it('uses browserslist config', () => {\n    let css = path.join(__dirname, 'cases/config/test.css')\n    expect(new Browsers(data, undefined, { from: css }).selected).toEqual([\n      'ie 10'\n    ])\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns browser prefix",
            "suites": [
                "prefix()"
            ],
            "updatePoint": {
                "line": 53,
                "column": 28
            },
            "line": 53,
            "code": "  it('returns browser prefix', () => {\n    let browsers = new Browsers(data, ['chrome 30'])\n    expect(browsers.prefix('chrome 30')).toBe('-webkit-')\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns right prefix for Operas",
            "suites": [
                "prefix()"
            ],
            "updatePoint": {
                "line": 58,
                "column": 37
            },
            "line": 58,
            "code": "  it('returns right prefix for Operas', () => {\n    let browsers = new Browsers(data, ['last 1 opera version'])\n    expect(browsers.prefix('opera 12')).toBe('-o-')\n    expect(browsers.prefix(browsers.selected[0])).toBe('-webkit-')\n    expect(browsers.prefix('op_mob 12')).toBe('-o-')\n    expect(browsers.prefix(browsers.selected[0])).toBe('-webkit-')\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "return true for selected browsers",
            "suites": [
                "isSelected()"
            ],
            "updatePoint": {
                "line": 68,
                "column": 39
            },
            "line": 68,
            "code": "  it('return true for selected browsers', () => {\n    let browsers = new Browsers(data, ['chrome 30', 'chrome 31'])\n    expect(browsers.isSelected('chrome 30')).toBe(true)\n    expect(browsers.isSelected('ie 6')).toBe(false)\n  })",
            "file": "browsers.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks values for other prefixes",
            "suites": [
                "otherPrefixes()"
            ],
            "updatePoint": {
                "line": 13,
                "column": 38
            },
            "line": 13,
            "code": "  it('checks values for other prefixes', () => {\n    expect(tabsize.otherPrefixes('black', '-moz-')).toBe(false)\n    expect(tabsize.otherPrefixes('-moz-black', '-moz-')).toBe(false)\n    expect(tabsize.otherPrefixes('-dev-black', '-moz-')).toBe(false)\n    expect(tabsize.otherPrefixes('-ms-black', '-moz-')).toBe(true)\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true by default",
            "suites": [
                "needCascade()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 29
            },
            "line": 26,
            "code": "  it('returns true by default', () => {\n    let css = parse('a {\\n  tab-size: 4 }')\n    expect(tabsize.needCascade(css.first.first)).toBe(true)\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "return false is disabled",
            "suites": [
                "needCascade()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 30
            },
            "line": 31,
            "code": "  it('return false is disabled', () => {\n    prefixes.options.cascade = false\n    let css = parse('a {\\n  tab-size: 4 }')\n    expect(tabsize.needCascade(css.first.first)).toBe(false)\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns false on declarations in one line",
            "suites": [
                "needCascade()"
            ],
            "updatePoint": {
                "line": 37,
                "column": 47
            },
            "line": 37,
            "code": "  it('returns false on declarations in one line', () => {\n    let css = parse('a { tab-size: 4 } a {\\n  tab-size: 4 }')\n    expect(tabsize.needCascade(css.first.first)).toBe(false)\n    expect(tabsize.needCascade(css.last.first)).toBe(true)\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns max prefix length",
            "suites": [
                "maxPrefixed()"
            ],
            "updatePoint": {
                "line": 45,
                "column": 31
            },
            "line": 45,
            "code": "  it('returns max prefix length', () => {\n    let decl = parse('a { tab-size: 4 }').first.first\n    let list = ['-webkit-', '-webkit- old', '-moz-']\n    expect(tabsize.maxPrefixed(list, decl)).toBe(8)\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns before with cascade",
            "suites": [
                "calcBefore()"
            ],
            "updatePoint": {
                "line": 53,
                "column": 33
            },
            "line": 53,
            "code": "  it('returns before with cascade', () => {\n    let decl = parse('a { tab-size: 4 }').first.first\n    let list = ['-webkit-', '-moz- old', '-moz-']\n    expect(tabsize.calcBefore(list, decl, '-moz- old')).toBe('    ')\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes cascade",
            "suites": [
                "restoreBefore()"
            ],
            "updatePoint": {
                "line": 61,
                "column": 21
            },
            "line": 61,
            "code": "  it('removes cascade', () => {\n    let css = parse('a {\\n' + '  -moz-tab-size: 4;\\n' + '       tab-size: 4 }')\n    let decl = css.first.nodes[1]\n    tabsize.restoreBefore(decl)\n    expect(decl.raws.before).toBe('\\n  ')\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns prefixed property",
            "suites": [
                "prefixed()"
            ],
            "updatePoint": {
                "line": 70,
                "column": 31
            },
            "line": 70,
            "code": "  it('returns prefixed property', () => {\n    let css = parse('a { tab-size: 2 }')\n    let decl = css.first.first\n    expect(tabsize.prefixed(decl.prop, '-moz-')).toBe('-moz-tab-size')\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns property name by specification",
            "suites": [
                "normalize()"
            ],
            "updatePoint": {
                "line": 78,
                "column": 44
            },
            "line": 78,
            "code": "  it('returns property name by specification', () => {\n    expect(tabsize.normalize('tab-size')).toBe('tab-size')\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefixes",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 84,
                "column": 19
            },
            "line": 84,
            "code": "  it('adds prefixes', () => {\n    let css = parse('a { -moz-tab-size: 2; tab-size: 2 }')\n    tabsize.process(css.first.nodes[1])\n    expect(css.toString()).toBe(\n      'a { -moz-tab-size: 2; -ms-tab-size: 2; tab-size: 2 }'\n    )\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks parents prefix",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 92,
                "column": 27
            },
            "line": 92,
            "code": "  it('checks parents prefix', () => {\n    let css = parse('::-moz-selection a { tab-size: 2 }')\n    tabsize.process(css.first.first)\n    expect(css.toString()).toBe(\n      '::-moz-selection a { -moz-tab-size: 2; tab-size: 2 }'\n    )\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks value for prefixes",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 100,
                "column": 31
            },
            "line": 100,
            "code": "  it('checks value for prefixes', () => {\n    let css = parse('a { tab-size: -ms-calc(2) }')\n    tabsize.process(css.first.first)\n    expect(css.toString()).toBe(\n      'a { -ms-tab-size: -ms-calc(2); tab-size: -ms-calc(2) }'\n    )\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns list of prefixeds",
            "suites": [
                "old()"
            ],
            "updatePoint": {
                "line": 110,
                "column": 31
            },
            "line": 110,
            "code": "  it('returns list of prefixeds', () => {\n    expect(tabsize.old('tab-size', '-moz-')).toEqual(['-moz-tab-size'])\n  })",
            "file": "declaration.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns selected browsers and prefixes",
            "suites": [],
            "updatePoint": {
                "line": 43,
                "column": 42
            },
            "line": 43,
            "code": "it('returns selected browsers and prefixes', () => {\n  let browsers = new Browsers(data.browsers, [\n    'chrome 30',\n    'firefox 21',\n    'firefox 20',\n    'ie 6'\n  ])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n\n  let coverage = browserslist.coverage([\n    'chrome 30',\n    'firefox 21',\n    'firefox 20',\n    'ie 6'\n  ])\n  let round = Math.round(coverage * 100) / 100.0\n\n  expect(info(prefixes)).toEqual(\n    'Browsers:\\n' +\n      '  Chrome: 30\\n' +\n      '  Firefox: 21, 20\\n' +\n      '  IE: 6\\n' +\n      '\\n' +\n      `These browsers account for ${round}% ` +\n      'of all users globally\\n' +\n      '\\n' +\n      'At-Rules:\\n' +\n      '  @keyframes: moz\\n' +\n      '\\n' +\n      'Selectors:\\n' +\n      '  d: moz\\n' +\n      '\\n' +\n      'Properties:\\n' +\n      '  a: webkit, moz\\n' +\n      '  grid-row *: ms\\n' +\n      '  transition: moz\\n' +\n      '\\n' +\n      'Values:\\n' +\n      '  b: moz, ms\\n' +\n      '  c: moz\\n' +\n      '  grid *: ms\\n' +\n      '\\n' +\n      '* - Prefixes will be added only on grid: true option.\\n'\n  )\n})",
            "file": "info.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "doesn't show transitions unless they are necessary",
            "suites": [],
            "updatePoint": {
                "line": 89,
                "column": 54
            },
            "line": 89,
            "code": "it(\"doesn't show transitions unless they are necessary\", () => {\n  let browsers = new Browsers(data.browsers, ['chrome 30', 'firefox 20'])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n\n  let coverage = browserslist.coverage(['chrome 30', 'firefox 20'])\n  let round = Math.round(coverage * 100) / 100.0\n\n  expect(info(prefixes)).toEqual(\n    'Browsers:\\n' +\n      '  Chrome: 30\\n' +\n      '  Firefox: 20\\n' +\n      '\\n' +\n      `These browsers account for ${round}% ` +\n      'of all users globally\\n' +\n      '\\n' +\n      'Properties:\\n' +\n      '  a: webkit, moz\\n' +\n      '\\n' +\n      'Values:\\n' +\n      '  b: moz\\n'\n  )\n})",
            "file": "info.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns string for empty prefixes",
            "suites": [],
            "updatePoint": {
                "line": 112,
                "column": 37
            },
            "line": 112,
            "code": "it('returns string for empty prefixes', () => {\n  let browsers = new Browsers(data.browsers, ['ie 7'])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n  expect(info(prefixes)).toMatch(/remove Autoprefixer/)\n})",
            "file": "info.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns string for empty browsers",
            "suites": [],
            "updatePoint": {
                "line": 118,
                "column": 37
            },
            "line": 118,
            "code": "it('returns string for empty browsers', () => {\n  let browsers = new Browsers(data.browsers, [])\n  let prefixes = new Prefixes(data.prefixes, browsers)\n  expect(info(prefixes)).toBe('No browsers selected')\n})",
            "file": "info.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns true on last rule",
            "suites": [
                "isHack()"
            ],
            "updatePoint": {
                "line": 9,
                "column": 31
            },
            "line": 9,
            "code": "  it('returns true on last rule', () => {\n    let css = parse('::selection {} ::-moz-selection {}')\n    expect(old.isHack(css.last)).toBe(true)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stops on another type",
            "suites": [
                "isHack()"
            ],
            "updatePoint": {
                "line": 14,
                "column": 27
            },
            "line": 14,
            "code": "  it('stops on another type', () => {\n    let css = parse(\n      '::-moz-selection {} ' + '@keyframes anim {} ::selection {}'\n    )\n    expect(old.isHack(css.first)).toBe(true)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stops on another selector",
            "suites": [
                "isHack()"
            ],
            "updatePoint": {
                "line": 21,
                "column": 31
            },
            "line": 21,
            "code": "  it('stops on another selector', () => {\n    let css = parse('::-moz-selection {} a {} ::selection {}')\n    expect(old.isHack(css.first)).toBe(true)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds unprefixed selector",
            "suites": [
                "isHack()"
            ],
            "updatePoint": {
                "line": 26,
                "column": 31
            },
            "line": 26,
            "code": "  it('finds unprefixed selector', () => {\n    let css = parse('::-moz-selection {} ' + '::-o-selection {} ::selection {}')\n    expect(old.isHack(css.first)).toBe(false)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds old selector",
            "suites": [
                "check()"
            ],
            "updatePoint": {
                "line": 33,
                "column": 24
            },
            "line": 33,
            "code": "  it('finds old selector', () => {\n    let css = parse('body::-moz-selection {} body::selection {}')\n    expect(old.check(css.first)).toBe(true)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds right",
            "suites": [
                "check()"
            ],
            "updatePoint": {
                "line": 38,
                "column": 17
            },
            "line": 38,
            "code": "  it('finds right', () => {\n    let css = parse('body:::-moz-selection {}')\n    expect(old.check(css.first)).toBe(false)\n  })",
            "file": "old-selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks value in string",
            "suites": [
                ".check()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 28
            },
            "line": 4,
            "code": "  it('checks value in string', () => {\n    let old = new OldValue('calc', '-o-calc')\n    expect(old.check('1px -o-calc(1px)')).toBe(true)\n    expect(old.check('1px calc(1px)')).toBe(false)\n  })",
            "file": "old-value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows custom checks",
            "suites": [
                ".check()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 26
            },
            "line": 10,
            "code": "  it('allows custom checks', () => {\n    let old = new OldValue('calc', '-o-calc', 'calc', /calc/)\n    expect(old.check('1px calc(1px)')).toBe(true)\n  })",
            "file": "old-value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with other PostCSS plugins",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 36
            },
            "line": 5,
            "code": "it('works with other PostCSS plugins', () => {\n  let plugin = () => {\n    return {\n      postcssPlugin: 'test',\n      Rule(rule) {\n        rule.selector = 'b'\n      },\n      AtRule: {\n        mixin: (atRule, { Declaration }) => {\n          atRule.replaceWith(\n            new Declaration({ prop: 'user-select', value: 'none' })\n          )\n        }\n      }\n    }\n  }\n  plugin.postcss = true\n\n  let result = postcss([\n    plugin(),\n    autoprefixer({ overrideBrowserslist: 'chrome 40' })\n  ]).process('a{ @mixin; }', {\n    from: 'a.css'\n  })\n\n  expect(result.css).toBe('b{ -webkit-user-select: none; user-select: none; }')\n})",
            "file": "postcss.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "registers hacks for subclasses",
            "suites": [
                ".hack()"
            ],
            "updatePoint": {
                "line": 16,
                "column": 36
            },
            "line": 16,
            "code": "  it('registers hacks for subclasses', () => {\n    class A extends Prefixer {}\n    class Hack extends A {}\n    Hack.names = ['a', 'b']\n\n    A.hack(Hack)\n\n    expect(A.hacks).toEqual({ a: Hack, b: Hack })\n    expect(Prefixer.hacks).toBeUndefined()\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads hacks",
            "suites": [
                ".load()"
            ],
            "updatePoint": {
                "line": 29,
                "column": 17
            },
            "line": 29,
            "code": "  it('loads hacks', () => {\n    class A extends Prefixer {\n      constructor() {\n        super()\n        this.klass = 'a'\n      }\n    }\n    class Hack extends A {\n      constructor() {\n        super()\n        this.klass = 'hack'\n      }\n    }\n    A.hacks = { hacked: Hack }\n\n    expect(A.load('hacked').klass).toBe('hack')\n    expect(A.load('a').klass).toBe('a')\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "cleans custom properties",
            "suites": [
                ".clone()"
            ],
            "updatePoint": {
                "line": 50,
                "column": 30
            },
            "line": 50,
            "code": "  it('cleans custom properties', () => {\n    let rule = css.first.first\n    rule._autoprefixerPrefix = '-ms-'\n    rule._autoprefixerValues = { '-ms-': 1 }\n\n    let cloned = Prefixer.clone(rule, { selector: 'from' })\n    expect(cloned.selector).toBe('from')\n\n    expect(cloned._autoprefixerPrefix).toBeUndefined()\n    expect(cloned._autoprefixerValues).toBeUndefined()\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fixed declaration between",
            "suites": [
                ".clone()"
            ],
            "updatePoint": {
                "line": 62,
                "column": 31
            },
            "line": 62,
            "code": "  it('fixed declaration between', () => {\n    let parsed = parse('a { color : black }')\n    let cloned = Prefixer.clone(parsed.first.first)\n    expect(cloned.raws.between).toBe(' : ')\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with root node",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 70,
                "column": 26
            },
            "line": 70,
            "code": "  it('works with root node', () => {\n    expect(prefix.parentPrefix(css)).toBe(false)\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds in at-rules",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 74,
                "column": 23
            },
            "line": 74,
            "code": "  it('finds in at-rules', () => {\n    expect(prefix.parentPrefix(css.first)).toBe('-ms-')\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds in selectors",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 78,
                "column": 24
            },
            "line": 78,
            "code": "  it('finds in selectors', () => {\n    expect(prefix.parentPrefix(css.nodes[1])).toBe('-moz-')\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds in parents",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 82,
                "column": 22
            },
            "line": 82,
            "code": "  it('finds in parents', () => {\n    let decl = css.first.first\n    expect(prefix.parentPrefix(decl)).toBe('-ms-')\n    expect(prefix.parentPrefix(css.nodes[2])).toBe(false)\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "caches prefix",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 88,
                "column": 19
            },
            "line": 88,
            "code": "  it('caches prefix', () => {\n    prefix.parentPrefix(css.first)\n    expect(css.first._autoprefixerPrefix).toBe('-ms-')\n\n    css.first._autoprefixerPrefix = false\n    expect(prefix.parentPrefix(css.first)).toBe(false)\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds only browsers prefixes",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 96,
                "column": 34
            },
            "line": 96,
            "code": "  it('finds only browsers prefixes', () => {\n    expect(prefix.parentPrefix(css.nodes[2])).toBe(false)\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with selector contained --",
            "suites": [
                "parentPrefix"
            ],
            "updatePoint": {
                "line": 100,
                "column": 38
            },
            "line": 100,
            "code": "  it('works with selector contained --', () => {\n    let parsed = parse(':--a { color: black }')\n    expect(prefix.parentPrefix(parsed.first.first)).toBe(false)\n  })",
            "file": "prefixer.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "selects necessary prefixes",
            "suites": [
                "select()"
            ],
            "updatePoint": {
                "line": 47,
                "column": 32
            },
            "line": 47,
            "code": "  it('selects necessary prefixes', () => {\n    expect(fill.select(data.prefixes)).toEqual({\n      add: {\n        a: ['-moz-'],\n        b: ['-ms- new'],\n        c: ['-ms-']\n      },\n      remove: {\n        a: ['-webkit-', '-ms-', '-moz- old'],\n        b: ['-ms-', '-moz-', '-webkit-'],\n        c: ['-moz-']\n      }\n    })\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "preprocesses prefixes add data",
            "suites": [
                "preprocess()"
            ],
            "updatePoint": {
                "line": 64,
                "column": 36
            },
            "line": 64,
            "code": "  it('preprocesses prefixes add data', () => {\n    expect(fill.add).toEqual({\n      'selectors': [cSel],\n      'a': aProp,\n      '*': {\n        values: [bVal]\n      },\n      '@supports': new Supports(Prefixes, fill)\n    })\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "preprocesses prefixes remove data",
            "suites": [
                "preprocess()"
            ],
            "updatePoint": {
                "line": 75,
                "column": 39
            },
            "line": 75,
            "code": "  it('preprocesses prefixes remove data', () => {\n    expect(JSON.stringify(fill.remove)).toEqual(\n      JSON.stringify({\n        'selectors': [cSel.old('-moz-')],\n        '-webkit-a': {\n          remove: true\n        },\n        '-ms-a': {\n          remove: true\n        },\n        '-moz- olda': {\n          remove: true\n        },\n        'a': {\n          values: [old('-ms-b'), old('-moz-b'), old('-webkit-b')]\n        },\n        '*': {\n          values: [old('-ms-b'), old('-moz-b'), old('-webkit-b')]\n        }\n      })\n    )\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns itself is no browsers are selected",
            "suites": [
                ".cleaner()"
            ],
            "updatePoint": {
                "line": 100,
                "column": 48
            },
            "line": 100,
            "code": "  it('returns itself is no browsers are selected', () => {\n    expect(empty.cleaner()).toEqual(empty)\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns Prefixes with empty browsers",
            "suites": [
                ".cleaner()"
            ],
            "updatePoint": {
                "line": 104,
                "column": 42
            },
            "line": 104,
            "code": "  it('returns Prefixes with empty browsers', () => {\n    let cleaner = new Prefixes(data.prefixes, new Browsers(data.browsers, []))\n    expect(Object.keys(fill.cleaner().add)).toHaveLength(2)\n    expect(fill.cleaner().remove).toEqual(cleaner.remove)\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads declarations by property",
            "suites": [
                ".decl()"
            ],
            "updatePoint": {
                "line": 112,
                "column": 36
            },
            "line": 112,
            "code": "  it('loads declarations by property', () => {\n    expect(empty.decl('a')).toEqual(new Declaration('a'))\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "caches values",
            "suites": [
                ".decl()"
            ],
            "updatePoint": {
                "line": 116,
                "column": 19
            },
            "line": 116,
            "code": "  it('caches values', () => {\n    expect(empty.decl('a')).toBe(empty.decl('a'))\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns unprefixed version",
            "suites": [
                ".unprefixed()"
            ],
            "updatePoint": {
                "line": 122,
                "column": 32
            },
            "line": 122,
            "code": "  it('returns unprefixed version', () => {\n    expect(empty.unprefixed('-moz-a')).toBe('a')\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefix",
            "suites": [
                ".prefixed()"
            ],
            "updatePoint": {
                "line": 128,
                "column": 17
            },
            "line": 128,
            "code": "  it('adds prefix', () => {\n    expect(empty.prefixed('a', '-ms-')).toBe('-ms-a')\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes prefix",
            "suites": [
                ".prefixed()"
            ],
            "updatePoint": {
                "line": 132,
                "column": 20
            },
            "line": 132,
            "code": "  it('changes prefix', () => {\n    expect(empty.prefixed('a', '-ms-')).toBe('-ms-a')\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns values for this and all properties",
            "suites": [
                "values()"
            ],
            "updatePoint": {
                "line": 138,
                "column": 48
            },
            "line": 138,
            "code": "  it('returns values for this and all properties', () => {\n    expect(fill.values('add', 'a')).toEqual([bVal])\n    expect(fill.values('remove', 'a')).toEqual([\n      old('-ms-b'),\n      old('-moz-b'),\n      old('-webkit-b')\n    ])\n  })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks prefix group",
            "suites": [
                "group()",
                "down()"
            ],
            "updatePoint": {
                "line": 150,
                "column": 27
            },
            "line": 150,
            "code": "    it('checks prefix group', () => {\n      let css = parse('a { -ms-a: 1; -o-a: 1; a: 1; b: 2 }')\n      let props = []\n\n      empty.group(css.first.first).down(i => props.push(i.prop))\n      expect(props).toEqual(['-o-a', 'a'])\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks prefix groups",
            "suites": [
                "group()",
                "down()"
            ],
            "updatePoint": {
                "line": 158,
                "column": 28
            },
            "line": 158,
            "code": "    it('checks prefix groups', () => {\n      let css = parse('a { -ms-a: 1; -o-a: 1; ' + 'a: -o-calc(1); a: 1; a: 2 }')\n      let props = []\n\n      empty.group(css.first.first).down(i => props.push(i.prop))\n      expect(props).toEqual(['-o-a', 'a', 'a'])\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns check decls inside group",
            "suites": [
                "group()",
                "down()"
            ],
            "updatePoint": {
                "line": 166,
                "column": 40
            },
            "line": 166,
            "code": "    it('returns check decls inside group', () => {\n      let css = parse('a { -moz-a: 1; -ms-a: 1; -o-a: 1; a: 1 }')\n      let decl = css.first.first\n\n      expect(empty.group(decl).down(i => i.prop === '-o-a')).toBe(true)\n      expect(empty.group(decl).down(i => i.prop === '-o-b')).toBe(false)\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks prefix group",
            "suites": [
                "group()",
                "up()"
            ],
            "updatePoint": {
                "line": 176,
                "column": 27
            },
            "line": 176,
            "code": "    it('checks prefix group', () => {\n      let css = parse('a { b: 2; -ms-a: 1; -o-a: 1; a: 1 }')\n      let props = []\n\n      empty.group(css.first.nodes[3]).up(i => props.push(i.prop))\n      expect(props).toEqual(['-o-a', '-ms-a'])\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks prefix groups",
            "suites": [
                "group()",
                "up()"
            ],
            "updatePoint": {
                "line": 184,
                "column": 28
            },
            "line": 184,
            "code": "    it('checks prefix groups', () => {\n      let css = parse(\n        'a { a: 2; -ms-a: 1; ' + '-o-a: 1; a: -o-calc(1); a: 1  }'\n      )\n      let props = []\n\n      empty.group(css.first.nodes[4]).up(i => props.push(i.prop))\n      expect(props).toEqual(['a', '-o-a', '-ms-a'])\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns check decls inside group",
            "suites": [
                "group()",
                "up()"
            ],
            "updatePoint": {
                "line": 194,
                "column": 40
            },
            "line": 194,
            "code": "    it('returns check decls inside group', () => {\n      let css = parse('a { -moz-a: 1; -ms-a: 1; -o-a: 1; a: 1 }')\n      let decl = css.first.nodes[3]\n\n      expect(empty.group(decl).up(i => i.prop === '-ms-a')).toBe(true)\n      expect(empty.group(decl).up(i => i.prop === '-ms-b')).toBe(false)\n    })",
            "file": "prefixes.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefix after non-letters symbols",
            "suites": [
                "prefixed()"
            ],
            "updatePoint": {
                "line": 11,
                "column": 43
            },
            "line": 11,
            "code": "  it('adds prefix after non-letters symbols', () => {\n    expect(selector.prefixed('-moz-')).toBe('::-moz-selection')\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates regexp for prefix",
            "suites": [
                "regexp()"
            ],
            "updatePoint": {
                "line": 17,
                "column": 31
            },
            "line": 17,
            "code": "  it('creates regexp for prefix', () => {\n    let regexp = selector.regexp('-moz-')\n    expect(regexp.test('::-moz-selection')).toBe(true)\n    expect(regexp.test('::selection')).toBe(false)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "creates regexp without prefix",
            "suites": [
                "regexp()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 35
            },
            "line": 23,
            "code": "  it('creates regexp without prefix', () => {\n    let regexp = selector.regexp()\n    expect(regexp.test('::-moz-selection')).toBe(false)\n    expect(regexp.test('::selection')).toBe(true)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks rule selectors",
            "suites": [
                "check()"
            ],
            "updatePoint": {
                "line": 31,
                "column": 27
            },
            "line": 31,
            "code": "  it('checks rule selectors', () => {\n    let css = parse(\n      'body .selection {}, ' + ':::selection {}, body ::selection {}'\n    )\n    expect(selector.check(css.nodes[0])).toBe(false)\n    expect(selector.check(css.nodes[1])).toBe(false)\n    expect(selector.check(css.nodes[2])).toBe(true)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "grouping rule gets correct _autoprefixerPrefixeds property",
            "suites": [
                "prefixeds()"
            ],
            "updatePoint": {
                "line": 42,
                "column": 64
            },
            "line": 42,
            "code": "  it('grouping rule gets correct _autoprefixerPrefixeds property', () => {\n    let css = parse('.c::selection, .d:read-only {}')\n    let rSel = new Selector(':read-only', ['-moz-'])\n    selector.prefixeds(css.first)\n    rSel.prefixeds(css.first)\n    expect(css.first._autoprefixerPrefixeds).toEqual({\n      '::selection': {\n        '-webkit-': '.c::-webkit-selection',\n        '-moz-': '.c::-moz-selection',\n        '-ms-': '.c::-ms-selection',\n        '-o-': '.c::-o-selection'\n      },\n      ':read-only': {\n        '-webkit-': '.d:-webkit-read-only',\n        '-moz-': '.d:-moz-read-only',\n        '-ms-': '.d:-ms-read-only',\n        '-o-': '.d:-o-read-only'\n      }\n    })\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns all available prefixed selectors",
            "suites": [
                "prefixeds()"
            ],
            "updatePoint": {
                "line": 63,
                "column": 46
            },
            "line": 63,
            "code": "  it('returns all available prefixed selectors', () => {\n    let css = parse('::selection {}')\n    expect(selector.prefixeds(css.first)).toEqual({\n      '::selection': {\n        '-webkit-': '::-webkit-selection',\n        '-moz-': '::-moz-selection',\n        '-ms-': '::-ms-selection',\n        '-o-': '::-o-selection'\n      }\n    })\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns false on first element",
            "suites": [
                "already()"
            ],
            "updatePoint": {
                "line": 83,
                "column": 36
            },
            "line": 83,
            "code": "  it('returns false on first element', () => {\n    let css = parse('::selection {}')\n    expect(selector.already(css.first, prefixeds, '-moz-')).toBe(false)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stops on another type",
            "suites": [
                "already()"
            ],
            "updatePoint": {
                "line": 88,
                "column": 27
            },
            "line": 88,
            "code": "  it('stops on another type', () => {\n    let css = parse(\n      '::-moz-selection {} ' + '@keyframes anim {} ::selection {}'\n    )\n    expect(selector.already(css.nodes[2], prefixeds, '-moz-')).toBe(false)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stops on another selector",
            "suites": [
                "already()"
            ],
            "updatePoint": {
                "line": 95,
                "column": 31
            },
            "line": 95,
            "code": "  it('stops on another selector', () => {\n    let css = parse('::-moz-selection {} a {} ::selection {}')\n    expect(selector.already(css.nodes[2], prefixeds, '-moz-')).toBe(false)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds prefixed even if unknown prefix is between",
            "suites": [
                "already()"
            ],
            "updatePoint": {
                "line": 100,
                "column": 54
            },
            "line": 100,
            "code": "  it('finds prefixed even if unknown prefix is between', () => {\n    let css = parse('::-moz-selection {} ' + '::-o-selection {} ::selection {}')\n    expect(selector.already(css.nodes[2], prefixeds, '-moz-')).toBe(true)\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefix to selectors",
            "suites": [
                "replace()"
            ],
            "updatePoint": {
                "line": 107,
                "column": 30
            },
            "line": 107,
            "code": "  it('adds prefix to selectors', () => {\n    expect(\n      selector.replace('body ::selection, input::selection, a', '-ms-')\n    ).toBe('body ::-ms-selection, input::-ms-selection, a')\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefixes",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 115,
                "column": 19
            },
            "line": 115,
            "code": "  it('adds prefixes', () => {\n    let css = parse('b ::-moz-selection{} b ::selection{}')\n    selector.process(css.nodes[1])\n    expect(css.toString()).toBe(\n      'b ::-moz-selection{} b ::-ms-selection{} b ::selection{}'\n    )\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks parents prefix",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 123,
                "column": 27
            },
            "line": 123,
            "code": "  it('checks parents prefix', () => {\n    let css = parse('@-moz-page{ ::selection{} }')\n    selector.process(css.first.first)\n    expect(css.toString()).toBe(\n      '@-moz-page{ ::-moz-selection{} ::selection{} }'\n    )\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns object to find old selector",
            "suites": [
                "old()"
            ],
            "updatePoint": {
                "line": 133,
                "column": 41
            },
            "line": 133,
            "code": "  it('returns object to find old selector', () => {\n    let old = selector.old('-moz-')\n    expect(old.unprefixed).toBe('::selection')\n    expect(old.prefix).toBe('-moz-')\n  })",
            "file": "selector.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "splits property name and value",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 36
            },
            "line": 40,
            "code": "  it('splits property name and value', () => {\n    expect(supports.parse('color:black')).toEqual(['color', 'black'])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "cleans spaces",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 44,
                "column": 19
            },
            "line": 44,
            "code": "  it('cleans spaces', () => {\n    expect(supports.parse(' color : black ')).toEqual(['color', 'black'])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parses everything",
            "suites": [
                "parse()"
            ],
            "updatePoint": {
                "line": 48,
                "column": 23
            },
            "line": 48,
            "code": "  it('parses everything', () => {\n    expect(supports.parse('color')).toEqual(['color', ''])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns virtual rule",
            "suites": [
                "virtual()"
            ],
            "updatePoint": {
                "line": 54,
                "column": 26
            },
            "line": 54,
            "code": "  it('returns virtual rule', () => {\n    let decl = supports.virtual('color: black')\n    expect(decl.type).toBe('rule')\n    expect(decl.toString()).toBe('a{color: black}')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "works with broken CSS",
            "suites": [
                "virtual()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 27
            },
            "line": 60,
            "code": "  it('works with broken CSS', () => {\n    let decl = supports.virtual('color black')\n    expect(decl.type).toBe('rule')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns decls with prefixed property",
            "suites": [
                "prefixed()"
            ],
            "updatePoint": {
                "line": 67,
                "column": 42
            },
            "line": 67,
            "code": "  it('returns decls with prefixed property', () => {\n    let decls = supports.prefixed('a: one')\n\n    expect(decls).toHaveLength(2)\n    expect(decls[0].toString()).toBe('-moz-a: one')\n    expect(decls[1].toString()).toBe('a: one')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "returns decls with prefixed value",
            "suites": [
                "prefixed()"
            ],
            "updatePoint": {
                "line": 75,
                "column": 39
            },
            "line": 75,
            "code": "  it('returns decls with prefixed value', () => {\n    let decls = supports.prefixed('c: b')\n\n    expect(decls).toHaveLength(2)\n    expect(decls[0].toString()).toBe('c: -moz-b')\n    expect(decls[1].toString()).toBe('c: b')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "reduces empty string",
            "suites": [
                "normalize()"
            ],
            "updatePoint": {
                "line": 85,
                "column": 26
            },
            "line": 85,
            "code": "  it('reduces empty string', () => {\n    expect(supports.normalize([['', ['a'], '']])).toEqual([[['a']]])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "reduces declaration to string",
            "suites": [
                "normalize()"
            ],
            "updatePoint": {
                "line": 89,
                "column": 35
            },
            "line": 89,
            "code": "  it('reduces declaration to string', () => {\n    expect(supports.normalize(['a: b', ['1']])).toEqual(['a: b(1)'])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "reduces wrapped declaration to string",
            "suites": [
                "normalize()"
            ],
            "updatePoint": {
                "line": 93,
                "column": 43
            },
            "line": 93,
            "code": "  it('reduces wrapped declaration to string', () => {\n    expect(supports.normalize(['', ['a: b', ['1']], ''])).toEqual([['a: b(1)']])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove prefixed properties",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 99,
                "column": 32
            },
            "line": 99,
            "code": "  it('remove prefixed properties', () => {\n    expect(rm('(-moz-a: 1) or (a: 1)')).toBe('(a: 1)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove prefixed properties inside",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 103,
                "column": 39
            },
            "line": 103,
            "code": "  it('remove prefixed properties inside', () => {\n    expect(rm('(((-moz-a: 1) or (a: 1)))')).toBe('(((a: 1)))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove prefixed values",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 107,
                "column": 28
            },
            "line": 107,
            "code": "  it('remove prefixed values', () => {\n    expect(rm('(c: -moz-b) or (c: -b-)')).toBe('(c: -b-)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keeps and-conditions",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 111,
                "column": 26
            },
            "line": 111,
            "code": "  it('keeps and-conditions', () => {\n    expect(rm('(-moz-a: 1) and (a: 1)')).toBe('(-moz-a: 1) and (a: 1)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keeps not-conditions",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 115,
                "column": 26
            },
            "line": 115,
            "code": "  it('keeps not-conditions', () => {\n    expect(rm('not (-moz-a: 1) or (a: 1)')).toBe('not (-moz-a: 1) or (a: 1)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keeps hacks",
            "suites": [
                "remove()"
            ],
            "updatePoint": {
                "line": 119,
                "column": 17
            },
            "line": 119,
            "code": "  it('keeps hacks', () => {\n    expect(rm('(-moz-a: 1) or (b: 2)')).toBe('(-moz-a: 1) or (b: 2)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "uses only browsers with @supports support",
            "suites": [
                "prefixer()"
            ],
            "updatePoint": {
                "line": 125,
                "column": 47
            },
            "line": 125,
            "code": "  it('uses only browsers with @supports support', () => {\n    expect(supports.prefixer().browsers.selected).toEqual(['firefox 22'])\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "normalize brackets",
            "suites": [
                "cleanBrackets()"
            ],
            "updatePoint": {
                "line": 131,
                "column": 24
            },
            "line": 131,
            "code": "  it('normalize brackets', () => {\n    expect(clean('((a: 1))')).toBe('(a: 1)')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "normalize brackets recursively",
            "suites": [
                "cleanBrackets()"
            ],
            "updatePoint": {
                "line": 135,
                "column": 36
            },
            "line": 135,
            "code": "  it('normalize brackets recursively', () => {\n    expect(clean('(((a: 1) or ((b: 2))))')).toBe('((a: 1) or (b: 2))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds params with prefixed value",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 141,
                "column": 37
            },
            "line": 141,
            "code": "  it('adds params with prefixed value', () => {\n    let rule = { params: '(c: b)' }\n    supports.process(rule)\n    expect(rule.params).toBe('((c: -moz-b) or (c: b))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds params with prefixed function",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 147,
                "column": 40
            },
            "line": 147,
            "code": "  it('adds params with prefixed function', () => {\n    let rule = { params: '(c: b(1))' }\n    supports.process(rule)\n    expect(rule.params).toBe('((c: -moz-b(1)) or (c: b(1)))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaces params with prefixed property",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 153,
                "column": 44
            },
            "line": 153,
            "code": "  it('replaces params with prefixed property', () => {\n    let rule = { params: '(color black) and not (a: 1)' }\n    supports.process(rule)\n    expect(rule.params).toBe('(color black) and not ((-moz-a: 1) or (a: 1))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldn't throw errors",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 159,
                "column": 28
            },
            "line": 159,
            "code": "  it(\"shouldn't throw errors\", () => {\n    let rule = { params: 'not selector(:is(a, b))' }\n    supports.process(rule)\n    expect(rule.params).toBe('not selector(:is(a, b))')\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "shouldn't throw errors (2)",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 165,
                "column": 32
            },
            "line": 165,
            "code": "  it(\"shouldn't throw errors (2)\", () => {\n    let rule = { params: ' (selector( :nth-child(1n of a, b) )) or (c: b(1)) ' }\n    supports.process(rule)\n    expect(rule.params).toBe(\n      ' (selector( :nth-child(1n of a, b) )) or ((c: -moz-b(1)) or (c: b(1))) '\n    )\n  })",
            "file": "supports.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "raises an error",
            "suites": [
                ".error()"
            ],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "  it('raises an error', () => {\n    expect(() => {\n      utils.error('A')\n    }).toThrow('A')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "marks an error",
            "suites": [
                ".error()"
            ],
            "updatePoint": {
                "line": 10,
                "column": 20
            },
            "line": 10,
            "code": "  it('marks an error', () => {\n    let error = null\n    try {\n      utils.error('A')\n    } catch (e) {\n      error = e\n    }\n\n    expect(error.autoprefixer).toBe(true)\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filters doubles in array",
            "suites": [
                ".uniq()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 30
            },
            "line": 23,
            "code": "  it('filters doubles in array', () => {\n    expect(utils.uniq(['1', '1', '2', '3', '3'])).toEqual(['1', '2', '3'])\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removes note",
            "suites": [
                ".removeNote()"
            ],
            "updatePoint": {
                "line": 29,
                "column": 18
            },
            "line": 29,
            "code": "  it('removes note', () => {\n    expect(utils.removeNote('-webkit- note')).toBe('-webkit-')\n    expect(utils.removeNote('-webkit-')).toBe('-webkit-')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes RegExp symbols",
            "suites": [
                ".escapeRegexp()"
            ],
            "updatePoint": {
                "line": 36,
                "column": 28
            },
            "line": 36,
            "code": "  it('escapes RegExp symbols', () => {\n    let string = utils.escapeRegexp('^[()\\\\]')\n    expect(string).toBe('\\\\^\\\\[\\\\(\\\\)\\\\\\\\\\\\]')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "generates RegExp that finds tokens in CSS values",
            "suites": [
                ".regexp()"
            ],
            "updatePoint": {
                "line": 43,
                "column": 54
            },
            "line": 43,
            "code": "  it('generates RegExp that finds tokens in CSS values', () => {\n    let regexp = utils.regexp('foo')\n    function check(string) {\n      return string.match(regexp) !== null\n    }\n\n    expect(check('foo')).toBe(true)\n    expect(check('Foo')).toBe(true)\n    expect(check('one, foo, two')).toBe(true)\n    expect(check('one(),foo(),two()')).toBe(true)\n\n    expect('foo(), a, foo'.replace(regexp, '$1b$2')).toBe('bfoo(), a, bfoo')\n\n    expect(check('foob')).toBe(false)\n    expect(check('(foo)')).toBe(false)\n    expect(check('-a-foo')).toBe(false)\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "escapes string if needed",
            "suites": [
                ".regexp()"
            ],
            "updatePoint": {
                "line": 61,
                "column": 30
            },
            "line": 61,
            "code": "  it('escapes string if needed', () => {\n    let regexp = utils.regexp('(a|b)')\n    function check(string) {\n      return string.match(regexp) !== null\n    }\n\n    expect(check('a')).toBe(false)\n    expect(check('(a|b)')).toBe(true)\n\n    regexp = utils.regexp('(a|b)', false)\n    expect(check('a')).toBe(true)\n    expect(check('b')).toBe(true)\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "does save without changes",
            "suites": [
                ".editList()"
            ],
            "updatePoint": {
                "line": 77,
                "column": 31
            },
            "line": 77,
            "code": "  it('does save without changes', () => {\n    let list = utils.editList('a,\\nb, c', parsed => parsed)\n    expect(list).toBe('a,\\nb, c')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "changes list",
            "suites": [
                ".editList()"
            ],
            "updatePoint": {
                "line": 82,
                "column": 18
            },
            "line": 82,
            "code": "  it('changes list', () => {\n    let list = utils.editList('a, b', (parsed, edit) => {\n      expect(parsed).toEqual(['a', 'b'])\n      expect(edit).toEqual([])\n      return ['1', '2']\n    })\n    expect(list).toBe('1, 2')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "saves comma",
            "suites": [
                ".editList()"
            ],
            "updatePoint": {
                "line": 91,
                "column": 17
            },
            "line": 91,
            "code": "  it('saves comma', () => {\n    let list = utils.editList('a,\\nb', () => ['1', '2'])\n    expect(list).toBe('1,\\n2')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parse one value",
            "suites": [
                ".editList()"
            ],
            "updatePoint": {
                "line": 96,
                "column": 21
            },
            "line": 96,
            "code": "  it('parse one value', () => {\n    let list = utils.editList('1', parsed => [parsed[0], '2'])\n    expect(list).toBe('1, 2')\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "splits simple selectors into an array",
            "suites": [
                ".splitSelector()"
            ],
            "updatePoint": {
                "line": 103,
                "column": 43
            },
            "line": 103,
            "code": "  it('splits simple selectors into an array', () => {\n    let arr1 = utils.splitSelector('#foo.bar')\n    let arr2 = utils.splitSelector('.foo, .bar')\n    expect(arr1).toEqual([[['#foo', '.bar']]])\n    expect(arr2).toEqual([[['.foo']], [['.bar']]])\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "splits complex selectors into an array",
            "suites": [
                ".splitSelector()"
            ],
            "updatePoint": {
                "line": 110,
                "column": 44
            },
            "line": 110,
            "code": "  it('splits complex selectors into an array', () => {\n    let arr = utils.splitSelector(\n      '#foo.bar .child-one.mod .child-two.mod, .baz, .hello'\n    )\n    expect(arr).toEqual([\n      [\n        ['#foo', '.bar'],\n        ['.child-one', '.mod'],\n        ['.child-two', '.mod']\n      ],\n      [['.baz']],\n      [['.hello']]\n    ])\n  })",
            "file": "utils.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clones declaration",
            "suites": [
                ".save()"
            ],
            "updatePoint": {
                "line": 15,
                "column": 24
            },
            "line": 15,
            "code": "  it('clones declaration', () => {\n    let css = parse('a { prop: v }')\n    let width = css.first.first\n\n    width._autoprefixerValues = { '-ms-': '-ms-v' }\n    Value.save(prefixes, width)\n\n    expect(css.toString()).toBe('a { prop: -ms-v; prop: v }')\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "updates declaration with prefix",
            "suites": [
                ".save()"
            ],
            "updatePoint": {
                "line": 25,
                "column": 37
            },
            "line": 25,
            "code": "  it('updates declaration with prefix', () => {\n    let css = parse('a { -ms-prop: v }')\n    let width = css.first.first\n\n    width._autoprefixerValues = { '-ms-': '-ms-v' }\n    Value.save(prefixes, width)\n\n    expect(css.toString()).toBe('a { -ms-prop: -ms-v }')\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores on another prefix property",
            "suites": [
                ".save()"
            ],
            "updatePoint": {
                "line": 35,
                "column": 40
            },
            "line": 35,
            "code": "  it('ignores on another prefix property', () => {\n    let css = parse('a { -ms-prop: v; prop: v }')\n    let width = css.first.last\n\n    width._autoprefixerValues = { '-ms-': '-ms-v' }\n    Value.save(prefixes, width)\n\n    expect(css.toString()).toBe('a { -ms-prop: v; prop: v }')\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores prefixes without changes",
            "suites": [
                ".save()"
            ],
            "updatePoint": {
                "line": 45,
                "column": 38
            },
            "line": 45,
            "code": "  it('ignores prefixes without changes', () => {\n    let css = parse('a { prop: v }')\n    let width = css.first.first\n\n    width._autoprefixerValues = { '-ms-': 'v' }\n    Value.save(prefixes, width)\n\n    expect(css.toString()).toBe('a { prop: v }')\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks value in string",
            "suites": [
                "check()"
            ],
            "updatePoint": {
                "line": 57,
                "column": 28
            },
            "line": 57,
            "code": "  it('checks value in string', () => {\n    let css = parse(\n      'a { 0: calc(1px + 1em); ' +\n        '1: 1px calc(1px + 1em); ' +\n        '2: (calc(1px + 1em)); ' +\n        '3: -ms-calc; ' +\n        '4: calced; }'\n    )\n\n    expect(calc.check(css.first.nodes[0])).toBe(true)\n    expect(calc.check(css.first.nodes[1])).toBe(true)\n    expect(calc.check(css.first.nodes[2])).toBe(true)\n\n    expect(calc.check(css.first.nodes[3])).toBe(false)\n    expect(calc.check(css.first.nodes[4])).toBe(false)\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "check prefixed value",
            "suites": [
                "old()"
            ],
            "updatePoint": {
                "line": 76,
                "column": 26
            },
            "line": 76,
            "code": "  it('check prefixed value', () => {\n    expect(calc.old('-ms-')).toEqual(new OldValue('calc', '-ms-calc'))\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefix to value",
            "suites": [
                "replace()"
            ],
            "updatePoint": {
                "line": 82,
                "column": 26
            },
            "line": 82,
            "code": "  it('adds prefix to value', () => {\n    expect(calc.replace('1px calc(1em)', '-ms-')).toBe('1px -ms-calc(1em)')\n    expect(calc.replace('1px,calc(1em)', '-ms-')).toBe('1px,-ms-calc(1em)')\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "adds prefixes",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 89,
                "column": 19
            },
            "line": 89,
            "code": "  it('adds prefixes', () => {\n    let css = parse('a { width: calc(1em) calc(1%) }')\n    let width = css.first.first\n\n    calc.process(width)\n    expect(width._autoprefixerValues).toEqual({\n      '-moz-': '-moz-calc(1em) -moz-calc(1%)',\n      '-ms-': '-ms-calc(1em) -ms-calc(1%)'\n    })\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks parents prefix",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 100,
                "column": 27
            },
            "line": 100,
            "code": "  it('checks parents prefix', () => {\n    let css = parse('::-moz-fullscreen a { width: calc(1%) }')\n    let width = css.first.first\n\n    calc.process(width)\n    expect(width._autoprefixerValues).toEqual({ '-moz-': '-moz-calc(1%)' })\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checks property prefix",
            "suites": [
                "process()"
            ],
            "updatePoint": {
                "line": 108,
                "column": 28
            },
            "line": 108,
            "code": "  it('checks property prefix', () => {\n    let css = parse('a { -moz-width: calc(1%); -o-width: calc(1%) }')\n    let decls = css.first.nodes\n\n    calc.process(decls[0])\n    expect(decls[0]._autoprefixerValues).toEqual({\n      '-moz-': '-moz-calc(1%)'\n    })\n\n    calc.process(decls[1])\n    expect(decls[1]._autoprefixerValues).toBeUndefined()\n  })",
            "file": "value.test.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "postcss__autoprefixer.svg"
}