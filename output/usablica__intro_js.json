{"repo":"usablica/intro.js","url":"https://github.com/usablica/intro.js","branch":"master","configs":[{"package":"intro.js","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should call the onstart callback","suites":["introForElement"],"updatePoint":{"line":7,"column":40,"index":371},"line":7,"code":"  test(\"should call the onstart callback\", () => {\n    jest.spyOn(fetchIntroSteps, \"default\").mockReturnValue([]);\n    jest.spyOn(addOverlayLayer, \"default\").mockReturnValue(true);\n    jest.spyOn(nextStep, \"nextStep\").mockReturnValue(Promise.resolve(true));\n    const onstartCallback = jest.fn();\n    const context = introJs().setOptions({\n      isActive: true\n    });\n    context._introStartCallback = onstartCallback;\n    introForElement(context, document.body);\n    expect(onstartCallback).toBeCalledTimes(1);\n    expect(onstartCallback).toBeCalledWith(document.body);\n  });","file":"jest/core/introForElement.test.ts","skipped":false,"dir":"tests"},{"name":"should not start the tour if isActive is false","suites":["introForElement"],"updatePoint":{"line":20,"column":54,"index":963},"line":20,"code":"  test(\"should not start the tour if isActive is false\", () => {\n    const fetchIntroStepsMock = jest.spyOn(fetchIntroSteps, \"default\");\n    const addOverlayLayerMock = jest.spyOn(addOverlayLayer, \"default\");\n    const nextStepMock = jest.spyOn(nextStep, \"nextStep\");\n    const context = introJs().setOptions({\n      isActive: false\n    });\n    introForElement(context, document.body);\n    expect(fetchIntroStepsMock).toBeCalledTimes(0);\n    expect(addOverlayLayerMock).toBeCalledTimes(0);\n    expect(nextStepMock).toBeCalledTimes(0);\n  });","file":"jest/core/introForElement.test.ts","skipped":false,"dir":"tests"},{"name":"should refresh the cached intro steps","suites":["refresh"],"updatePoint":{"line":4,"column":45,"index":174},"line":4,"code":"  test(\"should refresh the cached intro steps\", () => {\n    jest.spyOn(placeTooltip, \"default\");\n    const targetElement = document.createElement(\"div\");\n    document.body.appendChild(targetElement);\n    const instance = introJs(targetElement).setOptions({\n      steps: [{\n        intro: \"first\"\n      }]\n    });\n    instance.start();\n    expect(instance._introItems.length).toBe(1);\n    expect(document.querySelectorAll(\".introjs-bullets ul li\").length).toBe(1);\n    instance.setOptions({\n      steps: [{\n        intro: \"first\"\n      }, {\n        intro: \"second\"\n      }]\n    }).refresh();\n    expect(instance._introItems.length).toBe(1);\n    expect(instance._introItems[0].intro).toBe(\"first\");\n    expect(document.querySelectorAll(\".introjs-bullets ul li\").length).toBe(1);\n    instance.setOptions({\n      steps: [{\n        intro: \"first\"\n      }, {\n        intro: \"second\"\n      }]\n    }).refresh(true);\n    expect(instance._introItems.length).toBe(2);\n    expect(instance._introItems[0].intro).toBe(\"first\");\n    expect(instance._introItems[1].intro).toBe(\"second\");\n    expect(document.querySelectorAll(\".introjs-bullets ul li\").length).toBe(2);\n  });","file":"jest/core/refresh.test.ts","skipped":false,"dir":"tests"},{"name":"should return the default options","suites":["option"],"updatePoint":{"line":3,"column":41,"index":146},"line":3,"code":"  test(\"should return the default options\", () => {\n    const defaultOptions = getDefaultOptions();\n    expect(defaultOptions).toBeObject();\n  });","file":"jest/option.test.ts","skipped":false,"dir":"tests"},{"name":"should return empty steps array","suites":["option"],"updatePoint":{"line":7,"column":39,"index":291},"line":7,"code":"  test(\"should return empty steps array\", () => {\n    const defaultOptions = getDefaultOptions();\n    expect(defaultOptions.steps).toBeEmpty();\n  });","file":"jest/option.test.ts","skipped":false,"dir":"tests"},{"name":"should set a single option","suites":["option"],"updatePoint":{"line":11,"column":34,"index":436},"line":11,"code":"  test(\"should set a single option\", () => {\n    const defaultOptions = getDefaultOptions();\n    const prevNextLabel = defaultOptions.nextLabel;\n    setOption(defaultOptions, \"nextLabel\", \"Boo!\");\n    expect(defaultOptions.nextLabel).toBe(\"Boo!\");\n    expect(defaultOptions.nextLabel).not.toEqual(prevNextLabel);\n  });","file":"jest/option.test.ts","skipped":false,"dir":"tests"},{"name":"should return the correct updated options","suites":["option"],"updatePoint":{"line":18,"column":49,"index":770},"line":18,"code":"  test(\"should return the correct updated options\", () => {\n    const defaultOptions = getDefaultOptions();\n    const updatedOptions = setOption(defaultOptions, \"nextLabel\", \"Boo!\");\n    expect(updatedOptions.nextLabel).toBe(\"Boo!\");\n  });","file":"jest/option.test.ts","skipped":false,"dir":"tests"},{"name":"should set a multiple options","suites":["option"],"updatePoint":{"line":23,"column":37,"index":998},"line":23,"code":"  test(\"should set a multiple options\", () => {\n    const defaultOptions = getDefaultOptions();\n    const prevNextLabel = defaultOptions.nextLabel;\n    setOptions(defaultOptions, {\n      nextLabel: \"Boo!\",\n      highlightClass: \"HighlightClass\"\n    });\n    expect(defaultOptions.nextLabel).toBe(\"Boo!\");\n    expect(defaultOptions.nextLabel).not.toEqual(prevNextLabel);\n    expect(defaultOptions.highlightClass).toBe(\"HighlightClass\");\n  });","file":"jest/option.test.ts","skipped":false,"dir":"tests"},{"name":"should append when className is empty","suites":["addClass"],"updatePoint":{"line":3,"column":45,"index":126},"line":3,"code":"  test(\"should append when className is empty\", () => {\n    const el = document.createElement(\"div\");\n    addClass(el, \"myClass\");\n    expect(el.className).toBe(\"myClass\");\n  });","file":"jest/util/addClass.test.ts","skipped":false,"dir":"tests"},{"name":"should append when className is NOT empty","suites":["addClass"],"updatePoint":{"line":8,"column":49,"index":309},"line":8,"code":"  test(\"should append when className is NOT empty\", () => {\n    const el = document.createElement(\"div\");\n    el.className = \"firstClass\";\n    addClass(el, \"secondClass\");\n    expect(el.className).toBe(\"firstClass secondClass\");\n  });","file":"jest/util/addClass.test.ts","skipped":false,"dir":"tests"},{"name":"should not append duplicate classNames to elements","suites":["addClass"],"updatePoint":{"line":14,"column":58,"index":553},"line":14,"code":"  test(\"should not append duplicate classNames to elements\", () => {\n    const el = document.createElement(\"div\");\n    el.className = \"firstClass\";\n    addClass(el, \"firstClass\");\n    expect(el.className).toBe(\"firstClass\");\n  });","file":"jest/util/addClass.test.ts","skipped":false,"dir":"tests"},{"name":"should not append duplicate list of classNames to elements","suites":["addClass"],"updatePoint":{"line":20,"column":66,"index":792},"line":20,"code":"  test(\"should not append duplicate list of classNames to elements\", () => {\n    const el = document.createElement(\"div\");\n    el.className = \"firstClass firstClass\";\n    addClass(el, \"firstClass firstClass firstClass\");\n    expect(el.className).toBe(\"firstClass\");\n  });","file":"jest/util/addClass.test.ts","skipped":false,"dir":"tests"},{"name":"should not append duplicate list of classNames to an empty className","suites":["addClass"],"updatePoint":{"line":26,"column":76,"index":1074},"line":26,"code":"  test(\"should not append duplicate list of classNames to an empty className\", () => {\n    const el = document.createElement(\"div\");\n    addClass(el, \"firstClass firstClass firstClass\");\n    expect(el.className).toBe(\"firstClass\");\n  });","file":"jest/util/addClass.test.ts","skipped":false,"dir":"tests"},{"name":"should return undefined when cookie doesnt exist","suites":["cookie"],"updatePoint":{"line":13,"column":56,"index":405},"line":13,"code":"  test(\"should return undefined when cookie doesnt exist\", () => {\n    expect(getCookie(\"doesntExist\")).toBe(undefined);\n  });","file":"jest/util/cookie.test.ts","skipped":false,"dir":"tests"},{"name":"should return the cookie name","suites":["cookie"],"updatePoint":{"line":16,"column":37,"index":513},"line":16,"code":"  test(\"should return the cookie name\", () => {\n    expect(getCookie(\"abc\")).toBe(\"bar\");\n  });","file":"jest/util/cookie.test.ts","skipped":false,"dir":"tests"},{"name":"should return all cookies","suites":["cookie"],"updatePoint":{"line":19,"column":33,"index":605},"line":19,"code":"  test(\"should return all cookies\", () => {\n    expect(getAllCookies()).toEqual({\n      abc: \"bar\",\n      hello: \"world\"\n    });\n  });","file":"jest/util/cookie.test.ts","skipped":false,"dir":"tests"},{"name":"should set cookie","suites":["cookie"],"updatePoint":{"line":25,"column":25,"index":732},"line":25,"code":"  test(\"should set cookie\", () => {\n    setCookie(\"new\", \"foo\");\n    expect(getCookie(\"new\")).toEqual(\"foo\");\n  });","file":"jest/util/cookie.test.ts","skipped":false,"dir":"tests"},{"name":"should delete cookie","suites":["cookie"],"updatePoint":{"line":29,"column":28,"index":851},"line":29,"code":"  test(\"should delete cookie\", () => {\n    expect(getCookie(\"hello\")).toEqual(\"world\");\n    deleteCookie(\"hello\");\n    expect(getCookie(\"hello\")).toEqual(\"\");\n  });","file":"jest/util/cookie.test.ts","skipped":false,"dir":"tests"},{"name":"should create an element","suites":["createElement"],"updatePoint":{"line":3,"column":32,"index":128},"line":3,"code":"  test(\"should create an element\", () => {\n    expect(createElement(\"div\").tagName).toBe(\"DIV\");\n    expect(createElement(\"b\").tagName).toBe(\"B\");\n  });","file":"jest/util/createElement.test.ts","skipped":false,"dir":"tests"},{"name":"should create an element with properties","suites":["createElement"],"updatePoint":{"line":7,"column":48,"index":297},"line":7,"code":"  test(\"should create an element with properties\", () => {\n    const el = createElement(\"div\", {\n      className: \"myClass\"\n    });\n    expect(el.className).toBe(\"myClass\");\n  });","file":"jest/util/createElement.test.ts","skipped":false,"dir":"tests"},{"name":"should create an element with onclick","suites":["createElement"],"updatePoint":{"line":13,"column":45,"index":474},"line":13,"code":"  test(\"should create an element with onclick\", () => {\n    const mock = jest.fn();\n    const el = createElement(\"div\", {\n      onclick: mock\n    });\n    el.click();\n    el.click();\n    expect(mock).toBeCalledTimes(2);\n  });","file":"jest/util/createElement.test.ts","skipped":false,"dir":"tests"},{"name":"should set style when the list is empty","suites":["setStyle"],"updatePoint":{"line":3,"column":47,"index":128},"line":3,"code":"  test(\"should set style when the list is empty\", () => {\n    const el = document.createElement(\"div\");\n    setStyle(el, {\n      \"text-align\": \"center\"\n    });\n    expect(el.style.cssText).toBe(\"text-align: center;\");\n  });","file":"jest/util/setStyle.test.ts","skipped":false,"dir":"tests"},{"name":"should set style using cssText","suites":["setStyle"],"updatePoint":{"line":10,"column":38,"index":343},"line":10,"code":"  test(\"should set style using cssText\", () => {\n    const el = document.createElement(\"div\");\n    setStyle(el, \"text-align: center\");\n    expect(el.style.cssText).toBe(\"text-align: center;\");\n  });","file":"jest/util/setStyle.test.ts","skipped":false,"dir":"tests"},{"name":"should set when style is not empty","suites":["setStyle"],"updatePoint":{"line":15,"column":42,"index":546},"line":15,"code":"  test(\"should set when style is not empty\", () => {\n    const el = document.createElement(\"div\");\n    el.style.position = \"relative\";\n    setStyle(el, \"text-align: center\");\n    expect(el.style.cssText).toBe(\"position: relative; text-align: center;\");\n  });","file":"jest/util/setStyle.test.ts","skipped":false,"dir":"tests"},{"name":"should set when style is not empty and given value is an object","suites":["setStyle"],"updatePoint":{"line":21,"column":71,"index":834},"line":21,"code":"  test(\"should set when style is not empty and given value is an object\", () => {\n    const el = document.createElement(\"div\");\n    el.style.position = \"relative\";\n    setStyle(el, {\n      \"text-align\": \"center\"\n    });\n    expect(el.style.cssText).toBe(\"position: relative; text-align: center;\");\n  });","file":"jest/util/setStyle.test.ts","skipped":false,"dir":"tests"},{"name":"should override the existing property","suites":["setStyle"],"updatePoint":{"line":29,"column":45,"index":1112},"line":29,"code":"  test(\"should override the existing property\", () => {\n    const el = document.createElement(\"div\");\n    el.style.position = \"relative\";\n    setStyle(el, {\n      position: \"absolute\",\n      \"text-align\": \"center\"\n    });\n    expect(el.style.cssText).toBe(\"position: absolute; text-align: center;\");\n  });","file":"jest/util/setStyle.test.ts","skipped":false,"dir":"tests"}]}