{"repo":"faisalman/ua-parser-js","url":"https://github.com/faisalman/ua-parser-js","branch":"master","configs":[{"package":"ua-parser-js","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Can detect bots","suites":["Bots"],"updatePoint":{"line":10,"column":21,"index":238},"line":10,"code":"  it('Can detect bots', () => {\n    const googleBot = 'Googlebot-Video/1.0';\n    const msnBot = 'msnbot-media/1.1 (+http://search.msn.com/msnbot.htm)';\n    const bingPreview = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534+ (KHTML, like Gecko) BingPreview/1.0b';\n    const opera = 'Opera/8.5 (Macintosh; PPC Mac OS X; U; en)';\n    const wget = 'Wget/1.21.1';\n    const facebookBot = 'Mozilla/5.0 (compatible; FacebookBot/1.0; +https://developers.facebook.com/docs/sharing/webmasters/facebookbot/)';\n    const outlook = 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Microsoft Outlook 16.0.9126; Microsoft Outlook 16.0.9126; ms-office; MSOffice 16)';\n    const thunderbird = 'Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Thunderbird/78.13.0';\n    const botParser = new UAParser(Bots);\n    assert.deepEqual(botParser.setUA(googleBot).getBrowser(), {\n      name: \"Googlebot-Video\",\n      version: \"1.0\",\n      major: \"1\",\n      type: \"bot\"\n    });\n    assert.deepEqual(botParser.setUA(msnBot).getBrowser(), {\n      name: \"msnbot-media\",\n      version: \"1.1\",\n      major: \"1\",\n      type: \"bot\"\n    });\n    assert.deepEqual(botParser.setUA(bingPreview).getBrowser(), {\n      name: \"BingPreview\",\n      version: \"1.0b\",\n      major: \"1\",\n      type: \"bot\"\n    });\n    assert.deepEqual(botParser.setUA(opera).getBrowser(), {\n      name: \"Opera\",\n      version: \"8.5\",\n      major: \"8\"\n    });\n\n    // try merging Bots & Tools\n    const botsAndTools = {\n      browser: [...Bots.browser, ...Tools.browser]\n    };\n    const botolParser = new UAParser(botsAndTools);\n    assert.deepEqual(botolParser.setUA(wget).getBrowser(), {\n      name: \"Wget\",\n      version: \"1.21.1\",\n      major: \"1\",\n      type: \"tool\"\n    });\n    assert.deepEqual(botolParser.setUA(facebookBot).getBrowser(), {\n      name: \"FacebookBot\",\n      version: \"1.0\",\n      major: \"1\",\n      type: \"bot\"\n    });\n    const emailParser = new UAParser(Emails);\n    assert.deepEqual(emailParser.setUA(outlook).getBrowser(), {\n      name: \"Microsoft Outlook\",\n      version: \"16.0.9126\",\n      major: \"16\",\n      type: \"email\"\n    });\n    assert.deepEqual(emailParser.setUA(thunderbird).getBrowser(), {\n      name: \"Thunderbird\",\n      version: \"78.13.0\",\n      major: \"78\",\n      type: \"email\"\n    });\n  });","file":"test-extension.js","skipped":false,"dir":"test"},{"name":"getResult() should returns JSON","suites":["Returns"],"updatePoint":{"line":70,"column":37,"index":2420},"line":70,"code":"  it('getResult() should returns JSON', function (done) {\n    assert.deepEqual(new UAParser('').getResult(), {\n      ua: '',\n      ua_ch: {\n        architecture: undefined,\n        bitness: undefined,\n        brands: undefined,\n        fullVersionList: undefined,\n        mobile: false,\n        model: undefined,\n        platform: undefined,\n        platformVersion: undefined\n      },\n      browser: {\n        name: undefined,\n        version: undefined,\n        major: undefined\n      },\n      cpu: {\n        architecture: undefined\n      },\n      device: {\n        vendor: undefined,\n        model: undefined,\n        type: undefined\n      },\n      engine: {\n        name: undefined,\n        version: undefined\n      },\n      os: {\n        name: undefined,\n        version: undefined\n      }\n    });\n    done();\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"should loaded automatically","suites":["Using Require.js"],"updatePoint":{"line":158,"column":33,"index":13372},"line":158,"code":"  it('should loaded automatically', function (done) {\n    requirejs.config({\n      baseUrl: 'dist',\n      paths: {\n        'ua-parser-js': 'ua-parser.min'\n      }\n    });\n    requirejs(['ua-parser-js'], function (ua) {\n      var parser = new ua('Dillo/1.0');\n      assert.deepStrictEqual(parser.getBrowser().name, 'Dillo');\n      done();\n    });\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"all regexes in main file","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":190,"column":32,"index":14227},"line":190,"code":"    it('all regexes in main file', function () {\n      regexes.forEach(function (regex) {\n        describe('Test against `safe-regex` : ' + regex, function () {\n          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });\n        });\n      });\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be safe from potentially vulnerable regex","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":193,"column":62,"index":14418},"line":193,"code":"          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should match full name","suites":["is() utility method"],"updatePoint":{"line":203,"column":28,"index":14847},"line":203,"code":"  it('Should match full name', function () {\n    assert.strictEqual(uap.getBrowser().name, \"IEMobile\");\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile\"), true);\n    assert.strictEqual(uap.getBrowser().is(\"IE\"), false);\n    assert.strictEqual(uap.getBrowser().is(\"11.0\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore \"Browser\" suffix","suites":["is() utility method"],"updatePoint":{"line":209,"column":36,"index":15146},"line":209,"code":"  it('Should ignore \"Browser\" suffix', function () {\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile Browser\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore case","suites":["is() utility method"],"updatePoint":{"line":212,"column":24,"index":15264},"line":212,"code":"  it('Should ignore case', function () {\n    assert.strictEqual(uap.getEngine().name, \"Trident\");\n    assert.strictEqual(uap.getEngine().is(\"tRiDeNt\"), true);\n    assert.strictEqual(uap.getEngine().is(\"7.0\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get exact name","suites":["is() utility method"],"updatePoint":{"line":217,"column":27,"index":15490},"line":217,"code":"  it('Should get exact name', function () {\n    assert.strictEqual(uap.getOS().name, \"Windows Phone\");\n    assert.strictEqual(uap.getOS().is(\"Windows Phone\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Phone OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Mobile\"), false);\n    assert.strictEqual(uap.getOS().is(\"Android\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should check all device properties","suites":["is() utility method"],"updatePoint":{"line":224,"column":40,"index":15864},"line":224,"code":"  it('Should check all device properties', function () {\n    assert.deepEqual(uap.getDevice(), {\n      vendor: \"Nokia\",\n      model: \"Lumia 635\",\n      type: \"mobile\"\n    });\n    assert.strictEqual(uap.getDevice().is(\"Nokia\"), true);\n    assert.strictEqual(uap.getDevice().is(\"Lumia 635\"), true);\n    assert.strictEqual(uap.getDevice().is(\"mobile\"), true);\n    assert.strictEqual(uap.getResult().device.is(\"Nokia\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get result after reassignment","suites":["is() utility method"],"updatePoint":{"line":235,"column":42,"index":16295},"line":235,"code":"  it('Should get result after reassignment', function () {\n    uap.setUA(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\");\n    assert.strictEqual(uap.getOS().name, \"macOS\");\n    assert.strictEqual(uap.getOS().is(\"Mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"macOS\"), true);\n    assert.strictEqual(uap.getOS().is(\"mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"M ac\"), false);\n    assert.strictEqual(uap.getOS().is(\"M      a c   \"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS OS\"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS X\"), false);\n    assert.strictEqual(uap.getBrowser().is(\"Chrome\"), true);\n    assert.strictEqual(uap.getEngine().is(\"Blink\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should refrain from \"undefined\" until all properties are checked","suites":["is() utility method"],"updatePoint":{"line":248,"column":70,"index":17102},"line":248,"code":"  it('Should refrain from \"undefined\" until all properties are checked', function () {\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), false);\n    assert.strictEqual(uap.getDevice().is(\"Apple\"), true);\n    uap.setUA(\"\");\n    assert.strictEqual(uap.getDevice().model, undefined);\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), false);\n    assert.strictEqual(uap.getDevice().is(undefined), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should accept exact arch name","suites":["is() utility method"],"updatePoint":{"line":258,"column":35,"index":17545},"line":258,"code":"  it('Should accept exact arch name', function () {\n    uap.setUA(\"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:19.0) Gecko/20100101 Firefox/19.0\");\n    assert.strictEqual(uap.getCPU().architecture, \"ia32\");\n    assert.strictEqual(uap.getCPU().is(\"ia32\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86\"), false);\n    uap.setUA(\"Opera/9.80 (X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10\");\n    assert.strictEqual(uap.getCPU().architecture, \"amd64\");\n    assert.strictEqual(uap.getCPU().is(\"amd64\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86-64\"), false);\n    assert.strictEqual(uap.getCPU().is(\"x64\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should return full name","suites":["toString() utility method"],"updatePoint":{"line":271,"column":29,"index":18240},"line":271,"code":"  it('Should return full name', function () {\n    let uap = new UAParser('Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 635) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537');\n    assert.strictEqual(uap.getBrowser().name, \"IEMobile\");\n    assert.strictEqual(uap.getBrowser().version, \"11.0\");\n    assert.strictEqual(uap.getBrowser().major, \"11\");\n    assert.strictEqual(uap.getBrowser().toString(), \"IEMobile 11.0\");\n    assert.strictEqual(uap.getCPU().architecture, \"arm\");\n    assert.strictEqual(uap.getCPU().toString(), \"arm\");\n    assert.strictEqual(uap.getDevice().vendor, \"Nokia\");\n    assert.strictEqual(uap.getDevice().model, \"Lumia 635\");\n    assert.strictEqual(uap.getDevice().type, \"mobile\");\n    assert.strictEqual(uap.getDevice().toString(), \"Nokia Lumia 635\");\n    assert.strictEqual(uap.getEngine().name, \"Trident\");\n    assert.strictEqual(uap.getEngine().version, \"7.0\");\n    assert.strictEqual(uap.getEngine().toString(), \"Trident 7.0\");\n    assert.strictEqual(uap.getOS().name, \"Windows Phone\");\n    assert.strictEqual(uap.getOS().version, \"8.1\");\n    assert.strictEqual(uap.getOS().toString(), \"Windows Phone 8.1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":301,"column":37,"index":19991},"line":301,"code":"  it('Can be called with UAParser(ua)', function () {\n    let engine = UAParser(ua).engine;\n    assert.strictEqual(engine.name, \"Trident\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, extensions)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":305,"column":49,"index":20149},"line":305,"code":"  it('Can be called with UAParser(ua, extensions)', function () {\n    let engine = UAParser(ua, ext).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, extensions, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":309,"column":58,"index":20330},"line":309,"code":"  it('Can be called with UAParser(ua, extensions, headers)', function () {\n    let engine = UAParser(ua, ext, req.headers).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":313,"column":46,"index":20512},"line":313,"code":"  it('Can be called with UAParser(ua, headers)', function () {\n    let engine = UAParser(ua, req.headers).engine;\n    assert.strictEqual(engine.name, \"Trident\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(extensions, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":317,"column":54,"index":20688},"line":317,"code":"  it('Can be called with UAParser(extensions, headers)', function () {\n    let engine = UAParser(ext, req.headers).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 2\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":321,"column":42,"index":20862},"line":321,"code":"  it('Can be called with UAParser(headers)', function () {\n    let engine = UAParser(req.headers).engine;\n    assert.strictEqual(engine.name, \"EdgeHTML\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can read from client-hints headers using `withClientHints()`","suites":["Map UA-CH headers"],"updatePoint":{"line":372,"column":66,"index":22621},"line":372,"code":"  it('Can read from client-hints headers using `withClientHints()`', function () {\n    assert.deepEqual(uap.ua_ch, ua_ch);\n    assert.strictEqual(uap.ua, \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\");\n    assert.strictEqual(uap.browser.name, \"Chrome\");\n    assert.strictEqual(uap.browser.version, \"93.0.1.2\");\n    assert.strictEqual(uap.browser.major, \"93\");\n    assert.strictEqual(browser.name, \"Chrome\");\n    assert.strictEqual(browser.version, \"93.0.1.2\");\n    assert.strictEqual(browser.major, \"93\");\n    assert.strictEqual(uap.cpu.architecture, \"arm64\");\n    assert.strictEqual(cpu.architecture, \"arm64\");\n    assert.strictEqual(uap.device.type, \"mobile\");\n    assert.strictEqual(uap.device.model, \"Pixel 99\");\n    assert.strictEqual(uap.device.vendor, undefined);\n    assert.strictEqual(device.type, \"mobile\");\n    assert.strictEqual(device.model, \"Pixel 99\");\n    assert.strictEqual(device.vendor, undefined);\n    assert.strictEqual(uap.engine.name, 'Blink');\n    assert.strictEqual(uap.engine.version, '110.0.0.0');\n    assert.strictEqual(engine.name, 'Blink');\n    assert.strictEqual(engine.version, '110.0.0.0');\n    assert.strictEqual(uap.os.name, \"Windows\");\n    assert.strictEqual(uap.os.version, \"11\");\n    assert.strictEqual(os.name, \"Windows\");\n    assert.strictEqual(os.version, \"11\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Only read from user-agent header when called without `withClientHints()`","suites":["Map UA-CH headers"],"updatePoint":{"line":398,"column":78,"index":24001},"line":398,"code":"  it('Only read from user-agent header when called without `withClientHints()`', function () {\n    uap = UAParser(headers);\n    browser = new UAParser(headers).getBrowser();\n    cpu = new UAParser(headers).getCPU();\n    device = new UAParser(headers).getDevice();\n    engine = new UAParser(headers).getEngine();\n    os = new UAParser(headers).getOS();\n    assert.deepEqual(uap.ua_ch, ua_ch);\n    assert.strictEqual(uap.browser.name, \"Chrome\");\n    assert.strictEqual(uap.browser.version, \"110.0.0.0\");\n    assert.strictEqual(uap.browser.major, \"110\");\n    assert.strictEqual(uap.cpu.architecture, \"amd64\");\n    assert.strictEqual(uap.device.type, undefined);\n    assert.strictEqual(uap.device.model, undefined);\n    assert.strictEqual(uap.device.vendor, undefined);\n    assert.strictEqual(uap.engine.name, 'Blink');\n    assert.strictEqual(uap.engine.version, '110.0.0.0');\n    assert.strictEqual(uap.os.name, \"Linux\");\n    assert.strictEqual(uap.os.version, \"x86_64\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Fallback to user-agent header when using `withClientHints()` but found no client hints-related headers","suites":["Map UA-CH headers"],"updatePoint":{"line":418,"column":108,"index":25006},"line":418,"code":"  it('Fallback to user-agent header when using `withClientHints()` but found no client hints-related headers', function () {\n    const headers2 = {\n      'sec-ch-ua-mobile': '?1',\n      'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36'\n    };\n    uap = UAParser(headers2).withClientHints();\n    ua_ch = {\n      \"architecture\": undefined,\n      \"bitness\": undefined,\n      \"brands\": undefined,\n      \"fullVersionList\": undefined,\n      \"mobile\": true,\n      \"model\": undefined,\n      \"platform\": undefined,\n      \"platformVersion\": undefined\n    };\n    assert.deepEqual(uap.ua_ch, ua_ch);\n    assert.strictEqual(uap.browser.name, \"Chrome\");\n    assert.strictEqual(uap.browser.version, \"110.0.0.0\");\n    assert.strictEqual(uap.browser.major, \"110\");\n    assert.strictEqual(uap.cpu.architecture, \"amd64\");\n    assert.strictEqual(uap.device.type, \"mobile\");\n    assert.strictEqual(uap.device.model, undefined);\n    assert.strictEqual(uap.device.vendor, undefined);\n    assert.strictEqual(uap.engine.name, 'Blink');\n    assert.strictEqual(uap.engine.version, '110.0.0.0');\n    assert.strictEqual(uap.os.name, \"Linux\");\n    assert.strictEqual(uap.os.version, \"x86_64\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can detect Apple silicon from client hints data","suites":["Map UA-CH headers"],"updatePoint":{"line":447,"column":53,"index":26189},"line":447,"code":"  it('Can detect Apple silicon from client hints data', function () {\n    // https://github.com/faisalman/ua-parser-js/issues/489#issuecomment-1479213579\n    const httpHeadersFromAppleSilicon = {\n      'sec-ch-ua-arch': 'arm',\n      'sec-ch-ua-platform': 'macOS',\n      'sec-ch-ua-mobile': '?0',\n      'sec-ch-ua': '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko/20100101 Firefox/97.0'\n    };\n    UAParser(httpHeadersFromAppleSilicon).withClientHints().then(function (ua) {\n      // Only works in Chrome\n      /* \n          if (ua.os.is(\"macOS\") && \n              ua.cpu.is(\"arm\") &&\n              !ua.device.is(\"mobile\") && \n              !ua.device.is(\"tablet\")) {\n                  // possibly an Apple silicon device\n              }\n      */\n\n      assert.strictEqual(ua.os.is(\"macOS\"), true);\n      assert.strictEqual(ua.cpu.is(\"arm\"), true);\n      assert.strictEqual(ua.device.is(\"mobile\"), false);\n      assert.strictEqual(ua.device.is(\"tablet\"), false);\n    });\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"does not throw when using withClientHints() in non-supported environment","suites":["Map UA-CH JS"],"updatePoint":{"line":475,"column":78,"index":27329},"line":475,"code":"  it('does not throw when using withClientHints() in non-supported environment', () => {\n    assert.doesNotThrow(() => {\n      new UAParser().getResult().withClientHints();\n    });\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can read client hints from browser","suites":["Map UA-CH JS"],"updatePoint":{"line":518,"column":40,"index":28445},"line":518,"code":"  it('Can read client hints from browser', async () => {\n    let uap = new UAParserWithWindow();\n    let os = await uap.getOS().withClientHints();\n    assert.strictEqual(os.name, 'Android');\n    assert.strictEqual(os.is('Android'), true);\n    assert.strictEqual(os.toString(), 'Android 1000');\n    let result = await uap.getResult().withClientHints();\n    assert.strictEqual(result.browser.name, 'A Chromium-based Browser');\n    assert.strictEqual(result.browser.version, '1.2.3');\n    assert.strictEqual(result.cpu.architecture, 'amd64');\n    assert.strictEqual(result.os.name, 'Android');\n    await uap.getDevice().withClientHints().then(device => {\n      assert.strictEqual(device.type, 'mobile');\n      assert.strictEqual(device.vendor, undefined);\n      assert.strictEqual(device.model, 'Galaxy S3');\n    });\n    let result_without_ch = uap.getResult();\n    assert.strictEqual(result_without_ch.browser.name, undefined);\n    uap.setUA(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\");\n    assert.strictEqual(uap.getOS().name, \"macOS\");\n\n    // TODO : create full tests\n  });","file":"test.js","skipped":false,"dir":"test"}]}