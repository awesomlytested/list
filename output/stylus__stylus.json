{"repo":"stylus/stylus","url":"https://github.com/stylus/stylus","branch":"dev","configs":[{"package":"stylus","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"accepts functions for src and dest options","suites":["middleware"],"updatePoint":{"line":6,"column":48,"index":159},"line":6,"code":"  it('accepts functions for src and dest options', function (done) {\n    var req = {\n      method: 'GET',\n      url: 'foo/bar/all.css'\n    };\n    stylus.middleware({\n      src: function (path) {\n        return 'foo/bar' + path;\n      },\n      dest: function (path) {\n        return 'baz/qux' + path;\n      }\n    })(req, res, done);\n  });","file":"middleware/index.js","skipped":false,"dir":"test"},{"name":"compiles a stylus file if it exists","suites":["middleware"],"updatePoint":{"line":20,"column":41,"index":490},"line":20,"code":"  it('compiles a stylus file if it exists', function (done) {\n    var req = {\n      method: 'GET',\n      url: '/test.css'\n    },\n        path;\n    stylus.middleware({\n      src: __dirname,\n      dest: __dirname\n    })(req, res, function () {\n      path = __dirname + '/test.css';\n      fs.readFileSync(path).toString().should.contain('color: #000');\n      fs.unlinkSync(path);\n      done();\n    });\n  });","file":"middleware/index.js","skipped":false,"dir":"test"},{"name":"should generate a sourcemap","suites":["middleware"],"updatePoint":{"line":36,"column":33,"index":887},"line":36,"code":"  it('should generate a sourcemap', function (done) {\n    var req = {\n      method: 'GET',\n      url: '/test.css'\n    },\n        path;\n    stylus.middleware({\n      sourcemap: {\n        sourceRoot: '/'\n      },\n      src: __dirname,\n      dest: __dirname\n    })(req, res, function () {\n      path = __dirname + '/test.css';\n      fs.readFileSync(path).toString().should.contain('sourceMappingURL=');\n      fs.unlinkSync(path);\n      done();\n    });\n  });","file":"middleware/index.js","skipped":false,"dir":"test"},{"name":"define a variable with object as hash","suites":["JS API"],"updatePoint":{"line":70,"column":43,"index":2733},"line":70,"code":"  it('define a variable with object as hash', function () {\n    stylus('body { foo: test-obj.baz.foo.quz; bar: test-obj.bar[0].foo  }').set('compress', true).define('test-obj', {\n      bar: [{\n        foo: 1\n      }],\n      baz: {\n        foo: {\n          quz: 'quz'\n        }\n      }\n    }, true).render().should.equal(\"body{foo:'quz';bar:1}\");\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"define a variable with object as list","suites":["JS API"],"updatePoint":{"line":82,"column":43,"index":3085},"line":82,"code":"  it('define a variable with object as list', function () {\n    stylus('body { foo: test-obj  }').set('compress', true).define('test-obj', {\n      baz: {\n        foo: {\n          quz: 'quz'\n        }\n      }\n    }).render().should.equal(\"body{foo:baz foo quz 'quz'}\");\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"use variable from options object","suites":["JS API"],"updatePoint":{"line":91,"column":38,"index":3355},"line":91,"code":"  it('use variable from options object', function () {\n    stylus.render('body { foo: bar  }', {\n      compress: true,\n      globals: {\n        'bar': 'baz'\n      }\n    }).should.equal(\"body{foo:baz}\");\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"use variable from options object inside expression","suites":["JS API"],"updatePoint":{"line":99,"column":56,"index":3582},"line":99,"code":"  it('use variable from options object inside expression', function () {\n    stylus('body { color: rgba(convert($red), .5) }', {\n      globals: {\n        $red: '#E20303'\n      },\n      compress: true\n    }).render().should.equal('body{color:rgba(226,3,3,0.5)}');\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"use functions from options object","suites":["JS API"],"updatePoint":{"line":107,"column":39,"index":3834},"line":107,"code":"  it('use functions from options object', function () {\n    stylus.render('body { foo: add(4, 3); bar: something() }', {\n      compress: true,\n      functions: {\n        add: function (a, b) {\n          return a.operate('+', b);\n        },\n        something: function () {\n          return new stylus.nodes.Ident('foobar');\n        }\n      }\n    }).should.equal(\"body{foo:7;bar:foobar}\");\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"use plugin(s) from options object","suites":["JS API"],"updatePoint":{"line":120,"column":39,"index":4229},"line":120,"code":"  it('use plugin(s) from options object', function () {\n    var plugin = function (key, value) {\n      return function (style) {\n        style.define(key, new stylus.nodes.Literal(value));\n      };\n    };\n\n    stylus('body { foo: bar  }', {\n      compress: true,\n      use: plugin('bar', 'baz')\n    }).render().should.equal('body{foo:baz}');\n    stylus('body { foo: bar; foo: qux  }', {\n      compress: true,\n      use: [plugin('bar', 'baz'), plugin('qux', 'fred')]\n    }).render().should.equal('body{foo:baz;foo:fred}');\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"import cloning with cache","suites":["JS API"],"updatePoint":{"line":136,"column":31,"index":4749},"line":136,"code":"  it('import cloning with cache', function () {\n    var path = __dirname + '/cases/import.basic/',\n        styl = readFile(path + 'clone.styl'),\n        css = 'body{background:linear-gradient(from bottom,#f00,#00f)}';\n    stylus(styl, {\n      compress: true\n    }).render().should.equal(css);\n    stylus('@import \"clone\"', {\n      compress: true,\n      paths: [path]\n    }).render().should.equal(css);\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"import cloning with cache #2","suites":["JS API"],"updatePoint":{"line":148,"column":34,"index":5160},"line":148,"code":"  it('import cloning with cache #2', function () {\n    var path = __dirname + '/cases/import.basic/',\n        styl = fs.readFileSync(path + 'clone2.styl', 'utf-8').replace(/\\r/g, ''),\n        css = 'body{color:#f00}body{color:#00f}body{color:#00f}body{color:#00f}body{color:#008000}';\n    stylus(styl, {\n      compress: true\n    }).render().should.equal(css);\n    stylus('@import \"clone2\"', {\n      compress: true,\n      paths: [path]\n    }).render().should.equal(css);\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"import loop detection","suites":["JS API"],"updatePoint":{"line":160,"column":27,"index":5629},"line":160,"code":"  it('import loop detection', function () {\n    var path = __dirname + '/cases/import.loop/',\n        styl = fs.readFileSync(path + 'test.styl', 'utf-8');\n    (function () {\n      stylus(styl, {\n        paths: [path]\n      }).render();\n    }).should.throw(/import loop has been found/);\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"conditional assignment with define","suites":["JS API"],"updatePoint":{"line":169,"column":40,"index":5935},"line":169,"code":"  it('conditional assignment with define', function () {\n    stylus('foo ?= baz; body { test: foo }', {\n      compress: true\n    }).define('foo', new stylus.nodes.Literal('bar')).render().should.equal(\"body{test:bar}\");\n  });","file":"run.js","skipped":false,"dir":"test"},{"name":"sourcemap with dest option set to a file name","suites":["JS API"],"updatePoint":{"line":174,"column":51,"index":6172},"line":174,"code":"  it('sourcemap with dest option set to a file name', function () {\n    var style = stylus('body { color: red }', {\n      compress: true,\n      sourcemap: true,\n      filename: 'test.styl',\n      dest: 'test/build.css'\n    });\n    style.render().should.equal('body{color:#f00}/*# sourceMappingURL=build.css.map */');\n    style.sourcemap.sources[0].should.equal('../test.styl');\n  });","file":"run.js","skipped":false,"dir":"test"}]}