{"repo":"d3/d3","url":"https://github.com/d3/d3","branch":"main","configs":[{"package":"d3","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"d3 exports everything from ","suites":[],"updatePoint":{"line":9,"column":46,"index":429},"line":9,"code":"  it(`d3 exports everything from ${moduleName}`, async () => {\n    const module = await import(moduleName);\n    for (const propertyName in module) {\n      if (propertyName !== \"version\") {\n        assert(propertyName in d3, `${moduleName} exports ${propertyName}`);\n      }\n    }\n  });","file":"d3-test.js","skipped":false,"dir":"test"},{"name":"documentation links point to existing internal anchors","suites":[],"updatePoint":{"line":3,"column":58,"index":143},"line":3,"code":"it(\"documentation links point to existing internal anchors\", async () => {\n  const root = \"docs\";\n\n  // Crawl all files, read their links and anchors.\n  const anchors = new Map();\n  const links = [];\n  for await (const file of readMarkdownFiles(root)) {\n    const text = await readMarkdownSource(root + file);\n    anchors.set(file, getAnchors(text));\n    for (const {\n      pathname,\n      hash\n    } of getLinks(file, text)) {\n      links.push({\n        source: file,\n        target: pathname,\n        hash\n      });\n    }\n  }\n\n  // Check for broken links.\n  let errors = [];\n  for (let {\n    source,\n    target,\n    hash\n  } of links) {\n    if (!target.endsWith(\".md\")) {\n      errors.push(`- ${source} points to ${target} instead of ${target}.md.`);\n      target += \".md\";\n    }\n    if (anchors.get(target)?.includes(hash.slice(1))) continue;\n    errors.push(`- ${source} points to missing ${target}${hash}.`);\n  }\n  assert(errors.length === 0, new Error(`${errors.length} broken links:\\n${errors.join(\"\\n\")}`));\n});","file":"docs-test.js","skipped":false,"dir":"test"}]}