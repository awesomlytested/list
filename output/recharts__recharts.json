{"repo":"recharts/recharts","url":"https://github.com/recharts/recharts","branch":"master","configs":[{"package":"recharts","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Render customized label when label is set to be a function","suites":["<Area />"],"updatePoint":{"line":27,"column":64,"index":473},"line":27,"code":"  it('Render customized label when label is set to be a function', () => {\n    const renderLabel = props => {\n      const {\n        index,\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, index);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      baseLine: 200,\n      points: data,\n      label: renderLabel\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Area />"],"updatePoint":{"line":51,"column":69,"index":1147},"line":51,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const Label = props => {\n      const {\n        index,\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, index);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      baseLine: 200,\n      points: data,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"Render customized dot when dot is set to be a function","suites":["<Area />"],"updatePoint":{"line":75,"column":60,"index":1840},"line":75,"code":"  it('Render customized dot when dot is set to be a function', () => {\n    const renderDot = props => {\n      const {\n        cx,\n        cy\n      } = props;\n      return /*#__PURE__*/React.createElement(\"circle\", {\n        x: cx,\n        y: cy,\n        r: 5,\n        className: \"customized-dot\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      baseLine: 200,\n      points: data,\n      dot: renderDot\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Area />"],"updatePoint":{"line":99,"column":69,"index":2502},"line":99,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const CustomizedDot = props => {\n      const {\n        cx,\n        cy\n      } = props;\n      return /*#__PURE__*/React.createElement(\"circle\", {\n        x: cx,\n        y: cy,\n        r: 5,\n        className: \"customized-dot\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      baseLine: 200,\n      points: data,\n      dot: /*#__PURE__*/React.createElement(CustomizedDot, null)\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when data is empty","suites":["<Area />"],"updatePoint":{"line":123,"column":47,"index":3190},"line":123,"code":"  it('Don\\'t render any path when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      points: []\n    })));\n    expect(wrapper.find('.recharts-area-area').length).to.equal(0);\n    expect(wrapper.find('.recharts-area-curve').length).to.equal(0);\n    expect(wrapper.find('.recharts-area-dot').length).to.equal(0);\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"renders the curve with the stroke on top (2nd) of the curve with the fill (1st)","suites":["<Area />"],"updatePoint":{"line":134,"column":85,"index":3679},"line":134,"code":"  it('renders the curve with the stroke on top (2nd) of the curve with the fill (1st)', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Area, {\n      points: data,\n      baseLine: 200,\n      stroke: \"teal\",\n      fill: \"teal\"\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(2);\n    expect(wrapper.find('.recharts-curve').first().prop('stroke')).to.equal('none');\n    expect(wrapper.find('.recharts-curve').first().prop('fill')).to.equal('teal');\n    expect(wrapper.find('.recharts-curve').last().prop('stroke')).to.equal('teal');\n    expect(wrapper.find('.recharts-curve').last().prop('fill')).to.equal('none');\n  });","file":"specs/cartesian/AreaSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 rectangles in a simple Bar","suites":["<Bar />"],"updatePoint":{"line":42,"column":41,"index":698},"line":42,"code":"  it('Render 5 rectangles in a simple Bar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      data: data,\n      label: {\n        label: 'test'\n      }\n    })));\n    expect(wrapper.find('.recharts-bar-rectangle').length).to.equal(5);\n  });","file":"specs/cartesian/BarSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 rectangles in a vertical Bar","suites":["<Bar />"],"updatePoint":{"line":55,"column":43,"index":1090},"line":55,"code":"  it('Render 5 rectangles in a vertical Bar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      layout: \"vertical\",\n      data: data,\n      label: true\n    })));\n    expect(wrapper.find('.recharts-bar-rectangle').length).to.equal(5);\n  });","file":"specs/cartesian/BarSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any rectangle when data is empty","suites":["<Bar />"],"updatePoint":{"line":67,"column":52,"index":1490},"line":67,"code":"  it('Don\\'t render any rectangle when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Bar, {\n      data: []\n    })));\n    expect(wrapper.find('.recharts-bar-rectangle').length).to.equal(0);\n  });","file":"specs/cartesian/BarSpec.js","skipped":false,"dir":"test"},{"name":"Will create a background Rectangle with the passed in props","suites":["<Bar />","With background"],"updatePoint":{"line":104,"column":67,"index":2314},"line":104,"code":"    it('Will create a background Rectangle with the passed in props', () => {\n      const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n        width: 500,\n        height: 500\n      }, /*#__PURE__*/React.createElement(Bar, {\n        data: composedDataWithBackground,\n        background: {\n          fill: '#000'\n        }\n      })));\n      expect(wrapper.find('.recharts-bar-background-rectangle').length).to.equal(2);\n    });","file":"specs/cartesian/BarSpec.js","skipped":false,"dir":"test"},{"name":"Will accept a function for the background prop","suites":["<Bar />","With background"],"updatePoint":{"line":116,"column":54,"index":2744},"line":116,"code":"    it('Will accept a function for the background prop', () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n        width: 500,\n        height: 500\n      }, /*#__PURE__*/React.createElement(Bar, {\n        data: composedDataWithBackground,\n        background: ({\n          index\n        }) => {\n          return index === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"test-custom-background\"\n          }) : null;\n        }\n      })));\n      expect(wrapper.find('.recharts-bar-background-rectangle').length).to.equal(0);\n      expect(wrapper.find('.test-custom-background').length).to.equal(1);\n    });","file":"specs/cartesian/BarSpec.js","skipped":false,"dir":"test"},{"name":"Render 2 travellers and 1 slide in simple Brush","suites":["<Brush />"],"updatePoint":{"line":7,"column":53,"index":679},"line":7,"code":"  it('Render 2 travellers and 1 slide in simple Brush', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    expect(wrapper.find('.recharts-brush-traveller').length).to.equal(2);\n    expect(wrapper.find('.recharts-brush-slide').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any travellers or slide when data is empty in simple Brush","suites":["<Brush />"],"updatePoint":{"line":18,"column":77,"index":1076},"line":18,"code":"  it(\"Don't render any travellers or slide when data is empty in simple Brush\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: []\n    }));\n    expect(wrapper.find('.recharts-brush-traveller').length).to.equal(0);\n    expect(wrapper.find('.recharts-brush-slide').length).to.equal(0);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Render panorama when specified LineChart as child","suites":["<Brush />"],"updatePoint":{"line":29,"column":55,"index":1449},"line":29,"code":"  it('Render panorama when specified LineChart as child', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }, /*#__PURE__*/React.createElement(LineChart, null, /*#__PURE__*/React.createElement(Line, null))));\n    expect(wrapper.find('.recharts-line').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter and mouse leave on traveller will set isTextActive true","suites":["<Brush />"],"updatePoint":{"line":39,"column":73,"index":1858},"line":39,"code":"  it('mouse enter and mouse leave on traveller will set isTextActive true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const layers = wrapper.find('.recharts-brush-traveller');\n    const treavellerLayer = layers.at(1);\n    treavellerLayer.simulate('mouseEnter');\n    expect(wrapper.state().isTextActive).to.equal(true);\n    treavellerLayer.simulate('mouseLeave');\n    expect(wrapper.state().isTextActive).to.equal(false);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse down on brush traveller will set isTravellerMoving true","suites":["<Brush />"],"updatePoint":{"line":54,"column":67,"index":2407},"line":54,"code":"  it('mouse down on brush traveller will set isTravellerMoving true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const layers = wrapper.find('.recharts-brush-traveller');\n    const treavellerLayer = layers.at(1);\n    treavellerLayer.simulate('mouseDown');\n    expect(wrapper.state().isTravellerMoving).to.equal(true);\n    wrapper.simulate('mouseMove');\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"mouse down on brush slide will set isSlideMoving true","suites":["<Brush />"],"updatePoint":{"line":68,"column":59,"index":2885},"line":68,"code":"  it('mouse down on brush slide will set isSlideMoving true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data\n    }));\n    const slide = wrapper.find('.recharts-brush-slide');\n    slide.simulate('mouseDown');\n    expect(wrapper.state().isSlideMoving).to.equal(true);\n    wrapper.simulate('mouseMove');\n    wrapper.simulate('mouseLeave');\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"render text when alwaysShowText is true","suites":["<Brush />"],"updatePoint":{"line":82,"column":45,"index":3324},"line":82,"code":"  it('render text when alwaysShowText is true', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Brush, {\n      x: 100,\n      y: 50,\n      width: 400,\n      height: 40,\n      data: data,\n      alwaysShowText: true\n    }));\n    expect(wrapper.find('.recharts-layer.recharts-brush-texts').length).to.equal(1);\n  });","file":"specs/cartesian/BrushSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in simple CartesianAxis","suites":["<CartesianAxis />"],"updatePoint":{"line":23,"column":45,"index":489},"line":23,"code":"  it('Renders 5 ticks in simple CartesianAxis', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders no ticks in simple CartesianAxis","suites":["<CartesianAxis />"],"updatePoint":{"line":44,"column":46,"index":1082},"line":44,"code":"  it('Renders no ticks in simple CartesianAxis', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: [],\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(0);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders ticks when interval=\"preserveStartEnd\"","suites":["<CartesianAxis />"],"updatePoint":{"line":64,"column":52,"index":1614},"line":64,"code":"  it('Renders ticks when interval=\"preserveStartEnd\"', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"test\",\n      interval: \"preserveStartEnd\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"gets font states from its ComputedStyle","suites":["<CartesianAxis />"],"updatePoint":{"line":85,"column":45,"index":2178},"line":85,"code":"  it('gets font states from its ComputedStyle', () => {\n    const stub = sinon.stub(window, 'getComputedStyle').returns({\n      fontSize: '14px',\n      letterSpacing: '0.5em'\n    });\n    const wrapper = mount( /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks\n    }));\n    expect(wrapper.state().fontSize).to.equal('14px');\n    expect(wrapper.state().letterSpacing).to.equal('0.5em');\n    stub.restore();\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders ticks when interval=\"preserveStart\"","suites":["<CartesianAxis />"],"updatePoint":{"line":106,"column":49,"index":2771},"line":106,"code":"  it('Renders ticks when interval=\"preserveStart\"', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"test\",\n      interval: \"preserveStart\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in a CartesianAxis which has orientation top","suites":["<CartesianAxis />"],"updatePoint":{"line":127,"column":66,"index":3353},"line":127,"code":"  it('Renders 5 ticks in a CartesianAxis which has orientation top', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"top\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"top\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in a CartesianAxis which has orientation left","suites":["<CartesianAxis />"],"updatePoint":{"line":148,"column":67,"index":3963},"line":148,"code":"  it('Renders 5 ticks in a CartesianAxis which has orientation left', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"left\",\n      y: 100,\n      width: 50,\n      height: 400,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"left\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in a CartesianAxis which has orientation right","suites":["<CartesianAxis />"],"updatePoint":{"line":169,"column":68,"index":4576},"line":169,"code":"  it('Renders 5 ticks in a CartesianAxis which has orientation right', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"right\",\n      y: 100,\n      width: 50,\n      height: 400,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: \"right\"\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is a function","suites":["<CartesianAxis />"],"updatePoint":{"line":190,"column":44,"index":5167},"line":190,"code":"  it('Renders label when label is a function', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-label\",\n        x: x,\n        y: y\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"left\",\n      y: 100,\n      width: 50,\n      height: 400,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: renderLabel\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.customized-label').length).to.equal(1);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is a react element","suites":["<CartesianAxis />"],"updatePoint":{"line":224,"column":49,"index":6033},"line":224,"code":"  it('Renders label when label is a react element', () => {\n    const Label = props => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-label\",\n        x: x,\n        y: y\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"right\",\n      y: 100,\n      width: 50,\n      height: 400,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(5);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render customized ticks when tick is set to be a ReactElement","suites":["<CartesianAxis />"],"updatePoint":{"line":257,"column":67,"index":6880},"line":257,"code":"  it('Render customized ticks when tick is set to be a ReactElement', () => {\n    const CustomizedTick = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-tick\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      tick: /*#__PURE__*/React.createElement(CustomizedTick, null),\n      interval: 0\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render customized ticks when ticks is an array of strings and interval is 0","suites":["<CartesianAxis />"],"updatePoint":{"line":286,"column":81,"index":7683},"line":286,"code":"  it('Render customized ticks when ticks is an array of strings and interval is 0', () => {\n    const CustomizedTick = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-tick\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ['tick 1', 'tick 2', 'tick 3'],\n      tick: /*#__PURE__*/React.createElement(CustomizedTick, null),\n      interval: 0\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(3);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render customized ticks when tick is set to be a function","suites":["<CartesianAxis />"],"updatePoint":{"line":315,"column":63,"index":8482},"line":315,"code":"  it('Render customized ticks when tick is set to be a function', () => {\n    const renderCustomizedTick = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-tick\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      ticks: ticks,\n      tick: renderCustomizedTick,\n      interval: 0\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders no ticks when tick is set to false","suites":["<CartesianAxis />"],"updatePoint":{"line":344,"column":48,"index":9224},"line":344,"code":"  it('Renders no ticks when tick is set to false', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianAxis, {\n      orientation: \"bottom\",\n      y: 100,\n      width: 400,\n      height: 50,\n      viewBox: {\n        x: 0,\n        y: 0,\n        width: 500,\n        height: 500\n      },\n      tick: false\n    })));\n    expect(wrapper.find('.recharts-cartesian-axis-tick').length).to.equal(0);\n  });","file":"specs/cartesian/CartesianAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 horizontal lines and 4 vertical lines in simple CartesianGrid","suites":["<CartesianGrid />"],"updatePoint":{"line":8,"column":76,"index":355},"line":8,"code":"  it('Render 5 horizontal lines and 4 vertical lines in simple CartesianGrid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      x: 0,\n      y: 0,\n      width: 500,\n      height: 500,\n      verticalPoints: verticalPoints,\n      horizontalPoints: horizontalPoints\n    })));\n    expect(wrapper.find('line').length).to.equal(9);\n  });","file":"specs/cartesian/CartesianGridSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any lines when verticalPoints and horizontalPoints are empty","suites":["<CartesianGrid />"],"updatePoint":{"line":22,"column":80,"index":820},"line":22,"code":"  it('Don\\'t render any lines when verticalPoints and horizontalPoints are empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      width: 500,\n      height: 500\n    })));\n    expect(wrapper.find('line').length).to.equal(0);\n  });","file":"specs/cartesian/CartesianGridSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any lines when width or height is smaller than 0","suites":["<CartesianGrid />"],"updatePoint":{"line":32,"column":68,"index":1169},"line":32,"code":"  it('Don\\'t render any lines when width or height is smaller than 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      width: 0,\n      height: 500\n    })));\n    expect(wrapper.find('line').length).to.equal(0);\n  });","file":"specs/cartesian/CartesianGridSpec.js","skipped":false,"dir":"test"},{"name":"Renders Error Bars in Bar","suites":["<ErrorBar />"],"updatePoint":{"line":35,"column":31,"index":682},"line":35,"code":"  it('Renders Error Bars in Bar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      data: barData,\n      width: 500,\n      height: 500,\n      layout: \"vertical\"\n    }, /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      label: {\n        label: 'test'\n      },\n      dataKey: \"uv\"\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"uvError\"\n    }))));\n    expect(wrapper.find('.recharts-errorBar').length).to.equal(4);\n  });","file":"specs/cartesian/ErrorBarSpec.js","skipped":false,"dir":"test"},{"name":"Renders Multiple Error Bars in Bar","suites":["<ErrorBar />"],"updatePoint":{"line":52,"column":40,"index":1195},"line":52,"code":"  it('Renders Multiple Error Bars in Bar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      data: barData,\n      width: 500,\n      height: 500,\n      layout: \"vertical\"\n    }, /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      label: {\n        label: 'test'\n      },\n      dataKey: \"uv\"\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"uvError\"\n    }), /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"pvError\"\n    }))));\n    expect(wrapper.find('.recharts-errorBar').length).to.equal(8);\n  });","file":"specs/cartesian/ErrorBarSpec.js","skipped":false,"dir":"test"},{"name":"Renders Error Bars in Line","suites":["<ErrorBar />"],"updatePoint":{"line":107,"column":32,"index":2334},"line":107,"code":"  it('Renders Error Bars in Line', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      data: lineData,\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: {\n        label: 'test'\n      },\n      dataKey: \"uv\"\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"uvError\"\n    }))));\n    expect(wrapper.find('.recharts-errorBar').length).to.equal(5);\n  });","file":"specs/cartesian/ErrorBarSpec.js","skipped":false,"dir":"test"},{"name":"Renders Multiple Error Bars in Line","suites":["<ErrorBar />"],"updatePoint":{"line":123,"column":41,"index":2825},"line":123,"code":"  it('Renders Multiple Error Bars in Line', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      data: lineData,\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: {\n        label: 'test'\n      },\n      dataKey: \"uv\"\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"uvError\"\n    }), /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"pvError\"\n    }))));\n    expect(wrapper.find('.recharts-errorBar').length).to.equal(10);\n  });","file":"specs/cartesian/ErrorBarSpec.js","skipped":false,"dir":"test"},{"name":"Render a path in a simple Line","suites":["<Line />"],"updatePoint":{"line":27,"column":36,"index":445},"line":27,"code":"  it('Render a path in a simple Line', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      points: data\n    })));\n    expect(wrapper.find('.recharts-line-curve').length).to.equal(1);\n  });","file":"specs/cartesian/LineSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when data is empty","suites":["<Line />"],"updatePoint":{"line":37,"column":47,"index":795},"line":37,"code":"  it('Don\\'t render any path when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Line, {\n      points: []\n    })));\n    expect(wrapper.find('.recharts-line-curve').length).to.equal(0);\n  });","file":"specs/cartesian/LineSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 rect in ReferenceArea","suites":["<ReferenceArea />"],"updatePoint":{"line":51,"column":36,"index":823},"line":51,"code":"  it('Render 1 rect in ReferenceArea', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"201106\",\n      x2: \"201110\",\n      fill: \"#666\",\n      label: \"201106\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      y1: 0,\n      y2: 2,\n      fill: \"#666\",\n      label: \"201106\"\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any rect in ReferenceArea when no x1, x2, y1 or y2 is set","suites":["<ReferenceArea />"],"updatePoint":{"line":86,"column":77,"index":1857},"line":86,"code":"  it('Don\\'t render any rect in ReferenceArea when no x1, x2, y1 or y2 is set', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      stroke: \"#666\",\n      label: \"0\"\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Render a rect in ReferenceArea when x1, x2, y1 or y2 is set","suites":["<ReferenceArea />"],"updatePoint":{"line":114,"column":65,"index":2710},"line":114,"code":"  it('Render a rect in ReferenceArea when x1, x2, y1 or y2 is set', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"201106\",\n      stroke: \"#666\",\n      label: \"0\"\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(1);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any line or label when reference area is outside domain in ReferenceArea","suites":["<ReferenceArea />"],"updatePoint":{"line":143,"column":91,"index":3609},"line":143,"code":"  it(\"Don't render any line or label when reference area is outside domain in ReferenceArea\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"bottom\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      y1: 200,\n      y2: 300,\n      fill: \"#666\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"20150201\",\n      x2: \"20150201\",\n      fill: \"#666\"\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Render line and label when alwaysShow is true in ReferenceArea","suites":["<ReferenceArea />"],"updatePoint":{"line":176,"column":68,"index":4599},"line":176,"code":"  it('Render line and label when alwaysShow is true in ReferenceArea', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      y1: 200,\n      y2: 300,\n      fill: \"#666\",\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line and 1 label when label is set to be a function in ReferenceArea","suites":["<ReferenceArea />"],"updatePoint":{"line":203,"column":83,"index":5386},"line":203,"code":"  it('Render 1 line and 1 label when label is set to be a function in ReferenceArea', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-reference-area-label\",\n        x: x,\n        y: y\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"201106\",\n      x2: \"201110\",\n      fill: \"#666\",\n      label: renderLabel\n    })));\n    expect(wrapper.find('.recharts-reference-area-rect').length).to.equal(1);\n    expect(wrapper.find('.customized-reference-area-label').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render 1 label when label is set to be a object","suites":["<ReferenceArea />"],"updatePoint":{"line":242,"column":59,"index":6490},"line":242,"code":"  it(\"Don't Render 1 label when label is set to be a object\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"201106\",\n      x2: \"201110\",\n      fill: \"#666\",\n      label: {\n        a: 1\n      }\n    })));\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Render custom lable when label is set to react element","suites":["<ReferenceArea />"],"updatePoint":{"line":271,"column":60,"index":7263},"line":271,"code":"  it('Render custom lable when label is set to react element', () => {\n    const Label = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", props, text);\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceArea, {\n      x1: \"201106\",\n      x2: \"201110\",\n      fill: \"#666\",\n      label: /*#__PURE__*/React.createElement(Label, {\n        text: \"Custom Text\"\n      }),\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.recharts-reference-area text').text()).to.equal('Custom Text');\n  });","file":"specs/cartesian/ReferenceAreaSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 dot and 1 label in ReferenceDot","suites":["<ReferenceDot />"],"updatePoint":{"line":52,"column":46,"index":1171},"line":52,"code":"  it('Render 1 dot and 1 label in ReferenceDot', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 3,\n      stroke: \"#666\",\n      label: \"201106\"\n    })));\n    expect(wrapper.find('.recharts-reference-dot-dot').length).to.equal(1);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any dot or label when reference dot is outside domain in ReferenceDot","suites":["<ReferenceDot />"],"updatePoint":{"line":80,"column":88,"index":2026},"line":80,"code":"  it(\"Don't render any dot or label when reference dot is outside domain in ReferenceDot\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 20,\n      stroke: \"#666\",\n      label: \"201106\"\n    })));\n    expect(wrapper.find('.recharts-reference-dot-dot').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line and 1 label when alwaysShow is true in ReferenceDot","suites":["<ReferenceDot />"],"updatePoint":{"line":109,"column":71,"index":2893},"line":109,"code":"  it('Render 1 line and 1 label when alwaysShow is true in ReferenceDot', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 20,\n      stroke: \"#666\",\n      label: \"201106\",\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.recharts-reference-dot-dot').length).to.equal(1);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Render custom lable when label is set to be a react element","suites":["<ReferenceDot />"],"updatePoint":{"line":138,"column":65,"index":3750},"line":138,"code":"  it('Render custom lable when label is set to be a react element', () => {\n    const Label = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", _extends({\n      className: \"customized-label\"\n    }, props), text);\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 20,\n      stroke: \"#666\",\n      label: /*#__PURE__*/React.createElement(Label, {\n        text: \"Custom Text\"\n      }),\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.customized-label').text()).to.equal('Custom Text');\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Render custom lable when label is set to be a function","suites":["<ReferenceDot />"],"updatePoint":{"line":174,"column":60,"index":4778},"line":174,"code":"  it('Render custom lable when label is set to be a function', () => {\n    const renderLabel = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", _extends({\n      className: \"customized-label\"\n    }, props), \"Custom Text\");\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 20,\n      stroke: \"#666\",\n      label: renderLabel,\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.customized-label').text()).to.equal('Custom Text');\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any label when label is a plain object","suites":["<ReferenceDot />"],"updatePoint":{"line":208,"column":58,"index":5752},"line":208,"code":"  it(\"Don\\'t render any label when label is a plain object\", () => {\n    const renderLabel = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", _extends({\n      className: \"customized-label\"\n    }, props), \"Custom Text\");\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      y: 20,\n      stroke: \"#666\",\n      label: {},\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any dot when x or y is not specified","suites":["<ReferenceDot />"],"updatePoint":{"line":242,"column":56,"index":6701},"line":242,"code":"  it(\"Don\\'t render any dot when x or y is not specified\", () => {\n    const renderLabel = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", _extends({\n      className: \"customized-label\"\n    }, props), \"Custom Text\");\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      x: \"201106\",\n      stroke: \"#666\",\n      alwaysShow: true\n    }), /*#__PURE__*/React.createElement(ReferenceDot, {\n      y: 20,\n      stroke: \"#666\",\n      alwaysShow: true\n    })));\n    expect(wrapper.find('.recharts-reference-dot-dot').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceDotSpec.js","skipped":false,"dir":"test"},{"name":"Renders 1 line in ReferenceLine","suites":["<ReferenceLine />"],"updatePoint":{"line":51,"column":37,"index":824},"line":51,"code":"  it('Renders 1 line in ReferenceLine', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: \"201106\",\n      stroke: \"#666\",\n      label: \"201106\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 0,\n      stroke: \"#666\",\n      label: \"0\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Renders 1 line in ReferenceLine in vertical barchart","suites":["<ReferenceLine />"],"updatePoint":{"line":85,"column":58,"index":1833},"line":85,"code":"  it('Renders 1 line in ReferenceLine in vertical barchart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      layout: \"vertical\",\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      type: \"number\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\",\n      dataKey: \"name\",\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: \"201106\",\n      stroke: \"#666\",\n      label: \"201106\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: 0,\n      stroke: \"#666\",\n      label: \"0\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Renders line segment in ReferenceLine when segment is set","suites":["<ReferenceLine />"],"updatePoint":{"line":122,"column":63,"index":2919},"line":122,"code":"  it('Renders line segment in ReferenceLine when segment is set', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: \"201106\",\n      stroke: \"#666\",\n      label: \"201106\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 0,\n      stroke: \"#666\",\n      label: \"0\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Don't renders 1 line in ReferenceLine when no x or y is set","suites":["<ReferenceLine />"],"updatePoint":{"line":156,"column":66,"index":3936},"line":156,"code":"  it('Don\\'t renders 1 line in ReferenceLine when no x or y is set', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"top\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      stroke: \"#666\",\n      label: \"0\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any line or label when reference line is outside domain in ReferenceLine","suites":["<ReferenceLine />"],"updatePoint":{"line":185,"column":91,"index":4845},"line":185,"code":"  it(\"Don't render any line or label when reference line is outside domain in ReferenceLine\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      orientation: \"bottom\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7,\n      orientation: \"right\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 200,\n      stroke: \"#666\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: \"20150201\",\n      stroke: \"#666\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Render line and label when ifOverflow is extendDomain in ReferenceLine","suites":["<ReferenceLine />"],"updatePoint":{"line":216,"column":76,"index":5808},"line":216,"code":"  it('Render line and label when ifOverflow is extendDomain in ReferenceLine', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: \"201102\",\n      label: \"test\",\n      stroke: \"#666\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 20,\n      stroke: \"#666\",\n      label: \"20\",\n      ifOverflow: \"extendDomain\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Render line and label when (deprecated) alwaysShow is true in ReferenceLine","suites":["<ReferenceLine />"],"updatePoint":{"line":249,"column":81,"index":6820},"line":249,"code":"  it('Render line and label when (deprecated) alwaysShow is true in ReferenceLine', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      x: \"201102\",\n      label: \"test\",\n      stroke: \"#666\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 20,\n      stroke: \"#666\",\n      label: \"20\",\n      alwaysShow: true,\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(2);\n    expect(wrapper.find('.recharts-label').length).to.equal(2);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line and 1 label when label is set to be a function in ReferenceLine","suites":["<ReferenceLine />"],"updatePoint":{"line":282,"column":83,"index":7824},"line":282,"code":"  it('Render 1 line and 1 label when label is set to be a function in ReferenceLine', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-reference-line-label\",\n        x: x,\n        y: y\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 20,\n      stroke: \"#666\",\n      label: renderLabel,\n      ifOverflow: \"visible\",\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-reference-line-line').length).to.equal(1);\n    expect(wrapper.find('.customized-reference-line-label').length).to.equal(1);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render 1 label when label is set to be a object","suites":["<ReferenceLine />"],"updatePoint":{"line":322,"column":59,"index":8962},"line":322,"code":"  it(\"Don't Render 1 label when label is set to be a object\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 20,\n      stroke: \"#666\",\n      label: {\n        a: 1\n      },\n      labelPosition: \"start\"\n    })));\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Render custom lable when label is set to react element","suites":["<ReferenceLine />"],"updatePoint":{"line":351,"column":60,"index":9740},"line":351,"code":"  it('Render custom lable when label is set to react element', () => {\n    const Label = ({\n      text,\n      ...props\n    }) => /*#__PURE__*/React.createElement(\"text\", props, text);\n    const wrapper = render( /*#__PURE__*/React.createElement(BarChart, {\n      width: 1100,\n      height: 250,\n      barGap: 2,\n      barSize: 6,\n      data: data,\n      margin: {\n        top: 20,\n        right: 60,\n        bottom: 0,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickCount: 7\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"uv\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 20,\n      stroke: \"#666\",\n      ifOverflow: \"visible\",\n      label: /*#__PURE__*/React.createElement(Label, {\n        text: \"Custom Text\"\n      })\n    })));\n    expect(wrapper.find('.recharts-reference-line text').text()).to.equal('Custom Text');\n  });","file":"specs/cartesian/ReferenceLineSpec.js","skipped":false,"dir":"test"},{"name":"Render symbols in a simple Scatter","suites":["<Scatter />"],"updatePoint":{"line":52,"column":40,"index":771},"line":52,"code":"  it('Render symbols in a simple Scatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      points: data\n    })));\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbols when data is empty","suites":["<Scatter />"],"updatePoint":{"line":61,"column":50,"index":1109},"line":61,"code":"  it('Don\\'t render any symbols when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      points: []\n    })));\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(0);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized symbols when shape is set to be a ReactElement","suites":["<Scatter />"],"updatePoint":{"line":70,"column":70,"index":1455},"line":70,"code":"  it('Render customized symbols when shape is set to be a ReactElement', () => {\n    const CustomizedShape = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 5,\n      className: \"customized-shape\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      shape: /*#__PURE__*/React.createElement(CustomizedShape, null),\n      points: data\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized symbols when shape is set to be a function","suites":["<Scatter />"],"updatePoint":{"line":90,"column":66,"index":2093},"line":90,"code":"  it('Render customized symbols when shape is set to be a function', () => {\n    const renderCustomizedShape = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 5,\n      className: \"customized-shape\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      shape: renderCustomizedShape,\n      points: data\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(data.length);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized line when line is set to be a ReactElement","suites":["<Scatter />"],"updatePoint":{"line":110,"column":66,"index":2703},"line":110,"code":"  it('Render customized line when line is set to be a ReactElement', () => {\n    const CustomizedLine = ({\n      points\n    }) => /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0,0L200,200\",\n      className: \"customized-line\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      line: /*#__PURE__*/React.createElement(CustomizedLine, null),\n      points: data\n    })));\n    expect(wrapper.find('.customized-line').length).to.equal(1);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render customized line when line is set to be a function","suites":["<Scatter />"],"updatePoint":{"line":127,"column":62,"index":3299},"line":127,"code":"  it('Render customized line when line is set to be a function', () => {\n    const renderCustomizedLine = ({\n      points\n    }) => /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0,0L200,200\",\n      className: \"customized-line\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      line: renderCustomizedLine,\n      points: data\n    })));\n    expect(wrapper.find('.customized-line').length).to.equal(1);\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter or mouse leave a symbol","suites":["<Scatter />"],"updatePoint":{"line":144,"column":41,"index":3846},"line":144,"code":"  it('mouse enter or mouse leave a symbol', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Scatter, {\n      isAnimationActive: false,\n      points: data\n    })));\n    const layers = wrapper.find(Layer);\n    const syb = layers.at(5);\n    syb.simulate('mouseEnter');\n    syb.simulate('mouseLeave');\n    syb.simulate('click');\n  });","file":"specs/cartesian/ScatterSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart","suites":["<XAxis />"],"updatePoint":{"line":63,"column":74,"index":1052},"line":63,"code":"  it('Render 1 x-CartesianAxis and 1 y-CartesianAxis ticks in ScatterChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find(CartesianAxis).length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<XAxis />"],"updatePoint":{"line":88,"column":27,"index":1710},"line":88,"code":"  it(\"Don't render anything\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render x-axis when hide is setted to be true","suites":["<XAxis />"],"updatePoint":{"line":100,"column":56,"index":2141},"line":100,"code":"  it(\"Don't render x-axis when hide is setted to be true\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      hide: true\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-x-axis').length).to.equal(0);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of XAxis when specify ticks","suites":["<XAxis />"],"updatePoint":{"line":120,"column":46,"index":2693},"line":120,"code":"  it('Render ticks of XAxis when specify ticks', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      ticks: [0, 4]\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').length).to.equal(2);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks with tickFormatter","suites":["<XAxis />"],"updatePoint":{"line":140,"column":37,"index":3259},"line":140,"code":"  it('Render ticks with tickFormatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: lineData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      tickFormatter: (value, i) => `${i}`\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.xAxis .recharts-cartesian-axis-tick').first()).text().to.equal('0');\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render duplicated ticks of XAxis","suites":["<XAxis />"],"updatePoint":{"line":161,"column":38,"index":3881},"line":161,"code":"  it('Render duplicated ticks of XAxis', () => {\n    const lineData = [{\n      name: '03/07/2017',\n      balance: 23126.11\n    }, {\n      name: '03/02/2017',\n      balance: 23137.39\n    }, {\n      name: '03/01/2017',\n      balance: 24609.55\n    }, {\n      name: '03/01/2017',\n      balance: 26827.66\n    }, {\n      name: '02/24/2017',\n      balance: 26807.66\n    }, {\n      name: '02/21/2017',\n      balance: 23835.62\n    }, {\n      name: '02/16/2017',\n      balance: 23829.62\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: lineData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      interval: 0\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"balance\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(lineData.length);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks of when the scale of XAxis is time","suites":["<XAxis />"],"updatePoint":{"line":207,"column":53,"index":5034},"line":207,"code":"  it('Render ticks of when the scale of XAxis is time', () => {\n    const timeData = [{\n      x: new Date('2019-07-04T00:00:00.000Z'),\n      y: 5\n    }, {\n      x: new Date('2019-07-05T00:00:00.000Z'),\n      y: 30\n    }, {\n      x: new Date('2019-07-06T00:00:00.000Z'),\n      y: 50\n    }, {\n      x: new Date('2019-07-07T00:00:00.000Z'),\n      y: 43\n    }, {\n      x: new Date('2019-07-08T00:00:00.000Z'),\n      y: 20\n    }, {\n      x: new Date('2019-07-09T00:00:00.000Z'),\n      y: -20\n    }, {\n      x: new Date('2019-07-10T00:00:00.000Z'),\n      y: 30\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: timeData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      domain: [timeData[0].x.getTime(), timeData[timeData.length - 1].x.getTime()],\n      scale: \"time\",\n      type: \"number\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"y\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      }\n    })));\n    expect(wrapper.find('.recharts-xAxis .recharts-cartesian-axis-tick').length).to.equal(1);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with gap","suites":["<XAxis />"],"updatePoint":{"line":255,"column":26,"index":6308},"line":255,"code":"  it('Render Bars with gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(70);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render Bars with no gap","suites":["<XAxis />"],"updatePoint":{"line":272,"column":29,"index":6852},"line":272,"code":"  it('Render Bars with no gap', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(BarChart, {\n      width: 300,\n      height: 300,\n      data: data\n    }, /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"y\"\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      padding: \"no-gap\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\"\n    })));\n    expect(parseInt(wrapper.find(Bar).prop('data')[0].x, 10)).to.equal(66);\n  });","file":"specs/cartesian/XAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 3 y-CartesianAxis in AreaChart","suites":["<YAxis />"],"updatePoint":{"line":32,"column":43,"index":617},"line":32,"code":"  it('Render 3 y-CartesianAxis in AreaChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      yAxisId: 0,\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      orient: \"right\",\n      yAxisId: 1,\n      stroke: \"#387908\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      orient: \"right\",\n      yAxisId: 2,\n      stroke: \"#38abc8\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\",\n      strokeWidth: 2,\n      yAxisId: 0\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#387908\",\n      fill: \"#387908\",\n      strokeWidth: 2,\n      yAxisId: 1\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"amt\",\n      stroke: \"#38abc8\",\n      fill: \"#38abc8\",\n      strokeWidth: 2,\n      yAxisId: 2\n    })));\n    expect(wrapper.find(CartesianAxis).length).to.equal(3);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks","suites":["<YAxis />"],"updatePoint":{"line":72,"column":20,"index":1710},"line":72,"code":"  it('Render 4 ticks', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(297.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, 10000]}","suites":["<YAxis />"],"updatePoint":{"line":89,"column":45,"index":2250},"line":89,"code":"  it('Render 4 ticks when domain={[0, 10000]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 10000]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.last().props().children).to.equal('10000');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, \"dataMax\"]}","suites":["<YAxis />"],"updatePoint":{"line":111,"column":49,"index":2945},"line":111,"code":"  it('Render 4 ticks when domain={[0, \"dataMax\"]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(3);\n    expect(ticks.last().props().children).to.equal('9800');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks when domain={[0, \"dataMax - 100\"]}","suites":["<YAxis />"],"updatePoint":{"line":133,"column":55,"index":3649},"line":133,"code":"  it('Render 4 ticks when domain={[0, \"dataMax - 100\"]}', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax - 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"pv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(3);\n    expect(ticks.last().props().children).to.equal('9800');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, 1000]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":155,"column":70,"index":4374},"line":155,"code":"  it('Render 1 ticks when domain={[0, 1000]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 1000]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(297.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, \"dataMax + 100\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":172,"column":81,"index":4958},"line":172,"code":"  it('Render 1 ticks when domain={[0, \"dataMax + 100\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax + 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[0, \"dataMax - 100\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":188,"column":81,"index":5500},"line":188,"code":"  it('Render 1 ticks when domain={[0, \"dataMax - 100\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [0, 'dataMax - 100']\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 ticks when domain={[\"auto, \"auto\"]} and dataKey is \"noExist\" ","suites":["<YAxis />"],"updatePoint":{"line":204,"column":76,"index":6037},"line":204,"code":"  it('Render 1 ticks when domain={[\"auto, \"auto\"]} and dataKey is \"noExist\" ', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      stroke: \"#ff7300\",\n      domain: [\"auto\", \"auto\"]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"noExist\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(0);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 ticks","suites":["<YAxis />"],"updatePoint":{"line":220,"column":20,"index":6514},"line":220,"code":"  it('Render 4 ticks', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      type: \"number\",\n      stroke: \"#ff7300\",\n      ticks: [0, 400, 800, 1200]\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.at(0).text()).to.equal('400');\n    expect(ticks.at(1).text()).to.equal('800');\n    expect(ticks.at(2).text()).to.equal('1200');\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render ticks reversed","suites":["<YAxis />"],"updatePoint":{"line":239,"column":27,"index":7124},"line":239,"code":"  it('Render ticks reversed', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 600,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      reversed: true,\n      type: \"number\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    })));\n    const ticks = wrapper.find(Text);\n    expect(ticks.length).to.equal(4);\n    expect(ticks.first().props().y).to.equal(102.5);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render empty tick","suites":["<YAxis />"],"updatePoint":{"line":257,"column":29,"index":7670},"line":257,"code":"  it(\"Don't render empty tick\", () => {\n    const areaData = [{\n      day: '05-01',\n      weather: 'sunny'\n    }, {\n      day: '05-02'\n    }, {\n      day: '05-03',\n      weather: 'cloudy'\n    }, {\n      day: '05-04',\n      weather: 'rain'\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 400,\n      height: 400,\n      data: areaData\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"day\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"stepAfter\",\n      dataKey: \"weather\",\n      stroke: \"#0088FE\"\n    })));\n    setTimeout(() => {\n      const yAxisTicks = wrapper.find('.yAxis .recharts-cartesian-axis-tick-value tspan');\n      expect(yAxisTicks.length).to.equal(3);\n    }, 1000);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<YAxis />"],"updatePoint":{"line":288,"column":28,"index":8504},"line":288,"code":"  it('Don\\'t render anything', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: 'x',\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/YAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't render anything","suites":["<ZAxis />"],"updatePoint":{"line":6,"column":28,"index":200},"line":6,"code":"  it('Don\\'t render anything', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: 'x',\n      name: \"stature\",\n      unit: \"cm\"\n    })));\n    expect(wrapper.find('svg').children.length).to.equal(1);\n    expect(wrapper.find('svg noscript').children.length).to.equal(1);\n  });","file":"specs/cartesian/ZAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders customized active dot when activeDot is set to be a function","suites":["<AreaChart />"],"updatePoint":{"line":42,"column":74,"index":758},"line":42,"code":"  it('Renders customized active dot when activeDot is set to be a function', () => {\n    // eslint-disable-next-line react/jsx-filename-extension\n    const renderActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 100,\n      height: 50,\n      data: data\n    }, /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      activeDot: renderActiveDot,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null)));\n    wrapper.setState({\n      isTooltipActive: true,\n      activeTooltipIndex: 4,\n      activeTooltipLabel: 4,\n      activeTooltipCoord: {\n        x: 95,\n        y: 21\n      }\n    });\n    expect(wrapper.find('.customized-active-dot').length).to.equal(1);\n  });","file":"specs/chart/AreaChartSpec.js","skipped":false,"dir":"test"},{"name":"should only render Area once when the brush moves but doesn't change start/end indices","suites":["<AreaChart /> - Pure Rendering"],"updatePoint":{"line":121,"column":92,"index":3360},"line":121,"code":"  it(\"should only render Area once when the brush moves but doesn't change start/end indices\", () => {\n    const wrapper = mount(chart);\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n    wrapper.instance().handleBrushChange({\n      startIndex: 0,\n      endIndex: data.length - 1\n    });\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n  });","file":"specs/chart/AreaChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line, 1 area, 1bar in the ComposedChart","suites":["<ComposedChart />"],"updatePoint":{"line":37,"column":54,"index":721},"line":37,"code":"  it('Render 1 line, 1 area, 1bar in the ComposedChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"amt\",\n      fill: \"#8884d8\",\n      stroke: \"#8884d8\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"pv\",\n      barSize: 20,\n      fill: \"#413ea0\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(1);\n    expect(wrapper.find('.recharts-bar').length).to.equal(1);\n    expect(wrapper.find('.recharts-area .recharts-area-area').length).to.equal(1);\n  });","file":"specs/chart/ComposedChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 bar, 1 dot when data has only one element","suites":["<ComposedChart />"],"updatePoint":{"line":70,"column":56,"index":1833},"line":70,"code":"  it('Render 1 bar, 1 dot when data has only one element', () => {\n    const singleData = [data[0]];\n    const wrapper = render( /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 800,\n      height: 400,\n      data: singleData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"pv\",\n      orientation: \"left\",\n      yAxisId: \"left\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"uv\",\n      orientation: \"right\",\n      yAxisId: \"right\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"pv\",\n      barSize: 20,\n      fill: \"#413ea0\",\n      yAxisId: \"left\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      yAxisId: \"right\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-dot').length).to.equal(1);\n    expect(wrapper.find('.recharts-bar .recharts-bar-rectangle').length).to.equal(1);\n  });","file":"specs/chart/ComposedChartSpec.js","skipped":false,"dir":"test"},{"name":"Generate point scale for x-axis, when has no <Bar /> in the ComposedChart","suites":["<ComposedChart />"],"updatePoint":{"line":108,"column":79,"index":3047},"line":108,"code":"  it('Generate point scale for x-axis, when has no <Bar /> in the ComposedChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"amt\",\n      fill: \"#8884d8\",\n      stroke: \"#8884d8\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.state().xAxisMap[0].realScaleType).to.equal('point');\n  });","file":"specs/chart/ComposedChartSpec.js","skipped":false,"dir":"test"},{"name":"Generate point scale for x-axis, when has <Bar /> in the ComposedChart","suites":["<ComposedChart />"],"updatePoint":{"line":135,"column":76,"index":3912},"line":135,"code":"  it('Generate point scale for x-axis, when has <Bar /> in the ComposedChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"amt\",\n      fill: \"#8884d8\",\n      stroke: \"#8884d8\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"pv\",\n      barSize: 20,\n      fill: \"#413ea0\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.state().xAxisMap[0].realScaleType).to.equal('band');\n  });","file":"specs/chart/ComposedChartSpec.js","skipped":false,"dir":"test"},{"name":"MouseEnter ComposedChart should show tooltip, active dot, and cursor","suites":["<ComposedChart />"],"updatePoint":{"line":166,"column":74,"index":4884},"line":166,"code":"  it('MouseEnter ComposedChart should show tooltip, active dot, and cursor', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ComposedChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }), /*#__PURE__*/React.createElement(YAxis, null), /*#__PURE__*/React.createElement(Legend, null), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(CartesianGrid, {\n      stroke: \"#f5f5f5\"\n    }), /*#__PURE__*/React.createElement(Area, {\n      isAnimationActive: false,\n      type: \"monotone\",\n      dataKey: \"amt\",\n      fill: \"#8884d8\",\n      stroke: \"#8884d8\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"pv\",\n      barSize: 20,\n      fill: \"#413ea0\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    wrapper.setState({\n      isTooltipActive: true,\n      activeTooltipIndex: 1,\n      activeTooltipLabel: 'test',\n      activeTooltipCoord: {\n        x: 100,\n        y: 100\n      }\n    });\n\n    // expect(wrapper.find('.recharts-tooltip-cursor').length).to.equal(1);\n    // expect(wrapper.find('.recharts-line-active-dot').length).to.equal(1);\n  });","file":"specs/chart/ComposedChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 1 funnel in simple FunnelChart","suites":["<FunnelChart />"],"updatePoint":{"line":58,"column":44,"index":837},"line":58,"code":"  it('Renders 1 funnel in simple FunnelChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 300\n    }, /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      isAnimationActive: true\n    })));\n    expect(wrapper.find('.recharts-trapezoids').length).to.equal(1);\n  });","file":"specs/chart/FunnelChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 2 funnel in nest FunnelChart","suites":["<FunnelChart />"],"updatePoint":{"line":69,"column":42,"index":1258},"line":69,"code":"  it('Renders 2 funnel in nest FunnelChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      margin: {\n        top: 20,\n        right: 50,\n        left: 20,\n        bottom: 0\n      },\n      width: 500,\n      height: 300\n    }, /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data01,\n      isAnimationActive: true\n    }), /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data02,\n      isAnimationActive: false,\n      width: \"80%\"\n    })));\n    expect(wrapper.find('.recharts-trapezoids').length).to.equal(2);\n  });","file":"specs/chart/FunnelChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line in simple LineChart","suites":["<LineChart />"],"updatePoint":{"line":40,"column":39,"index":744},"line":40,"code":"  it('Render 1 line in simple LineChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line when LineChart has <XAxis /> and <YAxis />","suites":["<LineChart />"],"updatePoint":{"line":58,"column":62,"index":1260},"line":58,"code":"  it('Render 1 line when LineChart has <XAxis /> and <YAxis />', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, null), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Sets title and description correctly","suites":["<LineChart />"],"updatePoint":{"line":78,"column":42,"index":1876},"line":78,"code":"  it('Sets title and description correctly', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      title: \"Chart title\",\n      desc: \"Chart description\",\n      width: 400,\n      height: 400,\n      data: data\n    }, /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\"\n    })));\n    expect(wrapper.find('title').text()).to.equal('Chart title');\n    expect(wrapper.find('desc').text()).to.equal('Chart description');\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Render smooth curve when type of Line is monotone","suites":["<LineChart />"],"updatePoint":{"line":92,"column":55,"index":2375},"line":92,"code":"  it('Render smooth curve when type of Line is monotone', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, null), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const curves = wrapper.find('.recharts-line .recharts-line-curve');\n    expect(curves.length).to.equal(1);\n    const path = curves[0].attribs.d;\n    expect(path.indexOf('C')).to.not.equal(-1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Render two paths when connectNulls is false","suites":["<LineChart />"],"updatePoint":{"line":115,"column":49,"index":3111},"line":115,"code":"  it('Render two paths when connectNulls is false', () => {\n    const breakData = [{\n      name: 'Page A',\n      uv: 400,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 300,\n      pv: 4567,\n      amt: 2400\n    }, {\n      name: 'Page C',\n      uv: 300,\n      pv: 1398,\n      amt: 2400\n    }, {\n      name: 'Page D',\n      uv: null,\n      pv: 9800,\n      amt: 2400\n    }, {\n      name: 'Page E',\n      uv: 278,\n      pv: 3908,\n      amt: 2400\n    }, {\n      name: 'Page F',\n      uv: 189,\n      pv: 4800,\n      amt: 2400\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: breakData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, null), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      connectNulls: false,\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const curves = wrapper.find('.recharts-line .recharts-line-curve');\n    expect(curves.length).to.equal(1);\n    const path = curves[0].attribs.d;\n    expect(path.length - path.split('M').join('').length).to.equal(2);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Render one paths when connectNulls is true","suites":["<LineChart />"],"updatePoint":{"line":170,"column":48,"index":4394},"line":170,"code":"  it('Render one paths when connectNulls is true', () => {\n    const breakData = [{\n      name: 'Page A',\n      uv: 400,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 300,\n      pv: 4567,\n      amt: 2400\n    }, {\n      name: 'Page C',\n      uv: 300,\n      pv: 1398,\n      amt: 2400\n    }, {\n      name: 'Page D',\n      uv: null,\n      pv: 9800,\n      amt: 2400\n    }, {\n      name: 'Page E',\n      uv: 278,\n      pv: 3908,\n      amt: 2400\n    }, {\n      name: 'Page F',\n      uv: 189,\n      pv: 4800,\n      amt: 2400\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: breakData,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, null), /*#__PURE__*/React.createElement(YAxis, {\n      type: \"category\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      connectNulls: true,\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const curves = wrapper.find('.recharts-line .recharts-line-curve');\n    expect(curves.length).to.equal(1);\n    const path = curves[0].attribs.d;\n    expect(path.length - path.split('M').join('').length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders customized active dot when activeDot is set to be a ReactElement","suites":["<LineChart />"],"updatePoint":{"line":225,"column":78,"index":5706},"line":225,"code":"  it('Renders customized active dot when activeDot is set to be a ReactElement', () => {\n    const ActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null)));\n    wrapper.setState({\n      isTooltipActive: true,\n      activeTooltipIndex: 4,\n      activeTooltipLabel: 4,\n      activeTooltipCoord: {\n        x: 95,\n        y: 21\n      }\n    });\n    expect(wrapper.find(ActiveDot).length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders customized active dot when activeDot is set to be a function","suites":["<LineChart />"],"updatePoint":{"line":262,"column":74,"index":6694},"line":262,"code":"  it('Renders customized active dot when activeDot is set to be a function', () => {\n    const renderActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: renderActiveDot,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null)));\n    wrapper.setState({\n      isTooltipActive: true,\n      activeTooltipIndex: 4,\n      activeTooltipLabel: 4,\n      activeTooltipCoord: {\n        x: 95,\n        y: 21\n      }\n    });\n\n    // expect(wrapper.find(ActiveDot).length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 line in simple LineChart","suites":["<LineChart />"],"updatePoint":{"line":301,"column":39,"index":7624},"line":301,"code":"  it('Render 1 line in simple LineChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      strokeDasharray: \"5 5\",\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 1 dot no line when the length of data is 1","suites":["<LineChart />"],"updatePoint":{"line":320,"column":56,"index":8164},"line":320,"code":"  it('Renders 1 dot no line when the length of data is 1', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data.slice(0, 1),\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: true,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(0);\n    expect(wrapper.find('.recharts-line .recharts-line-dot').length).to.equal(1);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 labels when label is setted to be true","suites":["<LineChart />"],"updatePoint":{"line":341,"column":54,"index":8817},"line":341,"code":"  it('Renders 6 labels when label is setted to be true', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: true,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-label').length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 labels when label is setted to be a function","suites":["<LineChart />"],"updatePoint":{"line":361,"column":60,"index":9362},"line":361,"code":"  it('Renders 6 labels when label is setted to be a function', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y,\n        key\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-label\",\n        x: x,\n        y: y,\n        key: key\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: renderLabel,\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const labels = wrapper.find('.customized-label');\n    expect(labels.length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 labels when label is setted to be a react element","suites":["<LineChart />"],"updatePoint":{"line":394,"column":65,"index":10189},"line":394,"code":"  it('Renders 6 labels when label is setted to be a react element', () => {\n    const CustomizedLabel = props => {\n      const {\n        x,\n        y,\n        key\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        className: \"customized-label\",\n        x: x,\n        y: y,\n        key: key\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      label: /*#__PURE__*/React.createElement(CustomizedLabel, null),\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const labels = wrapper.find('.customized-label');\n    expect(labels.length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 dots when dot is setted to be true","suites":["<LineChart />"],"updatePoint":{"line":427,"column":50,"index":11049},"line":427,"code":"  it('Renders 6 dots when dot is setted to be true', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      dot: true,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-line-dot').length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 dots when dot is setted to be a function","suites":["<LineChart />"],"updatePoint":{"line":447,"column":56,"index":11591},"line":447,"code":"  it('Renders 6 dots when dot is setted to be a function', () => {\n    const renderDot = props => {\n      const {\n        cx,\n        cy,\n        key\n      } = props;\n      return /*#__PURE__*/React.createElement(\"circle\", {\n        className: \"customized-dot\",\n        key: key,\n        cx: cx,\n        cy: cy,\n        r: 10\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      dot: renderDot,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 dots when dot is setted to be a react element","suites":["<LineChart />"],"updatePoint":{"line":481,"column":61,"index":12416},"line":481,"code":"  it('Renders 6 dots when dot is setted to be a react element', () => {\n    const Dot = props => {\n      const {\n        cx,\n        cy,\n        key\n      } = props;\n      return /*#__PURE__*/React.createElement(\"circle\", {\n        className: \"customized-dot\",\n        key: key,\n        cx: cx,\n        cy: cy,\n        r: 10\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      dot: /*#__PURE__*/React.createElement(Dot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(6);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 3 lines before and after a parents state change","suites":["<LineChart />"],"updatePoint":{"line":515,"column":61,"index":13269},"line":515,"code":"  it('Renders 3 lines before and after a parents state change', () => {\n    class LineChartContainer extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          data: [{\n            name: 'A',\n            time: 6\n          }, {\n            name: 'B',\n            time: 2\n          }, {\n            name: 'C',\n            time: 4\n          }],\n          dataKeys: ['time'],\n          additionalStateItem: false\n        };\n      }\n      render() {\n        return /*#__PURE__*/React.createElement(LineChart, {\n          width: 600,\n          height: 300,\n          data: this.state.data,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }\n        }, this.state.dataKeys.map((key, i) => /*#__PURE__*/React.createElement(Line, {\n          dataKey: key,\n          key: i,\n          type: \"monotone\"\n        })));\n      }\n    }\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChartContainer, null));\n    expect(wrapper.find(LineChart).children().props().children).to.have.lengthOf(3);\n    wrapper.setProps({\n      additionalStateItem: true\n    });\n    expect(wrapper.find(LineChart).children().props().children).to.have.lengthOf(3);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"click on Curve should invoke onClick callback","suites":["<LineChart />"],"updatePoint":{"line":559,"column":51,"index":14523},"line":559,"code":"  it('click on Curve should invoke onClick callback', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    wrapper.setProps({\n      data: []\n    });\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"click on Curve should invoke onClick callback","suites":["<LineChart />"],"updatePoint":{"line":579,"column":51,"index":14989},"line":579,"code":"  it('click on Curve should invoke onClick callback', () => {\n    let propsOfCallback, eventOfCallback;\n    const onClick = sinon.spy((props, event) => {\n      propsOfCallback = props;\n      eventOfCallback = event;\n    });\n    const onMouseDown = sinon.spy();\n    const onMouseUp = sinon.spy();\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    })));\n    const curve = wrapper.find(Curve);\n    curve.simulate('click');\n    curve.simulate('mousedown');\n    curve.simulate('mouseup');\n    expect(onClick.calledOnce).to.equal(true);\n    expect(onMouseDown.calledOnce).to.equal(true);\n    expect(onMouseUp.calledOnce).to.equal(true);\n    expect(propsOfCallback).to.include.all.keys(['className', 'points', 'connectNulls', 'type']);\n    expect(eventOfCallback).to.include.all.keys(['currentTarget', 'target']);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should show tooltip cursor on MouseEnter and MouseMove and hide on MouseLeave","suites":["<LineChart />"],"updatePoint":{"line":615,"column":83,"index":16214},"line":615,"code":"  it('should show tooltip cursor on MouseEnter and MouseMove and hide on MouseLeave', () => {\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const height = 400;\n    const width = 400;\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data,\n      margin: margin\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Brush, null)));\n    const chartWidth = width - margin.left - margin.right;\n    const dotSpacing = chartWidth / (data.length - 1);\n\n    // simulate entering just past Page A to test snapping of the cursor line\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes().length).to.equal(0);\n    wrapper.simulate('mouseEnter', {\n      pageX: margin.left + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    let tooltipCursors = wrapper.find('.recharts-tooltip-cursor').hostNodes();\n    expect(tooltipCursors.length).to.equal(1);\n\n    // make sure tooltip is in the right spot.\n    const chartBottom = height - margin.top - 2 * margin.bottom;\n    let expectedX = margin.left;\n    expect(tooltipCursors.at(0).props().d).to.equal(`M${expectedX},${margin.top}L${expectedX},${chartBottom}`);\n\n    // simulate moving 10 pixels past the PageC Dot\n    expectedX = margin.left + dotSpacing * 2;\n    wrapper.simulate('mouseMove', {\n      pageX: expectedX + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    tooltipCursors = wrapper.find('.recharts-tooltip-cursor').hostNodes();\n    expect(tooltipCursors.length).to.equal(1);\n    expect(tooltipCursors.at(0).props().d).to.equal(`M${expectedX},${margin.top}L${expectedX},${chartBottom}`);\n\n    // simulate leaving the area\n    wrapper.simulate('mouseLeave');\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes.length).to.equal(0);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Should update the line chart when the brush changes","suites":["<LineChart />"],"updatePoint":{"line":666,"column":57,"index":18210},"line":666,"code":"  it('Should update the line chart when the brush changes', () => {\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const height = 400;\n    const width = 400;\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data,\n      margin: margin\n    }, /*#__PURE__*/React.createElement(Line, {\n      isAnimationActive: false,\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Brush, null)));\n    const lineDots = wrapper.find('.recharts-line .recharts-line-dots').hostNodes();\n    expect(lineDots.length).to.equal(1);\n    expect(lineDots.children().length).to.equal(6);\n    let dataIndex = 2;\n\n    // verify one of the dots that we expect to move when the brush happens\n    expect(lineDots.childAt(dataIndex).props().payload).to.equal(data[dataIndex]);\n    expect(lineDots.childAt(dataIndex).props().cx).to.equal(164);\n    expect(lineDots.childAt(dataIndex).props().cy).to.equal(100);\n\n    // simulate a brush to only include the data elements at indices 2-4\n    wrapper.instance().handleBrushChange({\n      startIndex: 2,\n      endIndex: 5\n    });\n\n    // we should only have three dots now\n    const newLineDots = wrapper.find('.recharts-line-dots').hostNodes();\n    expect(newLineDots.length).to.equal(1);\n    expect(newLineDots.children().length).to.equal(data.length);\n    dataIndex = 0;\n\n    // make sure the new first dot is the same as the old 2 dot, just in a new place\n    expect(newLineDots.childAt(dataIndex).props().payload).to.equal(data[dataIndex]);\n    expect(newLineDots.childAt(dataIndex).props().cx).to.equal(margin.left);\n    expect(newLineDots.childAt(dataIndex).props().cy).to.equal(20);\n    dataIndex = 2;\n\n    // verify one of the dots that we expect to move when the brush happens\n    expect(newLineDots.childAt(dataIndex).props().payload).to.equal(data[dataIndex]);\n    expect(newLineDots.childAt(dataIndex).props().cx).to.equal(164);\n    expect(newLineDots.childAt(dataIndex).props().cy).to.equal(100);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should only render Line once when the mouse enters and moves","suites":["<LineChart /> - Pure Rendering"],"updatePoint":{"line":753,"column":66,"index":21536},"line":753,"code":"  it('should only render Line once when the mouse enters and moves', () => {\n    const wrapper = mount(chart);\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n    wrapper.simulate('mouseEnter', {\n      pageX: 30,\n      pageY: 200\n    });\n    wrapper.simulate('mouseMove', {\n      pageX: 200,\n      pageY: 200\n    });\n    wrapper.simulate('mouseLeave');\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should only render Line once when the brush moves but doesn't change start/end indices","suites":["<LineChart /> - Pure Rendering"],"updatePoint":{"line":771,"column":92,"index":22158},"line":771,"code":"  it(\"should only render Line once when the brush moves but doesn't change start/end indices\", () => {\n    const wrapper = mount(chart);\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n    wrapper.instance().handleBrushChange({\n      startIndex: 0,\n      endIndex: data.length - 1\n    });\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should only render Line once when the mouse enters and moves","suites":["<LineChart /> - Pure Rendering with legend"],"updatePoint":{"line":816,"column":66,"index":23799},"line":816,"code":"  it('should only render Line once when the mouse enters and moves', () => {\n    const wrapper = mount(chart);\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n    wrapper.simulate('mouseEnter', {\n      pageX: 30,\n      pageY: 200\n    });\n    wrapper.simulate('mouseMove', {\n      pageX: 200,\n      pageY: 200\n    });\n    wrapper.simulate('mouseLeave');\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should only render Line once when the brush moves but doesn't change start/end indices","suites":["<LineChart /> - Pure Rendering with legend"],"updatePoint":{"line":834,"column":92,"index":24421},"line":834,"code":"  it(\"should only render Line once when the brush moves but doesn't change start/end indices\", () => {\n    const wrapper = mount(chart);\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n    wrapper.instance().handleBrushChange({\n      startIndex: 0,\n      endIndex: data.length - 1\n    });\n    spies.forEach(el => expect(el.callCount).to.equal(1));\n    expect(axisSpy.callCount).to.equal(2);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should show tooltips for both charts synced by index on MouseEnter and hide on MouseLeave/Escape","suites":["<LineChart /> - Rendering two line charts with syncId"],"updatePoint":{"line":889,"column":102,"index":25608},"line":889,"code":"  it('should show tooltips for both charts synced by index on MouseEnter and hide on MouseLeave/Escape', async () => {\n    const ActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const chart1 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data,\n      margin: margin,\n      syncId: \"test\"\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const chart2 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data2,\n      margin: margin,\n      syncId: \"test\"\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const wrapper = mount( /*#__PURE__*/React.createElement(\"div\", null, chart1, chart2));\n    const chartWidth = width - margin.left - margin.right;\n    const dotSpacing = chartWidth / (data.length - 1);\n\n    // simulate entering just past Page A of Chart1 to test snapping of the cursor line\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes().length).to.equal(0);\n    wrapper.find(LineChart).at(0).simulate('mouseEnter', {\n      pageX: margin.left + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    await runAllPromises();\n    wrapper.update();\n\n    // There are two tooltips - one for each LineChart as they have the same syncId\n    const tooltipCursors = wrapper.find('.recharts-tooltip-cursor').hostNodes();\n    expect(tooltipCursors.length).to.equal(2);\n    const tooltipsValueWrapper = wrapper.find('.recharts-tooltip-item-value');\n\n    // make sure tooltips display the correct values, i.e. the value of the first item in the data\n    expect(tooltipsValueWrapper.at(0).text()).to.equal('400');\n    expect(tooltipsValueWrapper.at(1).text()).to.equal('500');\n\n    // Check the activeDots are highlighted\n    const activeDotNodes = wrapper.find('.recharts-active-dot').hostNodes();\n    expect(activeDotNodes.length).to.equal(2);\n    const activeDotWrapper = wrapper.find(ActiveDot);\n    expect(activeDotWrapper.at(0).props().value).to.equal(400);\n    expect(activeDotWrapper.at(1).props().value).to.equal(500);\n\n    // simulate leaving the area\n    wrapper.find(LineChart).at(0).simulate('mouseLeave');\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes.length).to.equal(0);\n\n    // simulate pressing Escape key\n    wrapper.find(LineChart).at(0).simulate('mouseEnter', {\n      pageX: margin.left + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    await runAllPromises();\n    wrapper.update();\n    wrapper.find(LineChart).at(0).simulate('keydown', {\n      key: 'Escape'\n    });\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes.length).to.equal(0);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should show tooltips using syncMethod: 'value' for both charts on MouseEnter and hide on MouseLeave","suites":["<LineChart /> - Rendering two line charts with syncId"],"updatePoint":{"line":972,"column":105,"index":28891},"line":972,"code":"  it(\"should show tooltips using syncMethod: 'value' for both charts on MouseEnter and hide on MouseLeave\", async () => {\n    const ActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const chart1 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data,\n      margin: margin,\n      syncId: \"test\",\n      syncMethod: \"value\"\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const chart2 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data2,\n      margin: margin,\n      syncId: \"test\",\n      syncMethod: \"value\"\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const wrapper = mount( /*#__PURE__*/React.createElement(\"div\", null, chart1, chart2));\n    const chartWidth = width - margin.left - margin.right;\n    const dotSpacing = chartWidth / (data.length - 1);\n\n    // simulate entering just past Page A of Chart1 to test snapping of the cursor line\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes().length).to.equal(0);\n    wrapper.find(LineChart).at(0).simulate('mouseEnter', {\n      pageX: margin.left + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    await runAllPromises();\n    wrapper.update();\n\n    // There are two tooltips - one for each LineChart as they have the same syncId\n    const tooltipCursors = wrapper.find('.recharts-tooltip-cursor').hostNodes();\n    expect(tooltipCursors.length).to.equal(2);\n    const tooltipsValueWrapper = wrapper.find('.recharts-tooltip-item-value');\n\n    // make sure tooltips display the correct values, synced by data value\n    expect(tooltipsValueWrapper.at(0).text()).to.equal('400');\n    expect(tooltipsValueWrapper.at(1).text()).to.equal('230');\n\n    // Check the activeDots are highlighted\n    const activeDotNodes = wrapper.find('.recharts-active-dot').hostNodes();\n    expect(activeDotNodes.length).to.equal(2);\n    const activeDotWrapper = wrapper.find(ActiveDot);\n    expect(activeDotWrapper.at(0).props().value).to.equal(400);\n    expect(activeDotWrapper.at(1).props().value).to.equal(230);\n\n    // simulate leaving the area\n    wrapper.find(LineChart).at(0).simulate('mouseLeave');\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes.length).to.equal(0);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"should show tooltips using syncMethod: [function] for both charts on MouseEnter and hide on MouseLeave","suites":["<LineChart /> - Rendering two line charts with syncId"],"updatePoint":{"line":1045,"column":108,"index":31817},"line":1045,"code":"  it('should show tooltips using syncMethod: [function] for both charts on MouseEnter and hide on MouseLeave', async () => {\n    const ActiveDot = ({\n      cx,\n      cy\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 10,\n      className: \"customized-active-dot\"\n    });\n    const syncMethodFunction = (tooltipTicks, data) => data.activeTooltipIndex + 1;\n    const chart1 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data,\n      margin: margin,\n      syncId: \"test\",\n      syncMethod: syncMethodFunction\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const chart2 = /*#__PURE__*/React.createElement(LineChart, {\n      width: width,\n      height: height,\n      data: data2,\n      margin: margin,\n      syncId: \"test\",\n      syncMethod: syncMethodFunction\n    }, /*#__PURE__*/React.createElement(Line, {\n      activeDot: /*#__PURE__*/React.createElement(ActiveDot, null),\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\"\n    }));\n    const wrapper = mount( /*#__PURE__*/React.createElement(\"div\", null, chart1, chart2));\n    const chartWidth = width - margin.left - margin.right;\n    const dotSpacing = chartWidth / (data.length - 1);\n\n    // simulate entering just past Page A of Chart1 to test snapping of the cursor line\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes().length).to.equal(0);\n    wrapper.find(LineChart).at(0).simulate('mouseEnter', {\n      pageX: margin.left + 0.1 * dotSpacing,\n      pageY: height / 2\n    });\n    await runAllPromises();\n    wrapper.update();\n\n    // There are two tooltips - one for each LineChart as they have the same syncId\n    const tooltipCursors = wrapper.find('.recharts-tooltip-cursor').hostNodes();\n    expect(tooltipCursors.length).to.equal(2);\n    const tooltipsValueWrapper = wrapper.find('.recharts-tooltip-item-value');\n\n    // make sure tooltips display the correct values, synced by data value\n    expect(tooltipsValueWrapper.at(0).text()).to.equal('400');\n    expect(tooltipsValueWrapper.at(1).text()).to.equal('550');\n\n    // Check the activeDots are highlighted\n    const activeDotNodes = wrapper.find('.recharts-active-dot').hostNodes();\n    expect(activeDotNodes.length).to.equal(2);\n    const activeDotWrapper = wrapper.find(ActiveDot);\n    expect(activeDotWrapper.at(0).props().value).to.equal(400);\n    expect(activeDotWrapper.at(1).props().value).to.equal(550);\n\n    // simulate leaving the area\n    wrapper.find(LineChart).at(0).simulate('mouseLeave');\n    expect(wrapper.find('.recharts-tooltip-cursor').hostNodes.length).to.equal(0);\n  });","file":"specs/chart/LineChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 sectors circles in simple PieChart","suites":["<PieChart />"],"updatePoint":{"line":27,"column":50,"index":897},"line":27,"code":"  it('Renders 6 sectors circles in simple PieChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(PieChart, {\n      width: 800,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#ff7300\",\n      label: true\n    })));\n    expect(wrapper.find('.recharts-pie-sector').length).to.equal(data.length);\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 sectors circles when add Cell to specified props of eact slice","suites":["<PieChart />"],"updatePoint":{"line":43,"column":78,"index":1405},"line":43,"code":"  it('Renders 6 sectors circles when add Cell to specified props of eact slice', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(PieChart, {\n      width: 800,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#ff7300\",\n      label: true\n    }, data.map((entry, index) => /*#__PURE__*/React.createElement(Cell, _extends({}, entry, {\n      key: `cell-${index}`,\n      strokeWidth: index + 1\n    }))))));\n    expect(wrapper.find('.recharts-pie-sector').length).to.equal(6);\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders legend when all the values are 0","suites":["<PieChart />"],"updatePoint":{"line":61,"column":46,"index":2008},"line":61,"code":"  it('Renders legend when all the values are 0', () => {\n    const emptyData = [{\n      name: 'Group A',\n      value: 0\n    }, {\n      name: 'Group B',\n      value: 0\n    }, {\n      name: 'Group C',\n      value: 0\n    }, {\n      name: 'Group D',\n      value: 0\n    }, {\n      name: 'Group E',\n      value: 0\n    }, {\n      name: 'Group F',\n      value: 0\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(PieChart, {\n      width: 800,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      data: emptyData,\n      isAnimationActive: false,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80\n    }), /*#__PURE__*/React.createElement(Legend, null)));\n    expect(wrapper.find('.recharts-legend-item').length).to.equal(emptyData.length);\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"Don't renders any sectors when width or height is smaller than 0","suites":["<PieChart />"],"updatePoint":{"line":94,"column":71,"index":2832},"line":94,"code":"  it('Don\\'t renders any sectors when width or height is smaller than 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(PieChart, {\n      width: 0,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#ff7300\",\n      label: true\n    })));\n    expect(wrapper.find('.recharts-pie-sector').length).to.equal(0);\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 6 legend item when add a Legend element","suites":["<PieChart />"],"updatePoint":{"line":110,"column":53,"index":3303},"line":110,"code":"  it('Renders 6 legend item when add a Legend element', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(PieChart, {\n      width: 800,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#ff7300\",\n      label: true\n    }), /*#__PURE__*/React.createElement(Legend, null)));\n    expect(wrapper.find('.recharts-legend-wrapper').length).to.equal(1);\n    expect(wrapper.find('.recharts-legend-item').length).to.equal(6);\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"click on Sector should invoke onClick callback","suites":["<PieChart />"],"updatePoint":{"line":148,"column":52,"index":4608},"line":148,"code":"  it('click on Sector should invoke onClick callback', () => {\n    const onClick = sinon.spy();\n    const onMouseEnter = sinon.spy();\n    const onMouseLeave = sinon.spy();\n    const wrapper = mount( /*#__PURE__*/React.createElement(PieChart, {\n      width: 800,\n      height: 400,\n      onClick: onClick,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    }, /*#__PURE__*/React.createElement(Pie, {\n      dataKey: \"value\",\n      isAnimationActive: false,\n      data: data,\n      cx: 200,\n      cy: 200,\n      outerRadius: 80,\n      fill: \"#ff7300\",\n      label: true\n    })));\n    const sectors = wrapper.find(Sector);\n    const se = sectors.at(2);\n    se.simulate('click');\n    expect(onClick.calledOnce).to.equal(true);\n\n    /*\n    se.simulate('mouseEnter');\n    expect(onMouseEnter.calledOnce).to.equal(true);\n     se.simulate('mouseLeave');\n    expect(onMouseLeave.calledOnce).to.equal(true);\n    */\n  });","file":"specs/chart/PieChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 polygon in a simple Radar","suites":["<RadarChart />"],"updatePoint":{"line":40,"column":40,"index":787},"line":40,"code":"  it('Render 1 polygon in a simple Radar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      dataKey: \"value\"\n    })));\n    expect(wrapper.find('.recharts-polygon').length).to.equal(1);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 8 dots when dot is setted to be true","suites":["<RadarChart />"],"updatePoint":{"line":53,"column":49,"index":1184},"line":53,"code":"  it('Render 8 dots when dot is setted to be true', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      dot: true,\n      dataKey: \"value\"\n    })));\n    expect(wrapper.find('.recharts-radar-dot').length).to.equal(8);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 8 labels when dot is setted to be true","suites":["<RadarChart />"],"updatePoint":{"line":68,"column":51,"index":1634},"line":68,"code":"  it('Render 8 labels when dot is setted to be true', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      label: true,\n      dataKey: \"value\"\n    })));\n    expect(wrapper.find('.recharts-label').length).to.equal(8);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 PolarGrid 1 PolarAngleAxis and 1 PolarRadiusAxis in simple Radar","suites":["<RadarChart />"],"updatePoint":{"line":83,"column":79,"index":2110},"line":83,"code":"  it('Render 1 PolarGrid 1 PolarAngleAxis and 1 PolarRadiusAxis in simple Radar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      startAngle: 45,\n      innerRadius: 20,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      dataKey: \"value\",\n      fill: \"#9597E4\",\n      fillOpacity: 0.6,\n      stroke: \"#8889DD\",\n      strokeWidth: 3\n    }), /*#__PURE__*/React.createElement(PolarGrid, null), /*#__PURE__*/React.createElement(PolarAngleAxis, null), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orient: \"middle\",\n      angle: 67.5\n    })));\n    expect(wrapper.find('.recharts-polar-grid').length).to.equal(1);\n    expect(wrapper.find('.recharts-polar-angle-axis').length).to.equal(1);\n    expect(wrapper.find('.recharts-polar-radius-axis').length).to.equal(1);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"Render 8 angle grid angle line, 8 angle axis ticks, and 3 radius axis ticks","suites":["<RadarChart />"],"updatePoint":{"line":107,"column":81,"index":3041},"line":107,"code":"  it('Render 8 angle grid angle line, 8 angle axis ticks, and 3 radius axis ticks', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      startAngle: 45,\n      innerRadius: 20,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      dataKey: \"value\",\n      fill: \"#9597E4\",\n      fillOpacity: 0.6,\n      stroke: \"#8889DD\",\n      strokeWidth: 3\n    }), /*#__PURE__*/React.createElement(PolarGrid, null), /*#__PURE__*/React.createElement(PolarAngleAxis, null), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orient: \"middle\",\n      angle: 67.5\n    })));\n    expect(wrapper.find('.recharts-polar-grid .recharts-polar-grid-angle line').length).to.equal(8);\n    expect(wrapper.find('.recharts-polar-angle-axis .recharts-polar-angle-axis-tick').length).to.equal(8);\n    expect(wrapper.find('.recharts-polar-radius-axis .recharts-polar-radius-axis-tick').length).to.equal(5);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"click on Sector should invoke onClick callback","suites":["<RadarChart />"],"updatePoint":{"line":131,"column":52,"index":4040},"line":131,"code":"  it('click on Sector should invoke onClick callback', () => {\n    const onClick = sinon.spy(Radar.prototype, 'render');\n    const wrapper = mount( /*#__PURE__*/React.createElement(RadarChart, {\n      cx: 300,\n      cy: 250,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: data\n    }, /*#__PURE__*/React.createElement(Radar, {\n      dataKey: \"value\",\n      onClick: onClick\n    })));\n    const radars = wrapper.find(Radar);\n    const radar = radars.at(0);\n    radar.simulate('click');\n    expect(onClick.callCount).to.equal(1);\n  });","file":"specs/chart/RadarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 7 sectors in simple RadialBarChart","suites":["<RadialBarChart />"],"updatePoint":{"line":43,"column":48,"index":1143},"line":43,"code":"  it('Renders 7 sectors in simple RadialBarChart', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      minAngle: 15,\n      label: label,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    })));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(data.length);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Don't renders any sectors when no RadialBar is added","suites":["<RadialBarChart />"],"updatePoint":{"line":66,"column":59,"index":1790},"line":66,"code":"  it('Don\\'t renders any sectors when no RadialBar is added', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(0);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Don't renders any sectors when width or height is smaller than 0","suites":["<RadialBarChart />"],"updatePoint":{"line":82,"column":71,"index":2246},"line":82,"code":"  it('Don\\'t renders any sectors when width or height is smaller than 0', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 0,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(0);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders sectors when barSize is not specified","suites":["<RadialBarChart />"],"updatePoint":{"line":98,"column":51,"index":2680},"line":98,"code":"  it('Renders sectors when barSize is not specified', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      minAngle: 15,\n      label: label,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    })));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(7);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 7 sectors in simple RadialBarChart","suites":["<RadialBarChart />"],"updatePoint":{"line":120,"column":48,"index":3287},"line":120,"code":"  it('Renders 7 sectors in simple RadialBarChart', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      startAngle: 0,\n      endAngle: 180,\n      minAngle: 15,\n      label: label,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    })));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(7);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 7 customized shape when shape is set to be a react element","suites":["<RadialBarChart />"],"updatePoint":{"line":145,"column":72,"index":3979},"line":145,"code":"  it('Renders 7 customized shape when shape is set to be a react element', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const Shape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      className: \"customized-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      shape: /*#__PURE__*/React.createElement(Shape, null),\n      minAngle: 15,\n      label: label,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(7);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 7 customized shape when shape is set to be a function","suites":["<RadialBarChart />"],"updatePoint":{"line":172,"column":67,"index":4809},"line":172,"code":"  it('Renders 7 customized shape when shape is set to be a function', () => {\n    const label = {\n      orientation: 'outer'\n    };\n    const renderShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      className: \"customized-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      shape: renderShape,\n      minAngle: 15,\n      label: label,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(7);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"Renders 7 legend item when add a Legend element","suites":["<RadialBarChart />"],"updatePoint":{"line":199,"column":53,"index":5597},"line":199,"code":"  it('Renders 7 legend item when add a Legend element', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(RadialBarChart, {\n      width: 500,\n      height: 300,\n      cx: 150,\n      cy: 150,\n      innerRadius: 20,\n      outerRadius: 140,\n      barSize: 10,\n      data: data\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      minAngle: 15,\n      background: true,\n      clockWise: true,\n      dataKey: \"uv\",\n      isAnimationActive: false\n    }), /*#__PURE__*/React.createElement(Legend, null)));\n    expect(wrapper.find('.recharts-legend-wrapper').length).to.equal(1);\n    expect(wrapper.find('.recharts-legend-item').length).to.equal(7);\n  });","file":"specs/chart/RadialBarChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 48 nodes in simple SankeyChart","suites":["<Sankey />"],"updatePoint":{"line":383,"column":44,"index":6520},"line":383,"code":"  it('renders 48 nodes in simple SankeyChart', () => {\n    expect(wrapper.find('.recharts-sankey-node').length).to.equal(48);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"renders 68 links in simple SankeyChart","suites":["<Sankey />"],"updatePoint":{"line":386,"column":44,"index":6652},"line":386,"code":"  it('renders 68 links in simple SankeyChart', () => {\n    expect(wrapper.find('.recharts-sankey-link').length).to.equal(68);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"re-renders links and nodes when data changes","suites":["<Sankey />"],"updatePoint":{"line":389,"column":50,"index":6790},"line":389,"code":"  it('re-renders links and nodes when data changes', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Sankey, {\n      width: 1000,\n      height: 500,\n      data: data\n    }));\n    expect(wrapper.render().find('.recharts-sankey-node').length).to.equal(48);\n    expect(wrapper.render().find('.recharts-sankey-link').length).to.equal(68);\n    const newData = {\n      ...data,\n      nodes: [...data.nodes, {\n        name: 'New Node'\n      }],\n      links: [...data.links, {\n        source: 2,\n        target: data.nodes.length,\n        value: 100.0\n      }]\n    };\n    wrapper.setProps({\n      data: newData\n    });\n    setTimeout(() => {\n      expect(wrapper.render().find('.recharts-sankey-node').length).to.equal(49);\n      expect(wrapper.render().find('.recharts-sankey-link').length).to.equal(69);\n    }, 1000);\n  });","file":"specs/chart/SankeySpec.js","skipped":false,"dir":"test"},{"name":"Render 2 Scatter","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":56,"column":22,"index":854},"line":56,"code":"  it('Render 2 Scatter', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data01,\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"B school\",\n      data: data02,\n      fill: \"#347300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, null)));\n    expect(wrapper.find('.recharts-scatter').length).to.equal(2);\n    expect(wrapper.find('.recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-scatter-symbol').length).to.equal(data01.length + data02.length);\n    expect(wrapper.find('.recharts-scatter-symbol path').length).to.equal(data01.length + data02.length);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbols when data is empty","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":93,"column":50,"index":2227},"line":93,"code":"  it('Don\\'t render any symbols when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: [],\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, {\n      layout: \"vertical\"\n    })));\n    expect(wrapper.find('.recharts-symbol').length).to.equal(0);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"mouse enter on one circle will trigger one Cross","suites":["ScatterChart of three dimension data"],"updatePoint":{"line":126,"column":54,"index":3250},"line":126,"code":"  it('mouse enter on one circle will trigger one Cross', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(CartesianGrid, null), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data01,\n      fillOpacity: 0.3,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"B school\",\n      data: data02,\n      fill: \"#347300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null), /*#__PURE__*/React.createElement(Legend, null)));\n    const symbols = wrapper.find(Symbols);\n    const firstSymbol = symbols.first();\n    firstSymbol.simulate('mouseEnter');\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 6 circles in simple ScatterChart","suites":["ScatterChart of two dimension data"],"updatePoint":{"line":213,"column":46,"index":5272},"line":213,"code":"  it('renders 6 circles in simple ScatterChart', () => {\n    expect(wrapper.find('.recharts-symbols').length).to.equal(6);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 jointed line when line is setted to be true","suites":["ScatterChart of two dimension data"],"updatePoint":{"line":216,"column":59,"index":5414},"line":216,"code":"  it('renders 1 jointed line when line is setted to be true', () => {\n    expect(wrapper.find('.recharts-scatter-line').length).to.equal(1);\n  });","file":"specs/chart/ScatterChartSpec.js","skipped":false,"dir":"test"},{"name":"renders 20 rectangles in simple TreemapChart","suites":["<Treemap />"],"updatePoint":{"line":99,"column":50,"index":1440},"line":99,"code":"  it('renders 20 rectangles in simple TreemapChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Treemap, {\n      width: 500,\n      height: 250,\n      data: data,\n      isAnimationActive: false,\n      nameKey: \"name\",\n      dataKey: \"value\"\n    }));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(24);\n  });","file":"specs/chart/TreemapSpec.js","skipped":false,"dir":"test"},{"name":"renders 21 rectangles in simple TreemapChart","suites":["<Treemap />"],"updatePoint":{"line":110,"column":50,"index":1789},"line":110,"code":"  it('renders 21 rectangles in simple TreemapChart', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Treemap, {\n      width: 500,\n      height: 250,\n      data: data,\n      isAnimationActive: false,\n      nameKey: \"name\",\n      dataKey: \"value\",\n      type: \"nest\"\n    }));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(21);\n  });","file":"specs/chart/TreemapSpec.js","skipped":false,"dir":"test"},{"name":"Render empty dom","suites":["<Cell />"],"updatePoint":{"line":6,"column":22,"index":184},"line":6,"code":"  it('Render empty dom', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Cell, null));\n    expect(wrapper.props().children).to.be.undefined;\n  });","file":"specs/component/CellSpec.js","skipped":false,"dir":"test"},{"name":"Render customized component by React.element","suites":["<Customized />"],"updatePoint":{"line":6,"column":50,"index":231},"line":6,"code":"  it('Render customized component by React.element', () => {\n    class SvgElement extends Component {\n      render() {\n        return /*#__PURE__*/React.createElement(\"rect\", {\n          className: \"customized-svg-element\"\n        });\n      }\n    }\n    const wrapper = render( /*#__PURE__*/React.createElement(Customized, {\n      component: /*#__PURE__*/React.createElement(SvgElement, null)\n    }));\n    expect(wrapper.find('.customized-svg-element').length).to.equal(1);\n  });","file":"specs/component/CustomizedSpec.js","skipped":false,"dir":"test"},{"name":"Render customized component by Function","suites":["<Customized />"],"updatePoint":{"line":19,"column":45,"index":705},"line":19,"code":"  it('Render customized component by Function', () => {\n    function rect() {\n      return /*#__PURE__*/React.createElement(\"rect\", {\n        className: \"customized-svg-element\"\n      });\n    }\n    const wrapper = render( /*#__PURE__*/React.createElement(Customized, {\n      component: rect\n    }));\n    expect(wrapper.find('.customized-svg-element').length).to.equal(1);\n  });","file":"specs/component/CustomizedSpec.js","skipped":false,"dir":"test"},{"name":"Render labels in ScatterChart","suites":["<LabelList />"],"updatePoint":{"line":6,"column":35,"index":266},"line":6,"code":"  it('Render labels in ScatterChart', () => {\n    const data = [{\n      x: 100,\n      y: 200,\n      z: 200\n    }, {\n      x: 120,\n      y: 100,\n      z: 260\n    }, {\n      x: 170,\n      y: 300,\n      z: 400\n    }, {\n      x: 140,\n      y: 250,\n      z: 280\n    }, {\n      x: 150,\n      y: 400,\n      z: 500\n    }, {\n      x: 110,\n      y: 280,\n      z: 200\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 400,\n      height: 400,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      name: \"stature\",\n      unit: \"cm\"\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      name: \"weight\",\n      unit: \"kg\"\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      range: [4, 20],\n      name: \"score\",\n      unit: \"km\"\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"A school\",\n      data: data,\n      isAnimationActive: false\n    }, /*#__PURE__*/React.createElement(LabelList, {\n      dataKey: \"x\"\n    }))));\n    const label = wrapper.find('.recharts-label');\n    expect(label.length).to.equal(data.length);\n  });","file":"specs/component/LabelListSpec.js","skipped":false,"dir":"test"},{"name":"Render polar labels (postion=\"center\")","suites":["<Label />"],"updatePoint":{"line":48,"column":44,"index":909},"line":48,"code":"  it('Render polar labels (postion=\"center\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: polarViewBox,\n      value: \"text\",\n      position: \"center\"\n    })));\n    const label = wrapper.find('.recharts-label');\n    expect(label.length).to.equal(1);\n    expect(label.attr('x')).to.equal(`${polarViewBox.cx}`);\n    expect(label.attr('y')).to.equal(`${polarViewBox.cy}`);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render polar labels (position=\"outside\")","suites":["<Label />"],"updatePoint":{"line":59,"column":46,"index":1384},"line":59,"code":"  it('Render polar labels (position=\"outside\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: polarViewBox,\n      value: \"text\",\n      position: \"outside\"\n    })));\n    const label = wrapper.find('.recharts-label');\n    expect(label.length).to.equal(1);\n    expect(label.attr('x')).to.equal('110.10407640085654');\n    expect(label.attr('y')).to.equal('-10.104076400856535');\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render radial labels (position=\"insideStart\")","suites":["<Label />"],"updatePoint":{"line":70,"column":51,"index":1866},"line":70,"code":"  it('Render radial labels (position=\"insideStart\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: polarViewBox,\n      value: \"text\",\n      position: \"insideStart\"\n    })));\n    const label = wrapper.find('.recharts-radial-bar-label');\n    expect(label.length).to.equal(1);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render radial labels (position=\"insideEnd\")","suites":["<Label />"],"updatePoint":{"line":79,"column":49,"index":2240},"line":79,"code":"  it('Render radial labels (position=\"insideEnd\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: polarViewBox,\n      value: \"text\",\n      position: \"insideEnd\"\n    })));\n    expect(wrapper.find('.recharts-radial-bar-label').length).to.equal(1);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render radial labels (position=\"end\")","suites":["<Label />"],"updatePoint":{"line":87,"column":43,"index":2581},"line":87,"code":"  it('Render radial labels (position=\"end\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: polarViewBox,\n      value: \"text\",\n      position: \"end\"\n    })));\n    expect(wrapper.find('.recharts-radial-bar-label').length).to.equal(1);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render cartesian labels (postion=\"center\")","suites":["<Label />"],"updatePoint":{"line":101,"column":48,"index":3009},"line":101,"code":"  it('Render cartesian labels (postion=\"center\")', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: cartesianViewBox,\n      value: \"text\",\n      position: \"center\"\n    })));\n    const label = wrapper.find('.recharts-label');\n    expect(label.length).to.equal(1);\n    expect(label.attr('x')).to.equal(`${cartesianViewBox.x + cartesianViewBox.width / 2}`);\n    expect(label.attr('y')).to.equal(`${cartesianViewBox.y + cartesianViewBox.height / 2}`);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render label when content is a function, and return a simple string.","suites":["<Label />"],"updatePoint":{"line":112,"column":74,"index":3581},"line":112,"code":"  it('Render label when content is a function, and return a simple string.', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, null, /*#__PURE__*/React.createElement(Label, {\n      viewBox: cartesianViewBox,\n      value: \"text\",\n      position: \"center\",\n      content: ({\n        value\n      }) => `${value}%`\n    })));\n    setTimeout(() => {\n      const label = wrapper.find('.recharts-label');\n      expect(label.length).to.equal(1);\n      expect(label.text()).to.equal('text%');\n    }, 1000);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render label by label = <Label />","suites":["<Label />"],"updatePoint":{"line":127,"column":39,"index":4077},"line":127,"code":"  it('Render label by label = <Label />', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 400,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(ReferenceLine, {\n      y: 200,\n      stroke: \"red\",\n      label: /*#__PURE__*/React.createElement(Label, {\n        value: \"Max PV PAGE\"\n      })\n    })));\n    expect(wrapper.find('.recharts-line .recharts-line-curve').length).to.equal(1);\n  });","file":"specs/component/LabelSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 legend items in simple Legend","suites":["<Legend />"],"updatePoint":{"line":19,"column":44,"index":446},"line":19,"code":"  it('Render 4 legend items in simple Legend', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: data\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(4);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Render customized legend when content is set to be a react element","suites":["<Legend />"],"updatePoint":{"line":28,"column":72,"index":839},"line":28,"code":"  it('Render customized legend when content is set to be a react element', () => {\n    const CustomizedLegend = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"customized-legend\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: data,\n      content: /*#__PURE__*/React.createElement(CustomizedLegend, null)\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(0);\n    expect(wrapper.find('.customized-legend').length).to.equal(1);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Does not render items with a type of `none`","suites":["<Legend />"],"updatePoint":{"line":41,"column":49,"index":1384},"line":41,"code":"  it('Does not render items with a type of `none`', () => {\n    const dataWithNone = [{\n      value: 'Apple',\n      color: '#ff7300'\n    }, {\n      value: 'Samsung',\n      color: '#bb7300'\n    }, {\n      value: 'Huawei',\n      color: '#887300'\n    }, {\n      value: 'Sony',\n      type: 'none'\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(Legend, {\n      width: 500,\n      height: 30,\n      payload: dataWithNone\n    }));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(3);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Renders `strokeDasharray` (if present) in Legend when iconType is set to `plainline`","suites":["<Legend />"],"updatePoint":{"line":63,"column":90,"index":2044},"line":63,"code":"  it('Renders `strokeDasharray` (if present) in Legend when iconType is set to `plainline`', () => {\n    const data = [{\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(Legend, {\n      iconType: \"plainline\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      strokeDasharray: \"5 5\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\"\n    })));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item path').length).to.equal(0);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item line').length).to.equal(2);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Does not render `strokeDasharray` (if not present) in Legend when iconType is set to something else than `plainline`","suites":["<Legend />"],"updatePoint":{"line":130,"column":122,"index":3742},"line":130,"code":"  it('Does not render `strokeDasharray` (if not present) in Legend when iconType is set to something else than `plainline`', () => {\n    const data = [{\n      name: 'Page A',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: 'Page B',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: 'Page C',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: 'Page D',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: 'Page E',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: 'Page F',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    }, {\n      name: 'Page G',\n      uv: 3490,\n      pv: 4300,\n      amt: 2100\n    }];\n    const wrapper = render( /*#__PURE__*/React.createElement(LineChart, {\n      width: 600,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }\n    }, /*#__PURE__*/React.createElement(Legend, {\n      iconType: \"line\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      strokeDasharray: \"5 5\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#82ca9d\"\n    })));\n    expect(wrapper.find('.recharts-default-legend').length).to.equal(1);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item path').length).to.equal(2);\n    expect(wrapper.find('.recharts-default-legend .recharts-legend-item line').length).to.equal(0);\n  });","file":"specs/component/LegendSpec.js","skipped":false,"dir":"test"},{"name":"Render a wrapper container in ResponsiveContainer","suites":["<ResponsiveContainer />"],"updatePoint":{"line":8,"column":55,"index":306},"line":8,"code":"  it('Render a wrapper container in ResponsiveContainer', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.recharts-responsive-container').length).to.equal(1);\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Renders with minHeight and minWidth when provided","suites":["<ResponsiveContainer />"],"updatePoint":{"line":14,"column":55,"index":632},"line":14,"code":"  it('Renders with minHeight and minWidth when provided', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      minWidth: 200,\n      minHeight: 100\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.recharts-responsive-container')).to.have.style('min-width').equal('200px');\n    expect(wrapper.find('.recharts-responsive-container')).to.have.style('min-height').equal('100px');\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Renders the component inside","suites":["<ResponsiveContainer />"],"updatePoint":{"line":24,"column":34,"index":1108},"line":24,"code":"  it('Renders the component inside', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      minWidth: 200,\n      minHeight: 100\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.inside').length).to.equal(1);\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Handles zero height correctly","suites":["<ResponsiveContainer />"],"updatePoint":{"line":33,"column":35,"index":1436},"line":33,"code":"  it('Handles zero height correctly', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      height: 0,\n      aspect: 2,\n      width: 300\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.inside')).to.have.attr('width').equal('300');\n    expect(wrapper.find('.inside')).to.have.attr('height').equal('150');\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Handles zero width correctly","suites":["<ResponsiveContainer />"],"updatePoint":{"line":44,"column":34,"index":1861},"line":44,"code":"  it('Handles zero width correctly', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      height: 300,\n      aspect: 2,\n      width: 0\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.inside')).to.have.attr('width').equal('600');\n    expect(wrapper.find('.inside')).to.have.attr('height').equal('300');\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Preserves aspect ratio when oversized","suites":["<ResponsiveContainer />"],"updatePoint":{"line":59,"column":43,"index":2502},"line":59,"code":"  it('Preserves aspect ratio when oversized', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      aspect: 2,\n      height: 100,\n      width: 300\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.inside')).to.have.attr('height').equal('150');\n    expect(wrapper.find('.inside')).to.have.attr('width').equal('300');\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Preserves aspect ratio when undersized","suites":["<ResponsiveContainer />"],"updatePoint":{"line":70,"column":44,"index":2939},"line":70,"code":"  it('Preserves aspect ratio when undersized', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      aspect: 2,\n      height: 300,\n      width: 100\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('.inside')).to.have.attr('width').equal('100');\n    expect(wrapper.find('.inside')).to.have.attr('height').equal('50');\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Renders without an id attribute when not passed","suites":["<ResponsiveContainer />"],"updatePoint":{"line":81,"column":53,"index":3384},"line":81,"code":"  it('Renders without an id attribute when not passed', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(ResponsiveContainer, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inside\"\n    }, \"Inside\")));\n    expect(wrapper.find('#undefined')).to.not.exist;\n  });","file":"specs/component/ResponsiveContainerSpec.js","skipped":false,"dir":"test"},{"name":"Does not wrap long text if enough width","suites":["<Text />"],"updatePoint":{"line":6,"column":45,"index":208},"line":6,"code":"  it('Does not wrap long text if enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if not enough width","suites":["<Text />"],"updatePoint":{"line":15,"column":41,"index":514},"line":15,"code":"  it('Wraps long text if not enough width', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 200,\n      style: {\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text for 200px\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Wraps long text if styled but would have had enough room","suites":["<Text />"],"updatePoint":{"line":24,"column":62,"index":851},"line":24,"code":"  it('Wraps long text if styled but would have had enough room', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: 300,\n      style: {\n        fontSize: '2em',\n        fontFamily: 'Courier'\n      }\n    }, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(2);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Does not perform word length calculation if width or scaleToFit props not set","suites":["<Text />"],"updatePoint":{"line":34,"column":83,"index":1224},"line":34,"code":"  it('Does not perform word length calculation if width or scaleToFit props not set', () => {\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, null, \"This is really long text\"));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(1);\n    expect(wrapper.instance().state.wordsByLines[0].width).to.equal(undefined);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when specify the width","suites":["<Text />"],"updatePoint":{"line":39,"column":45,"index":1540},"line":39,"code":"  it('Render 0 success when specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0,\n      width: 30\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 0 success when not specify the width","suites":["<Text />"],"updatePoint":{"line":49,"column":49,"index":1810},"line":49,"code":"  it('Render 0 success when not specify the width', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: 0,\n      y: 0\n    }, 0));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('0');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render text when x or y is a percentage","suites":["<Text />"],"updatePoint":{"line":58,"column":45,"index":2059},"line":58,"code":"  it('Render text when x or y is a percentage', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Text, {\n      x: \"50%\",\n      y: \"50%\"\n    }, \"anything\"));\n    setTimeout(() => {\n      expect(wrapper.text()).to.contain('anything');\n    }, 1000);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render text when x or y is NaN ","suites":["<Text />"],"updatePoint":{"line":67,"column":43,"index":2330},"line":67,"code":"  it(\"Don't Render text when x or y is NaN \", () => {\n    const wrapperNan = render( /*#__PURE__*/React.createElement(Text, {\n      x: NaN,\n      y: 10\n    }, \"anything\"));\n    expect(wrapperNan.text()).to.not.contain('anything');\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Only split contents on breaking spaces","suites":["<Text />"],"updatePoint":{"line":74,"column":44,"index":2568},"line":74,"code":"  it('Only split contents on breaking spaces', () => {\n    const testString = 'These spaces\\tshould\\nbreak,\\rbut\\xA0these\\xA0should\\xA0not.';\n    const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n      width: \"auto\"\n    }, testString));\n    expect(wrapper.instance().state.wordsByLines.length).to.equal(5);\n  });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"does not do anything when maxLines are not exceeded","suites":["<Text />","maxLines"],"updatePoint":{"line":82,"column":59,"index":2943},"line":82,"code":"    it('does not do anything when maxLines are not exceeded', () => {\n      const withMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      const withoutMaxLines = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 500,\n        maxLines: 3\n      }, \"test\"));\n      expect(withMaxLines.text()).to.equal(withoutMaxLines.text());\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"limits the output to maxLines","suites":["<Text />","maxLines"],"updatePoint":{"line":93,"column":37,"index":3342},"line":93,"code":"    it('limits the output to maxLines', () => {\n      const testString = 'Lorem ratione omnis fuga dignissimos in amet. Minus quam architecto non ea iste! Nihil amet in itaque error velit. Corporis autem sequi aut temporibus placeat. Perferendis quos veritatis quasi pariatur!';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      expect(wrapper.instance().state.wordsByLines <= 2);\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of the truncated line","suites":["<Text />","maxLines"],"updatePoint":{"line":101,"column":57,"index":3842},"line":101,"code":"    it('adds an ellipsis at the end of the truncated line', () => {\n      const testString = 'Sit totam suscipit aliquid suscipit eius, cupiditate Aut excepturi ipsum ut suscipit facilis debitis Provident impedit a distinctio neque quaerat Optio quo quibusdam possimus provident accusantium. Molestiae similique nemo labore';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 2\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal(\"…\");\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"adds an ellipsis at the end of a very long word","suites":["<Text />","maxLines"],"updatePoint":{"line":110,"column":55,"index":4395},"line":110,"code":"    it('adds an ellipsis at the end of a very long word', () => {\n      const testString = 'longwooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooord';\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Text, {\n        width: 200,\n        maxLines: 1\n      }, testString));\n      const text = wrapper.text();\n      expect(text[text.length - 1]).to.equal(\"…\");\n    });","file":"specs/component/TextSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 default tooltip","suites":["<Tooltip />"],"updatePoint":{"line":32,"column":30,"index":571},"line":32,"code":"  it('Render 1 default tooltip', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(AreaChart, {\n      width: 100,\n      height: 50,\n      data: data\n    }, /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#ff7300\",\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Tooltip, null)));\n\n    // I simulate to hover on the AreaChart, then the tooltip should show!\n    wrapper.setState({\n      isTooltipActive: true,\n      chartX: 86,\n      chartY: 21,\n      activeTooltipIndex: 4,\n      activeTooltipLabel: 4,\n      activeTooltipCoord: {\n        x: 95,\n        y: 21\n      }\n    });\n    expect(wrapper.find(Tooltip).length).to.equal(1);\n  });","file":"specs/component/TooltipSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 Trapezoid in a simple funnel","suites":["<Funnel />"],"updatePoint":{"line":26,"column":43,"index":616},"line":26,"code":"  it('Render 5 Trapezoid in a simple funnel', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data\n    })));\n    expect(wrapper.find('.recharts-funnel-trapezoid').length).to.equal(5);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 Trapezoid with animation in a simple funnel","suites":["<Funnel />"],"updatePoint":{"line":36,"column":58,"index":979},"line":36,"code":"  it('Render 5 Trapezoid with animation in a simple funnel', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      isAnimationActive: true,\n      animationEasing: \"spring\"\n    })));\n    expect(wrapper.find('.recharts-funnel-trapezoid').length).to.equal(5);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any Trapezoid when data is empty","suites":["<Funnel />"],"updatePoint":{"line":48,"column":52,"index":1400},"line":48,"code":"  it('Don\\'t render any Trapezoid when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      data: []\n    })));\n    expect(wrapper.find('.recharts-funnel-trapezoid').length).to.equal(0);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any Trapezoid when set hide","suites":["<Funnel />"],"updatePoint":{"line":57,"column":47,"index":1726},"line":57,"code":"  it('Don\\'t render any Trapezoid when set hide', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      hide: true\n    })));\n    expect(wrapper.find('.recharts-funnel-trapezoid').length).to.equal(0);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"active shape in simple funnel","suites":["<Funnel />"],"updatePoint":{"line":68,"column":35,"index":2084},"line":68,"code":"  it('active shape in simple funnel', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      activeIndex: 1,\n      isAnimationActive: false,\n      activeShape: payload => /*#__PURE__*/React.createElement(\"rect\", {\n        className: \"custom-active-shape\",\n        x: payload.x,\n        y: payload.y,\n        height: payload.height,\n        width: payload.upperWidth,\n        fill: \"red\",\n        strokeWidth: \"4\",\n        stroke: \"#fff\"\n      })\n    }, data.map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n      key: `slice-${index}`,\n      fill: colors1[index % 10],\n      opacity: 0.5\n    })))));\n    expect(wrapper.find('.custom-active-shape').length).to.equal(1);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Renders funnel custom cell in simple FunnelChart","suites":["<Funnel />"],"updatePoint":{"line":94,"column":54,"index":2955},"line":94,"code":"  it('Renders funnel custom cell in simple FunnelChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 300\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      isAnimationActive: false\n    }, data.map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n      key: `slice-${index}`,\n      fill: colors1[index % 10],\n      className: \"custom-cell\"\n    })))));\n    expect(wrapper.find('.custom-cell').length).to.equal(5);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Renders funnel custom label in simple FunnelChart","suites":["<Funnel />"],"updatePoint":{"line":109,"column":55,"index":3503},"line":109,"code":"  it('Renders funnel custom label in simple FunnelChart', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(FunnelChart, {\n      width: 500,\n      height: 300\n    }, /*#__PURE__*/React.createElement(Funnel, {\n      dataKey: \"value\",\n      data: data,\n      isAnimationActive: false\n    }, data.map((entry, index) => /*#__PURE__*/React.createElement(Cell, {\n      key: `slice-${index}`,\n      fill: colors1[index % 10],\n      className: \"custom-cell\"\n    })), /*#__PURE__*/React.createElement(LabelList, {\n      position: \"right\",\n      fill: \"#000\",\n      stroke: \"#000\",\n      dataKey: \"name\",\n      className: \"custom-label\"\n    }))));\n    expect(wrapper.find('.custom-label').length).to.equal(5);\n  });","file":"specs/numberAxis/FunnelSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors in a simple Pie","suites":["<Pie />"],"updatePoint":{"line":49,"column":38,"index":1391},"line":49,"code":"  it('Render 5 sectors in a simple Pie', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.recharts-pie-sector').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be an element","suites":["<Pie />"],"updatePoint":{"line":63,"column":78,"index":1864},"line":63,"code":"  it('Render customized active sector when activeShape is set to be an element', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(1);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be a function","suites":["<Pie />"],"updatePoint":{"line":83,"column":78,"index":2593},"line":83,"code":"  it('Render customized active sector when activeShape is set to be a function', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: renderActiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(1);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when activeShape is set to be an object","suites":["<Pie />"],"updatePoint":{"line":103,"column":77,"index":3293},"line":103,"code":"  it('Render customized active sector when activeShape is set to be an object', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: {\n        fill: '#ff7300'\n      },\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized active sector when inactiveShape is set to be an element","suites":["<Pie />"],"updatePoint":{"line":121,"column":80,"index":3835},"line":121,"code":"  it('Render customized active sector when inactiveShape is set to be an element', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const InactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      inactiveShape: /*#__PURE__*/React.createElement(InactiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(4);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized inactive sector when inactiveShape is set to be a function","suites":["<Pie />"],"updatePoint":{"line":146,"column":82,"index":4821},"line":146,"code":"  it('Render customized inactive sector when inactiveShape is set to be a function', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const renderInactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: renderActiveShape,\n      inactiveShape: renderInactiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(4);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized inactive sector when inactiveShape is set to be an object","suites":["<Pie />"],"updatePoint":{"line":171,"column":81,"index":5750},"line":171,"code":"  it('Render customized inactive sector when inactiveShape is set to be an object', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: 0,\n      activeShape: {\n        fill: '#ff7300'\n      },\n      inactiveShape: {\n        fill: '#ff7322'\n      },\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"should not render customized inactive sectors if there is no active index","suites":["<Pie />"],"updatePoint":{"line":192,"column":79,"index":6349},"line":192,"code":"  it('should not render customized inactive sectors if there is no active index', () => {\n    const renderActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const renderInactiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-inactive-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeShape: renderActiveShape,\n      inactiveShape: renderInactiveShape,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-inactive-shape').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Support multiple active sectors","suites":["<Pie />"],"updatePoint":{"line":216,"column":37,"index":7212},"line":216,"code":"  it('Support multiple active sectors', () => {\n    const ActiveShape = props => /*#__PURE__*/React.createElement(Sector, _extends({}, props, {\n      fill: \"#ff7300\",\n      className: \"customized-active-shape\"\n    }));\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      activeIndex: [0, 2],\n      activeShape: /*#__PURE__*/React.createElement(ActiveShape, null),\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-active-shape').length).to.equal(2);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":236,"column":69,"index":7937},"line":236,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const Label = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: /*#__PURE__*/React.createElement(Label, null),\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a function that returns the label text","suites":["<Pie />"],"updatePoint":{"line":262,"column":92,"index":8709},"line":262,"code":"  it('Render customized label when label is set to be a function that returns the label text', () => {\n    const Label = props => {\n      const {\n        name,\n        value\n      } = props;\n      return `${name}: ${value}`;\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: Label,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    setTimeout(() => {\n      expect(wrapper.find('.recharts-pie-label-text').length).to.equal(sectors.length);\n      expect(wrapper.find('.recharts-pie-label-text').first().text()).to.equal('A: 40');\n    }, 1000);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":287,"column":69,"index":9454},"line":287,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: renderLabel,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label line when labelLine is set to be a react element","suites":["<Pie />"],"updatePoint":{"line":313,"column":78,"index":10184},"line":313,"code":"  it('Render customized label line when labelLine is set to be a react element', () => {\n    const LabelLine = props => {\n      const {\n        points\n      } = props;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: `M${points[0].x},${points[0].y}L${points[1].x},${points[1].y}`,\n        className: \"customized-label-line\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      labelLine: /*#__PURE__*/React.createElement(LabelLine, null),\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label-line').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label line when labelLine is set to be a function","suites":["<Pie />"],"updatePoint":{"line":338,"column":73,"index":11011},"line":338,"code":"  it('Render customized label line when labelLine is set to be a function', () => {\n    const renderLabelLine = props => {\n      const {\n        points\n      } = props;\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: `M${points[0].x},${points[0].y}L${points[1].x},${points[1].y}`,\n        className: \"customized-label-line\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      labelLine: renderLabelLine,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    })));\n    expect(wrapper.find('.customized-label-line').length).to.equal(sectors.length);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when data is empty","suites":["<Pie />"],"updatePoint":{"line":363,"column":48,"index":11785},"line":363,"code":"  it(\"Don't render any sector when data is empty\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      sectors: []\n    })));\n    expect(wrapper.find('.recharts-pie').length).to.equal(0);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Pie event handler","suites":["<Pie />"],"updatePoint":{"line":372,"column":23,"index":12070},"line":372,"code":"  it('Pie event handler', () => {\n    const onMouseEnter = sinon.spy();\n    const onMouseLeave = sinon.spy();\n    const onClick = sinon.spy();\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick\n    })));\n    const se = wrapper.find(Layer).at(3);\n    se.simulate('mouseEnter');\n    expect(onMouseEnter.calledOnce).to.equal(true);\n    se.simulate('mouseLeave');\n    expect(onMouseLeave.calledOnce).to.equal(true);\n    se.simulate('click');\n    expect(onClick.calledOnce).to.equal(true);\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Handles keyboard interaction: Tab can focus in and out of the pie chart","suites":["<Pie />"],"updatePoint":{"line":398,"column":77,"index":12941},"line":398,"code":"  it('Handles keyboard interaction: Tab can focus in and out of the pie chart', async () => {\n    const timeout = 2000;\n    const {\n      container\n    } = testingLibraryRender(\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    React.createElement(\"div\", {\n      tabIndex: 0,\n      className: \"container\"\n    }, /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    }))));\n    const pie = container.getElementsByClassName('recharts-pie')[0];\n    const pieContainer = document.getElementsByClassName('container')[0];\n    pieContainer.focus();\n    await waitFor(() => {\n      expect(document.activeElement).equals(pieContainer);\n    }, {\n      timeout\n    });\n\n    // Testing that pressing tab goes into pie chart\n    userEvent.tab();\n    await waitFor(() => {\n      expect(document.activeElement).equals(pie);\n    }, {\n      timeout\n    });\n\n    // Testing that pressing tab goes out of pie chart\n    userEvent.tab();\n    await waitFor(() => {\n      expect(document.activeElement).equals(document.body);\n    }, {\n      timeout\n    });\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Handles keyboard interaction: arrow keys can move focus into sectors","suites":["<Pie />"],"updatePoint":{"line":445,"column":74,"index":14245},"line":445,"code":"  it('Handles keyboard interaction: arrow keys can move focus into sectors', async () => {\n    const timeout = 2000;\n    const {\n      container\n    } = testingLibraryRender(\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    React.createElement(\"div\", {\n      tabIndex: 0,\n      className: \"container\"\n    }, /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Pie, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      label: true,\n      innerRadius: 0,\n      outerRadius: 200,\n      sectors: sectors\n    }))));\n    const pie = container.getElementsByClassName('recharts-pie')[0];\n    pie.focus();\n    await waitFor(() => {\n      expect(document.activeElement.classList.contains('recharts-pie-sector')).to.equal(false);\n    }, {\n      timeout\n    });\n    userEvent.keyboard('{ArrowRight}');\n    await waitFor(() => {\n      expect(document.activeElement.classList.contains('recharts-pie-sector')).to.equal(true);\n    }, {\n      timeout\n    });\n  });","file":"specs/polar/PieSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when ticks is not empty","suites":["<PolarAngleAxis />"],"updatePoint":{"line":22,"column":48,"index":441},"line":22,"code":"  it('Renders 5 ticks in when ticks is not empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      ticks: ticks\n    })));\n    expect(wrapper.find('.recharts-polar-angle-axis-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when tick is set to be a react element","suites":["<PolarAngleAxis />"],"updatePoint":{"line":34,"column":63,"index":854},"line":34,"code":"  it('Renders 5 ticks in when tick is set to be a react element', () => {\n    const Tick = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      tick: /*#__PURE__*/React.createElement(Tick, null),\n      ticks: ticks\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks in when tick is set to be a function","suites":["<PolarAngleAxis />"],"updatePoint":{"line":58,"column":58,"index":1531},"line":58,"code":"  it('Renders 5 ticks in when tick is set to be a function', () => {\n    const Tick = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, \"test\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      tick: Tick,\n      ticks: ticks,\n      axisLineType: \"circle\"\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(ticks.length);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't Renders any ticks in when ticks is empty","suites":["<PolarAngleAxis />"],"updatePoint":{"line":83,"column":53,"index":2193},"line":83,"code":"  it('Don\\'t Renders any ticks in when ticks is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarAngleAxis, {\n      cx: 250,\n      cy: 250,\n      radus: 50,\n      ticks: []\n    })));\n    expect(wrapper.find('.recharts-polar-angle-axis-tick').length).to.equal(0);\n  });","file":"specs/polar/PolarAngleAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders angle lines and polygons","suites":["<PolarGrid />"],"updatePoint":{"line":8,"column":38,"index":322},"line":8,"code":"  it('Renders angle lines and polygons', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarGrid, {\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      width: 500,\n      height: 500,\n      polarAngles: polarAngles,\n      polarRadius: polarRadius\n    })));\n    expect(wrapper.find('.recharts-polar-grid-angle line').length).to.equal(9);\n    expect(wrapper.find('.recharts-polar-grid-concentric-polygon').length).to.equal(4);\n  });","file":"specs/polar/PolarGridSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any lines or polygons when polarAngles and polarRadius are not specified","suites":["<PolarGrid />"],"updatePoint":{"line":25,"column":92,"index":946},"line":25,"code":"  it('Don\\'t render any lines or polygons when polarAngles and polarRadius are not specified', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarGrid, {\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      width: 500,\n      height: 500\n    })));\n    expect(wrapper.find('.recharts-polar-grid-angle line').length).to.equal(0);\n    expect(wrapper.find('.recharts-polar-grid-concentric-polygon').length).to.equal(0);\n  });","file":"specs/polar/PolarGridSpec.js","skipped":false,"dir":"test"},{"name":"Render circles when gridType is specified to be circle","suites":["<PolarGrid />"],"updatePoint":{"line":40,"column":60,"index":1474},"line":40,"code":"  it('Render circles when gridType is specified to be circle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarGrid, {\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 200,\n      width: 500,\n      height: 500,\n      gridType: \"circle\",\n      polarAngles: polarAngles,\n      polarRadius: polarRadius\n    })));\n    expect(wrapper.find('.recharts-polar-grid-angle line').length).to.equal(9);\n    expect(wrapper.find('.recharts-polar-grid-concentric-circle').length).to.equal(4);\n  });","file":"specs/polar/PolarGridSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when outerRadius is smaller than 0","suites":["<PolarGrid />"],"updatePoint":{"line":58,"column":63,"index":2094},"line":58,"code":"  it('Don\\'t render any path when outerRadius is smaller than 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarGrid, {\n      cx: 250,\n      cy: 250,\n      innerRadius: 0,\n      outerRadius: 0,\n      width: 500,\n      height: 500,\n      gridType: \"circle\",\n      polarAngles: polarAngles,\n      polarRadius: polarRadius\n    })));\n    expect(wrapper.find('.recharts-polar-grid-angle line').length).to.equal(0);\n    expect(wrapper.find('.recharts-polar-grid-concentric-circle').length).to.equal(0);\n  });","file":"specs/polar/PolarGridSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when orientation is set to be middle","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":22,"column":58,"index":459},"line":22,"code":"  it('Renders 5 ticks when orientation is set to be middle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"middle\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when orientation is set to be left","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":36,"column":56,"index":953},"line":36,"code":"  it('Renders 5 ticks when orientation is set to be left', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when tick is set to be a function","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":50,"column":55,"index":1444},"line":50,"code":"  it('Renders 5 ticks when tick is set to be a function', () => {\n    const renderTick = props => {\n      const {\n        payload,\n        x,\n        y,\n        fill\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, payload.value);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\",\n      tick: renderTick\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders 5 ticks when tick is set to be a react element","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":78,"column":60,"index":2218},"line":78,"code":"  it('Renders 5 ticks when tick is set to be a react element', () => {\n    const Tick = props => {\n      const {\n        payload,\n        x,\n        y,\n        fill\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-tick\"\n      }, payload.value);\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: \"test\",\n      tick: /*#__PURE__*/React.createElement(Tick, null)\n    })));\n    expect(wrapper.find('.customized-tick').length).to.equal(5);\n    expect(wrapper.find('.recharts-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is set to be a function","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":106,"column":54,"index":3014},"line":106,"code":"  it('Renders label when label is set to be a function', () => {\n    const renderLabel = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: renderLabel\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Renders label when label is set to be a react element","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":130,"column":59,"index":3668},"line":130,"code":"  it('Renders label when label is set to be a react element', () => {\n    const Label = props => {\n      const {\n        x,\n        y\n      } = props;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        x: x,\n        y: y,\n        className: \"customized-label\"\n      }, \"any\");\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: ticks,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(1);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Don't Renders any ticks in when ticks is empty","suites":["<PolarRadiusAxis />"],"updatePoint":{"line":154,"column":53,"index":4344},"line":154,"code":"  it('Don\\'t Renders any ticks in when ticks is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n      orientation: \"left\",\n      cx: 250,\n      cy: 250,\n      ticks: [],\n      label: \"test\"\n    })));\n    expect(wrapper.find('.recharts-polar-radius-axis-tick').length).to.equal(0);\n    expect(wrapper.find('.recharts-label').length).to.equal(0);\n  });","file":"specs/polar/PolarRadiusAxisSpec.js","skipped":false,"dir":"test"},{"name":"Render a polygon in a simple Radar","suites":["<Radar />"],"updatePoint":{"line":39,"column":40,"index":642},"line":39,"code":"  it('Render a polygon in a simple Radar', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data\n    })));\n    expect(wrapper.find('.recharts-radar-polygon').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized shape when shape is set to be a element","suites":["<Radar />"],"updatePoint":{"line":49,"column":63,"index":1012},"line":49,"code":"  it('Render customized shape when shape is set to be a element', () => {\n    const Shape = ({\n      points\n    }) => {\n      const d = (points || []).reduce((result, entry, index) => result + (index ? `L${entry.x},${entry.y}` : `M${entry.x},${entry.y}`), '');\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: d,\n        className: \"customized-shape\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      shape: /*#__PURE__*/React.createElement(Shape, null)\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized shape when shape is set to be a function","suites":["<Radar />"],"updatePoint":{"line":69,"column":64,"index":1749},"line":69,"code":"  it('Render customized shape when shape is set to be a function', () => {\n    const Shape = ({\n      points\n    }) => {\n      const d = (points || []).reduce((result, entry, index) => result + (index ? `L${entry.x},${entry.y}` : `M${entry.x},${entry.y}`), '');\n      return /*#__PURE__*/React.createElement(\"path\", {\n        d: d,\n        className: \"customized-shape\"\n      });\n    };\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      shape: Shape\n    })));\n    expect(wrapper.find('.customized-shape').length).to.equal(1);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a react element","suites":["<Radar />"],"updatePoint":{"line":89,"column":69,"index":2451},"line":89,"code":"  it('Render customized label when label is set to be a react element', () => {\n    const Label = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-label\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      label: /*#__PURE__*/React.createElement(Label, null)\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized label when label is set to be a function","suites":["<Radar />"],"updatePoint":{"line":108,"column":64,"index":3053},"line":108,"code":"  it('Render customized label when label is set to be a function', () => {\n    const Label = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"text\", {\n      x: x,\n      y: y,\n      className: \"customized-label\"\n    }, \"test\");\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      label: Label\n    })));\n    expect(wrapper.find('.customized-label').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized dot when dot is set to be a react element","suites":["<Radar />"],"updatePoint":{"line":127,"column":65,"index":3616},"line":127,"code":"  it('Render customized dot when dot is set to be a react element', () => {\n    const Dot = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: x,\n      cy: y,\n      r: 10,\n      className: \"customized-dot\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      dot: /*#__PURE__*/React.createElement(Dot, null)\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render customized dot when dot is set to be a function","suites":["<Radar />"],"updatePoint":{"line":147,"column":60,"index":4213},"line":147,"code":"  it('Render customized dot when dot is set to be a function', () => {\n    const Dot = ({\n      x,\n      y\n    }) => /*#__PURE__*/React.createElement(\"circle\", {\n      cx: x,\n      cy: y,\n      r: 10,\n      className: \"customized-dot\"\n    });\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: data,\n      dot: Dot\n    })));\n    expect(wrapper.find('.customized-dot').length).to.equal(data.length);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Don't render polygon when points is empty","suites":["<Radar />"],"updatePoint":{"line":167,"column":48,"index":4758},"line":167,"code":"  it('Don\\'t render polygon when points is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Radar, {\n      isAnimationActive: false,\n      points: []\n    })));\n    expect(wrapper.find('.recharts-radar-polygon').length).to.equal(0);\n  });","file":"specs/polar/RadarSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors","suites":["<RadialBar />"],"updatePoint":{"line":39,"column":22,"index":729},"line":39,"code":"  it('Render 5 sectors', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      data: data,\n      label: true\n    })));\n    expect(wrapper.find('.recharts-radial-bar-sector').length).to.equal(data.length);\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when data is empty","suites":["<RadialBar />"],"updatePoint":{"line":52,"column":49,"index":1150},"line":52,"code":"  it('Don\\'t render any sector when data is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      data: []\n    })));\n    expect(wrapper.find('.recharts-pie').length).to.equal(0);\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Render 5 sectors","suites":["<RadialBar />"],"updatePoint":{"line":61,"column":22,"index":1437},"line":61,"code":"  it('Render 5 sectors', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(RadialBar, {\n      isAnimationActive: false,\n      cx: 250,\n      cy: 250,\n      data: data\n    })));\n    const se = wrapper.find(Sector).first();\n    se.simulate('mouseEnter');\n    se.simulate('mouseLeave');\n    se.simulate('click');\n  });","file":"specs/polar/RadialBarSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 path in Cross","suites":["<Cross />"],"updatePoint":{"line":6,"column":28,"index":200},"line":6,"code":"  it('Render 1 path in Cross', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Cross, {\n      top: 50,\n      left: 50,\n      x: 150,\n      y: 180,\n      width: 200,\n      height: 200,\n      stroke: \"#000\",\n      fill: \"none\"\n    })));\n    expect(wrapper.find('.recharts-cross').length).to.equal(1);\n  });","file":"specs/shape/CrossSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when props is invalid","suites":["<Cross />"],"updatePoint":{"line":22,"column":50,"index":635},"line":22,"code":"  it('Don\\'t render any path when props is invalid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Cross, {\n      top: 50,\n      left: 50,\n      x: \"x\",\n      y: 180,\n      width: 200,\n      height: 200,\n      stroke: \"#000\",\n      fill: \"none\"\n    })));\n    expect(wrapper.find('.recharts-cross').length).to.equal(0);\n  });","file":"specs/shape/CrossSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 curve","suites":["<Curve />"],"updatePoint":{"line":38,"column":21,"index":518},"line":38,"code":"  it('renders 1 curve', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 vertical layout area","suites":["<Curve />"],"updatePoint":{"line":50,"column":36,"index":889},"line":50,"code":"  it('renders 1 vertical layout area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"vertical\",\n      baseLine: 0\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 horizontal layout area","suites":["<Curve />"],"updatePoint":{"line":64,"column":38,"index":1313},"line":64,"code":"  it('renders 1 horizontal layout area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"horizontal\",\n      baseLine: 0\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"renders 1 area","suites":["<Curve />"],"updatePoint":{"line":78,"column":20,"index":1721},"line":78,"code":"  it('renders 1 area', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: points,\n      baseLineType: \"curve\",\n      baseLine: points02\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(1);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"Not render when points is empty","suites":["<Curve />"],"updatePoint":{"line":92,"column":37,"index":2148},"line":92,"code":"  it('Not render when points is empty', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Curve, {\n      stroke: \"#000\",\n      fill: \"none\",\n      type: \"monotone\",\n      points: []\n    })));\n    expect(wrapper.find('.recharts-curve').length).to.equal(0);\n  });","file":"specs/shape/CurveSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 circle in simple Dot","suites":["<Dot />"],"updatePoint":{"line":6,"column":35,"index":203},"line":6,"code":"  it('Render 1 circle in simple Dot', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Dot, {\n      cx: 100,\n      cy: 100,\n      r: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-dot').length).to.equal(1);\n  });","file":"specs/shape/DotSpec.js","skipped":false,"dir":"test"},{"name":"Don't Render any circle when cx is invalid","suites":["<Dot />"],"updatePoint":{"line":18,"column":48,"index":559},"line":18,"code":"  it(\"Don't Render any circle when cx is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Dot, {\n      cy: 100,\n      r: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-dot').length).to.equal(0);\n  });","file":"specs/shape/DotSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 path in simple Polygon","suites":["<Polygon />"],"updatePoint":{"line":16,"column":37,"index":321},"line":16,"code":"  it('Render 1 path in simple Polygon', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Polygon, {\n      points: points,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-polygon').length).to.equal(1);\n  });","file":"specs/shape/PolygonSpec.js","skipped":false,"dir":"test"},{"name":"Dno't render any path when points is empty or null","suites":["<Polygon />"],"updatePoint":{"line":26,"column":57,"index":674},"line":26,"code":"  it('Dno\\'t render any path when points is empty or null', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Polygon, {\n      points: [],\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Polygon, {\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-polygon').length).to.equal(0);\n  });","file":"specs/shape/PolygonSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 rectangle in simple Rectangle","suites":["<Rectangle />"],"updatePoint":{"line":6,"column":44,"index":224},"line":6,"code":"  it('Render 1 rectangle in simple Rectangle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: 100,\n      radius: [5, 10, 8, 15],\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(1);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 rectangle in simple Rectangle","suites":["<Rectangle />"],"updatePoint":{"line":20,"column":44,"index":638},"line":20,"code":"  it('Render 1 rectangle in simple Rectangle', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: 100,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(1);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 4 arc when height < 0","suites":["<Rectangle />"],"updatePoint":{"line":34,"column":34,"index":1029},"line":34,"code":"  it('Render 4 arc when height < 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 80,\n      height: -100,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    const rects = wrapper.find('.recharts-rectangle');\n    expect(rects.length).to.equal(1);\n    const path = rects[0].attribs.d;\n    expect(path).to.not.be.empty;\n    expect(path.length - path.split('A').join('').length).to.equal(4);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Dont't Render anything when height === 0 || width === 0","suites":["<Rectangle />"],"updatePoint":{"line":52,"column":61,"index":1616},"line":52,"code":"  it(\"Dont't Render anything when height === 0 || width === 0\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 80,\n      height: 0,\n      radius: 5,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 200,\n      width: 0,\n      height: 30,\n      radius: 5,\n      fill: \"#ff7300\"\n    })));\n    const rects = wrapper.find('.recharts-rectangle');\n    expect(rects.length).to.equal(0);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any path when x, y, width or height is not a number","suites":["<Rectangle />"],"updatePoint":{"line":74,"column":71,"index":2222},"line":74,"code":"  it('Don\\'t render any path when x, y, width or height is not a number', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Rectangle, {\n      x: \"a\",\n      y: 50,\n      width: 80,\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: \"b\",\n      width: 80,\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: \"c\",\n      height: 100,\n      fill: \"#ff7300\"\n    }), /*#__PURE__*/React.createElement(Rectangle, {\n      x: 50,\n      y: 50,\n      width: 80,\n      height: \"d\",\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-rectangle').length).to.equal(0);\n  });","file":"specs/shape/RectangleSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 sector in simple Sector","suites":["<Sector />"],"updatePoint":{"line":6,"column":38,"index":212},"line":6,"code":"  it('Render 1 sector in simple Sector', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      endAngle: 90\n    })));\n    expect(wrapper.find('.recharts-sector').length).to.equal(1);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 sector when cornerRadius > 0","suites":["<Sector />"],"updatePoint":{"line":20,"column":43,"index":625},"line":20,"code":"  it('Render 1 sector when cornerRadius > 0', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      cornerRadius: 10,\n      endAngle: 90\n    })));\n    const sectors = wrapper.find('.recharts-sector');\n    expect(sectors.length).to.equal(1);\n    const path = sectors[0].attribs.d;\n    expect(path).to.not.be.empty;\n    expect(path.length - path.split('A').join('').length).to.equal(6);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any sector when props is invalid","suites":["<Sector />"],"updatePoint":{"line":39,"column":52,"index":1244},"line":39,"code":"  it('Don\\'t render any sector when props is invalid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 200,\n      outerRadius: 150,\n      endAngle: 90\n    }), /*#__PURE__*/React.createElement(Sector, {\n      fill: \"#ff7902\",\n      cx: 200,\n      cy: 300,\n      innerRadius: 150,\n      outerRadius: 200,\n      startAngle: 90,\n      endAngle: 90\n    })));\n    expect(wrapper.find('.recharts-sector').length).to.equal(0);\n  });","file":"specs/shape/SectorSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 symbol","suites":["<Symbols />"],"updatePoint":{"line":6,"column":21,"index":197},"line":6,"code":"  it('Render 1 symbol', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cx: 100,\n      cy: 100,\n      size: 100,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(1);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 symbol when type is wrong","suites":["<Symbols />"],"updatePoint":{"line":18,"column":40,"index":558},"line":18,"code":"  it('Render 1 symbol when type is wrong', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cx: 100,\n      cy: 100,\n      size: 100,\n      type: \"anything\",\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(1);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any symbol when cx is invalid","suites":["<Symbols />"],"updatePoint":{"line":31,"column":48,"index":951},"line":31,"code":"  it(\"Don't render any symbol when cx is invalid\", () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 400,\n      height: 400\n    }, /*#__PURE__*/React.createElement(Symbols, {\n      cy: 100,\n      size: 100,\n      fill: \"#ff7300\"\n    })));\n    expect(wrapper.find('.recharts-symbols').length).to.equal(0);\n  });","file":"specs/shape/SymbolsSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 Trapezoid in simple Trapezoid","suites":["<Trapezoid />"],"updatePoint":{"line":7,"column":44,"index":279},"line":7,"code":"  it('Render 1 Trapezoid in simple Trapezoid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 50\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(1);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"},{"name":"Render 1 Trapezoid with animation in simple Trapezoid","suites":["<Trapezoid />"],"updatePoint":{"line":21,"column":59,"index":703},"line":21,"code":"  it('Render 1 Trapezoid with animation in simple Trapezoid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 50,\n      isUpdateAnimationActive: true\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(1);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"},{"name":"Don't render any Trapezoid when props is invalid","suites":["<Trapezoid />"],"updatePoint":{"line":36,"column":55,"index":1160},"line":36,"code":"  it('Don\\'t render any Trapezoid when props is invalid', () => {\n    const wrapper = render( /*#__PURE__*/React.createElement(Surface, {\n      width: 500,\n      height: 500\n    }, /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 0,\n      lowerWidth: 0,\n      height: 50\n    }), /*#__PURE__*/React.createElement(Trapezoid, {\n      fill: \"#f00\",\n      x: 300,\n      y: 100,\n      upperWidth: 100,\n      lowerWidth: 0,\n      height: 0\n    })));\n    expect(wrapper.find('.recharts-trapezoid').length).to.equal(0);\n  });","file":"specs/shape/TrapezoidSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return the expected value","suites":["ScaleHelper"],"updatePoint":{"line":5,"column":46,"index":246},"line":5,"code":"  it('apply() should return the expected value', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(2)).to.equal(2);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return the expected value when bandAware = true","suites":["ScaleHelper"],"updatePoint":{"line":9,"column":68,"index":421},"line":9,"code":"  it('apply() should return the expected value when bandAware = true', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(2, {\n      bandAware: true\n    })).to.equal(2);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return the expected value for band scale","suites":["ScaleHelper"],"updatePoint":{"line":15,"column":61,"index":620},"line":15,"code":"  it('apply() should return the expected value for band scale', () => {\n    const scale = new ScaleHelper(scaleBand().domain([0, 1, 2, 3]).range([0, 100]));\n    expect(scale.apply(2)).to.equal(50);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return the expected value for band scale when bandAware = true","suites":["ScaleHelper"],"updatePoint":{"line":19,"column":83,"index":846},"line":19,"code":"  it('apply() should return the expected value for band scale when bandAware = true', () => {\n    const scale = new ScaleHelper(scaleBand().domain([0, 1, 2, 3]).range([0, 100]));\n    expect(scale.apply(2, {\n      bandAware: true\n    })).to.equal(50 + 25 / 2.);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return undefined for undefined","suites":["ScaleHelper"],"updatePoint":{"line":25,"column":51,"index":1081},"line":25,"code":"  it('apply() should return undefined for undefined', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(undefined)).to.equal(undefined);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return undefined for undefined","suites":["ScaleHelper"],"updatePoint":{"line":29,"column":51,"index":1255},"line":29,"code":"  it('apply() should return undefined for undefined', () => {\n    const scale = new ScaleHelper(scaleLinear());\n    expect(scale.apply(undefined)).to.equal(undefined);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isInRange() should return true for a value in range","suites":["ScaleHelper"],"updatePoint":{"line":33,"column":57,"index":1435},"line":33,"code":"  it('isInRange() should return true for a value in range', () => {\n    const scale = new ScaleHelper(scaleLinear().domain([-200, 200]).range([0, 50]));\n    expect(scale.isInRange(35)).to.equal(true);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isInRange() should return false for a value out of range","suites":["ScaleHelper"],"updatePoint":{"line":37,"column":62,"index":1647},"line":37,"code":"  it('isInRange() should return false for a value out of range', () => {\n    const scale = new ScaleHelper(scaleLinear().domain([-200, 200]).range([0, 50]));\n    expect(scale.isInRange(-10)).to.equal(false);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"apply() should return the expected values","suites":["createLabeldScales"],"updatePoint":{"line":43,"column":47,"index":1889},"line":43,"code":"  it('apply() should return the expected values', () => {\n    const scales = createLabeledScales({\n      x: scaleBand().domain([0, 1, 2, 3]).range([0, 100]),\n      y: scaleLinear().domain([-200, 200]).range([0, 50])\n    });\n    expect(scales.apply({\n      x: 2\n    }, {\n      bandAware: true\n    })).to.deep.equal({\n      x: 50 + 25 / 2.\n    });\n    expect(scales.apply({\n      x: 2\n    }, {\n      bandAware: true,\n      position: 'start'\n    })).to.deep.equal({\n      x: 50\n    });\n    expect(scales.apply({\n      x: 2\n    }, {\n      bandAware: true,\n      position: 'middle'\n    })).to.deep.equal({\n      x: 50 + 25 / 2.0\n    });\n    expect(scales.apply({\n      x: 2\n    }, {\n      bandAware: true,\n      position: 'end'\n    })).to.deep.equal({\n      x: 50 + 25\n    });\n    expect(scales.apply({\n      y: 100\n    }, {\n      bandAware: true\n    })).to.deep.equal({\n      y: 37.5\n    });\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isInRange() should return the expected values","suites":["createLabeldScales"],"updatePoint":{"line":87,"column":51,"index":2787},"line":87,"code":"  it('isInRange() should return the expected values', () => {\n    const scales = createLabeledScales({\n      x: scaleBand().domain([0, 1, 2, 3]).range([0, 100]),\n      y: scaleLinear().domain([-200, 200]).range([0, 50])\n    });\n    expect(scales.isInRange({\n      x: 50\n    })).to.equal(true);\n    expect(scales.isInRange({\n      x: 50,\n      y: 35\n    })).to.equal(true);\n    expect(scales.isInRange({\n      y: 35\n    })).to.equal(true);\n    expect(scales.isInRange({\n      y: 100\n    })).to.equal(false);\n    expect(scales.isInRange({\n      x: 50,\n      y: 100\n    })).to.equal(false);\n    expect(scales.isInRange({})).to.equal(true);\n  });","file":"specs/util/CartesianUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getBandSizeOfAxis() should return 0 ","suites":["getBandSizeOfAxis"],"updatePoint":{"line":8,"column":52,"index":591},"line":8,"code":"  it('DataUtils.getBandSizeOfAxis() should return 0 ', () => {\n    expect(getBandSizeOfAxis()).to.equal(0);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getBandSizeOfAxis({ type: \"category\", scale }) should return 0 ","suites":["getBandSizeOfAxis"],"updatePoint":{"line":11,"column":79,"index":732},"line":11,"code":"  it('DataUtils.getBandSizeOfAxis({ type: \"category\", scale }) should return 0 ', () => {\n    const axis = {\n      type: 'category',\n      scale: scaleBand().domain([0, 1, 2, 3]).range([0, 100])\n    };\n    expect(getBandSizeOfAxis(axis)).to.equal(25);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getBandSizeOfAxis({ type: \"number\", scale }, ticks) should return 0 ","suites":["getBandSizeOfAxis"],"updatePoint":{"line":18,"column":84,"index":995},"line":18,"code":"  it('DataUtils.getBandSizeOfAxis({ type: \"number\", scale }, ticks) should return 0 ', () => {\n    const axis = {\n      type: 'number'\n    };\n    const ticks = [{\n      coordinate: 13\n    }, {\n      coordinate: 15\n    }, {\n      coordinate: 20\n    }];\n    expect(getBandSizeOfAxis(axis, ticks)).to.equal(2);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain(1, domain) should return domain ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":34,"column":69,"index":1367},"line":34,"code":"  it('DataUtils.parseSpecifiedDomain(1, domain) should return domain ', () => {\n    expect(parseSpecifiedDomain(1, domain)).to.equal(domain);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain([\"auto\", \"auto\"], domain) should return domain ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":37,"column":84,"index":1530},"line":37,"code":"  it('DataUtils.parseSpecifiedDomain([\"auto\", \"auto\"], domain) should return domain ', () => {\n    const result = parseSpecifiedDomain(['auto', 'auto'], domain);\n    expect(result).to.deep.equal(domain);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain([-1, 120], domain) should return input value ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":41,"column":82,"index":1738},"line":41,"code":"  it('DataUtils.parseSpecifiedDomain([-1, 120], domain) should return input value ', () => {\n    const result = parseSpecifiedDomain([-1, 120], domain);\n    expect(result).to.deep.equal([-1, 120]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain([\"dataMin - 10\", \"dataMax + 10\"], domain) should return computed value ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":45,"column":108,"index":1968},"line":45,"code":"  it('DataUtils.parseSpecifiedDomain([\"dataMin - 10\", \"dataMax + 10\"], domain) should return computed value ', () => {\n    const result = parseSpecifiedDomain(['dataMin - 10', 'dataMax + 10'], domain);\n    expect(result).to.deep.equal([10, 110]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain([dataMin => (0 - Math.abs(dataMin)), dataMax => (dataMax * 2)], domain) should return [-20, 200] ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":49,"column":134,"index":2247},"line":49,"code":"  it('DataUtils.parseSpecifiedDomain([dataMin => (0 - Math.abs(dataMin)), dataMax => (dataMax * 2)], domain) should return [-20, 200] ', () => {\n    const result = parseSpecifiedDomain([dataMin => 0 - Math.abs(dataMin), dataMax => dataMax * 2], domain);\n    expect(result).to.deep.equal([-20, 200]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.parseSpecifiedDomain(callback, domain) should execute the callback and return computed value ","suites":["parseSpecifiedDomain"],"updatePoint":{"line":53,"column":109,"index":2528},"line":53,"code":"  it('DataUtils.parseSpecifiedDomain(callback, domain) should execute the callback and return computed value ', () => {\n    const result = parseSpecifiedDomain(([dataMin, dataMax], _allowDataOverflow) => [dataMin / 4, dataMax * 4], domain);\n    expect(result).to.deep.equal([5, 400]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of \"time\" ","suites":["parseScale"],"updatePoint":{"line":59,"column":16,"index":2761},"line":59,"code":"  it('of \"time\" ', () => {\n    const {\n      scale\n    } = parseScale({\n      scale: 'time'\n    });\n    expect(scale).to.be.instanceof(Function);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of [12, 12] should return true","suites":["parseScale"],"updatePoint":{"line":67,"column":36,"index":2933},"line":67,"code":"  it('of [12, 12] should return true', () => {\n    const {\n      scale\n    } = parseScale({\n      scale: scaleLinear()\n    });\n    expect(scale).to.be.instanceof(Function);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of function","suites":["getValueByDataKey"],"updatePoint":{"line":82,"column":17,"index":3186},"line":82,"code":"  it('of function', () => {\n    const fn = entry => entry.a;\n    expect(getValueByDataKey(data, fn)).to.equal(1);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of object","suites":["getValueByDataKey"],"updatePoint":{"line":86,"column":15,"index":3304},"line":86,"code":"  it('of object', () => {\n    expect(getValueByDataKey(data, {}, 0)).to.equal(0);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should change","suites":["offsetSign","of data"],"updatePoint":{"line":94,"column":21,"index":3578},"line":94,"code":"    it('should change', () => {\n      expect(data).to.deep.equal([[[0, 1], [0, 2], [0, -5]], [[0, -1], [2, 4], [-5, -10]]]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"calculateDomainOfTicks([1, 5, 2, 3, 3], \"number\") should return [1, 5]","suites":["calculateDomainOfTicks"],"updatePoint":{"line":127,"column":76,"index":4627},"line":127,"code":"  it('calculateDomainOfTicks([1, 5, 2, 3, 3], \"number\") should return [1, 5]', () => {\n    const result = calculateDomainOfTicks(ticks, 'number');\n    expect(result).to.deep.equal([1, 5]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"calculateDomainOfTicks([1, 5, 2, 3, 3], \"category\") should return [1, 5, 2, 3, 3]","suites":["calculateDomainOfTicks"],"updatePoint":{"line":131,"column":87,"index":4833},"line":131,"code":"  it('calculateDomainOfTicks([1, 5, 2, 3, 3], \"category\") should return [1, 5, 2, 3, 3]', () => {\n    const result = calculateDomainOfTicks(ticks, 'category');\n    expect(result).to.deep.equal(ticks);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"calculateActiveTickIndex(12, ticks) should return 1","suites":["calculateActiveTickIndex"],"updatePoint":{"line":150,"column":57,"index":5236},"line":150,"code":"  it('calculateActiveTickIndex(12, ticks) should return 1', () => {\n    expect(calculateActiveTickIndex(12, ticks)).to.equal(1);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"calculateActiveTickIndex(-1, ticks) should return 0","suites":["calculateActiveTickIndex"],"updatePoint":{"line":153,"column":57,"index":5371},"line":153,"code":"  it('calculateActiveTickIndex(-1, ticks) should return 0', () => {\n    expect(calculateActiveTickIndex(-1, ticks)).to.equal(0);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"calculateActiveTickIndex(16, ticks) should return 3","suites":["calculateActiveTickIndex"],"updatePoint":{"line":156,"column":57,"index":5506},"line":156,"code":"  it('calculateActiveTickIndex(16, ticks) should return 3', () => {\n    expect(calculateActiveTickIndex(16, ticks)).to.equal(3);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"correctly calculates the highest and lowest values in a stack of many values","suites":["getDomainOfStackGroups"],"updatePoint":{"line":172,"column":82,"index":5947},"line":172,"code":"  it('correctly calculates the highest and lowest values in a stack of many values', () => {\n    expect(getDomainOfStackGroups(stackData, 0, 1)).to.deep.equal([8, 34]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"deals with a null value without assuming it should be === 0","suites":["getDomainOfStackGroups"],"updatePoint":{"line":175,"column":65,"index":6105},"line":175,"code":"  it('deals with a null value without assuming it should be === 0', () => {\n    stackData.a.stackedData[0][0][0] = null;\n    expect(getDomainOfStackGroups(stackData, 0, 1)).to.deep.equal([8, 34]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"domain of all nulls should return [0, 0]","suites":["getDomainOfStackGroups"],"updatePoint":{"line":179,"column":46,"index":6289},"line":179,"code":"  it('domain of all nulls should return [0, 0]', () => {\n    stackData = {\n      a: {\n        stackedData: [[[null, null]]]\n      }\n    };\n    expect(getDomainOfStackGroups(stackData, 0, 1)).to.deep.equal([0, 0]);\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMin - 0.233\") is true","suites":["MIN_VALUE_REG "],"updatePoint":{"line":189,"column":38,"index":6540},"line":189,"code":"  it('.exec(\"dataMin - 0.233\") is true', () => {\n    expect(MIN_VALUE_REG.test('dataMin - 0.233')).to.be.true;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMin - 233\") is true","suites":["MIN_VALUE_REG "],"updatePoint":{"line":192,"column":36,"index":6655},"line":192,"code":"  it('.exec(\"dataMin - 233\") is true', () => {\n    expect(MIN_VALUE_REG.test('dataMin - 233')).to.be.true;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMin - 233,\") is false","suites":["MIN_VALUE_REG "],"updatePoint":{"line":195,"column":38,"index":6770},"line":195,"code":"  it('.exec(\"dataMin - 233,\") is false', () => {\n    expect(MIN_VALUE_REG.test('dataMin - 233,')).to.be.false;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMax + 0.233\") is true","suites":["MAX_VALUE_REG "],"updatePoint":{"line":200,"column":38,"index":6926},"line":200,"code":"  it('.exec(\"dataMax + 0.233\") is true', () => {\n    expect(MAX_VALUE_REG.test('dataMax + 0.233')).to.be.true;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMax + 233\") is true","suites":["MAX_VALUE_REG "],"updatePoint":{"line":203,"column":36,"index":7041},"line":203,"code":"  it('.exec(\"dataMax + 233\") is true', () => {\n    expect(MAX_VALUE_REG.test('dataMax + 233')).to.be.true;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":".exec(\"dataMax + 233,\") is false","suites":["MAX_VALUE_REG "],"updatePoint":{"line":206,"column":38,"index":7156},"line":206,"code":"  it('.exec(\"dataMax + 233,\") is false', () => {\n    expect(MAX_VALUE_REG.test('dataMax + 233,')).to.be.false;\n  });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should calculate the correct domain for a simple linear set","suites":["getDomainOfDataByKey","with type === \"number\""],"updatePoint":{"line":234,"column":67,"index":7696},"line":234,"code":"    it('should calculate the correct domain for a simple linear set', () => {\n      expect(getDomainOfDataByKey(data, 'x', 'number')).to.deep.equal([1, 5]);\n      expect(getDomainOfDataByKey(data, 'y', 'number')).to.deep.equal([0, 4]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should calculate the correct domain even if there is no data for certain items in the set","suites":["getDomainOfDataByKey","with type === \"number\""],"updatePoint":{"line":238,"column":97,"index":7970},"line":238,"code":"    it('should calculate the correct domain even if there is no data for certain items in the set', () => {\n      expect(getDomainOfDataByKey(data, 'actual', 'number')).to.deep.equal([35.4, 42.5]);\n      expect(getDomainOfDataByKey(data, 'benchmark', 'number')).to.deep.equal([31.86, 35.4]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Line component","with horizontal layout"],"updatePoint":{"line":261,"column":55,"index":8663},"line":261,"code":"      it('should not include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, line, 'x', 'horizontal', 'xAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Line component","with horizontal layout"],"updatePoint":{"line":264,"column":51,"index":8824},"line":264,"code":"      it('should include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, line, 'y', 'horizontal', 'yAxis')).to.deep.equal([90, 220]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Line component","with vertical layout"],"updatePoint":{"line":269,"column":51,"index":9052},"line":269,"code":"      it('should include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, line, 'x', 'vertical', 'xAxis')).to.deep.equal([-18, 22]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Line component","with vertical layout"],"updatePoint":{"line":272,"column":55,"index":9229},"line":272,"code":"      it('should not include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, line, 'y', 'vertical', 'yAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Bar component","with horizontal layout"],"updatePoint":{"line":282,"column":55,"index":9652},"line":282,"code":"      it('should not include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, bar, 'x', 'horizontal', 'xAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Bar component","with horizontal layout"],"updatePoint":{"line":285,"column":51,"index":9812},"line":285,"code":"      it('should include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, bar, 'y', 'horizontal', 'yAxis')).to.deep.equal([90, 220]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Bar component","with vertical layout"],"updatePoint":{"line":290,"column":51,"index":10039},"line":290,"code":"      it('should include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, bar, 'x', 'vertical', 'xAxis')).to.deep.equal([-18, 22]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Bar component","with vertical layout"],"updatePoint":{"line":293,"column":55,"index":10215},"line":293,"code":"      it('should not include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, bar, 'y', 'vertical', 'yAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Area component","with horizontal layout"],"updatePoint":{"line":303,"column":55,"index":10640},"line":303,"code":"      it('should not include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, area, 'x', 'horizontal', 'xAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Area component","with horizontal layout"],"updatePoint":{"line":306,"column":51,"index":10801},"line":306,"code":"      it('should include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, area, 'y', 'horizontal', 'yAxis')).to.deep.equal([90, 220]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should include error bars in xAxis domain","suites":["getDomainOfErrorBars","within Area component","with vertical layout"],"updatePoint":{"line":311,"column":51,"index":11029},"line":311,"code":"      it('should include error bars in xAxis domain', () => {\n        expect(getDomainOfErrorBars(data, area, 'x', 'vertical', 'xAxis')).to.deep.equal([-18, 22]);\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should not include error bars in yAxis domain","suites":["getDomainOfErrorBars","within Area component","with vertical layout"],"updatePoint":{"line":314,"column":55,"index":11206},"line":314,"code":"      it('should not include error bars in yAxis domain', () => {\n        expect(getDomainOfErrorBars(data, area, 'y', 'vertical', 'yAxis')).to.be.null;\n      });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should only include error bars with direction y in xAxis domain","suites":["getDomainOfErrorBars","within Scatter component"],"updatePoint":{"line":327,"column":71,"index":11731},"line":327,"code":"    it('should only include error bars with direction y in xAxis domain', () => {\n      expect(getDomainOfErrorBars(data, scatter, 'x', undefined, 'xAxis')).to.deep.equal([-14, 17]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should only include error bars with direction x in yAxis domain","suites":["getDomainOfErrorBars","within Scatter component"],"updatePoint":{"line":330,"column":71,"index":11922},"line":330,"code":"    it('should only include error bars with direction x in yAxis domain', () => {\n      expect(getDomainOfErrorBars(data, scatter, 'y', undefined, 'yAxis')).to.deep.equal([90, 220]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should return maximum domain of error bars","suites":["getDomainOfErrorBars","with multiple ErrorBar children with same direction"],"updatePoint":{"line":340,"column":50,"index":12407},"line":340,"code":"    it('should return maximum domain of error bars', () => {\n      expect(getDomainOfErrorBars(data, line, 'y', 'horizontal', 'yAxis')).to.deep.equal([85, 220]);\n    });","file":"specs/util/ChartUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getPercentValue(\"25%\", 1) should return 0.25 ","suites":["getPercentValue"],"updatePoint":{"line":5,"column":61,"index":415},"line":5,"code":"  it('DataUtils.getPercentValue(\"25%\", 1) should return 0.25 ', () => {\n    expect(getPercentValue('25%', 1)).to.equal(0.25);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getPercentValue(\"25%\", \"a\") should return 0 ","suites":["getPercentValue"],"updatePoint":{"line":8,"column":60,"index":546},"line":8,"code":"  it('DataUtils.getPercentValue(\"25%\", \"a\") should return 0 ', () => {\n    expect(getPercentValue('25%', 'a')).to.equal(0);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getPercentValue(1)) should return 1","suites":["getPercentValue"],"updatePoint":{"line":11,"column":51,"index":667},"line":11,"code":"  it('DataUtils.getPercentValue(1)) should return 1', () => {\n    expect(getPercentValue(1)).to.equal(1);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getPercentValue(\"120%\", 100)) should return 120","suites":["getPercentValue"],"updatePoint":{"line":14,"column":63,"index":791},"line":14,"code":"  it('DataUtils.getPercentValue(\"120%\", 100)) should return 120', () => {\n    expect(getPercentValue('120%', 100)).to.equal(120);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getPercentValue(\"120%\", 100, 0, true)) should return 100","suites":["getPercentValue"],"updatePoint":{"line":17,"column":72,"index":936},"line":17,"code":"  it('DataUtils.getPercentValue(\"120%\", 100, 0, true)) should return 100', () => {\n    expect(getPercentValue('120%', 100, 0, true)).to.equal(100);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getAnyElementOfObject() should return null ","suites":["getAnyElementOfObject"],"updatePoint":{"line":22,"column":59,"index":1123},"line":22,"code":"  it('DataUtils.getAnyElementOfObject() should return null ', () => {\n    expect(getAnyElementOfObject()).to.equal(null);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"DataUtils.getAnyElementOfObject({}) should return null ","suites":["getAnyElementOfObject"],"updatePoint":{"line":25,"column":61,"index":1253},"line":25,"code":"  it('DataUtils.getAnyElementOfObject({}) should return null ', () => {\n    expect(getAnyElementOfObject({})).to.equal(null);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of an object should return false when input value is not an array","suites":["hasDuplicate"],"updatePoint":{"line":30,"column":71,"index":1432},"line":30,"code":"  it('of an object should return false when input value is not an array', () => {\n    expect(hasDuplicate({})).to.be.false;\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"of [12, 12] should return true","suites":["hasDuplicate"],"updatePoint":{"line":33,"column":36,"index":1527},"line":33,"code":"  it('of [12, 12] should return true', () => {\n    expect(hasDuplicate([12, 12])).to.be.true;\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"(0)","suites":["mathSign"],"updatePoint":{"line":38,"column":9,"index":1633},"line":38,"code":"  it('(0)', () => {\n    expect(mathSign(0)).to.equal(0);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"(100)","suites":["mathSign"],"updatePoint":{"line":41,"column":11,"index":1698},"line":41,"code":"  it('(100)', () => {\n    expect(mathSign(100)).to.equal(1);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"(-100)","suites":["mathSign"],"updatePoint":{"line":44,"column":12,"index":1766},"line":44,"code":"  it('(-100)', () => {\n    expect(mathSign(-100)).to.equal(-1);\n  });","file":"specs/util/DataUtilsSpec.js","skipped":false,"dir":"test"},{"name":"getStringSize() return 0","suites":["DOMUtils"],"updatePoint":{"line":4,"column":30,"index":151},"line":4,"code":"  it('getStringSize() return 0', () => {\n    expect(getStringSize()).to.deep.equal({\n      width: 0,\n      height: 0\n    });\n  });","file":"specs/util/DOMUtilsSpec.js","skipped":false,"dir":"test"},{"name":"warn when format is null","suites":["LogUtils"],"updatePoint":{"line":5,"column":30,"index":169},"line":5,"code":"  it('warn when format is null', () => {\n    warn(true);\n  });","file":"specs/util/LogUtilsSpec.js","skipped":false,"dir":"test"},{"name":"warn when condition is false","suites":["LogUtils"],"updatePoint":{"line":8,"column":34,"index":236},"line":8,"code":"  it('warn when condition is false', () => {\n    warn(false, 'format');\n    warn(false);\n    warn(false, 'format width variable %s', 0);\n  });","file":"specs/util/LogUtilsSpec.js","skipped":false,"dir":"test"},{"name":"getDisplayName return empty string when has a null as input","suites":["ReactUtils"],"updatePoint":{"line":8,"column":65,"index":488},"line":8,"code":"  it('getDisplayName return empty string when has a null as input', () => {\n    const result = getDisplayName(null);\n    expect(result).to.equal('');\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"getDisplayName return the same string when has a string as input","suites":["ReactUtils"],"updatePoint":{"line":12,"column":70,"index":649},"line":12,"code":"  it('getDisplayName return the same string when has a string as input', () => {\n    const result = getDisplayName('test');\n    expect(result).to.equal('test');\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"getDisplayName return the \"Component\" when has an object as input","suites":["ReactUtils"],"updatePoint":{"line":16,"column":71,"index":817},"line":16,"code":"  it('getDisplayName return the \"Component\" when has an object as input', () => {\n    const test = {};\n    const result = getDisplayName(test);\n    expect(result).to.equal('Component');\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"adaptEventHandlers return event attributes","suites":["ReactUtils"],"updatePoint":{"line":21,"column":48,"index":986},"line":21,"code":"  it('adaptEventHandlers return event attributes', () => {\n    const result = adaptEventHandlers({\n      a: 1,\n      onMouseEnter: () => {}\n    });\n    expect(result).to.include.keys('onMouseEnter');\n    expect(result).to.not.include.keys('a');\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"adaptEventHandlers return null when input is not a react element","suites":["ReactUtils"],"updatePoint":{"line":29,"column":70,"index":1259},"line":29,"code":"  it('adaptEventHandlers return null when input is not a react element', () => {\n    expect(adaptEventHandlers(null)).to.equal(null);\n    expect(adaptEventHandlers(() => {})).to.equal(null);\n    expect(adaptEventHandlers(1)).to.equal(null);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"adaptEventsOfChild return null when input is not a props","suites":["ReactUtils"],"updatePoint":{"line":34,"column":62,"index":1498},"line":34,"code":"  it('adaptEventsOfChild return null when input is not a props', () => {\n    expect(adaptEventsOfChild(null)).to.equal(null);\n    expect(adaptEventsOfChild(1)).to.equal(null);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"validateWidthHeight return false when input is not a react element","suites":["ReactUtils"],"updatePoint":{"line":38,"column":72,"index":1690},"line":38,"code":"  it('validateWidthHeight return false when input is not a react element', () => {\n    expect(validateWidthHeight({\n      a: 1\n    })).to.equal(false);\n    expect(validateWidthHeight(() => {})).to.equal(false);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"validateWidthHeight return false when a react element has width or height smaller than 0","suites":["ReactUtils"],"updatePoint":{"line":44,"column":94,"index":1929},"line":44,"code":"  it('validateWidthHeight return false when a react element has width or height smaller than 0', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 0,\n      height: 0\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"c\"\n    })));\n    expect(validateWidthHeight(wrapper)).to.equal(false);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"filterProps return presentation attributes","suites":["ReactUtils"],"updatePoint":{"line":57,"column":48,"index":2369},"line":57,"code":"  it('filterProps return presentation attributes', () => {\n    const result = filterProps({\n      stroke: '#000',\n      fill: '#000',\n      r: 6\n    });\n    expect(result).to.include.keys('stroke', 'fill', 'r');\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"withoutType return children except specified type","suites":["ReactUtils"],"updatePoint":{"line":65,"column":55,"index":2594},"line":65,"code":"  it('withoutType return children except specified type', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(Bar, {\n      dataKey: \"c\"\n    })));\n    const children = wrapper.props().children;\n    expect(withoutType(children, Bar).length).to.equal(2);\n    expect(withoutType(children, [Bar, Line]).length).to.equal(0);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"filterSvgElements filter children which are svg elements","suites":["ReactUtils"],"updatePoint":{"line":80,"column":62,"index":3167},"line":80,"code":"  it('filterSvgElements filter children which are svg elements', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: \"0\",\n      y: \"0\"\n    }, \"12\")));\n    const children = wrapper.props().children;\n    expect(filterSvgElements(children).length).to.equal(2);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual when children has no null children","suites":["ReactUtils"],"updatePoint":{"line":100,"column":56,"index":3802},"line":100,"code":"  it('isChildrenEqual when children has no null children', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: \"0\",\n      y: \"0\"\n    }, \"12\")));\n    const children = wrapper.props().children;\n    expect(isChildrenEqual(children, children)).to.be.true;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual when children has null children","suites":["ReactUtils"],"updatePoint":{"line":120,"column":53,"index":4434},"line":120,"code":"  it('isChildrenEqual when children has null children', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: \"0\",\n      y: \"0\"\n    }, \"12\"), null));\n    const anotherWrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: \"0\",\n      y: \"0\"\n    }, \"12\"), null));\n    const children = wrapper.props().children;\n    const anotherChildren = anotherWrapper.props().children;\n    expect(isChildrenEqual(children, anotherChildren)).to.be.true;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual return true when children has same props","suites":["ReactUtils"],"updatePoint":{"line":157,"column":62,"index":5617},"line":157,"code":"  it('isChildrenEqual return true when children has same props', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: \"0\",\n      y: \"0\"\n    }, \"12\")));\n    const newWrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    }), /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: \"20\",\n      height: \"20\"\n    })));\n    expect(isChildrenEqual(wrapper.props().children, newWrapper.props().children)).to.be.false;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual return false when single child are not equal","suites":["ReactUtils"],"updatePoint":{"line":189,"column":66,"index":6625},"line":189,"code":"  it('isChildrenEqual return false when single child are not equal', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"a\"\n    })));\n    const newWrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    })));\n    expect(isChildrenEqual(wrapper.props().children, newWrapper.props().children)).to.be.false;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual return false when one has child and another don't has child","suites":["ReactUtils"],"updatePoint":{"line":204,"column":81,"index":7194},"line":204,"code":"  it(\"isChildrenEqual return false when one has child and another don't has child\", () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, null));\n    const newWrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, /*#__PURE__*/React.createElement(Line, {\n      dataKey: \"b\"\n    })));\n    expect(isChildrenEqual(wrapper.props().children, newWrapper.props().children)).to.be.false;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"isChildrenEqual return true when only has a child in an array","suites":["ReactUtils"],"updatePoint":{"line":217,"column":67,"index":7687},"line":217,"code":"  it('isChildrenEqual return true when only has a child in an array', () => {\n    const linesA = ['any'].map(entry => {\n      return /*#__PURE__*/React.createElement(Line, {\n        dataKey: entry\n      });\n    });\n    linesA.props = {\n      any: 'A'\n    };\n    const linesB = ['any'].map(entry => {\n      return /*#__PURE__*/React.createElement(Line, {\n        dataKey: entry\n      });\n    });\n    linesB.props = {\n      any: 'B'\n    };\n    const wrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, linesA));\n    const newWrapper = mount( /*#__PURE__*/React.createElement(LineChart, {\n      width: 200,\n      height: 200\n    }, linesB));\n    expect(isChildrenEqual(wrapper.props().children, newWrapper.props().children)).to.be.true;\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"findAllByType returns children that matched the type","suites":["ReactUtils"],"updatePoint":{"line":244,"column":58,"index":8472},"line":244,"code":"  it('findAllByType returns children that matched the type', () => {\n    const children = [/*#__PURE__*/React.createElement(\"div\", null), /*#__PURE__*/React.createElement(Line, {\n      key: \"a\"\n    }), null, /*#__PURE__*/React.createElement(Bar, null), undefined, /*#__PURE__*/React.createElement(Line, {\n      key: \"b\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      key: \"c\"\n    })];\n    const lineChildren = findAllByType(children, Line.displayName);\n    expect(lineChildren.length).to.equal(3);\n    expect(lineChildren.map(child => child.key)).to.deep.equal(['a', 'b', 'c']);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"findAllByType includes children inside of the fragment","suites":["ReactUtils"],"updatePoint":{"line":256,"column":60,"index":9067},"line":256,"code":"  it('findAllByType includes children inside of the fragment', () => {\n    const children = [/*#__PURE__*/React.createElement(Line, {\n      key: \"a\"\n    }), /*#__PURE__*/React.createElement(\"div\", null), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Line, {\n      key: \"b\"\n    }), /*#__PURE__*/React.createElement(Line, {\n      key: \"c\"\n    }), /*#__PURE__*/React.createElement(Bar, null), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Line, {\n      key: \"d\"\n    }), \",\"))];\n    const lineChildren = findAllByType(children, Line.displayName);\n    expect(lineChildren.length).to.equal(4);\n    expect(lineChildren.map(child => child.key)).to.deep.equal(['a', 'b', 'c', 'd']);\n  });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"basic","suites":["ReactUtils","toArray"],"updatePoint":{"line":271,"column":13,"index":9814},"line":271,"code":"    it('basic', () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"1\"\n      }, \"1\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"2\"\n      }, \"2\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"3\"\n      }, \"3\")));\n      const children = toArray(wrapper.props().children);\n      expect(children.length).to.equal(3);\n      expect(children.map(c => c.key)).to.deep.equal(['1', '2', '3']);\n    });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"Array","suites":["ReactUtils","toArray"],"updatePoint":{"line":283,"column":13,"index":10313},"line":283,"code":"    it('Array', () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"1\"\n      }, \"1\"), [/*#__PURE__*/React.createElement(\"li\", {\n        key: \"2\"\n      }, \"2\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"3\"\n      }, \"3\")]));\n      const children = toArray(wrapper.props().children);\n      expect(children.length).to.equal(3);\n      expect(children.map(c => c.key)).to.deep.equal(['1', '2', '3']);\n    });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"Ignores `undefined` and `null`","suites":["ReactUtils","toArray"],"updatePoint":{"line":295,"column":38,"index":10839},"line":295,"code":"    it('Ignores `undefined` and `null`', () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(\"ul\", null, null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"1\"\n      }), null, undefined, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"2\"\n      }), undefined, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"3\"\n      })));\n      const children = toArray(wrapper.props().children);\n      expect(children.length).to.equal(3);\n      expect(children.map(c => c.key)).to.deep.equal(['1', '2', '3']);\n    });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"Iterable","suites":["ReactUtils","toArray"],"updatePoint":{"line":307,"column":16,"index":11360},"line":307,"code":"    it('Iterable', () => {\n      const iterable = {\n        [Symbol.iterator]: function* () {\n          yield /*#__PURE__*/React.createElement(\"li\", {\n            key: \"5\"\n          }, \"5\");\n          yield null;\n          yield /*#__PURE__*/React.createElement(\"li\", {\n            key: \"6\"\n          }, \"6\");\n        }\n      };\n      const wrapper = mount( /*#__PURE__*/React.createElement(\"ul\", null, [/*#__PURE__*/React.createElement(\"li\", {\n        key: \"1\"\n      }, \"1\")], /*#__PURE__*/React.createElement(\"li\", {\n        key: \"2\"\n      }, \"2\"), null, new Set([/*#__PURE__*/React.createElement(\"li\", {\n        key: \"3\"\n      }, \"3\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"4\"\n      }, \"4\")]), iterable));\n      const children = toArray(wrapper.props().children);\n      expect(children.length).to.equal(6);\n      expect(children.map(c => c.key)).to.deep.equal(['1', '2', '3', '4', '5', '6']);\n    });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"Fragment","suites":["ReactUtils","toArray"],"updatePoint":{"line":332,"column":16,"index":12281},"line":332,"code":"    it('Fragment', () => {\n      const wrapper = mount( /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"1\"\n      }, \"1\"), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"2\"\n      }, \"2\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"3\"\n      }, \"3\")), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n        key: \"4\"\n      }, \"4\"), /*#__PURE__*/React.createElement(\"li\", {\n        key: \"5\"\n      }, \"5\")))));\n      const children = toArray(wrapper.props().children);\n      expect(children.length).to.equal(5);\n      expect(children.map(c => c.key)).to.deep.equal(['1', '2', '3', '4', '5']);\n    });","file":"specs/util/ReactUtilsSpec.js","skipped":false,"dir":"test"},{"name":"should return true when the same top level keys have the same top level values, when they are different instances","suites":["shallowEqual"],"updatePoint":{"line":6,"column":119,"index":277},"line":6,"code":"  it('should return true when the same top level keys have the same top level values, when they are different instances', () => {\n    expect(shallowEqual({\n      foo: true,\n      bar: false\n    }, {\n      foo: true,\n      bar: false\n    })).to.equal(true);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return true when top level values of an Object are non-primitives but are the same instance","suites":["shallowEqual"],"updatePoint":{"line":15,"column":104,"index":525},"line":15,"code":"  it('should return true when top level values of an Object are non-primitives but are the same instance', () => {\n    const a = [1];\n    // {a: [1]}\n    expect(shallowEqual({\n      a\n    }, {\n      a\n    })).to.equal(true);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return true when top level values of an Array are non-primitives but are the same instance","suites":["shallowEqual"],"updatePoint":{"line":24,"column":103,"index":755},"line":24,"code":"  it('should return true when top level values of an Array are non-primitives but are the same instance', () => {\n    const a = [1];\n    // [[1]]\n    expect(shallowEqual([a], [a])).to.equal(true);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return false when top level values of an Object are non-primitives and are different instances","suites":["shallowEqual"],"updatePoint":{"line":29,"column":107,"index":962},"line":29,"code":"  it('should return false when top level values of an Object are non-primitives and are different instances', () => {\n    expect(shallowEqual({\n      a: [1]\n    }, {\n      a: [1]\n    })).to.equal(false);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return false when a has the same keys but different values","suites":["shallowEqual"],"updatePoint":{"line":36,"column":71,"index":1136},"line":36,"code":"  it('should return false when a has the same keys but different values', () => {\n    const a = {\n      k: 1\n    };\n    const b = {\n      k: 2\n    };\n    expect(shallowEqual(a, b)).to.equal(false);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return false when a has more keys ","suites":["shallowEqual"],"updatePoint":{"line":45,"column":47,"index":1316},"line":45,"code":"  it('should return false when a has more keys ', () => {\n    const a = {\n      k: 1,\n      x: 5\n    };\n    const b = {\n      k: 2\n    };\n    expect(shallowEqual(a, b)).to.equal(false);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"},{"name":"should return false when b has more keys than a","suites":["shallowEqual"],"updatePoint":{"line":55,"column":53,"index":1514},"line":55,"code":"  it('should return false when b has more keys than a', () => {\n    const a = {\n      k: 1\n    };\n    const b = {\n      k: 2,\n      x: 3\n    };\n    expect(shallowEqual(a, b)).to.equal(false);\n  });","file":"specs/util/ShallowEqualSpec.js","skipped":false,"dir":"test"}]}