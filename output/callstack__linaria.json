{"repo":"callstack/linaria","url":"https://github.com/callstack/linaria","branch":"master","configs":[{"package":"preact-example","lang":"js","dir":"examples/Preact/preact-example/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/babel-preset","lang":"ts","dir":"packages/babel/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/core","lang":"js","dir":"packages/core/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/extractor","lang":"ts","dir":"packages/extractor/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/babel-plugin-interop","lang":"js","dir":"packages/interop/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/react","lang":"js","dir":"packages/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/server","lang":"ts","dir":"packages/server/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/shaker","lang":"ts","dir":"packages/shaker/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@linaria/utils","lang":"ts","dir":"packages/utils/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Header renders 3 nav items","suites":["Initial Test of the Header"],"updatePoint":{"line":6,"column":34,"index":255},"line":6,"code":"  test('Header renders 3 nav items', () => {\n    const context = shallow( /*#__PURE__*/React.createElement(Header, null));\n    expect(context.find('h1').text()).toBe('Preact App');\n    expect(context.find('Link').length).toBe(3);\n  });","file":"header.test.js","skipped":false,"dir":"examples/Preact/preact-example/tests"},{"name":"transpiles styled template literal with object","suites":[],"updatePoint":{"line":37,"column":50},"line":37,"code":"it('transpiles styled template literal with object', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled.h1\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"uses string passed in as classNameSlug","suites":[],"updatePoint":{"line":52,"column":42},"line":52,"code":"it('uses string passed in as classNameSlug', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled('h1')\\`\n      font-size: 14px;\n    \\`;\n`,\n    {\n      classNameSlug: ['hash', 'title', 'file', 'name', 'ext', 'dir']\n        .map((s) => `[${s}]`)\n        .join('_'),\n    }\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"removes fake replacement patterns in string classNameSlug","suites":[],"updatePoint":{"line":72,"column":61},"line":72,"code":"it('removes fake replacement patterns in string classNameSlug', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled('h1')\\`\n      font-size: 14px;\n    \\`;\n`,\n    {\n      classNameSlug: '[not]_[actual]_[replacements]',\n    }\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles fn passed in as classNameSlug","suites":[],"updatePoint":{"line":90,"column":41},"line":90,"code":"it('handles fn passed in as classNameSlug', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled('h1')\\`\n      font-size: 14px;\n    \\`;\n`,\n    {\n      classNameSlug: (hash, title, vars) => {\n        return [\n          hash,\n          title,\n          vars.hash,\n          vars.title,\n          vars.file,\n          vars.name,\n          vars.ext,\n          vars.dir,\n        ].join('_');\n      },\n    }\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles styled template literal with function and tag","suites":[],"updatePoint":{"line":119,"column":60},"line":119,"code":"it('transpiles styled template literal with function and tag', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled('h1')\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles renamed styled import","suites":[],"updatePoint":{"line":134,"column":36},"line":134,"code":"it('transpiles renamed styled import', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled as custom } from '@linaria/react';\n\n    export const Title = custom('h1')\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles renamed css and atomic-css imports in the same file","suites":[],"updatePoint":{"line":149,"column":66},"line":149,"code":"it('transpiles renamed css and atomic-css imports in the same file', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css as coreCss } from '@linaria/core';\n    import { css as atomicCss } from '@linaria/atomic';\n\n    const x = coreCss\\`\n      background: red;\n    \\`;\n\n    const y = atomicCss\\`\n      background: red;\n    \\`;\n\n    console.log(x, y);\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles renamed styled and atomic-styled imports in the same file","suites":[],"updatePoint":{"line":173,"column":72},"line":173,"code":"it('transpiles renamed styled and atomic-styled imports in the same file', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled as reactStyled } from '@linaria/react';\n    import { styled as atomicStyled } from '@linaria/atomic';\n\n    const StyledComponent = reactStyled.div\\`\n      background: red;\n    \\`;\n    const StyledComponent2 = reactStyled(StyledComponent)\\`\n      background: blue;\n    \\`;\n\n    const AtomicComponent = atomicStyled.div\\`\n      background: red;\n    \\`;\n    const AtomicComponent2 = atomicStyled(AtomicComponent)\\`\n      background: blue;\n    \\`;\n\n    console.log(StyledComponent, StyledComponent2, AtomicComponent, AtomicComponent2);\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles renamed css from linaria v2","suites":[],"updatePoint":{"line":203,"column":42},"line":203,"code":"it('transpiles renamed css from linaria v2', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import {css as coreCss} from 'linaria';\n\n    const x = coreCss\\`\n      background: red;\n    \\`;\n\n    console.log(x);\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles styled template literal with function and component","suites":[],"updatePoint":{"line":220,"column":66},"line":220,"code":"it('transpiles styled template literal with function and component', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n    const Heading = () => null;\n\n    export const Title = styled(Heading)\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles styled template literal with TS component","suites":[],"updatePoint":{"line":236,"column":56},"line":236,"code":"it('transpiles styled template literal with TS component', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    type Props = { className?: string; children?: React.ReactNode };\n\n    export const Title = styled((props: Props) => null)\\`\n      font-size: 14px;\n    \\`;\n    `,\n    {\n      evaluate: false,\n    },\n    true\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles with typed fn as interpolated value","suites":[],"updatePoint":{"line":257,"column":50},"line":257,"code":"it('transpiles with typed fn as interpolated value', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    type Props = { className?: string; children?: React.ReactNode };\n\n    export const Title = styled.div\\`\n      font-size: 14px;\n      content: \"${'${(props: Props) => props.className}'}\"\n    \\`;\n    `,\n    {\n      evaluate: false,\n    },\n    true\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"outputs valid CSS classname","suites":[],"updatePoint":{"line":279,"column":31},"line":279,"code":"it('outputs valid CSS classname', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const ΩPage$Title = styled.h1\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"evaluates and inlines expressions in scope","suites":[],"updatePoint":{"line":294,"column":46},"line":294,"code":"it('evaluates and inlines expressions in scope', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    const color = 'blue';\n\n    export const Title = styled.h1\\`\n      color: ${'${color}'};\n      width: ${'${100 / 3}'}%;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"inlines object styles as CSS string","suites":[],"updatePoint":{"line":312,"column":39},"line":312,"code":"it('inlines object styles as CSS string', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    const cover = {\n      '--color-primaryText': '#222',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      opacity: 1,\n      minHeight: 420,\n\n      '&.shouldNotBeChanged': {\n        borderColor: '#fff',\n      },\n\n      '@media (min-width: 200px)': {\n        WebkitOpacity: .8,\n        MozOpacity: .8,\n        msOpacity: .8,\n        OOpacity: .8,\n        WebkitBorderRadius: 2,\n        MozBorderRadius: 2,\n        msBorderRadius: 2,\n        OBorderRadius: 2,\n        WebkitTransition: '400ms',\n        MozTransition: '400ms',\n        OTransition: '400ms',\n        msTransition: '400ms',\n      }\n    };\n\n    export const Title = styled.h1\\`\n      ${'${cover}'}\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"inlines array styles as CSS string","suites":[],"updatePoint":{"line":357,"column":38},"line":357,"code":"it('inlines array styles as CSS string', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    const styles = [\n      { flex: 1 },\n      { display: 'block', height: 24 },\n    ];\n\n    export const Title = styled.h1\\`\n      ${'${styles}'}\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"replaces unknown expressions with CSS custom properties","suites":[],"updatePoint":{"line":377,"column":59},"line":377,"code":"it('replaces unknown expressions with CSS custom properties', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled.h1\\`\n      font-size: ${'${size}'}px;\n      color: ${'${props => props.color}'};\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles interpolation followed by unit","suites":[],"updatePoint":{"line":393,"column":42},"line":393,"code":"it('handles interpolation followed by unit', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled.h1\\`\n      font-size: ${'${size}'}em;\n      text-shadow: black 1px ${'${shadow}'}px, white -2px -2px;\n      margin: ${'${size}'}px;\n      width: calc(2 * ${'${props => props.width}'}vw);\n      height: ${'${props => { if (true) { return props.height } else { return 200 } }}'}px;\n      grid-template-columns: ${'${unit}'}fr 1fr 1fr ${'${unit}'}fr;\n      border-radius: ${'${function(props) { return 200 }}'}px\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"uses the same custom property for the same identifier","suites":[],"updatePoint":{"line":414,"column":57},"line":414,"code":"it('uses the same custom property for the same identifier', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Box = styled.div\\`\n      height: ${'${size}'}px;\n      width: ${'${size}'}px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"uses the same custom property for the same expression","suites":[],"updatePoint":{"line":430,"column":57},"line":430,"code":"it('uses the same custom property for the same expression', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Box = styled.div\\`\n      height: ${'${props => props.size}'}px;\n      width: ${'${props => props.size}'}px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles nested blocks","suites":[],"updatePoint":{"line":446,"column":25},"line":446,"code":"it('handles nested blocks', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Button = styled.button\\`\n      font-family: ${'${regular}'};\n\n      &:hover {\n        border-color: blue;\n      }\n\n      @media (max-width: 200px) {\n        width: 100%;\n      }\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"prevents class name collision","suites":[],"updatePoint":{"line":469,"column":33},"line":469,"code":"it('prevents class name collision', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { styled } from '@linaria/react';\n\n    export const Title = styled.h1\\`\n      font-size: ${'${size}'}px;\n      color: ${'${props => props.color}'}\n    \\`;\n\n    function Something() {\n      const Title = styled.h1\\`\n        font-family: ${'${regular}'};\n      \\`;\n\n      return <Title />;\n    }\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"does not output CSS if none present","suites":[],"updatePoint":{"line":493,"column":39},"line":493,"code":"it('does not output CSS if none present', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      const number = 42;\n\n      const title = String.raw\\`This is something\\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"does not output CSS property when value is a blank string","suites":[],"updatePoint":{"line":506,"column":61},"line":506,"code":"it('does not output CSS property when value is a blank string', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { css } from '@linaria/core';\n\n    export const title = css\\`\n      font-size: ${''};\n      margin: 6px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"transpiles css template literal","suites":[],"updatePoint":{"line":522,"column":35},"line":522,"code":"it('transpiles css template literal', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { css } from '@linaria/core';\n\n    export const title = css\\`\n      font-size: 14px;\n    \\`;\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles css template literal in object property","suites":[],"updatePoint":{"line":537,"column":51},"line":537,"code":"it('handles css template literal in object property', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { css } from '@linaria/core';\n\n    const components = {\n      title: css\\`\n        font-size: 14px;\n      \\`\n    };\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles css template literal in JSX element","suites":[],"updatePoint":{"line":554,"column":47},"line":554,"code":"it('handles css template literal in JSX element', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    import { css } from '@linaria/core';\n\n    <Title class={css\\` font-size: 14px; \\`} />\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"throws when contains dynamic expression without evaluate: true in css tag","suites":[],"updatePoint":{"line":567,"column":77},"line":567,"code":"it('throws when contains dynamic expression without evaluate: true in css tag', async () => {\n  expect.assertions(1);\n\n  try {\n    await transpile(\n      dedent`\n      import { css } from '@linaria/core';\n\n      const title = css\\`\n        font-size: ${'${size}'}px;\n      \\`;\n      `\n    );\n  } catch (e) {\n    expect(\n      stripAnsi(\n        (e as { message: string }).message.replace(__dirname, '<<DIRNAME>>')\n      )\n    ).toMatchSnapshot();\n  }\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"supports both css and styled tags","suites":[],"updatePoint":{"line":589,"column":37},"line":589,"code":"it('supports both css and styled tags', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      import { css } from '@linaria/core';\n      import { styled } from '@linaria/react';\n\n      export const Title = styled.h1\\`\n        font-size: 14px;\n      \\`;\n\n      export const title = css\\`\n        color: blue;\n      \\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"does not include styles if not referenced anywhere","suites":[],"updatePoint":{"line":609,"column":54},"line":609,"code":"it('does not include styles if not referenced anywhere', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      import { css } from '@linaria/core';\n      import { styled } from '@linaria/react';\n\n      const Title = styled.h1\\`\n        font-size: 14px;\n      \\`;\n\n      const title = css\\`\n        color: blue;\n      \\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"includes unreferenced styles for :global","suites":[],"updatePoint":{"line":629,"column":44},"line":629,"code":"it('includes unreferenced styles for :global', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      import { css } from '@linaria/core';\n      import { styled } from '@linaria/react';\n\n      const a = css\\`\n        :global() {\n          .title {\n            font-size: 14px;\n          }\n        }\n      \\`;\n\n      const B = styled.div\\`\n        :global(.title) {\n          font-size: 14px;\n        }\n      \\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles objects with numeric keys","suites":[],"updatePoint":{"line":655,"column":37},"line":655,"code":"it('handles objects with numeric keys', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      import { css } from '@linaria/core';\n\n      export const object = {\n        stringKey: css\\`\\`,\n        42: css\\`\\`,\n      }\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles objects with enums as keys","suites":[],"updatePoint":{"line":671,"column":38},"line":671,"code":"it('handles objects with enums as keys', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n      import { css } from '@linaria/core';\n      import { TestEnum } from './ts-data.ts';\n\n      export const object = {\n        [TestEnum.FirstValue]: css\\`\\`,\n        [TestEnum.SecondValue]: css\\`\\`,\n      }\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css","suites":[],"updatePoint":{"line":688,"column":23},"line":688,"code":"it('compiles atomic css', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/react';\n\n    const x = css\\`\n      background: red;\n      height: 100px;\n    \\`;\n\n    console.log(x);\n\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css with property priorities","suites":[],"updatePoint":{"line":710,"column":48},"line":710,"code":"it('compiles atomic css with property priorities', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/react';\n\n    const y = css\\`\n      margin-left: 5px;\n    \\`;\n\n    const x = css\\`\n      margin: 0;\n    \\`;\n\n    console.log(x, y);\n\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css with at-rules and pseudo classes","suites":[],"updatePoint":{"line":735,"column":56},"line":735,"code":"it('compiles atomic css with at-rules and pseudo classes', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/react';\n\n    const x = css\\`\n      @media (max-width: 500px) {\n        background: blue;\n      }\n      @media (min-width: 300px) {\n        &:hover {\n          background: purple;\n        }\n      }\n      &:enabled {\n        width: 100%;\n      }\n      background: red;\n      height: 100px;\n    \\`;\n\n    console.log(x);\n\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css with at-rules and property priorities","suites":[],"updatePoint":{"line":768,"column":61},"line":768,"code":"it('compiles atomic css with at-rules and property priorities', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/react';\n\n    const x = css\\`\n      @media (max-width: 500px) {\n        padding: 0;\n      }\n      @media (min-width: 300px) {\n        &:hover {\n          padding-top: 5px;\n        }\n      }\n      &:enabled {\n        padding-left: 6px;\n      }\n      padding-bottom: 7px;\n    \\`;\n\n    console.log(x);\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css with keyframes","suites":[],"updatePoint":{"line":799,"column":38},"line":799,"code":"it('compiles atomic css with keyframes', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/react';\n\n    const x = css\\`\n      @keyframes fade {\n        from {\n          opacity: 0;\n        }\n        to {\n          opacity: 1;\n        }\n      }\n      animation: fade 1s infinite;\n\n      background: red;\n      height: 100px;\n    \\`;\n\n    console.log(x);\n\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic styled with static css","suites":[],"updatePoint":{"line":831,"column":42},"line":831,"code":"it('compiles atomic styled with static css', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled } from '@linaria/atomic';\n\n    const Component = styled.div\\`\n      color: blue;\n      height: 100px;\n    \\`;\n\n    console.log(Component);\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic css with unique atoms based on key value pairs","suites":[],"updatePoint":{"line":851,"column":66},"line":851,"code":"it('compiles atomic css with unique atoms based on key value pairs', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n    import { css } from '@linaria/atomic';\n    const x = css\\`\n      height: 100px;\n    \\`;\n    const y = css\\`\n      height: 99px\n    \\`;\n    console.log(x, y);\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic styled with plain css, static and dynamic interpolations","suites":[],"updatePoint":{"line":870,"column":76},"line":870,"code":"it('compiles atomic styled with plain css, static and dynamic interpolations', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled } from '@linaria/atomic';\n\n    const Component = styled.div\\`\n      color: blue;\n      height: 100px;\n      margin: ${'${100 / 2}'}px;\n      background-color: ${'${props => props.color}'};\n    \\`;\n\n    console.log(Component);\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atoms that are shared between css and styled templates","suites":[],"updatePoint":{"line":892,"column":67},"line":892,"code":"it('compiles atoms that are shared between css and styled templates', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { css } from '@linaria/atomic';\n    import { styled } from '@linaria/atomic';\n\n    const x = css\\`\n      background: red;\n      height: 100px;\n    \\`\n\n    const Component = styled.div\\`\n      background: red;\n      height: ${'${200 / 2}'}px;\n      margin: 10px;\n      color: ${'${props => props.color}'};\n    \\`;\n\n    console.log(x, Component);\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic styled wrapping other components with extra priority","suites":[],"updatePoint":{"line":920,"column":72},"line":920,"code":"it('compiles atomic styled wrapping other components with extra priority', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled } from '@linaria/atomic';\n\n    const Component = styled.div\\`\n      background-color: blue;\n      height: 100px;\n    \\`;\n\n    const ComponentCompositing = styled(Component)\\`\n      background: red;\n      height: 105px;\n    \\`;\n\n    console.log(ComponentCompositing);\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic styled without colliding by property","suites":[],"updatePoint":{"line":945,"column":56},"line":945,"code":"it('compiles atomic styled without colliding by property', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled } from '@linaria/atomic';\n\n    export const Component = styled.ul\\`\n      display: flex;\n      padding: 0;\n    \\`;\n\n    export const Component2 = styled.ul\\`\n      display: block;\n      padding: 0;\n    \\`;\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"compiles atomic styled with dynamic interpolations as unique variables based on the interpolation text","suites":[],"updatePoint":{"line":968,"column":106},"line":968,"code":"it('compiles atomic styled with dynamic interpolations as unique variables based on the interpolation text', async () => {\n  const { code, metadata } = await transpile(\n    dedent`\n    /* @flow */\n\n    import { styled } from '@linaria/atomic';\n\n    const Component = styled.div\\`\n      color: ${'${props => props.color}'};\n      border-color: ${'${props => props.color}'};\n      background-color: ${'${props => props.backgroundColor}'};\n    \\`;\n\n    const Component2 = styled.div\\`\n      color: ${'${props => props.color}'};\n      border-color: ${'${props => props.color || \"black\"}'};\n    \\`;\n\n    console.log(Component, Component2);\n\n      `\n  );\n  expect(code).toMatchSnapshot();\n  expect(metadata).toMatchSnapshot();\n});","file":"babel.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"collectExportsAndImports (%s)","suites":[],"line":88,"code":"describe.each(compilers)('collectExportsAndImports (%s)', (name, compiler) => {\n  it('imports', () => {\n    const { imports } = run(\n      compiler,\n      dedent`\n        import unknownDefault, { unknown, another as unknownRenamed } from 'unknown-package';\n        import type types from '@linaria/types';\n        import atomic from '@linaria/atomic';\n        import * as ns from '@linaria/namespace';\n        import * as linaria from '@linaria/core';\n        import {\n          test,\n          another as customName,\n          type Styled\n        } from '@linaria/react';\n\n        const { only, few, fields } = linaria;\n\n        const bar = linaria.bar;\n\n        export { unknownDefault, unknown, unknownRenamed, types, atomic, ns, test, customName, Styled, only, few, fields, bar };\n      `\n    );\n\n    expect(imports).toHaveLength(11);\n\n    const find = (source: string) => findBySource(imports, source);\n\n    expect(find('unknown-package')).toEqual(['=', 'another', 'unknown']);\n\n    expect(find('@linaria/types')).toHaveLength(0);\n\n    expect(find('@linaria/namespace')).toEqual(['*']);\n\n    expect(find('@linaria/atomic')).toEqual(['=']);\n\n    expect(find('@linaria/core')).toEqual(['bar', 'few', 'fields', 'only']);\n\n    expect(find('@linaria/react')).toEqual(['another', 'test']);\n  });\n\n  it('requires', () => {\n    const { imports } = run(\n      compiler,\n      dedent`\n        const notModule = (() => {\n          const require = () => ({});\n          const { dep } = require('@linaria/shaker');\n          return result;\n        })();\n        const module = (() => {\n          const { dep } = require('@linaria/something');\n          return result;\n        })();\n        const fullNamespace = require('@linaria/shaker');\n        const { named } = require('@linaria/shaker');\n        const { ...unknownRest } = require('@linaria/unknown');\n\n        export { notModule, module, fullNamespace, named, unknownRest };\n      `\n    );\n\n    const find = (source: string) => findBySource(imports, source);\n\n    expect(imports).toHaveLength(4);\n\n    expect(find('@linaria/something')).toEqual(['dep']);\n    expect(find('@linaria/shaker')).toEqual(['*', 'named']);\n    expect(find('@linaria/unknown')).toEqual(['*']);\n  });\n\n  xit('dynamic imports', () => {\n    const { imports } = run(\n      compiler,\n      dedent`\n        const fullNamespace = import('@linaria/shaker');\n        const { named } = await import('@linaria/shaker');\n        const { ...unknownRest } = await import('@linaria/unknown');\n\n        export { fullNamespace, named, unknownRest };\n      `\n    );\n\n    const find = (source: string) => findBySource(imports, source);\n\n    expect(imports).toHaveLength(3);\n\n    expect(find('@linaria/shaker')).toEqual(['*', 'named']);\n    expect(find('@linaria/unknown')).toEqual(['*']);\n  });\n\n  xit('exports', () => {\n    const { exports } = run(\n      compiler,\n      dedent`\n        const a = 1;\n\n        export { a };\n\n        export const b = 2;\n\n        export default function () {};\n      `\n    );\n\n    expect(exports.map((i) => i.exported)).toHaveLength(4);\n\n    // expect(find('@linaria/something')).toEqual(['dep']);\n    // expect(find('@linaria/shaker')).toEqual(['*', 'named']);\n    // expect(find('@linaria/unknown')).toEqual(['*']);\n  });\n\n  xit('re-exports', () => {\n    const { exports } = run(\n      compiler,\n      dedent`\n        export * from \"module1\";\n        export * as name7 from \"module2\";\n        export { name8, name9, name10 } from \"module3\";\n        export { import1 as name11, import2 as name12, name13 } from \"module4\";\n        export { default } from \"module5\";\n      `\n    );\n\n    expect(exports).toHaveLength(4);\n\n    // expect(find('@linaria/something')).toEqual(['dep']);\n    // expect(find('@linaria/shaker')).toEqual(['*', 'named']);\n    // expect(find('@linaria/unknown')).toEqual(['*']);\n  });\n});","file":"collectExportsAndImports.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"imports","suites":[],"updatePoint":{"line":89,"column":13},"line":89,"code":"  it('imports', () => {\n    const { imports } = run(\n      compiler,\n      dedent`\n        import unknownDefault, { unknown, another as unknownRenamed } from 'unknown-package';\n        import type types from '@linaria/types';\n        import atomic from '@linaria/atomic';\n        import * as ns from '@linaria/namespace';\n        import * as linaria from '@linaria/core';\n        import {\n          test,\n          another as customName,\n          type Styled\n        } from '@linaria/react';\n\n        const { only, few, fields } = linaria;\n\n        const bar = linaria.bar;\n\n        export { unknownDefault, unknown, unknownRenamed, types, atomic, ns, test, customName, Styled, only, few, fields, bar };\n      `\n    );\n\n    expect(imports).toHaveLength(11);\n\n    const find = (source: string) => findBySource(imports, source);\n\n    expect(find('unknown-package')).toEqual(['=', 'another', 'unknown']);\n\n    expect(find('@linaria/types')).toHaveLength(0);\n\n    expect(find('@linaria/namespace')).toEqual(['*']);\n\n    expect(find('@linaria/atomic')).toEqual(['=']);\n\n    expect(find('@linaria/core')).toEqual(['bar', 'few', 'fields', 'only']);\n\n    expect(find('@linaria/react')).toEqual(['another', 'test']);\n  });","file":"collectExportsAndImports.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"requires","suites":[],"updatePoint":{"line":129,"column":14},"line":129,"code":"  it('requires', () => {\n    const { imports } = run(\n      compiler,\n      dedent`\n        const notModule = (() => {\n          const require = () => ({});\n          const { dep } = require('@linaria/shaker');\n          return result;\n        })();\n        const module = (() => {\n          const { dep } = require('@linaria/something');\n          return result;\n        })();\n        const fullNamespace = require('@linaria/shaker');\n        const { named } = require('@linaria/shaker');\n        const { ...unknownRest } = require('@linaria/unknown');\n\n        export { notModule, module, fullNamespace, named, unknownRest };\n      `\n    );\n\n    const find = (source: string) => findBySource(imports, source);\n\n    expect(imports).toHaveLength(4);\n\n    expect(find('@linaria/something')).toEqual(['dep']);\n    expect(find('@linaria/shaker')).toEqual(['*', 'named']);\n    expect(find('@linaria/unknown')).toEqual(['*']);\n  });","file":"collectExportsAndImports.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"replaces dynamic imports with a noop","suites":[],"updatePoint":{"line":3,"column":40},"line":3,"code":"it('replaces dynamic imports with a noop', async () => {\n  const { code } = (await transformAsync(\n    \"import('./foo').then(foo => foo.init())\",\n    {\n      plugins: [require.resolve('../src/dynamic-import-noop')],\n      filename: 'source.js',\n      configFile: false,\n      babelrc: false,\n    }\n  )) ?? { code: null };\n\n  expect(code).toMatchSnapshot();\n});","file":"dynamic-import-noop.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"preserves classNames","suites":[],"updatePoint":{"line":28,"column":24},"line":28,"code":"it('preserves classNames', async () => {\n  const { code } = await transpile(\n    dedent`\n      import { styled } from '@linaria/react';\n\n      const Component = styled.div\\`\\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"handles locally named import","suites":[],"updatePoint":{"line":40,"column":32},"line":40,"code":"it('handles locally named import', async () => {\n  const { code } = await transpile(\n    dedent`\n      import { styled as custom } from '@linaria/react';\n\n      const Component = custom.div\\`\\`;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"replaces functional component","suites":[],"updatePoint":{"line":52,"column":33},"line":52,"code":"it('replaces functional component', async () => {\n  const div = '<div>{props.children}</div>';\n  const { code } = await transpile(\n    dedent`\n      import React from 'react';\n\n      const Component = (props) => ${div};\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"replaces class component","suites":[],"updatePoint":{"line":65,"column":28},"line":65,"code":"it('replaces class component', async () => {\n  const div = '<div>{props.children}</div>';\n  const { code } = await transpile(\n    dedent`\n      import React from 'react';\n\n      class Component extends React.PureComponent {\n        render() {\n          return ${div};\n        }\n      }\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"replaces constant","suites":[],"updatePoint":{"line":82,"column":21},"line":82,"code":"it('replaces constant', async () => {\n  const div = '<div>{props.children}</div>';\n  const { code } = await transpile(\n    dedent`\n      import React from 'react';\n\n      const tag = ${div};\n\n      const Component = (props) => tag;\n      `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"hoists exports","suites":[],"updatePoint":{"line":97,"column":18},"line":97,"code":"it('hoists exports', async () => {\n  const { code } = await transpile(\n    dedent`\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      Object.defineProperty(exports, \"foo\", {\n        enumerable: true,\n        get: function get() {\n          return _foo.foo;\n        }\n      });\n      Object.defineProperty(exports, \"bar\", {\n        enumerable: true,\n        get: function get() {\n          return _foo.bar;\n        }\n      });\n\n      var _foo = require(\"./foo\");\n    `\n  );\n\n  expect(code).toMatchSnapshot();\n});","file":"evaluators/preeval.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"creates module for JS files","suites":[],"updatePoint":{"line":39,"column":31},"line":39,"code":"it('creates module for JS files', () => {\n  const filename = '/foo/bar/test.js';\n  const mod = new Module(filename, options);\n\n  mod.evaluate('module.exports = () => 42');\n\n  expect(mod.exports()).toBe(42);\n  expect(mod.id).toBe(filename);\n  expect(mod.filename).toBe(filename);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"requires JS files","suites":[],"updatePoint":{"line":50,"column":21},"line":50,"code":"it('requires JS files', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n    const answer = require('./sample-script');\n\n    module.exports = 'The answer is ' + answer;\n  `);\n\n  expect(mod.exports).toBe('The answer is 42');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"requires JSON files","suites":[],"updatePoint":{"line":62,"column":23},"line":62,"code":"it('requires JSON files', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n    const data = require('./sample-data.json');\n\n    module.exports = 'Our saviour, ' + data.name;\n  `);\n\n  expect(mod.exports).toBe('Our saviour, Luke Skywalker');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"imports JS files","suites":[],"updatePoint":{"line":74,"column":20},"line":74,"code":"it('imports JS files', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n    import answer from './sample-script';\n\n    export const result = 'The answer is ' + answer;\n  `);\n\n  expect(mod.exports.result).toBe('The answer is 42');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"imports TypeScript files","suites":[],"updatePoint":{"line":86,"column":28},"line":86,"code":"it('imports TypeScript files', () => {\n  const mod = new Module(\n    path.resolve(__dirname, '../__fixtures__/test.ts'),\n    options\n  );\n\n  mod.evaluate(dedent`\n    import answer from './sample-typescript';\n\n    export const result = 'The answer is ' + answer;\n  `);\n\n  expect(mod.exports.result).toBe('The answer is 27');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"imports JSON files","suites":[],"updatePoint":{"line":101,"column":22},"line":101,"code":"it('imports JSON files', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n    import data from './sample-data.json';\n\n    const result = 'Our saviour, ' + data.name;\n\n    export default result;\n  `);\n\n  expect(mod.exports.default).toBe('Our saviour, Luke Skywalker');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"returns module from the cache","suites":[],"updatePoint":{"line":115,"column":33},"line":115,"code":"it('returns module from the cache', () => {\n  /* eslint-disable no-self-compare */\n\n  const filename = getFileName();\n  const mod = new Module(filename, options);\n  const id = './sample-data.json';\n\n  expect(mod.require(id) === mod.require(id)).toBe(true);\n\n  expect(\n    new Module(filename, options).require(id) ===\n      new Module(filename, options).require(id)\n  ).toBe(true);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"clears modules from the cache","suites":[],"updatePoint":{"line":130,"column":33},"line":130,"code":"it('clears modules from the cache', () => {\n  const filename = getFileName();\n  const id = './sample-data.json';\n\n  const result = new Module(filename, options).require(id);\n\n  expect(result === new Module(filename, options).require(id)).toBe(true);\n\n  Module.invalidate();\n\n  expect(result === new Module(filename, options).require(id)).toBe(false);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"exports the path for non JS/JSON files","suites":[],"updatePoint":{"line":143,"column":42},"line":143,"code":"it('exports the path for non JS/JSON files', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(mod.require('./sample-asset.png')).toBe('./sample-asset.png');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"returns module when requiring mocked builtin node modules","suites":[],"updatePoint":{"line":149,"column":61},"line":149,"code":"it('returns module when requiring mocked builtin node modules', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(mod.require('path')).toBe(require('path'));\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"returns null when requiring empty builtin node modules","suites":[],"updatePoint":{"line":155,"column":58},"line":155,"code":"it('returns null when requiring empty builtin node modules', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(mod.require('fs')).toBe(null);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"throws when requiring unmocked builtin node modules","suites":[],"updatePoint":{"line":161,"column":55},"line":161,"code":"it('throws when requiring unmocked builtin node modules', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() => mod.require('perf_hooks')).toThrow(\n    'Unable to import \"perf_hooks\". Importing Node builtins is not supported in the sandbox.'\n  );\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has access to the global object","suites":[],"updatePoint":{"line":169,"column":35},"line":169,"code":"it('has access to the global object', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n    new global.Set();\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"doesn't have access to the process object","suites":[],"updatePoint":{"line":179,"column":45},"line":179,"code":"it(\"doesn't have access to the process object\", () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n    module.exports = process.abort();\n  `)\n  ).toThrow('process.abort is not a function');\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has access to NODE_ENV","suites":[],"updatePoint":{"line":189,"column":26},"line":189,"code":"it('has access to NODE_ENV', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n  module.exports = process.env.NODE_ENV;\n  `);\n\n  expect(mod.exports).toBe(process.env.NODE_ENV);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has require.resolve available","suites":[],"updatePoint":{"line":199,"column":33},"line":199,"code":"it('has require.resolve available', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n  module.exports = require.resolve('./sample-script');\n  `);\n\n  expect(mod.exports).toBe(\n    path.resolve(path.dirname(mod.filename), 'sample-script.js')\n  );\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has require.ensure available","suites":[],"updatePoint":{"line":211,"column":32},"line":211,"code":"it('has require.ensure available', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n  require.ensure(['./sample-script']);\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has __filename available","suites":[],"updatePoint":{"line":221,"column":28},"line":221,"code":"it('has __filename available', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n  module.exports = __filename;\n  `);\n\n  expect(mod.exports).toBe(mod.filename);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has __dirname available","suites":[],"updatePoint":{"line":231,"column":27},"line":231,"code":"it('has __dirname available', () => {\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n  module.exports = __dirname;\n  `);\n\n  expect(mod.exports).toBe(path.dirname(mod.filename));\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has setTimeout, clearTimeout available","suites":[],"updatePoint":{"line":241,"column":42},"line":241,"code":"it('has setTimeout, clearTimeout available', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n  const x = setTimeout(() => {\n    console.log('test');\n  },0);\n\n  clearTimeout(x);\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has setInterval, clearInterval available","suites":[],"updatePoint":{"line":255,"column":44},"line":255,"code":"it('has setInterval, clearInterval available', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n  const x = setInterval(() => {\n    console.log('test');\n  }, 1000);\n\n  clearInterval(x);\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has setImmediate, clearImmediate available","suites":[],"updatePoint":{"line":269,"column":46},"line":269,"code":"it('has setImmediate, clearImmediate available', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n  const x = setImmediate(() => {\n    console.log('test');\n  });\n\n  clearImmediate(x);\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"has global objects available without referencing global","suites":[],"updatePoint":{"line":283,"column":59},"line":283,"code":"it('has global objects available without referencing global', () => {\n  const mod = new Module(getFileName(), options);\n\n  expect(() =>\n    mod.evaluate(dedent`\n  const x = new Set();\n  `)\n  ).not.toThrow();\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"changes resolve behaviour on overriding _resolveFilename","suites":[],"updatePoint":{"line":293,"column":60},"line":293,"code":"it('changes resolve behaviour on overriding _resolveFilename', () => {\n  const originalResolveFilename = Module._resolveFilename;\n\n  Module._resolveFilename = (id) => (id === 'foo' ? 'bar' : id);\n\n  const mod = new Module(getFileName(), options);\n\n  mod.evaluate(dedent`\n  module.exports = [\n    require.resolve('foo'),\n    require.resolve('test'),\n  ];\n  `);\n\n  // Restore old behavior\n  Module._resolveFilename = originalResolveFilename;\n\n  expect(mod.exports).toEqual(['bar', 'test']);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"correctly processes export declarations in strict mode","suites":[],"updatePoint":{"line":313,"column":58},"line":313,"code":"it('correctly processes export declarations in strict mode', () => {\n  const filename = '/foo/bar/test.js';\n  const mod = new Module(filename, options);\n\n  mod.evaluate('\"use strict\"; exports = module.exports = () => 42');\n\n  expect(mod.exports()).toBe(42);\n  expect(mod.id).toBe(filename);\n  expect(mod.filename).toBe(filename);\n});","file":"module.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"should work with posix paths","suites":["transformUrl"],"updatePoint":{"line":33,"column":34},"line":33,"code":"  it('should work with posix paths', () => {\n    Object.keys(dataset).forEach((result) => {\n      expect(transformUrl(...dataset[result])).toBe(result);\n    });\n  });","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"should work with win32 paths","suites":["transformUrl"],"updatePoint":{"line":39,"column":34},"line":39,"code":"  it('should work with win32 paths', () => {\n    const toWin32 = (p: string) => p.split(path.posix.sep).join(path.win32.sep);\n    const win32Dataset = Object.keys(dataset).reduce(\n      (acc, key) => ({\n        ...acc,\n        [key]: [\n          dataset[key][0],\n          toWin32(dataset[key][1]),\n          toWin32(dataset[key][2]),\n          path.win32,\n        ] as TransformUrlArgs,\n      }),\n      {} as Record<string, TransformUrlArgs>\n    );\n\n    Object.keys(win32Dataset).forEach((result) => {\n      expect(transformUrl(...win32Dataset[result])).toBe(result);\n    });\n  });","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"rewrites a relative path in url() declarations","suites":["transformUrl"],"updatePoint":{"line":60,"column":50},"line":60,"code":"it('rewrites a relative path in url() declarations', async () => {\n  const { cssText } = await transform(\n    dedent`\n    import { css } from '@linaria/core';\n\n    export const title = css\\`\n      background-image: url(./assets/test.jpg);\n      background-image: url(\"./assets/test.jpg\");\n      background-image: url('./assets/test.jpg');\n    \\`;\n    `,\n    {\n      filename: './test.js',\n      outputFilename: './.linaria-cache/test.css',\n      pluginOptions: {\n        rules,\n      },\n    }\n  );\n\n  expect(cssText).toMatchSnapshot();\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"rewrites multiple relative paths in url() declarations","suites":["transformUrl"],"updatePoint":{"line":83,"column":58},"line":83,"code":"it('rewrites multiple relative paths in url() declarations', async () => {\n  const { cssText } = await transform(\n    dedent`\n    import { css } from '@linaria/core';\n\n    export const title = css\\`\n      @font-face {\n        font-family: Test;\n        src: url(./assets/font.woff2) format(\"woff2\"), url(./assets/font.woff) format(\"woff\");\n      }\n    \\`;\n    `,\n    {\n      filename: './test.js',\n      outputFilename,\n      pluginOptions: {\n        rules,\n      },\n    }\n  );\n\n  expect(cssText).toMatchSnapshot();\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"doesn't rewrite an absolute path in url() declarations","suites":["transformUrl"],"updatePoint":{"line":107,"column":58},"line":107,"code":"it(\"doesn't rewrite an absolute path in url() declarations\", async () => {\n  const { cssText } = await transform(\n    dedent`\n    import { css } from '@linaria/core';\n\n    export const title = css\\`\n      background-image: url(/assets/test.jpg);\n    \\`;\n    `,\n    {\n      filename: './test.js',\n      outputFilename,\n      pluginOptions: {\n        rules,\n      },\n    }\n  );\n\n  expect(cssText).toMatchSnapshot();\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"respects passed babel options","suites":["transformUrl"],"updatePoint":{"line":128,"column":33},"line":128,"code":"it('respects passed babel options', async () => {\n  expect.assertions(2);\n\n  expect(() =>\n    transform(\n      dedent`\n      import { css } from '@linaria/core';\n\n      export const error = <jsx />;\n      `,\n      {\n        filename: './test.js',\n        outputFilename,\n        pluginOptions: {\n          rules,\n          babelOptions: {\n            babelrc: false,\n            configFile: false,\n            presets: [['@babel/preset-env', { loose: true }]],\n          },\n        },\n      }\n    )\n  ).toThrow(\n    /Support for the experimental syntax 'jsx' isn't currently enabled/\n  );\n\n  expect(() =>\n    transform(\n      dedent`\n      import { css } from '@linaria/core';\n\n      export const error = <jsx />;\n      export const title = css\\`\n        background-image: url(/assets/test.jpg);\n      \\`;\n      `,\n      {\n        filename: './test.js',\n        outputFilename,\n        pluginOptions: {\n          rules,\n          babelOptions: {\n            babelrc: false,\n            configFile: false,\n            presets: [\n              ['@babel/preset-env', { loose: true }],\n              '@babel/preset-react',\n            ],\n          },\n        },\n      }\n    )\n  ).not.toThrow('Unexpected token');\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"doesn't throw due to duplicate preset","suites":["transformUrl"],"updatePoint":{"line":184,"column":41},"line":184,"code":"it(\"doesn't throw due to duplicate preset\", async () => {\n  expect.assertions(1);\n\n  expect(() =>\n    transform(\n      dedent`\n      import { styled } from '@linaria/react';\n\n      const Title = styled.h1\\` color: blue; \\`;\n\n      const Article = styled.article\\`\n        ${'${Title}'} {\n          font-size: 16px;\n        }\n      \\`;\n      `,\n      {\n        filename: './test.js',\n        outputFilename,\n        pluginOptions: {\n          rules,\n          babelOptions: {\n            babelrc: false,\n            configFile: false,\n            presets: [require.resolve('../src')],\n            plugins: [\n              require.resolve('@babel/plugin-transform-modules-commonjs'),\n            ],\n          },\n        },\n      }\n    )\n  ).not.toThrow('Duplicate plugin/preset detected');\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"should return transformed code even when file only contains unused linaria code","suites":["transformUrl"],"updatePoint":{"line":219,"column":83},"line":219,"code":"it('should return transformed code even when file only contains unused linaria code', async () => {\n  const { code } = await transform(\n    dedent`\n    import { css } from '@linaria/core';\n\n    const title = css\\`\n      color: red;\n    \\`;\n    `,\n    {\n      filename: './test.js',\n      outputFilename,\n      pluginOptions: {\n        rules,\n      },\n    }\n  );\n\n  expect(code).not.toContain('css`');\n});","file":"transform.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"should find correct import","suites":["getTagProcessor"],"updatePoint":{"line":38,"column":32},"line":38,"code":"  it('should find correct import', () => {\n    const result = run(\n      dedent`\n      import { css } from \"@linaria/core\";\n      import { styled as renamedStyled, css as atomicCss } from \"@linaria/atomic\";\n\n      const Cmp = () => null;\n\n      export const Square = renamedStyled(Cmp)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('renamedStyled(Cmp)');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"renamedStyled(Cmp)``","suites":["getTagProcessor"],"updatePoint":{"line":53,"column":26},"line":53,"code":"  it('renamedStyled(Cmp)``', () => {\n    const result = run(\n      dedent`\n      import { styled as renamedStyled } from \"@linaria/react\";\n\n      const Cmp = () => null;\n\n      export const Square = renamedStyled(Cmp)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('renamedStyled(Cmp)');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"(0, react_1.styled)(Cmp)``","suites":["getTagProcessor"],"updatePoint":{"line":67,"column":32},"line":67,"code":"  it('(0, react_1.styled)(Cmp)``', () => {\n    const result = run(\n      dedent`\n      const react_1 = require(\"@linaria/react\");\n\n      const Cmp = () => null;\n\n      export const Square = (0, react_1.styled)(Cmp)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('react_1.styled(Cmp)');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled(Cmp)``","suites":["getTagProcessor"],"updatePoint":{"line":81,"column":19},"line":81,"code":"  it('styled(Cmp)``', () => {\n    const result = run(\n      dedent`\n      import { styled } from \"@linaria/react\";\n\n      const Cmp = () => null;\n\n      export const Square = styled(Cmp)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('styled(Cmp)');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled(hoc(Title))``","suites":["getTagProcessor"],"updatePoint":{"line":95,"column":26},"line":95,"code":"  it('styled(hoc(Title))``', () => {\n    const result = run(\n      dedent`\n      const { styled } = require('@linaria/react');\n\n      const Title = styled.h1\\`\n        color: red;\n      \\`;\n\n      const hoc = Cmp => Cmp;\n\n      export const CustomTitle = styled(hoc(Title))\\`\n        font-size: 24px;\n        color: blue;\n      \\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('styled(hoc(Title))');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled(() => { someLogic(); })``","suites":["getTagProcessor"],"updatePoint":{"line":116,"column":38},"line":116,"code":"  it('styled(() => { someLogic(); })``', () => {\n    const result = run(\n      dedent`\n      const { styled } = require('@linaria/react');\n\n      const someLogic = () => {};\n\n      export const CustomTitle = styled(() => { someLogic(); })\\`\n        font-size: 24px;\n        color: blue;\n      \\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('styled(() => {})');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"renamedStyled.div``","suites":["getTagProcessor"],"updatePoint":{"line":133,"column":25},"line":133,"code":"  it('renamedStyled.div``', () => {\n    const result = run(\n      dedent`\n      import { styled as renamedStyled } from \"@linaria/react\";\n\n      export const Square = renamedStyled.div\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"renamedStyled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"(0, react_1.styled.div)``","suites":["getTagProcessor"],"updatePoint":{"line":145,"column":31},"line":145,"code":"  it('(0, react_1.styled.div)``', () => {\n    const result = run(\n      dedent`\n      const react_1 = require(\"@linaria/react\");\n\n      export const Square = (0, react_1.styled.div)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"react_1.styled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled.div``","suites":["getTagProcessor"],"updatePoint":{"line":157,"column":18},"line":157,"code":"  it('styled.div``', () => {\n    const result = run(\n      dedent`\n      import { styled } from \"@linaria/react\";\n\n      export const Square = styled.div\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"styled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"(0, core_1.css)``","suites":["getTagProcessor"],"updatePoint":{"line":169,"column":23},"line":169,"code":"  it('(0, core_1.css)``', () => {\n    const result = run(\n      dedent`\n      const core_1 = require(\"@linaria/core\");\n\n      export const square = (0, core_1.css)\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('core_1.css');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"css``","suites":["getTagProcessor"],"updatePoint":{"line":181,"column":11},"line":181,"code":"  it('css``', () => {\n    const result = run(\n      dedent`\n      import { css } from \"@linaria/core\";\n\n      export const square = css\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('css');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"atomic css``","suites":["getTagProcessor"],"updatePoint":{"line":193,"column":18},"line":193,"code":"  it('atomic css``', () => {\n    const result = run(\n      dedent`\n      import { css } from \"@linaria/atomic\";\n\n      export const square = css\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('css');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"re-imported css","suites":["getTagProcessor"],"updatePoint":{"line":205,"column":21},"line":205,"code":"  it('re-imported css', () => {\n    const result = run(\n      dedent`\n      import { css } from 'linaria';\n\n      export const square = css\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe('css');\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"re-imported styled","suites":["getTagProcessor"],"updatePoint":{"line":217,"column":24},"line":217,"code":"  it('re-imported styled', () => {\n    const result = run(\n      dedent`\n      import { styled } from 'linaria/react';\n\n      export const Square = styled.div\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"styled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"import from unknown package","suites":["getTagProcessor"],"updatePoint":{"line":229,"column":33},"line":229,"code":"  it('import from unknown package', () => {\n    const result = run(\n      dedent`\n      import { styled } from '@linaria/babel-preset';\n\n      export const Square = styled.div\\`\\`;\n    `\n    );\n\n    expect(result).toBeNull();\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"require and access with prop","suites":["getTagProcessor"],"updatePoint":{"line":241,"column":34},"line":241,"code":"  it('require and access with prop', () => {\n    const result = run(\n      dedent`\n      const renamedStyled = require('@linaria/react').styled;\n      export const Square = renamedStyled.div\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"renamedStyled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"require and destructing","suites":["getTagProcessor"],"updatePoint":{"line":252,"column":29},"line":252,"code":"  it('require and destructing', () => {\n    const result = run(\n      dedent`\n      const { styled } = require('@linaria/react');\n      export const Square = styled.div\\`\\`;\n    `\n    );\n\n    expect(tagSource(result)).toBe(\"styled('div')\");\n  });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"css.div``","suites":["getTagProcessor","invalid usage"],"updatePoint":{"line":264,"column":17},"line":264,"code":"    it('css.div``', () => {\n      const runner = () =>\n        run(\n          dedent`import { css } from \"@linaria/core\"; export const square = css.div\\`\\`;`\n        );\n\n      expect(runner).toThrow('Invalid usage of `css` tag');\n    });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"css(\"div\")``","suites":["getTagProcessor","invalid usage"],"updatePoint":{"line":273,"column":20},"line":273,"code":"    it('css(\"div\")``', () => {\n      const runner = () =>\n        run(\n          dedent`import { css } from \"@linaria/core\"; export const square = css(\"div\")\\`\\`;`\n        );\n\n      expect(runner).toThrow('Invalid usage of `css` tag');\n    });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled`` tag","suites":["getTagProcessor","invalid usage"],"updatePoint":{"line":282,"column":20},"line":282,"code":"    it('styled`` tag', () => {\n      const runner = () =>\n        run(\n          dedent`import { styled } from \"@linaria/react\"; export const square = styled\\`\\`;`\n        );\n\n      expect(runner).toThrow('Invalid usage of `styled` tag');\n    });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled.div.span`` tag","suites":["getTagProcessor","invalid usage"],"updatePoint":{"line":291,"column":29},"line":291,"code":"    it('styled.div.span`` tag', () => {\n      const runner = () =>\n        run(\n          dedent`import { styled } from \"@linaria/react\"; export const square = styled.div.span\\`\\`;`\n        );\n\n      expect(runner).toThrow('Invalid usage of `styled` tag');\n    });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"styled(\"div\").span`` tag","suites":["getTagProcessor","invalid usage"],"updatePoint":{"line":300,"column":32},"line":300,"code":"    it('styled(\"div\").span`` tag', () => {\n      const runner = () =>\n        run(\n          dedent`import { styled } from \"@linaria/react\"; export const square = styled(\"div\").span\\`\\`;`\n        );\n\n      expect(runner).toThrow('Invalid usage of `styled` tag');\n    });","file":"utils/getTagProcessor.test.ts","skipped":false,"dir":"packages/babel/__tests__"},{"name":"should filter falsy values","suites":[],"updatePoint":{"line":2,"column":30,"index":59},"line":2,"code":"it('should filter falsy values', () => {\n  expect(cx('1', 'test', false, '2', 0, '', null, undefined, '3')).toBe('1 test 2 3');\n});","file":"cx.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"should join atoms together, de-duplicating by property and joining the values","suites":[],"updatePoint":{"line":5,"column":81,"index":242},"line":5,"code":"it('should join atoms together, de-duplicating by property and joining the values', () => {\n  expect(cx('atm_a_class1 atm_b_class2', 'atm_a_class3')).toBe('atm_a_class3 atm_b_class2');\n});","file":"cx.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"should join atoms and non atoms together at the same time","suites":[],"updatePoint":{"line":8,"column":61,"index":411},"line":8,"code":"it('should join atoms and non atoms together at the same time', () => {\n  expect(cx('atm_a_1', 'atm_b_2', false, '2', 0, '', null, undefined, '3', 'atm_b_3')).toBe('atm_a_1 atm_b_3 2 3');\n});","file":"cx.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"Ensures that package do not include core-js dependency after build","suites":[],"updatePoint":{"line":15,"column":70,"index":358},"line":15,"code":"it('Ensures that package do not include core-js dependency after build', async () => {\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  const packageJSON = require('@linaria/core/package.json');\n\n  const buildScript = packageJSON.scripts['build:corejs-test'];\n  const proc = cp.exec(buildScript, {\n    env: { ...process.env,\n      DEBUG_CORE_JS: 'true'\n    }\n  });\n  const result = await waitForProcess(proc); // run `DEBUG_CORE_JS=true yarn build:lib` to debug issues with introduced core-js dependency\n\n  expect(result).not.toContain('The corejs3 polyfill added the following polyfills');\n  expect(result).toContain('Based on your code and targets, the corejs3 polyfill did not add any polyfill');\n}, 15000);","file":"detect-core-js.test.ts","skipped":false,"dir":"packages/core/__tests__"},{"name":"removes all","suites":[],"updatePoint":{"line":44,"column":15},"line":44,"code":"it('removes all', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n\n    exports.__linariaPreval = [];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"keeps only code which is related to `color`","suites":[],"updatePoint":{"line":56,"column":47},"line":56,"code":"it('keeps only code which is related to `color`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const wrap = '';\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    module.exports = { color, anotherColor };\n    exports.__linariaPreval = [color];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"keeps only code which is related to `anotherColor`","suites":[],"updatePoint":{"line":69,"column":54},"line":69,"code":"it('keeps only code which is related to `anotherColor`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    exports.__linariaPreval = [anotherColor];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"keeps only code which is related to `a`","suites":[],"updatePoint":{"line":80,"column":43},"line":80,"code":"it('keeps only code which is related to `a`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    exports.__linariaPreval = [a];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"shakes imports","suites":[],"updatePoint":{"line":91,"column":18},"line":91,"code":"it('shakes imports', () => {\n  const [shaken] = _shake()`\n    import { unrelatedImport } from '…';\n    import { whiteColor as color, anotherColor } from '…';\n    import defaultColor from '…';\n    import anotherDefaultColor from '…';\n    import '…';\n    require('…');\n    export default color;\n    exports.__linariaPreval = [color, defaultColor];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"should keep member expression key","suites":[],"updatePoint":{"line":106,"column":37},"line":106,"code":"it('should keep member expression key', () => {\n  const [shaken] = _shake()`\n    const key = 'blue';\n    const obj = { blue: '#00F' };\n    const blue = obj[key];\n    exports.__linariaPreval = [blue];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"shakes exports","suites":[],"updatePoint":{"line":117,"column":18},"line":117,"code":"it('shakes exports', () => {\n  const [shaken] = _shake()`\n    import { whiteColor as color, anotherColor } from '…';\n    export const a = color;\n    export { redColor } from \"…\";\n    export { anotherColor };\n    exports.__linariaPreval = [a];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"shakes es5 exports","suites":[],"updatePoint":{"line":129,"column":22},"line":129,"code":"it('shakes es5 exports', () => {\n  const [shaken] = _shake(undefined, ['redColor', 'greenColor'])`\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.redColor = 'red';\n    Object.defineProperty(exports, \"blueColor\", {\n      enumerable: true,\n      get: function get() {\n        return 'blue';\n      }\n    });\n    Object.defineProperty(exports, \"greenColor\", {\n      enumerable: true,\n      get: function get() {\n        return 'green';\n      }\n    });\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"should throw away any side effects","suites":[],"line":154,"code":"it.skip('should throw away any side effects', () => {","file":"extractor.test.ts","skipped":true,"dir":"packages/extractor/__tests__"},{"name":"keeps objects as is","suites":[],"updatePoint":{"line":168,"column":23},"line":168,"code":"it('keeps objects as is', () => {\n  const [shaken] = _shake()`\n    const fill1 = (top = 0, left = 0, right = 0, bottom = 0) => ({\n      position: 'absolute',\n      top,\n      right,\n      bottom,\n      left,\n    });\n\n    const fill2 = (top = 0, left = 0, right = 0, bottom = 0) => {\n      return {\n        position: 'absolute',\n        top,\n        right,\n        bottom,\n        left,\n      };\n    };\n\n    exports.__linariaPreval = [fill1, fill2];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"shakes sequence expression","suites":[],"updatePoint":{"line":194,"column":30},"line":194,"code":"it('shakes sequence expression', () => {\n  const [shaken] = _shake()`\n    import { external } from '…';\n    const color1 = (external, () => 'blue');\n    let local = '';\n    const color2 = (local = color1(), () => local);\n    exports.__linariaPreval = [color2];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"shakes assignment patterns","suites":[],"updatePoint":{"line":206,"column":30},"line":206,"code":"it('shakes assignment patterns', () => {\n  const [shaken] = _shake()`\n    const [identifier = 1] = [2];\n    const [{...object} = {}] = [{ a: 1, b: 2 }];\n    const [[...array] = []] = [[1,2,3,4]];\n    const obj = { member: null };\n    ([obj.member = 42] = [1]);\n    exports.__linariaPreval = [identifier, object, array, obj];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"extractor.test.ts","skipped":false,"dir":"packages/extractor/__tests__"},{"name":"keeps linaria","suites":["styled-components"],"updatePoint":{"line":19,"column":19,"index":340},"line":19,"code":"  it('keeps linaria', () => {\n    const code = getCode(`\n    import styled from \"linaria/react\";\n    import Title from \"./Title\";\n\n    export default styled.h1\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"css","suites":["styled-components"],"updatePoint":{"line":32,"column":9,"index":602},"line":32,"code":"  it('css', () => {\n    const code = getCode(`\n    import { css } from \"styled-components\";\n    import Title from \"./Title\";\n\n    export default css\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"styled.h1","suites":["styled-components"],"updatePoint":{"line":45,"column":15,"index":869},"line":45,"code":"  it('styled.h1', () => {\n    const code = getCode(`\n    import styled from \"styled-components\";\n    import Title from \"./Title\";\n\n    export default styled.h1\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"member expression as selector","suites":["styled-components"],"updatePoint":{"line":58,"column":35,"index":1161},"line":58,"code":"  it('member expression as selector', () => {\n    const code = getCode(`\n    import styled from \"styled-components\";\n    import Title from \"./Title\";\n\n    export default styled.h1\\`\n      & > ${'${Title.Small}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"styled(Cmp)","suites":["styled-components"],"updatePoint":{"line":71,"column":17,"index":1441},"line":71,"code":"  it('styled(Cmp)', () => {\n    const code = getCode(`\n    import styled from \"styled-components\";\n    import Cmp from \"./Cmp\";\n    import Title from \"./Title\";\n\n    export default styled(Cmp)\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"styled(Cmp).attrs({})","suites":["styled-components"],"updatePoint":{"line":85,"column":27,"index":1756},"line":85,"code":"  it('styled(Cmp).attrs({})', () => {\n    const code = getCode(`\n    import styled from \"styled-components\";\n    import Cmp from \"./Cmp\";\n    import Title from \"./Title\";\n\n    export default styled(Cmp).attrs(() => ({}))\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"styled.h1.attrs({})","suites":["styled-components"],"updatePoint":{"line":99,"column":25,"index":2087},"line":99,"code":"  it('styled.h1.attrs({})', () => {\n    const code = getCode(`\n    import styled from \"styled-components\";\n    import Title from \"./Title\";\n\n    export default styled.h1.attrs(() => ({}))\\`\n      & > ${'${Title}'} {\n        color: red;\n      }\n    \\`;\n  `);\n    expect(code).toMatchSnapshot();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/interop/__tests__"},{"name":"Ensures that package do not include core-js dependency after build","suites":[],"updatePoint":{"line":15,"column":70,"index":357},"line":15,"code":"it('Ensures that package do not include core-js dependency after build', async () => {\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  const packageJSON = require('@linaria/react/package.json');\n\n  const buildScript = packageJSON.scripts['build:corejs-test'];\n  const proc = cp.exec(buildScript, {\n    stdio: 'ignore',\n    env: { ...process.env,\n      DEBUG_CORE_JS: 'true'\n    }\n  });\n  const result = await waitForProcess(proc); // run `DEBUG_CORE_JS=true yarn build:lib` to debug issues with introduced core-js dependency\n\n  expect(result).not.toContain('The corejs3 polyfill added the following polyfills');\n  expect(result).toContain('Based on your code and targets, the corejs3 polyfill did not add any polyfill');\n}, 15000);","file":"detect-core-js.test.ts","skipped":false,"dir":"packages/react/__tests__"},{"name":"critical","suites":[],"updatePoint":{"line":10,"column":16},"line":10,"code":"  test('critical', () => expect(prettyPrint(critical)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"other","suites":[],"updatePoint":{"line":11,"column":13},"line":11,"code":"  test('other', () => expect(prettyPrint(other)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"critical","suites":["works with global css"],"updatePoint":{"line":198,"column":16},"line":198,"code":"  test('critical', () => expect(prettyPrint(critical)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"other","suites":["works with global css"],"updatePoint":{"line":199,"column":13},"line":199,"code":"  test('other', () => expect(prettyPrint(other)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"critical","suites":["handles top-level @font-face"],"updatePoint":{"line":213,"column":16},"line":213,"code":"  test('critical', () => expect(prettyPrint(critical)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"other","suites":["handles top-level @font-face"],"updatePoint":{"line":214,"column":13},"line":214,"code":"  test('other', () => expect(prettyPrint(other)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"critical","suites":["include atrule once"],"updatePoint":{"line":234,"column":16},"line":234,"code":"  test('critical', () => expect(prettyPrint(critical)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"other","suites":["include atrule once"],"updatePoint":{"line":235,"column":13},"line":235,"code":"  test('other', () => expect(prettyPrint(other)).toMatchSnapshot());","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"critical should be empty","suites":["ignore empty class attribute"],"updatePoint":{"line":252,"column":32},"line":252,"code":"  test('critical should be empty', () => expect(critical).toEqual(''));","file":"collect.test.ts","skipped":false,"dir":"packages/server/__tests__"},{"name":"Identifier","suites":["VariableDeclaration"],"updatePoint":{"line":22,"column":16},"line":22,"code":"  it('Identifier', () => {\n    const graph = _buildGraph`\n        const a = 42;\n      `;\n\n    const deps = graph.getDependenciesByBinding('0:a');\n    expect(deps).toMatchObject([\n      {\n        type: 'NumericLiteral',\n        value: 42,\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n    ]);\n\n    expect(graph.findDependencies({ name: 'a' })).toContainEqual(deps[0]);\n  });","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"BlockStatement","suites":["scopes"],"updatePoint":{"line":43,"column":20},"line":43,"code":"  it('BlockStatement', () => {\n    const graph = _buildGraph`\n        let a = 42;\n        {\n          const a = \"21\";\n        }\n\n        a = 21;\n      `;\n\n    const deps0 = graph.getDependenciesByBinding('0:a');\n    expect(deps0).toMatchObject([\n      {\n        type: 'NumericLiteral',\n        value: 42,\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n      {\n        type: 'Identifier',\n        start: 4,\n      },\n      {\n        type: 'Identifier',\n        start: 35,\n      },\n      {\n        type: 'NumericLiteral',\n        value: 21,\n      },\n      {\n        type: 'AssignmentExpression',\n      },\n    ]);\n\n    const deps1 = graph.getDependenciesByBinding('1:a');\n    expect(deps1).toMatchObject([\n      {\n        type: 'StringLiteral',\n        value: '21',\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n    ]);\n\n    expect(graph.findDependencies({ name: 'a' })).toHaveLength(8);\n  });","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"Function","suites":["scopes"],"updatePoint":{"line":93,"column":14},"line":93,"code":"  it('Function', () => {\n    const graph = _buildGraph`\n        const a = (arg1, arg2, arg3) => arg1 + arg2 + arg3;\n      `;\n\n    const aDeps = graph.getDependenciesByBinding('0:a');\n    expect(aDeps).toMatchObject([\n      {\n        type: 'ArrowFunctionExpression',\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n    ]);\n\n    expect(graph.getDependenciesByBinding('1:arg1')).toHaveLength(1);\n    expect(graph.getDependentsByBinding('1:arg1')).toMatchObject([\n      {\n        // arg1 in the binary expression\n        type: 'Identifier',\n        name: 'arg1',\n        start: 32,\n      },\n      {\n        // arg1 + arg2\n        type: 'BinaryExpression',\n        right: {\n          name: 'arg2',\n        },\n      },\n      {\n        // (arg1 + arg2) + arg3, because of it is the whole function body\n        type: 'BinaryExpression',\n        right: {\n          name: 'arg3',\n        },\n      },\n    ]);\n\n    expect(graph.getDependenciesByBinding('1:arg2')).toMatchObject([\n      {\n        type: 'Identifier',\n        name: 'arg2',\n        start: 17,\n      },\n    ]);\n\n    expect(graph.getDependenciesByBinding('1:arg3')).toMatchObject([\n      {\n        type: 'Identifier',\n        name: 'arg3',\n        start: 23,\n      },\n    ]);\n  });","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"Identifier","suites":["AssignmentExpression"],"updatePoint":{"line":151,"column":16},"line":151,"code":"  it('Identifier', () => {\n    const graph = _buildGraph`\n        let a = 42;\n        a = 24;\n      `;\n\n    const deps = graph.getDependenciesByBinding('0:a');\n    expect(deps).toMatchObject([\n      {\n        type: 'NumericLiteral',\n        value: 42,\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n      {\n        type: 'Identifier',\n        name: 'a',\n        start: 4,\n      },\n      {\n        type: 'Identifier',\n        name: 'a',\n        start: 12,\n      },\n      {\n        type: 'NumericLiteral',\n        value: 24,\n      },\n      {\n        type: 'AssignmentExpression',\n      },\n    ]);\n\n    expect(graph.findDependents({ value: 42 })).toHaveLength(1);\n    expect(graph.findDependents({ value: 24 })).toHaveLength(1);\n  });","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"MemberExpression","suites":["AssignmentExpression"],"updatePoint":{"line":189,"column":22},"line":189,"code":"  it('MemberExpression', () => {\n    const graph = _buildGraph`\n        const a = {};\n        a.foo.bar = 42;\n      `;\n\n    expect(graph.getDependenciesByBinding('0:a')).toMatchObject([\n      {\n        type: 'ObjectExpression',\n        properties: [],\n      },\n      {\n        type: 'VariableDeclarator',\n      },\n      {\n        type: 'Identifier',\n        name: 'a',\n        start: 6,\n      },\n      {\n        type: 'Identifier',\n        name: 'a',\n        start: 14,\n      },\n      {\n        type: 'MemberExpression',\n        property: {\n          name: 'foo',\n        },\n      },\n    ]);\n\n    expect(graph.findDependents({ value: 42 })).toMatchObject([\n      {\n        type: 'MemberExpression',\n        property: {\n          name: 'bar',\n        },\n      },\n    ]);\n  });","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"SequenceExpression","suites":["AssignmentExpression"],"updatePoint":{"line":232,"column":22},"line":232,"code":"it('SequenceExpression', () => {\n  const graph = _buildGraph`\n      const color1 = 'blue';\n      let local = '';\n      const color2 = (true, local = color1, () => local);\n    `;\n\n  const seqDeps = graph.findDependencies({\n    type: 'SequenceExpression',\n  });\n  expect(seqDeps).toMatchObject([\n    {\n      type: 'ArrowFunctionExpression',\n    },\n  ]);\n\n  const fnDeps = graph.findDependencies({\n    type: 'ArrowFunctionExpression',\n  });\n  expect(fnDeps).toMatchObject([\n    {\n      body: {\n        name: 'local',\n        type: 'Identifier',\n      },\n\n      type: 'ArrowFunctionExpression',\n    },\n    {\n      name: 'local',\n      type: 'Identifier',\n    },\n  ]);\n\n  const localDeps = graph.getDependenciesByBinding('0:local');\n  expect(localDeps).toMatchObject([\n    {\n      type: 'StringLiteral',\n      value: '',\n    },\n    {\n      type: 'VariableDeclarator',\n    },\n    {\n      type: 'Identifier',\n      name: 'local',\n      start: 27,\n    },\n    {\n      type: 'Identifier',\n      name: 'local',\n      start: 61,\n    },\n    {\n      type: 'Identifier',\n      name: 'color1',\n    },\n    {\n      type: 'AssignmentExpression',\n    },\n    {\n      type: 'Identifier',\n      name: 'local',\n      start: 27,\n    },\n  ]);\n\n  const bool = { type: 'BooleanLiteral' };\n  expect(graph.findDependents(bool)).toHaveLength(0);\n  expect(graph.findDependencies(bool)).toHaveLength(0);\n});","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"MemberExpression","suites":["AssignmentExpression"],"updatePoint":{"line":304,"column":20},"line":304,"code":"it('MemberExpression', () => {\n  const graph = _buildGraph`\n    const key = 'blue';\n    const obj = { blue: '#00F' };\n    const blue = obj[key];\n  `;\n\n  const memberExprDeps = graph.findDependencies({\n    type: 'MemberExpression',\n  });\n\n  expect(memberExprDeps).toMatchObject([\n    {\n      type: 'Identifier',\n      name: 'obj',\n    },\n    {\n      type: 'Identifier',\n      name: 'key',\n    },\n  ]);\n});","file":"depsGraph.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"removes all","suites":[],"updatePoint":{"line":44,"column":15},"line":44,"code":"it('removes all', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n\n    exports.__linariaPreval = [];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"keeps only code which is related to `color`","suites":[],"updatePoint":{"line":56,"column":47},"line":56,"code":"it('keeps only code which is related to `color`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const wrap = '';\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    module.exports = { color, anotherColor };\n    exports.__linariaPreval = [color];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"keeps only code which is related to `anotherColor`","suites":[],"updatePoint":{"line":69,"column":54},"line":69,"code":"it('keeps only code which is related to `anotherColor`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    exports.__linariaPreval = [anotherColor];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"keeps only code which is related to `a`","suites":[],"updatePoint":{"line":80,"column":43},"line":80,"code":"it('keeps only code which is related to `a`', () => {\n  const [shaken] = _shake()`\n    const { whiteColor: color, anotherColor } = require('…');\n    const a = color || anotherColor;\n    color.green = '#0f0';\n    exports.__linariaPreval = [a];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes imports","suites":[],"updatePoint":{"line":91,"column":18},"line":91,"code":"it('shakes imports', () => {\n  const [shaken] = _shake()`\n    import { unrelatedImport } from '…';\n    import { whiteColor as color, anotherColor } from '…';\n    import defaultColor from '…';\n    import anotherDefaultColor from '…';\n    import '…';\n    require('…');\n    export default color;\n    exports.__linariaPreval = [color, defaultColor];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should keep member expression key","suites":[],"updatePoint":{"line":106,"column":37},"line":106,"code":"it('should keep member expression key', () => {\n  const [shaken] = _shake()`\n    const key = 'blue';\n    const obj = { blue: '#00F' };\n    const blue = obj[key];\n    exports.__linariaPreval = [blue];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes exports","suites":[],"updatePoint":{"line":117,"column":18},"line":117,"code":"it('shakes exports', () => {\n  const [shaken] = _shake()`\n    import { whiteColor as color, anotherColor } from '…';\n    export const a = color;\n    export { redColor } from \"…\";\n    export { anotherColor };\n    exports.__linariaPreval = [a];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes es5 exports","suites":[],"updatePoint":{"line":129,"column":22},"line":129,"code":"it('shakes es5 exports', () => {\n  const [shaken] = _shake(undefined, ['redColor', 'greenColor', 'yellowColor'])`\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.redColor = 'red';\n    exports['yellowColor'] = 'yellow';\n    exports['pinkColor'] = 'pink';\n    Object.defineProperty(exports, \"blueColor\", {\n      enumerable: true,\n      get: function get() {\n        return 'blue';\n      }\n    });\n    Object.defineProperty(exports, \"greenColor\", {\n      enumerable: true,\n      get: function get() {\n        return 'green';\n      }\n    });\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should throw away any side effects","suites":[],"line":156,"code":"it.skip('should throw away any side effects', () => {","file":"shaker.test.ts","skipped":true,"dir":"packages/shaker/__tests__"},{"name":"keeps objects as is","suites":[],"updatePoint":{"line":170,"column":23},"line":170,"code":"it('keeps objects as is', () => {\n  const [shaken] = _shake()`\n    const fill1 = (top = 0, left = 0, right = 0, bottom = 0) => ({\n      position: 'absolute',\n      top,\n      right,\n      bottom,\n      left,\n    });\n\n    const fill2 = (top = 0, left = 0, right = 0, bottom = 0) => {\n      return {\n        position: 'absolute',\n        top,\n        right,\n        bottom,\n        left,\n      };\n    };\n\n    exports.__linariaPreval = [fill1, fill2];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes sequence expression","suites":[],"updatePoint":{"line":196,"column":30},"line":196,"code":"it('shakes sequence expression', () => {\n  const [shaken] = _shake()`\n    import { external } from '…';\n    const color1 = (external, () => 'blue');\n    let local = '';\n    const color2 = (local = color1(), () => local);\n    exports.__linariaPreval = [color2];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes assignment patterns","suites":[],"updatePoint":{"line":208,"column":30},"line":208,"code":"it('shakes assignment patterns', () => {\n  const [shaken] = _shake()`\n    const [identifier = 1] = [2];\n    const [{...object} = {}] = [{ a: 1, b: 2 }];\n    const [[...array] = []] = [[1,2,3,4]];\n    const obj = { member: null };\n    ([obj.member = 42] = [1]);\n    exports.__linariaPreval = [identifier, object, array, obj];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"shakes for-in statements","suites":[],"updatePoint":{"line":221,"column":28},"line":221,"code":"it('shakes for-in statements', () => {\n  const [shaken] = _shake()`\n    const obj1 = { a: 1, b: 2 };\n    const obj2 = {};\n    for (const key in obj1) {\n      obj2[key] = obj1[key];\n    }\n    exports.__linariaPreval = [obj2];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"keeps reused exports","suites":[],"updatePoint":{"line":234,"column":24},"line":234,"code":"it('keeps reused exports', () => {\n  const [shaken] = _shake()`\n    const bar = function() {\n      return 'hello world';\n    };\n    exports.bar = bar;\n\n    const foo = exports.bar();\n    exports.__linariaPreval = [foo];\n  `;\n\n  expect(shaken).toMatchSnapshot();\n});","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should work with wildcard imports","suites":["shaker"],"updatePoint":{"line":250,"column":41},"line":250,"code":"    it('should work with wildcard imports', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import * as mod from \"@linaria/babel-preset/__fixtures__/complex-component\";\n\n      const color = mod[\"whiteColor\"];\n\n      export const square = css\\`\n        ${'${mod.Title}'} {\n          color: ${'${color}'};\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"assigning to exports","suites":["shaker"],"updatePoint":{"line":270,"column":28},"line":270,"code":"    it('assigning to exports', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import { Padding } from \"../__fixtures__/assignToExport\";\n\n      export const square = css\\`\n        div {\n          padding: ${'${Padding}'}px;\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"exporting objects","suites":["shaker"],"updatePoint":{"line":288,"column":25},"line":288,"code":"    it('exporting objects', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import object from \"../__fixtures__/objectExport\";\n\n      export const square = css\\`\n        div {\n          margin: ${'${object.margin}'}px;\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"exporting objects with computed keys","suites":["shaker"],"updatePoint":{"line":306,"column":44},"line":306,"code":"    it('exporting objects with computed keys', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import { object } from \"../__fixtures__/computedKeys\";\n\n      export const square = css\\`\n        div {\n          color: ${'${object.blue}'};\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"exporting sequence expressions","suites":["shaker"],"updatePoint":{"line":324,"column":38},"line":324,"code":"    it('exporting sequence expressions', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import number from \"../__fixtures__/sequenceExport\";\n\n      export const square = css\\`\n        div {\n          height: ${'${number}'}px;\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should work with wildcard reexports","suites":["shaker"],"updatePoint":{"line":342,"column":43},"line":342,"code":"    it('should work with wildcard reexports', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import { foo1 } from \"../__fixtures__/reexports\";\n\n      export const square = css\\`\n        color: ${'${foo1}'};\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should interpolate imported components","suites":["shaker"],"updatePoint":{"line":358,"column":46},"line":358,"code":"    it('should interpolate imported components', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import { Title } from \"@linaria/babel-preset/__fixtures__/complex-component\";\n\n      export const square = css\\`\n        ${'${Title}'} {\n          color: red;\n        }\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"should interpolate imported variables","suites":["shaker"],"updatePoint":{"line":376,"column":45},"line":376,"code":"    it('should interpolate imported variables', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { css } from \"@linaria/core\";\n      import { whiteColor } from \"@linaria/babel-preset/__fixtures__/complex-component\";\n\n      export const square = css\\`\n        color: ${'${whiteColor}'}\n      \\`;\n    `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"evaluates typescript enums","suites":["shaker"],"updatePoint":{"line":392,"column":34},"line":392,"code":"    it('evaluates typescript enums', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { styled } from '@linaria/react';\n\n      enum Colors {\n        BLUE = '#27509A'\n      }\n\n      export const Title = styled.h1\\`\n        color: ${'${Colors.BLUE}'};\n      \\`;\n      `,\n        (config) => ({\n          ...config,\n          presets: ['@babel/preset-typescript', ...(config.presets ?? [])],\n          filename: 'source.ts',\n        })\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"},{"name":"evaluates chain of reexports","suites":["shaker"],"updatePoint":{"line":416,"column":36},"line":416,"code":"    it('evaluates chain of reexports', async () => {\n      const { code, metadata } = await transpile(\n        dedent`\n      import { styled } from '@linaria/react';\n      import { fooStyles } from \"@linaria/babel-preset/__fixtures__/reexports\";\n\n      const value = fooStyles.foo;\n\n      export const H1 = styled.h1\\`\n        color: ${'${value}'};\n      \\`\n      `\n      );\n\n      expect(code).toMatchSnapshot();\n      expect(metadata).toMatchSnapshot();\n    });","file":"shaker.test.ts","skipped":false,"dir":"packages/shaker/__tests__"}]}