{"repo":"dcloudio/uni-app","url":"https://github.com/dcloudio/uni-app","branch":"dev","configs":[{"package":"uni-app","lang":"js","dir":"tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@dcloudio/uni-cli-i18n","lang":"js","dir":"packages/uni-cli-i18n/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@dcloudio/uni-cli-shared","lang":"js","dir":"packages/uni-cli-shared/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@dcloudio/uni-migration","lang":"js","dir":"packages/uni-migration/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@dcloudio/uni-template-compiler","lang":"js","dir":"packages/uni-template-compiler/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@dcloudio/vue-cli-plugin-hbuilderx","lang":"js","dir":"packages/vue-cli-plugin-hbuilderx/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"weex-styler","lang":"js","dir":"packages/vue-cli-plugin-hbuilderx/packages/weex-styler/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vue-style-loader","lang":"js","dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@dcloudio/webpack-uni-mp-loader","lang":"js","dir":"packages/webpack-uni-mp-loader/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"同步拦截器 invoke","suites":["接口`addInterceptor`"],"updatePoint":{"line":3,"column":18,"index":89},"line":3,"code":"  it('同步拦截器 invoke', done => {\n    const setStorageInterceptor = {\n      invoke(args) {\n        args.data = 2;\n      }\n\n    };\n    uni.addInterceptor('setStorage', setStorageInterceptor);\n    uni.setStorage({\n      key: 'test',\n      data: 1\n    }).then(function () {\n      expect(uni.getStorageSync('test')).eq(2);\n      uni.removeInterceptor('setStorage');\n      return uni.setStorage({\n        key: 'test',\n        data: 1\n      });\n    }).then(function () {\n      expect(uni.getStorageSync('test')).eq(1);\n      done();\n    });\n  });","file":"unit/core/service/api/interceptor.spec.js","skipped":false,"dir":"tests"},{"name":"同步拦截器 callback","suites":["接口`addInterceptor`"],"updatePoint":{"line":26,"column":20,"index":629},"line":26,"code":"  it('同步拦截器 callback', done => {\n    const setStorageInterceptor = {\n      success(res) {\n        res.data = 2;\n      },\n\n      complete(res) {\n        res.data = 3;\n      }\n\n    };\n    uni.addInterceptor('setStorage', setStorageInterceptor);\n    uni.setStorage({\n      key: 'test',\n      data: 1,\n\n      success(res) {\n        expect(res.data).eq(2);\n      },\n\n      complete(res) {\n        uni.removeInterceptor('setStorage');\n        expect(res.data).eq(3);\n        done();\n      }\n\n    });\n  });","file":"unit/core/service/api/interceptor.spec.js","skipped":false,"dir":"tests"},{"name":"异步拦截器 invoke","suites":["接口`addInterceptor`"],"updatePoint":{"line":54,"column":18,"index":1127},"line":54,"code":"  it('异步拦截器 invoke', done => {\n    const setStorageInterceptor = {\n      invoke(args) {\n        return new Promise(function (resolve, reject) {\n          setTimeout(function () {\n            args.data = 2;\n            resolve(args);\n          }, 200);\n        });\n      }\n\n    };\n    uni.addInterceptor('setStorage', setStorageInterceptor);\n    uni.setStorage({\n      key: 'test',\n      data: 1\n    }).then(function () {\n      expect(uni.getStorageSync('test')).eq(2);\n      uni.removeInterceptor('setStorage');\n      return uni.setStorage({\n        key: 'test',\n        data: 1\n      });\n    }).then(function () {\n      expect(uni.getStorageSync('test')).eq(1);\n      done();\n    });\n  });","file":"unit/core/service/api/interceptor.spec.js","skipped":false,"dir":"tests"},{"name":"异步拦截器 callback","suites":["接口`addInterceptor`"],"updatePoint":{"line":82,"column":20,"index":1820},"line":82,"code":"  it('异步拦截器 callback', done => {\n    const setStorageInterceptor = {\n      success(res) {\n        return new Promise(function (resolve, reject) {\n          setTimeout(function () {\n            res.data = 2;\n            resolve(res);\n          }, 200);\n        });\n      },\n\n      complete(res) {\n        return new Promise(function (resolve, reject) {\n          setTimeout(function () {\n            res.data = 3;\n            resolve(res);\n          }, 1000);\n        });\n      }\n\n    };\n    uni.addInterceptor('setStorage', setStorageInterceptor);\n    uni.setStorage({\n      key: 'test',\n      data: 1,\n\n      success(res) {\n        expect(res.data).eq(2);\n      },\n\n      complete(res) {\n        expect(res.data).eq(3);\n        uni.setStorage({\n          key: 'test',\n          data: 1\n        }).then(function (res) {\n          uni.removeInterceptor('setStorage');\n          expect(res[1].data).eq(2);\n          done();\n        });\n      }\n\n    });\n  });","file":"unit/core/service/api/interceptor.spec.js","skipped":false,"dir":"tests"},{"name":"全局拦截器 promiseInterceptor","suites":["接口`addInterceptor`"],"updatePoint":{"line":126,"column":30,"index":2787},"line":126,"code":"  it('全局拦截器 promiseInterceptor', done => {\n    uni.addInterceptor(uni.interceptors.promiseInterceptor);\n    uni.setStorageSync('test', 1);\n    uni.getStorage({\n      key: 'test'\n    }).then(res => {\n      expect(res.data).eq(1);\n      uni.removeInterceptor(uni.interceptors.promiseInterceptor);\n      uni.getStorage({\n        key: 'test'\n      }).then(res => {\n        expect(res[1].data).eq(1);\n        done();\n      });\n    });\n  });","file":"unit/core/service/api/interceptor.spec.js","skipped":false,"dir":"tests"},{"name":"hoverStopPropagation=false","suites":["组件`view`"],"updatePoint":{"line":46,"column":32,"index":1395},"line":46,"code":"  it('hoverStopPropagation=false', done => {\n    itHoverStopPropagation(false, done);\n  });","file":"unit/core/view/components/view.spec.js","skipped":false,"dir":"tests"},{"name":"hoverStopPropagation=true","suites":["组件`view`"],"updatePoint":{"line":49,"column":31,"index":1486},"line":49,"code":"  it('hoverStopPropagation=true', done => {\n    itHoverStopPropagation(true, done);\n  });","file":"unit/core/view/components/view.spec.js","skipped":false,"dir":"tests"},{"name":"CLI","suites":["env"],"updatePoint":{"line":2,"column":9,"index":34},"line":2,"code":"  it('CLI', () => {\n    process.env.LANG = 'es';\n\n    const {\n      getLocale\n    } = require('../lib/locale');\n\n    expect(getLocale()).toBe('es');\n  });","file":"env.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"HBuilderX","suites":["env"],"updatePoint":{"line":11,"column":15,"index":195},"line":11,"code":"  it('HBuilderX', () => {\n    process.env.UNI_HBUILDERX_LANGID = 'fr';\n\n    const {\n      getLocale\n    } = require('../lib/locale');\n\n    expect(getLocale()).toBe('fr');\n  });","file":"env.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"env.lang","suites":["format"],"updatePoint":{"line":6,"column":14,"index":88},"line":6,"code":"  it('env.lang', () => {\n    expect(format('zh_CN.UTF_8')).toBe('zh_CN');\n  });","file":"lang.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"default","suites":["locales"],"updatePoint":{"line":2,"column":13,"index":42},"line":2,"code":"  it('default', () => {\n    const i18n = require('../lib/index');\n\n    expect(i18n.setLocale('fr')).toBe('en');\n  });","file":"locales.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"fallbacks","suites":["locales"],"updatePoint":{"line":7,"column":15,"index":162},"line":7,"code":"  it('fallbacks', () => {\n    const i18n = require('../lib/index');\n\n    expect(i18n.setLocale('zh')).toBe('zh_CN');\n    expect(i18n.setLocale('zh_SG')).toBe('zh_CN');\n  });","file":"locales.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"mustacheConfig","suites":["translate"],"updatePoint":{"line":2,"column":20,"index":51},"line":2,"code":"  it('mustacheConfig', () => {\n    const i18n = require('../lib/index');\n\n    i18n.configure({\n      staticCatalog: {\n        en: {\n          test: 'test {0}'\n        }\n      }\n    });\n    i18n.setLocale('en');\n    expect(i18n.__('test', {\n      '0': 'test'\n    })).toBe('test test');\n  });","file":"translate.spec.js","skipped":false,"dir":"packages/uni-cli-i18n/__tests__"},{"name":"generate app.json","suites":["shared:cache"],"updatePoint":{"line":9,"column":23,"index":179},"line":9,"code":"  it('generate app.json', () => {\n    const name = 'app';\n    const appJson = {\n      debug: true\n    };\n    updateAppJson(name, appJson);\n    let appJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(appJsonStr).toBe(JSON.stringify(appJson, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n    appJson.resizable = true;\n    updateAppJson(name, appJson);\n    appJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(appJsonStr).toBe(JSON.stringify(appJson, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n    const usingComponents = {\n      'my-component': '/components/component-tag-name'\n    };\n    updateUsingComponents('app', usingComponents);\n    appJsonStr = getChangedJsonFileMap().get(name + '.json');\n    appJson.usingComponents = usingComponents;\n    expect(appJsonStr).toBe(JSON.stringify(appJson, null, 2));\n  });","file":"cache.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"generate page.json","suites":["shared:cache"],"updatePoint":{"line":31,"column":24,"index":1058},"line":31,"code":"  it('generate page.json', () => {\n    const name = 'page/index/index';\n    const pageJson = {\n      navigationBarBackgroundColor: '#ffffff'\n    };\n    updatePageJson(name, pageJson);\n    let pageJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(pageJsonStr).toBe(JSON.stringify(pageJson, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n    pageJson.navigationBarTextStyle = 'black';\n    updatePageJson(name, pageJson);\n    pageJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(pageJsonStr).toBe(JSON.stringify(pageJson, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n    const usingComponents = {\n      'my-component1': '/components/component-tag-name1'\n    };\n    updateUsingComponents(name, usingComponents);\n    pageJsonStr = getChangedJsonFileMap().get(name + '.json');\n    pageJson.usingComponents = usingComponents;\n    expect(pageJsonStr).toBe(JSON.stringify(pageJson, null, 2));\n  });","file":"cache.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"generate component.json","suites":["shared:cache"],"updatePoint":{"line":53,"column":29,"index":2016},"line":53,"code":"  it('generate component.json', () => {\n    const name = 'components/component-tag-name';\n    let usingComponents = {\n      'my-component': '/components/component-tag-name'\n    };\n    updateUsingComponents(name, usingComponents, 'Component');\n    let componentJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(componentJsonStr).toBe(JSON.stringify({\n      usingComponents,\n      component: true\n    }, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n    usingComponents = {};\n    updateUsingComponents(name, usingComponents, 'Component');\n    componentJsonStr = getChangedJsonFileMap().get(name + '.json');\n    expect(componentJsonStr).toBe(JSON.stringify({\n      usingComponents,\n      component: true\n    }, null, 2));\n    expect(0).toBe(getChangedJsonFileMap().size);\n  });","file":"cache.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"merge globalStyle","suites":["shared:merge"],"updatePoint":{"line":4,"column":23,"index":110},"line":4,"code":"  it('merge globalStyle', () => {\n    const a = {\n      globalStyle: {\n        navigationBarTitleText: 'uni-app',\n        'app-plus': {\n          bounce: 'none',\n          titleNView: {\n            background: '#ffffff',\n            buttons: [{\n              text: '分享'\n            }],\n            backButton: {\n              color: '#ffffff',\n              background: '#00FF00'\n            }\n          }\n        }\n      }\n    };\n    const b = {\n      globalStyle: {\n        navigationBarTitleText: 'hello',\n        navigationBarBackgroundColor: '#007AFF',\n        'app-plus': {\n          titleNView: {\n            background: '#000000',\n            buttons: [{\n              text: '收藏'\n            }],\n            backButton: {\n              background: '#00FF00'\n            }\n          }\n        }\n      }\n    };\n    const result = {\n      globalStyle: {\n        navigationBarTitleText: 'hello',\n        navigationBarBackgroundColor: '#007AFF',\n        'app-plus': {\n          bounce: 'none',\n          titleNView: {\n            background: '#000000',\n            buttons: [{\n              text: '收藏'\n            }],\n            backButton: {\n              color: '#ffffff',\n              background: '#00FF00'\n            }\n          }\n        }\n      }\n    };\n    expect(merge([a, b])).toEqual(result);\n  });","file":"pages-json.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"merge pages","suites":["shared:merge"],"updatePoint":{"line":61,"column":17,"index":1419},"line":61,"code":"  it('merge pages', () => {\n    const a = {\n      pages: [{\n        path: 'pages/index/index',\n        style: {\n          navigationBarTitleText: 'uni-app',\n          'app-plus': {\n            bounce: 'none',\n            titleNView: {\n              background: '#ffffff',\n              buttons: [{\n                text: '分享'\n              }],\n              backButton: {\n                color: '#ffffff',\n                background: '#00FF00'\n              }\n            }\n          }\n        }\n      }]\n    };\n    const b = {\n      pages: [{\n        path: 'pages/index/index',\n        style: {\n          navigationBarTitleText: 'uni-app',\n          'app-plus': {\n            titleNView: {\n              background: '#000000',\n              buttons: [{\n                text: '收藏'\n              }],\n              backButton: {\n                background: '#00FF00'\n              }\n            }\n          }\n        }\n      }, {\n        path: 'pages/login/login'\n      }]\n    };\n    const result = {\n      pages: [{\n        path: 'pages/index/index',\n        style: {\n          navigationBarTitleText: 'uni-app',\n          'app-plus': {\n            bounce: 'none',\n            titleNView: {\n              background: '#000000',\n              buttons: [{\n                text: '收藏'\n              }],\n              backButton: {\n                color: '#ffffff',\n                background: '#00FF00'\n              }\n            }\n          }\n        }\n      }, {\n        path: 'pages/login/login'\n      }]\n    };\n    expect(merge([a, b])).toEqual(result);\n  });","file":"pages-json.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"merge subpackages","suites":["shared:merge"],"updatePoint":{"line":129,"column":23,"index":2984},"line":129,"code":"  it('merge subpackages', () => {\n    const a = {\n      subPackages: [{\n        root: 'pages/demo',\n        pages: [{\n          path: 'index/index',\n          style: {\n            navigationBarTitleText: 'uni-app',\n            'app-plus': {\n              bounce: 'none',\n              titleNView: {\n                background: '#ffffff',\n                buttons: [{\n                  text: '分享'\n                }],\n                backButton: {\n                  color: '#ffffff',\n                  background: '#00FF00'\n                }\n              }\n            }\n          }\n        }]\n      }]\n    };\n    const b = {\n      subPackages: [{\n        root: 'pages/demo',\n        pages: [{\n          path: 'index/index',\n          style: {\n            navigationBarTitleText: 'uni-app',\n            'app-plus': {\n              titleNView: {\n                background: '#000000',\n                buttons: [{\n                  text: '收藏'\n                }],\n                backButton: {\n                  background: '#00FF00'\n                }\n              }\n            }\n          }\n        }, {\n          path: 'login/login'\n        }]\n      }, {\n        root: 'pages/test',\n        pages: [{\n          path: 'test/test'\n        }]\n      }]\n    };\n    const result = {\n      subPackages: [{\n        root: 'pages/demo',\n        pages: [{\n          path: 'index/index',\n          style: {\n            navigationBarTitleText: 'uni-app',\n            'app-plus': {\n              bounce: 'none',\n              titleNView: {\n                background: '#000000',\n                buttons: [{\n                  text: '收藏'\n                }],\n                backButton: {\n                  color: '#ffffff',\n                  background: '#00FF00'\n                }\n              }\n            }\n          }\n        }, {\n          path: 'login/login'\n        }]\n      }, {\n        root: 'pages/test',\n        pages: [{\n          path: 'test/test'\n        }]\n      }]\n    };\n    expect(merge([a, b])).toEqual(result);\n  });","file":"pages-json.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"merge multi","suites":["shared:merge"],"updatePoint":{"line":216,"column":17,"index":5000},"line":216,"code":"  it('merge multi', () => {\n    const a = {\n      globalStyle: {\n        backgroundColorTop: '#ffffff',\n        navigationBarTitleText: 'uni-app'\n      }\n    };\n    const b = {\n      globalStyle: {\n        navigationBarTitleText: 'hello1',\n        navigationBarBackgroundColor: '#000000',\n        backgroundColor: '#ffffff'\n      }\n    };\n    const c = {\n      globalStyle: {\n        navigationBarTitleText: 'hello2',\n        navigationBarBackgroundColor: '#007AFF',\n        backgroundTextStyle: 'light'\n      }\n    };\n    const result = {\n      globalStyle: {\n        backgroundColorTop: '#ffffff',\n        navigationBarTitleText: 'hello2',\n        navigationBarBackgroundColor: '#007AFF',\n        backgroundTextStyle: 'light',\n        backgroundColor: '#ffffff'\n      }\n    };\n    expect(merge([a, b, c])).toEqual(result);\n  });","file":"pages-json.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"generate usingComponents","suites":["shared:pages"],"updatePoint":{"line":7,"column":30,"index":169},"line":7,"code":"  it('generate usingComponents', () => {\n    expect(generateUsingComponentsCode()).toBe('');\n    expect(generateUsingComponentsCode({})).toBe('');\n    expect(generateUsingComponentsCode({\n      'van-button': '/wxcomponents/vant/button/index',\n      'van-card': '../../wxcomponents/vant/card/index'\n    })).toBe(';import VanButton from \\'@/wxcomponents/vant/button/index.vue\\';import VanCard from \\'../../wxcomponents/vant/card/index.vue\\';exports.default.components=Object.assign({\\'van-button\\':VanButton,\\'van-card\\':VanCard},exports.default.components||{});');\n  });","file":"pages.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"generate global usingComponents","suites":["shared:pages"],"updatePoint":{"line":15,"column":37,"index":746},"line":15,"code":"  it('generate global usingComponents', () => {\n    expect(generateGlobalUsingComponentsCode()).toBe('');\n    expect(generateGlobalUsingComponentsCode({})).toBe('');\n    expect(generateGlobalUsingComponentsCode({\n      'van-button': '/wxcomponents/vant/button/index',\n      'van-cell': 'wxcomponents/vant/cell/index',\n      'van-cell-group': './wxcomponents/vant/cell-group/index'\n    })).toBe('import VanButton from \\'@/wxcomponents/vant/button/index.vue\\';import VanCell from \\'./wxcomponents/vant/cell/index.vue\\';import VanCellGroup from \\'./wxcomponents/vant/cell-group/index.vue\\';Vue.component(\\'van-button\\',VanButton);Vue.component(\\'van-cell\\',VanCell);Vue.component(\\'van-cell-group\\',VanCellGroup);');\n  });","file":"pages.spec.js","skipped":false,"dir":"packages/uni-cli-shared/__tests__"},{"name":"generate event","suites":["wxml:compiler"],"updatePoint":{"line":10,"column":20,"index":251},"line":10,"code":"  it('generate event', () => {\n    assertCodegen(`<view bindtouchstart=\"startDrag\" catchtouchmove=\"{{ catchMove ? 'noop' : '' }}\"/>`, `<uni-shadow-root><view @touchstart=\"startDrag\" @touchmove.stop.prevent=\"_$self[(catchMove ? 'noop' : '')||'_$noop']($event)\"></view></uni-shadow-root>`);\n    assertCodegen(`<uni-transition bind:click=\"click\" bindtouchstart=\"startDrag\" catchtouchmove=\"{{ catchMove ? 'noop' : '' }}\"/>`, `<uni-shadow-root><uni-transition @click=\"click\" @touchstart.native=\"startDrag\" @touchmove.native.stop.prevent=\"_$self[(catchMove ? 'noop' : '')||'_$noop']($event)\"></uni-transition></uni-shadow-root>`);\n    assertCodegen('<template name=\"toolbar\"><view bindtap=\"emit\"></view></template>', // `<view @click=\"_$self.$parent[(emit)||'_$noop']($event)\"></view>`\n    `<uni-shadow-root><template v-if=\"wxTemplateName === 'toolbar'\"><view @click=\"_$self.$parent[('emit')]($event)\"></view></template></uni-shadow-root>`);\n  });","file":"wxml.spec.js","skipped":false,"dir":"packages/uni-migration/__tests__"},{"name":"generate class","suites":["wxml:compiler"],"updatePoint":{"line":16,"column":20,"index":1193},"line":16,"code":"  it('generate class', () => {\n    assertCodegen(`<view class=\"van-notice-bar__content {{ !scrollable && !wrapable ? 'van-ellipsis' : '' }}\"></view>`, `<uni-shadow-root><view :class=\"'van-notice-bar__content '+(!scrollable && !wrapable ? 'van-ellipsis' : '')\"></view></uni-shadow-root>`);\n  });","file":"wxml.spec.js","skipped":false,"dir":"packages/uni-migration/__tests__"},{"name":"generate v-if","suites":["wxml:compiler"],"updatePoint":{"line":19,"column":19,"index":1487},"line":19,"code":"  it('generate v-if', () => {\n    assertCodegen('<block wx:if=\"{{ !loading }}\" loading loading-text=\"\">{{ item.name }}</block>', `<uni-shadow-root><block v-if=\"(!loading)\" loading loading-text>{{ item.name }}</block></uni-shadow-root>`);\n  });","file":"wxml.spec.js","skipped":false,"dir":"packages/uni-migration/__tests__"},{"name":"generate v-for","suites":["wxml:compiler"],"updatePoint":{"line":22,"column":20,"index":1732},"line":22,"code":"  it('generate v-for', () => {\n    assertCodegen('<view wx:for=\"{{ isSimple(columns) ? [columns] : columns }}\" wx:for-item=\"item1\" wx:key=\"{{ index }}\"/>', `<uni-shadow-root><view v-for=\"(item1,index) in (isSimple(columns) ? [columns] : columns)\" :key=\"item1.index\"></view></uni-shadow-root>`);\n    assertCodegen('<view wx:for=\"{{ columns }}\" wx:for-item=\"item1\" wx:key=\"item1\"/>', `<uni-shadow-root><view v-for=\"(item1,index) in (columns)\" :key=\"item1\"></view></uni-shadow-root>`);\n    assertCodegen('<view wx:for=\"{{ columns }}\" wx:for-item=\"index\" wx:key=\"*this\"/>', `<uni-shadow-root><view v-for=\"(index,___i___) in (columns)\" :key=\"index\"></view></uni-shadow-root>`);\n    assertCodegen('<view wx:for=\"{{ columns }}\" wx:for-item=\"item\" wx:key=\"{{item.value}}\"/>', `<uni-shadow-root><view v-for=\"(item,index) in (columns)\" :key=\"item.value\"></view></uni-shadow-root>`);\n  });","file":"wxml.spec.js","skipped":false,"dir":"packages/uni-migration/__tests__"},{"name":"generate root element","suites":["wxml:compiler"],"updatePoint":{"line":28,"column":27,"index":2618},"line":28,"code":"  it('generate root element', () => {\n    assertCodegen('<view></view><view></view>', `<uni-shadow-root><view></view><view></view></uni-shadow-root>`);\n    assertCodegen(`<view></view>\n<wxs></wxs>`, `<uni-shadow-root><view></view></uni-shadow-root>`);\n    assertCodegen('<slot></slot>', `<uni-shadow-root><slot></slot></uni-shadow-root>`);\n    assertCodegen(`<import src=\"./toolbar.wxml\" /><view></view>\n<wxs></wxs>`, `<uni-shadow-root><view></view></uni-shadow-root>`);\n    assertCodegen('<view><template is=\"toolbar\" data=\"{{ showToolbar, cancelButtonText, title, confirmButtonText }}\"></template></view>', `<uni-shadow-root><view><toolbar v-bind=\"{showToolbar, cancelButtonText, title, confirmButtonText}\" wx-template-name=\"toolbar\"></toolbar></view></uni-shadow-root>`);\n    assertCodegen('<template name=\"toolbar\"><view></view></template>', // `<view></view>`\n    `<uni-shadow-root><template v-if=\"wxTemplateName === 'toolbar'\"><view></view></template></uni-shadow-root>`);\n    assertCodegen('<template name=\"toolbar1\"><view></view></template><template name=\"toolbar2\"><view></view></template>', `<uni-shadow-root><template v-if=\"wxTemplateName === 'toolbar1'\"><view></view></template><template v-if=\"wxTemplateName === 'toolbar2'\"><view></view></template></uni-shadow-root>`);\n  });","file":"wxml.spec.js","skipped":false,"dir":"packages/uni-migration/__tests__"},{"name":"generate block","suites":["codegen"],"updatePoint":{"line":17,"column":20,"index":370},"line":17,"code":"  it('generate block', () => {\n    assertCodegen('<block v-if=\"show\"></block>', `with(this){return (_$s(0,'i',show))?void 0:_e()}`);\n    assertCodegen('<div><block v-for=\"item in items\"><div></div><div></div></block></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return [_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:0,key:1+'-0'+$30})}),_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:1,key:1+'-1'+$30})})]})],2)}`);\n    assertCodegen('<div><block v-for=\"item in items\" :key=\"item.id\"><div></div><div></div></block></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return [_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:0,key:item.id+'_0'})}),_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:1,key:item.id+'_1'})})]})],2)}`);\n    assertCodegen('<div><block v-for=\"(item,index) in list\" :key=\"index\"><block><text>{{item}}</text></block></block></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:list,fill:true})),function(item,index,$20,$30){return [[_c('text',{key:_$s((\"3-\"+$30),'a-key',index+'_0'+'_0')},[_v((_$s((\"3-\"+$30),'t0-0',_s(item))))])]]})],2)}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate directive","suites":["codegen"],"updatePoint":{"line":23,"column":24,"index":1548},"line":23,"code":"  it('generate directive', () => {\n    assertCodegen('<p v-custom1:[arg1].modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{directives:[{name:\"custom1\",rawName:\"v-custom1:[arg1].modifier\",value:(_$s(0,'v-custom1',value1)),expression:\"_$s(0,'v-custom1',value1)\",arg:_$s(0,'v-custom1-arg',arg1),modifiers:{\"modifier\":true}},{name:\"custom2\",rawName:\"v-custom2\"}],attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["codegen"],"updatePoint":{"line":26,"column":30,"index":1953},"line":26,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<div><template v-for=\"item in items\"><div></div><div></div></template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return [_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:0,key:1+'-0'+$30})}),_c('div',{key:_$s(1,'f',{forIndex:$20,keyIndex:1,key:1+'-1'+$30})})]})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\">text</template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items,fill:true})),function(item,$10,$20,$30){return void 0})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\">{{text}}</template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items,fill:true})),function(item,$10,$20,$30){return [_v((_$s((\"1-\"+$30),'t0-0',_s(text))))]})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\"><span></span>{{text}}</template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return [_c('span',{key:_$s(1,'f',{forIndex:$20,keyIndex:0,key:1+'-0'+$30})}),_v((_$s((\"1-\"+$30),'t1-0',_s(text))))]})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\">a {{text1}} b {{text2}}</template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items,fill:true})),function(item,$10,$20,$30){return [_v((_$s((\"1-\"+$30),'t0-0',_s(text1)))+(_$s((\"1-\"+$30),'t0-1',_s(text2))))]})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\"><span v-if=\"item.sub\"></span></template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return [(_$s((\"2-\"+$30),'i',item.sub))?_c('span',{key:_$s(1,'f',{forIndex:$20,keyIndex:0,key:1+'-0'+$30})}):_e()]})],2)}`);\n    assertCodegen('<view><template v-for=\"(item, index) in arr\">{{item}}</template></view>', `with(this){return _c('view',[_l((_$s(1,'f',{forItems:arr,fill:true})),function(item,index,$20,$30){return [_v((_$s((\"1-\"+$30),'t0-0',_s(item))))]})],2)}`);\n    assertCodegen('<view><block v-for=\"(item, index) in arr\" v-bind:key=\"index\">{{item}}</block></view>', `with(this){return _c('view',[_l((_$s(1,'f',{forItems:arr,fill:true})),function(item,index,$20,$30){return [_v((_$s((\"1-\"+$30),'t0-0',_s(item))))]})],2)}`);\n    assertCodegen('<view><block v-for=\"(item,index) in arr\" v-bind:key=\"index\"><block v-if=\"item==3\">{{item}}</block></block></view>', `with(this){return _c('view',[_l((_$s(1,'f',{forItems:arr,fill:true})),function(item,index,$20,$30){return [(_$s((\"2-\"+$30),'i',item==3))?[_v((_$s((\"2-\"+$30),'t0-0',_s(item))))]:_e()]})],2)}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text with multiple statements","suites":["codegen"],"updatePoint":{"line":37,"column":44,"index":4562},"line":37,"code":"  it('generate text with multiple statements', () => {\n    assertCodegen(`<div :id=\"'a'+b\">A{{ d | e | f }}B{{text}}C</div>`, `with(this){return _c('div',{attrs:{\"id\":_$s(0,'a-id','a'+b),\"_i\":0}},[_v((_$s(0,'t0-0',_s(_f(\"f\")(_f(\"e\")(d)))))+(_$s(0,'t0-1',_s(text))))])}`);\n    assertCodegen(`<view>{{obj.param1}}123123{{obj.param1}}123123{{obj.param1}}<text> -{{obj.param3}}---{{obj.param3}} </text>{{obj.param2}}aaaa{{obj.param2}}aaaa{{obj.param2}}</view>`, `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(obj.param1)))+(_$s(0,'t0-1',_s(obj.param1)))+(_$s(0,'t0-2',_s(obj.param1)))),_c('text',[_v((_$s(1,'t0-0',_s(obj.param3)))+(_$s(1,'t0-1',_s(obj.param3))))]),_v((_$s(0,'t2-0',_s(obj.param2)))+(_$s(0,'t2-1',_s(obj.param2)))+(_$s(0,'t2-2',_s(obj.param2))))])}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-slot","suites":["codegen"],"updatePoint":{"line":41,"column":21,"index":5312},"line":41,"code":"  it('generate v-slot', () => {\n    assertCodegen('<view><view v-for=\"(el, ind) in list\" :key=\"ind\"><test-component :list=\"el\"><template #test=\"{ sendList }\"><view v-for=\"(item, index) in sendList\" :key=\"index\"></view></template></test-component></view></view>', `with(this){return _c('view',_l((_$s(1,'f',{forItems:list})),function(el,ind,$20,$30){return _c('view',{key:_$s(1,'f',{forIndex:$20,key:ind})},[_c('test-component',{attrs:{\"list\":el,\"_i\":(\"2-\"+$30)},scopedSlots:_u([{key:\"test\",fn:function({ sendList }, _svm, _si){return _l((_svm._$s((4+'-'+$30+\"-\"+_si),'f',{forItems:sendList})),function(item,index,$21,$31){return _c('view',{key:_svm._$s((4+'-'+$30+\"-\"+_si),'f',{forIndex:$21,key:index}),attrs:{\"_i\":((\"4-\"+_si)+$30+'-'+$31)}})})}}],null,true)})],1)}),0)}`);\n    assertCodegen('<current-user v-slot=\"{ user }\">{{ user.firstName }}</current-user>', `with(this){return _c('current-user',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function({ user }, _svm, _si){return [_v((_svm._$s((\"0-\"+_si),'t0-0',_s(user.firstName))))]}}])})}`);\n    assertCodegen('<current-user>ABCD</current-user>', `with(this){return _c('current-user',{attrs:{\"_i\":0}},[_v(\"\")])}`);\n    assertCodegen(`<current-user>\n      <template v-slot:default=\"{result}\">\n        <view v-for=\"(item,index) in result.list\">{{item.name}}</view>\n      </template>\n    </current-user>`, `with(this){return _c('current-user',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function({result}, _svm, _si){return _l((_svm._$s((\"2-\"+_si),'f',{forItems:result.list})),function(item,index,$20,$30){return _c('view',{key:_svm._$s((\"2-\"+_si),'f',{forIndex:$20,key:(\"2-\"+_si)+'-'+$30}),attrs:{\"_i\":((\"2-\"+_si)+$30)}},[_v((_svm._$s(((\"2-\"+_si)+$30),'t0-0',_s(item.name))))])})}}])})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate keep-alive","suites":["codegen"],"updatePoint":{"line":51,"column":25,"index":7076},"line":51,"code":"  it('generate keep-alive', () => {\n    assertCodegen(`<keep-alive exclude=\"componentWithStatus1\"><component is=\"componentWithStatus\"/></keep-alive>`, `with(this){return _c('keep-alive',{attrs:{\"exclude\":\"componentWithStatus1\",\"_i\":0}},[_c(\"componentWithStatus\",{tag:\"component\",attrs:{\"_i\":1}})],1)}`);\n    assertCodegen(`<keep-alive :exclude=\"componentWithStatus1\"><component :is=\"'componentWithStatus'+index\"/></keep-alive>`, `with(this){return _c('keep-alive',{attrs:{\"exclude\":_$s(0,'a-exclude',componentWithStatus1),\"_i\":0}},[_c(_$s(1,'is','componentWithStatus'+index),{tag:\"component\",attrs:{\"_i\":1}})],1)}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate wxs props","suites":["codegen"],"updatePoint":{"line":55,"column":24,"index":7698},"line":55,"code":"  it('generate wxs props', () => {\n    assertCodegen('<p :change:prop=\"swipe.sizeReady\" :prop=\"pos\" @touchstart=\"swipe.touchstart\" @touchmove=\"swipe.touchmove\" @touchend=\"swipe.touchend\" @change=\"change\"></p>', `with(this){return _c('p',{wxsProps:{\"change:prop\":\"pos\"},attrs:{\"prop\":_$s(0,'change:pos',pos),\"_i\":0},on:{\"change\":change}})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate staticClass and id","suites":["codegen"],"updatePoint":{"line":58,"column":33,"index":8055},"line":58,"code":"  it('generate staticClass and id', () => {\n    assertCodegen('<view id=\"aaa\" class=\"bbbb\"></view>', `with(this){return _c('view',{staticClass:_$s(0,'sc',\"bbbb\"),attrs:{\"id\":\"aaa\",\"_i\":0}})}`);\n    assertCodegen('<custom id=\"id\"></custom>', `with(this){return _c('custom',{attrs:{\"id\":\"id\",\"_i\":0}})}`);\n    assertCodegen('<custom :id=\"id\"></custom>', `with(this){return _c('custom',{attrs:{\"id\":_$s(0,'a-id',id),\"_i\":0}})}`);\n  }); // TODO 后续优化 dataset","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dataset","suites":["codegen"],"updatePoint":{"line":70,"column":22,"index":8705},"line":70,"code":"  it('generate dataset', () => {\n    assertCodegen('<view data-a=\"1\" :data-b=\"b\"></view>', `with(this){return _c('view',{attrs:{\"data-b\":_$s(0,'a-data-b',b),\"_i\":0}})}`);\n    assertCodegen('<custom data-a=\"1\" :data-b=\"b\"></custom>', `with(this){return _c('custom',{attrs:{\"data-a\":\"1\",\"data-b\":_$s(0,'a-data-b',b),\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if directive","suites":["codegen"],"updatePoint":{"line":74,"column":29,"index":9046},"line":74,"code":"  it('generate v-if directive', () => {\n    assertCodegen('<text v-if=\"a\">1</text><text v-else-if=\"b\">2</text><text v-else-if=\"c\">3</text><text v-else>d</text>', `with(this){return (_$s(0,'i',a))?_c('text'):(_$s(1,'e',b))?_c('text'):(_$s(2,'e',c))?_c('text'):_c('text')}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dynamic slot","suites":["codegen"],"updatePoint":{"line":77,"column":27,"index":9324},"line":77,"code":"  it('generate dynamic slot', () => {\n    assertCodegen('<base-layout><template v-slot:[dynamicSlotName]></template></base-layout>', `with(this){return _c('base-layout',{attrs:{\"_i\":0},scopedSlots:_u([{key:_$s(1,'st',dynamicSlotName),fn:function(_empty_, _svm, _si){return undefined}}],null,true)})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["codegen"],"updatePoint":{"line":80,"column":18,"index":9624},"line":80,"code":"  it('generate ref', () => {\n    assertCodegen('<p :ref=\"component1\"></p>', `with(this){return _c('p',{ref:_$s(0,'ref',component1)})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate image","suites":["codegen"],"updatePoint":{"line":83,"column":20,"index":9769},"line":83,"code":"  it('generate image', () => {\n    assertCodegen('<image :src=\"src\"/>', `with(this){return _c('image',{attrs:{\"src\":_$s(0,'a-src',src),\"_i\":0}})}`);\n    assertCodegen('<image src=\"/static/logo.png\"/>', `with(this){return _c('image',{attrs:{\"_i\":0}})}`);\n    assertCodegen('<image src=\"../static/logo.png\"/>', `with(this){return _c('image',{attrs:{\"src\":_$s(0,'a-src',require(\"../static/logo.png\")),\"_i\":0}})}`);\n    assertCodegen('<image src=\"@/static/logo.png\"/>', `with(this){return _c('image',{attrs:{\"_i\":0}})}`);\n    assertCodegen('<image src=\"~@/static/logo.png\"/>', `with(this){return _c('image',{attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text trim","suites":["codegen"],"updatePoint":{"line":90,"column":24,"index":10404},"line":90,"code":"  it('generate text trim', () => {\n    assertCodegen('<view>text</view>', `with(this){return _c('view')}`);\n    assertCodegen('<view> text </view>', `with(this){return _c('view')}`);\n    assertCodegen('<text>{{line_one_cn+\\' \\'}}</text>', `with(this){return _c('text',[_v((_$s(0,'t0-0',_s(line_one_cn+' '))))])}`);\n    assertCodegen('<text>{{\" \"+line_one_cn}}</text>', `with(this){return _c('text',[_v((_$s(0,'t0-0',_s(\" \"+line_one_cn))))])}`);\n    assertCodegen('<text>\\nN: {{title}}\\n′</text>', `with(this){return _c('text',[_v((_$s(0,'t0-0',_s(title))))])}`);\n    assertCodegen('<text>我是第一行\\n我的第二行</text>', `with(this){return _c('text')}`);\n    assertCodegen('<text>我是第一行\\n我的第二行1{{title}}</text>', `with(this){return _c('text',[_v((_$s(0,'t0-0',_s(title))))])}`);\n    assertCodegen(`<text>我是第一行\n  我的第二行2{{title}}</text>`, `with(this){return _c('text',[_v((_$s(0,'t0-0',_s(title))))])}`);\n    assertCodegen('<view> text text </view>', `with(this){return _c('view')}`);\n    assertCodegen('<view>text {{text}} text</view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text))))])}`);\n    assertCodegen('<view> text {{text}} 文本 </view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text))))])}`);\n    assertCodegen('<view>{{text}} text  text </view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text))))])}`);\n    assertCodegen('<view>  {{text}} text  text </view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text))))])}`);\n    assertCodegen('<view>{{text}} text  text {{text}}</view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text)))+(_$s(0,'t0-1',_s(text))))])}`);\n    assertCodegen('<view>  {{text}} text  text {{text}}  </view>', `with(this){return _c('view',[_v((_$s(0,'t0-0',_s(text)))+(_$s(0,'t0-1',_s(text))))])}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate bool attr","suites":["codegen"],"updatePoint":{"line":108,"column":24,"index":12169},"line":108,"code":"  it('generate bool attr', () => {\n    assertCodegen('<video controls/>', `with(this){return _c('video',{attrs:{\"_i\":0}})}`);\n    assertCodegen('<video controls=\"\"/>', `with(this){return _c('video',{})}`);\n  });","file":"compiler-app-plus-extra.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate directive","suites":["codegen"],"updatePoint":{"line":17,"column":24,"index":371},"line":17,"code":"  it('generate directive', () => {\n    assertCodegen('<p v-custom1:[arg1].modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["codegen"],"updatePoint":{"line":20,"column":30,"index":540},"line":20,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<div><template v-for=\"item in items\"><div></div><div></div></template></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_l((_$g(1,'f')),function(item,$10,$20,$30){return [_c('div',{key:item['k0'],attrs:{\"_i\":(\"2-\"+$30)}}),_c('div',{key:item['k1'],attrs:{\"_i\":(\"3-\"+$30)}})]})],2)}`);\n    assertCodegen('<div><template v-for=\"item in items\"><span v-if=\"item.sub\"></span></template></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_l((_$g(1,'f')),function(item,$10,$20,$30){return [(_$g((\"2-\"+$30),'i'))?_c('span',{key:item['k0'],attrs:{\"_i\":(\"2-\"+$30)}}):_e()]})],2)}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple statements","suites":["codegen"],"updatePoint":{"line":24,"column":46,"index":1203},"line":24,"code":"  it('generate events with multiple statements', () => {\n    assertCodegen('<div>A{{ d | e | f }}B{{text}}C</div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_v(\"A\"+(_$g(0,'t0-0'))+\"B\"+(_$g(0,'t0-1'))+\"C\")])}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot fallback content","suites":["codegen"],"updatePoint":{"line":27,"column":36,"index":1415},"line":27,"code":"  it('generate slot fallback content', () => {\n    assertCodegen('<div><slot><div>{{hi}}</div></slot></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_t(\"default\",[_c('div',{attrs:{\"_i\":2}},[_v((_$g(2,'t0-0')))])],{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text with multiple statements","suites":["codegen"],"updatePoint":{"line":30,"column":44,"index":1667},"line":30,"code":"  it('generate text with multiple statements', () => {\n    assertCodegen(`<view>{{obj.param1}}123123{{obj.param1}}123123{{obj.param1}}<text> -{{obj.param3}}---{{obj.param3}} </text>{{obj.param2}}aaaa{{obj.param2}}aaaa{{obj.param2}}</view>`, `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0'))+\"123123\"+(_$g(0,'t0-1'))+\"123123\"+(_$g(0,'t0-2'))),_c('v-uni-text',{attrs:{\"_i\":1}},[_v(\"-\"+(_$g(1,'t0-0'))+\"---\"+(_$g(1,'t0-1')))]),_v((_$g(0,'t2-0'))+\"aaaa\"+(_$g(0,'t2-1'))+\"aaaa\"+(_$g(0,'t2-2')))],1)}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-slot","suites":["codegen"],"updatePoint":{"line":33,"column":21,"index":2170},"line":33,"code":"  it('generate v-slot', () => {\n    assertCodegen('<current-user v-slot=\"{ user }\">{{ user.firstName }}</current-user>', `with(this){return _c('current-user',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function({ user }, _svm, _si){return [_v((_svm._$g((\"0-\"+_si),'t0-0')))]}}])})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate keep-alive","suites":["codegen"],"updatePoint":{"line":36,"column":25,"index":2471},"line":36,"code":"  it('generate keep-alive', () => {\n    assertCodegen(`<keep-alive exclude=\"componentWithStatus1\"><component is=\"componentWithStatus\"/></keep-alive>`, `with(this){return _c('keep-alive',{attrs:{\"exclude\":\"componentWithStatus1\",\"_i\":0}},[_c(\"componentWithStatus\",{tag:\"component\",attrs:{\"_i\":1}})],1)}`);\n    assertCodegen(`<keep-alive :exclude=\"componentWithStatus1\"><component :is=\"'componentWithStatus'+index\"/></keep-alive>`, `with(this){return _c('keep-alive',{attrs:{\"exclude\":_$g(0,'a-exclude'),\"_i\":0}},[_c(_$g(1,'is'),{tag:\"component\",attrs:{\"_i\":1}})],1)}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate wxs props","suites":["codegen"],"updatePoint":{"line":40,"column":24,"index":3044},"line":40,"code":"  it('generate wxs props', () => {\n    assertCodegen('<p :change:prop=\"swipe.sizeReady\" :prop=\"pos\" @touchstart=\"swipe.touchstart\" @touchmove=\"swipe.touchmove\" @touchend=\"swipe.touchend\" @change=\"change\"></p>', `with(this){return _c('p',{wxsProps:{\"change:prop\":\"pos\"},attrs:{\"change:prop\":swipe.sizeReady,\"prop\":_$gc(0,'change:pos'),\"_i\":0},on:{\"touchstart\":function($event){$event = $handleWxsEvent($event);swipe.touchstart($event, $getComponentDescriptor())},\"touchmove\":function($event){$event = $handleWxsEvent($event);swipe.touchmove($event, $getComponentDescriptor())},\"touchend\":function($event){$event = $handleWxsEvent($event);swipe.touchend($event, $getComponentDescriptor())},\"change\":function($event){return $handleViewEvent($event)}}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate staticClass and id","suites":["codegen"],"updatePoint":{"line":43,"column":33,"index":3813},"line":43,"code":"  it('generate staticClass and id', () => {\n    assertCodegen('<custom id=\"id\"></custom>', `with(this){return _c('custom',{attrs:{\"id\":\"id\",\"_i\":0}})}`);\n    assertCodegen('<custom :id=\"id\"></custom>', `with(this){return _c('custom',{attrs:{\"id\":_$g(0,'a-id'),\"_i\":0}})}`);\n  }); // TODO 后续优化dataset","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dataset","suites":["codegen"],"updatePoint":{"line":54,"column":22,"index":4284},"line":54,"code":"  it('generate dataset', () => {\n    assertCodegen('<view data-a=\"1\" :data-b=\"b\"></view>', `with(this){return _c('v-uni-view',{attrs:{\"data-a\":\"1\",\"data-b\":_$g(0,'a-data-b'),\"_i\":0}})}`);\n    assertCodegen('<custom data-a=\"1\" :data-b=\"b\"></custom>', `with(this){return _c('custom',{attrs:{\"data-a\":\"1\",\"data-b\":_$g(0,'a-data-b'),\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if directive","suites":["codegen"],"updatePoint":{"line":58,"column":29,"index":4640},"line":58,"code":"  it('generate v-if directive', () => {\n    assertCodegen('<text v-if=\"a\">1</text><text v-else-if=\"b\">2</text><text v-else-if=\"c\">3</text><text v-else>d</text>', `with(this){return (_$g(0,'i'))?_c('v-uni-text',{attrs:{\"_i\":0}},[_v(\"1\")]):(_$g(1,'e'))?_c('v-uni-text',{attrs:{\"_i\":1}},[_v(\"2\")]):(_$g(2,'e'))?_c('v-uni-text',{attrs:{\"_i\":2}},[_v(\"3\")]):_c('v-uni-text',{attrs:{\"_i\":3}},[_v(\"d\")])}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dynamic slot","suites":["codegen"],"updatePoint":{"line":61,"column":27,"index":5044},"line":61,"code":"  it('generate dynamic slot', () => {\n    assertCodegen('<base-layout><template v-slot:[dynamicSlotName]></template></base-layout>', `with(this){return _c('base-layout',{attrs:{\"_i\":0},scopedSlots:_u([{key:_$g(1,'st'),fn:function(_empty_, _svm, _si){return undefined}}],null,true)})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["codegen"],"updatePoint":{"line":64,"column":18,"index":5328},"line":64,"code":"  it('generate ref', () => {\n    assertCodegen('<p :ref=\"component1\"></p>', `with(this){return _c('p',{ref:_$g(0,'ref'),attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate image","suites":["codegen"],"updatePoint":{"line":67,"column":20,"index":5477},"line":67,"code":"  it('generate image', () => {\n    assertCodegen('<image :src=\"src\"/>', `with(this){return _c('v-uni-image',{attrs:{\"src\":_$g(0,'a-src'),\"_i\":0}})}`);\n    assertCodegen('<image src=\"/static/logo.png\"/>', `with(this){return _c('v-uni-image',{attrs:{\"src\":\"/static/logo.png\",\"_i\":0}})}`);\n    assertCodegen('<image src=\"../static/logo.png\"/>', `with(this){return _c('v-uni-image',{attrs:{\"src\":_$g(0,'a-src'),\"_i\":0}})}`);\n    assertCodegen('<image src=\"@/static/logo.png\"/>', `with(this){return _c('v-uni-image',{attrs:{\"src\":\"/static/logo.png\",\"_i\":0}})}`);\n    assertCodegen('<image src=\"~@/static/logo.png\"/>', `with(this){return _c('v-uni-image',{attrs:{\"src\":\"/static/logo.png\",\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text trim","suites":["codegen"],"updatePoint":{"line":74,"column":24,"index":6183},"line":74,"code":"  it('generate text trim', () => {\n    assertCodegen('<view>text</view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v(\"text\")])}`);\n    assertCodegen('<view> text </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v(\"text\")])}`);\n    assertCodegen('<text>{{line_one_cn+\\' \\'}}</text>', `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0')))])}`);\n    assertCodegen('<text>{{\" \"+line_one_cn}}</text>', `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0')))])}`);\n    assertCodegen('<text>\\nN: {{title}}\\n′</text>', `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v(\"N: \"+(_$g(0,'t0-0'))+\"\\\\n′\")])}`);\n    assertCodegen('<text>我是第一行\\n我的第二行</text>', `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v(\"我是第一行\\\\n我的第二行\")])}`);\n    assertCodegen('<text>我是第一行\\n我的第二行1{{title}}</text>', `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v(\"我是第一行\\\\n我的第二行1\"+(_$g(0,'t0-0')))])}`);\n    assertCodegen(`<text>我是第一行\n  我的第二行2{{title}}</text>`, `with(this){return _c('v-uni-text',{attrs:{\"_i\":0}},[_v(\"我是第一行\\\\n  我的第二行2\"+(_$g(0,'t0-0')))])}`);\n    assertCodegen('<view> text text </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v(\"text text\")])}`);\n    assertCodegen('<view>text {{text}} text</view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v(\"text \"+(_$g(0,'t0-0'))+\" text\")])}`);\n    assertCodegen('<view> text {{text}} 文本 </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v(\"text \"+(_$g(0,'t0-0'))+\" 文本\")])}`);\n    assertCodegen('<view>{{text}} text  text </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0'))+\" text  text\")])}`);\n    assertCodegen('<view>  {{text}} text  text </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0'))+\" text  text\")])}`);\n    assertCodegen('<view>{{text}} text  text {{text}}</view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0'))+\" text  text \"+(_$g(0,'t0-1')))])}`);\n    assertCodegen('<view>  {{text}} text  text {{text}}  </view>', `with(this){return _c('v-uni-view',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0'))+\" text  text \"+(_$g(0,'t0-1')))])}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate bool attr","suites":["codegen"],"updatePoint":{"line":92,"column":24,"index":8354},"line":92,"code":"  it('generate bool attr', () => {\n    assertCodegen('<video controls/>', `with(this){return _c('v-uni-video',{attrs:{\"controls\":true,\"_i\":0}})}`);\n    assertCodegen('<video controls=\"\"/>', `with(this){return _c('v-uni-video',{attrs:{\"controls\":\"\",\"_i\":0}})}`);\n  });","file":"compiler-app-plus-extra.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate directive","suites":["codegen"],"updatePoint":{"line":16,"column":24,"index":344},"line":16,"code":"  it('generate directive', () => {\n    assertCodegen('<p v-custom1:arg1.modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{directives:[{name:\"custom1\",rawName:\"v-custom1:arg1.modifier\",value:(_$s(0,'v-custom1',value1)),expression:\"_$s(0,'v-custom1',value1)\",arg:\"arg1\",modifiers:{\"modifier\":true}},{name:\"custom2\",rawName:\"v-custom2\"}],attrs:{\"_i\":0}})}`); // extra\n\n    assertCodegen('<p v-custom1:[arg1].modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{directives:[{name:\"custom1\",rawName:\"v-custom1:[arg1].modifier\",value:(_$s(0,'v-custom1',value1)),expression:\"_$s(0,'v-custom1',value1)\",arg:_$s(0,'v-custom1-arg',arg1),modifiers:{\"modifier\":true}},{name:\"custom2\",rawName:\"v-custom2\"}],attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters","suites":["codegen"],"updatePoint":{"line":21,"column":22,"index":1084},"line":21,"code":"  it('generate filters', () => {\n    assertCodegen('<div :id=\"a | b | c\">{{ d | e | f }}</div>', `with(this){return _c('div',{attrs:{\"id\":_$s(0,'a-id',_f(\"c\")(_f(\"b\")(a))),\"_i\":0}},[_v((_$s(0,'t0-0',_s(_f(\"f\")(_f(\"e\")(d))))))])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters with no arguments","suites":["codegen"],"updatePoint":{"line":24,"column":40,"index":1340},"line":24,"code":"  it('generate filters with no arguments', () => {\n    assertCodegen('<div>{{ d | e() }}</div>', `with(this){return _c('div',[_v((_$s(0,'t0-0',_s(_f(\"e\")(d)))))])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["codegen"],"updatePoint":{"line":27,"column":30,"index":1503},"line":27,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<div><li v-for=\"item in items\" :key=\"item.uid\"></li></div>', `with(this){return _c('div',_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return _c('li',{key:_$s(1,'f',{forIndex:$20,key:item.uid})})}),0)}`); // iterator syntax\n\n    assertCodegen('<div><li v-for=\"(item, i) in items\"></li></div>', `with(this){return _c('div',_l((_$s(1,'f',{forItems:items})),function(item,i,$20,$30){return _c('li',{key:_$s(1,'f',{forIndex:$20,key:1+'-'+$30})})}),0)}`);\n    assertCodegen('<div><li v-for=\"(item, key, index) in items\"></li></div>', `with(this){return _c('div',_l((_$s(1,'f',{forItems:items})),function(item,key,index,$30){return _c('li',{key:_$s(1,'f',{forIndex:index,key:1+'-'+$30})})}),0)}`); // destructuring\n\n    assertCodegen('<div><li v-for=\"{ a, b } in items\"></li></div>', `with(this){return _c('div',_l((_$s(1,'f',{forItems:items})),function({ a, b },$10,$20,$30){return _c('li',{key:_$s(1,'f',{forIndex:$20,key:1+'-'+$30})})}),0)}`);\n    assertCodegen('<div><li v-for=\"({ a, b }, key, index) in items\"></li></div>', `with(this){return _c('div',_l((_$s(1,'f',{forItems:items})),function({ a, b },key,index,$30){return _c('li',{key:_$s(1,'f',{forIndex:index,key:1+'-'+$30})})}),0)}`); // v-for with extra element\n\n    assertCodegen('<div><p></p><li v-for=\"item in items\"></li></div>', `with(this){return _c('div',[_c('p'),_l((_$s(2,'f',{forItems:items})),function(item,$10,$20,$30){return _c('li',{key:_$s(2,'f',{forIndex:$20,key:2+'-'+$30})})})],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if directive","suites":["codegen"],"updatePoint":{"line":38,"column":29,"index":3041},"line":38,"code":"  it('generate v-if directive', () => {\n    assertCodegen('<p v-if=\"show\">hello</p>', `with(this){return (_$s(0,'i',show))?_c('p'):_e()}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else directive","suites":["codegen"],"updatePoint":{"line":41,"column":31,"index":3189},"line":41,"code":"  it('generate v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else>world</p></div>', `with(this){return _c('div',[(_$s(1,'i',show))?_c('p'):_c('p')])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if directive","suites":["codegen"],"updatePoint":{"line":44,"column":34,"index":3385},"line":44,"code":"  it('generate v-else-if directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p></div>', `with(this){return _c('div',[(_$s(1,'i',show))?_c('p'):(_$s(2,'e',hide))?_c('p'):_e()])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if with v-else directive","suites":["codegen"],"updatePoint":{"line":47,"column":46,"index":3626},"line":47,"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else>bye</p></div>', `with(this){return _c('div',[(_$s(1,'i',show))?_c('p'):(_$s(2,'e',hide))?_c('p'):_c('p')])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multi v-else-if with v-else directive","suites":["codegen"],"updatePoint":{"line":50,"column":52,"index":3893},"line":50,"code":"  it('generate multi v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else-if=\"3\">elseif</p><p v-else>bye</p></div>', `with(this){return _c('div',[(_$s(1,'i',show))?_c('p'):(_$s(2,'e',hide))?_c('p'):(3)?_c('p'):_c('p')])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["codegen"],"updatePoint":{"line":53,"column":18,"index":4165},"line":53,"code":"  it('generate ref', () => {\n    assertCodegen('<p ref=\"component1\"></p>', `with(this){return _c('p',{ref:\"component1\"})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref on v-for","suites":["codegen"],"updatePoint":{"line":56,"column":27,"index":4305},"line":56,"code":"  it('generate ref on v-for', () => {\n    assertCodegen('<ul><li v-for=\"item in items\" ref=\"component1\"></li></ul>', `with(this){return _c('ul',_l((_$s(1,'f',{forItems:items})),function(item,$10,$20,$30){return _c('li',{key:_$s(1,'f',{forIndex:$20,key:1+'-'+$30}),ref:\"component1\",refInFor:true})}),0)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind directive","suites":["codegen"],"updatePoint":{"line":59,"column":31,"index":4621},"line":59,"code":"  it('generate v-bind directive', () => {\n    assertCodegen('<p v-bind=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$s(0,'v-bind',test),false))}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind with prop directive","suites":["codegen"],"updatePoint":{"line":62,"column":41,"index":4805},"line":62,"code":"  it('generate v-bind with prop directive', () => {\n    assertCodegen('<p v-bind.prop=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$s(0,'v-bind',test),true))}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind directive with sync modifier","suites":["codegen"],"updatePoint":{"line":65,"column":50,"index":5002},"line":65,"code":"  it('generate v-bind directive with sync modifier', () => {\n    assertCodegen('<p v-bind.sync=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$s(0,'v-bind',test),false,true))}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-model directive","suites":["codegen"],"updatePoint":{"line":68,"column":32,"index":5187},"line":68,"code":"  it('generate v-model directive', () => {\n    assertCodegen('<input v-model=\"test\">', `with(this){return _c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(test),expression:\"test\"}],attrs:{\"_i\":0},domProps:{\"value\":_$s(0,'v-model',(test))},on:{\"input\":function($event){if($event.target.composing)return;test=$event.target.value}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive","suites":["codegen"],"updatePoint":{"line":71,"column":42,"index":5552},"line":71,"code":"  it('generate multiline v-model directive', () => {\n    assertCodegen('<input v-model=\"\\n test \\n\">', `with(this){return _c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(\\n test \\n),expression:\"\\\\n test \\\\n\"}],attrs:{\"_i\":0},domProps:{\"value\":_$s(0,'v-model',(\\n test \\n))},on:{\"input\":function($event){if($event.target.composing)return;\\n test \\n=$event.target.value}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive on custom component","suites":["codegen"],"updatePoint":{"line":74,"column":62,"index":5969},"line":74,"code":"  it('generate multiline v-model directive on custom component', () => {\n    assertCodegen('<my-component v-model=\"\\n test \\n\" />', `with(this){return _c('my-component',{attrs:{\"_i\":0},model:{value:_$s(0,'v-model',(\\n test \\n)),callback:function ($$v) {\\n test \\n=$$v},expression:\"\\\\n test \\\\n\"}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate template tag","suites":["codegen"],"updatePoint":{"line":77,"column":27,"index":6242},"line":77,"code":"  it('generate template tag', () => {\n    assertCodegen('<div><template><p>{{hello}}</p></template></div>', `with(this){return _c('div',[[_c('p',[_v((_$s(2,'t0-0',_s(hello))))])]],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate single slot","suites":["codegen"],"updatePoint":{"line":80,"column":26,"index":6434},"line":80,"code":"  it('generate single slot', () => {\n    assertCodegen('<div><slot></slot></div>', `with(this){return _c('div',[_t(\"default\",null,{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named slot","suites":["codegen"],"updatePoint":{"line":83,"column":25,"index":6587},"line":83,"code":"  it('generate named slot', () => {\n    assertCodegen('<div><slot name=\"one\"></slot></div>', `with(this){return _c('div',[_t(\"one\",null,{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot fallback content","suites":["codegen"],"updatePoint":{"line":86,"column":36,"index":6758},"line":86,"code":"  it('generate slot fallback content', () => {\n    assertCodegen('<div><slot><div>hi</div></slot></div>', `with(this){return _c('div',[_t(\"default\",[_c('div')],{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot target","suites":["codegen"],"updatePoint":{"line":89,"column":26,"index":6932},"line":89,"code":"  it('generate slot target', () => {\n    assertCodegen('<p slot=\"one\">hello world</p>', `with(this){return _c('p',{slot:\"one\"})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot with v-for","suites":["codegen"],"updatePoint":{"line":92,"column":30,"index":7074},"line":92,"code":"  it('generate slot with v-for', () => {\n    assertCodegen('<div><slot v-for=\"item in list\"></slot></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:list})),function(item,$10,$20,$30){return _t(\"default\",null,{\"_i\":(\"1-\"+$30),\"key\":_$s(1,'f',{forIndex:$20,key:1+'-'+$30})})})],2)}`);\n    assertCodegen('<div><template v-for=\"item in list\"><slot></slot></template></div>', `with(this){return _c('div',[_l((_$s(1,'f',{forItems:list})),function(item,$10,$20,$30){return [_t(\"default\",null,{\"_i\":(\"2-\"+$30),\"key\":_$s(1,'f',{forIndex:$20,keyIndex:0,key:1+'-0'+$30})})]})],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["codegen"],"updatePoint":{"line":96,"column":26,"index":7662},"line":96,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<foo><template slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return [_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]}}])})}`);\n    assertCodegen('<foo><div slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return _c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))])}}])})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named scoped slot","suites":["codegen"],"updatePoint":{"line":100,"column":32,"index":8225},"line":100,"code":"  it('generate named scoped slot', () => {\n    assertCodegen('<foo><template slot=\"foo\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return [_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]}}])})}`);\n    assertCodegen('<foo><div slot=\"foo\" slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return _c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))])}}])})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dynamic scoped slot","suites":["codegen"],"updatePoint":{"line":104,"column":34,"index":8804},"line":104,"code":"  it('generate dynamic scoped slot', () => {\n    assertCodegen('<foo><template :slot=\"foo\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:_$s(1,'st',foo),fn:function(bar, _svm, _si){return [_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]}}],null,true)})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with multiline v-if","suites":["codegen"],"updatePoint":{"line":107,"column":46,"index":9139},"line":107,"code":"  it('generate scoped slot with multiline v-if', () => {\n    assertCodegen('<foo><template v-if=\"\\nshow\\n\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return (_svm._$s((\"1-\"+_si),'i',\\nshow\\n))?[_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]:undefined}}],null,true)})}`);\n    assertCodegen('<foo><div v-if=\"\\nshow\\n\" slot=\"foo\" slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return (_svm._$s((\"1-\"+_si),'i',\\nshow\\n))?_c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]):_e()}}],null,true)})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with new slot syntax","suites":["codegen"],"updatePoint":{"line":111,"column":47,"index":9863},"line":111,"code":"  it('generate scoped slot with new slot syntax', () => {\n    assertCodegen('<foo><template v-if=\"show\" #default=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([(_$s(1,'i',show))?{key:\"default\",fn:function(bar, _svm, _si){return [_v((_svm._$s((\"1-\"+_si),'t0-0',_s(bar))))]}}:null],null,true)})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["codegen"],"updatePoint":{"line":114,"column":28,"index":10195},"line":114,"code":"  it('generate class binding', () => {\n    // static\n    assertCodegen('<p class=\"class1\">hello world</p>', `with(this){return _c('p',{staticClass:_$s(0,'sc',\"class1\"),attrs:{\"_i\":0}})}`); // dynamic\n\n    assertCodegen('<p :class=\"class1\">hello world</p>', `with(this){return _c('p',{class:_$s(0,'c',class1),attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate style binding","suites":["codegen"],"updatePoint":{"line":120,"column":28,"index":10530},"line":120,"code":"  it('generate style binding', () => {\n    assertCodegen('<p :style=\"error\">hello world</p>', `with(this){return _c('p',{style:(_$s(0,'s',error)),attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["codegen"],"updatePoint":{"line":123,"column":31,"index":10706},"line":123,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<p v-show=\"shown\">hello world</p>', `with(this){return _c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(_$s(0,'v-show',shown)),expression:\"_$s(0,'v-show',shown)\"}],attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate DOM props with v-bind directive","suites":["codegen"],"updatePoint":{"line":126,"column":46,"index":10981},"line":126,"code":"  it('generate DOM props with v-bind directive', () => {\n    // input + value\n    assertCodegen('<input :value=\"msg\">', `with(this){return _c('input',{attrs:{\"value\":_$s(0,'a-value',msg),\"_i\":0}})}`); // non input\n\n    assertCodegen('<p :value=\"msg\"/>', `with(this){return _c('p',{attrs:{\"value\":_$s(0,'a-value',msg),\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate attrs with v-bind directive","suites":["codegen"],"updatePoint":{"line":132,"column":42,"index":11314},"line":132,"code":"  it('generate attrs with v-bind directive', () => {\n    assertCodegen('<input :name=\"field1\">', `with(this){return _c('input',{attrs:{\"name\":_$s(0,'a-name',field1),\"_i\":0}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static attrs","suites":["codegen"],"updatePoint":{"line":135,"column":27,"index":11484},"line":135,"code":"  it('generate static attrs', () => {\n    assertCodegen('<input name=\"field1\">', `with(this){return _c('input',{})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with v-on directive","suites":["codegen"],"updatePoint":{"line":138,"column":41,"index":11623},"line":138,"code":"  it('generate events with v-on directive', () => {\n    assertCodegen('<input @input=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":onInput}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with method call","suites":["codegen"],"updatePoint":{"line":141,"column":38,"index":11797},"line":141,"code":"  it('generate events with method call', () => {\n    assertCodegen('<input @input=\"onInput($event);\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return onInput($event);}}})}`); // empty arguments\n\n    assertCodegen('<input @input=\"onInput();\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return onInput();}}})}`); // without semicolon\n\n    assertCodegen('<input @input=\"onInput($event)\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return onInput($event)}}})}`); // multiple args\n\n    assertCodegen('<input @input=\"onInput($event, \\'abc\\', 5);\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return onInput($event, 'abc', 5);}}})}`); // expression in args\n\n    assertCodegen('<input @input=\"onInput($event, 2+2);\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return onInput($event, 2+2);}}})}`); // tricky symbols in args\n\n    assertCodegen(`<input @input=\"onInput(');[\\\\'());');\">`, `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){onInput(');[\\\\'());');}}})}`); // function name including a `function` part (#9920)\n    // 2.6.10 暂未修复此 bug\n    // assertCodegen(\n    //   '<input @input=\"functionName()\">',\n    //   `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){return functionName()}}})}`\n    // )\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple statements","suites":["codegen"],"updatePoint":{"line":159,"column":46,"index":13229},"line":159,"code":"  it('generate events with multiple statements', () => {\n    // normal function\n    assertCodegen('<input @input=\"onInput1();onInput2()\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){onInput1();onInput2()}}})}`); // function with multiple args\n\n    assertCodegen('<input @input=\"onInput1($event, \\'text\\');onInput2(\\'text2\\', $event)\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){onInput1($event, 'text');onInput2('text2', $event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with keycode","suites":["codegen"],"updatePoint":{"line":165,"column":34,"index":13727},"line":165,"code":"  it('generate events with keycode', () => {\n    assertCodegen('<input @input.enter=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return onInput($event)}}})}`); // multiple keycodes (delete)\n\n    assertCodegen('<input @input.delete=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"delete\",[8,46],$event.key,[\"Backspace\",\"Delete\",\"Del\"]))return null;return onInput($event)}}})}`); // multiple keycodes (esc)\n\n    assertCodegen('<input @input.esc=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"esc\",27,$event.key,[\"Esc\",\"Escape\"]))return null;return onInput($event)}}})}`); // multiple keycodes (space)\n\n    assertCodegen('<input @input.space=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"space\",32,$event.key,[\" \",\"Spacebar\"]))return null;return onInput($event)}}})}`); // multiple keycodes (chained)\n\n    assertCodegen('<input @keydown.enter.delete=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"enter\",13,$event.key,\"Enter\")&&_k($event.keyCode,\"delete\",[8,46],$event.key,[\"Backspace\",\"Delete\",\"Del\"]))return null;return onInput($event)}}})}`); // number keycode\n\n    assertCodegen('<input @input.13=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&$event.keyCode!==13)return null;return onInput($event)}}})}`); // custom keycode\n\n    assertCodegen('<input @input.custom=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"custom\",undefined,$event.key,undefined))return null;return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers","suites":["codegen"],"updatePoint":{"line":180,"column":44,"index":15811},"line":180,"code":"  it('generate events with generic modifiers', () => {\n    assertCodegen('<input @input.stop=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){$event.stopPropagation();return onInput($event)}}})}`);\n    assertCodegen('<input @input.prevent=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){$event.preventDefault();return onInput($event)}}})}`);\n    assertCodegen('<input @input.self=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){if($event.target !== $event.currentTarget)return null;return onInput($event)}}})}`);\n  }); // GitHub Issues #5146","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers and keycode correct order","suites":["codegen"],"updatePoint":{"line":186,"column":70,"index":16499},"line":186,"code":"  it('generate events with generic modifiers and keycode correct order', () => {\n    assertCodegen('<input @keydown.enter.prevent=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;$event.preventDefault();return onInput($event)}}})}`);\n    assertCodegen('<input @keydown.enter.stop=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;$event.stopPropagation();return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with mouse event modifiers","suites":["codegen"],"updatePoint":{"line":190,"column":48,"index":17136},"line":190,"code":"  it('generate events with mouse event modifiers', () => {\n    assertCodegen('<input @click.ctrl=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if(!$event.ctrlKey)return null;return onClick($event)}}})}`);\n    assertCodegen('<input @click.shift=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if(!$event.shiftKey)return null;return onClick($event)}}})}`);\n    assertCodegen('<input @click.alt=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if(!$event.altKey)return null;return onClick($event)}}})}`);\n    assertCodegen('<input @click.meta=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if(!$event.metaKey)return null;return onClick($event)}}})}`);\n    assertCodegen('<input @click.exact=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if($event.ctrlKey||$event.shiftKey||$event.altKey||$event.metaKey)return null;return onClick($event)}}})}`);\n    assertCodegen('<input @click.ctrl.exact=\"onClick\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"click\":function($event){if(!$event.ctrlKey)return null;if($event.shiftKey||$event.altKey||$event.metaKey)return null;return onClick($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple modifiers","suites":["codegen"],"updatePoint":{"line":198,"column":45,"index":18442},"line":198,"code":"  it('generate events with multiple modifiers', () => {\n    assertCodegen('<input @input.stop.prevent.self=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){$event.stopPropagation();$event.preventDefault();if($event.target !== $event.currentTarget)return null;return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture modifier","suites":["codegen"],"updatePoint":{"line":201,"column":43,"index":18775},"line":201,"code":"  it('generate events with capture modifier', () => {\n    assertCodegen('<input @input.capture=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"!input\":function($event){return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once modifier","suites":["codegen"],"updatePoint":{"line":204,"column":40,"index":18993},"line":204,"code":"  it('generate events with once modifier', () => {\n    assertCodegen('<input @input.once=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"~input\":function($event){return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture and once modifier","suites":["codegen"],"updatePoint":{"line":207,"column":52,"index":19220},"line":207,"code":"  it('generate events with capture and once modifier', () => {\n    assertCodegen('<input @input.capture.once=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"~!input\":function($event){return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once and capture modifier","suites":["codegen"],"updatePoint":{"line":210,"column":52,"index":19456},"line":210,"code":"  it('generate events with once and capture modifier', () => {\n    assertCodegen('<input @input.once.capture=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"~!input\":function($event){return onInput($event)}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline statement","suites":["codegen"],"updatePoint":{"line":213,"column":43,"index":19683},"line":213,"code":"  it('generate events with inline statement', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){current++}}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline function expression","suites":["codegen"],"updatePoint":{"line":216,"column":53,"index":19894},"line":216,"code":"  it('generate events with inline function expression', () => {\n    // normal function\n    assertCodegen('<input @input=\"function () { current++ }\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function () { current++ }}})}`); // normal named function\n\n    assertCodegen('<input @input=\"function fn () { current++ }\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function fn () { current++ }}})}`); // arrow with no args\n\n    assertCodegen('<input @input=\"()=>current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":()=>current++}})}`); // arrow with parens, single arg\n\n    assertCodegen('<input @input=\"(e) => current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":(e) => current++}})}`); // arrow with parens, multi args\n\n    assertCodegen('<input @input=\"(a, b, c) => current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":(a, b, c) => current++}})}`); // arrow with destructuring\n\n    assertCodegen('<input @input=\"({ a, b }) => current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":({ a, b }) => current++}})}`); // arrow single arg no parens\n\n    assertCodegen('<input @input=\"e=>current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":e=>current++}})}`); // with modifiers\n\n    assertCodegen(`<input @keyup.enter=\"e=>current++\">`, `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return (e=>current++)($event)}}})}`);\n  }); // #3893","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should not treat handler with unexpected whitespace as inline statement","suites":["codegen"],"updatePoint":{"line":235,"column":77,"index":21493},"line":235,"code":"  it('should not treat handler with unexpected whitespace as inline statement', () => {\n    assertCodegen('<input @input=\" onInput \">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":onInput}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate unhandled events","suites":["codegen"],"updatePoint":{"line":238,"column":31,"index":21662},"line":238,"code":"  it('generate unhandled events', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":function($event){current++}}})}`, ast => {\n      ast.events.input = undefined;\n    });\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiple event handlers","suites":["codegen"],"updatePoint":{"line":243,"column":38,"index":21910},"line":243,"code":"  it('generate multiple event handlers', () => {\n    assertCodegen('<input @input=\"current++\" @input.stop=\"onInput\">', `with(this){return _c('input',{attrs:{\"_i\":0},on:{\"input\":[function($event){current++},function($event){$event.stopPropagation();return onInput($event)}]}})}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component","suites":["codegen"],"updatePoint":{"line":246,"column":24,"index":22182},"line":246,"code":"  it('generate component', () => {\n    assertCodegen('<my-component name=\"mycomponent1\" :msg=\"msg\" @notify=\"onNotify\"><div>hi</div></my-component>', `with(this){return _c('my-component',{attrs:{\"name\":\"mycomponent1\",\"msg\":msg,\"_i\":0},on:{\"notify\":onNotify}},[_c('div')])}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate svg component with children","suites":["codegen"],"updatePoint":{"line":249,"column":42,"index":22481},"line":249,"code":"  it('generate svg component with children', () => {\n    assertCodegen('<svg><my-comp><circle :r=\"10\"></circle></my-comp></svg>', `with(this){return _c('svg',{attrs:{\"_i\":0}},[_c('my-comp',{attrs:{\"_i\":1}},[_c('circle',{attrs:{\"r\":10,\"_i\":2}})],1)],1)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate is attribute","suites":["codegen"],"updatePoint":{"line":252,"column":27,"index":22728},"line":252,"code":"  it('generate is attribute', () => {\n    assertCodegen('<div is=\"component1\"></div>', `with(this){return _c(\"component1\",{tag:\"div\"})}`);\n    assertCodegen('<div :is=\"component1\"></div>', `with(this){return _c(_$s(0,'is',component1),{tag:\"div\"})}`); // maybe a component and normalize type should be 1\n\n    assertCodegen('<div><div is=\"component1\"></div></div>', `with(this){return _c('div',[_c(\"component1\",{tag:\"div\"})],1)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with inline-template","suites":["codegen"],"updatePoint":{"line":258,"column":45,"index":23182},"line":258,"code":"  it('generate component with inline-template', () => {\n    // have \"inline-template'\"\n    assertCodegen('<my-component inline-template><p><span>hello world</span></p></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0},inlineTemplate:{render:function(){with(this){return _c('p',[_c('span')])}},staticRenderFns:[]}})}`); // \"have inline-template attrs, but not having exactly one child element\n\n    assertCodegen('<my-component inline-template><hr><hr></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0},inlineTemplate:{render:function(){with(this){return _c('hr')}},staticRenderFns:[]}})}`);\n    assertCodegen('<my-component inline-template></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0}})}`); // have \"is\" attribute\n\n    assertCodegen('<div is=\"myComponent\" inline-template><div></div></div>', `with(this){return _c(\"myComponent\",{tag:\"div\",inlineTemplate:{render:function(){with(this){return _c('div')}},staticRenderFns:[]}})}`);\n    assertCodegen('<div is=\"myComponent\" inline-template></div>', `with(this){return _c(\"myComponent\",{tag:\"div\"})}`); // expect('Inline-template components must have exactly one child element.').toHaveBeenWarned()\n    // expect(console.error.calls.count()).toBe(3)\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static trees inside v-for","suites":["codegen"],"updatePoint":{"line":269,"column":40,"index":24443},"line":269,"code":"  it('generate static trees inside v-for', () => {\n    assertCodegen(`<div><div v-for=\"i in 10\"><p><span></span></p></div></div>`, `with(this){return _c('div',_l((10),function(i,$10,$20,$30){return _c('div',[_c('p',[_c('span')])])}),0)}` // [`with(this){return _c('p',[_c('span')])}`]\n    );\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with v-for","suites":["codegen"],"updatePoint":{"line":273,"column":35,"index":24736},"line":273,"code":"  it('generate component with v-for', () => {\n    // normalize type: 2\n    assertCodegen('<div><child></child><template v-for=\"item in list\">{{ item }}</template></div>', `with(this){return _c('div',[_c('child',{attrs:{\"_i\":1}}),_l((_$s(2,'f',{forItems:list,fill:true})),function(item,$10,$20,$30){return [_v((_$s((\"2-\"+$30),'t0-0',_s(item))))]})],2)}`);\n  }); // it('generate component with comment', () => {","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"does not squash templates inside v-pre","suites":["codegen"],"updatePoint":{"line":301,"column":44,"index":25969},"line":301,"code":"  it('does not squash templates inside v-pre', () => {\n    assertCodegen('<div v-pre><template><p>{{msg}}</p></template></div>', `with(this){return _c('div',[[_c('p')]],2)}`); // const template = '<div v-pre><template><p>{{msg}}</p></template></div>'\n    // const generatedCode = `with(this){return _m(0)}`\n    // // const renderFn = `with(this){return _c('div',{pre:true},[_c('template',[_c('p',[_v(\"{{msg}}\")])])],2)}`\n    // const ast = parse(template, baseOptions)\n    // optimize(ast, baseOptions)\n    // const res = generate(ast, baseOptions)\n    // expect(res.render).toBe(generatedCode)\n    // // expect(res.staticRenderFns).toEqual([renderFn])\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified ast type","suites":["codegen"],"updatePoint":{"line":311,"column":28,"index":26612},"line":311,"code":"  it('not specified ast type', () => {\n    assertCodegen('', `with(this){return _c(\"div\")}`); // const res = generate(null, baseOptions)\n    // expect(res.render).toBe(`with(this){return _c(\"div\")}`)\n    // expect(res.staticRenderFns).toEqual([])\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified directives option","suites":["codegen"],"updatePoint":{"line":316,"column":37,"index":26874},"line":316,"code":"  it('not specified directives option', () => {\n    assertCodegen('<p v-if=\"show\">hello world</p>', `with(this){return (_$s(0,'i',show))?_c('p'):_e()}`, {// isReservedTag\n    });\n  }); // #9142","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should compile single v-for component inside template","suites":["codegen"],"updatePoint":{"line":321,"column":59,"index":27091},"line":321,"code":"  it('should compile single v-for component inside template', () => {\n    assertCodegen(`<div><template v-if=\"ok\"><foo v-for=\"i in 1\" :key=\"i\"></foo></template></div>`, `with(this){return _c('div',[(_$s(1,'i',ok))?_l((1),function(i,$10,$20,$30){return _c('foo',{key:i,attrs:{\"_i\":(\"2-\"+$30)}})}):_e()],2)}`);\n  });","file":"compiler-app-plus.service.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate directive","suites":["codegen"],"updatePoint":{"line":16,"column":24,"index":341},"line":16,"code":"  it('generate directive', () => {\n    assertCodegen('<p v-custom1:arg1.modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{attrs:{\"_i\":0}})}`); // extra\n\n    assertCodegen('<p v-custom1:[arg1].modifier=\"value1\" v-custom2></p>', `with(this){return _c('p',{attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters","suites":["codegen"],"updatePoint":{"line":21,"column":22,"index":632},"line":21,"code":"  it('generate filters', () => {\n    assertCodegen('<div :id=\"a | b | c\">{{ d | e | f }}</div>', `with(this){return _c('div',{attrs:{\"id\":_$g(0,'a-id'),\"_i\":0}},[_v((_$g(0,'t0-0')))])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters with no arguments","suites":["codegen"],"updatePoint":{"line":24,"column":40,"index":844},"line":24,"code":"  it('generate filters with no arguments', () => {\n    assertCodegen('<div>{{ d | e() }}</div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_v((_$g(0,'t0-0')))])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["codegen"],"updatePoint":{"line":27,"column":30,"index":1009},"line":27,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<div><li v-for=\"item in items\" :key=\"item.uid\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function(item,$10,$20,$30){return _c('li',{key:item,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`); // iterator syntax\n\n    assertCodegen('<div><li v-for=\"(item, i) in items\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function(item,i,$20,$30){return _c('li',{key:item,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`);\n    assertCodegen('<div><li v-for=\"(item, key, index) in items\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function(item,key,index,$30){return _c('li',{key:item,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`); // destructuring\n\n    assertCodegen('<div><li v-for=\"{ a, b } in items\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function($item,$10,$20,$30){return _c('li',{key:$item,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`);\n    assertCodegen('<div><li v-for=\"({ a, b }, key, index) in items\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function($item,key,index,$30){return _c('li',{key:$item,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`); // v-for with extra element\n\n    assertCodegen('<div><p></p><li v-for=\"item in items\"></li></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_c('p',{attrs:{\"_i\":1}}),_l((_$g(2,'f')),function(item,$10,$20,$30){return _c('li',{key:item,attrs:{\"_i\":(\"2-\"+$30)}})})],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if directive","suites":["codegen"],"updatePoint":{"line":38,"column":29,"index":2491},"line":38,"code":"  it('generate v-if directive', () => {\n    assertCodegen('<p v-if=\"show\">hello</p>', `with(this){return (_$g(0,'i'))?_c('p',{attrs:{\"_i\":0}},[_v(\"hello\")]):_e()}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else directive","suites":["codegen"],"updatePoint":{"line":41,"column":31,"index":2665},"line":41,"code":"  it('generate v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else>world</p></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[(_$g(1,'i'))?_c('p',{attrs:{\"_i\":1}},[_v(\"hello\")]):_c('p',{attrs:{\"_i\":2}},[_v(\"world\")])],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if directive","suites":["codegen"],"updatePoint":{"line":44,"column":34,"index":2937},"line":44,"code":"  it('generate v-else-if directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[(_$g(1,'i'))?_c('p',{attrs:{\"_i\":1}},[_v(\"hello\")]):(_$g(2,'e'))?_c('p',{attrs:{\"_i\":2}},[_v(\"world\")]):_e()],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if with v-else directive","suites":["codegen"],"updatePoint":{"line":47,"column":46,"index":3249},"line":47,"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else>bye</p></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[(_$g(1,'i'))?_c('p',{attrs:{\"_i\":1}},[_v(\"hello\")]):(_$g(2,'e'))?_c('p',{attrs:{\"_i\":2}},[_v(\"world\")]):_c('p',{attrs:{\"_i\":3}},[_v(\"bye\")])],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multi v-else-if with v-else directive","suites":["codegen"],"updatePoint":{"line":50,"column":52,"index":3616},"line":50,"code":"  it('generate multi v-else-if with v-else directive', () => {\n    assertCodegen('<div><p v-if=\"show\">hello</p><p v-else-if=\"hide\">world</p><p v-else-if=\"3\">elseif</p><p v-else>bye</p></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[(_$g(1,'i'))?_c('p',{attrs:{\"_i\":1}},[_v(\"hello\")]):(_$g(2,'e'))?_c('p',{attrs:{\"_i\":2}},[_v(\"world\")]):(3)?_c('p',{attrs:{\"_i\":3}},[_v(\"elseif\")]):_c('p',{attrs:{\"_i\":4}},[_v(\"bye\")])],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["codegen"],"updatePoint":{"line":53,"column":18,"index":4020},"line":53,"code":"  it('generate ref', () => {\n    assertCodegen('<p ref=\"component1\"></p>', `with(this){return _c('p',{ref:\"component1\",attrs:{\"_i\":0}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref on v-for","suites":["codegen"],"updatePoint":{"line":56,"column":27,"index":4175},"line":56,"code":"  it('generate ref on v-for', () => {\n    assertCodegen('<ul><li v-for=\"item in items\" ref=\"component1\"></li></ul>', `with(this){return _c('ul',{attrs:{\"_i\":0}},_l((_$g(1,'f')),function(item,$10,$20,$30){return _c('li',{key:item,ref:\"component1\",refInFor:true,attrs:{\"_i\":(\"1-\"+$30)}})}),1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind directive","suites":["codegen"],"updatePoint":{"line":59,"column":31,"index":4480},"line":59,"code":"  it('generate v-bind directive', () => {\n    assertCodegen('<p v-bind=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$g(0,'v-bind'),false))}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind with prop directive","suites":["codegen"],"updatePoint":{"line":62,"column":41,"index":4659},"line":62,"code":"  it('generate v-bind with prop directive', () => {\n    assertCodegen('<p v-bind.prop=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$g(0,'v-bind'),true))}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind directive with sync modifier","suites":["codegen"],"updatePoint":{"line":65,"column":50,"index":4851},"line":65,"code":"  it('generate v-bind directive with sync modifier', () => {\n    assertCodegen('<p v-bind.sync=\"test\"></p>', `with(this){return _c('p',_b({attrs:{\"_i\":0}},'p',_$g(0,'v-bind'),false,true))}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-model directive","suites":["codegen"],"updatePoint":{"line":68,"column":32,"index":5031},"line":68,"code":"  it('generate v-model directive', () => {\n    assertCodegen('<input v-model=\"test\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},model:{value:_$g(0,'v-model'),callback:function($$v){$handleVModelEvent(0,$$v)},expression:\"test\"}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive","suites":["codegen"],"updatePoint":{"line":71,"column":42,"index":5291},"line":71,"code":"  it('generate multiline v-model directive', () => {\n    assertCodegen('<input v-model=\"\\n test \\n\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},model:{value:_$g(0,'v-model'),callback:function($$v){$handleVModelEvent(0,$$v)},expression:\"\\\\n test \\\\n\"}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive on custom component","suites":["codegen"],"updatePoint":{"line":74,"column":62,"index":5585},"line":74,"code":"  it('generate multiline v-model directive on custom component', () => {\n    assertCodegen('<my-component v-model=\"\\n test \\n\" />', `with(this){return _c('my-component',{attrs:{\"_i\":0},model:{value:_$g(0,'v-model'),callback:function(){},expression:\"\\\\n test \\\\n\"}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate template tag","suites":["codegen"],"updatePoint":{"line":77,"column":27,"index":5826},"line":77,"code":"  it('generate template tag', () => {\n    assertCodegen('<div><template><p>{{hello}}</p></template></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[[_c('p',{attrs:{\"_i\":2}},[_v((_$g(2,'t0-0')))])]],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate single slot","suites":["codegen"],"updatePoint":{"line":80,"column":26,"index":6042},"line":80,"code":"  it('generate single slot', () => {\n    assertCodegen('<div><slot></slot></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_t(\"default\",null,{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named slot","suites":["codegen"],"updatePoint":{"line":83,"column":25,"index":6212},"line":83,"code":"  it('generate named slot', () => {\n    assertCodegen('<div><slot name=\"one\"></slot></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_t(\"one\",null,{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot fallback content","suites":["codegen"],"updatePoint":{"line":86,"column":36,"index":6400},"line":86,"code":"  it('generate slot fallback content', () => {\n    assertCodegen('<div><slot><div>hi</div></slot></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_t(\"default\",[_c('div',{attrs:{\"_i\":2}},[_v(\"hi\")])],{\"_i\":1})],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot target","suites":["codegen"],"updatePoint":{"line":89,"column":26,"index":6619},"line":89,"code":"  it('generate slot target', () => {\n    assertCodegen('<p slot=\"one\">hello world</p>', `with(this){return _c('p',{attrs:{\"slot\":\"one\",\"_i\":0},slot:\"one\"},[_v(\"hello world\")])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["codegen"],"updatePoint":{"line":92,"column":26,"index":6805},"line":92,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<foo><template slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return [_v((_svm._$g((\"1-\"+_si),'t0-0')))]}}])})}`);\n    assertCodegen('<foo><div slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return _c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$g((\"1-\"+_si),'t0-0')))])}}])})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named scoped slot","suites":["codegen"],"updatePoint":{"line":96,"column":32,"index":7352},"line":96,"code":"  it('generate named scoped slot', () => {\n    assertCodegen('<foo><template slot=\"foo\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return [_v((_svm._$g((\"1-\"+_si),'t0-0')))]}}])})}`);\n    assertCodegen('<foo><div slot=\"foo\" slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return _c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$g((\"1-\"+_si),'t0-0')))])}}])})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate dynamic scoped slot","suites":["codegen"],"updatePoint":{"line":100,"column":34,"index":7915},"line":100,"code":"  it('generate dynamic scoped slot', () => {\n    assertCodegen('<foo><template :slot=\"foo\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:_$g(1,'st'),fn:function(bar, _svm, _si){return [_v((_svm._$g((\"1-\"+_si),'t0-0')))]}}],null,true)})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with multiline v-if","suites":["codegen"],"updatePoint":{"line":103,"column":46,"index":8238},"line":103,"code":"  it('generate scoped slot with multiline v-if', () => {\n    assertCodegen('<foo><template v-if=\"\\nshow\\n\" slot-scope=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"default\",fn:function(bar, _svm, _si){return (_svm._$g((\"1-\"+_si),'i'))?[_v((_svm._$g((\"1-\"+_si),'t0-0')))]:undefined}}],null,true)})}`);\n    assertCodegen('<foo><div v-if=\"\\nshow\\n\" slot=\"foo\" slot-scope=\"bar\">{{ bar }}</div></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([{key:\"foo\",fn:function(bar, _svm, _si){return (_svm._$g((\"1-\"+_si),'i'))?_c('div',{attrs:{\"_i\":(\"1-\"+_si)}},[_v((_svm._$g((\"1-\"+_si),'t0-0')))]):_e()}}],null,true)})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with new slot syntax","suites":["codegen"],"updatePoint":{"line":107,"column":47,"index":8928},"line":107,"code":"  it('generate scoped slot with new slot syntax', () => {\n    assertCodegen('<foo><template v-if=\"show\" #default=\"bar\">{{ bar }}</template></foo>', `with(this){return _c('foo',{attrs:{\"_i\":0},scopedSlots:_u([(_$g(1,'i'))?{key:\"default\",fn:function(bar, _svm, _si){return [_v((_svm._$g((\"1-\"+_si),'t0-0')))]}}:null],null,true)})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["codegen"],"updatePoint":{"line":110,"column":28,"index":9247},"line":110,"code":"  it('generate class binding', () => {\n    // static\n    assertCodegen('<p class=\"class1\">hello world</p>', `with(this){return _c('p',{staticClass:_$g(0,'sc'),attrs:{\"_i\":0}},[_v(\"hello world\")])}`); // dynamic\n\n    assertCodegen('<p :class=\"class1\">hello world</p>', `with(this){return _c('p',{class:_$g(0,'c'),attrs:{\"_i\":0}},[_v(\"hello world\")])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate style binding","suites":["codegen"],"updatePoint":{"line":116,"column":28,"index":9606},"line":116,"code":"  it('generate style binding', () => {\n    assertCodegen('<p :style=\"error\">hello world</p>', `with(this){return _c('p',{style:(_$g(0,'s')),attrs:{\"_i\":0}},[_v(\"hello world\")])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["codegen"],"updatePoint":{"line":119,"column":31,"index":9796},"line":119,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<p v-show=\"shown\">hello world</p>', `with(this){return _c('p',{directives:[{name:\"show\",rawName:\"v-show\",value:(_$g(0,'v-show')),expression:\"_$g(0,'v-show')\"}],attrs:{\"_i\":0}},[_v(\"hello world\")])}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate DOM props with v-bind directive","suites":["codegen"],"updatePoint":{"line":122,"column":46,"index":10079},"line":122,"code":"  it('generate DOM props with v-bind directive', () => {\n    // input + value\n    assertCodegen('<input :value=\"msg\">', `with(this){return _c('v-uni-input',{attrs:{\"value\":_$g(0,'a-value'),\"_i\":0}})}`); // non input\n\n    assertCodegen('<p :value=\"msg\"/>', `with(this){return _c('p',{attrs:{\"value\":_$g(0,'a-value'),\"_i\":0}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate attrs with v-bind directive","suites":["codegen"],"updatePoint":{"line":128,"column":42,"index":10410},"line":128,"code":"  it('generate attrs with v-bind directive', () => {\n    assertCodegen('<input :name=\"field1\">', `with(this){return _c('v-uni-input',{attrs:{\"name\":_$g(0,'a-name'),\"_i\":0}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static attrs","suites":["codegen"],"updatePoint":{"line":131,"column":27,"index":10579},"line":131,"code":"  it('generate static attrs', () => {\n    assertCodegen('<input name=\"field1\">', `with(this){return _c('v-uni-input',{attrs:{\"name\":\"field1\",\"_i\":0}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with v-on directive","suites":["codegen"],"updatePoint":{"line":134,"column":41,"index":10754},"line":134,"code":"  it('generate events with v-on directive', () => {\n    assertCodegen('<input @input=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with method call","suites":["codegen"],"updatePoint":{"line":137,"column":38,"index":10976},"line":137,"code":"  it('generate events with method call', () => {\n    assertCodegen('<input @input=\"onInput($event);\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // empty arguments\n\n    assertCodegen('<input @input=\"onInput();\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // without semicolon\n\n    assertCodegen('<input @input=\"onInput($event)\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // multiple args\n\n    assertCodegen('<input @input=\"onInput($event, \\'abc\\', 5);\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // expression in args\n\n    assertCodegen('<input @input=\"onInput($event, 2+2);\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // tricky symbols in args\n\n    assertCodegen(`<input @input=\"onInput(');[\\\\'());');\">`, `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // function name including a `function` part (#9920)\n    // 2.6.10 暂未修复此 bug\n    // assertCodegen(\n    //   '<input @input=\"functionName()\">',\n    //   `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return functionName()}}})}`\n    // )\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple statements","suites":["codegen"],"updatePoint":{"line":155,"column":46,"index":12491},"line":155,"code":"  it('generate events with multiple statements', () => {\n    // normal function\n    assertCodegen('<input @input=\"onInput1();onInput2()\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // function with multiple args\n\n    assertCodegen('<input @input=\"onInput1($event, \\'text\\');onInput2(\\'text2\\', $event)\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with keycode","suites":["codegen"],"updatePoint":{"line":161,"column":34,"index":12992},"line":161,"code":"  it('generate events with keycode', () => {\n    assertCodegen('<input @input.enter=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"enter\":true})}}})}`); // multiple keycodes (delete)\n\n    assertCodegen('<input @input.delete=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"delete\":true})}}})}`); // multiple keycodes (esc)\n\n    assertCodegen('<input @input.esc=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"esc\":true})}}})}`); // multiple keycodes (space)\n\n    assertCodegen('<input @input.space=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"space\":true})}}})}`); // multiple keycodes (chained)\n\n    assertCodegen('<input @keydown.enter.delete=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){return $handleViewEvent($event,{\"enter\":true,\"delete\":true})}}})}`); // number keycode\n\n    assertCodegen('<input @input.13=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"13\":true})}}})}`); // custom keycode\n\n    assertCodegen('<input @input.custom=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"custom\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers","suites":["codegen"],"updatePoint":{"line":176,"column":44,"index":14547},"line":176,"code":"  it('generate events with generic modifiers', () => {\n    assertCodegen('<input @input.stop=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"stop\":true})}}})}`);\n    assertCodegen('<input @input.prevent=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"prevent\":true})}}})}`);\n    assertCodegen('<input @input.self=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"self\":true})}}})}`);\n  }); // GitHub Issues #5146","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers and keycode correct order","suites":["codegen"],"updatePoint":{"line":182,"column":70,"index":15222},"line":182,"code":"  it('generate events with generic modifiers and keycode correct order', () => {\n    assertCodegen('<input @keydown.enter.prevent=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){return $handleViewEvent($event,{\"enter\":true,\"prevent\":true})}}})}`);\n    assertCodegen('<input @keydown.enter.stop=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"keydown\":function($event){return $handleViewEvent($event,{\"enter\":true,\"stop\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with mouse event modifiers","suites":["codegen"],"updatePoint":{"line":186,"column":48,"index":15711},"line":186,"code":"  it('generate events with mouse event modifiers', () => {\n    assertCodegen('<input @click.ctrl=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"ctrl\":true})}}})}`);\n    assertCodegen('<input @click.shift=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"shift\":true})}}})}`);\n    assertCodegen('<input @click.alt=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"alt\":true})}}})}`);\n    assertCodegen('<input @click.meta=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"meta\":true})}}})}`);\n    assertCodegen('<input @click.exact=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"exact\":true})}}})}`);\n    assertCodegen('<input @click.ctrl.exact=\"onClick\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"click\":function($event){return $handleViewEvent($event,{\"ctrl\":true,\"exact\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple modifiers","suites":["codegen"],"updatePoint":{"line":194,"column":45,"index":16910},"line":194,"code":"  it('generate events with multiple modifiers', () => {\n    assertCodegen('<input @input.stop.prevent.self=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"stop\":true,\"prevent\":true,\"self\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture modifier","suites":["codegen"],"updatePoint":{"line":197,"column":43,"index":17196},"line":197,"code":"  it('generate events with capture modifier', () => {\n    assertCodegen('<input @input.capture=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"!input\":function($event){return $handleViewEvent($event,{\"capture\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once modifier","suites":["codegen"],"updatePoint":{"line":200,"column":40,"index":17446},"line":200,"code":"  it('generate events with once modifier', () => {\n    assertCodegen('<input @input.once=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"~input\":function($event){return $handleViewEvent($event,{\"once\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture and once modifier","suites":["codegen"],"updatePoint":{"line":203,"column":52,"index":17702},"line":203,"code":"  it('generate events with capture and once modifier', () => {\n    assertCodegen('<input @input.capture.once=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"~!input\":function($event){return $handleViewEvent($event,{\"once\":true,\"capture\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once and capture modifier","suites":["codegen"],"updatePoint":{"line":206,"column":52,"index":17982},"line":206,"code":"  it('generate events with once and capture modifier', () => {\n    assertCodegen('<input @input.once.capture=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"~!input\":function($event){return $handleViewEvent($event,{\"once\":true,\"capture\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline statement","suites":["codegen"],"updatePoint":{"line":209,"column":43,"index":18253},"line":209,"code":"  it('generate events with inline statement', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline function expression","suites":["codegen"],"updatePoint":{"line":212,"column":53,"index":18492},"line":212,"code":"  it('generate events with inline function expression', () => {\n    // normal function\n    assertCodegen('<input @input=\"function () { current++ }\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // normal named function\n\n    assertCodegen('<input @input=\"function fn () { current++ }\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // arrow with no args\n\n    assertCodegen('<input @input=\"()=>current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // arrow with parens, single arg\n\n    assertCodegen('<input @input=\"(e) => current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // arrow with parens, multi args\n\n    assertCodegen('<input @input=\"(a, b, c) => current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // arrow with destructuring\n\n    assertCodegen('<input @input=\"({ a, b }) => current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // arrow single arg no parens\n\n    assertCodegen('<input @input=\"e=>current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`); // with modifiers\n\n    assertCodegen(`<input @keyup.enter=\"e=>current++\">`, `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"keyup\":function($event){return $handleViewEvent($event,{\"enter\":true})}}})}`);\n  }); // #3893","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should not treat handler with unexpected whitespace as inline statement","suites":["codegen"],"updatePoint":{"line":231,"column":77,"index":20267},"line":231,"code":"  it('should not treat handler with unexpected whitespace as inline statement', () => {\n    assertCodegen('<input @input=\" onInput \">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate unhandled events","suites":["codegen"],"updatePoint":{"line":234,"column":31,"index":20484},"line":234,"code":"  it('generate unhandled events', () => {\n    assertCodegen('<input @input=\"current++\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event)}}})}`, ast => {\n      ast.events.input = undefined;\n    });\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiple event handlers","suites":["codegen"],"updatePoint":{"line":239,"column":38,"index":20760},"line":239,"code":"  it('generate multiple event handlers', () => {\n    assertCodegen('<input @input=\"current++\" @input.stop=\"onInput\">', `with(this){return _c('v-uni-input',{attrs:{\"_i\":0},on:{\"input\":function($event){return $handleViewEvent($event,{\"stop\":true})}}})}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component","suites":["codegen"],"updatePoint":{"line":242,"column":24,"index":21006},"line":242,"code":"  it('generate component', () => {\n    assertCodegen('<my-component name=\"mycomponent1\" :msg=\"msg\" @notify=\"onNotify\"><div>hi</div></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0},on:{\"notify\":function($event){return $handleViewEvent($event)}}},[_c('div',{attrs:{\"_i\":1}},[_v(\"hi\")])],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate svg component with children","suites":["codegen"],"updatePoint":{"line":245,"column":42,"index":21344},"line":245,"code":"  it('generate svg component with children', () => {\n    assertCodegen('<svg><my-comp><circle :r=\"10\"></circle></my-comp></svg>', `with(this){return _c('svg',{attrs:{\"_i\":0}},[_c('my-comp',{attrs:{\"_i\":1}},[_c('circle',{attrs:{\"_i\":2}})],1)],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate is attribute","suites":["codegen"],"updatePoint":{"line":248,"column":27,"index":21584},"line":248,"code":"  it('generate is attribute', () => {\n    assertCodegen('<div is=\"component1\"></div>', `with(this){return _c(\"component1\",{tag:\"div\",attrs:{\"_i\":0}})}`);\n    assertCodegen('<div :is=\"component1\"></div>', `with(this){return _c(_$g(0,'is'),{tag:\"div\",attrs:{\"_i\":0}})}`); // maybe a component and normalize type should be 1\n\n    assertCodegen('<div><div is=\"component1\"></div></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_c(\"component1\",{tag:\"div\",attrs:{\"_i\":1}})],1)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with inline-template","suites":["codegen"],"updatePoint":{"line":254,"column":45,"index":22089},"line":254,"code":"  it('generate component with inline-template', () => {\n    // have \"inline-template'\"\n    assertCodegen('<my-component inline-template><p><span>hello world</span></p></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0},inlineTemplate:{render:function(){with(this){return _c('p',{attrs:{\"_i\":1}},[_c('span',{attrs:{\"_i\":2}},[_v(\"hello world\")])],1)}},staticRenderFns:[]}})}`); // \"have inline-template attrs, but not having exactly one child element\n\n    assertCodegen('<my-component inline-template><hr><hr></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0},inlineTemplate:{render:function(){with(this){return _c('hr',{attrs:{\"_i\":1}})}},staticRenderFns:[]}})}`);\n    assertCodegen('<my-component inline-template></my-component>', `with(this){return _c('my-component',{attrs:{\"_i\":0}})}`); // have \"is\" attribute\n\n    assertCodegen('<div is=\"myComponent\" inline-template><div></div></div>', `with(this){return _c(\"myComponent\",{tag:\"div\",attrs:{\"_i\":0},inlineTemplate:{render:function(){with(this){return _c('div',{attrs:{\"_i\":1}})}},staticRenderFns:[]}})}`);\n    assertCodegen('<div is=\"myComponent\" inline-template></div>', `with(this){return _c(\"myComponent\",{tag:\"div\",attrs:{\"_i\":0}})}`); // expect('Inline-template components must have exactly one child element.').toHaveBeenWarned()\n    // expect(console.error.calls.count()).toBe(3)\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static trees inside v-for","suites":["codegen"],"updatePoint":{"line":265,"column":40,"index":23470},"line":265,"code":"  it('generate static trees inside v-for', () => {\n    assertCodegen(`<div><div v-for=\"i in 10\"><p><span></span></p></div></div>`, `with(this){return _c('div',{attrs:{\"_i\":0}},_l((10),function(i,$10,$20,$30){return _c('div',{attrs:{\"_i\":(\"1-\"+$30)}},[_c('p',{attrs:{\"_i\":(\"2-\"+$30)}},[_c('span',{attrs:{\"_i\":(\"3-\"+$30)}})],1)],1)}),1)}` // [`with(this){return _c('p',{attrs:{\"_i\":(\"2-\"+$i)}},[_c('p',{attrs:{\"_i\":(\"3-\"+$i)}})])}`]\n    );\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with v-for","suites":["codegen"],"updatePoint":{"line":269,"column":35,"index":23909},"line":269,"code":"  it('generate component with v-for', () => {\n    // normalize type: 2\n    assertCodegen('<div><child></child><template v-for=\"item in list\">{{ item }}</template></div>', `with(this){return _c('div',{attrs:{\"_i\":0}},[_c('child',{attrs:{\"_i\":1}}),_l((_$g(2,'f')),function(item,$10,$20,$30){return [_v((_$g((\"2-\"+$30),'t0-0')))]})],2)}`);\n  }); // it('generate component with comment', () => {","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"does not squash templates inside v-pre","suites":["codegen"],"updatePoint":{"line":297,"column":44,"index":25154},"line":297,"code":"  it('does not squash templates inside v-pre', () => {\n    assertCodegen('<div v-pre><template><p>{{msg}}</p></template></div>', `with(this){return _c('div',{pre:true,attrs:{\"_i\":0}},[[_c('p',{pre:true,attrs:{\"_i\":2}},[_v(\"{{msg}}\")])]],2)}`); // const template = '<div v-pre><template><p>{{msg}}</p></template></div>'\n    // const generatedCode = `with(this){return _m(0)}`\n    // // const renderFn = `with(this){return _c('p',{pre:true},[_c('template',[_c('p',[_v(\"{{msg}}\")])])],2)}`\n    // const ast = parse(template, baseOptions)\n    // optimize(ast, baseOptions)\n    // const res = generate(ast, baseOptions)\n    // expect(res.render).toBe(generatedCode)\n    // // expect(res.staticRenderFns).toEqual([renderFn])\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified ast type","suites":["codegen"],"updatePoint":{"line":307,"column":28,"index":25863},"line":307,"code":"  it('not specified ast type', () => {\n    assertCodegen('', `with(this){return _c(\"div\")}`); // const res = generate(null, baseOptions)\n    // expect(res.render).toBe(`with(this){return _c(\"p\")}`)\n    // expect(res.staticRenderFns).toEqual([])\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified directives option","suites":["codegen"],"updatePoint":{"line":312,"column":37,"index":26123},"line":312,"code":"  it('not specified directives option', () => {\n    assertCodegen('<p v-if=\"show\">hello world</p>', `with(this){return (_$g(0,'i'))?_c('p',{attrs:{\"_i\":0}},[_v(\"hello world\")]):_e()}`, {// isReservedTag\n    });\n  }); // #9142","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should compile single v-for component inside template","suites":["codegen"],"updatePoint":{"line":317,"column":59,"index":26372},"line":317,"code":"  it('should compile single v-for component inside template', () => {\n    assertCodegen(`<div><template v-if=\"ok\"><foo v-for=\"i in 1\" :key=\"i\"></foo></template></div>`, `with(this){return _c('div',{attrs:{\"_i\":0}},[(_$g(1,'i'))?_l((1),function(i,$10,$20,$30){return _c('foo',{key:i,attrs:{\"_i\":(\"2-\"+$30)}})}):_e()],2)}`);\n  });","file":"compiler-app-plus.view.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate mp filter ","suites":["mp:compiler-extra"],"updatePoint":{"line":17,"column":25,"index":510},"line":17,"code":"  it('generate mp filter ', () => {\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view @touchmove=\"a.touchmove\">{{t.a}}{{t[\\'a\\']}}{{t.a(b)}}{{t[\\'a\\'](b)}}{{u.t.a(b)}}{{u.t.a}}</view>', '<view bindtouchmove=\"{{a.touchmove}}\">{{t.a+t[\\'a\\']+t.a(b)+t[\\'a\\'](b)+$root.g0+u.t.a}}</view>', 'with(this){var g0=u.t.a(b);$mp.data=Object.assign({},{$root:{g0:g0}})}', {\n      filterModules: {\n        t: {},\n        a: {}\n      }\n    });\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view v-for=\"(item, index) in a.test()\" :key=\"index\">{{item}}</view>', '<block wx:for=\"{{a.test()}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view>{{item}}</view></block>', 'with(this){}', {\n      filterModules: {\n        t: {},\n        a: {}\n      }\n    });\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scopeId","suites":["mp:compiler-extra"],"updatePoint":{"line":35,"column":22,"index":1326},"line":35,"code":"  it('generate scopeId', () => {\n    assertCodegen('<view></view>', '<view class=\"data-v-1\"></view>', undefined, {\n      scopeId: 'data-v-1'\n    });\n    assertCodegen('<view class=\"view\"></view>', '<view class=\"view data-v-2\"></view>', undefined, {\n      scopeId: 'data-v-2'\n    });\n    assertCodegen('<view :class=\"[{ active: isActive }, errorClass]\"></view>', '<view class=\"{{[\\'data-v-3\\',[(isActive)?\\'active\\':\\'\\'],errorClass]}}\"></view>', undefined, {\n      scopeId: 'data-v-3'\n    });\n    assertCodegen('<view class=\"static\" :class=\"[{ active: isActive }, errorClass]\"></view>', '<view class=\"{{[\\'static\\',\\'data-v-4\\',[(isActive)?\\'active\\':\\'\\'],errorClass]}}\"></view>', undefined, {\n      scopeId: 'data-v-4'\n    });\n    assertCodegen('<view ref=\"ref\" :class=\"[{ active: isActive }, errorClass]\"></view>', '<view data-ref=\"ref\" class=\"{{[\\'data-v-5\\',\\'vue-ref\\',[(isActive)?\\'active\\':\\'\\'],errorClass]}}\"></view>', undefined, {\n      scopeId: 'data-v-5'\n    });\n    assertCodegen('<view :class=\"view\"></view>', '<view class=\"{{[\\'data-v-6\\',view]}}\"></view>', undefined, {\n      scopeId: 'data-v-6'\n    }); //     assertCodegen(\n    //       '<view :class=\"view\"></view>',\n    //       `<view class=\"{{$root.c0}}\"></view>`,\n    //       `with(this){var c0=__get_class(view,\"data-v-6\");$mp.data=Object.assign({},{$root:{c0:c0}})}`, {\n    //         scopeId: 'data-v-6'\n    //       }\n    //     )\n\n    assertCodegen('<view :class=\"view\" class=\"view\"></view>', '<view class=\"{{[\\'view\\',\\'data-v-7\\',view]}}\"></view>', undefined, {\n      scopeId: 'data-v-7'\n    }); //         assertCodegen(\n    //             '<view :class=\"view\" class=\"view\"></view>',\n    //             `<view class=\"{{$root.c0}}\"></view>`,\n    //             `with(this){var c0=__get_class(view,\"view data-v-7\");$mp.data=Object.assign({},{$root:{c0:c0}})}`, {\n    //                 scopeId: 'data-v-7'\n    //             }\n    //         )\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate staticStyle upx and px","suites":["mp:compiler-extra"],"updatePoint":{"line":71,"column":37,"index":3272},"line":71,"code":"  it('generate staticStyle upx and px', () => {\n    assertCodegen('<view style=\"height:100upx;width:100upx;\">text</view>', '<view style=\"height:100rpx;width:100rpx;\">text</view>');\n    assertCodegen('<view style=\"height:100upx;width:100rpx;\">text</view>', '<view style=\"height:100rpx;width:100rpx;\">text</view>');\n    assertCodegen('<view style=\"height:100px;width:100px;\">text</view>', '<view style=\"height:100px;width:100px;\">text</view>');\n    assertCodegen('<view style=\"height:100px;width:100px;\">text</view>', '<view style=\"height:100rpx;width:100rpx;\">text</view>', undefined, undefined, {\n      transformPx: true\n    });\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text trim","suites":["mp:compiler-extra"],"updatePoint":{"line":79,"column":24,"index":3894},"line":79,"code":"  it('generate text trim', () => {\n    assertCodegen('<view>text</view>', '<view>text</view>');\n    assertCodegen('<view> text </view>', '<view>text</view>');\n    assertCodegen('<text>{{line_one_cn+\\' \\'}}</text>', '<text>{{line_one_cn+\\' \\'}}</text>');\n    assertCodegen('<text>{{\" \"+line_one_cn}}</text>', '<text>{{\" \"+line_one_cn}}</text>');\n    assertCodegen('<text>\\nN: {{title}}\\n′</text>', '<text>{{\\'N: \\'+title+\"\\\\n′\"}}</text>');\n    assertCodegen('<text>我是第一行\\n我的第二行</text>', '<text>我是第一行\\n我的第二行</text>');\n    assertCodegen('<text>我是第一行\\n我的第二行1{{title}}</text>', '<text>{{\"我是第一行\\\\n我的第二行1\"+title}}</text>');\n    assertCodegen(`<text>我是第一行\n我的第二行2{{title}}</text>`, '<text>{{\"我是第一行\\\\n我的第二行2\"+title}}</text>');\n    assertCodegen('<view> text text </view>', '<view>text text</view>');\n    assertCodegen('<view>text {{text}} text</view>', '<view>{{\"text \"+text+\" text\"}}</view>'); //         assertCodegen(\n    //             '<view>text {{text}} \\ntext</view>',\n    //             `<view>{{\"text \" + text + \" \\ntext\"}}</view>`\n    //         )\n\n    assertCodegen('<view> text {{text}} 文本 </view>', '<view>{{\\'text \\'+text+\\' 文本\\'}}</view>');\n    assertCodegen('<view>{{text}} text  text </view>', '<view>{{text+\\' text  text\\'}}</view>');\n    assertCodegen('<view>  {{text}} text  text </view>', '<view>{{\\'\\'+text+\\' text  text\\'}}</view>');\n    assertCodegen('<view>{{text}} text  text {{text}}</view>', '<view>{{text+\" text  text \"+text}}</view>');\n    assertCodegen('<view>  {{text}} text  text {{text}}  </view>', '<view>{{\\'\\'+text+\" text  text \"+text+\\'\\'}}</view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate default slot","suites":["mp:compiler-extra"],"updatePoint":{"line":101,"column":27,"index":5483},"line":101,"code":"  it('generate default slot', () => {\n    assertCodegen('<component1>text</component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">text</component1>');\n    assertCodegen('<component1>text<text>123213</text></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">text<text>123213</text></component1>');\n    assertCodegen('<component1>text<block slot=\"right\"></block></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\',\\'right\\']}}\">text<view slot=\"right\"></view></component1>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate input value","suites":["mp:compiler-extra"],"updatePoint":{"line":106,"column":26,"index":6078},"line":106,"code":"  it('generate input value', () => {\n    assertCodegen('<input type=\"text\" value=\"\" />', '<input type=\"text\" value=\"\"/>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-slot","suites":["mp:compiler-extra"],"updatePoint":{"line":109,"column":21,"index":6202},"line":109,"code":"  it('generate v-slot', () => {\n    assertCodegen('<view><template></template></view>', '<view></view>');\n    assertCodegen('<component1><template slot=\"f\">f</template><template slot=\"c\">c</template>默认</component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\',\\'f\\',\\'c\\']}}\"><view slot=\"f\">f</view><view slot=\"c\">c</view>默认</component1>');\n    assertCodegen('<component1 v-slot>text</component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block>text</block></component1>');\n    assertCodegen('<component1 v-slot:default>text<text>123213</text></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block>text<text>123213</text></block></component1>');\n    assertCodegen('<component1><template v-slot:left><text></text></template><template v-slot:right><text></text></template></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'left\\',\\'right\\']}}\"><text slot=\"left\"></text><text slot=\"right\"></text></component1>');\n    assertCodegen('<component1><view>view1</view><view>view2</view></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><view>view1</view><view>view2</view></component1>');\n    assertCodegen('<component1><template v-slot><view>view1</view><view>view2</view><template></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><view>view1</view><view>view2</view></block></component1>');\n    assertCodegen('<component1><template v-slot:test><view>view1</view><view>view2</view><template></component1>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'test\\']}}\"><view slot=\"test\"><view>view1</view><view>view2</view></view></component1>');\n    assertCodegen(`<my-component>\n       <template v-slot:header>\n        <h1>Here might be a page title</h1>\n      </template>\n      <p>A paragraph for the main content.</p>\n      <template v-slot:footer>\n        <p>Here's some contact info</p>\n      </template>\n    </my-component>`, '<my-component vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\',\\'header\\',\\'footer\\']}}\"><view class=\"_h1\" slot=\"header\">Here might be a page title</view><view class=\"_p\" slot=\"footer\">Here\\'s some contact info</view><view class=\"_p\">A paragraph for the main content.</view></my-component>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events inside v-for","suites":["mp:compiler-extra"],"updatePoint":{"line":128,"column":34,"index":8606},"line":128,"code":"  it('generate events inside v-for', () => {\n    assertCodegen('<view v-for=\"item in dataList\" :key=\"item.id\" @click=\"click1(item, 1);click2(item, 2);\"/>', '<block wx:for=\"{{dataList}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'click1\\',[\\'$0\\',1],[[[\\'dataList\\',\\'id\\',item.id]]]],[\\'click2\\',[\\'$0\\',2],[[[\\'dataList\\',\\'id\\',item.id]]]]]]]}}\" bindtap=\"__e\"></view></block>'); // TODO vue的数字 item 是从1，小程序是从0，后续考虑抹平差异\n\n    assertCodegen('<view>1<view  v-for=\"item in items\" :key=\"item\"><input v-for=\"item1 in item\" :key=\"item1\" @input=\"handle\" @click=\"e=>count++\"></view></view>', '<view>1<block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"*this\"><view><block wx:for=\"{{item}}\" wx:for-item=\"item1\" wx:for-index=\"__i1__\" wx:key=\"*this\"><input data-event-opts=\"{{[[\\'input\\',[[\\'handle\\',[\\'$event\\']]]],[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\" bindtap=\"__e\"/></block></view></block></view>', 'with(this){if(!_isMounted){e0=e=>count++}}');\n    assertCodegen('<view>2<view  v-for=\"(item,index) in items\" :key=\"item\"><input v-for=\"(item1,index1) in item\" :key=\"item1\" @input=\"handle\" @click=\"e=>count++\"></view></view>', '<view>2<block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"*this\"><view><block wx:for=\"{{item}}\" wx:for-item=\"item1\" wx:for-index=\"index1\" wx:key=\"*this\"><input data-event-opts=\"{{[[\\'input\\',[[\\'handle\\',[\\'$event\\']]]],[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\" bindtap=\"__e\"/></block></view></block></view>', 'with(this){if(!_isMounted){e0=e=>count++}}');\n    assertCodegen('<view v-for=\"item in data.items\" @tap=\"change(item,item.b,true)\">3</view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',true],[[[\\'data.items\\',\\'\\',__i0__]],[[\\'data.items\\',\\'\\',__i0__,\\'b\\']]]]]]]}}\" bindtap=\"__e\">3</view></block>');\n    assertCodegen('<view v-for=\"(item,index) in data.items\" @tap=\"change(item,item.b,true,index)\">33</view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',true,index],[[[\\'data.items\\',\\'\\',index]],[[\\'data.items\\',\\'\\',index,\\'b\\']]]]]]]}}\" bindtap=\"__e\">33</view></block>');\n    assertCodegen('<view v-for=\"(item,index) in data.items\" @tap=\"change(item,true,index,item.b)\">4</view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',true,index,\\'$1\\'],[[[\\'data.items\\',\\'\\',index]],[[\\'data.items\\',\\'\\',index,\\'b\\']]]]]]]}}\" bindtap=\"__e\">4</view></block>');\n    assertCodegen('<view v-for=\"item in data.items\" :key=\"item.id\" @tap=\"change(item,item.b,true)\">5</view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',true],[[[\\'data.items\\',\\'id\\',item.id]],[[\\'data.items\\',\\'id\\',item.id,\\'b\\']]]]]]]}}\" bindtap=\"__e\">5</view></block>');\n    assertCodegen('<view v-for=\"item in data.items\" :key=\"item.id\" @tap=\"change(item,item.b,true)\">6</view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',true],[[[\\'data.items\\',\\'id\\',item.id]],[[\\'data.items\\',\\'id\\',item.id,\\'b\\']]]]]]]}}\" bindtap=\"__e\">6</view></block>');\n    assertCodegen('<view v-for=\"(item,index) in data.items\" :key=\"item.id\" @tap=\"change(item,item.b,test,true)\">7<view v-for=\"(meta,index) in item.metas\" :key=\"meta.id\" @tap=\"change(meta,meta.b,true)\"></view></view>', '<block wx:for=\"{{data.items}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',\\'$2\\',true],[[[\\'data.items\\',\\'id\\',item.id]],[[\\'data.items\\',\\'id\\',item.id,\\'b\\']],\\'test\\']]]]]}}\" bindtap=\"__e\">7<block wx:for=\"{{item.metas}}\" wx:for-item=\"meta\" wx:for-index=\"index\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',true],[[[\\'data.items\\',\\'id\\',item.id],[\\'metas\\',\\'id\\',meta.id]],[[\\'data.items\\',\\'id\\',item.id],[\\'metas\\',\\'id\\',meta.id,\\'b\\']]]]]]]}}\" bindtap=\"__e\"></view></block></view></block>');\n    assertCodegen(`<block v-for=\"(weeks, week) in canlender.weeks\" :key=\"week\">\n        <block v-for=\"(day, index) in weeks\" :key=\"index\">,\n             <view @tap=\"selectDays(week,index,canlender.month === day.month,day.disable,canlender.lunar)\"></view>\n        </block>\n    </block>`, '<block wx:for=\"{{canlender.weeks}}\" wx:for-item=\"weeks\" wx:for-index=\"week\" wx:key=\"week\"><block><block wx:for=\"{{weeks}}\" wx:for-item=\"day\" wx:for-index=\"index\" wx:key=\"index\"><block>,<view data-event-opts=\"{{[[\\'tap\\',[[\\'selectDays\\',[week,index,canlender.month===day.month,\\'$0\\',\\'$1\\'],[[[\\'canlender.weeks\\',\\'\\',week],[\\'\\',\\'\\',index,\\'disable\\']],\\'canlender.lunar\\']]]]]}}\" bindtap=\"__e\"></view></block></block></block></block>');\n    assertCodegen('<view v-for=\"item in list\">9<input type=\"text\" v-for=\"meta in item.meta\" :key=\"meta.id\" v-model=\"meta.value\"></view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view>9<block wx:for=\"{{item.meta}}\" wx:for-item=\"meta\" wx:for-index=\"__i1__\" wx:key=\"id\"><input type=\"text\" data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'$0\\',\\'value\\',\\'$event\\',[]],[[[\\'list\\',\\'\\',__i0__],[\\'meta\\',\\'id\\',meta.id]]]]]]]}}\" value=\"{{meta.value}}\" bindinput=\"__e\"/></block></view></block>');\n    assertCodegen('<view @click=\"onSetYear(+1,-1)\"></view>', '<view data-event-opts=\"{{[[\\'tap\\',[[\\'onSetYear\\',[1,-1]]]]]}}\" bindtap=\"__e\"></view>');\n    assertCodegen('<view class=\"input-list\" v-for=\"(item,index) in dataList\" :key=\"item.id\"><input v-model.trim=\"dataList2[index].val\" /></view>', '<block wx:for=\"{{dataList}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"id\"><view class=\"input-list\"><input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'$0\\',\\'val\\',\\'$event\\',[\\'trim\\']],[\\'dataList2.\\'+index+\\'\\']]]],[\\'blur\\',[[\\'$forceUpdate\\']]]]}}\" value=\"{{dataList2[index].val}}\" bindinput=\"__e\" bindblur=\"__e\"/></view></block>');\n    assertCodegen(` <view>\n        <view v-for=\"item in list[idx]\" :key=\"item.id\" class=\"mid-item-title\" @click=\"m1(item)\">\n          <view class=\"mid-item-icon\" @click.stop=\"m2(item)\"></view>\n        </view>\n        </view>`, '<view><block wx:for=\"{{list[idx]}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"id\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'m1\\',[\\'$0\\'],[[[\\'list.\\'+idx+\\'\\',\\'id\\',item.id]]]]]]]}}\" class=\"mid-item-title\" bindtap=\"__e\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'m2\\',[\\'$0\\'],[[[\\'list.\\'+idx+\\'\\',\\'id\\',item.id]]]]]]]}}\" class=\"mid-item-icon\" catchtap=\"__e\"></view></view></block></view>');\n    assertCodegen('<view><view class=\"item\" v-for=\"i in \\'abc\\'\" :key=\"i\" @click=\"func(i)\"></view></view>', '<view><block wx:for=\"abc\" wx:for-item=\"i\" wx:for-index=\"__i0__\" wx:key=\"*this\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'func\\',[\\'$0\\'],[[[\\'#s#abc\\',\\'\\',__i0__]]]]]]]}}\" class=\"item\" bindtap=\"__e\"></view></block></view>');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\" @click.stop=\"func\">{{item}}</view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'func\\',[\\'$event\\']]]]]}}\" catchtap=\"__e\">{{item}}</view></block>');\n    assertCodegen('<view v-for=\"(item,index) in [1,2,3]\" :key=\"index\" @click.stop=\"func\">{{item}}</view>', '<block wx:for=\"{{[1,2,3]}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" catchtap=\"__e\">{{item}}</view></block>', 'with(this){if(!_isMounted){e0=function($event){$event.stopPropagation();return func($event)}}}');\n    assertCodegen('<view v-for=\"(item,index) in array()\" :key=\"index\" @click.stop=\"func\">{{item}}</view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" catchtap=\"__e\">{{item}}</view></block>', 'with(this){var l0=array();if(!_isMounted){e0=function($event){$event.stopPropagation();return func($event)}}$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view><view class=\"item\" v-for=\"i in 5\" :key=\"i\" @click=\"func(i)\"></view></view>', '<view><block wx:for=\"{{5}}\" wx:for-item=\"i\" wx:for-index=\"__i0__\" wx:key=\"*this\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'func\\',[\\'$0\\'],[[[5,\\'\\',__i0__]]]]]]]}}\" class=\"item\" bindtap=\"__e\"></view></block></view>');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view @click=\"$test.test(item,item.length)\"></view></view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\"></view></view></block>', 'with(this){if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return $test.test(item,item.length)}}}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view @click=\"$test.test(item,item.length,undefined)\"></view></view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\"></view></view></block>', 'with(this){if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return $test.test(item,item.length,undefined)}}}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view @click=\"event=>showEventInfo(event,item)\"></view></view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\"></view></view></block>', 'with(this){if(!_isMounted){e0=(event,item,...args)=>{var _temp=args[args.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return showEventInfo(event,item)}}}');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["mp:compiler-extra"],"updatePoint":{"line":161,"column":28,"index":18972},"line":161,"code":"  it('generate class binding', () => {\n    assertCodegen('<p :class=\\'\"icon-\"+item.icon\\'>1</p>', '<view class=\"{{[\\'_p\\',\\'icon-\\'+item.icon]}}\">1</view>');\n    assertCodegen('<div :class=\"{ active: isActive }\">1</div>', '<view class=\"{{[\\'_div\\',(isActive)?\\'active\\':\\'\\']}}\">1</view>');\n    assertCodegen('<p class=\"static\" :class=\"{ active: isActive, \\'text-danger\\': hasError }\">2</p>', '<view class=\"{{[\\'static\\',\\'_p\\',(isActive)?\\'active\\':\\'\\',(hasError)?\\'text-danger\\':\\'\\']}}\">2</view>');\n    assertCodegen('<p class=\"static\" :class=\"[activeClass, errorClass]\">3</p>', '<view class=\"{{[\\'static\\',\\'_p\\',activeClass,errorClass]}}\">3</view>');\n    assertCodegen('<p class=\"static\" :class=\"[isActive ? activeClass : \\'\\', errorClass]\">4</p>', '<view class=\"{{[\\'static\\',\\'_p\\',isActive?activeClass:\\'\\',errorClass]}}\">4</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass]\">5</p>', '<view class=\"{{[\\'static\\',\\'_p\\',[(isActive)?\\'active\\':\\'\\'],errorClass]}}\">5</view>');\n    assertCodegen('<div class=\"container\" :class=\"computedClassObject\">6</div>', '<view class=\"{{[\\'container\\',\\'_div\\',computedClassObject]}}\">6</view>'); //         assertCodegen(\n    //             `<div class=\"container\" :class=\"computedClassObject\">6</div>`,\n    //             `<view class=\"{{$root.c0}}\">6</view>`,\n    //             `with(this){var c0=__get_class(computedClassObject,\"container\");$mp.data=Object.assign({},{$root:{c0:c0}})}`\n    //         )\n\n    assertCodegen('<p :class=\"index === currentIndex ? activeClass : itemClass\">7</p>', '<view class=\"{{[\\'_p\\',index===currentIndex?activeClass:itemClass]}}\">7</view>');\n    assertCodegen('<p :class=\"\\'m-content-head-\\'+message.user\">8</p>', '<view class=\"{{[\\'_p\\',\\'m-content-head-\\'+message.user]}}\">8</view>');\n    assertCodegen('<p :class=\"classStr1 || classStr2\" class=\"bg\">9</p>', '<view class=\"{{[\\'bg\\',\\'_p\\',classStr1||classStr2]}}\">9</view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate style binding","suites":["mp:compiler-extra"],"updatePoint":{"line":178,"column":28,"index":20927},"line":178,"code":"  it('generate style binding', () => {\n    assertCodegen('<p :style=\"\\'color:red\\'\">1</p>', '<view style=\"{{(\\'color:red\\')}}\" class=\"_p\">1</view>');\n    assertCodegen('<p style=\"background-color:black\" :style=\"\\'color:red\\'\">1</p>', '<view style=\"{{\\'background-color:black;\\'+(\\'color:red\\')}}\" class=\"_p\">1</view>');\n    assertCodegen('<p :style=\"{ color: activeColor }\">1</p>', '<view style=\"{{\\'color:\\'+(activeColor)+\\';\\'}}\" class=\"_p\">1</view>');\n    assertCodegen('<p :style=\"{ color: activeColor, fontSize: fontSize + \\'px\\' }\">2</p>', '<view style=\"{{\\'color:\\'+(activeColor)+\\';\\'+(\\'font-size:\\'+(fontSize+\\'px\\')+\\';\\')}}\" class=\"_p\">2</view>');\n    assertCodegen('<p :style=\"{ color: activeColor }\" style=\"background-color:red;height:100upx\">3</p>', '<view style=\"{{\\'background-color:red;height:100rpx;\\'+(\\'color:\\'+(activeColor)+\\';\\')}}\" class=\"_p\">3</view>');\n    assertCodegen('<p :style=\"[{ color: activeColor, fontSize: fontSize + \\'px\\' }]\">4</p>', '<view style=\"{{\\'color:\\'+(activeColor)+\\';\\'+(\\'font-size:\\'+(fontSize+\\'px\\')+\\';\\')}}\" class=\"_p\">4</view>');\n    assertCodegen('<p :style=\"[{ color: activeColor, fontSize: fontSize + \\'px\\' },{ \\'background-color\\': activeColor}]\">5</p>', '<view style=\"{{\\'color:\\'+(activeColor)+\\';\\'+(\\'font-size:\\'+(fontSize+\\'px\\')+\\';\\')+(\\'background-color:\\'+(activeColor)+\\';\\')}}\" class=\"_p\">5</view>');\n    assertCodegen('<div :style=\"[baseStyles, overridingStyles]\">6</div>', '<view style=\"{{$root.s0}}\" class=\"_div\">6</view>', 'with(this){var s0=__get_style([baseStyles,overridingStyles]);$mp.data=Object.assign({},{$root:{s0:s0}})}');\n    assertCodegen('<div :style=\"styleObject\">7</div>', '<view style=\"{{(styleObject)}}\" class=\"_div\">7</view>'); //         assertCodegen(\n    //             `<div :style=\"styleObject\">7</div>`,\n    //             `<view style=\"{{$root.s0}}\">7</view>`,\n    //             `with(this){var s0=__get_style(styleObject);$mp.data=Object.assign({},{$root:{s0:s0}})}`\n    //         )\n\n    assertCodegen('<p :style=\"index === currentIndex ? activeStyle : itemStyle\">8</p>', '<view style=\"{{(index===currentIndex?activeStyle:itemStyle)}}\" class=\"_p\">8</view>');\n    assertCodegen('<p :style=\"\\'background:\\'+background\">9</p>', '<view style=\"{{(\\'background:\\'+background)}}\" class=\"_p\">9</view>');\n    assertCodegen('<p :style=\"styleStr1 || styleStr2\" style=\"background:red\">10</p>', '<view style=\"{{\\'background:red;\\'+(styleStr1||styleStr2)}}\" class=\"_p\">10</view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with v-on directive on custom component","suites":["mp:compiler-extra"],"updatePoint":{"line":197,"column":61,"index":23439},"line":197,"code":"  it('generate events with v-on directive on custom component', () => {\n    assertCodegen('<my-component @click=\"handleClick\"/>', '<my-component bind:click=\"__e\" vue-id=\"551070e6-1\" data-event-opts=\"{{[[\\'^click\\',[[\\'handleClick\\']]]]}}\" bind:__l=\"__l\"></my-component>');\n    assertCodegen('<my-component @click-left=\"handleClick\"/>', '<my-component bind:clickLeft=\"__e\" vue-id=\"551070e6-1\" data-event-opts=\"{{[[\\'^clickLeft\\',[[\\'handleClick\\']]]]}}\" bind:__l=\"__l\"></my-component>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-model directive on custom component","suites":["mp:compiler-extra"],"updatePoint":{"line":201,"column":52,"index":23923},"line":201,"code":"  it('generate v-model directive on custom component', () => {\n    assertCodegen('<my-component v-model=\"test\" @input=\"handle\">1</my-component>', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]],[\\'handle\\']]]]}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">1</my-component>');\n    assertCodegen('<my-component v-model=\"test\" @click=\"handle\">2</my-component>', '<my-component bind:click=\"__e\" bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test}}\" data-event-opts=\"{{[[\\'^click\\',[[\\'handle\\']]],[\\'^input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]]]]]}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">2</my-component>');\n    assertCodegen('<my-component v-model=\"test.a\">3</my-component>', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test.a}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'$0\\',\\'a\\',\\'$event\\',[]],[\\'test\\']]]]]}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">3</my-component>');\n    assertCodegen('<my-component v-model=\"test.a.b\">4</my-component>', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test.a.b}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'$0\\',\\'b\\',\\'$event\\',[]],[\\'test.a\\']]]]]}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">4</my-component>');\n    assertCodegen('<my-component v-model=\"test[a.b][a.b]\">4</my-component>', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test[a.b][a.b]}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'$0\\',\\'$1\\',\\'$event\\',[]],[\\'test.\\'+a.b+\\'\\',\\'a.b\\']]]]]}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">4</my-component>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate object property on custom component","suites":["mp:compiler-extra"],"updatePoint":{"line":208,"column":50,"index":25603},"line":208,"code":"  it('generate object property on custom component', () => {\n    assertCodegen('<my-component v-model=\"test\" @input=\"handle\" />', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]],[\\'handle\\']]]]}}\" bind:__l=\"__l\"></my-component>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-text directive","suites":["mp:compiler-extra"],"updatePoint":{"line":211,"column":31,"index":25923},"line":211,"code":"  it('generate v-text directive', () => {\n    assertCodegen('<view v-text=\"aaa1\"></view>', '<view>{{aaa1}}</view>');\n    assertCodegen('<view v-text=\"aaa1+1\"></view>', '<view>{{aaa1+1}}</view>');\n    assertCodegen('<view v-text=\"\\'aaa2\\'\"></view>', '<view>aaa2</view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-html directive","suites":["mp:compiler-extra"],"updatePoint":{"line":216,"column":31,"index":26200},"line":216,"code":"  it('generate v-html directive', () => {\n    assertCodegen('<view v-html=\"aaa\"></view>', '<view><rich-text nodes=\"{{aaa}}\"></rich-text></view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-bind directive with sync modifier","suites":["mp:compiler-extra"],"updatePoint":{"line":219,"column":50,"index":26372},"line":219,"code":"  it('generate v-bind directive with sync modifier', () => {\n    assertCodegen('<text-document :title.sync=\"aaa\"></text-document>', '<text-document vue-id=\"551070e6-1\" title=\"{{aaa}}\" data-event-opts=\"{{[[\\'^updateTitle\\',[[\\'__set_sync\\',[\\'$0\\',\\'aaa\\',\\'$event\\'],[\\'\\']]]]]}}\" bind:updateTitle=\"__e\" bind:__l=\"__l\"></text-document>');\n    assertCodegen('<text-document :title.sync=\"doc.title\"></text-document>', '<text-document vue-id=\"551070e6-1\" title=\"{{doc.title}}\" data-event-opts=\"{{[[\\'^updateTitle\\',[[\\'__set_sync\\',[\\'$0\\',\\'title\\',\\'$event\\'],[\\'doc\\']]]]]}}\" bind:updateTitle=\"__e\" bind:__l=\"__l\"></text-document>');\n    assertCodegen('<text-document :title.sync=\"doc.a.title\"></text-document>', '<text-document vue-id=\"551070e6-1\" title=\"{{doc.a.title}}\" data-event-opts=\"{{[[\\'^updateTitle\\',[[\\'__set_sync\\',[\\'$0\\',\\'title\\',\\'$event\\'],[\\'doc.a\\']]]]]}}\" bind:updateTitle=\"__e\" bind:__l=\"__l\"></text-document>');\n    assertCodegen('<text-document v-for=\"item in items\" :title.sync=\"item.title\"></text-document>', '<block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><text-document vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" title=\"{{item.title}}\" data-event-opts=\"{{[[\\'^updateTitle\\',[[\\'__set_sync\\',[\\'$0\\',\\'title\\',\\'$event\\'],[[[\\'items\\',\\'\\',__i0__,\\'\\']]]]]]]}}\" bind:updateTitle=\"__e\" bind:__l=\"__l\"></text-document></block>');\n    assertCodegen('<text-document v-for=\"item in items\" :title.sync=\"item.meta.title\"></text-document>', '<block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><text-document vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" title=\"{{item.meta.title}}\" data-event-opts=\"{{[[\\'^updateTitle\\',[[\\'__set_sync\\',[\\'$0\\',\\'title\\',\\'$event\\'],[[[\\'items\\',\\'\\',__i0__,\\'meta\\']]]]]]]}}\" bind:updateTitle=\"__e\" bind:__l=\"__l\"></text-document></block>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-model directive with generic modifiers","suites":["mp:compiler-extra"],"updatePoint":{"line":226,"column":55,"index":28198},"line":226,"code":"  it('generate v-model directive with generic modifiers', () => {\n    assertCodegen('<input v-model.lazy=\"test\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]]]]]}}\" value=\"{{test}}\" bindinput=\"__e\"/>');\n    assertCodegen('<input v-model.number=\"test\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[\\'number\\']]]]],[\\'blur\\',[[\\'$forceUpdate\\']]]]}}\" value=\"{{test}}\" bindinput=\"__e\" bindblur=\"__e\"/>');\n    assertCodegen('<input v-model.number.trim=\"test\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[\\'number\\',\\'trim\\']]]]],[\\'blur\\',[[\\'$forceUpdate\\']]]]}}\" value=\"{{test}}\" bindinput=\"__e\" bindblur=\"__e\"/>');\n    assertCodegen('<input class=\"uni-input\" @input=\"replaceInput\" v-model=\"changeValue\" placeholder=\"连续的两个1会变成2\" />', '<input class=\"uni-input\" placeholder=\"连续的两个1会变成2\" data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'changeValue\\',\\'$event\\',[]]],[\\'replaceInput\\',[\\'$event\\']]]]]}}\" value=\"{{changeValue}}\" bindinput=\"__e\"/>');\n    assertCodegen('<input v-model=\"model2.m\" />', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'$0\\',\\'m\\',\\'$event\\',[]],[\\'model2\\']]]]]}}\" value=\"{{model2.m}}\" bindinput=\"__e\"/>');\n    assertCodegen('<input v-model=\"model3.m.m\" />', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'$0\\',\\'m\\',\\'$event\\',[]],[\\'model3.m\\']]]]]}}\" value=\"{{model3.m.m}}\" bindinput=\"__e\"/>');\n    assertCodegen('<input v-model=\"model3[a.b][a.b]\" />', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'$0\\',\\'$1\\',\\'$event\\',[]],[\\'model3.\\'+a.b+\\'\\',\\'a.b\\']]]]]}}\" value=\"{{model3[a.b][a.b]}}\" bindinput=\"__e\"/>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for","suites":["mp:compiler-extra"],"updatePoint":{"line":235,"column":20,"index":29884},"line":235,"code":"  it('generate v-for', () => {\n    assertCodegen('<view><view v-for=\"(item, index) in list\"><view>{{handle(item)}}</view></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view>{{item.m0}}</view></view></block></view>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=handle(item);return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view><view v-for=\"(item, index) in list\"><view>{{handle(item)}}{{item.title}}</view></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view>{{item.m0+item.$orig.title}}</view></view></block></view>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=handle(item);return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view><view v-for=\"(item, index) in list\"><view v-for=\"(item1,index1) in list1\">{{handle(item1)}}{{item1.title}}</view></view></view>', '<view><block wx:for=\"{{$root.l1}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><block wx:for=\"{{item.l0}}\" wx:for-item=\"item1\" wx:for-index=\"index1\"><view>{{item1.m0+item1.$orig.title}}</view></block></view></block></view>', 'with(this){var l1=__map(list,function(item,index){var $orig=__get_orig(item);var l0=__map(list1,function(item1,index1){var $orig=__get_orig(item1);var m0=handle(item1);return{$orig:$orig,m0:m0}});return{$orig:$orig,l0:l0}});$mp.data=Object.assign({},{$root:{l1:l1}})}');\n    assertCodegen('<view v-for=\"(section, index) in sections\" :key=\"index\">title: {{ section.title|prefix }}<view v-for=\"(sub_titles, _index) in section.sub_titles\" :key=\"_index\">{{ sub_titles|prefix }}</view></view>', '<block wx:for=\"{{$root.l1}}\" wx:for-item=\"section\" wx:for-index=\"index\" wx:key=\"index\"><view>{{\"title: \"+section.f0}}<block wx:for=\"{{section.l0}}\" wx:for-item=\"sub_titles\" wx:for-index=\"_index\" wx:key=\"_index\"><view>{{sub_titles.f1}}</view></block></view></block>', 'with(this){var l1=__map(sections,function(section,index){var $orig=__get_orig(section);var f0=_f(\"prefix\")(section.title);var l0=__map(section.sub_titles,function(sub_titles,_index){var $orig=__get_orig(sub_titles);var f1=_f(\"prefix\")(sub_titles);return{$orig:$orig,f1:f1}});return{$orig:$orig,f0:f0,l0:l0}});$mp.data=Object.assign({},{$root:{l1:l1}})}');\n    assertCodegen('<view v-for=\"(item, index) in list\" :key=\"item\">{{aaa.item.id | test | test1}}</view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"*this\"><view>{{$root.f0}}</view></block>', 'with(this){var f0=_f(\"test1\")(_f(\"test\")(aaa.item.id));$mp.data=Object.assign({},{$root:{f0:f0}})}');\n    assertCodegen('<view v-for=\"(item, index) in list\" :key=\"item\">{{item.item.id | test | test1}}</view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"$orig\"><view>{{item.f0}}</view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var f0=_f(\"test1\")(_f(\"test\")(item.item.id));return{$orig:$orig,f0:f0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<text v-for=\"(item, i) in list\" v-bind:key=\"i\" >{{ item.split(\\'\\').join(\\' \\') }}</text>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"i\" wx:key=\"i\"><text>{{item.g0}}</text></block>', 'with(this){var l0=__map(list,function(item,i){var $orig=__get_orig(item);var g0=item.split(\"\").join(\" \");return{$orig:$orig,g0:g0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen(`<view class=\"content\">\n        <view v-for=\"(item, index) in tabList\" :key=\"index\">\n            <view v-for=\"(item2,index2) in list[item.key]\" :key=\"index2\" @click=\"show(item2.id, item2.id)\">\n                {{formatIt(item2.id)}}\n            </view>\n        </view>\n    </view>`, '<view class=\"content\"><block wx:for=\"{{$root.l1}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:for=\"{{item.l0}}\" wx:for-item=\"item2\" wx:for-index=\"index2\" wx:key=\"index2\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'show\\',[\\'$0\\',\\'$1\\'],[[[\\'list.\\'+item.$orig.key+\\'\\',\\'\\',index2,\\'id\\']],[[\\'list.\\'+item.$orig.key+\\'\\',\\'\\',index2,\\'id\\']]]]]]]}}\" bindtap=\"__e\">{{\\'\\'+item2.m0+\\'\\'}}</view></block></view></block></view>', 'with(this){var l1=__map(tabList,function(item,index){var $orig=__get_orig(item);var l0=__map(list[item.key],function(item2,index2){var $orig=__get_orig(item2);var m0=formatIt(item2.id);return{$orig:$orig,m0:m0}});return{$orig:$orig,l0:l0}});$mp.data=Object.assign({},{$root:{l1:l1}})}');\n    assertCodegen('<view><view v-for=\"(item, key) in {x:\\'x\\'}\"><view>{{item}}</view></view></view>', '<view><block wx:for=\"{{({x:\\'x\\'})}}\" wx:for-item=\"item\" wx:for-index=\"key\"><view><view>{{item}}</view></view></block></view>');\n    assertCodegen('<view><view v-for=\"(item, key) in {\\'x-x\\':\\'x\\'}\"><view>{{item}}</view></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"key\"><view><view>{{item}}</view></view></block></view>', 'with(this){var l0={\"x-x\":\"x\"};$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view><view v-for=\"(item, index) in getList(test)\"><view>{{item}}</view></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view>{{item}}</view></view></block></view>', 'with(this){var l0=getList(test);$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view><view v-for=\"(item, index) in list[get(test)]\"><view>{{item}}</view></view></view>', '<view><block wx:for=\"{{list[$root.m0]}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view>{{item}}</view></view></block></view>', 'with(this){var m0=get(test);$mp.data=Object.assign({},{$root:{m0:m0}})}');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate TemplateLiteral ","suites":["mp:compiler-extra"],"updatePoint":{"line":255,"column":31,"index":35662},"line":255,"code":"  it('generate TemplateLiteral ', () => {\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view @tap=\"go(`/pages/page/page?id=${aaa}`)\"></view>', '<view data-event-opts=\"{{[[\\'tap\\',[[\\'go\\',[\\'/pages/page/page?id=\\'+aaa]]]]]}}\" bindtap=\"__e\"></view>');\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view :data-test=\"`hello`+aaa\"></view>', '<view data-test=\"{{\\'hello\\'+aaa}}\"></view>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate event ","suites":["mp:compiler-extra"],"updatePoint":{"line":263,"column":21,"index":36107},"line":263,"code":"  it('generate event ', () => {\n    assertCodegen('<view @/>', '<view></view>');\n    assertCodegen('<text v-for=\"item in items[\\'metas\\']\" :key=\"item[\\'id\\']\" class=\"title\" @tap=\"handle(item[\\'id\\'],item[\\'title\\'])\">{{item.title}}</text>', '<block wx:for=\"{{items[\\'metas\\']}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"id\"><text data-event-opts=\"{{[[\\'tap\\',[[\\'handle\\',[\\'$0\\',\\'$1\\'],[[[\\'items.metas\\',\\'id\\',item[\\'id\\'],\\'id\\']],[[\\'items.metas\\',\\'id\\',item[\\'id\\'],\\'title\\']]]]]]]}}\" class=\"title\" bindtap=\"__e\">{{item.title}}</text></block>');\n    assertCodegen('<view @touchmove>1</view>', '<view data-event-opts=\"{{[[\\'touchmove\\',[[\\'\\',[\\'$event\\']]]]]}}\" bindtouchmove=\"__e\">1</view>');\n    assertCodegen('<view @touchmove=\"\">2</view>', '<view data-event-opts=\"{{[[\\'touchmove\\',[[\\'\\',[\\'$event\\']]]]]}}\" bindtouchmove=\"__e\">2</view>');\n    assertCodegen('<view @touchmove.stop.prevent>3</view>', '<view data-event-opts=\"{{[[\\'touchmove\\',[[\\'\\',[\\'$event\\']]]]]}}\" catchtouchmove=\"__e\">3</view>');\n    assertCodegen('<view @tap=\"change(item,item.b,\\'a\\',true)\"></view>', '<view data-event-opts=\"{{[[\\'tap\\',[[\\'change\\',[\\'$0\\',\\'$1\\',\\'a\\',true],[\\'item\\',\\'item.b\\']]]]]}}\" bindtap=\"__e\"></view>');\n    assertCodegen('<view @click=\"handle({name:\\'a\\',b:123},[1,2,3])\"></view>', '<view data-event-opts=\"{{[[\\'tap\\',[[\\'handle\\',[[\\'o\\',[\\'name\\',\\'a\\'],[\\'b\\',123]],[1,2,3]]]]]]}}\" bindtap=\"__e\"></view>');\n    assertCodegen('<text v-for=\"(item,index) in pickerList[pickerIndex[0][2][\\'asdf\\']].children\" :key=\"index\">{{item.title}}</text>', '<block wx:for=\"{{pickerList[pickerIndex[0][2][\\'asdf\\']].children}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><text>{{item.title}}</text></block>');\n    assertCodegen('<text v-for=\"(item,index) in pickerList[0][1].children\" :key=\"index\" @tap=\"handle(item,index)\">{{item.title}}</text>', '<block wx:for=\"{{pickerList[0][1].children}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><text data-event-opts=\"{{[[\\'tap\\',[[\\'handle\\',[\\'$0\\',index],[[[\\'pickerList.__$n0.__$n1.children\\',\\'\\',index]]]]]]]}}\" bindtap=\"__e\">{{item.title}}</text></block>');\n    assertCodegen('<view v-for=\"(v2,i2) in ddd.item[0]\" :key=\"i2\" @tap=\"toInfo(v2)\"></view>', '<block wx:for=\"{{ddd.item[0]}}\" wx:for-item=\"v2\" wx:for-index=\"i2\" wx:key=\"i2\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'toInfo\\',[\\'$0\\'],[[[\\'ddd.item.__$n0\\',\\'\\',i2]]]]]]]}}\" bindtap=\"__e\"></view></block>');\n    assertCodegen('<button type=\"primary\" @click=\"test(arr, arr[index+1])\">click me</button>', '<button type=\"primary\" data-event-opts=\"{{[[\\'tap\\',[[\\'test\\',[\\'$0\\',\\'$1\\'],[\\'arr\\',\\'arr.\\'+index+1+\\'\\']]]]]}}\" bindtap=\"__e\">click me</button>');\n    assertCodegen('<button type=\"primary\" @click=\"test(arr, arr[0])\">click me</button>', '<button type=\"primary\" data-event-opts=\"{{[[\\'tap\\',[[\\'test\\',[\\'$0\\',\\'$1\\'],[\\'arr\\',\\'arr.__$n0\\']]]]]}}\" bindtap=\"__e\">click me</button>');\n    assertCodegen('<view v-for=\"item in list\" @click=\"test(item)\">{{ item }}</view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'test\\',[\\'$0\\'],[[[\\'list\\',\\'\\',__i0__]]]]]]]}}\" bindtap=\"__e\">{{item}}</view></block>');\n    assertCodegen('<view v-for=\"item in list\" @click.stop=\"test(item)\">{{ item }}</view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'test\\',[\\'$0\\'],[[[\\'list\\',\\'\\',__i0__]]]]]]]}}\" catchtap=\"__e\">{{item}}</view></block>');\n    assertCodegen('<view v-for=\"(item, index) in [{x:[1,2,3,4]}]\"><view v-for=\"item2 in item.x\" @click=\"test(item2)\">{{ item2 }}+{{index}}</view></view>', '<block wx:for=\"{{[{x:[1,2,3,4]}]}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><block wx:for=\"{{item.x}}\" wx:for-item=\"item2\" wx:for-index=\"__i0__\"><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item2})}}\" bindtap=\"__e\">{{item2+\"+\"+index}}</view></block></view></block>', 'with(this){if(!_isMounted){e0=function($event,item2){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item2=_temp2.item2;var _temp,_temp2;return test(item2)}}}');\n    assertCodegen('<view v-for=\"(item, index) in array()\"><view @click=\"test\"></view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'test\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"></view></view></block>', 'with(this){var l0=array();$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item, index) in array()\"><view @click=\"test(item)\"></view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\"></view></view></block>', 'with(this){var l0=array();if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return test(item)}}$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item, index) in array()\"><view @click.stop=\"test(item)\"></view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" catchtap=\"__e\"></view></view></block>', 'with(this){var l0=array();if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;$event.stopPropagation();return test(item)}}$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item, index) in array()\"><view @click=\"test(item)\">{{item}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\">{{item}}</view></view></block>', 'with(this){var l0=array();if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return test(item)}}$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item, index) in array()\"><view @click=\"test(item)\">{{get(item)}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item:item.$orig})}}\" bindtap=\"__e\">{{item.m0}}</view></view></block>', 'with(this){var l0=__map(array(),function(item,index){var $orig=__get_orig(item);var m0=get(item);return{$orig:$orig,m0:m0}});if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return test(item)}}$mp.data=Object.assign({},{$root:{l0:l0}})}');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate bool attr","suites":["mp:compiler-extra"],"updatePoint":{"line":285,"column":24,"index":43210},"line":285,"code":"  it('generate bool attr', () => {\n    assertCodegen('<video id class style inline-template controls/>', '<video id controls=\"{{true}}\"></video>');\n    assertCodegen('<video controls=\"\"/>', '<video controls></video>');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if","suites":["mp:compiler-extra"],"updatePoint":{"line":289,"column":19,"index":43430},"line":289,"code":"  it('generate v-if', () => {\n    assertCodegen('<view v-if=\"show\">{{getValue(key)}}</view>', '<block wx:if=\"{{show}}\"><view>{{$root.m0}}</view></block>', 'with(this){var m0=show?getValue(key):null;$mp.data=Object.assign({},{$root:{m0:m0}})}');\n    assertCodegen('<view v-if=\"getValue(key)\">{{getValue(key)}}</view>', '<block wx:if=\"{{$root.m0}}\"><view>{{$root.m1}}</view></block>', 'with(this){var m0=getValue(key);var m1=m0?getValue(key):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}');\n    assertCodegen('<view v-if=\"test1(key)&&test2(key)\">{{getValue(key)}}</view>', '<block wx:if=\"{{$root.m0}}\"><view>{{$root.m1}}</view></block>', 'with(this){var m0=test1(key)&&test2(key);var m1=m0?getValue(key):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"item\">{{getValue(item)}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.$orig}}\"><view>{{item.m0}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=item?getValue(item):null;return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"item.length\">{{getValue(item)}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.$orig.length}}\"><view>{{item.m0}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=item.length?getValue(item):null;return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"item.length>0\">{{getValue(item)}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.$orig.length>0}}\"><view>{{item.m0}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=item.length>0?getValue(item):null;return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"item.length>0\">{{test(\\'item\\')}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.$orig.length>0}}\"><view>{{item.m0}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=item.length>0?test(\"item\"):null;return{$orig:$orig,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"test(item)\">{{test(\\'item\\')}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.m0}}\"><view>{{item.m1}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=test(item);var m1=m0?test(\"item\"):null;return{$orig:$orig,m0:m0,m1:m1}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"test(item.id)\"><view v-if=\"test(item.type)\">{{test(\\'item\\')}}</view></view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.m0}}\"><view><block wx:if=\"{{item.m1}}\"><view>{{item.m2}}</view></block></view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var m0=test(item.id);var m1=m0?test(item.type):null;var m2=m0&&m1?test(\"item\"):null;return{$orig:$orig,m0:m0,m1:m1,m2:m2}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view v-if=\"Object.values(item.list).length\">{{test(item.list)}}</view></view>', '<block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{item.g0.length}}\"><view>{{item.m0}}</view></block></view></block>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);var g0=Object.values(item.list);var m0=g0.length?test(item.list):null;return{$orig:$orig,g0:g0,m0:m0}});$mp.data=Object.assign({},{$root:{l0:l0}})}');\n  });","file":"compiler-extra.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":17,"column":30,"index":527},"line":17,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"(item,index) in items\" :key=\"index\"></view></view>', '<view><view a:for=\"{{items}}\" a:for-item=\"item\" a:for-index=\"index\" a:key=\"index\"></view></view>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if with v-else directive","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":20,"column":46,"index":782},"line":20,"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else-if=\"hide\">world</view><view v-else>bye</view></view>', '<view><block a:if=\"{{show}}\"><view>hello</view></block><block a:else><block a:if=\"{{hide}}\"><view>world</view></block><block a:else><view>bye</view></block></block></view>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":23,"column":18,"index":1116},"line":23,"code":"  it('generate ref', () => {\n    assertCodegen('<component1 ref=\"c1\">text</component1>', '<component1 vue-id=\"551070e6-1\" ref=\"__r\" data-ref=\"c1\" onVueInit=\"__l\">text</component1>');\n    assertCodegen('<component1 :ref=\"c2\">text<text>123213</text></component1>', '<component1 vue-id=\"551070e6-1\" ref=\"__r\" data-ref=\"{{c2}}\" onVueInit=\"__l\">text<text>123213</text></component1>');\n    assertCodegen('<component1 v-for=\"item in items\" ref=\"c3\"></component1>', '<component1 vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" ref=\"__r\" data-ref-in-for=\"c3\" a:for=\"{{items}}\" a:for-item=\"item\" a:for-index=\"__i0__\" onVueInit=\"__l\"></component1>');\n    assertCodegen('<component1 v-for=\"item in items\" :ref=\"c4\"></component1>', '<component1 vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" ref=\"__r\" data-ref-in-for=\"{{c4}}\" a:for=\"{{items}}\" a:for-item=\"item\" a:for-index=\"__i0__\" onVueInit=\"__l\"></component1>');\n    assertCodegen('<component1 @change=\"onChange\" @cancle=\"onCancle\">text</component1>', '<component1 onChange=\"__e\" onCancle=\"__e\" vue-id=\"551070e6-1\" data-event-opts=\"{{[[\\'^change\\',[[\\'onChange\\']]],[\\'^cancle\\',[[\\'onCancle\\']]]]}}\" data-com-type=\"wx\" ref=\"__r\" data-event-list=\"onChange,onCancle\" onVueInit=\"__l\">text</component1>', undefined, undefined, {\n      wxComponents: {\n        component1: '/mycomponents/component1'\n      }\n    });\n    assertCodegen('<credit-pay @change=\"onChange\" @cancle=\"onCancle\">text</credit-pay>', '<plugin-wrapper onChange=\"__e\" onCancle=\"__e\" vue-id=\"551070e6-1\" onPluginWrap=\"__w\" data-event-opts=\"{{[[\\'^change\\',[[\\'onChange\\']]],[\\'^cancle\\',[[\\'onCancle\\']]]]}}\" data-com-type=\"wx\" ref=\"__r\" data-event-list=\"onChange,onCancle\" onVueInit=\"__l\"><credit-pay onChange=\"{{\\'onChange\\'+\\'551070e6-1\\'}}\" onCancle=\"{{\\'onCancle\\'+\\'551070e6-1\\'}}\" onVueInit=\"__l\">text</credit-pay></plugin-wrapper>', undefined, undefined, {\n      wxComponents: {\n        'credit-pay': 'plugin://myPlugin/CreditPay'\n      }\n    });\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot fallback content","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":39,"column":36,"index":3076},"line":39,"code":"  it('generate slot fallback content', () => {\n    assertCodegen('<view><slot>slot</slot></view>', '<view><block a:if=\"{{$slots.$default}}\"><slot></slot></block><block a:else>slot</block></view>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate default slot","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":42,"column":27,"index":3271},"line":42,"code":"  it('generate default slot', () => {\n    assertCodegen('<component1>text</component1>', '<component1 vue-id=\"551070e6-1\" onVueInit=\"__l\">text</component1>');\n    assertCodegen('<component1>text<text>123213</text></component1>', '<component1 vue-id=\"551070e6-1\" onVueInit=\"__l\">text<text>123213</text></component1>');\n    assertCodegen('<component1>text<block slot=\"right\"></block></component1>', '<component1 vue-id=\"551070e6-1\" onVueInit=\"__l\">text<view slot=\"right\"></view></component1>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":47,"column":26,"index":3769},"line":47,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<component1 :text=\"\\'text\\'\"><template v-slot=\"props\"><view :class=\"{text:props.text}\">{{props.text}}</view></template></component1>', '<component1 vue-id=\"551070e6-1\" text=\"text\" onVueInit=\"__l\"><view slot-scope=\"props\"><view class=\"{{((props.text)?\\'text\\':\\'\\')}}\">{{props.text}}</view></view></component1>');\n    assertCodegen('<component1 :text=\"\\'text\\'\"><template v-slot=\"{text}\"><view :class=\"{text:text}\">{{text}}</view></template></component1>', '<component1 vue-id=\"551070e6-1\" text=\"text\" onVueInit=\"__l\"><view slot-scope=\"__SCOPED__\"><view class=\"{{((__SCOPED__.text)?\\'text\\':\\'\\')}}\">{{__SCOPED__.text}}</view></view></component1>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with scopedSlotsCompiler: auto","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":51,"column":57,"index":4511},"line":51,"code":"  it('generate scoped slot with scopedSlotsCompiler: auto', () => {\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{item}}<template></my-component>', '<my-component vue-id=\"551070e6-1\" onVueInit=\"__l\"><view slot-scope=\"__SCOPED__\">{{__SCOPED__.item}}</view></my-component>', 'with(this){}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{getValue(item)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" onVueInit=\"__l\"><block><block a:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\")):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"item\">{{getValue(item.text)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" onVueInit=\"__l\"><block><block a:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\").text):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot :item=\"item\"><slot></view>', '<view><block a:if=\"{{$slots.$default}}\"><slot item=\"{{item}}\"></slot></block><block a:else><slot></slot></block></view>', 'with(this){if($scope.props.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":item})}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot v-bind=\"object\"><slot></view>', '<view><block a:if=\"{{$slots.$default}}\"><slot></slot></block><block a:else><slot></slot></block></view>', 'with(this){if($scope.props.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",object)}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":68,"column":28,"index":6497},"line":68,"code":"  it('generate class binding', () => {\n    assertCodegen('<div :class=\"{ active: isActive }\">1</div>', '<view class=\"{{((\\'_div\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))}}\">1</view>');\n    assertCodegen('<p class=\"static\" :class=\"{ active: isActive, \\'text-danger\\': hasError }\">2</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+((hasError)?\\'text-danger\\':\\'\\'))}}\">2</view>');\n    assertCodegen('<p class=\"static\" :class=\"[activeClass, errorClass]\">3</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+activeClass)+\\' \\'+errorClass)}}\">3</view>');\n    assertCodegen('<p class=\"static\" :class=\"[isActive ? activeClass : \\'\\', errorClass]\">4</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(isActive?activeClass:\\'\\'))+\\' \\'+errorClass)}}\">4</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass]\">5</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)}}\">5</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive, disabled: isDisabled }, errorClass]\">52</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(((isActive)?\\'active\\':\\'\\')+\\' \\'+((isDisabled)?\\'disabled\\':\\'\\')))+\\' \\'+errorClass)}}\">52</view>');\n    assertCodegen('<div class=\"container\" :class=\"computedClassObject\">6</div>', '<view class=\"{{(((\\'container\\')+\\' \\'+\\'_div\\')+\\' \\'+computedClassObject)}}\">6</view>'); //     assertCodegen(\n    //       `<div class=\"container\" :class=\"computedClassObject\">6</div>`,\n    //       `<view class=\"{{$root.c0}}\">6</view>`,\n    //       `with(this){var c0=__get_class(computedClassObject,\"container\");$mp.data=Object.assign({},{$root:{c0:c0}})}`\n    //     )\n\n    assertCodegen('<p :class=\"index === currentIndex ? activeClass : itemClass\">7</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(index===currentIndex?activeClass:itemClass))}}\">7</view>');\n    assertCodegen('<p :class=\"\\'m-content-head-\\'+message.user\">8</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(\\'m-content-head-\\'+message.user))}}\">8</view>');\n    assertCodegen('<p :class=\"classStr1 || classStr2\" class=\"bg\">9</p>', '<view class=\"{{(((\\'bg\\')+\\' \\'+\\'_p\\')+\\' \\'+(classStr1||classStr2))}}\">9</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass, [flex, \\'flex-row\\']]\">10</p>', '<view class=\"{{(((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)+\\' \\'+((flex)+\\' \\'+\\'flex-row\\'))}}\">10</view>');\n    assertCodegen('<p class=\"a external-class c\" :class=\"class1\">hello world</p>', '<view class=\"{{(((((\\'a\\')+\\' \\'+\\'external-class\\')+\\' \\'+\\'c\\')+\\' \\'+\\'_p\\')+\\' \\'+class1)}}\">hello world</view>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate getPhoneNumber","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":87,"column":29,"index":9210},"line":87,"code":"  it('generate getPhoneNumber', () => {\n    assertCodegen('<button open-type=\"getPhoneNumber\" @getphonenumber=\"getPhoneNumber\">获取手机号</button>', '<button open-type=\"getAuthorize\" scope=\"phoneNumber\" data-event-opts=\"{{[[\\'getAuthorize\\',[[\\'$onAliGetAuthorize\\',[\\'getPhoneNumber\\',\\'$event\\']]]],[\\'error\\',[[\\'$onAliAuthError\\',[\\'getPhoneNumber\\',\\'$event\\']]]]]}}\" onGetAuthorize=\"__e\" onError=\"__e\">获取手机号</button>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with v-on directive","suites":["mp:compiler-mp-alipay"],"updatePoint":{"line":90,"column":41,"index":9649},"line":90,"code":"  it('generate events with v-on directive', () => {\n    assertCodegen('<uni-list-item title=\"标题文字\" note=\"描述信息\" show-extra-icon=\"true\" :extra-icon=\"{color: \\'#4cd964\\',size: \\'22\\',type: \\'spinner\\'}\"></uni-list-item>', '<uni-list-item vue-id=\"551070e6-1\" title=\"标题文字\" note=\"描述信息\" show-extra-icon=\"true\" extra-icon=\"{{({color:\\'#4cd964\\',size:\\'22\\',type:\\'spinner\\'})}}\" onVueInit=\"__l\"></uni-list-item>', 'with(this){}');\n    assertCodegen('<view @click=\"onClick\" @touchstart=\"onTouchStart\" @touchmove=\"onTouchMove\" @touchend=\"onTouchEnd\" @touchcancel=\"onTouchCancel\" @longtap=\"onLongTap\" @longpress=\"onLongPress\"></view>', '<view data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]],[\\'touchStart\\',[[\\'onTouchStart\\',[\\'$event\\']]]],[\\'touchMove\\',[[\\'onTouchMove\\',[\\'$event\\']]]],[\\'touchEnd\\',[[\\'onTouchEnd\\',[\\'$event\\']]]],[\\'touchCancel\\',[[\\'onTouchCancel\\',[\\'$event\\']]]],[\\'longTap\\',[[\\'onLongTap\\',[\\'$event\\']]]],[\\'longTap\\',[[\\'onLongPress\\',[\\'$event\\']]]]]}}\" onTap=\"__e\" onTouchStart=\"__e\" onTouchMove=\"__e\" onTouchEnd=\"__e\" onTouchCancel=\"__e\" onLongTap=\"__e\"></view>');\n    assertCodegen('<form @submit=\"formSubmit\" @reset=\"formReset\"/>', '<form data-event-opts=\"{{[[\\'submit\\',[[\\'formSubmit\\',[\\'$event\\']]]]]}}\" onSubmit=\"__e\" onReset=\"formReset\"></form>');\n    assertCodegen('<map @callouttap=\"calloutTap\" @controltap=\"controlTap\" @markertap=\"markerTap\" @regionchange=\"regionChange\" @tap=\"tap\"/>', '<map data-event-opts=\"{{[[\\'tap\\',[[\\'tap\\',[\\'$event\\']]]]]}}\" onCalloutTap=\"calloutTap\" onControlTap=\"controlTap\" onMarkerTap=\"markerTap\" onRegionChange=\"regionChange\" onTap=\"__e\"></map>');\n    assertCodegen('<view @transitionend=\"transitionEnd\" @animationstart=\"animationStart\" @animationiteration=\"animationIteration\" @animationend=\"animationEnd\" @firstappear=\"firstAppear\"/>', '<view data-event-opts=\"{{[[\\'transitionEnd\\',[[\\'transitionEnd\\',[\\'$event\\']]]],[\\'animationStart\\',[[\\'animationStart\\',[\\'$event\\']]]],[\\'animationIteration\\',[[\\'animationIteration\\',[\\'$event\\']]]],[\\'animationEnd\\',[[\\'animationEnd\\',[\\'$event\\']]]],[\\'firstAppear\\',[[\\'firstAppear\\',[\\'$event\\']]]]]}}\" onTransitionEnd=\"__e\" onAnimationStart=\"__e\" onAnimationIteration=\"__e\" onAnimationEnd=\"__e\" onFirstAppear=\"__e\"></view>');\n    assertCodegen('<scroll-view @scrolltoupper=\"scrollToUpper\" @scrolltolower=\"scrollToLower\"/>', '<scroll-view data-event-opts=\"{{[[\\'scrollToUpper\\',[[\\'scrollToUpper\\',[\\'$event\\']]]],[\\'scrollToLower\\',[[\\'scrollToLower\\',[\\'$event\\']]]]]}}\" onScrollToUpper=\"__e\" onScrollToLower=\"__e\"></scroll-view>');\n    assertCodegen('<movable-view @changeend=\"changeEnd\"/>', '<movable-view data-event-opts=\"{{[[\\'changeEnd\\',[[\\'changeEnd\\',[\\'$event\\']]]]]}}\" onChangeEnd=\"__e\"></movable-view>');\n    assertCodegen('<life-follow @close=\"close\"/>', '<life-follow data-event-opts=\"{{[[\\'close\\',[[\\'close\\',[\\'$event\\']]]]]}}\" onClose=\"__e\"></life-follow>');\n  });","file":"compiler-mp-alipay.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":17,"column":24,"index":469},"line":17,"code":"  it('generate component', () => {\n    assertCodegen('<login @getphonenumber=\"getphonenumbers\" @loaderror=\"loaderrors\"></login>', '<login data-event-opts=\"{{[[\\'getphonenumber\\',[[\\'getphonenumbers\\',[\\'$event\\']]]],[\\'loaderror\\',[[\\'loaderrors\\',[\\'$event\\']]]]]}}\" bindgetphonenumber=\"__e\" bindloaderror=\"__e\"></login>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":20,"column":20,"index":796},"line":20,"code":"  it('generate class', () => {\n    assertCodegen('<view class=\"a external-class c\" :class=\"class1\">hello world</view>', '<view class=\"{{[\\'a\\',\\'external-class\\',\\'c\\',class1]}}\">hello world</view>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":23,"column":30,"index":1013},"line":23,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"(item,index) in items\" :key=\"item.id\"></view></view>', '<view><block s-for=\"items trackBy item.id\" s-for-item=\"item\" s-for-index=\"index\"><view></view></block></view>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":26,"column":26,"index":1263},"line":26,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<foo><template slot-scope=\"bar\">{{ bar.foo }}</template></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><view>{{foo}}</view></foo>');\n    assertCodegen('<foo><view slot-scope=\"bar\">{{ bar.foo }}</view></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><view><view>{{foo}}</view></view></foo>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named scoped slot","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":30,"column":32,"index":1657},"line":30,"code":"  it('generate named scoped slot', () => {\n    assertCodegen('<foo><template slot=\"foo\" slot-scope=\"bar\">{{ bar.foo }}</template></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'foo\\']}}\"><view slot=\"foo\">{{foo}}</view></foo>');\n    assertCodegen('<foo><view slot=\"foo\" slot-scope=\"bar\">{{ bar.foo }}</view></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'foo\\']}}\"><view slot=\"foo\"><view>{{foo}}</view></view></foo>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with multiline v-if","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":34,"column":46,"index":2101},"line":34,"code":"  it('generate scoped slot with multiline v-if', () => {\n    assertCodegen('<foo><template v-if=\"\\nshow\\n\" slot-scope=\"bar\">{{ bar.foo }}</template></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><view><block s-if=\"{{show}}\">{{foo}}</block><block s-else><block></block></block></view></foo>');\n    assertCodegen('<foo><view v-if=\"\\nshow\\n\" slot=\"foo\" slot-scope=\"bar\">{{ bar.foo }}</view></foo>', '<foo vue-id=\"551070e6-1\" vue-slots=\"{{[\\'foo\\']}}\"><view slot=\"foo\"><block s-if=\"{{show}}\"><view>{{foo}}</view></block></view></foo>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":38,"column":26,"index":2638},"line":38,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<span><slot v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block s-if=\"{{$slots.default}}\"><slot var-user=\"user\"></slot></block><block s-else>{{user.lastName}}</block></label>');\n    assertCodegen('<span><slot name=\"header\" v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block s-if=\"{{$slots.header}}\"><slot name=\"header\" var-user=\"user\"></slot></block><block s-else>{{user.lastName}}</block></label>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with scopedSlotsCompiler: auto","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":42,"column":57,"index":3197},"line":42,"code":"  it('generate scoped slot with scopedSlotsCompiler: auto', () => {\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{item}}<template></my-component>', '<my-component vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><view>{{item}}</view></my-component>', 'with(this){}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{getValue(item)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><block><block s-if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\")):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"item\">{{getValue(item.text)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" vue-slots=\"{{[\\'default\\']}}\"><block><block s-if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\").text):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot :item=\"item\"><slot></view>', '<view><block s-if=\"{{$slots.default}}\"><slot var-item=\"item\"></slot></block><block s-else><slot></slot></block></view>', 'with(this){if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":item})}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot v-bind=\"object\"><slot></view>', '<view><block s-if=\"{{$slots.default}}\"><slot></slot></block><block s-else><slot></slot></block></view>', 'with(this){if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",object)}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate vue id","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":59,"column":21,"index":5179},"line":59,"code":"  it('generate vue id', () => {\n    assertCodegen('<Test/>', '<test vue-id=\"551070e6-1\"></test>');\n    assertCodegen('<Test a=\"a\">', '<test vue-id=\"551070e6-1\" a=\"a\"></test>');\n    assertCodegen('<view><Test v-for=\"item in items\" :key=\"item\"/></view>', '<view><block s-for=\"items trackBy item\" s-for-item=\"item\" s-for-index=\"__i0__\"><test vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\"></test></block></view>');\n    assertCodegen('<view><Test v-for=\"item in items\" :key=\"item\"><Test v-for=\"item in item.items\" :key=\"item\"></Test></Test></view>', '<view><block s-for=\"items trackBy item\" s-for-item=\"item\" s-for-index=\"__i0__\"><test vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" vue-slots=\"{{[\\'default\\']}}\"><block s-for=\"item.items trackBy item\" s-for-item=\"item\" s-for-index=\"__i1__\"><test vue-id=\"{{(\\'551070e6-2-\\'+__i0__+\\'-\\'+__i1__)+\\',\\'+(\\'551070e6-1-\\'+__i0__)}}\"></test></block></test></block></view>');\n    assertCodegen('<view><Test v-for=\"(item,index) in items\" :key=\"item\"><Test v-for=\"(item,index1) in item.items\" :key=\"item\"></Test></Test></view>', '<view><block s-for=\"items trackBy item\" s-for-item=\"item\" s-for-index=\"index\"><test vue-id=\"{{\\'551070e6-1-\\'+index}}\" vue-slots=\"{{[\\'default\\']}}\"><block s-for=\"item.items trackBy item\" s-for-item=\"item\" s-for-index=\"index1\"><test vue-id=\"{{(\\'551070e6-2-\\'+index+\\'-\\'+index1)+\\',\\'+(\\'551070e6-1-\\'+index)}}\"></test></block></test></block></view>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text trim","suites":["mp:compiler-mp-baidu"],"updatePoint":{"line":66,"column":24,"index":6588},"line":66,"code":"  it('generate text trim', () => {\n    assertCodegen('<text>\\nN: {{title}}\\n′</text>', '<text>{{\\'N: \\'+title+\"\\\\\\\\n′\"}}</text>');\n    assertCodegen('<text>我是第一行1\\n我的第二行</text>', '<text>我是第一行1\\n我的第二行</text>');\n    assertCodegen('<text>我是第一行2\\n我的第二行1{{title}}</text>', '<text>{{\"我是第一行2\\\\\\\\n我的第二行1\"+title}}</text>');\n    assertCodegen(`<text>我是第一行3\n    我的第二行2{{title}}</text>`, '<text>{{\"我是第一行3\\\\\\\\n    我的第二行2\"+title}}</text>');\n  });","file":"compiler-mp-baidu.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class","suites":["mp:compiler-mp-kuaishou"],"updatePoint":{"line":22,"column":20,"index":552},"line":22,"code":"  it('generate class', () => {\n    assertCodegen('<view class=\"a external-class c\" :class=\"class1\">hello world</view>', '<view class=\"{{[\\'a\\',\\'external-class\\',\\'c\\',class1]}}\">hello world</view>');\n  });","file":"compiler-mp-kuaishou.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-kuaishou"],"updatePoint":{"line":25,"column":26,"index":765},"line":25,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<foo><template slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n    assertCodegen('<foo><view slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n  });","file":"compiler-mp-kuaishou.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named scoped slot","suites":["mp:compiler-mp-kuaishou"],"updatePoint":{"line":33,"column":32,"index":1394},"line":33,"code":"  it('generate named scoped slot', () => {\n    assertCodegen('<foo><template slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n    assertCodegen('<foo><view slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n  });","file":"compiler-mp-kuaishou.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with multiline v-if","suites":["mp:compiler-mp-kuaishou"],"updatePoint":{"line":41,"column":46,"index":2027},"line":41,"code":"  it('generate scoped slot with multiline v-if', () => {\n    assertCodegen('<foo><template v-if=\"\\nshow\\n\" slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n    assertCodegen('<foo><view v-if=\"\\nshow\\n\" slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n  });","file":"compiler-mp-kuaishou.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-kuaishou"],"updatePoint":{"line":49,"column":26,"index":2677},"line":49,"code":"  it('generate scoped slot', () => {\n    assertCodegen( // TODO vue-id\n    '<span><slot v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block ks:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default user=\"{{user}}\" bind:__l=\"__l\"></scoped-slots-default></block><block ks:else>{{user.lastName}}</block></label>', function (res) {\n      expect(res.componentGenerics['scoped-slots-default']).toBe(true);\n    });\n    assertCodegen('<span><slot name=\"header\" v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block ks:if=\"{{$slots.header}}\"><slot name=\"header\"></slot><scoped-slots-header user=\"{{user}}\" bind:__l=\"__l\"></scoped-slots-header></block><block ks:else>{{user.lastName}}</block></label>', function (res) {\n      expect(res.componentGenerics['scoped-slots-header']).toBe(true);\n    });\n  });","file":"compiler-mp-kuaishou.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler-mp-lark"],"updatePoint":{"line":17,"column":30,"index":473},"line":17,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"(item,index) in items\" :key=\"index\"></view></view>', '<view><block tt:for=\"{{items}}\" tt:for-item=\"item\" tt:for-index=\"index\" tt:key=\"index\"><view></view></block></view>');\n  });","file":"compiler-mp-lark.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["mp:compiler-mp-lark"],"updatePoint":{"line":20,"column":18,"index":719},"line":20,"code":"  it('generate ref', () => {\n    assertCodegen('<my-component ref=\"ref\"></my-component>', '<my-component class=\"vue-ref\" vue-id=\"551070e6-1\" data-ref=\"ref\" bind:__l=\"__l\"></my-component>');\n  });","file":"compiler-mp-lark.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["mp:compiler-mp-lark"],"updatePoint":{"line":23,"column":28,"index":925},"line":23,"code":"  it('generate class binding', () => {\n    assertCodegen('<div :class=\"{ active: isActive }\">1</div>', '<view class=\"{{((\\'_div\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))}}\">1</view>');\n    assertCodegen('<p class=\"static\" :class=\"{ active: isActive, \\'text-danger\\': hasError }\">2</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+((hasError)?\\'text-danger\\':\\'\\'))}}\">2</view>');\n    assertCodegen('<p class=\"static\" :class=\"[activeClass, errorClass]\">3</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+activeClass)+\\' \\'+errorClass)}}\">3</view>');\n    assertCodegen('<p class=\"static\" :class=\"[isActive ? activeClass : \\'\\', errorClass]\">4</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(isActive?activeClass:\\'\\'))+\\' \\'+errorClass)}}\">4</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass]\">5</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)}}\">5</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive, disabled: isDisabled }, errorClass]\">52</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(((isActive)?\\'active\\':\\'\\')+\\' \\'+((isDisabled)?\\'disabled\\':\\'\\')))+\\' \\'+errorClass)}}\">52</view>');\n    assertCodegen('<div class=\"container\" :class=\"computedClassObject\">6</div>', '<view class=\"{{(((\\'container\\')+\\' \\'+\\'_div\\')+\\' \\'+computedClassObject)}}\">6</view>'); //     assertCodegen(\n    //       `<div class=\"container\" :class=\"computedClassObject\">6</div>`,\n    //       `<view class=\"{{$root.c0}}\">6</view>`,\n    //       `with(this){var c0=__get_class(computedClassObject,\"container\");$mp.data=Object.assign({},{$root:{c0:c0}})}`\n    //     )\n\n    assertCodegen('<p :class=\"index === currentIndex ? activeClass : itemClass\">7</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(index===currentIndex?activeClass:itemClass))}}\">7</view>');\n    assertCodegen('<p :class=\"\\'m-content-head-\\'+message.user\">8</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(\\'m-content-head-\\'+message.user))}}\">8</view>');\n    assertCodegen('<p :class=\"classStr1 || classStr2\" class=\"bg\">9</p>', '<view class=\"{{(((\\'bg\\')+\\' \\'+\\'_p\\')+\\' \\'+(classStr1||classStr2))}}\">9</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass, [flex, \\'flex-row\\']]\">10</p>', '<view class=\"{{(((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)+\\' \\'+((flex)+\\' \\'+\\'flex-row\\'))}}\">10</view>');\n    assertCodegen('<p class=\"a external-class c\" :class=\"class1\">hello world</p>', '<view class=\"{{(((((\\'a\\')+\\' \\'+\\'external-class\\')+\\' \\'+\\'c\\')+\\' \\'+\\'_p\\')+\\' \\'+class1)}}\">hello world</view>');\n  });","file":"compiler-mp-lark.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["mp:compiler-mp-lark"],"updatePoint":{"line":42,"column":31,"index":3640},"line":42,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<test v-show=\"shown\">hello world</test>', '<test bind:-data-custom-hidden=\"{{!(shown)}}\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">hello world</test>');\n  });","file":"compiler-mp-lark.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class","suites":["mp:compiler-mp-qq"],"updatePoint":{"line":17,"column":20,"index":459},"line":17,"code":"  it('generate class', () => {\n    assertCodegen('<view class=\"a external-class c\" :class=\"class1\">hello world</view>', '<view class=\"{{[\\'a\\',\\'external-class\\',\\'c\\',class1]}}\">hello world</view>');\n  });","file":"compiler-mp-qq.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate text trim","suites":["mp:compiler-mp-qq"],"updatePoint":{"line":20,"column":24,"index":670},"line":20,"code":"  it('generate text trim', () => {\n    assertCodegen('<text>\\nN: {{title}}\\n′</text>', '<text>{{\\'N: \\'+title+\"\\\\\\\\n′\"}}</text>');\n    assertCodegen('<text>我是第一行1\\n我的第二行</text>', '<text>我是第一行1\\n我的第二行</text>');\n    assertCodegen('<text>我是第一行2\\n我的第二行1{{title}}</text>', '<text>{{\"我是第一行2\\\\\\\\n我的第二行1\"+title}}</text>');\n    assertCodegen(`<text>我是第一行3\n    我的第二行2{{title}}</text>`, '<text>{{\"我是第一行3\\\\\\\\n    我的第二行2\"+title}}</text>');\n  });","file":"compiler-mp-qq.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler-mp-toutiao"],"updatePoint":{"line":17,"column":30,"index":479},"line":17,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"(item,index) in items\" :key=\"index\"></view></view>', '<view><block tt:for=\"{{items}}\" tt:for-item=\"item\" tt:for-index=\"index\" tt:key=\"index\"><view></view></block></view>');\n  });","file":"compiler-mp-toutiao.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["mp:compiler-mp-toutiao"],"updatePoint":{"line":20,"column":18,"index":725},"line":20,"code":"  it('generate ref', () => {\n    assertCodegen('<my-component ref=\"ref\"></my-component>', '<my-component class=\"vue-ref\" vue-id=\"551070e6-1\" data-ref=\"ref\" bind:__l=\"__l\"></my-component>');\n  });","file":"compiler-mp-toutiao.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["mp:compiler-mp-toutiao"],"updatePoint":{"line":23,"column":28,"index":931},"line":23,"code":"  it('generate class binding', () => {\n    assertCodegen('<div :class=\"{ active: isActive }\">1</div>', '<view class=\"{{((\\'_div\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))}}\">1</view>');\n    assertCodegen('<p class=\"static\" :class=\"{ active: isActive, \\'text-danger\\': hasError }\">2</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+((hasError)?\\'text-danger\\':\\'\\'))}}\">2</view>');\n    assertCodegen('<p class=\"static\" :class=\"[activeClass, errorClass]\">3</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+activeClass)+\\' \\'+errorClass)}}\">3</view>');\n    assertCodegen('<p class=\"static\" :class=\"[isActive ? activeClass : \\'\\', errorClass]\">4</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(isActive?activeClass:\\'\\'))+\\' \\'+errorClass)}}\">4</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass]\">5</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)}}\">5</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive, disabled: isDisabled }, errorClass]\">52</p>', '<view class=\"{{((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+(((isActive)?\\'active\\':\\'\\')+\\' \\'+((isDisabled)?\\'disabled\\':\\'\\')))+\\' \\'+errorClass)}}\">52</view>');\n    assertCodegen('<div class=\"container\" :class=\"computedClassObject\">6</div>', '<view class=\"{{(((\\'container\\')+\\' \\'+\\'_div\\')+\\' \\'+computedClassObject)}}\">6</view>'); //     assertCodegen(\n    //       `<div class=\"container\" :class=\"computedClassObject\">6</div>`,\n    //       `<view class=\"{{$root.c0}}\">6</view>`,\n    //       `with(this){var c0=__get_class(computedClassObject,\"container\");$mp.data=Object.assign({},{$root:{c0:c0}})}`\n    //     )\n\n    assertCodegen('<p :class=\"index === currentIndex ? activeClass : itemClass\">7</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(index===currentIndex?activeClass:itemClass))}}\">7</view>');\n    assertCodegen('<p :class=\"\\'m-content-head-\\'+message.user\">8</p>', '<view class=\"{{((\\'_p\\')+\\' \\'+(\\'m-content-head-\\'+message.user))}}\">8</view>');\n    assertCodegen('<p :class=\"classStr1 || classStr2\" class=\"bg\">9</p>', '<view class=\"{{(((\\'bg\\')+\\' \\'+\\'_p\\')+\\' \\'+(classStr1||classStr2))}}\">9</view>');\n    assertCodegen('<p class=\"static\" :class=\"[{ active: isActive }, errorClass, [flex, \\'flex-row\\']]\">10</p>', '<view class=\"{{(((((\\'static\\')+\\' \\'+\\'_p\\')+\\' \\'+((isActive)?\\'active\\':\\'\\'))+\\' \\'+errorClass)+\\' \\'+((flex)+\\' \\'+\\'flex-row\\'))}}\">10</view>');\n    assertCodegen('<p class=\"a external-class c\" :class=\"class1\">hello world</p>', '<view class=\"{{(((((\\'a\\')+\\' \\'+\\'external-class\\')+\\' \\'+\\'c\\')+\\' \\'+\\'_p\\')+\\' \\'+class1)}}\">hello world</view>');\n  });","file":"compiler-mp-toutiao.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["mp:compiler-mp-toutiao"],"updatePoint":{"line":42,"column":31,"index":3646},"line":42,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<test v-show=\"shown\">hello world</test>', '<test bind:-data-custom-hidden=\"{{!(shown)}}\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">hello world</test>');\n  });","file":"compiler-mp-toutiao.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":22,"column":20,"index":548},"line":22,"code":"  it('generate class', () => {\n    assertCodegen('<view class=\"a external-class c\" :class=\"class1\">hello world</view>', '<view class=\"{{[\\'a\\',\\'external-class\\',\\'c\\',class1]}}\">hello world</view>');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":25,"column":26,"index":761},"line":25,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<foo><template slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n    assertCodegen('<foo><view slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n    assertCodegen('<uni-clientdb v-slot:default=\"{data}\"><uni-table><uni-tr><uni-th align=\"center\">日期</uni-th></uni-tr></uni-table></uni-clientdb>', '<uni-clientdb generic:scoped-slots-default=\"test-uni-clientdb-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></uni-clientdb>', function (res) {\n      expect(res.generic[0]).toBe('test-uni-clientdb-default');\n      const wxmlKey = Object.keys(res.files)[0];\n      expect(res.files[wxmlKey]).toBe('<uni-table vue-id=\"551070e6-2\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><uni-tr vue-id=\"{{(\\'551070e6-3\\')+\\',\\'+(\\'551070e6-2\\')}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><uni-th vue-id=\"{{(\\'551070e6-4\\')+\\',\\'+(\\'551070e6-3\\')}}\" align=\"center\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">日期</uni-th></uni-tr></uni-table>');\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate string express with escape quote","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":38,"column":47,"index":2303},"line":38,"code":"  it('generate string express with escape quote', () => {\n    assertCodegen('<view :data-text=\"text+\\'\\\\\\'\\'\"></view>', '<view data-text=\"{{$root.a0}}\"></view>', 'with(this){var a0=text+\"\\'\";$mp.data=Object.assign({},{$root:{a0:a0}})}');\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view :data-text=\"`${text}\\'`\"></view>', '<view data-text=\"{{$root.a0}}\"></view>',\n    /* eslint-disable no-template-curly-in-string */\n    'with(this){var a0=`${text}\\'`;$mp.data=Object.assign({},{$root:{a0:a0}})}');\n    assertCodegen('<view>{{text+\\'\\\\\\'\\'}}</view>', '<view>{{$root.t0}}</view>', 'with(this){var t0=text+\"\\'\";$mp.data=Object.assign({},{$root:{t0:t0}})}');\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view>{{`${text}\\'`}}</view>', '<view>{{$root.t0}}</view>',\n    /* eslint-disable no-template-curly-in-string */\n    'with(this){var t0=`${text}\\'`;$mp.data=Object.assign({},{$root:{t0:t0}})}');\n    assertCodegen(\n    /* eslint-disable no-template-curly-in-string */\n    '<view>{{`${text}\"`}}</view>', '<view>{{text+\\'\"\\'}}</view>');\n    assertCodegen('<view>{{text+\"\\\\\"\"}}</view>', '<view>{{$root.t0}}</view>', 'with(this){var t0=text+\"\\\\\"\";$mp.data=Object.assign({},{$root:{t0:t0}})}');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named scoped slot","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":56,"column":32,"index":3550},"line":56,"code":"  it('generate named scoped slot', () => {\n    assertCodegen('<foo><template slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n    assertCodegen('<foo><view slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with multiline v-if","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":64,"column":46,"index":4235},"line":64,"code":"  it('generate scoped slot with multiline v-if', () => {\n    assertCodegen('<foo><template v-if=\"\\nshow\\n\" slot-scope=\"{bar}\">{{ bar.foo }}</template></foo>', '<foo generic:scoped-slots-default=\"test-foo-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-default');\n    });\n    assertCodegen('<foo><view v-if=\"\\nshow\\n\" slot=\"foo\" slot-scope=\"{bar}\">{{ bar.foo }}</view></foo>', '<foo generic:scoped-slots-foo=\"test-foo-foo\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'foo\\']}}\"></foo>', function (res) {\n      expect(res.generic[0]).toBe('test-foo-foo');\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with scopedSlotsCompiler: auto","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":72,"column":57,"index":4968},"line":72,"code":"  it('generate scoped slot with scopedSlotsCompiler: auto', () => {\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{item}}<template></my-component>', '<my-component generic:scoped-slots-default=\"test-my-component-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></my-component>', 'with(this){}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\"><view @click=\"getValue(item)\">{{item}}</view><template></my-component>', '<my-component generic:scoped-slots-default=\"test-my-component-default\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"></my-component>', 'with(this){}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{getValue(item)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\")):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<my-component><template v-slot=\"item\">{{getValue(item.text)}}<template></my-component>', '<my-component scoped-slots-compiler=\"augmented\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\").text):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot :item=\"item\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{item}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view>', 'with(this){if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":item})}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><view v-for=\"(item,index) in list\" :key=\"index\"><slot :item=\"item\"><slot></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{item.$orig}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view></block></view>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":$orig})}return{$orig:$orig}});$mp.data=Object.assign({},{$root:{l0:l0}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><view v-for=\"(item,index) in list\" :key=\"index\"><slot :item=\"item\" :test=\"test\"><slot></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{item.$orig}}\" test=\"{{test}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view></block></view>', 'with(this){var l0=__map(list,function(item,index){var $orig=__get_orig(item);if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":$orig,\"test\":test})}return{$orig:$orig}});$mp.data=Object.assign({},{$root:{l0:l0}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><view v-for=\"(item,index) in list\" :key=\"index\"><slot :item=\"item\" :test=\"test()\"><slot></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{item.$orig}}\" test=\"{{$root.m0}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view></block></view>', 'with(this){var m0=test();var l0=__map(list,function(item,index){var $orig=__get_orig(item);if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":$orig,\"test\":m0})}return{$orig:$orig}});$mp.data=Object.assign({},{$root:{m0:m0,l0:l0}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><view v-for=\"(item,index) in list\" :key=\"index\"><slot :item=\"item\" :test=\"test()+item\"><slot></view></view>', '<view><block wx:for=\"{{$root.l0}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{item.$orig}}\" test=\"{{$root.m0+item.$orig}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view></block></view>', 'with(this){var m0=test();var l0=__map(list,function(item,index){var $orig=__get_orig(item);if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":$orig,\"test\":m0+$orig})}return{$orig:$orig}});$mp.data=Object.assign({},{$root:{m0:m0,l0:l0}})}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot :item=\"getValue(item)\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default item=\"{{$root.m0}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else><slot></slot></block></view>', 'with(this){var m0=getValue(item);$mp.data=Object.assign({},{$root:{m0:m0}});if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",{\"item\":m0})}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n    assertCodegen('<view><slot v-bind=\"object\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else><slot></slot></block></view>', 'with(this){if($scope.data.scopedSlotsCompiler===\"augmented\"){$setScopedSlotsParams(\"default\",object)}}', {\n      scopedSlotsCompiler: 'auto'\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot with scopedSlotsCompiler: augmented","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":107,"column":62,"index":11114},"line":107,"code":"  it('generate scoped slot with scopedSlotsCompiler: augmented', () => {\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{getValue(item)}}<template></my-component>', '<my-component vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\")):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{item}}<template></my-component>', '<my-component vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?$getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\"):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<my-component><template v-slot=\"item\">{{getValue(item.text)}}<template></my-component>', '<my-component vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-1\",\"default\").text):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<my-component1><my-component2><template v-slot=\"{item}\">{{getValue(item)}}<template></my-component2></my-component1>', '<my-component1 vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><my-component2 vue-id=\"{{(\\'551070e6-2\\')+\\',\\'+(\\'551070e6-1\\')}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}</block></block></my-component2></my-component1>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-2\");var m1=m0?getValue($getScopedSlotsParams(\"551070e6-2\",\"default\",\"item\")):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1}})}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<view><slot :item=\"item\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else><slot></slot></block></view>', 'with(this){{$setScopedSlotsParams(\"default\",{\"item\":item})}}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<view><slot :item=\"getValue(item)\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else><slot></slot></block></view>', 'with(this){{$setScopedSlotsParams(\"default\",{\"item\":getValue(item)})}}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<view><slot v-bind=\"object\"><slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else><slot></slot></block></view>', 'with(this){{$setScopedSlotsParams(\"default\",object)}}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n    assertCodegen('<my-component><template v-slot=\"{item}\">{{item}}<my-component><template v-slot=\"{item}\">{{item}}<template></my-component><template></my-component>', '<my-component vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m0}}\">{{$root.m1}}<my-component vue-id=\"{{(\\'551070e6-2\\')+\\',\\'+(\\'551070e6-1\\')}}\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><block><block wx:if=\"{{$root.m2}}\">{{$root.m3}}</block></block></my-component></block></block></my-component>', 'with(this){var m0=$hasScopedSlotsParams(\"551070e6-1\");var m1=m0?$getScopedSlotsParams(\"551070e6-1\",\"default\",\"item\"):null;var m2=$hasScopedSlotsParams(\"551070e6-2\");var m3=m2?$getScopedSlotsParams(\"551070e6-2\",\"default\",\"item\"):null;$mp.data=Object.assign({},{$root:{m0:m0,m1:m1,m2:m2,m3:m3}})}', {\n      scopedSlotsCompiler: 'augmented'\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate scoped slot","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":133,"column":26,"index":15027},"line":133,"code":"  it('generate scoped slot', () => {\n    assertCodegen('<slot v-bind:user=\"user\"></slot>', '<slot></slot><scoped-slots-default user=\"{{user}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default>', function (res) {\n      expect(res.componentGenerics['scoped-slots-default']).toBe(true);\n    });\n    assertCodegen( // TODO vue-id\n    '<span><slot v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block wx:if=\"{{$slots.default}}\"><slot></slot><scoped-slots-default user=\"{{user}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-default></block><block wx:else>{{user.lastName}}</block></label>', function (res) {\n      expect(res.componentGenerics['scoped-slots-default']).toBe(true);\n    });\n    assertCodegen('<span><slot name=\"header\" v-bind:user=\"user\">{{ user.lastName }}</slot></span>', '<label class=\"_span\"><block wx:if=\"{{$slots.header}}\"><slot name=\"header\"></slot><scoped-slots-header user=\"{{user}}\" class=\"scoped-ref\" bind:__l=\"__l\"></scoped-slots-header></block><block wx:else>{{user.lastName}}</block></label>', function (res) {\n      expect(res.componentGenerics['scoped-slots-header']).toBe(true);\n    });\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate page-meta","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":145,"column":24,"index":16187},"line":145,"code":"  it('generate page-meta', () => {\n    assertCodegen( // TODO vue-id\n    '<view><page-meta/><view><button></button></view></view>', '<page-meta></page-meta><view><button></button></view>');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-slot","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":149,"column":21,"index":16380},"line":149,"code":"  it('generate v-slot', () => {\n    assertCodegen(`<view>\n\t\t<slot-comp v-slot:test=\"{label}\">\n\t\t\t<view>{{label}}</view>\n\t\t</slot-comp>\n\t\t<slot-comp v-slot:test=\"{label}\">\n\t\t\t<view>{{label}}</view>\n\t\t</slot-comp>\n\t\t<slot-comp v-slot:test=\"{label}\">\n\t\t\t<view>{{label}}</view>\n\t\t</slot-comp>\n\t\t<slot-comp v-slot:test=\"{label}\">\n\t\t\t<view class=\"red\">{{label}}</view>\n\t\t</slot-comp>\n\t</view>`, '<view><slot-comp generic:scoped-slots-test=\"test-slot-comp-test\" data-vue-generic=\"scoped\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'test\\']}}\"></slot-comp><slot-comp generic:scoped-slots-test=\"test-slot-comp-test1\" data-vue-generic=\"scoped\" vue-id=\"551070e6-2\" bind:__l=\"__l\" vue-slots=\"{{[\\'test\\']}}\"></slot-comp><slot-comp generic:scoped-slots-test=\"test-slot-comp-test2\" data-vue-generic=\"scoped\" vue-id=\"551070e6-3\" bind:__l=\"__l\" vue-slots=\"{{[\\'test\\']}}\"></slot-comp><slot-comp generic:scoped-slots-test=\"test-slot-comp-test3\" data-vue-generic=\"scoped\" vue-id=\"551070e6-4\" bind:__l=\"__l\" vue-slots=\"{{[\\'test\\']}}\"></slot-comp></view>');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ObjectExpression","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":165,"column":31,"index":17442},"line":165,"code":"  it('generate ObjectExpression', () => {\n    assertCodegen('<view v-for=\"(item,key) in {x:0}\" :key=\"key\">{{item}}</view>', '<block wx:for=\"{{({x:0})}}\" wx:for-item=\"item\" wx:for-index=\"key\" wx:key=\"key\"><view>{{item}}</view></block>');\n    assertCodegen('<template v-for=\"(item, key) in { list1, list2 }\"></template>', '<block wx:for=\"{{({list1,list2})}}\" wx:for-item=\"item\" wx:for-index=\"key\"></block>');\n    assertCodegen('<test :obj=\"{x:0}\"></test>', '<test vue-id=\"551070e6-1\" obj=\"{{({x:0})}}\" bind:__l=\"__l\"></test>');\n    assertCodegen('<test :obj=\"{\\'x\\':0}\"></test>', '<test vue-id=\"551070e6-1\" obj=\"{{$root.a0}}\" bind:__l=\"__l\"></test>', 'with(this){var a0={\"x\":0};$mp.data=Object.assign({},{$root:{a0:a0}})}');\n    assertCodegen('<test :obj=\"{x:{x:0}}\"></test>', '<test vue-id=\"551070e6-1\" obj=\"{{$root.a0}}\" bind:__l=\"__l\"></test>', 'with(this){var a0={x:{x:0}};$mp.data=Object.assign({},{$root:{a0:a0}})}');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["mp:compiler-mp-weixin"],"updatePoint":{"line":172,"column":31,"index":18370},"line":172,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<test v-show=\"shown\">hello world</test>', '<test data-custom-hidden=\"{{!(shown)}}\" vue-id=\"551070e6-1\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\">hello world</test>');\n  });","file":"compiler-mp-weixin.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler-quickapp-webview"],"updatePoint":{"line":17,"column":30,"index":491},"line":17,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"(item,index) in items\" :key=\"index\"></view></view>', '<view><block qa:for=\"{{items}}\" qa:for-item=\"item\" qa:for-index=\"index\" qa:key=\"index\"><view></view></block></view>');\n  });","file":"compiler-quickapp-webview.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if with v-else directive","suites":["mp:compiler-quickapp-webview"],"updatePoint":{"line":20,"column":46,"index":765},"line":20,"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else-if=\"hide\">world</view><view v-else>bye</view></view>', '<view><block qa:if=\"{{show}}\"><view>hello</view></block><block qa:else><block qa:if=\"{{hide}}\"><view>world</view></block><block qa:else><view>bye</view></block></block></view>');\n  });","file":"compiler-quickapp-webview.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters","suites":["mp:compiler"],"updatePoint":{"line":24,"column":22,"index":795},"line":24,"code":"  it('generate filters', () => {\n    assertCodegen('<view :id=\"a | b | c\">text {{ d | e | f }} text</view>', '<view id=\"{{$root.f0}}\">{{\"text \"+$root.f1+\" text\"}}</view>', 'with(this){var f0=_f(\"c\")(_f(\"b\")(a));var f1=_f(\"f\")(_f(\"e\")(d));$mp.data=Object.assign({},{$root:{f0:f0,f1:f1}})}');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate filters with no arguments","suites":["mp:compiler"],"updatePoint":{"line":27,"column":40,"index":1110},"line":27,"code":"  it('generate filters with no arguments', () => {\n    assertCodegen('<view>{{ d | e() }}</view>', '<view>{{$root.f0}}</view>', 'with(this){var f0=_f(\"e\")(d);$mp.data=Object.assign({},{$root:{f0:f0}})}');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-for directive","suites":["mp:compiler"],"updatePoint":{"line":30,"column":30,"index":1311},"line":30,"code":"  it('generate v-for directive', () => {\n    assertCodegen('<view><view v-for=\"item in items\" :key=\"item.uid\"></view></view>', '<view><block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\" wx:key=\"uid\"><view></view></block></view>'); // iterator syntax\n\n    assertCodegen('<view><view v-for=\"(item, i) in items\"></view></view>', '<view><block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"i\"><view></view></block></view>'); // TODO\n    // assertCodegen(\n    //   '<view><view v-for=\"(item, key, index) in items\"></view></view>',\n    //   `with(this){return _c('view',_l((items),function(item,key,index){return _c('view')}),0)}`\n    // )\n    // destructuring\n    // TODO\n    // assertCodegen(\n    //   '<view><view v-for=\"{ a, b } in items\"></view></view>',\n    //   `<view><view wx:for=\"{{items}}\" wx:for-item=\"{{a}}\" wx:for-index=\"{{b}}\"></view></view>`\n    // )\n    // TODO\n    // assertCodegen(\n    //   '<view><view v-for=\"({ a, b }, key, index) in items\"></view></view>',\n    //   `with(this){return _c('view',_l((items),function({ a, b },key,index){return _c('view')}),0)}`\n    // )\n    // v-for with extra element\n\n    assertCodegen('<view><view></view><view v-for=\"item in items\"></view></view>', '<view><view></view><block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view></view></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-if directive","suites":["mp:compiler"],"updatePoint":{"line":53,"column":29,"index":2658},"line":53,"code":"  it('generate v-if directive', () => {\n    assertCodegen('<view v-if=\"show\">hello</view>', '<block wx:if=\"{{show}}\"><view>hello</view></block>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else directive","suites":["mp:compiler"],"updatePoint":{"line":56,"column":31,"index":2813},"line":56,"code":"  it('generate v-else directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else>world</view></view>', '<view><block wx:if=\"{{show}}\"><view>hello</view></block><block wx:else><view>world</view></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if directive","suites":["mp:compiler"],"updatePoint":{"line":59,"column":34,"index":3063},"line":59,"code":"  it('generate v-else-if directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else-if=\"hide\">world</view></view>', '<view><block wx:if=\"{{show}}\"><view>hello</view></block><block wx:else><block wx:if=\"{{hide}}\"><view>world</view></block></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-else-if with v-else directive","suites":["mp:compiler"],"updatePoint":{"line":62,"column":46,"index":3367},"line":62,"code":"  it('generate v-else-if with v-else directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else-if=\"hide\">world</view><view v-else>bye</view></view>', '<view><block wx:if=\"{{show}}\"><view>hello</view></block><block wx:else><block wx:if=\"{{hide}}\"><view>world</view></block><block wx:else><view>bye</view></block></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multi v-else-if with v-else directive","suites":["mp:compiler"],"updatePoint":{"line":65,"column":52,"index":3739},"line":65,"code":"  it('generate multi v-else-if with v-else directive', () => {\n    assertCodegen('<view><view v-if=\"show\">hello</view><view v-else-if=\"hide\">world</view><view v-else-if=\"3\">elseif</view><view v-else>bye</view></view>', '<view><block wx:if=\"{{show}}\"><view>hello</view></block><block wx:else><block wx:if=\"{{hide}}\"><view>world</view></block><block wx:else><block wx:if=\"{{3}}\"><view>elseif</view></block><block wx:else><view>bye</view></block></block></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref","suites":["mp:compiler"],"updatePoint":{"line":68,"column":18,"index":4181},"line":68,"code":"  it('generate ref', () => {\n    assertCodegen('<view ref=\"component1\"></view>', '<view data-ref=\"component1\" class=\"vue-ref\"></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate ref on v-for","suites":["mp:compiler"],"updatePoint":{"line":71,"column":27,"index":4333},"line":71,"code":"  it('generate ref on v-for', () => {\n    assertCodegen('<ul><li v-for=\"item in items\" ref=\"component1\"></li></ul>', '<view class=\"_ul\"><block wx:for=\"{{items}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\"><view data-ref=\"component1\" class=\"_li vue-ref-in-for\"></view></block></view>');\n  }); // it('generate v-bind directive', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-model directive","suites":["mp:compiler"],"updatePoint":{"line":92,"column":32,"index":5213},"line":92,"code":"  it('generate v-model directive', () => {\n    assertCodegen('<input v-model=\"test\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]]]]]}}\" value=\"{{test}}\" bindinput=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive","suites":["mp:compiler"],"updatePoint":{"line":95,"column":42,"index":5448},"line":95,"code":"  it('generate multiline v-model directive', () => {\n    assertCodegen('<input v-model=\"\\n test \\n\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]]]]]}}\" value=\"{{test}}\" bindinput=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate multiline v-model directive on custom component","suites":["mp:compiler"],"updatePoint":{"line":98,"column":62,"index":5709},"line":98,"code":"  it('generate multiline v-model directive on custom component', () => {\n    assertCodegen('<my-component v-model=\"\\n test \\n\" />', '<my-component bind:input=\"__e\" vue-id=\"551070e6-1\" value=\"{{test}}\" data-event-opts=\"{{[[\\'^input\\',[[\\'__set_model\\',[\\'\\',\\'test\\',\\'$event\\',[]]]]]]}}\" bind:__l=\"__l\"></my-component>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate template tag","suites":["mp:compiler"],"updatePoint":{"line":101,"column":27,"index":6002},"line":101,"code":"  it('generate template tag', () => {\n    assertCodegen('<view><template><view>{{hello}}</view></template></view>', '<view><view>{{hello}}</view></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate single slot","suites":["mp:compiler"],"updatePoint":{"line":104,"column":26,"index":6163},"line":104,"code":"  it('generate single slot', () => {\n    assertCodegen('<view><slot></slot></view>', '<view><slot></slot></view>');\n    assertCodegen('<view><slot>default</slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else>default</block></view>');\n    assertCodegen('<view><slot>{{hello}}</slot></view>', '<view><block wx:if=\"{{$slots.default}}\"><slot></slot></block><block wx:else>{{hello}}</block></view>');\n    assertCodegen('<view><slot name=\"default\"></slot></view>', '<view><slot></slot></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate named slot","suites":["mp:compiler"],"updatePoint":{"line":110,"column":25,"index":6698},"line":110,"code":"  it('generate named slot', () => {\n    assertCodegen('<view><slot name=\"one\"></slot></view>', '<view><slot name=\"one\"></slot></view>');\n  }); // it('generate slot fallback content', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate slot target","suites":["mp:compiler"],"updatePoint":{"line":119,"column":26,"index":7067},"line":119,"code":"  it('generate slot target', () => {\n    assertCodegen('<view slot=\"one\">hello world</view>', '<view slot=\"one\">hello world</view>');\n    assertCodegen('<view slot=\"default\">hello world</view>', '<view>hello world</view>');\n  }); // it('generate scoped slot', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate class binding","suites":["mp:compiler"],"updatePoint":{"line":153,"column":28,"index":8882},"line":153,"code":"  it('generate class binding', () => {\n    // static\n    assertCodegen('<view class=\"class1\">hello world</view>', '<view class=\"class1\">hello world</view>'); // dynamic\n\n    assertCodegen('<view :class=\"class1\">hello world</view>', '<view class=\"{{[class1]}}\">hello world</view>'); //     assertCodegen(\n    //       '<view :class=\"class1\">hello world</view>',\n    //       `<view class=\"{{$root.c0}}\">hello world</view>`,\n    //       `with(this){var c0=__get_class(class1);$mp.data=Object.assign({},{$root:{c0:c0}})}`\n    //     )\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate staticStyle","suites":["mp:compiler"],"updatePoint":{"line":163,"column":26,"index":9419},"line":163,"code":"  it('generate staticStyle', () => {\n    assertCodegen('<view style=\"height:400upx\">hello world</view>', '<view style=\"height:400rpx;\">hello world</view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate style binding","suites":["mp:compiler"],"updatePoint":{"line":166,"column":28,"index":9584},"line":166,"code":"  it('generate style binding', () => {\n    assertCodegen('<view :style=\"error\">hello world</view>', '<view style=\"{{(error)}}\">hello world</view>'); //     assertCodegen(\n    //       '<view :style=\"error\">hello world</view>',\n    //       `<view style=\"{{$root.s0}}\">hello world</view>`,\n    //       `with(this){var s0=__get_style(error);$mp.data=Object.assign({},{$root:{s0:s0}})}`\n    //     )\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate v-show directive","suites":["mp:compiler"],"updatePoint":{"line":173,"column":31,"index":9991},"line":173,"code":"  it('generate v-show directive', () => {\n    assertCodegen('<view v-show=\"shown\">hello world</view>', '<view hidden=\"{{!(shown)}}\">hello world</view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate DOM props with v-bind directive","suites":["mp:compiler"],"updatePoint":{"line":176,"column":46,"index":10166},"line":176,"code":"  it('generate DOM props with v-bind directive', () => {\n    // input + value\n    assertCodegen('<input :value=\"msg\">', '<input value=\"{{msg}}\"/>'); // non input\n\n    assertCodegen('<view :value=\"msg\"/>', '<view value=\"{{msg}}\"></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate attrs with v-bind directive","suites":["mp:compiler"],"updatePoint":{"line":182,"column":42,"index":10407},"line":182,"code":"  it('generate attrs with v-bind directive', () => {\n    assertCodegen('<input :name=\"field1\">', '<input name=\"{{field1}}\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static attrs","suites":["mp:compiler"],"updatePoint":{"line":185,"column":27,"index":10526},"line":185,"code":"  it('generate static attrs', () => {\n    assertCodegen('<input name=\"field1\">', '<input name=\"field1\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with v-on directive","suites":["mp:compiler"],"updatePoint":{"line":188,"column":41,"index":10654},"line":188,"code":"  it('generate events with v-on directive', () => {\n    assertCodegen('<input @input=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with method call","suites":["mp:compiler"],"updatePoint":{"line":191,"column":38,"index":10849},"line":191,"code":"  it('generate events with method call', () => {\n    assertCodegen('<input @input=\"onInput($event);\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>'); // empty arguments\n\n    assertCodegen('<input @input=\"onInput();\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\']]]]}}\" bindinput=\"__e\"/>'); // without semicolon\n\n    assertCodegen('<input @input=\"onInput($event)\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>'); // multiple args\n\n    assertCodegen('<input @input=\"onInput($event, \\'abc\\', 5);\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\',\\'abc\\',5]]]]]}}\" bindinput=\"__e\"/>'); // expression in args\n\n    assertCodegen('<input @input=\"onInput($event, 2+2);\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\',2+2]]]]]}}\" bindinput=\"__e\"/>'); // v-for\n\n    assertCodegen('<view v-for=\"(item,index) in list\" :key=\"index\"><view @click=\"$test.test(item)\">test</view></view>', '<block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"index\" wx:key=\"index\"><view><view data-event-opts=\"{{[[\\'tap\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" data-event-params=\"{{({item})}}\" bindtap=\"__e\">test</view></view></block>', 'with(this){if(!_isMounted){e0=function($event,item){var _temp=arguments[arguments.length-1].currentTarget.dataset,_temp2=_temp.eventParams||_temp[\"event-params\"],item=_temp2.item;var _temp,_temp2;return $test.test(item)}}}'); // tricky symbols in args\n    //         assertCodegen(\n    //             `<input @input=\"onInput(');[\\\\'());');\">`,\n    //             `<input data-event-id=\"e0\" bindinput=\"__e\"/>`,\n    //             `with(this){if(!$mp.events){$mp.events=__get_event({\"e0\":{on:{\"input\":function($event){onInput(\");['());\")}}}})}}`\n    //         )\n  }); //     it('generate events with multiple statements', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers","suites":["mp:compiler"],"updatePoint":{"line":259,"column":44,"index":15890},"line":259,"code":"  it('generate events with generic modifiers', () => {\n    assertCodegen('<input @input.stop=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" catchinput=\"__e\"/>');\n    assertCodegen('<input @input.prevent=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>');\n    assertCodegen('<input @input.self=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>');\n  }); // GitHub Issues #5146","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with generic modifiers and keycode correct order","suites":["mp:compiler"],"updatePoint":{"line":265,"column":70,"index":16440},"line":265,"code":"  it('generate events with generic modifiers and keycode correct order', () => {\n    assertCodegen('<input @keydown.enter.prevent=\"onInput\">', '<input data-event-opts=\"{{[[\\'keydown\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindkeydown=\"__e\"/>');\n    assertCodegen('<input @keydown.enter.stop=\"onInput\">', '<input data-event-opts=\"{{[[\\'keydown\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" catchkeydown=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with mouse event modifiers","suites":["mp:compiler"],"updatePoint":{"line":269,"column":48,"index":16823},"line":269,"code":"  it('generate events with mouse event modifiers', () => {\n    assertCodegen('<input @click.ctrl=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n    assertCodegen('<input @click.shift=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n    assertCodegen('<input @click.alt=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n    assertCodegen('<input @click.meta=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n    assertCodegen('<input @click.exact=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n    assertCodegen('<input @click.ctrl.exact=\"onClick\">', '<input data-event-opts=\"{{[[\\'tap\\',[[\\'onClick\\',[\\'$event\\']]]]]}}\" bindtap=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with multiple modifiers","suites":["mp:compiler"],"updatePoint":{"line":277,"column":45,"index":17738},"line":277,"code":"  it('generate events with multiple modifiers', () => {\n    assertCodegen('<input @input.stop.prevent.self=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" catchinput=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture modifier","suites":["mp:compiler"],"updatePoint":{"line":280,"column":43,"index":17957},"line":280,"code":"  it('generate events with capture modifier', () => {\n    assertCodegen('<input @input.capture=\"onInput\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" capture-bind:input=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once modifier","suites":["mp:compiler"],"updatePoint":{"line":283,"column":40,"index":18171},"line":283,"code":"  it('generate events with once modifier', () => {\n    assertCodegen('<input @input.once=\"onInput\">', '<input data-event-opts=\"{{[[\\'~input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with capture and once modifier","suites":["mp:compiler"],"updatePoint":{"line":286,"column":52,"index":18386},"line":286,"code":"  it('generate events with capture and once modifier', () => {\n    assertCodegen('<input @input.capture.once=\"onInput\">', '<input data-event-opts=\"{{[[\\'~input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" capture-bind:input=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with once and capture modifier","suites":["mp:compiler"],"updatePoint":{"line":289,"column":52,"index":18618},"line":289,"code":"  it('generate events with once and capture modifier', () => {\n    assertCodegen('<input @input.once.capture=\"onInput\">', '<input data-event-opts=\"{{[[\\'~input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" capture-bind:input=\"__e\"/>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline statement","suites":["mp:compiler"],"updatePoint":{"line":292,"column":43,"index":18841},"line":292,"code":"  it('generate events with inline statement', () => {\n    assertCodegen('<input @input=\"current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=function($event){current++}}}');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate events with inline function expression","suites":["mp:compiler"],"updatePoint":{"line":295,"column":53,"index":19111},"line":295,"code":"  it('generate events with inline function expression', () => {\n    // normal function\n    assertCodegen('<input @input=\"function () { current++ }\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=function(){current++}}}'); // normal named function\n\n    assertCodegen('<input @input=\"function fn () { current++ }\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=function fn(){current++}}}'); // arrow with no args\n\n    assertCodegen('<input @input=\"()=>current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=()=>current++}}'); // arrow with parens, single arg\n\n    assertCodegen('<input @input=\"(e) => current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=e=>current++}}'); // arrow with parens, multi args\n\n    assertCodegen('<input @input=\"(a, b, c) => current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=(a,b,c)=>current++}}'); // arrow with destructuring\n\n    assertCodegen('<input @input=\"({ a, b }) => current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=({a,b})=>current++}}'); // arrow single arg no parens\n\n    assertCodegen('<input @input=\"e=>current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=e=>current++}}'); // with modifiers\n\n    assertCodegen('<input @input.stop=\"e=>current++\">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'e0\\',[\\'$event\\']]]]]}}\" catchinput=\"__e\"/>', 'with(this){if(!_isMounted){e0=function($event){$event.stopPropagation();return(e=>current++)($event)}}}');\n  }); // #3893","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should not treat handler with unexpected whitespace as inline statement","suites":["mp:compiler"],"updatePoint":{"line":314,"column":77,"index":21092},"line":314,"code":"  it('should not treat handler with unexpected whitespace as inline statement', () => {\n    assertCodegen('<input @input=\" onInput \">', '<input data-event-opts=\"{{[[\\'input\\',[[\\'onInput\\',[\\'$event\\']]]]]}}\" bindinput=\"__e\"/>');\n  }); //     it('generate unhandled events', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component","suites":["mp:compiler"],"updatePoint":{"line":333,"column":24,"index":22034},"line":333,"code":"  it('generate component', () => {\n    assertCodegen('<my-component name=\"mycomponent1\" :msg=\"msg\" @notify=\"onNotify\"><div>hi</div></my-component>', '<my-component vue-id=\"551070e6-1\" name=\"mycomponent1\" msg=\"{{msg}}\" data-event-opts=\"{{[[\\'^notify\\',[[\\'onNotify\\']]]]}}\" bind:notify=\"__e\" bind:__l=\"__l\" vue-slots=\"{{[\\'default\\']}}\"><view class=\"_div\">hi</view></my-component>' // `with(this){if(!$mp.events){$mp.events=__get_event({\"e0\":{on:{\"notify\":onNotify},component:true}})}}`\n    );\n  }); //     it('generate svg component with children', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate is attribute","suites":["mp:compiler"],"updatePoint":{"line":343,"column":27,"index":22804},"line":343,"code":"  it('generate is attribute', () => {\n    assertCodegen('<div is=\"component1\"></div>', '<component1 vue-id=\"551070e6-1\" bind:__l=\"__l\"></component1>'); //         assertCodegen(\n    //             '<div :is=\"component1\"></div>',\n    //             '<view is=\"{{component1}}\"></view>'\n    //         )\n    // maybe a component and normalize type should be 1\n\n    assertCodegen('<div><div is=\"component1\"></div></div>', '<view class=\"_div\"><component1 vue-id=\"551070e6-1\" bind:__l=\"__l\"></component1></view>');\n  }); //     it('generate component with inline-template', () => {","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate static trees inside v-for","suites":["mp:compiler"],"updatePoint":{"line":372,"column":40,"index":24440},"line":372,"code":"  it('generate static trees inside v-for', () => {\n    // TODO vue的数字 item 是从1，小程序是从0，后续考虑抹平差异\n    assertCodegen('<div><div v-for=\"i in 10\"><p><span></span></p></div></div>', '<view class=\"_div\"><block wx:for=\"{{10}}\" wx:for-item=\"i\" wx:for-index=\"__i0__\"><view class=\"_div\"><view class=\"_p\"><label class=\"_span\"></label></view></view></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with v-for","suites":["mp:compiler"],"updatePoint":{"line":376,"column":35,"index":24795},"line":376,"code":"  it('generate component with v-for', () => {\n    // normalize type: 2\n    assertCodegen('<div><child></child><template v-for=\"item in list\">{{ item }}</template></div>', '<view class=\"_div\"><child vue-id=\"551070e6-1\" bind:__l=\"__l\"></child><block wx:for=\"{{list}}\" wx:for-item=\"item\" wx:for-index=\"__i0__\">{{item}}</block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate component with comment","suites":["mp:compiler"],"updatePoint":{"line":380,"column":37,"index":25137},"line":380,"code":"  it('generate component with comment', () => {\n    assertCodegen('<div><!--comment--></div>', '<view class=\"_div\"></view>');\n  }); // #6150","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"generate comments with special characters","suites":["mp:compiler"],"updatePoint":{"line":384,"column":47,"index":25289},"line":384,"code":"  it('generate comments with special characters', () => {\n    assertCodegen('<div><!--\\n\\'comment\\'\\n--></div>', '<view class=\"_div\"></view>');\n  }); // #8041","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"does not squash templates inside v-pre","suites":["mp:compiler"],"updatePoint":{"line":388,"column":44,"index":25446},"line":388,"code":"  it('does not squash templates inside v-pre', () => {\n    assertCodegen('<div v-pre><template><p>{{msg}}</p></template></div>', '<view class=\"_div\"><view class=\"_p\">{{msg}}</view></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified ast type","suites":["mp:compiler"],"updatePoint":{"line":391,"column":28,"index":25627},"line":391,"code":"  it('not specified ast type', () => {\n    assertCodegen('', '<view class=\"_div\"></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"not specified directives option","suites":["mp:compiler"],"updatePoint":{"line":394,"column":37,"index":25734},"line":394,"code":"  it('not specified directives option', () => {\n    assertCodegen('<p v-if=\"show\">hello world</p>', '<block wx:if=\"{{show}}\"><view class=\"_p\">hello world</view></block>');\n  }); // #9142","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"should compile single v-for component inside template","suites":["mp:compiler"],"updatePoint":{"line":398,"column":59,"index":25944},"line":398,"code":"  it('should compile single v-for component inside template', () => {\n    assertCodegen('<div><template v-if=\"ok\"><foo v-for=\"i in 1\" :key=\"i\"></foo></template></div>', '<view class=\"_div\"><block wx:if=\"{{ok}}\"><block wx:for=\"{{1}}\" wx:for-item=\"i\" wx:for-index=\"__i0__\" wx:key=\"*this\"><foo vue-id=\"{{\\'551070e6-1-\\'+__i0__}}\" bind:__l=\"__l\"></foo></block></block></view>');\n  });","file":"compiler.spec.js","skipped":false,"dir":"packages/uni-template-compiler/__tests__"},{"name":"log","suites":["console"],"updatePoint":{"line":14,"column":9,"index":295},"line":14,"code":"  it('log', () => {\n    expect(transformSync('console.log(\\'123\\')', options).code).toBe('__f__(\"log\",\"123\",\" at /index.vue:1\");');\n    expect(transformSync('console.log(\\'123\\',a,{a:1,b:2})', options).code).toBe('__f__(\"log\",\"123\",a,{a:1,b:2},\" at /index.vue:1\");');\n  });","file":"console.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/__tests__"},{"name":"debug","suites":["console"],"updatePoint":{"line":18,"column":11,"index":571},"line":18,"code":"  it('debug', () => {\n    expect(transformSync('console.log(\\'123\\')', options).code).toBe('__f__(\"log\",\"123\",\" at /index.vue:1\");');\n    expect(transformSync('console.log(\\'123\\',a,{a:1,b:2})', options).code).toBe('__f__(\"log\",\"123\",a,{a:1,b:2},\" at /index.vue:1\");');\n  });","file":"console.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/__tests__"},{"name":"info","suites":["console"],"updatePoint":{"line":22,"column":10,"index":846},"line":22,"code":"  it('info', () => {\n    expect(transformSync('console.info(\\'123\\')', options).code).toBe('__f__(\"info\",\"123\",\" at /index.vue:1\");');\n    expect(transformSync('console.info(\\'123\\',a,{a:1,b:2})', options).code).toBe('__f__(\"info\",\"123\",a,{a:1,b:2},\" at /index.vue:1\");');\n  });","file":"console.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/__tests__"},{"name":"warn","suites":["console"],"updatePoint":{"line":26,"column":10,"index":1125},"line":26,"code":"  it('warn', () => {\n    expect(transformSync('console.warn(\\'123\\')', options).code).toBe('__f__(\"warn\",\"123\",\" at /index.vue:1\");');\n    expect(transformSync('console.warn(\\'123\\',a,{a:1,b:2})', options).code).toBe('__f__(\"warn\",\"123\",a,{a:1,b:2},\" at /index.vue:1\");');\n  });","file":"console.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/__tests__"},{"name":"error","suites":["console"],"updatePoint":{"line":30,"column":11,"index":1405},"line":30,"code":"  it('error', () => {\n    expect(transformSync('console.error(\\'123\\')', options).code).toBe('__f__(\"error\",\"123\",\" at /index.vue:1\");');\n    expect(transformSync('console.error(\\'123\\',a,{a:1,b:2})', options).code).toBe('__f__(\"error\",\"123\",a,{a:1,b:2},\" at /index.vue:1\");');\n  });","file":"console.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/__tests__"},{"name":"parse transition","suites":["shorthand-parser"],"updatePoint":{"line":13,"column":22,"index":273},"line":13,"code":"  it('parse transition', function () {\n    var declarations = [{\n      type: 'declaration',\n      property: 'transition',\n      value: 'margin-top 500ms ease-in-out 1s',\n      position: {}\n    }];\n    var result = shorthandParser(declarations);\n    expect(result).eql([{\n      type: 'declaration',\n      property: 'transition-property',\n      value: 'margin-top',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'transition-duration',\n      value: '500ms',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'transition-timing-function',\n      value: 'ease-in-out',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'transition-delay',\n      value: '1s',\n      position: {}\n    }]);\n  });","file":"shorthand-parser.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/packages/weex-styler/test"},{"name":"parse margin","suites":["shorthand-parser"],"updatePoint":{"line":43,"column":18,"index":1022},"line":43,"code":"  it('parse margin', function () {\n    var declarations = [{\n      type: 'declaration',\n      property: 'margin',\n      value: '1px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin',\n      value: '21px 22px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin',\n      value: '31px 32px 33px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin',\n      value: '41px 42px 43px 44px',\n      position: {}\n    }];\n    var result = shorthandParser(declarations);\n    expect(result).eql([{\n      type: 'declaration',\n      property: 'margin-top',\n      value: '1px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-right',\n      value: '1px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-bottom',\n      value: '1px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-left',\n      value: '1px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-top',\n      value: '21px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-right',\n      value: '22px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-bottom',\n      value: '21px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-left',\n      value: '22px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-top',\n      value: '31px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-right',\n      value: '32px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-bottom',\n      value: '33px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-left',\n      value: '32px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-top',\n      value: '41px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-right',\n      value: '42px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-bottom',\n      value: '43px',\n      position: {}\n    }, {\n      type: 'declaration',\n      property: 'margin-left',\n      value: '44px',\n      position: {}\n    }]);\n  });","file":"shorthand-parser.spec.js","skipped":false,"dir":"packages/vue-cli-plugin-hbuilderx/packages/weex-styler/test"},{"name":"addStylesClient (dev)","suites":[],"updatePoint":{"line":4,"column":27,"index":293},"line":4,"code":"test('addStylesClient (dev)', () => {\n  const update = addStylesClient('foo', mockedList, false);\n  assertStylesMatch(mockedList);\n  const mockedList2 = mockedList.slice(1, 3);\n  update(mockedList2);\n  assertStylesMatch(mockedList2);\n  update();\n  expect(document.querySelectorAll('style').length).toBe(0);\n});","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"addStylesClient (prod)","suites":[],"updatePoint":{"line":13,"column":28,"index":605},"line":13,"code":"test('addStylesClient (prod)', () => {\n  const update = addStylesClient('foo', mockedList, true);\n  assertStylesMatch(mockedList);\n  const mockedList2 = mockedList.slice(2);\n  update(mockedList2);\n  assertStylesMatch(mockedList2);\n  update();\n  expect(document.querySelectorAll('style').length).toBe(0);\n});","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"addStylesClient (dev + ssr)","suites":[],"updatePoint":{"line":22,"column":33,"index":918},"line":22,"code":"test('addStylesClient (dev + ssr)', () => {\n  mockSSRTags(mockedList, 'foo');\n  const update = addStylesClient('foo', mockedList, false);\n  assertStylesMatch(mockedList);\n  update();\n  expect(document.querySelectorAll('style').length).toBe(0);\n});","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"addStylesClient (prod + ssr)","suites":[],"updatePoint":{"line":29,"column":34,"index":1167},"line":29,"code":"test('addStylesClient (prod + ssr)', () => {\n  mockProdSSRTags(mockedList, 'foo');\n  const update = addStylesClient('foo', mockedList, true);\n  expect(document.querySelectorAll('style').length).toBe(1);\n});","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"addStylesServer (dev)","suites":[],"updatePoint":{"line":34,"column":27,"index":1367},"line":34,"code":"test('addStylesServer (dev)', () => {\n  const context = global.__VUE_SSR_CONTEXT__ = {};\n  addStylesServer('foo', mockedList, false);\n  expect(context.styles).toBe(`<style data-vue-ssr-id=\"foo:0\">h1 { color: red; }</style>` + `<style data-vue-ssr-id=\"foo:1\">p { color: green; }</style>` + `<style data-vue-ssr-id=\"foo:2\">span { color: blue; }</style>` + `<style data-vue-ssr-id=\"foo:3\" media=\"print\">span { color: blue; }</style>`);\n});","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"addStylesServer (prod)","suites":[],"updatePoint":{"line":39,"column":28,"index":1805},"line":39,"code":"test('addStylesServer (prod)', () => {\n  const context = global.__VUE_SSR_CONTEXT__ = {};\n  addStylesServer('foo', mockedList, true);\n  expect(context.styles).toBe(`<style data-vue-ssr-id=\"foo:0 foo:1 foo:2\">` + `h1 { color: red; }\\np { color: green; }\\nspan { color: blue; }` + `</style>` + `<style data-vue-ssr-id=\"foo:3\" media=\"print\">span { color: blue; }</style>`);\n}); // --- helpers ---","file":"test.js","skipped":false,"dir":"packages/vue-cli-plugin-uni/packages/app-vue-style-loader/test"},{"name":"parse scoped component","suites":["mp:loader"],"updatePoint":{"line":43,"column":28,"index":1153},"line":43,"code":"  it('parse scoped component', () => {\n    assertCodegen(`import { uniBadge,uniCard} from '@dcloudio/uni-ui';\nexport default defineComponent({\n    components: {\n        'uni-badge':uniBadge,\n        'uni-card':uniCard\n    }\n})`, [{\n      name: 'uni-badge',\n      value: 'uniBadge',\n      source: '@dcloudio/uni-ui/lib/uni-badge/uni-badge'\n    }, {\n      name: 'uni-card',\n      value: 'uniCard',\n      source: '@dcloudio/uni-ui/lib/uni-card/uni-card'\n    }]);\n    assertCodegen(`\nimport mediaList from '@/components/tab-nvue/mediaList.vue';\nimport uniLoadMore from '@/components/uni-load-more.vue';\nexport default {\n    components: {\n        mediaList,\n        uniLoadMore\n    }\n}\n`, [{\n      name: 'mediaList',\n      value: 'mediaList',\n      source: '@/components/tab-nvue/mediaList.vue'\n    }, {\n      name: 'uniLoadMore',\n      value: 'uniLoadMore',\n      source: '@/components/uni-load-more.vue'\n    }]);\n    assertCodegen(`\n            import { uniBadge,uniCard} from '@dcloudio/uni-ui';\n            export default {\n                components: {\n                    'uni-badge':uniBadge,\n                    'uni-card':uniCard\n                }\n            }\n            `, [{\n      name: 'uni-badge',\n      value: 'uniBadge',\n      source: '@dcloudio/uni-ui/lib/uni-badge/uni-badge'\n    }, {\n      name: 'uni-card',\n      value: 'uniCard',\n      source: '@dcloudio/uni-ui/lib/uni-card/uni-card'\n    }]);\n    assertCodegen(`\nimport VanIcon from '../icon/index.vue'\nimport VanPopup from '../icon/popup.vue'\nimport VanLoading from '../icon/loading.vue'\nglobal['__wxVueOptions'] = {\n  components:{\n    'van-icon': VanIcon,\n    'van-popup': VanPopup,\n    'van-loading': VanLoading\n  }\n}\n                `, [{\n      name: 'van-icon',\n      value: 'VanIcon',\n      source: '../icon/index.vue'\n    }, {\n      name: 'van-popup',\n      value: 'VanPopup',\n      source: '../icon/popup.vue'\n    }, {\n      name: 'van-loading',\n      value: 'VanLoading',\n      source: '../icon/loading.vue'\n    }]);\n    assertCodegen(`\n      import VanIcon from '../icon/index.vue'\n      import VanPopup from '../icon/popup.vue'\n      import VanLoading from '../icon/loading.vue'\n      exports.default.components = Object.assign({\n          'van-icon': VanIcon,\n          'van-popup': VanPopup,\n          'van-loading': VanLoading\n        },exports.default.components || {})\n                      `, [{\n      name: 'van-icon',\n      value: 'VanIcon',\n      source: '../icon/index.vue'\n    }, {\n      name: 'van-popup',\n      value: 'VanPopup',\n      source: '../icon/popup.vue'\n    }, {\n      name: 'van-loading',\n      value: 'VanLoading',\n      source: '../icon/loading.vue'\n    }]);\n    assertCodegen(`import myButton from '@/components/my-button/my-button.vue';\n      export default {\n          components: {\n            myButton\n          }\n      }\n      import VanButton from '../button/index.vue'\n      import VanSearch from '../search/index.vue'\n      exports.default.components = Object.assign({\n          'van-button': VanButton,\n          'van-search': VanSearch,\n        },exports.default.components || {})`, [{\n      name: 'van-button',\n      value: 'VanButton',\n      source: '../button/index.vue'\n    }, {\n      name: 'van-search',\n      value: 'VanSearch',\n      source: '../search/index.vue'\n    }, {\n      name: 'myButton',\n      value: 'myButton',\n      source: '@/components/my-button/my-button.vue'\n    }]);\n    assertCodegenOptions(`export default {\n        name: 'test'\n      }`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`const options = {\n        name: 'test'\n      }\n      export default options`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`let options\n      options = {\n        name: 'test'\n      }\n      export default options`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`const options = Vue.extend({\n        name: 'test'\n      })\n      export default options`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`let  options\n      options = Vue.extend({\n        name: 'test'\n      })\n      export default options`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`const options = {\n        name: 'test'\n      }\n      export default Vue.extend(options)`, {\n      name: '\"test\"',\n      inheritAttrs: null,\n      props: null\n    });\n    assertCodegenOptions(`export default {\n        props: ['id', 'test']\n      }`, {\n      name: null,\n      inheritAttrs: null,\n      props: '[\"id\",\"test\"]'\n    });\n    assertCodegenOptions(`export default {\n        props: {\n          id: {\n            type: String\n          },\n          'test': {\n            type: String\n          }\n        }\n      }`, {\n      name: null,\n      inheritAttrs: null,\n      props: '[\"id\",\"test\"]'\n    });\n  });","file":"components.spec.js","skipped":false,"dir":"packages/webpack-uni-mp-loader/__tests__"},{"name":"parse global component","suites":["mp:loader"],"updatePoint":{"line":235,"column":28,"index":6118},"line":235,"code":"  it('parse global component', () => {\n    assertCodegen(`\n            import { uniBadge,uniCard} from '@dcloudio/uni-ui';\n            import mediaList from '@/components/tab-nvue/mediaList.vue';\n            Vue.component('uni-badge',uniBadge)\n            Vue.component('uni-card',uniCard)\n            Vue.component('media-list',mediaList)\n            `, [{\n      name: 'uni-badge',\n      value: 'uniBadge',\n      source: '@dcloudio/uni-ui/lib/uni-badge/uni-badge'\n    }, {\n      name: 'uni-card',\n      value: 'uniCard',\n      source: '@dcloudio/uni-ui/lib/uni-card/uni-card'\n    }, {\n      name: 'media-list',\n      value: 'mediaList',\n      source: '@/components/tab-nvue/mediaList.vue'\n    }], false);\n  });","file":"components.spec.js","skipped":false,"dir":"packages/webpack-uni-mp-loader/__tests__"}]}