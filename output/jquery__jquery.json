{"repo":"jquery/jquery","url":"https://github.com/jquery/jquery","branch":"main","configs":[{"package":"jquery","lang":"js","dir":"test","framework":"qunit","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Unit Testing Environment","suites":["ajax"],"line":8,"code":"  QUnit.test(\"Unit Testing Environment\", function (assert) {\n    assert.expect(2);\n    assert.ok(hasPHP, \"Running in an environment with PHP support. The AJAX tests only run if the environment supports PHP!\");\n    assert.ok(!isLocal, \"Unit tests are not ran from file:// (especially in Chrome. If you must test from file:// with Chrome, run it with the --allow-file-access-from-files flag!)\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajax() - retry with jQuery.ajax( this )","suites":["ajax"],"line":254,"code":"  QUnit.test(\"jQuery.ajax() - retry with jQuery.ajax( this )\", function (assert) {\n    assert.expect(2);\n    var previousUrl,\n      firstTime = true,\n      done = assert.async();\n    jQuery.ajax({\n      url: url(\"mock.php?action=error\"),\n      error: function () {\n        if (firstTime) {\n          firstTime = false;\n          jQuery.ajax(this);\n        } else {\n          assert.ok(true, \"Test retrying with jQuery.ajax(this) works\");\n          jQuery.ajax({\n            url: url(\"mock.php?action=error&x=2\"),\n            beforeSend: function () {\n              if (!previousUrl) {\n                previousUrl = this.url;\n              } else {\n                assert.strictEqual(this.url, previousUrl, \"url parameters are not re-appended\");\n                done();\n                return false;\n              }\n            },\n            error: function () {\n              jQuery.ajax(this);\n            }\n          });\n        }\n      }\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object","suites":["ajax"],"line":858,"code":"  QUnit.test(\"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", function (assert) {\n    assert.expect(8);\n    var done = assert.async();\n    var target = \"name.html\",\n      successCount = 0,\n      errorCount = 0,\n      errorEx = \"\",\n      success = function () {\n        successCount++;\n      };\n    jQuery(document).on(\"ajaxError.passthru\", function (e, xml) {\n      errorCount++;\n      errorEx += \": \" + xml.status;\n    });\n    jQuery(document).one(\"ajaxStop\", function () {\n      assert.equal(successCount, 5, \"Check all ajax calls successful\");\n      assert.equal(errorCount, 0, \"Check no ajax errors (status\" + errorEx + \")\");\n      jQuery(document).off(\"ajaxError.passthru\");\n      done();\n    });\n    Globals.register(\"testBar\");\n    assert.ok(jQuery.get(url(target), success), \"get\");\n    assert.ok(jQuery.post(url(target), success), \"post\");\n    assert.ok(jQuery.getScript(url(\"mock.php?action=testbar\"), success), \"script\");\n    assert.ok(jQuery.getJSON(url(\"json_obj.js\"), success), \"json\");\n    assert.ok(jQuery.ajax({\n      url: url(target),\n      success: success\n    }), \"generic\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajax() - statusText","suites":["ajax"],"line":1500,"code":"  QUnit.test(\"jQuery.ajax() - statusText\", function (assert) {\n    assert.expect(3);\n    var done = assert.async();\n    jQuery.ajax(url(\"mock.php?action=status&code=200&text=Hello\")).done(function (_, statusText, jqXHR) {\n      assert.strictEqual(statusText, \"success\", \"callback status text ok for success\");\n      assert.ok([\"Hello\", \"OK\", \"success\"].indexOf(jqXHR.statusText) > -1, \"jqXHR status text ok for success (\" + jqXHR.statusText + \")\");\n      jQuery.ajax(url(\"mock.php?action=status&code=404&text=World\")).fail(function (jqXHR, statusText) {\n        assert.strictEqual(statusText, \"error\", \"callback status text ok for error\");\n        done();\n      });\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajax() - statusCode","suites":["ajax"],"line":1512,"code":"  QUnit.test(\"jQuery.ajax() - statusCode\", function (assert) {\n    assert.expect(20);\n    var done = assert.async(),\n      count = 12;\n    function countComplete() {\n      if (! --count) {\n        done();\n      }\n    }\n    function createStatusCodes(name, isSuccess) {\n      name = \"Test \" + name + \" \" + (isSuccess ? \"success\" : \"error\");\n      return {\n        200: function () {\n          assert.ok(isSuccess, name);\n        },\n        404: function () {\n          assert.ok(!isSuccess, name);\n        }\n      };\n    }\n    jQuery.each( /* jQuery.each arguments start */\n    {\n      \"name.html\": true,\n      \"404.txt\": false\n    }, function (uri, isSuccess) {\n      jQuery.ajax(url(uri), {\n        statusCode: createStatusCodes(\"in options\", isSuccess),\n        complete: countComplete\n      });\n      jQuery.ajax(url(uri), {\n        complete: countComplete\n      }).statusCode(createStatusCodes(\"immediately with method\", isSuccess));\n      jQuery.ajax(url(uri), {\n        complete: function (jqXHR) {\n          jqXHR.statusCode(createStatusCodes(\"on complete\", isSuccess));\n          countComplete();\n        }\n      });\n      jQuery.ajax(url(uri), {\n        complete: function (jqXHR) {\n          setTimeout(function () {\n            jqXHR.statusCode(createStatusCodes(\"very late binding\", isSuccess));\n            countComplete();\n          }, 100);\n        }\n      });\n      jQuery.ajax(url(uri), {\n        statusCode: createStatusCodes(\"all (options)\", isSuccess),\n        complete: function (jqXHR) {\n          jqXHR.statusCode(createStatusCodes(\"all (on complete)\", isSuccess));\n          setTimeout(function () {\n            jqXHR.statusCode(createStatusCodes(\"all (very late binding)\", isSuccess));\n            countComplete();\n          }, 100);\n        }\n      }).statusCode(createStatusCodes(\"all (immediately with method)\", isSuccess));\n      var testString = \"\";\n      jQuery.ajax(url(uri), {\n        success: function (a, b, jqXHR) {\n          assert.ok(isSuccess, \"success\");\n          var statusCode = {};\n          statusCode[jqXHR.status] = function () {\n            testString += \"B\";\n          };\n          jqXHR.statusCode(statusCode);\n          testString += \"A\";\n        },\n        error: function (jqXHR) {\n          assert.ok(!isSuccess, \"error\");\n          var statusCode = {};\n          statusCode[jqXHR.status] = function () {\n            testString += \"B\";\n          };\n          jqXHR.statusCode(statusCode);\n          testString += \"A\";\n        },\n        complete: function () {\n          assert.strictEqual(testString, \"AB\", \"Test statusCode callbacks are ordered like \" + (isSuccess ? \"success\" : \"error\") + \" callbacks\");\n          countComplete();\n        }\n      });\n    }\n    /* jQuery.each arguments end*/);\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-7531 - jQuery.ajax() - Location object as url","suites":["ajax"],"line":1694,"code":"  QUnit.test(\"trac-7531 - jQuery.ajax() - Location object as url\", function (assert) {\n    assert.expect(1);\n    var xhr,\n      success = false;\n    try {\n      xhr = jQuery.ajax({\n        url: window.location\n      });\n      success = true;\n      xhr.abort();\n    } catch (e) {}\n    assert.ok(success, \"document.location did not generate exception\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)","suites":["ajax"],"line":1780,"code":"  QUnit.test(\"trac-9887 - jQuery.ajax() - Context with circular references (trac-9887)\", function (assert) {\n    assert.expect(2);\n    var success = false,\n      context = {};\n    context.field = context;\n    try {\n      jQuery.ajax(\"non-existing\", {\n        context: context,\n        beforeSend: function () {\n          assert.ok(this === context, \"context was not deep extended\");\n          return false;\n        }\n      });\n      success = true;\n    } catch (e) {\n      console.log(e);\n    }\n    assert.ok(success, \"context with circular reference did not generate an exception\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-11743 - jQuery.ajax() - script, throws exception","suites":["ajax"],"line":1862,"code":"  QUnit.test(\"trac-11743 - jQuery.ajax() - script, throws exception\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var onerror = window.onerror;\n    window.onerror = function () {\n      assert.ok(true, \"Exception thrown\");\n      window.onerror = onerror;\n      done();\n    };\n    jQuery.ajax({\n      url: baseURL + \"badjson.js\",\n      dataType: \"script\",\n      throws: true\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajaxSetup()","suites":["ajax"],"line":2117,"code":"  QUnit.test(\"jQuery.ajaxSetup()\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      url: url(\"mock.php?action=name&name=foo\"),\n      success: function (msg) {\n        assert.strictEqual(msg, \"bar\", \"Check for GET\");\n        done();\n      }\n    });\n    jQuery.ajax();\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajaxSetup({ timeout: Number }) - with global timeout","suites":["ajax"],"line":2129,"code":"  QUnit.test(\"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    var passed = 0,\n      pass = function () {\n        assert.ok(passed++ < 2, \"Error callback executed\");\n        if (passed === 2) {\n          jQuery(document).off(\"ajaxError.setupTest\");\n          done();\n        }\n      },\n      fail = function (a, b) {\n        assert.ok(false, \"Check for timeout failed \" + a + \" \" + b);\n        done();\n      };\n    jQuery(document).on(\"ajaxError.setupTest\", pass);\n    jQuery.ajaxSetup({\n      timeout: 1000\n    });\n    jQuery.ajax({\n      type: \"GET\",\n      url: url(\"mock.php?action=wait&wait=5\"),\n      error: pass,\n      success: fail\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.ajaxSetup({ timeout: Number }) with localtimeout","suites":["ajax"],"line":2155,"code":"  QUnit.test(\"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      timeout: 50\n    });\n    jQuery.ajax({\n      type: \"GET\",\n      timeout: 15000,\n      url: url(\"mock.php?action=wait&wait=1\"),\n      error: function () {\n        assert.ok(false, \"Check for local timeout failed\");\n        done();\n      },\n      success: function () {\n        assert.ok(true, \"Check for local timeout\");\n        done();\n      }\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-11264 - domManip() - no side effect because of ajaxSetup or global events","suites":["ajax"],"line":2178,"code":"  QUnit.test(\"trac-11264 - domManip() - no side effect because of ajaxSetup or global events\", function (assert) {\n    assert.expect(1);\n    jQuery.ajaxSetup({\n      type: \"POST\"\n    });\n    jQuery(document).on(\"ajaxStart ajaxStop\", function () {\n      assert.ok(false, \"Global event triggered\");\n    });\n    jQuery(\"#qunit-fixture\").append(\"<script src='\" + baseURL + \"mock.php?action=script'></script>\");\n    jQuery(document).off(\"ajaxStart ajaxStop\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)","suites":["ajax"],"line":2189,"code":"  QUnit.test(\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (trac-11264)\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      type: \"POST\"\n    });\n    jQuery(\"#qunit-fixture\").load(baseURL + \"mock.php?action=echoMethod\", function (method) {\n      assert.equal(method, \"GET\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery#load() - should resolve with correct context","suites":["ajax"],"line":2200,"code":"  QUnit.test(\"jQuery#load() - should resolve with correct context\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    var ps = jQuery(\"<p></p><p></p>\");\n    var i = 0;\n    ps.appendTo(\"#qunit-fixture\");\n    ps.load(baseURL + \"mock.php?action=echoMethod\", function () {\n      assert.strictEqual(this, ps[i++]);\n      if (i === 2) {\n        done();\n      }\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-11402 - domManip() - script in comments are properly evaluated","suites":["ajax"],"line":2213,"code":"  QUnit.test(\"trac-11402 - domManip() - script in comments are properly evaluated\", function (assert) {\n    assert.expect(2);\n    jQuery(\"#qunit-fixture\").load(baseURL + \"cleanScript.html\", assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes","suites":["ajax"],"line":2220,"code":"  QUnit.test(\"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery.get(url(\"dashboard.xml\"), function (xml) {\n      var content = [];\n      jQuery(\"tab\", xml).each(function () {\n        content.push(jQuery(this).text());\n      });\n      assert.strictEqual(content[0], \"blabla\", \"Check first tab\");\n      assert.strictEqual(content[1], \"blublu\", \"Check second tab\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings","suites":["ajax"],"line":2233,"code":"  QUnit.test(\"trac-8277 - jQuery.get( String, Function ) - data in ajaxSettings\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      data: \"helloworld\"\n    });\n    jQuery.get(url(\"mock.php?action=echoQuery\"), function (data) {\n      assert.ok(/helloworld$/.test(data), \"Data from ajaxSettings was used\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.get( String, null-ish, String ) - dataType with null callback (gh-4989)","suites":["ajax"],"line":2244,"code":"  QUnit.test(\"jQuery.get( String, null-ish, String ) - dataType with null callback (gh-4989)\", function (assert) {\n    assert.expect(2);\n    var done = assert.async(2);\n    jQuery.get(url(\"mock.php?action=json&header\"), null, \"json\").then(function (json) {\n      assert.deepEqual(json, {\n        data: {\n          lang: \"en\",\n          length: 25\n        }\n      }, \"`dataType: \\\"json\\\"` applied with a `null` callback\");\n      done();\n    });\n    jQuery.get(url(\"mock.php?action=json&header\"), null, \"text\").then(function (text) {\n      assert.strictEqual(text, \"{\\\"data\\\":{\\\"lang\\\":\\\"en\\\",\\\"length\\\":25}}\", \"`dataType: \\\"text\\\"` applied with a `null` callback\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getJSON( String, Hash, Function ) - JSON array","suites":["ajax"],"line":2264,"code":"  QUnit.test(\"jQuery.getJSON( String, Hash, Function ) - JSON array\", function (assert) {\n    assert.expect(5);\n    var done = assert.async();\n    jQuery.getJSON(url(\"mock.php?action=json\"), {\n      \"array\": \"1\"\n    }, function (json) {\n      assert.ok(json.length >= 2, \"Check length\");\n      assert.strictEqual(json[0][\"name\"], \"John\", \"Check JSON: first, name\");\n      assert.strictEqual(json[0][\"age\"], 21, \"Check JSON: first, age\");\n      assert.strictEqual(json[1][\"name\"], \"Peter\", \"Check JSON: second, name\");\n      assert.strictEqual(json[1][\"age\"], 25, \"Check JSON: second, age\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getJSON( String, Function ) - JSON object","suites":["ajax"],"line":2278,"code":"  QUnit.test(\"jQuery.getJSON( String, Function ) - JSON object\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery.getJSON(url(\"mock.php?action=json\"), function (json) {\n      if (json && json[\"data\"]) {\n        assert.strictEqual(json[\"data\"][\"lang\"], \"en\", \"Check JSON: lang\");\n        assert.strictEqual(json[\"data\"].length, 25, \"Check JSON: length\");\n        done();\n      }\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content","suites":["ajax"],"line":2289,"code":"  QUnit.test(\"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    var absoluteUrl = url(\"mock.php?action=json\");\n\n    // Make a relative URL absolute relative to the document location\n    if (!/^[a-z][a-z0-9+.-]*:/i.test(absoluteUrl)) {\n      // An absolute path replaces everything after the host\n      if (absoluteUrl.charAt(0) === \"/\") {\n        absoluteUrl = window.location.href.replace(/(:\\/*[^/]*).*$/, \"$1\") + absoluteUrl;\n\n        // A relative path replaces the last slash-separated path segment\n      } else {\n        absoluteUrl = window.location.href.replace(/[^/]*$/, \"\") + absoluteUrl;\n      }\n    }\n    jQuery.getJSON(absoluteUrl, function (json) {\n      assert.strictEqual(json.data.lang, \"en\", \"Check JSON: lang\");\n      assert.strictEqual(json.data.length, 25, \"Check JSON: length\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getScript( String, Function ) - with callback","suites":["ajax"],"line":2314,"code":"  QUnit.test(\"jQuery.getScript( String, Function ) - with callback\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    Globals.register(\"testBar\");\n    jQuery.getScript(url(\"mock.php?action=testbar\"), function () {\n      assert.strictEqual(window[\"testBar\"], \"bar\", \"Check if script was evaluated\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getScript( String, Function ) - no callback","suites":["ajax"],"line":2323,"code":"  QUnit.test(\"jQuery.getScript( String, Function ) - no callback\", function (assert) {\n    assert.expect(1);\n    Globals.register(\"testBar\");\n    jQuery.getScript(url(\"mock.php?action=testbar\")).done(assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-8082 - jQuery.getScript( String, Function ) - source as responseText","suites":["ajax"],"line":2328,"code":"  QUnit.test(\"trac-8082 - jQuery.getScript( String, Function ) - source as responseText\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    Globals.register(\"testBar\");\n    jQuery.getScript(url(\"mock.php?action=testbar\"), function (data, _, jqXHR) {\n      assert.strictEqual(data, jqXHR.responseText, \"Same-domain script requests returns the source of the script\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getScript( Object ) - with callback","suites":["ajax"],"line":2337,"code":"  QUnit.test(\"jQuery.getScript( Object ) - with callback\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    Globals.register(\"testBar\");\n    jQuery.getScript({\n      url: url(\"mock.php?action=testbar\"),\n      success: function () {\n        assert.strictEqual(window[\"testBar\"], \"bar\", \"Check if script was evaluated\");\n        done();\n      }\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.getScript( Object ) - no callback","suites":["ajax"],"line":2349,"code":"  QUnit.test(\"jQuery.getScript( Object ) - no callback\", function (assert) {\n    assert.expect(1);\n    Globals.register(\"testBar\");\n    jQuery.getScript({\n      url: url(\"mock.php?action=testbar\")\n    }).done(assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String )","suites":["ajax"],"line":2360,"code":"  QUnit.test(\"jQuery.fn.load( String )\", function (assert) {\n    assert.expect(2);\n    jQuery.ajaxSetup({\n      beforeSend: function () {\n        assert.strictEqual(this.type, \"GET\", \"no data means GET request\");\n      }\n    });\n    jQuery(\"#first\").load(baseURL + \"name.html\", assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load() - 404 error callbacks","suites":["ajax"],"line":2369,"code":"  QUnit.test(\"jQuery.fn.load() - 404 error callbacks\", function (assert) {\n    assert.expect(6);\n    var done = assert.async();\n    addGlobalEvents(\"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert)();\n    jQuery(document).on(\"ajaxStop\", done);\n    jQuery(\"<div></div>\").load(baseURL + \"404.txt\", function () {\n      assert.ok(true, \"complete\");\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, null )","suites":["ajax"],"line":2380,"code":"  QUnit.test(\"jQuery.fn.load( String, null )\", function (assert) {\n    assert.expect(2);\n    jQuery.ajaxSetup({\n      beforeSend: function () {\n        assert.strictEqual(this.type, \"GET\", \"no data means GET request\");\n      }\n    });\n    jQuery(\"#first\").load(baseURL + \"name.html\", null, assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, undefined )","suites":["ajax"],"line":2391,"code":"  QUnit.test(\"jQuery.fn.load( String, undefined )\", function (assert) {\n    assert.expect(2);\n    jQuery.ajaxSetup({\n      beforeSend: function () {\n        assert.strictEqual(this.type, \"GET\", \"no data means GET request\");\n      }\n    });\n    jQuery(\"#first\").load(baseURL + \"name.html\", undefined, assert.async());\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( URL_SELECTOR )","suites":["ajax"],"line":2402,"code":"  QUnit.test(\"jQuery.fn.load( URL_SELECTOR )\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery(\"#first\").load(baseURL + \"test3.html div.user\", function () {\n      assert.strictEqual(jQuery(this).children(\"div\").length, 2, \"Verify that specific elements were injected\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( URL_SELECTOR with spaces )","suites":["ajax"],"line":2412,"code":"  QUnit.test(\"jQuery.fn.load( URL_SELECTOR with spaces )\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery(\"#first\").load(baseURL + \"test3.html   #superuser \", function () {\n      assert.strictEqual(jQuery(this).children(\"div\").length, 1, \"Verify that specific elements were injected\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )","suites":["ajax"],"line":2423,"code":"  QUnit.test(\"jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(gh-3003) )\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery(\"#first\").load(baseURL + \"test3.html   #whitespace\\\\\\\\xA0 \", function () {\n      assert.strictEqual(jQuery(this).children(\"div\").length, 1, \"Verify that specific elements were injected\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, Function ) - simple: inject text into DOM","suites":["ajax"],"line":2431,"code":"  QUnit.test(\"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery(\"#first\").load(url(\"name.html\"), function () {\n      assert.ok(/^ERROR/.test(jQuery(\"#first\").text()), \"Check if content was injected into the DOM\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, Function ) - check scripts","suites":["ajax"],"line":2439,"code":"  QUnit.test(\"jQuery.fn.load( String, Function ) - check scripts\", function (assert) {\n    assert.expect(7);\n    var done = assert.async();\n    var verifyEvaluation = function () {\n      assert.strictEqual(window[\"testBar\"], \"bar\", \"Check if script src was evaluated after load\");\n      assert.strictEqual(jQuery(\"#ap\").html(), \"bar\", \"Check if script evaluation has modified DOM\");\n      done();\n    };\n    Globals.register(\"testFoo\");\n    Globals.register(\"testBar\");\n    jQuery(\"#first\").load(url(\"mock.php?action=testHTML&baseURL=\" + baseURL), function () {\n      assert.ok(jQuery(\"#first\").html().match(/^html text/), \"Check content after loading html\");\n      assert.strictEqual(jQuery(\"#foo\").html(), \"foo\", \"Check if script evaluation has modified DOM\");\n      assert.strictEqual(window[\"testFoo\"], \"foo\", \"Check if script was evaluated after load\");\n      setTimeout(verifyEvaluation, 600);\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, Function ) - check file with only a script tag","suites":["ajax"],"line":2456,"code":"  QUnit.test(\"jQuery.fn.load( String, Function ) - check file with only a script tag\", function (assert) {\n    assert.expect(3);\n    var done = assert.async();\n    Globals.register(\"testFoo\");\n    jQuery(\"#first\").load(url(\"test2.html\"), function () {\n      assert.strictEqual(jQuery(\"#foo\").html(), \"foo\", \"Check if script evaluation has modified DOM\");\n      assert.strictEqual(window[\"testFoo\"], \"foo\", \"Check if script was evaluated after load\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings","suites":["ajax"],"line":2466,"code":"  QUnit.test(\"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      dataFilter: function () {\n        return \"Hello World\";\n      }\n    });\n    jQuery(\"<div></div>\").load(url(\"name.html\"), function (responseText) {\n      assert.strictEqual(jQuery(this).html(), \"Hello World\", \"Test div was filled with filtered data\");\n      assert.strictEqual(responseText, \"Hello World\", \"Test callback receives filtered data\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, Object, Function )","suites":["ajax"],"line":2480,"code":"  QUnit.test(\"jQuery.fn.load( String, Object, Function )\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery(\"<div></div>\").load(url(\"mock.php?action=echoHtml\"), {\n      \"bar\": \"ok\"\n    }, function () {\n      var $node = jQuery(this);\n      assert.strictEqual($node.find(\"#method\").text(), \"POST\", \"Check method\");\n      assert.strictEqual($node.find(\"#data\").text(), \"bar=ok\", \"Check if data is passed correctly\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load( String, String, Function )","suites":["ajax"],"line":2492,"code":"  QUnit.test(\"jQuery.fn.load( String, String, Function )\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery(\"<div></div>\").load(url(\"mock.php?action=echoHtml\"), \"foo=3&bar=ok\", function () {\n      var $node = jQuery(this);\n      assert.strictEqual($node.find(\"#method\").text(), \"GET\", \"Check method\");\n      assert.ok($node.find(\"#query\").text().match(/foo=3&bar=ok/), \"Check if a string of data is passed correctly\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.fn.load() - callbacks get the correct parameters","suites":["ajax"],"line":2502,"code":"  QUnit.test(\"jQuery.fn.load() - callbacks get the correct parameters\", function (assert) {\n    assert.expect(8);\n    var completeArgs = {},\n      done = assert.async();\n    jQuery.ajaxSetup({\n      success: function (_, status, jqXHR) {\n        completeArgs[this.url] = [jqXHR.responseText, status, jqXHR];\n      },\n      error: function (jqXHR, status) {\n        completeArgs[this.url] = [jqXHR.responseText, status, jqXHR];\n      }\n    });\n    jQuery.when.apply(jQuery, jQuery.map([{\n      type: \"success\",\n      url: baseURL + \"mock.php?action=echoQuery&arg=pop\"\n    }, {\n      type: \"error\",\n      url: baseURL + \"404.txt\"\n    }], function (options) {\n      return jQuery.Deferred(function (defer) {\n        jQuery(\"#foo\").load(options.url, function () {\n          var args = arguments;\n          assert.strictEqual(completeArgs[options.url].length, args.length, \"same number of arguments (\" + options.type + \")\");\n          jQuery.each(completeArgs[options.url], function (i, value) {\n            assert.strictEqual(args[i], value, \"argument #\" + i + \" is the same (\" + options.type + \")\");\n          });\n          defer.resolve();\n        });\n      });\n    })).always(done);\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json","suites":["ajax"],"line":2533,"code":"  QUnit.test(\"trac-2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery.ajaxSetup({\n      dataType: \"json\"\n    });\n    jQuery(document).on(\"ajaxComplete\", function (e, xml, s) {\n      assert.strictEqual(s.dataType, \"html\", \"Verify the load() dataType was html\");\n      jQuery(document).off(\"ajaxComplete\");\n      done();\n    });\n    jQuery(\"#first\").load(baseURL + \"test3.html\");\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in","suites":["ajax"],"line":2546,"code":"  QUnit.test(\"trac-10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var data = {\n      \"baz\": 1\n    };\n    jQuery.ajaxSetup({\n      data: {\n        \"foo\": \"bar\"\n      }\n    });\n    jQuery(\"#foo\").load(baseURL + \"mock.php?action=echoQuery\", data);\n    jQuery(document).on(\"ajaxComplete\", function (event, jqXHR, options) {\n      assert.ok(~options.data.indexOf(\"foo=bar\"), \"Data from ajaxSettings was used\");\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.post() - data","suites":["ajax"],"line":2566,"code":"  QUnit.test(\"jQuery.post() - data\", function (assert) {\n    assert.expect(3);\n    var done = assert.async();\n    jQuery.when(jQuery.post(url(\"mock.php?action=xml\"), {\n      cal: \"5-2\"\n    }, function (xml) {\n      jQuery(\"math\", xml).each(function () {\n        assert.strictEqual(jQuery(\"calculation\", this).text(), \"5-2\", \"Check for XML\");\n        assert.strictEqual(jQuery(\"result\", this).text(), \"3\", \"Check for XML\");\n      });\n    }), jQuery.ajax({\n      url: url(\"mock.php?action=echoData\"),\n      type: \"POST\",\n      data: {\n        \"test\": {\n          \"length\": 7,\n          \"foo\": \"bar\"\n        }\n      },\n      success: function (data) {\n        assert.strictEqual(data, \"test%5Blength%5D=7&test%5Bfoo%5D=bar\", \"Check if a sub-object with a length param is serialized correctly\");\n      }\n    })).always(done);\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.post( String, Hash, Function ) - simple with xml","suites":["ajax"],"line":2590,"code":"  QUnit.test(\"jQuery.post( String, Hash, Function ) - simple with xml\", function (assert) {\n    assert.expect(4);\n    var done = assert.async();\n    jQuery.when(jQuery.post(url(\"mock.php?action=xml\"), {\n      cal: \"5-2\"\n    }, function (xml) {\n      jQuery(\"math\", xml).each(function () {\n        assert.strictEqual(jQuery(\"calculation\", this).text(), \"5-2\", \"Check for XML\");\n        assert.strictEqual(jQuery(\"result\", this).text(), \"3\", \"Check for XML\");\n      });\n    }), jQuery.post(url(\"mock.php?action=xml&cal=5-2\"), {}, function (xml) {\n      jQuery(\"math\", xml).each(function () {\n        assert.strictEqual(jQuery(\"calculation\", this).text(), \"5-2\", \"Check for XML\");\n        assert.strictEqual(jQuery(\"result\", this).text(), \"3\", \"Check for XML\");\n      });\n    })).always(function () {\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery[get|post]( options ) - simple with xml","suites":["ajax"],"line":2609,"code":"  QUnit.test(\"jQuery[get|post]( options ) - simple with xml\", function (assert) {\n    assert.expect(2);\n    var done = assert.async();\n    jQuery.when.apply(jQuery, jQuery.map([\"get\", \"post\"], function (method) {\n      return jQuery[method]({\n        url: url(\"mock.php?action=xml\"),\n        data: {\n          cal: \"5-2\"\n        },\n        success: function (xml) {\n          jQuery(\"math\", xml).each(function () {\n            assert.strictEqual(jQuery(\"result\", this).text(), \"3\", \"Check for XML\");\n          });\n        }\n      });\n    })).always(function () {\n      done();\n    });\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"jQuery.active","suites":["ajax"],"line":2631,"code":"  QUnit.test(\"jQuery.active\", function (assert) {\n    assert.expect(1);\n    assert.ok(jQuery.active === 0, \"ajax active counter should be zero: \" + jQuery.active);\n  });","file":"unit/ajax.js","skipped":false,"dir":"test"},{"name":"Animation( subject, props, opts ) - shape","suites":["animation"],"line":31,"code":"  QUnit.test(\"Animation( subject, props, opts ) - shape\", function (assert) {\n    assert.expect(20);\n    var subject = {\n        test: 0\n      },\n      props = {\n        test: 1\n      },\n      opts = {\n        queue: \"fx\",\n        duration: fxInterval * 10\n      },\n      animation = jQuery.Animation(subject, props, opts);\n    assert.equal(animation.elem, subject, \".elem is set to the exact object passed\");\n    assert.equal(animation.originalOptions, opts, \".originalOptions is set to options passed\");\n    assert.equal(animation.originalProperties, props, \".originalProperties is set to props passed\");\n    assert.notEqual(animation.props, props, \".props is not the original however\");\n    assert.deepEqual(animation.props, props, \".props is a copy of the original\");\n    assert.deepEqual(animation.opts, {\n      duration: fxInterval * 10,\n      queue: \"fx\",\n      specialEasing: {\n        test: undefined\n      },\n      easing: jQuery.easing._default\n    }, \".options is filled with default easing and specialEasing\");\n    assert.equal(animation.startTime, startTime, \"startTime was set\");\n    assert.equal(animation.duration, fxInterval * 10, \".duration is set\");\n    assert.equal(animation.tweens.length, 1, \".tweens has one Tween\");\n    assert.equal(typeof animation.tweens[0].run, \"function\", \"which has a .run function\");\n    assert.equal(typeof animation.createTween, \"function\", \".createTween is a function\");\n    assert.equal(typeof animation.stop, \"function\", \".stop is a function\");\n    assert.equal(typeof animation.done, \"function\", \".done is a function\");\n    assert.equal(typeof animation.fail, \"function\", \".fail is a function\");\n    assert.equal(typeof animation.always, \"function\", \".always is a function\");\n    assert.equal(typeof animation.progress, \"function\", \".progress is a function\");\n    assert.equal(jQuery.timers.length, 1, \"Added a timers function\");\n    assert.equal(jQuery.timers[0].elem, subject, \"...with .elem as the subject\");\n    assert.equal(jQuery.timers[0].anim, animation, \"...with .anim as the animation\");\n    assert.equal(jQuery.timers[0].queue, opts.queue, \"...with .queue\");\n\n    // Cleanup after ourselves by ticking to the end\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.prefilter( fn ) - calls prefilter after defaultPrefilter","suites":["animation"],"line":75,"code":"  QUnit.test(\"Animation.prefilter( fn ) - calls prefilter after defaultPrefilter\", function (assert) {\n    assert.expect(1);\n    var prefilter = this.sandbox.stub(),\n      defaultSpy = this.sandbox.spy(jQuery.Animation.prefilters, 0);\n    jQuery.Animation.prefilter(prefilter);\n    jQuery.Animation({}, {}, {});\n    assert.ok(prefilter.calledAfter(defaultSpy), \"our prefilter called after\");\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.prefilter( fn, true ) - calls prefilter before defaultPrefilter","suites":["animation"],"line":83,"code":"  QUnit.test(\"Animation.prefilter( fn, true ) - calls prefilter before defaultPrefilter\", function (assert) {\n    assert.expect(1);\n    var prefilter = this.sandbox.stub(),\n      defaultSpy = this.sandbox.spy(jQuery.Animation.prefilters, 0);\n    jQuery.Animation.prefilter(prefilter, true);\n    jQuery.Animation({}, {}, {});\n    assert.ok(prefilter.calledBefore(defaultSpy), \"our prefilter called before\");\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.prefilter - prefilter return hooks","suites":["animation"],"line":91,"code":"  QUnit.test(\"Animation.prefilter - prefilter return hooks\", function (assert) {\n    assert.expect(34);\n    var animation,\n      realAnimation,\n      element,\n      sandbox = this.sandbox,\n      ourAnimation = {\n        stop: this.sandbox.spy()\n      },\n      target = {\n        height: 50\n      },\n      props = {\n        height: 100\n      },\n      opts = {\n        duration: 100\n      },\n      prefilter = this.sandbox.spy(function () {\n        realAnimation = this;\n        sandbox.spy(realAnimation, \"createTween\");\n        assert.deepEqual(realAnimation.originalProperties, props, \"originalProperties\");\n        assert.equal(arguments[0], this.elem, \"first param elem\");\n        assert.equal(arguments[1], this.props, \"second param props\");\n        assert.equal(arguments[2], this.opts, \"third param opts\");\n        return ourAnimation;\n      }),\n      defaultSpy = sandbox.spy(jQuery.Animation.prefilters, 0),\n      queueSpy = sandbox.spy(function (next) {\n        next();\n      }),\n      TweenSpy = sandbox.spy(jQuery, \"Tween\");\n    jQuery.Animation.prefilter(prefilter, true);\n    sandbox.stub(jQuery.fx, \"timer\");\n    animation = jQuery.Animation(target, props, opts);\n    assert.equal(prefilter.callCount, 1, \"Called prefilter\");\n    assert.equal(defaultSpy.callCount, 0, \"Returning something from a prefilter caused remaining prefilters to not run\");\n    assert.equal(jQuery.fx.timer.callCount, 0, \"Returning something never queues a timer\");\n    assert.equal(animation, ourAnimation, \"Returning something returned it from jQuery.Animation\");\n    assert.equal(realAnimation.createTween.callCount, 0, \"Returning something never creates tweens\");\n    assert.equal(TweenSpy.callCount, 0, \"Returning something never creates tweens\");\n\n    // Test overridden usage on queues:\n    prefilter.resetHistory();\n    element = jQuery(\"<div>\").css(\"height\", 50).animate(props, 100).queue(queueSpy).animate(props, 100).queue(queueSpy).animate(props, 100).queue(queueSpy);\n    assert.equal(prefilter.callCount, 1, \"Called prefilter\");\n    assert.equal(queueSpy.callCount, 0, \"Next function in queue not called\");\n    realAnimation.opts.complete.call(realAnimation.elem);\n    assert.equal(queueSpy.callCount, 1, \"Next function in queue called after complete\");\n    assert.equal(prefilter.callCount, 2, \"Called prefilter again - animation #2\");\n    assert.equal(ourAnimation.stop.callCount, 0, \".stop() on our animation hasn't been called\");\n    element.stop();\n    assert.equal(ourAnimation.stop.callCount, 1, \".stop() called ourAnimation.stop()\");\n    assert.ok(!ourAnimation.stop.args[0][0], \".stop( falsy ) (undefined or false are both valid)\");\n    assert.equal(queueSpy.callCount, 2, \"Next queue function called\");\n    assert.ok(queueSpy.calledAfter(ourAnimation.stop), \"After our animation was told to stop\");\n\n    // ourAnimation.stop.reset();\n    assert.equal(prefilter.callCount, 3, \"Got the next animation\");\n    ourAnimation.stop.resetHistory();\n\n    // do not clear queue, gotoEnd\n    element.stop(false, true);\n    assert.ok(ourAnimation.stop.calledWith(true), \".stop(true) calls .stop(true)\");\n    assert.ok(queueSpy.calledAfter(ourAnimation.stop), \"and the next queue function ran after we were told\");\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.tweener( fn ) - unshifts a * tweener","suites":["animation"],"line":157,"code":"  QUnit.test(\"Animation.tweener( fn ) - unshifts a * tweener\", function (assert) {\n    assert.expect(2);\n    var starTweeners = jQuery.Animation.tweeners[\"*\"];\n    jQuery.Animation.tweener(jQuery.noop);\n    assert.equal(starTweeners.length, 2);\n    assert.deepEqual(starTweeners, [jQuery.noop, defaultTweener]);\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.tweener( 'prop', fn ) - unshifts a 'prop' tweener","suites":["animation"],"line":164,"code":"  QUnit.test(\"Animation.tweener( 'prop', fn ) - unshifts a 'prop' tweener\", function (assert) {\n    assert.expect(4);\n    var tweeners = jQuery.Animation.tweeners,\n      fn = function () {};\n    jQuery.Animation.tweener(\"prop\", jQuery.noop);\n    assert.equal(tweeners.prop.length, 1);\n    assert.deepEqual(tweeners.prop, [jQuery.noop]);\n    jQuery.Animation.tweener(\"prop\", fn);\n    assert.equal(tweeners.prop.length, 2);\n    assert.deepEqual(tweeners.prop, [fn, jQuery.noop]);\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"Animation.tweener( 'list of props', fn ) - unshifts a tweener to each prop","suites":["animation"],"line":175,"code":"  QUnit.test(\"Animation.tweener( 'list of props', fn ) - unshifts a tweener to each prop\", function (assert) {\n    assert.expect(2);\n    var tweeners = jQuery.Animation.tweeners,\n      fn = function () {};\n    jQuery.Animation.tweener(\"list of props\", jQuery.noop);\n    assert.deepEqual(tweeners, {\n      list: [jQuery.noop],\n      of: [jQuery.noop],\n      props: [jQuery.noop],\n      \"*\": [defaultTweener]\n    });\n\n    // Test with extra whitespaces\n    jQuery.Animation.tweener(\" list\\t of \\tprops\\n*\", fn);\n    assert.deepEqual(tweeners, {\n      list: [fn, jQuery.noop],\n      of: [fn, jQuery.noop],\n      props: [fn, jQuery.noop],\n      \"*\": [fn, defaultTweener]\n    });\n  });","file":"unit/animation.js","skipped":false,"dir":"test"},{"name":"jQuery.propFix integrity test","suites":["attributes"],"line":28,"code":"QUnit.test(\"jQuery.propFix integrity test\", function (assert) {\n  assert.expect(1);\n\n  //  This must be maintained and equal jQuery.attrFix when appropriate\n  //  Ensure that accidental or erroneous property\n  //  overwrites don't occur\n  //  This is simply for better code coverage and future proofing.\n  var props = {\n    \"tabindex\": \"tabIndex\",\n    \"readonly\": \"readOnly\",\n    \"for\": \"htmlFor\",\n    \"class\": \"className\",\n    \"maxlength\": \"maxLength\",\n    \"cellspacing\": \"cellSpacing\",\n    \"cellpadding\": \"cellPadding\",\n    \"rowspan\": \"rowSpan\",\n    \"colspan\": \"colSpan\",\n    \"usemap\": \"useMap\",\n    \"frameborder\": \"frameBorder\",\n    \"contenteditable\": \"contentEditable\"\n  };\n  assert.deepEqual(props, jQuery.propFix, \"jQuery.propFix passes integrity check\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String)","suites":["attributes"],"line":51,"code":"QUnit.test(\"attr(String)\", function (assert) {\n  assert.expect(50);\n  var extras, body, $body, select, optgroup, option, $img, styleElem, $button, $form, $a;\n  assert.equal(jQuery(\"#text1\").attr(\"type\"), \"text\", \"Check for type attribute\");\n  assert.equal(jQuery(\"#radio1\").attr(\"type\"), \"radio\", \"Check for type attribute\");\n  assert.equal(jQuery(\"#check1\").attr(\"type\"), \"checkbox\", \"Check for type attribute\");\n  assert.equal(jQuery(\"#simon1\").attr(\"rel\"), \"bookmark\", \"Check for rel attribute\");\n  assert.equal(jQuery(\"#google\").attr(\"title\"), \"Google!\", \"Check for title attribute\");\n  assert.equal(jQuery(\"#mark\").attr(\"hreflang\"), \"en\", \"Check for hreflang attribute\");\n  assert.equal(jQuery(\"#en\").attr(\"lang\"), \"en\", \"Check for lang attribute\");\n  assert.equal(jQuery(\"#simon\").attr(\"class\"), \"blog link\", \"Check for class attribute\");\n  assert.equal(jQuery(\"#name\").attr(\"name\"), \"name\", \"Check for name attribute\");\n  assert.equal(jQuery(\"#text1\").attr(\"name\"), \"action\", \"Check for name attribute\");\n  assert.ok(jQuery(\"#form\").attr(\"action\").indexOf(\"formaction\") >= 0, \"Check for action attribute\");\n  assert.equal(jQuery(\"#text1\").attr(\"value\", \"t\").attr(\"value\"), \"t\", \"Check setting the value attribute\");\n  assert.equal(jQuery(\"#text1\").attr(\"value\", \"\").attr(\"value\"), \"\", \"Check setting the value attribute to empty string\");\n  assert.equal(jQuery(\"<div value='t'></div>\").attr(\"value\"), \"t\", \"Check setting custom attr named 'value' on a div\");\n  assert.equal(jQuery(\"#form\").attr(\"blah\", \"blah\").attr(\"blah\"), \"blah\", \"Set non-existent attribute on a form\");\n  assert.equal(jQuery(\"#foo\").attr(\"height\"), undefined, \"Non existent height attribute should return undefined\");\n\n  // [7472] & [3113] (form contains an input with name=\"action\" or name=\"id\")\n  extras = jQuery(\"<input id='id' name='id' /><input id='name' name='name' /><input id='target' name='target' />\").appendTo(\"#testForm\");\n  assert.equal(jQuery(\"#form\").attr(\"action\", \"newformaction\").attr(\"action\"), \"newformaction\", \"Check that action attribute was changed\");\n  assert.equal(jQuery(\"#testForm\").attr(\"target\"), undefined, \"Retrieving target does not equal the input with name=target\");\n  assert.equal(jQuery(\"#testForm\").attr(\"target\", \"newTarget\").attr(\"target\"), \"newTarget\", \"Set target successfully on a form\");\n  assert.equal(jQuery(\"#testForm\").removeAttr(\"id\").attr(\"id\"), undefined, \"Retrieving id does not equal the input with name=id after id is removed [trac-7472]\");\n\n  // Bug trac-3685 (form contains input with name=\"name\")\n  assert.equal(jQuery(\"#testForm\").attr(\"name\"), undefined, \"Retrieving name does not retrieve input with name=name\");\n  extras.remove();\n  assert.equal(jQuery(\"#text1\").attr(\"maxlength\"), \"30\", \"Check for maxlength attribute\");\n  assert.equal(jQuery(\"#text1\").attr(\"maxLength\"), \"30\", \"Check for maxLength attribute\");\n  assert.equal(jQuery(\"#area1\").attr(\"maxLength\"), \"30\", \"Check for maxLength attribute\");\n\n  // using innerHTML in IE causes href attribute to be serialized to the full path\n  jQuery(\"<a></a>\").attr({\n    \"id\": \"tAnchor5\",\n    \"href\": \"#5\"\n  }).appendTo(\"#qunit-fixture\");\n  assert.equal(jQuery(\"#tAnchor5\").attr(\"href\"), \"#5\", \"Check for non-absolute href (an anchor)\");\n  jQuery(\"<a id='tAnchor6' href='#5'></a>\").appendTo(\"#qunit-fixture\");\n  assert.equal(jQuery(\"#tAnchor5\").prop(\"href\"), jQuery(\"#tAnchor6\").prop(\"href\"), \"Check for absolute href prop on an anchor\");\n  jQuery(\"<script type='jquery/test' src='#5' id='scriptSrc'></script>\").appendTo(\"#qunit-fixture\");\n  assert.equal(jQuery(\"#tAnchor5\").prop(\"href\"), jQuery(\"#scriptSrc\").prop(\"src\"), \"Check for absolute src prop on a script\");\n\n  // list attribute is readonly by default in browsers that support it\n  jQuery(\"#list-test\").attr(\"list\", \"datalist\");\n  assert.equal(jQuery(\"#list-test\").attr(\"list\"), \"datalist\", \"Check setting list attribute\");\n\n  // Related to [5574] and [5683]\n  body = document.body;\n  $body = jQuery(body);\n  assert.strictEqual($body.attr(\"foo\"), undefined, \"Make sure that a non existent attribute returns undefined\");\n  body.setAttribute(\"foo\", \"baz\");\n  assert.equal($body.attr(\"foo\"), \"baz\", \"Make sure the dom attribute is retrieved when no expando is found\");\n  $body.attr(\"foo\", \"cool\");\n  assert.equal($body.attr(\"foo\"), \"cool\", \"Make sure that setting works well when both expando and dom attribute are available\");\n  body.removeAttribute(\"foo\"); // Cleanup\n\n  select = document.createElement(\"select\");\n  optgroup = document.createElement(\"optgroup\");\n  option = document.createElement(\"option\");\n  optgroup.appendChild(option);\n  select.appendChild(optgroup);\n  assert.equal(jQuery(option).prop(\"selected\"), true, \"Make sure that a single option is selected, even when in an optgroup.\");\n  $img = jQuery(\"<img style='display:none' width='215' height='53' src='\" + baseURL + \"1x1.jpg'/>\").appendTo(\"body\");\n  assert.equal($img.attr(\"width\"), \"215\", \"Retrieve width attribute on an element with display:none.\");\n  assert.equal($img.attr(\"height\"), \"53\", \"Retrieve height attribute on an element with display:none.\");\n\n  // Check for style support\n  styleElem = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").css({\n    background: \"url(UPPERlower.gif)\"\n  });\n  assert.ok(!!~styleElem.attr(\"style\").indexOf(\"UPPERlower.gif\"), \"Check style attribute getter\");\n  assert.ok(!!~styleElem.attr(\"style\", \"position:absolute;\").attr(\"style\").indexOf(\"absolute\"), \"Check style setter\");\n\n  // Check value on button element (trac-1954)\n  $button = jQuery(\"<button>text</button>\").insertAfter(\"#button\");\n  assert.strictEqual($button.attr(\"value\"), undefined, \"Absence of value attribute on a button\");\n  assert.equal($button.attr(\"value\", \"foobar\").attr(\"value\"), \"foobar\", \"Value attribute on a button does not return innerHTML\");\n  assert.equal($button.attr(\"value\", \"baz\").html(), \"text\", \"Setting the value attribute does not change innerHTML\");\n\n  // Attributes with a colon on a table element (trac-1591)\n  assert.equal(jQuery(\"#table\").attr(\"test:attrib\"), undefined, \"Retrieving a non-existent attribute on a table with a colon does not throw an error.\");\n  assert.equal(jQuery(\"#table\").attr(\"test:attrib\", \"foobar\").attr(\"test:attrib\"), \"foobar\", \"Setting an attribute on a table with a colon does not throw an error.\");\n  $form = jQuery(\"<form class='something'></form>\").appendTo(\"#qunit-fixture\");\n  assert.equal($form.attr(\"class\"), \"something\", \"Retrieve the class attribute on a form.\");\n  $a = jQuery(\"<a href='#' onclick='something()'>Click</a>\").appendTo(\"#qunit-fixture\");\n  assert.equal($a.attr(\"onclick\"), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\");\n  assert.ok(jQuery(\"<div></div>\").attr(\"doesntexist\") === undefined, \"Make sure undefined is returned when no attribute is found.\");\n  assert.ok(jQuery(\"<div></div>\").attr(\"title\") === undefined, \"Make sure undefined is returned when no attribute is found.\");\n  assert.equal(jQuery(\"<div></div>\").attr(\"title\", \"something\").attr(\"title\"), \"something\", \"Set the title attribute.\");\n  assert.ok(jQuery().attr(\"doesntexist\") === undefined, \"Make sure undefined is returned when no element is there.\");\n  assert.equal(jQuery(\"<div></div>\").attr(\"value\"), undefined, \"An unset value on a div returns undefined.\");\n  assert.strictEqual(jQuery(\"<select><option value='property'></option></select>\").attr(\"value\"), undefined, \"An unset value on a select returns undefined.\");\n  $form = jQuery(\"#form\").attr(\"enctype\", \"multipart/form-data\");\n  assert.equal($form.prop(\"enctype\"), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 trac-6743)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String) on cloned elements, trac-9646","suites":["attributes"],"line":149,"code":"QUnit.test(\"attr(String) on cloned elements, trac-9646\", function (assert) {\n  assert.expect(4);\n  var div,\n    input = jQuery(\"<input name='tester' />\");\n  input.attr(\"name\");\n  assert.strictEqual(input.clone(true).attr(\"name\", \"test\")[0].name, \"test\", \"Name attribute should be changed on cloned element\");\n  div = jQuery(\"<div id='tester'></div>\");\n  div.attr(\"id\");\n  assert.strictEqual(div.clone(true).attr(\"id\", \"test\")[0].id, \"test\", \"Id attribute should be changed on cloned element\");\n  input = jQuery(\"<input value='tester' />\");\n  input.attr(\"value\");\n  assert.strictEqual(input.clone(true).attr(\"value\", \"test\")[0].value, \"test\", \"Value attribute should be changed on cloned element\");\n  assert.strictEqual(input.clone(true).attr(\"value\", 42)[0].value, \"42\", \"Value attribute should be changed on cloned element\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String) in XML Files","suites":["attributes"],"line":163,"code":"QUnit.test(\"attr(String) in XML Files\", function (assert) {\n  assert.expect(3);\n  var xml = createDashboardXML();\n  assert.equal(jQuery(\"locations\", xml).attr(\"class\"), \"foo\", \"Check class attribute in XML document\");\n  assert.equal(jQuery(\"location\", xml).attr(\"for\"), \"bar\", \"Check for attribute in XML document\");\n  assert.equal(jQuery(\"location\", xml).attr(\"checked\"), \"different\", \"Check that hooks are not attached in XML document\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String, Function)","suites":["attributes"],"line":170,"code":"QUnit.test(\"attr(String, Function)\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"#text1\").attr(\"value\", function () {\n    return this.id;\n  }).attr(\"value\"), \"text1\", \"Set value from id\");\n  assert.equal(jQuery(\"#text1\").attr(\"title\", function (i) {\n    return i;\n  }).attr(\"title\"), \"0\", \"Set value with an index\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(Hash)","suites":["attributes"],"line":179,"code":"QUnit.test(\"attr(Hash)\", function (assert) {\n  assert.expect(3);\n  var pass = true;\n  jQuery(\"#qunit-fixture div\").attr({\n    \"foo\": \"baz\",\n    \"zoo\": \"ping\"\n  }).each(function () {\n    if (this.getAttribute(\"foo\") !== \"baz\" && this.getAttribute(\"zoo\") !== \"ping\") {\n      pass = false;\n    }\n  });\n  assert.ok(pass, \"Set Multiple Attributes\");\n  assert.equal(jQuery(\"#text1\").attr({\n    \"value\": function () {\n      return this[\"id\"];\n    }\n  }).attr(\"value\"), \"text1\", \"Set attribute to computed value #1\");\n  assert.equal(jQuery(\"#text1\").attr({\n    \"title\": function (i) {\n      return i;\n    }\n  }).attr(\"title\"), \"0\", \"Set attribute to computed value #2\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String, Object)","suites":["attributes"],"line":202,"code":"QUnit.test(\"attr(String, Object)\", function (assert) {\n  assert.expect(71);\n  var $input,\n    $text,\n    $details,\n    attributeNode,\n    commentNode,\n    textNode,\n    obj,\n    table,\n    td,\n    j,\n    type,\n    check,\n    thrown,\n    button,\n    $radio,\n    $radios,\n    $svg,\n    div = jQuery(\"#qunit-fixture div\").attr(\"foo\", \"bar\"),\n    i = 0,\n    fail = false;\n  for (; i < div.length; i++) {\n    if (div[i].getAttribute(\"foo\") !== \"bar\") {\n      fail = i;\n      break;\n    }\n  }\n  assert.equal(fail, false, \"Set Attribute, the #\" + fail + \" element didn't get the attribute 'foo'\");\n  assert.ok(jQuery(\"#foo\").attr({\n    \"width\": null\n  }), \"Try to set an attribute to nothing\");\n  jQuery(\"#name\").attr(\"name\", \"something\");\n  assert.equal(jQuery(\"#name\").attr(\"name\"), \"something\", \"Set name attribute\");\n  jQuery(\"#name\").attr(\"name\", null);\n  assert.equal(jQuery(\"#name\").attr(\"name\"), undefined, \"Remove name attribute\");\n  $input = jQuery(\"<input>\", {\n    name: \"something\",\n    id: \"specified\"\n  });\n  assert.equal($input.attr(\"name\"), \"something\", \"Check element creation gets/sets the name attribute.\");\n  assert.equal($input.attr(\"id\"), \"specified\", \"Check element creation gets/sets the id attribute.\");\n\n  // As of fixing trac-11115, we only guarantee boolean property update for checked and selected\n  $input = jQuery(\"<input type='checkbox'/>\").attr(\"checked\", true);\n  assert.equal($input.prop(\"checked\"), true, \"Setting checked updates property (verified by .prop)\");\n  assert.equal($input[0].checked, true, \"Setting checked updates property (verified by native property)\");\n  $input = jQuery(\"<option></option>\").attr(\"selected\", true);\n  assert.equal($input.prop(\"selected\"), true, \"Setting selected updates property (verified by .prop)\");\n  assert.equal($input[0].selected, true, \"Setting selected updates property (verified by native property)\");\n  $input = jQuery(\"#check2\");\n  $input.prop(\"checked\", true).prop(\"checked\", false).attr(\"checked\", true);\n  assert.equal($input.attr(\"checked\"), \"checked\", \"Set checked (verified by .attr)\");\n  $input.prop(\"checked\", false).prop(\"checked\", true).attr(\"checked\", false);\n  assert.equal($input.attr(\"checked\"), undefined, \"Remove checked (verified by .attr)\");\n  $input = jQuery(\"#text1\").prop(\"readOnly\", true).prop(\"readOnly\", false).attr(\"readonly\", true);\n  assert.equal($input.attr(\"readonly\"), \"readonly\", \"Set readonly (verified by .attr)\");\n  $input.prop(\"readOnly\", false).prop(\"readOnly\", true).attr(\"readonly\", false);\n  assert.equal($input.attr(\"readonly\"), undefined, \"Remove readonly (verified by .attr)\");\n  $input = jQuery(\"#check2\").attr(\"checked\", true).attr(\"checked\", false).prop(\"checked\", true);\n  assert.equal($input[0].checked, true, \"Set checked property (verified by native property)\");\n  assert.equal($input.prop(\"checked\"), true, \"Set checked property (verified by .prop)\");\n  assert.equal($input.attr(\"checked\"), undefined, \"Setting checked property doesn't affect checked attribute\");\n  $input.attr(\"checked\", false).attr(\"checked\", true).prop(\"checked\", false);\n  assert.equal($input[0].checked, false, \"Clear checked property (verified by native property)\");\n  assert.equal($input.prop(\"checked\"), false, \"Clear checked property (verified by .prop)\");\n  assert.equal($input.attr(\"checked\"), \"checked\", \"Clearing checked property doesn't affect checked attribute\");\n  $input = jQuery(\"#check2\").attr(\"checked\", false).attr(\"checked\", \"checked\");\n  assert.equal($input.attr(\"checked\"), \"checked\", \"Set checked to 'checked' (verified by .attr)\");\n  $radios = jQuery(\"#checkedtest\").find(\"input[type='radio']\");\n  $radios.eq(1).trigger(\"click\");\n  assert.equal($radios.eq(1).prop(\"checked\"), true, \"Second radio was checked when clicked\");\n  assert.equal($radios.eq(0).attr(\"checked\"), \"checked\", \"First radio is still [checked]\");\n  $input = jQuery(\"#text1\").attr(\"readonly\", false).prop(\"readOnly\", true);\n  assert.equal($input[0].readOnly, true, \"Set readonly property (verified by native property)\");\n  assert.equal($input.prop(\"readOnly\"), true, \"Set readonly property (verified by .prop)\");\n  $input.attr(\"readonly\", true).prop(\"readOnly\", false);\n  assert.equal($input[0].readOnly, false, \"Clear readonly property (verified by native property)\");\n  assert.equal($input.prop(\"readOnly\"), false, \"Clear readonly property (verified by .prop)\");\n  $input = jQuery(\"#name\").attr(\"maxlength\", \"5\");\n  assert.equal($input[0].maxLength, 5, \"Set maxlength (verified by native property)\");\n  $input.attr(\"maxLength\", \"10\");\n  assert.equal($input[0].maxLength, 10, \"Set maxlength (verified by native property)\");\n\n  // HTML5 boolean attributes\n  $text = jQuery(\"#text1\").attr({\n    \"autofocus\": true,\n    \"required\": true\n  });\n  assert.equal($text.attr(\"autofocus\"), \"autofocus\", \"Reading autofocus attribute yields 'autofocus'\");\n  assert.equal($text.attr(\"autofocus\", false).attr(\"autofocus\"), undefined, \"Setting autofocus to false removes it\");\n  assert.equal($text.attr(\"required\"), \"required\", \"Reading required attribute yields 'required'\");\n  assert.equal($text.attr(\"required\", false).attr(\"required\"), undefined, \"Setting required attribute to false removes it\");\n  $details = jQuery(\"<details open></details>\").appendTo(\"#qunit-fixture\");\n  assert.equal($details.attr(\"open\"), \"open\", \"open attribute presence indicates true\");\n  assert.equal($details.attr(\"open\", false).attr(\"open\"), undefined, \"Setting open attribute to false removes it\");\n  $text.attr(\"data-something\", true);\n  assert.equal($text.attr(\"data-something\"), \"true\", \"Set data attributes\");\n  assert.equal($text.data(\"something\"), true, \"Setting data attributes are not affected by boolean settings\");\n  $text.attr(\"data-another\", false);\n  assert.equal($text.attr(\"data-another\"), \"false\", \"Set data attributes\");\n  assert.equal($text.data(\"another\"), false, \"Setting data attributes are not affected by boolean settings\");\n  assert.equal($text.attr(\"aria-disabled\", false).attr(\"aria-disabled\"), \"false\", \"Setting aria attributes are not affected by boolean settings\");\n  $text.removeData(\"something\").removeData(\"another\").removeAttr(\"aria-disabled\");\n  jQuery(\"#foo\").attr(\"contenteditable\", true);\n  assert.equal(jQuery(\"#foo\").attr(\"contenteditable\"), \"true\", \"Enumerated attributes are set properly\");\n  attributeNode = document.createAttribute(\"irrelevant\");\n  commentNode = document.createComment(\"some comment\");\n  textNode = document.createTextNode(\"some text\");\n  obj = {};\n  jQuery.each([commentNode, textNode, attributeNode], function (i, elem) {\n    var $elem = jQuery(elem);\n    $elem.attr(\"nonexisting\", \"foo\");\n    assert.strictEqual($elem.attr(\"nonexisting\"), undefined, \"attr(name, value) works correctly on comment and text nodes (bug trac-7500).\");\n  });\n  jQuery.each([window, document, obj, \"#firstp\"], function (i, elem) {\n    var oldVal = elem.nonexisting,\n      $elem = jQuery(elem);\n    assert.strictEqual($elem.attr(\"nonexisting\"), undefined, \"attr works correctly for non existing attributes (bug trac-7500).\");\n    assert.equal($elem.attr(\"nonexisting\", \"foo\").attr(\"nonexisting\"), \"foo\", \"attr falls back to prop on unsupported arguments\");\n    elem.nonexisting = oldVal;\n  });\n\n  // Register the property on the window for the previous assertion so it will be clean up\n  Globals.register(\"nonexisting\");\n  table = jQuery(\"#table\").append(\"<tr><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr>\");\n  td = table.find(\"td\").eq(0);\n  td.attr(\"rowspan\", \"2\");\n  assert.equal(td[0][\"rowSpan\"], 2, \"Check rowspan is correctly set\");\n  td.attr(\"colspan\", \"2\");\n  assert.equal(td[0][\"colSpan\"], 2, \"Check colspan is correctly set\");\n  table.attr(\"cellspacing\", \"2\");\n  assert.equal(table[0][\"cellSpacing\"], \"2\", \"Check cellspacing is correctly set\");\n  assert.equal(jQuery(\"#area1\").attr(\"value\"), undefined, \"Value attribute is distinct from value property.\");\n\n  // for trac-1070\n  jQuery(\"#name\").attr(\"someAttr\", \"0\");\n  assert.equal(jQuery(\"#name\").attr(\"someAttr\"), \"0\", \"Set attribute to a string of '0'\");\n  jQuery(\"#name\").attr(\"someAttr\", 0);\n  assert.equal(jQuery(\"#name\").attr(\"someAttr\"), \"0\", \"Set attribute to the number 0\");\n  jQuery(\"#name\").attr(\"someAttr\", 1);\n  assert.equal(jQuery(\"#name\").attr(\"someAttr\"), \"1\", \"Set attribute to the number 1\");\n\n  // using contents will get comments regular, text, and comment nodes\n  j = jQuery(\"#nonnodes\").contents();\n  j.attr(\"name\", \"attrvalue\");\n  assert.equal(j.attr(\"name\"), \"attrvalue\", \"Check node,textnode,comment for attr\");\n  j.removeAttr(\"name\");\n\n  // Type\n  type = jQuery(\"#check2\").attr(\"type\");\n  try {\n    jQuery(\"#check2\").attr(\"type\", \"hidden\");\n    assert.ok(true, \"No exception thrown on input type change\");\n  } catch (e) {\n    assert.ok(true, \"Exception thrown on input type change: \" + e);\n  }\n  check = document.createElement(\"input\");\n  thrown = true;\n  try {\n    jQuery(check).attr(\"type\", \"checkbox\");\n  } catch (e) {\n    thrown = false;\n  }\n  assert.ok(thrown, \"Exception thrown when trying to change type property\");\n  assert.equal(\"checkbox\", jQuery(check).attr(\"type\"), \"Verify that you can change the type of an input element that isn't in the DOM\");\n  check = jQuery(\"<input />\");\n  thrown = true;\n  try {\n    check.attr(\"type\", \"checkbox\");\n  } catch (e) {\n    thrown = false;\n  }\n  assert.ok(thrown, \"Exception thrown when trying to change type property\");\n  assert.equal(\"checkbox\", check.attr(\"type\"), \"Verify that you can change the type of an input element that isn't in the DOM\");\n  button = jQuery(\"#button\");\n  try {\n    button.attr(\"type\", \"submit\");\n    assert.ok(true, \"No exception thrown on button type change\");\n  } catch (e) {\n    assert.ok(true, \"Exception thrown on button type change: \" + e);\n  }\n  $radio = jQuery(\"<input>\", {\n    \"value\": \"sup\",\n    // Use uppercase here to ensure the type\n    // attrHook is still used\n    \"TYPE\": \"radio\"\n  }).appendTo(\"#testForm\");\n  assert.equal($radio.val(), \"sup\", \"Value is not reset when type is set after value on a radio\");\n\n  // Setting attributes on svg elements (bug trac-3116)\n  $svg = jQuery(\"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>\" + \"<circle cx='200' cy='200' r='150' />\" + \"</svg>\").appendTo(\"body\");\n  assert.equal($svg.attr(\"cx\", 100).attr(\"cx\"), \"100\", \"Set attribute on svg element\");\n  $svg.remove();\n\n  // undefined values are chainable\n  jQuery(\"#name\").attr(\"maxlength\", \"5\").removeAttr(\"nonexisting\");\n  assert.equal(typeof jQuery(\"#name\").attr(\"maxlength\", undefined), \"object\", \".attr('attribute', undefined) is chainable (trac-5571)\");\n  assert.equal(jQuery(\"#name\").attr(\"maxlength\", undefined).attr(\"maxlength\"), \"5\", \".attr('attribute', undefined) does not change value (trac-5571)\");\n  assert.equal(jQuery(\"#name\").attr(\"nonexisting\", undefined).attr(\"nonexisting\"), undefined, \".attr('attribute', undefined) does not create attribute (trac-5571)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(non-ASCII)","suites":["attributes"],"line":403,"code":"QUnit.test(\"attr(non-ASCII)\", function (assert) {\n  assert.expect(2);\n  var $div = jQuery(\"<div Ω='omega' aØc='alpha'></div>\").appendTo(\"#qunit-fixture\");\n  assert.equal($div.attr(\"Ω\"), \"omega\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\");\n  assert.equal($div.attr(\"AØC\"), \"alpha\", \".attr() exclusively lowercases characters in the range A-Z (gh-2730)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String, Object) - Loaded via XML document","suites":["attributes"],"line":409,"code":"QUnit.test(\"attr(String, Object) - Loaded via XML document\", function (assert) {\n  assert.expect(2);\n  var xml = createDashboardXML(),\n    titles = [];\n  jQuery(\"tab\", xml).each(function () {\n    titles.push(jQuery(this).attr(\"title\"));\n  });\n  assert.equal(titles[0], \"Location\", \"attr() in XML context: Check first title\");\n  assert.equal(titles[1], \"Users\", \"attr() in XML context: Check second title\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr(String, Object) - Loaded via XML fragment","suites":["attributes"],"line":419,"code":"QUnit.test(\"attr(String, Object) - Loaded via XML fragment\", function (assert) {\n  assert.expect(2);\n  var frag = createXMLFragment(),\n    $frag = jQuery(frag);\n  $frag.attr(\"test\", \"some value\");\n  assert.equal($frag.attr(\"test\"), \"some value\", \"set attribute\");\n  $frag.attr(\"test\", null);\n  assert.equal($frag.attr(\"test\"), undefined, \"remove attribute\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr('tabindex')","suites":["attributes"],"line":428,"code":"QUnit.test(\"attr('tabindex')\", function (assert) {\n  assert.expect(8);\n\n  // elements not natively tabbable\n  assert.equal(jQuery(\"#listWithTabIndex\").attr(\"tabindex\"), \"5\", \"not natively tabbable, with tabindex set to 0\");\n  assert.equal(jQuery(\"#divWithNoTabIndex\").attr(\"tabindex\"), undefined, \"not natively tabbable, no tabindex set\");\n\n  // anchor with href\n  assert.equal(jQuery(\"#linkWithNoTabIndex\").attr(\"tabindex\"), undefined, \"anchor with href, no tabindex set\");\n  assert.equal(jQuery(\"#linkWithTabIndex\").attr(\"tabindex\"), \"2\", \"anchor with href, tabindex set to 2\");\n  assert.equal(jQuery(\"#linkWithNegativeTabIndex\").attr(\"tabindex\"), \"-1\", \"anchor with href, tabindex set to -1\");\n\n  // anchor without href\n  assert.equal(jQuery(\"#linkWithNoHrefWithNoTabIndex\").attr(\"tabindex\"), undefined, \"anchor without href, no tabindex set\");\n  assert.equal(jQuery(\"#linkWithNoHrefWithTabIndex\").attr(\"tabindex\"), \"1\", \"anchor without href, tabindex set to 2\");\n  assert.equal(jQuery(\"#linkWithNoHrefWithNegativeTabIndex\").attr(\"tabindex\"), \"-1\", \"anchor without href, no tabindex set\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"attr('tabindex', value)","suites":["attributes"],"line":445,"code":"QUnit.test(\"attr('tabindex', value)\", function (assert) {\n  assert.expect(9);\n  var element = jQuery(\"#divWithNoTabIndex\");\n  assert.equal(element.attr(\"tabindex\"), undefined, \"start with no tabindex\");\n\n  // set a positive string\n  element.attr(\"tabindex\", \"1\");\n  assert.equal(element.attr(\"tabindex\"), \"1\", \"set tabindex to 1 (string)\");\n\n  // set a zero string\n  element.attr(\"tabindex\", \"0\");\n  assert.equal(element.attr(\"tabindex\"), \"0\", \"set tabindex to 0 (string)\");\n\n  // set a negative string\n  element.attr(\"tabindex\", \"-1\");\n  assert.equal(element.attr(\"tabindex\"), \"-1\", \"set tabindex to -1 (string)\");\n\n  // set a positive number\n  element.attr(\"tabindex\", 1);\n  assert.equal(element.attr(\"tabindex\"), \"1\", \"set tabindex to 1 (number)\");\n\n  // set a zero number\n  element.attr(\"tabindex\", 0);\n  assert.equal(element.attr(\"tabindex\"), \"0\", \"set tabindex to 0 (number)\");\n\n  // set a negative number\n  element.attr(\"tabindex\", -1);\n  assert.equal(element.attr(\"tabindex\"), \"-1\", \"set tabindex to -1 (number)\");\n  element = jQuery(\"#linkWithTabIndex\");\n  assert.equal(element.attr(\"tabindex\"), \"2\", \"start with tabindex 2\");\n  element.attr(\"tabindex\", -1);\n  assert.equal(element.attr(\"tabindex\"), \"-1\", \"set negative tabindex\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeAttr(String)","suites":["attributes"],"line":478,"code":"QUnit.test(\"removeAttr(String)\", function (assert) {\n  assert.expect(12);\n  var $first;\n  assert.equal(jQuery(\"<div class='hello'></div>\").removeAttr(\"class\").attr(\"class\"), undefined, \"remove class\");\n  assert.equal(jQuery(\"#form\").removeAttr(\"id\").attr(\"id\"), undefined, \"Remove id\");\n  assert.equal(jQuery(\"#foo\").attr(\"style\", \"position:absolute;\").removeAttr(\"style\").attr(\"style\"), undefined, \"Check removing style attribute\");\n  assert.equal(jQuery(\"#form\").attr(\"style\", \"position:absolute;\").removeAttr(\"style\").attr(\"style\"), undefined, \"Check removing style attribute on a form\");\n  assert.equal(jQuery(\"<div style='position: absolute'></div>\").appendTo(\"#foo\").removeAttr(\"style\").prop(\"style\").cssText, \"\", \"Check removing style attribute (trac-9699 Webkit)\");\n  assert.equal(jQuery(\"#fx-test-group\").attr(\"height\", \"3px\").removeAttr(\"height\").get(0).style.height, \"1px\", \"Removing height attribute has no effect on height set with style attribute\");\n  jQuery(\"#check1\").removeAttr(\"checked\").prop(\"checked\", true).removeAttr(\"checked\");\n  assert.equal(document.getElementById(\"check1\").checked, true, \"removeAttr should not set checked to false, since the checked attribute does NOT mirror the checked property\");\n  jQuery(\"#text1\").prop(\"readOnly\", true).removeAttr(\"readonly\");\n  assert.equal(document.getElementById(\"text1\").readOnly, false, \"removeAttr sets boolean properties to false\");\n  jQuery(\"#option2c\").removeAttr(\"selected\");\n  assert.equal(jQuery(\"#option2d\").attr(\"selected\"), \"selected\", \"Removing `selected` from an option that is not selected does not remove selected from the currently selected option (trac-10870)\");\n  try {\n    $first = jQuery(\"#first\").attr(\"contenteditable\", \"true\").removeAttr(\"contenteditable\");\n    assert.equal($first.attr(\"contenteditable\"), undefined, \"Remove the contenteditable attribute\");\n  } catch (e) {\n    assert.ok(false, \"Removing contenteditable threw an error (trac-10429)\");\n  }\n  $first = jQuery(\"<div Case='mixed'></div>\");\n  assert.equal($first.attr(\"Case\"), \"mixed\", \"case of attribute doesn't matter\");\n  $first.removeAttr(\"Case\");\n  assert.equal($first.attr(\"Case\"), undefined, \"mixed-case attribute was removed\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeAttr(String) in XML","suites":["attributes"],"line":504,"code":"QUnit.test(\"removeAttr(String) in XML\", function (assert) {\n  assert.expect(7);\n  var xml = createDashboardXML(),\n    iwt = jQuery(\"infowindowtab\", xml);\n  assert.equal(iwt.attr(\"normal\"), \"ab\", \"Check initial value\");\n  iwt.removeAttr(\"Normal\");\n  assert.equal(iwt.attr(\"normal\"), \"ab\", \"Should still be there\");\n  iwt.removeAttr(\"normal\");\n  assert.equal(iwt.attr(\"normal\"), undefined, \"Removed\");\n  assert.equal(iwt.attr(\"mixedCase\"), \"yes\", \"Check initial value\");\n  assert.equal(iwt.attr(\"mixedcase\"), undefined, \"toLowerCase not work good\");\n  iwt.removeAttr(\"mixedcase\");\n  assert.equal(iwt.attr(\"mixedCase\"), \"yes\", \"Should still be there\");\n  iwt.removeAttr(\"mixedCase\");\n  assert.equal(iwt.attr(\"mixedCase\"), undefined, \"Removed\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeAttr(Multi String, variable space width)","suites":["attributes"],"line":520,"code":"QUnit.test(\"removeAttr(Multi String, variable space width)\", function (assert) {\n  assert.expect(8);\n  var div = jQuery(\"<div id='a' alt='b' title='c' rel='d'></div>\"),\n    tests = {\n      id: \"a\",\n      alt: \"b\",\n      title: \"c\",\n      rel: \"d\"\n    };\n  jQuery.each(tests, function (key, val) {\n    assert.equal(div.attr(key), val, \"Attribute `\" + key + \"` exists, and has a value of `\" + val + \"`\");\n  });\n  div.removeAttr(\"id   alt title  rel  \");\n  jQuery.each(tests, function (key) {\n    assert.equal(div.attr(key), undefined, \"Attribute `\" + key + \"` was removed\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)","suites":["attributes"],"line":537,"code":"QUnit.test(\"removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)\", function (assert) {\n  assert.expect(8);\n  var div = jQuery(\"<div id='a' data-\\xA0='b' title='c' rel='d'></div>\");\n  var tests = {\n    id: \"a\",\n    \"data-\\xA0\": \"b\",\n    title: \"c\",\n    rel: \"d\"\n  };\n  jQuery.each(tests, function (key, val) {\n    assert.equal(div.attr(key), val, \"Attribute \\\"\" + key + \"\\\" exists, and has a value of \\\"\" + val + \"\\\"\");\n  });\n  div.removeAttr(\"id   data-\\xA0 title  rel  \");\n  jQuery.each(tests, function (key) {\n    assert.equal(div.attr(key), undefined, \"Attribute \\\"\" + key + \"\\\" was removed\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"prop(String, Object)","suites":["attributes"],"line":554,"code":"QUnit.test(\"prop(String, Object)\", function (assert) {\n  assert.expect(17);\n  assert.equal(jQuery(\"#text1\").prop(\"value\"), \"Test\", \"Check for value attribute\");\n  assert.equal(jQuery(\"#text1\").prop(\"value\", \"Test2\").prop(\"defaultValue\"), \"Test\", \"Check for defaultValue attribute\");\n  assert.equal(jQuery(\"#select2\").prop(\"selectedIndex\"), 3, \"Check for selectedIndex attribute\");\n  assert.equal(jQuery(\"#foo\").prop(\"nodeName\").toUpperCase(), \"DIV\", \"Check for nodeName attribute\");\n  assert.equal(jQuery(\"#foo\").prop(\"tagName\").toUpperCase(), \"DIV\", \"Check for tagName attribute\");\n  assert.equal(jQuery(\"<option></option>\").prop(\"selected\"), false, \"Check selected attribute on disconnected element.\");\n  assert.equal(jQuery(\"#listWithTabIndex\").prop(\"tabindex\"), 5, \"Check retrieving tabindex\");\n  jQuery(\"#text1\").prop(\"readonly\", true);\n  assert.equal(document.getElementById(\"text1\").readOnly, true, \"Check setting readOnly property with 'readonly'\");\n  assert.equal(jQuery(\"#label-for\").prop(\"for\"), \"action\", \"Check retrieving htmlFor\");\n  jQuery(\"#text1\").prop(\"class\", \"test\");\n  assert.equal(document.getElementById(\"text1\").className, \"test\", \"Check setting className with 'class'\");\n  assert.equal(jQuery(\"#text1\").prop(\"maxlength\"), 30, \"Check retrieving maxLength\");\n  jQuery(\"#table\").prop(\"cellspacing\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"cellSpacing\"), \"1\", \"Check setting and retrieving cellSpacing\");\n  jQuery(\"#table\").prop(\"cellpadding\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"cellPadding\"), \"1\", \"Check setting and retrieving cellPadding\");\n  jQuery(\"#table\").prop(\"rowspan\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"rowSpan\"), 1, \"Check setting and retrieving rowSpan\");\n  jQuery(\"#table\").prop(\"colspan\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"colSpan\"), 1, \"Check setting and retrieving colSpan\");\n  jQuery(\"#table\").prop(\"usemap\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"useMap\"), 1, \"Check setting and retrieving useMap\");\n  jQuery(\"#table\").prop(\"frameborder\", 1);\n  assert.equal(jQuery(\"#table\").prop(\"frameBorder\"), 1, \"Check setting and retrieving frameBorder\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"prop(String, Object) on null/undefined","suites":["attributes"],"line":582,"code":"QUnit.test(\"prop(String, Object) on null/undefined\", function (assert) {\n  assert.expect(14);\n  var select,\n    optgroup,\n    option,\n    attributeNode,\n    commentNode,\n    textNode,\n    obj,\n    $form,\n    body = document.body,\n    $body = jQuery(body);\n  assert.ok($body.prop(\"nextSibling\") === null, \"Make sure a null expando returns null\");\n  body[\"foo\"] = \"bar\";\n  assert.equal($body.prop(\"foo\"), \"bar\", \"Make sure the expando is preferred over the dom attribute\");\n  body[\"foo\"] = undefined;\n  assert.ok($body.prop(\"foo\") === undefined, \"Make sure the expando is preferred over the dom attribute, even if undefined\");\n  select = document.createElement(\"select\");\n  optgroup = document.createElement(\"optgroup\");\n  option = document.createElement(\"option\");\n  optgroup.appendChild(option);\n  select.appendChild(optgroup);\n  assert.equal(jQuery(option).prop(\"selected\"), true, \"Make sure that a single option is selected, even when in an optgroup.\");\n  assert.equal(jQuery(document).prop(\"nodeName\"), \"#document\", \"prop works correctly on document nodes (bug trac-7451).\");\n  attributeNode = document.createAttribute(\"irrelevant\");\n  commentNode = document.createComment(\"some comment\");\n  textNode = document.createTextNode(\"some text\");\n  obj = {};\n  jQuery.each([document, attributeNode, commentNode, textNode, obj, \"#firstp\"], function (i, ele) {\n    assert.strictEqual(jQuery(ele).prop(\"nonexisting\"), undefined, \"prop works correctly for non existing attributes (bug trac-7500).\");\n  });\n  obj = {};\n  jQuery.each([document, obj], function (i, ele) {\n    var $ele = jQuery(ele);\n    $ele.prop(\"nonexisting\", \"foo\");\n    assert.equal($ele.prop(\"nonexisting\"), \"foo\", \"prop(name, value) works correctly for non existing attributes (bug trac-7500).\");\n  });\n  jQuery(document).removeProp(\"nonexisting\");\n  $form = jQuery(\"#form\").prop(\"enctype\", \"multipart/form-data\");\n  assert.equal($form.prop(\"enctype\"), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 trac-6743)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"prop('tabindex')","suites":["attributes"],"line":623,"code":"QUnit.test(\"prop('tabindex')\", function (assert) {\n  assert.expect(11);\n\n  // inputs without tabIndex attribute\n  assert.equal(jQuery(\"#inputWithoutTabIndex\").prop(\"tabindex\"), 0, \"input without tabindex\");\n  assert.equal(jQuery(\"#buttonWithoutTabIndex\").prop(\"tabindex\"), 0, \"button without tabindex\");\n  assert.equal(jQuery(\"#textareaWithoutTabIndex\").prop(\"tabindex\"), 0, \"textarea without tabindex\");\n\n  // elements not natively tabbable\n  assert.equal(jQuery(\"#listWithTabIndex\").prop(\"tabindex\"), 5, \"not natively tabbable, with tabindex set to 0\");\n  assert.equal(jQuery(\"#divWithNoTabIndex\").prop(\"tabindex\"), -1, \"not natively tabbable, no tabindex set\");\n\n  // anchor with href\n  assert.equal(jQuery(\"#linkWithNoTabIndex\").prop(\"tabindex\"), 0, \"anchor with href, no tabindex set\");\n  assert.equal(jQuery(\"#linkWithTabIndex\").prop(\"tabindex\"), 2, \"anchor with href, tabindex set to 2\");\n  assert.equal(jQuery(\"#linkWithNegativeTabIndex\").prop(\"tabindex\"), -1, \"anchor with href, tabindex set to -1\");\n\n  // anchor without href\n  assert.equal(jQuery(\"#linkWithNoHrefWithNoTabIndex\").prop(\"tabindex\"), -1, \"anchor without href, no tabindex set\");\n  assert.equal(jQuery(\"#linkWithNoHrefWithTabIndex\").prop(\"tabindex\"), 1, \"anchor without href, tabindex set to 2\");\n  assert.equal(jQuery(\"#linkWithNoHrefWithNegativeTabIndex\").prop(\"tabindex\"), -1, \"anchor without href, no tabindex set\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"image.prop( 'tabIndex' )","suites":["attributes"],"line":645,"code":"QUnit.test(\"image.prop( 'tabIndex' )\", function (assert) {\n  assert.expect(1);\n  var image = jQuery(\"<img src='\" + baseURL + \"1x1.jpg' />\").appendTo(\"#qunit-fixture\");\n  assert.equal(image.prop(\"tabIndex\"), -1, \"tabIndex on image\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"prop('tabindex', value)","suites":["attributes"],"line":650,"code":"QUnit.test(\"prop('tabindex', value)\", function (assert) {\n  assert.expect(10);\n  var clone,\n    element = jQuery(\"#divWithNoTabIndex\");\n  assert.equal(element.prop(\"tabindex\"), -1, \"start with no tabindex\");\n\n  // set a positive string\n  element.prop(\"tabindex\", \"1\");\n  assert.equal(element.prop(\"tabindex\"), 1, \"set tabindex to 1 (string)\");\n\n  // set a zero string\n  element.prop(\"tabindex\", \"0\");\n  assert.equal(element.prop(\"tabindex\"), 0, \"set tabindex to 0 (string)\");\n\n  // set a negative string\n  element.prop(\"tabindex\", \"-1\");\n  assert.equal(element.prop(\"tabindex\"), -1, \"set tabindex to -1 (string)\");\n\n  // set a positive number\n  element.prop(\"tabindex\", 1);\n  assert.equal(element.prop(\"tabindex\"), 1, \"set tabindex to 1 (number)\");\n\n  // set a zero number\n  element.prop(\"tabindex\", 0);\n  assert.equal(element.prop(\"tabindex\"), 0, \"set tabindex to 0 (number)\");\n\n  // set a negative number\n  element.prop(\"tabindex\", -1);\n  assert.equal(element.prop(\"tabindex\"), -1, \"set tabindex to -1 (number)\");\n  element = jQuery(\"#linkWithTabIndex\");\n  assert.equal(element.prop(\"tabindex\"), 2, \"start with tabindex 2\");\n  element.prop(\"tabindex\", -1);\n  assert.equal(element.prop(\"tabindex\"), -1, \"set negative tabindex\");\n  clone = element.clone();\n  clone.prop(\"tabindex\", 1);\n  assert.equal(clone[0].getAttribute(\"tabindex\"), \"1\", \"set tabindex on cloned element\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"option.prop('selected', true) affects select.selectedIndex (gh-2732)","suites":["attributes"],"line":687,"code":"QUnit.test(\"option.prop('selected', true) affects select.selectedIndex (gh-2732)\", function (assert) {\n  assert.expect(2);\n  function addOptions($elem) {\n    return $elem.append(jQuery(\"<option></option>\").val(\"a\").text(\"One\"), jQuery(\"<option></option>\").val(\"b\").text(\"Two\"), jQuery(\"<option></option>\").val(\"c\").text(\"Three\")).find(\"[value=a]\").prop(\"selected\", true).end().find(\"[value=c]\").prop(\"selected\", true).end();\n  }\n  var $optgroup,\n    $select = jQuery(\"<select></select>\");\n\n  // Check select with options\n  addOptions($select).appendTo(\"#qunit-fixture\");\n  $select.find(\"[value=b]\").prop(\"selected\", true);\n  assert.equal($select[0].selectedIndex, 1, \"Setting option selected affects selectedIndex\");\n  $select.empty();\n\n  // Check select with optgroup\n  $optgroup = jQuery(\"<optgroup></optgroup>\");\n  addOptions($optgroup).appendTo($select);\n  $select.find(\"[value=b]\").prop(\"selected\", true);\n  assert.equal($select[0].selectedIndex, 1, \"Setting option in optgroup selected affects selectedIndex\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeProp(String)","suites":["attributes"],"line":707,"code":"QUnit.test(\"removeProp(String)\", function (assert) {\n  assert.expect(6);\n  var attributeNode = document.createAttribute(\"irrelevant\"),\n    commentNode = document.createComment(\"some comment\"),\n    textNode = document.createTextNode(\"some text\"),\n    obj = {};\n  assert.strictEqual(jQuery(\"#firstp\").prop(\"nonexisting\", \"foo\").removeProp(\"nonexisting\")[0][\"nonexisting\"], undefined, \"removeprop works correctly on DOM element nodes\");\n  jQuery.each([document, obj], function (i, ele) {\n    var $ele = jQuery(ele);\n    $ele.prop(\"nonexisting\", \"foo\").removeProp(\"nonexisting\");\n    assert.strictEqual(ele[\"nonexisting\"], undefined, \"removeProp works correctly on non DOM element nodes (bug trac-7500).\");\n  });\n  jQuery.each([commentNode, textNode, attributeNode], function (i, ele) {\n    var $ele = jQuery(ele);\n    $ele.prop(\"nonexisting\", \"foo\").removeProp(\"nonexisting\");\n    assert.strictEqual(ele[\"nonexisting\"], undefined, \"removeProp works correctly on non DOM element nodes (bug trac-7500).\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val() after modification","suites":["attributes"],"line":725,"code":"QUnit.test(\"val() after modification\", function (assert) {\n  assert.expect(1);\n  document.getElementById(\"text1\").value = \"bla\";\n  assert.equal(jQuery(\"#text1\").val(), \"bla\", \"Check for modified value of input element\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val()","suites":["attributes"],"line":730,"code":"QUnit.test(\"val()\", function (assert) {\n  assert.expect(20 + (jQuery.fn.serialize ? 6 : 0));\n  var checks, $button;\n  assert.equal(jQuery(\"#text1\").val(), \"Test\", \"Check for value of input element\");\n\n  // ticket trac-1714 this caused a JS error in IE\n  assert.equal(jQuery(\"#first\").val(), \"\", \"Check a paragraph element to see if it has a value\");\n  assert.ok(jQuery([]).val() === undefined, \"Check an empty jQuery object will return undefined from val\");\n  assert.equal(jQuery(\"#select2\").val(), \"3\", \"Call val() on a single='single' select\");\n  assert.deepEqual(jQuery(\"#select3\").val(), [\"1\", \"2\"], \"Call val() on a multiple='multiple' select\");\n  assert.equal(jQuery(\"#option3c\").val(), \"2\", \"Call val() on a option element with value\");\n  assert.equal(jQuery(\"#option3a\").val(), \"\", \"Call val() on a option element with empty value\");\n  assert.equal(jQuery(\"#option3e\").val(), \"no value\", \"Call val() on a option element with no value attribute\");\n  assert.equal(jQuery(\"#option3a\").val(), \"\", \"Call val() on a option element with no value attribute\");\n  jQuery(\"#select3\").val(\"\");\n  assert.deepEqual(jQuery(\"#select3\").val(), [\"\"], \"Call val() on a multiple='multiple' select\");\n  assert.deepEqual(jQuery(\"#select4\").val(), [], \"Call val() on multiple='multiple' select with all disabled options\");\n  jQuery(\"#select4 optgroup\").add(\"#select4 > [disabled]\").attr(\"disabled\", false);\n  assert.deepEqual(jQuery(\"#select4\").val(), [\"2\", \"3\"], \"Call val() on multiple='multiple' select with some disabled options\");\n  jQuery(\"#select4\").attr(\"disabled\", true);\n  assert.deepEqual(jQuery(\"#select4\").val(), [\"2\", \"3\"], \"Call val() on disabled multiple='multiple' select\");\n  assert.equal(jQuery(\"#select5\").val(), \"3\", \"Check value on ambiguous select.\");\n  jQuery(\"#select5\").val(1);\n  assert.equal(jQuery(\"#select5\").val(), \"1\", \"Check value on ambiguous select.\");\n  jQuery(\"#select5\").val(3);\n  assert.equal(jQuery(\"#select5\").val(), \"3\", \"Check value on ambiguous select.\");\n  assert.strictEqual(jQuery(\"<select name='select12584' id='select12584'><option value='1' disabled='disabled'>1</option></select>\").val(), null, \"Select-one with only option disabled (trac-12584)\");\n  if (includesModule(\"serialize\")) {\n    checks = jQuery(\"<input type='checkbox' name='test' value='1'/><input type='checkbox' name='test' value='2'/><input type='checkbox' name='test' value=''/><input type='checkbox' name='test'/>\").appendTo(\"#form\");\n    assert.deepEqual(checks.serialize(), \"\", \"Get unchecked values.\");\n    assert.equal(checks.eq(3).val(), \"on\", \"Make sure a value of 'on' is provided if none is specified.\");\n    checks.val([\"2\"]);\n    assert.deepEqual(checks.serialize(), \"test=2\", \"Get a single checked value.\");\n    checks.val([\"1\", \"\"]);\n    assert.deepEqual(checks.serialize(), \"test=1&test=\", \"Get multiple checked values.\");\n    checks.val([\"\", \"2\"]);\n    assert.deepEqual(checks.serialize(), \"test=2&test=\", \"Get multiple checked values.\");\n    checks.val([\"1\", \"on\"]);\n    assert.deepEqual(checks.serialize(), \"test=1&test=on\", \"Get multiple checked values.\");\n    checks.remove();\n  }\n  $button = jQuery(\"<button value='foobar'>text</button>\").insertAfter(\"#button\");\n  assert.equal($button.val(), \"foobar\", \"Value retrieval on a button does not return innerHTML\");\n  assert.equal($button.val(\"baz\").html(), \"text\", \"Setting the value does not change innerHTML\");\n  assert.equal(jQuery(\"<option></option>\").val(\"test\").attr(\"value\"), \"test\", \"Setting value sets the value attribute\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val() with non-matching values on dropdown list","suites":["attributes"],"line":776,"code":"QUnit.test(\"val() with non-matching values on dropdown list\", function (assert) {\n  assert.expect(3);\n  jQuery(\"#select5\").val(\"\");\n  assert.equal(jQuery(\"#select5\").val(), null, \"Non-matching set on select-one\");\n  var select6 = jQuery(\"<select multiple id=\\\"select6\\\"><option value=\\\"1\\\">A</option><option value=\\\"2\\\">B</option></select>\").appendTo(\"#form\");\n  jQuery(select6).val(\"nothing\");\n  assert.deepEqual(jQuery(select6).val(), [], \"Non-matching set (single value) on select-multiple\");\n  jQuery(select6).val([\"nothing1\", \"nothing2\"]);\n  assert.deepEqual(jQuery(select6).val(), [], \"Non-matching set (array of values) on select-multiple\");\n  select6.remove();\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val() respects numbers without exception (Bug trac-9319) - progress","suites":["attributes"],"line":787,"code":"QUnit.test(\"val() respects numbers without exception (Bug trac-9319) - progress\", function (assert) {\n  assert.expect(2);\n  var $progress = jQuery(\"<progress max='10' value='1.5'></progress>\");\n  try {\n    assert.equal(typeof $progress.val(), \"number\", \"progress, returns a number and does not throw exception\");\n    assert.equal($progress.val(), $progress[0].value, \"progress, api matches host and does not throw exception\");\n  } catch (e) {}\n  $progress.remove();\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val(String/Number)","suites":["attributes"],"line":836,"code":"QUnit.test(\"val(String/Number)\", function (assert) {\n  testVal(bareObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val(Function)","suites":["attributes"],"line":839,"code":"QUnit.test(\"val(Function)\", function (assert) {\n  testVal(functionReturningObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val(Array of Numbers) (Bug trac-7123)","suites":["attributes"],"line":842,"code":"QUnit.test(\"val(Array of Numbers) (Bug trac-7123)\", function (assert) {\n  assert.expect(4);\n  jQuery(\"#form\").append(\"<input type='checkbox' name='arrayTest' value='1' /><input type='checkbox' name='arrayTest' value='2' /><input type='checkbox' name='arrayTest' value='3' checked='checked' /><input type='checkbox' name='arrayTest' value='4' />\");\n  var elements = jQuery(\"#form input[name=arrayTest]\").val([1, 2]);\n  assert.ok(elements[0].checked, \"First element was checked\");\n  assert.ok(elements[1].checked, \"Second element was checked\");\n  assert.ok(!elements[2].checked, \"Third element was unchecked\");\n  assert.ok(!elements[3].checked, \"Fourth element remained unchecked\");\n  elements.remove();\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val(Function) with incoming value","suites":["attributes"],"line":852,"code":"QUnit.test(\"val(Function) with incoming value\", function (assert) {\n  assert.expect(10);\n  var oldVal = jQuery(\"#text1\").val();\n  jQuery(\"#text1\").val(function (i, val) {\n    assert.equal(val, oldVal, \"Make sure the incoming value is correct.\");\n    return \"test\";\n  });\n  assert.equal(document.getElementById(\"text1\").value, \"test\", \"Check for modified (via val(String)) value of input element\");\n  oldVal = jQuery(\"#text1\").val();\n  jQuery(\"#text1\").val(function (i, val) {\n    assert.equal(val, oldVal, \"Make sure the incoming value is correct.\");\n    return 67;\n  });\n  assert.equal(document.getElementById(\"text1\").value, \"67\", \"Check for modified (via val(Number)) value of input element\");\n  oldVal = jQuery(\"#select1\").val();\n  jQuery(\"#select1\").val(function (i, val) {\n    assert.equal(val, oldVal, \"Make sure the incoming value is correct.\");\n    return \"3\";\n  });\n  assert.equal(jQuery(\"#select1\").val(), \"3\", \"Check for modified (via val(String)) value of select element\");\n  oldVal = jQuery(\"#select1\").val();\n  jQuery(\"#select1\").val(function (i, val) {\n    assert.equal(val, oldVal, \"Make sure the incoming value is correct.\");\n    return 2;\n  });\n  assert.equal(jQuery(\"#select1\").val(), \"2\", \"Check for modified (via val(Number)) value of select element\");\n  jQuery(\"#select1\").append(\"<option value='4'>four</option>\");\n  oldVal = jQuery(\"#select1\").val();\n  jQuery(\"#select1\").val(function (i, val) {\n    assert.equal(val, oldVal, \"Make sure the incoming value is correct.\");\n    return 4;\n  });\n  assert.equal(jQuery(\"#select1\").val(), \"4\", \"Should be possible to set the val() to a newly created option\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"val(select) after form.reset() (Bug trac-2551)","suites":["attributes"],"line":888,"code":"QUnit.test(\"val(select) after form.reset() (Bug trac-2551)\", function (assert) {\n  assert.expect(3);\n  jQuery(\"<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option value='gf'>gf</option></select></form>\").appendTo(\"#qunit-fixture\");\n  jQuery(\"#kkk\").val(\"gf\");\n  document[\"kk\"].reset();\n  assert.equal(jQuery(\"#kkk\")[0].value, \"cf\", \"Check value of select after form reset.\");\n  assert.equal(jQuery(\"#kkk\").val(), \"cf\", \"Check value of select after form reset.\");\n\n  // re-verify the multi-select is not broken (after form.reset) by our fix for single-select\n  assert.deepEqual(jQuery(\"#select3\").val(), [\"1\", \"2\"], \"Call val() on a multiple='multiple' select\");\n  jQuery(\"#kk\").remove();\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"select.val(space characters) (gh-2978)","suites":["attributes"],"line":900,"code":"QUnit.test(\"select.val(space characters) (gh-2978)\", function (assert) {\n  assert.expect(37);\n  var $select = jQuery(\"<select></select>\").appendTo(\"#qunit-fixture\"),\n    spaces = {\n      \"\\\\t\": {\n        html: \"&#09;\",\n        val: \"\\t\"\n      },\n      \"\\\\n\": {\n        html: \"&#10;\",\n        val: \"\\n\"\n      },\n      \"\\\\r\": {\n        html: \"&#13;\",\n        val: \"\\r\"\n      },\n      \"\\\\f\": \"\\f\",\n      \"space\": \" \",\n      \"\\\\u00a0\": \"\\u00a0\",\n      \"\\\\u1680\": \"\\u1680\"\n    },\n    html = \"\";\n  jQuery.each(spaces, function (key, obj) {\n    var value = obj.html || obj;\n    html += \"<option value='attr\" + value + \"'></option>\";\n    html += \"<option value='at\" + value + \"tr'></option>\";\n    html += \"<option value='\" + value + \"attr'></option>\";\n  });\n  $select.html(html);\n  jQuery.each(spaces, function (key, obj) {\n    var val = obj.val || obj;\n    $select.val(\"attr\" + val);\n    assert.equal($select.val(), \"attr\" + val, \"Value ending with space character (\" + key + \") selected (attr)\");\n    $select.val(\"at\" + val + \"tr\");\n    assert.equal($select.val(), \"at\" + val + \"tr\", \"Value with space character (\" + key + \") in the middle selected (attr)\");\n    $select.val(val + \"attr\");\n    assert.equal($select.val(), val + \"attr\", \"Value starting with space character (\" + key + \") selected (attr)\");\n  });\n  jQuery.each(spaces, function (key, obj) {\n    var value = obj.html || obj,\n      val = obj.val || obj;\n    html = \"\";\n    html += \"<option>text\" + value + \"</option>\";\n    html += \"<option>te\" + value + \"xt</option>\";\n    html += \"<option>\" + value + \"text</option>\";\n    $select.html(html);\n    if (/^\\\\u/.test(key)) {\n      $select.val(val + \"text\");\n      assert.equal($select.val(), val + \"text\", \"Value with non-HTML space character at beginning is not stripped (\" + key + \") selected (\" + key + \"text)\");\n      $select.val(\"te\" + val + \"xt\");\n      assert.equal($select.val(), \"te\" + val + \"xt\", \"Value with non-space whitespace character (\" + key + \") in the middle selected (text)\");\n      $select.val(\"text\" + val);\n      assert.equal($select.val(), \"text\" + val, \"Value with non-HTML space character at end is not stripped (\" + key + \") selected (text\" + key + \")\");\n    } else {\n      $select.val(\"text\");\n      assert.equal($select.val(), \"text\", \"Value with HTML space character at beginning or end is stripped (\" + key + \") selected (text)\");\n      $select.val(\"te xt\");\n      assert.equal($select.val(), \"te xt\", \"Value with space character (\" + key + \") in the middle selected (text)\");\n    }\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"radio.val(space characters)","suites":["attributes"],"line":961,"code":"QUnit.test(\"radio.val(space characters)\", function (assert) {\n  assert.expect(42);\n  var radio = jQuery(\"<input type='radio'/>\").appendTo(\"#qunit-fixture\"),\n    spaces = {\n      \"\\\\t\": {\n        html: \"&#09;\",\n        val: \"\\t\"\n      },\n      \"\\\\n\": {\n        html: \"&#10;\",\n        val: \"\\n\"\n      },\n      \"\\\\r\": {\n        html: \"&#13;\",\n        val: \"\\r\"\n      },\n      \"\\\\f\": \"\\f\",\n      \"space\": \" \",\n      \"\\\\u00a0\": \"\\u00a0\",\n      \"\\\\u1680\": \"\\u1680\"\n    };\n  jQuery.each(spaces, function (key, obj) {\n    var val = obj.val || obj;\n    radio.val(\"attr\" + val);\n    assert.equal(radio.val(), \"attr\" + val, \"Value ending with space character (\" + key + \") returned (set via val())\");\n    radio.val(\"at\" + val + \"tr\");\n    assert.equal(radio.val(), \"at\" + val + \"tr\", \"Value with space character (\" + key + \") in the middle returned (set via val())\");\n    radio.val(val + \"attr\");\n    assert.equal(radio.val(), val + \"attr\", \"Value starting with space character (\" + key + \") returned (set via val())\");\n  });\n  jQuery.each(spaces, function (key, obj) {\n    var val = obj.val || obj,\n      htmlVal = obj.html || obj;\n    radio = jQuery(\"<input type='radio' value='attr\" + htmlVal + \"'/>\").appendTo(\"#qunit-fixture\");\n    assert.equal(radio.val(), \"attr\" + val, \"Value ending with space character (\" + key + \") returned (set via HTML)\");\n    radio = jQuery(\"<input type='radio' value='at\" + htmlVal + \"tr'/>\").appendTo(\"#qunit-fixture\");\n    assert.equal(radio.val(), \"at\" + val + \"tr\", \"Value with space character (\" + key + \") in the middle returned (set via HTML)\");\n    radio = jQuery(\"<input type='radio' value='\" + htmlVal + \"attr'/>\").appendTo(\"#qunit-fixture\");\n    assert.equal(radio.val(), val + \"attr\", \"Value starting with space character (\" + key + \") returned (set via HTML)\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass(String)","suites":["attributes"],"line":1041,"code":"QUnit.test(\"addClass(String)\", function (assert) {\n  testAddClass(bareObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass(Function)","suites":["attributes"],"line":1044,"code":"QUnit.test(\"addClass(Function)\", function (assert) {\n  testAddClass(functionReturningObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass(Array)","suites":["attributes"],"line":1047,"code":"QUnit.test(\"addClass(Array)\", function (assert) {\n  testAddClass(arrayFromString, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass(Function) with incoming value","suites":["attributes"],"line":1050,"code":"QUnit.test(\"addClass(Function) with incoming value\", function (assert) {\n  assert.expect(59);\n  var pass,\n    i,\n    div = jQuery(\"#qunit-fixture div\"),\n    old = div.map(function () {\n      return jQuery(this).attr(\"class\") || \"\";\n    });\n  div.addClass(function (i, val) {\n    assert.equal(val, old[i], \"Make sure the incoming value is correct.\");\n    return \"test\";\n  });\n  pass = true;\n  for (i = 0; i < div.length; i++) {\n    if (div.get(i).className.indexOf(\"test\") === -1) {\n      pass = false;\n    }\n  }\n  assert.ok(pass, \"Add Class\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass(String) - simple","suites":["attributes"],"line":1099,"code":"QUnit.test(\"removeClass(String) - simple\", function (assert) {\n  testRemoveClass(bareObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass(Function) - simple","suites":["attributes"],"line":1102,"code":"QUnit.test(\"removeClass(Function) - simple\", function (assert) {\n  testRemoveClass(functionReturningObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass(Array) - simple","suites":["attributes"],"line":1105,"code":"QUnit.test(\"removeClass(Array) - simple\", function (assert) {\n  testRemoveClass(arrayFromString, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass(Function) with incoming value","suites":["attributes"],"line":1108,"code":"QUnit.test(\"removeClass(Function) with incoming value\", function (assert) {\n  assert.expect(59);\n  var $divs = jQuery(\"#qunit-fixture div\").addClass(\"test\"),\n    old = $divs.map(function () {\n      return jQuery(this).attr(\"class\");\n    });\n  $divs.removeClass(function (i, val) {\n    assert.equal(val, old[i], \"Make sure the incoming value is correct.\");\n    return \"test\";\n  });\n  assert.ok(!$divs.is(\".test\"), \"Remove Class\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass() removes duplicates","suites":["attributes"],"line":1120,"code":"QUnit.test(\"removeClass() removes duplicates\", function (assert) {\n  assert.expect(1);\n  var $div = jQuery(jQuery.parseHTML(\"<div class='x x x'></div>\"));\n  $div.removeClass(\"x\");\n  assert.ok(!$div.hasClass(\"x\"), \"Element with multiple same classes does not escape the wrath of removeClass()\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass(undefined) is a no-op","suites":["attributes"],"line":1126,"code":"QUnit.test(\"removeClass(undefined) is a no-op\", function (assert) {\n  assert.expect(1);\n  var $div = jQuery(\"<div class='base second'></div>\");\n  $div.removeClass(undefined);\n  assert.ok($div.hasClass(\"base\") && $div.hasClass(\"second\"), \"Element still has classes after removeClass(undefined)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"toggleClass(String|boolean|undefined[, boolean])","suites":["attributes"],"line":1161,"code":"QUnit.test(\"toggleClass(String|boolean|undefined[, boolean])\", function (assert) {\n  testToggleClass(bareObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"toggleClass(Function[, boolean])","suites":["attributes"],"line":1164,"code":"QUnit.test(\"toggleClass(Function[, boolean])\", function (assert) {\n  testToggleClass(functionReturningObj, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"toggleClass(Array[, boolean])","suites":["attributes"],"line":1167,"code":"QUnit.test(\"toggleClass(Array[, boolean])\", function (assert) {\n  testToggleClass(arrayFromString, assert);\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"toggleClass(Function[, boolean]) with incoming value","suites":["attributes"],"line":1170,"code":"QUnit.test(\"toggleClass(Function[, boolean]) with incoming value\", function (assert) {\n  assert.expect(14);\n  var e = jQuery(\"#firstp\"),\n    old = e.attr(\"class\") || \"\";\n  assert.ok(!e.is(\".test\"), \"Assert class not present\");\n  e.toggleClass(function (i, val) {\n    assert.equal(old, val, \"Make sure the incoming value is correct.\");\n    return \"test\";\n  });\n  assert.ok(e.is(\".test\"), \"Assert class present\");\n  old = e.attr(\"class\");\n  e.toggleClass(function (i, val) {\n    assert.equal(old, val, \"Make sure the incoming value is correct.\");\n    return \"test\";\n  });\n  assert.ok(!e.is(\".test\"), \"Assert class not present\");\n  old = e.attr(\"class\") || \"\";\n\n  // class name with a boolean\n  e.toggleClass(function (i, val, state) {\n    assert.equal(old, val, \"Make sure the incoming value is correct.\");\n    assert.equal(state, false, \"Make sure that the state is passed in.\");\n    return \"test\";\n  }, false);\n  assert.ok(!e.is(\".test\"), \"Assert class not present\");\n  old = e.attr(\"class\") || \"\";\n  e.toggleClass(function (i, val, state) {\n    assert.equal(old, val, \"Make sure the incoming value is correct.\");\n    assert.equal(state, true, \"Make sure that the state is passed in.\");\n    return \"test\";\n  }, true);\n  assert.ok(e.is(\".test\"), \"Assert class present\");\n  old = e.attr(\"class\");\n  e.toggleClass(function (i, val, state) {\n    assert.equal(old, val, \"Make sure the incoming value is correct.\");\n    assert.equal(state, false, \"Make sure that the state is passed in.\");\n    return \"test\";\n  }, false);\n  assert.ok(!e.is(\".test\"), \"Assert class not present\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass, removeClass, hasClass","suites":["attributes"],"line":1210,"code":"QUnit.test(\"addClass, removeClass, hasClass\", function (assert) {\n  assert.expect(17);\n  var jq = jQuery(\"<p>Hi</p>\"),\n    x = jq[0];\n  jq.addClass(\"hi\");\n  assert.equal(x.className, \"hi\", \"Check single added class\");\n  jq.addClass(\"foo bar\");\n  assert.equal(x.className, \"hi foo bar\", \"Check more added classes\");\n  jq.removeClass();\n  assert.equal(x.className, \"\", \"Remove all classes\");\n  jq.addClass(\"hi foo bar\");\n  jq.removeClass(\"foo\");\n  assert.equal(x.className, \"hi bar\", \"Check removal of one class\");\n  assert.ok(jq.hasClass(\"hi\"), \"Check has1\");\n  assert.ok(jq.hasClass(\"bar\"), \"Check has2\");\n  jq = jQuery(\"<p class='class1\\nclass2\\tcla.ss3\\n\\rclass4'></p>\");\n  assert.ok(jq.hasClass(\"class1\"), \"Check hasClass with line feed\");\n  assert.ok(jq.is(\".class1\"), \"Check is with line feed\");\n  assert.ok(jq.hasClass(\"class2\"), \"Check hasClass with tab\");\n  assert.ok(jq.is(\".class2\"), \"Check is with tab\");\n  assert.ok(jq.hasClass(\"cla.ss3\"), \"Check hasClass with dot\");\n  assert.ok(jq.hasClass(\"class4\"), \"Check hasClass with carriage return\");\n  assert.ok(jq.is(\".class4\"), \"Check is with carriage return\");\n  jq.removeClass(\"class2\");\n  assert.ok(jq.hasClass(\"class2\") === false, \"Check the class has been properly removed\");\n  jq.removeClass(\"cla\");\n  assert.ok(jq.hasClass(\"cla.ss3\"), \"Check the dotted class has not been removed\");\n  jq.removeClass(\"cla.ss3\");\n  assert.ok(jq.hasClass(\"cla.ss3\") === false, \"Check the dotted class has been removed\");\n  jq.removeClass(\"class4\");\n  assert.ok(jq.hasClass(\"class4\") === false, \"Check the class has been properly removed\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass, removeClass, hasClass on many elements","suites":["attributes"],"line":1242,"code":"QUnit.test(\"addClass, removeClass, hasClass on many elements\", function (assert) {\n  assert.expect(19);\n  var elem = jQuery(\"<p>p0</p><p>p1</p><p>p2</p>\");\n  elem.addClass(\"hi\");\n  assert.equal(elem[0].className, \"hi\", \"Check single added class\");\n  assert.equal(elem[1].className, \"hi\", \"Check single added class\");\n  assert.equal(elem[2].className, \"hi\", \"Check single added class\");\n  elem.addClass(\"foo bar\");\n  assert.equal(elem[0].className, \"hi foo bar\", \"Check more added classes\");\n  assert.equal(elem[1].className, \"hi foo bar\", \"Check more added classes\");\n  assert.equal(elem[2].className, \"hi foo bar\", \"Check more added classes\");\n  elem.removeClass();\n  assert.equal(elem[0].className, \"\", \"Remove all classes\");\n  assert.equal(elem[1].className, \"\", \"Remove all classes\");\n  assert.equal(elem[2].className, \"\", \"Remove all classes\");\n  elem.addClass(\"hi foo bar\");\n  elem.removeClass(\"foo\");\n  assert.equal(elem[0].className, \"hi bar\", \"Check removal of one class\");\n  assert.equal(elem[1].className, \"hi bar\", \"Check removal of one class\");\n  assert.equal(elem[2].className, \"hi bar\", \"Check removal of one class\");\n  assert.ok(elem.hasClass(\"hi\"), \"Check has1\");\n  assert.ok(elem.hasClass(\"bar\"), \"Check has2\");\n  assert.ok(jQuery(\"<p class='hi'>p0</p><p>p1</p><p>p2</p>\").hasClass(\"hi\"), \"Did find a class in the first element\");\n  assert.ok(jQuery(\"<p>p0</p><p class='hi'>p1</p><p>p2</p>\").hasClass(\"hi\"), \"Did find a class in the second element\");\n  assert.ok(jQuery(\"<p>p0</p><p>p1</p><p class='hi'>p2</p>\").hasClass(\"hi\"), \"Did find a class in the last element\");\n  assert.ok(jQuery(\"<p class='hi'>p0</p><p class='hi'>p1</p><p class='hi'>p2</p>\").hasClass(\"hi\"), \"Did find a class when present in all elements\");\n  assert.ok(!jQuery(\"<p class='hi0'>p0</p><p class='hi1'>p1</p><p class='hi2'>p2</p>\").hasClass(\"hi\"), \"Did not find a class when not present\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass, removeClass, hasClass on many elements - Array","suites":["attributes"],"line":1270,"code":"QUnit.test(\"addClass, removeClass, hasClass on many elements - Array\", function (assert) {\n  assert.expect(16);\n  var elem = jQuery(\"<p>p0</p><p>p1</p><p>p2</p>\");\n  elem.addClass([\"hi\"]);\n  assert.equal(elem[0].className, \"hi\", \"Check single added class\");\n  assert.equal(elem[1].className, \"hi\", \"Check single added class\");\n  assert.equal(elem[2].className, \"hi\", \"Check single added class\");\n  elem.addClass([\"foo\", \"bar\"]);\n  assert.equal(elem[0].className, \"hi foo bar\", \"Check more added classes\");\n  assert.equal(elem[1].className, \"hi foo bar\", \"Check more added classes\");\n  assert.equal(elem[2].className, \"hi foo bar\", \"Check more added classes\");\n  elem.removeClass();\n  assert.equal(elem[0].className, \"\", \"Remove all classes\");\n  assert.equal(elem[1].className, \"\", \"Remove all classes\");\n  assert.equal(elem[2].className, \"\", \"Remove all classes\");\n  elem.addClass([\"hi\", \"foo\", \"bar\", \"baz\"]);\n  elem.removeClass([\"foo\"]);\n  assert.equal(elem[0].className, \"hi bar baz\", \"Check removal of one class\");\n  assert.equal(elem[1].className, \"hi bar baz\", \"Check removal of one class\");\n  assert.equal(elem[2].className, \"hi bar baz\", \"Check removal of one class\");\n  elem.removeClass([\"bar baz\"]);\n  assert.equal(elem[0].className, \"hi\", \"Check removal of two classes\");\n  assert.equal(elem[1].className, \"hi\", \"Check removal of two classes\");\n  assert.equal(elem[2].className, \"hi\", \"Check removal of two classes\");\n  assert.ok(elem.hasClass(\"hi\"), \"Check has1\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)","suites":["attributes"],"line":1296,"code":"QUnit.test(\"addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)\", function (assert) {\n  assert.expect(9);\n  var $elem = jQuery(\"<div class='&#xA0;test'></div>\");\n  function testMatches() {\n    assert.ok($elem.is(\".\\\\A0 test\"), \"Element matches with collapsed space\");\n    assert.ok($elem.is(\".\\\\A0test\"), \"Element matches with non-breaking space\");\n    assert.ok($elem.hasClass(\"\\xA0test\"), \"Element has class with non-breaking space\");\n  }\n  testMatches();\n  $elem.addClass(\"foo\");\n  testMatches();\n  $elem.removeClass(\"foo\");\n  testMatches();\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"addClass on arrays with falsy elements (gh-4998)","suites":["attributes"],"line":1317,"code":"  QUnit.test(\"addClass on arrays with falsy elements (gh-4998)\", function (assert) {\n    assert.expect(3);\n    var elem = jQuery(\"<div class='a'></div>\");\n    elem.addClass([\"b\", \"\", \"c\"]);\n    expectClasses(assert, elem, [\"a\", \"b\", \"c\"]);\n    elem.addClass([\"\", \"d\"]);\n    expectClasses(assert, elem, [\"a\", \"b\", \"c\", \"d\"]);\n    elem.addClass([\"e\", \"\"]);\n    expectClasses(assert, elem, [\"a\", \"b\", \"c\", \"d\", \"e\"]);\n  });","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"removeClass on arrays with falsy elements (gh-4998)","suites":["attributes"],"line":1327,"code":"  QUnit.test(\"removeClass on arrays with falsy elements (gh-4998)\", function (assert) {\n    assert.expect(3);\n    var elem = jQuery(\"<div class='a b c d e'></div>\");\n    elem.removeClass([\"e\", \"\"]);\n    expectClasses(assert, elem, [\"a\", \"b\", \"c\", \"d\"]);\n    elem.removeClass([\"\", \"d\"]);\n    expectClasses(assert, elem, [\"a\", \"b\", \"c\"]);\n    elem.removeClass([\"b\", \"\", \"c\"]);\n    expectClasses(assert, elem, [\"a\"]);\n  });","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"contents().hasClass() returns correct values","suites":["attributes"],"line":1338,"code":"QUnit.test(\"contents().hasClass() returns correct values\", function (assert) {\n  assert.expect(2);\n  var $div = jQuery(\"<div><span class='foo'></span><!-- comment -->text</div>\"),\n    $contents = $div.contents();\n  assert.ok($contents.hasClass(\"foo\"), \"Found 'foo' in $contents\");\n  assert.ok(!$contents.hasClass(\"undefined\"), \"Did not find 'undefined' in $contents (correctly)\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"hasClass correctly interprets non-space separators (trac-13835)","suites":["attributes"],"line":1345,"code":"QUnit.test(\"hasClass correctly interprets non-space separators (trac-13835)\", function (assert) {\n  assert.expect(4);\n  var map = {\n      tab: \"&#9;\",\n      \"line-feed\": \"&#10;\",\n      \"form-feed\": \"&#12;\",\n      \"carriage-return\": \"&#13;\"\n    },\n    classes = jQuery.map(map, function (separator, label) {\n      return \" \" + separator + label + separator + \" \";\n    }),\n    $div = jQuery(\"<div class='\" + classes + \"'></div>\");\n  jQuery.each(map, function (label) {\n    assert.ok($div.hasClass(label), label.replace(\"-\", \" \"));\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"coords returns correct values in IE6/IE7, see trac-10828","suites":["attributes"],"line":1361,"code":"QUnit.test(\"coords returns correct values in IE6/IE7, see trac-10828\", function (assert) {\n  assert.expect(1);\n  var area,\n    map = jQuery(\"<map></map>\");\n  area = map.html(\"<area shape='rect' coords='0,0,0,0' href='#' alt='a'></area>\").find(\"area\");\n  assert.equal(area.attr(\"coords\"), \"0,0,0,0\", \"did not retrieve coords correctly\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"should not throw at $(option).val() (trac-14686)","suites":["attributes"],"line":1368,"code":"QUnit.test(\"should not throw at $(option).val() (trac-14686)\", function (assert) {\n  assert.expect(1);\n  try {\n    jQuery(\"<option></option>\").val();\n    assert.ok(true);\n  } catch (_) {\n    assert.ok(false);\n  }\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"option value not trimmed when setting via parent select","suites":["attributes"],"line":1377,"code":"QUnit.test(\"option value not trimmed when setting via parent select\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery(\"<select><option> 2</option></select>\").val(\"2\").val(), \"2\");\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"Insignificant white space returned for $(option).val() (trac-14858, gh-2978)","suites":["attributes"],"line":1381,"code":"QUnit.test(\"Insignificant white space returned for $(option).val() (trac-14858, gh-2978)\", function (assert) {\n  assert.expect(16);\n  var val = jQuery(\"<option></option>\").val();\n  assert.equal(val.length, 0, \"Empty option should have no value\");\n  jQuery.each([\" \", \"\\n\", \"\\t\", \"\\f\", \"\\r\"], function (i, character) {\n    var val = jQuery(\"<option>\" + character + \"</option>\").val();\n    assert.equal(val.length, 0, \"insignificant white-space returned for value\");\n    val = jQuery(\"<option>\" + character + \"test\" + character + \"</option>\").val();\n    assert.equal(val.length, 4, \"insignificant white-space returned for value\");\n    val = jQuery(\"<option>te\" + character + \"st</option>\").val();\n    assert.equal(val, \"te st\", \"Whitespace is collapsed in values\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"SVG class manipulation (gh-2199)","suites":["attributes"],"line":1394,"code":"QUnit.test(\"SVG class manipulation (gh-2199)\", function (assert) {\n  assert.expect(12);\n  function createSVGElement(nodeName) {\n    return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n  }\n  jQuery.each([\"svg\", \"rect\", \"g\"], function () {\n    var elem = jQuery(createSVGElement(this));\n    elem.addClass(\"awesome\");\n    assert.ok(elem.hasClass(\"awesome\"), \"SVG element (\" + this + \") has added class\");\n    elem.removeClass(\"awesome\");\n    assert.ok(!elem.hasClass(\"awesome\"), \"SVG element (\" + this + \") removes the class\");\n    elem.toggleClass(\"awesome\");\n    assert.ok(elem.hasClass(\"awesome\"), \"SVG element (\" + this + \") toggles the class on\");\n    elem.toggleClass(\"awesome\");\n    assert.ok(!elem.hasClass(\"awesome\"), \"SVG element (\" + this + \") toggles the class off\");\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"non-lowercase boolean attribute getters should not crash","suites":["attributes"],"line":1411,"code":"QUnit.test(\"non-lowercase boolean attribute getters should not crash\", function (assert) {\n  assert.expect(3);\n  var elem = jQuery(\"<input checked required autofocus type='checkbox'>\");\n  jQuery.each({\n    checked: \"Checked\",\n    required: \"requiRed\",\n    autofocus: \"AUTOFOCUS\"\n  }, function (lowercased, original) {\n    try {\n      assert.strictEqual(elem.attr(original), lowercased, \"The '\" + this + \"' attribute getter should return the lowercased name\");\n    } catch (e) {\n      assert.ok(false, \"The '\" + this + \"' attribute getter threw\");\n    }\n  });\n});","file":"unit/attributes.js","skipped":false,"dir":"test"},{"name":"ajax","suites":["basic"],"line":5,"code":"  QUnit.test(\"ajax\", function (assert) {\n    assert.expect(4);\n    var done = assert.async(3);\n    jQuery.ajax({\n      type: \"GET\",\n      url: url(\"mock.php?action=name&name=foo\"),\n      success: function (msg) {\n        assert.strictEqual(msg, \"bar\", \"Check for GET\");\n        done();\n      }\n    });\n    jQuery.ajax({\n      type: \"POST\",\n      url: url(\"mock.php?action=name\"),\n      data: \"name=peter\",\n      success: function (msg) {\n        assert.strictEqual(msg, \"pan\", \"Check for POST\");\n        done();\n      }\n    });\n    jQuery(\"#first\").load(url(\"name.html\"), function () {\n      assert.ok(/^ERROR/.test(jQuery(\"#first\").text()), \"Check if content was injected into the DOM\");\n      done();\n    });\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"attributes","suites":["basic"],"line":32,"code":"  QUnit.test(\"attributes\", function (assert) {\n    assert.expect(6);\n    var a = jQuery(\"<a></a>\").appendTo(\"#qunit-fixture\"),\n      input = jQuery(\"<input/>\").appendTo(\"#qunit-fixture\");\n    assert.strictEqual(a.attr(\"foo\", \"bar\").attr(\"foo\"), \"bar\", \".attr getter/setter\");\n    assert.strictEqual(a.removeAttr(\"foo\").attr(\"foo\"), undefined, \".removeAttr\");\n    assert.strictEqual(a.prop(\"href\", \"#5\").prop(\"href\"), location.href.replace(/\\#.*$/, \"\") + \"#5\", \".prop getter/setter\");\n    a.addClass(\"abc def ghj\").removeClass(\"def ghj\");\n    assert.strictEqual(a.hasClass(\"abc\"), true, \".(add|remove|has)Class, class present\");\n    assert.strictEqual(a.hasClass(\"def\"), false, \".(add|remove|has)Class, class missing\");\n    assert.strictEqual(input.val(\"xyz\").val(), \"xyz\", \".val getter/setter\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"css","suites":["basic"],"line":46,"code":"  QUnit.test(\"css\", function (assert) {\n    assert.expect(1);\n    var div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    assert.strictEqual(div.css(\"width\", \"50px\").css(\"width\"), \"50px\", \".css getter/setter\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"show/hide","suites":["basic"],"line":53,"code":"  QUnit.test(\"show/hide\", function (assert) {\n    assert.expect(2);\n    var div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    div.hide();\n    assert.strictEqual(div.css(\"display\"), \"none\", \"div hidden\");\n    div.show();\n    assert.strictEqual(div.css(\"display\"), \"block\", \"div shown\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"core","suites":["basic"],"line":62,"code":"QUnit.test(\"core\", function (assert) {\n  assert.expect(17);\n  var elem = jQuery(\"<div></div><span></span>\");\n  assert.strictEqual(elem.length, 2, \"Correct number of elements\");\n  assert.ok(jQuery.isPlainObject({\n    \"a\": 2\n  }), \"jQuery.isPlainObject(object)\");\n  assert.ok(!jQuery.isPlainObject(\"foo\"), \"jQuery.isPlainObject(String)\");\n  assert.ok(jQuery.isXMLDoc(jQuery.parseXML(\"<?xml version='1.0' encoding='UTF-8'?><foo bar='baz'></foo>\")), \"jQuery.isXMLDoc\");\n  assert.strictEqual(jQuery.inArray(3, [\"a\", 6, false, 3, {}]), 3, \"jQuery.inArray - true\");\n  assert.strictEqual(jQuery.inArray(3, [\"a\", 6, false, \"3\", {}]), -1, \"jQuery.inArray - false\");\n  assert.strictEqual(elem.get(1), elem[1], \".get\");\n  assert.strictEqual(elem.first()[0], elem[0], \".first\");\n  assert.strictEqual(elem.last()[0], elem[1], \".last\");\n  assert.deepEqual(jQuery.map([\"a\", \"b\", \"c\"], function (v, k) {\n    return k + v;\n  }), [\"0a\", \"1b\", \"2c\"], \"jQuery.map\");\n  assert.deepEqual(jQuery.merge([1, 2], [\"a\", \"b\"]), [1, 2, \"a\", \"b\"], \"jQuery.merge\");\n  assert.deepEqual(jQuery.grep([1, 2, 3], function (value) {\n    return value % 2 !== 0;\n  }), [1, 3], \"jQuery.grep\");\n  assert.deepEqual(jQuery.extend({\n    a: 2\n  }, {\n    b: 3\n  }), {\n    a: 2,\n    b: 3\n  }, \"jQuery.extend\");\n  jQuery.each([0, 2], function (k, v) {\n    assert.strictEqual(k * 2, v, \"jQuery.each\");\n  });\n  assert.deepEqual(jQuery.makeArray({\n    0: \"a\",\n    1: \"b\",\n    2: \"c\",\n    length: 3\n  }), [\"a\", \"b\", \"c\"], \"jQuery.makeArray\");\n  assert.strictEqual(jQuery.parseHTML(\"<div></div><span></span>\").length, 2, \"jQuery.parseHTML\");\n});","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"data","suites":["basic"],"line":103,"code":"  QUnit.test(\"data\", function (assert) {\n    assert.expect(4);\n    var elem = jQuery(\"<div data-c='d'></div>\").appendTo(\"#qunit-fixture\");\n    assert.ok(!jQuery.hasData(elem[0]), \"jQuery.hasData - false\");\n    assert.strictEqual(elem.data(\"a\", \"b\").data(\"a\"), \"b\", \".data getter/setter\");\n    assert.strictEqual(elem.data(\"c\"), \"d\", \".data from data-* attributes\");\n    assert.ok(jQuery.hasData(elem[0]), \"jQuery.hasData - true\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"dimensions","suites":["basic"],"line":113,"code":"  QUnit.test(\"dimensions\", function (assert) {\n    assert.expect(3);\n    var elem = jQuery(\"<div style='margin: 10px; padding: 7px; border: 2px solid black;'></div> \").appendTo(\"#qunit-fixture\");\n    assert.strictEqual(elem.width(50).width(), 50, \".width getter/setter\");\n    assert.strictEqual(elem.innerWidth(), 64, \".innerWidth getter\");\n    assert.strictEqual(elem.outerWidth(), 68, \".outerWidth getter\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"event","suites":["basic"],"line":122,"code":"  QUnit.test(\"event\", function (assert) {\n    assert.expect(1);\n    var elem = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    elem.on(\"click\", function () {\n      assert.ok(false, \"click should not fire\");\n    }).off(\"click\").trigger(\"click\").on(\"click\", function () {\n      assert.ok(true, \"click should fire\");\n    }).trigger(\"click\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"manipulation","suites":["basic"],"line":133,"code":"  QUnit.test(\"manipulation\", function (assert) {\n    assert.expect(5);\n    var child,\n      elem1 = jQuery(\"<div><span></span></div>\").appendTo(\"#qunit-fixture\"),\n      elem2 = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    assert.strictEqual(elem1.text(\"foo\").text(), \"foo\", \".html getter/setter\");\n    assert.strictEqual(elem1.html(\"<span></span>\").html(), \"<span></span>\", \".html getter/setter\");\n    assert.strictEqual(elem1.append(elem2)[0].childNodes[elem1[0].childNodes.length - 1], elem2[0], \".append\");\n    assert.strictEqual(elem1.prepend(elem2)[0].childNodes[0], elem2[0], \".prepend\");\n    child = elem1.find(\"span\");\n    child.after(\"<a></a>\");\n    child.before(\"<b></b>\");\n    assert.strictEqual(elem1.html(), \"<div></div><b></b><span></span><a></a>\", \".after/.before\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"selector","suites":["basic"],"line":160,"code":"QUnit.test(\"selector\", function (assert) {\n  assert.expect(2);\n  var elem = jQuery(\"<div><span class='a'></span><span class='b'><a></a></span></div>\").appendTo(\"#qunit-fixture\");\n  assert.strictEqual(elem.find(\".a a\").length, 0, \".find - no result\");\n  assert.strictEqual(elem.find(\"span.b a\")[0].nodeName, \"A\", \".find - one result\");\n});","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"serialize","suites":["basic"],"line":167,"code":"  QUnit.test(\"serialize\", function (assert) {\n    assert.expect(2);\n    var params = {\n      \"someName\": [1, 2, 3],\n      \"regularThing\": \"blah\"\n    };\n    assert.strictEqual(jQuery.param(params), \"someName%5B%5D=1&someName%5B%5D=2&someName%5B%5D=3&regularThing=blah\", \"jQuery.param\");\n    assert.strictEqual(jQuery(\"#form\").serialize(), \"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search\" + \"&select1=&select2=3&select3=1&select3=2&select5=3\", \"form serialization as query string\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"traversing","suites":["basic"],"line":177,"code":"QUnit.test(\"traversing\", function (assert) {\n  assert.expect(12);\n  var elem = jQuery(\"<div><a><b><em></em></b></a><i></i><span></span>foo</div>\").appendTo(\"#qunit-fixture\");\n  assert.strictEqual(elem.find(\"em\").parent()[0].nodeName, \"B\", \".parent\");\n  assert.strictEqual(elem.find(\"em\").parents()[1].nodeName, \"A\", \".parents\");\n  assert.strictEqual(elem.find(\"em\").parentsUntil(\"div\").length, 2, \".parentsUntil\");\n  assert.strictEqual(elem.find(\"i\").next()[0].nodeName, \"SPAN\", \".next\");\n  assert.strictEqual(elem.find(\"i\").prev()[0].nodeName, \"A\", \".prev\");\n  assert.strictEqual(elem.find(\"a\").nextAll()[1].nodeName, \"SPAN\", \".nextAll\");\n  assert.strictEqual(elem.find(\"span\").prevAll()[1].nodeName, \"A\", \".prevAll\");\n  assert.strictEqual(elem.find(\"a\").nextUntil(\"span\").length, 1, \".nextUntil\");\n  assert.strictEqual(elem.find(\"span\").prevUntil(\"a\").length, 1, \".prevUntil\");\n  assert.strictEqual(elem.find(\"i\").siblings().length, 2, \".siblings\");\n  assert.strictEqual(elem.children()[2].nodeName, \"SPAN\", \".children\");\n  assert.strictEqual(elem.contents()[3].nodeType, 3, \".contents\");\n});","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"wrap","suites":["basic"],"line":194,"code":"  QUnit.test(\"wrap\", function (assert) {\n    assert.expect(3);\n    var elem = jQuery(\"<div><a><b></b></a><a></a></div>\");\n    elem.find(\"b\").wrap(\"<span>\");\n    assert.strictEqual(elem.html(), \"<a><span><b></b></span></a><a></a>\", \".wrap\");\n    elem.find(\"span\").wrapInner(\"<em>\");\n    assert.strictEqual(elem.html(), \"<a><span><em><b></b></em></span></a><a></a>\", \".wrapInner\");\n    elem.find(\"a\").wrapAll(\"<i>\");\n    assert.strictEqual(elem.html(), \"<i><a><span><em><b></b></em></span></a><a></a></i>\", \".wrapAll\");\n  });","file":"unit/basic.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks( options ) - options are copied","suites":["callbacks"],"line":247,"code":"  QUnit.test(\"jQuery.Callbacks( options ) - options are copied\", function (assert) {\n    assert.expect(1);\n    var options = {\n        \"unique\": true\n      },\n      cb = jQuery.Callbacks(options),\n      count = 0,\n      fn = function () {\n        assert.ok(!count++, \"called once\");\n      };\n    options[\"unique\"] = false;\n    cb.add(fn, fn);\n    cb.fire();\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks.fireWith - arguments are copied","suites":["callbacks"],"line":261,"code":"  QUnit.test(\"jQuery.Callbacks.fireWith - arguments are copied\", function (assert) {\n    assert.expect(1);\n    var cb = jQuery.Callbacks(\"memory\"),\n      args = [\"hello\"];\n    cb.fireWith(null, args);\n    args[0] = \"world\";\n    cb.add(function (hello) {\n      assert.strictEqual(hello, \"hello\", \"arguments are copied internally\");\n    });\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks.remove - should remove all instances","suites":["callbacks"],"line":271,"code":"  QUnit.test(\"jQuery.Callbacks.remove - should remove all instances\", function (assert) {\n    assert.expect(1);\n    var cb = jQuery.Callbacks();\n    function fn() {\n      assert.ok(false, \"function wasn't removed\");\n    }\n    cb.add(fn, fn, function () {\n      assert.ok(true, \"end of test\");\n    }).remove(fn).fire();\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks.has","suites":["callbacks"],"line":281,"code":"  QUnit.test(\"jQuery.Callbacks.has\", function (assert) {\n    assert.expect(13);\n    var cb = jQuery.Callbacks();\n    function getA() {\n      return \"A\";\n    }\n    function getB() {\n      return \"B\";\n    }\n    function getC() {\n      return \"C\";\n    }\n    cb.add(getA, getB, getC);\n    assert.strictEqual(cb.has(), true, \"No arguments to .has() returns whether callback function(s) are attached or not\");\n    assert.strictEqual(cb.has(getA), true, \"Check if a specific callback function is in the Callbacks list\");\n    cb.remove(getB);\n    assert.strictEqual(cb.has(getB), false, \"Remove a specific callback function and make sure its no longer there\");\n    assert.strictEqual(cb.has(getA), true, \"Remove a specific callback function and make sure other callback function is still there\");\n    cb.empty();\n    assert.strictEqual(cb.has(), false, \"Empty list and make sure there are no callback function(s)\");\n    assert.strictEqual(cb.has(getA), false, \"Check for a specific function in an empty() list\");\n    cb.add(getA, getB, function () {\n      assert.strictEqual(cb.has(), true, \"Check if list has callback function(s) from within a callback function\");\n      assert.strictEqual(cb.has(getA), true, \"Check if list has a specific callback from within a callback function\");\n    }).fire();\n    assert.strictEqual(cb.has(), true, \"Callbacks list has callback function(s) after firing\");\n    cb.disable();\n    assert.strictEqual(cb.has(), false, \"disabled() list has no callback functions (returns false)\");\n    assert.strictEqual(cb.has(getA), false, \"Check for a specific function in a disabled() list\");\n    cb = jQuery.Callbacks(\"unique\");\n    cb.add(getA);\n    cb.add(getA);\n    assert.strictEqual(cb.has(), true, \"Check if unique list has callback function(s) attached\");\n    cb.lock();\n    assert.strictEqual(cb.has(), false, \"locked() list is empty and returns false\");\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks() - adding a string doesn't cause a stack overflow","suites":["callbacks"],"line":317,"code":"  QUnit.test(\"jQuery.Callbacks() - adding a string doesn't cause a stack overflow\", function (assert) {\n    assert.expect(1);\n    jQuery.Callbacks().add(\"hello world\");\n    assert.ok(true, \"no stack overflow\");\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks() - disabled callback doesn't fire (gh-1790)","suites":["callbacks"],"line":322,"code":"  QUnit.test(\"jQuery.Callbacks() - disabled callback doesn't fire (gh-1790)\", function (assert) {\n    assert.expect(1);\n    var cb = jQuery.Callbacks(),\n      fired = false,\n      shot = function () {\n        fired = true;\n      };\n    cb.disable();\n    cb.empty();\n    cb.add(shot);\n    cb.fire();\n    assert.ok(!fired, \"Disabled callback function didn't fire\");\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"jQuery.Callbacks() - list with memory stays locked (gh-3469)","suites":["callbacks"],"line":335,"code":"  QUnit.test(\"jQuery.Callbacks() - list with memory stays locked (gh-3469)\", function (assert) {\n    assert.expect(3);\n    var cb = jQuery.Callbacks(\"memory\"),\n      fired = 0,\n      count1 = function () {\n        fired += 1;\n      },\n      count2 = function () {\n        fired += 10;\n      };\n    cb.add(count1);\n    cb.fire();\n    assert.equal(fired, 1, \"Pre-lock() fire\");\n    cb.lock();\n    cb.add(count2);\n    assert.equal(fired, 11, \"Post-lock() add\");\n    cb.fire();\n    assert.equal(fired, 11, \"Post-lock() fire ignored\");\n  });","file":"unit/callbacks.js","skipped":false,"dir":"test"},{"name":"Basic requirements","suites":["core"],"line":10,"code":"QUnit.test(\"Basic requirements\", function (assert) {\n  assert.expect(7);\n  assert.ok(Array.prototype.push, \"Array.push()\");\n  assert.ok(Function.prototype.apply, \"Function.apply()\");\n  assert.ok(document.getElementById, \"getElementById\");\n  assert.ok(document.getElementsByTagName, \"getElementsByTagName\");\n  assert.ok(RegExp, \"RegExp\");\n  assert.ok(jQuery, \"jQuery\");\n  assert.ok($, \"$\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery()","suites":["core"],"line":20,"code":"QUnit.test(\"jQuery()\", function (assert) {\n  var elem,\n    i,\n    obj = jQuery(\"div\"),\n    code = jQuery(\"<code></code>\"),\n    img = jQuery(\"<img/>\"),\n    div = jQuery(\"<div></div><hr/><code></code><b/>\"),\n    exec = false,\n    expected = 23,\n    attrObj = {\n      \"text\": \"test\",\n      \"class\": \"test2\",\n      \"id\": \"test3\"\n    };\n\n  // The $(html, props) signature can stealth-call any $.fn method, check for a\n  // few here but beware of modular builds where these methods may be excluded.\n  if (includesModule(\"deprecated\")) {\n    expected++;\n    attrObj[\"click\"] = function () {\n      assert.ok(exec, \"Click executed.\");\n    };\n  }\n  if (includesModule(\"dimensions\")) {\n    expected++;\n    attrObj[\"width\"] = 10;\n  }\n  if (includesModule(\"offset\")) {\n    expected++;\n    attrObj[\"offset\"] = {\n      \"top\": 1,\n      \"left\": 1\n    };\n  }\n  if (includesModule(\"css\")) {\n    expected += 2;\n    attrObj[\"css\"] = {\n      \"paddingLeft\": 1,\n      \"paddingRight\": 1\n    };\n  }\n  if (includesModule(\"attributes\")) {\n    expected++;\n    attrObj.attr = {\n      \"desired\": \"very\"\n    };\n  }\n  assert.expect(expected);\n\n  // Basic constructor's behavior\n  assert.equal(jQuery().length, 0, \"jQuery() === jQuery([])\");\n  assert.equal(jQuery(undefined).length, 0, \"jQuery(undefined) === jQuery([])\");\n  assert.equal(jQuery(null).length, 0, \"jQuery(null) === jQuery([])\");\n  assert.equal(jQuery(\"\").length, 0, \"jQuery('') === jQuery([])\");\n  assert.deepEqual(jQuery(obj).get(), obj.get(), \"jQuery(jQueryObj) == jQueryObj\");\n\n  // Invalid #id will throw an error (gh-1682)\n  try {\n    jQuery(\"#\");\n  } catch (e) {\n    assert.ok(true, \"Threw an error on #id with no id\");\n  }\n\n  // can actually yield more than one, when iframes are included, the window is an array as well\n  assert.equal(jQuery(window).length, 1, \"Correct number of elements generated for jQuery(window)\");\n\n  /*\n  \t// disabled since this test was doing nothing. i tried to fix it but i'm not sure\n  \t// what the expected behavior should even be. FF returns \"\\n\" for the text node\n  \t// make sure this is handled\n  \tvar crlfContainer = jQuery('<p>\\r\\n</p>');\n  \tvar x = crlfContainer.contents().get(0).nodeValue;\n  \tassert.equal( x, what???, \"Check for \\\\r and \\\\n in jQuery()\" );\n  */\n\n  /* // Disabled until we add this functionality in\n  var pass = true;\n  try {\n  \tjQuery(\"<div>Testing</div>\").appendTo(document.getElementById(\"iframe\").contentDocument.body);\n  } catch(e){\n  \tpass = false;\n  }\n  assert.ok( pass, \"jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see trac-968\" );*/\n\n  assert.equal(code.length, 1, \"Correct number of elements generated for code\");\n  assert.equal(code.parent().length, 0, \"Make sure that the generated HTML has no parent.\");\n  assert.equal(img.length, 1, \"Correct number of elements generated for img\");\n  assert.equal(img.parent().length, 0, \"Make sure that the generated HTML has no parent.\");\n  assert.equal(div.length, 4, \"Correct number of elements generated for div hr code b\");\n  assert.equal(div.parent().length, 0, \"Make sure that the generated HTML has no parent.\");\n  assert.equal(jQuery([1, 2, 3]).get(1), 2, \"Test passing an array to the factory\");\n  assert.equal(jQuery(document.body).get(0), jQuery(\"body\").get(0), \"Test passing an html node to the factory\");\n  elem = jQuery(\"  <em>hello</em>\")[0];\n  assert.equal(elem.nodeName.toLowerCase(), \"em\", \"leading space\");\n  elem = jQuery(\"\\n\\n<em>world</em>\")[0];\n  assert.equal(elem.nodeName.toLowerCase(), \"em\", \"leading newlines\");\n  elem = jQuery(\"<div></div>\", attrObj);\n  if (includesModule(\"dimensions\")) {\n    assert.equal(elem[0].style.width, \"10px\", \"jQuery() quick setter width\");\n  }\n  if (includesModule(\"offset\")) {\n    assert.equal(elem[0].style.top, \"1px\", \"jQuery() quick setter offset\");\n  }\n  if (includesModule(\"css\")) {\n    assert.equal(elem[0].style.paddingLeft, \"1px\", \"jQuery quick setter css\");\n    assert.equal(elem[0].style.paddingRight, \"1px\", \"jQuery quick setter css\");\n  }\n  if (includesModule(\"attributes\")) {\n    assert.equal(elem[0].getAttribute(\"desired\"), \"very\", \"jQuery quick setter attr\");\n  }\n  assert.equal(elem[0].childNodes.length, 1, \"jQuery quick setter text\");\n  assert.equal(elem[0].firstChild.nodeValue, \"test\", \"jQuery quick setter text\");\n  assert.equal(elem[0].className, \"test2\", \"jQuery() quick setter class\");\n  assert.equal(elem[0].id, \"test3\", \"jQuery() quick setter id\");\n  exec = true;\n  elem.trigger(\"click\");\n\n  // manually clean up detached elements\n  elem.remove();\n  for (i = 0; i < 3; ++i) {\n    elem = jQuery(\"<input type='text' value='TEST' />\");\n  }\n  assert.equal(elem[0].defaultValue, \"TEST\", \"Ensure cached nodes are cloned properly (Bug trac-6655)\");\n  elem = jQuery(\"<input type='hidden'>\", {});\n  assert.strictEqual(elem[0].ownerDocument, document, \"Empty attributes object is not interpreted as a document (trac-8950)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"globalEval","suites":["core"],"line":152,"code":"QUnit.test(\"globalEval\", function (assert) {\n  assert.expect(3);\n  Globals.register(\"globalEvalTest\");\n  jQuery.globalEval(\"globalEvalTest = 1;\");\n  assert.equal(window.globalEvalTest, 1, \"Test variable assignments are global\");\n  jQuery.globalEval(\"var globalEvalTest = 2;\");\n  assert.equal(window.globalEvalTest, 2, \"Test variable declarations are global\");\n  jQuery.globalEval(\"this.globalEvalTest = 3;\");\n  assert.equal(window.globalEvalTest, 3, \"Test context (this) is the window object\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"globalEval with 'use strict'","suites":["core"],"line":162,"code":"QUnit.test(\"globalEval with 'use strict'\", function (assert) {\n  assert.expect(1);\n  Globals.register(\"strictEvalTest\");\n  jQuery.globalEval(\"'use strict'; var strictEvalTest = 1;\");\n  assert.equal(window.strictEvalTest, 1, \"Test variable declarations are global (strict mode)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"globalEval execution after script injection (trac-7862)","suites":["core"],"line":168,"code":"QUnit.test(\"globalEval execution after script injection (trac-7862)\", function (assert) {\n  assert.expect(1);\n  var now,\n    script = document.createElement(\"script\");\n  script.src = baseURL + \"mock.php?action=wait&wait=2&script=1\";\n  now = Date.now();\n  document.body.appendChild(script);\n  jQuery.globalEval(\"var strictEvalTest = \" + Date.now() + \";\");\n  assert.ok(window.strictEvalTest - now < 500, \"Code executed synchronously\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"noConflict","suites":["core"],"line":184,"code":"QUnit.test(\"noConflict\", function (assert) {\n  assert.expect(7);\n  var $$ = jQuery;\n  assert.strictEqual(jQuery, jQuery.noConflict(), \"noConflict returned the jQuery object\");\n  assert.strictEqual(window[\"jQuery\"], $$, \"Make sure jQuery wasn't touched.\");\n  assert.strictEqual(window[\"$\"], original$, \"Make sure $ was reverted.\");\n  jQuery = $ = $$;\n  assert.strictEqual(jQuery.noConflict(true), $$, \"noConflict returned the jQuery object\");\n  assert.strictEqual(window[\"jQuery\"], originaljQuery, \"Make sure jQuery was reverted.\");\n  assert.strictEqual(window[\"$\"], original$, \"Make sure $ was reverted.\");\n  assert.ok($$().pushStack([]), \"Make sure that jQuery still works.\");\n  window[\"jQuery\"] = jQuery = $$;\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isPlainObject","suites":["core"],"line":197,"code":"QUnit.test(\"isPlainObject\", function (assert) {\n  var done = assert.async();\n  assert.expect(23);\n  var pass,\n    iframe,\n    doc,\n    parentObj,\n    childObj,\n    deep,\n    fn = function () {};\n\n  // The use case that we want to match\n  assert.ok(jQuery.isPlainObject({}), \"{}\");\n  assert.ok(jQuery.isPlainObject(new window.Object()), \"new Object\");\n  assert.ok(jQuery.isPlainObject({\n    constructor: fn\n  }), \"plain object with constructor property\");\n  assert.ok(jQuery.isPlainObject({\n    constructor: \"foo\"\n  }), \"plain object with primitive constructor property\");\n  parentObj = {};\n  childObj = Object.create(parentObj);\n  assert.ok(!jQuery.isPlainObject(childObj), \"Object.create({})\");\n  parentObj.foo = \"bar\";\n  assert.ok(!jQuery.isPlainObject(childObj), \"Object.create({...})\");\n  childObj.bar = \"foo\";\n  assert.ok(!jQuery.isPlainObject(childObj), \"extend(Object.create({...}), ...)\");\n\n  // Not objects shouldn't be matched\n  assert.ok(!jQuery.isPlainObject(\"\"), \"string\");\n  assert.ok(!jQuery.isPlainObject(0) && !jQuery.isPlainObject(1), \"number\");\n  assert.ok(!jQuery.isPlainObject(true) && !jQuery.isPlainObject(false), \"boolean\");\n  assert.ok(!jQuery.isPlainObject(null), \"null\");\n  assert.ok(!jQuery.isPlainObject(undefined), \"undefined\");\n\n  // Arrays shouldn't be matched\n  assert.ok(!jQuery.isPlainObject([]), \"array\");\n\n  // Instantiated objects shouldn't be matched\n  assert.ok(!jQuery.isPlainObject(new Date()), \"new Date\");\n\n  // Functions shouldn't be matched\n  assert.ok(!jQuery.isPlainObject(fn), \"fn\");\n\n  // Again, instantiated objects shouldn't be matched\n  assert.ok(!jQuery.isPlainObject(new fn()), \"new fn (no methods)\");\n\n  // Makes the function a little more realistic\n  // (and harder to detect, incidentally)\n  fn.prototype[\"someMethod\"] = function () {};\n\n  // Again, instantiated objects shouldn't be matched\n  assert.ok(!jQuery.isPlainObject(new fn()), \"new fn\");\n\n  // Instantiated objects with primitive constructors shouldn't be matched\n  fn.prototype.constructor = \"foo\";\n  assert.ok(!jQuery.isPlainObject(new fn()), \"new fn with primitive constructor\");\n\n  // Deep object\n  deep = {\n    \"foo\": {\n      \"baz\": true\n    },\n    \"foo2\": document\n  };\n  assert.ok(jQuery.isPlainObject(deep), \"Object with objects is still plain\");\n\n  // DOM Element\n  assert.ok(!jQuery.isPlainObject(document.createElement(\"div\")), \"DOM Element\");\n\n  // Window\n  assert.ok(!jQuery.isPlainObject(window), \"window\");\n  pass = false;\n  try {\n    jQuery.isPlainObject(window.location);\n    pass = true;\n  } catch (e) {}\n  assert.ok(pass, \"Does not throw exceptions on host objects\");\n\n  // Objects from other windows should be matched\n  Globals.register(\"iframeDone\");\n  window.iframeDone = function (otherObject, detail) {\n    window.iframeDone = undefined;\n    iframe.parentNode.removeChild(iframe);\n    assert.ok(jQuery.isPlainObject(new otherObject()), \"new otherObject\" + (detail ? \" - \" + detail : \"\"));\n    done();\n  };\n  try {\n    iframe = jQuery(\"#qunit-fixture\")[0].appendChild(document.createElement(\"iframe\"));\n    doc = iframe.contentDocument || iframe.contentWindow.document;\n    doc.open();\n    doc.write(\"<body onload='window.parent.iframeDone(Object);'>\");\n    doc.close();\n  } catch (e) {\n    window.iframeDone(Object, \"iframes not supported\");\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isPlainObject(localStorage)","suites":["core"],"line":299,"code":"QUnit.test(\"isPlainObject(localStorage)\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery.isPlainObject(localStorage), false);\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isXMLDoc - HTML","suites":["core"],"line":313,"code":"QUnit.test(\"isXMLDoc - HTML\", function (assert) {\n  assert.expect(4);\n  assert.ok(!jQuery.isXMLDoc(document), \"HTML document\");\n  assert.ok(!jQuery.isXMLDoc(document.documentElement), \"HTML documentElement\");\n  assert.ok(!jQuery.isXMLDoc(document.body), \"HTML Body Element\");\n  var body,\n    iframe = document.createElement(\"iframe\");\n  document.body.appendChild(iframe);\n  try {\n    body = jQuery(iframe).contents()[0];\n    try {\n      assert.ok(!jQuery.isXMLDoc(body), \"Iframe body element\");\n    } catch (e) {\n      assert.ok(false, \"Iframe body element exception\");\n    }\n  } catch (e) {\n    assert.ok(true, \"Iframe body element - iframe not working correctly\");\n  }\n  document.body.removeChild(iframe);\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isXMLDoc - embedded SVG","suites":["core"],"line":333,"code":"QUnit.test(\"isXMLDoc - embedded SVG\", function (assert) {\n  assert.expect(6);\n  var htmlTree = jQuery(\"<div>\" + \"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='1' width='1'>\" + \"<desc></desc>\" + \"</svg>\" + \"</div>\")[0];\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree), false, \"disconnected div element\");\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree.firstChild), true, \"disconnected HTML-embedded SVG root element\");\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree.firstChild.firstChild), true, \"disconnected HTML-embedded SVG child element\");\n  document.getElementById(\"qunit-fixture\").appendChild(htmlTree);\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree), false, \"connected div element\");\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree.firstChild), true, \"connected HTML-embedded SVG root element\");\n  assert.strictEqual(jQuery.isXMLDoc(htmlTree.firstChild.firstChild), true, \"disconnected HTML-embedded SVG child element\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isXMLDoc - XML","suites":["core"],"line":344,"code":"QUnit.test(\"isXMLDoc - XML\", function (assert) {\n  assert.expect(8);\n  var xml = createDashboardXML();\n  var svg = jQuery.parseXML(\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \" + \"\\\"http://www.w3.org/Gaphics/SVG/1.1/DTD/svg11.dtd\\\">\" + \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg'><desc/></svg>\");\n  assert.ok(jQuery.isXMLDoc(xml), \"XML document\");\n  assert.ok(jQuery.isXMLDoc(xml.documentElement), \"XML documentElement\");\n  assert.ok(jQuery.isXMLDoc(xml.documentElement.firstChild), \"XML child element\");\n  assert.ok(jQuery.isXMLDoc(jQuery(\"tab\", xml)[0]), \"XML tab Element\");\n  assert.ok(jQuery.isXMLDoc(svg), \"SVG document\");\n  assert.ok(jQuery.isXMLDoc(svg.documentElement), \"SVG documentElement\");\n  assert.ok(jQuery.isXMLDoc(svg.documentElement.firstChild), \"SVG child element\");\n  assert.ok(jQuery.isXMLDoc(jQuery(\"desc\", svg)[0]), \"XML desc Element\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"isXMLDoc - falsy","suites":["core"],"line":357,"code":"QUnit.test(\"isXMLDoc - falsy\", function (assert) {\n  assert.expect(5);\n  assert.strictEqual(jQuery.isXMLDoc(undefined), false, \"undefined\");\n  assert.strictEqual(jQuery.isXMLDoc(null), false, \"null\");\n  assert.strictEqual(jQuery.isXMLDoc(false), false, \"false\");\n  assert.strictEqual(jQuery.isXMLDoc(0), false, \"0\");\n  assert.strictEqual(jQuery.isXMLDoc(\"\"), false, \"\\\"\\\"\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"XSS via location.hash","suites":["core"],"line":365,"code":"QUnit.test(\"XSS via location.hash\", function (assert) {\n  var done = assert.async();\n  assert.expect(1);\n  jQuery[\"_check9521\"] = function (x) {\n    assert.ok(x, \"script called from #id-like selector with inline handler\");\n    jQuery(\"#check9521\").remove();\n    delete jQuery[\"_check9521\"];\n    done();\n  };\n  try {\n    // This throws an error because it's processed like an id\n    jQuery(\"#<img id='check9521' src='no-such-.gif' onerror='jQuery._check9521(false)'>\").appendTo(\"#qunit-fixture\");\n  } catch (err) {\n    jQuery[\"_check9521\"](true);\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery('html')","suites":["core"],"line":381,"code":"QUnit.test(\"jQuery('html')\", function (assert) {\n  assert.expect(18);\n  var s, div, j;\n  jQuery[\"foo\"] = false;\n  s = jQuery(\"<script>jQuery.foo='test';</script>\")[0];\n  assert.ok(s, \"Creating a script\");\n  assert.ok(!jQuery[\"foo\"], \"Make sure the script wasn't executed prematurely\");\n  jQuery(\"body\").append(\"<script>jQuery.foo='test';</script>\");\n  assert.ok(jQuery[\"foo\"], \"Executing a script's contents in the right context\");\n\n  // Test multi-line HTML\n  div = jQuery(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\")[0];\n  assert.equal(div.nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\");\n  assert.equal(div.firstChild.nodeType, 3, \"Text node.\");\n  assert.equal(div.lastChild.nodeType, 3, \"Text node.\");\n  assert.equal(div.childNodes[1].nodeType, 1, \"Paragraph.\");\n  assert.equal(div.childNodes[1].firstChild.nodeType, 3, \"Paragraph text.\");\n  assert.ok(jQuery(\"<link rel='stylesheet'/>\")[0], \"Creating a link\");\n  assert.ok(!jQuery(\"<script></script>\")[0].parentNode, \"Create a script\");\n  assert.ok(jQuery(\"<input/>\").attr(\"type\", \"hidden\"), \"Create an input and set the type.\");\n  j = jQuery(\"<span>hi</span> there <!-- mon ami -->\");\n  assert.ok(j.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\");\n  assert.ok(!jQuery(\"<option>test</option>\")[0].selected, \"Make sure that options are auto-selected trac-2050\");\n  assert.ok(jQuery(\"<div></div>\")[0], \"Create a div with closing tag.\");\n  assert.ok(jQuery(\"<table></table>\")[0], \"Create a table with closing tag.\");\n  assert.equal(jQuery(\"element[attribute='<div></div>']\").length, 0, \"When html is within brackets, do not recognize as html.\");\n\n  //equal( jQuery( \"element[attribute=<div></div>]\" ).length, 0,\n  //\t\"When html is within brackets, do not recognize as html.\" );\n  if (QUnit.jQuerySelectors) {\n    assert.equal(jQuery(\"element:not(<div></div>)\").length, 0, \"When html is within parens, do not recognize as html.\");\n  } else {\n    assert.ok(\"skip\", \"Complex :not not supported in selector-native\");\n  }\n  assert.equal(jQuery(\"\\\\<div\\\\>\").length, 0, \"Ignore escaped html characters\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery(element with non-alphanumeric name)","suites":["core"],"line":417,"code":"QUnit.test(\"jQuery(element with non-alphanumeric name)\", function (assert) {\n  assert.expect(36);\n  jQuery.each([\"-\", \":\"], function (i, symbol) {\n    jQuery.each([\"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"caption\", \"tr\", \"th\", \"td\"], function (j, tag) {\n      var tagName = tag + symbol + \"test\";\n      var el = jQuery(\"<\" + tagName + \"></\" + tagName + \">\");\n      assert.ok(el[0], \"Create a \" + tagName + \" element\");\n      assert.ok(el[0].nodeName === tagName.toUpperCase(), tagName + \" element has expected node name\");\n    });\n    var tagName = [\"tr\", \"multiple\", \"symbol\"].join(symbol);\n    var el = jQuery(\"<\" + tagName + \"></\" + tagName + \">\");\n    assert.ok(el[0], \"Create a \" + tagName + \" element\");\n    assert.ok(el[0].nodeName === tagName.toUpperCase(), tagName + \" element has expected node name\");\n  });\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery('massive html trac-7990')","suites":["core"],"line":432,"code":"QUnit.test(\"jQuery('massive html trac-7990')\", function (assert) {\n  assert.expect(3);\n  var i,\n    li = \"<li>very very very very large html string</li>\",\n    html = [\"<ul>\"];\n  for (i = 0; i < 30000; i += 1) {\n    html[html.length] = li;\n  }\n  html[html.length] = \"</ul>\";\n  html = jQuery(html.join(\"\"))[0];\n  assert.equal(html.nodeName.toLowerCase(), \"ul\");\n  assert.equal(html.firstChild.nodeName.toLowerCase(), \"li\");\n  assert.equal(html.childNodes.length, 30000);\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery('html', context)","suites":["core"],"line":446,"code":"QUnit.test(\"jQuery('html', context)\", function (assert) {\n  assert.expect(1);\n  var $div = jQuery(\"<div></div>\")[0],\n    $span = jQuery(\"<span></span>\", $div);\n  assert.equal($span.length, 1, \"verify a span created with a div context works, trac-1763\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery(selector, xml).text(str) - loaded via xml document","suites":["core"],"line":452,"code":"QUnit.test(\"jQuery(selector, xml).text(str) - loaded via xml document\", function (assert) {\n  assert.expect(2);\n  var xml = createDashboardXML(),\n    // tests for trac-1419 where ie was a problem\n    tab = jQuery(\"tab\", xml).eq(0);\n  assert.equal(tab.text(), \"blabla\", \"verify initial text correct\");\n  tab.text(\"newtext\");\n  assert.equal(tab.text(), \"newtext\", \"verify new text correct\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"end()","suites":["core"],"line":461,"code":"QUnit.test(\"end()\", function (assert) {\n  assert.expect(3);\n  assert.equal(\"Yahoo\", jQuery(\"#yahoo\").parent().end().text(), \"check for end\");\n  assert.ok(jQuery(\"#yahoo\").end(), \"check for end with nothing to end\");\n  var x = jQuery(\"#yahoo\");\n  x.parent();\n  assert.equal(\"Yahoo\", jQuery(\"#yahoo\").text(), \"check for non-destructive behavior\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"length","suites":["core"],"line":469,"code":"QUnit.test(\"length\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery(\"#qunit-fixture p\").length, 6, \"Get Number of Elements Found\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"get()","suites":["core"],"line":473,"code":"QUnit.test(\"get()\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").get(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Get All Elements\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"toArray()","suites":["core"],"line":477,"code":"QUnit.test(\"toArray()\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").toArray(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Convert jQuery object to an Array\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"inArray()","suites":["core"],"line":481,"code":"QUnit.test(\"inArray()\", function (assert) {\n  assert.expect(19);\n  var selections = {\n      p: q(\"firstp\", \"sap\", \"ap\", \"first\"),\n      em: q(\"siblingnext\", \"siblingfirst\"),\n      div: q(\"qunit-testrunner-toolbar\", \"nothiddendiv\", \"nothiddendivchild\", \"foo\"),\n      a: q(\"mark\", \"groups\", \"google\", \"simon1\"),\n      empty: []\n    },\n    tests = {\n      p: {\n        elem: jQuery(\"#ap\")[0],\n        index: 2\n      },\n      em: {\n        elem: jQuery(\"#siblingfirst\")[0],\n        index: 1\n      },\n      div: {\n        elem: jQuery(\"#nothiddendiv\")[0],\n        index: 1\n      },\n      a: {\n        elem: jQuery(\"#simon1\")[0],\n        index: 3\n      }\n    },\n    falseTests = {\n      p: jQuery(\"#liveSpan1\")[0],\n      em: jQuery(\"#nothiddendiv\")[0],\n      empty: \"\"\n    };\n  jQuery.each(tests, function (key, obj) {\n    assert.equal(jQuery.inArray(obj.elem, selections[key]), obj.index, \"elem is in the array of selections of its tag\");\n\n    // Third argument (fromIndex)\n    assert.equal(!!~jQuery.inArray(obj.elem, selections[key], 5), false, \"elem is NOT in the array of selections given a starting index greater than its position\");\n    assert.equal(!!~jQuery.inArray(obj.elem, selections[key], 1), true, \"elem is in the array of selections given a starting index less than or equal to its position\");\n    assert.equal(!!~jQuery.inArray(obj.elem, selections[key], -3), true, \"elem is in the array of selections given a negative index\");\n  });\n  jQuery.each(falseTests, function (key, elem) {\n    assert.equal(!!~jQuery.inArray(elem, selections[key]), false, \"elem is NOT in the array of selections\");\n  });\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"get(Number)","suites":["core"],"line":525,"code":"QUnit.test(\"get(Number)\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"#qunit-fixture p\").get(0), document.getElementById(\"firstp\"), \"Get A Single Element\");\n  assert.strictEqual(jQuery(\"#firstp\").get(1), undefined, \"Try get with index larger elements count\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"get(-Number)","suites":["core"],"line":530,"code":"QUnit.test(\"get(-Number)\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"p\").get(-1), document.getElementById(\"first\"), \"Get a single element with negative index\");\n  assert.strictEqual(jQuery(\"#firstp\").get(-2), undefined, \"Try get with index negative index larger then elements count\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"each(Function)","suites":["core"],"line":535,"code":"QUnit.test(\"each(Function)\", function (assert) {\n  assert.expect(1);\n  var div, pass, i;\n  div = jQuery(\"div\");\n  div.each(function () {\n    this.foo = \"zoo\";\n  });\n  pass = true;\n  for (i = 0; i < div.length; i++) {\n    if (div.get(i).foo !== \"zoo\") {\n      pass = false;\n    }\n  }\n  assert.ok(pass, \"Execute a function, Relative\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"slice()","suites":["core"],"line":550,"code":"QUnit.test(\"slice()\", function (assert) {\n  assert.expect(7);\n  var $links = jQuery(\"#ap a\");\n  assert.deepEqual($links.slice(1, 2).get(), q(\"groups\"), \"slice(1,2)\");\n  assert.deepEqual($links.slice(1).get(), q(\"groups\", \"anchor1\", \"mark\"), \"slice(1)\");\n  assert.deepEqual($links.slice(0, 3).get(), q(\"google\", \"groups\", \"anchor1\"), \"slice(0,3)\");\n  assert.deepEqual($links.slice(-1).get(), q(\"mark\"), \"slice(-1)\");\n  assert.deepEqual($links.eq(1).get(), q(\"groups\"), \"eq(1)\");\n  assert.deepEqual($links.eq(\"2\").get(), q(\"anchor1\"), \"eq('2')\");\n  assert.deepEqual($links.eq(-1).get(), q(\"mark\"), \"eq(-1)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"first()/last()","suites":["core"],"line":561,"code":"QUnit.test(\"first()/last()\", function (assert) {\n  assert.expect(4);\n  var $links = jQuery(\"#ap a\"),\n    $none = jQuery(\"asdf\");\n  assert.deepEqual($links.first().get(), q(\"google\"), \"first()\");\n  assert.deepEqual($links.last().get(), q(\"mark\"), \"last()\");\n  assert.deepEqual($none.first().get(), [], \"first() none\");\n  assert.deepEqual($none.last().get(), [], \"last() none\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"even()/odd()","suites":["core"],"line":570,"code":"QUnit.test(\"even()/odd()\", function (assert) {\n  assert.expect(4);\n  var $links = jQuery(\"#ap a\"),\n    $none = jQuery(\"asdf\");\n  assert.deepEqual($links.even().get(), q(\"google\", \"anchor1\"), \"even()\");\n  assert.deepEqual($links.odd().get(), q(\"groups\", \"mark\"), \"odd()\");\n  assert.deepEqual($none.even().get(), [], \"even() none\");\n  assert.deepEqual($none.odd().get(), [], \"odd() none\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"map()","suites":["core"],"line":579,"code":"QUnit.test(\"map()\", function (assert) {\n  assert.expect(2);\n  assert.deepEqual(jQuery(\"#ap\").map(function () {\n    return jQuery(this).find(\"a\").get();\n  }).get(), q(\"google\", \"groups\", \"anchor1\", \"mark\"), \"Array Map\");\n  assert.deepEqual(jQuery(\"#ap > a\").map(function () {\n    return this.parentNode;\n  }).get(), q(\"ap\", \"ap\", \"ap\"), \"Single Map\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.map","suites":["core"],"line":588,"code":"QUnit.test(\"jQuery.map\", function (assert) {\n  assert.expect(28);\n  var i, label, result, callback;\n  result = jQuery.map([3, 4, 5], function (v, k) {\n    return k;\n  });\n  assert.equal(result.join(\"\"), \"012\", \"Map the keys from an array\");\n  result = jQuery.map([3, 4, 5], function (v) {\n    return v;\n  });\n  assert.equal(result.join(\"\"), \"345\", \"Map the values from an array\");\n  result = jQuery.map({\n    a: 1,\n    b: 2\n  }, function (v, k) {\n    return k;\n  });\n  assert.equal(result.join(\"\"), \"ab\", \"Map the keys from an object\");\n  result = jQuery.map({\n    a: 1,\n    b: 2\n  }, function (v) {\n    return v;\n  });\n  assert.equal(result.join(\"\"), \"12\", \"Map the values from an object\");\n  result = jQuery.map([\"a\", undefined, null, \"b\"], function (v) {\n    return v;\n  });\n  assert.equal(result.join(\"\"), \"ab\", \"Array iteration does not include undefined/null results\");\n  result = jQuery.map({\n    a: \"a\",\n    b: undefined,\n    c: null,\n    d: \"b\"\n  }, function (v) {\n    return v;\n  });\n  assert.equal(result.join(\"\"), \"ab\", \"Object iteration does not include undefined/null results\");\n  result = {\n    Zero: function () {},\n    One: function (a) {\n      a = a;\n    },\n    Two: function (a, b) {\n      a = a;\n      b = b;\n    }\n  };\n  callback = function (v, k) {\n    assert.equal(k, \"foo\", label + \"-argument function treated like object\");\n  };\n  for (i in result) {\n    label = i;\n    result[i].foo = \"bar\";\n    jQuery.map(result[i], callback);\n  }\n  result = {\n    \"undefined\": undefined,\n    \"null\": null,\n    \"false\": false,\n    \"true\": true,\n    \"empty string\": \"\",\n    \"nonempty string\": \"string\",\n    \"string \\\"0\\\"\": \"0\",\n    \"negative\": -1,\n    \"excess\": 1\n  };\n  callback = function (v, k) {\n    assert.equal(k, \"length\", \"Object with \" + label + \" length treated like object\");\n  };\n  for (i in result) {\n    label = i;\n    jQuery.map({\n      length: result[i]\n    }, callback);\n  }\n  result = {\n    \"sparse Array\": Array(4),\n    \"length: 1 plain object\": {\n      length: 1,\n      \"0\": true\n    },\n    \"length: 2 plain object\": {\n      length: 2,\n      \"0\": true,\n      \"1\": true\n    },\n    NodeList: document.getElementsByTagName(\"html\")\n  };\n  callback = function (v, k) {\n    if (result[label]) {\n      delete result[label];\n      assert.equal(k, \"0\", label + \" treated like array\");\n    }\n  };\n  for (i in result) {\n    label = i;\n    jQuery.map(result[i], callback);\n  }\n  result = false;\n  jQuery.map({\n    length: 0\n  }, function () {\n    result = true;\n  });\n  assert.ok(!result, \"length: 0 plain object treated like array\");\n  result = false;\n  jQuery.map(document.getElementsByTagName(\"asdf\"), function () {\n    result = true;\n  });\n  assert.ok(!result, \"empty NodeList treated like array\");\n  result = jQuery.map(Array(4), function (v, k) {\n    return k % 2 ? k : [k, k, k];\n  });\n  assert.equal(result.join(\"\"), \"00012223\", \"Array results flattened (trac-2616)\");\n  result = jQuery.map([[[1, 2], 3], 4], function (v, k) {\n    return v;\n  });\n  assert.equal(result.length, 3, \"Array flatten only one level down\");\n  assert.ok(Array.isArray(result[0]), \"Array flatten only one level down\");\n\n  // Support: IE 11+\n  // IE doesn't have Array#flat so it'd fail the test.\n  if (!QUnit.isIE) {\n    result = jQuery.map(Array(300000), function (v, k) {\n      return k;\n    });\n    assert.equal(result.length, 300000, \"Able to map 300000 records without any problems (gh-4320)\");\n  } else {\n    assert.ok(\"skip\", \"Array#flat isn't supported in IE\");\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.merge()","suites":["core"],"line":720,"code":"QUnit.test(\"jQuery.merge()\", function (assert) {\n  assert.expect(10);\n  assert.deepEqual(jQuery.merge([], []), [], \"Empty arrays\");\n  assert.deepEqual(jQuery.merge([1], [2]), [1, 2], \"Basic (single-element)\");\n  assert.deepEqual(jQuery.merge([1, 2], [3, 4]), [1, 2, 3, 4], \"Basic (multiple-element)\");\n  assert.deepEqual(jQuery.merge([1, 2], []), [1, 2], \"Second empty\");\n  assert.deepEqual(jQuery.merge([], [1, 2]), [1, 2], \"First empty\");\n\n  // Fixed at [5998], trac-3641\n  assert.deepEqual(jQuery.merge([-2, -1], [0, 1, 2]), [-2, -1, 0, 1, 2], \"Second array including a zero (falsy)\");\n\n  // After fixing trac-5527\n  assert.deepEqual(jQuery.merge([], [null, undefined]), [null, undefined], \"Second array including null and undefined values\");\n  assert.deepEqual(jQuery.merge({\n    length: 0\n  }, [1, 2]), {\n    length: 2,\n    0: 1,\n    1: 2\n  }, \"First array like\");\n  assert.deepEqual(jQuery.merge([1, 2], {\n    length: 1,\n    0: 3\n  }), [1, 2, 3], \"Second array like\");\n  assert.deepEqual(jQuery.merge([], document.getElementById(\"lengthtest\").getElementsByTagName(\"input\")), [document.getElementById(\"length\"), document.getElementById(\"idTest\")], \"Second NodeList\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.grep()","suites":["core"],"line":746,"code":"QUnit.test(\"jQuery.grep()\", function (assert) {\n  assert.expect(8);\n  var searchCriterion = function (value) {\n    return value % 2 === 0;\n  };\n  assert.deepEqual(jQuery.grep([], searchCriterion), [], \"Empty array\");\n  assert.deepEqual(jQuery.grep(new Array(4), searchCriterion), [], \"Sparse array\");\n  assert.deepEqual(jQuery.grep([1, 2, 3, 4, 5, 6], searchCriterion), [2, 4, 6], \"Satisfying elements present\");\n  assert.deepEqual(jQuery.grep([1, 3, 5, 7], searchCriterion), [], \"Satisfying elements absent\");\n  assert.deepEqual(jQuery.grep([1, 2, 3, 4, 5, 6], searchCriterion, true), [1, 3, 5], \"Satisfying elements present and grep inverted\");\n  assert.deepEqual(jQuery.grep([1, 3, 5, 7], searchCriterion, true), [1, 3, 5, 7], \"Satisfying elements absent and grep inverted\");\n  assert.deepEqual(jQuery.grep([1, 2, 3, 4, 5, 6], searchCriterion, false), [2, 4, 6], \"Satisfying elements present but grep explicitly uninverted\");\n  assert.deepEqual(jQuery.grep([1, 3, 5, 7], searchCriterion, false), [], \"Satisfying elements absent and grep explicitly uninverted\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.grep(Array-like)","suites":["core"],"line":760,"code":"QUnit.test(\"jQuery.grep(Array-like)\", function (assert) {\n  assert.expect(7);\n  var searchCriterion = function (value) {\n    return value % 2 === 0;\n  };\n  assert.deepEqual(jQuery.grep({\n    length: 0\n  }, searchCriterion), [], \"Empty array-like\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 2,\n    2: 3,\n    3: 4,\n    4: 5,\n    5: 6,\n    length: 6\n  }, searchCriterion), [2, 4, 6], \"Satisfying elements present and array-like object used\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 3,\n    2: 5,\n    3: 7,\n    length: 4\n  }, searchCriterion), [], \"Satisfying elements absent and Array-like object used\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 2,\n    2: 3,\n    3: 4,\n    4: 5,\n    5: 6,\n    length: 6\n  }, searchCriterion, true), [1, 3, 5], \"Satisfying elements present, array-like object used, and grep inverted\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 3,\n    2: 5,\n    3: 7,\n    length: 4\n  }, searchCriterion, true), [1, 3, 5, 7], \"Satisfying elements absent, array-like object used, and grep inverted\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 2,\n    2: 3,\n    3: 4,\n    4: 5,\n    5: 6,\n    length: 6\n  }, searchCriterion, false), [2, 4, 6], \"Satisfying elements present, Array-like object used, but grep explicitly uninverted\");\n  assert.deepEqual(jQuery.grep({\n    0: 1,\n    1: 3,\n    2: 5,\n    3: 7,\n    length: 4\n  }, searchCriterion, false), [], \"Satisfying elements absent, Array-like object used, and grep explicitly uninverted\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.extend(Object, Object)","suites":["core"],"line":817,"code":"QUnit.test(\"jQuery.extend(Object, Object)\", function (assert) {\n  assert.expect(28);\n  var empty,\n    optionsWithLength,\n    optionsWithDate,\n    myKlass,\n    customObject,\n    optionsWithCustomObject,\n    MyNumber,\n    ret,\n    nullUndef,\n    target,\n    recursive,\n    obj,\n    defaults,\n    defaultsCopy,\n    options1,\n    options1Copy,\n    options2,\n    options2Copy,\n    merged2,\n    settings = {\n      \"xnumber1\": 5,\n      \"xnumber2\": 7,\n      \"xstring1\": \"peter\",\n      \"xstring2\": \"pan\"\n    },\n    options = {\n      \"xnumber2\": 1,\n      \"xstring2\": \"x\",\n      \"xxx\": \"newstring\"\n    },\n    optionsCopy = {\n      \"xnumber2\": 1,\n      \"xstring2\": \"x\",\n      \"xxx\": \"newstring\"\n    },\n    merged = {\n      \"xnumber1\": 5,\n      \"xnumber2\": 1,\n      \"xstring1\": \"peter\",\n      \"xstring2\": \"x\",\n      \"xxx\": \"newstring\"\n    },\n    deep1 = {\n      \"foo\": {\n        \"bar\": true\n      }\n    },\n    deep2 = {\n      \"foo\": {\n        \"baz\": true\n      },\n      \"foo2\": document\n    },\n    deep2copy = {\n      \"foo\": {\n        \"baz\": true\n      },\n      \"foo2\": document\n    },\n    deepmerged = {\n      \"foo\": {\n        \"bar\": true,\n        \"baz\": true\n      },\n      \"foo2\": document\n    },\n    arr = [1, 2, 3],\n    nestedarray = {\n      \"arr\": arr\n    };\n  jQuery.extend(settings, options);\n  assert.deepEqual(settings, merged, \"Check if extended: settings must be extended\");\n  assert.deepEqual(options, optionsCopy, \"Check if not modified: options must not be modified\");\n  jQuery.extend(settings, null, options);\n  assert.deepEqual(settings, merged, \"Check if extended: settings must be extended\");\n  assert.deepEqual(options, optionsCopy, \"Check if not modified: options must not be modified\");\n  jQuery.extend(true, deep1, deep2);\n  assert.deepEqual(deep1[\"foo\"], deepmerged[\"foo\"], \"Check if foo: settings must be extended\");\n  assert.deepEqual(deep2[\"foo\"], deep2copy[\"foo\"], \"Check if not deep2: options must not be modified\");\n  assert.equal(deep1[\"foo2\"], document, \"Make sure that a deep clone was not attempted on the document\");\n  assert.ok(jQuery.extend(true, {}, nestedarray)[\"arr\"] !== arr, \"Deep extend of object must clone child array\");\n\n  // trac-5991\n  assert.ok(Array.isArray(jQuery.extend(true, {\n    \"arr\": {}\n  }, nestedarray)[\"arr\"]), \"Cloned array have to be an Array\");\n  assert.ok(jQuery.isPlainObject(jQuery.extend(true, {\n    \"arr\": arr\n  }, {\n    \"arr\": {}\n  })[\"arr\"]), \"Cloned object have to be an plain object\");\n  empty = {};\n  optionsWithLength = {\n    \"foo\": {\n      \"length\": -1\n    }\n  };\n  jQuery.extend(true, empty, optionsWithLength);\n  assert.deepEqual(empty[\"foo\"], optionsWithLength[\"foo\"], \"The length property must copy correctly\");\n  empty = {};\n  optionsWithDate = {\n    \"foo\": {\n      \"date\": new Date()\n    }\n  };\n  jQuery.extend(true, empty, optionsWithDate);\n  assert.deepEqual(empty[\"foo\"], optionsWithDate[\"foo\"], \"Dates copy correctly\");\n\n  /** @constructor */\n  myKlass = function () {};\n  customObject = new myKlass();\n  optionsWithCustomObject = {\n    \"foo\": {\n      \"date\": customObject\n    }\n  };\n  empty = {};\n  jQuery.extend(true, empty, optionsWithCustomObject);\n  assert.ok(empty[\"foo\"] && empty[\"foo\"][\"date\"] === customObject, \"Custom objects copy correctly (no methods)\");\n\n  // Makes the class a little more realistic\n  myKlass.prototype = {\n    \"someMethod\": function () {}\n  };\n  empty = {};\n  jQuery.extend(true, empty, optionsWithCustomObject);\n  assert.ok(empty[\"foo\"] && empty[\"foo\"][\"date\"] === customObject, \"Custom objects copy correctly\");\n  MyNumber = Number;\n  ret = jQuery.extend(true, {\n    \"foo\": 4\n  }, {\n    \"foo\": new MyNumber(5)\n  });\n  assert.ok(parseInt(ret.foo, 10) === 5, \"Wrapped numbers copy correctly\");\n  nullUndef = jQuery.extend({}, options, {\n    \"xnumber2\": null\n  });\n  assert.ok(nullUndef[\"xnumber2\"] === null, \"Check to make sure null values are copied\");\n  nullUndef = jQuery.extend({}, options, {\n    \"xnumber2\": undefined\n  });\n  assert.ok(nullUndef[\"xnumber2\"] === options[\"xnumber2\"], \"Check to make sure undefined values are not copied\");\n  nullUndef = jQuery.extend({}, options, {\n    \"xnumber0\": null\n  });\n  assert.ok(nullUndef[\"xnumber0\"] === null, \"Check to make sure null values are inserted\");\n  target = {};\n  recursive = {\n    foo: target,\n    bar: 5\n  };\n  jQuery.extend(true, target, recursive);\n  assert.deepEqual(target, {\n    bar: 5\n  }, \"Check to make sure a recursive obj doesn't go never-ending loop by not copying it over\");\n  ret = jQuery.extend(true, {\n    foo: []\n  }, {\n    foo: [0]\n  }); // 1907\n  assert.equal(ret.foo.length, 1, \"Check to make sure a value with coercion 'false' copies over when necessary to fix trac-1907\");\n  ret = jQuery.extend(true, {\n    foo: \"1,2,3\"\n  }, {\n    foo: [1, 2, 3]\n  });\n  assert.ok(typeof ret.foo !== \"string\", \"Check to make sure values equal with coercion (but not actually equal) overwrite correctly\");\n  ret = jQuery.extend(true, {\n    foo: \"bar\"\n  }, {\n    foo: null\n  });\n  assert.ok(typeof ret.foo !== \"undefined\", \"Make sure a null value doesn't crash with deep extend, for trac-1908\");\n  obj = {\n    foo: null\n  };\n  jQuery.extend(true, obj, {\n    foo: \"notnull\"\n  });\n  assert.equal(obj.foo, \"notnull\", \"Make sure a null value can be overwritten\");\n  function func() {}\n  jQuery.extend(func, {\n    key: \"value\"\n  });\n  assert.equal(func.key, \"value\", \"Verify a function can be extended\");\n  defaults = {\n    xnumber1: 5,\n    xnumber2: 7,\n    xstring1: \"peter\",\n    xstring2: \"pan\"\n  };\n  defaultsCopy = {\n    xnumber1: 5,\n    xnumber2: 7,\n    xstring1: \"peter\",\n    xstring2: \"pan\"\n  };\n  options1 = {\n    xnumber2: 1,\n    xstring2: \"x\"\n  };\n  options1Copy = {\n    xnumber2: 1,\n    xstring2: \"x\"\n  };\n  options2 = {\n    xstring2: \"xx\",\n    xxx: \"newstringx\"\n  };\n  options2Copy = {\n    xstring2: \"xx\",\n    xxx: \"newstringx\"\n  };\n  merged2 = {\n    xnumber1: 5,\n    xnumber2: 1,\n    xstring1: \"peter\",\n    xstring2: \"xx\",\n    xxx: \"newstringx\"\n  };\n  settings = jQuery.extend({}, defaults, options1, options2);\n  assert.deepEqual(settings, merged2, \"Check if extended: settings must be extended\");\n  assert.deepEqual(defaults, defaultsCopy, \"Check if not modified: options1 must not be modified\");\n  assert.deepEqual(options1, options1Copy, \"Check if not modified: options1 must not be modified\");\n  assert.deepEqual(options2, options2Copy, \"Check if not modified: options2 must not be modified\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.extend(Object, Object {created with \"defineProperties\"})","suites":["core"],"line":1045,"code":"QUnit.test(\"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function (assert) {\n  assert.expect(2);\n  var definedObj = Object.defineProperties({}, {\n      \"enumerableProp\": {\n        get: function () {\n          return true;\n        },\n        enumerable: true\n      },\n      \"nonenumerableProp\": {\n        get: function () {\n          return true;\n        }\n      }\n    }),\n    accessorObj = {};\n  jQuery.extend(accessorObj, definedObj);\n  assert.equal(accessorObj.enumerableProp, true, \"Verify that getters are transferred\");\n  assert.equal(accessorObj.nonenumerableProp, undefined, \"Verify that non-enumerable getters are ignored\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object","suites":["core"],"line":1065,"code":"QUnit.test(\"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function (assert) {\n  assert.expect(2);\n  var result,\n    initial = {\n      // This will make \"copyIsArray\" true\n      array: [1, 2, 3, 4],\n      // If \"copyIsArray\" doesn't get reset to false, the check\n      // will evaluate true and enter the array copy block\n      // instead of the object copy block. Since the ternary in the\n      // \"copyIsArray\" block will evaluate to false\n      // (check if operating on an array with ), this will be\n      // replaced by an empty array.\n      object: {}\n    };\n  result = jQuery.extend(true, {}, initial);\n  assert.deepEqual(result, initial, \"The [result] and [initial] have equal shape and values\");\n  assert.ok(!Array.isArray(result.object), \"result.object wasn't paved with an empty array\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.extend( true, ... ) Object.prototype pollution","suites":["core"],"line":1083,"code":"QUnit.test(\"jQuery.extend( true, ... ) Object.prototype pollution\", function (assert) {\n  assert.expect(1);\n  jQuery.extend(true, {}, JSON.parse(\"{\\\"__proto__\\\": {\\\"devMode\\\": true}}\"));\n  assert.ok(!(\"devMode\" in {}), \"Object.prototype not polluted\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.each(Object,Function)","suites":["core"],"line":1088,"code":"QUnit.test(\"jQuery.each(Object,Function)\", function (assert) {\n  assert.expect(23);\n  var i, label, seen, callback;\n  seen = {};\n  jQuery.each([3, 4, 5], function (k, v) {\n    seen[k] = v;\n  });\n  assert.deepEqual(seen, {\n    \"0\": 3,\n    \"1\": 4,\n    \"2\": 5\n  }, \"Array iteration\");\n  seen = {};\n  jQuery.each({\n    name: \"name\",\n    lang: \"lang\"\n  }, function (k, v) {\n    seen[k] = v;\n  });\n  assert.deepEqual(seen, {\n    name: \"name\",\n    lang: \"lang\"\n  }, \"Object iteration\");\n  seen = [];\n  jQuery.each([1, 2, 3], function (k, v) {\n    seen.push(v);\n    if (k === 1) {\n      return false;\n    }\n  });\n  assert.deepEqual(seen, [1, 2], \"Broken array iteration\");\n  seen = [];\n  jQuery.each({\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n  }, function (k, v) {\n    seen.push(v);\n    return false;\n  });\n  assert.deepEqual(seen, [1], \"Broken object iteration\");\n  seen = {\n    Zero: function () {},\n    One: function (a) {\n      a = a;\n    },\n    Two: function (a, b) {\n      a = a;\n      b = b;\n    }\n  };\n  callback = function (k) {\n    assert.equal(k, \"foo\", label + \"-argument function treated like object\");\n  };\n  for (i in seen) {\n    label = i;\n    seen[i].foo = \"bar\";\n    jQuery.each(seen[i], callback);\n  }\n  seen = {\n    \"undefined\": undefined,\n    \"null\": null,\n    \"false\": false,\n    \"true\": true,\n    \"empty string\": \"\",\n    \"nonempty string\": \"string\",\n    \"string \\\"0\\\"\": \"0\",\n    \"negative\": -1,\n    \"excess\": 1\n  };\n  callback = function (k) {\n    assert.equal(k, \"length\", \"Object with \" + label + \" length treated like object\");\n  };\n  for (i in seen) {\n    label = i;\n    jQuery.each({\n      length: seen[i]\n    }, callback);\n  }\n  seen = {\n    \"sparse Array\": Array(4),\n    \"length: 1 plain object\": {\n      length: 1,\n      \"0\": true\n    },\n    \"length: 2 plain object\": {\n      length: 2,\n      \"0\": true,\n      \"1\": true\n    },\n    NodeList: document.getElementsByTagName(\"html\")\n  };\n  callback = function (k) {\n    if (seen[label]) {\n      delete seen[label];\n      assert.equal(k, \"0\", label + \" treated like array\");\n      return false;\n    }\n  };\n  for (i in seen) {\n    label = i;\n    jQuery.each(seen[i], callback);\n  }\n  seen = false;\n  jQuery.each({\n    length: 0\n  }, function () {\n    seen = true;\n  });\n  assert.ok(!seen, \"length: 0 plain object treated like array\");\n  seen = false;\n  jQuery.each(document.getElementsByTagName(\"asdf\"), function () {\n    seen = true;\n  });\n  assert.ok(!seen, \"empty NodeList treated like array\");\n  i = 0;\n  jQuery.each(document.styleSheets, function () {\n    i++;\n  });\n  assert.equal(i, document.styleSheets.length, \"Iteration over document.styleSheets\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.each/map(undefined/null,Function)","suites":["core"],"line":1209,"code":"QUnit.test(\"jQuery.each/map(undefined/null,Function)\", function (assert) {\n  assert.expect(1);\n  try {\n    jQuery.each(undefined, jQuery.noop);\n    jQuery.each(null, jQuery.noop);\n    jQuery.map(undefined, jQuery.noop);\n    jQuery.map(null, jQuery.noop);\n    assert.ok(true, \"jQuery.each/map( undefined/null, function() {} );\");\n  } catch (e) {\n    assert.ok(false, \"each/map must accept null and undefined values\");\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"JIT compilation does not interfere with length retrieval (gh-2145)","suites":["core"],"line":1221,"code":"QUnit.test(\"JIT compilation does not interfere with length retrieval (gh-2145)\", function (assert) {\n  assert.expect(4);\n  var i;\n\n  // Trigger JIT compilation of jQuery.each – and therefore isArraylike – in iOS.\n  // Convince JSC to use one of its optimizing compilers\n  // by providing code which can be LICM'd into nothing.\n  for (i = 0; i < 1000; i++) {\n    jQuery.each([]);\n  }\n  i = 0;\n  jQuery.each({\n    1: \"1\",\n    2: \"2\",\n    3: \"3\"\n  }, function (index) {\n    assert.equal(++i, index, \"Iteration over object with solely \" + \"numeric indices (gh-2145 JIT iOS 8 bug)\");\n  });\n  assert.equal(i, 3, \"Iteration over object with solely \" + \"numeric indices (gh-2145 JIT iOS 8 bug)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.makeArray","suites":["core"],"line":1241,"code":"QUnit.test(\"jQuery.makeArray\", function (assert) {\n  assert.expect(15);\n  assert.equal(jQuery.makeArray(jQuery(\"html>*\"))[0].nodeName.toUpperCase(), \"HEAD\", \"Pass makeArray a jQuery object\");\n  assert.equal(jQuery.makeArray(document.getElementsByName(\"PWD\")).slice(0, 1)[0].name, \"PWD\", \"Pass makeArray a nodelist\");\n  assert.equal(function () {\n    return jQuery.makeArray(arguments);\n  }(1, 2).join(\"\"), \"12\", \"Pass makeArray an arguments array\");\n  assert.equal(jQuery.makeArray([1, 2, 3]).join(\"\"), \"123\", \"Pass makeArray a real array\");\n  assert.equal(jQuery.makeArray().length, 0, \"Pass nothing to makeArray and expect an empty array\");\n  assert.equal(jQuery.makeArray(0)[0], 0, \"Pass makeArray a number\");\n  assert.equal(jQuery.makeArray(\"foo\")[0], \"foo\", \"Pass makeArray a string\");\n  assert.equal(jQuery.makeArray(true)[0].constructor, Boolean, \"Pass makeArray a boolean\");\n  assert.equal(jQuery.makeArray(document.createElement(\"div\"))[0].nodeName.toUpperCase(), \"DIV\", \"Pass makeArray a single node\");\n  assert.equal(jQuery.makeArray({\n    length: 2,\n    0: \"a\",\n    1: \"b\"\n  }).join(\"\"), \"ab\", \"Pass makeArray an array like map (with length)\");\n  assert.ok(!!jQuery.makeArray(document.documentElement.childNodes).slice(0, 1)[0].nodeName, \"Pass makeArray a childNodes array\");\n\n  // function, is tricky as it has length\n  assert.equal(jQuery.makeArray(function () {\n    return 1;\n  })[0](), 1, \"Pass makeArray a function\");\n\n  //window, also has length\n  assert.equal(jQuery.makeArray(window)[0], window, \"Pass makeArray the window\");\n  assert.equal(jQuery.makeArray(/a/)[0].constructor, RegExp, \"Pass makeArray a regex\");\n\n  // Some nodes inherit traits of nodelists\n  assert.ok(jQuery.makeArray(document.getElementById(\"form\")).length >= 13, \"Pass makeArray a form (treat as elements)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.inArray","suites":["core"],"line":1273,"code":"QUnit.test(\"jQuery.inArray\", function (assert) {\n  assert.expect(3);\n  assert.equal(jQuery.inArray(0, false), -1, \"Search in 'false' as array returns -1 and doesn't throw exception\");\n  assert.equal(jQuery.inArray(0, null), -1, \"Search in 'null' as array returns -1 and doesn't throw exception\");\n  assert.equal(jQuery.inArray(0, undefined), -1, \"Search in 'undefined' as array returns -1 and doesn't throw exception\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.isEmptyObject","suites":["core"],"line":1279,"code":"QUnit.test(\"jQuery.isEmptyObject\", function (assert) {\n  assert.expect(2);\n  assert.equal(true, jQuery.isEmptyObject({}), \"isEmptyObject on empty object literal\");\n  assert.equal(false, jQuery.isEmptyObject({\n    a: 1\n  }), \"isEmptyObject on non-empty object literal\");\n\n  // What about this ?\n  // equal(true, jQuery.isEmptyObject(null), \"isEmptyObject on null\" );\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.parseHTML","suites":["core"],"line":1290,"code":"QUnit.test(\"jQuery.parseHTML\", function (assert) {\n  assert.expect(23);\n  var html, nodes;\n  assert.deepEqual(jQuery.parseHTML(), [], \"Without arguments\");\n  assert.deepEqual(jQuery.parseHTML(undefined), [], \"Undefined\");\n  assert.deepEqual(jQuery.parseHTML(null), [], \"Null\");\n  assert.deepEqual(jQuery.parseHTML(false), [], \"Boolean false\");\n  assert.deepEqual(jQuery.parseHTML(0), [], \"Zero\");\n  assert.deepEqual(jQuery.parseHTML(true), [], \"Boolean true\");\n  assert.deepEqual(jQuery.parseHTML(42), [], \"Positive number\");\n  assert.deepEqual(jQuery.parseHTML(\"\"), [], \"Empty string\");\n  assert.throws(function () {\n    jQuery.parseHTML(\"<div></div>\", document.getElementById(\"form\"));\n  }, \"Passing an element as the context raises an exception (context should be a document)\");\n  nodes = jQuery.parseHTML(jQuery(\"body\")[0].innerHTML);\n  assert.ok(nodes.length > 4, \"Parse a large html string\");\n  assert.ok(Array.isArray(nodes), \"parseHTML returns an array rather than a nodelist\");\n  html = \"<script>undefined()</script>\";\n  assert.equal(jQuery.parseHTML(html).length, 0, \"Ignore scripts by default\");\n  assert.equal(jQuery.parseHTML(html, true)[0].nodeName.toLowerCase(), \"script\", \"Preserve scripts when requested\");\n  html += \"<div></div>\";\n  assert.equal(jQuery.parseHTML(html)[0].nodeName.toLowerCase(), \"div\", \"Preserve non-script nodes\");\n  assert.equal(jQuery.parseHTML(html, true)[0].nodeName.toLowerCase(), \"script\", \"Preserve script position\");\n  assert.equal(jQuery.parseHTML(\"text\")[0].nodeType, 3, \"Parsing text returns a text node\");\n  assert.equal(jQuery.parseHTML(\"\\t<div></div>\")[0].nodeValue, \"\\t\", \"Preserve leading whitespace\");\n  assert.equal(jQuery.parseHTML(\" <div></div> \")[0].nodeType, 3, \"Leading spaces are treated as text nodes (trac-11290)\");\n  html = jQuery.parseHTML(\"<div>test div</div>\");\n  assert.equal(html[0].parentNode.nodeType, 11, \"parentNode should be documentFragment\");\n  assert.equal(html[0].innerHTML, \"test div\", \"Content should be preserved\");\n  assert.equal(jQuery.parseHTML(\"<span><span>\").length, 1, \"Incorrect html-strings should not break anything\");\n  assert.equal(jQuery.parseHTML(\"<td><td>\")[1].parentNode.nodeType, 11, \"parentNode should be documentFragment for wrapMap (variable in manipulation module) elements too\");\n  assert.ok(jQuery.parseHTML(\"<#if><tr><p>This is a test.</p></tr><#/if>\") || true, \"Garbage input should not cause error\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.parseHTML(<a href>) - gh-2965","suites":["core"],"line":1323,"code":"QUnit.test(\"jQuery.parseHTML(<a href>) - gh-2965\", function (assert) {\n  assert.expect(1);\n  var html = \"<a href='example.html'></a>\",\n    href = jQuery.parseHTML(html)[0].href;\n  assert.ok(/\\/example\\.html$/.test(href), \"href is not lost after parsing anchor\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.parseHTML","suites":["core"],"line":1329,"code":"QUnit.test(\"jQuery.parseHTML\", function (assert) {\n  var done = assert.async();\n  assert.expect(1);\n  Globals.register(\"parseHTMLError\");\n  jQuery.globalEval(\"parseHTMLError = false;\");\n  jQuery.parseHTML(\"<img src=x onerror='parseHTMLError = true'>\");\n  window.setTimeout(function () {\n    assert.equal(window.parseHTMLError, false, \"onerror eventhandler has not been called.\");\n    done();\n  }, 2000);\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.parseXML","suites":["core"],"line":1340,"code":"QUnit.test(\"jQuery.parseXML\", function (assert) {\n  assert.expect(8);\n  var xml, tmp;\n  try {\n    xml = jQuery.parseXML(\"<p>A <b>well-formed</b> xml string</p>\");\n    tmp = xml.getElementsByTagName(\"p\")[0];\n    assert.ok(!!tmp, \"<p> present in document\");\n    tmp = tmp.getElementsByTagName(\"b\")[0];\n    assert.ok(!!tmp, \"<b> present in document\");\n    assert.strictEqual(tmp.childNodes[0].nodeValue, \"well-formed\", \"<b> text is as expected\");\n  } catch (e) {\n    assert.strictEqual(e, undefined, \"unexpected error\");\n  }\n  try {\n    xml = jQuery.parseXML(\"<p>Not a <<b>well-formed</b> xml string</p>\");\n    assert.ok(false, \"invalid XML not detected\");\n  } catch (e) {\n    assert.ok(e.message.indexOf(\"Invalid XML:\") === 0, \"invalid XML detected\");\n  }\n  try {\n    xml = jQuery.parseXML(\"\");\n    assert.strictEqual(xml, null, \"empty string => null document\");\n    xml = jQuery.parseXML();\n    assert.strictEqual(xml, null, \"undefined string => null document\");\n    xml = jQuery.parseXML(null);\n    assert.strictEqual(xml, null, \"null string => null document\");\n    xml = jQuery.parseXML(true);\n    assert.strictEqual(xml, null, \"non-string => null document\");\n  } catch (e) {\n    assert.ok(false, \"empty input throws exception\");\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"Iterability of jQuery objects (gh-1693)","suites":["core"],"line":1402,"code":"QUnit.test(\"Iterability of jQuery objects (gh-1693)\", function (assert) {\n  assert.expect(1);\n  var i, elem, result;\n  if (typeof Symbol === \"function\") {\n    elem = jQuery(\"<div></div><span></span><a></a>\");\n    result = \"\";\n    try {\n      eval(\"for ( i of elem ) { result += i.nodeName; }\");\n    } catch (e) {}\n    assert.equal(result, \"DIVSPANA\", \"for-of works on jQuery objects\");\n  } else {\n    assert.ok(true, \"The browser doesn't support Symbols\");\n  }\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.contains","suites":["core"],"line":1446,"code":"QUnit.test(\"jQuery.contains\", function (assert) {\n  assert.expect(16);\n  var container = document.getElementById(\"nonnodes\"),\n    element = container.firstChild,\n    text = element.nextSibling,\n    nonContained = container.nextSibling,\n    detached = document.createElement(\"a\");\n  assert.ok(element && element.nodeType === 1, \"preliminary: found element\");\n  assert.ok(text && text.nodeType === 3, \"preliminary: found text\");\n  assert.ok(nonContained, \"preliminary: found non-descendant\");\n  assert.ok(jQuery.contains(container, element), \"child\");\n  assert.ok(jQuery.contains(container.parentNode, element), \"grandchild\");\n  assert.ok(jQuery.contains(container, text), \"text child\");\n  assert.ok(jQuery.contains(container.parentNode, text), \"text grandchild\");\n  assert.ok(!jQuery.contains(container, container), \"self\");\n  assert.ok(!jQuery.contains(element, container), \"parent\");\n  assert.ok(!jQuery.contains(container, nonContained), \"non-descendant\");\n  assert.ok(!jQuery.contains(container, document), \"document\");\n  assert.ok(!jQuery.contains(container, document.documentElement), \"documentElement (negative)\");\n  assert.ok(!jQuery.contains(container, null), \"Passing null does not throw an error\");\n  assert.ok(jQuery.contains(document, document.documentElement), \"documentElement (positive)\");\n  assert.ok(jQuery.contains(document, element), \"document container (positive)\");\n  assert.ok(!jQuery.contains(document, detached), \"document container (negative)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"jQuery.contains in SVG (jQuery trac-10832)","suites":["core"],"line":1470,"code":"QUnit.test(\"jQuery.contains in SVG (jQuery trac-10832)\", function (assert) {\n  assert.expect(4);\n  var svg = jQuery(\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='1' width='1'>\" + \"<g><circle cx='1' cy='1' r='1' /></g>\" + \"</svg>\").appendTo(\"#qunit-fixture\")[0];\n  assert.ok(jQuery.contains(svg, svg.firstChild), \"root child\");\n  assert.ok(jQuery.contains(svg.firstChild, svg.firstChild.firstChild), \"element child\");\n  assert.ok(jQuery.contains(svg, svg.firstChild.firstChild), \"root granchild\");\n  assert.ok(!jQuery.contains(svg.firstChild.firstChild, svg.firstChild), \"parent (negative)\");\n});","file":"unit/core.js","skipped":false,"dir":"test"},{"name":"css(String|Hash)","suites":["css"],"line":5,"code":"  QUnit.test(\"css(String|Hash)\", function (assert) {\n    assert.expect(42);\n    assert.equal(jQuery(\"#qunit-fixture\").css(\"display\"), \"block\", \"Check for css property \\\"display\\\"\");\n    var $child, div, div2, width, height, child, prctval, checkval, old;\n    $child = jQuery(\"#nothiddendivchild\").css({\n      \"width\": \"20%\",\n      \"height\": \"20%\"\n    });\n    assert.notEqual($child.css(\"width\"), \"20px\", \"Retrieving a width percentage on the child of a hidden div returns percentage\");\n    assert.notEqual($child.css(\"height\"), \"20px\", \"Retrieving a height percentage on the child of a hidden div returns percentage\");\n    div = jQuery(\"<div></div>\");\n\n    // These should be \"auto\" (or some better value)\n    // temporarily provide \"0px\" for backwards compat\n    assert.equal(div.css(\"width\"), \"0px\", \"Width on disconnected node.\");\n    assert.equal(div.css(\"height\"), \"0px\", \"Height on disconnected node.\");\n    div.css({\n      \"width\": 4,\n      \"height\": 4\n    });\n    assert.equal(div.css(\"width\"), \"4px\", \"Width on disconnected node.\");\n    assert.equal(div.css(\"height\"), \"4px\", \"Height on disconnected node.\");\n    div2 = jQuery(\"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'></textarea><div style='height:20px;'></div></div>\").appendTo(\"body\");\n    assert.equal(div2.find(\"input\").css(\"height\"), \"20px\", \"Height on hidden input.\");\n    assert.equal(div2.find(\"textarea\").css(\"height\"), \"20px\", \"Height on hidden textarea.\");\n    assert.equal(div2.find(\"div\").css(\"height\"), \"20px\", \"Height on hidden div.\");\n    div2.remove();\n\n    // handle negative numbers by setting to zero trac-11604\n    jQuery(\"#nothiddendiv\").css({\n      \"width\": 1,\n      \"height\": 1\n    });\n    width = parseFloat(jQuery(\"#nothiddendiv\").css(\"width\"));\n    height = parseFloat(jQuery(\"#nothiddendiv\").css(\"height\"));\n    jQuery(\"#nothiddendiv\").css({\n      \"overflow\": \"hidden\",\n      \"width\": -1,\n      \"height\": -1\n    });\n    assert.equal(parseFloat(jQuery(\"#nothiddendiv\").css(\"width\")), 0, \"Test negative width set to 0\");\n    assert.equal(parseFloat(jQuery(\"#nothiddendiv\").css(\"height\")), 0, \"Test negative height set to 0\");\n    assert.equal(jQuery(\"<div style='display: none;'></div>\").css(\"display\"), \"none\", \"Styles on disconnected nodes\");\n    jQuery(\"#floatTest\").css({\n      \"float\": \"right\"\n    });\n    assert.equal(jQuery(\"#floatTest\").css(\"float\"), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\");\n    jQuery(\"#floatTest\").css({\n      \"font-size\": \"30px\"\n    });\n    assert.equal(jQuery(\"#floatTest\").css(\"font-size\"), \"30px\", \"Modified CSS font-size: Assert font-size is 30px\");\n    jQuery.each(\"0,0.25,0.5,0.75,1\".split(\",\"), function (i, n) {\n      jQuery(\"#foo\").css({\n        \"opacity\": n\n      });\n      assert.equal(jQuery(\"#foo\").css(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a String\");\n      jQuery(\"#foo\").css({\n        \"opacity\": parseFloat(n)\n      });\n      assert.equal(jQuery(\"#foo\").css(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a Number\");\n    });\n    jQuery(\"#foo\").css({\n      \"opacity\": \"\"\n    });\n    assert.equal(jQuery(\"#foo\").css(\"opacity\"), \"1\", \"Assert opacity is 1 when set to an empty String\");\n    assert.equal(jQuery(\"#empty\").css(\"opacity\"), \"0\", \"Assert opacity is accessible\");\n    jQuery(\"#empty\").css({\n      \"opacity\": \"1\"\n    });\n    assert.equal(jQuery(\"#empty\").css(\"opacity\"), \"1\", \"Assert opacity is taken from style attribute when set\");\n    div = jQuery(\"#nothiddendiv\");\n    child = jQuery(\"#nothiddendivchild\");\n    assert.equal(parseInt(div.css(\"fontSize\"), 10), 16, \"Verify fontSize px set.\");\n    assert.equal(parseInt(div.css(\"font-size\"), 10), 16, \"Verify fontSize px set.\");\n    assert.equal(parseInt(child.css(\"fontSize\"), 10), 16, \"Verify fontSize px set.\");\n    assert.equal(parseInt(child.css(\"font-size\"), 10), 16, \"Verify fontSize px set.\");\n    child.css(\"height\", \"100%\");\n    assert.equal(child[0].style.height, \"100%\", \"Make sure the height is being set correctly.\");\n    child.attr(\"class\", \"em\");\n    assert.equal(parseInt(child.css(\"fontSize\"), 10), 32, \"Verify fontSize em set.\");\n\n    // Have to verify this as the result depends upon the browser's CSS\n    // support for font-size percentages\n    child.attr(\"class\", \"prct\");\n    prctval = parseInt(child.css(\"fontSize\"), 10);\n    checkval = 0;\n    if (prctval === 16 || prctval === 24) {\n      checkval = prctval;\n    }\n    assert.equal(prctval, checkval, \"Verify fontSize % set.\");\n    assert.equal(typeof child.css(\"width\"), \"string\", \"Make sure that a string width is returned from css('width').\");\n    old = child[0].style.height;\n\n    // Test NaN\n    child.css(\"height\", parseFloat(\"zoo\"));\n    assert.equal(child[0].style.height, old, \"Make sure height isn't changed on NaN.\");\n\n    // Test null\n    child.css(\"height\", null);\n    assert.equal(child[0].style.height, old, \"Make sure height isn't changed on null.\");\n    old = child[0].style.fontSize;\n\n    // Test NaN\n    child.css(\"font-size\", parseFloat(\"zoo\"));\n    assert.equal(child[0].style.fontSize, old, \"Make sure font-size isn't changed on NaN.\");\n\n    // Test null\n    child.css(\"font-size\", null);\n    assert.equal(child[0].style.fontSize, old, \"Make sure font-size isn't changed on null.\");\n    assert.strictEqual(child.css(\"x-fake\"), undefined, \"Make sure undefined is returned from css(nonexistent).\");\n    div = jQuery(\"<div></div>\").css({\n      position: \"absolute\",\n      \"z-index\": 1000\n    }).appendTo(\"#qunit-fixture\");\n    assert.strictEqual(div.css(\"z-index\"), \"1000\", \"Make sure that a string z-index is returned from css('z-index') (trac-14432).\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css() explicit and relative values","suites":["css"],"line":121,"code":"  QUnit.test(\"css() explicit and relative values\", function (assert) {\n    assert.expect(29);\n    var $elem = jQuery(\"#nothiddendiv\");\n    $elem.css({\n      \"width\": 1,\n      \"height\": 1,\n      \"paddingLeft\": \"1px\",\n      \"opacity\": 1\n    });\n    assert.equal($elem.css(\"width\"), \"1px\", \"Initial css set or width/height works (hash)\");\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"Initial css set of paddingLeft works (hash)\");\n    assert.equal($elem.css(\"opacity\"), \"1\", \"Initial css set of opacity works (hash)\");\n    $elem.css({\n      width: \"+=9\"\n    });\n    assert.equal($elem.css(\"width\"), \"10px\", \"'+=9' on width (hash)\");\n    $elem.css({\n      \"width\": \"-=9\"\n    });\n    assert.equal($elem.css(\"width\"), \"1px\", \"'-=9' on width (hash)\");\n    $elem.css({\n      \"width\": \"+=9px\"\n    });\n    assert.equal($elem.css(\"width\"), \"10px\", \"'+=9px' on width (hash)\");\n    $elem.css({\n      \"width\": \"-=9px\"\n    });\n    assert.equal($elem.css(\"width\"), \"1px\", \"'-=9px' on width (hash)\");\n    $elem.css(\"width\", \"+=9\");\n    assert.equal($elem.css(\"width\"), \"10px\", \"'+=9' on width (params)\");\n    $elem.css(\"width\", \"-=9\");\n    assert.equal($elem.css(\"width\"), \"1px\", \"'-=9' on width (params)\");\n    $elem.css(\"width\", \"+=9px\");\n    assert.equal($elem.css(\"width\"), \"10px\", \"'+=9px' on width (params)\");\n    $elem.css(\"width\", \"-=9px\");\n    assert.equal($elem.css(\"width\"), \"1px\", \"'-=9px' on width (params)\");\n    $elem.css(\"width\", \"-=-9px\");\n    assert.equal($elem.css(\"width\"), \"10px\", \"'-=-9px' on width (params)\");\n    $elem.css(\"width\", \"+=-9px\");\n    assert.equal($elem.css(\"width\"), \"1px\", \"'+=-9px' on width (params)\");\n    $elem.css({\n      \"paddingLeft\": \"+=4\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4' on paddingLeft (hash)\");\n    $elem.css({\n      \"paddingLeft\": \"-=4\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4' on paddingLeft (hash)\");\n    $elem.css({\n      \"paddingLeft\": \"+=4px\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4px' on paddingLeft (hash)\");\n    $elem.css({\n      \"paddingLeft\": \"-=4px\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4px' on paddingLeft (hash)\");\n    $elem.css({\n      \"padding-left\": \"+=4\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4' on padding-left (hash)\");\n    $elem.css({\n      \"padding-left\": \"-=4\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4' on padding-left (hash)\");\n    $elem.css({\n      \"padding-left\": \"+=4px\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4px' on padding-left (hash)\");\n    $elem.css({\n      \"padding-left\": \"-=4px\"\n    });\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4px' on padding-left (hash)\");\n    $elem.css(\"paddingLeft\", \"+=4\");\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4' on paddingLeft (params)\");\n    $elem.css(\"paddingLeft\", \"-=4\");\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4' on paddingLeft (params)\");\n    $elem.css(\"padding-left\", \"+=4px\");\n    assert.equal($elem.css(\"paddingLeft\"), \"5px\", \"'+=4px' on padding-left (params)\");\n    $elem.css(\"padding-left\", \"-=4px\");\n    assert.equal($elem.css(\"paddingLeft\"), \"1px\", \"'-=4px' on padding-left (params)\");\n    $elem.css({\n      \"opacity\": \"-=0.5\"\n    });\n    assert.equal($elem.css(\"opacity\"), \"0.5\", \"'-=0.5' on opacity (hash)\");\n    $elem.css({\n      \"opacity\": \"+=0.5\"\n    });\n    assert.equal($elem.css(\"opacity\"), \"1\", \"'+=0.5' on opacity (hash)\");\n    $elem.css(\"opacity\", \"-=0.5\");\n    assert.equal($elem.css(\"opacity\"), \"0.5\", \"'-=0.5' on opacity (params)\");\n    $elem.css(\"opacity\", \"+=0.5\");\n    assert.equal($elem.css(\"opacity\"), \"1\", \"'+=0.5' on opacity (params)\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css() non-px relative values (gh-1711)","suites":["css"],"line":214,"code":"  QUnit.test(\"css() non-px relative values (gh-1711)\", function (assert) {\n    assert.expect(17);\n    var cssCurrent,\n      units = {},\n      $child = jQuery(\"#nothiddendivchild\"),\n      add = function (prop, val, unit) {\n        var difference,\n          adjustment = (val < 0 ? \"-=\" : \"+=\") + Math.abs(val) + unit,\n          message = prop + \": \" + adjustment,\n          cssOld = cssCurrent,\n          expected = cssOld + val * units[prop][unit];\n\n        // Apply change\n        $child.css(prop, adjustment);\n        cssCurrent = parseFloat($child.css(prop));\n        message += \" (actual \" + round(cssCurrent, 2) + \"px, expected \" + round(expected, 2) + \"px)\";\n\n        // Require a difference of no more than one pixel\n        difference = Math.abs(cssCurrent - expected);\n        assert.ok(difference <= 1, message);\n      },\n      getUnits = function (prop) {\n        units[prop] = {\n          \"px\": 1,\n          \"em\": parseFloat($child.css(prop, \"100em\").css(prop)) / 100,\n          \"pt\": parseFloat($child.css(prop, \"100pt\").css(prop)) / 100,\n          \"pc\": parseFloat($child.css(prop, \"100pc\").css(prop)) / 100,\n          \"cm\": parseFloat($child.css(prop, \"100cm\").css(prop)) / 100,\n          \"mm\": parseFloat($child.css(prop, \"100mm\").css(prop)) / 100,\n          \"%\": parseFloat($child.css(prop, \"500%\").css(prop)) / 500\n        };\n      },\n      round = function (num, fractionDigits) {\n        var base = Math.pow(10, fractionDigits);\n        return Math.round(num * base) / base;\n      };\n    jQuery(\"#nothiddendiv\").css({\n      height: 1,\n      padding: 0,\n      width: 400\n    });\n    $child.css({\n      height: 1,\n      padding: 0\n    });\n    getUnits(\"width\");\n    cssCurrent = parseFloat($child.css(\"width\", \"50%\").css(\"width\"));\n    add(\"width\", 25, \"%\");\n    add(\"width\", -50, \"%\");\n    add(\"width\", 10, \"em\");\n    add(\"width\", 10, \"pt\");\n    add(\"width\", -2.3, \"pt\");\n    add(\"width\", 5, \"pc\");\n    add(\"width\", -5, \"em\");\n    add(\"width\", +2, \"cm\");\n    add(\"width\", -15, \"mm\");\n    add(\"width\", 21, \"px\");\n    getUnits(\"lineHeight\");\n    cssCurrent = parseFloat($child.css(\"lineHeight\", \"1em\").css(\"lineHeight\"));\n    add(\"lineHeight\", 50, \"%\");\n    add(\"lineHeight\", 2, \"em\");\n    add(\"lineHeight\", -10, \"px\");\n    add(\"lineHeight\", 20, \"pt\");\n    add(\"lineHeight\", 30, \"pc\");\n    add(\"lineHeight\", 1, \"cm\");\n    add(\"lineHeight\", -44, \"mm\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css() mismatched relative values with bounded styles (gh-2144)","suites":["css"],"line":281,"code":"  QUnit.test(\"css() mismatched relative values with bounded styles (gh-2144)\", function (assert) {\n    assert.expect(1);\n    var right,\n      $container = jQuery(\"<div></div>\").css({\n        position: \"absolute\",\n        width: \"400px\",\n        fontSize: \"4px\"\n      }).appendTo(\"#qunit-fixture\"),\n      $el = jQuery(\"<div></div>\").css({\n        position: \"absolute\",\n        left: \"50%\",\n        right: \"50%\"\n      }).appendTo($container);\n    $el.css(\"right\", \"-=25em\");\n    assert.equal(Math.round(parseFloat($el.css(\"right\"))), 100, \"Constraints do not interfere with unit conversion\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(String, Object)","suites":["css"],"line":297,"code":"  QUnit.test(\"css(String, Object)\", function (assert) {\n    assert.expect(19);\n    var j, div, display, ret, success;\n    jQuery(\"#floatTest\").css(\"float\", \"left\");\n    assert.equal(jQuery(\"#floatTest\").css(\"float\"), \"left\", \"Modified CSS float using \\\"float\\\": Assert float is left\");\n    jQuery(\"#floatTest\").css(\"font-size\", \"20px\");\n    assert.equal(jQuery(\"#floatTest\").css(\"font-size\"), \"20px\", \"Modified CSS font-size: Assert font-size is 20px\");\n    jQuery.each(\"0,0.25,0.5,0.75,1\".split(\",\"), function (i, n) {\n      jQuery(\"#foo\").css(\"opacity\", n);\n      assert.equal(jQuery(\"#foo\").css(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a String\");\n      jQuery(\"#foo\").css(\"opacity\", parseFloat(n));\n      assert.equal(jQuery(\"#foo\").css(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a Number\");\n    });\n    jQuery(\"#foo\").css(\"opacity\", \"\");\n    assert.equal(jQuery(\"#foo\").css(\"opacity\"), \"1\", \"Assert opacity is 1 when set to an empty String\");\n\n    // using contents will get comments regular, text, and comment nodes\n    j = jQuery(\"#nonnodes\").contents();\n    j.css(\"overflow\", \"visible\");\n    assert.equal(j.css(\"overflow\"), \"visible\", \"Check node,textnode,comment css works\");\n    assert.equal(jQuery(\"#t2037 .hidden\").css(\"display\"), \"none\", \"Make sure browser thinks it is hidden\");\n    div = jQuery(\"#nothiddendiv\");\n    display = div.css(\"display\");\n    ret = div.css(\"display\", undefined);\n    assert.equal(ret, div, \"Make sure setting undefined returns the original set.\");\n    assert.equal(div.css(\"display\"), display, \"Make sure that the display wasn't changed.\");\n    success = true;\n    try {\n      jQuery(\"#foo\").css(\"backgroundColor\", \"rgba(0, 0, 0, 0.1)\");\n    } catch (e) {\n      success = false;\n    }\n    assert.ok(success, \"Setting RGBA values does not throw Error (trac-5509)\");\n    jQuery(\"#foo\").css(\"font\", \"7px/21px sans-serif\");\n    assert.strictEqual(jQuery(\"#foo\").css(\"line-height\"), \"21px\", \"Set font shorthand property (trac-14759)\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(String, Object) with negative values","suites":["css"],"line":333,"code":"  QUnit.test(\"css(String, Object) with negative values\", function (assert) {\n    assert.expect(4);\n    jQuery(\"#nothiddendiv\").css(\"margin-top\", \"-10px\");\n    jQuery(\"#nothiddendiv\").css(\"margin-left\", \"-10px\");\n    assert.equal(jQuery(\"#nothiddendiv\").css(\"margin-top\"), \"-10px\", \"Ensure negative top margins work.\");\n    assert.equal(jQuery(\"#nothiddendiv\").css(\"margin-left\"), \"-10px\", \"Ensure negative left margins work.\");\n    jQuery(\"#nothiddendiv\").css(\"position\", \"absolute\");\n    jQuery(\"#nothiddendiv\").css(\"top\", \"-20px\");\n    jQuery(\"#nothiddendiv\").css(\"left\", \"-20px\");\n    assert.equal(jQuery(\"#nothiddendiv\").css(\"top\"), \"-20px\", \"Ensure negative top values work.\");\n    assert.equal(jQuery(\"#nothiddendiv\").css(\"left\"), \"-20px\", \"Ensure negative left values work.\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(Array)","suites":["css"],"line":345,"code":"  QUnit.test(\"css(Array)\", function (assert) {\n    assert.expect(2);\n    var expectedMany = {\n        \"overflow\": \"visible\",\n        \"width\": \"16px\"\n      },\n      expectedSingle = {\n        \"width\": \"16px\"\n      },\n      elem = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    assert.deepEqual(elem.css(expectedMany).css([\"overflow\", \"width\"]), expectedMany, \"Getting multiple element array\");\n    assert.deepEqual(elem.css(expectedSingle).css([\"width\"]), expectedSingle, \"Getting single element array\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(String, Function)","suites":["css"],"line":358,"code":"  QUnit.test(\"css(String, Function)\", function (assert) {\n    assert.expect(3);\n    var index,\n      sizes = [\"10px\", \"20px\", \"30px\"];\n    jQuery(\"<div id='cssFunctionTest'><div class='cssFunction'></div>\" + \"<div class='cssFunction'></div>\" + \"<div class='cssFunction'></div></div>\").appendTo(\"body\");\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css(\"font-size\", function () {\n      var size = sizes[index];\n      index++;\n      return size;\n    });\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").each(function () {\n      var computedSize = jQuery(this).css(\"font-size\"),\n        expectedSize = sizes[index];\n      assert.equal(computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize);\n      index++;\n    });\n    jQuery(\"#cssFunctionTest\").remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(String, Function) with incoming value","suites":["css"],"line":378,"code":"  QUnit.test(\"css(String, Function) with incoming value\", function (assert) {\n    assert.expect(3);\n    var index,\n      sizes = [\"10px\", \"20px\", \"30px\"];\n    jQuery(\"<div id='cssFunctionTest'><div class='cssFunction'></div>\" + \"<div class='cssFunction'></div>\" + \"<div class='cssFunction'></div></div>\").appendTo(\"body\");\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css(\"font-size\", function () {\n      var size = sizes[index];\n      index++;\n      return size;\n    });\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css(\"font-size\", function (i, computedSize) {\n      var expectedSize = sizes[index];\n      assert.equal(computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize);\n      index++;\n      return computedSize;\n    });\n    jQuery(\"#cssFunctionTest\").remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(Object) where values are Functions","suites":["css"],"line":398,"code":"  QUnit.test(\"css(Object) where values are Functions\", function (assert) {\n    assert.expect(3);\n    var index,\n      sizes = [\"10px\", \"20px\", \"30px\"];\n    jQuery(\"<div id='cssFunctionTest'><div class='cssFunction'></div>\" + \"<div class='cssFunction'></div>\" + \"<div class='cssFunction'></div></div>\").appendTo(\"body\");\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css({\n      \"fontSize\": function () {\n        var size = sizes[index];\n        index++;\n        return size;\n      }\n    });\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").each(function () {\n      var computedSize = jQuery(this).css(\"font-size\"),\n        expectedSize = sizes[index];\n      assert.equal(computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize);\n      index++;\n    });\n    jQuery(\"#cssFunctionTest\").remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css(Object) where values are Functions with incoming values","suites":["css"],"line":420,"code":"  QUnit.test(\"css(Object) where values are Functions with incoming values\", function (assert) {\n    assert.expect(3);\n    var index,\n      sizes = [\"10px\", \"20px\", \"30px\"];\n    jQuery(\"<div id='cssFunctionTest'><div class='cssFunction'></div>\" + \"<div class='cssFunction'></div>\" + \"<div class='cssFunction'></div></div>\").appendTo(\"body\");\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css({\n      \"fontSize\": function () {\n        var size = sizes[index];\n        index++;\n        return size;\n      }\n    });\n    index = 0;\n    jQuery(\"#cssFunctionTest div\").css({\n      \"font-size\": function (i, computedSize) {\n        var expectedSize = sizes[index];\n        assert.equal(computedSize, expectedSize, \"Div #\" + index + \" should be \" + expectedSize);\n        index++;\n        return computedSize;\n      }\n    });\n    jQuery(\"#cssFunctionTest\").remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show()","suites":["css"],"line":444,"code":"  QUnit.test(\"show()\", function (assert) {\n    assert.expect(18);\n    var hiddendiv, div, pass, test;\n    hiddendiv = jQuery(\"div.hidden\");\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"none\", \"hiddendiv is display: none\");\n    hiddendiv.css(\"display\", \"block\");\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"block\", \"hiddendiv is display: block\");\n    hiddendiv.show();\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"block\", \"hiddendiv is display: block\");\n    hiddendiv.css(\"display\", \"\");\n    pass = true;\n    div = jQuery(\"#qunit-fixture div\");\n    div.show().each(function () {\n      if (this.style.display === \"none\") {\n        pass = false;\n      }\n    });\n    assert.ok(pass, \"Show\");\n    jQuery(\"<div id='show-tests'>\" + \"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" + \"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" + \"<ul><li></li></ul></div>\").appendTo(\"#qunit-fixture\").find(\"*\").css(\"display\", \"none\");\n    test = {\n      \"div\": \"block\",\n      \"p\": \"block\",\n      \"a\": \"inline\",\n      \"code\": \"inline\",\n      \"pre\": \"block\",\n      \"span\": \"inline\",\n      \"table\": \"table\",\n      \"thead\": \"table-header-group\",\n      \"tbody\": \"table-row-group\",\n      \"tr\": \"table-row\",\n      \"th\": \"table-cell\",\n      \"td\": \"table-cell\",\n      \"ul\": \"block\",\n      \"li\": \"list-item\"\n    };\n    jQuery.each(test, function (selector, expected) {\n      var elem = jQuery(selector, \"#show-tests\").show();\n      assert.equal(elem.css(\"display\"), expected, \"Show using correct display type for \" + selector);\n    });\n\n    // Make sure that showing or hiding a text node doesn't cause an error\n    jQuery(\"<div>test</div> text <span>test</span>\").show().remove();\n    jQuery(\"<div>test</div> text <span>test</span>\").hide().remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide detached nodes","suites":["css"],"line":488,"code":"  QUnit.test(\"show/hide detached nodes\", function (assert) {\n    assert.expect(19);\n    var div, span, tr;\n    div = jQuery(\"<div>\").hide();\n    assert.equal(div.css(\"display\"), \"none\", \"hide() updates inline style of a detached div\");\n    div.appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"A hidden-while-detached div is hidden after attachment\");\n    div.show();\n    assert.equal(div.css(\"display\"), \"block\", \"A hidden-while-detached div can be shown after attachment\");\n    div = jQuery(\"<div class='hidden'>\");\n    div.show().appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"A shown-while-detached div can be hidden by the CSS cascade\");\n    div = jQuery(\"<div><div class='hidden'></div></div>\").children(\"div\");\n    div.show().appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"A shown-while-detached div inside a visible div can be hidden by the CSS cascade\");\n    span = jQuery(\"<span class='hidden'></span>\");\n    span.show().appendTo(\"#qunit-fixture\");\n    assert.equal(span.css(\"display\"), \"none\", \"A shown-while-detached span can be hidden by the CSS cascade\");\n    div = jQuery(\"div.hidden\");\n    div.detach().show();\n    assert.ok(!div[0].style.display, \"show() does not update inline style of a cascade-hidden-before-detach div\");\n    div.appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"A shown-while-detached cascade-hidden div is hidden after attachment\");\n    div.remove();\n    span = jQuery(\"<span class='hidden'></span>\");\n    span.appendTo(\"#qunit-fixture\").detach().show().appendTo(\"#qunit-fixture\");\n    assert.equal(span.css(\"display\"), \"none\", \"A shown-while-detached cascade-hidden span is hidden after attachment\");\n    span.remove();\n    div = jQuery(document.createElement(\"div\"));\n    div.show().appendTo(\"#qunit-fixture\");\n    assert.ok(!div[0].style.display, \"A shown-while-detached div has no inline style\");\n    assert.equal(div.css(\"display\"), \"block\", \"A shown-while-detached div has default display after attachment\");\n    div.remove();\n    div = jQuery(\"<div style='display: none'>\");\n    div.show();\n    assert.equal(div[0].style.display, \"\", \"show() updates inline style of a detached inline-hidden div\");\n    div.appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"block\", \"A shown-while-detached inline-hidden div has default display after attachment\");\n    div = jQuery(\"<div><div style='display: none'></div></div>\").children(\"div\");\n    div.show().appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"block\", \"A shown-while-detached inline-hidden div inside a visible div has default display \" + \"after attachment\");\n    span = jQuery(\"<span style='display: none'></span>\");\n    span.show();\n    assert.equal(span[0].style.display, \"\", \"show() updates inline style of a detached inline-hidden span\");\n    span.appendTo(\"#qunit-fixture\");\n    assert.equal(span.css(\"display\"), \"inline\", \"A shown-while-detached inline-hidden span has default display after attachment\");\n    div = jQuery(\"<div style='display: inline'></div>\");\n    div.show().appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"inline\", \"show() does not update inline style of a detached inline-visible div\");\n    div.remove();\n    tr = jQuery(\"<tr></tr>\");\n    jQuery(\"#table\").append(tr);\n    tr.detach().hide().show();\n    assert.ok(!tr[0].style.display, \"Not-hidden detached tr elements have no inline style\");\n    tr.remove();\n    span = jQuery(\"<span></span>\").hide().show();\n    assert.ok(!span[0].style.display, \"Not-hidden detached span elements have no inline style\");\n    span.remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"hide hidden elements (bug trac-7141)","suites":["css"],"line":582,"code":"  QUnit.test(\"hide hidden elements (bug trac-7141)\", function (assert) {\n    assert.expect(3);\n    var div = jQuery(\"<div style='display:none'></div>\").appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"Element is hidden by default\");\n    div.hide();\n    assert.ok(!jQuery._data(div, \"olddisplay\"), \"olddisplay is undefined after hiding an already-hidden element\");\n    div.show();\n    assert.equal(div.css(\"display\"), \"block\", \"Show a double-hidden element\");\n    div.remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show() after hide() should always set display to initial value (trac-14750)","suites":["css"],"line":592,"code":"  QUnit.test(\"show() after hide() should always set display to initial value (trac-14750)\", function (assert) {\n    assert.expect(1);\n    var div = jQuery(\"<div></div>\"),\n      fixture = jQuery(\"#qunit-fixture\");\n    fixture.append(div);\n    div.css(\"display\", \"inline\").hide().show().css(\"display\", \"list-item\").hide().show();\n    assert.equal(div.css(\"display\"), \"list-item\", \"should get last set display value\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, default display","suites":["css"],"line":600,"code":"  QUnit.test(\"show/hide 3.0, default display\", function (assert) {\n    assert.expect(36);\n    var i,\n      $elems = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").html(\"<div data-expected-display='block'></div>\" + \"<span data-expected-display='inline'></span>\" + \"<ul><li data-expected-display='list-item'></li></ul>\").find(\"[data-expected-display]\");\n    $elems.each(function () {\n      var $elem = jQuery(this),\n        name = this.nodeName,\n        expected = this.getAttribute(\"data-expected-display\"),\n        sequence = [];\n      if (this.className) {\n        name += \".\" + this.className;\n      }\n      if (this.getAttribute(\"style\")) {\n        name += \"[style='\" + this.getAttribute(\"style\") + \"']\";\n      }\n      name += \" \";\n      for (i = 0; i < 3; i++) {\n        sequence.push(\".show()\");\n        $elem.show();\n        assert.equal($elem.css(\"display\"), expected, name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"\", name + sequence.join(\"\") + \" inline\");\n        sequence.push(\".hide()\");\n        $elem.hide();\n        assert.equal($elem.css(\"display\"), \"none\", name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"none\", name + sequence.join(\"\") + \" inline\");\n      }\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, default body display","suites":["css"],"line":628,"code":"  QUnit.test(\"show/hide 3.0, default body display\", function (assert) {\n    assert.expect(2);\n    var hideBody = supportjQuery(\"<style>body{display:none}</style>\").appendTo(document.head),\n      body = jQuery(document.body);\n    assert.equal(body.css(\"display\"), \"none\", \"Correct initial display\");\n    body.show();\n    assert.equal(body.css(\"display\"), \"block\", \"Correct display after .show()\");\n    hideBody.remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, cascade display","suites":["css"],"line":637,"code":"  QUnit.test(\"show/hide 3.0, cascade display\", function (assert) {\n    assert.expect(36);\n    var i,\n      $elems = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").html(\"<span class='block'></span><div class='inline'></div><div class='list-item'></div>\").children();\n    $elems.each(function () {\n      var $elem = jQuery(this),\n        name = this.nodeName,\n        sequence = [];\n      if (this.className) {\n        name += \".\" + this.className;\n      }\n      if (this.getAttribute(\"style\")) {\n        name += \"[style='\" + this.getAttribute(\"style\") + \"']\";\n      }\n      name += \" \";\n      for (i = 0; i < 3; i++) {\n        sequence.push(\".show()\");\n        $elem.show();\n        assert.equal($elem.css(\"display\"), this.className, name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"\", name + sequence.join(\"\") + \" inline\");\n        sequence.push(\".hide()\");\n        $elem.hide();\n        assert.equal($elem.css(\"display\"), \"none\", name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"none\", name + sequence.join(\"\") + \" inline\");\n      }\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, inline display","suites":["css"],"line":664,"code":"  QUnit.test(\"show/hide 3.0, inline display\", function (assert) {\n    assert.expect(96);\n    var i,\n      $elems = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").html(\"<span data-expected-display='block' style='display:block'></span>\" + \"<span class='list-item' data-expected-display='block' style='display:block'></span>\" + \"<div data-expected-display='inline' style='display:inline'></div>\" + \"<div class='list-item' data-expected-display='inline' style='display:inline'></div>\" + \"<ul>\" + \"<li data-expected-display='block' style='display:block'></li>\" + \"<li class='inline' data-expected-display='block' style='display:block'></li>\" + \"<li data-expected-display='inline' style='display:inline'></li>\" + \"<li class='block' data-expected-display='inline' style='display:inline'></li>\" + \"</ul>\").find(\"[data-expected-display]\");\n    $elems.each(function () {\n      var $elem = jQuery(this),\n        name = this.nodeName,\n        expected = this.getAttribute(\"data-expected-display\"),\n        sequence = [];\n      if (this.className) {\n        name += \".\" + this.className;\n      }\n      if (this.getAttribute(\"style\")) {\n        name += \"[style='\" + this.getAttribute(\"style\") + \"']\";\n      }\n      name += \" \";\n      for (i = 0; i < 3; i++) {\n        sequence.push(\".show()\");\n        $elem.show();\n        assert.equal($elem.css(\"display\"), expected, name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, expected, name + sequence.join(\"\") + \" inline\");\n        sequence.push(\".hide()\");\n        $elem.hide();\n        assert.equal($elem.css(\"display\"), \"none\", name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"none\", name + sequence.join(\"\") + \" inline\");\n      }\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, cascade hidden","suites":["css"],"line":692,"code":"  QUnit.test(\"show/hide 3.0, cascade hidden\", function (assert) {\n    assert.expect(72);\n    var i,\n      $elems = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").html(\"<div class='hidden' data-expected-display='block'></div>\" + \"<div class='hidden' data-expected-display='block' style='display:none'></div>\" + \"<span class='hidden' data-expected-display='inline'></span>\" + \"<span class='hidden' data-expected-display='inline' style='display:none'></span>\" + \"<ul>\" + \"<li class='hidden' data-expected-display='list-item'></li>\" + \"<li class='hidden' data-expected-display='list-item' style='display:none'></li>\" + \"</ul>\").find(\"[data-expected-display]\");\n    $elems.each(function () {\n      var $elem = jQuery(this),\n        name = this.nodeName,\n        expected = this.getAttribute(\"data-expected-display\"),\n        sequence = [];\n      if (this.className) {\n        name += \".\" + this.className;\n      }\n      if (this.getAttribute(\"style\")) {\n        name += \"[style='\" + this.getAttribute(\"style\") + \"']\";\n      }\n      name += \" \";\n      for (i = 0; i < 3; i++) {\n        sequence.push(\".hide()\");\n        $elem.hide();\n        assert.equal($elem.css(\"display\"), \"none\", name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"none\", name + sequence.join(\"\") + \" inline\");\n        sequence.push(\".show()\");\n        $elem.show();\n        assert.equal($elem.css(\"display\"), expected, name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, expected, name + sequence.join(\"\") + \" inline\");\n      }\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"show/hide 3.0, inline hidden","suites":["css"],"line":720,"code":"  QUnit.test(\"show/hide 3.0, inline hidden\", function (assert) {\n    assert.expect(84);\n    var i,\n      $elems = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").html(\"<span data-expected-display='inline' style='display:none'></span>\" + \"<span class='list-item' data-expected-display='list-item' style='display:none'></span>\" + \"<div data-expected-display='block' style='display:none'></div>\" + \"<div class='list-item' data-expected-display='list-item' style='display:none'></div>\" + \"<ul>\" + \"<li data-expected-display='list-item' style='display:none'></li>\" + \"<li class='block' data-expected-display='block' style='display:none'></li>\" + \"<li class='inline' data-expected-display='inline' style='display:none'></li>\" + \"</ul>\").find(\"[data-expected-display]\");\n    $elems.each(function () {\n      var $elem = jQuery(this),\n        name = this.nodeName,\n        expected = this.getAttribute(\"data-expected-display\"),\n        sequence = [];\n      if (this.className) {\n        name += \".\" + this.className;\n      }\n      if (this.getAttribute(\"style\")) {\n        name += \"[style='\" + this.getAttribute(\"style\") + \"']\";\n      }\n      name += \" \";\n      for (i = 0; i < 3; i++) {\n        sequence.push(\".hide()\");\n        $elem.hide();\n        assert.equal($elem.css(\"display\"), \"none\", name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"none\", name + sequence.join(\"\") + \" inline\");\n        sequence.push(\".show()\");\n        $elem.show();\n        assert.equal($elem.css(\"display\"), expected, name + sequence.join(\"\") + \" computed\");\n        assert.equal(this.style.display, \"\", name + sequence.join(\"\") + \" inline\");\n      }\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"jQuery.css(elem, 'height') doesn't clear radio buttons (bug trac-1095)","suites":["css"],"line":815,"code":"  QUnit.test(\"jQuery.css(elem, 'height') doesn't clear radio buttons (bug trac-1095)\", function (assert) {\n    assert.expect(4);\n    var $checkedtest = jQuery(\"#checkedtest\");\n    jQuery.css($checkedtest[0], \"height\");\n    assert.ok(jQuery(\"input[type='radio']\", $checkedtest).first().attr(\"checked\"), \"Check first radio still checked.\");\n    assert.ok(!jQuery(\"input[type='radio']\", $checkedtest).last().attr(\"checked\"), \"Check last radio still NOT checked.\");\n    assert.ok(jQuery(\"input[type='checkbox']\", $checkedtest).first().attr(\"checked\"), \"Check first checkbox still checked.\");\n    assert.ok(!jQuery(\"input[type='checkbox']\", $checkedtest).last().attr(\"checked\"), \"Check last checkbox still NOT checked.\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"internal ref to elem.runtimeStyle (bug trac-7608)","suites":["css"],"line":824,"code":"  QUnit.test(\"internal ref to elem.runtimeStyle (bug trac-7608)\", function (assert) {\n    assert.expect(1);\n    var result = true;\n    try {\n      jQuery(\"#foo\").css({\n        \"width\": \"0%\"\n      }).css(\"width\");\n    } catch (e) {\n      result = false;\n    }\n    assert.ok(result, \"elem.runtimeStyle does not throw exception\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"computed margins (trac-3333; gh-2237)","suites":["css"],"line":836,"code":"  QUnit.test(\"computed margins (trac-3333; gh-2237)\", function (assert) {\n    assert.expect(2);\n    var $div = jQuery(\"#foo\"),\n      $child = jQuery(\"#en\");\n    $div.css({\n      \"width\": \"1px\",\n      \"marginRight\": 0\n    });\n    assert.equal($div.css(\"marginRight\"), \"0px\", \"marginRight correctly calculated with a width and display block\");\n    $div.css({\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100px\"\n    });\n    $child.css({\n      width: \"50px\",\n      margin: \"auto\"\n    });\n    assert.equal($child.css(\"marginLeft\"), \"25px\", \"auto margins are computed to pixels\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"box model properties incorrectly returning % instead of px, see trac-10639 and trac-12088","suites":["css"],"line":857,"code":"  QUnit.test(\"box model properties incorrectly returning % instead of px, see trac-10639 and trac-12088\", function (assert) {\n    assert.expect(2);\n    var container = jQuery(\"<div></div>\").width(400).appendTo(\"#qunit-fixture\"),\n      el = jQuery(\"<div></div>\").css({\n        \"width\": \"50%\",\n        \"marginRight\": \"50%\"\n      }).appendTo(container),\n      el2 = jQuery(\"<div></div>\").css({\n        \"width\": \"50%\",\n        \"minWidth\": \"300px\",\n        \"marginLeft\": \"25%\"\n      }).appendTo(container);\n    assert.equal(el.css(\"marginRight\"), \"200px\", \"css('marginRight') returning % instead of px, see trac-10639\");\n    assert.equal(el2.css(\"marginLeft\"), \"100px\", \"css('marginLeft') returning incorrect pixel value, see trac-12088\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"widows & orphans trac-8936","suites":["css"],"line":872,"code":"  QUnit.test(\"widows & orphans trac-8936\", function (assert) {\n    var $p = jQuery(\"<p>\").appendTo(\"#qunit-fixture\");\n    assert.expect(2);\n    $p.css({\n      \"widows\": 3,\n      \"orphans\": 3\n    });\n    assert.equal($p.css(\"widows\") || jQuery.style($p[0], \"widows\"), 3, \"widows correctly set to 3\");\n    assert.equal($p.css(\"orphans\") || jQuery.style($p[0], \"orphans\"), 3, \"orphans correctly set to 3\");\n    $p.remove();\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"can't get css for disconnected in IE<9, see trac-10254 and trac-8388","suites":["css"],"line":883,"code":"  QUnit.test(\"can't get css for disconnected in IE<9, see trac-10254 and trac-8388\", function (assert) {\n    assert.expect(2);\n    var span, div;\n    span = jQuery(\"<span></span>\").css(\"background-image\", \"url(\" + baseURL + \"1x1.jpg)\");\n    assert.notEqual(span.css(\"background-image\"), null, \"can't get background-image in IE<9, see trac-10254\");\n    div = jQuery(\"<div></div>\").css(\"top\", 10);\n    assert.equal(div.css(\"top\"), \"10px\", \"can't get top in IE<9, see trac-8388\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Ensure styles are retrieving from parsed html on document fragments","suites":["css"],"line":891,"code":"  QUnit.test(\"Ensure styles are retrieving from parsed html on document fragments\", function (assert) {\n    assert.expect(1);\n    var $span = jQuery(jQuery.parseHTML(\"<span style=\\\"font-family: Cuprum,sans-serif; font-size: 14px; color: #999999;\\\">some text</span>\"));\n    assert.equal($span.css(\"font-size\"), \"14px\", \"Font-size retrievable on parsed HTML node\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"can't get background-position in IE<9, see trac-10796","suites":["css"],"line":896,"code":"  QUnit.test(\"can't get background-position in IE<9, see trac-10796\", function (assert) {\n    var div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\"),\n      units = [\"0 0\", \"12px 12px\", \"13px 12em\", \"12em 13px\", \"12em center\", \"+12em center\", \"12.2em center\", \"center center\"],\n      l = units.length,\n      i = 0;\n    assert.expect(l);\n    for (; i < l; i++) {\n      div.css(\"background-position\", units[i]);\n      assert.ok(div.css(\"background-position\"), \"can't get background-position in IE<9, see trac-10796\");\n    }\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"percentage properties for left and top should be transformed to pixels, see trac-9505","suites":["css"],"line":908,"code":"    QUnit.test(\"percentage properties for left and top should be transformed to pixels, see trac-9505\", function (assert) {\n      assert.expect(2);\n      var parent = jQuery(\"<div style='position:relative;width:200px;height:200px;margin:0;padding:0;border-width:0'></div>\").appendTo(\"#qunit-fixture\"),\n        div = jQuery(\"<div style='position: absolute; width: 20px; height: 20px; top:50%; left:50%'></div>\").appendTo(parent);\n      assert.equal(div.css(\"top\"), \"100px\", \"position properties not transformed to pixels, see trac-9505\");\n      assert.equal(div.css(\"left\"), \"100px\", \"position properties not transformed to pixels, see trac-9505\");\n    });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Do not append px (trac-9548, trac-12990, gh-2792)","suites":["css"],"line":916,"code":"  QUnit.test(\"Do not append px (trac-9548, trac-12990, gh-2792)\", function (assert) {\n    assert.expect(4);\n    var $div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n    $div.css(\"fill-opacity\", 1);\n    assert.equal($div.css(\"fill-opacity\"), 1, \"Do not append px to 'fill-opacity'\");\n    $div.css(\"font-size\", \"27px\");\n    $div.css(\"line-height\", 2);\n    assert.equal($div.css(\"line-height\"), \"54px\", \"Do not append px to 'line-height'\");\n    $div.css(\"column-count\", 1);\n    if ($div.css(\"column-count\") !== undefined) {\n      assert.equal($div.css(\"column-count\"), 1, \"Do not append px to 'column-count'\");\n    } else {\n      assert.ok(true, \"No support for column-count CSS property\");\n    }\n    $div.css(\"animation-iteration-count\", 2);\n    if ($div.css(\"animation-iteration-count\") !== undefined) {\n      // if $div.css( \"animation-iteration-count\" ) return \"1\",\n      // it actually return the default value of animation-iteration-count\n      assert.equal($div.css(\"animation-iteration-count\"), 2, \"Do not append px to 'animation-iteration-count'\");\n    } else {\n      assert.ok(true, \"No support for animation-iteration-count CSS property\");\n    }\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Do not append px to most properties not accepting integer values","suites":["css"],"line":983,"code":"  QUnit.test(\"Do not append px to most properties not accepting integer values\", function (assert) {\n    assert.expect(3);\n    var $div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n    $div.css(\"font-size\", \"27px\");\n    $div.css(\"font-size\", 2);\n    assert.equal($div.css(\"font-size\"), \"27px\", \"Do not append px to 'font-size'\");\n    $div.css(\"fontSize\", 2);\n    assert.equal($div.css(\"fontSize\"), \"27px\", \"Do not append px to 'fontSize'\");\n    $div.css(\"letter-spacing\", \"2px\");\n    $div.css(\"letter-spacing\", 3);\n    assert.equal($div.css(\"letter-spacing\"), \"2px\", \"Do not append px to 'letter-spacing'\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Append px to whitelisted properties","suites":["css"],"line":995,"code":"  QUnit.test(\"Append px to whitelisted properties\", function (assert) {\n    var prop,\n      $div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\"),\n      whitelist = {\n        margin: \"marginTop\",\n        marginTop: undefined,\n        marginRight: undefined,\n        marginBottom: undefined,\n        marginLeft: undefined,\n        padding: \"paddingTop\",\n        paddingTop: undefined,\n        paddingRight: undefined,\n        paddingBottom: undefined,\n        paddingLeft: undefined,\n        top: undefined,\n        right: undefined,\n        bottom: undefined,\n        left: undefined,\n        width: undefined,\n        height: undefined,\n        minWidth: undefined,\n        minHeight: undefined,\n        maxWidth: undefined,\n        maxHeight: undefined,\n        border: \"borderTopWidth\",\n        borderWidth: \"borderTopWidth\",\n        borderTop: \"borderTopWidth\",\n        borderTopWidth: undefined,\n        borderRight: \"borderRightWidth\",\n        borderRightWidth: undefined,\n        borderBottom: \"borderBottomWidth\",\n        borderBottomWidth: undefined,\n        borderLeft: \"borderLeftWidth\",\n        borderLeftWidth: undefined\n      };\n    assert.expect(Object.keys(whitelist).length * 2);\n    for (prop in whitelist) {\n      var propToCheck = whitelist[prop] || prop,\n        kebabProp = prop.replace(/[A-Z]/g, function (match) {\n          return \"-\" + match.toLowerCase();\n        }),\n        kebabPropToCheck = propToCheck.replace(/[A-Z]/g, function (match) {\n          return \"-\" + match.toLowerCase();\n        });\n      $div.css(prop, 3).css(\"position\", \"absolute\").css(\"border-style\", \"solid\");\n      assert.equal($div.css(propToCheck), \"3px\", \"Append px to '\" + prop + \"'\");\n      $div.css(kebabProp, 3).css(\"position\", \"absolute\").css(\"border-style\", \"solid\");\n      assert.equal($div.css(kebabPropToCheck), \"3px\", \"Append px to '\" + kebabProp + \"'\");\n    }\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css('width') and css('height') should respect box-sizing, see trac-11004","suites":["css"],"line":1045,"code":"  QUnit.test(\"css('width') and css('height') should respect box-sizing, see trac-11004\", function (assert) {\n    assert.expect(4);\n    var el_dis = jQuery(\"<div style='width:300px;height:300px;margin:2px;padding:2px;box-sizing:border-box;'>test</div>\"),\n      el = el_dis.clone().appendTo(\"#qunit-fixture\");\n    assert.equal(el.css(\"width\"), el.css(\"width\", el.css(\"width\")).css(\"width\"), \"css('width') is not respecting box-sizing, see trac-11004\");\n    assert.equal(el_dis.css(\"width\"), el_dis.css(\"width\", el_dis.css(\"width\")).css(\"width\"), \"css('width') is not respecting box-sizing for disconnected element, see trac-11004\");\n    assert.equal(el.css(\"height\"), el.css(\"height\", el.css(\"height\")).css(\"height\"), \"css('height') is not respecting box-sizing, see trac-11004\");\n    assert.equal(el_dis.css(\"height\"), el_dis.css(\"height\", el_dis.css(\"height\")).css(\"height\"), \"css('height') is not respecting box-sizing for disconnected element, see trac-11004\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"table rows width/height should be unaffected by inline styles","suites":["css"],"line":1054,"code":"  QUnit.test(\"table rows width/height should be unaffected by inline styles\", function (assert) {\n    assert.expect(2);\n    var table = jQuery(\"<table>\\n\" + \"  <tr id=\\\"row\\\" style=\\\"height: 1px; width: 1px;\\\">\\n\" + \"    <td>\\n\" + \"      <div style=\\\"height: 100px; width: 100px;\\\"></div>\\n\" + \"    </div>\\n\" + \"  </tr>\\n\" + \"</table>\");\n    var tr = table.find(\"tr\");\n    table.appendTo(\"#qunit-fixture\");\n    assert.ok(parseInt(tr.css(\"width\")) > 10, \"tr width unaffected by inline style\");\n    assert.ok(parseInt(tr.css(\"height\")) > 10, \"tr height unaffected by inline style\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"certain css values of 'normal' should be convertable to a number, see trac-8627","suites":["css"],"line":1084,"code":"  QUnit.test(\"certain css values of 'normal' should be convertable to a number, see trac-8627\", function (assert) {\n    assert.expect(3);\n    var el = jQuery(\"<div style='letter-spacing:normal;font-weight:normal;'>test</div>\").appendTo(\"#qunit-fixture\");\n    assert.ok(!isNaN(parseFloat(el.css(\"letterSpacing\"))), \"css('letterSpacing') not convertable to number, see trac-8627\");\n    assert.ok(!isNaN(parseFloat(el.css(\"fontWeight\"))), \"css('fontWeight') not convertable to number, see trac-8627\");\n    assert.equal(typeof el.css(\"fontWeight\"), \"string\", \".css() returns a string\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"cssHooks - expand","suites":["css"],"line":1091,"code":"  QUnit.test(\"cssHooks - expand\", function (assert) {\n    assert.expect(15);\n    var result,\n      properties = {\n        margin: [\"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\"],\n        borderWidth: [\"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\"],\n        padding: [\"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\"]\n      };\n    jQuery.each(properties, function (property, keys) {\n      var hook = jQuery.cssHooks[property],\n        expected = {};\n      jQuery.each(keys, function (_, key) {\n        expected[key] = 10;\n      });\n      result = hook.expand(10);\n      assert.deepEqual(result, expected, property + \" expands properly with a number\");\n      jQuery.each(keys, function (_, key) {\n        expected[key] = \"10px\";\n      });\n      result = hook.expand(\"10px\");\n      assert.deepEqual(result, expected, property + \" expands properly with '10px'\");\n      expected[keys[1]] = expected[keys[3]] = \"20px\";\n      result = hook.expand(\"10px 20px\");\n      assert.deepEqual(result, expected, property + \" expands properly with '10px 20px'\");\n      expected[keys[2]] = \"30px\";\n      result = hook.expand(\"10px 20px 30px\");\n      assert.deepEqual(result, expected, property + \" expands properly with '10px 20px 30px'\");\n      expected[keys[3]] = \"40px\";\n      result = hook.expand(\"10px 20px 30px 40px\");\n      assert.deepEqual(result, expected, property + \" expands properly with '10px 20px 30px 40px'\");\n    });\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"css opacity consistency across browsers (trac-12685)","suites":["css"],"line":1123,"code":"  QUnit.test(\"css opacity consistency across browsers (trac-12685)\", function (assert) {\n    assert.expect(3);\n    var el,\n      fixture = jQuery(\"#qunit-fixture\");\n\n    // Append style element\n    jQuery(\"<style>.opacity_t12685 { opacity: 0.1; }</style>\").appendTo(fixture);\n    el = jQuery(\"<div class='opacity_t12685'></div>\").appendTo(fixture);\n    assert.equal(Math.round(el.css(\"opacity\") * 100), 10, \"opacity from style sheet\");\n    el.css(\"opacity\", 0.3);\n    assert.equal(Math.round(el.css(\"opacity\") * 100), 30, \"override opacity\");\n    el.css(\"opacity\", \"\");\n    assert.equal(Math.round(el.css(\"opacity\") * 100), 10, \"remove opacity override\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Keep the last style if the new one isn't recognized by the browser (trac-14836)","suites":["css"],"line":1182,"code":"  QUnit.test(\"Keep the last style if the new one isn't recognized by the browser (trac-14836)\", function (assert) {\n    assert.expect(1);\n    var el = jQuery(\"<div></div>\").css(\"position\", \"absolute\").css(\"position\", \"fake value\");\n    assert.equal(el.css(\"position\"), \"absolute\", \"The old style is kept when setting an unrecognized value\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Keep the last style if the new one is a non-empty whitespace (gh-3204)","suites":["css"],"line":1187,"code":"  QUnit.test(\"Keep the last style if the new one is a non-empty whitespace (gh-3204)\", function (assert) {\n    assert.expect(1);\n    var el = jQuery(\"<div></div>\").css(\"position\", \"absolute\").css(\"position\", \" \");\n    assert.equal(el.css(\"position\"), \"absolute\", \"The old style is kept when setting to a space\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Reset the style if set to an empty string","suites":["css"],"line":1192,"code":"  QUnit.test(\"Reset the style if set to an empty string\", function (assert) {\n    assert.expect(1);\n    var el = jQuery(\"<div></div>\").css(\"position\", \"absolute\").css(\"position\", \"\");\n\n    // Some browsers return an empty string; others \"static\". Both those cases mean the style\n    // was reset successfully so accept them both.\n    assert.equal(el.css(\"position\") || \"static\", \"static\", \"The style can be reset by setting to an empty string\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (trac-8908)","suites":["css"],"line":1200,"code":"  QUnit.test(\"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (trac-8908)\", function (assert) {\n    assert.expect(24);\n    var done = assert.async();\n    var styles = [{\n      name: \"backgroundAttachment\",\n      value: [\"fixed\"]\n    }, {\n      name: \"backgroundColor\",\n      value: [\"rgb(255, 0, 0)\", \"rgb(255,0,0)\", \"#ff0000\"]\n    }, {\n      // Firefox returns auto's value\n      name: \"backgroundImage\",\n      value: [\"url('test.png')\", \"url(\" + baseURL + \"test.png)\", \"url(\\\"\" + baseURL + \"test.png\\\")\"]\n    }, {\n      name: \"backgroundPosition\",\n      value: [\"5% 5%\"]\n    }, {\n      // Firefox returns no-repeat\n      name: \"backgroundRepeat\",\n      value: [\"repeat-y\"]\n    }, {\n      name: \"backgroundClip\",\n      value: [\"padding-box\"]\n    }, {\n      name: \"backgroundOrigin\",\n      value: [\"content-box\"]\n    }, {\n      name: \"backgroundSize\",\n      value: [\"80px 60px\"]\n    }];\n    jQuery.each(styles, function (index, style) {\n      var $clone,\n        $clonedChildren,\n        $source = jQuery(\"#firstp\"),\n        source = $source[0],\n        $children = $source.children();\n      if (source.style[style.name] === undefined) {\n        assert.ok(true, style.name + \": style isn't supported and therefore not an issue\");\n        assert.ok(true);\n        return true;\n      }\n      $source.css(style.name, style.value[0]);\n      $children.css(style.name, style.value[0]);\n      $clone = $source.clone();\n      $clonedChildren = $clone.children();\n      $clone.css(style.name, \"\");\n      $clonedChildren.css(style.name, \"\");\n      window.setTimeout(function () {\n        assert.notEqual($clone.css(style.name), style.value[0], \"Cloned css was changed\");\n        assert.ok(jQuery.inArray($source.css(style.name) !== -1, style.value), \"Clearing clone.css() doesn't affect source.css(): \" + style.name + \"; result: \" + $source.css(style.name) + \"; expected: \" + style.value.join(\",\"));\n        assert.ok(jQuery.inArray($children.css(style.name) !== -1, style.value), \"Clearing clonedChildren.css() doesn't affect children.css(): \" + style.name + \"; result: \" + $children.css(style.name) + \"; expected: \" + style.value.join(\",\"));\n      }, 100);\n    });\n    window.setTimeout(done, 1000);\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Don't append px to CSS \"order\" value (trac-14049)","suites":["css"],"line":1255,"code":"  QUnit.test(\"Don't append px to CSS \\\"order\\\" value (trac-14049)\", function (assert) {\n    assert.expect(1);\n    var $elem = jQuery(\"<div></div>\");\n    $elem.css(\"order\", 2);\n    assert.equal($elem.css(\"order\"), \"2\", \"2 on order\");\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Do not throw on frame elements from css method (trac-15098)","suites":["css"],"line":1261,"code":"  QUnit.test(\"Do not throw on frame elements from css method (trac-15098)\", function (assert) {\n    assert.expect(1);\n    var frameWin,\n      frameDoc,\n      frameElement = document.createElement(\"iframe\"),\n      frameWrapDiv = document.createElement(\"div\");\n    frameWrapDiv.appendChild(frameElement);\n    document.body.appendChild(frameWrapDiv);\n    frameWin = frameElement.contentWindow;\n    frameDoc = frameWin.document;\n    frameDoc.open();\n    frameDoc.write(\"<!doctype html><html><body><div>Hi</div></body></html>\");\n    frameDoc.close();\n    frameWrapDiv.style.display = \"none\";\n    try {\n      jQuery(frameDoc.body).css(\"direction\");\n      assert.ok(true, \"It didn't throw\");\n    } catch (_) {\n      assert.ok(false, \"It did throw\");\n    }\n  });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Don't default to a cached previously used wrong prefixed name (gh-2015)","suites":["css"],"line":1284,"code":"    QUnit.test(\"Don't default to a cached previously used wrong prefixed name (gh-2015)\", function (assert) {\n      // Note: this test needs a property we know is only supported in a prefixed version\n      // by at least one of our main supported browsers. This may get out of date so let's\n      // use -(webkit|moz)-appearance as well as those two are not on a standards track.\n      var appearanceName,\n        transformName,\n        elem,\n        elemStyle,\n        transformVal = \"translate(5px, 2px)\",\n        emptyStyle = document.createElement(\"div\").style;\n      if (\"appearance\" in emptyStyle) {\n        appearanceName = \"appearance\";\n      } else {\n        jQuery.each(vendorPrefixes, function (index, prefix) {\n          var prefixedProp = prefix + \"Appearance\";\n          if (prefixedProp in emptyStyle) {\n            appearanceName = prefixedProp;\n          }\n        });\n      }\n      if (\"transform\" in emptyStyle) {\n        transformName = \"transform\";\n      } else {\n        jQuery.each(vendorPrefixes, function (index, prefix) {\n          var prefixedProp = prefix + \"Transform\";\n          if (prefixedProp in emptyStyle) {\n            transformName = prefixedProp;\n          }\n        });\n      }\n      assert.expect(!!appearanceName + !!transformName + 1);\n      elem = jQuery(\"<div></div>\").css({\n        msAppearance: \"none\",\n        appearance: \"none\",\n        // Only the ms prefix is used to make sure we haven't e.g. set\n        // webkitTransform ourselves in the test.\n        msTransform: transformVal,\n        transform: transformVal\n      });\n      elemStyle = elem[0].style;\n      if (appearanceName) {\n        assert.equal(elemStyle[appearanceName], \"none\", \"setting properly-prefixed appearance\");\n      }\n      if (transformName) {\n        assert.equal(elemStyle[transformName], transformVal, \"setting properly-prefixed transform\");\n      }\n      assert.equal(elemStyle[\"undefined\"], undefined, \"Nothing writes to node.style.undefined\");\n    });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"Don't detect fake set properties on a node when caching the prefixed version","suites":["css"],"line":1332,"code":"    QUnit.test(\"Don't detect fake set properties on a node when caching the prefixed version\", function (assert) {\n      assert.expect(1);\n      var elem = jQuery(\"<div></div>\"),\n        style = elem[0].style;\n      style.MozFakeProperty = \"old value\";\n      elem.css(\"fakeProperty\", \"new value\");\n      assert.equal(style.MozFakeProperty, \"old value\", \"Fake prefixed property is not cached\");\n    });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"IE vendor prefixes are not mangled","suites":["css"],"line":1413,"code":"    QUnit.test(\"IE vendor prefixes are not mangled\", function (assert) {\n      assert.expect(1);\n      var div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n      div.css(\"-ms-grid-row\", \"1\");\n      assert.strictEqual(div.css(\"-ms-grid-row\"), \"1\", \"IE vendor prefixing\");\n    });","file":"unit/css.js","skipped":false,"dir":"test"},{"name":"expando","suites":["data"],"line":4,"code":"QUnit.test(\"expando\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery.expando !== undefined, true, \"jQuery is exposing the expando\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data & removeData, expected returns","suites":["data"],"line":8,"code":"QUnit.test(\"jQuery.data & removeData, expected returns\", function (assert) {\n  assert.expect(4);\n  var elem = document.body;\n  assert.equal(jQuery.data(elem, \"hello\", \"world\"), \"world\", \"jQuery.data( elem, key, value ) returns value\");\n  assert.equal(jQuery.data(elem, \"hello\"), \"world\", \"jQuery.data( elem, key ) returns value\");\n  assert.deepEqual(jQuery.data(elem, {\n    goodnight: \"moon\"\n  }), {\n    goodnight: \"moon\"\n  }, \"jQuery.data( elem, obj ) returns obj\");\n  assert.equal(jQuery.removeData(elem, \"hello\"), undefined, \"jQuery.removeData( elem, key, value ) returns undefined\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery._data & _removeData, expected returns","suites":["data"],"line":20,"code":"QUnit.test(\"jQuery._data & _removeData, expected returns\", function (assert) {\n  assert.expect(4);\n  var elem = document.body;\n  assert.equal(jQuery._data(elem, \"hello\", \"world\"), \"world\", \"jQuery._data( elem, key, value ) returns value\");\n  assert.equal(jQuery._data(elem, \"hello\"), \"world\", \"jQuery._data( elem, key ) returns value\");\n  assert.deepEqual(jQuery._data(elem, {\n    goodnight: \"moon\"\n  }), {\n    goodnight: \"moon\"\n  }, \"jQuery._data( elem, obj ) returns obj\");\n  assert.equal(jQuery._removeData(elem, \"hello\"), undefined, \"jQuery._removeData( elem, key, value ) returns undefined\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.hasData no side effects","suites":["data"],"line":32,"code":"QUnit.test(\"jQuery.hasData no side effects\", function (assert) {\n  assert.expect(1);\n  var obj = {};\n  jQuery.hasData(obj);\n  assert.equal(Object.getOwnPropertyNames(obj).length, 0, \"No data expandos where added when calling jQuery.hasData(o)\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data(div)","suites":["data"],"line":84,"code":"QUnit.test(\"jQuery.data(div)\", function (assert) {\n  assert.expect(25);\n  var div = document.createElement(\"div\");\n  dataTests(div, assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data({})","suites":["data"],"line":89,"code":"QUnit.test(\"jQuery.data({})\", function (assert) {\n  assert.expect(25);\n  dataTests({}, assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data(window)","suites":["data"],"line":93,"code":"QUnit.test(\"jQuery.data(window)\", function (assert) {\n  assert.expect(25);\n\n  // remove bound handlers from window object to stop potential false positives caused by fix for trac-5280 in\n  // transports/xhr.js\n  jQuery(window).off(\"unload\");\n  dataTests(window, assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data(document)","suites":["data"],"line":101,"code":"QUnit.test(\"jQuery.data(document)\", function (assert) {\n  assert.expect(25);\n  dataTests(document, assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data(<embed>)","suites":["data"],"line":105,"code":"QUnit.test(\"jQuery.data(<embed>)\", function (assert) {\n  assert.expect(25);\n  dataTests(document.createElement(\"embed\"), assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data(object/flash)","suites":["data"],"line":109,"code":"QUnit.test(\"jQuery.data(object/flash)\", function (assert) {\n  assert.expect(25);\n  var flash = document.createElement(\"object\");\n  flash.setAttribute(\"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\");\n  dataTests(flash, assert);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery().data() === undefined (trac-14101)","suites":["data"],"line":117,"code":"QUnit.test(\"jQuery().data() === undefined (trac-14101)\", function (assert) {\n  assert.expect(2);\n  assert.strictEqual(jQuery().data(), undefined);\n  assert.strictEqual(jQuery().data(\"key\"), undefined);\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data()","suites":["data"],"line":122,"code":"QUnit.test(\".data()\", function (assert) {\n  assert.expect(5);\n  var div, dataObj, nodiv, obj;\n  div = jQuery(\"#foo\");\n  assert.strictEqual(div.data(\"foo\"), undefined, \"Make sure that missing result is undefined\");\n  div.data(\"test\", \"success\");\n  dataObj = div.data();\n  assert.deepEqual(dataObj, {\n    test: \"success\"\n  }, \"data() returns entire data object with expected properties\");\n  assert.strictEqual(div.data(\"foo\"), undefined, \"Make sure that missing result is still undefined\");\n  nodiv = jQuery(\"#unfound\");\n  assert.equal(nodiv.data(), null, \"data() on empty set returns null\");\n  obj = {\n    foo: \"bar\"\n  };\n  jQuery(obj).data(\"foo\", \"baz\");\n  dataObj = jQuery.extend(true, {}, jQuery(obj).data());\n  assert.deepEqual(dataObj, {\n    \"foo\": \"baz\"\n  }, \"Retrieve data object from a wrapped JS object (trac-7524)\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery(Element).data(String, Object).data(String)","suites":["data"],"line":165,"code":"QUnit.test(\"jQuery(Element).data(String, Object).data(String)\", function (assert) {\n  assert.expect(18);\n  var parent = jQuery(\"<div><div></div></div>\"),\n    div = parent.children();\n  assert.strictEqual(div.data(\"test\"), undefined, \"No data exists initially\");\n  assert.strictEqual(div.data(\"test\", \"success\").data(\"test\"), \"success\", \"Data added\");\n  assert.strictEqual(div.data(\"test\", \"overwritten\").data(\"test\"), \"overwritten\", \"Data overwritten\");\n  assert.strictEqual(div.data(\"test\", undefined).data(\"test\"), \"overwritten\", \".data(key,undefined) does nothing but is chainable (trac-5571)\");\n  assert.strictEqual(div.data(\"notexist\"), undefined, \"No data exists for unset key\");\n  testDataTypes(div, assert);\n  parent.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery(plain Object).data(String, Object).data(String)","suites":["data"],"line":177,"code":"QUnit.test(\"jQuery(plain Object).data(String, Object).data(String)\", function (assert) {\n  assert.expect(16);\n\n  // trac-3748\n  var $obj = jQuery({\n    exists: true\n  });\n  assert.strictEqual($obj.data(\"nothing\"), undefined, \"Non-existent data returns undefined\");\n  assert.strictEqual($obj.data(\"exists\"), undefined, \"Object properties are not returned as data\");\n  testDataTypes($obj, assert);\n\n  // Clean up\n  $obj.removeData();\n  assert.deepEqual($obj[0], {\n    exists: true\n  }, \"removeData does not clear the object\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data(object) does not retain references. trac-13815","suites":["data"],"line":194,"code":"QUnit.test(\".data(object) does not retain references. trac-13815\", function (assert) {\n  assert.expect(2);\n  var $divs = jQuery(\"<div></div><div></div>\").appendTo(\"#qunit-fixture\");\n  $divs.data({\n    \"type\": \"foo\"\n  });\n  $divs.eq(0).data(\"type\", \"bar\");\n  assert.equal($divs.eq(0).data(\"type\"), \"bar\", \"Correct updated value\");\n  assert.equal($divs.eq(1).data(\"type\"), \"foo\", \"Original value retained\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"data-* attributes","suites":["data"],"line":204,"code":"QUnit.test(\"data-* attributes\", function (assert) {\n  assert.expect(46);\n  var prop,\n    i,\n    l,\n    metadata,\n    elem,\n    obj,\n    obj2,\n    check,\n    num,\n    num2,\n    parseJSON = JSON.parse,\n    div = jQuery(\"<div>\"),\n    child = jQuery(\"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\"),\n    dummy = jQuery(\"<div data-myobj='old data' data-ignored=\\\"DOM\\\" data-other='test' data-foo-42='boosh'></div>\");\n  assert.equal(div.data(\"attr\"), undefined, \"Check for non-existing data-attr attribute\");\n  div.attr(\"data-attr\", \"exists\");\n  assert.equal(div.data(\"attr\"), \"exists\", \"Check for existing data-attr attribute\");\n  div.attr(\"data-attr\", \"exists2\");\n  assert.equal(div.data(\"attr\"), \"exists\", \"Check that updates to data- don't update .data()\");\n  div.data(\"attr\", \"internal\").attr(\"data-attr\", \"external\");\n  assert.equal(div.data(\"attr\"), \"internal\", \"Check for .data('attr') precedence (internal > external data-* attribute)\");\n  div.remove();\n  child.appendTo(\"#qunit-fixture\");\n  assert.equal(child.data(\"myobj\"), \"old data\", \"Value accessed from data-* attribute\");\n  assert.equal(child.data(\"foo-42\"), \"boosh\", \"camelCasing does not affect numbers (gh-1751)\");\n  child.data(\"myobj\", \"replaced\");\n  assert.equal(child.data(\"myobj\"), \"replaced\", \"Original data overwritten\");\n  child.data(\"ignored\", \"cache\");\n  assert.equal(child.data(\"ignored\"), \"cache\", \"Cached data used before DOM data-* fallback\");\n  obj = child.data();\n  obj2 = dummy.data();\n  check = [\"myobj\", \"ignored\", \"other\", \"foo-42\"];\n  num = 0;\n  num2 = 0;\n  dummy.remove();\n  for (i = 0, l = check.length; i < l; i++) {\n    assert.ok(obj[check[i]], \"Make sure data- property exists when calling data-.\");\n    assert.ok(obj2[check[i]], \"Make sure data- property exists when calling data-.\");\n  }\n  for (prop in obj) {\n    num++;\n  }\n  assert.equal(num, check.length, \"Make sure that the right number of properties came through.\");\n  for (prop in obj2) {\n    num2++;\n  }\n  assert.equal(num2, check.length, \"Make sure that the right number of properties came through.\");\n  child.attr(\"data-other\", \"newvalue\");\n  assert.equal(child.data(\"other\"), \"test\", \"Make sure value was pulled in properly from a .data().\");\n\n  // attribute parsing\n  i = 0;\n  JSON.parse = function () {\n    i++;\n    return parseJSON.apply(this, arguments);\n  };\n  child.attr(\"data-true\", \"true\").attr(\"data-false\", \"false\").attr(\"data-five\", \"5\").attr(\"data-point\", \"5.5\").attr(\"data-pointe\", \"5.5E3\").attr(\"data-grande\", \"5.574E9\").attr(\"data-hexadecimal\", \"0x42\").attr(\"data-pointbad\", \"5..5\").attr(\"data-pointbad2\", \"-.\").attr(\"data-bigassnum\", \"123456789123456789123456789\").attr(\"data-badjson\", \"{123}\").attr(\"data-badjson2\", \"[abc]\").attr(\"data-notjson\", \" {}\").attr(\"data-notjson2\", \"[] \").attr(\"data-empty\", \"\").attr(\"data-space\", \" \").attr(\"data-null\", \"null\").attr(\"data-string\", \"test\");\n  assert.strictEqual(child.data(\"true\"), true, \"Primitive true read from attribute\");\n  assert.strictEqual(child.data(\"false\"), false, \"Primitive false read from attribute\");\n  assert.strictEqual(child.data(\"five\"), 5, \"Integer read from attribute\");\n  assert.strictEqual(child.data(\"point\"), 5.5, \"Floating-point number read from attribute\");\n  assert.strictEqual(child.data(\"pointe\"), \"5.5E3\", \"Exponential-notation number read from attribute as string\");\n  assert.strictEqual(child.data(\"grande\"), \"5.574E9\", \"Big exponential-notation number read from attribute as string\");\n  assert.strictEqual(child.data(\"hexadecimal\"), \"0x42\", \"Hexadecimal number read from attribute as string\");\n  assert.strictEqual(child.data(\"pointbad\"), \"5..5\", \"Extra-point non-number read from attribute as string\");\n  assert.strictEqual(child.data(\"pointbad2\"), \"-.\", \"No-digit non-number read from attribute as string\");\n  assert.strictEqual(child.data(\"bigassnum\"), \"123456789123456789123456789\", \"Bad bigass number read from attribute as string\");\n  assert.strictEqual(child.data(\"badjson\"), \"{123}\", \"Bad JSON object read from attribute as string\");\n  assert.strictEqual(child.data(\"badjson2\"), \"[abc]\", \"Bad JSON array read from attribute as string\");\n  assert.strictEqual(child.data(\"notjson\"), \" {}\", \"JSON object with leading non-JSON read from attribute as string\");\n  assert.strictEqual(child.data(\"notjson2\"), \"[] \", \"JSON array with trailing non-JSON read from attribute as string\");\n  assert.strictEqual(child.data(\"empty\"), \"\", \"Empty string read from attribute\");\n  assert.strictEqual(child.data(\"space\"), \" \", \"Whitespace string read from attribute\");\n  assert.strictEqual(child.data(\"null\"), null, \"Primitive null read from attribute\");\n  assert.strictEqual(child.data(\"string\"), \"test\", \"Typical string read from attribute\");\n  assert.equal(i, 2, \"Correct number of JSON parse attempts when reading from attributes\");\n  JSON.parse = parseJSON;\n  child.remove();\n\n  // tests from metadata plugin\n  function testData(index, elem) {\n    switch (index) {\n      case 0:\n        assert.equal(jQuery(elem).data(\"foo\"), \"bar\", \"Check foo property\");\n        assert.equal(jQuery(elem).data(\"bar\"), \"baz\", \"Check baz property\");\n        break;\n      case 1:\n        assert.equal(jQuery(elem).data(\"test\"), \"bar\", \"Check test property\");\n        assert.equal(jQuery(elem).data(\"bar\"), \"baz\", \"Check bar property\");\n        break;\n      case 2:\n        assert.equal(jQuery(elem).data(\"zoooo\"), \"bar\", \"Check zoooo property\");\n        assert.deepEqual(jQuery(elem).data(\"bar\"), {\n          \"test\": \"baz\"\n        }, \"Check bar property\");\n        break;\n      case 3:\n        assert.equal(jQuery(elem).data(\"number\"), true, \"Check number property\");\n        assert.deepEqual(jQuery(elem).data(\"stuff\"), [2, 8], \"Check stuff property\");\n        break;\n      default:\n        assert.ok(false, [\"Assertion failed on index \", index, \", with data\"].join(\"\"));\n    }\n  }\n  metadata = \"<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\\\"test\\\":\\\"baz\\\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>\";\n  elem = jQuery(metadata).appendTo(\"#qunit-fixture\");\n  elem.find(\"li\").each(testData);\n  elem.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data(Object)","suites":["data"],"line":315,"code":"QUnit.test(\".data(Object)\", function (assert) {\n  assert.expect(4);\n  var obj,\n    jqobj,\n    div = jQuery(\"<div></div>\");\n  div.data({\n    \"test\": \"in\",\n    \"test2\": \"in2\"\n  });\n  assert.equal(div.data(\"test\"), \"in\", \"Verify setting an object in data\");\n  assert.equal(div.data(\"test2\"), \"in2\", \"Verify setting an object in data\");\n  obj = {\n    test: \"unset\"\n  };\n  jqobj = jQuery(obj);\n  jqobj.data(\"test\", \"unset\");\n  jqobj.data({\n    \"test\": \"in\",\n    \"test2\": \"in2\"\n  });\n  assert.equal(jQuery.data(obj)[\"test\"], \"in\", \"Verify setting an object on an object extends the data object\");\n  assert.equal(obj[\"test2\"], undefined, \"Verify setting an object on an object does not extend the object\");\n\n  // manually clean up detached elements\n  div.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.removeData","suites":["data"],"line":341,"code":"QUnit.test(\"jQuery.removeData\", function (assert) {\n  assert.expect(10);\n  var obj,\n    div = jQuery(\"#foo\")[0];\n  jQuery.data(div, \"test\", \"testing\");\n  jQuery.removeData(div, \"test\");\n  assert.equal(jQuery.data(div, \"test\"), undefined, \"Check removal of data\");\n  jQuery.data(div, \"test2\", \"testing\");\n  jQuery.removeData(div);\n  assert.ok(!jQuery.data(div, \"test2\"), \"Make sure that the data property no longer exists.\");\n  assert.ok(!div[jQuery.expando], \"Make sure the expando no longer exists, as well.\");\n  jQuery.data(div, {\n    test3: \"testing\",\n    test4: \"testing\"\n  });\n  jQuery.removeData(div, \"test3 test4\");\n  assert.ok(!jQuery.data(div, \"test3\") || jQuery.data(div, \"test4\"), \"Multiple delete with spaces.\");\n  jQuery.data(div, {\n    test3: \"testing\",\n    test4: \"testing\"\n  });\n  jQuery.removeData(div, [\"test3\", \"test4\"]);\n  assert.ok(!jQuery.data(div, \"test3\") || jQuery.data(div, \"test4\"), \"Multiple delete by array.\");\n  jQuery.data(div, {\n    \"test3 test4\": \"testing\",\n    \"test3\": \"testing\"\n  });\n  jQuery.removeData(div, \"test3 test4\");\n  assert.ok(!jQuery.data(div, \"test3 test4\"), \"Multiple delete with spaces deleted key with exact name\");\n  assert.ok(jQuery.data(div, \"test3\"), \"Left the partial matched key alone\");\n  obj = {};\n  jQuery.data(obj, \"test\", \"testing\");\n  assert.equal(jQuery(obj).data(\"test\"), \"testing\", \"verify data on plain object\");\n  jQuery.removeData(obj, \"test\");\n  assert.equal(jQuery.data(obj, \"test\"), undefined, \"Check removal of data on plain object\");\n  jQuery.data(window, \"BAD\", true);\n  jQuery.removeData(window, \"BAD\");\n  assert.ok(!jQuery.data(window, \"BAD\"), \"Make sure that the value was not still set.\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".removeData()","suites":["data"],"line":380,"code":"QUnit.test(\".removeData()\", function (assert) {\n  assert.expect(6);\n  var div = jQuery(\"#foo\");\n  div.data(\"test\", \"testing\");\n  div.removeData(\"test\");\n  assert.equal(div.data(\"test\"), undefined, \"Check removal of data\");\n  div.data(\"test\", \"testing\");\n  div.data(\"test.foo\", \"testing2\");\n  div.removeData(\"test.bar\");\n  assert.equal(div.data(\"test.foo\"), \"testing2\", \"Make sure data is intact\");\n  assert.equal(div.data(\"test\"), \"testing\", \"Make sure data is intact\");\n  div.removeData(\"test\");\n  assert.equal(div.data(\"test.foo\"), \"testing2\", \"Make sure data is intact\");\n  assert.equal(div.data(\"test\"), undefined, \"Make sure data is intact\");\n  div.removeData(\"test.foo\");\n  assert.equal(div.data(\"test.foo\"), undefined, \"Make sure data is intact\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"JSON serialization (trac-8108)","suites":["data"],"line":397,"code":"QUnit.test(\"JSON serialization (trac-8108)\", function (assert) {\n  assert.expect(1);\n  var obj = {\n    \"foo\": \"bar\"\n  };\n  jQuery.data(obj, \"hidden\", true);\n  assert.equal(JSON.stringify(obj), \"{\\\"foo\\\":\\\"bar\\\"}\", \"Expando is hidden from JSON.stringify\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data should follow html5 specification regarding camel casing","suites":["data"],"line":405,"code":"QUnit.test(\".data should follow html5 specification regarding camel casing\", function (assert) {\n  assert.expect(12);\n  var div = jQuery(\"<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>\").prependTo(\"body\");\n  assert.equal(div.data()[\"wTF\"], \"ftw\", \"Verify single letter data-* key\");\n  assert.equal(div.data()[\"bigALittleA\"], \"bouncing-b\", \"Verify single letter mixed data-* key\");\n  assert.equal(div.data()[\"foo\"], \"a\", \"Verify single word data-* key\");\n  assert.equal(div.data()[\"fooBar\"], \"b\", \"Verify multiple word data-* key\");\n  assert.equal(div.data()[\"fooBarBaz\"], \"c\", \"Verify multiple word data-* key\");\n  assert.equal(div.data(\"foo\"), \"a\", \"Verify single word data-* key\");\n  assert.equal(div.data(\"fooBar\"), \"b\", \"Verify multiple word data-* key\");\n  assert.equal(div.data(\"fooBarBaz\"), \"c\", \"Verify multiple word data-* key\");\n  div.data(\"foo-bar\", \"d\");\n  assert.equal(div.data(\"fooBar\"), \"d\", \"Verify updated data-* key\");\n  assert.equal(div.data(\"foo-bar\"), \"d\", \"Verify updated data-* key\");\n  assert.equal(div.data(\"fooBar\"), \"d\", \"Verify updated data-* key (fooBar)\");\n  assert.equal(div.data(\"foo-bar\"), \"d\", \"Verify updated data-* key (foo-bar)\");\n  div.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data should not miss preset data-* w/ hyphenated property names","suites":["data"],"line":423,"code":"QUnit.test(\".data should not miss preset data-* w/ hyphenated property names\", function (assert) {\n  assert.expect(2);\n  var div = jQuery(\"<div></div>\", {\n      id: \"hyphened\"\n    }).appendTo(\"#qunit-fixture\"),\n    test = {\n      \"camelBar\": \"camelBar\",\n      \"hyphen-foo\": \"hyphen-foo\"\n    };\n  div.data(test);\n  jQuery.each(test, function (i, k) {\n    assert.equal(div.data(k), k, \"data with property '\" + k + \"' was correctly found\");\n  });\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.data should not miss data-* w/ hyphenated property names trac-14047","suites":["data"],"line":437,"code":"QUnit.test(\"jQuery.data should not miss data-* w/ hyphenated property names trac-14047\", function (assert) {\n  assert.expect(1);\n  var div = jQuery(\"<div></div>\");\n  div.data(\"foo-bar\", \"baz\");\n  assert.equal(jQuery.data(div[0], \"foo-bar\"), \"baz\", \"data with property 'foo-bar' was correctly found\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data should not miss attr() set data-* with hyphenated property names","suites":["data"],"line":443,"code":"QUnit.test(\".data should not miss attr() set data-* with hyphenated property names\", function (assert) {\n  assert.expect(2);\n  var a, b;\n  a = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n  a.attr(\"data-long-param\", \"test\");\n  a.data(\"long-param\", {\n    a: 2\n  });\n  assert.deepEqual(a.data(\"long-param\"), {\n    a: 2\n  }, \"data with property long-param was found, 1\");\n  b = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n  b.attr(\"data-long-param\", \"test\");\n  b.data(\"long-param\");\n  b.data(\"long-param\", {\n    a: 2\n  });\n  assert.deepEqual(b.data(\"long-param\"), {\n    a: 2\n  }, \"data with property long-param was found, 2\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data always sets data with the camelCased key (gh-2257)","suites":["data"],"line":464,"code":"QUnit.test(\".data always sets data with the camelCased key (gh-2257)\", function (assert) {\n  assert.expect(18);\n  var div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\"),\n    datas = {\n      \"non-empty\": {\n        key: \"nonEmpty\",\n        value: \"a string\"\n      },\n      \"empty-string\": {\n        key: \"emptyString\",\n        value: \"\"\n      },\n      \"one-value\": {\n        key: \"oneValue\",\n        value: 1\n      },\n      \"zero-value\": {\n        key: \"zeroValue\",\n        value: 0\n      },\n      \"an-array\": {\n        key: \"anArray\",\n        value: []\n      },\n      \"an-object\": {\n        key: \"anObject\",\n        value: {}\n      },\n      \"bool-true\": {\n        key: \"boolTrue\",\n        value: true\n      },\n      \"bool-false\": {\n        key: \"boolFalse\",\n        value: false\n      },\n      \"some-json\": {\n        key: \"someJson\",\n        value: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n      }\n    };\n  jQuery.each(datas, function (key, val) {\n    div.data(key, val.value);\n    var allData = div.data();\n    assert.equal(allData[key], undefined, \".data does not store with hyphenated keys\");\n    assert.equal(allData[val.key], val.value, \".data stores the camelCased key\");\n  });\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data should not strip more than one hyphen when camelCasing (gh-2070)","suites":["data"],"line":512,"code":"QUnit.test(\".data should not strip more than one hyphen when camelCasing (gh-2070)\", function (assert) {\n  assert.expect(3);\n  var div = jQuery(\"<div data-nested-single='single' data-nested--double='double' data-nested---triple='triple'></div>\").appendTo(\"#qunit-fixture\"),\n    allData = div.data();\n  assert.equal(allData.nestedSingle, \"single\", \"Key is correctly camelCased\");\n  assert.equal(allData[\"nested-Double\"], \"double\", \"Key with double hyphens is correctly camelCased\");\n  assert.equal(allData[\"nested--Triple\"], \"triple\", \"Key with triple hyphens is correctly camelCased\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values","suites":["data"],"line":520,"code":"QUnit.test(\".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function (assert) {\n  var div = jQuery(\"<div></div>\", {\n      id: \"hyphened\"\n    }).appendTo(\"#qunit-fixture\"),\n    datas = {\n      \"non-empty\": {\n        key: \"nonEmpty\",\n        value: \"a string\"\n      },\n      \"empty-string\": {\n        key: \"emptyString\",\n        value: \"\"\n      },\n      \"one-value\": {\n        key: \"oneValue\",\n        value: 1\n      },\n      \"zero-value\": {\n        key: \"zeroValue\",\n        value: 0\n      },\n      \"an-array\": {\n        key: \"anArray\",\n        value: []\n      },\n      \"an-object\": {\n        key: \"anObject\",\n        value: {}\n      },\n      \"bool-true\": {\n        key: \"boolTrue\",\n        value: true\n      },\n      \"bool-false\": {\n        key: \"boolFalse\",\n        value: false\n      },\n      \"some-json\": {\n        key: \"someJson\",\n        value: \"{ \\\"foo\\\": \\\"bar\\\" }\"\n      },\n      \"num-1-middle\": {\n        key: \"num-1Middle\",\n        value: true\n      },\n      \"num-end-2\": {\n        key: \"numEnd-2\",\n        value: true\n      },\n      \"2-num-start\": {\n        key: \"2NumStart\",\n        value: true\n      },\n      // Vendor prefixes are not treated in a special way.\n      \"-ms-foo\": {\n        key: \"MsFoo\",\n        value: true\n      },\n      \"-moz-foo\": {\n        key: \"MozFoo\",\n        value: true\n      },\n      \"-webkit-foo\": {\n        key: \"WebkitFoo\",\n        value: true\n      },\n      \"-fake-foo\": {\n        key: \"FakeFoo\",\n        value: true\n      }\n    };\n  assert.expect(32);\n  jQuery.each(datas, function (key, val) {\n    div.data(key, val.value);\n    assert.deepEqual(div.data(key), val.value, \"get: \" + key);\n    assert.deepEqual(div.data(val.key), val.value, \"get: \" + val.key);\n  });\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data supports interoperable removal of hyphenated/camelCase properties","suites":["data"],"line":598,"code":"QUnit.test(\".data supports interoperable removal of hyphenated/camelCase properties\", function (assert) {\n  var div = jQuery(\"<div></div>\", {\n      id: \"hyphened\"\n    }).appendTo(\"#qunit-fixture\"),\n    rdashAlpha = /-([a-z])/g,\n    datas = {\n      \"non-empty\": \"a string\",\n      \"empty-string\": \"\",\n      \"one-value\": 1,\n      \"zero-value\": 0,\n      \"an-array\": [],\n      \"an-object\": {},\n      \"bool-true\": true,\n      \"bool-false\": false,\n      \"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n    };\n  assert.expect(27);\n  function fcamelCase(all, letter) {\n    return letter.toUpperCase();\n  }\n  jQuery.each(datas, function (key, val) {\n    div.data(key, val);\n    assert.deepEqual(div.data(key), val, \"get: \" + key);\n    assert.deepEqual(div.data(key.replace(rdashAlpha, fcamelCase)), val, \"get: \" + key.replace(rdashAlpha, fcamelCase));\n    div.removeData(key);\n    assert.equal(div.data(key), undefined, \"get: \" + key);\n  });\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data supports interoperable removal of properties SET TWICE trac-13850","suites":["data"],"line":626,"code":"QUnit.test(\".data supports interoperable removal of properties SET TWICE trac-13850\", function (assert) {\n  var div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\"),\n    datas = {\n      \"non-empty\": \"a string\",\n      \"empty-string\": \"\",\n      \"one-value\": 1,\n      \"zero-value\": 0,\n      \"an-array\": [],\n      \"an-object\": {},\n      \"bool-true\": true,\n      \"bool-false\": false,\n      \"some-json\": \"{ \\\"foo\\\": \\\"bar\\\" }\"\n    };\n  assert.expect(9);\n  jQuery.each(datas, function (key, val) {\n    div.data(key, val);\n    div.data(key, val);\n    div.removeData(key);\n    assert.equal(div.data(key), undefined, \"removal: \" + key);\n  });\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".removeData supports removal of hyphenated properties via array (trac-12786, gh-2257)","suites":["data"],"line":647,"code":"QUnit.test(\".removeData supports removal of hyphenated properties via array (trac-12786, gh-2257)\", function (assert) {\n  assert.expect(4);\n  var div, plain, compare;\n  div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n  plain = jQuery({});\n\n  // Properties should always be camelCased\n  compare = {\n    // From batch assignment .data({ \"a-a\": 1 })\n    \"aA\": 1,\n    // From property, value assignment .data( \"b-b\", 1 )\n    \"bB\": 1\n  };\n\n  // Mixed assignment\n  div.data({\n    \"a-a\": 1\n  }).data(\"b-b\", 1);\n  plain.data({\n    \"a-a\": 1\n  }).data(\"b-b\", 1);\n  assert.deepEqual(div.data(), compare, \"Data appears as expected. (div)\");\n  assert.deepEqual(plain.data(), compare, \"Data appears as expected. (plain)\");\n  div.removeData([\"a-a\", \"b-b\"]);\n  plain.removeData([\"a-a\", \"b-b\"]);\n  assert.deepEqual(div.data(), {}, \"Data is empty. (div)\");\n  assert.deepEqual(plain.data(), {}, \"Data is empty. (plain)\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".removeData should not throw exceptions. (trac-10080)","suites":["data"],"line":677,"code":"QUnit.test(\".removeData should not throw exceptions. (trac-10080)\", function (assert) {\n  var done = assert.async();\n  assert.expect(1);\n  var frame = jQuery(\"#loadediframe\");\n  jQuery(frame[0].contentWindow).on(\"unload\", function () {\n    assert.ok(true, \"called unload\");\n    done();\n  });\n\n  // change the url to trigger unload\n  frame.attr(\"src\", baseURL + \"iframe.html?param=true\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data only checks element attributes once. trac-8909","suites":["data"],"line":689,"code":"QUnit.test(\".data only checks element attributes once. trac-8909\", function (assert) {\n  assert.expect(2);\n  var testing = {\n      \"test\": \"testing\",\n      \"test2\": \"testing\"\n    },\n    element = jQuery(\"<div data-test='testing'>\"),\n    node = element[0];\n\n  // set an attribute using attr to ensure it\n  node.setAttribute(\"data-test2\", \"testing\");\n  assert.deepEqual(element.data(), testing, \"Sanity Check\");\n  node.setAttribute(\"data-test3\", \"testing\");\n  assert.deepEqual(element.data(), testing, \"The data didn't change even though the data-* attrs did\");\n\n  // clean up data cache\n  element.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"data-* with JSON value can have newlines","suites":["data"],"line":707,"code":"QUnit.test(\"data-* with JSON value can have newlines\", function (assert) {\n  assert.expect(1);\n  var x = jQuery(\"<div data-some='{\\n\\\"foo\\\":\\n\\t\\\"bar\\\"\\n}'></div>\");\n  assert.equal(x.data(\"some\").foo, \"bar\", \"got a JSON data- attribute with spaces\");\n  x.remove();\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data doesn't throw when calling selection is empty. trac-13551","suites":["data"],"line":713,"code":"QUnit.test(\".data doesn't throw when calling selection is empty. trac-13551\", function (assert) {\n  assert.expect(1);\n  try {\n    jQuery(null).data(\"prop\");\n    assert.ok(true, \"jQuery(null).data('prop') does not throw\");\n  } catch (e) {\n    assert.ok(false, e.message);\n  }\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"acceptData","suites":["data"],"line":722,"code":"QUnit.test(\"acceptData\", function (assert) {\n  assert.expect(10);\n  var flash, pdf, form;\n  assert.equal(jQuery(document).data(\"test\", 42).data(\"test\"), 42, \"document\");\n  assert.equal(jQuery(document.documentElement).data(\"test\", 42).data(\"test\"), 42, \"documentElement\");\n  assert.equal(jQuery({}).data(\"test\", 42).data(\"test\"), 42, \"object\");\n  assert.equal(jQuery(document.createElement(\"embed\")).data(\"test\", 42).data(\"test\"), 42, \"embed\");\n  flash = document.createElement(\"object\");\n  flash.setAttribute(\"classid\", \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\");\n  assert.equal(jQuery(flash).data(\"test\", 42).data(\"test\"), 42, \"flash\");\n  pdf = document.createElement(\"object\");\n  pdf.setAttribute(\"classid\", \"clsid:CA8A9780-280D-11CF-A24D-444553540000\");\n  assert.equal(jQuery(pdf).data(\"test\", 42).data(\"test\"), 42, \"pdf\");\n  assert.strictEqual(jQuery(document.createComment(\"\")).data(\"test\", 42).data(\"test\"), undefined, \"comment\");\n  assert.strictEqual(jQuery(document.createTextNode(\"\")).data(\"test\", 42).data(\"test\"), undefined, \"text\");\n  assert.strictEqual(jQuery(document.createDocumentFragment()).data(\"test\", 42).data(\"test\"), undefined, \"documentFragment\");\n  form = jQuery(\"#form\").append(\"<input id='nodeType'/><input id='nodeName'/>\")[0];\n  assert.equal(jQuery(form).data(\"test\", 42).data(\"test\"), 42, \"form with aliased DOM properties\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"Check proper data removal of non-element descendants nodes (trac-8335)","suites":["data"],"line":741,"code":"QUnit.test(\"Check proper data removal of non-element descendants nodes (trac-8335)\", function (assert) {\n  assert.expect(1);\n  var div = jQuery(\"<div>text</div>\"),\n    text = div.contents();\n  text.data(\"test\", \"test\"); // This should be a noop.\n  div.remove();\n  assert.ok(!text.data(\"test\"), \"Be sure data is not stored in non-element\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"Check that the expando is removed when there's no more data","suites":["data"],"line":753,"code":"QUnit.test(\"Check that the expando is removed when there's no more data\", function (assert) {\n  assert.expect(2);\n  var key,\n    div = jQuery(\"<div></div>\");\n  div.data(\"some\", \"data\");\n  assert.equal(div.data(\"some\"), \"data\", \"Data is added\");\n  div.removeData(\"some\");\n\n  // Make sure the expando is gone\n  for (key in div[0]) {\n    if (/^jQuery/.test(key)) {\n      assert.strictEqual(div[0][key], undefined, \"Expando was not removed when there was no more data\");\n    }\n  }\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"Check that the expando is removed when there's no more data on non-nodes","suites":["data"],"line":768,"code":"QUnit.test(\"Check that the expando is removed when there's no more data on non-nodes\", function (assert) {\n  assert.expect(1);\n  var key,\n    obj = jQuery({\n      key: 42\n    });\n  obj.data(\"some\", \"data\");\n  assert.equal(obj.data(\"some\"), \"data\", \"Data is added\");\n  obj.removeData(\"some\");\n\n  // Make sure the expando is gone\n  for (key in obj[0]) {\n    if (/^jQuery/.test(key)) {\n      assert.ok(false, \"Expando was not removed when there was no more data\");\n    }\n  }\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":".data(prop) does not create expando","suites":["data"],"line":785,"code":"QUnit.test(\".data(prop) does not create expando\", function (assert) {\n  assert.expect(1);\n  var key,\n    div = jQuery(\"<div></div>\");\n  div.data(\"foo\");\n  assert.equal(jQuery.hasData(div[0]), false, \"No data exists after access\");\n\n  // Make sure no expando has been added\n  for (key in div[0]) {\n    if (/^jQuery/.test(key)) {\n      assert.ok(false, \"Expando was created on access\");\n    }\n  }\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"keys matching Object.prototype properties  (gh-3256)","suites":["data"],"line":799,"code":"QUnit.test(\"keys matching Object.prototype properties  (gh-3256)\", function (assert) {\n  assert.expect(2);\n  var div = jQuery(\"<div></div>\");\n  assert.strictEqual(div.data(\"hasOwnProperty\"), undefined, \"hasOwnProperty not matched (before forced data creation)\");\n\n  // Force the creation of a data object for this element.\n  div.data({\n    foo: \"bar\"\n  });\n  assert.strictEqual(div.data(\"hasOwnProperty\"), undefined, \"hasOwnProperty not matched (after forced data creation)\");\n});","file":"unit/data.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred - chainability","suites":["deferred"],"line":73,"code":"  QUnit.test(\"jQuery.Deferred - chainability\", function (assert) {\n    var defer = jQuery.Deferred();\n    assert.expect(10);\n    jQuery.expandedEach = jQuery.each;\n    jQuery.expandedEach(\"resolve reject notify resolveWith rejectWith notifyWith done fail progress always\".split(\" \"), function (_, method) {\n      var object = {\n        m: defer[method]\n      };\n      assert.strictEqual(object.m(), object, method + \" is chainable\");\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - filtering (done)","suites":["deferred"],"line":84,"code":"  QUnit.test(\"jQuery.Deferred.then - filtering (done)\", function (assert) {\n    assert.expect(4);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(function (a, b) {\n        return a * b;\n      }),\n      done = jQuery.map(new Array(3), function () {\n        return assert.async();\n      });\n    piped.done(function (result) {\n      value3 = result;\n    });\n    defer.done(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.resolve(2, 3).then(function () {\n      assert.strictEqual(value1, 2, \"first resolve value ok\");\n      assert.strictEqual(value2, 3, \"second resolve value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done.pop().call();\n    });\n    jQuery.Deferred().reject().then(function () {\n      assert.ok(false, \"then should not be called on reject\");\n    }).then(null, done.pop());\n    jQuery.Deferred().resolve().then(jQuery.noop).done(function (value) {\n      assert.strictEqual(value, undefined, \"then done callback can return undefined/null\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - filtering (fail)","suites":["deferred"],"line":117,"code":"  QUnit.test(\"jQuery.Deferred.then - filtering (fail)\", function (assert) {\n    assert.expect(4);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(null, function (a, b) {\n        return a * b;\n      }),\n      done = jQuery.map(new Array(3), function () {\n        return assert.async();\n      });\n    piped.done(function (result) {\n      value3 = result;\n    });\n    defer.fail(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.reject(2, 3).then(null, function () {\n      assert.strictEqual(value1, 2, \"first reject value ok\");\n      assert.strictEqual(value2, 3, \"second reject value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve().then(null, function () {\n      assert.ok(false, \"then should not be called on resolve\");\n    }).then(done.pop());\n    jQuery.Deferred().reject().then(null, jQuery.noop).done(function (value) {\n      assert.strictEqual(value, undefined, \"then fail callback can return undefined/null\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.catch","suites":["deferred"],"line":150,"code":"  QUnit.test(\"jQuery.Deferred.catch\", function (assert) {\n    assert.expect(4);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.catch(function (a, b) {\n        return a * b;\n      }),\n      done = jQuery.map(new Array(3), function () {\n        return assert.async();\n      });\n    piped.done(function (result) {\n      value3 = result;\n    });\n    defer.fail(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.reject(2, 3).catch(function () {\n      assert.strictEqual(value1, 2, \"first reject value ok\");\n      assert.strictEqual(value2, 3, \"second reject value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve().catch(function () {\n      assert.ok(false, \"then should not be called on resolve\");\n    }).then(done.pop());\n    jQuery.Deferred().reject().catch(jQuery.noop).done(function (value) {\n      assert.strictEqual(value, undefined, \"then fail callback can return undefined/null\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"[PIPE ONLY] jQuery.Deferred.pipe - filtering (fail)","suites":["deferred"],"line":183,"code":"  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - filtering (fail)\", function (assert) {\n    assert.expect(4);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.pipe(null, function (a, b) {\n        return a * b;\n      }),\n      done = jQuery.map(new Array(3), function () {\n        return assert.async();\n      });\n    piped.fail(function (result) {\n      value3 = result;\n    });\n    defer.fail(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.reject(2, 3).pipe(null, function () {\n      assert.strictEqual(value1, 2, \"first reject value ok\");\n      assert.strictEqual(value2, 3, \"second reject value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve().pipe(null, function () {\n      assert.ok(false, \"then should not be called on resolve\");\n    }).then(done.pop());\n    jQuery.Deferred().reject().pipe(null, jQuery.noop).fail(function (value) {\n      assert.strictEqual(value, undefined, \"then fail callback can return undefined/null\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - filtering (progress)","suites":["deferred"],"line":216,"code":"  QUnit.test(\"jQuery.Deferred.then - filtering (progress)\", function (assert) {\n    assert.expect(3);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(null, null, function (a, b) {\n        return a * b;\n      }),\n      done = assert.async();\n    piped.progress(function (result) {\n      value3 = result;\n    });\n    defer.progress(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.notify(2, 3).then(null, null, function () {\n      assert.strictEqual(value1, 2, \"first progress value ok\");\n      assert.strictEqual(value2, 3, \"second progress value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - deferred (done)","suites":["deferred"],"line":240,"code":"  QUnit.test(\"jQuery.Deferred.then - deferred (done)\", function (assert) {\n    assert.expect(3);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(function (a, b) {\n        return jQuery.Deferred(function (defer) {\n          defer.reject(a * b);\n        });\n      }),\n      done = assert.async();\n    piped.fail(function (result) {\n      value3 = result;\n    });\n    defer.done(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.resolve(2, 3);\n    piped.fail(function () {\n      assert.strictEqual(value1, 2, \"first resolve value ok\");\n      assert.strictEqual(value2, 3, \"second resolve value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - deferred (fail)","suites":["deferred"],"line":267,"code":"  QUnit.test(\"jQuery.Deferred.then - deferred (fail)\", function (assert) {\n    assert.expect(3);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(null, function (a, b) {\n        return jQuery.Deferred(function (defer) {\n          defer.resolve(a * b);\n        });\n      }),\n      done = assert.async();\n    piped.done(function (result) {\n      value3 = result;\n    });\n    defer.fail(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.reject(2, 3);\n    piped.done(function () {\n      assert.strictEqual(value1, 2, \"first reject value ok\");\n      assert.strictEqual(value2, 3, \"second reject value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - deferred (progress)","suites":["deferred"],"line":294,"code":"  QUnit.test(\"jQuery.Deferred.then - deferred (progress)\", function (assert) {\n    assert.expect(3);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.then(null, null, function (a, b) {\n        return jQuery.Deferred(function (defer) {\n          defer.resolve(a * b);\n        });\n      }),\n      done = assert.async();\n    piped.progress(function (result) {\n      return jQuery.Deferred().resolve().then(function () {\n        return result;\n      }).then(function (result) {\n        value3 = result;\n      });\n    });\n    defer.progress(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.notify(2, 3);\n    piped.then(null, null, function (result) {\n      return jQuery.Deferred().resolve().then(function () {\n        return result;\n      }).then(function () {\n        assert.strictEqual(value1, 2, \"first progress value ok\");\n        assert.strictEqual(value2, 3, \"second progress value ok\");\n        assert.strictEqual(value3, 6, \"result of filter ok\");\n        done();\n      });\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"[PIPE ONLY] jQuery.Deferred.pipe - deferred (progress)","suites":["deferred"],"line":329,"code":"  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - deferred (progress)\", function (assert) {\n    assert.expect(3);\n    var value1,\n      value2,\n      value3,\n      defer = jQuery.Deferred(),\n      piped = defer.pipe(null, null, function (a, b) {\n        return jQuery.Deferred(function (defer) {\n          defer.resolve(a * b);\n        });\n      }),\n      done = assert.async();\n    piped.done(function (result) {\n      value3 = result;\n    });\n    defer.progress(function (a, b) {\n      value1 = a;\n      value2 = b;\n    });\n    defer.notify(2, 3);\n    piped.done(function () {\n      assert.strictEqual(value1, 2, \"first progress value ok\");\n      assert.strictEqual(value2, 3, \"second progress value ok\");\n      assert.strictEqual(value3, 6, \"result of filter ok\");\n      done();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - context","suites":["deferred"],"line":356,"code":"  QUnit.test(\"jQuery.Deferred.then - context\", function (assert) {\n    assert.expect(11);\n    var defer,\n      piped,\n      defer2,\n      piped2,\n      context = {\n        custom: true\n      },\n      done = jQuery.map(new Array(5), function () {\n        return assert.async();\n      });\n    jQuery.Deferred().resolveWith(context, [2]).then(function (value) {\n      assert.strictEqual(this, context, \"custom context received by .then handler\");\n      return value * 3;\n    }).done(function (value) {\n      assert.notStrictEqual(this, context, \"custom context not propagated through .then handler\");\n      assert.strictEqual(value, 6, \"proper value received\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolveWith(context, [2]).then().done(function (value) {\n      assert.strictEqual(this, context, \"custom context propagated through .then without handler\");\n      assert.strictEqual(value, 2, \"proper value received\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve().then(function () {\n      assert.strictEqual(this, window, \"default context in .then handler\");\n      return jQuery.Deferred().resolveWith(context);\n    }).done(function () {\n      assert.strictEqual(this, context, \"custom context of returned deferred correctly propagated\");\n      done.pop().call();\n    });\n    defer = jQuery.Deferred();\n    piped = defer.then(function (value) {\n      return value * 3;\n    });\n    defer.resolve(2);\n    piped.done(function (value) {\n      assert.strictEqual(this, window, \".then handler does not introduce context\");\n      assert.strictEqual(value, 6, \"proper value received\");\n      done.pop().call();\n    });\n    defer2 = jQuery.Deferred();\n    piped2 = defer2.then();\n    defer2.resolve(2);\n    piped2.done(function (value) {\n      assert.strictEqual(this, window, \".then without handler does not introduce context\");\n      assert.strictEqual(value, 2, \"proper value received (without passing function)\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"[PIPE ONLY] jQuery.Deferred.pipe - context","suites":["deferred"],"line":407,"code":"  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - context\", function (assert) {\n    assert.expect(11);\n    var defer,\n      piped,\n      defer2,\n      piped2,\n      context = {\n        custom: true\n      },\n      done = jQuery.map(new Array(5), function () {\n        return assert.async();\n      });\n    jQuery.Deferred().resolveWith(context, [2]).pipe(function (value) {\n      assert.strictEqual(this, context, \"custom context received by .pipe handler\");\n      return value * 3;\n    }).done(function (value) {\n      assert.strictEqual(this, context, \"[PIPE ONLY] custom context propagated through .pipe handler\");\n      assert.strictEqual(value, 6, \"proper value received\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolveWith(context, [2]).pipe().done(function (value) {\n      assert.strictEqual(this, context, \"[PIPE ONLY] custom context propagated through .pipe without handler\");\n      assert.strictEqual(value, 2, \"proper value received\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve().pipe(function () {\n      assert.strictEqual(this, window, \"default context in .pipe handler\");\n      return jQuery.Deferred().resolveWith(context);\n    }).done(function () {\n      assert.strictEqual(this, context, \"custom context of returned deferred correctly propagated\");\n      done.pop().call();\n    });\n    defer = jQuery.Deferred();\n    piped = defer.pipe(function (value) {\n      return value * 3;\n    });\n    defer.resolve(2);\n    piped.done(function (value) {\n      assert.strictEqual(this, window, \".pipe handler does not introduce context\");\n      assert.strictEqual(value, 6, \"proper value received\");\n      done.pop().call();\n    });\n    defer2 = jQuery.Deferred();\n    piped2 = defer2.pipe();\n    defer2.resolve(2);\n    piped2.done(function (value) {\n      assert.strictEqual(this, window, \".pipe without handler does not introduce context\");\n      assert.strictEqual(value, 2, \"proper value received (without passing function)\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - spec compatibility","suites":["deferred"],"line":458,"code":"  QUnit.test(\"jQuery.Deferred.then - spec compatibility\", function (assert) {\n    assert.expect(1);\n    var done = assert.async(),\n      defer = jQuery.Deferred();\n    defer.done(function () {\n      setTimeout(done);\n      throw new Error();\n    });\n    defer.then(function () {\n      assert.ok(true, \"errors in .done callbacks don't stop .then handlers\");\n    });\n    try {\n      defer.resolve();\n    } catch (_) {}\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.exceptionHook","suites":["deferred"],"line":484,"code":"  QUnit.test(\"jQuery.Deferred.exceptionHook\", function (assert) {\n    assert.expect(2);\n    var done = assert.async(),\n      defer = jQuery.Deferred(),\n      oldWarn = window.console.warn;\n    window.console.warn = function (_intro, error) {\n      assert.ok(/barf/.test(error.message + \"\\n\" + error.stack), \"Error mentions the method: \" + error.message + \"\\n\" + error.stack);\n    };\n    jQuery.when(defer.then(function () {\n      // Should get an error\n      jQuery.barf();\n    }).then(null, jQuery.noop), defer.then(function () {\n      // Should NOT get an error\n      throw new Error(\"Make me a sandwich\");\n    }).then(null, jQuery.noop)).then(function barf() {\n      jQuery.thisDiesToo();\n    }).then(null, function () {\n      window.console.warn = oldWarn;\n      done();\n    });\n    defer.resolve();\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.exceptionHook with stack hooks","suites":["deferred"],"line":506,"code":"  QUnit.test(\"jQuery.Deferred.exceptionHook with stack hooks\", function (assert) {\n    assert.expect(2);\n    var done = assert.async(),\n      defer = jQuery.Deferred(),\n      oldWarn = window.console.warn;\n    jQuery.Deferred.getStackHook = function () {\n      // Default exceptionHook assumes the stack is in a form console.warn can log,\n      // but a custom getStackHook+exceptionHook pair could save a raw form and\n      // format it to a string only when an exception actually occurs.\n      // For the unit test we just ensure the plumbing works.\n      return \"NO STACK FOR YOU\";\n    };\n    window.console.warn = function () {\n      var msg = Array.prototype.join.call(arguments, \" \");\n      assert.ok(/cough_up_hairball/.test(msg), \"Function mentioned: \" + msg);\n      assert.ok(/NO STACK FOR YOU/.test(msg), \"Stack trace included: \" + msg);\n    };\n    defer.then(function () {\n      jQuery.cough_up_hairball();\n    }).then(null, function () {\n      window.console.warn = oldWarn;\n      delete jQuery.Deferred.getStackHook;\n      done();\n    });\n    defer.resolve();\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred - 1.x/2.x compatibility","suites":["deferred"],"line":532,"code":"  QUnit.test(\"jQuery.Deferred - 1.x/2.x compatibility\", function (assert) {\n    assert.expect(8);\n    var context = {\n        id: \"callback context\"\n      },\n      thenable = jQuery.Deferred().resolve(\"thenable fulfillment\").promise(),\n      done = jQuery.map(new Array(8), function () {\n        return assert.async();\n      });\n    thenable.unwrapped = false;\n    jQuery.Deferred().resolve(1, 2).then(function () {\n      assert.deepEqual([].slice.call(arguments), [1, 2], \".then fulfillment callbacks receive all resolution values\");\n      done.pop().call();\n    });\n    jQuery.Deferred().reject(1, 2).then(null, function () {\n      assert.deepEqual([].slice.call(arguments), [1, 2], \".then rejection callbacks receive all rejection values\");\n      done.pop().call();\n    });\n    jQuery.Deferred().notify(1, 2).then(null, null, function () {\n      assert.deepEqual([].slice.call(arguments), [1, 2], \".then progress callbacks receive all progress values\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolveWith(context).then(function () {\n      assert.deepEqual(this, context, \".then fulfillment callbacks receive context\");\n      done.pop().call();\n    });\n    jQuery.Deferred().rejectWith(context).then(null, function () {\n      assert.deepEqual(this, context, \".then rejection callbacks receive context\");\n      done.pop().call();\n    });\n    jQuery.Deferred().notifyWith(context).then(null, null, function () {\n      assert.deepEqual(this, context, \".then progress callbacks receive context\");\n      done.pop().call();\n    });\n    jQuery.Deferred().resolve(thenable).done(function (value) {\n      assert.strictEqual(value, thenable, \".done doesn't unwrap thenables\");\n      done.pop().call();\n    });\n    jQuery.Deferred().notify(thenable).then().then(null, null, function (value) {\n      assert.strictEqual(value, \"thenable fulfillment\", \".then implicit progress callbacks unwrap thenables\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred.then - progress and thenables","suites":["deferred"],"line":575,"code":"  QUnit.test(\"jQuery.Deferred.then - progress and thenables\", function (assert) {\n    assert.expect(2);\n    var trigger = jQuery.Deferred().notify(),\n      expectedProgress = [\"baz\", \"baz\"],\n      done = jQuery.map(new Array(2), function () {\n        return assert.async();\n      }),\n      failer = function (evt) {\n        return function () {\n          assert.ok(false, \"no unexpected \" + evt);\n        };\n      };\n    trigger.then(null, null, function () {\n      var notifier = jQuery.Deferred().notify(\"foo\");\n      setTimeout(function () {\n        notifier.notify(\"bar\").resolve(\"baz\");\n      });\n      return notifier;\n    }).then(failer(\"fulfill\"), failer(\"reject\"), function (v) {\n      assert.strictEqual(v, expectedProgress.shift(), \"expected progress value\");\n      done.pop().call();\n    });\n    trigger.notify();\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred - notify and resolve","suites":["deferred"],"line":599,"code":"  QUnit.test(\"jQuery.Deferred - notify and resolve\", function (assert) {\n    assert.expect(7);\n    var notifiedResolved = jQuery.Deferred().notify(\"foo\") /*xxx .resolve( \"bar\" )*/,\n      done = jQuery.map(new Array(3), function () {\n        return assert.async();\n      });\n    notifiedResolved.progress(function (v) {\n      assert.strictEqual(v, \"foo\", \"progress value\");\n    });\n    notifiedResolved.pipe().progress(function (v) {\n      assert.strictEqual(v, \"foo\", \"piped progress value\");\n    });\n    notifiedResolved.pipe(null, null, function () {\n      return \"baz\";\n    }).progress(function (v) {\n      assert.strictEqual(v, \"baz\", \"replaced piped progress value\");\n    });\n    notifiedResolved.pipe(null, null, function () {\n      return jQuery.Deferred().notify(\"baz\").resolve(\"quux\");\n    }).progress(function (v) {\n      assert.strictEqual(v, \"baz\", \"deferred replaced piped progress value\");\n    });\n    notifiedResolved.then().progress(function (v) {\n      assert.strictEqual(v, \"foo\", \"then'd progress value\");\n      done.pop().call();\n    });\n    notifiedResolved.then(null, null, function () {\n      return \"baz\";\n    }).progress(function (v) {\n      assert.strictEqual(v, \"baz\", \"replaced then'd progress value\");\n      done.pop().call();\n    });\n    notifiedResolved.then(null, null, function () {\n      return jQuery.Deferred().notify(\"baz\").resolve(\"quux\");\n    }).progress(function (v) {\n      // Progress from the surrogate deferred is ignored\n      assert.strictEqual(v, \"quux\", \"deferred replaced then'd progress value\");\n      done.pop().call();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.Deferred - resolved to a notifying deferred","suites":["deferred"],"line":639,"code":"  QUnit.test(\"jQuery.Deferred - resolved to a notifying deferred\", function (assert) {\n    assert.expect(2);\n    var deferred = jQuery.Deferred(),\n      done = assert.async(2);\n    deferred.resolve(jQuery.Deferred(function (notifyingDeferred) {\n      notifyingDeferred.notify(\"foo\", \"bar\");\n      notifyingDeferred.resolve(\"baz\", \"quux\");\n    }));\n\n    // Apply an empty then to force thenable unwrapping.\n    // See https://github.com/jquery/jquery/issues/3000 for more info.\n    deferred.then().then(function () {\n      assert.deepEqual([].slice.call(arguments), [\"baz\", \"quux\"], \"The fulfilled handler receives proper params\");\n      done();\n    }, null, function () {\n      assert.deepEqual([].slice.call(arguments), [\"foo\", \"bar\"], \"The progress handler receives proper params\");\n      done();\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when(nonThenable) - like Promise.resolve","suites":["deferred"],"line":658,"code":"  QUnit.test(\"jQuery.when(nonThenable) - like Promise.resolve\", function (assert) {\n    \"use strict\";\n\n    assert.expect(44);\n    var defaultContext = function getDefaultContext() {\n        return this;\n      }(),\n      done = assert.async(20);\n    jQuery.when().done(function (resolveValue) {\n      assert.strictEqual(arguments.length, 0, \"Resolved .done with no arguments\");\n      assert.strictEqual(this, defaultContext, \"Default .done context with no arguments\");\n    }).then(function (resolveValue) {\n      assert.strictEqual(arguments.length, 0, \"Resolved .then with no arguments\");\n      assert.strictEqual(this, defaultContext, \"Default .then context with no arguments\");\n    });\n    jQuery.each({\n      \"an empty string\": \"\",\n      \"a non-empty string\": \"some string\",\n      \"zero\": 0,\n      \"a number other than zero\": 1,\n      \"true\": true,\n      \"false\": false,\n      \"null\": null,\n      \"undefined\": undefined,\n      \"a plain object\": {},\n      \"an array\": [1, 2, 3]\n    }, function (message, value) {\n      var code = \"jQuery.when( \" + message + \" )\",\n        onFulfilled = function (method) {\n          var call = code + \".\" + method;\n          return function (resolveValue) {\n            assert.strictEqual(resolveValue, value, call + \" resolve\");\n            assert.strictEqual(this, defaultContext, call + \" context\");\n            done();\n          };\n        },\n        onRejected = function (method) {\n          var call = code + \".\" + method;\n          return function () {\n            assert.ok(false, call + \" reject\");\n            done();\n          };\n        };\n      jQuery.when(value).done(onFulfilled(\"done\")).fail(onRejected(\"done\")).then(onFulfilled(\"then\"), onRejected(\"then\"));\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when(thenable) - like Promise.resolve","suites":["deferred"],"line":704,"code":"  QUnit.test(\"jQuery.when(thenable) - like Promise.resolve\", function (assert) {\n    \"use strict\";\n\n    var customToStringThen = {\n      then: function (onFulfilled) {\n        onFulfilled();\n      }\n    };\n    if (typeof Symbol === \"function\") {\n      customToStringThen.then[Symbol.toStringTag] = \"String\";\n    }\n    var slice = [].slice,\n      sentinel = {\n        context: \"explicit\"\n      },\n      eventuallyFulfilled = jQuery.Deferred().notify(true),\n      eventuallyRejected = jQuery.Deferred().notify(true),\n      secondaryFulfilled = jQuery.Deferred().resolve(eventuallyFulfilled),\n      secondaryRejected = jQuery.Deferred().resolve(eventuallyRejected),\n      inputs = {\n        promise: Promise.resolve(true),\n        customToStringThen: customToStringThen,\n        rejectedPromise: Promise.reject(false),\n        deferred: jQuery.Deferred().resolve(true),\n        eventuallyFulfilled: eventuallyFulfilled,\n        secondaryFulfilled: secondaryFulfilled,\n        eventuallySecondaryFulfilled: jQuery.Deferred().notify(true),\n        multiDeferred: jQuery.Deferred().resolve(\"foo\", \"bar\"),\n        deferredWith: jQuery.Deferred().resolveWith(sentinel, [true]),\n        multiDeferredWith: jQuery.Deferred().resolveWith(sentinel, [\"foo\", \"bar\"]),\n        rejectedDeferred: jQuery.Deferred().reject(false),\n        eventuallyRejected: eventuallyRejected,\n        secondaryRejected: secondaryRejected,\n        eventuallySecondaryRejected: jQuery.Deferred().notify(true),\n        multiRejectedDeferred: jQuery.Deferred().reject(\"baz\", \"quux\"),\n        rejectedDeferredWith: jQuery.Deferred().rejectWith(sentinel, [false]),\n        multiRejectedDeferredWith: jQuery.Deferred().rejectWith(sentinel, [\"baz\", \"quux\"])\n      },\n      contexts = {\n        deferredWith: sentinel,\n        multiDeferredWith: sentinel,\n        rejectedDeferredWith: sentinel,\n        multiRejectedDeferredWith: sentinel\n      },\n      willSucceed = {\n        promise: [true],\n        customToStringThen: [],\n        deferred: [true],\n        eventuallyFulfilled: [true],\n        secondaryFulfilled: [true],\n        eventuallySecondaryFulfilled: [true],\n        multiDeferred: [\"foo\", \"bar\"],\n        deferredWith: [true],\n        multiDeferredWith: [\"foo\", \"bar\"]\n      },\n      willError = {\n        rejectedPromise: [false],\n        rejectedDeferred: [false],\n        eventuallyRejected: [false],\n        secondaryRejected: [false],\n        eventuallySecondaryRejected: [false],\n        multiRejectedDeferred: [\"baz\", \"quux\"],\n        rejectedDeferredWith: [false],\n        multiRejectedDeferredWith: [\"baz\", \"quux\"]\n      },\n      numCases = Object.keys(willSucceed).length + Object.keys(willError).length,\n      defaultContext = function getDefaultContext() {\n        return this;\n      }(),\n      done = assert.async(numCases * 2);\n    assert.expect(numCases * 4);\n    jQuery.each(inputs, function (message, value) {\n      var code = \"jQuery.when( \" + message + \" )\",\n        shouldResolve = willSucceed[message],\n        shouldError = willError[message],\n        context = contexts[message] || defaultContext,\n        onFulfilled = function (method) {\n          var call = code + \".\" + method;\n          return function () {\n            if (shouldResolve) {\n              assert.deepEqual(slice.call(arguments), shouldResolve, call + \" resolve\");\n              assert.strictEqual(this, context, call + \" context\");\n            } else {\n              assert.ok(false, call + \" resolve\");\n            }\n            done();\n          };\n        },\n        onRejected = function (method) {\n          var call = code + \".\" + method;\n          return function () {\n            if (shouldError) {\n              assert.deepEqual(slice.call(arguments), shouldError, call + \" reject\");\n              assert.strictEqual(this, context, call + \" context\");\n            } else {\n              assert.ok(false, call + \" reject\");\n            }\n            done();\n          };\n        };\n      jQuery.when(value).done(onFulfilled(\"done\")).fail(onRejected(\"done\")).then(onFulfilled(\"then\"), onRejected(\"then\"));\n    });\n    setTimeout(function () {\n      eventuallyFulfilled.resolve(true);\n      eventuallyRejected.reject(false);\n      inputs.eventuallySecondaryFulfilled.resolve(secondaryFulfilled);\n      inputs.eventuallySecondaryRejected.resolve(secondaryRejected);\n    }, 50);\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when(a, b) - like Promise.all","suites":["deferred"],"line":813,"code":"  QUnit.test(\"jQuery.when(a, b) - like Promise.all\", function (assert) {\n    \"use strict\";\n\n    assert.expect(196);\n    var slice = [].slice,\n      deferreds = {\n        rawValue: 1,\n        fulfilled: jQuery.Deferred().resolve(1),\n        rejected: jQuery.Deferred().reject(0),\n        eventuallyFulfilled: jQuery.Deferred().notify(true),\n        eventuallyRejected: jQuery.Deferred().notify(true),\n        fulfilledStandardPromise: Promise.resolve(1),\n        rejectedStandardPromise: Promise.reject(0)\n      },\n      willSucceed = {\n        rawValue: true,\n        fulfilled: true,\n        eventuallyFulfilled: true,\n        fulfilledStandardPromise: true\n      },\n      willError = {\n        rejected: true,\n        eventuallyRejected: true,\n        rejectedStandardPromise: true\n      },\n      defaultContext = function getDefaultContext() {\n        return this;\n      }(),\n      done = assert.async(98);\n    jQuery.each(deferreds, function (id1, v1) {\n      jQuery.each(deferreds, function (id2, v2) {\n        var code = \"jQuery.when( \" + id1 + \", \" + id2 + \" )\",\n          shouldResolve = willSucceed[id1] && willSucceed[id2],\n          shouldError = willError[id1] || willError[id2],\n          expected = shouldResolve ? [1, 1] : [0],\n          context = shouldResolve ? [defaultContext, defaultContext] : defaultContext,\n          onFulfilled = function (method) {\n            var call = code + \".\" + method;\n            return function () {\n              if (shouldResolve) {\n                assert.deepEqual(slice.call(arguments), expected, call + \" resolve\");\n                assert.deepEqual(this, context, code + \" context\");\n              } else {\n                assert.ok(false, call + \" resolve\");\n              }\n              done();\n            };\n          },\n          onRejected = function (method) {\n            var call = code + \".\" + method;\n            return function () {\n              if (shouldError) {\n                assert.deepEqual(slice.call(arguments), expected, call + \" reject\");\n                assert.deepEqual(this, context, code + \" context\");\n              } else {\n                assert.ok(false, call + \" reject\");\n              }\n              done();\n            };\n          };\n        jQuery.when(v1, v2).done(onFulfilled(\"done\")).fail(onRejected(\"done\")).then(onFulfilled(\"then\"), onRejected(\"then\"));\n      });\n    });\n    setTimeout(function () {\n      deferreds.eventuallyFulfilled.resolve(1);\n      deferreds.eventuallyRejected.reject(0);\n    }, 50);\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when - always returns a new promise","suites":["deferred"],"line":881,"code":"  QUnit.test(\"jQuery.when - always returns a new promise\", function (assert) {\n    assert.expect(42);\n    jQuery.each({\n      \"no arguments\": [],\n      \"non-thenable\": [\"foo\"],\n      \"promise\": [Promise.resolve(\"bar\")],\n      \"rejected promise\": [Promise.reject(\"bar\")],\n      \"deferred\": [jQuery.Deferred().resolve(\"baz\")],\n      \"rejected deferred\": [jQuery.Deferred().reject(\"baz\")],\n      \"multi-resolved deferred\": [jQuery.Deferred().resolve(\"qux\", \"quux\")],\n      \"multiple non-thenables\": [\"corge\", \"grault\"],\n      \"multiple deferreds\": [jQuery.Deferred().resolve(\"garply\"), jQuery.Deferred().resolve(\"waldo\")]\n    }, function (label, args) {\n      var result = jQuery.when.apply(jQuery, args);\n      assert.ok(typeof result.then === \"function\", \"Thenable returned from \" + label);\n      assert.strictEqual(result.resolve, undefined, \"Non-deferred returned from \" + label);\n      assert.strictEqual(result.promise(), result, \"Promise returned from \" + label);\n      jQuery.each(args, function (i, arg) {\n        assert.notStrictEqual(result, arg, \"Returns distinct from arg \" + i + \" of \" + label);\n        if (arg.promise) {\n          assert.notStrictEqual(result, arg.promise(), \"Returns distinct from promise of arg \" + i + \" of \" + label);\n        }\n      });\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when - notify does not affect resolved","suites":["deferred"],"line":906,"code":"  QUnit.test(\"jQuery.when - notify does not affect resolved\", function (assert) {\n    assert.expect(3);\n    var a = jQuery.Deferred().notify(1).resolve(4),\n      b = jQuery.Deferred().notify(2).resolve(5),\n      c = jQuery.Deferred().notify(3).resolve(6);\n    jQuery.when(a, b, c).done(function (a, b, c) {\n      assert.strictEqual(a, 4, \"first resolve value ok\");\n      assert.strictEqual(b, 5, \"second resolve value ok\");\n      assert.strictEqual(c, 6, \"third resolve value ok\");\n    }).fail(function () {\n      assert.ok(false, \"Error on resolve\");\n    });\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"jQuery.when(...) - opportunistically synchronous","suites":["deferred"],"line":919,"code":"  QUnit.test(\"jQuery.when(...) - opportunistically synchronous\", function (assert) {\n    assert.expect(5);\n    var when = \"before\",\n      resolved = jQuery.Deferred().resolve(true),\n      rejected = jQuery.Deferred().reject(false),\n      validate = function (label) {\n        return function () {\n          assert.equal(when, \"before\", label);\n        };\n      },\n      done = assert.async(5);\n    jQuery.when().done(validate(\"jQuery.when()\")).always(done);\n    jQuery.when(when).done(validate(\"jQuery.when(nonThenable)\")).always(done);\n    jQuery.when(resolved).done(validate(\"jQuery.when(alreadyFulfilled)\")).always(done);\n    jQuery.when(rejected).fail(validate(\"jQuery.when(alreadyRejected)\")).always(done);\n    jQuery.when(resolved, rejected).always(validate(\"jQuery.when(alreadyFulfilled, alreadyRejected)\")).always(done);\n    when = \"after\";\n  });","file":"unit/deferred.js","skipped":false,"dir":"test"},{"name":"bind/unbind","suites":["deprecated"],"line":5,"code":"  QUnit.test(\"bind/unbind\", function (assert) {\n    assert.expect(4);\n    var markup = jQuery(\"<div><p><span><b>b</b></span></p></div>\");\n    markup.find(\"b\").bind(\"click\", {\n      bindData: 19\n    }, function (e, trig) {\n      assert.equal(e.type, \"click\", \"correct event type\");\n      assert.equal(e.data.bindData, 19, \"correct trigger data\");\n      assert.equal(trig, 42, \"correct bind data\");\n      assert.equal(e.target.nodeName.toLowerCase(), \"b\", \"correct element\");\n    }).trigger(\"click\", [42]).unbind(\"click\").trigger(\"click\").remove();\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"delegate/undelegate","suites":["deprecated"],"line":17,"code":"  QUnit.test(\"delegate/undelegate\", function (assert) {\n    assert.expect(2);\n    var markup = jQuery(\"<div><p><span><b>b</b></span></p></div>\");\n    markup.delegate(\"b\", \"click\", function (e) {\n      assert.equal(e.type, \"click\", \"correct event type\");\n      assert.equal(e.target.nodeName.toLowerCase(), \"b\", \"correct element\");\n    }).find(\"b\").trigger(\"click\").end().undelegate(\"b\", \"click\").remove();\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"hover() mouseenter mouseleave","suites":["deprecated"],"line":25,"code":"  QUnit.test(\"hover() mouseenter mouseleave\", function (assert) {\n    assert.expect(1);\n    var times = 0,\n      handler1 = function () {\n        ++times;\n      },\n      handler2 = function () {\n        ++times;\n      };\n    jQuery(\"#firstp\").hover(handler1, handler2).mouseenter().mouseleave().off(\"mouseenter\", handler1).off(\"mouseleave\", handler2).hover(handler1).mouseenter().mouseleave().off(\"mouseenter mouseleave\", handler1).mouseenter().mouseleave();\n    assert.equal(times, 4, \"hover handlers fired\");\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"trigger() shortcuts","suites":["deprecated"],"line":37,"code":"  QUnit.test(\"trigger() shortcuts\", function (assert) {\n    assert.expect(5);\n    var counter,\n      clickCounter,\n      elem = jQuery(\"<li><a href='#'>Change location</a></li>\").prependTo(\"#firstUL\");\n    elem.find(\"a\").on(\"click\", function () {\n      var close = jQuery(\"spanx\", this); // same with jQuery(this).find(\"span\");\n      assert.equal(close.length, 0, \"Context element does not exist, length must be zero\");\n      assert.ok(!close[0], \"Context element does not exist, direct access to element must return undefined\");\n      return false;\n    }).click();\n\n    // manually clean up detached elements\n    elem.remove();\n    jQuery(\"#check1\").click(function () {\n      assert.ok(true, \"click event handler for checkbox gets fired twice, see trac-815\");\n    }).click();\n    counter = 0;\n    jQuery(\"#firstp\")[0].onclick = function () {\n      counter++;\n    };\n    jQuery(\"#firstp\").click();\n    assert.equal(counter, 1, \"Check that click, triggers onclick event handler also\");\n    clickCounter = 0;\n    jQuery(\"#simon1\")[0].onclick = function () {\n      clickCounter++;\n    };\n    jQuery(\"#simon1\").click();\n    assert.equal(clickCounter, 1, \"Check that click, triggers onclick event handler on an a tag also\");\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"Event aliases","suites":["deprecated"],"line":98,"code":"  QUnit.test(\"Event aliases\", function (assert) {\n    // Explicitly skipping focus/blur events due to their flakiness\n    var $elem = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\"),\n      aliases = (\"resize scroll click dblclick mousedown mouseup \" + \"mousemove mouseover mouseout mouseenter mouseleave change \" + \"select submit keydown keypress keyup contextmenu\").split(\" \");\n    assert.expect(aliases.length);\n    jQuery.each(aliases, function (i, name) {\n      // e.g. $(elem).click(...).click();\n      $elem[name](function (event) {\n        assert.equal(event.type, name, \"triggered \" + name);\n      })[name]().off(name);\n    });\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"jQuery.proxy","suites":["deprecated"],"line":110,"code":"  QUnit.test(\"jQuery.proxy\", function (assert) {\n    assert.expect(9);\n    var test2,\n      test3,\n      test4,\n      fn,\n      cb,\n      test = function () {\n        assert.equal(this, thisObject, \"Make sure that scope is set properly.\");\n      },\n      thisObject = {\n        foo: \"bar\",\n        method: test\n      };\n\n    // Make sure normal works\n    test.call(thisObject);\n\n    // Basic scoping\n    jQuery.proxy(test, thisObject)();\n\n    // Another take on it\n    jQuery.proxy(thisObject, \"method\")();\n\n    // Make sure it doesn't freak out\n    assert.equal(jQuery.proxy(null, thisObject), undefined, \"Make sure no function was returned.\");\n\n    // Partial application\n    test2 = function (a) {\n      assert.equal(a, \"pre-applied\", \"Ensure arguments can be pre-applied.\");\n    };\n    jQuery.proxy(test2, null, \"pre-applied\")();\n\n    // Partial application w/ normal arguments\n    test3 = function (a, b) {\n      assert.equal(b, \"normal\", \"Ensure arguments can be pre-applied and passed as usual.\");\n    };\n    jQuery.proxy(test3, null, \"pre-applied\")(\"normal\");\n\n    // Test old syntax\n    test4 = {\n      \"meth\": function (a) {\n        assert.equal(a, \"boom\", \"Ensure old syntax works.\");\n      }\n    };\n    jQuery.proxy(test4, \"meth\")(\"boom\");\n\n    // jQuery 1.9 improved currying with `this` object\n    fn = function () {\n      assert.equal(Array.prototype.join.call(arguments, \",\"), \"arg1,arg2,arg3\", \"args passed\");\n      assert.equal(this.foo, \"bar\", \"this-object passed\");\n    };\n    cb = jQuery.proxy(fn, null, \"arg1\", \"arg2\");\n    cb.call(thisObject, \"arg3\");\n  });","file":"unit/deprecated.js","skipped":false,"dir":"test"},{"name":"width()","suites":["dimensions"],"line":65,"code":"  QUnit.test(\"width()\", function (assert) {\n    testWidth(pass, assert);\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width(Function)","suites":["dimensions"],"line":68,"code":"  QUnit.test(\"width(Function)\", function (assert) {\n    testWidth(fn, assert);\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width(Function(args))","suites":["dimensions"],"line":71,"code":"  QUnit.test(\"width(Function(args))\", function (assert) {\n    assert.expect(2);\n    var $div = jQuery(\"#nothiddendiv\");\n    $div.width(30).width(function (i, width) {\n      assert.equal(width, 30, \"Make sure previous value is correct.\");\n      return width + 1;\n    });\n    assert.equal($div.width(), 31, \"Make sure value was modified correctly.\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"height()","suites":["dimensions"],"line":117,"code":"  QUnit.test(\"height()\", function (assert) {\n    testHeight(pass, assert);\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"height(Function)","suites":["dimensions"],"line":120,"code":"  QUnit.test(\"height(Function)\", function (assert) {\n    testHeight(fn, assert);\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"height(Function(args))","suites":["dimensions"],"line":123,"code":"  QUnit.test(\"height(Function(args))\", function (assert) {\n    assert.expect(2);\n    var $div = jQuery(\"#nothiddendiv\");\n    $div.height(30).height(function (i, height) {\n      assert.equal(height, 30, \"Make sure previous value is correct.\");\n      return height + 1;\n    });\n    assert.equal($div.height(), 31, \"Make sure value was modified correctly.\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"innerWidth()","suites":["dimensions"],"line":132,"code":"  QUnit.test(\"innerWidth()\", function (assert) {\n    assert.expect(7);\n    var $div,\n      div,\n      $win = jQuery(window),\n      $doc = jQuery(document);\n    assert.equal(jQuery(window).innerWidth(), $win.width(), \"Test on window\");\n    assert.equal(jQuery(document).innerWidth(), $doc.width(), \"Test on document\");\n    assert.strictEqual(jQuery().innerWidth(), undefined, \"Test on empty set\");\n    $div = jQuery(\"#nothiddendiv\");\n    $div.css({\n      \"margin\": 10,\n      \"border\": \"2px solid #fff\",\n      \"width\": 30\n    });\n    assert.equal($div.innerWidth(), 30, \"Test with margin and border\");\n    $div.css(\"padding\", \"20px\");\n    assert.equal($div.innerWidth(), 70, \"Test with margin, border and padding\");\n    $div.css(\"display\", \"none\");\n    assert.equal($div.innerWidth(), 70, \"Test hidden div\");\n\n    // reset styles\n    $div.css({\n      \"display\": \"\",\n      \"border\": \"\",\n      \"padding\": \"\",\n      \"width\": \"\",\n      \"height\": \"\"\n    });\n    div = jQuery(\"<div>\");\n\n    // Temporarily require 0 for backwards compat - should be auto\n    assert.equal(div.innerWidth(), 0, \"Make sure that disconnected nodes are handled.\");\n    div.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"innerHeight()","suites":["dimensions"],"line":167,"code":"  QUnit.test(\"innerHeight()\", function (assert) {\n    assert.expect(7);\n    var $div,\n      div,\n      $win = jQuery(window),\n      $doc = jQuery(document);\n    assert.equal(jQuery(window).innerHeight(), $win.height(), \"Test on window\");\n    assert.equal(jQuery(document).innerHeight(), $doc.height(), \"Test on document\");\n    assert.strictEqual(jQuery().innerHeight(), undefined, \"Test on empty set\");\n    $div = jQuery(\"#nothiddendiv\");\n    $div.css({\n      \"margin\": 10,\n      \"border\": \"2px solid #fff\",\n      \"height\": 30\n    });\n    assert.equal($div.innerHeight(), 30, \"Test with margin and border\");\n    $div.css(\"padding\", \"20px\");\n    assert.equal($div.innerHeight(), 70, \"Test with margin, border and padding\");\n    $div.css(\"display\", \"none\");\n    assert.equal($div.innerHeight(), 70, \"Test hidden div\");\n\n    // reset styles\n    $div.css({\n      \"display\": \"\",\n      \"border\": \"\",\n      \"padding\": \"\",\n      \"width\": \"\",\n      \"height\": \"\"\n    });\n    div = jQuery(\"<div>\");\n\n    // Temporarily require 0 for backwards compat - should be auto\n    assert.equal(div.innerHeight(), 0, \"Make sure that disconnected nodes are handled.\");\n    div.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"outerWidth()","suites":["dimensions"],"line":202,"code":"  QUnit.test(\"outerWidth()\", function (assert) {\n    assert.expect(12);\n    var $div,\n      div,\n      $win = jQuery(window),\n      $doc = jQuery(document),\n      winwidth = $win.prop(\"innerWidth\");\n    assert.equal(jQuery(window).outerWidth(), winwidth, \"Test on window without margin option\");\n    assert.equal(jQuery(window).outerWidth(true), winwidth, \"Test on window with margin option\");\n    assert.equal(jQuery(document).outerWidth(), $doc.width(), \"Test on document without margin option\");\n    assert.equal(jQuery(document).outerWidth(true), $doc.width(), \"Test on document with margin option\");\n    assert.strictEqual(jQuery().outerWidth(), undefined, \"Test on empty set\");\n    $div = jQuery(\"#nothiddendiv\");\n    $div.css(\"width\", 30);\n    assert.equal($div.outerWidth(), 30, \"Test with only width set\");\n    $div.css(\"padding\", \"20px\");\n    assert.equal($div.outerWidth(), 70, \"Test with padding\");\n    $div.css(\"border\", \"2px solid #fff\");\n    assert.equal($div.outerWidth(), 74, \"Test with padding and border\");\n    $div.css(\"margin\", \"10px\");\n    assert.equal($div.outerWidth(), 74, \"Test with padding, border and margin without margin option\");\n    $div.css(\"position\", \"absolute\");\n    assert.equal($div.outerWidth(true), 94, \"Test with padding, border and margin with margin option\");\n    $div.css(\"display\", \"none\");\n    assert.equal($div.outerWidth(true), 94, \"Test hidden div with padding, border and margin with margin option\");\n\n    // reset styles\n    $div.css({\n      \"position\": \"\",\n      \"display\": \"\",\n      \"border\": \"\",\n      \"padding\": \"\",\n      \"width\": \"\",\n      \"height\": \"\"\n    });\n    div = jQuery(\"<div>\");\n\n    // Temporarily require 0 for backwards compat - should be auto\n    assert.equal(div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\");\n    div.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"outerHeight()","suites":["dimensions"],"line":243,"code":"  QUnit.test(\"outerHeight()\", function (assert) {\n    assert.expect(12);\n    var $div,\n      div,\n      $win = jQuery(window),\n      $doc = jQuery(document),\n      winheight = $win.prop(\"innerHeight\");\n    assert.equal(jQuery(window).outerHeight(), winheight, \"Test on window without margin option\");\n    assert.equal(jQuery(window).outerHeight(true), winheight, \"Test on window with margin option\");\n    assert.equal(jQuery(document).outerHeight(), $doc.height(), \"Test on document without margin option\");\n    assert.equal(jQuery(document).outerHeight(true), $doc.height(), \"Test on document with margin option\");\n    assert.strictEqual(jQuery().outerHeight(), undefined, \"Test on empty set\");\n    $div = jQuery(\"#nothiddendiv\");\n    $div.css(\"height\", 30);\n    assert.equal($div.outerHeight(), 30, \"Test with only height set\");\n    $div.css(\"padding\", \"20px\");\n    assert.equal($div.outerHeight(), 70, \"Test with padding\");\n    $div.css(\"border\", \"2px solid #fff\");\n    assert.equal($div.outerHeight(), 74, \"Test with padding and border\");\n    $div.css(\"margin\", \"10px\");\n    assert.equal($div.outerHeight(), 74, \"Test with padding, border and margin without margin option\");\n    $div.css(\"position\", \"absolute\");\n    assert.equal($div.outerHeight(true), 94, \"Test with padding, border and margin with margin option\");\n    $div.css(\"display\", \"none\");\n    assert.equal($div.outerHeight(true), 94, \"Test hidden div with padding, border and margin with margin option\");\n\n    // reset styles\n    $div.css({\n      \"position\": \"\",\n      \"display\": \"\",\n      \"border\": \"\",\n      \"padding\": \"\",\n      \"width\": \"\",\n      \"height\": \"\"\n    });\n    div = jQuery(\"<div>\");\n\n    // Temporarily require 0 for backwards compat - should be auto\n    assert.equal(div.outerWidth(), 0, \"Make sure that disconnected nodes are handled.\");\n    div.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-9441 trac-9300","suites":["dimensions"],"line":284,"code":"  QUnit.test(\"child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-9441 trac-9300\", function (assert) {\n    assert.expect(16);\n\n    // setup html\n    var $divNormal = jQuery(\"<div>\").css({\n        \"width\": \"100px\",\n        \"height\": \"100px\",\n        \"border\": \"10px solid white\",\n        \"padding\": \"2px\",\n        \"margin\": \"3px\"\n      }),\n      $divChild = $divNormal.clone(),\n      $divUnconnected = $divNormal.clone(),\n      $divHiddenParent = jQuery(\"<div>\").css(\"display\", \"none\").append($divChild).appendTo(\"body\");\n    $divNormal.appendTo(\"body\");\n\n    // tests that child div of a hidden div works the same as a normal div\n    assert.equal($divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see trac-9441\");\n    assert.equal($divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see trac-9441\");\n    assert.equal($divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see trac-9441\");\n    assert.equal($divChild.outerWidth(true), $divNormal.outerWidth(true), \"child of a hidden element outerWidth( true ) is wrong see trac-9300\");\n    assert.equal($divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see trac-9441\");\n    assert.equal($divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see trac-9441\");\n    assert.equal($divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see trac-9441\");\n    assert.equal($divChild.outerHeight(true), $divNormal.outerHeight(true), \"child of a hidden element outerHeight( true ) is wrong see trac-9300\");\n\n    // tests that child div of an unconnected div works the same as a normal div\n    assert.equal($divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see trac-9441\");\n    assert.equal($divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see trac-9441\");\n    assert.equal($divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see trac-9441\");\n    assert.equal($divUnconnected.outerWidth(true), $divNormal.outerWidth(true), \"unconnected element outerWidth( true ) is wrong see trac-9300\");\n    assert.equal($divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see trac-9441\");\n    assert.equal($divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see trac-9441\");\n    assert.equal($divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see trac-9441\");\n    assert.equal($divUnconnected.outerHeight(true), $divNormal.outerHeight(true), \"unconnected element outerHeight( true ) is wrong see trac-9300\");\n\n    // teardown html\n    $divHiddenParent.remove();\n    $divNormal.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"getting dimensions shouldn't modify runtimeStyle see trac-9233","suites":["dimensions"],"line":324,"code":"  QUnit.test(\"getting dimensions shouldn't modify runtimeStyle see trac-9233\", function (assert) {\n    assert.expect(1);\n    var $div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\"),\n      div = $div.get(0),\n      runtimeStyle = div.runtimeStyle;\n    if (runtimeStyle) {\n      div.runtimeStyle.marginLeft = \"12em\";\n      div.runtimeStyle.left = \"11em\";\n    }\n    $div.outerWidth(true);\n    if (runtimeStyle) {\n      assert.equal(div.runtimeStyle.left, \"11em\", \"getting dimensions modifies runtimeStyle, see trac-9233\");\n    } else {\n      assert.ok(true, \"this browser doesn't support runtimeStyle, see trac-9233\");\n    }\n    $div.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"table dimensions","suites":["dimensions"],"line":341,"code":"  QUnit.test(\"table dimensions\", function (assert) {\n    assert.expect(2);\n    var table = jQuery(\"<table><colgroup><col></col><col></col></colgroup><tbody><tr><td></td><td>a</td></tr><tr><td></td><td>a</td></tr></tbody></table>\").appendTo(\"#qunit-fixture\"),\n      tdElem = table.find(\"td\").first(),\n      colElem = table.find(\"col\").first().width(300);\n    table.find(\"td\").css({\n      \"margin\": 0,\n      \"padding\": 0\n    });\n    assert.equal(tdElem.width(), tdElem.width(), \"width() doesn't alter dimension values of empty cells, see trac-11293\");\n    assert.equal(colElem.width(), 300, \"col elements have width(), see trac-12243\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"SVG dimensions (basic content-box)","suites":["dimensions"],"line":353,"code":"  QUnit.test(\"SVG dimensions (basic content-box)\", function (assert) {\n    assert.expect(8);\n    var svg = jQuery(\"<svg style='width: 100px; height: 100px;'></svg>\").appendTo(\"#qunit-fixture\");\n    assert.equal(svg.width(), 100);\n    assert.equal(svg.height(), 100);\n    assert.equal(svg.innerWidth(), 100);\n    assert.equal(svg.innerHeight(), 100);\n    assert.equal(svg.outerWidth(), 100);\n    assert.equal(svg.outerHeight(), 100);\n    assert.equal(svg.outerWidth(true), 100);\n    assert.equal(svg.outerHeight(true), 100);\n    svg.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"SVG dimensions (content-box)","suites":["dimensions"],"line":366,"code":"  QUnit.test(\"SVG dimensions (content-box)\", function (assert) {\n    assert.expect(8);\n    var svg = jQuery(\"<svg style='width: 100px; height: 100px; box-sizing: content-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\").appendTo(\"#qunit-fixture\");\n    assert.equal(svg.width(), 100);\n    assert.equal(svg.height(), 100);\n    assert.equal(svg.innerWidth(), 104);\n    assert.equal(svg.innerHeight(), 104);\n    assert.equal(svg.outerWidth(), 106);\n    assert.equal(svg.outerHeight(), 106);\n    assert.equal(svg.outerWidth(true), 112);\n    assert.equal(svg.outerHeight(true), 112);\n    svg.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"SVG dimensions (border-box)","suites":["dimensions"],"line":379,"code":"  QUnit.test(\"SVG dimensions (border-box)\", function (assert) {\n    assert.expect(8);\n    var svg = jQuery(\"<svg style='width: 100px; height: 100px; box-sizing: border-box; border: 1px solid white; padding: 2px; margin: 3px'></svg>\").appendTo(\"#qunit-fixture\");\n    assert.equal(svg.width(), 94, \"width\");\n    assert.equal(svg.height(), 94, \"height\");\n    assert.equal(svg.innerWidth(), 98, \"innerWidth\");\n    assert.equal(svg.innerHeight(), 98, \"innerHeight\");\n    assert.equal(svg.outerWidth(), 100, \"outerWidth\");\n    assert.equal(svg.outerHeight(), 100, \"outerHeight\");\n    assert.equal(svg.outerWidth(true), 106, \"outerWidth( true )\");\n    assert.equal(svg.outerHeight(true), 106, \"outerHeight( true )\");\n    svg.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-10413","suites":["dimensions"],"line":392,"code":"  QUnit.test(\"box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see trac-10413\", function (assert) {\n    assert.expect(16);\n\n    // setup html\n    var $divNormal = jQuery(\"<div>\").css({\n        \"boxSizing\": \"border-box\",\n        \"width\": \"100px\",\n        \"height\": \"100px\",\n        \"border\": \"10px solid white\",\n        \"padding\": \"2px\",\n        \"margin\": \"3px\"\n      }),\n      $divChild = $divNormal.clone(),\n      $divUnconnected = $divNormal.clone(),\n      $divHiddenParent = jQuery(\"<div>\").css(\"display\", \"none\").append($divChild).appendTo(\"body\");\n    $divNormal.appendTo(\"body\");\n\n    // tests that child div of a hidden div works the same as a normal div\n    assert.equal($divChild.width(), $divNormal.width(), \"child of a hidden element width() is wrong see trac-10413\");\n    assert.equal($divChild.innerWidth(), $divNormal.innerWidth(), \"child of a hidden element innerWidth() is wrong see trac-10413\");\n    assert.equal($divChild.outerWidth(), $divNormal.outerWidth(), \"child of a hidden element outerWidth() is wrong see trac-10413\");\n    assert.equal($divChild.outerWidth(true), $divNormal.outerWidth(true), \"child of a hidden element outerWidth( true ) is wrong see trac-10413\");\n    assert.equal($divChild.height(), $divNormal.height(), \"child of a hidden element height() is wrong see trac-10413\");\n    assert.equal($divChild.innerHeight(), $divNormal.innerHeight(), \"child of a hidden element innerHeight() is wrong see trac-10413\");\n    assert.equal($divChild.outerHeight(), $divNormal.outerHeight(), \"child of a hidden element outerHeight() is wrong see trac-10413\");\n    assert.equal($divChild.outerHeight(true), $divNormal.outerHeight(true), \"child of a hidden element outerHeight( true ) is wrong see trac-10413\");\n\n    // tests that child div of an unconnected div works the same as a normal div\n    assert.equal($divUnconnected.width(), $divNormal.width(), \"unconnected element width() is wrong see trac-10413\");\n    assert.equal($divUnconnected.innerWidth(), $divNormal.innerWidth(), \"unconnected element innerWidth() is wrong see trac-10413\");\n    assert.equal($divUnconnected.outerWidth(), $divNormal.outerWidth(), \"unconnected element outerWidth() is wrong see trac-10413\");\n    assert.equal($divUnconnected.outerWidth(true), $divNormal.outerWidth(true), \"unconnected element outerWidth( true ) is wrong see trac-10413\");\n    assert.equal($divUnconnected.height(), $divNormal.height(), \"unconnected element height() is wrong see trac-10413\");\n    assert.equal($divUnconnected.innerHeight(), $divNormal.innerHeight(), \"unconnected element innerHeight() is wrong see trac-10413\");\n    assert.equal($divUnconnected.outerHeight(), $divNormal.outerHeight(), \"unconnected element outerHeight() is wrong see trac-10413\");\n    assert.equal($divUnconnected.outerHeight(true), $divNormal.outerHeight(true), \"unconnected element outerHeight( true ) is wrong see trac-10413\");\n\n    // teardown html\n    $divHiddenParent.remove();\n    $divNormal.remove();\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"passing undefined is a setter trac-5571","suites":["dimensions"],"line":433,"code":"  QUnit.test(\"passing undefined is a setter trac-5571\", function (assert) {\n    assert.expect(4);\n    assert.equal(jQuery(\"#nothiddendiv\").height(30).height(undefined).height(), 30, \".height(undefined) is chainable (trac-5571)\");\n    assert.equal(jQuery(\"#nothiddendiv\").height(30).innerHeight(undefined).height(), 30, \".innerHeight(undefined) is chainable (trac-5571)\");\n    assert.equal(jQuery(\"#nothiddendiv\").height(30).outerHeight(undefined).height(), 30, \".outerHeight(undefined) is chainable (trac-5571)\");\n    assert.equal(jQuery(\"#nothiddendiv\").width(30).width(undefined).width(), 30, \".width(undefined) is chainable (trac-5571)\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"setters with and without box-sizing:border-box","suites":["dimensions"],"line":440,"code":"  QUnit.test(\"setters with and without box-sizing:border-box\", function (assert) {\n    assert.expect(120);\n    var parent = jQuery(\"#foo\").css({\n        width: \"200px\",\n        height: \"200px\",\n        \"font-size\": \"16px\"\n      }),\n      el_bb = jQuery(\"<div style='margin:5px;padding:1px;border:2px solid black;box-sizing:border-box;'></div>\").appendTo(parent),\n      el = jQuery(\"<div style='margin:5px;padding:1px;border:2px solid black;'></div>\").appendTo(parent),\n      el_bb_np = jQuery(\"<div style='margin:5px; padding:0px; border:0px solid green;box-sizing:border-box;'></div>\").appendTo(parent),\n      el_np = jQuery(\"<div style='margin:5px; padding:0px; border:0px solid green;'></div>\").appendTo(parent);\n    jQuery.each({\n      \"number\": {\n        set: 100,\n        expected: 100\n      },\n      \"em\": {\n        set: \"10em\",\n        expected: 160\n      },\n      \"percentage\": {\n        set: \"50%\",\n        expected: 100\n      }\n    }, function (units, values) {\n      assert.equal(el_bb.width(values.set).width(), values.expected, \"test border-box width(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.innerWidth(values.set).width(), values.expected - 2, \"test border-box innerWidth(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.outerWidth(values.set).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.outerWidth(values.set, false).width(), values.expected - 6, \"test border-box outerWidth(\" + units + \", false) by roundtripping\");\n      assert.equal(el_bb.outerWidth(values.set, true).width(), values.expected - 16, \"test border-box outerWidth(\" + units + \", true) by roundtripping\");\n      assert.equal(el_bb.height(values.set).height(), values.expected, \"test border-box height(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.innerHeight(values.set).height(), values.expected - 2, \"test border-box innerHeight(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.outerHeight(values.set).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \") by roundtripping\");\n      assert.equal(el_bb.outerHeight(values.set, false).height(), values.expected - 6, \"test border-box outerHeight(\" + units + \", false) by roundtripping\");\n      assert.equal(el_bb.outerHeight(values.set, true).height(), values.expected - 16, \"test border-box outerHeight(\" + units + \", true) by roundtripping\");\n      assert.equal(el.width(values.set).width(), values.expected, \"test non-border-box width(\" + units + \") by roundtripping\");\n      assert.equal(el.innerWidth(values.set).width(), values.expected - 2, \"test non-border-box innerWidth(\" + units + \") by roundtripping\");\n      assert.equal(el.outerWidth(values.set).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \") by roundtripping\");\n      assert.equal(el.outerWidth(values.set, false).width(), values.expected - 6, \"test non-border-box outerWidth(\" + units + \", false) by roundtripping\");\n      assert.equal(el.outerWidth(values.set, true).width(), values.expected - 16, \"test non-border-box outerWidth(\" + units + \", true) by roundtripping\");\n      assert.equal(el.height(values.set).height(), values.expected, \"test non-border-box height(\" + units + \") by roundtripping\");\n      assert.equal(el.innerHeight(values.set).height(), values.expected - 2, \"test non-border-box innerHeight(\" + units + \") by roundtripping\");\n      assert.equal(el.outerHeight(values.set).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \") by roundtripping\");\n      assert.equal(el.outerHeight(values.set, false).height(), values.expected - 6, \"test non-border-box outerHeight(\" + units + \", false) by roundtripping\");\n      assert.equal(el.outerHeight(values.set, true).height(), values.expected - 16, \"test non-border-box outerHeight(\" + units + \", true) by roundtripping\");\n      assert.equal(el_bb_np.width(values.set).width(), values.expected, \"test border-box width and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.innerWidth(values.set).width(), values.expected, \"test border-box innerWidth and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.outerWidth(values.set).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.outerWidth(values.set, false).width(), values.expected, \"test border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\");\n      assert.equal(el_bb_np.outerWidth(values.set, true).width(), values.expected - 10, \"test border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\");\n      assert.equal(el_bb_np.height(values.set).height(), values.expected, \"test border-box height  and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.innerHeight(values.set).height(), values.expected, \"test border-box innerHeight and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.outerHeight(values.set).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_bb_np.outerHeight(values.set, false).height(), values.expected, \"test border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\");\n      assert.equal(el_bb_np.outerHeight(values.set, true).height(), values.expected - 10, \"test border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\");\n      assert.equal(el_np.width(values.set).width(), values.expected, \"test non-border-box width  and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.innerWidth(values.set).width(), values.expected, \"test non-border-box innerWidth and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.outerWidth(values.set).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.outerWidth(values.set, false).width(), values.expected, \"test non-border-box outerWidth and negative padding(\" + units + \", false) by roundtripping\");\n      assert.equal(el_np.outerWidth(values.set, true).width(), values.expected - 10, \"test non-border-box outerWidth and negative padding(\" + units + \", true) by roundtripping\");\n      assert.equal(el_np.height(values.set).height(), values.expected, \"test non-border-box height and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.innerHeight(values.set).height(), values.expected, \"test non-border-box innerHeight and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.outerHeight(values.set).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \") by roundtripping\");\n      assert.equal(el_np.outerHeight(values.set, false).height(), values.expected, \"test non-border-box outerHeight and negative padding(\" + units + \", false) by roundtripping\");\n      assert.equal(el_np.outerHeight(values.set, true).height(), values.expected - 10, \"test non-border-box outerHeight and negative padding(\" + units + \", true) by roundtripping\");\n    });\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"allow modification of coordinates argument (gh-1848)","suites":["dimensions"],"line":512,"code":"  QUnit.test(\"allow modification of coordinates argument (gh-1848)\", function (assert) {\n    assert.expect(1);\n    var offsetTop,\n      element = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n    element.offset(function (index, coords) {\n      coords.top = 100;\n      return coords;\n    });\n    offsetTop = element.offset().top;\n    assert.ok(Math.abs(offsetTop - 100) < 0.02, \"coordinates are modified (got offset.top: \" + offsetTop + \")\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"outside view position (gh-2836)","suites":["dimensions"],"line":523,"code":"  QUnit.test(\"outside view position (gh-2836)\", function (assert) {\n    // This test ported from gh-2836 example\n    assert.expect(1);\n    var parent,\n      html = [\"<div id=div-gh-2836>\", \"<div></div>\", \"<div></div>\", \"<div></div>\", \"<div></div>\", \"<div></div>\", \"</div>\"].join(\"\"),\n      stop = assert.async();\n    parent = jQuery(html);\n    parent.appendTo(\"#qunit-fixture\");\n    parent.one(\"scroll\", function () {\n      var pos = parent.find(\"div\").eq(3).position();\n      assert.strictEqual(pos.top, -100);\n      stop();\n    });\n    parent.scrollTop(400);\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width/height on element with transform (gh-3193)","suites":["dimensions"],"line":538,"code":"  QUnit.test(\"width/height on element with transform (gh-3193)\", function (assert) {\n    assert.expect(2);\n    var $elem = jQuery(\"<div style='width: 200px; height: 200px; transform: scale(2);'></div>\").appendTo(\"#qunit-fixture\");\n    assert.equal($elem.width(), 200, \"Width ignores transforms\");\n    assert.equal($elem.height(), 200, \"Height ignores transforms\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width/height on an inline element with no explicitly-set dimensions (gh-3571)","suites":["dimensions"],"line":544,"code":"  QUnit.test(\"width/height on an inline element with no explicitly-set dimensions (gh-3571)\", function (assert) {\n    assert.expect(8);\n    var $elem = jQuery(\"<span style='border: 2px solid black;padding: 1px;margin: 3px;'>Hello, I'm some text.</span>\").appendTo(\"#qunit-fixture\");\n    jQuery.each([\"Width\", \"Height\"], function (i, method) {\n      var val = $elem[method.toLowerCase()]();\n      assert.notEqual(val, 0, method + \" should not be zero on inline element.\");\n      assert.equal($elem[\"inner\" + method](), val + 2, \"inner\" + method + \" should include padding\");\n      assert.equal($elem[\"outer\" + method](), val + 6, \"outer\" + method + \" should include padding and border\");\n      assert.equal($elem[\"outer\" + method](true), val + 12, \"outer\" + method + \"(true) should include padding, border, and margin\");\n    });\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width/height on an inline element with percentage dimensions (gh-3611)","suites":["dimensions"],"line":555,"code":"  QUnit.test(\"width/height on an inline element with percentage dimensions (gh-3611)\", function (assert) {\n    assert.expect(4);\n    jQuery(\"<div id='gh3611' style='width: 100px;'>\" + \"<span style='width: 100%; padding: 0 5px'>text</span>\" + \"</div>\").appendTo(\"#qunit-fixture\");\n    var $elem = jQuery(\"#gh3611 span\"),\n      actualWidth = $elem[0].getBoundingClientRect().width,\n      marginWidth = $elem.outerWidth(true),\n      borderWidth = $elem.outerWidth(),\n      paddingWidth = $elem.innerWidth(),\n      contentWidth = $elem.width();\n    assert.equal(Math.round(borderWidth), Math.round(actualWidth), \".outerWidth(): \" + borderWidth + \" approximates \" + actualWidth);\n    assert.equal(marginWidth, borderWidth, \".outerWidth(true) matches .outerWidth()\");\n    assert.equal(paddingWidth, borderWidth, \".innerWidth() matches .outerWidth()\");\n    assert.equal(contentWidth, borderWidth - 10, \".width() excludes padding\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"width/height on a table row with phantom borders (gh-3698)","suites":["dimensions"],"line":569,"code":"  QUnit.test(\"width/height on a table row with phantom borders (gh-3698)\", function (assert) {\n    assert.expect(4);\n    jQuery(\"<table id='gh3698' style='border-collapse: separate; border-spacing: 0;'><tbody>\" + \"<tr style='margin: 0; border: 10px solid black; padding: 0'>\" + \"<td style='margin: 0; border: 0; padding: 0; height: 42px; width: 42px;'></td>\" + \"</tr>\" + \"</tbody></table>\").appendTo(\"#qunit-fixture\");\n    var $elem = jQuery(\"#gh3698 tr\");\n    jQuery.each([\"Width\", \"Height\"], function (i, method) {\n      assert.equal($elem[\"outer\" + method](), 42, \"outer\" + method + \" should match content dimensions\");\n      assert.equal($elem[\"outer\" + method](true), 42, \"outer\" + method + \"(true) should match content dimensions\");\n    });\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"interaction with scrollbars (gh-3589)","suites":["dimensions"],"line":578,"code":"  QUnit.test(\"interaction with scrollbars (gh-3589)\", function (assert) {\n    assert.expect(48);\n    var i,\n      suffix = \"\",\n      updater = function (adjustment) {\n        return function (i, old) {\n          return old + adjustment;\n        };\n      },\n      parent = jQuery(\"<div></div>\").css({\n        position: \"absolute\",\n        width: \"1000px\",\n        height: \"1000px\"\n      }).appendTo(\"#qunit-fixture\"),\n      // Workarounds for IE kill fractional output here.\n      fraction = document.documentMode ? 0 : 0.5,\n      borderWidth = 1,\n      padding = 2,\n      size = 100 + fraction,\n      plainBox = jQuery(\"<div></div>\").css({\n        \"box-sizing\": \"content-box\",\n        position: \"absolute\",\n        overflow: \"scroll\",\n        width: size + \"px\",\n        height: size + \"px\"\n      }),\n      contentBox = plainBox.clone().css({\n        border: borderWidth + \"px solid blue\",\n        padding: padding + \"px\"\n      }),\n      borderBox = contentBox.clone().css({\n        \"box-sizing\": \"border-box\"\n      }),\n      relativeBorderBox = borderBox.clone().css({\n        position: \"relative\"\n      }),\n      $boxes = jQuery([plainBox[0], contentBox[0], borderBox[0], relativeBorderBox[0]]).appendTo(parent);\n    for (i = 0; i < 3; i++) {\n      if (i === 1) {\n        suffix = \" after increasing inner* by \" + i;\n        size += i;\n        $boxes.innerWidth(updater(i)).innerHeight(updater(i));\n      } else if (i === 2) {\n        suffix = \" after increasing outer* by \" + i;\n        size += i;\n        $boxes.outerWidth(updater(i)).outerHeight(updater(i));\n      }\n      assert.equal(plainBox.innerWidth(), size, \"plain content-box innerWidth includes scroll gutter\" + suffix);\n      assert.equal(plainBox.innerHeight(), size, \"plain content-box innerHeight includes scroll gutter\" + suffix);\n      assert.equal(plainBox.outerWidth(), size, \"plain content-box outerWidth includes scroll gutter\" + suffix);\n      assert.equal(plainBox.outerHeight(), size, \"plain content-box outerHeight includes scroll gutter\" + suffix);\n      assert.equal(contentBox.innerWidth(), size + 2 * padding, \"content-box innerWidth includes scroll gutter\" + suffix);\n      assert.equal(contentBox.innerHeight(), size + 2 * padding, \"content-box innerHeight includes scroll gutter\" + suffix);\n      assert.equal(contentBox.outerWidth(), size + 2 * padding + 2 * borderWidth, \"content-box outerWidth includes scroll gutter\" + suffix);\n      assert.equal(contentBox.outerHeight(), size + 2 * padding + 2 * borderWidth, \"content-box outerHeight includes scroll gutter\" + suffix);\n      assert.equal(borderBox.innerWidth(), size - 2 * borderWidth, \"border-box innerWidth includes scroll gutter\" + suffix);\n      assert.equal(borderBox.innerHeight(), size - 2 * borderWidth, \"border-box innerHeight includes scroll gutter\" + suffix);\n      assert.equal(borderBox.outerWidth(), size, \"border-box outerWidth includes scroll gutter\" + suffix);\n      assert.equal(borderBox.outerHeight(), size, \"border-box outerHeight includes scroll gutter\" + suffix);\n      assert.equal(relativeBorderBox.innerWidth(), size - 2 * borderWidth, \"relative border-box innerWidth includes scroll gutter\" + suffix);\n      assert.equal(relativeBorderBox.innerHeight(), size - 2 * borderWidth, \"relative border-box innerHeight includes scroll gutter\" + suffix);\n      assert.equal(relativeBorderBox.outerWidth(), size, \"relative border-box outerWidth includes scroll gutter\" + suffix);\n      assert.equal(relativeBorderBox.outerHeight(), size, \"relative border-box outerHeight includes scroll gutter\" + suffix);\n    }\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)","suites":["dimensions"],"line":643,"code":"  QUnit.test(\"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function (assert) {\n    assert.expect(5);\n    var $table = jQuery(\"<table class='border-box' style='border-collapse: separate'></table>\").appendTo(\"#qunit-fixture\"),\n      $thead = jQuery(\"<thead></thead>\").appendTo($table),\n      $firstTh = jQuery(\"<th style='width: 200px;padding: 5px'></th>\"),\n      $secondTh = jQuery(\"<th style='width: 190px;padding: 5px'></th>\"),\n      $thirdTh = jQuery(\"<th style='width: 180px;padding: 5px'></th>\"),\n      // Most browsers completely ignore the border-box and height settings.\n      // The computed height is instead just line-height + border.\n      // Either way, what we're doing in css.js is correct.\n      $td = jQuery(\"<td style='height: 20px;padding: 5px;border: 1px solid;line-height:18px'>text</td>\"),\n      $tbody = jQuery(\"<tbody></tbody>\").appendTo($table),\n      $textarea = jQuery(\"<textarea style='height: 0;padding: 2px;border: 1px solid;box-sizing: border-box'></textarea>\").appendTo(\"#qunit-fixture\");\n    jQuery(\"<tr></tr>\").appendTo($thead).append($firstTh);\n    jQuery(\"<tr></tr>\").appendTo($thead).append($secondTh);\n    jQuery(\"<tr></tr>\").appendTo($thead).append($thirdTh);\n    jQuery(\"<tr><td></td></tr>\").appendTo($tbody).append($td);\n    assert.strictEqual($firstTh.outerWidth(), 200, \"First th has outerWidth 200.\");\n    assert.strictEqual($secondTh.outerWidth(), 200, \"Second th has outerWidth 200.\");\n    assert.strictEqual($thirdTh.outerWidth(), 200, \"Third th has outerWidth 200.\");\n    assert.strictEqual($td.outerHeight(), 30, \"outerHeight of td with border-box should include padding.\");\n    assert.strictEqual($textarea.outerHeight(), 6, \"outerHeight of textarea with border-box should include padding and border.\");\n  });","file":"unit/dimensions.js","skipped":false,"dir":"test"},{"name":"show() basic","suites":["effects"],"line":34,"code":"  QUnit.test(\"show() basic\", function (assert) {\n    assert.expect(1);\n    var div = jQuery(\"<div>\").hide().appendTo(\"#qunit-fixture\").show();\n    assert.equal(div.css(\"display\"), \"block\", \"Make sure pre-hidden divs show\");\n\n    // Clean up the detached node\n    div.remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"show()","suites":["effects"],"line":42,"code":"  QUnit.test(\"show()\", function (assert) {\n    assert.expect(27);\n    var div,\n      speeds,\n      test,\n      hiddendiv = jQuery(\"div.hidden\");\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"none\", \"hiddendiv is display: none\");\n    hiddendiv.css(\"display\", \"block\");\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"block\", \"hiddendiv is display: block\");\n    hiddendiv.show();\n    assert.equal(jQuery.css(hiddendiv[0], \"display\"), \"block\", \"hiddendiv is display: block\");\n    hiddendiv.css(\"display\", \"\");\n    div = jQuery(\"#fx-queue div\").slice(0, 4);\n    div.show().each(function () {\n      assert.notEqual(this.style.display, \"none\", \"don't change any <div> with display block\");\n    });\n    speeds = {\n      \"null speed\": null,\n      \"undefined speed\": undefined,\n      \"false speed\": false\n    };\n    jQuery.each(speeds, function (name, speed) {\n      var pass = true;\n      div.hide().show(speed).each(function () {\n        if (this.style.display === \"none\") {\n          pass = false;\n        }\n      });\n      assert.ok(pass, \"Show with \" + name);\n    });\n    jQuery.each(speeds, function (name, speed) {\n      var pass = true;\n      div.hide().show(speed, function () {\n        pass = false;\n      });\n      assert.ok(pass, \"Show with \" + name + \" does not call animate callback\");\n    });\n    jQuery(\"<div id='show-tests'>\" + \"<div><p><a href='#'></a></p><code></code><pre></pre><span></span></div>\" + \"<table><thead><tr><th></th></tr></thead><tbody><tr><td></td></tr></tbody></table>\" + \"<ul><li></li></ul></div>\").appendTo(\"#qunit-fixture\").find(\"*\").css(\"display\", \"none\");\n    test = {\n      \"div\": \"block\",\n      \"p\": \"block\",\n      \"a\": \"inline\",\n      \"code\": \"inline\",\n      \"pre\": \"block\",\n      \"span\": \"inline\",\n      \"table\": \"table\",\n      \"thead\": \"table-header-group\",\n      \"tbody\": \"table-row-group\",\n      \"tr\": \"table-row\",\n      \"th\": \"table-cell\",\n      \"td\": \"table-cell\",\n      \"ul\": \"block\",\n      \"li\": \"list-item\"\n    };\n    jQuery.each(test, function (selector, expected) {\n      var elem = jQuery(selector, \"#show-tests\").show();\n      assert.equal(elem.css(\"display\"), expected, \"Show using correct display type for \" + selector);\n    });\n    jQuery(\"#show-tests\").remove();\n\n    // Make sure that showing or hiding a text node doesn't cause an error\n    jQuery(\"<div>test</div> text <span>test</span>\").show().remove();\n    jQuery(\"<div>test</div> text <span>test</span>\").hide().remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate(Hash, Object, Function)","suites":["effects"],"line":201,"code":"  QUnit.test(\"animate(Hash, Object, Function)\", function (assert) {\n    assert.expect(1);\n    var hash = {\n        opacity: \"show\"\n      },\n      hashCopy = jQuery.extend({}, hash);\n    jQuery(\"#foo\").animate(hash, 0, function () {\n      assert.equal(hash.opacity, hashCopy.opacity, \"Check if animate changed the hash parameter\");\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate relative values","suites":["effects"],"line":211,"code":"  QUnit.test(\"animate relative values\", function (assert) {\n    var value = 40,\n      clock = this.clock,\n      bases = [\"%\", \"px\", \"em\"],\n      adjustments = [\"px\", \"em\"],\n      container = jQuery(\"<div></div>\").css({\n        position: \"absolute\",\n        height: \"50em\",\n        width: \"50em\"\n      }),\n      animations = bases.length * adjustments.length;\n    assert.expect(2 * animations);\n    jQuery.each(bases, function (_, baseUnit) {\n      jQuery.each(adjustments, function (_, adjustUnit) {\n        var base = value + baseUnit,\n          adjust = {\n            height: \"+=2\" + adjustUnit,\n            width: \"-=2\" + adjustUnit\n          },\n          elem = jQuery(\"<div></div>\").appendTo(container.clone().appendTo(\"#qunit-fixture\")).css({\n            position: \"absolute\",\n            height: base,\n            width: value + adjustUnit\n          }),\n          baseScale = elem[0].offsetHeight / value,\n          adjustScale = elem[0].offsetWidth / value;\n        elem.css(\"width\", base).animate(adjust, fxInterval * 10, function () {\n          assert.equal(this.offsetHeight, value * baseScale + 2 * adjustScale, baseUnit + \"+=\" + adjustUnit);\n          assert.equal(this.offsetWidth, value * baseScale - 2 * adjustScale, baseUnit + \"-=\" + adjustUnit);\n        });\n        clock.tick(fxInterval * 10);\n      });\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate negative height","suites":["effects"],"line":245,"code":"  QUnit.test(\"animate negative height\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#foo\").animate({\n      height: -100\n    }, fxInterval * 10, function () {\n      assert.equal(this.offsetHeight, 0, \"Verify height.\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate negative margin","suites":["effects"],"line":254,"code":"  QUnit.test(\"animate negative margin\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#foo\").animate({\n      \"marginTop\": -100\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"marginTop\"), \"-100px\", \"Verify margin.\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate negative margin with px","suites":["effects"],"line":263,"code":"  QUnit.test(\"animate negative margin with px\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#foo\").animate({\n      marginTop: \"-100px\"\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"marginTop\"), \"-100px\", \"Verify margin.\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate negative padding","suites":["effects"],"line":272,"code":"  QUnit.test(\"animate negative padding\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#foo\").animate({\n      \"paddingBottom\": -100\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"paddingBottom\"), \"0px\", \"Verify paddingBottom.\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate block as inline width/height","suites":["effects"],"line":281,"code":"  QUnit.test(\"animate block as inline width/height\", function (assert) {\n    assert.expect(3);\n    jQuery(\"#foo\").css({\n      display: \"inline\",\n      width: \"\",\n      height: \"\"\n    }).animate({\n      width: 42,\n      height: 42\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"display\"), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\");\n      assert.equal(this.offsetWidth, 42, \"width was animated\");\n      assert.equal(this.offsetHeight, 42, \"height was animated\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate native inline width/height","suites":["effects"],"line":297,"code":"  QUnit.test(\"animate native inline width/height\", function (assert) {\n    assert.expect(3);\n    jQuery(\"#foo\").css({\n      display: \"\",\n      width: \"\",\n      height: \"\"\n    }).append(\"<span>text</span>\").children(\"span\").animate({\n      width: 42,\n      height: 42\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"display\"), \"inline-block\", \"inline-block was set on non-floated inline element when animating width/height\");\n      assert.equal(this.offsetWidth, 42, \"width was animated\");\n      assert.equal(this.offsetHeight, 42, \"height was animated\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate block width/height","suites":["effects"],"line":313,"code":"  QUnit.test(\"animate block width/height\", function (assert) {\n    assert.expect(3);\n    jQuery(\"<div>\").appendTo(\"#qunit-fixture\").css({\n      display: \"block\",\n      width: 20,\n      height: 20,\n      paddingLeft: 60\n    }).animate({\n      width: 42,\n      height: 42\n    }, {\n      duration: fxInterval * 10,\n      step: function () {\n        if (jQuery(this).width() > 42) {\n          assert.ok(false, \"width was incorrectly augmented during animation\");\n        }\n      },\n      complete: function () {\n        assert.equal(jQuery(this).css(\"display\"), \"block\", \"inline-block was not set on block element when animating width/height\");\n        assert.equal(jQuery(this).width(), 42, \"width was animated\");\n        assert.equal(jQuery(this).height(), 42, \"height was animated\");\n      }\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate table width/height","suites":["effects"],"line":338,"code":"  QUnit.test(\"animate table width/height\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#table\").animate({\n      width: 42,\n      height: 42\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"display\"), \"table\", \"display mode is correct\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate table-row width/height","suites":["effects"],"line":348,"code":"  QUnit.test(\"animate table-row width/height\", function (assert) {\n    assert.expect(3);\n    var tr = jQuery(\"#table\").attr({\n      \"cellspacing\": 0,\n      \"cellpadding\": 0,\n      \"border\": 0\n    }).html(\"<tr style='height:42px;'><td style='padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\").find(\"tr\");\n    tr.animate({\n      width: 10,\n      height: 10\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"display\"), \"table-row\", \"display mode is correct\");\n      assert.equal(this.offsetWidth, 20, \"width animated to shrink wrap point\");\n      assert.equal(this.offsetHeight, 20, \"height animated to shrink wrap point\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate table-cell width/height","suites":["effects"],"line":365,"code":"  QUnit.test(\"animate table-cell width/height\", function (assert) {\n    assert.expect(3);\n    var td = jQuery(\"#table\").attr({\n      \"cellspacing\": 0,\n      \"cellpadding\": 0,\n      \"border\": 0\n    }).html(\"<tr><td style='width:42px;height:42px;padding:0;'><div style='width:20px;height:20px;'></div></td></tr>\").find(\"td\");\n    td.animate({\n      width: 10,\n      height: 10\n    }, fxInterval * 10, function () {\n      assert.equal(jQuery(this).css(\"display\"), \"table-cell\", \"display mode is correct\");\n      assert.equal(this.offsetWidth, 20, \"width animated to shrink wrap point\");\n      assert.equal(this.offsetHeight, 20, \"height animated to shrink wrap point\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate percentage(%) on width/height","suites":["effects"],"line":382,"code":"  QUnit.test(\"animate percentage(%) on width/height\", function (assert) {\n    assert.expect(2);\n    var $div = jQuery(\"<div style='position:absolute;top:-999px;left:-999px;width:60px;height:60px;'><div style='width:50%;height:50%;'></div></div>\").appendTo(\"#qunit-fixture\").children(\"div\");\n    $div.animate({\n      width: \"25%\",\n      height: \"25%\"\n    }, fxInterval, function () {\n      var $this = jQuery(this);\n      assert.equal($this.css(\"width\"), \"15px\", \"Width was animated to 15px rather than 25px\");\n      assert.equal($this.css(\"height\"), \"15px\", \"Height was animated to 15px rather than 25px\");\n    });\n    this.clock.tick(fxInterval * 1.5);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate resets overflow-x and overflow-y when finished","suites":["effects"],"line":395,"code":"  QUnit.test(\"animate resets overflow-x and overflow-y when finished\", function (assert) {\n    assert.expect(2);\n    jQuery(\"#foo\").css({\n      display: \"block\",\n      width: 20,\n      height: 20,\n      overflowX: \"visible\",\n      overflowY: \"auto\"\n    }).animate({\n      width: 42,\n      height: 42\n    }, fxInterval * 10, function () {\n      assert.equal(this.style.overflowX, \"visible\", \"overflow-x is visible\");\n      assert.equal(this.style.overflowY, \"auto\", \"overflow-y is auto\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate option { queue: false }","suites":["effects"],"line":412,"code":"  QUnit.test(\"animate option { queue: false }\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\");\n    foo.animate({\n      fontSize: \"2em\"\n    }, {\n      queue: false,\n      duration: fxInterval,\n      complete: function () {\n        assert.ok(true, \"Animation Completed\");\n      }\n    });\n    this.clock.tick(fxInterval);\n    assert.equal(foo.queue().length, 0, \"Queue is empty\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate option { queue: true }","suites":["effects"],"line":427,"code":"  QUnit.test(\"animate option { queue: true }\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\");\n    foo.animate({\n      fontSize: \"2em\"\n    }, {\n      queue: true,\n      duration: fxInterval,\n      complete: function () {\n        assert.ok(true, \"Animation Completed\");\n      }\n    });\n    assert.notEqual(foo.queue().length, 0, \"Default queue is not empty\");\n\n    //clear out existing timers before next test\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate option { queue: 'name' }","suites":["effects"],"line":444,"code":"  QUnit.test(\"animate option { queue: 'name' }\", function (assert) {\n    assert.expect(5);\n    var foo = jQuery(\"#foo\"),\n      origWidth = parseFloat(foo.css(\"width\")),\n      order = [];\n    foo.animate({\n      width: origWidth + 100\n    }, {\n      queue: \"name\",\n      duration: 1,\n      complete: function () {\n        // second callback function\n        order.push(2);\n        assert.equal(parseFloat(foo.css(\"width\")), origWidth + 100, \"Animation ended\");\n        assert.equal(foo.queue(\"name\").length, 1, \"Queue length of 'name' queue\");\n      }\n    }).queue(\"name\", function () {\n      // last callback function\n      assert.deepEqual(order, [1, 2], \"Callbacks in expected order\");\n    });\n\n    // this is the first callback function that should be called\n    order.push(1);\n    assert.equal(parseFloat(foo.css(\"width\")), origWidth, \"Animation does not start on its own.\");\n    assert.equal(foo.queue(\"name\").length, 2, \"Queue length of 'name' queue\");\n    foo.dequeue(\"name\");\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate with no properties","suites":["effects"],"line":472,"code":"  QUnit.test(\"animate with no properties\", function (assert) {\n    assert.expect(2);\n    var foo,\n      divs = jQuery(\"div\"),\n      count = 0;\n    divs.animate({}, function () {\n      count++;\n    });\n    assert.equal(divs.length, count, \"Make sure that callback is called for each element in the set.\");\n    foo = jQuery(\"#foo\");\n    foo.animate({});\n    foo.animate({\n      top: 10\n    }, fxInterval * 10, function () {\n      assert.ok(true, \"Animation was properly dequeued.\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate duration 0","suites":["effects"],"line":490,"code":"  QUnit.test(\"animate duration 0\", function (assert) {\n    assert.expect(11);\n    var $elem,\n      $elems = jQuery([{\n        a: 0\n      }, {\n        a: 0\n      }]),\n      counter = 0;\n    assert.equal(jQuery.timers.length, 0, \"Make sure no animation was running from another test\");\n    $elems.eq(0).animate({\n      a: 1\n    }, 0, function () {\n      assert.ok(true, \"Animate a simple property.\");\n      counter++;\n    });\n\n    // Failed until [6115]\n    assert.equal(jQuery.timers.length, 0, \"Make sure synchronic animations are not left on jQuery.timers\");\n    assert.equal(counter, 1, \"One synchronic animations\");\n    $elems.animate({\n      a: 2\n    }, 0, function () {\n      assert.ok(true, \"Animate a second simple property.\");\n      counter++;\n    });\n    assert.equal(counter, 3, \"Multiple synchronic animations\");\n    $elems.eq(0).animate({\n      a: 3\n    }, 0, function () {\n      assert.ok(true, \"Animate a third simple property.\");\n      counter++;\n    });\n    $elems.eq(1).animate({\n      a: 3\n    }, fxInterval * 20, function () {\n      counter++;\n\n      // Failed until [6115]\n      assert.equal(counter, 5, \"One synchronic and one asynchronic\");\n    });\n    this.clock.tick(fxInterval * 20);\n    $elem = jQuery(\"<div></div>\");\n    $elem.show(0, function () {\n      assert.ok(true, \"Show callback with no duration\");\n    });\n    $elem.hide(0, function () {\n      assert.ok(true, \"Hide callback with no duration\");\n    });\n\n    // manually clean up detached elements\n    $elem.remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate hyphenated properties","suites":["effects"],"line":543,"code":"  QUnit.test(\"animate hyphenated properties\", function (assert) {\n    assert.expect(1);\n    jQuery(\"#foo\").css(\"font-size\", 10).animate({\n      \"font-size\": 20\n    }, fxInterval * 20, function () {\n      assert.equal(this.style.fontSize, \"20px\", \"The font-size property was animated.\");\n    });\n\n    // FIXME why is this double only when run with other tests\n    this.clock.tick(fxInterval * 40);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate non-element","suites":["effects"],"line":554,"code":"  QUnit.test(\"animate non-element\", function (assert) {\n    assert.expect(1);\n    var obj = {\n      test: 0\n    };\n    jQuery(obj).animate({\n      test: 200\n    }, fxInterval * 20, function () {\n      assert.equal(obj.test, 200, \"The custom property should be modified.\");\n    });\n    this.clock.tick(fxInterval * 20);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate non-element's zIndex without appending \"px\"","suites":["effects"],"line":566,"code":"  QUnit.test(\"animate non-element's zIndex without appending \\\"px\\\"\", function (assert) {\n    assert.expect(1);\n    var obj = {\n      zIndex: 0\n    };\n    jQuery(obj).animate({\n      zIndex: 200\n    }, fxInterval * 20, function () {\n      assert.equal(obj.zIndex, 200, \"The custom property should be modified without appending \\\"px\\\".\");\n    });\n    this.clock.tick(fxInterval * 20);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"stop()","suites":["effects"],"line":578,"code":"  QUnit.test(\"stop()\", function (assert) {\n    assert.expect(4);\n    var $one,\n      $two,\n      $foo = jQuery(\"#foo\"),\n      w = 0,\n      nw;\n    $foo.hide().css(\"width\", 200).animate({\n      \"width\": \"show\"\n    }, fxInterval * 150);\n    this.clock.tick(fxInterval * 10);\n    nw = $foo.css(\"width\");\n    assert.notEqual(parseFloat(nw), w, \"An animation occurred \" + nw + \" \" + w + \"px\");\n    $foo.stop();\n    nw = $foo.css(\"width\");\n    assert.notEqual(parseFloat(nw), w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\");\n    this.clock.tick(fxInterval * 10);\n    $foo.removeData();\n    $foo.removeData(undefined, true);\n    assert.equal(nw, $foo.css(\"width\"), \"The animation didn't continue\");\n    $one = jQuery(\"#fadein\");\n    $two = jQuery(\"#show\");\n    $one.fadeTo(fxInterval * 10, 0, function () {\n      $one.stop();\n    });\n    this.clock.tick(fxInterval * 10);\n    $two.fadeTo(fxInterval * 10, 0, function () {\n      assert.equal($two.css(\"opacity\"), \"0\", \"Stop does not interfere with animations on other elements (trac-6641)\");\n\n      // Reset styles\n      $one.add($two).css(\"opacity\", \"\");\n    });\n    this.clock.tick(fxInterval * 10);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"stop() - several in queue","suites":["effects"],"line":612,"code":"  QUnit.test(\"stop() - several in queue\", function (assert) {\n    assert.expect(5);\n    var nw,\n      $foo = jQuery(\"#foo\");\n\n    // default duration is 400ms, so 800px ensures we aren't 0 or 1 after 1ms\n    $foo.hide().css(\"width\", 800);\n    $foo.animate({\n      \"width\": \"show\"\n    }, 400, \"linear\");\n    $foo.animate({\n      \"width\": \"hide\"\n    });\n    $foo.animate({\n      \"width\": \"show\"\n    });\n    this.clock.tick(1);\n    jQuery.fx.tick();\n    assert.equal($foo.queue().length, 3, \"3 in the queue\");\n    nw = $foo.css(\"width\");\n    assert.notEqual(parseFloat(nw), 1, \"An animation occurred \" + nw);\n    $foo.stop();\n    assert.equal($foo.queue().length, 2, \"2 in the queue\");\n    nw = $foo.css(\"width\");\n    assert.notEqual(parseFloat(nw), 1, \"Stop didn't reset the animation \" + nw);\n    $foo.stop(true);\n    assert.equal($foo.queue().length, 0, \"0 in the queue\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"stop(clearQueue)","suites":["effects"],"line":640,"code":"  QUnit.test(\"stop(clearQueue)\", function (assert) {\n    assert.expect(4);\n    var $foo = jQuery(\"#foo\"),\n      w = 0,\n      nw;\n    $foo.hide().css(\"width\", fxInterval * 20).css(\"width\");\n    $foo.animate({\n      \"width\": \"show\"\n    }, fxInterval * 100);\n    $foo.animate({\n      \"width\": \"hide\"\n    }, fxInterval * 100);\n    $foo.animate({\n      \"width\": \"show\"\n    }, fxInterval * 100);\n    this.clock.tick(fxInterval * 10);\n    nw = $foo.css(\"width\");\n    assert.ok(parseFloat(nw) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\");\n    $foo.stop(true);\n    nw = $foo.css(\"width\");\n    assert.ok(parseFloat(nw) !== w, \"Stop didn't reset the animation \" + nw + \" \" + w + \"px\");\n    assert.equal($foo.queue().length, 0, \"The animation queue was cleared\");\n    this.clock.tick(fxInterval * 10);\n    assert.equal(nw, $foo.css(\"width\"), \"The animation didn't continue\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"stop(clearQueue, gotoEnd)","suites":["effects"],"line":665,"code":"  QUnit.test(\"stop(clearQueue, gotoEnd)\", function (assert) {\n    assert.expect(1);\n    var $foo = jQuery(\"#foo\"),\n      w = 0,\n      nw;\n    $foo.hide().css(\"width\", fxInterval * 20).css(\"width\");\n    $foo.animate({\n      width: \"show\"\n    }, fxInterval * 100);\n    $foo.animate({\n      width: \"hide\"\n    }, fxInterval * 100);\n    $foo.animate({\n      width: \"show\"\n    }, fxInterval * 100);\n    $foo.animate({\n      width: \"hide\"\n    }, fxInterval * 100);\n    this.clock.tick(fxInterval * 10);\n    nw = $foo.css(\"width\");\n    assert.ok(parseFloat(nw) !== w, \"An animation occurred \" + nw + \" \" + w + \"px\");\n    $foo.stop(false, true);\n    nw = $foo.css(\"width\");\n\n    // Disabled, being flaky\n    //equal( nw, 1, \"Stop() reset the animation\" );\n\n    this.clock.tick(fxInterval * 10);\n\n    // Disabled, being flaky\n    //equal( $foo.queue().length, 2, \"The next animation continued\" );\n    $foo.stop(true);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"stop( queue, ..., ... ) - Stop single queues","suites":["effects"],"line":698,"code":"  QUnit.test(\"stop( queue, ..., ... ) - Stop single queues\", function (assert) {\n    assert.expect(3);\n    var saved,\n      foo = jQuery(\"#foo\").css({\n        width: 200,\n        height: 200\n      });\n    foo.animate({\n      width: 400\n    }, {\n      duration: fxInterval * 50,\n      complete: function () {\n        assert.equal(parseFloat(foo.css(\"width\")), 400, \"Animation completed for standard queue\");\n        assert.equal(parseFloat(foo.css(\"height\")), saved, \"Height was not changed after the second stop\");\n      }\n    });\n    foo.animate({\n      height: 400\n    }, {\n      duration: fxInterval * 100,\n      queue: \"height\"\n    }).dequeue(\"height\").stop(\"height\", false, true);\n    assert.equal(parseFloat(foo.css(\"height\")), 400, \"Height was stopped with gotoEnd\");\n    foo.animate({\n      height: 200\n    }, {\n      duration: fxInterval * 100,\n      queue: \"height\"\n    }).dequeue(\"height\").stop(\"height\", false, false);\n    saved = parseFloat(foo.css(\"height\"));\n    this.clock.tick(fxInterval * 50);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.fx.prototype.cur() - <1.8 Back Compat","suites":["effects"],"line":745,"code":"  QUnit.test(\"jQuery.fx.prototype.cur() - <1.8 Back Compat\", function (assert) {\n    assert.expect(7);\n    var div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").css({\n      color: \"#ABC\",\n      border: \"5px solid black\",\n      left: \"auto\",\n      marginBottom: \"-11000px\"\n    })[0];\n    assert.equal(new jQuery.fx(div, {}, \"color\").cur(), jQuery.css(div, \"color\"), \"Return the same value as jQuery.css for complex properties (bug trac-7912)\");\n    assert.strictEqual(new jQuery.fx(div, {}, \"borderLeftWidth\").cur(), 5, \"Return simple values parsed as Float\");\n\n    // backgroundPosition actually returns 0% 0% in most browser\n    // this fakes a \"\" return\n    // hook now gets called twice because Tween will grab the current\n    // value as it is being newed\n    jQuery.cssHooks.backgroundPosition = {\n      get: function () {\n        assert.ok(true, \"hook used\");\n        return \"\";\n      }\n    };\n    assert.strictEqual(new jQuery.fx(div, {}, \"backgroundPosition\").cur(), 0, \"Return 0 when jQuery.css returns an empty string\");\n    delete jQuery.cssHooks.backgroundPosition;\n    assert.strictEqual(new jQuery.fx(div, {}, \"left\").cur(), 0, \"Return 0 when jQuery.css returns 'auto'\");\n    assert.equal(new jQuery.fx(div, {}, \"marginBottom\").cur(), -11000, \"support negative values < -10000 (bug trac-7193)\");\n    jQuery(div).remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Overflow and Display","suites":["effects"],"line":772,"code":"  QUnit.test(\"Overflow and Display\", function (assert) {\n    assert.expect(4);\n    var testClass = jQuery.makeTest(\"Overflow and Display\").addClass(\"overflow inline\"),\n      testStyle = jQuery.makeTest(\"Overflow and Display (inline style)\").css({\n        overflow: \"visible\",\n        display: \"inline\"\n      }),\n      done = function () {\n        assert.equal(jQuery.css(this, \"overflow\"), \"visible\", \"Overflow should be 'visible'\");\n        assert.equal(jQuery.css(this, \"display\"), \"inline\", \"Display should be 'inline'\");\n      };\n    testClass.add(testStyle).addClass(\"widewidth\").text(\"Some sample text.\").before(\"text before\").after(\"text after\").animate({\n      opacity: 0.5\n    }, \"slow\", done);\n    this.clock.tick(600 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Effects chaining","suites":["effects"],"line":949,"code":"  QUnit.test(\"Effects chaining\", function (assert) {\n    var remaining = 16,\n      props = [\"opacity\", \"height\", \"width\", \"display\", \"overflow\"],\n      setup = function (name, selector) {\n        var $el = jQuery(selector);\n        return $el.data(getProps($el[0])).data(\"name\", name);\n      },\n      check = function () {\n        var data = jQuery.data(this),\n          name = data.name;\n        delete data.name;\n        assert.deepEqual(getProps(this), data, name);\n        jQuery.removeData(this);\n      },\n      getProps = function (el) {\n        var obj = {};\n        jQuery.each(props, function (i, prop) {\n          obj[prop] = prop === \"overflow\" && el.style[prop] || jQuery.css(el, prop);\n        });\n        return obj;\n      };\n    assert.expect(remaining);\n    setup(\".fadeOut().fadeIn()\", \"#fadein div\").fadeOut(\"fast\").fadeIn(\"fast\", check);\n    setup(\".fadeIn().fadeOut()\", \"#fadeout div\").fadeIn(\"fast\").fadeOut(\"fast\", check);\n    setup(\".hide().show()\", \"#show div\").hide(\"fast\").show(\"fast\", check);\n    setup(\".show().hide()\", \"#hide div\").show(\"fast\").hide(\"fast\", check);\n    setup(\".show().hide(easing)\", \"#easehide div\").show(\"fast\").hide(\"fast\", \"linear\", check);\n    setup(\".toggle().toggle() - in\", \"#togglein div\").toggle(\"fast\").toggle(\"fast\", check);\n    setup(\".toggle().toggle() - out\", \"#toggleout div\").toggle(\"fast\").toggle(\"fast\", check);\n    setup(\".toggle().toggle(easing) - out\", \"#easetoggleout div\").toggle(\"fast\").toggle(\"fast\", \"linear\", check);\n    setup(\".slideDown().slideUp()\", \"#slidedown div\").slideDown(\"fast\").slideUp(\"fast\", check);\n    setup(\".slideUp().slideDown()\", \"#slideup div\").slideUp(\"fast\").slideDown(\"fast\", check);\n    setup(\".slideUp().slideDown(easing)\", \"#easeslideup div\").slideUp(\"fast\").slideDown(\"fast\", \"linear\", check);\n    setup(\".slideToggle().slideToggle() - in\", \"#slidetogglein div\").slideToggle(\"fast\").slideToggle(\"fast\", check);\n    setup(\".slideToggle().slideToggle() - out\", \"#slidetoggleout div\").slideToggle(\"fast\").slideToggle(\"fast\", check);\n    setup(\".fadeToggle().fadeToggle() - in\", \"#fadetogglein div\").fadeToggle(\"fast\").fadeToggle(\"fast\", check);\n    setup(\".fadeToggle().fadeToggle() - out\", \"#fadetoggleout div\").fadeToggle(\"fast\").fadeToggle(\"fast\", check);\n    setup(\".fadeTo(0.5).fadeTo(1.0, easing)\", \"#fadeto div\").fadeTo(\"fast\", 0.5).fadeTo(\"fast\", 1.0, \"linear\", check);\n    this.clock.tick(400 + fxInterval * 2);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.show('fast') doesn't clear radio buttons (bug trac-1095)","suites":["effects"],"line":995,"code":"  QUnit.test(\"jQuery.show('fast') doesn't clear radio buttons (bug trac-1095)\", function (assert) {\n    assert.expect(4);\n    var $checkedtest = jQuery(\"#checkedtest\");\n    $checkedtest.hide().show(\"fast\", function () {\n      assert.ok(jQuery(\"input[type='radio']\", $checkedtest).first().attr(\"checked\"), \"Check first radio still checked.\");\n      assert.ok(!jQuery(\"input[type='radio']\", $checkedtest).last().attr(\"checked\"), \"Check last radio still NOT checked.\");\n      assert.ok(jQuery(\"input[type='checkbox']\", $checkedtest).first().attr(\"checked\"), \"Check first checkbox still checked.\");\n      assert.ok(!jQuery(\"input[type='checkbox']\", $checkedtest).last().attr(\"checked\"), \"Check last checkbox still NOT checked.\");\n    });\n    this.clock.tick(200 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"interrupt toggle","suites":["effects"],"line":1006,"code":"  QUnit.test(\"interrupt toggle\", function (assert) {\n    assert.expect(24);\n    var longDuration = fxInterval * 200,\n      shortDuration = fxInterval * 50,\n      remaining = 0,\n      $elems = jQuery(\".chain-test\"),\n      clock = this.clock,\n      finish = function () {};\n    jQuery.each({\n      slideToggle: \"height\",\n      fadeToggle: \"opacity\",\n      toggle: \"width\"\n    }, function (method, prop) {\n      var $methodElems = $elems.filter(\"[id^='\" + method.toLowerCase() + \"']\").each(function () {\n        // Don't end test until we're done with this element\n        remaining++;\n\n        // Save original property value for comparison\n        jQuery.data(this, \"startVal\", jQuery(this).css(prop));\n      });\n\n      // Interrupt a hiding toggle\n      $methodElems[method](longDuration);\n      setTimeout(function () {\n        $methodElems.stop().each(function () {\n          assert.notEqual(jQuery(this).css(prop), jQuery.data(this, \"startVal\"), \".stop() before completion of hiding .\" + method + \"() - #\" + this.id);\n        });\n\n        // Restore\n        $methodElems[method](shortDuration, function () {\n          var id = this.id,\n            $elem = jQuery(this),\n            startVal = $elem.data(\"startVal\");\n          $elem.removeData(\"startVal\");\n          assert.equal($elem.css(prop), startVal, \"original value restored by .\" + method + \"() - #\" + id);\n\n          // Interrupt a showing toggle\n          $elem.hide()[method](longDuration);\n          setTimeout(function () {\n            $elem.stop();\n            assert.notEqual($elem.css(prop), startVal, \".stop() before completion of showing .\" + method + \"() - #\" + id);\n\n            // Restore\n            $elem[method](shortDuration, function () {\n              assert.equal($elem.css(prop), startVal, \"original value restored by .\" + method + \"() - #\" + id);\n              finish();\n            });\n          }, shortDuration);\n        });\n      }, shortDuration);\n    });\n    clock.tick(longDuration);\n\n    // FIXME untangle the set timeouts\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate with per-property easing","suites":["effects"],"line":1062,"code":"  QUnit.test(\"animate with per-property easing\", function (assert) {\n    assert.expect(5);\n    var data = {\n        a: 0,\n        b: 0,\n        c: 0\n      },\n      test1Called = false,\n      test2Called = false,\n      defaultTestCalled = false,\n      props = {\n        a: [100, \"_test1\"],\n        b: [100, \"_test2\"],\n        c: 100\n      };\n    jQuery.easing._test1 = function (p) {\n      test1Called = true;\n      return p;\n    };\n    jQuery.easing._test2 = function (p) {\n      test2Called = true;\n      return p;\n    };\n    jQuery.easing._defaultTest = function (p) {\n      defaultTestCalled = true;\n      return p;\n    };\n    jQuery(data).animate(props, fxInterval * 40, \"_defaultTest\", function () {\n      assert.ok(test1Called, \"Easing function (_test1) called\");\n      assert.ok(test2Called, \"Easing function (_test2) called\");\n      assert.ok(defaultTestCalled, \"Easing function (_default) called\");\n      assert.equal(props.a[1], \"_test1\", \"animate does not change original props (per-property easing would be lost)\");\n      assert.equal(props.b[1], \"_test2\", \"animate does not change original props (per-property easing would be lost)\");\n    });\n    this.clock.tick(fxInterval * 40);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate with CSS shorthand properties","suites":["effects"],"line":1098,"code":"  QUnit.test(\"animate with CSS shorthand properties\", function (assert) {\n    assert.expect(11);\n    var easeAnimation_count = 0,\n      easeProperty_count = 0,\n      propsBasic = {\n        \"padding\": \"10 20 30\"\n      },\n      propsSpecial = {\n        \"padding\": [\"1 2 3\", \"propertyScope\"]\n      };\n    jQuery.easing.animationScope = function (p) {\n      if (p >= 1) {\n        easeAnimation_count++;\n      }\n      return p;\n    };\n    jQuery.easing.propertyScope = function (p) {\n      if (p >= 1) {\n        easeProperty_count++;\n      }\n      return p;\n    };\n    jQuery(\"#foo\").animate(propsBasic, fxInterval * 20, \"animationScope\", function () {\n      assert.equal(this.style.paddingTop, \"10px\", \"padding-top was animated\");\n      assert.equal(this.style.paddingLeft, \"20px\", \"padding-left was animated\");\n      assert.equal(this.style.paddingRight, \"20px\", \"padding-right was animated\");\n      assert.equal(this.style.paddingBottom, \"30px\", \"padding-bottom was animated\");\n      assert.equal(easeAnimation_count, 4, \"per-animation default easing called for each property\");\n      easeAnimation_count = 0;\n    }).animate(propsSpecial, fxInterval * 20, \"animationScope\", function () {\n      assert.equal(this.style.paddingTop, \"1px\", \"padding-top was animated again\");\n      assert.equal(this.style.paddingLeft, \"2px\", \"padding-left was animated again\");\n      assert.equal(this.style.paddingRight, \"2px\", \"padding-right was animated again\");\n      assert.equal(this.style.paddingBottom, \"3px\", \"padding-bottom was animated again\");\n      assert.equal(easeAnimation_count, 0, \"per-animation default easing not called\");\n      assert.equal(easeProperty_count, 4, \"special easing called for each property\");\n      jQuery(this).css(\"padding\", \"0\");\n      delete jQuery.easing.animationScope;\n      delete jQuery.easing.propertyScope;\n    });\n    this.clock.tick(fxInterval * 40);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"hide hidden elements, with animation (bug trac-7141)","suites":["effects"],"line":1140,"code":"  QUnit.test(\"hide hidden elements, with animation (bug trac-7141)\", function (assert) {\n    assert.expect(4);\n    var div = jQuery(\"<div id='bug7141' style='display:none'></div>\").appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"display\"), \"none\", \"Element is initially hidden\");\n    div.hide(10, function () {\n      assert.equal(div.css(\"display\"), \"none\", \"Element is hidden in .hide() callback\");\n      div.show(11, function () {\n        assert.equal(div.css(\"display\"), \"block\", \"Element is visible in .show() callback\");\n      });\n    });\n    this.clock.tick(50);\n    assert.equal(div.css(\"display\"), \"block\", \"Element is visible after animations\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate unit-less properties (trac-4966)","suites":["effects"],"line":1153,"code":"  QUnit.test(\"animate unit-less properties (trac-4966)\", function (assert) {\n    assert.expect(2);\n    var div = jQuery(\"<div style='z-index: 0; position: absolute;'></div>\").appendTo(\"#qunit-fixture\");\n    assert.equal(div.css(\"z-index\"), \"0\", \"z-index is 0\");\n    div.animate({\n      zIndex: 2\n    }, function () {\n      assert.equal(div.css(\"z-index\"), \"2\", \"z-index is 2\");\n    });\n    this.clock.tick(400 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate properties missing px w/ opacity as last (trac-9074)","suites":["effects"],"line":1164,"code":"  QUnit.test(\"animate properties missing px w/ opacity as last (trac-9074)\", function (assert) {\n    assert.expect(6);\n    var ml,\n      l,\n      div = jQuery(\"<div style='position: absolute; margin-left: 0; left: 0px;'></div>\").appendTo(\"#qunit-fixture\");\n    function cssInt(prop) {\n      return parseInt(div.css(prop), 10);\n    }\n    assert.equal(cssInt(\"marginLeft\"), 0, \"Margin left is 0\");\n    assert.equal(cssInt(\"left\"), 0, \"Left is 0\");\n    div.animate({\n      left: 200,\n      marginLeft: 200,\n      opacity: 0\n    }, fxInterval * 200);\n    this.clock.tick(fxInterval * 50);\n    ml = cssInt(\"marginLeft\");\n    l = cssInt(\"left\");\n    assert.notEqual(ml, 0, \"Margin left is not 0 after partial animate\");\n    assert.notEqual(ml, 200, \"Margin left is not 200 after partial animate\");\n    assert.notEqual(l, 0, \"Left is not 0 after partial animate\");\n    assert.notEqual(l, 200, \"Left is not 200 after partial animate\");\n    div.stop().remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"callbacks should fire in correct order (trac-9100)","suites":["effects"],"line":1188,"code":"  QUnit.test(\"callbacks should fire in correct order (trac-9100)\", function (assert) {\n    assert.expect(1);\n    var a = 1,\n      cb = 0;\n    jQuery(\"<p data-operation='*2'></p><p data-operation='^2'></p>\").appendTo(\"#qunit-fixture\")\n\n    // The test will always pass if no properties are animated or if the duration is 0\n    .animate({\n      fontSize: 12\n    }, fxInterval, function () {\n      a *= jQuery(this).data(\"operation\") === \"*2\" ? 2 : a;\n      cb++;\n      if (cb === 2) {\n        assert.equal(a, 4, \"test value has been *2 and _then_ ^2\");\n      }\n    });\n    this.clock.tick(fxInterval * 1.5);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"callbacks that throw exceptions will be removed (trac-5684)","suites":["effects"],"line":1206,"code":"  QUnit.test(\"callbacks that throw exceptions will be removed (trac-5684)\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\");\n    function TestException() {}\n    foo.animate({\n      height: 1\n    }, 1, function () {\n      throw new TestException();\n    });\n\n    // this test thoroughly abuses undocumented methods - please feel free to update\n    // with any changes internally to these functions.\n\n    // make sure that the standard timer loop will NOT run.\n    jQuery.fx.stop();\n    this.clock.tick(1);\n    assert.throws(jQuery.fx.tick, TestException, \"Exception was thrown\");\n\n    // the second call shouldn't\n    jQuery.fx.tick();\n    assert.ok(true, \"Test completed without throwing a second exception\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate will scale margin properties individually","suites":["effects"],"line":1228,"code":"  QUnit.test(\"animate will scale margin properties individually\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\").css({\n      \"margin\": 0,\n      \"marginLeft\": 100\n    });\n    assert.ok(foo.css(\"marginLeft\") !== foo.css(\"marginRight\"), \"Sanity Check\");\n    foo.animate({\n      \"margin\": 200\n    }).stop();\n    assert.ok(foo.css(\"marginLeft\") !== foo.css(\"marginRight\"), \"The margin properties are different\");\n\n    // clean up for next test\n    foo.css({\n      \"marginLeft\": \"\",\n      \"marginRight\": \"\",\n      \"marginTop\": \"\",\n      \"marginBottom\": \"\"\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Do not append px to 'fill-opacity' trac-9548","suites":["effects"],"line":1248,"code":"  QUnit.test(\"Do not append px to 'fill-opacity' trac-9548\", function (assert) {\n    assert.expect(1);\n    var $div = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n    $div.css(\"fill-opacity\", 0).animate({\n      \"fill-opacity\": 1.0\n    }, 0, function () {\n      assert.equal(jQuery(this).css(\"fill-opacity\"), 1, \"Do not append px to 'fill-opacity'\");\n      $div.remove();\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"line-height animates correctly (trac-13855)","suites":["effects"],"line":1258,"code":"  QUnit.test(\"line-height animates correctly (trac-13855)\", function (assert) {\n    assert.expect(12);\n    var t0,\n      clock = this.clock,\n      longDuration = fxInterval * 200,\n      shortDuration = fxInterval * 50,\n      animated = jQuery(\"<p style='line-height: 100;'>unitless</p>\" + \"<p style='line-height: 5000px;'>px</p>\" + \"<p style='line-height: 5000%;'>percent</p>\" + \"<p style='line-height: 100em;'>em</p>\").appendTo(\"#qunit-fixture\"),\n      initialHeight = jQuery.map(animated, function (el) {\n        return jQuery(el).height();\n      }),\n      tolerance = 1.5;\n\n    // Delay start to improve test stability\n    setTimeout(function () {\n      t0 = +new Date();\n      animated.animate({\n        \"line-height\": \"hide\"\n      }, longDuration, \"linear\");\n      setTimeout(function () {\n        var progress = (new Date() - t0) / longDuration;\n        animated.each(function (i) {\n          var label = jQuery.text(this),\n            initial = initialHeight[i],\n            height = jQuery(this).height(),\n            lower = initial * (1 - progress) / tolerance;\n          assert.ok(height < initial, \"hide \" + label + \": upper bound; \" + height + \" < \" + initial + \" @ \" + progress * 100 + \"%\");\n          assert.ok(height > lower, \"hide \" + label + \": lower bound; \" + height + \" > \" + lower + \" @ \" + progress * 100 + \"%\");\n        });\n        t0 = +new Date();\n        animated.stop(true, true).hide().animate({\n          \"line-height\": \"show\"\n        }, longDuration, \"linear\");\n        setTimeout(function () {\n          var progress = (new Date() - t0) / longDuration;\n          animated.each(function (i) {\n            var label = jQuery.text(this),\n              initial = initialHeight[i],\n              height = jQuery(this).height(),\n              upper = initial * progress * tolerance;\n            assert.ok(height < upper, \"show \" + label + \": upper bound; \" + height + \" < \" + upper + \" @ \" + progress * 100 + \"%\");\n          });\n          animated.stop(true, true);\n        }, shortDuration);\n        clock.tick(shortDuration);\n      }, shortDuration);\n      clock.tick(shortDuration);\n    }, fxInterval * 5);\n    clock.tick(fxInterval * 5);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.Animation( object, props, opts )","suites":["effects"],"line":1309,"code":"  QUnit.test(\"jQuery.Animation( object, props, opts )\", function (assert) {\n    assert.expect(4);\n    var animation,\n      testObject = {\n        \"foo\": 0,\n        \"bar\": 1,\n        \"width\": 100\n      },\n      testDest = {\n        \"foo\": 1,\n        \"bar\": 0,\n        \"width\": 200\n      };\n    animation = jQuery.Animation(testObject, testDest, {\n      \"duration\": 1\n    });\n    animation.done(function () {\n      for (var prop in testDest) {\n        assert.equal(testObject[prop], testDest[prop], \"Animated: \" + prop);\n      }\n      animation.done(function () {\n        assert.deepEqual(testObject, testDest, \"No unexpected properties\");\n      });\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animate Option: step: function( percent, tween )","suites":["effects"],"line":1335,"code":"  QUnit.test(\"Animate Option: step: function( percent, tween )\", function (assert) {\n    assert.expect(1);\n    var counter = {};\n    jQuery(\"#foo\").animate({\n      prop1: 1,\n      prop2: 2,\n      prop3: 3\n    }, {\n      duration: 1,\n      step: function (value, tween) {\n        var calls = counter[tween.prop] = counter[tween.prop] || [];\n\n        // in case this is called multiple times for either, lets store it in\n        // 0 or 1 in the array\n        calls[value === 0 ? 0 : 1] = value;\n      }\n    }).queue(function (next) {\n      assert.deepEqual(counter, {\n        prop1: [0, 1],\n        prop2: [0, 2],\n        prop3: [0, 3]\n      }, \"Step function was called once at 0% and once at 100% for each property\");\n      next();\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animate callbacks have correct context","suites":["effects"],"line":1361,"code":"  QUnit.test(\"Animate callbacks have correct context\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\");\n    foo.animate({\n      height: 10\n    }, fxInterval, function () {\n      assert.equal(foo[0], this, \"Complete callback after stop(true) `this` is element\");\n    }).stop(true, true);\n    foo.animate({\n      height: 100\n    }, fxInterval, function () {\n      assert.equal(foo[0], this, \"Complete callback `this` is element\");\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"User supplied callback called after show when fx off (trac-8892)","suites":["effects"],"line":1376,"code":"  QUnit.test(\"User supplied callback called after show when fx off (trac-8892)\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\");\n    jQuery.fx.off = true;\n    foo.hide();\n    foo.fadeIn(500, function () {\n      assert.ok(supportjQuery(this).is(\":visible\"), \"Element is visible in callback\");\n      foo.fadeOut(500, function () {\n        assert.ok(supportjQuery(this).is(\":hidden\"), \"Element is hidden in callback\");\n        jQuery.fx.off = false;\n      });\n    });\n    this.clock.tick(1000);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate should set display for disconnected nodes","suites":["effects"],"line":1390,"code":"  QUnit.test(\"animate should set display for disconnected nodes\", function (assert) {\n    assert.expect(20);\n    var showMethods = {\n        fadeIn: [],\n        fadeTo: [\"fast\", 0.5],\n        slideDown: [\"fast\"],\n        show: [1],\n        animate: [{\n          width: \"show\"\n        }]\n      },\n      toggleMethods = {\n        toggle: [1],\n        slideToggle: []\n      },\n      $divEmpty = jQuery(\"<div></div>\"),\n      $divTest = jQuery(\"<div>test</div>\"),\n      $divNone = jQuery(\"<div style='display: none;'></div>\"),\n      $divInline = jQuery(\"<div style='display: inline;'></div>\"),\n      nullParentDisplay = $divEmpty.css(\"display\"),\n      underFragmentDisplay = $divTest.css(\"display\"),\n      clock = this.clock;\n    assert.strictEqual($divEmpty[0].parentNode, null, \"Setup: element with null parentNode\");\n    assert.strictEqual(($divTest[0].parentNode || {}).nodeType, 11, \"Setup: element under fragment\");\n    assert.strictEqual($divEmpty.show()[0].style.display, \"\", \"set display with show() for element with null parentNode\");\n    assert.strictEqual($divTest.show()[0].style.display, \"\", \"set display with show() for element under fragment\");\n    assert.strictEqual($divNone.show()[0].style.display, \"\", \"show() should change display if it already set to none\");\n    assert.strictEqual($divInline.show()[0].style.display, \"inline\", \"show() should not change display if it already set\");\n    jQuery.each(showMethods, function (name, opt) {\n      jQuery.fn[name].apply(jQuery(\"<div></div>\"), opt.concat([function () {\n        assert.strictEqual(jQuery(this).css(\"display\"), nullParentDisplay, \".\" + name + \" block with null parentNode\");\n      }]));\n      jQuery.fn[name].apply(jQuery(\"<div>test</div>\"), opt.concat([function () {\n        assert.strictEqual(jQuery(this).css(\"display\"), underFragmentDisplay, \".\" + name + \" block under fragment\");\n      }]));\n    });\n    jQuery.each(toggleMethods, function (name, opt) {\n      jQuery.fn[name].apply(jQuery(\"<div></div>\"), opt.concat([function () {\n        assert.strictEqual(jQuery(this).css(\"display\"), \"none\", \".\" + name + \" block with null parentNode\");\n      }]));\n      jQuery.fn[name].apply(jQuery(\"<div>test</div>\"), opt.concat([function () {\n        assert.strictEqual(jQuery(this).css(\"display\"), \"none\", \".\" + name + \" block under fragment\");\n      }]));\n    });\n    clock.tick(400 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"hide called on element within hidden parent should set display to none (trac-10045)","suites":["effects"],"line":1460,"code":"  QUnit.test(\"hide called on element within hidden parent should set display to none (trac-10045)\", function (assert) {\n    assert.expect(3);\n    var hidden = jQuery(\".hidden\"),\n      elems = jQuery(\"<div>hide</div><div>hide0</div><div>hide1</div>\");\n    hidden.append(elems);\n    jQuery.when(elems.eq(0).hide(), elems.eq(1).hide(0), elems.eq(2).hide(1)).done(function () {\n      assert.strictEqual(elems.get(0).style.display, \"none\", \"hide() called on element within hidden parent should set display to none\");\n      assert.strictEqual(elems.get(1).style.display, \"none\", \"hide( 0 ) called on element within hidden parent should set display to none\");\n      assert.strictEqual(elems.get(2).style.display, \"none\", \"hide( 1 ) called on element within hidden parent should set display to none\");\n      elems.remove();\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"hide, fadeOut and slideUp called on element width height and width = 0 should set display to none","suites":["effects"],"line":1473,"code":"  QUnit.test(\"hide, fadeOut and slideUp called on element width height and width = 0 should set display to none\", function (assert) {\n    assert.expect(5);\n    var foo = jQuery(\"#foo\"),\n      i = 0,\n      elems = jQuery();\n    for (; i < 5; i++) {\n      elems = elems.add(\"<div style='width:0;height:0;'></div>\");\n    }\n    foo.append(elems);\n    jQuery.when(elems.eq(0).hide(), elems.eq(1).hide(jQuery.noop), elems.eq(2).hide(1), elems.eq(3).fadeOut(), elems.eq(4).slideUp()).done(function () {\n      assert.strictEqual(elems.get(0).style.display, \"none\", \"hide() called on element width height and width = 0 should set display to none\");\n      assert.strictEqual(elems.get(1).style.display, \"none\", \"hide( jQuery.noop ) called on element width height and width = 0 should set display to none\");\n      assert.strictEqual(elems.get(2).style.display, \"none\", \"hide( 1 ) called on element width height and width = 0 should set display to none\");\n      assert.strictEqual(elems.get(3).style.display, \"none\", \"fadeOut() called on element width height and width = 0 should set display to none\");\n      assert.strictEqual(elems.get(4).style.display, \"none\", \"slideUp() called on element width height and width = 0 should set display to none\");\n    });\n    this.clock.tick(400 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"hide should not leave hidden inline elements visible (trac-14848)","suites":["effects"],"line":1491,"code":"  QUnit.test(\"hide should not leave hidden inline elements visible (trac-14848)\", function (assert) {\n    assert.expect(2);\n    var el = jQuery(\"#simon1\");\n    el.hide(1, function () {\n      assert.equal(el.css(\"display\"), \"none\", \"hidden\");\n      el.hide(1, function () {\n        assert.equal(el.css(\"display\"), \"none\", \"still hidden\");\n      });\n    });\n    this.clock.tick(100);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Handle queue:false promises","suites":["effects"],"line":1502,"code":"  QUnit.test(\"Handle queue:false promises\", function (assert) {\n    assert.expect(10);\n    var foo = jQuery(\"#foo\").clone().addBack(),\n      step = 1;\n    foo.animate({\n      top: 1\n    }, {\n      duration: fxInterval,\n      queue: false,\n      complete: function () {\n        assert.ok(step++ <= 2, \"Step one or two\");\n      }\n    }).animate({\n      bottom: 1\n    }, {\n      duration: fxInterval,\n      complete: function () {\n        assert.ok(step > 2 && step < 5, \"Step three or four\");\n        step++;\n      }\n    });\n    this.clock.tick(fxInterval);\n    foo.promise().done(function () {\n      assert.equal(step++, 5, \"steps 1-5: queue:false then queue:fx done\");\n      foo.animate({\n        top: 10\n      }, {\n        duration: fxInterval,\n        complete: function () {\n          assert.ok(step > 5 && step < 8, \"Step six or seven\");\n          step++;\n        }\n      }).animate({\n        bottom: 10\n      }, {\n        duration: fxInterval,\n        queue: false,\n        complete: function () {\n          assert.ok(step > 7 && step < 10, \"Step eight or nine\");\n          step++;\n        }\n      }).promise().done(function () {\n        assert.equal(step++, 10, \"steps 6-10: queue:fx then queue:false\");\n      });\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"multiple unqueued and promise","suites":["effects"],"line":1549,"code":"  QUnit.test(\"multiple unqueued and promise\", function (assert) {\n    assert.expect(4);\n    var foo = jQuery(\"#foo\"),\n      step = 1;\n    foo.animate({\n      marginLeft: 300\n    }, {\n      duration: 500,\n      queue: false,\n      complete: function () {\n        assert.strictEqual(step++, 2, \"Step 2\");\n      }\n    }).animate({\n      top: 100\n    }, {\n      duration: 1000,\n      queue: false,\n      complete: function () {\n        assert.strictEqual(step++, 3, \"Step 3\");\n      }\n    }).animate({}, {\n      duration: 2000,\n      queue: false,\n      complete: function () {\n        // no properties is a non-op and finishes immediately\n        assert.strictEqual(step++, 1, \"Step 1\");\n      }\n    }).promise().done(function () {\n      assert.strictEqual(step++, 4, \"Step 4\");\n    });\n    this.clock.tick(1000 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"animate does not change start value for non-px animation (trac-7109)","suites":["effects"],"line":1581,"code":"  QUnit.test(\"animate does not change start value for non-px animation (trac-7109)\", function (assert) {\n    assert.expect(1);\n    var parent = jQuery(\"<div><div></div></div>\").css({\n        width: 284,\n        height: 1\n      }).appendTo(\"#qunit-fixture\"),\n      child = parent.children().css({\n        fontSize: \"98.6in\",\n        width: \"0.01em\",\n        height: 1\n      }),\n      actual = parseFloat(child.css(\"width\")),\n      computed = [];\n    child.animate({\n      width: \"0%\"\n    }, {\n      duration: 1,\n      step: function () {\n        computed.push(parseFloat(child.css(\"width\")));\n      }\n    }).queue(function (next) {\n      var ratio = computed[0] / actual;\n      assert.ok(ratio > 0.9 && ratio < 1.1, \"Starting width was close enough (\" + computed[0] + \" approximates \" + actual + \")\");\n      next();\n      parent.remove();\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"non-px animation handles non-numeric start (trac-11971)","suites":["effects"],"line":1609,"code":"  QUnit.test(\"non-px animation handles non-numeric start (trac-11971)\", function (assert) {\n    assert.expect(2);\n    var foo = jQuery(\"#foo\"),\n      initial = foo.css(\"backgroundPositionX\");\n    if (!initial) {\n      assert.expect(1);\n      assert.ok(true, \"Style property not understood\");\n      return;\n    }\n    foo.animate({\n      backgroundPositionX: \"42%\"\n    }, {\n      duration: 1,\n      progress: function (anim, percent) {\n        if (percent) {\n          return;\n        }\n        if (parseFloat(initial)) {\n          assert.equal(jQuery.style(this, \"backgroundPositionX\"), initial, \"Numeric start preserved\");\n        } else {\n          assert.equal(jQuery.style(this, \"backgroundPositionX\"), \"0%\", \"Non-numeric start zeroed\");\n        }\n      },\n      done: function () {\n        assert.equal(jQuery.style(this, \"backgroundPositionX\"), \"42%\", \"End reached\");\n      }\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animation callbacks (trac-11797)","suites":["effects"],"line":1638,"code":"  QUnit.test(\"Animation callbacks (trac-11797)\", function (assert) {\n    assert.expect(15);\n    var prog = 0,\n      targets = jQuery(\"#foo\").children(),\n      done = false,\n      expectedProgress = 1;\n    targets.eq(0).animate({}, {\n      duration: 1,\n      start: function () {\n        assert.ok(true, \"empty: start\");\n      },\n      progress: function (anim, percent) {\n        assert.equal(percent, prog, \"empty: progress \" + prog);\n        prog = 1;\n      },\n      done: function () {\n        assert.ok(true, \"empty: done\");\n      },\n      fail: function () {\n        assert.ok(false, \"empty: fail\");\n      },\n      always: function () {\n        assert.ok(true, \"empty: always\");\n        done = true;\n      }\n    });\n    assert.ok(done, \"empty: done immediately\");\n    done = false;\n    targets.eq(1).animate({\n      opacity: 0\n    }, {\n      duration: 1,\n      start: function () {\n        assert.ok(true, \"stopped: start\");\n      },\n      progress: function (anim, percent) {\n        assert.equal(percent, 0, \"stopped: progress 0\");\n      },\n      done: function () {\n        assert.ok(false, \"stopped: done\");\n      },\n      fail: function () {\n        assert.ok(true, \"stopped: fail\");\n      },\n      always: function () {\n        assert.ok(true, \"stopped: always\");\n        done = true;\n      }\n    }).stop();\n    assert.ok(done, \"stopped: stopped immediately\");\n    targets.eq(2).animate({\n      opacity: 0\n    }, {\n      duration: 1,\n      start: function () {\n        assert.ok(true, \"async: start\");\n      },\n      progress: function (anim, percent) {\n        assert.equal(percent, expectedProgress, \"async: progress \" + expectedProgress);\n        expectedProgress++;\n      },\n      done: function () {\n        assert.ok(true, \"async: done\");\n      },\n      fail: function () {\n        assert.ok(false, \"async: fail\");\n      },\n      always: function () {\n        assert.ok(true, \"async: always\");\n      }\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animation callbacks in order (gh-2283)","suites":["effects"],"line":1711,"code":"  QUnit.test(\"Animation callbacks in order (gh-2283)\", function (assert) {\n    assert.expect(9);\n    var done = assert.async(),\n      step = 0,\n      dur = 50;\n    jQuery(\"#foo\").animate({\n      width: \"5px\"\n    }, {\n      duration: dur,\n      start: function () {\n        assert.step(\"start\");\n      },\n      progress: function (anim, p, ms) {\n        if (!step++) {\n          assert.step(\"progress\");\n          assert.strictEqual(p, 0, \"first progress callback: progress ratio\");\n          assert.strictEqual(ms, dur, \"first progress callback: remaining ms\");\n        } else {\n          assert.step(\"last progress\");\n          assert.strictEqual(p, 1, \"last progress callback: progress ratio\");\n          assert.strictEqual(ms, 0, \"last progress callback: remaining ms\");\n        }\n      },\n      done: function () {\n        assert.step(\"done\");\n      },\n      fail: function () {\n        assert.ok(false, \"Animation failed\");\n      },\n      always: function () {\n        assert.verifySteps([\"start\", \"progress\", \"last progress\", \"done\"]);\n        done();\n      }\n    }).finish();\n    this.clock.tick(dur + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animate properly sets overflow hidden when animating width/height (trac-12117)","suites":["effects"],"line":1747,"code":"  QUnit.test(\"Animate properly sets overflow hidden when animating width/height (trac-12117)\", function (assert) {\n    assert.expect(8);\n    jQuery.each([\"height\", \"width\"], function (_, prop) {\n      jQuery.each([100, 0], function (_, value) {\n        var div = jQuery(\"<div>\").css(\"overflow\", \"auto\"),\n          props = {};\n        props[prop] = value;\n        div.animate(props, 1);\n        assert.equal(div.css(\"overflow\"), \"hidden\", \"overflow: hidden set when animating \" + prop + \" to \" + value);\n        div.stop();\n        assert.equal(div.css(\"overflow\"), \"auto\", \"overflow: auto restored after animating \" + prop + \" to \" + value);\n      });\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Each tick of the timer loop uses a fresh time (trac-12837)","suites":["effects"],"line":1761,"code":"  QUnit.test(\"Each tick of the timer loop uses a fresh time (trac-12837)\", function (assert) {\n    var lastVal,\n      tmp = jQuery({\n        test: 0\n      });\n    assert.expect(3);\n    tmp.animate({\n      test: 100\n    }, {\n      step: function (p, fx) {\n        assert.ok(fx.now !== lastVal, \"Current value is not the last value: \" + lastVal + \" - \" + fx.now);\n        lastVal = fx.now;\n      }\n    });\n    this.clock.tick(1);\n\n    // now that we have a new time, run another tick\n    jQuery.fx.tick();\n    this.clock.tick(1);\n    jQuery.fx.tick();\n    tmp.stop();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Animations with 0 duration don't ease (trac-12273)","suites":["effects"],"line":1783,"code":"  QUnit.test(\"Animations with 0 duration don't ease (trac-12273)\", function (assert) {\n    assert.expect(1);\n    jQuery.easing.test = function () {\n      assert.ok(false, \"Called easing\");\n    };\n    jQuery(\"#foo\").animate({\n      height: 100\n    }, {\n      duration: 0,\n      easing: \"test\",\n      complete: function () {\n        assert.equal(jQuery(this).height(), 100, \"Height is 100\");\n      }\n    });\n    delete jQuery.easing.test;\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.fx.start & jQuery.fx.stop hook points","suites":["effects"],"line":1843,"code":"  QUnit.test(\"jQuery.fx.start & jQuery.fx.stop hook points\", function (assert) {\n    var oldStart = jQuery.fx.start,\n      oldStop = jQuery.fx.stop,\n      foo = jQuery({\n        foo: 0\n      });\n    assert.expect(3);\n    jQuery.fx.start = function () {\n      assert.ok(true, \"start called\");\n    };\n    jQuery.fx.stop = function () {\n      assert.ok(true, \"stop called\");\n    };\n\n    // calls start\n    foo.animate({\n      foo: 1\n    }, {\n      queue: false\n    });\n\n    // calls start\n    foo.animate({\n      foo: 2\n    }, {\n      queue: false\n    });\n    foo.stop();\n\n    // calls stop\n    jQuery.fx.tick();\n\n    // cleanup\n    jQuery.fx.start = oldStart;\n    jQuery.fx.stop = oldStop;\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":".finish() completes all queued animations","suites":["effects"],"line":1879,"code":"  QUnit.test(\".finish() completes all queued animations\", function (assert) {\n    var animations = {\n        top: 100,\n        left: 100,\n        height: 100,\n        width: 100\n      },\n      div = jQuery(\"<div>\");\n    assert.expect(11);\n    jQuery.each(animations, function (prop, value) {\n      var anim = {};\n      anim[prop] = value;\n\n      // the delay shouldn't matter at all!\n      div.css(prop, 1).animate(anim, function () {\n        assert.ok(true, \"Called animation callback for \" + prop);\n      }).delay(100);\n    });\n    assert.equal(div.queue().length, 8, \"8 animations in the queue\");\n    div.finish();\n    jQuery.each(animations, function (prop, value) {\n      assert.equal(parseFloat(div.css(prop)), value, prop + \" finished at correct value\");\n    });\n    assert.equal(div.queue().length, 0, \"empty queue when done\");\n    if (QUnit.jQuerySelectors) {\n      assert.equal(div.is(\":animated\"), false, \":animated doesn't match\");\n    } else {\n      assert.ok(\"skip\", \":animated selector not supported with selector-native\");\n    }\n\n    // cleanup\n    div.remove();\n\n    // leaves a \"shadow timer\" which does nothing around, need to force a tick\n    jQuery.fx.tick();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":".finish( false ) - unqueued animations","suites":["effects"],"line":1915,"code":"  QUnit.test(\".finish( false ) - unqueued animations\", function (assert) {\n    var animations = {\n        top: 100,\n        left: 100,\n        height: 100,\n        width: 100\n      },\n      div = jQuery(\"<div>\");\n    assert.expect(10);\n    jQuery.each(animations, function (prop, value) {\n      var anim = {};\n      anim[prop] = value;\n      div.css(prop, 1).animate(anim, {\n        queue: false,\n        complete: function () {\n          assert.ok(true, \"Called animation callback for \" + prop);\n        }\n      });\n    });\n    assert.equal(div.queue().length, 0, \"0 animations in the queue\");\n    div.finish(false);\n    jQuery.each(animations, function (prop, value) {\n      assert.equal(parseFloat(div.css(prop)), value, prop + \" finished at correct value\");\n    });\n    if (QUnit.jQuerySelectors) {\n      assert.equal(div.is(\":animated\"), false, \":animated doesn't match\");\n    } else {\n      assert.ok(\"skip\", \":animated selector not supported with selector-native\");\n    }\n\n    // cleanup\n    div.remove();\n\n    // leaves a \"shadow timer\" which does nothing around, need to force a tick\n    jQuery.fx.tick();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":".finish( \"custom\" ) - custom queue animations","suites":["effects"],"line":1951,"code":"  QUnit.test(\".finish( \\\"custom\\\" ) - custom queue animations\", function (assert) {\n    var animations = {\n        top: 100,\n        left: 100,\n        height: 100,\n        width: 100\n      },\n      div = jQuery(\"<div>\");\n    assert.expect(11);\n    jQuery.each(animations, function (prop, value) {\n      var anim = {};\n      anim[prop] = value;\n      div.css(prop, 1).animate(anim, {\n        queue: \"custom\",\n        complete: function () {\n          assert.ok(true, \"Called animation callback for \" + prop);\n        }\n      });\n    });\n    assert.equal(div.queue(\"custom\").length, 4, \"4 animations in the queue\");\n\n    // start the first animation\n    div.dequeue(\"custom\");\n    if (QUnit.jQuerySelectors) {\n      assert.equal(div.is(\":animated\"), true, \":animated matches\");\n    } else {\n      assert.ok(\"skip\", \":animated selector not supported with selector-native\");\n    }\n    div.finish(\"custom\");\n    jQuery.each(animations, function (prop, value) {\n      assert.equal(parseFloat(div.css(prop)), value, prop + \" finished at correct value\");\n    });\n    if (QUnit.jQuerySelectors) {\n      assert.equal(div.is(\":animated\"), false, \":animated doesn't match\");\n    } else {\n      assert.ok(\"skip\", \":animated selector not supported with selector-native\");\n    }\n\n    // cleanup\n    div.remove();\n\n    // leaves a \"shadow timer\" which does nothing around, need to force a tick\n    jQuery.fx.tick();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":".finish() calls finish of custom queue functions","suites":["effects"],"line":1995,"code":"  QUnit.test(\".finish() calls finish of custom queue functions\", function (assert) {\n    function queueTester(next, hooks) {\n      hooks.stop = function (gotoEnd) {\n        inside++;\n        assert.equal(this, div[0]);\n        assert.ok(gotoEnd, \"hooks.stop(true) called\");\n      };\n    }\n    var div = jQuery(\"<div>\"),\n      inside = 0,\n      outside = 0;\n    assert.expect(6);\n    queueTester.finish = function () {\n      outside++;\n      assert.ok(true, \"Finish called on custom queue function\");\n    };\n    div.queue(queueTester).queue(queueTester).queue(queueTester).finish();\n    assert.equal(inside, 1, \"1 stop(true) callback\");\n    assert.equal(outside, 2, \"2 finish callbacks\");\n    div.remove();\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":".finish() is applied correctly when multiple elements were animated (trac-13937)","suites":["effects"],"line":2016,"code":"  QUnit.test(\".finish() is applied correctly when multiple elements were animated (trac-13937)\", function (assert) {\n    assert.expect(3);\n    var elems = jQuery(\"<a>0</a><a>1</a><a>2</a>\");\n    elems.animate({\n      opacity: 0\n    }, fxInterval * 150).animate({\n      opacity: 1\n    }, fxInterval * 150);\n    setTimeout(function () {\n      elems.eq(1).finish();\n      assert.ok(!elems.eq(1).queue().length, \"empty queue for .finish()ed element\");\n      assert.ok(elems.eq(0).queue().length, \"non-empty queue for preceding element\");\n      assert.ok(elems.eq(2).queue().length, \"non-empty queue for following element\");\n      elems.stop(true);\n    }, 100);\n    this.clock.tick(fxInterval * 150);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"slideDown() after stop() (trac-13483)","suites":["effects"],"line":2033,"code":"  QUnit.test(\"slideDown() after stop() (trac-13483)\", function (assert) {\n    assert.expect(2);\n    var ul = jQuery(\"<ul style='height: 100px; display: block;'></ul>\").appendTo(\"#qunit-fixture\"),\n      origHeight = ul.height(),\n      clock = this.clock;\n\n    // First test. slideUp() -> stop() in the middle -> slideDown() until the end\n    ul.slideUp(fxInterval * 100);\n    clock.tick(fxInterval * 50);\n    ul.stop(true);\n    ul.slideDown(1, function () {\n      assert.equal(ul.height(), origHeight, \"slideDown() after interrupting slideUp() with stop(). Height must be in original value\");\n\n      // Second test. slideDown() -> stop() in the middle -> slideDown() until the end\n      ul.slideUp(1);\n      clock.tick(fxInterval);\n      ul.slideDown(fxInterval * 100);\n      clock.tick(fxInterval * 50);\n      ul.stop(true);\n      ul.slideDown(1);\n      assert.equal(ul.height(), origHeight, \"slideDown() after interrupting slideDown() with stop(). Height must be in original value\");\n\n      // Cleanup\n      ul.remove();\n      clock.tick(fxInterval);\n    });\n    clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Respect display value on inline elements (trac-14824)","suites":["effects"],"line":2061,"code":"  QUnit.test(\"Respect display value on inline elements (trac-14824)\", function (assert) {\n    assert.expect(2);\n    var clock = this.clock,\n      fromStyleSheet = jQuery(\"<span id='span-14824'></span>\"),\n      fromStyleAttr = jQuery(\"<span style='display: block;'></span>\");\n    jQuery(\"#qunit-fixture\").append(fromStyleSheet, fromStyleAttr);\n    fromStyleSheet.slideUp(function () {\n      jQuery(this).slideDown(function () {\n        assert.equal(jQuery(this).css(\"display\"), \"block\", \"Respect previous display value (from stylesheet) on span element\");\n      });\n    });\n    fromStyleAttr.slideUp(function () {\n      jQuery(this).slideDown(function () {\n        assert.equal(jQuery(this).css(\"display\"), \"block\", \"Respect previous display value (from style attribute) on span element\");\n      });\n    });\n    clock.tick(800 + fxInterval * 2);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.easing._default (gh-2218)","suites":["effects"],"line":2079,"code":"  QUnit.test(\"jQuery.easing._default (gh-2218)\", function (assert) {\n    assert.expect(2);\n    jQuery(\"#foo\").animate({\n      width: \"5px\"\n    }, {\n      duration: 5,\n      start: function (anim) {\n        assert.equal(anim.opts.easing, jQuery.easing._default, \"anim.opts.easing should be equal to jQuery.easing._default when the easing argument is not given\");\n      }\n    }).animate({\n      height: \"5px\"\n    }, {\n      duration: 5,\n      easing: \"linear\",\n      start: function (anim) {\n        assert.equal(anim.opts.easing, \"linear\", \"anim.opts.easing should be equal to the easing argument\");\n      }\n    }).stop();\n    this.clock.tick(10 + fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.easing._default in Animation (gh-2218","suites":["effects"],"line":2099,"code":"  QUnit.test(\"jQuery.easing._default in Animation (gh-2218\", function (assert) {\n    assert.expect(3);\n    var animation,\n      defaultEasing = jQuery.easing._default,\n      called = false,\n      testObject = {\n        \"width\": 100\n      },\n      testDest = {\n        \"width\": 200\n      };\n    jQuery.easing.custom = function (p) {\n      called = true;\n      return p;\n    };\n    jQuery.easing._default = \"custom\";\n    animation = jQuery.Animation(testObject, testDest, {\n      \"duration\": 1\n    });\n    animation.done(function () {\n      assert.equal(testObject.width, testDest.width, \"Animated width\");\n      assert.ok(called, \"Custom jQuery.easing._default called\");\n      assert.strictEqual(animation.opts.easing, \"custom\", \"Animation used custom jQuery.easing._default\");\n      jQuery.easing._default = defaultEasing;\n      delete jQuery.easing.custom;\n    });\n    this.clock.tick(fxInterval);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.easing._default in Tween (gh-2218)","suites":["effects"],"line":2127,"code":"  QUnit.test(\"jQuery.easing._default in Tween (gh-2218)\", function (assert) {\n    assert.expect(3);\n    var tween,\n      defaultEasing = jQuery.easing._default,\n      called = false,\n      testObject = {\n        \"width\": 100\n      };\n    jQuery.easing.custom = function (p) {\n      called = true;\n      return p;\n    };\n    jQuery.easing._default = \"custom\";\n    tween = jQuery.Tween(testObject, {\n      \"duration\": 1\n    }, \"width\", 200);\n    tween.run(1);\n    assert.equal(testObject.width, 200, \"Animated width\");\n    assert.ok(called, \"Custom jQuery.easing._default called\");\n    assert.strictEqual(tween.easing, \"custom\", \"Animation used custom jQuery.easing._default\");\n    jQuery.easing._default = defaultEasing;\n    delete jQuery.easing.custom;\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Display value is correct for disconnected nodes (trac-13310)","suites":["effects"],"line":2150,"code":"  QUnit.test(\"Display value is correct for disconnected nodes (trac-13310)\", function (assert) {\n    assert.expect(3);\n    var div = jQuery(\"<div></div>\");\n    assert.equal(div.css(\"display\", \"inline\").hide().show().appendTo(\"body\").css(\"display\"), \"inline\", \"Initialized display value has returned\");\n    div.remove();\n    div.css(\"display\", \"none\").hide();\n    assert.equal(jQuery._data(div[0], \"olddisplay\"), undefined, \"olddisplay is undefined after hiding a detached and hidden element\");\n    div.remove();\n    div.css(\"display\", \"inline-block\").hide().appendTo(\"body\").fadeIn(function () {\n      assert.equal(div.css(\"display\"), \"inline-block\", \"Initialized display value has returned\");\n      div.remove();\n    });\n    this.clock.tick(1000);\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"Show/hide/toggle and display: inline","suites":["effects"],"line":2164,"code":"  QUnit.test(\"Show/hide/toggle and display: inline\", function (assert) {\n    assert.expect(40);\n    var clock = this.clock;\n    jQuery(\"<span></span><div style='display:inline' title='inline div'></div>\").each(function () {\n      var completed,\n        interrupted,\n        N = fxInterval * 10,\n        fixture = jQuery(\"#qunit-fixture\"),\n        $el = jQuery(this),\n        kind = this.title || this.nodeName.toLowerCase();\n\n      // Animations allowed to complete\n      completed = jQuery.map([$el.clone().data({\n        call: \"hide\",\n        done: \"none\"\n      }).appendTo(fixture).hide(N), $el.clone().data({\n        call: \"toggle\",\n        done: \"none\"\n      }).appendTo(fixture).toggle(N), $el.clone().data({\n        call: \"hide+show\",\n        done: \"inline\"\n      }).appendTo(fixture).hide().show(N), $el.clone().data({\n        call: \"hide+toggle\",\n        done: \"inline\"\n      }).appendTo(fixture).hide().toggle(N)], function ($clone) {\n        return $clone[0];\n      });\n\n      // Animations not allowed to complete\n      interrupted = jQuery.map([$el.clone().data({\n        call: \"hide+stop\"\n      }).appendTo(fixture).hide(N), $el.clone().data({\n        call: \"toggle+stop\"\n      }).appendTo(fixture).toggle(N), $el.clone().data({\n        call: \"hide+show+stop\"\n      }).appendTo(fixture).hide().show(N), $el.clone().data({\n        call: \"hide+toggle+stop\"\n      }).appendTo(fixture).hide().toggle(N)], function ($clone) {\n        return $clone[0];\n      });\n\n      // All elements should be inline-block during the animation\n      clock.tick(N / 2);\n      jQuery(completed).each(function () {\n        var $el = jQuery(this),\n          call = $el.data(\"call\");\n        assert.strictEqual($el.css(\"display\"), \"inline-block\", kind + \" display during \" + call);\n      });\n\n      // Interrupted elements should remain inline-block\n      jQuery(interrupted).stop();\n      clock.tick(N / 2);\n      jQuery(interrupted).each(function () {\n        var $el = jQuery(this),\n          call = $el.data(\"call\");\n        assert.strictEqual($el.css(\"display\"), \"inline-block\", kind + \" display after \" + call);\n      });\n\n      // Completed elements should not remain inline-block\n      clock.tick(N / 2);\n      jQuery(completed).each(function () {\n        var $el = jQuery(this),\n          call = $el.data(\"call\"),\n          display = $el.data(\"done\");\n        assert.strictEqual($el.css(\"display\"), display, kind + \" display after \" + call);\n      });\n\n      // A post-animation toggle should not make any element inline-block\n      completed = jQuery(completed.concat(interrupted));\n      completed.toggle(N / 2);\n      clock.tick(N);\n      completed.each(function () {\n        var $el = jQuery(this),\n          call = $el.data(\"call\");\n        assert.ok($el.css(\"display\") !== \"inline-block\", kind + \" display is not inline-block after \" + call + \"+toggle\");\n      });\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed( speed, easing, complete )","suites":["effects"],"line":2250,"code":"  QUnit.test(\"jQuery.speed( speed, easing, complete )\", function (assert) {\n    testEasing(assert, fxInterval, \"linear\", function () {\n      assert.ok(true, \"Complete called\");\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed( speed, easing, complete ) - with easing function","suites":["effects"],"line":2255,"code":"  QUnit.test(\"jQuery.speed( speed, easing, complete ) - with easing function\", function (assert) {\n    testEasing(assert, fxInterval, function () {\n      return \"linear\";\n    }, function () {\n      assert.ok(true, \"Complete called\");\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed( options )","suites":["effects"],"line":2262,"code":"  QUnit.test(\"jQuery.speed( options )\", function (assert) {\n    testEasing(assert, {\n      duration: fxInterval,\n      easing: \"linear\",\n      complete: function () {\n        assert.ok(true, \"Complete called\");\n      }\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed( options ) - with easing function","suites":["effects"],"line":2271,"code":"  QUnit.test(\"jQuery.speed( options ) - with easing function\", function (assert) {\n    testEasing(assert, {\n      duration: fxInterval,\n      easing: function () {\n        return \"linear\";\n      },\n      complete: function () {\n        assert.ok(true, \"Complete called\");\n      }\n    });\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed( options ) - queue values","suites":["effects"],"line":2282,"code":"  QUnit.test(\"jQuery.speed( options ) - queue values\", function (assert) {\n    assert.expect(5);\n    var get = function (queue) {\n      return jQuery.speed({\n        queue: queue\n      }).queue;\n    };\n    assert.equal(get(null), \"fx\", \"null defaults to 'fx'\");\n    assert.equal(get(undefined), \"fx\", \"undefined defaults to 'fx'\");\n    assert.equal(get(true), \"fx\", \"true defaults to 'fx'\");\n    assert.equal(get(\"fx\"), \"fx\", \"'fx' passed through\");\n    assert.equal(get(\"custom\"), \"custom\", \"'custom' passed through\");\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"jQuery.speed() - durations","suites":["effects"],"line":2295,"code":"  QUnit.test(\"jQuery.speed() - durations\", function (assert) {\n    assert.expect(5);\n    var get = function (duration) {\n      return jQuery.speed(duration).duration;\n    };\n    assert.equal(get(100), 100, \"jQuery.speed sets number duration\");\n    assert.equal(get(), jQuery.fx.speeds._default, \"jQuery.speed falls back default duration\");\n    assert.equal(get(\"slow\"), jQuery.fx.speeds.slow, \"jQuery.speed uses preset speeds\");\n    assert.equal(get(\"fast\"), jQuery.fx.speeds.fast, \"jQuery.speed uses preset speeds\");\n    jQuery.fx.off = true;\n    assert.equal(get(100), 0, \"jQuery.speed defaults duration to zero if fx is off\");\n    jQuery.fx.off = false;\n  });","file":"unit/effects.js","skipped":false,"dir":"test"},{"name":"null or undefined handler","suites":["event"],"line":7,"code":"QUnit.test(\"null or undefined handler\", function (assert) {\n  assert.expect(4);\n\n  // Supports Fixes bug trac-7229\n  try {\n    jQuery(\"#firstp\").on(\"click\", null);\n    assert.ok(true, \"Passing a null handler will not throw an exception\");\n  } catch (e) {}\n  try {\n    jQuery(\"#firstp\").on(\"click\", undefined);\n    assert.ok(true, \"Passing an undefined handler will not throw an exception\");\n  } catch (e) {}\n  var expectedElem = jQuery(\"#firstp\");\n  var actualElem = expectedElem.on(\"click\", null);\n  assert.equal(actualElem, expectedElem, \"Passing a null handler should return the original element\");\n  actualElem = expectedElem.on(\"click\", undefined);\n  assert.equal(actualElem, expectedElem, \"Passing a null handler should return the original element\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on() with non-null,defined data","suites":["event"],"line":25,"code":"QUnit.test(\"on() with non-null,defined data\", function (assert) {\n  assert.expect(2);\n  var handler = function (event, data) {\n    assert.equal(data, 0, \"non-null, defined data (zero) is correctly passed\");\n  };\n  jQuery(\"#foo\").on(\"foo.on\", handler);\n  jQuery(\"div\").on(\"foo.delegate\", \"#foo\", handler);\n  jQuery(\"#foo\").trigger(\"foo\", 0);\n  jQuery(\"#foo\").off(\"foo.on\", handler);\n  jQuery(\"div\").off(\"foo.delegate\", \"#foo\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Handler changes and .trigger() order","suites":["event"],"line":36,"code":"QUnit.test(\"Handler changes and .trigger() order\", function (assert) {\n  assert.expect(1);\n  var markup = jQuery(\"<div><div><p><span><b class=\\\"a\\\">b</b></span></p></div></div>\"),\n    path = \"\";\n  markup.find(\"*\").addBack().on(\"click\", function () {\n    path += this.nodeName.toLowerCase() + \" \";\n  }).filter(\"b\").on(\"click\", function (e) {\n    // Removing span should not stop propagation to original parents\n    if (e.target === this) {\n      jQuery(this).parent().remove();\n    }\n  });\n  markup.find(\"b\").trigger(\"click\");\n  assert.equal(path, \"b p div div \", \"Delivered all events\");\n  markup.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), with data","suites":["event"],"line":52,"code":"QUnit.test(\"on(), with data\", function (assert) {\n  assert.expect(4);\n  var test, handler, handler2;\n  handler = function (event) {\n    assert.ok(event.data, \"on() with data, check passed data exists\");\n    assert.equal(event.data.foo, \"bar\", \"on() with data, Check value of passed data\");\n  };\n  jQuery(\"#firstp\").on(\"click\", {\n    \"foo\": \"bar\"\n  }, handler).trigger(\"click\").off(\"click\", handler);\n  assert.ok(!jQuery._data(jQuery(\"#firstp\")[0], \"events\"), \"Event handler unbound when using data.\");\n  test = function () {};\n  handler2 = function (event) {\n    assert.equal(event.data, test, \"on() with function data, Check value of passed data\");\n  };\n  jQuery(\"#firstp\").on(\"click\", test, handler2).trigger(\"click\").off(\"click\", handler2);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"click(), with data","suites":["event"],"line":69,"code":"QUnit.test(\"click(), with data\", function (assert) {\n  assert.expect(3);\n  var handler = function (event) {\n    assert.ok(event.data, \"on() with data, check passed data exists\");\n    assert.equal(event.data.foo, \"bar\", \"on() with data, Check value of passed data\");\n  };\n  jQuery(\"#firstp\").on(\"click\", {\n    \"foo\": \"bar\"\n  }, handler).trigger(\"click\").off(\"click\", handler);\n  assert.ok(!jQuery._data(jQuery(\"#firstp\")[0], \"events\"), \"Event handler unbound when using data.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), with data, trigger with data","suites":["event"],"line":80,"code":"QUnit.test(\"on(), with data, trigger with data\", function (assert) {\n  assert.expect(4);\n  var handler = function (event, data) {\n    assert.ok(event.data, \"check passed data exists\");\n    assert.equal(event.data.foo, \"bar\", \"Check value of passed data\");\n    assert.ok(data, \"Check trigger data\");\n    assert.equal(data.bar, \"foo\", \"Check value of trigger data\");\n  };\n  jQuery(\"#firstp\").on(\"click\", {\n    foo: \"bar\"\n  }, handler).trigger(\"click\", [{\n    bar: \"foo\"\n  }]).off(\"click\", handler);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), multiple events at once","suites":["event"],"line":94,"code":"QUnit.test(\"on(), multiple events at once\", function (assert) {\n  assert.expect(2);\n  var handler,\n    clickCounter = 0,\n    mouseoverCounter = 0;\n  handler = function (event) {\n    if (event.type === \"click\") {\n      clickCounter += 1;\n    } else if (event.type === \"mouseover\") {\n      mouseoverCounter += 1;\n    }\n  };\n  jQuery(\"#firstp\").on(\"click mouseover\", handler).trigger(\"click\").trigger(\"mouseover\");\n  assert.equal(clickCounter, 1, \"on() with multiple events at once\");\n  assert.equal(mouseoverCounter, 1, \"on() with multiple events at once\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), five events at once","suites":["event"],"line":110,"code":"QUnit.test(\"on(), five events at once\", function (assert) {\n  assert.expect(1);\n  var count = 0,\n    handler = function () {\n      count++;\n    };\n  jQuery(\"#firstp\").on(\"click mouseover foo bar baz\", handler).trigger(\"click\").trigger(\"mouseover\").trigger(\"foo\").trigger(\"bar\").trigger(\"baz\");\n  assert.equal(count, 5, \"on() five events at once\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), multiple events at once and namespaces","suites":["event"],"line":119,"code":"QUnit.test(\"on(), multiple events at once and namespaces\", function (assert) {\n  assert.expect(7);\n  var cur,\n    div,\n    obj = {};\n  div = jQuery(\"<div></div>\").on(\"focusin.a\", function (e) {\n    assert.equal(e.type, cur, \"Verify right single event was fired.\");\n  });\n  cur = \"focusin\";\n  div.trigger(\"focusin.a\");\n\n  // manually clean up detached elements\n  div.remove();\n  div = jQuery(\"<div></div>\").on(\"click mouseover\", obj, function (e) {\n    assert.equal(e.type, cur, \"Verify right multi event was fired.\");\n    assert.equal(e.data, obj, \"Make sure the data came in correctly.\");\n  });\n  cur = \"click\";\n  div.trigger(\"click\");\n  cur = \"mouseover\";\n  div.trigger(\"mouseover\");\n\n  // manually clean up detached elements\n  div.remove();\n  div = jQuery(\"<div></div>\").on(\"focusin.a focusout.b\", function (e) {\n    assert.equal(e.type, cur, \"Verify right multi event was fired.\");\n  });\n  cur = \"focusin\";\n  div.trigger(\"focusin.a\");\n  cur = \"focusout\";\n  div.trigger(\"focusout.b\");\n\n  // manually clean up detached elements\n  div.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), namespace with special add","suites":["event"],"line":154,"code":"QUnit.test(\"on(), namespace with special add\", function (assert) {\n  assert.expect(27);\n  var i = 0,\n    div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\").on(\"test\", function () {\n      assert.ok(true, \"Test event fired.\");\n    });\n  jQuery.event.special.test = {\n    _default: function (e, data) {\n      assert.equal(e.type, \"test\", \"Make sure we're dealing with a test event.\");\n      assert.ok(data, \"And that trigger data was passed.\");\n      assert.strictEqual(e.target, div[0], \"And that the target is correct.\");\n      assert.equal(this, window, \"And that the context is correct.\");\n    },\n    setup: function () {},\n    teardown: function () {\n      assert.ok(true, \"Teardown called.\");\n    },\n    add: function (handleObj) {\n      var handler = handleObj.handler;\n      handleObj.handler = function (e) {\n        e.xyz = ++i;\n        handler.apply(this, arguments);\n      };\n    },\n    remove: function () {\n      assert.ok(true, \"Remove called.\");\n    }\n  };\n  div.on(\"test.a\", {\n    x: 1\n  }, function (e) {\n    assert.ok(!!e.xyz, \"Make sure that the data is getting passed through.\");\n    assert.equal(e.data[\"x\"], 1, \"Make sure data is attached properly.\");\n  });\n  div.on(\"test.b\", {\n    x: 2\n  }, function (e) {\n    assert.ok(!!e.xyz, \"Make sure that the data is getting passed through.\");\n    assert.equal(e.data[\"x\"], 2, \"Make sure data is attached properly.\");\n  });\n\n  // Should trigger 5\n  div.trigger(\"test\", 33.33);\n\n  // Should trigger 2\n  div.trigger(\"test.a\", \"George Harrison\");\n\n  // Should trigger 2\n  div.trigger(\"test.b\", {\n    year: 1982\n  });\n\n  // Should trigger 4\n  div.off(\"test\");\n  div = jQuery(\"<div></div>\").on(\"test\", function () {\n    assert.ok(true, \"Test event fired.\");\n  });\n\n  // Should trigger 2\n  div.appendTo(\"#qunit-fixture\").remove();\n  delete jQuery.event.special.test;\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), no data","suites":["event"],"line":216,"code":"QUnit.test(\"on(), no data\", function (assert) {\n  assert.expect(1);\n  var handler = function (event) {\n    assert.ok(!event.data, \"Check that no data is added to the event object\");\n  };\n  jQuery(\"#firstp\").on(\"click\", handler).trigger(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on/one/off(Object)","suites":["event"],"line":223,"code":"QUnit.test(\"on/one/off(Object)\", function (assert) {\n  assert.expect(6);\n  var $elem,\n    clickCounter = 0,\n    mouseoverCounter = 0;\n  function handler(event) {\n    if (event.type === \"click\") {\n      clickCounter++;\n    } else if (event.type === \"mouseover\") {\n      mouseoverCounter++;\n    }\n  }\n  function handlerWithData(event) {\n    if (event.type === \"click\") {\n      clickCounter += event.data;\n    } else if (event.type === \"mouseover\") {\n      mouseoverCounter += event.data;\n    }\n  }\n  function trigger() {\n    $elem.trigger(\"click\").trigger(\"mouseover\");\n  }\n  $elem = jQuery(\"#firstp\")\n\n  // Regular bind\n  .on({\n    \"click\": handler,\n    \"mouseover\": handler\n  })\n\n  // Bind with data\n  .one({\n    \"click\": handlerWithData,\n    \"mouseover\": handlerWithData\n  }, 2);\n  trigger();\n  assert.equal(clickCounter, 3, \"on(Object)\");\n  assert.equal(mouseoverCounter, 3, \"on(Object)\");\n  trigger();\n  assert.equal(clickCounter, 4, \"on(Object)\");\n  assert.equal(mouseoverCounter, 4, \"on(Object)\");\n  jQuery(\"#firstp\").off({\n    \"click\": handler,\n    \"mouseover\": handler\n  });\n  trigger();\n  assert.equal(clickCounter, 4, \"on(Object)\");\n  assert.equal(mouseoverCounter, 4, \"on(Object)\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on/off(Object), on/off(Object, String)","suites":["event"],"line":272,"code":"QUnit.test(\"on/off(Object), on/off(Object, String)\", function (assert) {\n  assert.expect(6);\n  var events,\n    clickCounter = 0,\n    mouseoverCounter = 0,\n    $p = jQuery(\"#firstp\"),\n    $a = $p.find(\"a\").eq(0);\n  events = {\n    \"click\": function (event) {\n      clickCounter += event.data || 1;\n    },\n    \"mouseover\": function (event) {\n      mouseoverCounter += event.data || 1;\n    }\n  };\n  function trigger() {\n    $a.trigger(\"click\").trigger(\"mouseover\");\n  }\n  jQuery(document).on(events, \"#firstp a\");\n  $p.on(events, \"a\", 2);\n  trigger();\n  assert.equal(clickCounter, 3, \"on\");\n  assert.equal(mouseoverCounter, 3, \"on\");\n  $p.off(events, \"a\");\n  trigger();\n  assert.equal(clickCounter, 4, \"off\");\n  assert.equal(mouseoverCounter, 4, \"off\");\n  jQuery(document).off(events, \"#firstp a\");\n  trigger();\n  assert.equal(clickCounter, 4, \"off\");\n  assert.equal(mouseoverCounter, 4, \"off\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on immediate propagation","suites":["event"],"line":304,"code":"QUnit.test(\"on immediate propagation\", function (assert) {\n  assert.expect(2);\n  var lastClick,\n    $p = jQuery(\"#firstp\"),\n    $a = $p.find(\"a\").eq(0);\n  lastClick = \"\";\n  jQuery(document).on(\"click\", \"#firstp a\", function (e) {\n    lastClick = \"click1\";\n    e.stopImmediatePropagation();\n  });\n  jQuery(document).on(\"click\", \"#firstp a\", function () {\n    lastClick = \"click2\";\n  });\n  $a.trigger(\"click\");\n  assert.equal(lastClick, \"click1\", \"on stopImmediatePropagation\");\n  jQuery(document).off(\"click\", \"#firstp a\");\n  lastClick = \"\";\n  $p.on(\"click\", \"a\", function (e) {\n    lastClick = \"click1\";\n    e.stopImmediatePropagation();\n  });\n  $p.on(\"click\", \"a\", function () {\n    lastClick = \"click2\";\n  });\n  $a.trigger(\"click\");\n  assert.equal(lastClick, \"click1\", \"on stopImmediatePropagation\");\n  $p.off(\"click\", \"**\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on bubbling, isDefaultPrevented, stopImmediatePropagation","suites":["event"],"line":332,"code":"QUnit.test(\"on bubbling, isDefaultPrevented, stopImmediatePropagation\", function (assert) {\n  assert.expect(3);\n  var $anchor2 = jQuery(\"#anchor2\"),\n    $main = jQuery(\"#qunit-fixture\"),\n    neverCallMe = function () {\n      assert.ok(false, \"immediate propagation should have been stopped\");\n    },\n    fakeClick = function ($jq) {\n      // Use a native click so we don't get jQuery simulated bubbling\n      var e = document.createEvent(\"MouseEvents\");\n      e.initEvent(\"click\", true, true);\n      $jq[0].dispatchEvent(e);\n    };\n  $anchor2.on(\"click\", function (e) {\n    e.preventDefault();\n  });\n  $main.on(\"click\", \"#foo\", function (e) {\n    assert.equal(e.isDefaultPrevented(), true, \"isDefaultPrevented true passed to bubbled event\");\n  });\n  fakeClick($anchor2);\n  $anchor2.off(\"click\");\n  $main.off(\"click\", \"**\");\n  $anchor2.on(\"click\", function () {\n\n    // Let the default action occur\n  });\n  $main.on(\"click\", \"#foo\", function (e) {\n    assert.equal(e.isDefaultPrevented(), false, \"isDefaultPrevented false passed to bubbled event\");\n  });\n  fakeClick($anchor2);\n  $anchor2.off(\"click\");\n  $main.off(\"click\", \"**\");\n  $anchor2.on(\"click\", function (e) {\n    e.stopImmediatePropagation();\n    assert.ok(true, \"anchor was clicked and prop stopped\");\n  });\n  $anchor2[0].addEventListener(\"click\", neverCallMe, false);\n  fakeClick($anchor2);\n  $anchor2[0].removeEventListener(\"click\", neverCallMe);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"triggered events stopPropagation() for natively-bound events","suites":["event"],"line":372,"code":"QUnit.test(\"triggered events stopPropagation() for natively-bound events\", function (assert) {\n  assert.expect(1);\n  var $button = jQuery(\"#button\"),\n    $parent = $button.parent(),\n    neverCallMe = function () {\n      assert.ok(false, \"propagation should have been stopped\");\n    },\n    stopPropagationCallback = function (e) {\n      assert.ok(true, \"propagation is stopped\");\n      e.stopPropagation();\n    };\n  $parent[0].addEventListener(\"click\", neverCallMe);\n  $button.on(\"click\", stopPropagationCallback);\n  $button.trigger(\"click\");\n  $parent[0].removeEventListener(\"click\", neverCallMe);\n  $button.off(\"click\", stopPropagationCallback);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger() works with events that were previously stopped","suites":["event"],"line":389,"code":"QUnit.test(\"trigger() works with events that were previously stopped\", function (assert) {\n  assert.expect(0);\n  var $button = jQuery(\"#button\"),\n    $parent = $button.parent(),\n    neverCallMe = function () {\n      assert.ok(false, \"propagation should have been stopped\");\n    };\n  $parent[0].addEventListener(\"click\", neverCallMe);\n  $button.on(\"click\", neverCallMe);\n  var clickEvent = jQuery.Event(\"click\");\n  clickEvent.stopPropagation();\n  $button.trigger(clickEvent);\n  $parent[0].removeEventListener(\"click\", neverCallMe);\n  $button.off(\"click\", neverCallMe);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), iframes","suites":["event"],"line":404,"code":"QUnit.test(\"on(), iframes\", function (assert) {\n  assert.expect(1);\n\n  // events don't work with iframes, see trac-939 - this test fails in IE because of contentDocument\n  var doc = jQuery(\"#loadediframe\").contents();\n  jQuery(\"div\", doc).on(\"click\", function () {\n    assert.ok(true, \"Binding to element inside iframe\");\n  }).trigger(\"click\").off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), trigger change on select","suites":["event"],"line":413,"code":"QUnit.test(\"on(), trigger change on select\", function (assert) {\n  assert.expect(5);\n  var counter = 0;\n  function selectOnChange(event) {\n    assert.equal(event.data, counter++, \"Event.data is not a global event object\");\n  }\n  jQuery(\"#form select\").each(function (i) {\n    jQuery(this).on(\"change\", i, selectOnChange);\n  }).trigger(\"change\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), namespaced events, cloned events","suites":["event"],"line":423,"code":"QUnit.test(\"on(), namespaced events, cloned events\", function (assert) {\n  assert.expect(18);\n  var firstp = jQuery(\"#firstp\");\n  firstp.on(\"custom.test\", function () {\n    assert.ok(false, \"Custom event triggered\");\n  });\n  firstp.on(\"click\", function (e) {\n    assert.ok(true, \"Normal click triggered\");\n    assert.equal(e.type + e.namespace, \"click\", \"Check that only click events trigger this fn\");\n  });\n  firstp.on(\"click.test\", function (e) {\n    var check = \"click\";\n    assert.ok(true, \"Namespaced click triggered\");\n    if (e.namespace) {\n      check += \"test\";\n    }\n    assert.equal(e.type + e.namespace, check, \"Check that only click/click.test events trigger this fn\");\n  });\n\n  //clone(true) element to verify events are cloned correctly\n  firstp = firstp.add(firstp.clone(true).attr(\"id\", \"firstp2\").insertBefore(firstp));\n\n  // Trigger both bound fn (8)\n  firstp.trigger(\"click\");\n\n  // Trigger one bound fn (4)\n  firstp.trigger(\"click.test\");\n\n  // Remove only the one fn\n  firstp.off(\"click.test\");\n\n  // Trigger the remaining fn (4)\n  firstp.trigger(\"click\");\n\n  // Remove the remaining namespaced fn\n  firstp.off(\".test\");\n\n  // Try triggering the custom event (0)\n  firstp.trigger(\"custom\");\n\n  // using contents will get comments regular, text, and comment nodes\n  jQuery(\"#nonnodes\").contents().on(\"tester\", function () {\n    assert.equal(this.nodeType, 1, \"Check node,textnode,comment on just does real nodes\");\n  }).trigger(\"tester\");\n\n  // Make sure events stick with appendTo'd elements (which are cloned) trac-2027\n  jQuery(\"<a href='#fail' class='test'>test</a>\").on(\"click\", function () {\n    return false;\n  }).appendTo(\"#qunit-fixture\");\n  assert.ok(jQuery(\"a.test\").eq(0).triggerHandler(\"click\") === false, \"Handler is bound to appendTo'd elements\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), multi-namespaced events","suites":["event"],"line":474,"code":"QUnit.test(\"on(), multi-namespaced events\", function (assert) {\n  assert.expect(6);\n  var order = [\"click.test.abc\", \"click.test.abc\", \"click.test\", \"click.test.abc\", \"click.test\", \"custom.test2\"];\n  function check(name, msg) {\n    assert.deepEqual(name, order.shift(), msg);\n  }\n  jQuery(\"#firstp\").on(\"custom.test\", function () {\n    check(\"custom.test\", \"Custom event triggered\");\n  });\n  jQuery(\"#firstp\").on(\"custom.test2\", function () {\n    check(\"custom.test2\", \"Custom event triggered\");\n  });\n  jQuery(\"#firstp\").on(\"click.test\", function () {\n    check(\"click.test\", \"Normal click triggered\");\n  });\n  jQuery(\"#firstp\").on(\"click.test.abc\", function () {\n    check(\"click.test.abc\", \"Namespaced click triggered\");\n  });\n\n  // Those would not trigger/off (trac-5303)\n  jQuery(\"#firstp\").trigger(\"click.a.test\");\n  jQuery(\"#firstp\").off(\"click.a.test\");\n\n  // Trigger both bound fn (1)\n  jQuery(\"#firstp\").trigger(\"click.test.abc\");\n\n  // Trigger one bound fn (1)\n  jQuery(\"#firstp\").trigger(\"click.abc\");\n\n  // Trigger two bound fn (2)\n  jQuery(\"#firstp\").trigger(\"click.test\");\n\n  // Remove only the one fn\n  jQuery(\"#firstp\").off(\"click.abc\");\n\n  // Trigger the remaining fn (1)\n  jQuery(\"#firstp\").trigger(\"click\");\n\n  // Remove the remaining fn\n  jQuery(\"#firstp\").off(\".test\");\n\n  // Trigger the remaining fn (1)\n  jQuery(\"#firstp\").trigger(\"custom\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"namespace-only event binding is a no-op","suites":["event"],"line":518,"code":"QUnit.test(\"namespace-only event binding is a no-op\", function (assert) {\n  assert.expect(2);\n  jQuery(\"#firstp\").on(\".whoops\", function () {\n    assert.ok(false, \"called a namespace-only event\");\n  }).on(\"whoops\", function () {\n    assert.ok(true, \"called whoops\");\n  }).trigger(\"whoops\") // 1\n  .off(\".whoops\").trigger(\"whoops\") // 2\n  .off(\"whoops\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Empty namespace is ignored","suites":["event"],"line":528,"code":"QUnit.test(\"Empty namespace is ignored\", function (assert) {\n  assert.expect(1);\n  jQuery(\"#firstp\").on(\"meow.\", function (e) {\n    assert.equal(e.namespace, \"\", \"triggered a namespace-less meow event\");\n  }).trigger(\"meow.\").off(\"meow.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), with same function","suites":["event"],"line":534,"code":"QUnit.test(\"on(), with same function\", function (assert) {\n  assert.expect(2);\n  var count = 0,\n    func = function () {\n      count++;\n    };\n  jQuery(\"#liveHandlerOrder\").on(\"foo.bar\", func).on(\"foo.zar\", func);\n  jQuery(\"#liveHandlerOrder\").trigger(\"foo.bar\");\n  assert.equal(count, 1, \"Verify binding function with multiple namespaces.\");\n  jQuery(\"#liveHandlerOrder\").off(\"foo.bar\", func).off(\"foo.zar\", func);\n  jQuery(\"#liveHandlerOrder\").trigger(\"foo.bar\");\n  assert.equal(count, 1, \"Verify that removing events still work.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), make sure order is maintained","suites":["event"],"line":547,"code":"QUnit.test(\"on(), make sure order is maintained\", function (assert) {\n  assert.expect(1);\n  var elem = jQuery(\"#firstp\"),\n    log = [],\n    check = [];\n  jQuery.each(new Array(100), function (i) {\n    elem.on(\"click\", function () {\n      log.push(i);\n    });\n    check.push(i);\n  });\n  elem.trigger(\"click\");\n  assert.equal(log.join(\",\"), check.join(\",\"), \"Make sure order was maintained.\");\n  elem.off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(), with different this object","suites":["event"],"line":562,"code":"QUnit.test(\"on(), with different this object\", function (assert) {\n  assert.expect(4);\n  var thisObject = {\n      myThis: true\n    },\n    data = {\n      myData: true\n    },\n    handler1 = function () {\n      assert.equal(this, thisObject, \"on() with different this object\");\n    }.bind(thisObject),\n    handler2 = function (event) {\n      assert.equal(this, thisObject, \"on() with different this object and data\");\n      assert.equal(event.data, data, \"on() with different this object and data\");\n    }.bind(thisObject);\n  jQuery(\"#firstp\").on(\"click\", handler1).trigger(\"click\").off(\"click\", handler1).on(\"click\", data, handler2).trigger(\"click\").off(\"click\", handler2);\n  assert.ok(!jQuery._data(jQuery(\"#firstp\")[0], \"events\"), \"Event handler unbound when using different this object and data.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(name, false), off(name, false)","suites":["event"],"line":580,"code":"QUnit.test(\"on(name, false), off(name, false)\", function (assert) {\n  assert.expect(3);\n  var main = 0;\n  jQuery(\"#qunit-fixture\").on(\"click\", function () {\n    main++;\n  });\n  jQuery(\"#ap\").trigger(\"click\");\n  assert.equal(main, 1, \"Verify that the trigger happened correctly.\");\n  main = 0;\n  jQuery(\"#ap\").on(\"click\", false);\n  jQuery(\"#ap\").trigger(\"click\");\n  assert.equal(main, 0, \"Verify that no bubble happened.\");\n  main = 0;\n  jQuery(\"#ap\").off(\"click\", false);\n  jQuery(\"#ap\").trigger(\"click\");\n  assert.equal(main, 1, \"Verify that the trigger happened correctly.\");\n\n  // manually clean up events from elements outside the fixture\n  jQuery(\"#qunit-fixture\").off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on(name, selector, false), off(name, selector, false)","suites":["event"],"line":600,"code":"QUnit.test(\"on(name, selector, false), off(name, selector, false)\", function (assert) {\n  assert.expect(3);\n  var main = 0;\n  jQuery(\"#qunit-fixture\").on(\"click\", \"#ap\", function () {\n    main++;\n  });\n  jQuery(\"#ap\").trigger(\"click\");\n  assert.equal(main, 1, \"Verify that the trigger happened correctly.\");\n  main = 0;\n  jQuery(\"#ap\").on(\"click\", \"#groups\", false);\n  jQuery(\"#groups\").trigger(\"click\");\n  assert.equal(main, 0, \"Verify that no bubble happened.\");\n  main = 0;\n  jQuery(\"#ap\").off(\"click\", \"#groups\", false);\n  jQuery(\"#groups\").trigger(\"click\");\n  assert.equal(main, 1, \"Verify that the trigger happened correctly.\");\n  jQuery(\"#qunit-fixture\").off(\"click\", \"#ap\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on()/trigger()/off() on plain object","suites":["event"],"line":618,"code":"QUnit.test(\"on()/trigger()/off() on plain object\", function (assert) {\n  assert.expect(7);\n  var events,\n    obj = {};\n\n  // Make sure it doesn't complain when no events are found\n  jQuery(obj).trigger(\"test\");\n\n  // Make sure it doesn't complain when no events are found\n  jQuery(obj).off(\"test\");\n  jQuery(obj).on({\n    \"test\": function () {\n      assert.ok(true, \"Custom event run.\");\n    },\n    \"submit\": function () {\n      assert.ok(true, \"Custom submit event run.\");\n    }\n  });\n  events = jQuery._data(obj, \"events\");\n  assert.ok(events, \"Object has events bound.\");\n  assert.equal(obj[\"events\"], undefined, \"Events object on plain objects is not events\");\n  assert.equal(obj.test, undefined, \"Make sure that test event is not on the plain object.\");\n  assert.equal(obj.handle, undefined, \"Make sure that the event handler is not on the plain object.\");\n\n  // Should trigger 1\n  jQuery(obj).trigger(\"test\");\n  jQuery(obj).trigger(\"submit\");\n  jQuery(obj).off(\"test\");\n  jQuery(obj).off(\"submit\");\n\n  // Should trigger 0\n  jQuery(obj).trigger(\"test\");\n\n  // Make sure it doesn't complain when no events are found\n  jQuery(obj).off(\"test\");\n  assert.equal(obj && obj[jQuery.expando] && obj[jQuery.expando][jQuery.expando] && obj[jQuery.expando][jQuery.expando][\"events\"], undefined, \"Make sure events object is removed\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"off(type)","suites":["event"],"line":655,"code":"QUnit.test(\"off(type)\", function (assert) {\n  assert.expect(1);\n  var message,\n    func,\n    $elem = jQuery(\"#firstp\");\n  function error() {\n    assert.ok(false, message);\n  }\n  message = \"unbind passing function\";\n  $elem.on(\"error1\", error).off(\"error1\", error).triggerHandler(\"error1\");\n  message = \"unbind all from event\";\n  $elem.on(\"error1\", error).off(\"error1\").triggerHandler(\"error1\");\n  message = \"unbind all\";\n  $elem.on(\"error1\", error).off().triggerHandler(\"error1\");\n  message = \"unbind many with function\";\n  $elem.on(\"error1 error2\", error).off(\"error1 error2\", error).trigger(\"error1\").triggerHandler(\"error2\");\n  message = \"unbind many\"; // trac-3538\n  $elem.on(\"error1 error2\", error).off(\"error1 error2\").trigger(\"error1\").triggerHandler(\"error2\");\n  message = \"unbind without a type or handler\";\n  $elem.on(\"error1 error2.test\", error).off().trigger(\"error1\").triggerHandler(\"error2\");\n\n  // Should only unbind the specified function\n  jQuery(document).on(\"click\", function () {\n    assert.ok(true, \"called handler after selective removal\");\n  });\n  func = function () {};\n  jQuery(document).on(\"click\", func).off(\"click\", func).trigger(\"click\").off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"off(eventObject)","suites":["event"],"line":683,"code":"QUnit.test(\"off(eventObject)\", function (assert) {\n  assert.expect(4);\n  var $elem = jQuery(\"#firstp\"),\n    num;\n  function check(expected) {\n    num = 0;\n    $elem.trigger(\"foo\").triggerHandler(\"bar\");\n    assert.equal(num, expected, \"Check the right handlers are triggered\");\n  }\n  $elem\n\n  // This handler shouldn't be unbound\n  .on(\"foo\", function () {\n    num += 1;\n  }).on(\"foo\", function (e) {\n    $elem.off(e);\n    num += 2;\n  })\n\n  // Neither this one\n  .on(\"bar\", function () {\n    num += 4;\n  });\n  check(7);\n  check(5);\n  $elem.off(\"bar\");\n  check(1);\n  $elem.off();\n  check(0);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"mouseover triggers mouseenter","suites":["event"],"line":713,"code":"QUnit.test(\"mouseover triggers mouseenter\", function (assert) {\n  assert.expect(1);\n  var count = 0,\n    elem = jQuery(\"<a></a>\");\n  elem.on(\"mouseenter\", function () {\n    count++;\n  });\n  elem.trigger(\"mouseover\");\n  assert.equal(count, 1, \"make sure mouseover triggers a mouseenter\");\n  elem.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"pointerover triggers pointerenter","suites":["event"],"line":724,"code":"QUnit.test(\"pointerover triggers pointerenter\", function (assert) {\n  assert.expect(1);\n  var count = 0,\n    elem = jQuery(\"<a></a>\");\n  elem.on(\"pointerenter\", function () {\n    count++;\n  });\n  elem.trigger(\"pointerover\");\n  assert.equal(count, 1, \"make sure pointerover triggers a pointerenter\");\n  elem.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"withinElement implemented with jQuery.contains()","suites":["event"],"line":735,"code":"QUnit.test(\"withinElement implemented with jQuery.contains()\", function (assert) {\n  assert.expect(1);\n  jQuery(\"#qunit-fixture\").append(\"<div id='jc-outer'><div id='jc-inner'></div></div>\");\n  jQuery(\"#jc-outer\").on(\"mouseenter mouseleave\", function (event) {\n    assert.equal(this.id, \"jc-outer\", this.id + \" \" + event.type);\n  });\n  jQuery(\"#jc-inner\").trigger(\"mouseenter\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"mouseenter, mouseleave don't catch exceptions","suites":["event"],"line":743,"code":"QUnit.test(\"mouseenter, mouseleave don't catch exceptions\", function (assert) {\n  assert.expect(2);\n  var elem = jQuery(\"#firstp\").on(\"mouseenter mouseleave\", function () {\n    throw \"an Exception\";\n  });\n  try {\n    elem.trigger(\"mouseenter\");\n  } catch (e) {\n    assert.equal(e, \"an Exception\", \"mouseenter doesn't catch exceptions\");\n  }\n  try {\n    elem.trigger(\"mouseleave\");\n  } catch (e) {\n    assert.equal(e, \"an Exception\", \"mouseleave doesn't catch exceptions\");\n  }\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger() bubbling","suites":["event"],"line":759,"code":"QUnit.test(\"trigger() bubbling\", function (assert) {\n  assert.expect(18);\n  var win = 0,\n    doc = 0,\n    html = 0,\n    body = 0,\n    main = 0,\n    ap = 0;\n  jQuery(window).on(\"click\", function () {\n    win++;\n  });\n  jQuery(document).on(\"click\", function (e) {\n    if (e.target !== document) {\n      doc++;\n    }\n  });\n  jQuery(\"html\").on(\"click\", function () {\n    html++;\n  });\n  jQuery(\"body\").on(\"click\", function () {\n    body++;\n  });\n  jQuery(\"#qunit-fixture\").on(\"click\", function () {\n    main++;\n  });\n  jQuery(\"#ap\").on(\"click\", function () {\n    ap++;\n    return false;\n  });\n  jQuery(\"html\").trigger(\"click\");\n  assert.equal(win, 1, \"HTML bubble\");\n  assert.equal(doc, 1, \"HTML bubble\");\n  assert.equal(html, 1, \"HTML bubble\");\n  jQuery(\"body\").trigger(\"click\");\n  assert.equal(win, 2, \"Body bubble\");\n  assert.equal(doc, 2, \"Body bubble\");\n  assert.equal(html, 2, \"Body bubble\");\n  assert.equal(body, 1, \"Body bubble\");\n  jQuery(\"#qunit-fixture\").trigger(\"click\");\n  assert.equal(win, 3, \"Main bubble\");\n  assert.equal(doc, 3, \"Main bubble\");\n  assert.equal(html, 3, \"Main bubble\");\n  assert.equal(body, 2, \"Main bubble\");\n  assert.equal(main, 1, \"Main bubble\");\n  jQuery(\"#ap\").trigger(\"click\");\n  assert.equal(doc, 3, \"ap bubble\");\n  assert.equal(html, 3, \"ap bubble\");\n  assert.equal(body, 2, \"ap bubble\");\n  assert.equal(main, 1, \"ap bubble\");\n  assert.equal(ap, 1, \"ap bubble\");\n  jQuery(document).trigger(\"click\");\n  assert.equal(win, 4, \"doc bubble\");\n\n  // manually clean up events from elements outside the fixture\n  jQuery(window).off(\"click\");\n  jQuery(document).off(\"click\");\n  jQuery(\"html, body, #qunit-fixture\").off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger(type, [data], [fn])","suites":["event"],"line":817,"code":"QUnit.test(\"trigger(type, [data], [fn])\", function (assert) {\n  assert.expect(16);\n  var $elem,\n    pass,\n    form,\n    elem2,\n    handler = function (event, a, b, c) {\n      assert.equal(event.type, \"click\", \"check passed data\");\n      assert.equal(a, 1, \"check passed data\");\n      assert.equal(b, \"2\", \"check passed data\");\n      assert.equal(c, \"abc\", \"check passed data\");\n      return \"test\";\n    };\n  $elem = jQuery(\"#firstp\");\n\n  // Simulate a \"native\" click\n  $elem[0].click = function () {\n    assert.ok(true, \"Native call was triggered\");\n  };\n  jQuery(document).on(\"mouseenter\", \"#firstp\", function () {\n    assert.ok(true, \"Trigger mouseenter bound by on\");\n  });\n  jQuery(document).on(\"mouseleave\", \"#firstp\", function () {\n    assert.ok(true, \"Trigger mouseleave bound by on\");\n  });\n  $elem.trigger(\"mouseenter\");\n  $elem.trigger(\"mouseleave\");\n  jQuery(document).off(\"mouseenter mouseleave\", \"#firstp\");\n\n  // Triggers handlers and native\n  // Trigger 5\n  $elem.on(\"click\", handler).trigger(\"click\", [1, \"2\", \"abc\"]);\n\n  // Simulate a \"native\" click\n  $elem[0].click = function () {\n    assert.ok(false, \"Native call was triggered\");\n  };\n\n  // Trigger only the handlers (no native)\n  // Triggers 5\n  assert.equal($elem.triggerHandler(\"click\", [1, \"2\", \"abc\"]), \"test\", \"Verify handler response\");\n  pass = true;\n  try {\n    elem2 = jQuery(\"#form input\").eq(0);\n    elem2.get(0).style.display = \"none\";\n    elem2.trigger(\"focus\");\n  } catch (e) {\n    pass = false;\n  }\n  assert.ok(pass, \"Trigger focus on hidden element\");\n  pass = true;\n  try {\n    jQuery(\"#qunit-fixture table\").eq(0).on(\"test:test\", function () {}).trigger(\"test:test\");\n  } catch (e) {\n    pass = false;\n  }\n  assert.ok(pass, \"Trigger on a table with a colon in the even type, see trac-3533\");\n  form = jQuery(\"<form action=''></form>\").appendTo(\"body\");\n\n  // Make sure it can be prevented locally\n  form.on(\"submit\", function () {\n    assert.ok(true, \"Local `on` still works.\");\n    return false;\n  });\n\n  // Trigger 1\n  form.trigger(\"submit\");\n  form.off(\"submit\");\n  jQuery(document).on(\"submit\", function () {\n    assert.ok(true, \"Make sure bubble works up to document.\");\n    return false;\n  });\n\n  // Trigger 1\n  form.trigger(\"submit\");\n  jQuery(document).off(\"submit\");\n  form.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"submit event bubbles on copied forms (trac-11649)","suites":["event"],"line":895,"code":"QUnit.test(\"submit event bubbles on copied forms (trac-11649)\", function (assert) {\n  assert.expect(3);\n  var $formByClone,\n    $formByHTML,\n    $testForm = jQuery(\"#testForm\"),\n    $fixture = jQuery(\"#qunit-fixture\"),\n    $wrapperDiv = jQuery(\"<div></div>\").appendTo($fixture);\n  function noSubmit(e) {\n    e.preventDefault();\n  }\n  function delegatedSubmit() {\n    assert.ok(true, \"Make sure submit event bubbles up.\");\n    return false;\n  }\n\n  // Attach a delegated submit handler to the parent element\n  $fixture.on(\"submit\", \"form\", delegatedSubmit);\n\n  // Trigger form submission to introduce the _submit_attached property\n  $testForm.on(\"submit\", noSubmit).find(\"input[name=sub1]\").trigger(\"click\");\n\n  // Copy the form via .clone() and .html()\n  $formByClone = $testForm.clone(true, true).removeAttr(\"id\");\n  $formByHTML = jQuery(jQuery.parseHTML($fixture.html())).filter(\"#testForm\").removeAttr(\"id\");\n  $wrapperDiv.append($formByClone, $formByHTML);\n\n  // Check submit bubbling on the copied forms\n  $wrapperDiv.find(\"form\").on(\"submit\", noSubmit).find(\"input[name=sub1]\").trigger(\"click\");\n\n  // Clean up\n  $wrapperDiv.remove();\n  $fixture.off(\"submit\", \"form\", delegatedSubmit);\n  $testForm.off(\"submit\", noSubmit);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"change event bubbles on copied forms (trac-11796)","suites":["event"],"line":929,"code":"QUnit.test(\"change event bubbles on copied forms (trac-11796)\", function (assert) {\n  assert.expect(3);\n  var $formByClone,\n    $formByHTML,\n    $form = jQuery(\"#form\"),\n    $fixture = jQuery(\"#qunit-fixture\"),\n    $wrapperDiv = jQuery(\"<div></div>\").appendTo($fixture);\n  function delegatedChange() {\n    assert.ok(true, \"Make sure change event bubbles up.\");\n    return false;\n  }\n\n  // Attach a delegated change handler to the form\n  $fixture.on(\"change\", \"form\", delegatedChange);\n\n  // Trigger change event to introduce the _change_attached property\n  $form.find(\"select[name=select1]\").val(\"1\").trigger(\"change\");\n\n  // Copy the form via .clone() and .html()\n  $formByClone = $form.clone(true, true).removeAttr(\"id\");\n  $formByHTML = jQuery(jQuery.parseHTML($fixture.html())).filter(\"#form\").removeAttr(\"id\");\n  $wrapperDiv.append($formByClone, $formByHTML);\n\n  // Check change bubbling on the copied forms\n  $wrapperDiv.find(\"form select[name=select1]\").val(\"2\").trigger(\"change\");\n\n  // Clean up\n  $wrapperDiv.remove();\n  $fixture.off(\"change\", \"form\", delegatedChange);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger(eventObject, [data], [fn])","suites":["event"],"line":959,"code":"QUnit.test(\"trigger(eventObject, [data], [fn])\", function (assert) {\n  assert.expect(28);\n  var event,\n    $parent = jQuery(\"<div id='par'></div>\").appendTo(\"body\"),\n    $child = jQuery(\"<p id='child'>foo</p>\").appendTo($parent);\n  $parent.get(0).style.display = \"none\";\n  event = jQuery.Event(\"noNew\");\n  assert.ok(event !== window, \"Instantiate jQuery.Event without the 'new' keyword\");\n  assert.equal(event.type, \"noNew\", \"Verify its type\");\n  assert.equal(event.isDefaultPrevented(), false, \"Verify isDefaultPrevented\");\n  assert.equal(event.isPropagationStopped(), false, \"Verify isPropagationStopped\");\n  assert.equal(event.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\");\n  event.preventDefault();\n  assert.equal(event.isDefaultPrevented(), true, \"Verify isDefaultPrevented\");\n  event.stopPropagation();\n  assert.equal(event.isPropagationStopped(), true, \"Verify isPropagationStopped\");\n  event.isPropagationStopped = function () {\n    return false;\n  };\n  event.stopImmediatePropagation();\n  assert.equal(event.isPropagationStopped(), true, \"Verify isPropagationStopped\");\n  assert.equal(event.isImmediatePropagationStopped(), true, \"Verify isPropagationStopped\");\n  $parent.on(\"foo\", function (e) {\n    // Tries bubbling\n    assert.equal(e.type, \"foo\", \"Verify event type when passed passing an event object\");\n    assert.equal(e.target.id, \"child\", \"Verify event.target when passed passing an event object\");\n    assert.equal(e.currentTarget.id, \"par\", \"Verify event.currentTarget when passed passing an event object\");\n    assert.equal(e.secret, \"boo!\", \"Verify event object's custom attribute when passed passing an event object\");\n  });\n\n  // test with an event object\n  event = new jQuery.Event(\"foo\");\n  event.secret = \"boo!\";\n  $child.trigger(event);\n\n  // test with a literal object\n  $child.trigger({\n    \"type\": \"foo\",\n    \"secret\": \"boo!\"\n  });\n  $parent.off();\n  function error() {\n    assert.ok(false, \"This assertion shouldn't be reached\");\n  }\n  $parent.on(\"foo\", error);\n  $child.on(\"foo\", function (e, a, b, c) {\n    assert.equal(arguments.length, 4, \"Check arguments length\");\n    assert.equal(a, 1, \"Check first custom argument\");\n    assert.equal(b, 2, \"Check second custom argument\");\n    assert.equal(c, 3, \"Check third custom argument\");\n    assert.equal(e.isDefaultPrevented(), false, \"Verify isDefaultPrevented\");\n    assert.equal(e.isPropagationStopped(), false, \"Verify isPropagationStopped\");\n    assert.equal(e.isImmediatePropagationStopped(), false, \"Verify isImmediatePropagationStopped\");\n\n    // Skips both errors\n    e.stopImmediatePropagation();\n    return \"result\";\n  });\n\n  // We should add this back in when we want to test the order\n  // in which event handlers are iterated.\n  //$child.on(\"foo\", error );\n\n  event = new jQuery.Event(\"foo\");\n  $child.trigger(event, [1, 2, 3]).off();\n  assert.equal(event.result, \"result\", \"Check event.result attribute\");\n\n  // Will error if it bubbles\n  $child.triggerHandler(\"foo\");\n  $child.off();\n  $parent.off().remove();\n\n  // Ensure triggerHandler doesn't molest its event object (#xxx)\n  event = jQuery.Event(\"zowie\");\n  jQuery(document).triggerHandler(event);\n  assert.equal(event.type, \"zowie\", \"Verify its type\");\n  assert.equal(event.isPropagationStopped(), false, \"propagation not stopped\");\n  assert.equal(event.isDefaultPrevented(), false, \"default not prevented\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".trigger() bubbling on disconnected elements (trac-10489)","suites":["event"],"line":1038,"code":"QUnit.test(\".trigger() bubbling on disconnected elements (trac-10489)\", function (assert) {\n  assert.expect(2);\n  jQuery(window).on(\"click\", function () {\n    assert.ok(false, \"click fired on window\");\n  });\n  jQuery(\"<div><p>hi</p></div>\").on(\"click\", function () {\n    assert.ok(true, \"click fired on div\");\n  }).find(\"p\").on(\"click\", function () {\n    assert.ok(true, \"click fired on p\");\n  }).trigger(\"click\").off(\"click\").end().off(\"click\").remove();\n  jQuery(window).off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".trigger() doesn't bubble load event (trac-10717)","suites":["event"],"line":1050,"code":"QUnit.test(\".trigger() doesn't bubble load event (trac-10717)\", function (assert) {\n  assert.expect(1);\n  jQuery(window).on(\"load\", function () {\n    assert.ok(false, \"load fired on window\");\n  });\n  jQuery(\"<img src='\" + baseURL + \"1x1.jpg' />\").appendTo(\"body\").on(\"load\", function () {\n    assert.ok(true, \"load fired on img\");\n  }).trigger(\"load\").remove();\n  jQuery(window).off(\"load\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Delegated events in SVG (trac-10791; trac-13180)","suites":["event"],"line":1060,"code":"QUnit.test(\"Delegated events in SVG (trac-10791; trac-13180)\", function (assert) {\n  assert.expect(2);\n  var useElem,\n    e,\n    svg = jQuery(\"<svg height='1' version='1.1' width='1' xmlns='http://www.w3.org/2000/svg'>\" + \"<defs><rect id='ref' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect></defs>\" + \"<rect class='svg-by-class' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" + \"<rect id='svg-by-id' x='10' y='20' width='100' height='60' r='10' rx='10' ry='10'></rect>\" + \"<use id='use' xlink:href='#ref'></use>\" + \"</svg>\");\n  jQuery(\"#qunit-fixture\").append(svg).on(\"click\", \"#svg-by-id\", function () {\n    assert.ok(true, \"delegated id selector\");\n  }).on(\"click\", \"[class~='svg-by-class']\", function () {\n    assert.ok(true, \"delegated class selector\");\n  }).find(\"#svg-by-id, [class~='svg-by-class']\").trigger(\"click\").end();\n\n  // Fire a native click on an SVGElementInstance (the instance tree of an SVG <use>)\n  // to confirm that it doesn't break our event delegation handling (trac-13180)\n  useElem = svg.find(\"#use\")[0];\n  if (document.createEvent && useElem && useElem.instanceRoot) {\n    e = document.createEvent(\"MouseEvents\");\n    e.initEvent(\"click\", true, true);\n    useElem.instanceRoot.dispatchEvent(e);\n  }\n  jQuery(\"#qunit-fixture\").off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Delegated events with malformed selectors (gh-3071)","suites":["event"],"line":1081,"code":"QUnit.test(\"Delegated events with malformed selectors (gh-3071)\", function (assert) {\n  assert.expect(3);\n  assert.throws(function () {\n    jQuery(\"#foo\").on(\"click\", \":not\", function () {});\n  }, \"malformed selector throws on attach\");\n  assert.throws(function () {\n    jQuery(\"#foo\").on(\"click\", \"nonexistent:not\", function () {});\n  }, \"short-circuitable malformed selector throws on attach\");\n  jQuery(\"#foo > :first-child\").trigger(\"click\");\n  assert.ok(true, \"malformed selector does not throw on event\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)","suites":["event"],"line":1092,"code":"QUnit.test(\"Delegated events in forms (trac-10844; trac-11145; trac-8165; trac-11382, trac-11764)\", function (assert) {\n  assert.expect(5);\n\n  // Alias names like \"id\" cause havoc\n  var form = jQuery(\"<form id='myform'>\" + \"<input type='text' name='id' value='secret agent man' />\" + \"</form>\").on(\"submit\", function (event) {\n    event.preventDefault();\n  }).appendTo(\"body\");\n  jQuery(\"body\").on(\"submit\", \"#myform\", function () {\n    assert.ok(true, \"delegated id selector with aliased id\");\n  }).find(\"#myform\").trigger(\"submit\").end().off(\"submit\");\n  form.append(\"<input type='text' name='disabled' value='differently abled' />\");\n  jQuery(\"body\").on(\"submit\", \"#myform\", function () {\n    assert.ok(true, \"delegated id selector with aliased disabled\");\n  }).find(\"#myform\").trigger(\"submit\").end().off(\"submit\");\n  form.append(\"<button id='nestyDisabledBtn'><span>Zing</span></button>\").on(\"click\", \"#nestyDisabledBtn\", function () {\n    assert.ok(true, \"click on enabled/disabled button with nesty elements\");\n  }).on(\"mouseover\", \"#nestyDisabledBtn\", function () {\n    assert.ok(true, \"mouse on enabled/disabled button with nesty elements\");\n  }).find(\"span\").trigger(\"click\") // yep\n  .trigger(\"mouseover\") // yep\n  .end().find(\"#nestyDisabledBtn\").prop(\"disabled\", true).end().find(\"span\").trigger(\"click\") // nope\n  .trigger(\"mouseover\") // yep\n  .end().off(\"click\");\n  form.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Submit event can be stopped (trac-11049)","suites":["event"],"line":1117,"code":"QUnit.test(\"Submit event can be stopped (trac-11049)\", function (assert) {\n  assert.expect(1);\n\n  // Since we manually bubble in IE, make sure inner handlers get a chance to cancel\n  var form = jQuery(\"<form id='myform'>\" + \"<input type='text' name='sue' value='bawls' />\" + \"<input type='submit' />\" + \"</form>\").appendTo(\"body\");\n  jQuery(\"body\").on(\"submit\", function () {\n    assert.ok(true, \"submit bubbled on first handler\");\n    return false;\n  }).find(\"#myform input[type=submit]\").each(function () {\n    this.click();\n  }).end().on(\"submit\", function () {\n    assert.ok(false, \"submit bubbled on second handler\");\n    return false;\n  }).find(\"#myform input[type=submit]\").each(function () {\n    jQuery(this.form).on(\"submit\", function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    });\n    this.click();\n  }).end().off(\"submit\");\n  form.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"jQuery.Event( type, props )","suites":["event"],"line":1156,"code":"QUnit.test(\"jQuery.Event( type, props )\", function (assert) {\n  assert.expect(6);\n  var event = jQuery.Event(\"keydown\", {\n      keyCode: 64\n    }),\n    handler = function (event) {\n      assert.ok(\"keyCode\" in event, \"Special property 'keyCode' exists\");\n      assert.equal(event.keyCode, 64, \"event.keyCode has explicit value '64'\");\n    };\n\n  // Supports jQuery.Event implementation\n  assert.equal(event.type, \"keydown\", \"Verify type\");\n\n  // ensure \"type\" in props won't clobber the one set by constructor\n  assert.equal(jQuery.inArray(\"type\", jQuery.event.props), -1, \"'type' property not in props (trac-10375)\");\n  assert.ok(\"keyCode\" in event, \"Special 'keyCode' property exists\");\n  assert.strictEqual(jQuery.isPlainObject(event), false, \"Instances of $.Event should not be identified as a plain object.\");\n  jQuery(\"body\").on(\"keydown\", handler).trigger(event);\n  jQuery(\"body\").off(\"keydown\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"jQuery.Event properties","suites":["event"],"line":1176,"code":"QUnit.test(\"jQuery.Event properties\", function (assert) {\n  assert.expect(12);\n  var handler,\n    $structure = jQuery(\"<div id='ancestor'><p id='delegate'><span id='target'>shiny</span></p></div>\"),\n    $target = $structure.find(\"#target\");\n  handler = function (e) {\n    assert.strictEqual(e.currentTarget, this, \"currentTarget at \" + this.id);\n    assert.equal(e.isTrigger, 3, \"trigger at \" + this.id);\n  };\n  $structure.one(\"click\", handler);\n  $structure.one(\"click\", \"p\", handler);\n  $target.one(\"click\", handler);\n  $target[0].onclick = function (e) {\n    assert.strictEqual(e.currentTarget, this, \"currentTarget at target (native handler)\");\n    assert.equal(e.isTrigger, 3, \"trigger at target (native handler)\");\n  };\n  $target.trigger(\"click\");\n  $target.one(\"click\", function (e) {\n    assert.equal(e.isTrigger, 2, \"triggerHandler at target\");\n  });\n  $target[0].onclick = function (e) {\n    assert.equal(e.isTrigger, 2, \"triggerHandler at target (native handler)\");\n  };\n  $target.triggerHandler(\"click\");\n  handler = function (e) {\n    assert.strictEqual(e.isTrigger, undefined, \"native event at \" + this.id);\n  };\n  $target.one(\"click\", handler);\n  $target[0].onclick = function (e) {\n    assert.strictEqual(e.isTrigger, undefined, \"native event at target (native handler)\");\n  };\n  fireNative($target[0], \"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".on()/.off()","suites":["event"],"line":1209,"code":"QUnit.test(\".on()/.off()\", function (assert) {\n  assert.expect(65);\n  var event,\n    clicked,\n    hash,\n    called,\n    livec,\n    lived,\n    livee,\n    submit = 0,\n    div = 0,\n    livea = 0,\n    liveb = 0;\n  jQuery(\"#body\").on(\"submit\", \"#qunit-fixture div\", function () {\n    submit++;\n    return false;\n  });\n  jQuery(\"#body\").on(\"click\", \"#qunit-fixture div\", function () {\n    div++;\n  });\n  jQuery(\"#body\").on(\"click\", \"div#nothiddendiv\", function () {\n    livea++;\n  });\n  jQuery(\"#body\").on(\"click\", \"div#nothiddendivchild\", function () {\n    liveb++;\n  });\n\n  // Nothing should trigger on the body\n  jQuery(\"body\").trigger(\"click\");\n  assert.equal(submit, 0, \"Click on body\");\n  assert.equal(div, 0, \"Click on body\");\n  assert.equal(livea, 0, \"Click on body\");\n  assert.equal(liveb, 0, \"Click on body\");\n\n  // This should trigger two events\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"div#nothiddendiv\").trigger(\"click\");\n  assert.equal(submit, 0, \"Click on div\");\n  assert.equal(div, 1, \"Click on div\");\n  assert.equal(livea, 1, \"Click on div\");\n  assert.equal(liveb, 0, \"Click on div\");\n\n  // This should trigger three events (w/ bubbling)\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  assert.equal(submit, 0, \"Click on inner div\");\n  assert.equal(div, 2, \"Click on inner div\");\n  assert.equal(livea, 1, \"Click on inner div\");\n  assert.equal(liveb, 1, \"Click on inner div\");\n\n  // This should trigger one submit\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"div#nothiddendivchild\").trigger(\"submit\");\n  assert.equal(submit, 1, \"Submit on div\");\n  assert.equal(div, 0, \"Submit on div\");\n  assert.equal(livea, 0, \"Submit on div\");\n  assert.equal(liveb, 0, \"Submit on div\");\n\n  // Make sure no other events were removed in the process\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  assert.equal(submit, 0, \"off Click on inner div\");\n  assert.equal(div, 2, \"off Click on inner div\");\n  assert.equal(livea, 1, \"off Click on inner div\");\n  assert.equal(liveb, 1, \"off Click on inner div\");\n\n  // Now make sure that the removal works\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"#body\").off(\"click\", \"div#nothiddendivchild\");\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  assert.equal(submit, 0, \"off Click on inner div\");\n  assert.equal(div, 2, \"off Click on inner div\");\n  assert.equal(livea, 1, \"off Click on inner div\");\n  assert.equal(liveb, 0, \"off Click on inner div\");\n\n  // Make sure that the click wasn't removed too early\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"div#nothiddendiv\").trigger(\"click\");\n  assert.equal(submit, 0, \"off Click on inner div\");\n  assert.equal(div, 1, \"off Click on inner div\");\n  assert.equal(livea, 1, \"off Click on inner div\");\n  assert.equal(liveb, 0, \"off Click on inner div\");\n\n  // Make sure that stopPropagation doesn't stop live events\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  jQuery(\"#body\").on(\"click\", \"div#nothiddendivchild\", function (e) {\n    liveb++;\n    e.stopPropagation();\n  });\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  assert.equal(submit, 0, \"stopPropagation Click on inner div\");\n  assert.equal(div, 1, \"stopPropagation Click on inner div\");\n  assert.equal(livea, 0, \"stopPropagation Click on inner div\");\n  assert.equal(liveb, 1, \"stopPropagation Click on inner div\");\n\n  // Make sure click events only fire with primary click\n  submit = 0;\n  div = 0;\n  livea = 0;\n  liveb = 0;\n  event = jQuery.Event(\"click\");\n  event.button = 1;\n  jQuery(\"div#nothiddendiv\").trigger(event);\n  assert.equal(livea, 0, \"on secondary click\");\n  jQuery(\"#body\").off(\"click\", \"div#nothiddendivchild\");\n  jQuery(\"#body\").off(\"click\", \"div#nothiddendiv\");\n  jQuery(\"#body\").off(\"click\", \"#qunit-fixture div\");\n  jQuery(\"#body\").off(\"submit\", \"#qunit-fixture div\");\n\n  // Test binding with a different context\n  clicked = 0;\n  jQuery(\"#qunit-fixture\").on(\"click\", \"#foo\", function () {\n    clicked++;\n  });\n  jQuery(\"#qunit-fixture div\").trigger(\"click\");\n  jQuery(\"#foo\").trigger(\"click\");\n  jQuery(\"#qunit-fixture\").trigger(\"click\");\n  jQuery(\"body\").trigger(\"click\");\n  assert.equal(clicked, 2, \"on with a context\");\n\n  // Test unbinding with a different context\n  jQuery(\"#qunit-fixture\").off(\"click\", \"#foo\");\n  jQuery(\"#foo\").trigger(\"click\");\n  assert.equal(clicked, 2, \"off with a context\");\n\n  // Test binding with event data\n  jQuery(\"#body\").on(\"click\", \"#foo\", true, function (e) {\n    assert.equal(e.data, true, \"on with event data\");\n  });\n  jQuery(\"#foo\").trigger(\"click\");\n  jQuery(\"#body\").off(\"click\", \"#foo\");\n\n  // Test binding with trigger data\n  jQuery(\"#body\").on(\"click\", \"#foo\", function (e, data) {\n    assert.equal(data, true, \"on with trigger data\");\n  });\n  jQuery(\"#foo\").trigger(\"click\", true);\n  jQuery(\"#body\").off(\"click\", \"#foo\");\n\n  // Test binding with different this object\n  jQuery(\"#body\").on(\"click\", \"#foo\", function () {\n    assert.equal(this.foo, \"bar\", \"on with event scope\");\n  }.bind({\n    \"foo\": \"bar\"\n  }));\n  jQuery(\"#foo\").trigger(\"click\");\n  jQuery(\"#body\").off(\"click\", \"#foo\");\n\n  // Test binding with different this object, event data, and trigger data\n  jQuery(\"#body\").on(\"click\", \"#foo\", true, function (e, data) {\n    assert.equal(e.data, true, \"on with with different this object, event data, and trigger data\");\n    assert.equal(this.foo, \"bar\", \"on with with different this object, event data, and trigger data\");\n    assert.equal(data, true, \"on with with different this object, event data, and trigger data\");\n  }.bind({\n    \"foo\": \"bar\"\n  }));\n  jQuery(\"#foo\").trigger(\"click\", true);\n  jQuery(\"#body\").off(\"click\", \"#foo\");\n\n  // Verify that return false prevents default action\n  jQuery(\"#body\").on(\"click\", \"#anchor2\", function () {\n    return false;\n  });\n  hash = window.location.hash;\n  jQuery(\"#anchor2\").trigger(\"click\");\n  assert.equal(window.location.hash, hash, \"return false worked\");\n  jQuery(\"#body\").off(\"click\", \"#anchor2\");\n\n  // Verify that .preventDefault() prevents default action\n  jQuery(\"#body\").on(\"click\", \"#anchor2\", function (e) {\n    e.preventDefault();\n  });\n  hash = window.location.hash;\n  jQuery(\"#anchor2\").trigger(\"click\");\n  assert.equal(window.location.hash, hash, \"e.preventDefault() worked\");\n  jQuery(\"#body\").off(\"click\", \"#anchor2\");\n\n  // Test binding the same handler to multiple points\n  called = 0;\n  function callback() {\n    called++;\n    return false;\n  }\n  jQuery(\"#body\").on(\"click\", \"#nothiddendiv\", callback);\n  jQuery(\"#body\").on(\"click\", \"#anchor2\", callback);\n  jQuery(\"#nothiddendiv\").trigger(\"click\");\n  assert.equal(called, 1, \"Verify that only one click occurred.\");\n  called = 0;\n  jQuery(\"#anchor2\").trigger(\"click\");\n  assert.equal(called, 1, \"Verify that only one click occurred.\");\n\n  // Make sure that only one callback is removed\n  jQuery(\"#body\").off(\"click\", \"#anchor2\", callback);\n  called = 0;\n  jQuery(\"#nothiddendiv\").trigger(\"click\");\n  assert.equal(called, 1, \"Verify that only one click occurred.\");\n  called = 0;\n  jQuery(\"#anchor2\").trigger(\"click\");\n  assert.equal(called, 0, \"Verify that no click occurred.\");\n\n  // Make sure that it still works if the selector is the same,\n  // but the event type is different\n  jQuery(\"#body\").on(\"foo\", \"#nothiddendiv\", callback);\n\n  // Cleanup\n  jQuery(\"#body\").off(\"click\", \"#nothiddendiv\", callback);\n  called = 0;\n  jQuery(\"#nothiddendiv\").trigger(\"click\");\n  assert.equal(called, 0, \"Verify that no click occurred.\");\n  called = 0;\n  jQuery(\"#nothiddendiv\").trigger(\"foo\");\n  assert.equal(called, 1, \"Verify that one foo occurred.\");\n\n  // Cleanup\n  jQuery(\"#body\").off(\"foo\", \"#nothiddendiv\", callback);\n\n  // Make sure we don't loose the target by DOM modifications\n  // after the bubble already reached the liveHandler\n  livec = 0;\n  jQuery(\"#nothiddendivchild\").html(\"<span></span>\");\n  jQuery(\"#body\").on(\"click\", \"#nothiddendivchild\", function () {\n    jQuery(\"#nothiddendivchild\").html(\"\");\n  });\n  jQuery(\"#body\").on(\"click\", \"#nothiddendivchild\", function (e) {\n    if (e.target) {\n      livec++;\n    }\n  });\n  jQuery(\"#nothiddendiv span\").trigger(\"click\");\n  assert.equal(jQuery(\"#nothiddendiv span\").length, 0, \"Verify that first handler occurred and modified the DOM.\");\n  assert.equal(livec, 1, \"Verify that second handler occurred even with nuked target.\");\n\n  // Cleanup\n  jQuery(\"#body\").off(\"click\", \"#nothiddendivchild\");\n\n  // Verify that .live() occurs and cancel bubble in the same order as\n  // we would expect .on() and .click() without delegation\n  lived = 0;\n  livee = 0;\n\n  // bind one pair in one order\n  jQuery(\"#body\").on(\"click\", \"span#liveSpan1 a\", function () {\n    lived++;\n    return false;\n  });\n  jQuery(\"#body\").on(\"click\", \"span#liveSpan1\", function () {\n    livee++;\n  });\n  jQuery(\"span#liveSpan1 a\").trigger(\"click\");\n  assert.equal(lived, 1, \"Verify that only one first handler occurred.\");\n  assert.equal(livee, 0, \"Verify that second handler doesn't.\");\n\n  // and one pair in inverse\n  jQuery(\"#body\").on(\"click\", \"span#liveSpan2\", function () {\n    livee++;\n  });\n  jQuery(\"#body\").on(\"click\", \"span#liveSpan2 a\", function () {\n    lived++;\n    return false;\n  });\n  lived = 0;\n  livee = 0;\n  jQuery(\"span#liveSpan2 a\").trigger(\"click\");\n  assert.equal(lived, 1, \"Verify that only one first handler occurred.\");\n  assert.equal(livee, 0, \"Verify that second handler doesn't.\");\n\n  // Cleanup\n  jQuery(\"#body\").off(\"click\", \"**\");\n\n  // Test this, target and currentTarget are correct\n  jQuery(\"#body\").on(\"click\", \"span#liveSpan1\", function (e) {\n    assert.equal(this.id, \"liveSpan1\", \"Check the this within a on handler\");\n    assert.equal(e.currentTarget.id, \"liveSpan1\", \"Check the event.currentTarget within a on handler\");\n    assert.equal(e.delegateTarget, document.body, \"Check the event.delegateTarget within a on handler\");\n    assert.equal(e.target.nodeName.toUpperCase(), \"A\", \"Check the event.target within a on handler\");\n  });\n  jQuery(\"span#liveSpan1 a\").trigger(\"click\");\n  jQuery(\"#body\").off(\"click\", \"span#liveSpan1\");\n\n  // Work with deep selectors\n  livee = 0;\n  function clickB() {\n    livee++;\n  }\n  jQuery(\"#body\").on(\"click\", \"#nothiddendiv div\", function () {\n    livee++;\n  });\n  jQuery(\"#body\").on(\"click\", \"#nothiddendiv div\", clickB);\n  jQuery(\"#body\").on(\"mouseover\", \"#nothiddendiv div\", function () {\n    livee++;\n  });\n  assert.equal(livee, 0, \"No clicks, deep selector.\");\n  livee = 0;\n  jQuery(\"#nothiddendivchild\").trigger(\"click\");\n  assert.equal(livee, 2, \"Click, deep selector.\");\n  livee = 0;\n  jQuery(\"#nothiddendivchild\").trigger(\"mouseover\");\n  assert.equal(livee, 1, \"Mouseover, deep selector.\");\n  jQuery(\"#body\").off(\"mouseover\", \"#nothiddendiv div\");\n  livee = 0;\n  jQuery(\"#nothiddendivchild\").trigger(\"click\");\n  assert.equal(livee, 2, \"Click, deep selector.\");\n  livee = 0;\n  jQuery(\"#nothiddendivchild\").trigger(\"mouseover\");\n  assert.equal(livee, 0, \"Mouseover, deep selector.\");\n  jQuery(\"#body\").off(\"click\", \"#nothiddendiv div\", clickB);\n  livee = 0;\n  jQuery(\"#nothiddendivchild\").trigger(\"click\");\n  assert.equal(livee, 1, \"Click, deep selector.\");\n  jQuery(\"#body\").off(\"click\", \"#nothiddendiv div\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"jQuery.off using dispatched jQuery.Event","suites":["event"],"line":1541,"code":"QUnit.test(\"jQuery.off using dispatched jQuery.Event\", function (assert) {\n  assert.expect(1);\n  var markup = jQuery(\"<p><a href='#'>target</a></p>\"),\n    count = 0;\n  markup.on(\"click.name\", \"a\", function (event) {\n    assert.equal(++count, 1, \"event called once before removal\");\n    jQuery().off(event);\n  }).find(\"a\").trigger(\"click\").trigger(\"click\").end().remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"events with type matching an Object.prototype property (gh-3256)","suites":["event"],"line":1550,"code":"QUnit.test(\"events with type matching an Object.prototype property (gh-3256)\", function (assert) {\n  assert.expect(1);\n  var elem = jQuery(\"<div></div>\"),\n    eventFired = false;\n  elem.appendTo(\"#qunit-fixture\");\n  try {\n    elem.one(\"hasOwnProperty\", function () {\n      eventFired = true;\n    }).trigger(\"hasOwnProperty\");\n  } finally {\n    assert.strictEqual(eventFired, true, \"trigger fired without crashing\");\n  }\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"events with type matching an Object.prototype property, cloned element (gh-3256)","suites":["event"],"line":1563,"code":"QUnit.test(\"events with type matching an Object.prototype property, cloned element (gh-3256)\", function (assert) {\n  assert.expect(1);\n  var elem = jQuery(\"<div></div>\"),\n    eventFired = false;\n  elem.appendTo(\"#qunit-fixture\");\n  try {\n    // Make sure the original element has some event data.\n    elem.on(\"click\", function () {});\n    elem.clone(true).one(\"hasOwnProperty\", function () {\n      eventFired = true;\n    }).trigger(\"hasOwnProperty\");\n  } finally {\n    assert.strictEqual(eventFired, true, \"trigger fired without crashing\");\n  }\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"delegated event with selector matching Object.prototype property (trac-13203)","suites":["event"],"line":1605,"code":"QUnit.test(\"delegated event with selector matching Object.prototype property (trac-13203)\", function (assert) {\n  assert.expect(1);\n  var matched = 0;\n  jQuery(\"#foo\").on(\"click\", \"toString\", function () {\n    matched++;\n  });\n  jQuery(\"#anchor2\").trigger(\"click\");\n  assert.equal(matched, 0, \"Nothing matched 'toString'\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"delegated event with intermediate DOM manipulation (trac-13208)","suites":["event"],"line":1614,"code":"QUnit.test(\"delegated event with intermediate DOM manipulation (trac-13208)\", function (assert) {\n  assert.expect(1);\n  jQuery(\"#foo\").on(\"click\", \"[id=sap]\", function () {});\n  jQuery(\"#sap\").on(\"click\", \"[id=anchor2]\", function () {\n    document.createDocumentFragment().appendChild(this.parentNode);\n    assert.ok(true, \"Element removed\");\n  });\n  jQuery(\"#anchor2\").trigger(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"ignore comment nodes in event delegation (gh-2055)","suites":["event"],"line":1623,"code":"QUnit.test(\"ignore comment nodes in event delegation (gh-2055)\", function (assert) {\n  assert.expect(1);\n\n  // Test if DOMNodeInserted is supported\n  // This is a back-up for when DOMNodeInserted support\n  // is eventually removed from browsers\n  function test() {\n    var ret = false;\n    var $fixture = jQuery(\"#qunit-fixture\");\n    $fixture.on(\"DOMNodeInserted\", function () {\n      ret = true;\n      $fixture.off(\"DOMNodeInserted\");\n    }).append(\"<div></div>\");\n    return ret;\n  }\n  var $foo = jQuery(\"#foo\").on(\"DOMNodeInserted\", \"[id]\", function () {\n      assert.ok(true, \"No error thrown on comment node\");\n    }),\n    $comment = jQuery(document.createComment(\"comment\")).appendTo($foo.find(\"#sap\"));\n  if (!test()) {\n    fireNative($comment[0], \"DOMNodeInserted\");\n  }\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"stopPropagation() stops directly-bound events on delegated target","suites":["event"],"line":1646,"code":"QUnit.test(\"stopPropagation() stops directly-bound events on delegated target\", function (assert) {\n  assert.expect(1);\n  var markup = jQuery(\"<div><p><a href=\\\"#\\\">target</a></p></div>\");\n  markup.on(\"click\", function () {\n    assert.ok(false, \"directly-bound event on delegate target was called\");\n  }).on(\"click\", \"a\", function (e) {\n    e.stopPropagation();\n    assert.ok(true, \"delegated handler was called\");\n  }).find(\"a\").trigger(\"click\").end().remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"off all bound delegated events","suites":["event"],"line":1656,"code":"QUnit.test(\"off all bound delegated events\", function (assert) {\n  assert.expect(2);\n  var count = 0,\n    clicks = 0,\n    div = jQuery(\"#body\");\n  div.on(\"click submit\", \"div#nothiddendivchild\", function () {\n    count++;\n  });\n  div.on(\"click\", function () {\n    clicks++;\n  });\n  div.off(undefined, \"**\");\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  jQuery(\"div#nothiddendivchild\").trigger(\"submit\");\n  assert.equal(count, 0, \"Make sure no events were triggered.\");\n  div.trigger(\"click\");\n  assert.equal(clicks, 2, \"Make sure delegated and directly bound event occurred.\");\n  div.off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"on with multiple delegated events","suites":["event"],"line":1675,"code":"QUnit.test(\"on with multiple delegated events\", function (assert) {\n  assert.expect(1);\n  var count = 0,\n    div = jQuery(\"#body\");\n  div.on(\"click submit\", \"div#nothiddendivchild\", function () {\n    count++;\n  });\n  jQuery(\"div#nothiddendivchild\").trigger(\"click\");\n  jQuery(\"div#nothiddendivchild\").trigger(\"submit\");\n  assert.equal(count, 2, \"Make sure both the click and submit were triggered.\");\n  jQuery(\"#body\").off(undefined, \"**\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"delegated on with change","suites":["event"],"line":1687,"code":"QUnit.test(\"delegated on with change\", function (assert) {\n  assert.expect(8);\n  var select,\n    checkbox,\n    checkboxFunction,\n    text,\n    textChange,\n    oldTextVal,\n    password,\n    passwordChange,\n    oldPasswordVal,\n    selectChange = 0,\n    checkboxChange = 0;\n  select = jQuery(\"select[name='S1']\");\n  jQuery(\"#body\").on(\"change\", \"select[name='S1']\", function () {\n    selectChange++;\n  });\n  checkbox = jQuery(\"#check2\");\n  checkboxFunction = function () {\n    checkboxChange++;\n  };\n  jQuery(\"#body\").on(\"change\", \"#check2\", checkboxFunction);\n\n  // test click on select\n\n  // second click that changed it\n  selectChange = 0;\n  select[0].selectedIndex = select[0].selectedIndex ? 0 : 1;\n  select.trigger(\"change\");\n  assert.equal(selectChange, 1, \"Change on click.\");\n\n  // test keys on select\n  selectChange = 0;\n  select[0].selectedIndex = select[0].selectedIndex ? 0 : 1;\n  select.trigger(\"change\");\n  assert.equal(selectChange, 1, \"Change on keyup.\");\n\n  // test click on checkbox\n  checkbox.trigger(\"change\");\n  assert.equal(checkboxChange, 1, \"Change on checkbox.\");\n\n  // test blur/focus on text\n  text = jQuery(\"#name\");\n  textChange = 0;\n  oldTextVal = text.val();\n  jQuery(\"#body\").on(\"change\", \"#name\", function () {\n    textChange++;\n  });\n  text.val(oldTextVal + \"foo\");\n  text.trigger(\"change\");\n  assert.equal(textChange, 1, \"Change on text input.\");\n  text.val(oldTextVal);\n  jQuery(\"#body\").off(\"change\", \"#name\");\n\n  // test blur/focus on password\n  password = jQuery(\"#name\");\n  passwordChange = 0;\n  oldPasswordVal = password.val();\n  jQuery(\"#body\").on(\"change\", \"#name\", function () {\n    passwordChange++;\n  });\n  password.val(oldPasswordVal + \"foo\");\n  password.trigger(\"change\");\n  assert.equal(passwordChange, 1, \"Change on password input.\");\n  password.val(oldPasswordVal);\n  jQuery(\"#body\").off(\"change\", \"#name\");\n\n  // make sure die works\n\n  // die all changes\n  selectChange = 0;\n  jQuery(\"#body\").off(\"change\", \"select[name='S1']\");\n  select[0].selectedIndex = select[0].selectedIndex ? 0 : 1;\n  select.trigger(\"change\");\n  assert.equal(selectChange, 0, \"Die on click works.\");\n  selectChange = 0;\n  select[0].selectedIndex = select[0].selectedIndex ? 0 : 1;\n  select.trigger(\"change\");\n  assert.equal(selectChange, 0, \"Die on keyup works.\");\n\n  // die specific checkbox\n  jQuery(\"#body\").off(\"change\", \"#check2\", checkboxFunction);\n  checkbox.trigger(\"change\");\n  assert.equal(checkboxChange, 1, \"Die on checkbox.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"delegated on with submit","suites":["event"],"line":1772,"code":"QUnit.test(\"delegated on with submit\", function (assert) {\n  assert.expect(2);\n  var count1 = 0,\n    count2 = 0;\n  jQuery(\"#body\").on(\"submit\", \"#testForm\", function (ev) {\n    count1++;\n    ev.preventDefault();\n  });\n  jQuery(document).on(\"submit\", \"body\", function (ev) {\n    count2++;\n    ev.preventDefault();\n  });\n  jQuery(\"#testForm input[name=sub1]\").trigger(\"submit\");\n  assert.equal(count1, 1, \"Verify form submit.\");\n  assert.equal(count2, 1, \"Verify body submit.\");\n  jQuery(\"#body\").off(undefined, \"**\");\n  jQuery(document).off(undefined, \"**\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"delegated off() with only namespaces","suites":["event"],"line":1790,"code":"QUnit.test(\"delegated off() with only namespaces\", function (assert) {\n  assert.expect(2);\n  var $delegate = jQuery(\"#liveHandlerOrder\"),\n    count = 0;\n  $delegate.on(\"click.ns\", \"a\", function () {\n    count++;\n  });\n  jQuery(\"a\", $delegate).eq(0).trigger(\"click.ns\");\n  assert.equal(count, 1, \"delegated click.ns\");\n  $delegate.off(\".ns\", \"**\");\n  jQuery(\"a\", $delegate).eq(1).trigger(\"click.ns\");\n  assert.equal(count, 1, \"no more .ns after off\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Non DOM element events","suites":["event"],"line":1803,"code":"QUnit.test(\"Non DOM element events\", function (assert) {\n  assert.expect(1);\n  var o = {};\n  jQuery(o).on(\"nonelementobj\", function () {\n    assert.ok(true, \"Event on non-DOM object triggered\");\n  });\n  jQuery(o).trigger(\"nonelementobj\").off(\"nonelementobj\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"inline handler returning false stops default","suites":["event"],"line":1811,"code":"QUnit.test(\"inline handler returning false stops default\", function (assert) {\n  assert.expect(1);\n  var markup = jQuery(\"<div><a href=\\\"#\\\" onclick=\\\"return false\\\">x</a></div>\");\n  markup.on(\"click\", function (e) {\n    assert.ok(e.isDefaultPrevented(), \"inline handler prevented default\");\n    return false;\n  });\n  markup.find(\"a\").trigger(\"click\");\n  markup.off(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"window resize","suites":["event"],"line":1821,"code":"QUnit.test(\"window resize\", function (assert) {\n  assert.expect(2);\n  jQuery(window).off();\n  jQuery(window).on(\"resize\", function () {\n    assert.ok(true, \"Resize event fired.\");\n  }).trigger(\"resize\").off(\"resize\");\n  assert.ok(!jQuery._data(window, \"events\"), \"Make sure all the events are gone.\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focusin bubbles","suites":["event"],"line":1829,"code":"QUnit.test(\"focusin bubbles\", function (assert) {\n  assert.expect(2);\n  var input = jQuery(\"<input type='text' />\").prependTo(\"body\"),\n    order = 0;\n\n  // focus the element so DOM focus won't fire\n  input[0].focus();\n  jQuery(\"body\").on(\"focusin.focusinBubblesTest\", function () {\n    assert.equal(1, order++, \"focusin on the body second\");\n  });\n  input.on(\"focusin.focusinBubblesTest\", function () {\n    assert.equal(0, order++, \"focusin on the element first\");\n  });\n\n  // Removed since DOM focus is unreliable on test swarm\n  // DOM focus method\n  //\tinput[0].focus();\n\n  // To make the next focus test work, we need to take focus off the input.\n  // This will fire another focusin event, so set order to reflect that.\n  //\torder = 1;\n  //\tjQuery(\"#text1\")[0].focus();\n\n  // jQuery trigger, which calls DOM focus\n  order = 0;\n  input.trigger(\"focus\");\n  input.remove();\n  jQuery(\"body\").off(\"focusin.focusinBubblesTest\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"custom events with colons (trac-3533, trac-8272)","suites":["event"],"line":1858,"code":"QUnit.test(\"custom events with colons (trac-3533, trac-8272)\", function (assert) {\n  assert.expect(1);\n  var tab = jQuery(\"<table><tr><td>trigger</td></tr></table>\").appendTo(\"body\");\n  try {\n    tab.trigger(\"back:forth\");\n    assert.ok(true, \"colon events don't throw\");\n  } catch (e) {\n    assert.ok(false, \"colon events die\");\n  }\n  tab.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".on and .off","suites":["event"],"line":1869,"code":"QUnit.test(\".on and .off\", function (assert) {\n  assert.expect(9);\n  var counter,\n    mixfn,\n    data,\n    $onandoff = jQuery(\"<div id=\\\"onandoff\\\"><p>on<b>and</b>off</p><div>worked<em>or</em>borked?</div></div>\").appendTo(\"body\");\n\n  // Simple case\n  jQuery(\"#onandoff\").on(\"whip\", function () {\n    assert.ok(true, \"whipped it good\");\n  }).trigger(\"whip\").off();\n\n  // Direct events only\n  counter = 0;\n  jQuery(\"#onandoff b\").on(\"click\", 5, function (e, trig) {\n    counter += e.data + (trig || 9); // twice, 5+9+5+17=36\n  }).one(\"click\", 7, function (e, trig) {\n    counter += e.data + (trig || 11); // once, 7+11=18\n  }).trigger(\"click\").trigger(\"click\", 17).off(\"click\");\n  assert.equal(counter, 54, \"direct event bindings with data\");\n\n  // Delegated events only\n  counter = 0;\n  jQuery(\"#onandoff\").on(\"click\", \"em\", 5, function (e, trig) {\n    counter += e.data + (trig || 9); // twice, 5+9+5+17=36\n  }).one(\"click\", \"em\", 7, function (e, trig) {\n    counter += e.data + (trig || 11); // once, 7+11=18\n  }).find(\"em\").trigger(\"click\").trigger(\"click\", 17).end().off(\"click\", \"em\");\n  assert.equal(counter, 54, \"delegated event bindings with data\");\n\n  // Mixed event bindings and types\n  counter = 0;\n  mixfn = function (e, trig) {\n    counter += (e.data || 0) + (trig || 1);\n  };\n  jQuery(\"#onandoff\").on(\" click  clack cluck \", \"em\", 2, mixfn).on(\"cluck\", \"b\", 7, mixfn).on(\"cluck\", mixfn).trigger(\"what!\").each(function () {\n    assert.equal(counter, 0, \"nothing triggered yet\");\n  }).find(\"em\").one(\"cluck\", 3, mixfn).trigger(\"cluck\", 8) // 3+8 2+8 + 0+8 = 29\n  .off().trigger(\"cluck\", 9) // 2+9 + 0+9 = 20\n  .end().each(function () {\n    assert.equal(counter, 49, \"after triggering em element\");\n  }).off(\"cluck\", function () {}) // shouldn't remove anything\n  .trigger(\"cluck\", 2) // 0+2 = 2\n  .each(function () {\n    assert.equal(counter, 51, \"after triggering #onandoff cluck\");\n  }).find(\"b\").on(\"click\", 95, mixfn).on(\"clack\", \"p\", 97, mixfn).one(\"cluck\", 3, mixfn).trigger(\"quack\", 19) // 0\n  .off(\"click clack cluck\").end().each(function () {\n    assert.equal(counter, 51, \"after triggering b\");\n  }).trigger(\"cluck\", 3) // 0+3 = 3\n  .off(\"clack\", \"em\", mixfn).find(\"em\").trigger(\"clack\") // 0\n  .end().each(function () {\n    assert.equal(counter, 54, \"final triggers\");\n  }).off(\"click cluck\");\n\n  // We should have removed all the event handlers ... kinda hacky way to check this\n  data = jQuery.data[jQuery(\"#onandoff\")[0].expando] || {};\n  assert.equal(data[\"events\"], undefined, \"no events left\");\n  $onandoff.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"special on name mapping","suites":["event"],"line":1928,"code":"QUnit.test(\"special on name mapping\", function (assert) {\n  assert.expect(7);\n  jQuery.event.special.slap = {\n    bindType: \"click\",\n    delegateType: \"swing\",\n    handle: function (event) {\n      assert.equal(event.handleObj.origType, \"slap\", \"slapped your mammy, \" + event.type);\n    }\n  };\n  var comeback = function (event) {\n    assert.ok(true, \"event \" + event.type + \" triggered\");\n  };\n  jQuery(\"<div><button id=\\\"mammy\\\">Are We Not Men?</button></div>\").on(\"slap\", \"button\", jQuery.noop).on(\"swing\", \"button\", comeback).find(\"button\").on(\"slap\", jQuery.noop).on(\"click\", comeback).trigger(\"click\") // bindType-slap and click\n  .off(\"slap\").trigger(\"click\") // click\n  .off(\"click\").trigger(\"swing\") // delegateType-slap and swing\n  .end().off(\"slap swing\", \"button\").find(\"button\") // everything should be gone\n  .trigger(\"slap\").trigger(\"click\").trigger(\"swing\").end().remove();\n  delete jQuery.event.special.slap;\n  jQuery.event.special.gutfeeling = {\n    bindType: \"click\",\n    delegateType: \"click\",\n    handle: function (event) {\n      assert.equal(event.handleObj.origType, \"gutfeeling\", \"got a gutfeeling\");\n\n      // Need to call the handler since .one() uses it to unbind\n      return event.handleObj.handler.call(this, event);\n    }\n  };\n\n  // Ensure a special event isn't removed by its mapped type\n  jQuery(\"<p>Gut Feeling</p>\").on(\"click\", jQuery.noop).on(\"gutfeeling\", jQuery.noop).off(\"click\").trigger(\"gutfeeling\").remove();\n\n  // Ensure special events are removed when only a namespace is provided\n  jQuery(\"<p>Gut Feeling</p>\").on(\"gutfeeling.Devo\", jQuery.noop).off(\".Devo\").trigger(\"gutfeeling\").remove();\n\n  // Ensure .one() events are removed after their maiden voyage\n  jQuery(\"<p>Gut Feeling</p>\").one(\"gutfeeling\", jQuery.noop).trigger(\"gutfeeling\") // This one should\n  .trigger(\"gutfeeling\") // This one should not\n  .remove();\n  delete jQuery.event.special[\"gutfeeling\"];\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".on and .off, selective mixed removal (trac-10705)","suites":["event"],"line":1969,"code":"QUnit.test(\".on and .off, selective mixed removal (trac-10705)\", function (assert) {\n  assert.expect(7);\n  var timingx = function (e) {\n    assert.ok(true, \"triggered \" + e.type);\n  };\n  jQuery(\"<p>Strange Pursuit</p>\").on(\"click\", timingx).on(\"click.duty\", timingx).on(\"click.now\", timingx).on(\"devo\", timingx).on(\"future\", timingx).trigger(\"click\") // 3\n  .trigger(\"devo\") // 1\n  .off(\".duty devo \") // trailing space\n  .trigger(\"future\") // 1\n  .trigger(\"click\") // 2\n  .off(\"future click\").trigger(\"click\"); // 0\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".on( event-map, null-selector, data ) trac-11130","suites":["event"],"line":1982,"code":"QUnit.test(\".on( event-map, null-selector, data ) trac-11130\", function (assert) {\n  assert.expect(1);\n  var $p = jQuery(\"<p>Strange Pursuit</p>\"),\n    data = \"bar\",\n    map = {\n      \"foo\": function (event) {\n        assert.equal(event.data, \"bar\", \"event.data correctly relayed with null selector\");\n        $p.remove();\n      }\n    };\n  $p.on(map, null, data).trigger(\"foo\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"clone() delegated events (trac-11076)","suites":["event"],"line":1994,"code":"QUnit.test(\"clone() delegated events (trac-11076)\", function (assert) {\n  assert.expect(3);\n  var counter = {\n      \"center\": 0,\n      \"fold\": 0,\n      \"centerfold\": 0\n    },\n    clicked = function () {\n      counter[jQuery(this).text().replace(/\\s+/, \"\")]++;\n    },\n    table = jQuery(\"<table><tr><td>center</td><td>fold</td></tr></table>\").on(\"click\", \"tr\", clicked).on(\"click\", \"td:first-child\", clicked).on(\"click\", \"td:last-child\", clicked),\n    clone = table.clone(true);\n  clone.find(\"td\").trigger(\"click\");\n  assert.equal(counter.center, 1, \"first child\");\n  assert.equal(counter.fold, 1, \"last child\");\n  assert.equal(counter.centerfold, 2, \"all children\");\n  table.remove();\n  clone.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"checkbox state (trac-3827)","suites":["event"],"line":2013,"code":"QUnit.test(\"checkbox state (trac-3827)\", function (assert) {\n  assert.expect(16);\n  var markup = jQuery(\"<div class='parent'><input type=checkbox><div>\"),\n    cb = markup.find(\"input\")[0];\n  markup.appendTo(\"#qunit-fixture\");\n  jQuery(cb).on(\"click\", function () {\n    assert.equal(this.checked, false, \"just-clicked checkbox is not checked\");\n  });\n  markup.on(\"click\", function () {\n    assert.equal(cb.checked, false, \"checkbox is not checked in bubbled event\");\n  });\n\n  // Native click\n  cb.checked = true;\n  assert.equal(cb.checked, true, \"native event - checkbox is initially checked\");\n  cb.click();\n  assert.equal(cb.checked, false, \"native event - checkbox is no longer checked\");\n\n  // jQuery click\n  cb.checked = true;\n  assert.equal(cb.checked, true, \"jQuery event - checkbox is initially checked\");\n  jQuery(cb).trigger(\"click\");\n  assert.equal(cb.checked, false, \"jQuery event - checkbox is no longer checked\");\n\n  // Handlers only; checkbox state remains false\n  jQuery(cb).triggerHandler(\"click\");\n  assert.equal(cb.checked, false, \"handlers only - checkbox is still unchecked\");\n\n  // Trigger parameters are preserved (trac-13353, gh-4139)\n  cb.checked = true;\n  assert.equal(cb.checked, true, \"jQuery event with data - checkbox is initially checked\");\n  jQuery(cb).on(\"click\", function (e, data) {\n    assert.equal(data, \"clicked\", \"trigger data passed to handler\");\n  });\n  markup.on(\"click\", function (e, data) {\n    assert.equal(data, \"clicked\", \"trigger data passed to bubbled handler\");\n  });\n  jQuery(cb).trigger(\"click\", [\"clicked\"]);\n  assert.equal(cb.checked, false, \"jQuery event with data - checkbox is no longer checked\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"event object properties on natively-triggered event","suites":["event"],"line":2053,"code":"QUnit.test(\"event object properties on natively-triggered event\", function (assert) {\n  assert.expect(3);\n  var link = document.createElement(\"a\"),\n    $link = jQuery(link),\n    evt = document.createEvent(\"MouseEvents\");\n\n  // Support: IE <=9 - 11+\n  // IE requires element to be in the body before it will dispatch\n  $link.appendTo(\"body\").on(\"click\", function (e) {\n    // Not trying to assert specific values here, just ensure the property exists\n    assert.equal(\"detail\" in e, true, \"has .detail\");\n    assert.equal(\"cancelable\" in e, true, \"has .cancelable\");\n    assert.equal(\"bubbles\" in e, true, \"has .bubbles\");\n  });\n  evt.initEvent(\"click\", true, true);\n  link.dispatchEvent(evt);\n  $link.off(\"click\").remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"addProp extensions","suites":["event"],"line":2071,"code":"QUnit.test(\"addProp extensions\", function (assert) {\n  assert.expect(2);\n  var $fixture = jQuery(\"<div>\").appendTo(\"#qunit-fixture\");\n\n  // Ensure the property doesn't exist\n  $fixture.on(\"click\", function (event) {\n    assert.ok(!(\"testProperty\" in event), \"event.testProperty does not exist\");\n  });\n  fireNative($fixture[0], \"click\");\n  $fixture.off(\"click\");\n  jQuery.event.addProp(\"testProperty\", function () {\n    return 42;\n  });\n\n  // Trigger a native click and ensure the property is set\n  $fixture.on(\"click\", function (event) {\n    assert.equal(event.testProperty, 42, \"event.testProperty getter was invoked\");\n  });\n  fireNative($fixture[0], \"click\");\n  $fixture.off(\"click\");\n  $fixture.remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"drag/drop events copy mouse-related event properties (gh-1925, gh-2009)","suites":["event"],"line":2093,"code":"QUnit.test(\"drag/drop events copy mouse-related event properties (gh-1925, gh-2009)\", function (assert) {\n  assert.expect(4);\n  var $fixture = jQuery(\"<div id='drag-fixture'></div>\").appendTo(\"body\");\n  $fixture.on(\"dragmove\", function (evt) {\n    assert.ok(\"pageX\" in evt, \"checking for pageX property on dragmove\");\n    assert.ok(\"pageY\" in evt, \"checking for pageY property on dragmove\");\n  });\n  fireNative($fixture[0], \"dragmove\");\n  $fixture.on(\"drop\", function (evt) {\n    assert.ok(\"pageX\" in evt, \"checking for pageX property on drop\");\n    assert.ok(\"pageY\" in evt, \"checking for pageY property on drop\");\n  });\n  fireNative($fixture[0], \"drop\");\n  $fixture.off(\"dragmove drop\").remove();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focusin using non-element targets","suites":["event"],"line":2108,"code":"QUnit.test(\"focusin using non-element targets\", function (assert) {\n  assert.expect(2);\n  jQuery(document).on(\"focusin\", function (e) {\n    assert.ok(e.type === \"focusin\", \"got a focusin event on a document\");\n  }).trigger(\"focusin\").off(\"focusin\");\n  jQuery(window).on(\"focusin\", function (e) {\n    assert.ok(e.type === \"focusin\", \"got a focusin event on a window\");\n  }).trigger(\"focusin\").off(\"focusin\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focusin on document & window","suites":["event"],"line":2151,"code":"QUnit.test(\"focusin on document & window\", function (assert) {\n  assert.expect(1);\n  var counter = 0,\n    input = jQuery(\"<input />\");\n  function increment() {\n    counter++;\n  }\n  input.appendTo(\"#qunit-fixture\");\n  input[0].focus();\n  jQuery(window).on(\"focusout\", increment);\n  jQuery(document).on(\"focusout\", increment);\n  input[0].blur();\n\n  // DOM focus is unreliable in TestSwarm\n  if (QUnit.isSwarm && counter === 0) {\n    assert.ok(true, \"GAP: Could not observe focus change\");\n  }\n  assert.strictEqual(counter, 2, \"focusout handlers on document/window fired once only\");\n  jQuery(window).off(\"focusout\", increment);\n  jQuery(document).off(\"focusout\", increment);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"element removed during focusout (gh-4417)","suites":["event"],"line":2172,"code":"QUnit.test(\"element removed during focusout (gh-4417)\", function (assert) {\n  assert.expect(1);\n  var button = jQuery(\"<button>Click me</button>\");\n  button.appendTo(\"#qunit-fixture\");\n  button.on(\"click\", function () {\n    button.trigger(\"blur\");\n    assert.ok(true, \"Removing the element didn't crash\");\n  });\n\n  // Support: Chrome 86+\n  // In Chrome, if an element having a focusout handler is blurred by\n  // clicking outside of it, it invokes the handler synchronously. However,\n  // if the click happens programmatically, the invocation is asynchronous.\n  // As we have no way to simulate real user input in unit tests, simulate\n  // this behavior by calling `jQuery.cleanData` & removing the element using\n  // native APIs.\n  button[0].blur = function () {\n    jQuery.cleanData([this]);\n    this.parentNode.removeChild(this);\n  };\n  button[0].click();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"change handler should be detached from element","suites":["event"],"line":2222,"code":"QUnit.test(\"change handler should be detached from element\", function (assert) {\n  assert.expect(2);\n  var $fixture = jQuery(\"<input type='text' id='change-ie-leak' />\").appendTo(\"body\"),\n    originRemoveEvent = jQuery.removeEvent,\n    wrapperRemoveEvent = function (elem, type, handle) {\n      assert.equal(\"change\", type, \"Event handler for 'change' event should be removed\");\n      assert.equal(\"change-ie-leak\", jQuery(elem).attr(\"id\"), \"Event handler for 'change' event should be removed from appropriate element\");\n      originRemoveEvent(elem, type, handle);\n    };\n  jQuery.removeEvent = wrapperRemoveEvent;\n  $fixture.on(\"change\", function () {});\n  $fixture.off(\"change\");\n  $fixture.remove();\n  jQuery.removeEvent = originRemoveEvent;\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger click on checkbox, fires change event","suites":["event"],"line":2237,"code":"QUnit.test(\"trigger click on checkbox, fires change event\", function (assert) {\n  assert.expect(1);\n  var check = jQuery(\"#check2\");\n  var done = assert.async();\n  check.on(\"change\", function () {\n    // get it?\n    check.off(\"change\");\n    assert.ok(true, \"Change event fired as a result of triggered click\");\n    done();\n  }).trigger(\"click\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Namespace preserved when passed an Event (trac-12739)","suites":["event"],"line":2248,"code":"QUnit.test(\"Namespace preserved when passed an Event (trac-12739)\", function (assert) {\n  assert.expect(4);\n  var markup = jQuery(\"<div id='parent'><div id='child'></div></div>\"),\n    triggered = 0,\n    fooEvent;\n  markup.find(\"div\").addBack().on(\"foo.bar\", function (e) {\n    if (!e.handled) {\n      triggered++;\n      e.handled = true;\n      assert.equal(e.namespace, \"bar\", \"namespace is bar\");\n      jQuery(e.target).find(\"div\").each(function () {\n        jQuery(this).triggerHandler(e);\n      });\n    }\n  }).on(\"foo.bar2\", function () {\n    assert.ok(false, \"foo.bar2 called on trigger \" + triggered + \" id \" + this.id);\n  });\n  markup.trigger(\"foo.bar\");\n  markup.trigger(jQuery.Event(\"foo.bar\"));\n  fooEvent = jQuery.Event(\"foo\");\n  fooEvent.namespace = \"bar\";\n  markup.trigger(fooEvent);\n  markup.remove();\n  assert.equal(triggered, 3, \"foo.bar triggered\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"make sure events cloned correctly","suites":["event"],"line":2273,"code":"QUnit.test(\"make sure events cloned correctly\", function (assert) {\n  assert.expect(18);\n  var clone,\n    fixture = jQuery(\"#qunit-fixture\"),\n    checkbox = jQuery(\"#check1\"),\n    p = jQuery(\"#firstp\");\n  fixture.on(\"click change\", function (event, result) {\n    assert.ok(result, event.type + \" on original element is fired\");\n  }).on(\"click\", \"#firstp\", function (event, result) {\n    assert.ok(result, \"Click on original child element though delegation is fired\");\n  }).on(\"change\", \"#check1\", function (event, result) {\n    assert.ok(result, \"Change on original child element though delegation is fired\");\n  });\n  p.on(\"click\", function () {\n    assert.ok(true, \"Click on original child element is fired\");\n  });\n  checkbox.on(\"change\", function () {\n    assert.ok(true, \"Change on original child element is fired\");\n  });\n  fixture.clone().trigger(\"click\").trigger(\"change\"); // 0 events should be fired\n\n  clone = fixture.clone(true);\n  clone.find(\"p\").eq(0).trigger(\"click\", true); // 3 events should fire\n  clone.find(\"#check1\").trigger(\"change\", true); // 3 events should fire\n  clone.remove();\n  clone = fixture.clone(true, true);\n  clone.find(\"p\").eq(0).trigger(\"click\", true); // 3 events should fire\n  clone.find(\"#check1\").trigger(\"change\", true); // 3 events should fire\n\n  fixture.off();\n  p.off();\n  checkbox.off();\n  p.trigger(\"click\"); // 0 should be fired\n  checkbox.trigger(\"change\"); // 0 should be fired\n\n  clone.find(\"p\").eq(0).trigger(\"click\", true); // 3 events should fire\n  clone.find(\"#check1\").trigger(\"change\", true); // 3 events should fire\n  clone.remove();\n  clone.find(\"p\").eq(0).trigger(\"click\"); // 0 should be fired\n  clone.find(\"#check1\").trigger(\"change\"); // 0 events should fire\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"String.prototype.namespace does not cause trigger() to throw (trac-13360)","suites":["event"],"line":2315,"code":"QUnit.test(\"String.prototype.namespace does not cause trigger() to throw (trac-13360)\", function (assert) {\n  assert.expect(1);\n  var errored = false;\n  String.prototype.namespace = function () {};\n  try {\n    jQuery(\"<p>\").trigger(\"foo.bar\");\n  } catch (e) {\n    errored = true;\n  }\n  assert.equal(errored, false, \"trigger() did not throw exception\");\n  delete String.prototype.namespace;\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Inline event result is returned (trac-13993)","suites":["event"],"line":2327,"code":"QUnit.test(\"Inline event result is returned (trac-13993)\", function (assert) {\n  assert.expect(1);\n  var result = jQuery(\"<p onclick='return 42'>hello</p>\").triggerHandler(\"click\");\n  assert.equal(result, 42, \"inline handler returned value\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".off() removes the expando when there's no more data","suites":["event"],"line":2332,"code":"QUnit.test(\".off() removes the expando when there's no more data\", function (assert) {\n  assert.expect(2);\n  var key,\n    div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n  div.on(\"click\", false);\n  div.on(\"custom\", function () {\n    assert.ok(true, \"Custom event triggered\");\n  });\n  div.trigger(\"custom\");\n  div.off(\"click custom\");\n\n  // Make sure the expando is gone\n  for (key in div[0]) {\n    if (/^jQuery/.test(key)) {\n      assert.strictEqual(div[0][key], undefined, \"Expando was not removed when there was no more data\");\n    }\n  }\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"jQuery.Event( src ) does not require a target property","suites":["event"],"line":2350,"code":"QUnit.test(\"jQuery.Event( src ) does not require a target property\", function (assert) {\n  assert.expect(2);\n  var event = jQuery.Event({\n    type: \"offtarget\"\n  });\n  assert.equal(event.type, \"offtarget\", \"correct type\");\n  assert.equal(event.target, undefined, \"no target\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"preventDefault() on focusin does not throw exception","suites":["event"],"line":2358,"code":"QUnit.test(\"preventDefault() on focusin does not throw exception\", function (assert) {\n  assert.expect(1);\n  var done = assert.async(),\n    input = jQuery(\"<input/>\").appendTo(\"#form\");\n  input.on(\"focusin\", function (event) {\n    if (!done) {\n      return;\n    }\n    var exceptionCaught;\n    try {\n      event.preventDefault();\n    } catch (theException) {\n      exceptionCaught = theException;\n    }\n    assert.strictEqual(exceptionCaught, undefined, \"Preventing default on focusin throws no exception\");\n    done();\n    done = null;\n  });\n  input.trigger(\"focus\");\n\n  // DOM focus is unreliable in TestSwarm; set a simulated event workaround timeout\n  setTimeout(function () {\n    if (!done) {\n      return;\n    }\n    input[0].addEventListener(\"click\", function (nativeEvent) {\n      jQuery.event.simulate(\"focusin\", this, jQuery.event.fix(nativeEvent));\n    });\n    input[0].click();\n  }, QUnit.config.testTimeout / 4 || 1000);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":".on('focus', fn) on a text node doesn't throw","suites":["event"],"line":2389,"code":"QUnit.test(\".on('focus', fn) on a text node doesn't throw\", function (assert) {\n  assert.expect(1);\n  jQuery(document.createTextNode(\"text\")).on(\"focus\", function () {});\n  assert.ok(true, \"No crash\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Donor event interference","suites":["event"],"line":2394,"code":"QUnit.test(\"Donor event interference\", function (assert) {\n  assert.expect(8);\n  var outer = jQuery(\"<div id='donor-outer'>\" + \"<form id='donor-form'>\" + \"<input id='donor-input' type='checkbox' />\" + \"</form>\" + \"</div>\").appendTo(\"#qunit-fixture\"),\n    input = jQuery(\"#donor-input\");\n  input.on(\"click\", function (event) {\n    assert.equal(event.type, \"click\", \"click event at input\");\n    assert.ok(!event.isPropagationStopped(), \"click event at input is still propagating\");\n    assert.equal(typeof event.originalEvent, \"object\", \"click event at input has originalEvent property\");\n  });\n  outer.on(\"click\", function (event) {\n    assert.equal(event.type, \"click\", \"click event at ancestor\");\n    assert.ok(!event.isPropagationStopped(), \"click event at ancestor is still propagating\");\n    assert.equal(typeof event.originalEvent, \"object\", \"click event at ancestor has originalEvent property\");\n  });\n  input.on(\"change\", function (event) {\n    assert.equal(event.type, \"change\", \"change event at input\");\n    assert.equal(typeof event.originalEvent, \"object\", \"change event at input has originalEvent property\");\n    event.stopPropagation();\n  });\n  input[0].click();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"simulated events shouldn't forward stopPropagation/preventDefault methods","suites":["event"],"line":2415,"code":"QUnit.test(\"simulated events shouldn't forward stopPropagation/preventDefault methods\", function (assert) {\n  assert.expect(3);\n  var outer = jQuery(\"<div id='donor-outer'>\" + \"<form id='donor-form'>\" + \"<input id='donor-input' type='checkbox' />\" + \"</form>\" + \"</div>\").appendTo(\"#qunit-fixture\"),\n    input = jQuery(\"#donor-input\"),\n    spy = {};\n  jQuery(\"#donor-form\").on(\"simulated\", function (event) {\n    spy.prevent = sinon.stub(event.originalEvent, \"preventDefault\");\n    event.preventDefault();\n  }).on(\"simulated\", function (event) {\n    spy.stop = sinon.stub(event.originalEvent, \"stopPropagation\");\n    event.stopPropagation();\n  }).on(\"simulated\", function (event) {\n    spy.immediate = sinon.stub(event.originalEvent, \"stopImmediatePropagation\");\n    event.stopImmediatePropagation();\n  }).on(\"simulated\", function (event) {\n    assert.ok(false, \"simulated event immediate propagation stopped\");\n  });\n  outer.on(\"simulated\", function (event) {\n    assert.ok(false, \"simulated event propagation stopped\");\n  });\n\n  // Force a simulated event\n  input[0].addEventListener(\"click\", function (nativeEvent) {\n    jQuery.event.simulate(\"simulated\", this, jQuery.event.fix(nativeEvent));\n  });\n  input[0].click();\n  assert.strictEqual(spy.prevent.called, false, \"Native preventDefault not called\");\n  assert.strictEqual(spy.stop.called, false, \"Native stopPropagation not called\");\n  assert.strictEqual(spy.immediate.called, false, \"Native stopImmediatePropagation not called\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"originalEvent type of simulated event","suites":["event"],"line":2445,"code":"QUnit.test(\"originalEvent type of simulated event\", function (assert) {\n  assert.expect(2);\n  var outer = jQuery(\"<div id='donor-outer'>\" + \"<form id='donor-form'>\" + \"<input id='donor-input' type='text' />\" + \"</form>\" + \"</div>\").appendTo(\"#qunit-fixture\"),\n    input = jQuery(\"#donor-input\"),\n    done = assert.async(),\n    finish = function () {\n      // Remove jQuery handlers to ensure removal of capturing handlers on the document\n      outer.off(\"focusin\");\n      done();\n    };\n  outer.on(\"focusin\", function (event) {\n    assert.equal(event.type, \"focusin\", \"focusin event at ancestor\");\n    assert.equal(event.originalEvent.type, \"click\", \"focus event at ancestor has correct originalEvent type\");\n    setTimeout(finish);\n  });\n  input[0].addEventListener(\"click\", function (nativeEvent) {\n    jQuery.event.simulate(\"focusin\", this, jQuery.event.fix(nativeEvent));\n  });\n  input[0].click();\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger('click') on radio passes extra params","suites":["event"],"line":2465,"code":"QUnit.test(\"trigger('click') on radio passes extra params\", function (assert) {\n  assert.expect(1);\n  var $radio = jQuery(\"<input type='radio' />\").appendTo(\"#qunit-fixture\").on(\"click\", function (e, data) {\n    assert.ok(data, \"Trigger data is passed to radio click handler\");\n  });\n  $radio.trigger(\"click\", [true]);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focusout/focusin support","suites":["event"],"line":2472,"code":"QUnit.test(\"focusout/focusin support\", function (assert) {\n  assert.expect(6);\n  var focus,\n    parent = jQuery(\"<div>\"),\n    input = jQuery(\"<input>\"),\n    inputExternal = jQuery(\"<input>\"),\n    // Support: IE <=9 - 11+\n    // focus and blur events are asynchronous; this is the resulting mess.\n    // The browser window must be topmost for this to work properly!!\n    done = assert.async();\n  parent.append(input);\n  jQuery(\"#qunit-fixture\").append(parent).append(inputExternal);\n\n  // initially, lose focus\n  inputExternal[0].focus();\n  setTimeout(function () {\n    parent.on(\"focus\", function () {\n      assert.ok(false, \"parent: focus not fired\");\n    }).on(\"focusin\", function () {\n      assert.ok(true, \"parent: focusin fired\");\n    }).on(\"blur\", function () {\n      assert.ok(false, \"parent: blur not fired\");\n    }).on(\"focusout\", function () {\n      assert.ok(true, \"parent: focusout fired\");\n    });\n    input.on(\"focus\", function () {\n      assert.ok(true, \"element: focus fired\");\n    }).on(\"focusin\", function () {\n      assert.ok(true, \"element: focusin fired\");\n      focus = true;\n    }).on(\"blur\", function () {\n      assert.ok(true, \"parent: blur fired\");\n    }).on(\"focusout\", function () {\n      assert.ok(true, \"element: focusout fired\");\n    });\n\n    // gain focus\n    input[0].focus();\n\n    // then lose it\n    inputExternal[0].focus();\n    setTimeout(function () {\n      // DOM focus is unreliable in TestSwarm\n      if (QUnit.isSwarm && !focus) {\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n      }\n\n      // cleanup\n      parent.off();\n      input.off();\n      done();\n    }, 50);\n  }, 50);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focus-blur order (trac-12868)","suites":["event"],"line":2531,"code":"QUnit.test(\"focus-blur order (trac-12868)\", function (assert) {\n  assert.expect(5);\n  var order,\n    $text = jQuery(\"#text1\"),\n    $radio = jQuery(\"#radio1\"),\n    // Support: IE <=9 - 11+\n    // focus and blur events are asynchronous; this is the resulting mess.\n    // The browser window must be topmost for this to work properly!!\n    done = assert.async();\n  $radio[0].focus();\n  setTimeout(function () {\n    $text.on(\"focus\", function () {\n      assert.equal(order++, 1, \"text focus\");\n    }).on(\"blur\", function () {\n      assert.equal(order++, 0, \"text blur\");\n    });\n    $radio.on(\"focus\", function () {\n      assert.equal(order++, 1, \"radio focus\");\n    }).on(\"blur\", function () {\n      assert.equal(order++, 0, \"radio blur\");\n    });\n\n    // Enabled input getting focus\n    order = 0;\n    assert.equal(document.activeElement, $radio[0], \"radio has focus\");\n    $text.trigger(\"focus\");\n    setTimeout(function () {\n      // DOM focus is unreliable in TestSwarm\n      if (QUnit.isSwarm && order === 0) {\n        assert.ok(true, \"GAP: Could not observe focus change\");\n        assert.ok(true, \"GAP: Could not observe focus change\");\n      }\n      assert.equal(document.activeElement, $text[0], \"text has focus\");\n\n      // Run handlers without native method on an input\n      order = 1;\n      $radio.triggerHandler(\"focus\");\n\n      // Clean up\n      $text.off();\n      $radio.off();\n      done();\n    }, 50);\n  }, 50);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"Event handling works with multiple async focus events (gh-4350)","suites":["event"],"line":2576,"code":"QUnit.test(\"Event handling works with multiple async focus events (gh-4350)\", function (assert) {\n  assert.expect(3);\n  var remaining = 3,\n    input = jQuery(\"#name\"),\n    // Support: IE <=9 - 11+\n    // focus and blur events are asynchronous; this is the resulting mess.\n    // The browser window must be topmost for this to work properly!!\n    done = assert.async();\n  input.on(\"focus\", function () {\n    remaining--;\n    assert.ok(true, \"received focus event, expecting \" + remaining + \" more\");\n    if (remaining > 0) {\n      input.trigger(\"blur\");\n    } else {\n      done();\n    }\n  }).on(\"blur\", function () {\n    setTimeout(function () {\n      input.trigger(\"focus\");\n    });\n  });\n\n  // gain focus\n  input.trigger(\"focus\");\n\n  // DOM focus is unreliable in TestSwarm\n  setTimeout(function () {\n    if (QUnit.isSwarm && remaining === 3) {\n      assert.ok(true, \"GAP: Could not observe focus change\");\n      assert.ok(true, \"GAP: Could not observe focus change\");\n      assert.ok(true, \"GAP: Could not observe focus change\");\n      setTimeout(function () {\n        done();\n      });\n    }\n  });\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"native-backed events preserve trigger data (gh-1741, gh-4139)","suites":["event"],"line":2613,"code":"QUnit.test(\"native-backed events preserve trigger data (gh-1741, gh-4139)\", function (assert) {\n  assert.expect(17);\n  var parent = supportjQuery(\"<div class='parent'><input type='checkbox'><input type='radio'></div>\").appendTo(\"#qunit-fixture\"),\n    targets = jQuery(parent[0].childNodes),\n    checkbox = jQuery(targets[0]),\n    data = [\"arg1\", \"arg2\"],\n    slice = data.slice,\n    // Support: IE <=9 - 11+\n    // focus and blur events are asynchronous; this is the resulting mess.\n    // The browser window must be topmost for this to work properly!!\n    done = assert.async();\n\n  // click (gh-4139)\n  assert.strictEqual(targets[0].checked, false, \"checkbox unchecked before click\");\n  assert.strictEqual(targets[1].checked, false, \"radio unchecked before click\");\n  targets.add(parent).on(\"click\", function (event) {\n    var type = event.target.type,\n      level = event.currentTarget === parent[0] ? \"parent\" : \"\";\n    assert.strictEqual(event.target.checked, true, type + \" toggled before invoking \" + level + \" handler\");\n    assert.deepEqual(slice.call(arguments, 1), data, type + \" \" + level + \" handler received correct data\");\n  });\n  targets.trigger(\"click\", data);\n  assert.strictEqual(targets[0].checked, true, \"checkbox toggled after click (default action)\");\n  assert.strictEqual(targets[1].checked, true, \"radio toggled after event (default action)\");\n\n  // focus (gh-1741)\n  assert.notEqual(document.activeElement, checkbox[0], \"element not focused before focus event\");\n  checkbox.on(\"focus blur\", function (event) {\n    var type = event.type;\n    assert.deepEqual(slice.call(arguments, 1), data, type + \" handler received correct data\");\n  });\n  checkbox.trigger(\"focus\", data);\n  setTimeout(function () {\n    assert.strictEqual(document.activeElement, checkbox[0], \"element focused after focus event (default action)\");\n    checkbox.trigger(\"blur\", data);\n    setTimeout(function () {\n      assert.notEqual(document.activeElement, checkbox[0], \"element not focused after blur event (default action)\");\n      done();\n    }, 50);\n  }, 50);\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"focus change during a focus handler (gh-4382)","suites":["event"],"line":2654,"code":"QUnit.test(\"focus change during a focus handler (gh-4382)\", function (assert) {\n  assert.expect(2);\n  var done = assert.async(),\n    select = jQuery(\"<select><option selected='selected'>A</option></select>\"),\n    button = jQuery(\"<button>Focus target</button>\");\n  jQuery(\"#qunit-fixture\").append(select).append(button);\n  select.on(\"focus\", function () {\n    button.trigger(\"focus\");\n  });\n  jQuery(document).on(\"focusin.focusTests\", function (ev) {\n    // Support: IE 11+\n    // In IE focus is async so focusin on document is fired multiple times,\n    // for each of the elements. In other browsers it's fired just once, for\n    // the last one.\n    if (ev.target === button[0]) {\n      assert.ok(true, \"focusin propagated to document from the button\");\n    }\n  });\n  select.trigger(\"focus\");\n  setTimeout(function () {\n    assert.strictEqual(document.activeElement, button[0], \"Focus redirect worked\");\n    jQuery(document).off(\".focusTests\");\n    done();\n  });\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"trigger(focus) works after .on(focus).off(focus) (gh-4867)","suites":["event"],"line":2679,"code":"QUnit.test(\"trigger(focus) works after .on(focus).off(focus) (gh-4867)\", function (assert) {\n  assert.expect(1);\n  var input = jQuery(\"<input />\");\n  input.appendTo(\"#qunit-fixture\");\n  input.on(\"focus\", function () {}).off(\"focus\");\n  input.trigger(\"focus\");\n  assert.equal(document.activeElement, input[0], \"input has focus\");\n});","file":"unit/event.js","skipped":false,"dir":"test"},{"name":"amdModule","suites":["exports"],"line":4,"code":"QUnit.test(\"amdModule\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery, amdDefined, \"Make sure defined module matches jQuery\");\n});","file":"unit/exports.js","skipped":false,"dir":"test"},{"name":"text()","suites":["manipulation"],"line":28,"code":"QUnit.test(\"text()\", function (assert) {\n  assert.expect(5);\n  var expected, frag, $newLineTest;\n  expected = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for merged text of more then one element.\");\n\n  // Check serialization of text values\n  assert.equal(jQuery(document.createTextNode(\"foo\")).text(), \"foo\", \"Text node was retrieved from .text().\");\n  assert.notEqual(jQuery(document).text(), \"\", \"Retrieving text for the document retrieves all text (trac-10724).\");\n\n  // Retrieve from document fragments trac-10864\n  frag = document.createDocumentFragment();\n  frag.appendChild(document.createTextNode(\"foo\"));\n  assert.equal(jQuery(frag).text(), \"foo\", \"Document Fragment Text node was retrieved from .text().\");\n  $newLineTest = jQuery(\"<div>test<br/>testy</div>\").appendTo(\"#moretests\");\n  $newLineTest.find(\"br\").replaceWith(\"\\n\");\n  assert.equal($newLineTest.text(), \"test\\ntesty\", \"text() does not remove new lines (trac-11153)\");\n  $newLineTest.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"text(undefined)","suites":["manipulation"],"line":47,"code":"QUnit.test(\"text(undefined)\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery(\"#foo\").text(\"<div\").text(undefined)[0].innerHTML, \"&lt;div\", \".text(undefined) is chainable (trac-5571)\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"text(String)","suites":["manipulation"],"line":78,"code":"QUnit.test(\"text(String)\", function (assert) {\n  testText(manipulationBareObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"text(Function)","suites":["manipulation"],"line":81,"code":"QUnit.test(\"text(Function)\", function (assert) {\n  testText(manipulationFunctionReturningObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"text(Function) with incoming value","suites":["manipulation"],"line":84,"code":"QUnit.test(\"text(Function) with incoming value\", function (assert) {\n  assert.expect(2);\n  var old = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#sap\").text(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return \"foobar\";\n  });\n  assert.equal(jQuery(\"#sap\").text(), \"foobar\", \"Check for merged text of more then one element.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(String|Element|Array<Element>|jQuery)","suites":["manipulation"],"line":201,"code":"QUnit.test(\"append(String|Element|Array<Element>|jQuery)\", function (assert) {\n  testAppend(manipulationBareObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function)","suites":["manipulation"],"line":204,"code":"QUnit.test(\"append(Function)\", function (assert) {\n  testAppend(manipulationFunctionReturningObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(param) to object, see trac-11280","suites":["manipulation"],"line":207,"code":"QUnit.test(\"append(param) to object, see trac-11280\", function (assert) {\n  assert.expect(5);\n  var object = jQuery(document.createElement(\"object\")).appendTo(document.body);\n  assert.equal(object.children().length, 0, \"object does not start with children\");\n  object.append(jQuery(\"<param type='wmode' name='foo'>\"));\n  assert.equal(object.children().length, 1, \"appended param\");\n  assert.equal(object.children().eq(0).attr(\"name\"), \"foo\", \"param has name=foo\");\n  object = jQuery(\"<object><param type='baz' name='bar'></object>\");\n  assert.equal(object.children().length, 1, \"object created with child param\");\n  assert.equal(object.children().eq(0).attr(\"name\"), \"bar\", \"param has name=bar\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function) returns String","suites":["manipulation"],"line":218,"code":"QUnit.test(\"append(Function) returns String\", function (assert) {\n  assert.expect(4);\n  var defaultText, result, select, old;\n  defaultText = \"Try them out:\";\n  old = jQuery(\"#first\").html();\n  result = jQuery(\"#first\").append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return \"<b>buga</b>\";\n  });\n  assert.equal(result.text(), defaultText + \"buga\", \"Check if text appending works\");\n  select = jQuery(\"#select3\");\n  old = select.html();\n  assert.equal(select.append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return \"<option value='appendTest'>Append Test</option>\";\n  }).find(\"option:last-child\").attr(\"value\"), \"appendTest\", \"Appending html options to select element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function) returns Element","suites":["manipulation"],"line":235,"code":"QUnit.test(\"append(Function) returns Element\", function (assert) {\n  assert.expect(2);\n  var expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\",\n    old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return document.getElementById(\"first\");\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function) returns Array<Element>","suites":["manipulation"],"line":245,"code":"QUnit.test(\"append(Function) returns Array<Element>\", function (assert) {\n  assert.expect(2);\n  var expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\",\n    old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return [document.getElementById(\"first\"), document.getElementById(\"yahoo\")];\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function) returns jQuery","suites":["manipulation"],"line":255,"code":"QUnit.test(\"append(Function) returns jQuery\", function (assert) {\n  assert.expect(2);\n  var expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\",\n    old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return jQuery(\"#yahoo, #first\");\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of jQuery object\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(Function) returns Number","suites":["manipulation"],"line":265,"code":"QUnit.test(\"append(Function) returns Number\", function (assert) {\n  assert.expect(2);\n  var old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").append(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return 5;\n  });\n  assert.ok(jQuery(\"#sap\")[0].innerHTML.match(/5$/), \"Check for appending a number\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"XML DOM manipulation (trac-9960)","suites":["manipulation"],"line":274,"code":"QUnit.test(\"XML DOM manipulation (trac-9960)\", function (assert) {\n  assert.expect(5);\n  var xmlDoc1 = jQuery.parseXML(\"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state x='100' y='100' initial='actions' id='provisioning'></state><state x='100' y='100' id='error'></state><state x='100' y='100' id='finished' final='true'></state></scxml>\"),\n    xmlDoc2 = jQuery.parseXML(\"<scxml xmlns='http://www.w3.org/2005/07/scxml' version='1.0'><state id='provisioning3'></state></scxml>\"),\n    xml1 = jQuery(xmlDoc1),\n    xml2 = jQuery(xmlDoc2),\n    scxml1 = jQuery(\"scxml\", xml1),\n    scxml2 = jQuery(\"scxml\", xml2),\n    state = scxml2.find(\"state\");\n  scxml1.append(state);\n  assert.strictEqual(scxml1[0].lastChild, state[0], \"append\");\n  scxml1.prepend(state);\n  assert.strictEqual(scxml1[0].firstChild, state[0], \"prepend\");\n  scxml1.find(\"#finished\").after(state);\n  assert.strictEqual(scxml1[0].lastChild, state[0], \"after\");\n  scxml1.find(\"#provisioning\").before(state);\n  assert.strictEqual(scxml1[0].firstChild, state[0], \"before\");\n  scxml2.replaceWith(scxml1);\n  assert.deepEqual(jQuery(\"state\", xml2).get(), scxml1.find(\"state\").get(), \"replaceWith\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append HTML5 sectioning elements (Bug trac-6485)","suites":["manipulation"],"line":294,"code":"QUnit.test(\"append HTML5 sectioning elements (Bug trac-6485)\", function (assert) {\n  assert.expect(2);\n  var article, aside;\n  jQuery(\"#qunit-fixture\").append(\"<article style='font-size:10px'><section><aside>HTML5 elements</aside></section></article>\");\n  article = jQuery(\"article\");\n  aside = jQuery(\"aside\");\n  assert.equal(article.get(0).style.fontSize, \"10px\", \"HTML5 elements are styleable\");\n  assert.equal(aside.length, 1, \"HTML5 elements do not collapse their children\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(String) with HTML5 (Bug trac-6485)","suites":["manipulation"],"line":311,"code":"QUnit.test(\"html(String) with HTML5 (Bug trac-6485)\", function (assert) {\n  assert.expect(2);\n  jQuery(\"#qunit-fixture\").html(\"<article><section><aside>HTML5 elements</aside></section></article>\");\n  assert.equal(jQuery(\"#qunit-fixture\").children().children().length, 1, \"Make sure HTML5 article elements can hold children. innerHTML shortcut path\");\n  assert.equal(jQuery(\"#qunit-fixture\").children().children().children().length, 1, \"Make sure nested HTML5 elements can hold children.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(String) tag-hyphenated elements (Bug gh-1987)","suites":["manipulation"],"line":317,"code":"QUnit.test(\"html(String) tag-hyphenated elements (Bug gh-1987)\", function (assert) {\n  assert.expect(27);\n  jQuery.each(\"thead tbody tfoot colgroup caption tr th td\".split(\" \"), function (i, name) {\n    var j = jQuery(\"<\" + name + \"-d></\" + name + \"-d><\" + name + \"-d></\" + name + \"-d>\");\n    assert.ok(j[0], \"Create a tag-hyphenated element\");\n    assert.ok(j[0].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\");\n    assert.ok(j[1].nodeName === name.toUpperCase() + \"-D\", \"Hyphenated node name\");\n  });\n  var j = jQuery(\"<tr-multiple-hyphens><td-with-hyphen>text</td-with-hyphen></tr-multiple-hyphens>\");\n  assert.ok(j[0].nodeName === \"TR-MULTIPLE-HYPHENS\", \"Tags with multiple hyphens\");\n  assert.ok(j.children()[0].nodeName === \"TD-WITH-HYPHEN\", \"Tags with multiple hyphens\");\n  assert.equal(j.children().text(), \"text\", \"Tags with multiple hyphens behave normally\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Tag name processing respects the HTML Standard (gh-2005)","suites":["manipulation"],"line":330,"code":"QUnit.test(\"Tag name processing respects the HTML Standard (gh-2005)\", function (assert) {\n  assert.expect(240);\n  var wrapper = jQuery(\"<div></div>\"),\n    nameTerminatingChars = \"\\x20\\t\\r\\n\\f\".split(\"\"),\n    specialChars = \"[ ] { } _ - = + \\\\ ( ) * & ^ % $ # @ ! ~ ` ' ; ? ¥ « µ λ ⊕ ≈ ξ ℜ ♣ €\".split(\" \");\n  specialChars.push(specialChars.join(\"\"));\n  jQuery.each(specialChars, function (i, characters) {\n    assertSpecialCharsSupport(\"html\", characters);\n    assertSpecialCharsSupport(\"append\", characters);\n  });\n  jQuery.each(nameTerminatingChars, function (i, character) {\n    assertNameTerminatingCharsHandling(\"html\", character);\n    assertNameTerminatingCharsHandling(\"append\", character);\n  });\n  function buildChild(method, html) {\n    wrapper[method](html);\n    return wrapper.children()[0];\n  }\n  function assertSpecialCharsSupport(method, characters) {\n    var child,\n      codepoint = characters.charCodeAt(0).toString(16).toUpperCase(),\n      description = characters.length === 1 ? \"U+\" + (\"000\" + codepoint).slice(-4) + \" \" + characters : \"all special characters\",\n      nodeName = \"valid\" + characters + \"tagname\";\n    child = buildChild(method, \"<\" + nodeName + \"></\" + nodeName + \">\");\n    assert.equal(child.nodeName.toUpperCase(), nodeName.toUpperCase(), method + \"(): Paired tag name includes \" + description);\n    child = buildChild(method, \"<\" + nodeName + \">\");\n    assert.equal(child.nodeName.toUpperCase(), nodeName.toUpperCase(), method + \"(): Unpaired tag name includes \" + description);\n    child = buildChild(method, \"<\" + nodeName + \"/>\");\n    assert.equal(child.nodeName.toUpperCase(), nodeName.toUpperCase(), method + \"(): Self-closing tag name includes \" + description);\n  }\n  function assertNameTerminatingCharsHandling(method, character) {\n    var child,\n      codepoint = character.charCodeAt(0).toString(16).toUpperCase(),\n      description = \"U+\" + (\"000\" + codepoint).slice(-4) + \" \" + character,\n      nodeName = \"div\" + character + \"this-will-be-discarded\";\n    child = buildChild(method, \"<\" + nodeName + \"></\" + nodeName + \">\");\n    assert.equal(child.nodeName.toUpperCase(), \"DIV\", method + \"(): Paired tag name terminated by \" + description);\n    child = buildChild(method, \"<\" + nodeName + \">\");\n    assert.equal(child.nodeName.toUpperCase(), \"DIV\", method + \"(): Unpaired open tag name terminated by \" + description);\n    child = buildChild(method, \"<\" + nodeName + \"/>\");\n    assert.equal(child.nodeName.toUpperCase(), \"DIV\", method + \"(): Self-closing tag name terminated by \" + description);\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"IE8 serialization bug","suites":["manipulation"],"line":373,"code":"QUnit.test(\"IE8 serialization bug\", function (assert) {\n  assert.expect(2);\n  var wrapper = jQuery(\"<div></div>\");\n  wrapper.html(\"<div></div><article></article>\");\n  assert.equal(wrapper.children(\"article\").length, 1, \"HTML5 elements are insertable with .html()\");\n  wrapper.html(\"<div></div><link></link>\");\n  assert.equal(wrapper.children(\"link\").length, 1, \"Link elements are insertable with .html()\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html() object element trac-10324","suites":["manipulation"],"line":381,"code":"QUnit.test(\"html() object element trac-10324\", function (assert) {\n  assert.expect(1);\n  var object = jQuery(\"<object id='object2'><param name='object2test' value='test'></param></object>?\").appendTo(\"#qunit-fixture\"),\n    clone = object.clone();\n  assert.equal(clone.html(), object.html(), \"html() returns correct innerhtml of cloned object elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append(xml)","suites":["manipulation"],"line":387,"code":"QUnit.test(\"append(xml)\", function (assert) {\n  assert.expect(1);\n  var xmlDoc, xml1, xml2;\n  function createXMLDoc() {\n    return document.implementation.createDocument(\"\", \"\", null);\n  }\n  xmlDoc = createXMLDoc();\n  xml1 = xmlDoc.createElement(\"head\");\n  xml2 = xmlDoc.createElement(\"test\");\n  assert.ok(jQuery(xml1).append(xml2), \"Append an xml element to another without raising an exception.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"appendTo(String)","suites":["manipulation"],"line":398,"code":"QUnit.test(\"appendTo(String)\", function (assert) {\n  assert.expect(4);\n  var l, defaultText;\n  defaultText = \"Try them out:\";\n  jQuery(\"<b>buga</b>\").appendTo(\"#first\");\n  assert.equal(jQuery(\"#first\").text(), defaultText + \"buga\", \"Check if text appending works\");\n  assert.equal(jQuery(\"<option value='appendTest'>Append Test</option>\").appendTo(\"#select3\").parent().find(\"option:last-child\").attr(\"value\"), \"appendTest\", \"Appending html options to select element\");\n  l = jQuery(\"#first\").children().length + 2;\n  jQuery(\"<strong>test</strong>\");\n  jQuery(\"<strong>test</strong>\");\n  jQuery([jQuery(\"<strong>test</strong>\")[0], jQuery(\"<strong>test</strong>\")[0]]).appendTo(\"#first\");\n  assert.equal(jQuery(\"#first\").children().length, l, \"Make sure the elements were inserted.\");\n  assert.equal(jQuery(\"#first\").children().last()[0].nodeName.toLowerCase(), \"strong\", \"Verify the last element.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"appendTo(Element|Array<Element>)","suites":["manipulation"],"line":412,"code":"QUnit.test(\"appendTo(Element|Array<Element>)\", function (assert) {\n  assert.expect(2);\n  var expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\";\n  jQuery(document.getElementById(\"first\")).appendTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of element\");\n  expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:Yahoo\";\n  jQuery([document.getElementById(\"first\"), document.getElementById(\"yahoo\")]).appendTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"appendTo(jQuery)","suites":["manipulation"],"line":421,"code":"QUnit.test(\"appendTo(jQuery)\", function (assert) {\n  assert.expect(10);\n  var expected, num, div;\n  assert.ok(jQuery(document.createElement(\"script\")).appendTo(\"body\").length, \"Make sure a disconnected script can be appended.\");\n  expected = \"This link has class=\\\"blog\\\": Simon Willison's WeblogYahooTry them out:\";\n  jQuery(\"#yahoo, #first\").appendTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for appending of jQuery object\");\n  jQuery(\"#select1\").appendTo(\"#foo\");\n  assert.t(\"Append select\", \"#foo select\", [\"select1\"]);\n  div = jQuery(\"<div></div>\").on(\"click\", function () {\n    assert.ok(true, \"Running a cloned click.\");\n  });\n  div.appendTo(\"#qunit-fixture, #moretests\");\n  jQuery(\"#qunit-fixture div\").last().trigger(\"click\");\n  jQuery(\"#moretests div\").last().trigger(\"click\");\n  div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture, #moretests\");\n  assert.equal(div.length, 2, \"appendTo returns the inserted elements\");\n  div.addClass(\"test\");\n  assert.ok(jQuery(\"#qunit-fixture div\").last().hasClass(\"test\"), \"appendTo element was modified after the insertion\");\n  assert.ok(jQuery(\"#moretests div\").last().hasClass(\"test\"), \"appendTo element was modified after the insertion\");\n  div = jQuery(\"<div></div>\");\n  jQuery(\"<span>a</span><b>b</b>\").filter(\"span\").appendTo(div);\n  assert.equal(div.children().length, 1, \"Make sure the right number of children were inserted.\");\n  div = jQuery(\"#moretests div\");\n  num = jQuery(\"#qunit-fixture div\").length;\n  div.remove().appendTo(\"#qunit-fixture\");\n  assert.equal(jQuery(\"#qunit-fixture div\").length, num, \"Make sure all the removed divs were inserted.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(String)","suites":["manipulation"],"line":449,"code":"QUnit.test(\"prepend(String)\", function (assert) {\n  assert.expect(2);\n  var result, expected;\n  expected = \"Try them out:\";\n  result = jQuery(\"#first\").prepend(\"<b>buga</b>\");\n  assert.equal(result.text(), \"buga\" + expected, \"Check if text prepending works\");\n  assert.equal(jQuery(\"#select3\").prepend(\"<option value='prependTest'>Prepend Test</option>\").find(\"option:first-child\").attr(\"value\"), \"prependTest\", \"Prepending html options to select element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Element)","suites":["manipulation"],"line":457,"code":"QUnit.test(\"prepend(Element)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#sap\").prepend(document.getElementById(\"first\"));\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Array<Element>)","suites":["manipulation"],"line":464,"code":"QUnit.test(\"prepend(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#sap\").prepend([document.getElementById(\"first\"), document.getElementById(\"yahoo\")]);\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(jQuery)","suites":["manipulation"],"line":471,"code":"QUnit.test(\"prepend(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#sap\").prepend(jQuery(\"#yahoo, #first\"));\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of jQuery object\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Array<jQuery>)","suites":["manipulation"],"line":478,"code":"QUnit.test(\"prepend(Array<jQuery>)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"Try them out:GoogleYahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#sap\").prepend([jQuery(\"#first\"), jQuery(\"#yahoo, #google\")]);\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of array of jQuery objects\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Function) with incoming value -- String","suites":["manipulation"],"line":485,"code":"QUnit.test(\"prepend(Function) with incoming value -- String\", function (assert) {\n  assert.expect(4);\n  var defaultText, old, result;\n  defaultText = \"Try them out:\";\n  old = jQuery(\"#first\").html();\n  result = jQuery(\"#first\").prepend(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return \"<b>buga</b>\";\n  });\n  assert.equal(result.text(), \"buga\" + defaultText, \"Check if text prepending works\");\n  old = jQuery(\"#select3\").html();\n  assert.equal(jQuery(\"#select3\").prepend(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return \"<option value='prependTest'>Prepend Test</option>\";\n  }).find(\"option:first-child\").attr(\"value\"), \"prependTest\", \"Prepending html options to select element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Function) with incoming value -- Element","suites":["manipulation"],"line":501,"code":"QUnit.test(\"prepend(Function) with incoming value -- Element\", function (assert) {\n  assert.expect(2);\n  var old, expected;\n  expected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").prepend(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return document.getElementById(\"first\");\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Function) with incoming value -- Array<Element>","suites":["manipulation"],"line":512,"code":"QUnit.test(\"prepend(Function) with incoming value -- Array<Element>\", function (assert) {\n  assert.expect(2);\n  var old, expected;\n  expected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").prepend(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return [document.getElementById(\"first\"), document.getElementById(\"yahoo\")];\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prepend(Function) with incoming value -- jQuery","suites":["manipulation"],"line":523,"code":"QUnit.test(\"prepend(Function) with incoming value -- jQuery\", function (assert) {\n  assert.expect(2);\n  var old, expected;\n  expected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  old = jQuery(\"#sap\").html();\n  jQuery(\"#sap\").prepend(function (i, val) {\n    assert.equal(val, old, \"Make sure the incoming value is correct.\");\n    return jQuery(\"#yahoo, #first\");\n  });\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of jQuery object\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prependTo(String)","suites":["manipulation"],"line":534,"code":"QUnit.test(\"prependTo(String)\", function (assert) {\n  assert.expect(2);\n  var defaultText;\n  defaultText = \"Try them out:\";\n  jQuery(\"<b>buga</b>\").prependTo(\"#first\");\n  assert.equal(jQuery(\"#first\").text(), \"buga\" + defaultText, \"Check if text prepending works\");\n  assert.equal(jQuery(\"<option value='prependTest'>Prepend Test</option>\").prependTo(\"#select3\").parent().find(\"option:first-child\").attr(\"value\"), \"prependTest\", \"Prepending html options to select element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prependTo(Element)","suites":["manipulation"],"line":542,"code":"QUnit.test(\"prependTo(Element)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(document.getElementById(\"first\")).prependTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prependTo(Array<Element>)","suites":["manipulation"],"line":549,"code":"QUnit.test(\"prependTo(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"Try them out:YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery([document.getElementById(\"first\"), document.getElementById(\"yahoo\")]).prependTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prependTo(jQuery)","suites":["manipulation"],"line":556,"code":"QUnit.test(\"prependTo(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"YahooTry them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\n  jQuery(\"#yahoo, #first\").prependTo(\"#sap\");\n  assert.equal(jQuery(\"#sap\").text(), expected, \"Check for prepending of jQuery object\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"prependTo(Array<jQuery>)","suites":["manipulation"],"line":563,"code":"QUnit.test(\"prependTo(Array<jQuery>)\", function (assert) {\n  assert.expect(1);\n  jQuery(\"<select id='prependSelect1'></select>\").prependTo(\"#form\");\n  jQuery(\"<select id='prependSelect2'><option>Test</option></select>\").prependTo(\"#form\");\n  assert.t(\"Prepend Select\", \"#prependSelect2, #prependSelect1\", [\"prependSelect2\", \"prependSelect1\"]);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(String)","suites":["manipulation"],"line":569,"code":"QUnit.test(\"before(String)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: bugaYahoo\";\n  jQuery(\"#yahoo\").before(manipulationBareObj(\"<b>buga</b>\"));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Element)","suites":["manipulation"],"line":576,"code":"QUnit.test(\"before(Element)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:Yahoo\";\n  jQuery(\"#yahoo\").before(manipulationBareObj(document.getElementById(\"first\")));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Array<Element>)","suites":["manipulation"],"line":583,"code":"QUnit.test(\"before(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n  jQuery(\"#yahoo\").before(manipulationBareObj([document.getElementById(\"first\"), document.getElementById(\"mark\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(jQuery)","suites":["manipulation"],"line":590,"code":"QUnit.test(\"before(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n  jQuery(\"#yahoo\").before(manipulationBareObj(jQuery(\"#mark, #first\")));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert jQuery before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Array<jQuery>)","suites":["manipulation"],"line":597,"code":"QUnit.test(\"before(Array<jQuery>)\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n  jQuery(\"#yahoo\").before(manipulationBareObj([jQuery(\"#first\"), jQuery(\"#mark, #google\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of jQuery objects before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Function) -- Returns String","suites":["manipulation"],"line":604,"code":"QUnit.test(\"before(Function) -- Returns String\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: bugaYahoo\";\n  jQuery(\"#yahoo\").before(manipulationFunctionReturningObj(\"<b>buga</b>\"));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Function) -- Returns Element","suites":["manipulation"],"line":611,"code":"QUnit.test(\"before(Function) -- Returns Element\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:Yahoo\";\n  jQuery(\"#yahoo\").before(manipulationFunctionReturningObj(document.getElementById(\"first\")));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Function) -- Returns Array<Element>","suites":["manipulation"],"line":618,"code":"QUnit.test(\"before(Function) -- Returns Array<Element>\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n  jQuery(\"#yahoo\").before(manipulationFunctionReturningObj([document.getElementById(\"first\"), document.getElementById(\"mark\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Function) -- Returns jQuery","suites":["manipulation"],"line":625,"code":"QUnit.test(\"before(Function) -- Returns jQuery\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n  jQuery(\"#yahoo\").before(manipulationFunctionReturningObj(jQuery(\"#mark, #first\")));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert jQuery before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(Function) -- Returns Array<jQuery>","suites":["manipulation"],"line":632,"code":"QUnit.test(\"before(Function) -- Returns Array<jQuery>\", function (assert) {\n  assert.expect(1);\n  var expected;\n  expected = \"This is a normal link: Try them out:GooglediveintomarkYahoo\";\n  jQuery(\"#yahoo\").before(manipulationFunctionReturningObj([jQuery(\"#first\"), jQuery(\"#mark, #google\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of jQuery objects before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before(no-op)","suites":["manipulation"],"line":639,"code":"QUnit.test(\"before(no-op)\", function (assert) {\n  assert.expect(2);\n  var set;\n  set = jQuery(\"<div></div>\").before(\"<span>test</span>\");\n  assert.equal(set[0].nodeName.toLowerCase(), \"div\", \"Insert before a disconnected node should be a no-op\");\n  assert.equal(set.length, 1, \"Insert the element before the disconnected node. should be a no-op\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"before and after w/ empty object (trac-10812)","suites":["manipulation"],"line":646,"code":"QUnit.test(\"before and after w/ empty object (trac-10812)\", function (assert) {\n  assert.expect(1);\n  var res;\n  res = jQuery(\"#notInTheDocument\").before(\"(\").after(\")\");\n  assert.equal(res.length, 0, \"didn't choke on empty object\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".before() and .after() disconnected node","suites":["manipulation"],"line":652,"code":"QUnit.test(\".before() and .after() disconnected node\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"<input type='checkbox'/>\").before(\"<div></div>\").length, 1, \"before() on disconnected node is no-op\");\n  assert.equal(jQuery(\"<input type='checkbox'/>\").after(\"<div></div>\").length, 1, \"after() on disconnected node is no-op\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insert with .before() on disconnected node last","suites":["manipulation"],"line":657,"code":"QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {\n  assert.expect(1);\n  var expectedBefore = \"This is a normal link: bugaYahoo\";\n  jQuery(\"#yahoo\").add(\"<span></span>\").before(\"<b>buga</b>\");\n  assert.equal(jQuery(\"#en\").text(), expectedBefore, \"Insert String before with disconnected node last\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insert with .before() on disconnected node first","suites":["manipulation"],"line":663,"code":"QUnit.test(\"insert with .before() on disconnected node first\", function (assert) {\n  assert.expect(1);\n  var expectedBefore = \"This is a normal link: bugaYahoo\";\n  jQuery(\"<span></span>\").add(\"#yahoo\").before(\"<b>buga</b>\");\n  assert.equal(jQuery(\"#en\").text(), expectedBefore, \"Insert String before with disconnected node first\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insert with .before() on disconnected node last","suites":["manipulation"],"line":669,"code":"QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {\n  assert.expect(1);\n  var expectedAfter = \"This is a normal link: Yahoobuga\";\n  jQuery(\"#yahoo\").add(\"<span></span>\").after(\"<b>buga</b>\");\n  assert.equal(jQuery(\"#en\").text(), expectedAfter, \"Insert String after with disconnected node last\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insert with .before() on disconnected node last","suites":["manipulation"],"line":675,"code":"QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {\n  assert.expect(1);\n  var expectedAfter = \"This is a normal link: Yahoobuga\";\n  jQuery(\"<span></span>\").add(\"#yahoo\").after(\"<b>buga</b>\");\n  assert.equal(jQuery(\"#en\").text(), expectedAfter, \"Insert String after with disconnected node first\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertBefore(String)","suites":["manipulation"],"line":681,"code":"QUnit.test(\"insertBefore(String)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: bugaYahoo\";\n  jQuery(\"<b>buga</b>\").insertBefore(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertBefore(Element)","suites":["manipulation"],"line":687,"code":"QUnit.test(\"insertBefore(Element)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: Try them out:Yahoo\";\n  jQuery(document.getElementById(\"first\")).insertBefore(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertBefore(Array<Element>)","suites":["manipulation"],"line":693,"code":"QUnit.test(\"insertBefore(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: Try them out:diveintomarkYahoo\";\n  jQuery([document.getElementById(\"first\"), document.getElementById(\"mark\")]).insertBefore(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertBefore(jQuery)","suites":["manipulation"],"line":699,"code":"QUnit.test(\"insertBefore(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: diveintomarkTry them out:Yahoo\";\n  jQuery(\"#mark, #first\").insertBefore(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert jQuery before\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(String)","suites":["manipulation"],"line":705,"code":"QUnit.test(\".after(String)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: Yahoobuga\";\n  jQuery(\"#yahoo\").after(\"<b>buga</b>\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Element)","suites":["manipulation"],"line":711,"code":"QUnit.test(\".after(Element)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:\";\n  jQuery(\"#yahoo\").after(document.getElementById(\"first\"));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Array<Element>)","suites":["manipulation"],"line":717,"code":"QUnit.test(\".after(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:diveintomark\";\n  jQuery(\"#yahoo\").after([document.getElementById(\"first\"), document.getElementById(\"mark\")]);\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(jQuery)","suites":["manipulation"],"line":723,"code":"QUnit.test(\".after(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:Googlediveintomark\";\n  jQuery(\"#yahoo\").after([jQuery(\"#first\"), jQuery(\"#mark, #google\")]);\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of jQuery objects after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Function) returns String","suites":["manipulation"],"line":729,"code":"QUnit.test(\".after(Function) returns String\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: Yahoobuga\",\n    val = manipulationFunctionReturningObj;\n  jQuery(\"#yahoo\").after(val(\"<b>buga</b>\"));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Function) returns Element","suites":["manipulation"],"line":736,"code":"QUnit.test(\".after(Function) returns Element\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:\",\n    val = manipulationFunctionReturningObj;\n  jQuery(\"#yahoo\").after(val(document.getElementById(\"first\")));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Function) returns Array<Element>","suites":["manipulation"],"line":743,"code":"QUnit.test(\".after(Function) returns Array<Element>\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:diveintomark\",\n    val = manipulationFunctionReturningObj;\n  jQuery(\"#yahoo\").after(val([document.getElementById(\"first\"), document.getElementById(\"mark\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(Function) returns jQuery","suites":["manipulation"],"line":750,"code":"QUnit.test(\".after(Function) returns jQuery\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:Googlediveintomark\",\n    val = manipulationFunctionReturningObj;\n  jQuery(\"#yahoo\").after(val([jQuery(\"#first\"), jQuery(\"#mark, #google\")]));\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of jQuery objects after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":".after(disconnected node)","suites":["manipulation"],"line":757,"code":"QUnit.test(\".after(disconnected node)\", function (assert) {\n  assert.expect(2);\n  var set = jQuery(\"<div></div>\").before(\"<span>test</span>\");\n  assert.equal(set[0].nodeName.toLowerCase(), \"div\", \"Insert after a disconnected node should be a no-op\");\n  assert.equal(set.length, 1, \"Insert the element after the disconnected node should be a no-op\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertAfter(String)","suites":["manipulation"],"line":763,"code":"QUnit.test(\"insertAfter(String)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: Yahoobuga\";\n  jQuery(\"<b>buga</b>\").insertAfter(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert String after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertAfter(Element)","suites":["manipulation"],"line":769,"code":"QUnit.test(\"insertAfter(Element)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:\";\n  jQuery(document.getElementById(\"first\")).insertAfter(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert element after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertAfter(Array<Element>)","suites":["manipulation"],"line":775,"code":"QUnit.test(\"insertAfter(Array<Element>)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahooTry them out:diveintomark\";\n  jQuery([document.getElementById(\"first\"), document.getElementById(\"mark\")]).insertAfter(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert array of elements after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertAfter(jQuery)","suites":["manipulation"],"line":781,"code":"QUnit.test(\"insertAfter(jQuery)\", function (assert) {\n  assert.expect(1);\n  var expected = \"This is a normal link: YahoodiveintomarkTry them out:\";\n  jQuery(\"#mark, #first\").insertAfter(\"#yahoo\");\n  assert.equal(jQuery(\"#en\").text(), expected, \"Insert jQuery after\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceWith(String|Element|Array<Element>|jQuery)","suites":["manipulation"],"line":870,"code":"QUnit.test(\"replaceWith(String|Element|Array<Element>|jQuery)\", function (assert) {\n  testReplaceWith(manipulationBareObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceWith(Function)","suites":["manipulation"],"line":873,"code":"QUnit.test(\"replaceWith(Function)\", function (assert) {\n  assert.expect(testReplaceWith(manipulationFunctionReturningObj, assert) + 1);\n  var y = jQuery(\"#foo\")[0];\n  jQuery(y).replaceWith(function () {\n    assert.equal(this, y, \"Make sure the context is coming in correctly.\");\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceWith(string) for more than one element","suites":["manipulation"],"line":880,"code":"QUnit.test(\"replaceWith(string) for more than one element\", function (assert) {\n  assert.expect(3);\n  assert.equal(jQuery(\"#foo p\").length, 3, \"ensuring that test data has not changed\");\n  jQuery(\"#foo p\").replaceWith(\"<span>bar</span>\");\n  assert.equal(jQuery(\"#foo span\").length, 3, \"verify that all the three original element have been replaced\");\n  assert.equal(jQuery(\"#foo p\").length, 0, \"verify that all the three original element have been replaced\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Empty replaceWith (trac-13401; trac-13596; gh-2204)","suites":["manipulation"],"line":887,"code":"QUnit.test(\"Empty replaceWith (trac-13401; trac-13596; gh-2204)\", function (assert) {\n  assert.expect(25);\n  var $el = jQuery(\"<div></div><div></div>\").html(\"<p>0</p>\"),\n    expectedHTML = $el.html(),\n    tests = {\n      \"empty string\": \"\",\n      \"empty array\": [],\n      \"array of empty string\": [\"\"],\n      \"empty collection\": jQuery(\"#nonexistent\"),\n      // in case of jQuery(...).replaceWith();\n      \"undefined\": undefined\n    };\n  jQuery.each(tests, function (label, input) {\n    $el.html(\"<a></a>\").children().replaceWith(input);\n    assert.strictEqual($el.html(), \"\", \"replaceWith(\" + label + \")\");\n    $el.html(\"<b></b>\").children().replaceWith(function () {\n      return input;\n    });\n    assert.strictEqual($el.html(), \"\", \"replaceWith(function returning \" + label + \")\");\n    $el.html(\"<i></i>\").children().replaceWith(function (i) {\n      return input;\n    });\n    assert.strictEqual($el.html(), \"\", \"replaceWith(other function returning \" + label + \")\");\n    $el.html(\"<p></p>\").children().replaceWith(function (i) {\n      return i ? input : jQuery(this).html(i + \"\");\n    });\n    assert.strictEqual($el.eq(0).html(), expectedHTML, \"replaceWith(function conditionally returning context)\");\n    assert.strictEqual($el.eq(1).html(), \"\", \"replaceWith(function conditionally returning \" + label + \")\");\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceAll(String)","suites":["manipulation"],"line":917,"code":"QUnit.test(\"replaceAll(String)\", function (assert) {\n  assert.expect(2);\n  jQuery(\"<b id='replace'>buga</b>\").replaceAll(\"#yahoo\");\n  assert.ok(jQuery(\"#replace\")[0], \"Replace element with string\");\n  assert.ok(!jQuery(\"#yahoo\")[0], \"Verify that original element is gone, after string\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceAll(Element)","suites":["manipulation"],"line":923,"code":"QUnit.test(\"replaceAll(Element)\", function (assert) {\n  assert.expect(2);\n  jQuery(document.getElementById(\"first\")).replaceAll(\"#yahoo\");\n  assert.ok(jQuery(\"#first\")[0], \"Replace element with element\");\n  assert.ok(!jQuery(\"#yahoo\")[0], \"Verify that original element is gone, after element\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceAll(Array<Element>)","suites":["manipulation"],"line":929,"code":"QUnit.test(\"replaceAll(Array<Element>)\", function (assert) {\n  assert.expect(3);\n  jQuery([document.getElementById(\"first\"), document.getElementById(\"mark\")]).replaceAll(\"#yahoo\");\n  assert.ok(jQuery(\"#first\")[0], \"Replace element with array of elements\");\n  assert.ok(jQuery(\"#mark\")[0], \"Replace element with array of elements\");\n  assert.ok(!jQuery(\"#yahoo\")[0], \"Verify that original element is gone, after array of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"replaceAll(jQuery)","suites":["manipulation"],"line":936,"code":"QUnit.test(\"replaceAll(jQuery)\", function (assert) {\n  assert.expect(3);\n  jQuery(\"#mark, #first\").replaceAll(\"#yahoo\");\n  assert.ok(jQuery(\"#first\")[0], \"Replace element with set of elements\");\n  assert.ok(jQuery(\"#mark\")[0], \"Replace element with set of elements\");\n  assert.ok(!jQuery(\"#yahoo\")[0], \"Verify that original element is gone, after set of elements\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.clone() (trac-8017)","suites":["manipulation"],"line":943,"code":"QUnit.test(\"jQuery.clone() (trac-8017)\", function (assert) {\n  assert.expect(2);\n  assert.ok(jQuery.clone && typeof jQuery.clone === \"function\", \"jQuery.clone() utility exists and is a function.\");\n  var main = jQuery(\"#qunit-fixture\")[0],\n    clone = jQuery.clone(main);\n  assert.equal(main.childNodes.length, clone.childNodes.length, \"Simple child length to ensure a large dom tree copies correctly\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"append to multiple elements (trac-8070)","suites":["manipulation"],"line":950,"code":"QUnit.test(\"append to multiple elements (trac-8070)\", function (assert) {\n  assert.expect(2);\n  var selects = jQuery(\"<select class='test8070'></select><select class='test8070'></select>\").appendTo(\"#qunit-fixture\");\n  selects.append(\"<OPTION>1</OPTION><OPTION>2</OPTION>\");\n  assert.equal(selects[0].childNodes.length, 2, \"First select got two nodes\");\n  assert.equal(selects[1].childNodes.length, 2, \"Second select got two nodes\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"table manipulation","suites":["manipulation"],"line":957,"code":"QUnit.test(\"table manipulation\", function (assert) {\n  assert.expect(2);\n  var table = jQuery(\"<table style='font-size:16px'></table>\").appendTo(\"#qunit-fixture\").empty(),\n    height = table[0].offsetHeight;\n  table.append(\"<tr><td>DATA</td></tr>\");\n  assert.ok(table[0].offsetHeight - height >= 15, \"appended rows are visible\");\n  table.empty();\n  height = table[0].offsetHeight;\n  table.prepend(\"<tr><td>DATA</td></tr>\");\n  assert.ok(table[0].offsetHeight - height >= 15, \"prepended rows are visible\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone()","suites":["manipulation"],"line":968,"code":"QUnit.test(\"clone()\", function (assert) {\n  assert.expect(45);\n  var div, clone, form, body;\n  assert.equal(jQuery(\"#en\").text(), \"This is a normal link: Yahoo\", \"Assert text for #en\");\n  assert.equal(jQuery(\"#first\").append(jQuery(\"#yahoo\").clone()).text(), \"Try them out:Yahoo\", \"Check for clone\");\n  assert.equal(jQuery(\"#en\").text(), \"This is a normal link: Yahoo\", \"Reassert text for #en\");\n  jQuery.each(\"table thead tbody tfoot tr td div button ul ol li select option textarea iframe\".split(\" \"), function (i, nodeName) {\n    assert.equal(jQuery(\"<\" + nodeName + \"/>\").clone()[0].nodeName.toLowerCase(), nodeName, \"Clone a \" + nodeName);\n  });\n  assert.equal(jQuery(\"<input type='checkbox' />\").clone()[0].nodeName.toLowerCase(), \"input\", \"Clone a <input type='checkbox' />\");\n\n  // Check cloning non-elements\n  assert.equal(jQuery(\"#nonnodes\").contents().clone().length, 3, \"Check node,textnode,comment clone works (some browsers delete comments on clone)\");\n\n  // Verify that clones of clones can keep event listeners\n  div = jQuery(\"<div><ul><li>test</li></ul></div>\").on(\"click\", function () {\n    assert.ok(true, \"Bound event still exists.\");\n  });\n  clone = div.clone(true);\n  div.remove();\n  div = clone.clone(true);\n  clone.remove();\n  assert.equal(div.length, 1, \"One element cloned\");\n  assert.equal(div[0].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\n  div.trigger(\"click\");\n\n  // Manually clean up detached elements\n  div.remove();\n\n  // Verify that cloned children can keep event listeners\n  div = jQuery(\"<div></div>\").append([document.createElement(\"table\"), document.createElement(\"table\")]);\n  div.find(\"table\").on(\"click\", function () {\n    assert.ok(true, \"Bound event still exists.\");\n  });\n  clone = div.clone(true);\n  assert.equal(clone.length, 1, \"One element cloned\");\n  assert.equal(clone[0].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\n  clone.find(\"table\").trigger(\"click\");\n\n  // Manually clean up detached elements\n  div.remove();\n  clone.remove();\n\n  // Make sure that doing .clone() doesn't clone event listeners\n  div = jQuery(\"<div><ul><li>test</li></ul></div>\").on(\"click\", function () {\n    assert.ok(false, \"Bound event still exists after .clone().\");\n  });\n  clone = div.clone();\n  clone.trigger(\"click\");\n\n  // Manually clean up detached elements\n  clone.remove();\n  div.remove();\n\n  // Test both html() and clone() for <embed> and <object> types\n  div = jQuery(\"<div></div>\").html(\"<embed height='355' width='425' src='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'></embed>\");\n  clone = div.clone(true);\n  assert.equal(clone.length, 1, \"One element cloned\");\n  assert.equal(clone.html(), div.html(), \"Element contents cloned\");\n  assert.equal(clone[0].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\n\n  // this is technically an invalid object, but because of the special\n  // classid instantiation it is the only kind that IE has trouble with,\n  // so let's test with it too.\n  div = jQuery(\"<div></div>\").html(\"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\");\n  clone = div.clone(true);\n  assert.equal(clone.length, 1, \"One element cloned\");\n  assert.equal(clone[0].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\n  div = div.find(\"object\");\n  clone = clone.find(\"object\");\n\n  // oldIE adds extra attributes and <param> elements, so just test for existence of the defined set\n  jQuery.each([\"height\", \"width\", \"classid\"], function (i, attr) {\n    assert.equal(clone.attr(attr), div.attr(attr), \"<object> attribute cloned: \" + attr);\n  });\n  (function () {\n    var params = {};\n    clone.find(\"param\").each(function (index, param) {\n      params[param.attributes.name.nodeValue.toLowerCase()] = param.attributes.value.nodeValue.toLowerCase();\n    });\n    div.find(\"param\").each(function (index, param) {\n      var key = param.attributes.name.nodeValue.toLowerCase();\n      assert.equal(params[key], param.attributes.value.nodeValue.toLowerCase(), \"<param> cloned: \" + key);\n    });\n  })();\n\n  // and here's a valid one.\n  div = jQuery(\"<div></div>\").html(\"<object height='355' width='425' type='application/x-shockwave-flash' data='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='https://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\");\n  clone = div.clone(true);\n  assert.equal(clone.length, 1, \"One element cloned\");\n  assert.equal(clone.html(), div.html(), \"Element contents cloned\");\n  assert.equal(clone[0].nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\n  div = jQuery(\"<div></div>\").data({\n    \"a\": true\n  });\n  clone = div.clone(true);\n  assert.equal(clone.data(\"a\"), true, \"Data cloned.\");\n  clone.data(\"a\", false);\n  assert.equal(clone.data(\"a\"), false, \"Ensure cloned element data object was correctly modified\");\n  assert.equal(div.data(\"a\"), true, \"Ensure cloned element data object is copied, not referenced\");\n\n  // manually clean up detached elements\n  div.remove();\n  clone.remove();\n  form = document.createElement(\"form\");\n  form.action = \"/test/\";\n  div = document.createElement(\"div\");\n  div.appendChild(document.createTextNode(\"test\"));\n  form.appendChild(div);\n  assert.equal(jQuery(form).clone().children().length, 1, \"Make sure we just get the form back.\");\n  body = jQuery(\"body\").clone();\n  assert.equal(body.children()[0].id, \"qunit\", \"Make sure cloning body works\");\n  body.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone(script type=non-javascript) (trac-11359)","suites":["manipulation"],"line":1082,"code":"QUnit.test(\"clone(script type=non-javascript) (trac-11359)\", function (assert) {\n  assert.expect(3);\n  var src = jQuery(\"<script type='text/filler'>Lorem ipsum dolor sit amet</script><q><script type='text/filler'>consectetur adipiscing elit</script></q>\"),\n    dest = src.clone();\n  assert.equal(dest[0].text, \"Lorem ipsum dolor sit amet\", \"Cloning preserves script text\");\n  assert.equal(dest.last().html(), src.last().html(), \"Cloning preserves nested script text\");\n  assert.ok(/^\\s*<scr.pt\\s+type=['\"]?text\\/filler['\"]?\\s*>consectetur adipiscing elit<\\/scr.pt>\\s*$/i.test(dest.last().html()), \"Cloning preserves nested script text\");\n  dest.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone(form element) (Bug trac-3879, trac-6655)","suites":["manipulation"],"line":1091,"code":"QUnit.test(\"clone(form element) (Bug trac-3879, trac-6655)\", function (assert) {\n  assert.expect(5);\n  var clone, element;\n  element = jQuery(\"<select><option>Foo</option><option value='selected' selected>Bar</option></select>\");\n  assert.equal(element.clone().find(\"option\").filter(function () {\n    return this.selected;\n  }).val(), \"selected\", \"Selected option cloned correctly\");\n  element = jQuery(\"<input type='checkbox' value='foo'>\").attr(\"checked\", \"checked\");\n  clone = element.clone();\n  assert.equal(clone.is(\":checked\"), element.is(\":checked\"), \"Checked input cloned correctly\");\n  assert.equal(clone[0].defaultValue, \"foo\", \"Checked input defaultValue cloned correctly\");\n  element = jQuery(\"<input type='text' value='foo'>\");\n  clone = element.clone();\n  assert.equal(clone[0].defaultValue, \"foo\", \"Text input defaultValue cloned correctly\");\n  element = jQuery(\"<textarea>foo</textarea>\");\n  clone = element.clone();\n  assert.equal(clone[0].defaultValue, \"foo\", \"Textarea defaultValue cloned correctly\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone(multiple selected options) (Bug trac-8129)","suites":["manipulation"],"line":1109,"code":"QUnit.test(\"clone(multiple selected options) (Bug trac-8129)\", function (assert) {\n  assert.expect(1);\n  var element = jQuery(\"<select><option>Foo</option><option selected>Bar</option><option selected>Baz</option></select>\");\n  function getSelectedOptions(collection) {\n    return collection.find(\"option\").filter(function (option) {\n      return option.selected;\n    });\n  }\n  assert.equal(getSelectedOptions(element.clone()).length, getSelectedOptions(element).length, \"Multiple selected options cloned correctly\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone() on XML nodes","suites":["manipulation"],"line":1119,"code":"QUnit.test(\"clone() on XML nodes\", function (assert) {\n  assert.expect(2);\n  var xml = createDashboardXML(),\n    root = jQuery(xml.documentElement).clone(),\n    origTab = jQuery(\"tab\", xml).eq(0),\n    cloneTab = jQuery(\"tab\", root).eq(0);\n  origTab.text(\"origval\");\n  cloneTab.text(\"cloneval\");\n  assert.equal(origTab.text(), \"origval\", \"Check original XML node was correctly set\");\n  assert.equal(cloneTab.text(), \"cloneval\", \"Check cloned XML node was correctly set\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone() on local XML nodes with html5 nodename","suites":["manipulation"],"line":1130,"code":"QUnit.test(\"clone() on local XML nodes with html5 nodename\", function (assert) {\n  assert.expect(2);\n  var $xmlDoc = jQuery(jQuery.parseXML(\"<root><meter /></root>\")),\n    $meter = $xmlDoc.find(\"meter\").clone();\n  assert.equal($meter[0].nodeName, \"meter\", \"Check if nodeName was not changed due to cloning\");\n  assert.equal($meter[0].nodeType, 1, \"Check if nodeType is not changed due to cloning\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(undefined)","suites":["manipulation"],"line":1137,"code":"QUnit.test(\"html(undefined)\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery(\"#foo\").html(\"<i>test</i>\").html(undefined).html().toLowerCase(), \"<i>test</i>\", \".html(undefined) is chainable (trac-5571)\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html() on empty set","suites":["manipulation"],"line":1141,"code":"QUnit.test(\"html() on empty set\", function (assert) {\n  assert.expect(1);\n  assert.strictEqual(jQuery().html(), undefined, \".html() returns undefined for empty sets (trac-11962)\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(String|Number)","suites":["manipulation"],"line":1226,"code":"QUnit.test(\"html(String|Number)\", function (assert) {\n  testHtml(manipulationBareObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(Function)","suites":["manipulation"],"line":1229,"code":"QUnit.test(\"html(Function)\", function (assert) {\n  testHtml(manipulationFunctionReturningObj, assert);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(script nomodule)","suites":["manipulation"],"line":1246,"code":"QUnit.test(\"html(script nomodule)\", function (assert) {\n  // `nomodule` scripts should be executed by legacy browsers only.\n  assert.expect(QUnit.isIE ? 4 : 0);\n  var done = assert.async(),\n    $fixture = jQuery(\"#qunit-fixture\");\n  $fixture.html([\"<script nomodule>QUnit.assert.ok( QUnit.isIE, 'evaluated: nomodule script' );</script>\", \"<script nomodule src='\" + url(\"nomodule.js\") + \"'></script>\", \"<div>\", \"<script nomodule>QUnit.assert.ok( QUnit.isIE, 'evaluated: inner nomodule script' );</script>\", \"<script nomodule src='\" + url(\"inner_nomodule.js\") + \"'></script>\", \"</div>\"].join(\"\"));\n\n  // Allow asynchronous script execution to generate assertions\n  setTimeout(function () {\n    done();\n  }, 1000);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(Function) with incoming value -- direct selection","suites":["manipulation"],"line":1258,"code":"QUnit.test(\"html(Function) with incoming value -- direct selection\", function (assert) {\n  assert.expect(4);\n  var els, actualhtml, pass;\n  els = jQuery(\"#foo > p\");\n  actualhtml = els.map(function () {\n    return jQuery(this).html();\n  });\n  els.html(function (i, val) {\n    assert.equal(val, actualhtml[i], \"Make sure the incoming value is correct.\");\n    return \"<b>test</b>\";\n  });\n  pass = true;\n  els.each(function () {\n    if (this.childNodes.length !== 1) {\n      pass = false;\n    }\n  });\n  assert.ok(pass, \"Set HTML\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html(Function) with incoming value -- jQuery.contents()","suites":["manipulation"],"line":1277,"code":"QUnit.test(\"html(Function) with incoming value -- jQuery.contents()\", function (assert) {\n  assert.expect(14);\n  var actualhtml, j, $div, $div2, insert;\n  j = jQuery(\"#nonnodes\").contents();\n  actualhtml = j.map(function () {\n    return jQuery(this).html();\n  });\n  j.html(function (i, val) {\n    assert.equal(val, actualhtml[i], \"Make sure the incoming value is correct.\");\n    return \"<b>bold</b>\";\n  });\n\n  // Handle the case where no comment is in the document\n  if (j.length === 2) {\n    assert.equal(null, null, \"Make sure the incoming value is correct.\");\n  }\n  assert.equal(j.html().replace(/ xmlns=\"[^\"]+\"/g, \"\").toLowerCase(), \"<b>bold</b>\", \"Check node,textnode,comment with html()\");\n  $div = jQuery(\"<div></div>\");\n  assert.equal($div.html(function (i, val) {\n    assert.equal(val, \"\", \"Make sure the incoming value is correct.\");\n    return 5;\n  }).html(), \"5\", \"Setting a number as html\");\n  assert.equal($div.html(function (i, val) {\n    assert.equal(val, \"5\", \"Make sure the incoming value is correct.\");\n    return 0;\n  }).html(), \"0\", \"Setting a zero as html\");\n  $div2 = jQuery(\"<div></div>\");\n  insert = \"&lt;div&gt;hello1&lt;/div&gt;\";\n  assert.equal($div2.html(function (i, val) {\n    assert.equal(val, \"\", \"Make sure the incoming value is correct.\");\n    return insert;\n  }).html().replace(/>/g, \"&gt;\"), insert, \"Verify escaped insertion.\");\n  assert.equal($div2.html(function (i, val) {\n    assert.equal(val.replace(/>/g, \"&gt;\"), insert, \"Make sure the incoming value is correct.\");\n    return \"x\" + insert;\n  }).html().replace(/>/g, \"&gt;\"), \"x\" + insert, \"Verify escaped insertion.\");\n  assert.equal($div2.html(function (i, val) {\n    assert.equal(val.replace(/>/g, \"&gt;\"), \"x\" + insert, \"Make sure the incoming value is correct.\");\n    return \" \" + insert;\n  }).html().replace(/>/g, \"&gt;\"), \" \" + insert, \"Verify escaped insertion.\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"clone()/html() don't expose jQuery/Sizzle expandos (trac-12858)","suites":["manipulation"],"line":1318,"code":"QUnit.test(\"clone()/html() don't expose jQuery/Sizzle expandos (trac-12858)\", function (assert) {\n  assert.expect(2);\n  var $content = jQuery(\"<div><b><i>text</i></b></div>\").appendTo(\"#qunit-fixture\"),\n    expected = /^<b><i>text<\\/i><\\/b>$/i;\n\n  // Attach jQuery and Sizzle data (the latter with a non-qSA nth-child)\n  try {\n    $content.find(\":nth-child(1):lt(4)\").data(\"test\", true);\n\n    // But don't break on a non-Sizzle build\n  } catch (e) {\n    $content.find(\"*\").data(\"test\", true);\n  }\n  assert.ok(expected.test($content.clone(false)[0].innerHTML), \"clone()\");\n  assert.ok(expected.test($content.html()), \"html()\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"remove() no filters","suites":["manipulation"],"line":1334,"code":"QUnit.test(\"remove() no filters\", function (assert) {\n  assert.expect(2);\n  var first = jQuery(\"#ap\").children().first();\n  first.data(\"foo\", \"bar\");\n  jQuery(\"#ap\").children().remove();\n  assert.ok(jQuery(\"#ap\").text().length > 10, \"Check text is not removed\");\n  assert.equal(jQuery(\"#ap\").children().length, 0, \"Check remove\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"remove() with filters","suites":["manipulation"],"line":1342,"code":"QUnit.test(\"remove() with filters\", function (assert) {\n  assert.expect(8);\n  var markup, div;\n  jQuery(\"#ap\").children().remove(\"a\");\n  assert.ok(jQuery(\"#ap\").text().length > 10, \"Check text is not removed\");\n  assert.equal(jQuery(\"#ap\").children().length, 1, \"Check filtered remove\");\n  jQuery(\"#ap\").children().remove(\"a, code\");\n  assert.equal(jQuery(\"#ap\").children().length, 0, \"Check multi-filtered remove\");\n\n  // Positional and relative selectors\n  markup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n  div = jQuery(markup);\n  div.children().remove(\"span:nth-child(2n)\");\n  assert.equal(div.text(), \"13\", \"relative selector in remove\");\n  if (QUnit.jQuerySelectorsPos) {\n    div = jQuery(markup);\n    div.children().remove(\"span:first\");\n    assert.equal(div.text(), \"234\", \"positional selector in remove\");\n    div = jQuery(markup);\n    div.children().remove(\"span:last\");\n    assert.equal(div.text(), \"123\", \"positional selector in remove\");\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n\n  // using contents will get comments regular, text, and comment nodes\n  // Handle the case where no comment is in the document\n  assert.ok(jQuery(\"#nonnodes\").contents().length >= 2, \"Check node,textnode,comment remove works\");\n  jQuery(\"#nonnodes\").contents().remove();\n  assert.equal(jQuery(\"#nonnodes\").contents().length, 0, \"Check node,textnode,comment remove works\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"remove() event cleaning ","suites":["manipulation"],"line":1374,"code":"QUnit.test(\"remove() event cleaning \", function (assert) {\n  assert.expect(1);\n  var count, first, cleanUp;\n  count = 0;\n  first = jQuery(\"#ap\").children().first();\n  cleanUp = first.on(\"click\", function () {\n    count++;\n  }).remove().appendTo(\"#qunit-fixture\").trigger(\"click\");\n  assert.strictEqual(0, count, \"Event handler has been removed\");\n\n  // Clean up detached data\n  cleanUp.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"remove() in document order trac-13779","suites":["manipulation"],"line":1387,"code":"QUnit.test(\"remove() in document order trac-13779\", function (assert) {\n  assert.expect(1);\n  var last,\n    cleanData = jQuery.cleanData;\n  jQuery.cleanData = function (nodes) {\n    last = jQuery.text(nodes[0]);\n    cleanData.call(this, nodes);\n  };\n  jQuery(\"#qunit-fixture\").append(jQuery.parseHTML(\"<div class='removal-fixture'>1</div>\" + \"<div class='removal-fixture'>2</div>\" + \"<div class='removal-fixture'>3</div>\"));\n  jQuery(\".removal-fixture\").remove();\n  assert.equal(last, 3, \"The removal fixtures were removed in document order\");\n  jQuery.cleanData = cleanData;\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"detach() no filters","suites":["manipulation"],"line":1400,"code":"QUnit.test(\"detach() no filters\", function (assert) {\n  assert.expect(3);\n  var first = jQuery(\"#ap\").children().first();\n  first.data(\"foo\", \"bar\");\n  jQuery(\"#ap\").children().detach();\n  assert.ok(jQuery(\"#ap\").text().length > 10, \"Check text is not removed\");\n  assert.equal(jQuery(\"#ap\").children().length, 0, \"Check remove\");\n  assert.equal(first.data(\"foo\"), \"bar\");\n  first.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"detach() with filters","suites":["manipulation"],"line":1410,"code":"QUnit.test(\"detach() with filters\", function (assert) {\n  assert.expect(8);\n  var markup, div;\n  jQuery(\"#ap\").children().detach(\"a\");\n  assert.ok(jQuery(\"#ap\").text().length > 10, \"Check text is not removed\");\n  assert.equal(jQuery(\"#ap\").children().length, 1, \"Check filtered remove\");\n  jQuery(\"#ap\").children().detach(\"a, code\");\n  assert.equal(jQuery(\"#ap\").children().length, 0, \"Check multi-filtered remove\");\n\n  // Positional and relative selectors\n  markup = \"<div><span>1</span><span>2</span><span>3</span><span>4</span></div>\";\n  div = jQuery(markup);\n  div.children().detach(\"span:nth-child(2n)\");\n  assert.equal(div.text(), \"13\", \"relative selector in detach\");\n  if (QUnit.jQuerySelectorsPos) {\n    div = jQuery(markup);\n    div.children().detach(\"span:first\");\n    assert.equal(div.text(), \"234\", \"positional selector in detach\");\n    div = jQuery(markup);\n    div.children().detach(\"span:last\");\n    assert.equal(div.text(), \"123\", \"positional selector in detach\");\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n\n  // using contents will get comments regular, text, and comment nodes\n  // Handle the case where no comment is in the document\n  assert.ok(jQuery(\"#nonnodes\").contents().length >= 2, \"Check node,textnode,comment remove works\");\n  jQuery(\"#nonnodes\").contents().detach();\n  assert.equal(jQuery(\"#nonnodes\").contents().length, 0, \"Check node,textnode,comment remove works\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"detach() event cleaning ","suites":["manipulation"],"line":1442,"code":"QUnit.test(\"detach() event cleaning \", function (assert) {\n  assert.expect(1);\n  var count, first, cleanUp;\n  count = 0;\n  first = jQuery(\"#ap\").children().first();\n  cleanUp = first.on(\"click\", function () {\n    count++;\n  }).detach().appendTo(\"#qunit-fixture\").trigger(\"click\");\n  assert.strictEqual(1, count, \"Event handler has not been removed\");\n\n  // Clean up detached data\n  cleanUp.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"empty()","suites":["manipulation"],"line":1455,"code":"QUnit.test(\"empty()\", function (assert) {\n  assert.expect(3);\n  assert.equal(jQuery(\"#ap\").children().empty().text().length, 0, \"Check text is removed\");\n  assert.equal(jQuery(\"#ap\").children().length, 4, \"Check elements are not removed\");\n\n  // using contents will get comments regular, text, and comment nodes\n  var j = jQuery(\"#nonnodes\").contents();\n  j.empty();\n  assert.equal(j.html(), \"\", \"Check node,textnode,comment empty works\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.cleanData","suites":["manipulation"],"line":1465,"code":"QUnit.test(\"jQuery.cleanData\", function (assert) {\n  assert.expect(14);\n  var type, pos, div, child;\n  type = \"remove\";\n\n  // Should trigger 4 remove event\n  div = getDiv().remove();\n\n  // Should both do nothing\n  pos = \"Outer\";\n  div.trigger(\"click\");\n  pos = \"Inner\";\n  div.children().trigger(\"click\");\n  type = \"empty\";\n  div = getDiv();\n  child = div.children();\n\n  // Should trigger 2 remove event\n  div.empty();\n\n  // Should trigger 1\n  pos = \"Outer\";\n  div.trigger(\"click\");\n\n  // Should do nothing\n  pos = \"Inner\";\n  child.trigger(\"click\");\n\n  // Should trigger 2\n  div.remove();\n  type = \"html\";\n  div = getDiv();\n  child = div.children();\n\n  // Should trigger 2 remove event\n  div.html(\"<div></div>\");\n\n  // Should trigger 1\n  pos = \"Outer\";\n  div.trigger(\"click\");\n\n  // Should do nothing\n  pos = \"Inner\";\n  child.trigger(\"click\");\n\n  // Should trigger 2\n  div.remove();\n  function getDiv() {\n    var div = jQuery(\"<div class='outer'><div class='inner'></div></div>\").on(\"click\", function () {\n      assert.ok(true, type + \" \" + pos + \" Click event fired.\");\n    }).on(\"focus\", function () {\n      assert.ok(true, type + \" \" + pos + \" Focus event fired.\");\n    }).find(\"div\").on(\"click\", function () {\n      assert.ok(false, type + \" \" + pos + \" Click event fired.\");\n    }).on(\"focus\", function () {\n      assert.ok(false, type + \" \" + pos + \" Focus event fired.\");\n    }).end().appendTo(\"body\");\n    div[0].detachEvent = div[0].removeEventListener = function (t) {\n      assert.ok(true, type + \" Outer \" + t + \" event unbound\");\n    };\n    div[0].firstChild.detachEvent = div[0].firstChild.removeEventListener = function (t) {\n      assert.ok(true, type + \" Inner \" + t + \" event unbound\");\n    };\n    return div;\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.cleanData eliminates all private data (gh-2127)","suites":["manipulation"],"line":1531,"code":"QUnit.test(\"jQuery.cleanData eliminates all private data (gh-2127)\", function (assert) {\n  assert.expect(3);\n  var div = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\");\n  jQuery._data(div[0], \"gh-2127\", \"testing\");\n  assert.ok(!jQuery.isEmptyObject(jQuery._data(div[0])), \"Ensure some private data exists\");\n  div.remove();\n  assert.ok(!jQuery.hasData(div[0]), \"Removed element hasData should return false\");\n  assert.ok(jQuery.isEmptyObject(jQuery._data(div[0])), \"Private data is empty after node is removed\");\n  div.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.cleanData eliminates all public data","suites":["manipulation"],"line":1541,"code":"QUnit.test(\"jQuery.cleanData eliminates all public data\", function (assert) {\n  assert.expect(3);\n  var key,\n    div = jQuery(\"<div></div>\");\n  div.data(\"some\", \"data\");\n  assert.ok(!jQuery.isEmptyObject(jQuery.data(div[0])), \"Ensure some public data exists\");\n  div.remove();\n  assert.ok(!jQuery.hasData(div[0]), \"Removed element hasData should return false\");\n\n  // Make sure the expando is gone\n  for (key in div[0]) {\n    if (/^jQuery/.test(key)) {\n      assert.strictEqual(div[0][key], undefined, \"Expando was not removed when there was no more data\");\n    }\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"domManip plain-text caching (trac-6779)","suites":["manipulation"],"line":1557,"code":"QUnit.test(\"domManip plain-text caching (trac-6779)\", function (assert) {\n  assert.expect(1);\n\n  // DOM manipulation fails if added text matches an Object method\n  var i,\n    $f = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\"),\n    bad = [\"start-\", \"toString\", \"hasOwnProperty\", \"append\", \"here&there!\", \"-end\"];\n  for (i = 0; i < bad.length; i++) {\n    try {\n      $f.append(bad[i]);\n    } catch (e) {}\n  }\n  assert.equal($f.text(), bad.join(\"\"), \"Cached strings that match Object properties\");\n  $f.remove();\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"domManip executes scripts containing html comments or CDATA (trac-9221)","suites":["manipulation"],"line":1572,"code":"QUnit.test(\"domManip executes scripts containing html comments or CDATA (trac-9221)\", function (assert) {\n  assert.expect(3);\n  jQuery([\"<script type='text/javascript'>\", \"<!--\", \"QUnit.assert.ok( true, '<!-- handled' );\", \"//-->\", \"</script>\"].join(\"\\n\")).appendTo(\"#qunit-fixture\");\n\n  // This test requires XHTML mode as CDATA is not recognized in HTML.\n  // jQuery( [\n  // \t\"<script type='text/javascript'>\",\n  // \t\"<![CDATA[\",\n  // \t\"QUnit.assert.ok( true, '<![CDATA[ handled' );\",\n  // \t\"//]]>\",\n  // \t\"</script>\"\n  // ].join( \"\\n\" ) ).appendTo( \"#qunit-fixture\" );\n\n  jQuery([\"<script type='text/javascript'>\", \"<!--//--><![CDATA[//><!--\", \"QUnit.assert.ok( true, '<!--//--><![CDATA[//><!-- (Drupal case) handled' );\", \"//--><!]]>\", \"</script>\"].join(\"\\n\")).appendTo(\"#qunit-fixture\");\n\n  // ES2015 in Annex B requires HTML-style comment delimiters (`<!--` & `-->`) to act as\n  // single-line comment delimiters; i.e. they should be treated as `//`.\n  // See gh-4904\n  jQuery([\"<script type='text/javascript'>\", \"<!-- Same-line HTML comment\", \"QUnit.assert.ok( true, '<!-- Same-line HTML comment' );\", \"-->\", \"</script>\"].join(\"\\n\")).appendTo(\"#qunit-fixture\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.clone - no exceptions for object elements trac-9587","suites":["manipulation"],"line":1638,"code":"QUnit.test(\"jQuery.clone - no exceptions for object elements trac-9587\", function (assert) {\n  assert.expect(1);\n  try {\n    jQuery(\"#no-clone-exception\").clone();\n    assert.ok(true, \"cloned with no exceptions\");\n  } catch (e) {\n    assert.ok(false, e.message);\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Cloned, detached HTML5 elems (trac-10667, trac-10670)","suites":["manipulation"],"line":1647,"code":"QUnit.test(\"Cloned, detached HTML5 elems (trac-10667, trac-10670)\", function (assert) {\n  assert.expect(7);\n  var $clone,\n    $section = jQuery(\"<section>\").appendTo(\"#qunit-fixture\");\n\n  // First clone\n  $clone = $section.clone();\n\n  // This branch tests a known behavior in modern browsers that should never fail.\n  // Included for expected test count symmetry (expecting 1)\n  assert.equal($clone[0].nodeName, \"SECTION\", \"detached clone nodeName matches 'SECTION'\");\n\n  // Bind an event\n  $section.on(\"click\", function () {\n    assert.ok(true, \"clone fired event\");\n  });\n\n  // Second clone (will have an event bound)\n  $clone = $section.clone(true);\n\n  // Trigger an event from the first clone\n  $clone.trigger(\"click\");\n  $clone.off(\"click\");\n\n  // Add a child node with text to the original\n  $section.append(\"<p>Hello</p>\");\n\n  // Third clone (will have child node and text)\n  $clone = $section.clone(true);\n  assert.equal($clone.find(\"p\").text(), \"Hello\", \"Assert text in child of clone\");\n\n  // Trigger an event from the third clone\n  $clone.trigger(\"click\");\n  $clone.off(\"click\");\n\n  // Add attributes to copy\n  $section.attr({\n    \"class\": \"foo bar baz\",\n    \"title\": \"This is a title\"\n  });\n\n  // Fourth clone (will have newly added attributes)\n  $clone = $section.clone(true);\n  assert.equal($clone.attr(\"class\"), $section.attr(\"class\"), \"clone and element have same class attribute\");\n  assert.equal($clone.attr(\"title\"), $section.attr(\"title\"), \"clone and element have same title attribute\");\n\n  // Remove the original\n  $section.remove();\n\n  // Clone the clone\n  $section = $clone.clone(true);\n\n  // Remove the clone\n  $clone.remove();\n\n  // Trigger an event from the clone of the clone\n  $section.trigger(\"click\");\n\n  // Unbind any remaining events\n  $section.off(\"click\");\n  $clone.off(\"click\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Guard against exceptions when clearing safeChildNodes","suites":["manipulation"],"line":1709,"code":"QUnit.test(\"Guard against exceptions when clearing safeChildNodes\", function (assert) {\n  assert.expect(1);\n  var div;\n  try {\n    div = jQuery(\"<div></div><hr/><code></code><b></b>\");\n  } catch (e) {}\n  assert.ok(div && div.jquery, \"Created nodes safely, guarded against exceptions on safeChildNodes[ -1 ]\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Ensure oldIE creates a new set on appendTo (trac-8894)","suites":["manipulation"],"line":1717,"code":"QUnit.test(\"Ensure oldIE creates a new set on appendTo (trac-8894)\", function (assert) {\n  assert.expect(5);\n  assert.strictEqual(jQuery(\"<div></div>\").clone().addClass(\"test\").appendTo(\"<div></div>\").end().end().hasClass(\"test\"), false, \"Check jQuery.fn.appendTo after jQuery.clone\");\n  assert.strictEqual(jQuery(\"<div></div>\").find(\"p\").end().addClass(\"test\").appendTo(\"<div></div>\").end().end().hasClass(\"test\"), false, \"Check jQuery.fn.appendTo after jQuery.fn.find\");\n  assert.strictEqual(jQuery(\"<div></div>\").text(\"test\").addClass(\"test\").appendTo(\"<div></div>\").end().end().hasClass(\"test\"), false, \"Check jQuery.fn.appendTo after jQuery.fn.text\");\n  assert.strictEqual(jQuery(\"<bdi></bdi>\").clone().addClass(\"test\").appendTo(\"<div></div>\").end().end().hasClass(\"test\"), false, \"Check jQuery.fn.appendTo after clone html5 element\");\n  assert.strictEqual(jQuery(\"<p></p>\").appendTo(\"<div></div>\").end().length, jQuery(\"<p>test</p>\").appendTo(\"<div></div>\").end().length, \"Elements created with createElement and with createDocumentFragment should be treated alike\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"html() - script exceptions bubble (trac-11743)","suites":["manipulation"],"line":1725,"code":"QUnit.test(\"html() - script exceptions bubble (trac-11743)\", function (assert) {\n  assert.expect(2);\n  var done = assert.async(),\n    onerror = window.onerror;\n  setTimeout(function () {\n    window.onerror = onerror;\n    done();\n  }, 1000);\n  window.onerror = function () {\n    assert.ok(true, \"Exception thrown\");\n    if (includesModule(\"ajax\")) {\n      window.onerror = function () {\n        assert.ok(true, \"Exception thrown in remote script\");\n      };\n      jQuery(\"#qunit-fixture\").html(\"<script src='\" + baseURL + \"badcall.js'></script>\");\n      assert.ok(true, \"Exception ignored\");\n    } else {\n      assert.ok(true, \"No jQuery.ajax\");\n    }\n  };\n  jQuery(\"#qunit-fixture\").html(\"<script>undefined();</script>\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"checked state is cloned with clone()","suites":["manipulation"],"line":1747,"code":"QUnit.test(\"checked state is cloned with clone()\", function (assert) {\n  assert.expect(2);\n  var elem = jQuery.parseHTML(\"<input type='checkbox' checked='checked'/>\")[0];\n  elem.checked = false;\n  assert.equal(jQuery(elem).clone().attr(\"id\", \"clone\")[0].checked, false, \"Checked false state correctly cloned\");\n  elem = jQuery.parseHTML(\"<input type='checkbox'/>\")[0];\n  elem.checked = true;\n  assert.equal(jQuery(elem).clone().attr(\"id\", \"clone\")[0].checked, true, \"Checked true state correctly cloned\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"manipulate mixed jQuery and text (trac-12384, trac-12346)","suites":["manipulation"],"line":1756,"code":"QUnit.test(\"manipulate mixed jQuery and text (trac-12384, trac-12346)\", function (assert) {\n  assert.expect(2);\n  var div = jQuery(\"<div>a</div>\").append(\"&nbsp;\", jQuery(\"<span>b</span>\"), \"&nbsp;\", jQuery(\"<span>c</span>\")),\n    nbsp = String.fromCharCode(160);\n  assert.equal(div.text(), \"a\" + nbsp + \"b\" + nbsp + \"c\", \"Appending mixed jQuery with text nodes\");\n  div = jQuery(\"<div><div></div></div>\").find(\"div\").after(\"<p>a</p>\", \"<p>b</p>\").parent();\n  assert.equal(div.find(\"*\").length, 3, \"added 2 paragraphs after inner div\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"script evaluation (trac-11795)","suites":["manipulation"],"line":1764,"code":"QUnit.test(\"script evaluation (trac-11795)\", function (assert) {\n  assert.expect(13);\n  var scriptsIn,\n    scriptsOut,\n    fixture = jQuery(\"#qunit-fixture\").empty(),\n    objGlobal = function () {\n      return this;\n    }(),\n    isOk = objGlobal.ok,\n    notOk = function () {\n      var args = arguments;\n      args[0] = !args[0];\n      return isOk.apply(this, args);\n    };\n  objGlobal.ok = notOk;\n  scriptsIn = jQuery([\"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: non-script' );</script>\", \"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: text/javascript' );</script>\", \"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: text/ecmascript' );</script>\", \"<script>QUnit.assert.ok( true, 'evaluated: no type' );</script>\", \"<div>\", \"<script type='something/else'>QUnit.assert.ok( false, 'evaluated: inner non-script' );</script>\", \"<script type='text/javascript'>QUnit.assert.ok( true, 'evaluated: inner text/javascript' );</script>\", \"<script type='text/ecmascript'>QUnit.assert.ok( true, 'evaluated: inner text/ecmascript' );</script>\", \"<script>QUnit.assert.ok( true, 'evaluated: inner no type' );</script>\", \"</div>\"].join(\"\"));\n  scriptsIn.appendTo(jQuery(\"<div class='detached'></div>\"));\n  objGlobal.ok = isOk;\n  scriptsOut = fixture.append(scriptsIn).find(\"script\");\n  assert.equal(scriptsOut[0].type, \"something/else\", \"Non-evaluated type.\");\n  assert.equal(scriptsOut[1].type, \"text/javascript\", \"Evaluated type.\");\n  assert.deepEqual(scriptsOut.get(), fixture.find(\"script\").get(), \"All script tags remain.\");\n  objGlobal.ok = notOk;\n  scriptsOut = scriptsOut.add(scriptsOut.clone()).appendTo(fixture.find(\"div\"));\n  assert.deepEqual(fixture.find(\"div script\").get(), scriptsOut.get(), \"Scripts cloned without reevaluation\");\n  fixture.append(scriptsOut.detach());\n  assert.deepEqual(fixture.children(\"script\").get(), scriptsOut.get(), \"Scripts detached without reevaluation\");\n  objGlobal.ok = isOk;\n  if (includesModule(\"ajax\")) {\n    Globals.register(\"testBar\");\n    jQuery(\"#qunit-fixture\").append(\"<script src='\" + url(\"mock.php?action=testbar\") + \"'></script>\");\n    assert.strictEqual(window.testBar, \"bar\", \"Global script evaluation\");\n  } else {\n    assert.ok(true, \"No jQuery.ajax\");\n    assert.ok(true, \"No jQuery.ajax\");\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"jQuery.htmlPrefilter (gh-1747)","suites":["manipulation"],"line":1825,"code":"QUnit.test(\"jQuery.htmlPrefilter (gh-1747)\", function (assert) {\n  assert.expect(5);\n  var expectedArgument,\n    invocations = 0,\n    done = assert.async(),\n    htmlPrefilter = jQuery.htmlPrefilter,\n    fixture = jQuery(\"<div></div>\").appendTo(\"#qunit-fixture\"),\n    poison = \"<script>jQuery.htmlPrefilter.assert.ok( false, 'script not executed' );</script>\";\n  jQuery.htmlPrefilter = function (html) {\n    invocations++;\n    assert.equal(html, expectedArgument, \"Expected input\");\n\n    // Remove <script> and <del> elements\n    return htmlPrefilter.apply(this, arguments).replace(/<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig, \"\");\n  };\n  jQuery.htmlPrefilter.assert = assert;\n  expectedArgument = \"A-\" + poison + \"B-\" + poison + poison + \"C-\";\n  fixture.html(expectedArgument);\n  expectedArgument = \"D-\" + poison + \"E-\" + \"<del></del><div>\" + poison + poison + \"</div>\" + \"F-\";\n  fixture.append(expectedArgument);\n  expectedArgument = poison;\n  fixture.find(\"div\").replaceWith(expectedArgument);\n  assert.equal(invocations, 3, \"htmlPrefilter invoked for all DOM manipulations\");\n  assert.equal(fixture.html(), \"A-B-C-D-E-F-\", \"htmlPrefilter modified HTML\");\n\n  // Allow asynchronous script execution to generate assertions\n  setTimeout(function () {\n    jQuery.htmlPrefilter = htmlPrefilter;\n    done();\n  }, 100);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (trac-4087)","suites":["manipulation"],"line":1856,"code":"QUnit.test(\"insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (trac-4087)\", function (assert) {\n  assert.expect(10);\n  var elems;\n  jQuery.each([\"appendTo\", \"prependTo\", \"insertBefore\", \"insertAfter\", \"replaceAll\"], function (index, name) {\n    elems = jQuery([\"<ul id='test4087-complex'><li class='test4087'><div>c1</div>h1</li><li><div>c2</div>h2</li></ul>\", \"<div id='test4087-simple'><div class='test4087-1'>1<div class='test4087-2'>2</div><div class='test4087-3'>3</div></div></div>\", \"<div id='test4087-multiple'><div class='test4087-multiple'>1</div><div class='test4087-multiple'>2</div></div>\"].join(\"\")).appendTo(\"#qunit-fixture\");\n\n    // complex case based on https://jsfiddle.net/pbramos/gZ7vB/\n    jQuery(\"#test4087-complex div\")[name](\"#test4087-complex li:last-child div:last-child\");\n    assert.equal(jQuery(\"#test4087-complex li:last-child div\").length, name === \"replaceAll\" ? 1 : 2, name + \" a node to itself, complex case.\");\n\n    // simple case\n    jQuery(\".test4087-1\")[name](\".test4087-1\");\n    assert.equal(jQuery(\".test4087-1\").length, 1, name + \" a node to itself, simple case.\");\n\n    // clean for next test\n    jQuery(\"#test4087-complex\").remove();\n    jQuery(\"#test4087-simple\").remove();\n    jQuery(\"#test4087-multiple\").remove();\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Index for function argument should be received (trac-13094)","suites":["manipulation"],"line":1876,"code":"QUnit.test(\"Index for function argument should be received (trac-13094)\", function (assert) {\n  assert.expect(2);\n  var i = 0;\n  jQuery(\"<div></div><div></div>\").before(function (index) {\n    assert.equal(index, i++, \"Index should be correct\");\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure jQuery.fn.remove can work on elements in documentFragment","suites":["manipulation"],"line":1883,"code":"QUnit.test(\"Make sure jQuery.fn.remove can work on elements in documentFragment\", function (assert) {\n  assert.expect(1);\n  var fragment = document.createDocumentFragment(),\n    div = fragment.appendChild(document.createElement(\"div\"));\n  jQuery(div).remove();\n  assert.equal(fragment.childNodes.length, 0, \"div element was removed from documentFragment\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure specific elements with content created correctly (trac-13232)","suites":["manipulation"],"line":1890,"code":"QUnit.test(\"Make sure specific elements with content created correctly (trac-13232)\", function (assert) {\n  assert.expect(20);\n  var results = [],\n    args = [],\n    elems = {\n      thead: \"<tr><td>thead</td></tr>\",\n      tbody: \"<tr><td>tbody</td></tr>\",\n      tfoot: \"<tr><td>tfoot</td></tr>\",\n      colgroup: \"<col span='5'></col>\",\n      caption: \"caption\",\n      tr: \"<td>tr</td>\",\n      th: \"th\",\n      td: \"<div>td</div>\",\n      optgroup: \"<option>optgroup</option>\",\n      option: \"option\"\n    };\n  jQuery.each(elems, function (name, value) {\n    var html = \"<\" + name + \">\" + value + \"</\" + name + \">\";\n    assert.strictEqual(jQuery.parseHTML(\"<\" + name + \">\" + value + \"</\" + name + \">\")[0].nodeName.toLowerCase(), name, name + \" is created correctly\");\n    results.push(name);\n    args.push(html);\n  });\n  jQuery.fn.append.apply(jQuery(\"<div></div>\"), args).children().each(function (i) {\n    assert.strictEqual(this.nodeName.toLowerCase(), results[i]);\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Validate creation of multiple quantities of certain elements (trac-13818)","suites":["manipulation"],"line":1916,"code":"QUnit.test(\"Validate creation of multiple quantities of certain elements (trac-13818)\", function (assert) {\n  assert.expect(22);\n  var tags = [\"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"col\", \"caption\", \"tr\", \"th\", \"td\", \"optgroup\", \"option\"];\n  jQuery.each(tags, function (index, tag) {\n    jQuery(\"<\" + tag + \"></\" + tag + \"><\" + tag + \"></\" + tag + \">\").each(function () {\n      assert.ok(this.nodeName.toLowerCase() === tag, tag + \" elements created correctly\");\n    });\n  });\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure tr element will be appended to tbody element of table when present","suites":["manipulation"],"line":1925,"code":"QUnit.test(\"Make sure tr element will be appended to tbody element of table when present\", function (assert) {\n  assert.expect(1);\n  var html,\n    table = document.createElement(\"table\");\n  table.appendChild(document.createElement(\"tbody\"));\n  document.getElementById(\"qunit-fixture\").appendChild(table);\n  jQuery(table).append(\"<tr><td>test</td></tr>\");\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  html = table.innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(html, \"<tbody><tr><td>test</td></tr></tbody>\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure tr elements will be appended to tbody element of table when present","suites":["manipulation"],"line":1937,"code":"QUnit.test(\"Make sure tr elements will be appended to tbody element of table when present\", function (assert) {\n  assert.expect(1);\n  var html,\n    table = document.createElement(\"table\");\n  table.appendChild(document.createElement(\"tbody\"));\n  document.getElementById(\"qunit-fixture\").appendChild(table);\n  jQuery(table).append(\"<tr><td>1</td></tr><tr><td>2</td></tr>\");\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  html = table.innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(html, \"<tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody>\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure tfoot element will not be appended to tbody element of table when present","suites":["manipulation"],"line":1949,"code":"QUnit.test(\"Make sure tfoot element will not be appended to tbody element of table when present\", function (assert) {\n  assert.expect(1);\n  var html,\n    table = document.createElement(\"table\");\n  table.appendChild(document.createElement(\"tbody\"));\n  document.getElementById(\"qunit-fixture\").appendChild(table);\n  jQuery(table).append(\"<tfoot></tfoot>\");\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  html = table.innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(html, \"<tbody></tbody><tfoot></tfoot>\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure document fragment will be appended to tbody element of table when present","suites":["manipulation"],"line":1961,"code":"QUnit.test(\"Make sure document fragment will be appended to tbody element of table when present\", function (assert) {\n  assert.expect(1);\n  var html,\n    fragment = document.createDocumentFragment(),\n    table = document.createElement(\"table\"),\n    tr = document.createElement(\"tr\"),\n    td = document.createElement(\"td\");\n  table.appendChild(document.createElement(\"tbody\"));\n  document.getElementById(\"qunit-fixture\").appendChild(table);\n  fragment.appendChild(tr);\n  tr.appendChild(td);\n  td.innerHTML = \"test\";\n  jQuery(table).append(fragment);\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  html = table.innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(html, \"<tbody><tr><td>test</td></tr></tbody>\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure col element is appended correctly","suites":["manipulation"],"line":1979,"code":"QUnit.test(\"Make sure col element is appended correctly\", function (assert) {\n  assert.expect(1);\n  var table = jQuery(\"<table cellpadding='0'><tr><td>test</td></tr></table>\");\n  jQuery(table).appendTo(\"#qunit-fixture\");\n  jQuery(\"<col width='150'></col>\").prependTo(table);\n  assert.strictEqual(table.find(\"td\").width(), 150);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure tr is not appended to the wrong tbody (gh-3439)","suites":["manipulation"],"line":1986,"code":"QUnit.test(\"Make sure tr is not appended to the wrong tbody (gh-3439)\", function (assert) {\n  assert.expect(1);\n  var htmlOut,\n    htmlIn = \"<thead><tr><td>\" + \"<table><tbody><tr><td>nested</td></tr></tbody></table>\" + \"</td></tr></thead>\",\n    newRow = \"<tr><td>added</td></tr>\",\n    htmlExpected = htmlIn.replace(\"</thead>\", \"</thead>\" + newRow),\n    table = supportjQuery(\"<table></table>\").html(htmlIn).appendTo(\"#qunit-fixture\")[0];\n  jQuery(table).append(newRow);\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  htmlOut = table.innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(htmlOut, htmlExpected);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Make sure tags with single-character names are found (gh-4124)","suites":["manipulation"],"line":2020,"code":"QUnit.test(\"Make sure tags with single-character names are found (gh-4124)\", function (assert) {\n  assert.expect(1);\n  var htmlOut,\n    htmlIn = \"<p>foo<!--<td>--></p>\",\n    $el = jQuery(\"<div></div>\");\n  $el.html(htmlIn);\n\n  // Lowercase and replace spaces to remove possible browser inconsistencies\n  htmlOut = $el[0].innerHTML.toLowerCase().replace(/\\s/g, \"\");\n  assert.strictEqual(htmlOut, htmlIn);\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Ignore content from unsuccessful responses (gh-4126)","suites":["manipulation"],"line":2052,"code":"QUnit.test(\"Ignore content from unsuccessful responses (gh-4126)\", function (assert) {\n  assert.expect(1);\n  var globalEval = jQuery.globalEval;\n  jQuery.globalEval = function (code) {\n    assert.ok(false, \"no attempt to evaluate code from an unsuccessful response\");\n  };\n  try {\n    jQuery(\"#qunit-fixture\").append(\"<script src='\" + url(\"mock.php?action=error\") + \"'></script>\");\n    assert.ok(true, \"no error thrown from embedding script with unsuccessful-response src\");\n  } catch (e) {\n    throw e;\n  } finally {\n    jQuery.globalEval = globalEval;\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Sanitized HTML doesn't get unsanitized","suites":["manipulation"],"line":2093,"code":"QUnit.test(\"Sanitized HTML doesn't get unsanitized\", function (assert) {\n  var container,\n    counter = 0,\n    oldIos = /iphone os (?:8|9|10|11|12)_/i.test(navigator.userAgent),\n    assertCount = oldIos ? 12 : 13,\n    done = assert.async(assertCount);\n  assert.expect(assertCount);\n  Globals.register(\"xss\");\n  window.xss = sinon.spy();\n  container = jQuery(\"<div></div>\");\n  container.appendTo(\"#qunit-fixture\");\n  function test(htmlString) {\n    var currCounter = counter,\n      div = jQuery(\"<div></div>\");\n    counter++;\n    div.appendTo(container);\n    div.html(htmlString);\n    setTimeout(function () {\n      assert.ok(window.xss.withArgs(currCounter).notCalled, \"Insecure code wasn't executed, input: \" + htmlString);\n      done();\n    }, 1000);\n  }\n\n  // Note: below test cases need to invoke the xss function with consecutive\n  // decimal parameters for the assertion messages to be correct.\n  // Thanks to Masato Kinugawa from Cure53 for providing the following test cases.\n  test(\"<img alt=\\\"<x\\\" title=\\\"/><img src=url404 onerror=xss(0)>\\\">\");\n  test(\"<img alt=\\\"\\n<x\\\" title=\\\"/>\\n<img src=url404 onerror=xss(1)>\\\">\");\n  test(\"<style><style/><img src=url404 onerror=xss(2)>\");\n  test(\"<xmp><xmp/><img src=url404 onerror=xss(3)>\");\n  test(\"<title><title /><img src=url404 onerror=xss(4)>\");\n  test(\"<iframe><iframe/><img src=url404 onerror=xss(5)>\");\n  test(\"<noframes><noframes/><img src=url404 onerror=xss(6)>\");\n  test(\"<noscript><noscript/><img src=url404 onerror=xss(7)>\");\n  test(\"<foo\\\" alt=\\\"\\\" title=\\\"/><img src=url404 onerror=xss(8)>\\\">\");\n  test(\"<img alt=\\\"<x\\\" title=\\\"\\\" src=\\\"/><img src=url404 onerror=xss(9)>\\\">\");\n  test(\"<noscript/><img src=url404 onerror=xss(10)>\");\n  test(\"<option><style></option></select><img src=url404 onerror=xss(11)></style>\");\n\n  // Support: iOS 8 - 12 only.\n  // Old iOS parses `<noembed>` tags differently, executing this code. This is no\n  // different to native behavior on that OS, though, so just accept it.\n  if (!oldIos) {\n    test(\"<noembed><noembed/><img src=url404 onerror=xss(12)>\");\n  }\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"Works with invalid attempts to close the table wrapper","suites":["manipulation"],"line":2139,"code":"QUnit.test(\"Works with invalid attempts to close the table wrapper\", function (assert) {\n  assert.expect(3);\n\n  // This test case attempts to close the tags which wrap input\n  // based on matching done in wrapMap which should be ignored.\n  var elem = jQuery(\"<td></td></tr></tbody></table><td></td>\");\n  assert.strictEqual(elem.length, 2, \"Two elements created\");\n  assert.strictEqual(elem[0].nodeName.toLowerCase(), \"td\", \"First element is td\");\n  assert.strictEqual(elem[1].nodeName.toLowerCase(), \"td\", \"Second element is td\");\n});","file":"unit/manipulation.js","skipped":false,"dir":"test"},{"name":"empty set","suites":["offset"],"line":52,"code":"  QUnit.test(\"empty set\", function (assert) {\n    assert.expect(2);\n    assert.strictEqual(jQuery().offset(), undefined, \"offset() returns undefined for empty set (trac-11962)\");\n    assert.strictEqual(jQuery().position(), undefined, \"position() returns undefined for empty set (trac-11962)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"disconnected element","suites":["offset"],"line":57,"code":"  QUnit.test(\"disconnected element\", function (assert) {\n    assert.expect(4);\n    var result = jQuery(document.createElement(\"div\")).offset();\n\n    // These tests are solely for main/compat consistency\n    // Retrieving offset on disconnected/hidden elements is not officially\n    // valid input, but will return zeros for back-compat\n    assert.equal(result.top, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\");\n    assert.equal(result.left, 0, \"Retrieving offset on disconnected elements returns zeros (gh-2310)\");\n    assert.equal(Object.keys(result).length, 2, \"Retrieving offset on disconnected elements returns offset object (gh-3167)\");\n    assert.equal(jQuery.isPlainObject(result), true, \"Retrieving offset on disconnected elements returns plain object (gh-3612)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"hidden (display: none) element","suites":["offset"],"line":69,"code":"  QUnit.test(\"hidden (display: none) element\", function (assert) {\n    assert.expect(4);\n    var node = jQuery(\"<div style='display: none'></div>\").appendTo(\"#qunit-fixture\"),\n      result = node.offset();\n    node.remove();\n\n    // These tests are solely for main/compat consistency\n    // Retrieving offset on disconnected/hidden elements is not officially\n    // valid input, but will return zeros for back-compat\n    assert.equal(result.top, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\");\n    assert.equal(result.left, 0, \"Retrieving offset on hidden elements returns zeros (gh-2310)\");\n    assert.equal(Object.keys(result).length, 2, \"Retrieving offset on hidden elements returns offset object (gh-3167)\");\n    assert.equal(jQuery.isPlainObject(result), true, \"Retrieving offset on hidden elements returns plain object (gh-3612)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"0 sized element","suites":["offset"],"line":83,"code":"  QUnit.test(\"0 sized element\", function (assert) {\n    assert.expect(4);\n    var node = jQuery(\"<div style='margin: 5px; width: 0; height: 0'></div>\").appendTo(\"#qunit-fixture\"),\n      result = node.offset();\n    node.remove();\n    assert.notEqual(result.top, 0, \"Retrieving offset on 0 sized elements (gh-3167)\");\n    assert.notEqual(result.left, 0, \"Retrieving offset on 0 sized elements (gh-3167)\");\n    assert.equal(Object.keys(result).length, 2, \"Retrieving offset on 0 sized elements returns offset object (gh-3167)\");\n    assert.equal(jQuery.isPlainObject(result), true, \"Retrieving offset on 0 sized elements returns plain object (gh-3612)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"hidden (visibility: hidden) element","suites":["offset"],"line":93,"code":"  QUnit.test(\"hidden (visibility: hidden) element\", function (assert) {\n    assert.expect(4);\n    var node = jQuery(\"<div style='margin: 5px; visibility: hidden'></div>\").appendTo(\"#qunit-fixture\"),\n      result = node.offset();\n    node.remove();\n    assert.notEqual(result.top, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\");\n    assert.notEqual(result.left, 0, \"Retrieving offset on visibility:hidden elements (gh-3167)\");\n    assert.equal(Object.keys(result).length, 2, \"Retrieving offset on visibility:hidden elements returns offset object (gh-3167)\");\n    assert.equal(jQuery.isPlainObject(result), true, \"Retrieving offset on visibility:hidden elements returns plain object (gh-3612)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"normal element","suites":["offset"],"line":103,"code":"  QUnit.test(\"normal element\", function (assert) {\n    assert.expect(4);\n    var node = jQuery(\"<div>\").appendTo(\"#qunit-fixture\"),\n      offset = node.offset(),\n      position = node.position();\n    node.remove();\n    assert.equal(Object.keys(offset).length, 2, \"Retrieving offset on normal elements returns offset object (gh-3612)\");\n    assert.equal(jQuery.isPlainObject(offset), true, \"Retrieving offset on normal elements returns plain object (gh-3612)\");\n    assert.equal(Object.keys(position).length, 2, \"Retrieving position on normal elements returns offset object (gh-3612)\");\n    assert.equal(jQuery.isPlainObject(position), true, \"Retrieving position on normal elements returns plain object (gh-3612)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"chaining","suites":["offset"],"line":710,"code":"  QUnit.test(\"chaining\", function (assert) {\n    assert.expect(3);\n    var coords = {\n      \"top\": 1,\n      \"left\": 1\n    };\n    assert.equal(jQuery(\"#absolute-1\").offset(coords).jquery, jQuery.fn.jquery, \"offset(coords) returns jQuery object\");\n    assert.equal(jQuery(\"#non-existent\").offset(coords).jquery, jQuery.fn.jquery, \"offset(coords) with empty jQuery set returns jQuery object\");\n    assert.equal(jQuery(\"#absolute-1\").offset(undefined).jquery, jQuery.fn.jquery, \"offset(undefined) returns jQuery object (trac-5571)\");\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"offsetParent","suites":["offset"],"line":871,"code":"  QUnit.test(\"offsetParent\", function (assert) {\n    assert.expect(13);\n    var body, header, div, area;\n    body = jQuery(\"body\").offsetParent();\n    assert.equal(body.length, 1, \"Only one offsetParent found.\");\n    assert.equal(body[0], document.documentElement, \"The html element is the offsetParent of the body.\");\n    header = jQuery(\"#qunit\").offsetParent();\n    assert.equal(header.length, 1, \"Only one offsetParent found.\");\n    assert.equal(header[0], document.documentElement, \"The html element is the offsetParent of #qunit.\");\n    jQuery(\"#qunit-fixture\").css(\"position\", \"absolute\");\n    div = jQuery(\"#nothiddendivchild\").offsetParent();\n    assert.equal(div.length, 1, \"Only one offsetParent found.\");\n    assert.equal(div[0], document.getElementById(\"qunit-fixture\"), \"The #qunit-fixture is the offsetParent of #nothiddendivchild.\");\n    jQuery(\"#qunit-fixture\").css(\"position\", \"\");\n    jQuery(\"#nothiddendiv\").css(\"position\", \"relative\");\n    div = jQuery(\"#nothiddendivchild\").offsetParent();\n    assert.equal(div.length, 1, \"Only one offsetParent found.\");\n    assert.equal(div[0], jQuery(\"#nothiddendiv\")[0], \"The div is the offsetParent.\");\n    div = jQuery(\"body, #nothiddendivchild\").offsetParent();\n    assert.equal(div.length, 2, \"Two offsetParent found.\");\n    assert.equal(div[0], document.documentElement, \"The html element is the offsetParent of the body.\");\n    assert.equal(div[1], jQuery(\"#nothiddendiv\")[0], \"The div is the offsetParent.\");\n    area = jQuery(\"<map name=\\\"imgmap\\\"><area shape=\\\"rect\\\" coords=\\\"0,0,200,50\\\"></map>\").appendTo(\"body\").find(\"area\");\n    assert.equal(area.offsetParent()[0], document.documentElement, \"The html element is the offsetParent of a map area.\");\n    area.remove();\n    div = jQuery(\"<div>\").css({\n      \"position\": \"absolute\"\n    }).appendTo(\"body\");\n    assert.equal(div.offsetParent()[0], document.documentElement, \"Absolutely positioned div returns html as offset parent, see trac-12139\");\n    div.remove();\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"fractions (see trac-7730 and trac-7885)","suites":["offset"],"line":902,"code":"  QUnit.test(\"fractions (see trac-7730 and trac-7885)\", function (assert) {\n    assert.expect(2);\n    jQuery(\"body\").append(\"<div id='fractions'></div>\");\n    var result,\n      expected = {\n        \"top\": 1000,\n        \"left\": 1000\n      },\n      div = jQuery(\"#fractions\");\n    div.css({\n      \"position\": \"absolute\",\n      \"left\": \"1000.7432222px\",\n      \"top\": \"1000.532325px\",\n      \"width\": 100,\n      \"height\": 100\n    });\n    div.offset(expected);\n    result = div.offset();\n\n    // Support: Chrome <=45 - 73+\n    // In recent Chrome these values differ a little.\n    assert.ok(Math.abs(result.top - expected.top) < 0.25, \"Check top within 0.25 of expected\");\n    assert.ok(Math.abs(result.left - expected.left) < 0.25, \"Check left within 0.25 of expected\");\n    div.remove();\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"iframe scrollTop/Left (see gh-1945)","suites":["offset"],"line":927,"code":"  QUnit.test(\"iframe scrollTop/Left (see gh-1945)\", function (assert) {\n    assert.expect(2);\n    var ifDoc = jQuery(\"#iframe\")[0].contentDocument;\n\n    // Support: iOS <=8 - 12+\n    // Mobile Safari resizes the iframe by its content meaning it's not possible to scroll\n    // the iframe but only its parent element.\n    if (/iphone os|ipad/i.test(navigator.userAgent)) {\n      assert.equal(true, true, \"Can't scroll iframes in this environment\");\n      assert.equal(true, true, \"Can't scroll iframes in this environment\");\n    } else {\n      // Tests scrollTop/Left with iframes\n      jQuery(\"#iframe\").css(\"width\", \"50px\").css(\"height\", \"50px\");\n      ifDoc.write(\"<div style='width: 1000px; height: 1000px;'></div>\");\n      jQuery(ifDoc).scrollTop(200);\n      jQuery(ifDoc).scrollLeft(500);\n      assert.equal(jQuery(ifDoc).scrollTop(), 200, \"$($('#iframe')[0].contentDocument).scrollTop()\");\n      assert.equal(jQuery(ifDoc).scrollLeft(), 500, \"$($('#iframe')[0].contentDocument).scrollLeft()\");\n    }\n  });","file":"unit/offset.js","skipped":false,"dir":"test"},{"name":"queue() with other types","suites":["queue"],"line":8,"code":"  QUnit.test(\"queue() with other types\", function (assert) {\n    var done = assert.async(2);\n    assert.expect(14);\n    var $div = jQuery({}),\n      counter = 0;\n    $div.promise(\"foo\").done(function () {\n      assert.equal(counter, 0, \"Deferred for collection with no queue is automatically resolved\");\n    });\n    $div.queue(\"foo\", function () {\n      assert.equal(++counter, 1, \"Dequeuing\");\n      jQuery.dequeue(this, \"foo\");\n    }).queue(\"foo\", function () {\n      assert.equal(++counter, 2, \"Dequeuing\");\n      jQuery(this).dequeue(\"foo\");\n    }).queue(\"foo\", function () {\n      assert.equal(++counter, 3, \"Dequeuing\");\n    }).queue(\"foo\", function () {\n      assert.equal(++counter, 4, \"Dequeuing\");\n    });\n    $div.promise(\"foo\").done(function () {\n      assert.equal(counter, 4, \"Testing previous call to dequeue in deferred\");\n      done();\n    });\n    assert.equal($div.queue(\"foo\").length, 4, \"Testing queue length\");\n    assert.equal($div.queue(\"foo\", undefined).queue(\"foo\").length, 4, \".queue('name',undefined) does nothing but is chainable (trac-5571)\");\n    $div.dequeue(\"foo\");\n    assert.equal(counter, 3, \"Testing previous call to dequeue\");\n    assert.equal($div.queue(\"foo\").length, 1, \"Testing queue length\");\n    $div.dequeue(\"foo\");\n    assert.equal(counter, 4, \"Testing previous call to dequeue\");\n    assert.equal($div.queue(\"foo\").length, 0, \"Testing queue length\");\n    $div.dequeue(\"foo\");\n    assert.equal(counter, 4, \"Testing previous call to dequeue\");\n    assert.equal($div.queue(\"foo\").length, 0, \"Testing queue length\");\n    done();\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"queue(name) passes in the next item in the queue as a parameter","suites":["queue"],"line":44,"code":"  QUnit.test(\"queue(name) passes in the next item in the queue as a parameter\", function (assert) {\n    assert.expect(2);\n    var div = jQuery({}),\n      counter = 0;\n    div.queue(\"foo\", function (next) {\n      assert.equal(++counter, 1, \"Dequeueing\");\n      next();\n    }).queue(\"foo\", function (next) {\n      assert.equal(++counter, 2, \"Next was called\");\n      next();\n    }).queue(\"bar\", function () {\n      assert.equal(++counter, 3, \"Other queues are not triggered by next()\");\n    });\n    div.dequeue(\"foo\");\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"queue() passes in the next item in the queue as a parameter to fx queues","suites":["queue"],"line":59,"code":"  QUnit.test(\"queue() passes in the next item in the queue as a parameter to fx queues\", function (assert) {\n    var done = assert.async();\n    assert.expect(3);\n    var div = jQuery({}),\n      counter = 0;\n    div.queue(function (next) {\n      assert.equal(++counter, 1, \"Dequeueing\");\n      setTimeout(function () {\n        next();\n      }, 500);\n    }).queue(function (next) {\n      assert.equal(++counter, 2, \"Next was called\");\n      next();\n    }).queue(\"bar\", function () {\n      assert.equal(++counter, 3, \"Other queues are not triggered by next()\");\n    });\n    jQuery.when(div.promise(\"fx\"), div).done(function () {\n      assert.equal(counter, 2, \"Deferreds resolved\");\n      done();\n    });\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"callbacks keep their place in the queue","suites":["queue"],"line":80,"code":"  QUnit.test(\"callbacks keep their place in the queue\", function (assert) {\n    var done = assert.async();\n    assert.expect(5);\n    var div = jQuery(\"<div>\"),\n      counter = 0;\n    div.queue(function (next) {\n      assert.equal(++counter, 1, \"Queue/callback order: first called\");\n      setTimeout(next, 200);\n    }).delay(100).queue(function (next) {\n      assert.equal(++counter, 2, \"Queue/callback order: second called\");\n      jQuery(this).delay(100).queue(function (next) {\n        assert.equal(++counter, 4, \"Queue/callback order: fourth called\");\n        next();\n      });\n      next();\n    }).queue(function (next) {\n      assert.equal(++counter, 3, \"Queue/callback order: third called\");\n      next();\n    });\n    div.promise(\"fx\").done(function () {\n      assert.equal(counter, 4, \"Deferreds resolved\");\n      done();\n    });\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"jQuery.queue should return array while manipulating the queue","suites":["queue"],"line":104,"code":"  QUnit.test(\"jQuery.queue should return array while manipulating the queue\", function (assert) {\n    assert.expect(1);\n    var div = document.createElement(\"div\");\n    assert.ok(Array.isArray(jQuery.queue(div, \"fx\", jQuery.noop)), \"jQuery.queue should return an array while manipulating the queue\");\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"delay()","suites":["queue"],"line":109,"code":"  QUnit.test(\"delay()\", function (assert) {\n    var done = assert.async();\n    assert.expect(2);\n    var foo = jQuery({}),\n      run = 0;\n    foo.delay(100).queue(function () {\n      run = 1;\n      assert.ok(true, \"The function was dequeued.\");\n      done();\n    });\n    assert.equal(run, 0, \"The delay delayed the next function from running.\");\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"clearQueue(name) clears the queue","suites":["queue"],"line":121,"code":"  QUnit.test(\"clearQueue(name) clears the queue\", function (assert) {\n    var done = assert.async(2);\n    assert.expect(2);\n    var div = jQuery({}),\n      counter = 0;\n    div.queue(\"foo\", function (next) {\n      counter++;\n      jQuery(this).clearQueue(\"foo\");\n      next();\n    }).queue(\"foo\", function () {\n      counter++;\n    });\n    div.promise(\"foo\").done(function () {\n      assert.ok(true, \"dequeue resolves the deferred\");\n      done();\n    });\n    div.dequeue(\"foo\");\n    assert.equal(counter, 1, \"the queue was cleared\");\n    done();\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"clearQueue() clears the fx queue","suites":["queue"],"line":141,"code":"  QUnit.test(\"clearQueue() clears the fx queue\", function (assert) {\n    assert.expect(1);\n    var div = jQuery({}),\n      counter = 0;\n    div.queue(function (next) {\n      counter++;\n      var self = this;\n      setTimeout(function () {\n        jQuery(self).clearQueue();\n        next();\n      }, 50);\n    }).queue(function () {\n      counter++;\n    });\n    assert.equal(counter, 1, \"the queue was cleared\");\n    div.removeData();\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"fn.promise() - called when fx queue is empty","suites":["queue"],"line":158,"code":"  QUnit.test(\"fn.promise() - called when fx queue is empty\", function (assert) {\n    assert.expect(3);\n    var foo = jQuery(\"#foo\").clone().addBack(),\n      promised = false,\n      done = assert.async();\n    foo.queue(function (next) {\n      // called twice!\n      assert.ok(!promised, \"Promised hasn't been called\");\n      setTimeout(next, 10);\n    });\n    foo.promise().done(function () {\n      assert.ok(promised = true, \"Promised\");\n      done();\n    });\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"fn.promise( \"queue\" ) - called whenever last queue function is dequeued","suites":["queue"],"line":173,"code":"  QUnit.test(\"fn.promise( \\\"queue\\\" ) - called whenever last queue function is dequeued\", function (assert) {\n    assert.expect(5);\n    var done = assert.async();\n    var foo = jQuery(\"#foo\"),\n      test;\n    foo.promise(\"queue\").done(function () {\n      assert.strictEqual(test, undefined, \"called immediately when queue was already empty\");\n    });\n    test = 1;\n    foo.queue(\"queue\", function (next) {\n      assert.strictEqual(test++, 1, \"step one\");\n      setTimeout(next, 0);\n    }).queue(\"queue\", function (next) {\n      assert.strictEqual(test++, 2, \"step two\");\n      setTimeout(function () {\n        next();\n        assert.strictEqual(test++, 4, \"step four\");\n        done();\n      }, 10);\n    }).promise(\"queue\").done(function () {\n      assert.strictEqual(test++, 3, \"step three\");\n    });\n    foo.dequeue(\"queue\");\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"fn.promise( \"queue\" ) - waits for animation to complete before resolving","suites":["queue"],"line":198,"code":"    QUnit.test(\"fn.promise( \\\"queue\\\" ) - waits for animation to complete before resolving\", function (assert) {\n      assert.expect(2);\n      var done = assert.async();\n      var foo = jQuery(\"#foo\"),\n        test = 1;\n      foo.animate({\n        top: 100\n      }, {\n        duration: 1,\n        queue: \"queue\",\n        complete: function () {\n          assert.strictEqual(test++, 1, \"step one\");\n        }\n      }).dequeue(\"queue\");\n      foo.promise(\"queue\").done(function () {\n        assert.strictEqual(test++, 2, \"step two\");\n        done();\n      });\n    });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":".promise(obj)","suites":["queue"],"line":218,"code":"  QUnit.test(\".promise(obj)\", function (assert) {\n    assert.expect(2);\n    var obj = {},\n      promise = jQuery(\"#foo\").promise(\"promise\", obj);\n    assert.ok(typeof promise.promise === \"function\", \".promise(type, obj) returns a promise\");\n    assert.strictEqual(promise, obj, \".promise(type, obj) returns obj\");\n  });","file":"unit/queue.js","skipped":false,"dir":"test"},{"name":"jQuery.isReady","suites":["ready"],"line":11,"code":"  QUnit.test(\"jQuery.isReady\", function (assert) {\n    assert.expect(2);\n    assert.equal(notYetReady, true, \"jQuery.isReady should not be true before DOM ready\");\n    assert.equal(jQuery.isReady, true, \"jQuery.isReady should be true once DOM is ready\");\n  });","file":"unit/ready.js","skipped":false,"dir":"test"},{"name":"jQuery ready","suites":["ready"],"line":56,"code":"  QUnit.test(\"jQuery ready\", function (assert) {\n    assert.expect(10);\n    assert.ok(noEarlyExecution, \"Handlers bound to DOM ready should not execute before DOM ready\");\n\n    // Ensure execution order.\n    assert.deepEqual(order, [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"Bound DOM ready handlers should execute in bind order\");\n\n    // Ensure handler argument is correct.\n    assert.equal(args.a, jQuery, \"Argument passed to fn in jQuery( fn ) should be jQuery\");\n    assert.equal(args.b, jQuery, \"Argument passed to fn in jQuery(document).ready( fn ) should be jQuery\");\n    order = [];\n\n    // Now that the ready event has fired, again bind to the ready event.\n    // These ready handlers should execute asynchronously.\n    var done = assert.async();\n    jQuery(makeHandler(\"g\"));\n    jQuery(document).ready(makeHandler(\"h\"));\n    jQuery.ready.then(makeHandler(\"i\"));\n    window.setTimeout(function () {\n      assert.equal(order.shift(), \"g\", \"Event handler should execute immediately, but async\");\n      assert.equal(args.g, jQuery, \"Argument passed to fn in jQuery( fn ) should be jQuery\");\n      assert.equal(order.shift(), \"h\", \"Event handler should execute immediately, but async\");\n      assert.equal(args.h, jQuery, \"Argument passed to fn in jQuery(document).ready( fn ) should be jQuery\");\n      assert.equal(order.shift(), \"i\", \"Event handler should execute immediately, but async\");\n      assert.equal(args.h, jQuery, \"Argument passed to fn in jQuery.ready.then( fn ) should be jQuery\");\n      done();\n    });\n  });","file":"unit/ready.js","skipped":false,"dir":"test"},{"name":"Promise.resolve(jQuery.ready)","suites":["ready"],"line":96,"code":"  QUnit.test(\"Promise.resolve(jQuery.ready)\", function (assert) {\n    assert.expect(2);\n    var done = assert.async(2);\n    promisified.then(function () {\n      assert.ok(jQuery.isReady, \"Native promised resolved\");\n      done();\n    });\n    Promise.resolve(jQuery.ready).then(function () {\n      assert.ok(jQuery.isReady, \"Native promised resolved\");\n      done();\n    });\n  });","file":"unit/ready.js","skipped":false,"dir":"test"},{"name":"Error in ready callback does not halt all future executions (gh-1823)","suites":["ready"],"line":108,"code":"  QUnit.test(\"Error in ready callback does not halt all future executions (gh-1823)\", function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    jQuery(function () {\n      throwError(3);\n    });\n    jQuery(function () {\n      assert.ok(true, \"Subsequent handler called\");\n      done();\n    });\n  });","file":"unit/ready.js","skipped":false,"dir":"test"},{"name":"empty","suites":["selector"],"line":11,"code":"QUnit.test(\"empty\", function (assert) {\n  assert.expect(5);\n  var form;\n  assert.strictEqual(jQuery(\"\").length, 0, \"Empty selector returns an empty array\");\n  assert.deepEqual(jQuery(\"div\", document.createTextNode(\"\")).get(), [], \"Text element as context fails silently\");\n  form = document.getElementById(\"form\");\n  assert.ok(!jQuery(form).is(\"\"), \"Empty string passed to .is() does not match\");\n  if (QUnit.jQuerySelectors) {\n    assert.equal(jQuery(\" \").length, 0, \"Empty selector returns an empty array\");\n    assert.equal(jQuery(\"\\t\").length, 0, \"Empty selector returns an empty array\");\n  } else {\n    assert.ok(\"skip\", \"whitespace-only selector not supported in selector-native\");\n    assert.ok(\"skip\", \"whitespace-only selector not supported in selector-native\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"star","suites":["selector"],"line":26,"code":"QUnit.test(\"star\", function (assert) {\n  assert.expect(2);\n  var good, i;\n  var all = jQuery(\"*\");\n  assert.ok(all.length >= 30, \"Select all\");\n  good = true;\n  for (i = 0; i < all.length; i++) {\n    if (all[i].nodeType === 8) {\n      good = false;\n    }\n  }\n  assert.ok(good, \"Select all elements, no comment nodes\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"element","suites":["selector"],"line":39,"code":"QUnit.test(\"element\", function (assert) {\n  assert.expect(37);\n  var i, lengthtest, siblingTest, html;\n  var fixture = document.getElementById(\"qunit-fixture\");\n  assert.deepEqual(jQuery(\"p\", fixture).get(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Finding elements with a Node context.\");\n  assert.deepEqual(jQuery(\"p\", \"#qunit-fixture\").get(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Finding elements with a selector context.\");\n  assert.deepEqual(jQuery(\"p\", jQuery(\"#qunit-fixture\")).get(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Finding elements with a jQuery object context.\");\n  assert.deepEqual(jQuery(\"#qunit-fixture\").find(\"p\").get(), q(\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"), \"Finding elements with a context via .find().\");\n  assert.ok(jQuery(\"#length\").length, \"<input name=\\\"length\\\"> cannot be found under IE, see trac-945\");\n  assert.ok(jQuery(\"#lengthtest input\").length, \"<input name=\\\"length\\\"> cannot be found under IE, see trac-945\");\n\n  // trac-7533\n  assert.equal(jQuery(\"<div id=\\\"A'B~C.D[E]\\\"><p>foo</p></div>\").find(\"p\").length, 1, \"Find where context root is a node and has an ID with CSS3 meta characters\");\n  assert.equal(jQuery(\"\").length, 0, \"Empty selector returns an empty array\");\n  assert.deepEqual(jQuery(\"div\", document.createTextNode(\"\")).get(), [], \"Text element as context fails silently\");\n  assert.t(\"Element Selector\", \"html\", [\"html\"]);\n  assert.t(\"Element Selector\", \"body\", [\"body\"]);\n  assert.t(\"Element Selector\", \"#qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Leading space\", \" #qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Leading tab\", \"\\t#qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Leading carriage return\", \"\\r#qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Leading line feed\", \"\\n#qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Leading form feed\", \"\\f#qunit-fixture p\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Trailing space\", \"#qunit-fixture p \", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Trailing tab\", \"#qunit-fixture p\\t\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Trailing carriage return\", \"#qunit-fixture p\\r\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Trailing line feed\", \"#qunit-fixture p\\n\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Trailing form feed\", \"#qunit-fixture p\\f\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.deepEqual(jQuery(jQuery(\"div ol\")).filter(\"#qunit-fixture *\").get(), q(\"empty\", \"listWithTabIndex\"), \"Parent Element\");\n  assert.deepEqual(jQuery(jQuery(\"div\\tol\")).filter(\"#qunit-fixture *\").get(), q(\"empty\", \"listWithTabIndex\"), \"Parent Element (non-space descendant combinator)\");\n\n  // Check for unique-ness and sort order\n  assert.deepEqual(jQuery(\"p, div p\"), jQuery(\"p\"), \"Check for duplicates: p, div p\");\n  jQuery(\"<h1 id='h1'></h1><h2 id='h2'></h2><h2 id='h2-2'></h2>\").prependTo(\"#qunit-fixture\");\n  assert.t(\"Checking sort order\", \"#qunit-fixture h2, #qunit-fixture h1\", [\"h1\", \"h2\", \"h2-2\"]);\n  if (QUnit.jQuerySelectorsPos) {\n    assert.t(\"Checking sort order\", \"#qunit-fixture h2:first, #qunit-fixture h1:first\", [\"h1\", \"h2\"]);\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n  assert.t(\"Checking sort order\", \"#qunit-fixture p, #qunit-fixture p a\", [\"firstp\", \"simon1\", \"ap\", \"google\", \"groups\", \"anchor1\", \"mark\", \"sndp\", \"en\", \"yahoo\", \"sap\", \"anchor2\", \"simon\", \"first\"]);\n\n  // Test Conflict ID\n  lengthtest = document.getElementById(\"lengthtest\");\n  assert.deepEqual(jQuery(\"#idTest\", lengthtest).get(), q(\"idTest\"), \"Finding element with id of ID.\");\n  assert.deepEqual(jQuery(\"[name='id']\", lengthtest).get(), q(\"idTest\"), \"Finding element with id of ID.\");\n  assert.deepEqual(jQuery(\"input[id='idTest']\", lengthtest).get(), q(\"idTest\"), \"Finding elements with id of ID.\");\n  if (QUnit.jQuerySelectors) {\n    siblingTest = document.getElementById(\"siblingTest\");\n    assert.deepEqual(jQuery(\"div em\", siblingTest).get(), [], \"Element-rooted QSA does not select based on document context\");\n    assert.deepEqual(jQuery(\"div em, div em, div em:not(div em)\", siblingTest).get(), [], \"Element-rooted QSA does not select based on document context\");\n    assert.deepEqual(jQuery(\"div em, em\\\\,\", siblingTest).get(), [], \"Escaped commas do not get treated with an id in element-rooted QSA\");\n  } else {\n    assert.ok(\"skip\", \"Element-rooted QSA behavior different in selector-native\");\n    assert.ok(\"skip\", \"Element-rooted QSA behavior different in selector-native\");\n    assert.ok(\"skip\", \"Element-rooted QSA behavior different in selector-native\");\n  }\n  html = \"\";\n  for (i = 0; i < 100; i++) {\n    html = \"<div>\" + html + \"</div>\";\n  }\n  html = jQuery(html).appendTo(document.body);\n  assert.ok(!!jQuery(\"body div div div\").length, \"No stack or performance problems with large amounts of descendants\");\n  assert.ok(!!jQuery(\"body>div div div\").length, \"No stack or performance problems with large amounts of descendants\");\n  html.remove();\n\n  // Real use case would be using .watch in browsers with window.watch\n  // (see https://github.com/jquery/sizzle/pull/157)\n  q(\"qunit-fixture\")[0].appendChild(document.createElement(\"toString\")).id = \"toString\";\n  assert.t(\"Element name matches Object.prototype property\", \"toString#toString\", [\"toString\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"XML Document Selectors","suites":["selector"],"line":110,"code":"QUnit.test(\"XML Document Selectors\", function (assert) {\n  assert.expect(11);\n  var xml = createWithFriesXML();\n  assert.equal(jQuery(\"foo_bar\", xml).length, 1, \"Element Selector with underscore\");\n  assert.equal(jQuery(\".component\", xml).length, 1, \"Class selector\");\n  assert.equal(jQuery(\"[class*=component]\", xml).length, 1, \"Attribute selector for class\");\n  assert.equal(jQuery(\"property[name=prop2]\", xml).length, 1, \"Attribute selector with name\");\n  assert.equal(jQuery(\"[name=prop2]\", xml).length, 1, \"Attribute selector with name\");\n  assert.equal(jQuery(\"#seite1\", xml).length, 1, \"Attribute selector with ID\");\n  assert.equal(jQuery(\"component#seite1\", xml).length, 1, \"Attribute selector with ID\");\n  assert.equal(jQuery(\"component\", xml).filter(\"#seite1\").length, 1, \"Attribute selector filter with ID\");\n  assert.equal(jQuery(\"meta property thing\", xml).length, 2, \"Descendent selector and dir caching\");\n  if (QUnit.jQuerySelectors) {\n    assert.ok(jQuery(xml.lastChild).is(\"soap\\\\:Envelope\"), \"Check for namespaced element\");\n    xml = jQuery.parseXML(\"<?xml version='1.0' encoding='UTF-8'?><root><elem id='1'/></root>\");\n    assert.equal(jQuery(\"elem:not(:has(*))\", xml).length, 1, \"Non-qSA path correctly handles numeric ids (jQuery trac-14142)\");\n  } else {\n    assert.ok(\"skip\", \"namespaced elements not matching correctly in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"broken selectors throw","suites":["selector"],"line":131,"code":"QUnit.test(\"broken selectors throw\", function (assert) {\n  assert.expect(33);\n  function broken(name, selector) {\n    assert.throws(function () {\n      jQuery(selector);\n    }, name + \": \" + selector);\n  }\n  broken(\"Broken Selector\", \"[\");\n  broken(\"Broken Selector\", \"(\");\n  broken(\"Broken Selector\", \"{\");\n  broken(\"Broken Selector\", \"<\");\n  broken(\"Broken Selector\", \"()\");\n  broken(\"Broken Selector\", \"<>\");\n  broken(\"Broken Selector\", \"{}\");\n  broken(\"Broken Selector\", \",\");\n  broken(\"Broken Selector\", \",a\");\n  broken(\"Broken Selector\", \"a,\");\n  broken(\"Post-comma invalid selector\", \"*,:x\");\n  broken(\"Identifier with bad escape\", \"foo\\\\\\fbaz\");\n  broken(\"Broken Selector\", \"[id=012345678901234567890123456789\");\n  broken(\"Doesn't exist\", \":visble\");\n  broken(\"Nth-child\", \":nth-child\");\n  broken(\"Nth-child\", \":nth-child(-)\");\n  broken(\"Nth-child\", \":nth-child(asdf)\", []);\n  broken(\"Nth-child\", \":nth-child(2n+-0)\");\n  broken(\"Nth-child\", \":nth-child(2+0)\");\n  broken(\"Nth-child\", \":nth-child(- 1n)\");\n  broken(\"Nth-child\", \":nth-child(-1 n)\");\n  broken(\"First-child\", \":first-child(n)\");\n  broken(\"Last-child\", \":last-child(n)\");\n  broken(\"Only-child\", \":only-child(n)\");\n  broken(\"Nth-last-last-child\", \":nth-last-last-child(1)\");\n  broken(\"First-last-child\", \":first-last-child\");\n  broken(\"Last-last-child\", \":last-last-child\");\n  broken(\"Only-last-child\", \":only-last-child\");\n\n  // Make sure attribute value quoting works correctly. See: trac-6093\n  jQuery(\"<input type='hidden' value='2' name='foo.baz' id='attrbad1'/>\" + \"<input type='hidden' value='2' name='foo[baz]' id='attrbad2'/>\").appendTo(\"#qunit-fixture\");\n  broken(\"Attribute equals non-value\", \"input[name=]\");\n  broken(\"Attribute equals unquoted non-identifier\", \"input[name=foo.baz]\");\n  broken(\"Attribute equals unquoted non-identifier\", \"input[name=foo[baz]]\");\n  broken(\"Attribute equals bad string\", \"input[name=''double-quoted'']\");\n  broken(\"Attribute equals bad string\", \"input[name='apostrophe'd']\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"id","suites":["selector"],"line":175,"code":"QUnit.test(\"id\", function (assert) {\n  assert.expect(34);\n  var fiddle, a;\n  assert.t(\"ID Selector\", \"#body\", [\"body\"]);\n  assert.t(\"ID Selector w/ Element\", \"body#body\", [\"body\"]);\n  assert.t(\"ID Selector w/ Element\", \"ul#first\", []);\n  assert.t(\"ID selector with existing ID descendant\", \"#firstp #simon1\", [\"simon1\"]);\n  assert.t(\"ID selector with non-existent descendant\", \"#firstp #foobar\", []);\n  assert.t(\"ID selector using UTF8\", \"#台北Táiběi\", [\"台北Táiběi\"]);\n  assert.t(\"Multiple ID selectors using UTF8\", \"#台北Táiběi, #台北\", [\"台北Táiběi\", \"台北\"]);\n  assert.t(\"Descendant ID selector using UTF8\", \"div #台北\", [\"台北\"]);\n  assert.t(\"Child ID selector using UTF8\", \"form > #台北\", [\"台北\"]);\n  assert.t(\"Escaped ID\", \"#foo\\\\:bar\", [\"foo:bar\"]);\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Escaped ID with descendant\", \"#foo\\\\:bar span:not(:input)\", [\"foo_descendant\"]);\n  } else {\n    assert.ok(\"skip\", \":input not supported in selector-native\");\n  }\n  assert.t(\"Escaped ID\", \"#test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  assert.t(\"Descendant escaped ID\", \"div #foo\\\\:bar\", [\"foo:bar\"]);\n  assert.t(\"Descendant escaped ID\", \"div #test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  assert.t(\"Child escaped ID\", \"form > #foo\\\\:bar\", [\"foo:bar\"]);\n  assert.t(\"Child escaped ID\", \"form > #test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  fiddle = jQuery(\"<div id='fiddle\\\\Foo'><span id='fiddleSpan'></span></div>\").appendTo(\"#qunit-fixture\");\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"> span\", jQuery(\"#fiddle\\\\\\\\Foo\")[0]).get(), q([\"fiddleSpan\"]), \"Escaped ID as context\");\n  } else {\n    assert.ok(\"skip\", \"leading > not supported in selector-native\");\n  }\n  fiddle.remove();\n  assert.t(\"ID Selector, child ID present\", \"#form > #radio1\", [\"radio1\"]); // bug trac-267\n  assert.t(\"ID Selector, not an ancestor ID\", \"#form #first\", []);\n  assert.t(\"ID Selector, not a child ID\", \"#form > #option1a\", []);\n  assert.t(\"All Children of ID\", \"#foo > *\", [\"sndp\", \"en\", \"sap\"]);\n  assert.t(\"All Children of ID with no children\", \"#firstUL > *\", []);\n  assert.equal(jQuery(\"#tName1\")[0].id, \"tName1\", \"ID selector with same value for a name attribute\");\n  assert.t(\"ID selector non-existing but name attribute on an A tag\", \"#tName2\", []);\n  assert.t(\"Leading ID selector non-existing but name attribute on an A tag\", \"#tName2 span\", []);\n  assert.t(\"Leading ID selector existing, retrieving the child\", \"#tName1 span\", [\"tName1-span\"]);\n  assert.equal(jQuery(\"div > div #tName1\")[0].id, jQuery(\"#tName1-span\")[0].parentNode.id, \"Ending with ID\");\n  a = jQuery(\"<a id='backslash\\\\foo'></a>\").appendTo(\"#qunit-fixture\");\n  assert.t(\"ID Selector contains backslash\", \"#backslash\\\\\\\\foo\", [\"backslash\\\\foo\"]);\n  a.remove();\n  assert.t(\"ID Selector on Form with an input that has a name of 'id'\", \"#lengthtest\", [\"lengthtest\"]);\n  assert.t(\"ID selector with non-existent ancestor\", \"#asdfasdf #foobar\", []); // bug trac-986\n\n  assert.deepEqual(jQuery(\"div#form\", document.body).get(), [], \"ID selector within the context of another element\");\n  assert.t(\"Underscore ID\", \"#types_all\", [\"types_all\"]);\n  assert.t(\"Dash ID\", \"#qunit-fixture\", [\"qunit-fixture\"]);\n  assert.t(\"ID with weird characters in it\", \"#name\\\\+value\", [\"name+value\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"class","suites":["selector"],"line":226,"code":"QUnit.test(\"class\", function (assert) {\n  assert.expect(32);\n  assert.deepEqual(jQuery(\".blog\", document.getElementsByTagName(\"p\")).get(), q(\"mark\", \"simon\"), \"Finding elements with a context.\");\n  assert.deepEqual(jQuery(\".blog\", \"p\").get(), q(\"mark\", \"simon\"), \"Finding elements with a context.\");\n  assert.deepEqual(jQuery(\".blog\", jQuery(\"p\")).get(), q(\"mark\", \"simon\"), \"Finding elements with a context.\");\n  assert.deepEqual(jQuery(\"p\").find(\".blog\").get(), q(\"mark\", \"simon\"), \"Finding elements with a context.\");\n  assert.t(\"Class Selector\", \".blog\", [\"mark\", \"simon\"]);\n  assert.t(\"Class Selector\", \".GROUPS\", [\"groups\"]);\n  assert.t(\"Class Selector\", \".blog.link\", [\"simon\"]);\n  assert.t(\"Class Selector w/ Element\", \"a.blog\", [\"mark\", \"simon\"]);\n  assert.t(\"Parent Class Selector\", \"p .blog\", [\"mark\", \"simon\"]);\n  assert.t(\"Class selector using UTF8\", \".台北Táiběi\", [\"utf8class1\"]);\n  assert.t(\"Class selector using UTF8\", \".台北\", [\"utf8class1\", \"utf8class2\"]);\n  assert.t(\"Class selector using UTF8\", \".台北Táiběi.台北\", [\"utf8class1\"]);\n  assert.t(\"Class selector using UTF8\", \".台北Táiběi, .台北\", [\"utf8class1\", \"utf8class2\"]);\n  assert.t(\"Descendant class selector using UTF8\", \"div .台北Táiběi\", [\"utf8class1\"]);\n  assert.t(\"Child class selector using UTF8\", \"form > .台北Táiběi\", [\"utf8class1\"]);\n  assert.t(\"Escaped Class\", \".foo\\\\:bar\", [\"foo:bar\"]);\n  assert.t(\"Escaped Class\", \".test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  assert.t(\"Descendant escaped Class\", \"div .foo\\\\:bar\", [\"foo:bar\"]);\n  assert.t(\"Descendant escaped Class\", \"div .test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  assert.t(\"Child escaped Class\", \"form > .foo\\\\:bar\", [\"foo:bar\"]);\n  assert.t(\"Child escaped Class\", \"form > .test\\\\.foo\\\\[5\\\\]bar\", [\"test.foo[5]bar\"]);\n  var div = document.createElement(\"div\");\n  div.innerHTML = \"<div class='test e'></div><div class='test'></div>\";\n  assert.deepEqual(jQuery(\".e\", div).get(), [div.firstChild], \"Finding a second class.\");\n  div.lastChild.className = \"e\";\n  assert.ok(!jQuery(div).is(\".null\"), \".null does not match an element with no class\");\n  assert.ok(!jQuery(div.firstChild).is(\".null div\"), \".null does not match an element with no class\");\n  div.className = \"null\";\n  assert.ok(jQuery(div).is(\".null\"), \".null matches element with class 'null'\");\n  assert.ok(jQuery(div.firstChild).is(\".null div\"), \"caching system respects DOM changes\");\n  assert.ok(!jQuery(document).is(\".foo\"), \"testing class on document doesn't error\");\n  assert.ok(!jQuery(window).is(\".foo\"), \"testing class on window doesn't error\");\n  assert.deepEqual(jQuery(\".e\", div).get(), [div.firstChild, div.lastChild], \"Finding a modified class.\");\n  div.lastChild.className += \" hasOwnProperty toString\";\n  assert.deepEqual(jQuery(\".e.hasOwnProperty.toString\", div).get(), [div.lastChild], \"Classes match Object.prototype properties\");\n  div = jQuery(\"<div><svg width='200' height='250' version='1.1'\" + \" xmlns='http://www.w3.org/2000/svg'><rect x='10' y='10' width='30' height='30'\" + \"class='foo'></rect></svg></div>\")[0];\n  assert.equal(jQuery(\".foo\", div).length, 1, \"Class selector against SVG container\");\n  assert.equal(jQuery(\".foo\", div.firstChild).length, 1, \"Class selector directly against SVG\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"name","suites":["selector"],"line":267,"code":"QUnit.test(\"name\", function (assert) {\n  assert.expect(14);\n  var form;\n  assert.t(\"Name selector\", \"input[name=action]\", [\"text1\"]);\n  assert.t(\"Name selector with single quotes\", \"input[name='action']\", [\"text1\"]);\n  assert.t(\"Name selector with double quotes\", \"input[name=\\\"action\\\"]\", [\"text1\"]);\n  assert.t(\"Name selector non-input\", \"[name=example]\", [\"name-is-example\"]);\n  assert.t(\"Name selector non-input\", \"[name=div]\", [\"name-is-div\"]);\n  assert.t(\"Name selector non-input\", \"*[name=iframe]\", [\"iframe\"]);\n  assert.t(\"Name selector for grouped input\", \"input[name='types[]']\", [\"types_all\", \"types_anime\", \"types_movie\"]);\n  form = document.getElementById(\"form\");\n  assert.deepEqual(jQuery(\"input[name=action]\", form).get(), q(\"text1\"), \"Name selector within the context of another element\");\n  assert.deepEqual(jQuery(\"input[name='foo[bar]']\", form).get(), q(\"hidden2\"), \"Name selector for grouped form element within the context of another element\");\n  form = jQuery(\"<form><input name='id'/></form>\").appendTo(\"body\");\n  assert.equal(jQuery(\"input\", form[0]).length, 1, \"Make sure that rooted queries on forms (with possible expandos) work.\");\n  form.remove();\n  assert.t(\"Find elements that have similar IDs\", \"[name=tName1]\", [\"tName1ID\"]);\n  assert.t(\"Find elements that have similar IDs\", \"[name=tName2]\", [\"tName2ID\"]);\n  assert.t(\"Find elements that have similar IDs\", \"#tName2ID\", [\"tName2ID\"]);\n  assert.t(\"Case-sensitivity\", \"[name=tname1]\", []);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"comma-separated","suites":["selector"],"line":288,"code":"QUnit.test(\"comma-separated\", function (assert) {\n  assert.expect(10);\n  var fixture = jQuery(\"<div><h2><span></span></h2><div><p><span></span></p><p></p></div></div>\");\n  assert.equal(fixture.find(\"h2, div p\").filter(\"p\").length, 2, \"has to find two <p>\");\n  assert.equal(fixture.find(\"h2, div p\").filter(\"h2\").length, 1, \"has to find one <h2>\");\n  assert.equal(fixture.find(\"h2 , div p\").filter(\"p\").length, 2, \"has to find two <p>\");\n  assert.equal(fixture.find(\"h2 , div p\").filter(\"h2\").length, 1, \"has to find one <h2>\");\n  assert.equal(fixture.find(\"h2 ,div p\").filter(\"p\").length, 2, \"has to find two <p>\");\n  assert.equal(fixture.find(\"h2 ,div p\").filter(\"h2\").length, 1, \"has to find one <h2>\");\n  assert.equal(fixture.find(\"h2,div p\").filter(\"p\").length, 2, \"has to find two <p>\");\n  assert.equal(fixture.find(\"h2,div p\").filter(\"h2\").length, 1, \"has to find one <h2>\");\n  assert.equal(fixture.find(\"h2\\t,\\rdiv p\").filter(\"p\").length, 2, \"has to find two <p>\");\n  assert.equal(fixture.find(\"h2\\t,\\rdiv p\").filter(\"h2\").length, 1, \"has to find one <h2>\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"comma-separated, only supported natively (gh-5177)","suites":["selector"],"line":302,"code":"QUnit.test(\"comma-separated, only supported natively (gh-5177)\", function (assert) {\n  assert.expect(5);\n  var fixture = jQuery(\"<div><input/><span></span></div>\");\n  fixture.appendTo(\"#qunit-fixture\");\n  assert.equal(fixture.find(\"input:valid, span\").length, 2, \"has to find two elements\");\n  assert.equal(fixture.find(\"input:valid , span\").length, 2, \"has to find two elements\");\n  assert.equal(fixture.find(\"input:valid ,span\").length, 2, \"has to find two elements\");\n  assert.equal(fixture.find(\"input:valid,span\").length, 2, \"has to find two elements\");\n  assert.equal(fixture.find(\"input:valid\\t,\\rspan\").length, 2, \"has to find two elements\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"child and adjacent","suites":["selector"],"line":312,"code":"QUnit.test(\"child and adjacent\", function (assert) {\n  assert.expect(43);\n  var siblingFirst, en, nothiddendiv;\n  assert.t(\"Child\", \"p > a\", [\"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\"]);\n  assert.t(\"Child minus leading whitespace\", \"p> a\", [\"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\"]);\n  assert.t(\"Child minus trailing whitespace\", \"p >a\", [\"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\"]);\n  assert.t(\"Child minus whitespace\", \"p>a\", [\"simon1\", \"google\", \"groups\", \"mark\", \"yahoo\", \"simon\"]);\n  assert.t(\"Child w/ Class\", \"p > a.blog\", [\"mark\", \"simon\"]);\n  assert.t(\"All Children\", \"code > *\", [\"anchor1\", \"anchor2\"]);\n  assert.selectInFixture(\"All Grandchildren\", \"p > * > *\", [\"anchor1\", \"anchor2\"]);\n  assert.t(\"Rooted tag adjacent\", \"#qunit-fixture a + a\", [\"groups\", \"tName2ID\"]);\n  assert.t(\"Rooted tag adjacent minus whitespace\", \"#qunit-fixture a+a\", [\"groups\", \"tName2ID\"]);\n  assert.t(\"Rooted tag adjacent minus leading whitespace\", \"#qunit-fixture a +a\", [\"groups\", \"tName2ID\"]);\n  assert.t(\"Rooted tag adjacent minus trailing whitespace\", \"#qunit-fixture a+ a\", [\"groups\", \"tName2ID\"]);\n  assert.t(\"Tag adjacent\", \"p + p\", [\"ap\", \"en\", \"sap\"]);\n  assert.t(\"#id adjacent\", \"#firstp + p\", [\"ap\"]);\n  assert.t(\"Tag#id adjacent\", \"p#firstp + p\", [\"ap\"]);\n  assert.t(\"Tag[attr] adjacent\", \"p[lang=en] + p\", [\"sap\"]);\n  assert.t(\"Tag.class adjacent\", \"a.GROUPS + code + a\", [\"mark\"]);\n  assert.t(\"Comma, Child, and Adjacent\", \"#qunit-fixture a + a, code > a\", [\"groups\", \"anchor1\", \"anchor2\", \"tName2ID\"]);\n  assert.t(\"Element Preceded By\", \"#qunit-fixture p ~ div\", [\"foo\", \"nothiddendiv\", \"moretests\", \"tabindex-tests\", \"liveHandlerOrder\", \"siblingTest\", \"fx-test-group\"]);\n  assert.t(\"Element Preceded By\", \"#first ~ div\", [\"moretests\", \"tabindex-tests\", \"liveHandlerOrder\", \"siblingTest\", \"fx-test-group\"]);\n  assert.t(\"Element Preceded By\", \"#groups ~ a\", [\"mark\"]);\n  assert.t(\"Element Preceded By\", \"#length ~ input\", [\"idTest\"]);\n  assert.t(\"Element Preceded By\", \"#siblingfirst ~ em\", [\"siblingnext\", \"siblingthird\"]);\n  assert.t(\"Element Preceded By (multiple)\", \"#siblingTest em ~ em ~ em ~ span\", [\"siblingspan\"]);\n  siblingFirst = document.getElementById(\"siblingfirst\");\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"+ em\", siblingFirst).get(), q(\"siblingnext\"), \"Element Directly Preceded By with a context.\");\n    assert.deepEqual(jQuery(\"~ em\", siblingFirst).get(), q(\"siblingnext\", \"siblingthird\"), \"Element Preceded By with a context.\");\n  } else {\n    assert.ok(\"skip\", \"leading + not supported in selector-native\");\n    assert.ok(\"skip\", \"leading ~ not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectorsPos) {\n    assert.deepEqual(jQuery(\"~ em:first\", siblingFirst).get(), q(\"siblingnext\"), \"Element Preceded By positional with a context.\");\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n  if (QUnit.jQuerySelectors) {\n    en = document.getElementById(\"en\");\n    assert.deepEqual(jQuery(\"+ p, a\", en).get(), q(\"yahoo\", \"sap\"), \"Compound selector with context, beginning with sibling test.\");\n    assert.deepEqual(jQuery(\"a, + p\", en).get(), q(\"yahoo\", \"sap\"), \"Compound selector with context, containing sibling test.\");\n  } else {\n    assert.ok(\"skip\", \"leading + not supported in selector-native\");\n    assert.ok(\"skip\", \"leading + not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Element Preceded By, Containing\", \"#liveHandlerOrder ~ div em:contains('1')\", [\"siblingfirst\"]);\n    assert.t(\"Combinators are not skipped when mixing general and specific\", \"#siblingTest > em:contains('x') + em ~ span\", []);\n  } else {\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectorsPos) {\n    assert.equal(jQuery(\"#listWithTabIndex li:eq(2) ~ li\").length, 1, \"Find by general sibling combinator (trac-8310)\");\n    nothiddendiv = document.getElementById(\"nothiddendiv\");\n    assert.deepEqual(jQuery(\"> :first\", nothiddendiv).get(), q(\"nothiddendivchild\"), \"Verify child context positional selector\");\n    assert.deepEqual(jQuery(\"> :eq(0)\", nothiddendiv).get(), q(\"nothiddendivchild\"), \"Verify child context positional selector\");\n    assert.deepEqual(jQuery(\"> *:first\", nothiddendiv).get(), q(\"nothiddendivchild\"), \"Verify child context positional selector\");\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n  assert.t(\"Multiple combinators selects all levels\", \"#siblingTest em *\", [\"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\"]);\n  assert.t(\"Multiple combinators selects all levels\", \"#siblingTest > em *\", [\"siblingchild\", \"siblinggrandchild\", \"siblinggreatgrandchild\"]);\n  assert.t(\"Multiple sibling combinators doesn't miss general siblings\", \"#siblingTest > em:first-child + em ~ span\", [\"siblingspan\"]);\n  assert.equal(jQuery(\"#listWithTabIndex\").length, 1, \"Parent div for next test is found via ID (trac-8310)\");\n  assert.equal(jQuery(\"#__sizzle__\").length, 0, \"Make sure the temporary id assigned by sizzle is cleared out (trac-8310)\");\n  assert.equal(jQuery(\"#listWithTabIndex\").length, 1, \"Parent div for previous test is still found via ID (trac-8310)\");\n  assert.t(\"Verify deep class selector\", \"div.blah > p > a\", []);\n  assert.t(\"No element deep selector\", \"div.foo > span > a\", []);\n  assert.t(\"Non-existent ancestors\", \".fototab > .thumbnails > a\", []);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - existence","suites":["selector"],"line":388,"code":"QUnit.test(\"attributes - existence\", function (assert) {\n  assert.expect(7);\n  assert.t(\"On element\", \"#qunit-fixture a[title]\", [\"google\"]);\n  assert.t(\"On element (whitespace ignored)\", \"#qunit-fixture a[ title ]\", [\"google\"]);\n  assert.t(\"On element (case-insensitive)\", \"#qunit-fixture a[TITLE]\", [\"google\"]);\n  assert.t(\"On any element\", \"#qunit-fixture *[title]\", [\"google\"]);\n  assert.t(\"On implicit element\", \"#qunit-fixture [title]\", [\"google\"]);\n  assert.t(\"Boolean\", \"#select2 option[selected]\", [\"option2d\"]);\n  assert.t(\"For attribute on label\", \"form label[for]\", [\"label-for\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - equals","suites":["selector"],"line":398,"code":"QUnit.test(\"attributes - equals\", function (assert) {\n  assert.expect(20);\n  var withScript;\n  assert.t(\"Identifier\", \"#qunit-fixture a[rel=bookmark]\", [\"simon1\"]);\n  assert.t(\"Identifier with underscore\", \"input[id=types_all]\", [\"types_all\"]);\n  assert.t(\"String\", \"#qunit-fixture a[rel='bookmark']\", [\"simon1\"]);\n  assert.t(\"String (whitespace ignored)\", \"#qunit-fixture a[ rel = 'bookmark' ]\", [\"simon1\"]);\n  assert.t(\"Non-identifier string\", \"#qunit-fixture a[href='https://www.google.com/']\", [\"google\"]);\n  assert.t(\"Empty string\", \"#select1 option[value='']\", [\"option1a\"]);\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Number\", \"#qunit-fixture option[value=1]\", [\"option1b\", \"option2b\", \"option3b\", \"option4b\", \"option5c\"]);\n    assert.t(\"negative number\", \"#qunit-fixture li[tabIndex=-1]\", [\"foodWithNegativeTabIndex\"]);\n  } else {\n    assert.ok(\"skip\", \"Number value not supported in selector-native\");\n    assert.ok(\"skip\", \"Negative number value not supported in selector-native\");\n  }\n  assert.t(\"Non-ASCII identifier\", \"span[lang=中文]\", [\"台北\"]);\n  assert.t(\"input[type=text]\", \"#form input[type=text]\", [\"text1\", \"text2\", \"hidden2\", \"name\"]);\n  assert.t(\"input[type=search]\", \"#form input[type=search]\", [\"search\"]);\n  withScript = supportjQuery(\"<div><span><script src=''></script></span></div>\");\n  assert.ok(withScript.find(\"#moretests script[src]\").has(\"script\"), \"script[src] (jQuery trac-13777)\");\n  assert.t(\"Boolean attribute equals name\", \"#select2 option[selected='selected']\", [\"option2d\"]);\n  assert.t(\"for Attribute in form\", \"#form [for=action]\", [\"label-for\"]);\n  assert.t(\"Grouped Form Elements - name\", \"input[name='foo[bar]']\", [\"hidden2\"]);\n  assert.t(\"Value\", \"input[value=Test]\", [\"text1\", \"text2\"]);\n  assert.deepEqual(jQuery(\"input[data-comma='0,1']\").get(), q(\"el12087\"), \"Without context, single-quoted attribute containing ','\");\n  assert.deepEqual(jQuery(\"input[data-comma=\\\"0,1\\\"]\").get(), q(\"el12087\"), \"Without context, double-quoted attribute containing ','\");\n  assert.deepEqual(jQuery(\"input[data-comma='0,1']\", document.getElementById(\"t12087\")).get(), q(\"el12087\"), \"With context, single-quoted attribute containing ','\");\n  assert.deepEqual(jQuery(\"input[data-comma=\\\"0,1\\\"]\", document.getElementById(\"t12087\")).get(), q(\"el12087\"), \"With context, double-quoted attribute containing ','\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - starts with","suites":["selector"],"line":433,"code":"QUnit.test(\"attributes - starts with\", function (assert) {\n  assert.expect(4);\n  assert.t(\"string (whitespace ignored)\", \"a[href ^= 'https://www']\", [\"google\", \"yahoo\"]);\n  assert.t(\"href starts with hash\", \"p a[href^='#']\", [\"anchor2\"]);\n  assert.t(\"string containing '['\", \"input[name^='foo[']\", [\"hidden2\"]);\n  assert.t(\"string containing '[' ... ']'\", \"input[name^='foo[bar]']\", [\"hidden2\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - contains","suites":["selector"],"line":440,"code":"QUnit.test(\"attributes - contains\", function (assert) {\n  assert.expect(4);\n  assert.t(\"string (whitespace ignored)\", \"a[href *= 'google']\", [\"google\", \"groups\"]);\n  assert.t(\"string like '[' ... ']']\", \"input[name*='[bar]']\", [\"hidden2\"]);\n  assert.t(\"string containing '['...']\", \"input[name*='foo[bar]']\", [\"hidden2\"]);\n  assert.t(\"href contains hash\", \"p a[href*='#']\", [\"simon1\", \"anchor2\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - ends with","suites":["selector"],"line":447,"code":"QUnit.test(\"attributes - ends with\", function (assert) {\n  assert.expect(4);\n  assert.t(\"string (whitespace ignored)\", \"a[href $= 'org/']\", [\"mark\"]);\n  assert.t(\"string ending with ']'\", \"input[name$='bar]']\", [\"hidden2\"]);\n  assert.t(\"string like '[' ... ']'\", \"input[name$='[bar]']\", [\"hidden2\"]);\n  assert.t(\"Attribute containing []\", \"input[name$='foo[bar]']\", [\"hidden2\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - whitespace list includes","suites":["selector"],"line":454,"code":"QUnit.test(\"attributes - whitespace list includes\", function (assert) {\n  assert.expect(3);\n  assert.t(\"string found at the beginning\", \"input[data-15233~='foo']\", [\"t15233-single\", \"t15233-double\", \"t15233-double-tab\", \"t15233-double-nl\", \"t15233-triple\"]);\n  assert.t(\"string found in the middle\", \"input[data-15233~='bar']\", [\"t15233-double\", \"t15233-double-tab\", \"t15233-double-nl\", \"t15233-triple\"]);\n  assert.t(\"string found at the end\", \"input[data-15233~='baz']\", [\"t15233-triple\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - hyphen-prefix matches","suites":["selector"],"line":460,"code":"QUnit.test(\"attributes - hyphen-prefix matches\", function (assert) {\n  assert.expect(3);\n  assert.t(\"string\", \"#names-group span[id|='name']\", [\"name-is-example\", \"name-is-div\"]);\n  assert.t(\"string containing hyphen\", \"#names-group span[id|='name-is']\", [\"name-is-example\", \"name-is-div\"]);\n  assert.t(\"string ending with hyphen\", \"#names-group span[id|='name-is-']\", []);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - special characters","suites":["selector"],"line":466,"code":"QUnit.test(\"attributes - special characters\", function (assert) {\n  assert.expect(16);\n  var attrbad;\n  var div = document.createElement(\"div\");\n\n  // trac-3729\n  div.innerHTML = \"<div id='foo' xml:test='something'></div>\";\n  assert.deepEqual(jQuery(\"[xml\\\\:test]\", div).get(), [div.firstChild], \"attribute name containing colon\");\n\n  // Make sure attribute value quoting works correctly.\n  // See jQuery trac-6093; trac-6428; trac-13894.\n  // Use seeded results to bypass querySelectorAll optimizations.\n  attrbad = jQuery(\"<input type='hidden' id='attrbad_space' name='foo bar'/>\" + \"<input type='hidden' id='attrbad_dot' value='2' name='foo.baz'/>\" + \"<input type='hidden' id='attrbad_brackets' value='2' name='foo[baz]'/>\" + \"<input type='hidden' id='attrbad_leading_digits' name='agent' value='007'/>\" + \"<input type='hidden' id='attrbad_injection' data-attr='foo_baz&#39;]'/>\" + \"<input type='hidden' id='attrbad_quote' data-attr='&#39;'/>\" + \"<input type='hidden' id='attrbad_backslash' data-attr='&#92;'/>\" + \"<input type='hidden' id='attrbad_backslash_quote' data-attr='&#92;&#39;'/>\" + \"<input type='hidden' id='attrbad_backslash_backslash' data-attr='&#92;&#92;'/>\" + \"<input type='hidden' id='attrbad_unicode' data-attr='&#x4e00;'/>\").appendTo(\"#qunit-fixture\").get();\n  assert.deepEqual(jQuery(attrbad).filter(\"input[name=foo\\\\ bar]\").get(), q(\"attrbad_space\"), \"identifier containing space\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[name=foo\\\\.baz]\").get(), q(\"attrbad_dot\"), \"identifier containing dot\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[name=foo\\\\[baz\\\\]]\").get(), q(\"attrbad_brackets\"), \"identifier containing brackets\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='foo_baz\\\\']']\").get(), q(\"attrbad_injection\"), \"string containing quote and right bracket\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[value=\\\\30 \\\\30\\\\37 ]\").get(), q(\"attrbad_leading_digits\"), \"identifier containing escaped leading digits with whitespace termination\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[value=\\\\00003007]\").get(), q(\"attrbad_leading_digits\"), \"identifier containing escaped leading digits without whitespace termination\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\'']\").get(), q(\"attrbad_quote\"), \"string containing quote\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\\\\\']\").get(), q(\"attrbad_backslash\"), \"string containing backslash\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\\\\\\\\\'']\").get(), q(\"attrbad_backslash_quote\"), \"string containing backslash and quote\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\\\\\\\\\\\\\']\").get(), q(\"attrbad_backslash_backslash\"), \"string containing adjacent backslashes\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\5C\\\\\\\\']\").get(), q(\"attrbad_backslash_backslash\"), \"string containing numeric-escape backslash and backslash\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\5C \\\\\\\\']\").get(), q(\"attrbad_backslash_backslash\"), \"string containing numeric-escape-with-trailing-space backslash and backslash\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\5C\\t\\\\\\\\']\").get(), q(\"attrbad_backslash_backslash\"), \"string containing numeric-escape-with-trailing-tab backslash and backslash\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\04e00']\").get(), q(\"attrbad_unicode\"), \"Long numeric escape (BMP)\");\n  document.getElementById(\"attrbad_unicode\").setAttribute(\"data-attr\", \"\\uD834\\uDF06A\");\n  assert.deepEqual(jQuery(attrbad).filter(\"input[data-attr='\\\\01D306A']\").get(), q(\"attrbad_unicode\"), \"Long numeric escape (non-BMP)\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"attributes - others","suites":["selector"],"line":496,"code":"QUnit.test(\"attributes - others\", function (assert) {\n  assert.expect(14);\n  var div = document.getElementById(\"foo\");\n  assert.t(\"Find elements with a tabindex attribute\", \"[tabindex]\", [\"listWithTabIndex\", \"foodWithNegativeTabIndex\", \"linkWithTabIndex\", \"linkWithNegativeTabIndex\", \"linkWithNoHrefWithTabIndex\", \"linkWithNoHrefWithNegativeTabIndex\"]);\n  assert.t(\"Selector list with multiple quoted attribute-equals\", \"#form input[type='radio'], #form input[type='hidden']\", [\"radio1\", \"radio2\", \"hidden1\"]);\n  assert.t(\"Selector list with differently-quoted attribute-equals\", \"#form input[type='radio'], #form input[type=\\\"hidden\\\"]\", [\"radio1\", \"radio2\", \"hidden1\"]);\n  assert.t(\"Selector list with quoted and unquoted attribute-equals\", \"#form input[type='radio'], #form input[type=hidden]\", [\"radio1\", \"radio2\", \"hidden1\"]);\n  assert.t(\"Object.prototype property \\\"constructor\\\" (negative)\", \"[constructor]\", []);\n  assert.t(\"Gecko Object.prototype property \\\"watch\\\" (negative)\", \"[watch]\", []);\n  div.setAttribute(\"constructor\", \"foo\");\n  div.setAttribute(\"watch\", \"bar\");\n  assert.t(\"Object.prototype property \\\"constructor\\\"\", \"[constructor='foo']\", [\"foo\"]);\n  assert.t(\"Gecko Object.prototype property \\\"watch\\\"\", \"[watch='bar']\", [\"foo\"]);\n\n  // trac-11115\n  assert.ok(jQuery(\"<input type='checkbox' checked='checked'/>\").prop(\"checked\", false).is(\"[checked]\"), \"[checked] selects by attribute (positive)\");\n  assert.ok(!jQuery(\"<input type='checkbox'/>\").prop(\"checked\", true).is(\"[checked]\"), \"[checked] selects by attribute (negative)\");\n  assert.t(\"empty name\", \"[name='']\", [\"name-empty\"]);\n  assert.t(\"prefixed empty name\", \"#empty-name-parent [name='']\", [\"name-empty\"]);\n  var emptyNameContainer = jQuery(\".empty-name-container\");\n  assert.deepEqual(emptyNameContainer.find(\"[name='']\").get(), q(\"name-empty\"), \"empty name with context\");\n  assert.deepEqual(emptyNameContainer.find(\"#empty-name-parent [name='']\").get(), q(\"name-empty\"), \"prefixed empty name with context\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - (parent|empty)","suites":["selector"],"line":519,"code":"QUnit.test(\"pseudo - (parent|empty)\", function (assert) {\n  assert.expect(3);\n  assert.t(\"Empty\", \"#qunit-fixture ul:empty\", [\"firstUL\"]);\n  assert.t(\"Empty with comment node\", \"#qunit-fixture ol:empty\", [\"empty\"]);\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Is A Parent\", \"#qunit-fixture p:parent\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  } else {\n    assert.ok(\"skip\", \":parent not supported in selector-native\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - (first|last|only)-(child|of-type)","suites":["selector"],"line":529,"code":"QUnit.test(\"pseudo - (first|last|only)-(child|of-type)\", function (assert) {\n  assert.expect(12);\n  assert.t(\"First Child\", \"#qunit-fixture p:first-child\", [\"firstp\", \"sndp\"]);\n  assert.t(\"First Child (leading id)\", \"#qunit-fixture p:first-child\", [\"firstp\", \"sndp\"]);\n  assert.t(\"First Child (leading class)\", \".nothiddendiv div:first-child\", [\"nothiddendivchild\"]);\n  assert.t(\"First Child (case-insensitive)\", \"#qunit-fixture p:FIRST-CHILD\", [\"firstp\", \"sndp\"]);\n  assert.t(\"Last Child\", \"#qunit-fixture p:last-child\", [\"sap\"]);\n  assert.t(\"Last Child (leading id)\", \"#qunit-fixture a:last-child\", [\"simon1\", \"anchor1\", \"mark\", \"yahoo\", \"anchor2\", \"simon\", \"liveLink1\", \"liveLink2\"]);\n  assert.t(\"Only Child\", \"#qunit-fixture a:only-child\", [\"simon1\", \"anchor1\", \"yahoo\", \"anchor2\", \"liveLink1\", \"liveLink2\"]);\n  assert.t(\"First-of-type\", \"#qunit-fixture > p:first-of-type\", [\"firstp\"]);\n  assert.t(\"Last-of-type\", \"#qunit-fixture > p:last-of-type\", [\"first\"]);\n  assert.t(\"Only-of-type\", \"#qunit-fixture > :only-of-type\", [\"name+value\", \"firstUL\", \"empty\", \"floatTest\", \"iframe\", \"table\", \"last\"]);\n\n  // Verify that the child position isn't being cached improperly\n  var secondChildren = jQuery(\"p:nth-child(2)\").before(\"<div></div>\");\n  assert.t(\"No longer second child\", \"p:nth-child(2)\", []);\n  secondChildren.prev().remove();\n  assert.t(\"Restored second child\", \"p:nth-child(2)\", [\"ap\", \"en\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - nth-child","suites":["selector"],"line":548,"code":"QUnit.test(\"pseudo - nth-child\", function (assert) {\n  assert.expect(30);\n  assert.t(\"Nth-child\", \"p:nth-child(1)\", [\"firstp\", \"sndp\"]);\n  assert.t(\"Nth-child (with whitespace)\", \"p:nth-child( 1 )\", [\"firstp\", \"sndp\"]);\n  assert.t(\"Nth-child (case-insensitive)\", \"#form #select1 option:NTH-child(3)\", [\"option1c\"]);\n  assert.t(\"Not nth-child\", \"#qunit-fixture p:not(:nth-child(1))\", [\"ap\", \"en\", \"sap\", \"first\"]);\n  assert.t(\"Nth-child(2)\", \"#qunit-fixture form#form > *:nth-child(2)\", [\"text1\"]);\n  assert.t(\"Nth-child(2)\", \"#qunit-fixture form#form > :nth-child(2)\", [\"text1\"]);\n  assert.t(\"Nth-child(-1)\", \"#form #select1 option:nth-child(-1)\", []);\n  assert.t(\"Nth-child(3)\", \"#form #select1 option:nth-child(3)\", [\"option1c\"]);\n  assert.t(\"Nth-child(0n+3)\", \"#form #select1 option:nth-child(0n+3)\", [\"option1c\"]);\n  assert.t(\"Nth-child(1n+0)\", \"#form #select1 option:nth-child(1n+0)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-child(1n)\", \"#form #select1 option:nth-child(1n)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-child(n)\", \"#form #select1 option:nth-child(n)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-child(even)\", \"#form #select1 option:nth-child(even)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-child(odd)\", \"#form #select1 option:nth-child(odd)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-child(2n)\", \"#form #select1 option:nth-child(2n)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-child(2n+1)\", \"#form #select1 option:nth-child(2n+1)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-child(2n + 1)\", \"#form #select1 option:nth-child(2n + 1)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-child(+2n + 1)\", \"#form #select1 option:nth-child(+2n + 1)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-child(3n)\", \"#form #select1 option:nth-child(3n)\", [\"option1c\"]);\n  assert.t(\"Nth-child(3n+1)\", \"#form #select1 option:nth-child(3n+1)\", [\"option1a\", \"option1d\"]);\n  assert.t(\"Nth-child(3n+2)\", \"#form #select1 option:nth-child(3n+2)\", [\"option1b\"]);\n  assert.t(\"Nth-child(3n+3)\", \"#form #select1 option:nth-child(3n+3)\", [\"option1c\"]);\n  assert.t(\"Nth-child(3n-1)\", \"#form #select1 option:nth-child(3n-1)\", [\"option1b\"]);\n  assert.t(\"Nth-child(3n-2)\", \"#form #select1 option:nth-child(3n-2)\", [\"option1a\", \"option1d\"]);\n  assert.t(\"Nth-child(3n-3)\", \"#form #select1 option:nth-child(3n-3)\", [\"option1c\"]);\n  assert.t(\"Nth-child(3n+0)\", \"#form #select1 option:nth-child(3n+0)\", [\"option1c\"]);\n  assert.t(\"Nth-child(-1n+3)\", \"#form #select1 option:nth-child(-1n+3)\", [\"option1a\", \"option1b\", \"option1c\"]);\n  assert.t(\"Nth-child(-n+3)\", \"#form #select1 option:nth-child(-n+3)\", [\"option1a\", \"option1b\", \"option1c\"]);\n  assert.t(\"Nth-child(-1n + 3)\", \"#form #select1 option:nth-child(-1n + 3)\", [\"option1a\", \"option1b\", \"option1c\"]);\n  if (QUnit.jQuerySelectors || this.safari) {\n    assert.deepEqual(jQuery([document.createElement(\"a\")].concat(q(\"ap\"))).filter(\":nth-child(n)\").get(), q(\"ap\"), \"Seeded nth-child\");\n  } else {\n    // Support: Chrome 75+, Firefox 67+\n    // Some browsers mark disconnected elements as matching `:nth-child(n)`\n    // so let's skip the test.\n    assert.ok(\"skip\", \"disconnected elements match ':nth-child(n)' in Chrome/Firefox\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - nth-last-child","suites":["selector"],"line":588,"code":"QUnit.test(\"pseudo - nth-last-child\", function (assert) {\n  assert.expect(30);\n  jQuery(\"#qunit-fixture\").append(\"<form id='nth-last-child-form'></form><i></i><i></i><i></i><i></i>\");\n  assert.t(\"Nth-last-child\", \"form:nth-last-child(5)\", [\"nth-last-child-form\"]);\n  assert.t(\"Nth-last-child (with whitespace)\", \"form:nth-last-child( 5 )\", [\"nth-last-child-form\"]);\n  assert.t(\"Nth-last-child (case-insensitive)\", \"#form #select1 option:NTH-last-child(3)\", [\"option1b\"]);\n  assert.t(\"Not nth-last-child\", \"#qunit-fixture p:not(:nth-last-child(1))\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"first\"]);\n  assert.t(\"Nth-last-child(-1)\", \"#form #select1 option:nth-last-child(-1)\", []);\n  assert.t(\"Nth-last-child(3)\", \"#form #select1 :nth-last-child(3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(3)\", \"#form #select1 *:nth-last-child(3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(3)\", \"#form #select1 option:nth-last-child(3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(0n+3)\", \"#form #select1 option:nth-last-child(0n+3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(1n+0)\", \"#form #select1 option:nth-last-child(1n+0)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-last-child(1n)\", \"#form #select1 option:nth-last-child(1n)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-last-child(n)\", \"#form #select1 option:nth-last-child(n)\", [\"option1a\", \"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-last-child(even)\", \"#form #select1 option:nth-last-child(even)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-last-child(odd)\", \"#form #select1 option:nth-last-child(odd)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-last-child(2n)\", \"#form #select1 option:nth-last-child(2n)\", [\"option1a\", \"option1c\"]);\n  assert.t(\"Nth-last-child(2n+1)\", \"#form #select1 option:nth-last-child(2n+1)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-last-child(2n + 1)\", \"#form #select1 option:nth-last-child(2n + 1)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-last-child(+2n + 1)\", \"#form #select1 option:nth-last-child(+2n + 1)\", [\"option1b\", \"option1d\"]);\n  assert.t(\"Nth-last-child(3n)\", \"#form #select1 option:nth-last-child(3n)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(3n+1)\", \"#form #select1 option:nth-last-child(3n+1)\", [\"option1a\", \"option1d\"]);\n  assert.t(\"Nth-last-child(3n+2)\", \"#form #select1 option:nth-last-child(3n+2)\", [\"option1c\"]);\n  assert.t(\"Nth-last-child(3n+3)\", \"#form #select1 option:nth-last-child(3n+3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(3n-1)\", \"#form #select1 option:nth-last-child(3n-1)\", [\"option1c\"]);\n  assert.t(\"Nth-last-child(3n-2)\", \"#form #select1 option:nth-last-child(3n-2)\", [\"option1a\", \"option1d\"]);\n  assert.t(\"Nth-last-child(3n-3)\", \"#form #select1 option:nth-last-child(3n-3)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(3n+0)\", \"#form #select1 option:nth-last-child(3n+0)\", [\"option1b\"]);\n  assert.t(\"Nth-last-child(-1n+3)\", \"#form #select1 option:nth-last-child(-1n+3)\", [\"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-last-child(-n+3)\", \"#form #select1 option:nth-last-child(-n+3)\", [\"option1b\", \"option1c\", \"option1d\"]);\n  assert.t(\"Nth-last-child(-1n + 3)\", \"#form #select1 option:nth-last-child(-1n + 3)\", [\"option1b\", \"option1c\", \"option1d\"]);\n  if (QUnit.jQuerySelectors || this.safari) {\n    assert.deepEqual(jQuery([document.createElement(\"a\")].concat(q(\"ap\"))).filter(\":nth-last-child(n)\").get(), q(\"ap\"), \"Seeded nth-last-child\");\n  } else {\n    // Support: Chrome 75+, Firefox 67+\n    // Some browsers mark disconnected elements as matching `:nth-last-child(n)`\n    // so let's skip the test.\n    assert.ok(\"skip\", \"disconnected elements match ':nth-last-child(n)' in Chrome/Firefox\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - nth-of-type","suites":["selector"],"line":629,"code":"QUnit.test(\"pseudo - nth-of-type\", function (assert) {\n  assert.expect(9);\n  assert.t(\"Nth-of-type(-1)\", \":nth-of-type(-1)\", []);\n  assert.t(\"Nth-of-type(3)\", \"#ap :nth-of-type(3)\", [\"mark\"]);\n  assert.t(\"Nth-of-type(n)\", \"#ap :nth-of-type(n)\", [\"google\", \"groups\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-of-type(0n+3)\", \"#ap :nth-of-type(0n+3)\", [\"mark\"]);\n  assert.t(\"Nth-of-type(2n)\", \"#ap :nth-of-type(2n)\", [\"groups\"]);\n  assert.t(\"Nth-of-type(even)\", \"#ap :nth-of-type(even)\", [\"groups\"]);\n  assert.t(\"Nth-of-type(2n+1)\", \"#ap :nth-of-type(2n+1)\", [\"google\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-of-type(odd)\", \"#ap :nth-of-type(odd)\", [\"google\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-of-type(-n+2)\", \"#qunit-fixture > :nth-of-type(-n+2)\", [\"firstp\", \"ap\", \"foo\", \"nothiddendiv\", \"name+value\", \"firstUL\", \"empty\", \"form\", \"floatTest\", \"iframe\", \"lengthtest\", \"table\", \"last\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - nth-last-of-type","suites":["selector"],"line":641,"code":"QUnit.test(\"pseudo - nth-last-of-type\", function (assert) {\n  assert.expect(9);\n  assert.t(\"Nth-last-of-type(-1)\", \":nth-last-of-type(-1)\", []);\n  assert.t(\"Nth-last-of-type(3)\", \"#ap :nth-last-of-type(3)\", [\"google\"]);\n  assert.t(\"Nth-last-of-type(n)\", \"#ap :nth-last-of-type(n)\", [\"google\", \"groups\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-last-of-type(0n+3)\", \"#ap :nth-last-of-type(0n+3)\", [\"google\"]);\n  assert.t(\"Nth-last-of-type(2n)\", \"#ap :nth-last-of-type(2n)\", [\"groups\"]);\n  assert.t(\"Nth-last-of-type(even)\", \"#ap :nth-last-of-type(even)\", [\"groups\"]);\n  assert.t(\"Nth-last-of-type(2n+1)\", \"#ap :nth-last-of-type(2n+1)\", [\"google\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-last-of-type(odd)\", \"#ap :nth-last-of-type(odd)\", [\"google\", \"code1\", \"anchor1\", \"mark\"]);\n  assert.t(\"Nth-last-of-type(-n+2)\", \"#qunit-fixture > :nth-last-of-type(-n+2)\", [\"ap\", \"name+value\", \"first\", \"firstUL\", \"empty\", \"floatTest\", \"iframe\", \"table\", \"testForm\", \"disabled-tests\", \"siblingTest\", \"fx-test-group\", \"last\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - misc","suites":["selector"],"line":682,"code":"QUnit.test(\"pseudo - misc\", function (assert) {\n  assert.expect(32);\n  var select, tmp, input;\n  jQuery(\"<h1 id='h1'></h1><h2 id='h2'></h2><h2 id='h2-2'></h2>\").prependTo(\"#qunit-fixture\");\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Headers\", \"#qunit-fixture :header\", [\"h1\", \"h2\", \"h2-2\"]);\n    assert.t(\"Headers(case-insensitive)\", \"#qunit-fixture :Header\", [\"h1\", \"h2\", \"h2-2\"]);\n  } else {\n    assert.ok(\"skip\", \":header not supported in selector-native\");\n    assert.ok(\"skip\", \":header not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Multiple matches with the same context (cache check)\", \"#form select:has(option:first-child:contains('o'))\", [\"select1\", \"select2\", \"select3\", \"select4\"]);\n    assert.ok(jQuery(\"#qunit-fixture :not(:has(:has(*)))\").length, \"All not grandparents\");\n    select = document.getElementById(\"select1\");\n    assert.ok(jQuery(select).is(\":has(option)\"), \"Has Option Matches\");\n  } else {\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n  }\n  tmp = document.createElement(\"div\");\n  tmp.id = \"tmp_input\";\n  document.body.appendChild(tmp);\n  jQuery.each([\"button\", \"submit\", \"reset\"], function (i, type) {\n    var els = jQuery(\"<input id='input_%' type='%'/><button id='button_%' type='%'>test</button>\".replace(/%/g, type)).appendTo(tmp);\n    if (QUnit.jQuerySelectors) {\n      assert.t(\"Input Buttons :\" + type, \"#tmp_input :\" + type, [\"input_\" + type, \"button_\" + type]);\n      assert.ok(jQuery(els[0]).is(\":\" + type), \"Input Matches :\" + type);\n      assert.ok(jQuery(els[1]).is(\":\" + type), \"Button Matches :\" + type);\n    } else {\n      assert.ok(\"skip\", \":\" + type + \" not supported in selector-native\");\n      assert.ok(\"skip\", \":\" + type + \" not supported in selector-native\");\n      assert.ok(\"skip\", \":\" + type + \" not supported in selector-native\");\n    }\n  });\n  document.body.removeChild(tmp);\n\n  // Recreate tmp\n  tmp = document.createElement(\"div\");\n  tmp.id = \"tmp_input\";\n  tmp.innerHTML = \"<span>Hello I am focusable.</span>\";\n  // Setting tabIndex should make the element focusable\n  // https://html.spec.whatwg.org/#the-tabindex-attribute\n  document.body.appendChild(tmp);\n  tmp.tabIndex = 0;\n  tmp.focus();\n  if (document.activeElement !== tmp || document.hasFocus && !document.hasFocus() || document.querySelectorAll && !document.querySelectorAll(\"div:focus\").length) {\n    assert.ok(true, \"The div was not focused. Skip checking the :focus match.\");\n    assert.ok(true, \"The div was not focused. Skip checking the :focus match.\");\n  } else {\n    assert.t(\"tabIndex element focused\", \":focus\", [\"tmp_input\"]);\n    assert.ok(jQuery(tmp).is(\":focus\"), \":focus matches tabIndex div\");\n  }\n\n  // Blur tmp\n  tmp.blur();\n  document.body.focus();\n  assert.ok(!jQuery(tmp).is(\":focus\"), \":focus doesn't match tabIndex div\");\n  document.body.removeChild(tmp);\n\n  // Input focus/active\n  input = document.createElement(\"input\");\n  input.type = \"text\";\n  input.id = \"focus-input\";\n  document.body.appendChild(input);\n  input.focus();\n\n  // Inputs can't be focused unless the document has focus\n  if (document.activeElement !== input || document.hasFocus && !document.hasFocus() || document.querySelectorAll && !document.querySelectorAll(\"input:focus\").length) {\n    assert.ok(true, \"The input was not focused. Skip checking the :focus match.\");\n    assert.ok(true, \"The input was not focused. Skip checking the :focus match.\");\n  } else {\n    assert.t(\"Element focused\", \"input:focus\", [\"focus-input\"]);\n    assert.ok(jQuery(input).is(\":focus\"), \":focus matches\");\n  }\n  input.blur();\n\n  // When IE is out of focus, blur does not work. Force it here.\n  if (document.activeElement === input) {\n    document.body.focus();\n  }\n  assert.ok(!jQuery(input).is(\":focus\"), \":focus doesn't match\");\n  document.body.removeChild(input);\n  assert.deepEqual(jQuery(\"[id='select1'] *:not(:last-child), [id='select2'] *:not(:last-child)\", q(\"qunit-fixture\")[0]).get(), q(\"option1a\", \"option1b\", \"option1c\", \"option2a\", \"option2b\", \"option2c\"), \"caching system tolerates recursive selection\");\n  if (QUnit.jQuerySelectors) {\n    // Tokenization edge cases\n    assert.t(\"Sequential pseudos\", \"#qunit-fixture p:has(:contains(mark)):has(code)\", [\"ap\"]);\n    assert.t(\"Sequential pseudos\", \"#qunit-fixture p:has(:contains(mark)):has(code):contains(This link)\", [\"ap\"]);\n    assert.t(\"Pseudo argument containing ')'\", \"p:has(>a.GROUPS[src!=')'])\", [\"ap\"]);\n    assert.t(\"Pseudo argument containing ')'\", \"p:has(>a.GROUPS[src!=')'])\", [\"ap\"]);\n    assert.t(\"Pseudo followed by token containing ')'\", \"p:contains(id=\\\"foo\\\")[id!=\\\\)]\", [\"sndp\"]);\n    assert.t(\"Pseudo followed by token containing ')'\", \"p:contains(id=\\\"foo\\\")[id!=')']\", [\"sndp\"]);\n    assert.t(\"Multi-pseudo\", \"#ap:has(*), #ap:has(*)\", [\"ap\"]);\n    assert.t(\"Multi-pseudo with leading nonexistent id\", \"#nonexistent:has(*), #ap:has(*)\", [\"ap\"]);\n    assert.t(\"Tokenization stressor\", \"a[class*=blog]:not(:has(*, :contains(!)), :contains(!)), br:contains(]), p:contains(]):not(.qunit-source), :not(:empty):not(:parent):not(.qunit-source)\", [\"ap\", \"mark\", \"yahoo\", \"simon\"]);\n  } else {\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":has supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectorsPos) {\n    assert.t(\"Multi-positional\", \"#ap:gt(0), #ap:lt(1)\", [\"ap\"]);\n    assert.t(\"Multi-positional with leading nonexistent id\", \"#nonexistent:gt(0), #ap:lt(1)\", [\"ap\"]);\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :not","suites":["selector"],"line":797,"code":"QUnit.test(\"pseudo - :not\", function (assert) {\n  assert.expect(43);\n  assert.t(\"Not\", \"a.blog:not(.link)\", [\"mark\"]);\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Not - multiple\", \"#form option:not(:contains(Nothing),#option1b,:selected)\", [\"option1c\", \"option1d\", \"option2b\", \"option2c\", \"option3d\", \"option3e\", \"option4e\", \"option5b\", \"option5c\"]);\n    assert.t(\"Not - recursive\", \"#form option:not(:not(:selected))[id^='option3']\", [\"option3b\", \"option3c\"]);\n  } else {\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectorsPos) {\n    assert.t(\":not() with :first\", \"#foo p:not(:first) .link\", [\"simon\"]);\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n  assert.t(\":not() failing interior\", \"#qunit-fixture p:not(.foo)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\":not() failing interior\", \"#qunit-fixture p:not(#blargh)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  if (QUnit.jQuerySelectors || !QUnit.isIE) {\n    assert.t(\":not() failing interior\", \"#qunit-fixture p:not(div.foo)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n    assert.t(\":not() failing interior\", \"#qunit-fixture p:not(p.foo)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n    assert.t(\":not() failing interior\", \"#qunit-fixture p:not(div#blargh)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n    assert.t(\":not() failing interior\", \"#qunit-fixture p:not(p#blargh)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  } else {\n    // Support: IE 11+\n    // IE doesn't support `:not(complex selector)`.\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n  }\n  assert.t(\":not Multiple\", \"#qunit-fixture p:not(a)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\":not Multiple\", \"#qunit-fixture p:not( a )\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n  assert.t(\":not Multiple\", \"#qunit-fixture p:not( p )\", []);\n  assert.t(\":not Multiple\", \"p:not(p)\", []);\n  if (QUnit.jQuerySelectors || !QUnit.isIE) {\n    assert.t(\":not Multiple\", \"#qunit-fixture p:not(a, b)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n    assert.t(\":not Multiple\", \"#qunit-fixture p:not(a, b, div)\", [\"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\"]);\n    assert.t(\":not Multiple\", \"p:not(a,p)\", []);\n    assert.t(\":not Multiple\", \"p:not(p,a)\", []);\n    assert.t(\":not Multiple\", \"p:not(a,p,b)\", []);\n  } else {\n    // Support: IE 11+\n    // IE doesn't support `:not(complex selector)`.\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\":not Multiple\", \":input:not(:image,:input,:submit)\", []);\n    assert.t(\":not Multiple\", \"#qunit-fixture p:not(:has(a), :nth-child(1))\", [\"first\"]);\n  } else {\n    assert.ok(\"skip\", \":image, :input, :submit not supported in selector-native\");\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n  }\n  assert.t(\"No element not selector\", \".container div:not(.excluded) div\", []);\n  assert.t(\":not() Existing attribute\", \"#form select:not([multiple])\", [\"select1\", \"select2\", \"select5\"]);\n  assert.t(\":not() Equals attribute\", \"#form select:not([name=select1])\", [\"select2\", \"select3\", \"select4\", \"select5\"]);\n  assert.t(\":not() Equals quoted attribute\", \"#form select:not([name='select1'])\", [\"select2\", \"select3\", \"select4\", \"select5\"]);\n  assert.t(\":not() Multiple Class\", \"#foo a:not(.blog)\", [\"yahoo\", \"anchor2\"]);\n  assert.t(\":not() Multiple Class\", \"#foo a:not(.link)\", [\"yahoo\", \"anchor2\"]);\n  if (QUnit.jQuerySelectors || !QUnit.isIE) {\n    assert.t(\":not() Multiple Class\", \"#foo a:not(.blog.link)\", [\"yahoo\", \"anchor2\"]);\n  } else {\n    // Support: IE 11+\n    // IE doesn't support `:not(complex selector)`.\n    assert.ok(\"skip\", \":not(complex selector) not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\":not chaining (compound)\", \"#qunit-fixture div[id]:not(:has(div, span)):not(:has(*))\", [\"nothiddendivchild\", \"divWithNoTabIndex\", \"fx-tests\"]);\n    assert.t(\":not chaining (with attribute)\", \"#qunit-fixture form[id]:not([action$='formaction']):not(:button)\", [\"lengthtest\", \"name-tests\", \"testForm\", \"disabled-tests\"]);\n    assert.t(\":not chaining (colon in attribute)\", \"#qunit-fixture form[id]:not([action='form:action']):not(:button)\", [\"form\", \"lengthtest\", \"name-tests\", \"testForm\", \"disabled-tests\"]);\n    assert.t(\":not chaining (colon in attribute and nested chaining)\", \"#qunit-fixture form[id]:not([action='form:action']:button):not(:input)\", [\"form\", \"lengthtest\", \"name-tests\", \"testForm\", \"disabled-tests\"]);\n    assert.t(\":not chaining\", \"#form select:not(.select1):contains(Nothing) > option:not(option)\", []);\n  } else {\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n    assert.ok(\"skip\", \":button not supported in selector-native\");\n    assert.ok(\"skip\", \":button not supported in selector-native\");\n    assert.ok(\"skip\", \":button not supported in selector-native\");\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectorsPos) {\n    assert.t(\"positional :not()\", \"#foo p:not(:last)\", [\"sndp\", \"en\"]);\n    assert.t(\"positional :not() prefix\", \"#foo p:not(:last) a\", [\"yahoo\"]);\n    assert.t(\"compound positional :not()\", \"#foo p:not(:first, :last)\", [\"en\"]);\n    assert.t(\"compound positional :not()\", \"#foo p:not(:first, :even)\", [\"en\"]);\n    assert.t(\"compound positional :not()\", \"#foo p:not(:first, :odd)\", [\"sap\"]);\n    assert.t(\"reordered compound positional :not()\", \"#foo p:not(:odd, :first)\", [\"sap\"]);\n    assert.t(\"positional :not() with pre-filter\", \"#foo p:not([id]:first)\", [\"en\", \"sap\"]);\n    assert.t(\"positional :not() with post-filter\", \"#foo p:not(:first[id])\", [\"en\", \"sap\"]);\n    assert.t(\"positional :not() with pre-filter\", \"#foo p:not([lang]:first)\", [\"sndp\", \"sap\"]);\n    assert.t(\"positional :not() with post-filter\", \"#foo p:not(:first[lang])\", [\"sndp\", \"en\", \"sap\"]);\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - form","suites":["selector"],"line":943,"code":"QUnit.test(\"pseudo - form\", function (assert) {\n  assert.expect(16);\n  var extraTexts = jQuery(\"<input id=\\\"impliedText\\\"/><input id=\\\"capitalText\\\" type=\\\"TEXT\\\">\").appendTo(\"#form\");\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Form element :radio\", \"#form :radio\", [\"radio1\", \"radio2\"]);\n    assert.t(\"Form element :checkbox\", \"#form :checkbox\", [\"check1\", \"check2\"]);\n    assert.t(\"Form element :text\", \"#form :text\", [\"text1\", \"text2\", \"hidden2\", \"name\", \"impliedText\", \"capitalText\"]);\n    assert.t(\"Form element :radio:checked\", \"#form :radio:checked\", [\"radio2\"]);\n    assert.t(\"Form element :checkbox:checked\", \"#form :checkbox:checked\", [\"check1\"]);\n    assert.t(\"Form element :radio:checked, :checkbox:checked\", \"#form :radio:checked, #form :checkbox:checked\", [\"radio2\", \"check1\"]);\n  } else {\n    assert.ok(\"skip\", \":radio not supported in selector-native\");\n    assert.ok(\"skip\", \":checkbox not supported in selector-native\");\n    assert.ok(\"skip\", \":text not supported in selector-native\");\n    assert.ok(\"skip\", \":radio not supported in selector-native\");\n    assert.ok(\"skip\", \":checkbox not supported in selector-native\");\n    assert.ok(\"skip\", \":radio not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Selected option element\", \"#form option:selected\", [\"option1a\", \"option2d\", \"option3b\", \"option3c\", \"option4b\", \"option4c\", \"option4d\", \"option5a\"]);\n    assert.t(\"Select options via :selected\", \"#select1 option:selected\", [\"option1a\"]);\n    assert.t(\"Select options via :selected\", \"#select2 option:selected\", [\"option2d\"]);\n    assert.t(\"Select options via :selected\", \"#select3 option:selected\", [\"option3b\", \"option3c\"]);\n    assert.t(\"Select options via :selected\", \"select[name='select2'] option:selected\", [\"option2d\"]);\n  } else {\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n    assert.ok(\"skip\", \":selected not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Form element :input\", \"#form :input\", [\"text1\", \"text2\", \"radio1\", \"radio2\", \"check1\", \"check2\", \"hidden1\", \"hidden2\", \"name\", \"search\", \"button\", \"area1\", \"select1\", \"select2\", \"select3\", \"select4\", \"select5\", \"impliedText\", \"capitalText\"]);\n\n    // trac-12600\n    assert.ok(jQuery(\"<select value='12600'><option value='option' selected='selected'></option><option value=''></option></select>\").prop(\"value\", \"option\").is(\":input[value='12600']\"), \":input[value=foo] selects select by attribute\");\n    assert.ok(jQuery(\"<input type='text' value='12600'/>\").prop(\"value\", \"option\").is(\":input[value='12600']\"), \":input[value=foo] selects text input by attribute\");\n  } else {\n    assert.ok(\"skip\", \":input not supported in selector-native\");\n    assert.ok(\"skip\", \":input not supported in selector-native\");\n    assert.ok(\"skip\", \":input not supported in selector-native\");\n  }\n  assert.t(\"Selected option elements are also :checked\", \"#form option:checked\", [\"option1a\", \"option2d\", \"option3b\", \"option3c\", \"option4b\", \"option4c\", \"option4d\", \"option5a\"]);\n  assert.t(\"Hidden inputs are still :enabled\", \"#hidden1:enabled\", [\"hidden1\"]);\n  extraTexts.remove();\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :(dis|en)abled, explicitly disabled","suites":["selector"],"line":989,"code":"QUnit.test(\"pseudo - :(dis|en)abled, explicitly disabled\", function (assert) {\n  assert.expect(2);\n\n  // Set a meaningless disabled property on a common ancestor\n  var container = document.getElementById(\"disabled-tests\");\n  container.disabled = true;\n\n  // Support: IE 6 - 11\n  // Unset the property where it is not meaningless\n  if (document.getElementById(\"enabled-input\").isDisabled) {\n    container.disabled = undefined;\n  }\n  assert.t(\"Explicitly disabled elements\", \"#enabled-fieldset :disabled\", [\"disabled-input\", \"disabled-textarea\", \"disabled-button\", \"disabled-select\", \"disabled-optgroup\", \"disabled-option\"]);\n  if (QUnit.jQuerySelectors) {\n    assert.t(\"Enabled elements\", \"#enabled-fieldset :enabled\", [\"enabled-input\", \"enabled-textarea\", \"enabled-button\", \"enabled-select\", \"enabled-optgroup\", \"enabled-option\"]);\n  } else {\n    assert.ok(\"skip\", \":enabled broken in Chrome in selector-native\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :(dis|en)abled, optgroup and option","suites":["selector"],"line":1008,"code":"QUnit.test(\"pseudo - :(dis|en)abled, optgroup and option\", function (assert) {\n  assert.expect(2);\n  assert.t(\":disabled\", \"#disabled-select-inherit :disabled, #enabled-select-inherit :disabled\", [\"disabled-optgroup-inherit\", \"disabled-optgroup-option\", \"en_disabled-optgroup-inherit\", \"en_disabled-optgroup-option\"]);\n  assert.t(\":enabled\", \"#disabled-select-inherit :enabled, #enabled-select-inherit :enabled\", [\"enabled-optgroup-inherit\", \"enabled-optgroup-option\", \"enabled-select-option\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - fieldset:(dis|en)abled","suites":["selector"],"line":1013,"code":"QUnit.test(\"pseudo - fieldset:(dis|en)abled\", function (assert) {\n  assert.expect(2);\n  assert.t(\"Disabled fieldset\", \"fieldset:disabled\", [\"disabled-fieldset\"]);\n  assert.t(\"Enabled fieldset\", \"fieldset:enabled\", [\"enabled-fieldset\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :disabled by ancestry","suites":["selector"],"line":1018,"code":"QUnit.test(\"pseudo - :disabled by ancestry\", function (assert) {\n  assert.expect(1);\n  assert.t(\"Inputs inherit disabled from fieldset\", \"#disabled-fieldset :disabled\", [\"disabled-fieldset-input\", \"disabled-fieldset-textarea\", \"disabled-fieldset-button\"]);\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - a:(dis|en)abled","suites":["selector"],"line":1022,"code":"QUnit.test(\"pseudo - a:(dis|en)abled\", function (assert) {\n  assert.expect(2);\n  var enabled,\n    disabled,\n    container = jQuery(\"<div></div>\"),\n    anchor = jQuery(\"<a href='#'>Link</a>\");\n  container.appendTo(\"#qunit-fixture\");\n  enabled = container.find(\"a:enabled\");\n  disabled = container.find(\"a:disabled\");\n  assert.strictEqual(enabled.length, 0, \":enabled doesn't match anchor elements\");\n  assert.strictEqual(disabled.length, 0, \":disabled doesn't match anchor elements\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :target and :root","suites":["selector"],"line":1034,"code":"QUnit.test(\"pseudo - :target and :root\", function (assert) {\n  assert.expect(2);\n\n  // Target\n  var oldHash,\n    $link = jQuery(\"<a></a>\").attr({\n      href: \"#\",\n      id: \"new-link\"\n    }).appendTo(\"#qunit-fixture\");\n  oldHash = window.location.hash;\n  window.location.hash = \"new-link\";\n  assert.t(\":target\", \":target\", [\"new-link\"]);\n  $link.remove();\n  window.location.hash = oldHash;\n\n  // Root\n  assert.equal(jQuery(\":root\")[0], document.documentElement, \":root selector\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"pseudo - :lang","suites":["selector"],"line":1052,"code":"QUnit.test(\"pseudo - :lang\", function (assert) {\n  assert.expect(QUnit.jQuerySelectors ? 105 : 55);\n  var docElem = document.documentElement,\n    docXmlLang = docElem.getAttribute(\"xml:lang\"),\n    docLang = docElem.lang,\n    foo = document.getElementById(\"foo\"),\n    anchor = document.getElementById(\"anchor2\"),\n    xml = createWithFriesXML(),\n    testLang = function (text, elem, container, lang, extra) {\n      var message,\n        full = lang + \"-\" + extra;\n      message = \"lang=\" + lang + \" \" + text;\n      container.setAttribute(container.ownerDocument.documentElement.nodeName === \"HTML\" ? \"lang\" : \"xml:lang\", lang);\n      assertMatch(message, elem, \":lang(\" + lang + \")\");\n      assertMatch(message, elem, \":lang(\" + mixCase(lang) + \")\");\n      assertNoMatch(message, elem, \":lang(\" + full + \")\");\n      assertNoMatch(message, elem, \":lang(\" + mixCase(full) + \")\");\n      assertNoMatch(message, elem, \":lang(\" + lang + \"-)\");\n      assertNoMatch(message, elem, \":lang(\" + full + \"-)\");\n      assertNoMatch(message, elem, \":lang(\" + lang + \"glish)\");\n      assertNoMatch(message, elem, \":lang(\" + full + \"glish)\");\n      message = \"lang=\" + full + \" \" + text;\n      container.setAttribute(container.ownerDocument.documentElement.nodeName === \"HTML\" ? \"lang\" : \"xml:lang\", full);\n      assertMatch(message, elem, \":lang(\" + lang + \")\");\n      assertMatch(message, elem, \":lang(\" + mixCase(lang) + \")\");\n      assertMatch(message, elem, \":lang(\" + full + \")\");\n      assertMatch(message, elem, \":lang(\" + mixCase(full) + \")\");\n      assertNoMatch(message, elem, \":lang(\" + lang + \"-)\");\n      assertNoMatch(message, elem, \":lang(\" + full + \"-)\");\n      assertNoMatch(message, elem, \":lang(\" + lang + \"glish)\");\n      assertNoMatch(message, elem, \":lang(\" + full + \"glish)\");\n    },\n    mixCase = function (str) {\n      var ret = str.split(\"\"),\n        i = ret.length;\n      while (i--) {\n        if (i & 1) {\n          ret[i] = ret[i].toUpperCase();\n        }\n      }\n      return ret.join(\"\");\n    },\n    assertMatch = function (text, elem, selector) {\n      assert.ok(jQuery(elem).is(selector), text + \" match \" + selector);\n    },\n    assertNoMatch = function (text, elem, selector) {\n      assert.ok(!jQuery(elem).is(selector), text + \" fail \" + selector);\n    };\n\n  // Prefixing and inheritance\n  assert.ok(jQuery(docElem).is(\":lang(\" + docElem.lang + \")\"), \"starting :lang\");\n  testLang(\"document\", anchor, docElem, \"en\", \"us\");\n  testLang(\"grandparent\", anchor, anchor.parentNode.parentNode, \"yue\", \"hk\");\n  assert.ok(!jQuery(anchor).is(\":lang(en), :lang(en-us)\"), \":lang does not look above an ancestor with specified lang\");\n  testLang(\"self\", anchor, anchor, \"es\", \"419\");\n  assert.ok(!jQuery(anchor).is(\":lang(en), :lang(en-us), :lang(yue), :lang(yue-hk)\"), \":lang does not look above self with specified lang\");\n\n  // Searching by language tag\n  anchor.parentNode.parentNode.lang = \"arab\";\n  anchor.parentNode.lang = anchor.parentNode.id = \"ara-sa\";\n  anchor.lang = \"ara\";\n  assert.deepEqual(jQuery(\":lang(ara)\", foo).get(), [anchor.parentNode, anchor], \"Find by :lang\");\n\n  // Selector validity\n  anchor.parentNode.lang = \"ara\";\n  anchor.lang = \"ara\\\\b\";\n  assert.deepEqual(jQuery(\":lang(ara\\\\b)\", foo).get(), [], \":lang respects backslashes\");\n  assert.deepEqual(jQuery(\":lang(ara\\\\\\\\b)\", foo).get(), [anchor], \":lang respects escaped backslashes\");\n  assert.throws(function () {\n    jQuery(\"#qunit-fixture:lang(c++)\");\n  }, \":lang value must be a valid identifier\");\n  if (QUnit.jQuerySelectors) {\n    // XML\n    foo = jQuery(\"response\", xml)[0];\n    anchor = jQuery(\"#seite1\", xml)[0];\n    testLang(\"XML document\", anchor, xml.documentElement, \"en\", \"us\");\n    testLang(\"XML grandparent\", anchor, foo, \"yue\", \"hk\");\n    assert.ok(!jQuery(anchor).is(\":lang(en), :lang(en-us)\"), \"XML :lang does not look above an ancestor with specified lang\");\n    testLang(\"XML self\", anchor, anchor, \"es\", \"419\");\n    assert.ok(!jQuery(anchor).is(\":lang(en), :lang(en-us), :lang(yue), :lang(yue-hk)\"), \"XML :lang does not look above self with specified lang\");\n  }\n\n  // Cleanup\n  if (docXmlLang == null) {\n    docElem.removeAttribute(\"xml:lang\");\n  } else {\n    docElem.setAttribute(\"xml:lang\", docXmlLang);\n  }\n  docElem.lang = docLang;\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"context","suites":["selector"],"line":1142,"code":"QUnit.test(\"context\", function (assert) {\n  assert.expect(21);\n  var context,\n    selector = \".blog\",\n    expected = q(\"mark\", \"simon\"),\n    iframe = document.getElementById(\"iframe\"),\n    iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\n  assert.deepEqual(jQuery(selector, document).get(), expected, \"explicit document context\");\n  assert.deepEqual(jQuery(selector).get(), expected, \"unspecified context becomes document\");\n  assert.deepEqual(jQuery(selector, undefined).get(), expected, \"undefined context becomes document\");\n  assert.deepEqual(jQuery(selector, null).get(), expected, \"null context becomes document\");\n  iframeDoc.open();\n  iframeDoc.write(\"<body><p id='foo'>bar</p></body>\");\n  iframeDoc.close();\n  expected = [iframeDoc.getElementById(\"foo\")];\n  assert.deepEqual(jQuery(\"p\", iframeDoc).get(), expected, \"Other document context (simple)\");\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"p:contains(ar)\", iframeDoc).get(), expected, \"Other document context (complex)\");\n  } else {\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n  }\n  assert.deepEqual(jQuery(\"span\", iframeDoc).get(), [], \"Other document context (simple, no results)\");\n  assert.deepEqual(jQuery(\"* span\", iframeDoc).get(), [], \"Other document context (complex, no results)\");\n  context = document.getElementById(\"nothiddendiv\");\n  assert.deepEqual(jQuery(\"*\", context).get(), q(\"nothiddendivchild\"), \"<div> context\");\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"* > *\", context).get(), [], \"<div> context (no results)\");\n  } else {\n    assert.ok(\"skip\", \"The whole selector not required to be under context in selector-native\");\n  }\n  context.removeAttribute(\"id\");\n  assert.deepEqual(jQuery(\"*\", context).get(), q(\"nothiddendivchild\"), \"no-id element context\");\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"* > *\", context).get(), [], \"no-id element context (no results)\");\n  } else {\n    assert.ok(\"skip\", \":contains not supported in selector-native\");\n  }\n  assert.strictEqual(context.getAttribute(\"id\") || \"\", \"\", \"id not added by no-id selection\");\n  context = document.getElementById(\"lengthtest\");\n  assert.deepEqual(jQuery(\"input\", context).get(), q(\"length\", \"idTest\"), \"<form> context\");\n  assert.deepEqual(jQuery(\"select\", context).get(), [], \"<form> context (no results)\");\n  context = document.getElementById(\"台北Táiběi\");\n  expected = q(\"台北Táiběi-child\");\n  assert.deepEqual(jQuery(\"span[id]\", context).get(), expected, \"context with non-ASCII id\");\n  assert.deepEqual(jQuery(\"#台北Táiběi span[id]\", context.parentNode).get(), expected, \"context with non-ASCII id selector prefix\");\n  context = document.createDocumentFragment();\n\n  // Capture *independent* expected nodes before they're detached from the page\n  expected = q(\"siblingnext\", \"siblingspan\");\n  context.appendChild(document.getElementById(\"siblingTest\"));\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"em:nth-child(2)\", context).get(), expected.slice(0, 1), \"DocumentFragment context\");\n    assert.deepEqual(jQuery(\"span\", context).get(), expected.slice(1), \"DocumentFragment context by tag name\");\n    assert.deepEqual(jQuery(\"p\", context).get(), [], \"DocumentFragment context (no results)\");\n  } else {\n    assert.ok(\"skip\", \"selection on document fragments not supported in selector-native\");\n    assert.ok(\"skip\", \"selection on document fragments not supported in selector-native\");\n    assert.ok(\"skip\", \"selection on document fragments not supported in selector-native\");\n  }\n  if (QUnit.jQuerySelectors) {\n    assert.deepEqual(jQuery(\"em + :not(:has(*)):not(:empty), foo\", context.firstChild).get(), expected.slice(0, 1), \"Non-qSA path correctly sets detached context for sibling selectors (jQuery trac-14351)\");\n  } else {\n    assert.ok(\"skip\", \":has not supported in selector-native\");\n  }\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"caching does not introduce bugs","suites":["selector"],"line":1235,"code":"QUnit.test(\"caching does not introduce bugs\", function (assert) {\n  assert.expect(3);\n  var sap = document.getElementById(\"sap\");\n  jQuery(\":not(code)\", document.getElementById(\"ap\"));\n  assert.deepEqual(jQuery(\":not(code)\", document.getElementById(\"foo\")).get(), q(\"sndp\", \"en\", \"yahoo\", \"sap\", \"anchor2\", \"simon\"), \"Reusing selector with new context\");\n  if (QUnit.jQuerySelectorsPos) {\n    assert.t(\"Deep ancestry caching in post-positional element matcher (jQuery trac-14657)\", \"#qunit-fixture a:lt(3):parent\", [\"simon1\", \"google\", \"groups\"]);\n  } else {\n    assert.ok(\"skip\", \"Positional selectors are not supported\");\n  }\n  sap.className = \"original\";\n  jQuery(\"#qunit-fixture .original\");\n  document.getElementById(\"nothiddendiv\").appendChild(sap.cloneNode(true)).className = \"clone\";\n  assert.equal(jQuery(\"#qunit-fixture .clone [href*='2']\").length, 1, \"Cloning does not poison caches\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"disconnected nodes","suites":["selector"],"line":1250,"code":"QUnit.test(\"disconnected nodes\", function (assert) {\n  assert.expect(1);\n  var $div = jQuery(\"<div></div>\");\n  assert.equal($div.is(\"div\"), true, \"Make sure .is('nodeName') works on disconnected nodes.\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"find in document fragments","suites":["selector"],"line":1355,"code":"QUnit.test(\"find in document fragments\", function (assert) {\n  assert.expect(1);\n  var elem,\n    nonnodes = jQuery(\"#nonnodes\").contents(),\n    fragment = document.createDocumentFragment();\n  nonnodes.each(function () {\n    fragment.appendChild(this);\n  });\n  elem = jQuery(fragment).find(\"#nonnodesElement\");\n  assert.strictEqual(elem.length, 1, \"Selection works\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"jQuery.uniqueSort","suites":["selector"],"line":1412,"code":"QUnit.test(\"jQuery.uniqueSort\", function (assert) {\n  assert.expect(14);\n  var fixtures = getUniqueSortFixtures();\n  function Arrayish(arr) {\n    var i = this.length = arr.length;\n    while (i--) {\n      this[i] = arr[i];\n    }\n  }\n  Arrayish.prototype = {\n    sliceForTestOnly: [].slice\n  };\n  jQuery.each(fixtures, function (label, fixture) {\n    var length = fixture.length || fixture.input.length;\n\n    // We duplicate `fixture.input` because otherwise it is modified by `uniqueSort`\n    // and the second test becomes worthless.\n    assert.deepEqual(jQuery.uniqueSort(fixture.input.slice(0)).slice(0, length), fixture.expected, label + \" (array)\");\n    assert.deepEqual(jQuery.uniqueSort(new Arrayish(fixture.input)).sliceForTestOnly(0, length), fixture.expected, label + \" (quasi-array)\");\n  });\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"uniqueSort()","suites":["selector"],"line":1433,"code":"QUnit.test(\"uniqueSort()\", function (assert) {\n  assert.expect(28);\n  var fixtures = getUniqueSortFixtures();\n  jQuery.each(fixtures, function (label, fixture) {\n    var length = fixture.length || fixture.input.length,\n      fixtureInputCopy = fixture.input.slice(0),\n      sortedElem = jQuery(fixture.input).uniqueSort();\n    assert.deepEqual(fixture.input, fixtureInputCopy, \"Fixture not modified (\" + label + \")\");\n    assert.deepEqual(sortedElem.slice(0, length).toArray(), fixture.expected, label);\n\n    // Chaining\n    assert.ok(sortedElem instanceof jQuery, \"chaining\");\n    assert.deepEqual(sortedElem.end().toArray(), fixture.input, label);\n  });\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"Iframe dispatch should not affect jQuery (trac-13936)","suites":["selector"],"line":1460,"code":"QUnit.test(\"Iframe dispatch should not affect jQuery (trac-13936)\", function (assert) {\n  assert.expect(1);\n  var loaded = false,\n    thrown = false,\n    iframe = document.getElementById(\"iframe\"),\n    iframeDoc = iframe.contentDocument || iframe.contentWindow.document,\n    done = assert.async();\n  jQuery(iframe).on(\"load\", function () {\n    var form;\n    try {\n      iframeDoc = this.contentDocument || this.contentWindow.document;\n      form = jQuery(\"#navigate\", iframeDoc)[0];\n    } catch (e) {\n      thrown = e;\n    }\n    if (loaded) {\n      assert.strictEqual(thrown, false, \"No error thrown from post-reload jQuery call\");\n\n      // clean up\n      jQuery(iframe).off();\n      done();\n    } else {\n      loaded = true;\n      form.submit();\n    }\n  });\n  iframeDoc.open();\n  iframeDoc.write(\"<body><form id='navigate' action='?'></form></body>\");\n  iframeDoc.close();\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"jQuery.escapeSelector","suites":["selector"],"line":1490,"code":"QUnit.test(\"jQuery.escapeSelector\", function (assert) {\n  assert.expect(58);\n\n  // Edge cases\n  assert.equal(jQuery.escapeSelector(), \"undefined\", \"Converts undefined to string\");\n  assert.equal(jQuery.escapeSelector(\"-\"), \"\\\\-\", \"Escapes standalone dash\");\n  assert.equal(jQuery.escapeSelector(\"-a\"), \"-a\", \"Doesn't escape leading dash followed by non-number\");\n  assert.equal(jQuery.escapeSelector(\"--\"), \"--\", \"Doesn't escape standalone double dash\");\n  assert.equal(jQuery.escapeSelector(\"\\uFFFD\"), \"\\uFFFD\", \"Doesn't escape standalone replacement character\");\n  assert.equal(jQuery.escapeSelector(\"a\\uFFFD\"), \"a\\uFFFD\", \"Doesn't escape trailing replacement character\");\n  assert.equal(jQuery.escapeSelector(\"\\uFFFDb\"), \"\\uFFFDb\", \"Doesn't escape leading replacement character\");\n  assert.equal(jQuery.escapeSelector(\"a\\uFFFDb\"), \"a\\uFFFDb\", \"Doesn't escape embedded replacement character\");\n\n  // Derived from CSSOM tests\n  // https://test.csswg.org/harness/test/cssom-1_dev/section/7.1/\n\n  // String conversion\n  assert.equal(jQuery.escapeSelector(true), \"true\", \"Converts boolean true to string\");\n  assert.equal(jQuery.escapeSelector(false), \"false\", \"Converts boolean true to string\");\n  assert.equal(jQuery.escapeSelector(null), \"null\", \"Converts null to string\");\n  assert.equal(jQuery.escapeSelector(\"\"), \"\", \"Doesn't modify empty string\");\n\n  // Null bytes\n  assert.equal(jQuery.escapeSelector(\"\\0\"), \"\\uFFFD\", \"Escapes null-character input as replacement character\");\n  assert.equal(jQuery.escapeSelector(\"a\\0\"), \"a\\uFFFD\", \"Escapes trailing-null input as replacement character\");\n  assert.equal(jQuery.escapeSelector(\"\\0b\"), \"\\uFFFDb\", \"Escapes leading-null input as replacement character\");\n  assert.equal(jQuery.escapeSelector(\"a\\0b\"), \"a\\uFFFDb\", \"Escapes embedded-null input as replacement character\");\n\n  // Number prefix\n  assert.equal(jQuery.escapeSelector(\"0a\"), \"\\\\30 a\", \"Escapes leading 0\");\n  assert.equal(jQuery.escapeSelector(\"1a\"), \"\\\\31 a\", \"Escapes leading 1\");\n  assert.equal(jQuery.escapeSelector(\"2a\"), \"\\\\32 a\", \"Escapes leading 2\");\n  assert.equal(jQuery.escapeSelector(\"3a\"), \"\\\\33 a\", \"Escapes leading 3\");\n  assert.equal(jQuery.escapeSelector(\"4a\"), \"\\\\34 a\", \"Escapes leading 4\");\n  assert.equal(jQuery.escapeSelector(\"5a\"), \"\\\\35 a\", \"Escapes leading 5\");\n  assert.equal(jQuery.escapeSelector(\"6a\"), \"\\\\36 a\", \"Escapes leading 6\");\n  assert.equal(jQuery.escapeSelector(\"7a\"), \"\\\\37 a\", \"Escapes leading 7\");\n  assert.equal(jQuery.escapeSelector(\"8a\"), \"\\\\38 a\", \"Escapes leading 8\");\n  assert.equal(jQuery.escapeSelector(\"9a\"), \"\\\\39 a\", \"Escapes leading 9\");\n\n  // Letter-number prefix\n  assert.equal(jQuery.escapeSelector(\"a0b\"), \"a0b\", \"Doesn't escape embedded 0\");\n  assert.equal(jQuery.escapeSelector(\"a1b\"), \"a1b\", \"Doesn't escape embedded 1\");\n  assert.equal(jQuery.escapeSelector(\"a2b\"), \"a2b\", \"Doesn't escape embedded 2\");\n  assert.equal(jQuery.escapeSelector(\"a3b\"), \"a3b\", \"Doesn't escape embedded 3\");\n  assert.equal(jQuery.escapeSelector(\"a4b\"), \"a4b\", \"Doesn't escape embedded 4\");\n  assert.equal(jQuery.escapeSelector(\"a5b\"), \"a5b\", \"Doesn't escape embedded 5\");\n  assert.equal(jQuery.escapeSelector(\"a6b\"), \"a6b\", \"Doesn't escape embedded 6\");\n  assert.equal(jQuery.escapeSelector(\"a7b\"), \"a7b\", \"Doesn't escape embedded 7\");\n  assert.equal(jQuery.escapeSelector(\"a8b\"), \"a8b\", \"Doesn't escape embedded 8\");\n  assert.equal(jQuery.escapeSelector(\"a9b\"), \"a9b\", \"Doesn't escape embedded 9\");\n\n  // Dash-number prefix\n  assert.equal(jQuery.escapeSelector(\"-0a\"), \"-\\\\30 a\", \"Escapes 0 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-1a\"), \"-\\\\31 a\", \"Escapes 1 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-2a\"), \"-\\\\32 a\", \"Escapes 2 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-3a\"), \"-\\\\33 a\", \"Escapes 3 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-4a\"), \"-\\\\34 a\", \"Escapes 4 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-5a\"), \"-\\\\35 a\", \"Escapes 5 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-6a\"), \"-\\\\36 a\", \"Escapes 6 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-7a\"), \"-\\\\37 a\", \"Escapes 7 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-8a\"), \"-\\\\38 a\", \"Escapes 8 after leading dash\");\n  assert.equal(jQuery.escapeSelector(\"-9a\"), \"-\\\\39 a\", \"Escapes 9 after leading dash\");\n\n  // Double dash prefix\n  assert.equal(jQuery.escapeSelector(\"--a\"), \"--a\", \"Doesn't escape leading double dash\");\n\n  // Miscellany\n  assert.equal(jQuery.escapeSelector(\"\\x01\\x02\\x1E\\x1F\"), \"\\\\1 \\\\2 \\\\1e \\\\1f \", \"Escapes C0 control characters\");\n  assert.equal(jQuery.escapeSelector(\"\\x80\\x2D\\x5F\\xA9\"), \"\\x80\\x2D\\x5F\\xA9\", \"Doesn't escape general punctuation or non-ASCII ISO-8859-1 characters\");\n  assert.equal(jQuery.escapeSelector(\"\\x7F\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8A\\x8B\\x8C\\x8D\\x8E\\x8F\\x90\" + \"\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9A\\x9B\\x9C\\x9D\\x9E\\x9F\"), \"\\\\7f \\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8A\\x8B\\x8C\\x8D\\x8E\\x8F\\x90\" + \"\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9A\\x9B\\x9C\\x9D\\x9E\\x9F\", \"Escapes DEL control character\");\n  assert.equal(jQuery.escapeSelector(\"\\xA0\\xA1\\xA2\"), \"\\xA0\\xA1\\xA2\", \"Doesn't escape non-ASCII ISO-8859-1 characters\");\n  assert.equal(jQuery.escapeSelector(\"a0123456789b\"), \"a0123456789b\", \"Doesn't escape embedded numbers\");\n  assert.equal(jQuery.escapeSelector(\"abcdefghijklmnopqrstuvwxyz\"), \"abcdefghijklmnopqrstuvwxyz\", \"Doesn't escape lowercase ASCII letters\");\n  assert.equal(jQuery.escapeSelector(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"Doesn't escape uppercase ASCII letters\");\n  assert.equal(jQuery.escapeSelector(\"\\x20\\x21\\x78\\x79\"), \"\\\\ \\\\!xy\", \"Escapes non-word ASCII characters\");\n\n  // Astral symbol (U+1D306 TETRAGRAM FOR CENTRE)\n  assert.equal(jQuery.escapeSelector(\"\\uD834\\uDF06\"), \"\\uD834\\uDF06\", \"Doesn't escape astral characters\");\n\n  // Lone surrogates\n  assert.equal(jQuery.escapeSelector(\"\\uDF06\"), \"\\uDF06\", \"Doesn't escape lone low surrogate\");\n  assert.equal(jQuery.escapeSelector(\"\\uD834\"), \"\\uD834\", \"Doesn't escape lone high surrogate\");\n});","file":"unit/selector.js","skipped":false,"dir":"test"},{"name":"jQuery.param()","suites":["serialize"],"line":4,"code":"QUnit.test(\"jQuery.param()\", function (assert) {\n  assert.expect(24);\n  var params;\n  params = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"quux\": \"All your base are belong to us\"\n  };\n  assert.equal(jQuery.param(params), \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\");\n  params = {\n    \"string\": \"foo\",\n    \"null\": null,\n    \"undefined\": undefined\n  };\n  assert.equal(jQuery.param(params), \"string=foo&null=&undefined=\", \"handle nulls and undefineds properly\");\n  params = {\n    \"someName\": [1, 2, 3],\n    \"regularThing\": \"blah\"\n  };\n  assert.equal(jQuery.param(params), \"someName%5B%5D=1&someName%5B%5D=2&someName%5B%5D=3&regularThing=blah\", \"with array\");\n  params = {\n    \"foo\": [\"a\", \"b\", \"c\"]\n  };\n  assert.equal(jQuery.param(params), \"foo%5B%5D=a&foo%5B%5D=b&foo%5B%5D=c\", \"with array of strings\");\n  params = {\n    \"foo\": [\"baz\", 42, \"All your base are belong to us\"]\n  };\n  assert.equal(jQuery.param(params), \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\");\n  params = {\n    \"foo\": {\n      \"bar\": \"baz\",\n      \"beep\": 42,\n      \"quux\": \"All your base are belong to us\"\n    }\n  };\n  assert.equal(jQuery.param(params), \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\");\n  params = {\n    a: [1, 2],\n    b: {\n      c: 3,\n      d: [4, 5],\n      e: {\n        x: [6],\n        y: 7,\n        z: [8, 9]\n      },\n      f: true,\n      g: false,\n      h: undefined\n    },\n    i: [10, 11],\n    j: true,\n    k: false,\n    l: [undefined, 0],\n    m: \"cowboy hat?\"\n  };\n  assert.equal(decodeURIComponent(jQuery.param(params)), \"a[]=1&a[]=2&b[c]=3&b[d][]=4&b[d][]=5&b[e][x][]=6&b[e][y]=7&b[e][z][]=8&b[e][z][]=9&b[f]=true&b[g]=false&b[h]=&i[]=10&i[]=11&j=true&k=false&l[]=&l[]=0&m=cowboy hat?\", \"huge structure\");\n  params = {\n    \"a\": [0, [1, 2], [3, [4, 5], [6]], {\n      \"b\": [7, [8, 9], [{\n        \"c\": 10,\n        \"d\": 11\n      }], [[12]], [[[13]]], {\n        \"e\": {\n          \"f\": {\n            \"g\": [14, [15]]\n          }\n        }\n      }, 16]\n    }, 17]\n  };\n  assert.equal(decodeURIComponent(jQuery.param(params)), \"a[]=0&a[1][]=1&a[1][]=2&a[2][]=3&a[2][1][]=4&a[2][1][]=5&a[2][2][]=6&a[3][b][]=7&a[3][b][1][]=8&a[3][b][1][]=9&a[3][b][2][0][c]=10&a[3][b][2][0][d]=11&a[3][b][3][0][]=12&a[3][b][4][0][0][]=13&a[3][b][5][e][f][g][]=14&a[3][b][5][e][f][g][1][]=15&a[3][b][]=16&a[]=17\", \"nested arrays\");\n  params = {\n    \"a\": [1, 2],\n    \"b\": {\n      \"c\": 3,\n      \"d\": [4, 5],\n      \"e\": {\n        \"x\": [6],\n        \"y\": 7,\n        \"z\": [8, 9]\n      },\n      \"f\": true,\n      \"g\": false,\n      \"h\": undefined\n    },\n    \"i\": [10, 11],\n    \"j\": true,\n    \"k\": false,\n    \"l\": [undefined, 0],\n    \"m\": \"cowboy hat?\"\n  };\n  assert.equal(jQuery.param(params, true), \"a=1&a=2&b=%5Bobject%20Object%5D&i=10&i=11&j=true&k=false&l=&l=0&m=cowboy%20hat%3F\", \"huge structure, forced traditional\");\n  assert.equal(decodeURIComponent(jQuery.param({\n    \"a\": [1, 2, 3],\n    \"b[]\": [4, 5, 6],\n    \"c[d]\": [7, 8, 9],\n    \"e\": {\n      \"f\": [10],\n      \"g\": [11, 12],\n      \"h\": 13\n    }\n  })), \"a[]=1&a[]=2&a[]=3&b[]=4&b[]=5&b[]=6&c[d][]=7&c[d][]=8&c[d][]=9&e[f][]=10&e[g][]=11&e[g][]=12&e[h]=13\", \"Make sure params are not double-encoded.\");\n\n  // trac-7945\n  assert.equal(jQuery.param({\n    \"jquery\": \"1.4.2\"\n  }), \"jquery=1.4.2\", \"Check that object with a jQuery property get serialized correctly\");\n  params = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"quux\": \"All your base are belong to us\"\n  };\n  assert.equal(jQuery.param(params, true), \"foo=bar&baz=42&quux=All%20your%20base%20are%20belong%20to%20us\", \"simple\");\n  params = {\n    \"someName\": [1, 2, 3],\n    \"regularThing\": \"blah\"\n  };\n  assert.equal(jQuery.param(params, true), \"someName=1&someName=2&someName=3&regularThing=blah\", \"with array\");\n  params = {\n    \"foo\": [\"a\", \"b\", \"c\"]\n  };\n  assert.equal(jQuery.param(params, true), \"foo=a&foo=b&foo=c\", \"with array of strings\");\n  params = {\n    \"foo[]\": [\"baz\", 42, \"All your base are belong to us\"]\n  };\n  assert.equal(jQuery.param(params, true), \"foo%5B%5D=baz&foo%5B%5D=42&foo%5B%5D=All%20your%20base%20are%20belong%20to%20us\", \"more array\");\n  params = {\n    \"foo[bar]\": \"baz\",\n    \"foo[beep]\": 42,\n    \"foo[quux]\": \"All your base are belong to us\"\n  };\n  assert.equal(jQuery.param(params, true), \"foo%5Bbar%5D=baz&foo%5Bbeep%5D=42&foo%5Bquux%5D=All%20your%20base%20are%20belong%20to%20us\", \"even more arrays\");\n  params = {\n    a: [1, 2],\n    b: {\n      c: 3,\n      d: [4, 5],\n      e: {\n        x: [6],\n        y: 7,\n        z: [8, 9]\n      },\n      f: true,\n      g: false,\n      h: undefined\n    },\n    i: [10, 11],\n    j: true,\n    k: false,\n    l: [undefined, 0],\n    m: \"cowboy hat?\"\n  };\n  assert.equal(jQuery.param(params, true), \"a=1&a=2&b=%5Bobject%20Object%5D&i=10&i=11&j=true&k=false&l=&l=0&m=cowboy%20hat%3F\", \"huge structure\");\n  params = {\n    \"a\": [0, [1, 2], [3, [4, 5], [6]], {\n      \"b\": [7, [8, 9], [{\n        \"c\": 10,\n        d: 11\n      }], [[12]], [[[13]]], {\n        \"e\": {\n          \"f\": {\n            \"g\": [14, [15]]\n          }\n        }\n      }, 16]\n    }, 17]\n  };\n  assert.equal(jQuery.param(params, true), \"a=0&a=1%2C2&a=3%2C4%2C5%2C6&a=%5Bobject%20Object%5D&a=17\", \"nested arrays (not possible when traditional == true)\");\n  params = {\n    a: [1, 2],\n    b: {\n      c: 3,\n      d: [4, 5],\n      e: {\n        x: [6],\n        y: 7,\n        z: [8, 9]\n      },\n      f: true,\n      g: false,\n      h: undefined\n    },\n    i: [10, 11],\n    j: true,\n    k: false,\n    l: [undefined, 0],\n    m: \"cowboy hat?\"\n  };\n  assert.equal(decodeURIComponent(jQuery.param(params)), \"a[]=1&a[]=2&b[c]=3&b[d][]=4&b[d][]=5&b[e][x][]=6&b[e][y]=7&b[e][z][]=8&b[e][z][]=9&b[f]=true&b[g]=false&b[h]=&i[]=10&i[]=11&j=true&k=false&l[]=&l[]=0&m=cowboy hat?\", \"huge structure, forced not traditional\");\n  params = {\n    \"param1\": null\n  };\n  assert.equal(jQuery.param(params), \"param1=\", \"Make sure that null params aren't traversed.\");\n  params = {\n    \"param1\": function () {},\n    \"param2\": function () {\n      return null;\n    }\n  };\n  assert.equal(jQuery.param(params, false), \"param1=&param2=\", \"object with function property that returns null value\");\n  params = {\n    \"test\": {\n      \"length\": 3,\n      \"foo\": \"bar\"\n    }\n  };\n  assert.equal(jQuery.param(params), \"test%5Blength%5D=3&test%5Bfoo%5D=bar\", \"Sub-object with a length property\");\n  params = {\n    \"test\": [1, 2, null]\n  };\n  assert.equal(jQuery.param(params), \"test%5B%5D=1&test%5B%5D=2&test%5B%5D=\", \"object with array property with null value\");\n  params = undefined;\n  assert.equal(jQuery.param(params), \"\", \"jQuery.param( undefined ) === empty string\");\n});","file":"unit/serialize.js","skipped":false,"dir":"test"},{"name":"jQuery.param() Constructed prop values","suites":["serialize"],"line":228,"code":"QUnit.test(\"jQuery.param() Constructed prop values\", function (assert) {\n  assert.expect(4);\n\n  /** @constructor */\n  function Record() {\n    this.prop = \"val\";\n  }\n  var MyString = String,\n    MyNumber = Number,\n    params = {\n      \"test\": new MyString(\"foo\")\n    };\n  assert.equal(jQuery.param(params, false), \"test=foo\", \"Do not mistake new String() for a plain object\");\n  params = {\n    \"test\": new MyNumber(5)\n  };\n  assert.equal(jQuery.param(params, false), \"test=5\", \"Do not mistake new Number() for a plain object\");\n  params = {\n    \"test\": new Date()\n  };\n  assert.ok(jQuery.param(params, false), \"(Non empty string returned) Do not mistake new Date() for a plain object\");\n\n  // should allow non-native constructed objects\n  params = {\n    \"test\": new Record()\n  };\n  assert.equal(jQuery.param(params, false), jQuery.param({\n    \"test\": {\n      \"prop\": \"val\"\n    }\n  }), \"Allow non-native constructed objects\");\n});","file":"unit/serialize.js","skipped":false,"dir":"test"},{"name":"serialize()","suites":["serialize"],"line":260,"code":"QUnit.test(\"serialize()\", function (assert) {\n  assert.expect(6);\n\n  // Add html5 elements only for serialize because selector can't yet find them on non-html5 browsers\n  jQuery(\"#search\").after(\"<input type='email' id='html5email' name='email' value='dave@jquery.com' />\" + \"<input type='number' id='html5number' name='number' value='43' />\" + \"<input type='file' name='fileupload' />\");\n  assert.equal(jQuery(\"#form\").serialize(), \"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search&email=dave%40jquery.com&number=43&select1=&select2=3&select3=1&select3=2&select5=3\", \"Check form serialization as query string\");\n  assert.equal(jQuery(\"input,select,textarea,button\", \"#form\").serialize(), \"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search&email=dave%40jquery.com&number=43&select1=&select2=3&select3=1&select3=2&select5=3\", \"Check input serialization as query string\");\n  assert.equal(jQuery(\"#testForm\").serialize(), \"T3=%3F%0D%0AZ&H1=x&H2=&PWD=&T1=&T2=YES&My%20Name=me&S1=abc&S3=YES&S4=\", \"Check form serialization as query string\");\n  assert.equal(jQuery(\"input,select,textarea,button\", \"#testForm\").serialize(), \"T3=%3F%0D%0AZ&H1=x&H2=&PWD=&T1=&T2=YES&My%20Name=me&S1=abc&S3=YES&S4=\", \"Check input serialization as query string\");\n  assert.equal(jQuery(\"#form, #testForm\").serialize(), \"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search&email=dave%40jquery.com&number=43&select1=&select2=3&select3=1&select3=2&select5=3&T3=%3F%0D%0AZ&H1=x&H2=&PWD=&T1=&T2=YES&My%20Name=me&S1=abc&S3=YES&S4=\", \"Multiple form serialization as query string\");\n  assert.equal(jQuery(\"#form, #testForm input, #testForm select, #testForm textarea, #testForm button\").serialize(), \"action=Test&radio2=on&check=on&hidden=&foo%5Bbar%5D=&name=name&search=search&email=dave%40jquery.com&number=43&select1=&select2=3&select3=1&select3=2&select5=3&T3=%3F%0D%0AZ&H1=x&H2=&PWD=&T1=&T2=YES&My%20Name=me&S1=abc&S3=YES&S4=\", \"Mixed form/input serialization as query string\");\n  jQuery(\"#html5email, #html5number\").remove();\n});","file":"unit/serialize.js","skipped":false,"dir":"test"},{"name":"Verify that support tests resolve as expected per browser","suites":["support"],"line":103,"code":"  QUnit.test(\"Verify that support tests resolve as expected per browser\", function (assert) {\n    if (!expected) {\n      assert.expect(1);\n      assert.ok(false, \"Known client: \" + userAgent);\n    }\n    var i,\n      prop,\n      j = 0;\n    for (prop in computedSupport) {\n      j++;\n    }\n\n    // Add an assertion per undefined support prop as it may\n    // not even exist on computedSupport but we still want to run\n    // the check.\n    for (prop in expected) {\n      if (expected[prop] === undefined) {\n        j++;\n      }\n    }\n    assert.expect(j);\n    for (i in expected) {\n      assert.equal(computedSupport[i], expected[i], \"jQuery.support['\" + i + \"']: \" + computedSupport[i] + \", expected['\" + i + \"']: \" + expected[i] + \";\\nUser Agent: \" + navigator.userAgent);\n    }\n  });","file":"unit/support.js","skipped":false,"dir":"test"},{"name":"Verify support tests are failing in one of tested browsers","suites":["support"],"line":128,"code":"  QUnit.test(\"Verify support tests are failing in one of tested browsers\", function (assert) {\n    var prop,\n      browserKey,\n      supportTestName,\n      i = 0,\n      supportProps = {},\n      failingSupportProps = {};\n    for (prop in computedSupport) {\n      i++;\n    }\n\n    // Add an assertion per undefined support prop as it may\n    // not even exist on computedSupport but we still want to run\n    // the check.\n    for (prop in expected) {\n      if (expected[prop] === undefined) {\n        i++;\n      }\n    }\n    assert.expect(i);\n\n    // Record all support props and the failing ones and ensure every test\n    // is failing at least once.\n    for (browserKey in expectedMap) {\n      for (supportTestName in expectedMap[browserKey]) {\n        supportProps[supportTestName] = true;\n        if (!expectedMap[browserKey][supportTestName]) {\n          failingSupportProps[supportTestName] = true;\n        }\n      }\n    }\n    for (supportTestName in supportProps) {\n      assert.ok(failingSupportProps[supportTestName], \"jQuery.support['\" + supportTestName + \"'] is expected to fail at least in one browser\");\n    }\n  });","file":"unit/support.js","skipped":false,"dir":"test"},{"name":"find(String)","suites":["traversing"],"line":4,"code":"QUnit.test(\"find(String)\", function (assert) {\n  assert.expect(1);\n  assert.equal(jQuery(\"#foo\").find(\".blogTest\").text(), \"Yahoo\", \"Basic selector\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"find(String) under non-elements","suites":["traversing"],"line":8,"code":"QUnit.test(\"find(String) under non-elements\", function (assert) {\n  assert.expect(2);\n  var j = jQuery(\"#nonnodes\").contents();\n  assert.equal(j.find(\"div\").length, 0, \"Check node,textnode,comment to find zero divs\");\n  assert.equal(j.find(\"div\").addBack().length, 3, \"Check node,textnode,comment to find zero divs, but preserves pushStack\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"find(node|jQuery object)","suites":["traversing"],"line":21,"code":"QUnit.test(\"find(node|jQuery object)\", function (assert) {\n  assert.expect(13);\n  var $foo = jQuery(\"#foo\"),\n    $blog = jQuery(\".blogTest\"),\n    $first = jQuery(\"#first\"),\n    $two = $blog.add($first),\n    $twoMore = jQuery(\"#ap\").add($blog),\n    $fooTwo = $foo.add($blog);\n  assert.equal($foo.find($blog).text(), \"Yahoo\", \"Find with blog jQuery object\");\n  assert.equal($foo.find($blog[0]).text(), \"Yahoo\", \"Find with blog node\");\n  assert.equal($foo.find($first).length, 0, \"#first is not in #foo\");\n  assert.equal($foo.find($first[0]).length, 0, \"#first not in #foo (node)\");\n  assert.deepEqual($foo.find($two).get(), $blog.get(), \"Find returns only nodes within #foo\");\n  assert.deepEqual($foo.find($twoMore).get(), $blog.get(), \"...regardless of order\");\n  assert.ok($fooTwo.find($blog).is(\".blogTest\"), \"Blog is part of the collection, but also within foo\");\n  assert.ok($fooTwo.find($blog[0]).is(\".blogTest\"), \"Blog is part of the collection, but also within foo(node)\");\n  assert.equal($two.find($foo).length, 0, \"Foo is not in two elements\");\n  assert.equal($two.find($foo[0]).length, 0, \"Foo is not in two elements(node)\");\n  assert.equal($two.find($first).length, 0, \"first is in the collection and not within two\");\n  assert.equal($two.find($first).length, 0, \"first is in the collection and not within two(node)\");\n  assert.equal($two.find($foo[0]).addBack().length, 2, \"find preserves the pushStack, see trac-12009\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"is(falsy|invalid)","suites":["traversing"],"line":43,"code":"QUnit.test(\"is(falsy|invalid)\", function (assert) {\n  assert.expect(5);\n  assert.ok(!jQuery(\"#foo\").is(0), \"Expected false for an invalid expression - 0\");\n  assert.ok(!jQuery(\"#foo\").is(null), \"Expected false for an invalid expression - null\");\n  assert.ok(!jQuery(\"#foo\").is(\"\"), \"Expected false for an invalid expression - \\\"\\\"\");\n  assert.ok(!jQuery(\"#foo\").is(undefined), \"Expected false for an invalid expression - undefined\");\n  assert.ok(!jQuery(\"#foo\").is({\n    plain: \"object\"\n  }), \"Check passing invalid object\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"is(String)","suites":["traversing"],"line":53,"code":"QUnit.test(\"is(String)\", function (assert) {\n  assert.expect(33);\n  var link = document.getElementById(\"simon1\"),\n    input = document.getElementById(\"text1\"),\n    option = document.getElementById(\"option1a\"),\n    disconnected = document.createElement(\"div\");\n  assert.ok(jQuery(\"#form\").is(\"form\"), \"Check for element: A form must be a form\");\n  assert.ok(!jQuery(\"#form\").is(\"div\"), \"Check for element: A form is not a div\");\n  assert.ok(jQuery(\"#mark\").is(\".blog\"), \"Check for class: Expected class 'blog'\");\n  assert.ok(!jQuery(\"#mark\").is(\".link\"), \"Check for class: Did not expect class 'link'\");\n  assert.ok(jQuery(\"#simon\").is(\".blog.link\"), \"Check for multiple classes: Expected classes 'blog' and 'link'\");\n  assert.ok(!jQuery(\"#simon\").is(\".blogTest\"), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\");\n  assert.ok(jQuery(\"#en\").is(\"[lang=\\\"en\\\"]\"), \"Check for attribute: Expected attribute lang to be 'en'\");\n  assert.ok(!jQuery(\"#en\").is(\"[lang=\\\"de\\\"]\"), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\");\n  assert.ok(jQuery(\"#text1\").is(\"[type=\\\"text\\\"]\"), \"Check for attribute: Expected attribute type to be 'text'\");\n  assert.ok(!jQuery(\"#text1\").is(\"[type=\\\"radio\\\"]\"), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\");\n  assert.ok(jQuery(\"#text2\").is(\":disabled\"), \"Check for pseudoclass: Expected to be disabled\");\n  assert.ok(!jQuery(\"#text1\").is(\":disabled\"), \"Check for pseudoclass: Expected not disabled\");\n  assert.ok(jQuery(\"#radio2\").is(\":checked\"), \"Check for pseudoclass: Expected to be checked\");\n  assert.ok(!jQuery(\"#radio1\").is(\":checked\"), \"Check for pseudoclass: Expected not checked\");\n\n  // test is() with comma-separated expressions\n  assert.ok(jQuery(\"#en\").is(\"[lang=\\\"en\\\"],[lang=\\\"de\\\"]\"), \"Comma-separated; Check for lang attribute: Expect en or de\");\n  assert.ok(jQuery(\"#en\").is(\"[lang=\\\"de\\\"],[lang=\\\"en\\\"]\"), \"Comma-separated; Check for lang attribute: Expect en or de\");\n  assert.ok(jQuery(\"#en\").is(\"[lang=\\\"en\\\"] , [lang=\\\"de\\\"]\"), \"Comma-separated; Check for lang attribute: Expect en or de\");\n  assert.ok(jQuery(\"#en\").is(\"[lang=\\\"de\\\"] , [lang=\\\"en\\\"]\"), \"Comma-separated; Check for lang attribute: Expect en or de\");\n  link.title = \"Don't click me\";\n  assert.ok(jQuery(link).is(\"[rel='bookmark']\"), \"attribute-equals string (delimited via apostrophes)\");\n  assert.ok(jQuery(link).is(\"[rel=bookmark]\"), \"attribute-equals identifier\");\n  assert.ok(jQuery(link).is(\"[\\nrel = bookmark\\t]\"), \"attribute-equals identifier (whitespace ignored)\");\n  assert.ok(jQuery(link).is(\"a[title=\\\"Don't click me\\\"]\"), \"attribute-equals string containing single quote\");\n\n  // jQuery trac-12303\n  input.setAttribute(\"data-pos\", \":first\");\n  assert.ok(jQuery(input).is(\"input[data-pos=\\\\:first]\"), \"attribute-equals POS in identifier\");\n  assert.ok(jQuery(input).is(\"input[data-pos=':first']\"), \"attribute-equals POS in string\");\n  if (QUnit.jQuerySelectors) {\n    assert.ok(jQuery(input).is(\":input[data-pos=':first']\"), \"attribute-equals POS in string after pseudo\");\n  } else {\n    assert.ok(\"skip\", \":input not supported in selector-native\");\n  }\n  option.setAttribute(\"test\", \"\");\n  assert.ok(jQuery(option).is(\"[id=option1a]\"), \"id attribute-equals identifier\");\n  if (QUnit.jQuerySelectors) {\n    assert.ok(jQuery(option).is(\"[id*=option1][type!=checkbox]\"), \"attribute-not-equals identifier\");\n  } else {\n    assert.ok(\"skip\", \"attribute-not-equals not supported in selector-native\");\n  }\n  assert.ok(jQuery(option).is(\"[id*=option1]\"), \"attribute-contains identifier\");\n  assert.ok(!jQuery(option).is(\"[test^='']\"), \"attribute-starts-with empty string (negative)\");\n  option.className = \"=]\";\n  assert.ok(jQuery(option).is(\".\\\\=\\\\]\"), \"class selector with attribute-equals confusable\");\n  assert.ok(jQuery(disconnected).is(\"div\"), \"disconnected element\");\n  assert.ok(jQuery(link).is(\"* > *\"), \"child combinator matches in document\");\n  assert.ok(!jQuery(disconnected).is(\"* > *\"), \"child combinator fails in fragment\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"is() against non-elements (trac-10178)","suites":["traversing"],"line":109,"code":"QUnit.test(\"is() against non-elements (trac-10178)\", function (assert) {\n  assert.expect(14);\n  var label,\n    i,\n    test,\n    collection = jQuery(document),\n    tests = [\"a\", \"*\"],\n    nonelements = {\n      text: document.createTextNode(\"\"),\n      comment: document.createComment(\"\"),\n      document: document,\n      window: window,\n      array: [],\n      \"plain object\": {},\n      \"function\": function () {}\n    };\n  for (label in nonelements) {\n    collection[0] = nonelements[label];\n    for (i = 0; i < tests.length; i++) {\n      test = tests[i];\n      assert.ok(!collection.is(test), label + \" does not match \\\"\" + test + \"\\\"\");\n    }\n  }\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"is(jQuery)","suites":["traversing"],"line":133,"code":"QUnit.test(\"is(jQuery)\", function (assert) {\n  assert.expect(19);\n  assert.ok(jQuery(\"#form\").is(jQuery(\"form\")), \"Check for element: A form is a form\");\n  assert.ok(!jQuery(\"#form\").is(jQuery(\"div\")), \"Check for element: A form is not a div\");\n  assert.ok(jQuery(\"#mark\").is(jQuery(\".blog\")), \"Check for class: Expected class 'blog'\");\n  assert.ok(!jQuery(\"#mark\").is(jQuery(\".link\")), \"Check for class: Did not expect class 'link'\");\n  assert.ok(jQuery(\"#simon\").is(jQuery(\".blog.link\")), \"Check for multiple classes: Expected classes 'blog' and 'link'\");\n  assert.ok(!jQuery(\"#simon\").is(jQuery(\".blogTest\")), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\");\n  assert.ok(jQuery(\"#en\").is(jQuery(\"[lang=\\\"en\\\"]\")), \"Check for attribute: Expected attribute lang to be 'en'\");\n  assert.ok(!jQuery(\"#en\").is(jQuery(\"[lang=\\\"de\\\"]\")), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\");\n  assert.ok(jQuery(\"#text1\").is(jQuery(\"[type=\\\"text\\\"]\")), \"Check for attribute: Expected attribute type to be 'text'\");\n  assert.ok(!jQuery(\"#text1\").is(jQuery(\"[type=\\\"radio\\\"]\")), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\");\n  assert.ok(!jQuery(\"#text1\").is(jQuery(\"input:disabled\")), \"Check for pseudoclass: Expected not disabled\");\n  assert.ok(jQuery(\"#radio2\").is(jQuery(\"input:checked\")), \"Check for pseudoclass: Expected to be checked\");\n  assert.ok(!jQuery(\"#radio1\").is(jQuery(\"input:checked\")), \"Check for pseudoclass: Expected not checked\");\n\n  // Some raw elements\n  assert.ok(jQuery(\"#form\").is(jQuery(\"#qunit-fixture form\")[0]), \"Check for element: A form is a form\");\n  assert.ok(!jQuery(\"#form\").is(jQuery(\"div\")[0]), \"Check for element: A form is not a div\");\n  assert.ok(jQuery(\"#mark\").is(jQuery(\".blog\")[0]), \"Check for class: Expected class 'blog'\");\n  assert.ok(!jQuery(\"#mark\").is(jQuery(\".link\")[0]), \"Check for class: Did not expect class 'link'\");\n  assert.ok(jQuery(\"#simon\").is(jQuery(\".blog.link\")[0]), \"Check for multiple classes: Expected classes 'blog' and 'link'\");\n  assert.ok(!jQuery(\"#simon\").is(jQuery(\".blogTest\")[0]), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"index()","suites":["traversing"],"line":200,"code":"QUnit.test(\"index()\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"#text2\").index(), 2, \"Returns the index of a child amongst its siblings\");\n  assert.equal(jQuery(\"<div></div>\").index(), -1, \"Node without parent returns -1\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"index(Object|String|undefined)","suites":["traversing"],"line":205,"code":"QUnit.test(\"index(Object|String|undefined)\", function (assert) {\n  assert.expect(16);\n  var elements = jQuery([window, document]),\n    inputElements = jQuery(\"#radio1,#radio2,#check1,#check2\");\n\n  // Passing a node\n  assert.equal(elements.index(window), 0, \"Check for index of elements\");\n  assert.equal(elements.index(document), 1, \"Check for index of elements\");\n  assert.equal(inputElements.index(document.getElementById(\"radio1\")), 0, \"Check for index of elements\");\n  assert.equal(inputElements.index(document.getElementById(\"radio2\")), 1, \"Check for index of elements\");\n  assert.equal(inputElements.index(document.getElementById(\"check1\")), 2, \"Check for index of elements\");\n  assert.equal(inputElements.index(document.getElementById(\"check2\")), 3, \"Check for index of elements\");\n  assert.equal(inputElements.index(window), -1, \"Check for not found index\");\n  assert.equal(inputElements.index(document), -1, \"Check for not found index\");\n\n  // Passing a jQuery object\n  // enabled since [5500]\n  assert.equal(elements.index(elements), 0, \"Pass in a jQuery object\");\n  assert.equal(elements.index(elements.eq(1)), 1, \"Pass in a jQuery object\");\n  assert.equal(jQuery(\"#form input[type='radio']\").index(jQuery(\"#radio2\")), 1, \"Pass in a jQuery object\");\n\n  // Passing a selector or nothing\n  // enabled since [6330]\n  assert.equal(jQuery(\"#text2\").index(), 2, \"Check for index amongst siblings\");\n  assert.equal(jQuery(\"#form\").children().eq(4).index(), 4, \"Check for index amongst siblings\");\n  assert.equal(jQuery(\"#radio2\").index(\"#form input[type='radio']\"), 1, \"Check for index within a selector\");\n  assert.equal(jQuery(\"#form input[type='radio']\").index(jQuery(\"#radio2\")), 1, \"Check for index within a selector\");\n  assert.equal(jQuery(\"#radio2\").index(\"#form input[type='text']\"), -1, \"Check for index not found within a selector\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"filter(Selector|undefined)","suites":["traversing"],"line":234,"code":"QUnit.test(\"filter(Selector|undefined)\", function (assert) {\n  assert.expect(9);\n  assert.deepEqual(jQuery(\"#form input\").filter(\":checked\").get(), q(\"radio2\", \"check1\"), \"filter(String)\");\n  assert.deepEqual(jQuery(\"p\").filter(\"#ap, #sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String, String')\");\n  assert.deepEqual(jQuery(\"p\").filter(\"#ap,#sndp\").get(), q(\"ap\", \"sndp\"), \"filter('String,String')\");\n  assert.deepEqual(jQuery(\"p\").filter(null).get(), [], \"filter(null) should return an empty jQuery object\");\n  assert.deepEqual(jQuery(\"p\").filter(undefined).get(), [], \"filter(undefined) should return an empty jQuery object\");\n  assert.deepEqual(jQuery(\"p\").filter(0).get(), [], \"filter(0) should return an empty jQuery object\");\n  assert.deepEqual(jQuery(\"p\").filter(\"\").get(), [], \"filter('') should return an empty jQuery object\");\n\n  // using contents will get comments regular, text, and comment nodes\n  var j = jQuery(\"#nonnodes\").contents();\n  assert.equal(j.filter(\"span\").length, 1, \"Check node,textnode,comment to filter the one span\");\n  assert.equal(j.filter(\"[name]\").length, 0, \"Check node,textnode,comment to filter the one span\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"filter(Function)","suites":["traversing"],"line":249,"code":"QUnit.test(\"filter(Function)\", function (assert) {\n  assert.expect(2);\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").filter(function () {\n    return !jQuery(\"a\", this).length;\n  }).get(), q(\"sndp\", \"first\"), \"filter(Function)\");\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").filter(function (i, elem) {\n    return !jQuery(\"a\", elem).length;\n  }).get(), q(\"sndp\", \"first\"), \"filter(Function) using arg\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"filter(Element)","suites":["traversing"],"line":258,"code":"QUnit.test(\"filter(Element)\", function (assert) {\n  assert.expect(1);\n  var element = document.getElementById(\"text1\");\n  assert.deepEqual(jQuery(\"#form input\").filter(element).get(), q(\"text1\"), \"filter(Element)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"filter(Array)","suites":["traversing"],"line":263,"code":"QUnit.test(\"filter(Array)\", function (assert) {\n  assert.expect(1);\n  var elements = [document.getElementById(\"text1\")];\n  assert.deepEqual(jQuery(\"#form input\").filter(elements).get(), q(\"text1\"), \"filter(Element)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"filter(jQuery)","suites":["traversing"],"line":268,"code":"QUnit.test(\"filter(jQuery)\", function (assert) {\n  assert.expect(1);\n  var elements = jQuery(\"#text1\");\n  assert.deepEqual(jQuery(\"#form input\").filter(elements).get(), q(\"text1\"), \"filter(Element)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"closest()","suites":["traversing"],"line":302,"code":"QUnit.test(\"closest()\", function (assert) {\n  assert.expect(14);\n  var jq;\n  assert.deepEqual(jQuery(\"body\").closest(\"body\").get(), q(\"body\"), \"closest(body)\");\n  assert.deepEqual(jQuery(\"body\").closest(\"html\").get(), q(\"html\"), \"closest(html)\");\n  assert.deepEqual(jQuery(\"body\").closest(\"div\").get(), [], \"closest(div)\");\n  assert.deepEqual(jQuery(\"#qunit-fixture\").closest(\"span,#html\").get(), q(\"html\"), \"closest(span,#html)\");\n\n  // Test .closest() limited by the context\n  jq = jQuery(\"#nothiddendivchild\");\n  assert.deepEqual(jq.closest(\"html\", document.body).get(), [], \"Context limited.\");\n  assert.deepEqual(jq.closest(\"body\", document.body).get(), [], \"Context limited.\");\n  assert.deepEqual(jq.closest(\"#nothiddendiv\", document.body).get(), q(\"nothiddendiv\"), \"Context not reached.\");\n\n  //Test that .closest() returns unique'd set\n  assert.equal(jQuery(\"#qunit-fixture p\").closest(\"#qunit-fixture\").length, 1, \"Closest should return a unique set\");\n\n  // Test on disconnected node\n  assert.equal(jQuery(\"<div><p></p></div>\").find(\"p\").closest(\"table\").length, 0, \"Make sure disconnected closest work.\");\n  assert.deepEqual(jQuery(\"#firstp\").closest(q(\"qunit-fixture\")).get(), q(\"qunit-fixture\"), \"Non-string match target\");\n\n  // Bug trac-7369\n  assert.equal(jQuery(\"<div foo='bar'></div>\").closest(\"[foo]\").length, 1, \"Disconnected nodes with attribute selector\");\n  assert.equal(jQuery(\"<div>text</div>\").closest(\"[lang]\").length, 0, \"Disconnected nodes with text and non-existent attribute selector\");\n  assert.ok(!jQuery(document).closest(\"#foo\").length, \"Calling closest on a document fails silently\");\n  jq = jQuery(\"<div>text</div>\");\n  assert.deepEqual(jq.contents().closest(\"*\").get(), jq.get(), \"Text node input (trac-13332)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"closest(jQuery)","suites":["traversing"],"line":336,"code":"QUnit.test(\"closest(jQuery)\", function (assert) {\n  assert.expect(8);\n  var $child = jQuery(\"#nothiddendivchild\"),\n    $parent = jQuery(\"#nothiddendiv\"),\n    $sibling = jQuery(\"#foo\"),\n    $body = jQuery(\"body\");\n  assert.ok($child.closest($parent).is(\"#nothiddendiv\"), \"closest( jQuery('#nothiddendiv') )\");\n  assert.ok($child.closest($parent[0]).is(\"#nothiddendiv\"), \"closest( jQuery('#nothiddendiv') ) :: node\");\n  assert.ok($child.closest($child).is(\"#nothiddendivchild\"), \"child is included\");\n  assert.ok($child.closest($child[0]).is(\"#nothiddendivchild\"), \"child is included  :: node\");\n  assert.equal($child.closest(document.createElement(\"div\")).length, 0, \"created element is not related\");\n  assert.equal($child.closest($sibling).length, 0, \"Sibling not a parent of child\");\n  assert.equal($child.closest($sibling[0]).length, 0, \"Sibling not a parent of child :: node\");\n  assert.ok($child.closest($body.add($parent)).is(\"#nothiddendiv\"), \"Closest ancestor retrieved.\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(undefined)","suites":["traversing"],"line":361,"code":"QUnit.test(\"not(undefined)\", function (assert) {\n  assert.expect(4);\n  var all = jQuery(\"p\").get();\n  assert.deepEqual(jQuery(\"p\").not(null).get(), all, \"not(null) should have no effect\");\n  assert.deepEqual(jQuery(\"p\").not(undefined).get(), all, \"not(undefined) should have no effect\");\n  assert.deepEqual(jQuery(\"p\").not(0).get(), all, \"not(0) should have no effect\");\n  assert.deepEqual(jQuery(\"p\").not(\"\").get(), all, \"not('') should have no effect\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(Element)","suites":["traversing"],"line":369,"code":"QUnit.test(\"not(Element)\", function (assert) {\n  assert.expect(1);\n  var selects = jQuery(\"#form select\");\n  assert.deepEqual(selects.not(selects[1]).get(), q(\"select1\", \"select3\", \"select4\", \"select5\"), \"filter out DOM element\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(Function)","suites":["traversing"],"line":374,"code":"QUnit.test(\"not(Function)\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").not(function () {\n    return jQuery(\"a\", this).length;\n  }).get(), q(\"sndp\", \"first\"), \"not(Function)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(Array)","suites":["traversing"],"line":380,"code":"QUnit.test(\"not(Array)\", function (assert) {\n  assert.expect(2);\n  assert.equal(jQuery(\"#qunit-fixture > p#ap > a\").not(document.getElementById(\"google\")).length, 2, \"not(DOMElement)\");\n  assert.equal(jQuery(\"p\").not(document.getElementsByTagName(\"p\")).length, 0, \"not(Array-like DOM collection)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(jQuery)","suites":["traversing"],"line":385,"code":"QUnit.test(\"not(jQuery)\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery(\"#qunit-fixture p\").not(jQuery(\"#ap, #sndp, .result\")).get(), q(\"firstp\", \"en\", \"sap\", \"first\"), \"not(jQuery)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"not(arraylike) passes non-element nodes (gh-3226)","suites":["traversing"],"line":397,"code":"QUnit.test(\"not(arraylike) passes non-element nodes (gh-3226)\", function (assert) {\n  assert.expect(5);\n  var mixedContents = jQuery(\"<span id='nonnodesElement'>hi</span> there <!-- mon ami -->\"),\n    mixedLength = mixedContents.length,\n    firstElement = mixedContents.first();\n  assert.deepEqual(mixedContents.not(mixedContents).get(), [], \"not everything\");\n  assert.deepEqual(mixedContents.not(firstElement).length, mixedLength - 1, \"not firstElement\");\n  assert.deepEqual(mixedContents.not([firstElement[0].nextSibling]).length, mixedLength - 1, \"not textnode array\");\n  assert.deepEqual(mixedContents.not(firstElement[0].nextSibling).length, mixedLength - 1, \"not textnode\");\n  assert.deepEqual(mixedContents.not(document.body).get(), mixedContents.get(), \"not with unmatched element\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"has(Element)","suites":["traversing"],"line":408,"code":"QUnit.test(\"has(Element)\", function (assert) {\n  assert.expect(3);\n  var obj, detached, multipleParent;\n  obj = jQuery(\"#qunit-fixture\").has(jQuery(\"#sndp\")[0]);\n  assert.deepEqual(obj.get(), q(\"qunit-fixture\"), \"Keeps elements that have the element as a descendant\");\n  detached = jQuery(\"<a><b><i></i></b></a>\");\n  assert.deepEqual(detached.has(detached.find(\"i\")[0]).get(), detached.get(), \"...Even when detached\");\n  multipleParent = jQuery(\"#qunit-fixture, #header\").has(jQuery(\"#sndp\")[0]);\n  assert.deepEqual(multipleParent.get(), q(\"qunit-fixture\"), \"Does not include elements that do not have the element as a descendant\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"has(Selector)","suites":["traversing"],"line":418,"code":"QUnit.test(\"has(Selector)\", function (assert) {\n  assert.expect(5);\n  var obj, detached, multipleParent, multipleHas;\n  obj = jQuery(\"#qunit-fixture\").has(\"#sndp\");\n  assert.deepEqual(obj.get(), q(\"qunit-fixture\"), \"Keeps elements that have any element matching the selector as a descendant\");\n  detached = jQuery(\"<a><b><i></i></b></a>\");\n  assert.deepEqual(detached.has(\"i\").get(), detached.get(), \"...Even when detached\");\n  multipleParent = jQuery(\"#qunit-fixture, #header\").has(\"#sndp\");\n  assert.deepEqual(multipleParent.get(), q(\"qunit-fixture\"), \"Does not include elements that do not have the element as a descendant\");\n  multipleParent = jQuery(\"#select1, #select2, #select3\").has(\"#option1a, #option3a\");\n  assert.deepEqual(multipleParent.get(), q(\"select1\", \"select3\"), \"Multiple contexts are checks correctly\");\n  multipleHas = jQuery(\"#qunit-fixture\").has(\"#sndp, #first\");\n  assert.deepEqual(multipleHas.get(), q(\"qunit-fixture\"), \"Only adds elements once\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"has(Arrayish)","suites":["traversing"],"line":432,"code":"QUnit.test(\"has(Arrayish)\", function (assert) {\n  assert.expect(4);\n  var simple, detached, multipleParent, multipleHas;\n  simple = jQuery(\"#qunit-fixture\").has(jQuery(\"#sndp\"));\n  assert.deepEqual(simple.get(), q(\"qunit-fixture\"), \"Keeps elements that have any element in the jQuery list as a descendant\");\n  detached = jQuery(\"<a><b><i></i></b></a>\");\n  assert.deepEqual(detached.has(detached.find(\"i\")).get(), detached.get(), \"...Even when detached\");\n  multipleParent = jQuery(\"#qunit-fixture, #header\").has(jQuery(\"#sndp\"));\n  assert.deepEqual(multipleParent.get(), q(\"qunit-fixture\"), \"Does not include elements that do not have an element in the jQuery list as a descendant\");\n  multipleHas = jQuery(\"#qunit-fixture\").has(jQuery(\"#sndp, #first\"));\n  assert.deepEqual(multipleHas.get(), q(\"qunit-fixture\"), \"Only adds elements once\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"addBack()","suites":["traversing"],"line":444,"code":"QUnit.test(\"addBack()\", function (assert) {\n  assert.expect(5);\n  assert.deepEqual(jQuery(\"#en\").siblings().addBack().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for siblings and self\");\n  assert.deepEqual(jQuery(\"#foo\").children().addBack().get(), q(\"foo\", \"sndp\", \"en\", \"sap\"), \"Check for children and self\");\n  assert.deepEqual(jQuery(\"#sndp, #en\").parent().addBack().get(), q(\"foo\", \"sndp\", \"en\"), \"Check for parent and self\");\n  assert.deepEqual(jQuery(\"#groups\").parents(\"p, div\").addBack().get(), q(\"qunit-fixture\", \"ap\", \"groups\"), \"Check for parents and self\");\n  assert.deepEqual(jQuery(\"#select1 > option\").filter(\":first-child\").addBack(\":last-child\").get(), q(\"option1a\", \"option1d\"), \"Should contain the last elems plus the *filtered* prior set elements\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"siblings([String])","suites":["traversing"],"line":452,"code":"QUnit.test(\"siblings([String])\", function (assert) {\n  assert.expect(6);\n  assert.deepEqual(jQuery(\"#en\").siblings().get(), q(\"sndp\", \"sap\"), \"Check for siblings\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).siblings().get(), q(\"nonnodesElement\"), \"Check for text node siblings\");\n  assert.deepEqual(jQuery(\"#foo\").siblings(\"form, b\").get(), q(\"form\", \"floatTest\", \"lengthtest\", \"name-tests\", \"testForm\", \"disabled-tests\"), \"Check for multiple filters\");\n  var set = q(\"sndp\", \"en\", \"sap\");\n  assert.deepEqual(jQuery(\"#en, #sndp\").siblings().get(), set, \"Check for unique results from siblings\");\n  assert.deepEqual(jQuery(\"#option5a\").siblings(\"option[data-attr]\").get(), q(\"option5c\"), \"Has attribute selector in siblings (trac-9261)\");\n  assert.equal(jQuery(\"<a></a>\").siblings().length, 0, \"Detached elements have no siblings (trac-11370)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"children([String])","suites":["traversing"],"line":467,"code":"QUnit.test(\"children([String])\", function (assert) {\n  assert.expect(2);\n  assert.deepEqual(jQuery(\"#foo\").children().get(), q(\"sndp\", \"en\", \"sap\"), \"Check for children\");\n  assert.deepEqual(jQuery(\"#foo\").children(\"#en, #sap\").get(), q(\"en\", \"sap\"), \"Check for multiple filters\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"parent([String])","suites":["traversing"],"line":476,"code":"QUnit.test(\"parent([String])\", function (assert) {\n  assert.expect(6);\n  var $el;\n  assert.equal(jQuery(\"#groups\").parent()[0].id, \"ap\", \"Simple parent check\");\n  assert.equal(jQuery(\"#groups\").parent(\"p\")[0].id, \"ap\", \"Filtered parent check\");\n  assert.equal(jQuery(\"#groups\").parent(\"div\").length, 0, \"Filtered parent check, no match\");\n  assert.equal(jQuery(\"#groups\").parent(\"div, p\")[0].id, \"ap\", \"Check for multiple filters\");\n  assert.deepEqual(jQuery(\"#en, #sndp\").parent().get(), q(\"foo\"), \"Check for unique results from parent\");\n  $el = jQuery(\"<div>text</div>\");\n  assert.deepEqual($el.contents().parent().get(), $el.get(), \"Check for parent of text node (trac-13265)\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"parents([String])","suites":["traversing"],"line":487,"code":"QUnit.test(\"parents([String])\", function (assert) {\n  assert.expect(6);\n  assert.equal(jQuery(\"#groups\").parents()[0].id, \"ap\", \"Simple parents check\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).parents().eq(0).get(), q(\"nonnodes\"), \"Text node parents check\");\n  assert.equal(jQuery(\"#groups\").parents(\"p\")[0].id, \"ap\", \"Filtered parents check\");\n  assert.equal(jQuery(\"#groups\").parents(\"div\")[0].id, \"qunit-fixture\", \"Filtered parents check2\");\n  assert.deepEqual(jQuery(\"#groups\").parents(\"p, div\").get(), q(\"ap\", \"qunit-fixture\"), \"Check for multiple filters\");\n  assert.deepEqual(jQuery(\"#en, #sndp\").parents().get(), q(\"foo\", \"qunit-fixture\", \"body\", \"html\"), \"Check for unique results from parents\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"parentsUntil([String])","suites":["traversing"],"line":496,"code":"QUnit.test(\"parentsUntil([String])\", function (assert) {\n  assert.expect(10);\n  var parents = jQuery(\"#groups\").parents();\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil().get(), parents.get(), \"parentsUntil with no selector (nextAll)\");\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil(\".foo\").get(), parents.get(), \"parentsUntil with invalid selector (nextAll)\");\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil(\"#html\").get(), parents.slice(0, -1).get(), \"Simple parentsUntil check\");\n  assert.equal(jQuery(\"#groups\").parentsUntil(\"#ap\").length, 0, \"Simple parentsUntil check\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).parentsUntil(\"#html\").eq(0).get(), q(\"nonnodes\"), \"Text node parentsUntil check\");\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil(\"#html, #body\").get(), parents.slice(0, 2).get(), \"Less simple parentsUntil check\");\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil(\"#html\", \"div\").get(), jQuery(\"#qunit-fixture\").get(), \"Filtered parentsUntil check\");\n  assert.deepEqual(jQuery(\"#groups\").parentsUntil(\"#html\", \"p,div\").get(), parents.slice(0, 2).get(), \"Multiple-filtered parentsUntil check\");\n  assert.equal(jQuery(\"#groups\").parentsUntil(\"#html\", \"span\").length, 0, \"Filtered parentsUntil check, no match\");\n  assert.deepEqual(jQuery(\"#groups, #ap\").parentsUntil(\"#html\", \"p,div\").get(), parents.slice(0, 2).get(), \"Multi-source, multiple-filtered parentsUntil check\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"next([String])","suites":["traversing"],"line":510,"code":"QUnit.test(\"next([String])\", function (assert) {\n  assert.expect(6);\n  assert.equal(jQuery(\"#ap\").next()[0].id, \"foo\", \"Simple next check\");\n  assert.equal(jQuery(\"<div>text<a id='element'></a></div>\").contents().eq(0).next().attr(\"id\"), \"element\", \"Text node next check\");\n  assert.equal(jQuery(\"#ap\").next(\"div\")[0].id, \"foo\", \"Filtered next check\");\n  assert.equal(jQuery(\"#ap\").next(\"p\").length, 0, \"Filtered next check, no match\");\n  assert.equal(jQuery(\"#ap\").next(\"div, p\")[0].id, \"foo\", \"Multiple filters\");\n  assert.equal(jQuery(\"body\").next().length, 0, \"Simple next check, no match\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"prev([String])","suites":["traversing"],"line":519,"code":"QUnit.test(\"prev([String])\", function (assert) {\n  assert.expect(5);\n  assert.equal(jQuery(\"#foo\").prev()[0].id, \"ap\", \"Simple prev check\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).prev().get(), q(\"nonnodesElement\"), \"Text node prev check\");\n  assert.equal(jQuery(\"#foo\").prev(\"p\")[0].id, \"ap\", \"Filtered prev check\");\n  assert.equal(jQuery(\"#foo\").prev(\"div\").length, 0, \"Filtered prev check, no match\");\n  assert.equal(jQuery(\"#foo\").prev(\"p, div\")[0].id, \"ap\", \"Multiple filters\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"nextAll([String])","suites":["traversing"],"line":527,"code":"QUnit.test(\"nextAll([String])\", function (assert) {\n  assert.expect(5);\n  var elems = jQuery(\"#form\").children();\n  assert.deepEqual(jQuery(\"#label-for\").nextAll().get(), elems.slice(1).get(), \"Simple nextAll check\");\n  assert.equal(jQuery(\"<div>text<a id='element'></a></div>\").contents().eq(0).nextAll().attr(\"id\"), \"element\", \"Text node nextAll check\");\n  assert.deepEqual(jQuery(\"#label-for\").nextAll(\"input\").get(), elems.slice(1).filter(\"input\").get(), \"Filtered nextAll check\");\n  assert.deepEqual(jQuery(\"#label-for\").nextAll(\"input,select\").get(), elems.slice(1).filter(\"input,select\").get(), \"Multiple-filtered nextAll check\");\n  assert.deepEqual(jQuery(\"#label-for, #hidden1\").nextAll(\"input,select\").get(), elems.slice(1).filter(\"input,select\").get(), \"Multi-source, multiple-filtered nextAll check\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"prevAll([String])","suites":["traversing"],"line":536,"code":"QUnit.test(\"prevAll([String])\", function (assert) {\n  assert.expect(5);\n  var elems = jQuery(jQuery(\"#form\").children().slice(0, 12).get().reverse());\n  assert.deepEqual(jQuery(\"#area1\").prevAll().get(), elems.get(), \"Simple prevAll check\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).prevAll().get(), q(\"nonnodesElement\"), \"Text node prevAll check\");\n  assert.deepEqual(jQuery(\"#area1\").prevAll(\"input\").get(), elems.filter(\"input\").get(), \"Filtered prevAll check\");\n  assert.deepEqual(jQuery(\"#area1\").prevAll(\"input,select\").get(), elems.filter(\"input,select\").get(), \"Multiple-filtered prevAll check\");\n  assert.deepEqual(jQuery(\"#area1, #hidden1\").prevAll(\"input,select\").get(), elems.filter(\"input,select\").get(), \"Multi-source, multiple-filtered prevAll check\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"nextUntil([String])","suites":["traversing"],"line":545,"code":"QUnit.test(\"nextUntil([String])\", function (assert) {\n  assert.expect(12);\n  var elems = jQuery(\"#form\").children().slice(2, 12);\n  assert.deepEqual(jQuery(\"#text1\").nextUntil().get(), jQuery(\"#text1\").nextAll().get(), \"nextUntil with no selector (nextAll)\");\n  assert.equal(jQuery(\"<div>text<a id='element'></a></div>\").contents().eq(0).nextUntil().attr(\"id\"), \"element\", \"Text node nextUntil with no selector (nextAll)\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\".foo\").get(), jQuery(\"#text1\").nextAll().get(), \"nextUntil with invalid selector (nextAll)\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"#area1\").get(), elems.get(), \"Simple nextUntil check\");\n  assert.equal(jQuery(\"#text1\").nextUntil(\"#text2\").length, 0, \"Simple nextUntil check\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"#area1, #radio1\").get(), jQuery(\"#text1\").next().get(), \"Less simple nextUntil check\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"#area1\", \"input\").get(), elems.not(\"button\").get(), \"Filtered nextUntil check\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"#area1\", \"button\").get(), elems.not(\"input\").get(), \"Filtered nextUntil check\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"#area1\", \"button,input\").get(), elems.get(), \"Multiple-filtered nextUntil check\");\n  assert.equal(jQuery(\"#text1\").nextUntil(\"#area1\", \"div\").length, 0, \"Filtered nextUntil check, no match\");\n  assert.deepEqual(jQuery(\"#text1, #hidden1\").nextUntil(\"#area1\", \"button,input\").get(), elems.get(), \"Multi-source, multiple-filtered nextUntil check\");\n  assert.deepEqual(jQuery(\"#text1\").nextUntil(\"[class=foo]\").get(), jQuery(\"#text1\").nextAll().get(), \"Non-element nodes must be skipped, since they have no attributes\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"prevUntil([String])","suites":["traversing"],"line":561,"code":"QUnit.test(\"prevUntil([String])\", function (assert) {\n  assert.expect(11);\n  var elems = jQuery(\"#area1\").prevAll();\n  assert.deepEqual(jQuery(\"#area1\").prevUntil().get(), elems.get(), \"prevUntil with no selector (prevAll)\");\n  assert.deepEqual(jQuery(\"#nonnodes\").contents().eq(1).prevUntil().get(), q(\"nonnodesElement\"), \"Text node prevUntil with no selector (prevAll)\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\".foo\").get(), elems.get(), \"prevUntil with invalid selector (prevAll)\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\"label\").get(), elems.slice(0, -1).get(), \"Simple prevUntil check\");\n  assert.equal(jQuery(\"#area1\").prevUntil(\"#button\").length, 0, \"Simple prevUntil check\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\"label, #search\").get(), jQuery(\"#area1\").prev().get(), \"Less simple prevUntil check\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\"label\", \"input\").get(), elems.slice(0, -1).not(\"button\").get(), \"Filtered prevUntil check\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\"label\", \"button\").get(), elems.slice(0, -1).not(\"input\").get(), \"Filtered prevUntil check\");\n  assert.deepEqual(jQuery(\"#area1\").prevUntil(\"label\", \"button,input\").get(), elems.slice(0, -1).get(), \"Multiple-filtered prevUntil check\");\n  assert.equal(jQuery(\"#area1\").prevUntil(\"label\", \"div\").length, 0, \"Filtered prevUntil check, no match\");\n  assert.deepEqual(jQuery(\"#area1, #hidden1\").prevUntil(\"label\", \"button,input\").get(), elems.slice(0, -1).get(), \"Multi-source, multiple-filtered prevUntil check\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"contents()","suites":["traversing"],"line":576,"code":"QUnit.test(\"contents()\", function (assert) {\n  assert.expect(12);\n  var ibody, c;\n  assert.equal(jQuery(\"#ap\").contents().length, 9, \"Check element contents\");\n  assert.ok(jQuery(\"#iframe\").contents()[0], \"Check existence of IFrame document\");\n  ibody = jQuery(\"#loadediframe\").contents()[0].body;\n  assert.ok(ibody, \"Check existence of IFrame body\");\n  assert.equal(jQuery(\"span\", ibody).text(), \"span text\", \"Find span in IFrame and check its text\");\n  jQuery(ibody).append(\"<div>init text</div>\");\n  assert.equal(jQuery(\"div\", ibody).length, 2, \"Check the original div and the new div are in IFrame\");\n  assert.equal(jQuery(\"div\", ibody).last().text(), \"init text\", \"Add text to div in IFrame\");\n  jQuery(\"div\", ibody).last().text(\"div text\");\n  assert.equal(jQuery(\"div\", ibody).last().text(), \"div text\", \"Add text to div in IFrame\");\n  jQuery(\"div\", ibody).last().remove();\n  assert.equal(jQuery(\"div\", ibody).length, 1, \"Delete the div and check only one div left in IFrame\");\n  assert.equal(jQuery(\"div\", ibody).text(), \"span text\", \"Make sure the correct div is still left after deletion in IFrame\");\n  jQuery(\"<table></table>\", ibody).append(\"<tr><td>cell</td></tr>\").appendTo(ibody);\n  jQuery(\"table\", ibody).remove();\n  assert.equal(jQuery(\"div\", ibody).length, 1, \"Check for JS error on add and delete of a table in IFrame\");\n\n  // using contents will get comments regular, text, and comment nodes\n  c = jQuery(\"#nonnodes\").contents().contents();\n  assert.equal(c.length, 1, \"Check node,textnode,comment contents is just one\");\n  assert.equal(c[0].nodeValue, \"hi\", \"Check node,textnode,comment contents is just the one from span\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"contents() for <template />","suites":["traversing"],"line":601,"code":"QUnit.test(\"contents() for <template />\", function (assert) {\n  assert.expect(4);\n  jQuery(\"#qunit-fixture\").append(\"<template id='template'>\" + \"    <div id='template-div0'>\" + \"        <span>Hello, Web Component!</span>\" + \"    </div>\" + \"    <div id='template-div1'></div>\" + \"    <div id='template-div2'></div>\" + \"</template>\");\n  var contents = jQuery(\"#template\").contents();\n  assert.equal(contents.length, 6, \"Check template element contents\");\n  assert.equal(contents.find(\"span\").text(), \"Hello, Web Component!\", \"Find span in template and check its text\");\n  jQuery(\"<div id='templateTest'></div>\").append(jQuery(jQuery.map(contents, function (node) {\n    return document.importNode(node, true);\n  }))).appendTo(\"#qunit-fixture\");\n  contents = jQuery(\"#templateTest\").contents();\n  assert.equal(contents.length, 6, \"Check cloned nodes of template element contents\");\n  assert.equal(contents.filter(\"div\").length, 3, \"Count cloned elements from template\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"contents() for <object />","suites":["traversing"],"line":623,"code":"QUnit.test(\"contents() for <object />\", function (assert) {\n  assert.expect(2);\n  var svgObject = jQuery(\"<object id='svg-object' data='\" + baseURL + \"1x1.svg'></object>\");\n  var done = assert.async();\n  svgObject.on(\"load\", function () {\n    var contents = jQuery(\"#svg-object\").contents();\n    assert.equal(contents.length, 1, \"Check object contents\");\n    assert.equal(contents.find(\"svg\").length, 1, \"Find svg within object\");\n    done();\n  });\n  jQuery(\"#qunit-fixture\").append(svgObject);\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"contents() for <object /> with children","suites":["traversing"],"line":635,"code":"QUnit.test(\"contents() for <object /> with children\", function (assert) {\n  assert.expect(1);\n  var object = \"<object type='application/x-shockwave-flash' width='200' height='300' id='penguin'>\" + \"<param name='movie' value='flash/penguin.swf'>\" + \"<param name='quality' value='high'>\" + \"<img src='images/penguin.jpg' width='200' height='300' alt='Penguin'>\" + \"</object>\";\n  var contents = jQuery(object).contents();\n  assert.equal(contents.length, 3, \"Check object contents children are correct\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"contents() for <frame />","suites":["traversing"],"line":641,"code":"QUnit.test(\"contents() for <frame />\", function (assert) {\n  assert.expect(2);\n  var iframe = jQuery(\"<iframe id='frame-contents' src='\" + baseURL + \"frame.html'></iframe>\");\n  var done = assert.async();\n  iframe.on(\"load\", function () {\n    var container = jQuery(\"#frame-contents\").contents();\n    var contents = container.find(\"#test-frame\").contents();\n    assert.equal(contents.length, 1, \"Check frame contents\");\n    assert.equal(contents.find(\"body\").length, 1, \"Find body within frame\");\n    done();\n  });\n  jQuery(\"#qunit-fixture\").append(iframe);\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"sort direction","suites":["traversing"],"line":654,"code":"QUnit.test(\"sort direction\", function (assert) {\n  assert.expect(12);\n  var elems = jQuery(\"#ap, #select1 > *, #moretests > form\"),\n    methodDirections = {\n      parent: false,\n      parents: true,\n      parentsUntil: true,\n      next: false,\n      prev: false,\n      nextAll: false,\n      prevAll: true,\n      nextUntil: false,\n      prevUntil: true,\n      siblings: false,\n      children: false,\n      contents: false\n    };\n  jQuery.each(methodDirections, function (method, reversed) {\n    var actual = elems[method]().get(),\n      forward = jQuery.uniqueSort([].concat(actual));\n    assert.deepEqual(actual, reversed ? forward.reverse() : forward, \"Correct sort direction for \" + method);\n  });\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(String selector)","suites":["traversing"],"line":677,"code":"QUnit.test(\"add(String selector)\", function (assert) {\n  assert.expect(2);\n  var divs;\n  assert.deepEqual(jQuery(\"#sndp\").add(\"#en\").add(\"#sap\").toArray(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\");\n  divs = jQuery(\"<div></div>\").add(\"#sndp\");\n  assert.ok(divs[0].parentNode, \"Sort with the disconnected node last (started with disconnected first).\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(String selector, String context)","suites":["traversing"],"line":684,"code":"QUnit.test(\"add(String selector, String context)\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery([]).add(\"div\", \"#nothiddendiv\").toArray(), q(\"nothiddendivchild\"), \"Check elements from document\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(String html)","suites":["traversing"],"line":688,"code":"QUnit.test(\"add(String html)\", function (assert) {\n  assert.expect(3);\n  var x,\n    divs = jQuery(\"#sndp\").add(\"<div></div>\");\n  assert.ok(!divs[1].parentNode, \"Sort with the disconnected node last.\");\n  x = jQuery([]).add(\"<p id='x1'>xxx</p>\").add(\"<p id='x2'>xxx</p>\");\n  assert.equal(x[0].id, \"x1\", \"Check detached element1\");\n  assert.equal(x[1].id, \"x2\", \"Check detached element2\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(jQuery)","suites":["traversing"],"line":697,"code":"QUnit.test(\"add(jQuery)\", function (assert) {\n  assert.expect(4);\n  var x,\n    tmp = jQuery(\"<div></div>\");\n  x = jQuery([]).add(jQuery(\"<p id='x1'>xxx</p>\").appendTo(tmp)).add(jQuery(\"<p id='x2'>xxx</p>\").appendTo(tmp));\n  assert.equal(x[0].id, \"x1\", \"Check element1 in detached parent\");\n  assert.equal(x[1].id, \"x2\", \"Check element2 in detached parent\");\n  x = jQuery([]).add(jQuery(\"<p id='x1'>xxx</p>\")).add(jQuery(\"<p id='x2'>xxx</p>\"));\n  assert.equal(x[0].id, \"x1\", \"Check detached element1\");\n  assert.equal(x[1].id, \"x2\", \"Check detached element2\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(Element)","suites":["traversing"],"line":708,"code":"QUnit.test(\"add(Element)\", function (assert) {\n  assert.expect(2);\n  var x,\n    tmp = jQuery(\"<div></div>\");\n  x = jQuery([]).add(jQuery(\"<p id='x1'>xxx</p>\").appendTo(tmp)[0]).add(jQuery(\"<p id='x2'>xxx</p>\").appendTo(tmp)[0]);\n  assert.equal(x[0].id, \"x1\", \"Check on-the-fly element1\");\n  assert.equal(x[1].id, \"x2\", \"Check on-the-fly element2\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(Array elements)","suites":["traversing"],"line":716,"code":"QUnit.test(\"add(Array elements)\", function (assert) {\n  assert.expect(1);\n  assert.deepEqual(jQuery(\"#sndp\").add(jQuery(\"#en\")[0]).add(jQuery(\"#sap\")).toArray(), q(\"sndp\", \"en\", \"sap\"), \"Check elements from document\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(Window)","suites":["traversing"],"line":720,"code":"QUnit.test(\"add(Window)\", function (assert) {\n  assert.expect(1);\n  var frame1 = document.createElement(\"iframe\"),\n    frame2 = document.createElement(\"iframe\");\n\n  // This increases window.length and sets window[i] available\n  document.body.appendChild(frame1);\n  document.body.appendChild(frame2);\n\n  // Window is tricky because it is a lot like an array, even Array#slice will\n  // turn it into a multi-item array.\n  assert.equal(jQuery([]).add(window).length, 1, \"Add a window\");\n  document.body.removeChild(frame1);\n  document.body.removeChild(frame2);\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)","suites":["traversing"],"line":735,"code":"QUnit.test(\"add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)\", function (assert) {\n  assert.expect(4);\n  var ps, notDefined;\n  ps = document.getElementsByTagName(\"p\");\n  assert.equal(jQuery([]).add(ps).length, ps.length, \"Add a NodeList\");\n  assert.equal(jQuery([]).add(notDefined).length, 0, \"Adding undefined adds nothing\");\n  assert.equal(jQuery([]).add(document.getElementById(\"form\")).length, 1, \"Add a form\");\n  assert.equal(jQuery([]).add(document.getElementById(\"select1\")).length, 1, \"Add a select\");\n\n  // We no longer support .add(form.elements), unfortunately.\n  // There is no way, in browsers, to reliably determine the difference\n  // between form.elements and form - and doing .add(form) and having it\n  // add the form elements is way to unexpected, so this gets the boot.\n  //ok( jQuery([]).add(jQuery(\"#form\")[0].elements).length >= 13, \"Check elements from array\" );\n\n  // For the time being, we're discontinuing support for jQuery(form.elements) since it's ambiguous in IE\n  // use jQuery([]).add(form.elements) instead.\n  //equal( jQuery([]).add(jQuery(\"#form\")[0].elements).length, jQuery(jQuery(\"#form\")[0].elements).length, \"Array in constructor must equals array in add()\" );\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"add(String, Context)","suites":["traversing"],"line":755,"code":"QUnit.test(\"add(String, Context)\", function (assert) {\n  assert.expect(6);\n  assert.deepEqual(jQuery(\"#firstp\").add(\"#ap\").get(), q(\"firstp\", \"ap\"), \"Add selector to selector \");\n  assert.deepEqual(jQuery(document.getElementById(\"firstp\")).add(\"#ap\").get(), q(\"firstp\", \"ap\"), \"Add gEBId to selector\");\n  assert.deepEqual(jQuery(document.getElementById(\"firstp\")).add(document.getElementById(\"ap\")).get(), q(\"firstp\", \"ap\"), \"Add gEBId to gEBId\");\n  var ctx = document.getElementById(\"firstp\");\n  assert.deepEqual(jQuery(\"#firstp\").add(\"#ap\", ctx).get(), q(\"firstp\"), \"Add selector to selector \");\n  assert.deepEqual(jQuery(document.getElementById(\"firstp\")).add(\"#ap\", ctx).get(), q(\"firstp\"), \"Add gEBId to selector, not in context\");\n  assert.deepEqual(jQuery(document.getElementById(\"firstp\")).add(\"#ap\", document.getElementsByTagName(\"body\")[0]).get(), q(\"firstp\", \"ap\"), \"Add gEBId to selector, in context\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"eq('-1') trac-10616","suites":["traversing"],"line":765,"code":"QUnit.test(\"eq('-1') trac-10616\", function (assert) {\n  assert.expect(3);\n  var $divs = jQuery(\"div\");\n  assert.equal($divs.eq(-1).length, 1, \"The number -1 returns a selection that has length 1\");\n  assert.equal($divs.eq(\"-1\").length, 1, \"The string '-1' returns a selection that has length 1\");\n  assert.deepEqual($divs.eq(\"-1\"), $divs.eq(-1), \"String and number -1 match\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"index(no arg) trac-10977","suites":["traversing"],"line":772,"code":"QUnit.test(\"index(no arg) trac-10977\", function (assert) {\n  assert.expect(2);\n  var $list, fragment, div;\n  $list = jQuery(\"<ul id='indextest'><li class='zero'>THIS ONE</li><li class='one'>a</li><li class='two'>b</li><li class='three'>c</li></ul>\");\n  jQuery(\"#qunit-fixture\").append($list);\n  assert.strictEqual(jQuery(\"#indextest li.zero\").first().index(), 0, \"No Argument Index Check\");\n  $list.remove();\n  fragment = document.createDocumentFragment();\n  div = fragment.appendChild(document.createElement(\"div\"));\n  assert.equal(jQuery(div).index(), 0, \"If jQuery#index called on element whose parent is fragment, it still should work correctly\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"traversing non-elements with attribute filters (trac-12523)","suites":["traversing"],"line":783,"code":"QUnit.test(\"traversing non-elements with attribute filters (trac-12523)\", function (assert) {\n  assert.expect(5);\n  var nonnodes = jQuery(\"#nonnodes\").contents();\n  assert.equal(nonnodes.filter(\"[id]\").length, 1, \".filter\");\n  assert.equal(nonnodes.find(\"[id]\").length, 0, \".find\");\n  assert.strictEqual(nonnodes.is(\"[id]\"), true, \".is\");\n  assert.deepEqual(nonnodes.closest(\"[id='nonnodes']\").get(), q(\"nonnodes\"), \".closest\");\n  assert.deepEqual(nonnodes.parents(\"[id='nonnodes']\").get(), q(\"nonnodes\"), \".parents\");\n});","file":"unit/traversing.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - Default propHooks on plain objects","suites":["tween"],"line":21,"code":"  QUnit.test(\"jQuery.Tween - Default propHooks on plain objects\", function (assert) {\n    assert.expect(8);\n    var propHooks, defaultHook, testObject, fakeTween, stepSpy;\n    propHooks = jQuery.Tween.propHooks;\n    assert.equal(typeof propHooks, \"object\", \"jQuery.Tween.propHooks exists\");\n    defaultHook = propHooks._default;\n    assert.ok(defaultHook, \"_default propHook exists\");\n    testObject = {\n      test: 0\n    };\n    fakeTween = {\n      elem: testObject,\n      prop: \"test\",\n      now: 10,\n      unit: \"px\"\n    };\n    assert.equal(defaultHook.get(fakeTween), 0, \"Can get property of object\");\n    fakeTween.prop = \"testMissing\";\n    assert.equal(defaultHook.get(fakeTween), undefined, \"Can get missing property on object\");\n    defaultHook.set(fakeTween);\n    assert.equal(testObject.testMissing, 10, \"Sets missing value properly on plain object\");\n    fakeTween.prop = \"opacity\";\n    defaultHook.set(fakeTween);\n    assert.equal(testObject.opacity, 10, \"Correctly set opacity on plain object\");\n    fakeTween.prop = \"test\";\n    stepSpy = jQuery.fx.step.test = this.sandbox.spy();\n    defaultHook.set(fakeTween);\n    assert.ok(stepSpy.calledWith(fakeTween), \"Step function called with Tween\");\n    assert.equal(testObject.test, 0, \"Because step didn't set, value is unchanged\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - Default propHooks on elements","suites":["tween"],"line":51,"code":"  QUnit.test(\"jQuery.Tween - Default propHooks on elements\", function (assert) {\n    assert.expect(19);\n    var propHooks, defaultHook, testElement, fakeTween, cssStub, styleStub, stepSpy;\n    propHooks = jQuery.Tween.propHooks;\n    assert.equal(typeof propHooks, \"object\", \"jQuery.Tween.propHooks exists\");\n    defaultHook = propHooks._default;\n    assert.ok(defaultHook, \"_default propHook exists\");\n    testElement = jQuery(\"<div>\")[0];\n    fakeTween = {\n      elem: testElement,\n      prop: \"height\",\n      now: 10,\n      unit: \"px\"\n    };\n    cssStub = this.sandbox.stub(jQuery, \"css\").returns(10);\n    assert.equal(defaultHook.get(fakeTween), 10, \"Gets expected style value\");\n    assert.ok(cssStub.calledWith(testElement, \"height\", \"\"), \"Calls jQuery.css correctly\");\n    fakeTween.prop = \"testOpti\";\n    testElement.testOpti = 15;\n    cssStub.resetHistory();\n    assert.equal(defaultHook.get(fakeTween), 15, \"Gets expected value not defined on style\");\n    assert.equal(cssStub.callCount, 0, \"Did not call jQuery.css\");\n    fakeTween.prop = \"testMissing\";\n    assert.equal(defaultHook.get(fakeTween), 10, \"Can get missing property on element\");\n    assert.ok(cssStub.calledWith(testElement, \"testMissing\", \"\"), \"...using jQuery.css\");\n    cssStub.returns(\"\");\n    assert.equal(defaultHook.get(fakeTween), 0, \"Uses 0 for empty string\");\n    cssStub.returns(\"auto\");\n    assert.equal(defaultHook.get(fakeTween), 0, \"Uses 0 for 'auto'\");\n    cssStub.returns(null);\n    assert.equal(defaultHook.get(fakeTween), 0, \"Uses 0 for null\");\n    cssStub.returns(undefined);\n    assert.equal(defaultHook.get(fakeTween), 0, \"Uses 0 for undefined\");\n    cssStub.resetHistory();\n\n    // Setters\n    styleStub = this.sandbox.stub(jQuery, \"style\");\n    fakeTween.prop = \"height\";\n    defaultHook.set(fakeTween);\n    assert.ok(styleStub.calledWith(testElement, \"height\", \"10px\"), \"Calls jQuery.style with elem, prop, now+unit\");\n    styleStub.resetHistory();\n    fakeTween.prop = \"testMissing\";\n    defaultHook.set(fakeTween);\n    assert.equal(styleStub.callCount, 0, \"Did not call jQuery.style for non css property\");\n    assert.equal(testElement.testMissing, 10, \"Instead, set value on element directly\");\n    jQuery.cssHooks.testMissing = jQuery.noop;\n    fakeTween.now = 11;\n    defaultHook.set(fakeTween);\n    delete jQuery.cssHooks.testMissing;\n    assert.ok(styleStub.calledWith(testElement, \"testMissing\", \"11px\"), \"Presence of cssHooks causes jQuery.style with elem, prop, now+unit\");\n    assert.equal(testElement.testMissing, 10, \"And value was unchanged\");\n    stepSpy = jQuery.fx.step.test = this.sandbox.spy();\n    styleStub.resetHistory();\n    fakeTween.prop = \"test\";\n    defaultHook.set(fakeTween);\n    assert.ok(stepSpy.calledWith(fakeTween), \"Step function called with Tween\");\n    assert.equal(styleStub.callCount, 0, \"Did not call jQuery.style\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - Plain Object","suites":["tween"],"line":109,"code":"  QUnit.test(\"jQuery.Tween - Plain Object\", function (assert) {\n    assert.expect(13);\n    var testObject = {\n        test: 100\n      },\n      testOptions = {\n        duration: 100\n      },\n      tween,\n      easingSpy;\n    tween = jQuery.Tween(testObject, testOptions, \"test\", 0, \"linear\");\n    assert.equal(tween.elem, testObject, \"Sets .element\");\n    assert.equal(tween.options, testOptions, \"sets .options\");\n    assert.equal(tween.prop, \"test\", \"sets .prop\");\n    assert.equal(tween.end, 0, \"sets .end\");\n    assert.equal(tween.easing, \"linear\", \"sets .easing when provided\");\n    assert.equal(tween.start, 100, \"Reads .start value during construction\");\n    assert.equal(tween.now, 100, \"Reads .now value during construction\");\n    easingSpy = this.sandbox.spy(jQuery.easing, \"linear\");\n    assert.equal(tween.run(0.1), tween, \".run() returns this\");\n    assert.equal(tween.now, 90, \"Calculated tween\");\n    assert.ok(easingSpy.calledWith(0.1, 0.1 * testOptions.duration, 0, 1, testOptions.duration), \"...using jQuery.easing.linear with back-compat arguments\");\n    assert.equal(testObject.test, 90, \"Set value\");\n    tween.run(1);\n    assert.equal(testObject.test, 0, \"Checking another value\");\n    tween.run(0);\n    assert.equal(testObject.test, 100, \"Can even go back in time\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - Element","suites":["tween"],"line":137,"code":"  QUnit.test(\"jQuery.Tween - Element\", function (assert) {\n    assert.expect(15);\n    var testElement = jQuery(\"<div>\").css(\"height\", 100)[0],\n      testOptions = {\n        duration: 100\n      },\n      tween,\n      easingSpy,\n      eased;\n    tween = jQuery.Tween(testElement, testOptions, \"height\", 0);\n    assert.equal(tween.elem, testElement, \"Sets .element\");\n    assert.equal(tween.options, testOptions, \"sets .options\");\n    assert.equal(tween.prop, \"height\", \"sets .prop\");\n    assert.equal(tween.end, 0, \"sets .end\");\n    assert.equal(tween.easing, jQuery.easing._default, \"sets .easing to default when not provided\");\n    assert.equal(tween.unit, \"px\", \"sets .unit to px when not provided\");\n    assert.equal(tween.start, 100, \"Reads .start value during construction\");\n    assert.equal(tween.now, 100, \"Reads .now value during construction\");\n    easingSpy = this.sandbox.spy(jQuery.easing, \"swing\");\n    assert.equal(tween.run(0.1), tween, \".run() returns this\");\n    assert.equal(tween.pos, jQuery.easing.swing(0.1), \"set .pos\");\n    eased = 100 - jQuery.easing.swing(0.1) * 100;\n    assert.equal(tween.now, eased, \"Calculated tween\");\n    assert.ok(easingSpy.calledWith(0.1, 0.1 * testOptions.duration, 0, 1, testOptions.duration), \"...using jQuery.easing.linear with back-compat arguments\");\n    assert.equal(parseFloat(testElement.style.height).toFixed(2), eased.toFixed(2), \"Set value\");\n    tween.run(1);\n    assert.equal(testElement.style.height, \"0px\", \"Checking another value\");\n    tween.run(0);\n    assert.equal(testElement.style.height, \"100px\", \"Can even go back in time\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - No duration","suites":["tween"],"line":167,"code":"  QUnit.test(\"jQuery.Tween - No duration\", function (assert) {\n    assert.expect(3);\n    var testObject = {\n        test: 100\n      },\n      testOptions = {\n        duration: 0\n      },\n      tween,\n      easingSpy;\n    tween = jQuery.Tween(testObject, testOptions, \"test\", 0);\n    easingSpy = this.sandbox.spy(jQuery.easing, \"swing\");\n    tween.run(0.5);\n    assert.equal(tween.pos, 0.5, \"set .pos correctly\");\n    assert.equal(testObject.test, 50, \"set value on object correctly\");\n    assert.equal(easingSpy.callCount, 0, \"didn't ease the value\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - step function option","suites":["tween"],"line":184,"code":"  QUnit.test(\"jQuery.Tween - step function option\", function (assert) {\n    assert.expect(4);\n    var testObject = {\n        test: 100\n      },\n      testOptions = {\n        duration: 100,\n        step: this.sandbox.spy()\n      },\n      tween,\n      propHookSpy;\n    propHookSpy = this.sandbox.spy(jQuery.Tween.propHooks._default, \"set\");\n    tween = jQuery.Tween(testObject, testOptions, \"test\", 0, \"linear\");\n    assert.equal(testOptions.step.callCount, 0, \"didn't call step on create\");\n    tween.run(0.5);\n    assert.ok(testOptions.step.calledOn(testObject), \"Called step function in context of animated object\");\n    assert.ok(testOptions.step.calledWith(50, tween), \"Called step function with correct parameters\");\n    assert.ok(testOptions.step.calledBefore(propHookSpy), \"Called step function before calling propHook.set\");\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - custom propHooks","suites":["tween"],"line":203,"code":"  QUnit.test(\"jQuery.Tween - custom propHooks\", function (assert) {\n    assert.expect(3);\n    var testObject = {},\n      testOptions = {\n        duration: 100,\n        step: this.sandbox.spy()\n      },\n      propHook = {\n        get: sinon.stub().returns(100),\n        set: sinon.stub()\n      },\n      tween;\n    jQuery.Tween.propHooks.testHooked = propHook;\n    tween = jQuery.Tween(testObject, testOptions, \"testHooked\", 0, \"linear\");\n    assert.ok(propHook.get.calledWith(tween), \"called propHook.get on create\");\n    assert.equal(tween.now, 100, \"Used return value from propHook.get\");\n    tween.run(0.5);\n    assert.ok(propHook.set.calledWith(tween), \"Called propHook.set function with correct parameters\");\n    delete jQuery.Tween.propHooks.testHooked;\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"jQuery.Tween - custom propHooks - advanced values","suites":["tween"],"line":223,"code":"  QUnit.test(\"jQuery.Tween - custom propHooks - advanced values\", function (assert) {\n    assert.expect(5);\n    var testObject = {},\n      testOptions = {\n        duration: 100,\n        step: this.sandbox.spy()\n      },\n      propHook = {\n        get: sinon.stub().returns([0, 0]),\n        set: sinon.spy()\n      },\n      tween;\n    jQuery.Tween.propHooks.testHooked = propHook;\n    tween = jQuery.Tween(testObject, testOptions, \"testHooked\", [1, 1], \"linear\");\n    assert.ok(propHook.get.calledWith(tween), \"called propHook.get on create\");\n    assert.deepEqual(tween.start, [0, 0], \"Used return value from get\");\n    tween.run(0.5);\n\n    // Some day this NaN assumption might change - perhaps add a \"calc\" helper to the hooks?\n    assert.ok(isNaN(tween.now), \"Used return value from propHook.get\");\n    assert.equal(tween.pos, 0.5, \"But the eased percent is still available\");\n    assert.ok(propHook.set.calledWith(tween), \"Called propHook.set function with correct parameters\");\n    delete jQuery.Tween.propHooks.testHooked;\n  });","file":"unit/tween.js","skipped":false,"dir":"test"},{"name":"wrap(String|Element)","suites":["wrap"],"line":71,"code":"  QUnit.test(\"wrap(String|Element)\", function (assert) {\n    testWrap(manipulationBareObj, assert);\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrap(Function)","suites":["wrap"],"line":74,"code":"  QUnit.test(\"wrap(Function)\", function (assert) {\n    testWrap(manipulationFunctionReturningObj, assert);\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrap(Function) with index (trac-10177)","suites":["wrap"],"line":77,"code":"  QUnit.test(\"wrap(Function) with index (trac-10177)\", function (assert) {\n    var expectedIndex = 0,\n      targets = jQuery(\"#qunit-fixture p\");\n    assert.expect(targets.length);\n    targets.wrap(function (i) {\n      assert.equal(i, expectedIndex, \"Check if the provided index (\" + i + \") is as expected (\" + expectedIndex + \")\");\n      expectedIndex++;\n      return \"<div id='wrap_index_'\" + i + \"'></div>\";\n    });\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrap(String) consecutive elements (trac-10177)","suites":["wrap"],"line":87,"code":"  QUnit.test(\"wrap(String) consecutive elements (trac-10177)\", function (assert) {\n    var targets = jQuery(\"#qunit-fixture p\");\n    assert.expect(targets.length * 2);\n    targets.wrap(\"<div class='wrapper'></div>\");\n    targets.each(function () {\n      var $this = jQuery(this);\n      assert.ok($this.parent().is(\".wrapper\"), \"Check each elements parent is correct (.wrapper)\");\n      assert.equal($this.siblings().length, 0, \"Each element should be wrapped individually\");\n    });\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapAll(String)","suites":["wrap"],"line":97,"code":"  QUnit.test(\"wrapAll(String)\", function (assert) {\n    assert.expect(5);\n    var prev, p, result;\n    prev = jQuery(\"#firstp\")[0].previousSibling;\n    p = jQuery(\"#firstp,#first\")[0].parentNode;\n    result = jQuery(\"#firstp,#first\").wrapAll(\"<div class='red'><div class='tmp'></div></div>\");\n    assert.equal(result.parent().length, 1, \"Check for wrapping of on-the-fly html\");\n    assert.ok(jQuery(\"#first\").parent().parent().is(\".red\"), \"Check if wrapper has class 'red'\");\n    assert.ok(jQuery(\"#firstp\").parent().parent().is(\".red\"), \"Check if wrapper has class 'red'\");\n    assert.equal(jQuery(\"#first\").parent().parent()[0].previousSibling, prev, \"Correct Previous Sibling\");\n    assert.equal(jQuery(\"#first\").parent().parent()[0].parentNode, p, \"Correct Parent\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapAll(Function)","suites":["wrap"],"line":109,"code":"  QUnit.test(\"wrapAll(Function)\", function (assert) {\n    assert.expect(5);\n    var prev = jQuery(\"#firstp\")[0].previousSibling,\n      p = jQuery(\"#firstp,#first\")[0].parentNode,\n      result = jQuery(\"#firstp,#first\").wrapAll(function () {\n        return \"<div class='red'><div class='tmp'></div></div>\";\n      });\n    assert.equal(result.parent().length, 1, \"Check for wrapping of on-the-fly html\");\n    assert.ok(jQuery(\"#first\").parent().parent().is(\".red\"), \"Check if wrapper has class 'red'\");\n    assert.ok(jQuery(\"#firstp\").parent().parent().is(\".red\"), \"Check if wrapper has class 'red'\");\n    assert.ok(jQuery(\"#first\").parent().parent().parent().is(p), \"Correct Parent\");\n    assert.strictEqual(jQuery(\"#first\").parent().parent()[0].previousSibling, prev, \"Correct Previous Sibling\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapAll(Function) check execution characteristics","suites":["wrap"],"line":122,"code":"  QUnit.test(\"wrapAll(Function) check execution characteristics\", function (assert) {\n    assert.expect(3);\n    var i = 0;\n    jQuery(\"non-existent\").wrapAll(function () {\n      i++;\n      return \"\";\n    });\n    assert.ok(!i, \"should not execute function argument if target element does not exist\");\n    jQuery(\"#firstp\").wrapAll(function (index) {\n      assert.strictEqual(this, jQuery(\"#firstp\")[0], \"context must be the first found element\");\n      assert.strictEqual(index, undefined, \"index argument should not be included in function execution\");\n    });\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapAll(Element)","suites":["wrap"],"line":135,"code":"  QUnit.test(\"wrapAll(Element)\", function (assert) {\n    assert.expect(3);\n    var prev, p;\n    prev = jQuery(\"#firstp\")[0].previousSibling;\n    p = jQuery(\"#first\")[0].parentNode;\n    jQuery(\"#firstp,#first\").wrapAll(document.getElementById(\"empty\"));\n    assert.equal(jQuery(\"#first\").parent()[0], jQuery(\"#firstp\").parent()[0], \"Same Parent\");\n    assert.equal(jQuery(\"#first\").parent()[0].previousSibling, prev, \"Correct Previous Sibling\");\n    assert.equal(jQuery(\"#first\").parent()[0].parentNode, p, \"Correct Parent\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapInner(String)","suites":["wrap"],"line":145,"code":"  QUnit.test(\"wrapInner(String)\", function (assert) {\n    assert.expect(6);\n    var num;\n    num = jQuery(\"#first\").children().length;\n    jQuery(\"#first\").wrapInner(\"<div class='red'><div id='tmp'></div></div>\");\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\".red\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().children().length, num, \"Verify Elements Intact\");\n    num = jQuery(\"#first\").html(\"foo<div>test</div><div>test2</div>\").children().length;\n    jQuery(\"#first\").wrapInner(\"<div class='red'><div id='tmp'></div></div>\");\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\".red\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().children().length, num, \"Verify Elements Intact\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapInner(Element)","suites":["wrap"],"line":159,"code":"  QUnit.test(\"wrapInner(Element)\", function (assert) {\n    assert.expect(5);\n    var num,\n      div = jQuery(\"<div></div>\");\n    num = jQuery(\"#first\").children().length;\n    jQuery(\"#first\").wrapInner(document.getElementById(\"empty\"));\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\"#empty\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().length, num, \"Verify Elements Intact\");\n    div.wrapInner(\"<span></span>\");\n    assert.equal(div.children().length, 1, \"The contents were wrapped.\");\n    assert.equal(div.children()[0].nodeName.toLowerCase(), \"span\", \"A span was inserted.\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapInner(Function) returns String","suites":["wrap"],"line":172,"code":"  QUnit.test(\"wrapInner(Function) returns String\", function (assert) {\n    assert.expect(6);\n    var num,\n      val = manipulationFunctionReturningObj;\n    num = jQuery(\"#first\").children().length;\n    jQuery(\"#first\").wrapInner(val(\"<div class='red'><div id='tmp'></div></div>\"));\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\".red\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().children().length, num, \"Verify Elements Intact\");\n    num = jQuery(\"#first\").html(\"foo<div>test</div><div>test2</div>\").children().length;\n    jQuery(\"#first\").wrapInner(val(\"<div class='red'><div id='tmp'></div></div>\"));\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\".red\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().children().length, num, \"Verify Elements Intact\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapInner(Function) returns Element","suites":["wrap"],"line":187,"code":"  QUnit.test(\"wrapInner(Function) returns Element\", function (assert) {\n    assert.expect(5);\n    var num,\n      val = manipulationFunctionReturningObj,\n      div = jQuery(\"<div></div>\");\n    num = jQuery(\"#first\").children().length;\n    jQuery(\"#first\").wrapInner(val(document.getElementById(\"empty\")));\n    assert.equal(jQuery(\"#first\").children().length, 1, \"Only one child\");\n    assert.ok(jQuery(\"#first\").children().is(\"#empty\"), \"Verify Right Element\");\n    assert.equal(jQuery(\"#first\").children().children().length, num, \"Verify Elements Intact\");\n    div.wrapInner(val(\"<span></span>\"));\n    assert.equal(div.children().length, 1, \"The contents were wrapped.\");\n    assert.equal(div.children()[0].nodeName.toLowerCase(), \"span\", \"A span was inserted.\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"unwrap()","suites":["wrap"],"line":201,"code":"  QUnit.test(\"unwrap()\", function (assert) {\n    assert.expect(9);\n    jQuery(\"body\").append(\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" + \" <span class='unwrap'>a</span> <span class='unwrap'>b</span> </div> <div id='unwrap2'>\" + \" <span class='unwrap'>c</span> <span class='unwrap'>d</span> </div> <div id='unwrap3'>\" + \" <b><span class='unwrap unwrap3'>e</span></b>\" + \" <b><span class='unwrap unwrap3'>f</span></b> </div> </div>\");\n    var abcd = jQuery(\"#unwrap1 > span, #unwrap2 > span\").get(),\n      abcdef = jQuery(\"#unwrap span\").get();\n    assert.equal(jQuery(\"#unwrap1 span\").add(\"#unwrap2 span:first-child\").unwrap().length, 3, \"make #unwrap1 and #unwrap2 go away\");\n    assert.deepEqual(jQuery(\"#unwrap > span\").get(), abcd, \"all four spans should still exist\");\n    assert.deepEqual(jQuery(\"#unwrap3 span\").unwrap().get(), jQuery(\"#unwrap3 > span\").get(), \"make all b in #unwrap3 go away\");\n    assert.deepEqual(jQuery(\"#unwrap3 span\").unwrap().get(), jQuery(\"#unwrap > span.unwrap3\").get(), \"make #unwrap3 go away\");\n    assert.deepEqual(jQuery(\"#unwrap\").children().get(), abcdef, \"#unwrap only contains 6 child spans\");\n    assert.deepEqual(jQuery(\"#unwrap > span\").unwrap().get(), jQuery(\"body > span.unwrap\").get(), \"make the 6 spans become children of body\");\n    assert.deepEqual(jQuery(\"body > span.unwrap\").unwrap().get(), jQuery(\"body > span.unwrap\").get(), \"can't unwrap children of body\");\n    assert.deepEqual(jQuery(\"body > span.unwrap\").unwrap().get(), abcdef, \"can't unwrap children of body\");\n    assert.deepEqual(jQuery(\"body > span.unwrap\").get(), abcdef, \"body contains 6 .unwrap child spans\");\n    jQuery(\"body > span.unwrap\").remove();\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"unwrap( selector )","suites":["wrap"],"line":217,"code":"  QUnit.test(\"unwrap( selector )\", function (assert) {\n    assert.expect(5);\n    jQuery(\"body\").append(\"  <div id='unwrap' style='display: none;'> <div id='unwrap1'>\" + \"<span class='unwrap'>a</span> <span class='unwrap'>b</span> </div>\" + \" <div id='unwrap2'> <span class='unwrap'>c</span> <span class='unwrap'>d</span>\" + \" </div> </div>\");\n\n    // Shouldn't unwrap, no match\n    jQuery(\"#unwrap1 span\").unwrap(\"#unwrap2\");\n    assert.equal(jQuery(\"#unwrap1\").length, 1, \"still wrapped\");\n\n    // Shouldn't unwrap, no match\n    jQuery(\"#unwrap1 span\").unwrap(\"span\");\n    assert.equal(jQuery(\"#unwrap1\").length, 1, \"still wrapped\");\n\n    // Unwraps\n    jQuery(\"#unwrap1 span\").unwrap(\"#unwrap1\");\n    assert.equal(jQuery(\"#unwrap1\").length, 0, \"unwrapped match\");\n\n    // Check return values\n    assert.deepEqual(jQuery(\"#unwrap2 span\").get(), jQuery(\"#unwrap2 span\").unwrap(\"quote\").get(), \"return on unmatched unwrap\");\n    assert.deepEqual(jQuery(\"#unwrap2 span\").get(), jQuery(\"#unwrap2 span\").unwrap(\"#unwrap2\").get(), \"return on matched unwrap\");\n    jQuery(\"body > span.unwrap\").remove();\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (trac-10667)","suites":["wrap"],"line":238,"code":"  QUnit.test(\"jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (trac-10667)\", function (assert) {\n    assert.expect(2);\n    var $wraptarget = jQuery(\"<div id='wrap-target'>Target</div>\").appendTo(\"#qunit-fixture\"),\n      $section = jQuery(\"<section>\").appendTo(\"#qunit-fixture\");\n    $wraptarget.wrapAll(\"<aside style='background-color:green'></aside>\");\n    assert.notEqual($wraptarget.parent(\"aside\").get(0).style.backgroundColor, \"transparent\", \"HTML5 elements created with wrapAll inherit styles\");\n    assert.notEqual($section.get(0).style.backgroundColor, \"transparent\", \"HTML5 elements create with jQuery( string ) inherit styles\");\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"},{"name":"wrapping scripts (trac-10470)","suites":["wrap"],"line":246,"code":"  QUnit.test(\"wrapping scripts (trac-10470)\", function (assert) {\n    assert.expect(2);\n    var script = document.createElement(\"script\");\n    script.text = script.textContent = \"QUnit.assert.ok( !document.eval10470, 'script evaluated once' ); document.eval10470 = true;\";\n    document.eval10470 = false;\n    jQuery(\"#qunit-fixture\").empty()[0].appendChild(script);\n    jQuery(\"#qunit-fixture script\").wrap(\"<b></b>\");\n    assert.strictEqual(script.parentNode, jQuery(\"#qunit-fixture > b\")[0], \"correctly wrapped\");\n    jQuery(script).remove();\n  });","file":"unit/wrap.js","skipped":false,"dir":"test"}]}