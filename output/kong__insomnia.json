{"repo":"Kong/insomnia","url":"https://github.com/Kong/insomnia","branch":"develop","configs":[{"package":"insomnia-smoke-test","lang":"ts","dir":"packages/insomnia-smoke-test/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-base64","lang":"js","dir":"plugins/insomnia-plugin-base64/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-cookie-jar","lang":"js","dir":"plugins/insomnia-plugin-cookie-jar/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"insomnia-plugin-file","lang":"js","dir":"plugins/insomnia-plugin-file/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-hash","lang":"js","dir":"plugins/insomnia-plugin-hash/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-now","lang":"js","dir":"plugins/insomnia-plugin-now/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-request","lang":"js","dir":"plugins/insomnia-plugin-request/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-response","lang":"js","dir":"plugins/insomnia-plugin-response/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"insomnia-plugin-uuid","lang":"js","dir":"plugins/insomnia-plugin-uuid/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Basic interactions","suites":[],"updatePoint":{"line":5,"column":24},"line":5,"code":"test('Basic interactions', async ({ }) => {\n  // TODO(filfreire): add a few scenarios ported from the release checklist\n\n  await expect(true).toBeTruthy();\n});","file":"prerelease/basic-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete new project","suites":[],"updatePoint":{"line":9,"column":51},"line":9,"code":"    test('Can create, rename and delete new project', async ({ page }) => {\n      // Return to Dashboard\n      await page.click('[data-testid=\"project\"] >> text=Insomnia');\n\n      // Open projects dropdown\n      await page.click('[data-testid=\"project\"] >> text=Insomnia');\n      await page.click('button:has-text(\"Create new project\")');\n      await page.locator('text=Create').nth(1).click();\n\n      // Check empty project\n      await expect(page.locator('.app')).toContainText('This is an empty project, to get started create your first resource:');\n\n      // Rename Project\n      await page.click('[data-testid=\"project\"] >> text=My Project');\n      await page.click('button:has-text(\"Project Settings\")');\n      await page.click('[placeholder=\"My Project\"]');\n      await page.locator('[placeholder=\"My Project\"]').fill('My Project123');\n\n      // Close project settings modal\n      await page.locator('.app').press('Escape');\n\n      // Delete project\n      await page.click('[data-testid=\"project\"] >> text=My Project123');\n      await page.click('button:has-text(\"Project Settings\")');\n      await page.click('text=Delete');\n      await page.click('button:has-text(\"Click to confirm\")');\n      await page.click('button:has-text(\"Delete\")');\n\n      // After deleting project, return to default Insomnia Dashboard\n      await expect(page.locator('[data-testid=\"project\"]')).toContainText('Insomnia');\n      await expect(page.locator('.app')).toContainText('Dashboard');\n      await expect(page.locator('.app')).toContainText('New Document');\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can filter through multiple collections","suites":[],"updatePoint":{"line":44,"column":49},"line":44,"code":"    test('Can filter through multiple collections', async ({ app, page }) => {\n      await page.click('[data-testid=\"project\"]');\n      await page.click('text=Create');\n      const text = await loadFixture('multiple-workspaces.yaml');\n      await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n      await page.click('button:has-text(\"Clipboard\")');\n\n      // Check that 10 new workspaces are imported besides the default one\n      const workspaceCards = page.locator('.card-badge');\n      await expect(workspaceCards).toHaveCount(11);\n      await expect(page.locator('.app')).toContainText('New Document');\n      await expect(page.locator('.app')).toContainText('collection 1');\n      await expect(page.locator('.app')).toContainText('design doc 1');\n      await expect(page.locator('.app')).toContainText('Swagger Petstore V3 JSON 1.0.0');\n      await expect(page.locator('.app')).toContainText('Swagger Petstore V3 YAML 1.0.0');\n\n      // Filter by collection\n      const filter = page.locator('[placeholder=\"Filter\\\\.\\\\.\\\\.\"]');\n\n      // Filter by word with results expected\n      await filter.fill('design');\n      await expect(page.locator('.card-badge')).toHaveCount(4);\n\n      // Filter by number\n      await filter.fill('3');\n      await expect(page.locator('.card-badge')).toHaveCount(2);\n\n      // Filter by word with no results expected\n      await filter.fill('invalid');\n      await expect(page.locator('.card-badge')).toHaveCount(0);\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete a document","suites":[],"updatePoint":{"line":76,"column":50},"line":76,"code":"    test('Can create, rename and delete a document', async ({ page }) => {\n      await page.click('[data-testid=\"project\"]');\n      // Create new document\n      await page.click('text=Create');\n      await page.click('button:has-text(\"Design Document\")');\n      await page.locator('text=Create').nth(1).click();\n\n      // Return to dashboard\n      await page.click('[data-testid=\"project\"]');\n      await expect(page.locator('.app')).toContainText('my-spec.yaml');\n\n      // Rename document\n      await page.click('text=Documentmy-spec.yamljust now >> button');\n      await page.locator('button:has-text(\"Rename\")').first().click();\n      await page.locator('text=Rename DocumentName Rename >> input[type=\"text\"]').fill('test123');\n      await page.click('#root button:has-text(\"Rename\")');\n      await expect(page.locator('.app')).toContainText('test123');\n\n      // Duplicate document\n      await page.click('text=Documenttest123just now >> button');\n      await page.locator('button:has-text(\"Duplicate\")').first().click();\n      await page.locator('input[name=\"name\"]').fill('test123-duplicate');\n      await page.click('#root button:has-text(\"Duplicate\")');\n\n      // Return to dashboard\n      await page.click('[data-testid=\"project\"]');\n      await expect(page.locator('.app')).toContainText('test123-duplicate');\n\n      const workspaceCards = page.locator('.card-badge');\n      await expect(workspaceCards).toHaveCount(3);\n\n      // Delete document\n      await page.click('text=Documenttest123just now >> button');\n      await page.locator('button:has-text(\"Delete\")').nth(1).click();\n      await page.locator('text=Yes').click();\n      await expect(workspaceCards).toHaveCount(2);\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Can create, rename and delete a collection","suites":[],"updatePoint":{"line":114,"column":52},"line":114,"code":"    test('Can create, rename and delete a collection', async ({ page }) => {\n      await page.click('[data-testid=\"project\"]');\n      // Create new collection\n      await page.click('text=Create');\n      await page.click('button:has-text(\"Request Collection\")');\n      await page.locator('text=Create').nth(1).click();\n\n      // Return to dashboard\n      await page.click('[data-testid=\"project\"]');\n      await expect(page.locator('.app')).toContainText('My Collection');\n\n      // Rename collection\n      await page.click('text=CollectionMy Collectionjust now >> button');\n      await page.locator('button:has-text(\"Rename\")').first().click();\n      await page.locator('text=Rename CollectionName Rename >> input[type=\"text\"]').fill('test123');\n      await page.click('#root button:has-text(\"Rename\")');\n      await expect(page.locator('.app')).toContainText('test123');\n\n      // Duplicate collection\n      await page.click('text=Collectiontest123just now >> button');\n      await page.locator('button:has-text(\"Duplicate\")').first().click();\n      await page.locator('input[name=\"name\"]').fill('test123-duplicate');\n      await page.click('#root button:has-text(\"Duplicate\")');\n\n      // Return to dashboard\n      await page.click('[data-testid=\"project\"]');\n      await expect(page.locator('.app')).toContainText('test123-duplicate');\n      const workspaceCards = page.locator('.card-badge');\n      await expect(workspaceCards).toHaveCount(3);\n\n      // Delete collection\n      await page.click('text=Collectiontest123just now >> button');\n      await page.locator('button:has-text(\"Delete\")').nth(1).click();\n      await page.locator('text=Yes').click();\n      await expect(workspaceCards).toHaveCount(2);\n    });","file":"prerelease/dashboard-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Open plugins menu and generate plugin","suites":[],"updatePoint":{"line":6,"column":45},"line":6,"code":"  test('Open plugins menu and generate plugin', async ({ page }) => {\n    // Opening settings\n    await page.locator('[data-testid=\"settings-button\"]').click();\n    // Switching to Plugins tab\n    await page.locator('li[role=\"tab\"]:has-text(\"Plugins\")').click();\n\n    // Generate new plugin\n    await page.locator('text=Generate New Plugin').click();\n    await page.locator('text=Generate').first().click();\n\n    // check if the plugin shows up on the plugin list\n    await expect(page.locator('.app')).toContainText('insomnia-plugin-demo-example');\n  });","file":"prerelease/plugins-interactions.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send requests","suites":[],"updatePoint":{"line":6,"column":23},"line":6,"code":"test('can send requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionSmoke testsjust now');\n\n  await page.click('button:has-text(\"GETsend JSON request\")');\n  await page.click('text=http://127.0.0.1:4010/pets/1Send >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"id\": \"1\"');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('{\"id\":\"1\"}');\n\n  await page.click('button:has-text(\"GETsends dummy.csv request and shows rich response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.csvSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('a,b,c');\n\n  await page.click('button:has-text(\"GETsends dummy.xml request and shows raw response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.xmlSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('xml version=\"1.0\"');\n  await expect(responseBody).toContainText('<LoginResult>');\n\n  await page.click('button:has-text(\"GETsends dummy.pdf request and shows rich response\")');\n  await page.click('text=http://127.0.0.1:4010/file/dummy.pdfSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('button:has-text(\"Preview\")');\n  await page.click('button:has-text(\"Raw Data\")');\n  await expect(responseBody).toContainText('PDF-1.4');\n\n  await page.click('button:has-text(\"GETsends request with basic authentication\")');\n  await page.click('text=http://127.0.0.1:4010/auth/basicSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('basic auth received');\n\n  await page.click('button:has-text(\"GETsends request with cookie and get cookie in response\")');\n  await page.click('text=http://127.0.0.1:4010/cookiesSend >> button');\n  await expect(statusTag).toContainText('200 OK');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('Set-Cookie: insomnia-test-cookie=value123');\n});","file":"smoke/app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can cancel requests","suites":[],"updatePoint":{"line":64,"column":25},"line":64,"code":"test('can cancel requests', async ({ app, page }) => {\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('smoke-test-collection.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionSmoke testsjust now');\n\n  await page.click('button:has-text(\"GETdelayed request\")');\n  await page.click('text=http://127.0.0.1:4010/delay/seconds/20Send >> button');\n\n  await page.click('[data-testid=\"response-pane\"] button:has-text(\"Cancel Request\")');\n  await page.click('text=Request was cancelled');\n});","file":"smoke/app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"url field is focused for first time users","suites":[],"updatePoint":{"line":81,"column":47},"line":81,"code":"test('url field is focused for first time users', async ({ page }) => {\n  const urlInput = ':nth-match(textarea, 2)';\n  const locator = page.locator(urlInput);\n  await expect(locator).toBeFocused();\n});","file":"smoke/app.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Sign in with GitHub","suites":[],"updatePoint":{"line":3,"column":25},"line":3,"code":"test('Sign in with GitHub', async ({ app, page }) => {\n  await page.locator('text=Setup Git Sync').click();\n  await page.locator('button:has-text(\"Repository Settings\")').click();\n\n  await page.locator('li[role=\"tab\"]:has-text(\"GitHub\")').click();\n\n  // Prevent the app from opening the browser to the authorization page\n  // and return the url that would be created by following the GitHub OAuth flow.\n  // https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\n  const fakeGitHubOAuthWebFlow = app.evaluate(electron => {\n    return new Promise<{ redirectUrl: string }>(resolve => {\n      const webContents = electron.BrowserWindow.getAllWindows()[0].webContents;\n      // Remove all navigation listeners so that only the one we inject will run\n      webContents.removeAllListeners('will-navigate');\n      webContents.on('will-navigate', (event: Event, url: string) => {\n        event.preventDefault();\n        const parsedUrl = new URL(url);\n        // We use the same state parameter that the app created to assert that we prevent CSRF\n        const stateSearchParam = parsedUrl.searchParams.get('state') || '';\n        const redirectUrl = `insomnia://oauth/github/authenticate?state=${stateSearchParam}&code=12345`;\n        resolve({ redirectUrl });\n      });\n    });\n  });\n\n  const [{ redirectUrl }] = await Promise.all([\n    fakeGitHubOAuthWebFlow,\n    page.locator('text=Authenticate with GitHub').click({\n      // When playwright clicks a link it waits for navigation to finish.\n      // In our case we are stubbing the navigation and we don't want to wait for it.\n      noWaitAfter: true,\n    }),\n  ]);\n\n  await page.locator('input[name=\"link\"]').click();\n\n  await page.locator('input[name=\"link\"]').fill(redirectUrl);\n\n  await page.locator('button[name=\"add-token\"]').click();\n\n  await page\n    .locator('input[name=\"uri\"]')\n    .fill('https://github.com/insomnia/example-repo');\n\n  await page.locator('data-testid=git-repository-settings-modal__sync-btn').click();\n});","file":"smoke/git-sync.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can render schema and send GraphQL requests","suites":[],"updatePoint":{"line":6,"column":49},"line":6,"code":"test('can render schema and send GraphQL requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n\n  // Create a new the project\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  // Copy the collection with the graphql query to clipboard\n  const text = await loadFixture('graphql.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  // Import from clipboard\n  await page.click('button:has-text(\"Clipboard\")');\n  // Open the new collection workspace\n  await page.click('text=CollectionSmoke GraphQLjust now');\n  // Open the graphql request\n  await page.click('button:has-text(\"POSTGQLGraphQL request\")');\n  // Assert the schema is fetched after switching to GraphQL request\n  await expect(page.locator('.app')).toContainText('schema fetched just now');\n\n  // Assert schema documentation stuff\n  await page.click('[data-testid=\"request-pane\"] button:has-text(\"schema\")');\n  await page.click('button:has-text(\"Show Documentation\")');\n  await page.click('a:has-text(\"Query\")');\n  await page.locator('a:has-text(\"RingBearer\")').click();\n  const graphqlExplorer = page.locator('.graphql-explorer');\n  await expect(graphqlExplorer).toContainText('Characters who at any time bore a Ring of Power.');\n  await page.click('text=QueryRingBearer >> button');\n\n  // Send and assert GraphQL request\n  await page.click('[data-testid=\"request-pane\"] >> text=Send');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  await expect(statusTag).toContainText('200 OK');\n\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n  await expect(responseBody).toContainText('\"bearer\": \"Gandalf\"');\n});","file":"smoke/graphql.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can send gRPC requests","suites":[],"updatePoint":{"line":6,"column":28},"line":6,"code":"test('can send gRPC requests', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('grpc.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionSmoke gRPCjust now');\n\n  await page.click('button:has-text(\"gRPCsay hi!\")');\n  await page.click('text=Send');\n  await expect(statusTag).toContainText('0 OK');\n  await expect(responseBody).toContainText('\"reply\": \"hi\"');\n});","file":"smoke/grpc.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"Sign in with Gitlab","suites":[],"updatePoint":{"line":3,"column":25},"line":3,"code":"test('Sign in with Gitlab', async ({ app, page }) => {\n  await page.locator('text=Setup Git Sync').click();\n  await page.locator('button:has-text(\"Repository Settings\")').click();\n  await page.locator('li[role=\"tab\"]:has-text(\"GitLab\")').click();\n\n  const fakeGitLabOAuthWebFlow = app.evaluate(electron => {\n    return new Promise<{ redirectUrl: string }>(resolve => {\n      const webContents = electron.BrowserWindow.getAllWindows()[0].webContents;\n      // Remove all navigation listeners so that only the one we inject will run\n      webContents.removeAllListeners('will-navigate');\n      webContents.on('will-navigate', (event: Event, url: string) => {\n        event.preventDefault();\n        const parsedUrl = new URL(url);\n        // We use the same state parameter that the app created to assert that we prevent CSRF\n        const stateSearchParam = parsedUrl.searchParams.get('state') || '';\n        const redirectUrl = `insomnia://oauth/gitlab/authenticate?code=12345&state=${stateSearchParam}`;\n        resolve({ redirectUrl });\n      });\n    });\n  });\n\n  const [{ redirectUrl }] = await Promise.all([\n    fakeGitLabOAuthWebFlow,\n    page.locator('text=Authenticate with GitLab').click({\n      // When playwright clicks a link it waits for navigation to finish.\n      // In our case we are stubbing the navigation and we don't want to wait for it.\n      noWaitAfter: true,\n    }),\n  ]);\n\n  await page.locator('input[name=\"link\"]').click();\n  await page.locator('input[name=\"link\"]').fill(redirectUrl);\n  await page.locator('button[name=\"add-token\"]').click();\n\n  test.expect(await page.locator('text=\"Mark Kim\"')).toBeTruthy();\n  test.expect(await page.locator('button[name=\"sign-out\"]')).toBeTruthy();\n});","file":"smoke/oauth-gitlab.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can make oauth2 requests","suites":[],"updatePoint":{"line":6,"column":30},"line":6,"code":"test('can make oauth2 requests', async ({ app, page }) => {\n  if (process.platform === 'darwin') {\n    test.setTimeout(6 * 60 * 1000);\n  } else {\n    test.slow();\n  }\n\n  const sendButton = page.locator('[data-testid=\"request-pane\"] button:has-text(\"Send\")');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.locator('[data-testid=\"project\"]').click();\n  const projectView = page.locator('#wrapper');\n  await projectView.locator('text=Create').click();\n\n  const text = await loadFixture('oauth.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.locator('button:has-text(\"Clipboard\")').click();\n  await page.locator('text=CollectionOauth Testingjust now').click();\n\n  // Authorization code\n  await page.locator('button:has-text(\"Authorization Code\")').click();\n\n  // No PKCE\n  await page.locator('button:has-text(\"No PKCE\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n\n  const [authorizationCodePage] = await Promise.all([\n    app.waitForEvent('window'),\n    sendButton.click(),\n  ]);\n\n  await authorizationCodePage.waitForLoadState();\n  await authorizationCodePage.waitForFunction(\"document.cookie !== ''\");\n  await authorizationCodePage.locator('[name=\"login\"]').fill('admin');\n  await authorizationCodePage.locator('[name=\"password\"]').fill('admin');\n  await authorizationCodePage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Navigate to the OAuth2 Tab and refresh the token from there\n  await page.locator('li[role=\"tab\"]:has-text(\"OAuth 2\")').click();\n\n  const tokenInput = page.locator('[for=\"Access-Token\"] > input');\n  const prevToken = await tokenInput.inputValue();\n  await page.locator('button:has-text(\"Refresh Token\")').click();\n  await expect(tokenInput).not.toHaveValue(prevToken);\n\n  // Clear the session and tokens and fetch a token manually\n  await page.locator('text=Advanced Options').click();\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.locator('button:text-is(\"Clear\")').click();\n\n  const [refreshPage] = await Promise.all([\n    app.waitForEvent('window'),\n    page.locator('button:has-text(\"Fetch Tokens\")').click(),\n  ]);\n\n  await refreshPage.waitForLoadState();\n  // expect an _interaction cookie to be set with the sign in form\n  await refreshPage.waitForFunction(\"document.cookie !== ''\");\n  await refreshPage.locator('[name=\"login\"]').fill('admin');\n  await refreshPage.locator('[name=\"password\"]').fill('admin');\n  await refreshPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(tokenInput).not.toHaveValue('');\n\n  // PKCE SHA256\n  await page.locator('button:has-text(\"PKCE SHA256\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('authorization_code');\n  await expect(page.locator('#Code-Challenge-Method')).toHaveValue('S256');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // PKCE Plain\n  await page.locator('button:has-text(\"PKCE Plain\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('authorization_code');\n  await expect(page.locator('#Code-Challenge-Method')).toHaveValue('plain');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Implicit\n  await page.locator('button:has-text(\"Implicit\")').click();\n\n  // ID Token\n  await page.locator('button:has-text(\"ID Token\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/id-token');\n  await expect(page.locator('#Grant-Type')).toHaveValue('implicit');\n\n  const [implicitPage] = await Promise.all([\n    app.waitForEvent('window'),\n    sendButton.click(),\n  ]);\n  await implicitPage.waitForLoadState();\n  await implicitPage.waitForFunction(\"document.cookie !== ''\");\n  await implicitPage.locator('[name=\"login\"]').fill('admin');\n  await implicitPage.locator('[name=\"password\"]').fill('admin');\n  await implicitPage.locator('button:has-text(\"Sign-in\")').click();\n\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // ID and Access Token\n  await page.locator('button:has-text(\"ID and Access Token\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('implicit');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"admin\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Client Credentials\n  await page.locator('button:has-text(\"Client Credentials\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/client-credential');\n  await expect(page.locator('#Grant-Type')).toHaveValue('client_credentials');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"clientId\": \"client_credentials\"');\n\n  // Reset the OAuth 2 session from Preferences\n  if (process.platform === 'darwin') {\n    await page.keyboard.press('Meta+,');\n  } else {\n    await page.keyboard.press('Control+,');\n  }\n  await page.locator('button:has-text(\"Clear OAuth 2 session\")').click();\n  await page.keyboard.press('Escape');\n\n  // Resource Owner Password Credentials\n  await page.locator('button:has-text(\"Resource Owner Password Credentials\")').click();\n  await expect(page.locator('.app')).toContainText('http://127.0.0.1:4010/oidc/me');\n  await expect(page.locator('#Grant-Type')).toHaveValue('password');\n  await sendButton.click();\n  await expect(statusTag).toContainText('200 OK');\n  await expect(responseBody).toContainText('\"sub\": \"foo\"');\n});","file":"smoke/oauth.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can render Spectral OpenAPI lint errors","suites":[],"updatePoint":{"line":5,"column":45},"line":5,"code":"test('can render Spectral OpenAPI lint errors', async ({ page }) => {\n  await page.click('text=Design');\n  await page.click('text=start from an example');\n\n  const codeEditor = page.locator('.pane-one');\n  await expect(codeEditor).toContainText('openapi: 3.0.0');\n  const specPreview = page.locator('.information-container');\n  await expect(specPreview).toContainText('This is a sample server Petstore server');\n\n  // Cause a lint error\n  await page.locator('[data-testid=\"CodeEditor\"] >> text=info').click();\n  await page.locator('textarea').nth(1).press('Tab');\n\n  await expect(codeEditor).toContainText('oas3-schema Object must have required property \"info\"');\n});","file":"smoke/openapi.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"can make websocket connection","suites":[],"updatePoint":{"line":6,"column":35},"line":6,"code":"test('can make websocket connection', async ({ app, page }) => {\n  test.slow(process.platform === 'darwin' || process.platform === 'win32', 'Slow app start on these platforms');\n  const statusTag = page.locator('[data-testid=\"response-status-tag\"]:visible');\n  const responseBody = page.locator('[data-testid=\"response-pane\"] >> [data-testid=\"CodeEditor\"]:visible', {\n    has: page.locator('.CodeMirror-activeline'),\n  });\n\n  await page.click('[data-testid=\"project\"]');\n  await page.click('text=Create');\n\n  const text = await loadFixture('websockets.yaml');\n  await app.evaluate(async ({ clipboard }, text) => clipboard.writeText(text), text);\n\n  await page.click('button:has-text(\"Clipboard\")');\n  await page.click('text=CollectionWebSocketsjust now');\n\n  await page.click('button:has-text(\"localhost:4010\")');\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('WebSocket connection established');\n  await page.click('text=Disconnect');\n  await expect(responseBody).toContainText('Closing connection with code 1005');\n\n  // Can connect with Basic Auth\n  await page.click('button:has-text(\"basic-auth\")');\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/basic-auth');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('> authorization: Basic dXNlcjpwYXNzd29yZA==');\n\n  // Can connect with Bearer Auth\n  await page.click('button:has-text(\"bearer\")');\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/bearer');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('> authorization: Bearer insomnia-cool-token-!!!1112113243111');\n\n  // Can handle redirects\n  await page.click('button:has-text(\"redirect\")');\n  await expect(page.locator('.app')).toContainText('ws://localhost:4010/redirect');\n  await page.click('text=Connect');\n  await expect(statusTag).toContainText('101 Switching Protocols');\n  await page.click('[data-testid=\"response-pane\"] >> [role=\"tab\"]:has-text(\"Timeline\")');\n  await expect(responseBody).toContainText('WebSocket connection established');\n\n  const webSocketActiveConnections = page.locator('[data-testid=\"WebSocketSpinner__Connected\"]');\n\n  // Basic auth, Bearer auth, and Redirect connections are displayed as open\n  await expect(webSocketActiveConnections).toHaveCount(3);\n\n  // Can disconnect from all connections\n  await page.locator('button[name=\"DisconnectDropdown__DropdownButton\"]').click();\n  await page.locator('text=Disconnect all requests').click();\n  await expect(webSocketActiveConnections).toHaveCount(0);\n});","file":"smoke/websocket.test.ts","skipped":false,"dir":"packages/insomnia-smoke-test/tests"},{"name":"encodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":19,"column":21,"index":524},"line":19,"code":"  it('encodes nothing', assertTemplate(['encode', 'normal', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"encodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":20,"column":23,"index":597},"line":20,"code":"  it('encodes something', assertTemplate(['encode', 'normal', 'my string'], 'bXkgc3RyaW5n'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urlencodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":21,"column":24,"index":692},"line":21,"code":"  it('urlencodes nothing', assertTemplate(['encode', 'url', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urlencodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":22,"column":26,"index":765},"line":22,"code":"  it('urlencodes something', assertTemplate(['encode', 'url', 'hello world'], 'aGVsbG8gd29ybGQ'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"decodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":23,"column":21,"index":859},"line":23,"code":"  it('decodes nothing', assertTemplate(['decode', 'normal', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"decodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":24,"column":23,"index":932},"line":24,"code":"  it('decodes something', assertTemplate(['decode', 'normal', 'bXkgc3RyaW5n'], 'my string'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urldecodes nothing","suites":["Base64EncodeExtension"],"updatePoint":{"line":25,"column":24,"index":1027},"line":25,"code":"  it('urldecodes nothing', assertTemplate(['decode', 'url', ''], ''));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"urldecodes something","suites":["Base64EncodeExtension"],"updatePoint":{"line":26,"column":26,"index":1100},"line":26,"code":"  it('urldecodes something', assertTemplate(['decode', 'url', 'aGVsbG8gd29ybGQ'], 'hello world'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"fails on invalid action","suites":["Base64EncodeExtension"],"updatePoint":{"line":27,"column":29,"index":1202},"line":27,"code":"  it('fails on invalid action', assertTemplateFails(['foo', 'normal', ''], 'Unsupported operation \"foo\". Must be encode or decode.'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-base64/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: no cookies for url"],"updatePoint":{"line":8,"column":33,"index":238},"line":8,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n      try {\n        await tag.run(context, 'https://google.com/', '');\n      } catch (err) {\n        expect(err.message).toContain('No cookies in store for url \"https://google.com/');\n      }\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: cookie not found"],"updatePoint":{"line":33,"column":33,"index":1103},"line":33,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n      try {\n        await tag.run(context, 'https://insomnia.rest', 'bar');\n      } catch (err) {\n        expect(err.message).toContain('No cookie with name \"bar\"');\n        expect(err.message).toContain('\"foo\"');\n      }\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"should get cookie by name","suites":["plugin","CookieJarPlugin: cookie name found"],"updatePoint":{"line":59,"column":33,"index":1999},"line":59,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n      const result = await tag.run(context, 'https://insomnia.rest', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.js","skipped":false,"dir":"plugins/insomnia-plugin-cookie-jar/__tests__"},{"name":"reads from string","suites":["FileExtension"],"updatePoint":{"line":22,"column":23,"index":668},"line":22,"code":"  it('reads from string', assertTemplate([escaped], 'Hello World!'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"fails on missing file","suites":["FileExtension"],"updatePoint":{"line":23,"column":27,"index":742},"line":23,"code":"  it('fails on missing file', assertTemplateFails([path.resolve('/foo')], `ENOENT: no such file or directory, open '${path.resolve('/foo')}'`));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"fails on no 2nd param","suites":["FileExtension"],"updatePoint":{"line":24,"column":27,"index":887},"line":24,"code":"  it('fails on no 2nd param', assertTemplateFails([], 'No file selected'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-file/__tests__"},{"name":"hashes sha1","suites":["Plugin"],"updatePoint":{"line":20,"column":17,"index":521},"line":20,"code":"  it('hashes sha1', assertTemplate(['sha1', 'hex', 'foo'], '0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes sha256","suites":["Plugin"],"updatePoint":{"line":21,"column":19,"index":628},"line":21,"code":"  it('hashes sha256', assertTemplate(['sha256', 'hex', 'foo'], '2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes md5","suites":["Plugin"],"updatePoint":{"line":22,"column":16,"index":758},"line":22,"code":"  it('hashes md5', assertTemplate(['md5', 'hex', 'foo'], 'acbd18db4cc2f85cedef654fccc4a4d8'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash invalid algorithm","suites":["Plugin"],"updatePoint":{"line":23,"column":37,"index":874},"line":23,"code":"  it('fails to hash invalid algorithm', assertTemplateFails(['bad', 'hex', 'foo'], 'Digest method not supported'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to latin1","suites":["Plugin"],"updatePoint":{"line":26,"column":22,"index":989},"line":26,"code":"  it('hashes to latin1', assertTemplate(['md5', 'latin1', 'foo'], '¬½\u0018ÛLÂø\\\\íïeOÌÄ¤Ø'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to hex","suites":["Plugin"],"updatePoint":{"line":27,"column":19,"index":1075},"line":27,"code":"  it('hashes to hex', assertTemplate(['md5', 'hex', 'foo'], 'acbd18db4cc2f85cedef654fccc4a4d8'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes to base64","suites":["Plugin"],"updatePoint":{"line":28,"column":22,"index":1176},"line":28,"code":"  it('hashes to base64', assertTemplate(['md5', 'base64', 'foo'], 'rL0Y20zC+Fzt72VPzMSk2A=='));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash to invalid","suites":["Plugin"],"updatePoint":{"line":29,"column":30,"index":1280},"line":29,"code":"  it('fails to hash to invalid', assertTemplateFails(['md5', 'bad', 'foo'], 'Invalid encoding bad. Choices are hex, latin1, base64'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes empty string","suites":["Plugin"],"updatePoint":{"line":32,"column":25,"index":1423},"line":32,"code":"  it('hashes empty string', assertTemplate(['md5', 'hex', ''], 'd41d8cd98f00b204e9800998ecf8427e'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"hashes no string","suites":["Plugin"],"updatePoint":{"line":33,"column":22,"index":1521},"line":33,"code":"  it('hashes no string', assertTemplate(['md5', 'hex'], 'd41d8cd98f00b204e9800998ecf8427e'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"fails to hash non string","suites":["Plugin"],"updatePoint":{"line":34,"column":30,"index":1623},"line":34,"code":"  it('fails to hash non string', assertTemplateFails(['md5', 'hex', true], 'Cannot hash value of type \"boolean\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-hash/__tests__"},{"name":"renders default ISO","suites":["NowExtension"],"updatePoint":{"line":26,"column":25,"index":739},"line":26,"code":"  it('renders default ISO', assertTemplate([], isoRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders ISO-8601","suites":["NowExtension"],"updatePoint":{"line":27,"column":22,"index":792},"line":27,"code":"  it('renders ISO-8601', assertTemplate(['ISO-8601'], isoRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders seconds","suites":["NowExtension"],"updatePoint":{"line":28,"column":21,"index":854},"line":28,"code":"  it('renders seconds', assertTemplate(['seconds'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders s","suites":["NowExtension"],"updatePoint":{"line":29,"column":15,"index":913},"line":29,"code":"  it('renders s', assertTemplate(['s'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders unix","suites":["NowExtension"],"updatePoint":{"line":30,"column":18,"index":969},"line":30,"code":"  it('renders unix', assertTemplate(['unix'], secondsRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders millis","suites":["NowExtension"],"updatePoint":{"line":31,"column":20,"index":1030},"line":31,"code":"  it('renders millis', assertTemplate(['millis'], millisRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"renders ms","suites":["NowExtension"],"updatePoint":{"line":32,"column":16,"index":1088},"line":32,"code":"  it('renders ms', assertTemplate(['ms'], millisRe));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"fails on other","suites":["NowExtension"],"updatePoint":{"line":33,"column":20,"index":1146},"line":33,"code":"  it('fails on other', assertTemplateFails(['foo'], 'Invalid date type \"foo\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-now/__tests__"},{"name":"should get cookie by name","suites":["plugin","RequestExtension cookie"],"updatePoint":{"line":8,"column":33,"index":226},"line":8,"code":"    it('should get cookie by name', async () => {\n      const jar = jarFromCookies([]);\n      jar.setCookieSync(['foo=bar', 'path=/', 'domain=.insomnia.rest', 'HttpOnly Cache-Control: public, no-cache'].join('; '), 'https://insomnia.rest');\n      const cookies = await cookiesFromJar(jar);\n      const requests = [{\n        _id: 'req_1',\n        parameters: [],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const jars = [{\n        _id: 'jar_1',\n        parentId: 'wrk_1',\n        cookies\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests, jars);\n      const result = await tag.run(context, 'cookie', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get url","suites":["plugin","RequestExtension url"],"updatePoint":{"line":30,"column":22,"index":971},"line":30,"code":"    it('should get url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: 'bar'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n      const result = await tag.run(context, 'url');\n      expect(result).toBe('https://insomnia.rest/foo/bar?foo=bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get rendered url","suites":["plugin","RequestExtension url"],"updatePoint":{"line":45,"column":31,"index":1414},"line":45,"code":"    it('should get rendered url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n      const result = await tag.run(context, 'url');\n      expect(result).toBe('https://insomnia.rest/foo/bar?foo=bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get url","suites":["plugin","RequestExtension header"],"updatePoint":{"line":62,"column":22,"index":1906},"line":62,"code":"    it('should get url', async () => {\n      const requests = [{\n        _id: 'req_1',\n        headers: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n      const result = await tag.run(context, 'header', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get parameter","suites":["plugin","RequestExtension parameter"],"updatePoint":{"line":79,"column":28,"index":2380},"line":79,"code":"    it('should get parameter', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n      const result = await tag.run(context, 'parameter', 'foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"should get name","suites":["plugin","RequestExtension name"],"updatePoint":{"line":96,"column":23,"index":2850},"line":96,"code":"    it('should get name', async () => {\n      const requests = [{\n        _id: 'req_1',\n        name: 'Foo',\n        parameters: [{\n          name: 'foo',\n          value: '{{ foo }}'\n        }],\n        url: 'https://insomnia.rest/foo/bar'\n      }];\n      const context = _getTestContext([{\n        _id: 'wrk_1'\n      }], requests);\n      const result = await tag.run(context, 'name');\n      expect(result).toBe('Foo');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-request/__tests__"},{"name":"fails on no responses","suites":["Response tag","General"],"updatePoint":{"line":5,"column":29,"index":173},"line":5,"code":"    it('fails on no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const context = _genTestContext(requests);\n      try {\n        await tag.run(context, 'body', 'req_1', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('No responses for request');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no request","suites":["Response tag","General"],"updatePoint":{"line":18,"column":27,"index":566},"line":18,"code":"    it('fails on no request', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        _body: '{\"foo\": \"bar\"}'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_test', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Could not find request req_test');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on empty filter","suites":["Response tag","General"],"updatePoint":{"line":37,"column":29,"index":1125},"line":37,"code":"    it('fails on empty filter', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        _body: '{\"foo\": \"bar\"}'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('No body filter specified');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"basic query","suites":["Response tag","JSONPath"],"updatePoint":{"line":58,"column":19,"index":1696},"line":58,"code":"    it('basic query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', '$.foo');\n      expect(result).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid JSON","suites":["Response tag","JSONPath"],"updatePoint":{"line":74,"column":29,"index":2183},"line":74,"code":"    it('fails on invalid JSON', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '$.foo');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Invalid JSON: Unexpected end of JSON input');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid query","suites":["Response tag","JSONPath"],"updatePoint":{"line":94,"column":30,"index":2787},"line":94,"code":"    it('fails on invalid query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '$$');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: $$');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no results","suites":["Response tag","JSONPath"],"updatePoint":{"line":114,"column":27,"index":3371},"line":114,"code":"    it('fails on no results', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"foo\": \"bar\"}'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '$.missing');\n        fail('JSON should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: $.missing');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"allows more than 1 result if array of strings","suites":["Response tag","JSONPath"],"updatePoint":{"line":134,"column":53,"index":3995},"line":134,"code":"    it('allows more than 1 result if array of strings', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"array\": [\"bar\", \"baz\"]}'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', '$.array');\n      expect(result).toBe('[\"bar\",\"baz\"]');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"allows more than 1 result if array of integers","suites":["Response tag","JSONPath"],"updatePoint":{"line":150,"column":54,"index":4530},"line":150,"code":"    it('allows more than 1 result if array of integers', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json',\n        _body: '{\"array\": [1, 2]}'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', '$.array');\n      expect(result).toBe('[1,2]');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"works with utf-16 encoding","suites":["Response tag","JSONPath"],"updatePoint":{"line":166,"column":34,"index":5029},"line":166,"code":"    it('works with utf-16 encoding', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/json; charset=UTF-16',\n        _body: iconv.encode('{\"array\": [\"bar\", \"baz\"]}', 'UTF-16')\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'body', 'req_1', '$.array[0]')).toBe('bar');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"body\" query","suites":["Response tag","XPath"],"updatePoint":{"line":183,"column":43,"index":5591},"line":183,"code":"    it('renders basic response \"body\" query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar>Hello World!</bar></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', '/foo/bar');\n      expect(result).toBe('Hello World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"body\" attribute query","suites":["Response tag","XPath"],"updatePoint":{"line":199,"column":53,"index":6133},"line":199,"code":"    it('renders basic response \"body\" attribute query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar hello=\"World\">Hello World!</bar></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', '/foo/bar/@hello');\n      expect(result).toBe('World');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders query that does not start with slash","suites":["Response tag","XPath"],"updatePoint":{"line":215,"column":52,"index":6688},"line":215,"code":"    it('renders query that does not start with slash', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar hello=\"World\">Hello World!</bar></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      const result = await tag.run(context, 'body', 'req_1', 'substring(/foo/bar, 7)');\n      expect(result).toBe('World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"no results on invalid XML","suites":["Response tag","XPath"],"updatePoint":{"line":231,"column":33,"index":7232},"line":231,"code":"    it('no results on invalid XML', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<hi></hi></sstr>'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '/foo');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: /foo');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on invalid query","suites":["Response tag","XPath"],"updatePoint":{"line":251,"column":30,"index":7819},"line":251,"code":"    it('fails on invalid query', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '//');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Invalid XPath query: //');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on no results","suites":["Response tag","XPath"],"updatePoint":{"line":271,"column":27,"index":8394},"line":271,"code":"    it('fails on no results', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '/missing');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned no results: /missing');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"fails on more than 1 result","suites":["Response tag","XPath"],"updatePoint":{"line":291,"column":35,"index":8989},"line":291,"code":"    it('fails on more than 1 result', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'application/xml',\n        _body: '<foo><bar>Hello World!</bar><bar>And again!</bar></foo>'\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'body', 'req_1', '/foo/*');\n        fail('Should have failed');\n      } catch (err) {\n        expect(err.message).toContain('Returned more than one result: /foo/*');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response \"header\"","suites":["Response tag","ResponseExtension Header"],"updatePoint":{"line":313,"column":39,"index":9691},"line":313,"code":"    it('renders basic response \"header\"', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: '',\n        headers: [{\n          name: 'Content-Type',\n          value: 'application/json'\n        }, {\n          name: 'Content-Length',\n          value: '20'\n        }]\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'header', 'req_1', 'content-type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'Content-Type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'CONTENT-type')).toBe('application/json');\n      expect(await tag.run(context, 'header', 'req_1', 'CONTENT-type    ')).toBe('application/json');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"no results on missing header","suites":["Response tag","ResponseExtension Header"],"updatePoint":{"line":337,"column":36,"index":10596},"line":337,"code":"    it('no results on missing header', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        headers: [{\n          name: 'Content-Type',\n          value: 'application/json'\n        }, {\n          name: 'Content-Length',\n          value: '20'\n        }]\n      }];\n      const context = _genTestContext(requests, responses);\n      try {\n        await tag.run(context, 'header', 'req_1', 'missing');\n        fail('should have failed');\n      } catch (err) {\n        expect(err.message).toBe('No header with name \"missing\".\\n' + 'Choices are [\\n\\t\"Content-Type\",\\n\\t\"Content-Length\"\\n]');\n      }\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders basic response","suites":["Response tag","Raw"],"updatePoint":{"line":364,"column":30,"index":11376},"line":364,"code":"    it('renders basic response', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Hello World!'\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1')).toBe('Hello World!');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=always and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":381,"column":51,"index":11894},"line":381,"code":"    it('sends when behavior=always and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'always')).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=always and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":390,"column":53,"index":12235},"line":390,"code":"    it('sends when behavior=always and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_1',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Hello World!'\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'always')).toBe('Response res_2');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=no-history and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":405,"column":55,"index":12726},"line":405,"code":"    it('sends when behavior=no-history and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'no-history')).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=no-history and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":414,"column":65,"index":13083},"line":414,"code":"    it('does not send when behavior=no-history and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing'\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'no-history')).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=when-expired and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":429,"column":57,"index":13603},"line":429,"code":"    it('sends when behavior=when-expired and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 60)).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"sends when behavior=when-expired and response is old","suites":["Response tag","Dependency sending"],"updatePoint":{"line":438,"column":60,"index":13961},"line":438,"code":"    it('sends when behavior=when-expired and response is old', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        created: Date.now() - 60000\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 30)).toBe('Response res_2');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=when-expired and response is new","suites":["Response tag","Dependency sending"],"updatePoint":{"line":449,"column":68,"index":14372},"line":449,"code":"    it('does not send when behavior=when-expired and response is new', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing',\n        created: Date.now() - 60000\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'when-expired', 90)).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=never and no responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":465,"column":58,"index":14936},"line":465,"code":"    it('does not send when behavior=never and no responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses);\n      try {\n        expect(await tag.run(context, 'raw', 'req_1', '', 'never')).toBe('Response res_1');\n      } catch (err) {\n        expect(err.message).toBe('No responses for request');\n        return;\n      }\n      throw new Error('Running tag should have thrown exception');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not send when behavior=never and some responses","suites":["Response tag","Dependency sending"],"updatePoint":{"line":480,"column":60,"index":15472},"line":480,"code":"    it('does not send when behavior=never and some responses', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [{\n        _id: 'res_existing',\n        parentId: 'req_1',\n        statusCode: 200,\n        contentType: 'text/plain',\n        _body: 'Response res_existing'\n      }];\n      const context = _genTestContext(requests, responses);\n      expect(await tag.run(context, 'raw', 'req_1', '', 'never')).toBe('Response res_existing');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does not resend if request has already sent in recursive chain","suites":["Response tag","Dependency sending"],"updatePoint":{"line":495,"column":70,"index":16000},"line":495,"code":"    it('does not resend if request has already sent in recursive chain', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses, {\n        requestChain: ['req_1']\n      });\n      try {\n        await tag.run(context, 'raw', 'req_1', '', 'always');\n      } catch (err) {\n        expect(err.message).toBe('No responses for request');\n        return;\n      }\n      throw new Error('Running tag should have thrown exception');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"does send if request has not been sent in recursive chain","suites":["Response tag","Dependency sending"],"updatePoint":{"line":512,"column":65,"index":16554},"line":512,"code":"    it('does send if request has not been sent in recursive chain', async () => {\n      const requests = [{\n        _id: 'req_1',\n        parentId: 'wrk_1'\n      }];\n      const responses = [];\n      const context = _genTestContext(requests, responses, {\n        requestChain: ['req_2']\n      });\n      const response = await tag.run(context, 'raw', 'req_1', '', 'always');\n      expect(response).toBe('Response res_1');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should ensure fourth argument is maxAge","suites":["Response tag","Max Age"],"updatePoint":{"line":530,"column":47,"index":17091},"line":530,"code":"    it('should ensure fourth argument is maxAge', () => {\n      expect(maxAgeArg.displayName).toBe('Max age (seconds)');\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior and max age arguments are missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":533,"column":92,"index":17265},"line":533,"code":"    it('should hide when behavior and max age arguments are missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', ''].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior=no-history and max age argument is missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":538,"column":101,"index":17518},"line":538,"code":"    it('should hide when behavior=no-history and max age argument is missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', '', 'no-history'].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should show when behavior=when-expired and max age argument is missing - backward compatibility","suites":["Response tag","Max Age"],"updatePoint":{"line":543,"column":103,"index":17787},"line":543,"code":"    it('should show when behavior=when-expired and max age argument is missing - backward compatibility', () => {\n      const args = ['raw', 'req_1', '', 'when-expired'].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(false);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should hide when behavior=always","suites":["Response tag","Max Age"],"updatePoint":{"line":548,"column":40,"index":17996},"line":548,"code":"    it('should hide when behavior=always', () => {\n      const args = ['raw', 'req_1', '', 'always', 60].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(true);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"should show when behavior=when-expired","suites":["Response tag","Max Age"],"updatePoint":{"line":553,"column":46,"index":18208},"line":553,"code":"    it('should show when behavior=when-expired', () => {\n      const args = ['raw', 'req_1', '', 'when-expired', 60].map(toValueObj);\n      const hidden = maxAgeArg.hide(args);\n      expect(hidden).toBe(false);\n    });","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-response/__tests__"},{"name":"renders default v4","suites":["UuidExtension"],"updatePoint":{"line":24,"column":24,"index":713},"line":24,"code":"  it('renders default v4', assertTemplate([], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 4","suites":["UuidExtension"],"updatePoint":{"line":25,"column":15,"index":761},"line":25,"code":"  it('renders 4', assertTemplate(['4'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 4 num","suites":["UuidExtension"],"updatePoint":{"line":26,"column":19,"index":816},"line":26,"code":"  it('renders 4 num', assertTemplate([4], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders v4","suites":["UuidExtension"],"updatePoint":{"line":27,"column":16,"index":866},"line":27,"code":"  it('renders v4', assertTemplate(['v4'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 1","suites":["UuidExtension"],"updatePoint":{"line":28,"column":15,"index":918},"line":28,"code":"  it('renders 1', assertTemplate(['1'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders 1 num","suites":["UuidExtension"],"updatePoint":{"line":29,"column":19,"index":973},"line":29,"code":"  it('renders 1 num', assertTemplate([1], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"renders v1","suites":["UuidExtension"],"updatePoint":{"line":30,"column":16,"index":1023},"line":30,"code":"  it('renders v1', assertTemplate(['v1'], UUID_RE));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"},{"name":"fails on other","suites":["UuidExtension"],"updatePoint":{"line":31,"column":20,"index":1080},"line":31,"code":"  it('fails on other', assertTemplateFails(['foo'], 'Invalid UUID type \"foo\"'));","file":"index.test.js","skipped":false,"dir":"plugins/insomnia-plugin-uuid/__tests__"}]}