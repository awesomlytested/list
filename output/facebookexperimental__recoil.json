{"repo":"facebookexperimental/Recoil","url":"https://github.com/facebookexperimental/Recoil","branch":"main","configs":[{"package":"recoil-sync","lang":"js","dir":"packages/recoil-sync/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"refine","lang":"js","dir":"packages/refine/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Write to URL","suites":["Test URL Persistence"],"updatePoint":{"line":102,"column":20,"index":2434},"line":102,"code":"  test('Write to URL', () => testWriteToURL({\n    part: 'href'\n  }, () => {\n    expect(location.search).toBe('');\n    expect(location.pathname).toBe('/TEST');\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to URL - Anchor Hash","suites":["Test URL Persistence"],"updatePoint":{"line":108,"column":34,"index":2614},"line":108,"code":"  test('Write to URL - Anchor Hash', () => testWriteToURL({\n    part: 'hash'\n  }, () => {\n    expect(location.search).toBe('?foo=bar');\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to URL - Query Search","suites":["Test URL Persistence"],"updatePoint":{"line":113,"column":35,"index":2758},"line":113,"code":"  test('Write to URL - Query Search', () => testWriteToURL({\n    part: 'search'\n  }, () => {\n    expect(location.hash).toBe('#anchor');\n    expect(new URL(location.href).searchParams.get('foo')).toBe(null);\n    expect(new URL(location.href).searchParams.get('bar')).toBe(null);\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to URL - Query Params","suites":["Test URL Persistence"],"updatePoint":{"line":120,"column":35,"index":3043},"line":120,"code":"  test('Write to URL - Query Params', () => testWriteToURL({\n    part: 'queryParams'\n  }, () => {\n    expect(location.hash).toBe('#anchor');\n    expect(new URL(location.href).searchParams.get('foo')).toBe('bar');\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to URL - Query Param","suites":["Test URL Persistence"],"updatePoint":{"line":126,"column":34,"index":3262},"line":126,"code":"  test('Write to URL - Query Param', () => testWriteToURL({\n    part: 'queryParams',\n    param: 'bar'\n  }, () => {\n    expect(location.hash).toBe('#anchor');\n    expect(new URL(location.href).searchParams.get('foo')).toBe('bar');\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to multiple params","suites":["Test URL Persistence"],"updatePoint":{"line":133,"column":32,"index":3497},"line":133,"code":"  test('Write to multiple params', async () => {\n    const locA = {\n      part: 'queryParams',\n      param: 'paramA'\n    };\n    const locB = {\n      part: 'queryParams',\n      param: 'paramB'\n    };\n    const atomA = atom({\n      key: 'recoil-url-sync multiple param A',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        storeKey: 'A',\n        itemKey: 'x',\n        refine: string()\n      })]\n    });\n    const atomB = atom({\n      key: 'recoil-url-sync multiple param B',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        storeKey: 'B',\n        itemKey: 'x',\n        refine: string()\n      })]\n    });\n    const [AtomA, setA] = componentThatReadsAndWritesAtom(atomA);\n    const [AtomB, setB] = componentThatReadsAndWritesAtom(atomB);\n    renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n      storeKey: \"A\",\n      location: locA\n    }), /*#__PURE__*/React.createElement(TestURLSync, {\n      storeKey: \"B\",\n      location: locB\n    }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null)));\n    act(() => setA('A'));\n    act(() => setB('B'));\n    expectURL([[locA, {\n      x: 'A'\n    }], [locB, {\n      x: 'B'\n    }]]);\n  });","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL","suites":["Test URL Persistence"],"updatePoint":{"line":219,"column":21,"index":5828},"line":219,"code":"  test('Read from URL', () => testReadFromURL({\n    part: 'href'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL - Anchor Hash","suites":["Test URL Persistence"],"updatePoint":{"line":222,"column":35,"index":5914},"line":222,"code":"  test('Read from URL - Anchor Hash', () => testReadFromURL({\n    part: 'hash'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL - Search Query","suites":["Test URL Persistence"],"updatePoint":{"line":225,"column":36,"index":6001},"line":225,"code":"  test('Read from URL - Search Query', () => testReadFromURL({\n    part: 'search'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL - Query Params","suites":["Test URL Persistence"],"updatePoint":{"line":228,"column":36,"index":6090},"line":228,"code":"  test('Read from URL - Query Params', () => testReadFromURL({\n    part: 'queryParams'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL - Query Param","suites":["Test URL Persistence"],"updatePoint":{"line":231,"column":35,"index":6183},"line":231,"code":"  test('Read from URL - Query Param', () => testReadFromURL({\n    part: 'queryParams',\n    param: 'param'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL - Query Param with other param","suites":["Test URL Persistence"],"updatePoint":{"line":235,"column":52,"index":6313},"line":235,"code":"  test('Read from URL - Query Param with other param', () => testReadFromURL({\n    part: 'queryParams',\n    param: 'other'\n  }));","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from URL upgrade","suites":["Test URL Persistence"],"updatePoint":{"line":239,"column":29,"index":6420},"line":239,"code":"  test('Read from URL upgrade', async () => {\n    const loc = {\n      part: 'hash'\n    }; // Fail validation\n\n    const atomA = atom({\n      key: 'recoil-url-sync fail validation',\n      default: 'DEFAULT',\n      effects: [// No matching sync effect\n      syncEffect({\n        refine: string(),\n        actionOnFailure_UNSTABLE: 'defaultValue'\n      })]\n    }); // Upgrade from number\n\n    const atomB = atom({\n      key: 'recoil-url-sync upgrade number',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        refine: match(string(), asType(number(), num => `${num}`), asType(string(), () => 'IGNORE') // This rule is ignored\n        )\n      })]\n    }); // Upgrade from string\n\n    const atomC = atom({\n      key: 'recoil-url-sync upgrade string',\n      default: 0,\n      effects: [syncEffect({\n        refine: match(number(), asType(string(), Number), asType(number(), () => 999) // This rule is ignored\n        )\n      })]\n    });\n    history.replaceState(null, '', encodeURL([[loc, {\n      'recoil-url-sync fail validation': 123,\n      'recoil-url-sync upgrade number': 123,\n      'recoil-url-sync upgrade string': '123'\n    }]]));\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n      location: loc\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomA\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomB\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomC\n    })));\n    expect(container.textContent).toBe('\"DEFAULT\"\"123\"123');\n  });","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read/Write from URL with upgrade","suites":["Test URL Persistence"],"updatePoint":{"line":287,"column":40,"index":8029},"line":287,"code":"  test('Read/Write from URL with upgrade', async () => {\n    const loc1 = {\n      part: 'queryParams',\n      param: 'param1'\n    };\n    const loc2 = {\n      part: 'queryParams',\n      param: 'param2'\n    };\n    const atomA = atom({\n      key: 'recoil-url-sync read/write upgrade type',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        refine: match(string(), asType(number(), num => `${num}`))\n      })]\n    });\n    const atomB = atom({\n      key: 'recoil-url-sync read/write upgrade key',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        itemKey: 'OLD KEY',\n        refine: string()\n      }), syncEffect({\n        itemKey: 'NEW KEY',\n        refine: string()\n      })]\n    });\n    const atomC = atom({\n      key: 'recoil-url-sync read/write upgrade storage',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        refine: string()\n      }), syncEffect({\n        storeKey: 'SYNC_2',\n        refine: string()\n      })]\n    });\n    history.replaceState(null, '', encodeURL([[loc1, {\n      'recoil-url-sync read/write upgrade type': 123,\n      'OLD KEY': 'OLD',\n      'recoil-url-sync read/write upgrade storage': 'STR1'\n    }], [loc2, {\n      'recoil-url-sync read/write upgrade storage': 'STR2'\n    }]]));\n    const [AtomA, setA, resetA] = componentThatReadsAndWritesAtom(atomA);\n    const [AtomB, setB, resetB] = componentThatReadsAndWritesAtom(atomB);\n    const [AtomC, setC, resetC] = componentThatReadsAndWritesAtom(atomC);\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n      location: loc1\n    }), /*#__PURE__*/React.createElement(TestURLSync, {\n      location: loc2,\n      storeKey: \"SYNC_2\"\n    }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(AtomC, null)));\n    expect(container.textContent).toBe('\"123\"\"OLD\"\"STR2\"');\n    act(() => setA('A'));\n    act(() => setB('B'));\n    act(() => setC('C'));\n    expect(container.textContent).toBe('\"A\"\"B\"\"C\"');\n    expectURL([[loc1, {\n      'recoil-url-sync read/write upgrade type': 'A',\n      'OLD KEY': 'B',\n      'NEW KEY': 'B',\n      'recoil-url-sync read/write upgrade storage': 'C'\n    }], [loc2, {\n      'recoil-url-sync read/write upgrade storage': 'C'\n    }]]);\n    act(() => resetA());\n    act(() => resetB());\n    act(() => resetC());\n    expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n    expectURL([[loc1, {}], [loc2, {}]]);\n  });","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Persist default on read","suites":["Test URL Persistence"],"updatePoint":{"line":359,"column":31,"index":10544},"line":359,"code":"  test('Persist default on read', async () => {\n    const loc = {\n      part: 'hash'\n    };\n    const atomA = atom({\n      key: 'recoil-url-sync persist on read default',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        refine: string(),\n        syncDefault: true\n      })]\n    });\n    const atomB = atom({\n      key: 'recoil-url-sync persist on read init',\n      default: 'DEFAULT',\n      effects: [({\n        setSelf\n      }) => setSelf('INIT_BEFORE'), syncEffect({\n        refine: string(),\n        syncDefault: true\n      }), ({\n        setSelf\n      }) => setSelf('INIT_AFTER')]\n    });\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n      location: loc\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomA\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomB\n    })));\n    await flushPromisesAndTimers();\n    expect(container.textContent).toBe('\"DEFAULT\"\"INIT_AFTER\"');\n    expectURL([[loc, {\n      'recoil-url-sync persist on read default': 'DEFAULT',\n      'recoil-url-sync persist on read init': 'INIT_AFTER'\n    }]]);\n  });","file":"RecoilSync_URL-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Upgrade item ID","suites":[],"updatePoint":{"line":49,"column":21,"index":758},"line":49,"code":"test('Upgrade item ID', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n  const myAtom = atom({\n    key: 'recoil-url-sync upgrade itemID',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string(),\n      itemKey: 'new_key',\n      read: ({\n        read\n      }) => read('old_key') ?? read('new_key')\n    })]\n  });\n  history.replaceState(null, '', encodeURL([[loc, {\n    old_key: 'OLD'\n  }]]));\n  const [Atom, setAtom, resetAtom] = componentThatReadsAndWritesAtom(myAtom);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RecoilURLSyncJSON, {\n    location: loc\n  }), /*#__PURE__*/React.createElement(Atom, null))); // Test that we can load based on old key\n\n  expect(container.textContent).toEqual('\"OLD\"'); // Test that we can save to the new key\n\n  act(() => setAtom('NEW'));\n  expect(container.textContent).toEqual('\"NEW\"');\n  expectURL([[loc, {\n    new_key: 'NEW'\n  }]]); // Test that we can reset the atom and get the default instead of the old key's value\n\n  act(resetAtom);\n  expect(container.textContent).toEqual('\"DEFAULT\"');\n  expectURL([[loc, {}]]);\n});","file":"RecoilSync_URLCompound-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Many items to one atom","suites":[],"updatePoint":{"line":84,"column":28,"index":1930},"line":84,"code":"test('Many items to one atom', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n\n  const manyToOneSyncEffct = () => syncEffect({\n    refine: dict(nullable(number())),\n    read: ({\n      read\n    }) => {\n      const foo = read('foo');\n      const bar = read('bar');\n      return {\n        foo: foo instanceof DefaultValue ? undefined : foo,\n        bar: bar instanceof DefaultValue ? undefined : bar\n      };\n    },\n    write: ({\n      write,\n      reset\n    }, newValue) => {\n      if (newValue instanceof DefaultValue) {\n        reset('foo');\n        reset('bar');\n        return;\n      }\n\n      for (const key of Object.keys(newValue)) {\n        write(key, newValue[key]);\n      }\n    }\n  });\n\n  const myAtom = atom({\n    key: 'recoil-url-sync many-to-one',\n    default: {},\n    effects: [manyToOneSyncEffct()]\n  });\n  history.replaceState(null, '', encodeURL([[loc, {\n    foo: 1\n  }]]));\n  const [Atom, setAtom, resetAtom] = componentThatReadsAndWritesAtom(myAtom);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RecoilURLSyncJSON, {\n    location: loc\n  }), /*#__PURE__*/React.createElement(Atom, null))); // Test initialize value from URL\n\n  expect(container.textContent).toBe('{\"foo\":1}'); // Test subscribe to URL updates\n\n  await gotoURL([[loc, {\n    foo: 1,\n    bar: 2\n  }]]);\n  expect(container.textContent).toBe('{\"bar\":2,\"foo\":1}'); // Test mutating atoms will update URL\n\n  act(() => setAtom({\n    foo: 3,\n    bar: 4\n  }));\n  expectURL([[loc, {\n    foo: 3,\n    bar: 4\n  }]]); // Test reseting atoms will update URL\n\n  act(resetAtom);\n  expectURL([[loc, {}]]);\n});","file":"RecoilSync_URLCompound-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"One item to multiple atoms","suites":[],"updatePoint":{"line":150,"column":32,"index":3597},"line":150,"code":"test('One item to multiple atoms', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n  const input = assertion(dict(nullable(number())));\n\n  const oneToManySyncEffect = prop => syncEffect({\n    refine: nullable(number()),\n    read: ({\n      read\n    }) => {\n      const compound = input(read('compound'));\n      return prop in compound ? compound[prop] : new DefaultValue();\n    },\n    write: ({\n      write,\n      read\n    }, newValue) => {\n      const compound = { ...input(read('compound'))\n      };\n\n      if (newValue instanceof DefaultValue) {\n        delete compound[prop];\n        return write('compound', compound);\n      }\n\n      return write('compound', { ...compound,\n        [prop]: newValue\n      });\n    }\n  });\n\n  const fooAtom = atom({\n    key: 'recoil-url-sync one-to-many foo',\n    default: 0,\n    effects: [oneToManySyncEffect('foo')]\n  });\n  const barAtom = atom({\n    key: 'recoil-url-sync one-to-many bar',\n    default: null,\n    effects: [oneToManySyncEffect('bar')]\n  });\n  history.replaceState(null, '', encodeURL([[loc, {\n    compound: {\n      foo: 1\n    }\n  }]]));\n  const [Foo, setFoo, resetFoo] = componentThatReadsAndWritesAtom(fooAtom);\n  const [Bar, setBar, resetBar] = componentThatReadsAndWritesAtom(barAtom);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RecoilURLSyncJSON, {\n    location: loc\n  }), /*#__PURE__*/React.createElement(Foo, null), /*#__PURE__*/React.createElement(Bar, null))); // Test initialize value from URL\n\n  expect(container.textContent).toBe('1null'); // Test subscribe to URL updates\n\n  await gotoURL([[loc, {\n    compound: {\n      foo: 1,\n      bar: 2\n    }\n  }]]);\n  expect(container.textContent).toBe('12'); // Test mutating atoms will update URL\n\n  act(() => setFoo(3));\n  expect(container.textContent).toBe('32');\n  expectURL([[loc, {\n    compound: {\n      foo: 3,\n      bar: 2\n    }\n  }]]);\n  act(() => setBar(4));\n  expect(container.textContent).toBe('34');\n  expectURL([[loc, {\n    compound: {\n      foo: 3,\n      bar: 4\n    }\n  }]]); // Test reseting atoms will update URL\n\n  act(resetFoo);\n  expect(container.textContent).toBe('04');\n  expectURL([[loc, {\n    compound: {\n      bar: 4\n    }\n  }]]);\n  act(resetBar);\n  expect(container.textContent).toBe('0null');\n  expectURL([[loc, {\n    compound: {}\n  }]]);\n});","file":"RecoilSync_URLCompound-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"One item to atom family","suites":[],"updatePoint":{"line":243,"column":29,"index":5962},"line":243,"code":"test('One item to atom family', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n  const input = assertion(dict(nullable(number())));\n\n  const oneToFamilyEffect = prop => syncEffect({\n    refine: nullable(number()),\n    read: ({\n      read\n    }) => {\n      const compound = input(read('compound'));\n      return prop in compound ? compound[prop] : new DefaultValue();\n    },\n    write: ({\n      write,\n      read\n    }, newValue) => {\n      const compound = { ...input(read('compound'))\n      };\n\n      if (newValue instanceof DefaultValue) {\n        delete compound[prop];\n        return write('compound', compound);\n      }\n\n      return write('compound', { ...compound,\n        [prop]: newValue\n      });\n    }\n  });\n\n  const myAtoms = atomFamily({\n    key: 'recoil-rul-sync one-to-family',\n    default: null,\n    effects: prop => [oneToFamilyEffect(prop)]\n  });\n  history.replaceState(null, '', encodeURL([[loc, {\n    compound: {\n      foo: 1\n    }\n  }]]));\n  const [Foo, setFoo, resetFoo] = componentThatReadsAndWritesAtom(myAtoms('foo'));\n  const [Bar, setBar, resetBar] = componentThatReadsAndWritesAtom(myAtoms('bar'));\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RecoilURLSyncJSON, {\n    location: loc\n  }), /*#__PURE__*/React.createElement(Foo, null), /*#__PURE__*/React.createElement(Bar, null))); // Test initialize value from URL\n\n  expect(container.textContent).toBe('1null'); // Test subscribe to URL updates\n\n  await gotoURL([[loc, {\n    compound: {\n      foo: 1,\n      bar: 2\n    }\n  }]]);\n  expect(container.textContent).toBe('12'); // Test mutating atoms will update URL\n\n  act(() => setFoo(3));\n  expect(container.textContent).toBe('32');\n  expectURL([[loc, {\n    compound: {\n      foo: 3,\n      bar: 2\n    }\n  }]]);\n  act(() => setBar(4));\n  expect(container.textContent).toBe('34');\n  expectURL([[loc, {\n    compound: {\n      foo: 3,\n      bar: 4\n    }\n  }]]); // Test reseting atoms will update URL\n\n  act(resetFoo);\n  expect(container.textContent).toBe('null4');\n  expectURL([[loc, {\n    compound: {\n      bar: 4\n    }\n  }]]);\n  act(resetBar);\n  expect(container.textContent).toBe('nullnull');\n  expectURL([[loc, {\n    compound: {}\n  }]]);\n});","file":"RecoilSync_URLCompound-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Push URLs in mock history","suites":[],"updatePoint":{"line":72,"column":31,"index":1460},"line":72,"code":"test('Push URLs in mock history', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n  const atomA = atom({\n    key: 'recoil-url-sync replace',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'replace'\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-url-sync push',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'push'\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-url-sync push 2',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'push'\n    })]\n  });\n  const [AtomA, setA, resetA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB, resetB] = componentThatReadsAndWritesAtom(atomB);\n  const [AtomC, setC] = componentThatReadsAndWritesAtom(atomC);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n    location: loc,\n    browserInterface: mockBrowserURL\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(AtomC, null)));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  const baseHistory = history.length; // Replace A\n  // 1: A__\n\n  act(() => setA('A'));\n  expect(container.textContent).toBe('\"A\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A'\n  }]]);\n  expect(history.length).toBe(baseHistory); // Push B\n  // 1: A__\n  // 2: AB_\n\n  act(() => setB('B'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B'\n  }]]); // Push C\n  // 1: A__\n  // 2: AB_\n  // 3: ABC\n\n  act(() => setC('C'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"C\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B',\n    'recoil-url-sync push 2': 'C'\n  }]]); // Pop and confirm C is reset\n  // 1: A__\n  // 2: AB_\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B'\n  }]]); // Replace Reset A\n  // 1: A__\n  // 2: _B_\n\n  act(resetA);\n  expect(container.textContent).toBe('\"DEFAULT\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'B'\n  }]]); // Push a Reset\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n\n  act(resetB);\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {}]]); // Push BB\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: _BB_\n\n  act(() => setB('BB'));\n  expect(container.textContent).toBe('\"DEFAULT\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'BB'\n  }]]); // Replace AA\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: AABB_\n\n  act(() => setA('AA'));\n  expect(container.textContent).toBe('\"AA\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'AA',\n    'recoil-url-sync push': 'BB'\n  }]]); // Replace AAA\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: AAABB_\n\n  act(() => setA('AAA'));\n  expect(container.textContent).toBe('\"AAA\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'AAA',\n    'recoil-url-sync push': 'BB'\n  }]]); // Pop\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {}]]); // Pop\n  // 1: A__\n  // 2: _B_\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"DEFAULT\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'B'\n  }]]); // Pop\n  // 1: A__\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"A\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A'\n  }]]);\n});","file":"RecoilSync_URLInterface-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Anchor","suites":["URL JSON Encode"],"updatePoint":{"line":137,"column":14,"index":2888},"line":137,"code":"  test('Anchor', async () => testJSON({\n    part: 'hash'\n  }, 'nulltrue123\"STRING\"[1,\"a\"]{\"foo\":[1,2]}\"1985-10-26T07:00:00.000Z\"', '/path/page.html?foo=bar', '/path/page.html?foo=bar#%7B%22null%22%3Anull%2C%22boolean%22%3Atrue%2C%22number%22%3A123%2C%22string%22%3A%22STRING%22%2C%22array%22%3A%5B1%2C%22a%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B1%2C2%5D%7D%2C%22date%22%3A%221985-10-26T07%3A00%3A00.000Z%22%7D'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Search","suites":["URL JSON Encode"],"updatePoint":{"line":140,"column":14,"index":3304},"line":140,"code":"  test('Search', async () => testJSON({\n    part: 'search'\n  }, 'nulltrue123\"STRING\"[1,\"a\"]{\"foo\":[1,2]}\"1985-10-26T07:00:00.000Z\"', '/path/page.html#anchor', '/path/page.html?%7B%22null%22%3Anull%2C%22boolean%22%3Atrue%2C%22number%22%3A123%2C%22string%22%3A%22STRING%22%2C%22array%22%3A%5B1%2C%22a%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B1%2C2%5D%7D%2C%22date%22%3A%221985-10-26T07%3A00%3A00.000Z%22%7D#anchor'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param","suites":["URL JSON Encode"],"updatePoint":{"line":143,"column":19,"index":3725},"line":143,"code":"  test('Query Param', async () => testJSON({\n    part: 'queryParams',\n    param: 'param'\n  }, 'nulltrue123\"STRING\"[1,\"a\"]{\"foo\":[1,2]}\"1985-10-26T07:00:00.000Z\"', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%7B%22null%22%3Anull%2C%22boolean%22%3Atrue%2C%22number%22%3A123%2C%22string%22%3A%22STRING%22%2C%22array%22%3A%5B1%2C%22a%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B1%2C2%5D%7D%2C%22date%22%3A%221985-10-26T07%3A00%3A00.000Z%22%7D#anchor'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params","suites":["URL JSON Encode"],"updatePoint":{"line":147,"column":20,"index":4194},"line":147,"code":"  test('Query Params', async () => testJSON({\n    part: 'queryParams'\n  }, 'nulltrue123\"STRING\"[1,\"a\"]{\"foo\":[1,2]}\"1985-10-26T07:00:00.000Z\"', '/path/page.html#anchor', '/path/page.html?void=&null=null&boolean=true&number=123&string=%22STRING%22&array=%5B1%2C%22a%22%5D&object=%7B%22foo%22%3A%5B1%2C2%5D%7D&date=%221985-10-26T07%3A00%3A00.000Z%22#anchor'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Anchor","suites":["URL JSON Parse"],"updatePoint":{"line":152,"column":14,"index":4586},"line":152,"code":"  test('Anchor', async () => testJSON({\n    part: 'hash'\n  }, 'nullfalse456\"SET\"[2,\"b\"]{\"foo\":[]}\"1955-11-05T07:00:00.000Z\"', '/#{\"null\":null,\"boolean\":false,\"number\":456,\"string\":\"SET\",\"array\":[2,\"b\"],\"object\":{\"foo\":[]},\"date\":\"1955-11-05T07:00:00.000Z\"}', '/#%7B%22null%22%3Anull%2C%22boolean%22%3Afalse%2C%22number%22%3A456%2C%22string%22%3A%22SET%22%2C%22array%22%3A%5B2%2C%22b%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B%5D%7D%2C%22date%22%3A%221955-11-05T07%3A00%3A00.000Z%22%7D'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Search","suites":["URL JSON Parse"],"updatePoint":{"line":155,"column":14,"index":5074},"line":155,"code":"  test('Search', async () => testJSON({\n    part: 'search'\n  }, 'nullfalse456\"SET\"[2,\"b\"]{\"foo\":[]}\"1955-11-05T07:00:00.000Z\"', '/?{\"null\":null,\"boolean\":false,\"number\":456,\"string\":\"SET\",\"array\":[2,\"b\"],\"object\":{\"foo\":[]},\"date\":\"1955-11-05T07:00:00.000Z\"}', '/?%7B%22null%22%3Anull%2C%22boolean%22%3Afalse%2C%22number%22%3A456%2C%22string%22%3A%22SET%22%2C%22array%22%3A%5B2%2C%22b%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B%5D%7D%2C%22date%22%3A%221955-11-05T07%3A00%3A00.000Z%22%7D'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param","suites":["URL JSON Parse"],"updatePoint":{"line":158,"column":19,"index":5569},"line":158,"code":"  test('Query Param', async () => testJSON({\n    part: 'queryParams',\n    param: 'param'\n  }, 'nullfalse456\"SET\"[2,\"b\"]{\"foo\":[]}\"1955-11-05T07:00:00.000Z\"', '/?param={\"null\":null,\"boolean\":false,\"number\":456,\"string\":\"SET\",\"array\":[2,\"b\"],\"object\":{\"foo\":[]},\"date\":\"1955-11-05T07:00:00.000Z\"}', '/?param=%7B%22null%22%3Anull%2C%22boolean%22%3Afalse%2C%22number%22%3A456%2C%22string%22%3A%22SET%22%2C%22array%22%3A%5B2%2C%22b%22%5D%2C%22object%22%3A%7B%22foo%22%3A%5B%5D%7D%2C%22date%22%3A%221955-11-05T07%3A00%3A00.000Z%22%7D'));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params","suites":["URL JSON Parse"],"updatePoint":{"line":162,"column":20,"index":6102},"line":162,"code":"  test('Query Params', async () => testJSON({\n    part: 'queryParams'\n  }, 'nullfalse456\"SET\"[2,\"b\"]{\"foo\":[]}\"1955-11-05T07:00:00.000Z\"', '/?null=null&boolean=false&number=456&string=\"SET\"&array=[2,\"b\"]&object={\"foo\":[]}&date=\"1955-11-05T07:00:00.000Z\"', '/?null=null&boolean=false&number=456&string=%22SET%22&array=%5B2%2C%22b%22%5D&object=%7B%22foo%22%3A%5B%5D%7D&date=%221955-11-05T07%3A00%3A00.000Z%22&void='));","file":"RecoilSync_URLJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Listen to URL changes","suites":[],"updatePoint":{"line":40,"column":27,"index":617},"line":40,"code":"test('Listen to URL changes', async () => {\n  const locFoo = {\n    part: 'queryParams',\n    param: 'foo'\n  };\n  const locBar = {\n    part: 'queryParams',\n    param: 'bar'\n  };\n  const atomA = atom({\n    key: 'recoil-url-sync listen',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'foo',\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-url-sync listen to multiple keys',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'foo',\n      itemKey: 'KEY A',\n      refine: string()\n    }), syncEffect({\n      storeKey: 'foo',\n      itemKey: 'KEY B',\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-url-sync listen to multiple storage',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'foo',\n      refine: string()\n    }), syncEffect({\n      storeKey: 'bar',\n      refine: string()\n    })]\n  });\n  history.replaceState(null, '', encodeURL([[locFoo, {\n    'recoil-url-sync listen': 'A',\n    'KEY A': 'B',\n    'recoil-url-sync listen to multiple storage': 'C'\n  }]]));\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n    storeKey: \"foo\",\n    location: locFoo\n  }), /*#__PURE__*/React.createElement(TestURLSync, {\n    storeKey: \"bar\",\n    location: locBar\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  }))); // Initial load will use the fallback storage for C\n\n  expect(container.textContent).toBe('\"A\"\"B\"\"C\"');\n  expectURL([[locFoo, {\n    'recoil-url-sync listen': 'A',\n    'KEY A': 'B',\n    'recoil-url-sync listen to multiple storage': 'C'\n  }]]); // Subscribe to new value\n\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'B',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expect(container.textContent).toBe('\"AA\"\"B\"\"C1\"'); // Changing value of C caused it to sync with locBar\n\n  expectURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'B',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }], [locBar, {\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]); // Subscribe to new value from different key\n\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'BB',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expectURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'BB',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }], [locBar, {\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]);\n  expect(container.textContent).toBe('\"AA\"\"BB\"\"C1\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'BB',\n    'KEY B': 'BBB',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"C1\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'IGNORE',\n    'KEY B': 'BBB',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"C1\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'BBBB',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expect(container.textContent).toBe('\"AA\"\"BBBB\"\"C1\"'); // Subscribe to reset\n\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }]]));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"C1\"'); // Subscribe to new value from different storage\n\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen': 'AA',\n    'KEY A': 'B',\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }], [locBar, {}]]));\n  expect(container.textContent).toBe('\"AA\"\"B\"\"DEFAULT\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }], [locBar, {\n    'recoil-url-sync listen to multiple storage': 'CC2'\n  }]]));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"CC2\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen to multiple storage': 'C1'\n  }], [locBar, {}]]));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  await act(() => gotoURL([[locFoo, {\n    'recoil-url-sync listen to multiple storage': 'CC1'\n  }], [locBar, {}]]));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n});","file":"RecoilSync_URLListen-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Push URLs in browser history","suites":[],"updatePoint":{"line":39,"column":34,"index":639},"line":39,"code":"test('Push URLs in browser history', async () => {\n  const loc = {\n    part: 'queryParams'\n  };\n  const atomA = atom({\n    key: 'recoil-url-sync replace',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'replace'\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-url-sync push',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'push'\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-url-sync push 2',\n    default: 'DEFAULT',\n    effects: [urlSyncEffect({\n      refine: string(),\n      history: 'push'\n    })]\n  });\n  const [AtomA, setA, resetA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB, resetB] = componentThatReadsAndWritesAtom(atomB);\n  const [AtomC, setC] = componentThatReadsAndWritesAtom(atomC);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestURLSync, {\n    location: loc\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(AtomC, null)));\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  const baseHistory = history.length; // Replace A\n  // 1: A__\n\n  act(() => setA('A'));\n  expect(container.textContent).toBe('\"A\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A'\n  }]]);\n  expect(history.length).toBe(baseHistory); // Push B\n  // 1: A__\n  // 2: AB_\n\n  act(() => setB('B'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B'\n  }]]); // Push C\n  // 1: A__\n  // 2: AB_\n  // 3: ABC\n\n  act(() => setC('C'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"C\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B',\n    'recoil-url-sync push 2': 'C'\n  }]]); // Pop and confirm C is reset\n  // 1: A__\n  // 2: AB_\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A',\n    'recoil-url-sync push': 'B'\n  }]]); // Replace Reset A\n  // 1: A__\n  // 2: _B_\n\n  act(resetA);\n  expect(container.textContent).toBe('\"DEFAULT\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'B'\n  }]]); // Push a Reset\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n\n  act(resetB);\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {}]]); // Push BB\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: _BB_\n\n  act(() => setB('BB'));\n  expect(container.textContent).toBe('\"DEFAULT\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'BB'\n  }]]); // Replace AA\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: AABB_\n\n  act(() => setA('AA'));\n  expect(container.textContent).toBe('\"AA\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'AA',\n    'recoil-url-sync push': 'BB'\n  }]]); // Replace AAA\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n  // 4: AAABB_\n\n  act(() => setA('AAA'));\n  expect(container.textContent).toBe('\"AAA\"\"BB\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'AAA',\n    'recoil-url-sync push': 'BB'\n  }]]); // Pop\n  // 1: A__\n  // 2: _B_\n  // 3: ___\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {}]]); // Pop\n  // 1: A__\n  // 2: _B_\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"DEFAULT\"\"B\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync push': 'B'\n  }]]); // Pop\n  // 1: A__\n\n  await act(goBack);\n  expect(container.textContent).toBe('\"A\"\"DEFAULT\"\"DEFAULT\"');\n  expectURL([[loc, {\n    'recoil-url-sync replace': 'A'\n  }]]);\n});","file":"RecoilSync_URLPush-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Anchor - primitives","suites":["URL Transit Encode"],"updatePoint":{"line":171,"column":27,"index":3353},"line":171,"code":"  test('Anchor - primitives', async () => testTransit({\n    part: 'hash'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nulltrue123\"STRING\"', '/path/page.html?foo=bar', '/path/page.html?foo=bar#%5B%22%5E%20%22%2C%22null%22%2Cnull%2C%22boolean%22%2Ctrue%2C%22number%22%2C123%2C%22string%22%2C%22STRING%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Search - primitives","suites":["URL Transit Encode"],"updatePoint":{"line":174,"column":27,"index":3672},"line":174,"code":"  test('Search - primitives', async () => testTransit({\n    part: 'search'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nulltrue123\"STRING\"', '/path/page.html#anchor', '/path/page.html?%5B%22%5E%20%22%2C%22null%22%2Cnull%2C%22boolean%22%2Ctrue%2C%22number%22%2C123%2C%22string%22%2C%22STRING%22%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - primitives","suites":["URL Transit Encode"],"updatePoint":{"line":177,"column":32,"index":3996},"line":177,"code":"  test('Query Param - primitives', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nulltrue123\"STRING\"', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%5B%22%5E+%22%2C%22null%22%2Cnull%2C%22boolean%22%2Ctrue%2C%22number%22%2C123%2C%22string%22%2C%22STRING%22%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - primitives","suites":["URL Transit Encode"],"updatePoint":{"line":181,"column":33,"index":4366},"line":181,"code":"  test('Query Params - primitives', async () => testTransit({\n    part: 'queryParams'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nulltrue123\"STRING\"', '/path/page.html#anchor', '/path/page.html?null=%5B%22%7E%23%27%22%2Cnull%5D&boolean=%5B%22%7E%23%27%22%2Ctrue%5D&number=%5B%22%7E%23%27%22%2C123%5D&string=%5B%22%7E%23%27%22%2C%22STRING%22%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - objects","suites":["URL Transit Encode"],"updatePoint":{"line":184,"column":29,"index":4729},"line":184,"code":"  test('Query Param - objects', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomArray, atomObject], '[1,\"a\"]{\"foo\":[1,2]}', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%5B%22%5E+%22%2C%22array%22%2C%5B1%2C%22a%22%5D%2C%22object%22%2C%5B%22%5E+%22%2C%22foo%22%2C%5B1%2C2%5D%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - objects","suites":["URL Transit Encode"],"updatePoint":{"line":188,"column":30,"index":5073},"line":188,"code":"  test('Query Params - objects', async () => testTransit({\n    part: 'queryParams'\n  }, [atomArray, atomObject], '[1,\"a\"]{\"foo\":[1,2]}', '/path/page.html#anchor', '/path/page.html?array=%5B1%2C%22a%22%5D&object=%5B%22%5E+%22%2C%22foo%22%2C%5B1%2C2%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - containers","suites":["URL Transit Encode"],"updatePoint":{"line":191,"column":32,"index":5340},"line":191,"code":"  test('Query Param - containers', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomSet, atomMap], '[1,2]{\"1\":\"a\"}', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%5B%22%5E+%22%2C%22set%22%2C%5B%22%7E%23Set%22%2C%5B1%2C2%5D%5D%2C%22map%22%2C%5B%22%7E%23Map%22%2C%5B%5B1%2C%22a%22%5D%5D%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - containers","suites":["URL Transit Encode"],"updatePoint":{"line":195,"column":33,"index":5694},"line":195,"code":"  test('Query Params - containers', async () => testTransit({\n    part: 'queryParams'\n  }, [atomSet, atomMap], '[1,2]{\"1\":\"a\"}', '/path/page.html#anchor', '/path/page.html?set=%5B%22%7E%23Set%22%2C%5B1%2C2%5D%5D&map=%5B%22%7E%23Map%22%2C%5B%5B1%2C%22a%22%5D%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - classes","suites":["URL Transit Encode"],"updatePoint":{"line":198,"column":29,"index":5965},"line":198,"code":"  test('Query Param - classes', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomDate, atomUser], '\"1985-10-26T07:00:00.000Z\"{\"prop\":\"CUSTOM\"}', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%5B%22%5E+%22%2C%22date%22%2C%5B%22%7E%23Date%22%2C%221985-10-26T07%3A00%3A00.000Z%22%5D%2C%22user%22%2C%5B%22%7E%23USER%22%2C%5B%22CUSTOM%22%5D%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - classes","suites":["URL Transit Encode"],"updatePoint":{"line":202,"column":30,"index":6369},"line":202,"code":"  test('Query Params - classes', async () => testTransit({\n    part: 'queryParams'\n  }, [atomDate, atomUser], '\"1985-10-26T07:00:00.000Z\"{\"prop\":\"CUSTOM\"}', '/path/page.html#anchor', '/path/page.html?date=%5B%22%7E%23Date%22%2C%221985-10-26T07%3A00%3A00.000Z%22%5D&user=%5B%22%7E%23USER%22%2C%5B%22CUSTOM%22%5D%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - fallback","suites":["URL Transit Encode"],"updatePoint":{"line":205,"column":30,"index":6694},"line":205,"code":"  test('Query Param - fallback', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomWithFallback], '\"FALLBACK\"', '/path/page.html?foo=bar#anchor', '/path/page.html?foo=bar&param=%5B%22%5E+%22%5D#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - fallback","suites":["URL Transit Encode"],"updatePoint":{"line":209,"column":31,"index":6930},"line":209,"code":"  test('Query Params - fallback', async () => testTransit({\n    part: 'queryParams'\n  }, [atomWithFallback], '\"FALLBACK\"', '/path/page.html#anchor', '/path/page.html#anchor'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Anchor - primitives","suites":["URL Transit Parse"],"updatePoint":{"line":214,"column":27,"index":7145},"line":214,"code":"  test('Anchor - primitives', async () => testTransit({\n    part: 'hash'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nullfalse456\"SET\"', '/#[\"^ \",\"null\",null,\"boolean\",false,\"number\",456,\"string\",\"SET\"]', '/#%5B%22%5E%20%22%2C%22null%22%2Cnull%2C%22boolean%22%2Cfalse%2C%22number%22%2C456%2C%22string%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Search - primitives","suites":["URL Transit Parse"],"updatePoint":{"line":217,"column":27,"index":7479},"line":217,"code":"  test('Search - primitives', async () => testTransit({\n    part: 'search'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nullfalse456\"SET\"', '/?[\"^ \",\"null\",null,\"boolean\",false,\"number\",456,\"string\",\"SET\"]', '/?%5B%22%5E%20%22%2C%22null%22%2Cnull%2C%22boolean%22%2Cfalse%2C%22number%22%2C456%2C%22string%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - primitives","suites":["URL Transit Parse"],"updatePoint":{"line":220,"column":32,"index":7820},"line":220,"code":"  test('Query Param - primitives', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nullfalse456\"SET\"', '/?param=[\"^ \",\"null\",null,\"boolean\",false,\"number\",456,\"string\",\"SET\"]', '/?param=%5B%22%5E+%22%2C%22null%22%2Cnull%2C%22boolean%22%2Cfalse%2C%22number%22%2C456%2C%22string%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - primitives","suites":["URL Transit Parse"],"updatePoint":{"line":224,"column":33,"index":8197},"line":224,"code":"  test('Query Params - primitives', async () => testTransit({\n    part: 'queryParams'\n  }, [atomNull, atomBoolean, atomNumber, atomString], 'nullfalse456\"SET\"', '/?null=[\"~%23\\'\",null]&boolean=[\"~%23\\'\",false]&number=[\"~%23\\'\",456]&string=[\"~%23\\'\",\"SET\"]', '/?null=%5B%22%7E%23%27%22%2Cnull%5D&boolean=%5B%22%7E%23%27%22%2Cfalse%5D&number=%5B%22%7E%23%27%22%2C456%5D&string=%5B%22%7E%23%27%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - objects","suites":["URL Transit Parse"],"updatePoint":{"line":227,"column":29,"index":8606},"line":227,"code":"  test('Query Param - objects', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomArray, atomObject], '[2,\"b\"]{\"foo\":[]}', '/?param=[\"^ \",\"array\",[2,\"b\"],\"object\",[\"^ \",\"foo\",[]]]', '/?param=%5B%22%5E+%22%2C%22array%22%2C%5B2%2C%22b%22%5D%2C%22object%22%2C%5B%22%5E+%22%2C%22foo%22%2C%5B%5D%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - objects","suites":["URL Transit Parse"],"updatePoint":{"line":231,"column":30,"index":8938},"line":231,"code":"  test('Query Params - objects', async () => testTransit({\n    part: 'queryParams'\n  }, [atomArray, atomObject], '[2,\"b\"]{\"foo\":[]}', '/?array=[2,\"b\"]&object=[\"^+\",\"foo\",[]]', '/?array=%5B2%2C%22b%22%5D&object=%5B%22%5E+%22%2C%22foo%22%2C%5B%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - containers","suites":["URL Transit Parse"],"updatePoint":{"line":234,"column":32,"index":9192},"line":234,"code":"  test('Query Param - containers', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomSet, atomMap], '[3,4]{\"2\":\"b\"}', '/?param=[\"^+\",\"set\",[\"~%23Set\",[3,4]],\"map\",[\"~%23Map\",[[2,\"b\"]]]]', '/?param=%5B%22%5E+%22%2C%22set%22%2C%5B%22%7E%23Set%22%2C%5B3%2C4%5D%5D%2C%22map%22%2C%5B%22%7E%23Map%22%2C%5B%5B2%2C%22b%22%5D%5D%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - containers","suites":["URL Transit Parse"],"updatePoint":{"line":238,"column":33,"index":9553},"line":238,"code":"  test('Query Params - containers', async () => testTransit({\n    part: 'queryParams'\n  }, [atomSet, atomMap], '[3,4]{\"2\":\"b\"}', '/?set=[\"~%23Set\",[3,4]]&map=[\"~%23Map\",[[2,\"b\"]]]', '/?set=%5B%22%7E%23Set%22%2C%5B3%2C4%5D%5D&map=%5B%22%7E%23Map%22%2C%5B%5B2%2C%22b%22%5D%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - classes","suites":["URL Transit Parse"],"updatePoint":{"line":241,"column":29,"index":9830},"line":241,"code":"  test('Query Param - classes', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomDate, atomUser], '\"1955-11-05T07:00:00.000Z\"{\"prop\":\"PROP\"}', '/?param=[\"^ \",\"date\",[\"~%23Date\",\"1955-11-05T07:00:00.000Z\"],\"user\",[\"~%23USER\",[\"PROP\"]]]', '/?param=%5B%22%5E+%22%2C%22date%22%2C%5B%22%7E%23Date%22%2C%221955-11-05T07%3A00%3A00.000Z%22%5D%2C%22user%22%2C%5B%22%7E%23USER%22%2C%5B%22PROP%22%5D%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - classes","suites":["URL Transit Parse"],"updatePoint":{"line":245,"column":30,"index":10261},"line":245,"code":"  test('Query Params - classes', async () => testTransit({\n    part: 'queryParams'\n  }, [atomDate, atomUser], '\"1955-11-05T07:00:00.000Z\"{\"prop\":\"PROP\"}', '/?date=[\"~%23Date\",\"1955-11-05T07:00:00.000Z\"]&user=[\"~%23USER\",[\"PROP\"]]', '/?date=%5B%22%7E%23Date%22%2C%221955-11-05T07%3A00%3A00.000Z%22%5D&user=%5B%22%7E%23USER%22%2C%5B%22PROP%22%5D%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Param - fallback","suites":["URL Transit Parse"],"updatePoint":{"line":248,"column":30,"index":10612},"line":248,"code":"  test('Query Param - fallback', async () => testTransit({\n    part: 'queryParams',\n    param: 'param'\n  }, [atomWithFallback], '\"SET\"', '/?param=[\"^ \",\"withFallback\",\"SET\"]', '/?param=%5B%22%5E+%22%2C%22withFallback%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Query Params - fallback","suites":["URL Transit Parse"],"updatePoint":{"line":252,"column":31,"index":10852},"line":252,"code":"  test('Query Params - fallback', async () => testTransit({\n    part: 'queryParams'\n  }, [atomWithFallback], '\"SET\"', '/?withFallback=\"SET\"', '/?withFallback=%5B%22%7E%23%27%22%2C%22SET%22%5D'));","file":"RecoilSync_URLTransit-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"URL Encode JSON & Transit","suites":[],"updatePoint":{"line":122,"column":31,"index":2558},"line":122,"code":"test('URL Encode JSON & Transit', async () => testURL('true123\"STRING\"[1,\"a\"]{\"foo\":[1,2]}', '/path/page.html?foo=bar', '/path/page.html?foo=bar&boolean=true&number=123&string=%22STRING%22&transit=%5B%22%5E+%22%2C%22array%22%2C%5B1%2C%22a%22%5D%2C%22object%22%2C%5B%22%5E+%22%2C%22foo%22%2C%5B1%2C2%5D%5D%5D'));","file":"RecoilSync_URLTransitJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"URL Parse JSON & Transit","suites":[],"updatePoint":{"line":123,"column":30,"index":2869},"line":123,"code":"test('URL Parse JSON & Transit', async () => testURL('false456\"SET\"[2,\"b\"]{\"foo\":[]}', '/?foo=bar&boolean=false&number=456&string=\"SET\"&transit=[\"^ \",\"array\",[2,\"b\"],\"object\",[\"^ \",\"foo\",[]],\"user\",[\"~%23USER\",[\"PROP\"]]]', '/?foo=bar&boolean=false&number=456&string=%22SET%22&transit=%5B%22%5E+%22%2C%22array%22%2C%5B2%2C%22b%22%5D%2C%22object%22%2C%5B%22%5E+%22%2C%22foo%22%2C%5B%5D%5D%5D'));","file":"RecoilSync_URLTransitJSON-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to storage","suites":[],"updatePoint":{"line":97,"column":22,"index":1724},"line":97,"code":"test('Write to storage', async () => {\n  const atomA = atom({\n    key: 'recoil-sync write A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync write B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const ignoreAtom = atom({\n    key: 'recoil-sync write ignore',\n    default: 'DEFAULT'\n  });\n  const storage = new Map();\n  const [AtomA, setA, resetA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB] = componentThatReadsAndWritesAtom(atomB);\n  const [IgnoreAtom, setIgnore] = componentThatReadsAndWritesAtom(ignoreAtom);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(IgnoreAtom, null)));\n  expect(storage.size).toBe(0);\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  act(() => setA('A'));\n  act(() => setB('B'));\n  act(() => setIgnore('IGNORE'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"IGNORE\"');\n  expect(storage.size).toBe(2);\n  expect(storage.get('recoil-sync write A')).toBe('A');\n  expect(storage.get('recoil-sync write B')).toBe('B');\n  act(() => resetA());\n  act(() => setB('BB'));\n  expect(container.textContent).toBe('\"DEFAULT\"\"BB\"\"IGNORE\"');\n  expect(storage.size).toBe(1);\n  expect(storage.has('recoil-sync write A')).toBe(false);\n  expect(storage.get('recoil-sync write B')).toBe('BB');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Write to multiple storages","suites":[],"updatePoint":{"line":139,"column":32,"index":3359},"line":139,"code":"test('Write to multiple storages', async () => {\n  const atomA = atom({\n    key: 'recoil-sync multiple storage A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'A',\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync multiple storage B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'B',\n      refine: string()\n    })]\n  });\n  const storageA = new Map();\n  const storageB = new Map();\n  const [AtomA, setA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB] = componentThatReadsAndWritesAtom(atomB);\n  renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storeKey: \"A\",\n    storage: storageA\n  }), /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storeKey: \"B\",\n    storage: storageB\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null)));\n  expect(storageA.size).toBe(0);\n  expect(storageB.size).toBe(0);\n  act(() => setA('A'));\n  act(() => setB('B'));\n  expect(storageA.size).toBe(1);\n  expect(storageB.size).toBe(1);\n  expect(storageA.get('recoil-sync multiple storage A')).toBe('A');\n  expect(storageB.get('recoil-sync multiple storage B')).toBe('B');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from storage","suites":[],"updatePoint":{"line":176,"column":23,"index":4622},"line":176,"code":"test('Read from storage', async () => {\n  const atomA = atom({\n    key: 'recoil-sync read A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync read B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync read C',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const storage = new Map([['recoil-sync read A', 'A'], ['recoil-sync read B', 'B']]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  })));\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from storage async","suites":[],"updatePoint":{"line":210,"column":29,"index":5617},"line":210,"code":"test('Read from storage async', async () => {\n  const atomA = atom({\n    key: 'recoil-sync read async',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const storage = new Map([['recoil-sync read async', Promise.resolve('A')]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"A\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from storage error","suites":[],"updatePoint":{"line":228,"column":29,"index":6259},"line":228,"code":"test('Read from storage error', async () => {\n  const atomA = atom({\n    key: 'recoil-sync read error A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync read error B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string(),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync read error C',\n    default: 'DEFAULT',\n    // <TestRecoilSync> will throw error if the key is \"error\"\n    effects: [syncEffect({\n      itemKey: 'error',\n      refine: string()\n    })]\n  });\n  const atomD = atom({\n    key: 'recoil-sync read error D',\n    default: 'DEFAULT',\n    // <TestRecoilSync> will throw error if the key is \"error\"\n    effects: [syncEffect({\n      itemKey: 'error',\n      refine: string(),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  });\n  const atomE = atom({\n    key: 'recoil-sync read error E',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomF = atom({\n    key: 'recoil-sync read error F',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string(),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  });\n  const mySelector = selectorFamily({\n    key: 'recoil-sync read error selector',\n    get: ({\n      myAtom\n    }) => ({\n      get\n    }) => {\n      try {\n        return get(myAtom);\n      } catch (e) {\n        return e.message;\n      }\n    }\n  });\n  const storage = new Map([['recoil-sync read error A', RecoilLoadable.error(new Error('ERROR A'))], ['recoil-sync read error B', RecoilLoadable.error(new Error('ERROR B'))], ['recoil-sync read error E', 999], ['recoil-sync read error F', 999]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomA\n    })\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomB\n    })\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomC\n    })\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomD\n    })\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomE\n    })\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: mySelector({\n      myAtom: atomF\n    })\n  })));\n  expect(container.textContent).toBe('\"ERROR A\"\"DEFAULT\"\"READ ERROR\"\"DEFAULT\"\"[<root>]: value is not a string\"\"DEFAULT\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read nullable","suites":[],"updatePoint":{"line":322,"column":19,"index":8906},"line":322,"code":"test('Read nullable', async () => {\n  const atomUndefinedA = atom({\n    key: 'recoil-sync read undefined A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(undefined)\n    })]\n  });\n  const atomUndefinedB = atom({\n    key: 'recoil-sync read undefined B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(undefined)\n    })]\n  });\n  const atomUndefinedC = atom({\n    key: 'recoil-sync read undefined C',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(undefined)\n    })]\n  });\n  const atomNullA = atom({\n    key: 'recoil-sync read null A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(null)\n    })]\n  });\n  const atomNullB = atom({\n    key: 'recoil-sync read null B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(null)\n    })]\n  });\n  const atomNullC = atom({\n    key: 'recoil-sync read null C',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: literal(null)\n    })]\n  });\n  const storage = new Map([['recoil-sync read undefined A', undefined], ['recoil-sync read undefined B', Promise.resolve(undefined)], ['recoil-sync read undefined C', RecoilLoadable.of(undefined)], ['recoil-sync read null A', null], ['recoil-sync read null B', Promise.resolve(null)], ['recoil-sync read null C', RecoilLoadable.of(null)]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomUndefinedA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomUndefinedB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomUndefinedC\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomNullA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomNullB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomNullC\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('nullnullnull');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Abort read","suites":[],"updatePoint":{"line":385,"column":16,"index":11020},"line":385,"code":"test('Abort read', async () => {\n  const atomA = atom({\n    key: 'recoil-sync abort read A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync abort read B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync abort read C',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    })]\n  });\n  const storage = new Map([['recoil-sync abort read A', new DefaultValue()], ['recoil-sync abort read B', Promise.resolve(new DefaultValue())], ['recoil-sync abort read C', RecoilLoadable.of(new DefaultValue())]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n}); // TODO These semantics are debatable...","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Abort vs reset","suites":[],"updatePoint":{"line":422,"column":20,"index":12289},"line":422,"code":"test('Abort vs reset', async () => {\n  const atomA = atom({\n    key: 'recoil-sync abort vs reset A',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf('INIT'), syncEffect({\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync abort vs reset B',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf('INIT'), syncEffect({\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync abort vs reset C',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf('INIT'), syncEffect({\n      refine: string()\n    })]\n  });\n  const atomD = atom({\n    key: 'recoil-sync abort vs reset D',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf('INIT'), syncEffect({\n      refine: string()\n    })]\n  });\n  const storage = new Map([['recoil-sync abort vs reset A', new DefaultValue()], ['recoil-sync abort vs reset B', RecoilLoadable.of(new DefaultValue())], ['recoil-sync abort vs reset C', Promise.resolve(new DefaultValue())], ['recoil-sync abort vs reset D', RecoilLoadable.of(Promise.resolve(new DefaultValue()))]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomD\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"INIT\"\"INIT\"\"DEFAULT\"\"DEFAULT\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from storage upgrade - multiple effects","suites":[],"updatePoint":{"line":475,"column":50,"index":14059},"line":475,"code":"test('Read from storage upgrade - multiple effects', async () => {\n  // Fail validation\n  const atomA = atom({\n    key: 'recoil-sync fail validation - multi',\n    default: 'DEFAULT',\n    effects: [// No matching sync effect\n    syncEffect({\n      refine: string(),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  }); // Upgrade from number\n\n  const atomB = atom({\n    key: 'recoil-sync upgrade number - multi',\n    default: 'DEFAULT',\n    effects: [// This sync effect is ignored\n    syncEffect({\n      refine: asType(string(), () => 'IGNORE'),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    }), syncEffect({\n      refine: asType(number(), num => `${num}`),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    }), // This sync effect is ignored\n    syncEffect({\n      refine: asType(string(), () => 'IGNORE'),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  }); // Upgrade from string\n\n  const atomC = atom({\n    key: 'recoil-sync upgrade string - multi',\n    default: 0,\n    effects: [// This sync effect is ignored\n    syncEffect({\n      refine: asType(number(), () => 999),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    }), syncEffect({\n      refine: asType(string(), Number),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    }), // This sync effect is ignored\n    syncEffect({\n      refine: asType(number(), () => 999),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  }); // Upgrade from async\n\n  const atomD = atom({\n    key: 'recoil-sync upgrade async - multi',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: asType(number(), num => `${num}`),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  });\n  const storage = new Map([['recoil-sync fail validation - multi', 123], ['recoil-sync upgrade number - multi', 123], ['recoil-sync upgrade string - multi', '123'], ['recoil-sync upgrade async - multi', Promise.resolve(123)]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomD\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"DEFAULT\"\"123\"123\"123\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read from storage upgrade","suites":[],"updatePoint":{"line":545,"column":31,"index":16528},"line":545,"code":"test('Read from storage upgrade', async () => {\n  // Fail validation\n  const atomA = atom({\n    key: 'recoil-sync fail validation',\n    default: 'DEFAULT',\n    effects: [// No matching sync effect\n    syncEffect({\n      refine: string(),\n      actionOnFailure_UNSTABLE: 'defaultValue'\n    })]\n  }); // Upgrade from number\n\n  const atomB = atom({\n    key: 'recoil-sync upgrade number',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: match(asType(string(), () => 'IGNORE'), // This rule is ignored\n      asType(number(), num => `${num}`), asType(string(), () => 'IGNORE') // This rule is ignored\n      )\n    })]\n  }); // Upgrade from string\n\n  const atomC = atom({\n    key: 'recoil-sync upgrade string',\n    default: 0,\n    effects: [syncEffect({\n      refine: match(asType(number(), () => 999), // This rule is ignored\n      asType(string(), Number), asType(number(), () => 999) // This rule is ignored\n      )\n    })]\n  }); // Upgrade from async\n\n  const atomD = atom({\n    key: 'recoil-sync upgrade async',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: match(string(), asType(number(), num => `${num}`))\n    })]\n  });\n  const storage = new Map([['recoil-sync fail validation', 123], ['recoil-sync upgrade number', 123], ['recoil-sync upgrade string', '123'], ['recoil-sync upgrade async', Promise.resolve(123)]]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomD\n  })));\n  expect(container.textContent).toBe('loading');\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"DEFAULT\"\"123\"123\"123\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Read/Write from storage upgrade","suites":[],"updatePoint":{"line":600,"column":37,"index":18480},"line":600,"code":"test('Read/Write from storage upgrade', async () => {\n  const atomA = atom({\n    key: 'recoil-sync read/write upgrade type',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: match(string(), asType(number(), num => `${num}`))\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync read/write upgrade key',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'OLD KEY',\n      refine: string()\n    }), syncEffect({\n      itemKey: 'NEW KEY',\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync read/write upgrade storage',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string()\n    }), syncEffect({\n      storeKey: 'OTHER_SYNC',\n      refine: string()\n    })]\n  });\n  const storage1 = new Map([['recoil-sync read/write upgrade type', 123], ['OLD KEY', 'OLD'], ['recoil-sync read/write upgrade storage', 'STR1']]);\n  const storage2 = new Map([['recoil-sync read/write upgrade storage', 'STR2']]);\n  const [AtomA, setA, resetA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB, resetB] = componentThatReadsAndWritesAtom(atomB);\n  const [AtomC, setC, resetC] = componentThatReadsAndWritesAtom(atomC);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage1\n  }), /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage2,\n    storeKey: \"OTHER_SYNC\"\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(AtomC, null)));\n  expect(container.textContent).toBe('\"123\"\"OLD\"\"STR2\"');\n  expect(storage1.size).toBe(3);\n  act(() => setA('A'));\n  act(() => setB('B'));\n  act(() => setC('C'));\n  expect(container.textContent).toBe('\"A\"\"B\"\"C\"');\n  expect(storage1.size).toBe(4);\n  expect(storage1.get('recoil-sync read/write upgrade type')).toBe('A');\n  expect(storage1.get('OLD KEY')).toBe('B');\n  expect(storage1.get('NEW KEY')).toBe('B');\n  expect(storage1.get('recoil-sync read/write upgrade storage')).toBe('C');\n  expect(storage2.size).toBe(1);\n  expect(storage2.get('recoil-sync read/write upgrade storage')).toBe('C');\n  act(() => resetA());\n  act(() => resetB());\n  act(() => resetC());\n  expect(container.textContent).toBe('\"DEFAULT\"\"DEFAULT\"\"DEFAULT\"');\n  expect(storage1.size).toBe(0);\n  expect(storage2.size).toBe(0);\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Listen to storage","suites":[],"updatePoint":{"line":660,"column":23,"index":20880},"line":660,"code":"test('Listen to storage', async () => {\n  const atomA = atom({\n    key: 'recoil-sync listen',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'SYNC_1',\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync listen to multiple keys',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'SYNC_1',\n      itemKey: 'KEY A',\n      refine: string()\n    }), syncEffect({\n      storeKey: 'SYNC_1',\n      itemKey: 'KEY B',\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync listen to multiple storage',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      storeKey: 'SYNC_1',\n      refine: string()\n    }), syncEffect({\n      storeKey: 'SYNC_2',\n      refine: string()\n    })]\n  });\n  const storage1 = new Map([['recoil-sync listen', 'A'], ['KEY A', 'B'], ['recoil-sync listen to multiple storage', 'C1']]);\n  const storage2 = new Map([['recoil-sync listen to multiple storage', 'C2']]);\n\n  let updateItem1 = () => {\n    throw new Error('Failed to register 1');\n  };\n\n  let updateAll1 = _ => {\n    throw new Error('Failed to register 1');\n  };\n\n  let updateItem2 = () => {\n    throw new Error('Failed to register 2');\n  };\n\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storeKey: \"SYNC_1\",\n    storage: storage1,\n    regListen: listenInterface => {\n      updateItem1 = listenInterface.updateItem;\n      updateAll1 = listenInterface.updateAllKnownItems;\n    }\n  }), /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storeKey: \"SYNC_2\",\n    storage: storage2,\n    regListen: listenInterface => {\n      updateItem2 = listenInterface.updateItem;\n    }\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  })));\n  expect(container.textContent).toBe('\"A\"\"B\"\"C2\"');\n  expect(storage1.size).toBe(3); // Subscribe to new value\n\n  act(() => updateItem1('recoil-sync listen', 'AA'));\n  expect(container.textContent).toBe('\"AA\"\"B\"\"C2\"'); // Avoid feedback loops\n\n  expect(storage1.get('recoil-sync listen')).toBe('A'); // Subscribe to reset\n\n  act(() => updateItem1('recoil-sync listen', new DefaultValue()));\n  expect(container.textContent).toBe('\"DEFAULT\"\"B\"\"C2\"');\n  act(() => updateItem1('recoil-sync listen', 'AA')); // Subscribe to new value from different key\n\n  act(() => updateItem1('KEY A', 'BB'));\n  expect(container.textContent).toBe('\"AA\"\"BB\"\"C2\"'); // Neither key in same storage will be updated to avoid feedback loops\n\n  expect(storage1.get('KEY A')).toBe('B');\n  expect(storage1.get('KEY B')).toBe(undefined);\n  act(() => updateItem1('KEY B', 'BBB'));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"C2\"');\n  expect(storage1.get('KEY A')).toBe('B');\n  expect(storage1.get('KEY B')).toBe(undefined); // Subscribe to new value from different storage\n\n  act(() => updateItem1('recoil-sync listen to multiple storage', 'CC1'));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"CC1\"'); // Avoid feedback loops, do not update storage based on listening to the storage\n\n  expect(storage1.get('recoil-sync listen to multiple storage')).toBe('C1'); // But, we should update other storages to stay in sync\n\n  expect(storage2.get('recoil-sync listen to multiple storage')).toBe('CC1');\n  act(() => updateItem2('recoil-sync listen to multiple storage', 'CC2'));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"CC2\"');\n  expect(storage1.get('recoil-sync listen to multiple storage')).toBe('CC2');\n  expect(storage2.get('recoil-sync listen to multiple storage')).toBe('CC1');\n  act(() => updateItem1('recoil-sync listen to multiple storage', 'CCC1'));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"CCC1\"');\n  expect(storage1.get('recoil-sync listen to multiple storage')).toBe('CC2');\n  expect(storage2.get('recoil-sync listen to multiple storage')).toBe('CCC1'); // Subscribe to reset\n\n  act(() => updateItem1('recoil-sync listen to multiple storage', new DefaultValue()));\n  expect(container.textContent).toBe('\"AA\"\"BBB\"\"DEFAULT\"');\n  expect(storage1.get('recoil-sync listen to multiple storage')).toBe('CC2');\n  expect(storage2.get('recoil-sync listen to multiple storage')).toBe(undefined); // Subscribe to error\n\n  const ERROR = new Error('ERROR');\n  act(() => updateItem1('recoil-sync listen', RecoilLoadable.error(ERROR))); // TODO Atom should be put in an error state, but is just reset for now.\n\n  expect(container.textContent).toBe('\"DEFAULT\"\"BBB\"\"DEFAULT\"'); // expect(storage1.get('recoil-sync listen')?.errorOrThrow()).toBe(ERROR);\n  // Update All Items\n  // Set A while resetting B\n\n  act(() => updateAll1(new Map([['recoil-sync listen', 'AAA']])));\n  expect(container.textContent).toBe('\"AAA\"\"DEFAULT\"\"DEFAULT\"'); // Update All Items\n  // Setting older Key while newer Key is blank will take value instead of default\n\n  act(() => updateAll1(new Map([['recoil-sync listen', 'AAA'], ['KEY A', 'BBB']])));\n  expect(container.textContent).toBe('\"AAA\"\"BBB\"\"DEFAULT\"'); // Update All Items\n  // Setting an older and newer key will take the newer key value\n\n  act(() => updateAll1(new Map([['recoil-sync listen', 'AAA'], ['KEY A', 'IGNORE'], ['KEY B', 'BBBB']])));\n  expect(container.textContent).toBe('\"AAA\"\"BBBB\"\"DEFAULT\"'); // Update All Items\n  // Not providing an item causes it to revert to default\n\n  act(() => updateAll1(new Map([['recoil-sync listen', 'AAA']])));\n  expect(container.textContent).toBe('\"AAA\"\"DEFAULT\"\"DEFAULT\"'); // TODO Async Atom support\n  // act(() =>\n  //   updateItem1(\n  //     'recoil-sync listen',\n  //     (Promise.resolve( 'ASYNC')),\n  //   ),\n  // );\n  // await flushPromisesAndTimers();\n  // expect(container.textContent).toBe('\"ASYNC\"\"BBBB\"\"DEFAULT\"');\n  // act(() =>\n  //   updateItem1(\n  //     'KEY B', (Promise.reject(new Error('ERROR B'))),\n  //   ),\n  // );\n  // await flushPromisesAndTimers();\n  // expect(container.textContent).toBe('error');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Persist on read","suites":[],"updatePoint":{"line":807,"column":21,"index":26915},"line":807,"code":"test('Persist on read', async () => {\n  const atomA = atom({\n    key: 'recoil-sync persist on read default',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      refine: string(),\n      syncDefault: true\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync persist on read init',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf('INIT_BEFORE'), syncEffect({\n      refine: string(),\n      syncDefault: true\n    }), ({\n      setSelf\n    }) => setSelf('INIT_AFTER')]\n  });\n  const storage = new Map();\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  })));\n  expect(storage.size).toBe(0);\n  expect(container.textContent).toBe('\"DEFAULT\"\"INIT_AFTER\"');\n  await flushPromisesAndTimers();\n  expect(storage.size).toBe(2);\n  expect(storage.get('recoil-sync persist on read default')).toBe('DEFAULT');\n  expect(storage.get('recoil-sync persist on read init')).toBe('INIT_AFTER');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Persist on read - async","suites":[],"updatePoint":{"line":843,"column":29,"index":28084},"line":843,"code":"test('Persist on read - async', async () => {\n  let resolveA, resolveB1, resolveB2;\n  const atomA = atom({\n    key: 'recoil-sync persist on read default async',\n    default: new Promise(resolve => {\n      resolveA = resolve;\n    }),\n    effects: [syncEffect({\n      refine: string(),\n      syncDefault: true\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync persist on read init async',\n    default: 'DEFAULT',\n    effects: [({\n      setSelf\n    }) => setSelf(new Promise(resolve => {\n      resolveB1 = resolve;\n    })), syncEffect({\n      refine: string(),\n      syncDefault: true\n    }), ({\n      setSelf\n    }) => setSelf(new Promise(resolve => {\n      resolveB2 = resolve;\n    }))]\n  });\n  const storage = new Map();\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  })));\n  await flushPromisesAndTimers();\n  expect(storage.size).toBe(0);\n  act(() => {\n    resolveA('ASYNC_DEFAULT');\n  });\n  await flushPromisesAndTimers();\n  expect(storage.size).toBe(1);\n  act(() => {\n    resolveB1('ASYNC_INIT_BEFORE');\n  });\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('loading');\n  expect(storage.size).toBe(1);\n  act(() => {\n    resolveB2('ASYNC_INIT_AFTER');\n  });\n  await flushPromisesAndTimers();\n  expect(container.textContent).toBe('\"ASYNC_DEFAULT\"\"ASYNC_INIT_AFTER\"');\n  expect(storage.size).toBe(2);\n  expect(storage.get('recoil-sync persist on read default async')).toBe('ASYNC_DEFAULT');\n  expect(storage.get('recoil-sync persist on read init async')).toBe('ASYNC_INIT_AFTER');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Sync based on component props","suites":[],"updatePoint":{"line":901,"column":35,"index":29861},"line":901,"code":"test('Sync based on component props', async () => {\n  function SyncWithProps(props) {\n    useRecoilSync({\n      read: itemKey => itemKey in props ? props[itemKey] : new DefaultValue()\n    });\n    return null;\n  }\n\n  const atomA = atom({\n    key: 'recoil-sync from props spam',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'spam',\n      refine: string()\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync from props eggs',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'eggs',\n      refine: string()\n    })]\n  });\n  const atomC = atom({\n    key: 'recoil-sync from props default',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'default',\n      refine: string()\n    })]\n  });\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SyncWithProps, {\n    spam: \"SPAM\",\n    eggs: \"EGGS\"\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomA\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomB\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atomC\n  })));\n  expect(container.textContent).toBe('\"SPAM\"\"EGGS\"\"DEFAULT\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Sync Atom Family","suites":[],"updatePoint":{"line":945,"column":22,"index":31045},"line":945,"code":"test('Sync Atom Family', async () => {\n  const atoms = atomFamily({\n    key: 'recoil-sync atom family',\n    default: 'DEFAULT',\n    effects: param => [syncEffect({\n      itemKey: param,\n      refine: string()\n    })]\n  });\n  const storage = new Map([['a', 'A'], ['b', 'B']]);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storage\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atoms('a')\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atoms('b')\n  }), /*#__PURE__*/React.createElement(ReadsAtom, {\n    atom: atoms('c')\n  })));\n  expect(container.textContent).toBe('\"A\"\"B\"\"DEFAULT\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"write to multiple items","suites":["Complex Mappings"],"updatePoint":{"line":967,"column":31,"index":31818},"line":967,"code":"  test('write to multiple items', async () => {\n    const atomA = atom({\n      key: 'recoil-sync write multiple A',\n      default: 'A',\n      effects: [syncEffect({\n        itemKey: 'a',\n        // UNUSED\n        refine: string(),\n        write: ({\n          write\n        }, newValue) => {\n          write('a1', newValue instanceof DefaultValue ? newValue : newValue + '1');\n          write('a2', newValue instanceof DefaultValue ? newValue : newValue + '2');\n        },\n        syncDefault: true\n      })]\n    });\n    const atomB = atom({\n      key: 'recoil-sync write multiple B',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        itemKey: 'b',\n        // UNUSED\n        refine: string(),\n        write: ({\n          write,\n          reset\n        }, newValue) => {\n          if (newValue instanceof DefaultValue) {\n            reset('b1');\n            reset('b2');\n          } else {\n            write('b1', newValue + '1');\n            write('b2', newValue + '2');\n          }\n        }\n      })]\n    });\n    const [AtomB, setB, resetB] = componentThatReadsAndWritesAtom(atomB);\n    const storage = new Map();\n    const allItemsRef = {\n      current: new Map()\n    };\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n      storage: storage,\n      allItemsRef: allItemsRef\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atomA\n    }), /*#__PURE__*/React.createElement(AtomB, null)));\n    expect(container.textContent).toBe('\"A\"\"DEFAULT\"');\n    await flushPromisesAndTimers(); // Test mapping when syncing default value\n\n    expect(storage.size).toEqual(2);\n    expect(storage.has('a')).toEqual(false);\n    expect(storage.get('a1')).toEqual('A1');\n    expect(storage.get('a2')).toEqual('A2'); // Test mapping with allItems\n\n    expect(allItemsRef.current.size).toEqual(4);\n    expect(allItemsRef.current.get('a1')).toEqual('A1');\n    expect(allItemsRef.current.get('a2')).toEqual('A2');\n    expect(allItemsRef.current.get('b1')).toEqual(new DefaultValue());\n    expect(allItemsRef.current.get('b2')).toEqual(new DefaultValue()); // Test mapping when writing state changes\n\n    act(() => setB('B'));\n    expect(container.textContent).toBe('\"A\"\"B\"');\n    expect(storage.size).toEqual(4);\n    expect(storage.has('b')).toEqual(false);\n    expect(storage.get('b1')).toEqual('B1');\n    expect(storage.get('b2')).toEqual('B2');\n    expect(allItemsRef.current.size).toEqual(4);\n    expect(allItemsRef.current.get('b1')).toEqual('B1');\n    expect(allItemsRef.current.get('b2')).toEqual('B2'); // Test mapping when reseting state\n\n    act(resetB);\n    expect(container.textContent).toBe('\"A\"\"DEFAULT\"');\n    expect(storage.size).toEqual(2);\n    expect(storage.has('b')).toEqual(false);\n    expect(storage.has('b1')).toEqual(false);\n    expect(storage.has('b2')).toEqual(false);\n    expect(allItemsRef.current.size).toEqual(4);\n    expect(allItemsRef.current.get('b1')).toEqual(new DefaultValue());\n    expect(allItemsRef.current.get('b2')).toEqual(new DefaultValue());\n  });","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"read while writing","suites":["Complex Mappings"],"updatePoint":{"line":1050,"column":26,"index":34907},"line":1050,"code":"  test('read while writing', async () => {\n    const myAtom = atom({\n      key: 'recoil-sync read while writing',\n      default: 'SELF',\n      effects: [syncEffect({\n        refine: string(),\n        write: ({\n          write,\n          read\n        }, newValue) => {\n          if (newValue instanceof DefaultValue) {\n            write('self', newValue);\n            return;\n          }\n\n          write('self', 'TMP');\n          expect(read('self')).toEqual('TMP');\n          write('self', `${String(read('other'))}_${newValue}`);\n        },\n        syncDefault: true\n      })]\n    });\n    const storage = new Map([['other', 'OTHER']]);\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n      storage: storage\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: myAtom\n    })));\n    expect(container.textContent).toBe('\"SELF\"');\n    await flushPromisesAndTimers();\n    expect(storage.size).toEqual(2);\n    expect(storage.get('self')).toEqual('OTHER_SELF');\n  });","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"read from multiple items","suites":["Complex Mappings"],"updatePoint":{"line":1083,"column":32,"index":35985},"line":1083,"code":"  test('read from multiple items', () => {\n    const myAtom = atom({\n      key: 'recoil-sync read from multiple',\n      default: 'DEFAULT',\n      effects: [syncEffect({\n        refine: dict(number()),\n        read: ({\n          read\n        }) => ({\n          a: read('a'),\n          b: read('b')\n        })\n      })]\n    });\n    const storage = new Map([['a', 1], ['b', 2]]);\n    let updateItem;\n    const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n      storage: storage,\n      regListen: listenInterface => {\n        updateItem = listenInterface.updateItem;\n      }\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: myAtom\n    }))); // Test mapping while initializing values\n\n    expect(container.textContent).toBe('{\"a\":1,\"b\":2}'); // Test subscribing to multiple items\n\n    act(() => updateItem('a', 10));\n    expect(container.textContent).toBe('{\"a\":10,\"b\":2}'); // Avoid feedback loops\n\n    expect(storage.get('a')).toEqual(1);\n    storage.set('a', 10); // Keep storage in sync\n\n    act(() => updateItem('b', 20));\n    expect(container.textContent).toBe('{\"a\":10,\"b\":20}');\n  });","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Reading before sync hook","suites":["Complex Mappings"],"updatePoint":{"line":1122,"column":30,"index":37302},"line":1122,"code":"test('Reading before sync hook', async () => {\n  const atoms = atomFamily({\n    key: 'recoil-sync order',\n    default: 'DEFAULT',\n    effects: param => [syncEffect({\n      itemKey: param,\n      refine: string()\n    })]\n  });\n\n  function SyncOrder() {\n    const b = useRecoilValue(atoms('b'));\n    useRecoilSync({\n      read: itemKey => itemKey.toUpperCase()\n    });\n    const c = useRecoilValue(atoms('c'));\n    return /*#__PURE__*/React.createElement(\"div\", null, String(b), String(c), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atoms('d')\n    }));\n  }\n\n  function MyRoot() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atoms('a')\n    }), /*#__PURE__*/React.createElement(SyncOrder, null), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: atoms('e')\n    }));\n  }\n\n  const container = renderElements( /*#__PURE__*/React.createElement(MyRoot, null));\n  expect(container.textContent).toBe('\"DEFAULT\"DEFAULTC\"D\"\"E\"');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Sibling <RecoilRoot>","suites":["Complex Mappings"],"updatePoint":{"line":1154,"column":26,"index":38312},"line":1154,"code":"test('Sibling <RecoilRoot>', async () => {\n  const atomA = atom({\n    key: 'recoil-sync sibling root A',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'a',\n      refine: string(),\n      syncDefault: true\n    })]\n  });\n  const atomB = atom({\n    key: 'recoil-sync sibling root B',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'b',\n      refine: string(),\n      syncDefault: true\n    })]\n  });\n  const atomShared = atom({\n    key: 'recoil-sync sibling root shared',\n    default: 'DEFAULT',\n    effects: [syncEffect({\n      itemKey: 'shared',\n      refine: string(),\n      syncDefault: true\n    })]\n  });\n  const storageA = new Map([['a', 'A']]);\n  const storageB = new Map([['shared', 'SHARED']]);\n  const [AtomA, setA] = componentThatReadsAndWritesAtom(atomA);\n  const [AtomB, setB] = componentThatReadsAndWritesAtom(atomB);\n  const [SharedInA, setSharedInA] = componentThatReadsAndWritesAtom(atomShared);\n  const [SharedInB, setSharedInB] = componentThatReadsAndWritesAtom(atomShared);\n  const container = renderElements( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RecoilRoot, null, /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storageA\n  }), /*#__PURE__*/React.createElement(AtomA, null), /*#__PURE__*/React.createElement(SharedInA, null)), /*#__PURE__*/React.createElement(RecoilRoot, null, /*#__PURE__*/React.createElement(AtomB, null), /*#__PURE__*/React.createElement(TestRecoilSync, {\n    storage: storageB\n  }), /*#__PURE__*/React.createElement(SharedInB, null))));\n  expect(container.textContent).toEqual('\"A\"\"DEFAULT\"\"DEFAULT\"\"SHARED\"');\n  await flushPromisesAndTimers();\n  expect(storageA.size).toBe(2);\n  expect(storageB.size).toBe(1);\n  expect(storageA.get('a')).toBe('A');\n  expect(storageA.get('shared')).toBe('DEFAULT');\n  expect(storageB.get('shared')).toBe('SHARED');\n  act(() => setA('SET_A'));\n  expect(container.textContent).toEqual('\"SET_A\"\"DEFAULT\"\"DEFAULT\"\"SHARED\"');\n  expect(storageA.size).toBe(2);\n  expect(storageB.size).toBe(1);\n  expect(storageA.get('a')).toBe('SET_A');\n  expect(storageA.get('shared')).toBe('DEFAULT');\n  expect(storageB.get('shared')).toBe('SHARED');\n  act(() => setB('SET_B'));\n  expect(container.textContent).toEqual('\"SET_A\"\"DEFAULT\"\"SET_B\"\"SHARED\"');\n  expect(storageA.size).toBe(2);\n  expect(storageB.size).toBe(2);\n  expect(storageA.get('a')).toBe('SET_A');\n  expect(storageA.get('shared')).toBe('DEFAULT');\n  expect(storageB.get('b')).toBe('SET_B');\n  expect(storageB.get('shared')).toBe('SHARED');\n  act(() => setSharedInA('SHARED_A'));\n  expect(container.textContent).toEqual('\"SET_A\"\"SHARED_A\"\"SET_B\"\"SHARED\"');\n  expect(storageA.size).toBe(2);\n  expect(storageB.size).toBe(2);\n  expect(storageA.get('a')).toBe('SET_A');\n  expect(storageA.get('shared')).toBe('SHARED_A');\n  expect(storageB.get('b')).toBe('SET_B');\n  expect(storageB.get('shared')).toBe('SHARED');\n  act(() => setSharedInB('SHARED_B'));\n  expect(container.textContent).toEqual('\"SET_A\"\"SHARED_A\"\"SET_B\"\"SHARED_B\"');\n  expect(storageA.size).toBe(2);\n  expect(storageB.size).toBe(2);\n  expect(storageA.get('a')).toBe('SET_A');\n  expect(storageA.get('shared')).toBe('SHARED_A');\n  expect(storageB.get('b')).toBe('SET_B');\n  expect(storageB.get('shared')).toBe('SHARED_B');\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"Unregister store and atoms","suites":["Complex Mappings"],"updatePoint":{"line":1232,"column":32,"index":41621},"line":1232,"code":"test('Unregister store and atoms', () => {\n  const key = 'recoil-sync unregister';\n  const atomCleanups = [];\n  const myAtom = atom({\n    key,\n    default: 'DEFAULT',\n    effects: [({\n      storeID\n    }) => {\n      expect(registries_FOR_TESTING.getAtomRegistry(storeID).has(key)).toBe(false);\n    }, syncEffect({\n      refine: string()\n    }), ({\n      storeID\n    }) => {\n      expect(registries_FOR_TESTING.getAtomRegistry(storeID).has(key)).toBe(true);\n      return () => {\n        expect(registries_FOR_TESTING.getAtomRegistry(storeID).get(key)?.effects.size).toBe(0);\n        atomCleanups.push(true);\n      };\n    }]\n  });\n  const subscriberRefCounts = [];\n  const unregister = jest.fn(idx => {\n    subscriberRefCounts[idx]--;\n  });\n  const register = jest.fn(idx => {\n    subscriberRefCounts[idx] = (subscriberRefCounts[idx] ?? 0) + 1;\n    return () => unregister(idx);\n  });\n\n  function TestSyncUnregister({\n    idx\n  }) {\n    const listen = useCallback(() => register(idx), [idx]);\n    useRecoilSync({\n      listen\n    });\n    return null;\n  }\n\n  let setNumRoots;\n\n  function MyRoots() {\n    const [roots, setRoots] = useState(0);\n    setNumRoots = setRoots;\n    return Array.from(Array(roots).keys()).map(i => /*#__PURE__*/React.createElement(RecoilRoot, {\n      key: i\n    }, i, /*#__PURE__*/React.createElement(TestSyncUnregister, {\n      idx: i\n    }), /*#__PURE__*/React.createElement(ReadsAtom, {\n      atom: myAtom\n    })));\n  }\n\n  const container = renderElements( /*#__PURE__*/React.createElement(MyRoots, null));\n  expect(container.textContent).toEqual('');\n  expect(register).toHaveBeenCalledTimes(0);\n  expect(unregister).toHaveBeenCalledTimes(0);\n  expect(subscriberRefCounts[0]).toEqual(undefined);\n  expect(subscriberRefCounts[1]).toEqual(undefined);\n  expect(atomCleanups.length).toEqual(0);\n  act(() => setNumRoots(1));\n  expect(container.textContent).toEqual('0\"DEFAULT\"');\n  expect(register).toHaveBeenCalledTimes(1);\n  expect(unregister).toHaveBeenCalledTimes(0);\n  expect(subscriberRefCounts[0]).toEqual(1);\n  expect(subscriberRefCounts[1]).toEqual(undefined);\n  expect(atomCleanups.length).toEqual(0);\n  act(() => setNumRoots(2));\n  expect(container.textContent).toEqual('0\"DEFAULT\"1\"DEFAULT\"');\n  expect(register).toHaveBeenCalledTimes(2);\n  expect(unregister).toHaveBeenCalledTimes(0);\n  expect(subscriberRefCounts[0]).toEqual(1);\n  expect(subscriberRefCounts[1]).toEqual(1);\n  expect(atomCleanups.length).toEqual(0);\n  act(() => setNumRoots(1));\n  expect(container.textContent).toEqual('0\"DEFAULT\"');\n  expect(register).toHaveBeenCalledTimes(2);\n  expect(unregister).toHaveBeenCalledTimes(1);\n  expect(subscriberRefCounts[0]).toEqual(1);\n  expect(subscriberRefCounts[1]).toEqual(0);\n  expect(atomCleanups.length).toEqual(1);\n  act(() => setNumRoots(0));\n  expect(container.textContent).toEqual('');\n  expect(register).toHaveBeenCalledTimes(2);\n  expect(unregister).toHaveBeenCalledTimes(2);\n  expect(subscriberRefCounts[0]).toEqual(0);\n  expect(subscriberRefCounts[1]).toEqual(0);\n  expect(atomCleanups.length).toEqual(2);\n});","file":"RecoilSync-test.js","skipped":false,"dir":"packages/recoil-sync/__tests__"},{"name":"should succeed in coercing correct array","suites":["array"],"updatePoint":{"line":45,"column":46,"index":777},"line":45,"code":"  it('should succeed in coercing correct array', () => {\n    const coerce = array(number());\n    const result = coerce([1, 2, 3]);\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value).toEqual([1, 2, 3]);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed in coercing correct array with null","suites":["array"],"updatePoint":{"line":51,"column":56,"index":1029},"line":51,"code":"  it('should succeed in coercing correct array with null', () => {\n    const coerce = array(nullable(number()));\n    const result = coerce([1, 2, null]);\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value).toEqual([1, 2, null]);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"nested array","suites":["array"],"updatePoint":{"line":57,"column":18,"index":1259},"line":57,"code":"  it('nested array', () => {\n    const coerce = coercion(array(array(number())));\n    expect(coerce([])).toEqual([]);\n    expect(coerce([1, 2])).toEqual(null);\n    expect(coerce([[1, 2]])).toEqual([[1, 2]]);\n    expect(coerce([[1, 2], [3, 4]])).toEqual([[1, 2], [3, 4]]);\n    expect(coerce([[1, 2], ['str', 4]])).toEqual(null);\n    expect(coerce([[[3]]])).toEqual(null);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"arbitrary depth nested array","suites":["array"],"updatePoint":{"line":66,"column":34,"index":1652},"line":66,"code":"  it('arbitrary depth nested array', () => {\n    const check = or(number(), array(lazy(() => check)));\n    const coerce = coercion(array(check));\n    expect(coerce(0)).toEqual(null);\n    expect(coerce([])).toEqual([]);\n    expect(coerce([1, 1])).toEqual([1, 1]);\n    expect(coerce([1, 'str'])).toEqual(null);\n    expect(coerce([1, [2, 2]])).toEqual([1, [2, 2]]);\n    expect(coerce([1, [[3], [3, [4]]]])).toEqual([1, [[3], [3, [4]]]]);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed in not coercing correct array with nullable element","suites":["array"],"updatePoint":{"line":76,"column":72,"index":2131},"line":76,"code":"  it('should succeed in not coercing correct array with nullable element', () => {\n    const coerce = array(number());\n    const result = coerce([1, null, 3]);\n    invariant(result.type === 'failure', 'should fail');\n    expect(result.path.toString()).toEqual('<root>[1]');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed in not coercing correct array with invalid element","suites":["array"],"updatePoint":{"line":82,"column":71,"index":2410},"line":82,"code":"  it('should succeed in not coercing correct array with invalid element', () => {\n    const coerce = array(number());\n    const result = coerce([1, 2, '3']);\n    invariant(result.type === 'failure', 'should fail');\n    expect(result.path.toString()).toEqual('<root>[2]');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed when using writable version, with correct type","suites":["array"],"updatePoint":{"line":88,"column":67,"index":2684},"line":88,"code":"  it('should succeed when using writable version, with correct type', () => {\n    const coerce = writableArray(number());\n    const result = coerce([1, 2, 3]);\n    invariant(result.type === 'success', 'should succeed');\n    result.value[0] = 3;\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"mixed type tuples","suites":["tuple"],"updatePoint":{"line":96,"column":23,"index":2921},"line":96,"code":"  it('mixed type tuples', () => {\n    const coerce = coercion(tuple(number(), string()));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce([])).toEqual(null);\n    expect(coerce([1])).toEqual(null);\n    expect(coerce([1, 'str'])).toEqual([1, 'str']);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"nested tuples","suites":["tuple"],"updatePoint":{"line":103,"column":19,"index":3183},"line":103,"code":"  it('nested tuples', () => {\n    const coerce = coercion(tuple(number(), tuple(number(), string())));\n    expect(coerce([])).toEqual(null);\n    expect(coerce([1, 'str'])).toEqual(null);\n    expect(coerce([1, [1, 'str']])).toEqual([1, [1, 'str']]);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"optional trailing entries","suites":["tuple"],"updatePoint":{"line":109,"column":31,"index":3450},"line":109,"code":"  it('optional trailing entries', () => {\n    const coerce = coercion(tuple(number(), voidable(string())));\n    expect(coerce([])).toEqual(null);\n    expect(coerce([1])).toEqual([1, undefined]);\n    expect(coerce([1, 'str'])).toEqual([1, 'str']);\n    expect(coerce([1, 2])).toEqual(null);\n    expect(coerce([1, 'str', 3])).toEqual([1, 'str']);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should successfully parse a dictionary","suites":["dict"],"updatePoint":{"line":119,"column":44,"index":3842},"line":119,"code":"  it('should successfully parse a dictionary', () => {\n    const coerce = dict(object({\n      a: number(),\n      b: number()\n    }));\n    const result = coerce({\n      test: {\n        a: 1,\n        b: 2\n      },\n      other: {\n        a: 1,\n        b: 2\n      }\n    });\n    invariant(result.type === 'success', 'should succeed');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should fail if the values don't match","suites":["dict"],"updatePoint":{"line":136,"column":43,"index":4177},"line":136,"code":"  it(\"should fail if the values don't match\", () => {\n    const coerce = dict(object({\n      a: number(),\n      b: number()\n    }));\n    const result = coerce({\n      test: {\n        a: 1,\n        b: 2\n      },\n      other: {\n        c: 1,\n        d: 2\n      }\n    });\n    invariant(result.type === 'failure', 'should fail');\n    expect(result.path.toString()).toEqual('<root>.other.a');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed when using writable version, with correct type","suites":["dict"],"updatePoint":{"line":154,"column":67,"index":4595},"line":154,"code":"  it('should succeed when using writable version, with correct type', () => {\n    const coerce = writableDict(number());\n    const result = coerce({\n      a: 1,\n      b: 2\n    });\n    invariant(result.type === 'success', 'should succeed'); // should flow check as writable\n\n    result.value.a = 3;\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"only accept plain objects","suites":["dict"],"updatePoint":{"line":164,"column":31,"index":4863},"line":164,"code":"  it('only accept plain objects', () => {\n    class MyClass {}\n\n    const coerce = coercion(dict(number()));\n    expect(coerce({})).toEqual({});\n    expect(coerce(new Date())).toEqual(null);\n    expect(coerce(new Map())).toEqual(null);\n    expect(coerce(new Set())).toEqual(null);\n    expect(coerce(new MyClass())).toEqual(null);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed in parsing basic object","suites":["object"],"updatePoint":{"line":176,"column":44,"index":5243},"line":176,"code":"  it('should succeed in parsing basic object', () => {\n    const coerce = object({\n      a: number(),\n      b: string()\n    });\n    const result = coerce({\n      a: 1,\n      b: 'test'\n    });\n    invariant(result.type === 'success', 'should succeed'); // typecheck assertion\n\n    const a = result.value.a;\n    const b = result.value.b;\n    expect(a).toEqual(1);\n    expect(b).toEqual('test');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should allow optional props","suites":["object"],"updatePoint":{"line":192,"column":33,"index":5631},"line":192,"code":"  it('should allow optional props', () => {\n    const coerce = object({\n      a: number(),\n      b: string(),\n      c: optional(number())\n    });\n    const result = coerce({\n      a: 1,\n      b: 'test'\n    });\n    invariant(result.type === 'success', 'should succeed'); // eslint-disable-next-line no-unused-vars\n\n    const n = result.value.c; // typecheck assertion\n\n    const a = result.value.a;\n    const b = result.value.b;\n    expect(a).toEqual(1);\n    expect(b).toEqual('test');\n    const result2 = coerce({\n      a: 1,\n      b: 'test',\n      c: 2\n    });\n    invariant(result2.type === 'success', 'should succeed');\n    const result3 = coerce({\n      a: 1,\n      b: 'test',\n      c: undefined\n    });\n    invariant(result3.type === 'failure', 'should fail');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed in parsing nested objects","suites":["object"],"updatePoint":{"line":223,"column":46,"index":6416},"line":223,"code":"  it('should succeed in parsing nested objects', () => {\n    const coerce = object({\n      name: string(),\n      job: object({\n        years: number(),\n        title: string()\n      })\n    });\n    const result = coerce({\n      name: 'Elsa',\n      job: {\n        title: 'Engineer',\n        years: 3\n      }\n    });\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value.job.title).toEqual('Engineer');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"extra properties are ignored","suites":["object"],"updatePoint":{"line":241,"column":34,"index":6840},"line":241,"code":"  it('extra properties are ignored', () => {\n    const coerce = coercion(object({\n      name: string()\n    }));\n    expect(coerce({})).toEqual(null);\n    expect(coerce({\n      name: 'Elsa'\n    })).toEqual({\n      name: 'Elsa'\n    });\n    expect(coerce({\n      name: 'Elsa',\n      sister: 'Anna'\n    })).toEqual({\n      name: 'Elsa'\n    });\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"optional properties","suites":["object"],"updatePoint":{"line":258,"column":25,"index":7177},"line":258,"code":"  it('optional properties', () => {\n    const coerce = coercion(object({\n      name: string(),\n      ref: voidable(string())\n    }));\n    expect(coerce({})).toEqual(null);\n    expect(coerce({\n      name: 'Elsa'\n    })).toEqual({\n      name: 'Elsa'\n    });\n    expect(coerce({\n      name: 'Elsa',\n      ref: 'Anna'\n    })).toEqual({\n      name: 'Elsa',\n      ref: 'Anna'\n    });\n    expect(coerce({\n      name: 'Elsa',\n      extra: 'foo'\n    })).toEqual({\n      name: 'Elsa'\n    });\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should fail in parsing nested objects with invalid property","suites":["object"],"updatePoint":{"line":283,"column":65,"index":7705},"line":283,"code":"  it('should fail in parsing nested objects with invalid property', () => {\n    const coerce = object({\n      name: string(),\n      job: object({\n        years: number(),\n        title: string()\n      })\n    });\n    const result = coerce({\n      name: 'Elsa',\n      job: {\n        title: 'Engineer',\n        years: 'woops'\n      }\n    });\n    invariant(result.type === 'failure', 'should succeed');\n    expect(result.path.toString()).toEqual('<root>.job.years');\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should succeed when using writable version, with correct type","suites":["object"],"updatePoint":{"line":301,"column":67,"index":8176},"line":301,"code":"  it('should succeed when using writable version, with correct type', () => {\n    const coerce = writableObject({\n      name: string(),\n      job: object({\n        years: number(),\n        title: string()\n      })\n    });\n    const result = coerce({\n      name: 'Elsa',\n      job: {\n        title: 'Engineer',\n        years: 3\n      }\n    });\n    invariant(result.type === 'success', 'should succeed'); // should flow check as writable\n\n    result.value.name = 'MechaElsa';\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"only accept plain objects","suites":["object"],"updatePoint":{"line":320,"column":31,"index":8620},"line":320,"code":"  it('only accept plain objects', () => {\n    class MyClass {}\n\n    const coerce = coercion(object({}));\n    expect(coerce({})).toEqual({});\n    expect(coerce(new Date())).toEqual(null);\n    expect(coerce(new Map())).toEqual(null);\n    expect(coerce(new Set())).toEqual(null);\n    expect(coerce(new MyClass())).toEqual(null);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"coerce sets","suites":["set"],"updatePoint":{"line":332,"column":17,"index":8966},"line":332,"code":"  it('coerce sets', () => {\n    const coerce = coercion(set(number()));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce([1, 2])).toEqual(null);\n    expect(coerce(new Set([]))).toEqual(new Set([]));\n    expect(coerce(new Set([1, 2]))).toEqual(new Set([1, 2]));\n    expect(coerce(new Set([1, 2, 2]))).toEqual(new Set([1, 2]));\n    expect(coerce(new Set([1, 2, 'str']))).toEqual(null);\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"nested sets","suites":["set"],"updatePoint":{"line":341,"column":17,"index":9366},"line":341,"code":"  it('nested sets', () => {\n    const coerce = coercion(set(set(number())));\n    expect(coerce(null)).toEqual(null);\n    expect(coerce(new Set([1]))).toEqual(null);\n    expect(coerce(new Set([new Set()]))).toEqual(new Set([new Set()]));\n    expect(coerce(new Set([new Set([1])]))).toEqual(new Set([new Set([1])]));\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"coerce maps","suites":["map"],"updatePoint":{"line":350,"column":17,"index":9715},"line":350,"code":"  it('coerce maps', () => {\n    const coerce = coercion(map(string(), number()));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce(new Map())).toEqual(new Map());\n    expect(coerce(new Map([['foo', 'bar']]))).toEqual(null);\n    expect(coerce(new Map([['foo', 123]]))).toEqual(new Map([['foo', 123]]));\n    expect(coerce(new Map([['foo', 123], ['bar', 456]]))).toEqual(new Map([['foo', 123], ['bar', 456]]));\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"nested maps","suites":["map"],"updatePoint":{"line":358,"column":17,"index":10139},"line":358,"code":"  it('nested maps', () => {\n    const coerce = coercion(map(string(), map(string(), number())));\n    expect(coerce(new Map())).toEqual(new Map());\n    expect(coerce(new Map([['foo', new Map()]]))).toEqual(new Map([['foo', new Map()]]));\n    expect(coerce(new Map([['foo', new Map([['bar', 123]])]]))).toEqual(new Map([['foo', new Map([['bar', 123]])]]));\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"map with non-string keys","suites":["map"],"updatePoint":{"line":364,"column":30,"index":10513},"line":364,"code":"  it('map with non-string keys', () => {\n    const numberKey = coercion(map(number(), string()));\n    expect(numberKey(new Map([['foo', 'bar']]))).toEqual(null);\n    expect(numberKey(new Map([[123, 'bar']]))).toEqual(new Map([[123, 'bar']]));\n    const objKey = coercion(map(object({\n      str: string()\n    }), number()));\n    expect(objKey(new Map([[{\n      str: 'foo'\n    }, 123]]))).toEqual(new Map([[{\n      str: 'foo'\n    }, 123]]));\n  });","file":"Refine_Containers-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse valid json","suites":["json"],"updatePoint":{"line":35,"column":39,"index":676},"line":35,"code":"  it('should correctly parse valid json', () => {\n    const parse = jsonParser(object({\n      a: string(),\n      b: nullable(number()),\n      c: boolean()\n    }));\n    const result = parse('{\"a\": \"test\", \"c\": true}');\n    expect(result).toEqual({\n      a: 'test',\n      b: undefined,\n      c: true\n    });\n    invariant(result != null, 'should not be null');\n    expect(result.a).toEqual('test');\n  });","file":"Refine_JSON-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should error on null_or_invalid if desired","suites":["json"],"updatePoint":{"line":50,"column":48,"index":1088},"line":50,"code":"  it('should error on null_or_invalid if desired', () => {\n    const MESSAGE = 'IS_NULL_OR_INVALID';\n    const parse = jsonParserEnforced(object({\n      a: string(),\n      b: nullable(number()),\n      c: boolean()\n    }), MESSAGE);\n    expect(parse('{\"a\": \"a\", \"c\": true}')).toEqual({\n      a: 'a',\n      b: undefined,\n      c: true\n    });\n    expect(() => parse('{\"a\": \"a\", \"d\": true}')).toThrow(new RegExp(MESSAGE));\n    expect(() => parse(null)).toThrow(new RegExp(MESSAGE));\n  });","file":"Refine_JSON-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse exact string","suites":["literal"],"updatePoint":{"line":35,"column":41,"index":654},"line":35,"code":"  it('should correctly parse exact string', () => {\n    const coerce = literal('test');\n    const result = coerce('test');\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 'test', 'should succeed');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should fail parse different string","suites":["literal"],"updatePoint":{"line":41,"column":40,"index":900},"line":41,"code":"  it('should fail parse different string', () => {\n    const coerce = literal('test');\n    const result = coerce('other');\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse exact number","suites":["literal"],"updatePoint":{"line":46,"column":41,"index":1087},"line":46,"code":"  it('should correctly parse exact number', () => {\n    const coerce = literal(1);\n    const result = coerce(1);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 1, 'should succeed');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse exact boolean","suites":["literal"],"updatePoint":{"line":52,"column":42,"index":1320},"line":52,"code":"  it('should correctly parse exact boolean', () => {\n    const coerce = literal(true);\n    const result = coerce(true);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === true, 'should succeed');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"parse null","suites":["literal"],"updatePoint":{"line":58,"column":16,"index":1536},"line":58,"code":"  it('parse null', () => {\n    const coerce = coercion(asType(literal(null), () => true));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce(null)).toEqual(true);\n    expect(coerce(undefined)).toEqual(null);\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"parse undefined","suites":["literal"],"updatePoint":{"line":64,"column":21,"index":1764},"line":64,"code":"  it('parse undefined', () => {\n    const coerce = coercion(literal(undefined));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce(null)).toEqual(null);\n    expect(coerce(undefined)).toEqual(undefined);\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse true","suites":["boolean"],"updatePoint":{"line":72,"column":33,"index":2026},"line":72,"code":"  it('should correctly parse true', () => {\n    const coerce = boolean();\n    const result = coerce(true);\n    invariant(result.type === 'success', 'should succeed'); // test type extraction\n\n    const test = true;\n    invariant(result.value === test, 'value should be true');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse false","suites":["boolean"],"updatePoint":{"line":80,"column":34,"index":2310},"line":80,"code":"  it('should correctly parse false', () => {\n    const coerce = boolean();\n    const result = coerce(false);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === false, 'value should be false');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["boolean"],"updatePoint":{"line":86,"column":36,"index":2551},"line":86,"code":"  it('should correctly parse invalid', () => {\n    const coerce = boolean();\n    const result = coerce(1);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse number","suites":["number"],"updatePoint":{"line":93,"column":35,"index":2751},"line":93,"code":"  it('should correctly parse number', () => {\n    const coerce = number();\n    const result = coerce(1);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 1, 'value should be true');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["number"],"updatePoint":{"line":99,"column":36,"index":2982},"line":99,"code":"  it('should correctly parse invalid', () => {\n    const coerce = number();\n    const result = coerce(true);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse number","suites":["string"],"updatePoint":{"line":106,"column":35,"index":3184},"line":106,"code":"  it('should correctly parse number', () => {\n    const coerce = string();\n    const result = coerce('test');\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 'test', 'value should be true');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["string"],"updatePoint":{"line":112,"column":36,"index":3425},"line":112,"code":"  it('should correctly parse invalid', () => {\n    const coerce = string();\n    const result = coerce(null);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"match regex","suites":["string"],"updatePoint":{"line":117,"column":17,"index":3578},"line":117,"code":"  it('match regex', () => {\n    const coerce = string(/^users?$/);\n    expect(coerce('user').type).toBe('success');\n    expect(coerce('users').type).toBe('success');\n    expect(coerce('busers').type).toBe('failure');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"parse string literals","suites":["stringLiterals"],"updatePoint":{"line":125,"column":27,"index":3850},"line":125,"code":"  it('parse string literals', () => {\n    const coerce = coercion(stringLiterals({\n      foo: 'foo',\n      bar: 'bar'\n    }));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce('fail')).toEqual(null);\n    expect(coerce('foo')).toEqual('foo'); // Confirm it can be typed as a union of string literals\n\n    const _x = coerce('foo');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"parse string literals with transformation","suites":["stringLiterals"],"updatePoint":{"line":136,"column":47,"index":4216},"line":136,"code":"  it('parse string literals with transformation', () => {\n    const coerce = coercion(stringLiterals({\n      foo: 'eggs',\n      bar: 'spam'\n    }));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce('fail')).toEqual(null);\n    expect(coerce('foo')).toEqual('eggs'); // Confirm it can be typed as a union of string literals\n\n    const _x = coerce('foo');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"will cast value into string literal union type","suites":["stringLiterals"],"updatePoint":{"line":147,"column":52,"index":4590},"line":147,"code":"  it('will cast value into string literal union type', () => {\n    const food = Object.freeze({\n      foo: 'eggs',\n      bar: 'spam'\n    });\n    const assert = assertion(stringLiterals(food));\n    const value = assert('foo'); // $FlowExpectedError - it is expected to fail\n\n    'invalid';\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse date","suites":["date"],"updatePoint":{"line":159,"column":33,"index":4895},"line":159,"code":"  it('should correctly parse date', () => {\n    const coerce = date();\n    const d = new Date();\n    const result = coerce(d);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === d, 'value should be true');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["date"],"updatePoint":{"line":166,"column":36,"index":5150},"line":166,"code":"  it('should correctly parse invalid', () => {\n    const coerce = date();\n    const result = coerce(true);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should fail an invalid date","suites":["date"],"updatePoint":{"line":171,"column":33,"index":5317},"line":171,"code":"  it('should fail an invalid date', () => {\n    const coerce = coercion(date());\n    const myDate = new Date();\n    expect(coerce(myDate)).toEqual(myDate);\n    expect(coerce(new Date('invalid'))).toEqual(null);\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should parse date strings","suites":["jsonDate"],"updatePoint":{"line":179,"column":31,"index":5565},"line":179,"code":"  it('should parse date strings', () => {\n    const coerce = coercion(jsonDate());\n    expect(coerce('Oct 26, 1985')).toEqual(new Date('Oct 26, 1985'));\n    expect(coerce('1955-11-05T07:00:00.000Z')).toEqual(new Date('1955-11-05T07:00:00.000Z'));\n  });","file":"Refine_Primitives-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"upgrade number to string","suites":["asType"],"updatePoint":{"line":46,"column":30,"index":795},"line":46,"code":"  it('upgrade number to string', () => {\n    const coerce = coercion(asType(number(), num => `${num}`));\n    expect(coerce(false)).toBe(null);\n    expect(coerce('str')).toBe(null);\n    expect(coerce(123)).toBe('123');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should match value when correct","suites":["or"],"updatePoint":{"line":54,"column":37,"index":1053},"line":54,"code":"  it('should match value when correct', () => {\n    const parser = or(string(), number());\n    const result = parser('test');\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value).toEqual('test');\n    const second = parser(1);\n    invariant(second.type === 'success', 'should succeed');\n    expect(second.value).toEqual(1);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should not match if value is not correct","suites":["or"],"updatePoint":{"line":63,"column":46,"index":1423},"line":63,"code":"  it('should not match if value is not correct', () => {\n    const parser = or(string(), number());\n    const result = parser(true);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should match value when correct","suites":["union"],"updatePoint":{"line":70,"column":37,"index":1640},"line":70,"code":"  it('should match value when correct', () => {\n    const parser = union(string(), number(), boolean());\n    const result = parser('test');\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value).toEqual('test');\n    const second = parser(1);\n    invariant(second.type === 'success', 'should succeed');\n    expect(second.value).toEqual(1);\n    const third = parser(true);\n    invariant(third.type === 'success', 'should succeed');\n    expect(third.value).toEqual(true);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should not match if value is not correct","suites":["union"],"updatePoint":{"line":82,"column":46,"index":2154},"line":82,"code":"  it('should not match if value is not correct', () => {\n    const parser = union(string(), number());\n    const result = parser(true);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"upgrade to string from various types","suites":["match"],"updatePoint":{"line":89,"column":42,"index":2379},"line":89,"code":"  it('upgrade to string from various types', () => {\n    const coerce = coercion(match(string(), asType(number(), num => `${num}`), asType(object({\n      str: string()\n    }), obj => obj.str), asType(object({\n      num: number()\n    }), obj => `${obj.num}`)));\n    expect(coerce(false)).toBe(null);\n    expect(coerce('str')).toBe('str');\n    expect(coerce(123)).toBe('123');\n    expect(coerce({\n      num: 123\n    })).toBe('123');\n    expect(coerce({\n      str: 'str'\n    })).toBe('str');\n    expect(coerce({\n      num: 123,\n      str: 'str'\n    })).toBe('str');\n    expect(coerce({\n      foo: 'bar'\n    })).toBe(null);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse nullable value when null","suites":["nullable"],"updatePoint":{"line":114,"column":53,"index":3049},"line":114,"code":"  it('should correctly parse nullable value when null', () => {\n    const coerce = nullable(string());\n    const result = coerce(null);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === null, 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse value when undefined is provided","suites":["nullable"],"updatePoint":{"line":120,"column":61,"index":3321},"line":120,"code":"  it('should correctly parse value when undefined is provided', () => {\n    const coerce = nullable(string());\n    const result = coerce(undefined);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === undefined, 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse nullable value when not null","suites":["nullable"],"updatePoint":{"line":126,"column":57,"index":3599},"line":126,"code":"  it('should correctly parse nullable value when not null', () => {\n    const coerce = nullable(string());\n    const result = coerce('test');\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 'test', 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["nullable"],"updatePoint":{"line":132,"column":36,"index":3850},"line":132,"code":"  it('should correctly parse invalid', () => {\n    const coerce = nullable(string());\n    const result = coerce(1);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should validate the value, but return null if invalid","suites":["nullable"],"updatePoint":{"line":137,"column":59,"index":4052},"line":137,"code":"  it('should validate the value, but return null if invalid', () => {\n    const coerce = nullable(string(), {\n      nullWithWarningWhenInvalid: true\n    });\n    const result = coerce(1);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === null, 'value should be true');\n    expect(result.warnings?.length).toBe(1);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should pass along warnings in child result","suites":["nullable"],"updatePoint":{"line":146,"column":48,"index":4401},"line":146,"code":"  it('should pass along warnings in child result', () => {\n    const coerce = object({\n      field: nullable(object({\n        child: nullable(string(), {\n          nullWithWarningWhenInvalid: true\n        })\n      }))\n    });\n    const result = coerce({\n      field: {\n        child: 1\n      }\n    });\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.warnings?.length).toBe(1);\n    const warning = result.warnings?.[0];\n    invariant(warning != null, 'should have warning');\n    expect(warning.path.toString()).toEqual('<root>.field.child');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should propogate warnings correctly when using `nullWithWarningWhenInvalid`","suites":["nullable"],"updatePoint":{"line":165,"column":81,"index":5011},"line":165,"code":"  it('should propogate warnings correctly when using `nullWithWarningWhenInvalid`', () => {\n    const nullConfig = {\n      nullWithWarningWhenInvalid: true\n    };\n    const check = object({\n      a: string(),\n      b: object({\n        c: nullable(number(), nullConfig),\n        d: object({\n          e: boolean(),\n          f: nullable(boolean(), nullConfig)\n        })\n      })\n    });\n    const result = check({\n      a: 'test',\n      b: {\n        c: 'invalid',\n        d: {\n          e: true,\n          f: 'invalid'\n        }\n      }\n    });\n    invariant(result.type === 'success', 'should succeed to validate');\n    expect(result.warnings?.[0]?.path.toString()).toEqual('<root>.b.c');\n    expect(result.warnings?.[1]?.path.toString()).toEqual('<root>.b.d.f');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse value when undefined is provided","suites":["voidable"],"updatePoint":{"line":195,"column":61,"index":5795},"line":195,"code":"  it('should correctly parse value when undefined is provided', () => {\n    const coerce = voidable(string());\n    const result = coerce(undefined);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === undefined, 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse value when non-void value is provided","suites":["voidable"],"updatePoint":{"line":201,"column":66,"index":6082},"line":201,"code":"  it('should correctly parse value when non-void value is provided', () => {\n    const coerce = voidable(string());\n    const result = coerce('test');\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === 'test', 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse invalid","suites":["voidable"],"updatePoint":{"line":207,"column":36,"index":6333},"line":207,"code":"  it('should correctly parse invalid', () => {\n    const coerce = voidable(string());\n    const result = coerce(1);\n    invariant(result.type === 'failure', 'should fail');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should validate the value, but return undefined if invalid","suites":["voidable"],"updatePoint":{"line":212,"column":64,"index":6540},"line":212,"code":"  it('should validate the value, but return undefined if invalid', () => {\n    const coerce = voidable(string(), {\n      undefinedWithWarningWhenInvalid: true\n    });\n    const result = coerce(1);\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value === undefined, 'value should be true');\n    expect(result.warnings?.length).toBe(1);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should pass along warnings in child result","suites":["voidable"],"updatePoint":{"line":221,"column":48,"index":6899},"line":221,"code":"  it('should pass along warnings in child result', () => {\n    const coerce = object({\n      field: voidable(object({\n        child: voidable(string(), {\n          undefinedWithWarningWhenInvalid: true\n        })\n      }))\n    });\n    const result = coerce({\n      field: {\n        child: 1\n      }\n    });\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.warnings?.length).toBe(1);\n    const warning = result.warnings?.[0];\n    invariant(warning != null, 'should have warning');\n    expect(warning.path.toString()).toEqual('<root>.field.child');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly parse omitted voidable keys in object","suites":["voidable"],"updatePoint":{"line":240,"column":60,"index":7493},"line":240,"code":"  it('should correctly parse omitted voidable keys in object', () => {\n    const coerce = object({\n      description: voidable(string()),\n      title: string()\n    });\n    const result = coerce({\n      title: 'test'\n    });\n    invariant(result.type === 'success', 'should succeed');\n    invariant(result.value.title === 'test', 'value should be true');\n    invariant(result.value.description === undefined, 'value should be true');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"provide fallback value","suites":["withDefault"],"updatePoint":{"line":254,"column":28,"index":7936},"line":254,"code":"  it('provide fallback value', () => {\n    const coerce = coercion(withDefault(number(), 456));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce(123)).toEqual(123);\n    expect(coerce('str')).toEqual(null);\n    expect(coerce(null)).toEqual(456);\n    expect(coerce(undefined)).toEqual(456);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"values refined to null also fallback","suites":["withDefault"],"updatePoint":{"line":262,"column":42,"index":8255},"line":262,"code":"  it('values refined to null also fallback', () => {\n    const coerce = coercion(withDefault(asType(number(), () => null), 456));\n    expect(coerce(false)).toEqual(null);\n    expect(coerce(123)).toEqual(456);\n    expect(coerce('str')).toEqual(null);\n    expect(coerce(null)).toEqual(456);\n    expect(coerce(undefined)).toEqual(456);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"object with optional property with default","suites":["withDefault"],"updatePoint":{"line":270,"column":48,"index":8600},"line":270,"code":"  it('object with optional property with default', () => {\n    const coerce = coercion(object({\n      num: withDefault(number(), 456)\n    }));\n    expect(coerce({\n      num: 123\n    })).toEqual({\n      num: 123\n    });\n    expect(coerce({})).toEqual({\n      num: 456\n    });\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly fail values which do not pass predicate","suites":["constraint"],"updatePoint":{"line":285,"column":62,"index":8930},"line":285,"code":"  it('should correctly fail values which do not pass predicate', () => {\n    const evenNumber = constraint(number(), n => n % 2 === 0);\n    expect(evenNumber(2).type).toBe('success');\n    expect(evenNumber(1).type).toBe('failure');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should fail if underlying checker fails","suites":["constraint"],"updatePoint":{"line":290,"column":45,"index":9151},"line":290,"code":"  it('should fail if underlying checker fails', () => {\n    const evenNumber = constraint(number(), n => n % 2 === 0);\n    expect(evenNumber(true).type).toBe('failure');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly provide warning when checker passes but constraint does not","suites":["constraint"],"updatePoint":{"line":294,"column":82,"index":9364},"line":294,"code":"  it('should correctly provide warning when checker passes but constraint does not', () => {\n    const message = 'number is not even';\n    const evenNumber = constraint(number(), n => [n % 2 === 0, message]);\n    const result = evenNumber(1);\n    invariant(result.type === 'failure', 'should fail');\n    expect(result.message).toBe(message);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should successfully parse basic values","suites":["lazy"],"updatePoint":{"line":303,"column":44,"index":9703},"line":303,"code":"  it('should successfully parse basic values', () => {\n    const coerce = lazy(() => string());\n    const result = coerce('test');\n    invariant(result.type === 'success', 'should succeed');\n    expect(result.value).toBe('test');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should allow for recursive types","suites":["lazy"],"updatePoint":{"line":309,"column":38,"index":9933},"line":309,"code":"  it('should allow for recursive types', () => {\n    const user = object({\n      id: number(),\n      name: string(),\n      friends: nullable(array(lazy(() => user)))\n    });\n    const result = user({\n      id: 1,\n      name: 'a',\n      friends: [{\n        id: 2,\n        name: 'b'\n      }, {\n        id: 3,\n        name: 'c'\n      }]\n    });\n    invariant(result.type === 'success', 'should succeed'); // example for typechecking\n\n    const friendsNames = result.value.friends?.map(f => f.name);\n    expect(friendsNames).toEqual(['b', 'c']);\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should properly check using a custom function","suites":["custom"],"updatePoint":{"line":333,"column":51,"index":10525},"line":333,"code":"  it('should properly check using a custom function', () => {\n    const isOneOrTwo = v => v === 1 || v === 2 ? v : null;\n\n    const checkOneOrTwo = custom(isOneOrTwo);\n    const oneResult = checkOneOrTwo(1);\n    invariant(oneResult.type === 'success', 'should succeed');\n    const threeResult = checkOneOrTwo(3);\n    invariant(threeResult.type === 'failure', 'should fail');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"catch errors as failures","suites":["custom"],"updatePoint":{"line":342,"column":30,"index":10885},"line":342,"code":"  it('catch errors as failures', () => {\n    function userValidator() {\n      throw new Error('MY ERROR');\n    }\n\n    const result = custom(userValidator)();\n    invariant(result.type === 'failure', 'should fail');\n    expect(result.message).toEqual('MY ERROR');\n  });","file":"Refine_Utilities-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should not throw if value is valid","suites":["assertion"],"updatePoint":{"line":35,"column":40,"index":660},"line":35,"code":"  it('should not throw if value is valid', () => {\n    const assert = assertion(array(or(number(), string())));\n    const value = assert([1, '2', 3, 4]);\n    expect(value).toEqual([1, '2', 3, 4]);\n  });","file":"Refine-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should throw if value is invalid","suites":["assertion"],"updatePoint":{"line":40,"column":38,"index":861},"line":40,"code":"  it('should throw if value is invalid', () => {\n    const assert = assertion(array(or(number(), string())));\n    expect(() => assert([1, '2', true, 4])).toThrow();\n  });","file":"Refine-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should return a value when valid","suites":["coercion"],"updatePoint":{"line":46,"column":38,"index":1065},"line":46,"code":"  it('should return a value when valid', () => {\n    const coerce = coercion(date());\n    const d = new Date();\n    expect(coerce(d)).toBe(d);\n  });","file":"Refine-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should return null when invalid","suites":["coercion"],"updatePoint":{"line":51,"column":37,"index":1213},"line":51,"code":"  it('should return null when invalid', () => {\n    const coerce = coercion(number());\n    const d = new Date();\n    expect(coerce(d)).toBe(null);\n  });","file":"Refine-test.js","skipped":false,"dir":"packages/refine/__tests__"},{"name":"should correctly call calback with result","suites":["coercion"],"updatePoint":{"line":56,"column":47,"index":1376},"line":56,"code":"  it('should correctly call calback with result', () => {\n    let callbackResult = null;\n    const coerce = coercion(date(), result => {\n      callbackResult = result;\n    });\n    const d = new Date();\n    expect(coerce(d)).toBe(d);\n    invariant(callbackResult != null, 'should be set');\n    invariant(callbackResult.type == 'success', 'should succeed');\n  });","file":"Refine-test.js","skipped":false,"dir":"packages/refine/__tests__"}]}