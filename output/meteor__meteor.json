{
    "repo": "meteor/meteor",
    "url": "https://github.com/meteor/meteor",
    "branch": "devel",
    "configs": [
        {
            "package": "eslint-plugin-meteor",
            "lang": "js",
            "dir": "npm-packages/eslint-plugin-meteor/tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "@meteorjs/babel",
            "lang": "ts",
            "dir": "npm-packages/meteor-babel/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "meteor-promise",
            "lang": "js",
            "dir": "npm-packages/meteor-promise/test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "~name~",
            "lang": "js",
            "dir": "tools/static-assets/skel-apollo/tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "escmascript-regression",
            "lang": "js",
            "dir": "tools/tests/apps/ecmascript-regression/tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        },
        {
            "package": "git-commit-hash",
            "lang": "js",
            "dir": "tools/tests/apps/git-commit-hash/tests",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "should export ",
            "suites": [
                "all rule files should be exported by the plugin"
            ],
            "updatePoint": {
                "line": 15,
                "column": 33,
                "index": 435
            },
            "line": 15,
            "code": "    it(`should export ${ruleName}`, () => {\n      assert({}.hasOwnProperty.call(rules, ruleName));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "should have a recommended configuration for ",
            "suites": [
                "configurations"
            ],
            "updatePoint": {
                "line": 22,
                "column": 63,
                "index": 651
            },
            "line": 22,
            "code": "    it(`should have a recommended configuration for ${ruleName}`, () => {\n      assert({}.hasOwnProperty.call(configs.recommended.rules, `meteor/${ruleName}`));\n    });",
            "file": "index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns false if property type is not Literal or Identifier",
            "suites": [
                "getPropertyName"
            ],
            "updatePoint": {
                "line": 6,
                "column": 65,
                "index": 215
            },
            "line": 6,
            "code": "  it('returns false if property type is not Literal or Identifier', () => {\n    assert.equal(getPropertyName({\n      type: 'CallExpression'\n    }), false);\n  });",
            "file": "lib/util/ast/getPropertyName.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns the value if property type is of type Literal",
            "suites": [
                "getPropertyName"
            ],
            "updatePoint": {
                "line": 11,
                "column": 59,
                "index": 371
            },
            "line": 11,
            "code": "  it('returns the value if property type is of type Literal', () => {\n    assert.equal(getPropertyName({\n      type: 'Literal',\n      value: 'foo'\n    }), 'foo');\n  });",
            "file": "lib/util/ast/getPropertyName.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns the name if property type is of type Identifier",
            "suites": [
                "getPropertyName"
            ],
            "updatePoint": {
                "line": 17,
                "column": 61,
                "index": 542
            },
            "line": 17,
            "code": "  it('returns the name if property type is of type Identifier', () => {\n    assert.equal(getPropertyName({\n      type: 'Identifier',\n      name: 'foo'\n    }), 'foo');\n  });",
            "file": "lib/util/ast/getPropertyName.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "exports isMeteorCall",
            "suites": [
                "ast utils"
            ],
            "updatePoint": {
                "line": 6,
                "column": 26,
                "index": 153
            },
            "line": 6,
            "code": "  it('exports isMeteorCall', () => {\n    assert({}.hasOwnProperty.call(astUtils, 'isMeteorCall'));\n    assert.equal(typeof astUtils.isMeteorCall, 'function');\n  });",
            "file": "lib/util/ast/index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "exports isMeteorProp",
            "suites": [
                "ast utils"
            ],
            "updatePoint": {
                "line": 10,
                "column": 26,
                "index": 318
            },
            "line": 10,
            "code": "  it('exports isMeteorProp', () => {\n    assert({}.hasOwnProperty.call(astUtils, 'isMeteorProp'));\n    assert.equal(typeof astUtils.isMeteorProp, 'function');\n  });",
            "file": "lib/util/ast/index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "exports isTemplateProp",
            "suites": [
                "ast utils"
            ],
            "updatePoint": {
                "line": 14,
                "column": 28,
                "index": 485
            },
            "line": 14,
            "code": "  it('exports isTemplateProp', () => {\n    assert({}.hasOwnProperty.call(astUtils, 'isTemplateProp'));\n    assert.equal(typeof astUtils.isTemplateProp, 'function');\n  });",
            "file": "lib/util/ast/index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "exports isFunction",
            "suites": [
                "ast utils"
            ],
            "updatePoint": {
                "line": 18,
                "column": 24,
                "index": 652
            },
            "line": 18,
            "code": "  it('exports isFunction', () => {\n    assert({}.hasOwnProperty.call(astUtils, 'isFunction'));\n    assert.equal(typeof astUtils.isFunction, 'function');\n  });",
            "file": "lib/util/ast/index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "exports getPropertyName",
            "suites": [
                "ast utils"
            ],
            "updatePoint": {
                "line": 22,
                "column": 29,
                "index": 816
            },
            "line": 22,
            "code": "  it('exports getPropertyName', () => {\n    assert({}.hasOwnProperty.call(astUtils, 'getPropertyName'));\n    assert.equal(typeof astUtils.getPropertyName, 'function');\n  });",
            "file": "lib/util/ast/index.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns true if node is a Meteor call",
            "suites": [
                "isMeteorCall"
            ],
            "updatePoint": {
                "line": 6,
                "column": 43,
                "index": 184
            },
            "line": 6,
            "code": "  it('returns true if node is a Meteor call', () => {\n    assert.equal(isMeteorCall({\n      type: 'CallExpression',\n      callee: {\n        type: 'MemberExpression',\n        computed: false,\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'foo'\n        }\n      }\n    }, 'foo'), true);\n  });",
            "file": "lib/util/ast/isMeteorCall.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "filters on MemberExpression for isClient",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 6,
                "column": 46,
                "index": 235
            },
            "line": 6,
            "code": "  it('filters on MemberExpression for isClient', () => {\n    const consequent = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['browser', 'server']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isClient'\n        }\n      },\n      consequent\n    }, consequent]);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('browser'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "filters on MemberExpression for else-block of isClient",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 30,
                "column": 60,
                "index": 850
            },
            "line": 30,
            "code": "  it('filters on MemberExpression for else-block of isClient', () => {\n    const alternate = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['browser', 'server']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isClient'\n        }\n      },\n      alternate\n    }, alternate]);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('server'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "warns on hierarchical error",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 54,
                "column": 33,
                "index": 1434
            },
            "line": 54,
            "code": "  it('warns on hierarchical error', () => {\n    assert.throws(() => {\n      const consequent = {\n        type: 'BlockStatement'\n      };\n      filterExecutorsByAncestors(new Set(['browser', 'server']), [{\n        type: 'Program'\n      }, {\n        type: 'IfStatement',\n        test: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        }\n      }, consequent]);\n    });\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "filters on MemberExpression for isServer",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 77,
                "column": 46,
                "index": 2002
            },
            "line": 77,
            "code": "  it('filters on MemberExpression for isServer', () => {\n    const consequent = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['server', 'cordova']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isServer'\n        }\n      },\n      consequent\n    }, consequent]);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('server'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "filters on MemberExpression for isCordova",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 101,
                "column": 47,
                "index": 2603
            },
            "line": 101,
            "code": "  it('filters on MemberExpression for isCordova', () => {\n    const consequent = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['browser', 'cordova']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isCordova'\n        }\n      },\n      consequent\n    }, consequent]);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('cordova'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "filters on UnaryExpression",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 125,
                "column": 32,
                "index": 3192
            },
            "line": 125,
            "code": "  it('filters on UnaryExpression', () => {\n    const consequent = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['browser', 'server', 'cordova']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        argument: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        }\n      },\n      consequent\n    }, consequent]);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('server'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "ignores unresolvable IfStatements is in ancestors",
            "suites": [
                "filterExecutorsByAncestors"
            ],
            "updatePoint": {
                "line": 153,
                "column": 55,
                "index": 3916
            },
            "line": 153,
            "code": "  it('ignores unresolvable IfStatements is in ancestors', () => {\n    const consequent = {\n      type: 'BlockStatement'\n    };\n    const result = filterExecutorsByAncestors(new Set(['browser', 'server']), [{\n      type: 'Program'\n    }, {\n      type: 'IfStatement',\n      test: {\n        type: 'Identifier'\n      },\n      consequent\n    }, consequent]);\n    assert.equal(result.size, 2);\n    assert.ok(result.has('browser'));\n    assert.ok(result.has('server'));\n  });",
            "file": "lib/util/executors/filterExecutorsByAncestors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns executors for no ancestors",
            "suites": [
                "getExecutors"
            ],
            "updatePoint": {
                "line": 10,
                "column": 40,
                "index": 257
            },
            "line": 10,
            "code": "  it('returns executors for no ancestors', () => {\n    const result = getExecutors(UNIVERSAL, []);\n    assert.equal(result.size, 3);\n    assert.ok(result.has('server'));\n    assert.ok(result.has('browser'));\n    assert.ok(result.has('cordova'));\n  });",
            "file": "lib/util/executors/getExecutors.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "public",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 21,
                "column": 12,
                "index": 385
            },
            "line": 21,
            "code": "  it('public', () => {\n    const result = getExecutorsByEnv(PUBLIC);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "private",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 25,
                "column": 13,
                "index": 495
            },
            "line": 25,
            "code": "  it('private', () => {\n    const result = getExecutorsByEnv(PRIVATE);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "client",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 29,
                "column": 12,
                "index": 605
            },
            "line": 29,
            "code": "  it('client', () => {\n    const result = getExecutorsByEnv(CLIENT);\n    assert.equal(result.size, 2);\n    assert.ok(result.has('browser'));\n    assert.ok(result.has('cordova'));\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "server",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 35,
                "column": 12,
                "index": 790
            },
            "line": 35,
            "code": "  it('server', () => {\n    const result = getExecutorsByEnv(SERVER);\n    assert.equal(result.size, 1);\n    assert.ok(result.has('server'));\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "package",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 40,
                "column": 13,
                "index": 937
            },
            "line": 40,
            "code": "  it('package', () => {\n    const result = getExecutorsByEnv(PACKAGE);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "test",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 44,
                "column": 10,
                "index": 1045
            },
            "line": 44,
            "code": "  it('test', () => {\n    const result = getExecutorsByEnv(TEST);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "node_module",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 48,
                "column": 17,
                "index": 1157
            },
            "line": 48,
            "code": "  it('node_module', () => {\n    const result = getExecutorsByEnv(NODE_MODULE);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "universal",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 52,
                "column": 15,
                "index": 1274
            },
            "line": 52,
            "code": "  it('universal', () => {\n    const result = getExecutorsByEnv(UNIVERSAL);\n    assert.equal(result.size, 3);\n    assert.ok(result.has('browser'));\n    assert.ok(result.has('server'));\n    assert.ok(result.has('cordova'));\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "packageConfig",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 59,
                "column": 19,
                "index": 1506
            },
            "line": 59,
            "code": "  it('packageConfig', () => {\n    const result = getExecutorsByEnv(PACKAGE_CONFIG);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "mobileConfig",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 63,
                "column": 18,
                "index": 1629
            },
            "line": 63,
            "code": "  it('mobileConfig', () => {\n    const result = getExecutorsByEnv(MOBILE_CONFIG);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "compatibility",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 67,
                "column": 19,
                "index": 1752
            },
            "line": 67,
            "code": "  it('compatibility', () => {\n    const result = getExecutorsByEnv(COMPATIBILITY);\n    assert.equal(result.size, 2);\n    assert.ok(result.has('cordova'));\n    assert.ok(result.has('browser'));\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "nonMeteor",
            "suites": [
                "getExecutorsByEnv"
            ],
            "updatePoint": {
                "line": 73,
                "column": 15,
                "index": 1947
            },
            "line": 73,
            "code": "  it('nonMeteor', () => {\n    const result = getExecutorsByEnv(NON_METEOR);\n    assert.equal(result.size, 0);\n  });",
            "file": "lib/util/executors/getExecutorsByEnv.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "throws for unkown type",
            "suites": [
                "getExecutorsFromTest"
            ],
            "updatePoint": {
                "line": 6,
                "column": 28,
                "index": 199
            },
            "line": 6,
            "code": "  it('throws for unkown type', () => {\n    assert.throws(() => {\n      getExecutorsFromTest({\n        type: 'Identifier',\n        name: 'Meteor'\n      });\n    });\n  });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "isClient",
            "suites": [
                "getExecutorsFromTest",
                "MemberExpression"
            ],
            "updatePoint": {
                "line": 15,
                "column": 16,
                "index": 395
            },
            "line": 15,
            "code": "    it('isClient', () => {\n      const result = getExecutorsFromTest({\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isClient'\n        }\n      });\n      assert.equal(result.size, 2);\n      assert.ok(result.has('browser'));\n      assert.ok(result.has('cordova'));\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "isServer",
            "suites": [
                "getExecutorsFromTest",
                "MemberExpression"
            ],
            "updatePoint": {
                "line": 31,
                "column": 16,
                "index": 805
            },
            "line": 31,
            "code": "    it('isServer', () => {\n      const result = getExecutorsFromTest({\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isServer'\n        }\n      });\n      assert.equal(result.size, 1);\n      assert.ok(result.has('server'));\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "isCordova",
            "suites": [
                "getExecutorsFromTest",
                "MemberExpression"
            ],
            "updatePoint": {
                "line": 46,
                "column": 17,
                "index": 1175
            },
            "line": 46,
            "code": "    it('isCordova', () => {\n      const result = getExecutorsFromTest({\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isCordova'\n        }\n      });\n      assert.equal(result.size, 1);\n      assert.ok(result.has('cordova'));\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "throws on unkown Meteor prop",
            "suites": [
                "getExecutorsFromTest",
                "MemberExpression"
            ],
            "updatePoint": {
                "line": 61,
                "column": 36,
                "index": 1566
            },
            "line": 61,
            "code": "    it('throws on unkown Meteor prop', () => {\n      assert.throws(() => {\n        getExecutorsFromTest({\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isNotAMeteorProp'\n          }\n        });\n      });\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "resolves isServer AND isClient",
            "suites": [
                "getExecutorsFromTest",
                "LogicalExpression"
            ],
            "updatePoint": {
                "line": 78,
                "column": 38,
                "index": 1981
            },
            "line": 78,
            "code": "    it('resolves isServer AND isClient', () => {\n      const result = getExecutorsFromTest({\n        type: 'LogicalExpression',\n        operator: '&&',\n        left: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isServer'\n          }\n        },\n        right: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        }\n      });\n      assert.equal(result.size, 0);\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "resolves isServer OR isClient",
            "suites": [
                "getExecutorsFromTest",
                "LogicalExpression"
            ],
            "updatePoint": {
                "line": 107,
                "column": 37,
                "index": 2686
            },
            "line": 107,
            "code": "    it('resolves isServer OR isClient', () => {\n      const result = getExecutorsFromTest({\n        type: 'LogicalExpression',\n        operator: '||',\n        left: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isServer'\n          }\n        },\n        right: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        }\n      });\n      assert.equal(result.size, 3);\n      assert.ok(result.has('browser'));\n      assert.ok(result.has('server'));\n      assert.ok(result.has('cordova'));\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "throws for unkown operator in LogicalExpression",
            "suites": [
                "getExecutorsFromTest",
                "LogicalExpression"
            ],
            "updatePoint": {
                "line": 139,
                "column": 55,
                "index": 3528
            },
            "line": 139,
            "code": "    it('throws for unkown operator in LogicalExpression', () => {\n      assert.throws(() => {\n        getExecutorsFromTest({\n          type: 'LogicalExpression',\n          operator: 'XY',\n          left: {},\n          right: {}\n        });\n      });\n    });",
            "file": "lib/util/executors/getExecutorsFromTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "accepts a valid MemberExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 6,
                "column": 38,
                "index": 212
            },
            "line": 6,
            "code": "  it('accepts a valid MemberExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'MemberExpression',\n      object: {\n        type: 'Identifier',\n        name: 'Meteor'\n      },\n      property: {\n        type: 'Identifier',\n        name: 'isClient'\n      }\n    });\n    assert.ok(result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "accepts a valid computed MemberExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 20,
                "column": 47,
                "index": 537
            },
            "line": 20,
            "code": "  it('accepts a valid computed MemberExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'MemberExpression',\n      computed: true,\n      object: {\n        type: 'Identifier',\n        name: 'Meteor'\n      },\n      property: {\n        type: 'Literal',\n        value: 'isCordova'\n      }\n    });\n    assert.ok(result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "does not accept an invalid MemberExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 35,
                "column": 49,
                "index": 885
            },
            "line": 35,
            "code": "  it('does not accept an invalid MemberExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'MemberExpression',\n      object: {\n        type: 'Identifier',\n        name: 'Foo'\n      },\n      property: {\n        type: 'Identifier',\n        name: 'isClient'\n      }\n    });\n    assert.ok(!result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "accepts a valid UnaryExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 49,
                "column": 37,
                "index": 1198
            },
            "line": 49,
            "code": "  it('accepts a valid UnaryExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'UnaryExpression',\n      operator: '!',\n      argument: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isServer'\n        }\n      }\n    });\n    assert.ok(result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "does not accept an invalid UnaryExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 67,
                "column": 48,
                "index": 1620
            },
            "line": 67,
            "code": "  it('does not accept an invalid UnaryExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'UnaryExpression',\n      operator: '!',\n      argument: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Foo'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isClient'\n        }\n      }\n    });\n    assert.ok(!result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "accepts a valid LogicalExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 85,
                "column": 39,
                "index": 2031
            },
            "line": 85,
            "code": "  it('accepts a valid LogicalExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'LogicalExpression',\n      operator: '||',\n      left: {\n        type: 'LogicalExpression',\n        operator: '&&',\n        left: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        },\n        right: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isServer'\n          }\n        }\n      },\n      right: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isCordova'\n        }\n      }\n    });\n    assert.ok(result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "does not accept an invalid LogicalExpression",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 129,
                "column": 50,
                "index": 3038
            },
            "line": 129,
            "code": "  it('does not accept an invalid LogicalExpression', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'LogicalExpression',\n      operator: '||',\n      left: {\n        type: 'LogicalExpression',\n        operator: '&&',\n        left: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Foo'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isClient'\n          }\n        },\n        right: {\n          type: 'MemberExpression',\n          object: {\n            type: 'Identifier',\n            name: 'Meteor'\n          },\n          property: {\n            type: 'Identifier',\n            name: 'isServer'\n          }\n        }\n      },\n      right: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Meteor'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isCordova'\n        }\n      }\n    });\n    assert.ok(!result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns false for unresolvable expressions",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 173,
                "column": 48,
                "index": 4041
            },
            "line": 173,
            "code": "  it('returns false for unresolvable expressions', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'Identifier'\n    });\n    assert.ok(!result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns false for invalid unary expressions",
            "suites": [
                "isMeteorBlockOnlyTest"
            ],
            "updatePoint": {
                "line": 179,
                "column": 49,
                "index": 4207
            },
            "line": 179,
            "code": "  it('returns false for invalid unary expressions', () => {\n    const result = isMeteorBlockOnlyTest({\n      type: 'UnaryExpression',\n      operator: '-',\n      argument: {\n        type: 'MemberExpression',\n        object: {\n          type: 'Identifier',\n          name: 'Foo'\n        },\n        property: {\n          type: 'Identifier',\n          name: 'isClient'\n        }\n      }\n    });\n    assert.ok(!result);\n  });",
            "file": "lib/util/executors/isMeteorBlockOnlyTest.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "unifies two sets",
            "suites": [
                "executors",
                "union"
            ],
            "updatePoint": {
                "line": 11,
                "column": 24,
                "index": 217
            },
            "line": 11,
            "code": "    it('unifies two sets', () => {\n      const result = union(new Set(['cordova']), new Set(['client', 'server']));\n      assert.equal(result.size, 3);\n      assert.ok(result.has('client'));\n      assert.ok(result.has('cordova'));\n      assert.ok(result.has('server'));\n    });",
            "file": "lib/util/executors/sets.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns the difference when b contains nothing from a",
            "suites": [
                "executors",
                "difference"
            ],
            "updatePoint": {
                "line": 20,
                "column": 61,
                "index": 571
            },
            "line": 20,
            "code": "    it('returns the difference when b contains nothing from a', () => {\n      const result = difference(new Set(['cordova']), new Set(['client', 'server']));\n      assert.equal(result.size, 1);\n      assert.ok(result.has('cordova'));\n    });",
            "file": "lib/util/executors/sets.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns the difference when b contains one value from a",
            "suites": [
                "executors",
                "difference"
            ],
            "updatePoint": {
                "line": 25,
                "column": 63,
                "index": 815
            },
            "line": 25,
            "code": "    it('returns the difference when b contains one value from a', () => {\n      const result = difference(new Set(['client', 'cordova']), new Set(['client', 'server']));\n      assert.equal(result.size, 1);\n      assert.ok(result.has('cordova'));\n    });",
            "file": "lib/util/executors/sets.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        },
        {
            "name": "returns the intersection",
            "suites": [
                "executors",
                "intersection"
            ],
            "updatePoint": {
                "line": 32,
                "column": 32,
                "index": 1079
            },
            "line": 32,
            "code": "    it('returns the intersection', () => {\n      const result = intersection(new Set(['client', 'cordova']), new Set(['client', 'server']));\n      assert.equal(result.size, 1);\n      assert.ok(result.has('client'));\n    });",
            "file": "lib/util/executors/sets.js",
            "skipped": false,
            "dir": "npm-packages/eslint-plugin-meteor/tests"
        }
    ],
    "error": "Cannot read properties of undefined (reading 'file')"
}