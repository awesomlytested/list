{
    "repo": "easy-mock/easy-mock",
    "url": "https://github.com/easy-mock/easy-mock",
    "branch": "dev",
    "configs": [
        {
            "package": "easy-mock",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "获取数据",
            "suites": [
                "test/controllers/dashboard.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 15,
                "column": 14
            },
            "line": 15,
            "code": "    test('获取数据', async () => {\n      const res = await request('/api/dashboard');\n      expect(res.body.data).toMatchObject({\n        total: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        },\n        today: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        }\n      });\n    });",
            "file": "controllers/dashboard.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "获取缓存数据",
            "suites": [
                "test/controllers/dashboard.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 32,
                "column": 16
            },
            "line": 32,
            "code": "    test('获取缓存数据', async () => {\n      const res = await request('/api/dashboard');\n      expect(res.body.data).toMatchObject({\n        total: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        },\n        today: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        }\n      });\n    });",
            "file": "controllers/dashboard.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/group.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 16,
                "column": 14
            },
            "line": 16,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/group/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "创建团队",
            "suites": [
                "test/controllers/group.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 20,
                "column": 14
            },
            "line": 20,
            "code": "    test('创建团队', async () => {\n      const res = await request('/api/group/create', 'post').send({\n        name: 'dasouche'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "重复创建",
            "suites": [
                "test/controllers/group.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 26,
                "column": 14
            },
            "line": 26,
            "code": "    test('重复创建', async () => {\n      const res = await request('/api/group/create', 'post').send({\n        name: 'dasouche'\n      });\n      expect(res.body.message).toBe('团队 dasouche 已存在');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/group.test.js",
                "join"
            ],
            "updatePoint": {
                "line": 34,
                "column": 14
            },
            "line": 34,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/group/join', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "加入团队",
            "suites": [
                "test/controllers/group.test.js",
                "join"
            ],
            "updatePoint": {
                "line": 38,
                "column": 14
            },
            "line": 38,
            "code": "    test('加入团队', async () => {\n      await request('/api/group/create', 'post', soucheUser.token).send({\n        name: 'souche'\n      });\n      const groupId = await request('/api/group').query({\n        keywords: 'souche'\n      }).then(res => res.body.data[0]._id);\n      await request('/api/project/create', 'post', soucheUser.token).send({\n        group: groupId,\n        name: 'user',\n        url: '/user'\n      });\n      let res = await request('/api/group/join', 'post').send({\n        id: groupId\n      });\n      expect(res.body.success).toBe(true);\n      res = await request('/api/project').query({\n        group: groupId\n      });\n      res = await request('/api/project/update_workbench', 'post').send({\n        id: res.body.data[0].extend._id,\n        status: true\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "我加入的团队",
            "suites": [
                "test/controllers/group.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 65,
                "column": 16
            },
            "line": 65,
            "code": "    test('我加入的团队', async () => {\n      const res = await request('/api/group');\n      const data = res.body.data;\n      expect(data).toHaveLength(2);\n      expect(data[0].name).toBe('dasouche');\n      expect(data[1].name).toBe('souche');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "搜索团队",
            "suites": [
                "test/controllers/group.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 72,
                "column": 14
            },
            "line": 72,
            "code": "    test('搜索团队', async () => {\n      let res = await request('/api/group').query({\n        keywords: 'dasouched'\n      });\n      expect(res.body.data).toHaveLength(0);\n      res = await request('/api/group').query({\n        keywords: 'dasouche'\n      });\n      expect(res.body.data).toHaveLength(1);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/group.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 84,
                "column": 14
            },
            "line": 84,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/group/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "更新我加入团队的信息",
            "suites": [
                "test/controllers/group.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 88,
                "column": 20
            },
            "line": 88,
            "code": "    test('更新我加入团队的信息', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[1]._id,\n        name: 'souche2'\n      });\n      expect(res.body.message).toBe('非团队创建者无法更新团队信息');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "团队重名",
            "suites": [
                "test/controllers/group.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 96,
                "column": 14
            },
            "line": 96,
            "code": "    test('团队重名', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'souche'\n      });\n      expect(res.body.message).toBe('团队 souche 已存在');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "更新我创建团队的信息",
            "suites": [
                "test/controllers/group.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 104,
                "column": 20
            },
            "line": 104,
            "code": "    test('更新我创建团队的信息', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'souche2'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/group.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 114,
                "column": 14
            },
            "line": 114,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/group/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "离开团队",
            "suites": [
                "test/controllers/group.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 118,
                "column": 14
            },
            "line": 118,
            "code": "    test('离开团队', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/delete', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "解散团队",
            "suites": [
                "test/controllers/group.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 125,
                "column": 14
            },
            "line": 125,
            "code": "    test('解散团队', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/delete', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "解散团队前请先删除该团队下所有的项目",
            "suites": [
                "test/controllers/group.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 132,
                "column": 28
            },
            "line": 132,
            "code": "    test('解散团队前请先删除该团队下所有的项目', async () => {\n      let res = await request('/api/group', 'get', soucheUser.token);\n      await request('/api/project/create', 'post', soucheUser.token).send({\n        group: res.body.data[0]._id,\n        name: 'example',\n        url: '/example'\n      });\n      res = await request('/api/group/delete', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('解散团队前请先删除该团队下所有的项目');\n    });",
            "file": "controllers/group.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 27,
                "column": 14
            },
            "line": 27,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/mock/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 31,
                "column": 15
            },
            "line": 31,
            "code": "    test('无权限操作', async () => {\n      const res = await request('/api/mock/create', 'post', soucheUser.token).send({\n        project_id: project._id,\n        url: '/demo',\n        mode: '{}',\n        method: 'get',\n        description: 'demo'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "请检查接口是否已经存在",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 41,
                "column": 21
            },
            "line": 41,
            "code": "    test('请检查接口是否已经存在', async () => {\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: project._id,\n        url: '/mock',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('请检查接口是否已经存在');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "创建个人项目接口",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 51,
                "column": 18
            },
            "line": 51,
            "code": "    test('创建个人项目接口', async () => {\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: project._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "创建团队项目接口",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 61,
                "column": 18
            },
            "line": 61,
            "code": "    test('创建团队项目接口', async () => {\n      await request('/api/group/create', 'post').send({\n        name: 'souche'\n      });\n      const group = await request('/api/group').then(res => res.body.data[0]);\n      await request('/api/project/create', 'post').send({\n        group: group._id,\n        name: 'demo',\n        url: '/demo'\n      });\n      const newProject = await request('/api/project').query({\n        group: group._id\n      }).then(res => res.body.data[0]);\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: newProject._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "非团队成员无法创建团队项目接口",
            "suites": [
                "test/controllers/mock.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 83,
                "column": 25
            },
            "line": 83,
            "code": "    test('非团队成员无法创建团队项目接口', async () => {\n      const group = await request('/api/group').then(res => res.body.data[0]);\n      const newProject = await request('/api/project').query({\n        group: group._id\n      }).then(res => res.body.data[0]);\n      const res = await request('/api/mock/create', 'post', soucheUser.token).send({\n        project_id: newProject._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 99,
                "column": 14
            },
            "line": 99,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/mock/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "接口不存在",
            "suites": [
                "test/controllers/mock.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 103,
                "column": 15
            },
            "line": 103,
            "code": "    test('接口不存在', async () => {\n      const res = await request('/api/mock/update', 'post').send({\n        id: '111111111111111111111111',\n        url: '/demo',\n        mode: '{}',\n        method: 'get',\n        description: 'demo'\n      });\n      expect(res.body.message).toBe('接口不存在');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/mock.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 113,
                "column": 15
            },
            "line": 113,
            "code": "    test('无权限操作', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post', soucheUser.token).send({\n        id: res.body.data.mocks[0]._id,\n        url: '/mock',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "接口已经存在",
            "suites": [
                "test/controllers/mock.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 126,
                "column": 16
            },
            "line": 126,
            "code": "    test('接口已经存在', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post').send({\n        id: res.body.data.mocks[0]._id,\n        url: '/proxy',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('接口已经存在');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "更新接口",
            "suites": [
                "test/controllers/mock.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 139,
                "column": 14
            },
            "line": 139,
            "code": "    test('更新接口', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post').send({\n        id: res.body.data.mocks[0]._id,\n        url: '/mock2',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 154,
                "column": 14
            },
            "line": 154,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/mock');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "搜索",
            "suites": [
                "test/controllers/mock.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 158,
                "column": 12
            },
            "line": 158,
            "code": "    test('搜索', async () => {\n      const res = await request('/api/mock').query({\n        project_id: project._id,\n        keywords: '/proxy'\n      });\n      const data = res.body.data;\n      expect(data.project.name).toBe('演示项目');\n      expect(data.project.url).toBe('/example');\n      expect(data.mocks).toHaveLength(1);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "获取接口列表",
            "suites": [
                "test/controllers/mock.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 168,
                "column": 16
            },
            "line": 168,
            "code": "    test('获取接口列表', async () => {\n      let res = await request('/api/project/create', 'post').send({\n        name: 'souche',\n        url: '/souche',\n        members: [soucheUser._id]\n      });\n      const newProject = await request('/api/project').then(res => res.body.data[0]);\n      await request('/api/mock/create', 'post').send({\n        project_id: newProject._id,\n        url: '/mock',\n        mode: '{}',\n        description: 'mock',\n        method: 'get'\n      });\n      res = await request('/api/mock').query({\n        project_id: newProject._id\n      });\n      const data = res.body.data;\n      expect(data.project.name).toBe('souche');\n      expect(data.project.url).toBe('/souche');\n      expect(data.mocks).toHaveLength(1);\n      expect(data.mocks[0].url).toBe('/mock');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目不存在",
            "suites": [
                "test/controllers/mock.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 191,
                "column": 15
            },
            "line": 191,
            "code": "    test('项目不存在', async () => {\n      const res = await request('/api/mock').query({\n        project_id: '111111111111111111111111'\n      });\n      const data = res.body.data;\n      expect(data.project).toEqual({});\n      expect(data.mocks).toHaveLength(0);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "getAPIByProjectIds"
            ],
            "updatePoint": {
                "line": 201,
                "column": 14
            },
            "line": 201,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/mock/by_projects');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "获取接口列表",
            "suites": [
                "test/controllers/mock.test.js",
                "getAPIByProjectIds"
            ],
            "updatePoint": {
                "line": 205,
                "column": 16
            },
            "line": 205,
            "code": "    test('获取接口列表', async () => {\n      const newProject = await request('/api/project').then(res => res.body.data[0]);\n      const res = await request('/api/mock/by_projects').query({\n        project_ids: newProject._id\n      });\n      const data = res.body.data;\n      expect(data[newProject._id].project.name).toBe('souche');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "exportAPI"
            ],
            "updatePoint": {
                "line": 215,
                "column": 14
            },
            "line": 215,
            "code": "    test('参数验证', async () => {\n      let res = await request('/api/mock/export', 'post');\n      expect(res.body.message).toBe('参数不能为空');\n      res = await request('/api/mock/export', 'post').send({\n        ids: '1'\n      });\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "没有可导出的接口",
            "suites": [
                "test/controllers/mock.test.js",
                "exportAPI"
            ],
            "updatePoint": {
                "line": 223,
                "column": 18
            },
            "line": 223,
            "code": "    test('没有可导出的接口', async () => {\n      const res = await request('/api/mock/export', 'post').send({\n        project_id: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('没有可导出的接口');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "导出项目",
            "suites": [
                "test/controllers/mock.test.js",
                "exportAPI"
            ],
            "updatePoint": {
                "line": 229,
                "column": 14
            },
            "line": 229,
            "code": "    test('导出项目', done => {\n      const req = request('/api/mock/export', 'post').send({\n        project_id: project._id\n      }).buffer(false);\n      req.end((err, res) => {\n        if (err) return done(err);\n        let trackEndEvent = 0;\n        let trackCloseEvent = 0;\n        res.on('end', () => {\n          trackEndEvent++;\n          expect(trackEndEvent).toBe(1);\n          expect(trackCloseEvent).toBe(0);\n          done();\n        });\n        res.on('close', () => {\n          trackCloseEvent++;\n        });\n      });\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "导出选定接口",
            "suites": [
                "test/controllers/mock.test.js",
                "exportAPI"
            ],
            "updatePoint": {
                "line": 248,
                "column": 16
            },
            "line": 248,
            "code": "    test('导出选定接口', async done => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      const req = request('/api/mock/export', 'post').send({\n        ids: apis.map(api => api._id)\n      }).buffer(false);\n      req.end((err, res) => {\n        if (err) return done(err);\n        let trackEndEvent = 0;\n        let trackCloseEvent = 0;\n        res.on('end', () => {\n          trackEndEvent++;\n          expect(trackEndEvent).toBe(1);\n          expect(trackCloseEvent).toBe(0);\n          done();\n        });\n        res.on('close', () => {\n          trackCloseEvent++;\n        });\n      });\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "404",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 276,
                "column": 13
            },
            "line": 276,
            "code": "    test('404', async () => {\n      await request('/mock').expect(404);\n      await request('/mock/api/user').expect(404);\n      await request('/mock/111111111111111111111111/').expect(404);\n      await request('/mock/111111111111111111111111/user').expect(404);\n      await request(`/mock/${project._id}/ttest`).expect(404);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "接口请求频率太快，已被限制访问",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 283,
                "column": 25
            },
            "line": 283,
            "code": "    test('接口请求频率太快，已被限制访问', async () => {\n      const res = await request('/mock/222222222233333333331212/user');\n      expect(res.body.message).toBe('接口请求频率太快，已被限制访问');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 287,
                "column": 11
            },
            "line": 287,
            "code": "    test('/', async () => {\n      const res = await request(getMockURL('/')).expect(400);\n      expect(res.headers.power).toBe('easy-mock');\n      expect(res.body.success).toBe(false);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/proxy",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 292,
                "column": 16
            },
            "line": 292,
            "code": "    test('/proxy', async () => {\n      let res = await request(getMockURL('/proxy'));\n      expect(res.body).toEqual({\n        sucess: true,\n        data: {\n          proxy: true\n        }\n      });\n      res = await request(getMockURL('/proxy'));\n      expect(res.body.message).toBe('time out');\n      res = await request(getMockURL('/proxy'));\n      expect(res.body.message).toBe('接口请求失败');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/query",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 305,
                "column": 16
            },
            "line": 305,
            "code": "    test('/query', async () => {\n      const res = await request(getMockURL('/query?name=hh'));\n      expect(res.body.data.name).toEqual('hh');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jsonp",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 309,
                "column": 15
            },
            "line": 309,
            "code": "    test('jsonp', async () => {\n      const res = await request(getMockURL('/mock')).query({\n        jsonp_param_name: 'callback'\n      });\n\n      const callback = json => json; // eslint-disable-line\n\n\n      const data = eval(res.text); // eslint-disable-line\n\n      expect(data.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/mock",
            "suites": [
                "test/controllers/mock.test.js",
                "getMockAPI"
            ],
            "updatePoint": {
                "line": 321,
                "column": 15
            },
            "line": 321,
            "code": "    test('/mock', async () => {\n      await request('/api/project/update', 'post').send({\n        id: project._id,\n        name: project.name,\n        url: '/'\n      });\n      const res = await request('/mock/' + project._id + '/mock');\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/mock.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 332,
                "column": 14
            },
            "line": 332,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/mock/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/mock.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 336,
                "column": 15
            },
            "line": 336,
            "code": "    test('无权限操作', async () => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      let res = await request('/api/mock/delete', 'post').send({\n        project_id: '111111111111111111111111',\n        ids: ['111111111111111111111111']\n      });\n      expect(res.body.message).toBe('项目不存在');\n      res = await request('/api/mock/delete', 'post', soucheUser.token).send({\n        project_id: project._id,\n        ids: apis.map(api => api._id)\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "删除接口",
            "suites": [
                "test/controllers/mock.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 351,
                "column": 14
            },
            "line": 351,
            "code": "    test('删除接口', async () => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      const res = await request('/api/mock/delete', 'post').send({\n        project_id: project._id,\n        ids: apis.map(api => api._id)\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/mock.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 29,
                "column": 14
            },
            "line": 29,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目成员不能包含自己",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 33,
                "column": 20
            },
            "line": 33,
            "code": "    test('项目成员不能包含自己', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'example',\n        url: '/example',\n        members: [user._id]\n      });\n      expect(res.body.message).toBe('项目成员不能包含自己');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 41,
                "column": 15
            },
            "line": 41,
            "code": "    test('无权限操作', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'example',\n        url: '/example',\n        group: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目已存在",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 49,
                "column": 15
            },
            "line": 49,
            "code": "    test('项目已存在', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: '演示项目',\n        url: '/example',\n        description: 'example'\n      });\n      expect(res.body.message).toBe('项目 演示项目 已存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "请检查 URL 是否已经存在",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 57,
                "column": 24
            },
            "line": 57,
            "code": "    test('请检查 URL 是否已经存在', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: '演示项目2',\n        url: '/example',\n        description: 'example'\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "创建项目",
            "suites": [
                "test/controllers/project.test.js",
                "create"
            ],
            "updatePoint": {
                "line": 65,
                "column": 14
            },
            "line": 65,
            "code": "    test('创建项目', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'demo',\n        url: '/demo',\n        description: 'demo',\n        members: [soucheUser._id],\n        swagger_url: 'http://localhost:7400'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 77,
                "column": 14
            },
            "line": 77,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/copy', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目不存在",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 81,
                "column": 15
            },
            "line": 81,
            "code": "    test('项目不存在', async () => {\n      const res = await request('/api/project/copy', 'post').send({\n        id: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('项目不存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "复制项目",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 87,
                "column": 14
            },
            "line": 87,
            "code": "    test('复制项目', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/copy', 'post').send({\n        id: res.body.data[1]._id\n      });\n      res = await request('/api/project');\n      const data = res.body.data;\n      expect(data).toHaveLength(3);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目已存在",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 98,
                "column": 15
            },
            "line": 98,
            "code": "    test('项目已存在', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/copy', 'post').send({\n        id: res.body.data[2]._id\n      });\n      expect(res.body.message).toBe('项目 演示项目_copy 已存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "URL 已存在",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 105,
                "column": 17
            },
            "line": 105,
            "code": "    test('URL 已存在', async () => {\n      const projects = await request('/api/project').then(res => res.body.data);\n      await request('/api/project/update', 'post').send({\n        id: projects[0]._id,\n        name: 'copy_演示项目',\n        url: projects[0].url\n      });\n      const res = await request('/api/project/copy', 'post').send({\n        id: projects[2]._id\n      });\n      await request('/api/project/update', 'post').send({\n        id: projects[0]._id,\n        name: '演示项目_copy',\n        url: projects[0].url\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "该项目无接口可复制",
            "suites": [
                "test/controllers/project.test.js",
                "copy"
            ],
            "updatePoint": {
                "line": 122,
                "column": 19
            },
            "line": 122,
            "code": "    test('该项目无接口可复制', async () => {\n      let res = await request('/api/project/create', 'post').send({\n        name: 'empty',\n        url: '/empty',\n        description: 'empty'\n      });\n      const projects = await request('/api/project').then(res => res.body.data);\n      res = await request('/api/project/copy', 'post').send({\n        id: projects[0]._id\n      });\n      await request('/api/project/delete', 'post').send({\n        id: projects[0]._id\n      });\n      expect(res.body.message).toBe('该项目无接口可复制');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "updateWorkbench"
            ],
            "updatePoint": {
                "line": 139,
                "column": 14
            },
            "line": 139,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/update_workbench', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/project.test.js",
                "updateWorkbench"
            ],
            "updatePoint": {
                "line": 143,
                "column": 15
            },
            "line": 143,
            "code": "    test('无权限操作', async () => {\n      const res = await request('/api/project/update_workbench', 'post').send({\n        id: '111111111111111111111111',\n        status: true\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "加入工作台",
            "suites": [
                "test/controllers/project.test.js",
                "updateWorkbench"
            ],
            "updatePoint": {
                "line": 150,
                "column": 15
            },
            "line": 150,
            "code": "    test('加入工作台', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/update_workbench', 'post').send({\n        id: res.body.data[0].extend._id,\n        status: true\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 160,
                "column": 14
            },
            "line": 160,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project').query({\n        type: 'demo'\n      });\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "我创建的",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 166,
                "column": 14
            },
            "line": 166,
            "code": "    test('我创建的', async () => {\n      const res = await request('/api/project').query({\n        filter_by_author: 1\n      });\n      expect(res.body.data).toHaveLength(3);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "我加入的",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 172,
                "column": 14
            },
            "line": 172,
            "code": "    test('我加入的', async () => {\n      const res = await request('/api/project', 'get', soucheUser.token).query({\n        filter_by_author: 2\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/demo');\n      expect(data[0].name).toBe('demo');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "搜索",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 181,
                "column": 12
            },
            "line": 181,
            "code": "    test('搜索', async () => {\n      const res = await request('/api/project').query({\n        keywords: 'example'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(2);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n      expect(data[1].url).toBe('/example');\n      expect(data[1].name).toBe('演示项目');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "工作台",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 192,
                "column": 13
            },
            "line": 192,
            "code": "    test('工作台', async () => {\n      const res = await request('/api/project').query({\n        type: 'workbench'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "团队项目",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 201,
                "column": 14
            },
            "line": 201,
            "code": "    test('团队项目', async () => {\n      await request('/api/group/create', 'post').send({\n        name: 'souche'\n      });\n      let res = await request('/api/group');\n      await request('/api/project/create', 'post').send({\n        name: 'group',\n        url: '/group',\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/group');\n      expect(data[0].name).toBe('group');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "获取未加入团队的项目",
            "suites": [
                "test/controllers/project.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 219,
                "column": 20
            },
            "line": 219,
            "code": "    test('获取未加入团队的项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project', 'get', soucheUser.token).query({\n        group: res.body.data[0]._id\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(0);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 229,
                "column": 14
            },
            "line": 229,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 233,
                "column": 15
            },
            "line": 233,
            "code": "    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[1]._id,\n        name: 'demo',\n        url: '/demo'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目成员不能包含创建者",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 242,
                "column": 21
            },
            "line": 242,
            "code": "    test('项目成员不能包含创建者', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'demo',\n        url: '/demo',\n        members: [res.body.data[0].user._id]\n      });\n      expect(res.body.message).toBe('项目成员不能包含创建者');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "邀请成员",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 252,
                "column": 14
            },
            "line": 252,
            "code": "    test('邀请成员', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'copy',\n        url: '/copy',\n        members: [soucheUser._id]\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "移除成员",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 262,
                "column": 14
            },
            "line": 262,
            "code": "    test('移除成员', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'copy',\n        url: '/copy',\n        members: []\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "请检查 URL 是否已经存在",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 272,
                "column": 24
            },
            "line": 272,
            "code": "    test('请检查 URL 是否已经存在', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'example',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "项目已存在",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 281,
                "column": 15
            },
            "line": 281,
            "code": "    test('项目已存在', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('项目 演示项目 已存在');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "团队项目",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 290,
                "column": 14
            },
            "line": 290,
            "code": "    test('团队项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "非团队成员无法更新项目",
            "suites": [
                "test/controllers/project.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 302,
                "column": 21
            },
            "line": 302,
            "code": "    test('非团队成员无法更新项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/update', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "syncSwagger"
            ],
            "updatePoint": {
                "line": 316,
                "column": 14
            },
            "line": 316,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/sync/swagger', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/project.test.js",
                "syncSwagger"
            ],
            "updatePoint": {
                "line": 320,
                "column": 15
            },
            "line": 320,
            "code": "    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "请先设置 Swagger 文档地址",
            "suites": [
                "test/controllers/project.test.js",
                "syncSwagger"
            ],
            "updatePoint": {
                "line": 327,
                "column": 27
            },
            "line": 327,
            "code": "    test('请先设置 Swagger 文档地址', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('请先设置 Swagger 文档地址');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "同步 Swagger 文档",
            "suites": [
                "test/controllers/project.test.js",
                "syncSwagger"
            ],
            "updatePoint": {
                "line": 334,
                "column": 23
            },
            "line": 334,
            "code": "    test('同步 Swagger 文档', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "同步失败",
            "suites": [
                "test/controllers/project.test.js",
                "syncSwagger"
            ],
            "updatePoint": {
                "line": 341,
                "column": 14
            },
            "line": 341,
            "code": "    test('同步失败', async () => {\n      let res = await request('/api/project', 'get');\n      let apiRes = await request('/api/mock').query({\n        project_id: res.body.data[1]._id\n      });\n      let api = apiRes.body.data.mocks.filter(api => api.url === '/v2/user/logout')[0];\n      await request('/api/mock/update', 'post').send({\n        id: api._id,\n        url: '/v2/user/logout',\n        mode: '{a:1}',\n        method: 'get',\n        description: '同步失败'\n      });\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      const syncErrorURLs = res.body.data.syncErrorURLs;\n      expect(syncErrorURLs).toHaveLength(1);\n      expect(syncErrorURLs[0]).toBe('GET-/v2/user/logout');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/project.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 363,
                "column": 14
            },
            "line": 363,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/project/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "无权限操作",
            "suites": [
                "test/controllers/project.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 367,
                "column": 15
            },
            "line": 367,
            "code": "    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/delete', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "非团队创建者无法删除项目",
            "suites": [
                "test/controllers/project.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 374,
                "column": 22
            },
            "line": 374,
            "code": "    test('非团队创建者无法删除项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/delete', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "删除项目",
            "suites": [
                "test/controllers/project.test.js",
                "delete"
            ],
            "updatePoint": {
                "line": 384,
                "column": 14
            },
            "line": 384,
            "code": "    test('删除项目', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/delete', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.success).toBe(true);\n    });",
            "file": "controllers/project.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/user.test.js",
                "register"
            ],
            "updatePoint": {
                "line": 15,
                "column": 14
            },
            "line": 15,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/u/register', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "注册用户",
            "suites": [
                "test/controllers/user.test.js",
                "register"
            ],
            "updatePoint": {
                "line": 19,
                "column": 14
            },
            "line": 19,
            "code": "    test('注册用户', async () => {\n      await request('/api/u/register', 'post').send({\n        name: 'test1',\n        password: '123456'\n      }).expect(200, {\n        code: 200,\n        message: 'success',\n        success: true,\n        data: null\n      });\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "重复注册",
            "suites": [
                "test/controllers/user.test.js",
                "register"
            ],
            "updatePoint": {
                "line": 30,
                "column": 14
            },
            "line": 30,
            "code": "    test('重复注册', async () => {\n      const res = await request('/api/u/register', 'post').send({\n        name: 'test1',\n        password: '123456'\n      });\n      expect(res.body.message).toBe('用户名已被使用');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/user.test.js",
                "login"
            ],
            "updatePoint": {
                "line": 39,
                "column": 14
            },
            "line": 39,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/u/login', 'post');\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "登录",
            "suites": [
                "test/controllers/user.test.js",
                "login"
            ],
            "updatePoint": {
                "line": 43,
                "column": 12
            },
            "line": 43,
            "code": "    test('登录', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'test2',\n        password: '123456'\n      });\n      expect(res.body.data.name).toBe('test2');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "用户名错误",
            "suites": [
                "test/controllers/user.test.js",
                "login"
            ],
            "updatePoint": {
                "line": 50,
                "column": 15
            },
            "line": 50,
            "code": "    test('用户名错误', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'te2st',\n        password: '123456'\n      });\n      expect(res.body.message).toBe('用户不存在');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "密码错误",
            "suites": [
                "test/controllers/user.test.js",
                "login"
            ],
            "updatePoint": {
                "line": 57,
                "column": 14
            },
            "line": 57,
            "code": "    test('密码错误', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'test2',\n        password: '1234567'\n      });\n      expect(res.body.message).toBe('用户名或密码错误');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/user.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 66,
                "column": 14
            },
            "line": 66,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/u/update', 'post').send({\n        nick_name: 'u'\n      });\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "信息更新",
            "suites": [
                "test/controllers/user.test.js",
                "update"
            ],
            "updatePoint": {
                "line": 72,
                "column": 14
            },
            "line": 72,
            "code": "    test('信息更新', async () => {\n      await request('/api/u/update', 'post').send({\n        nick_name: 'test2',\n        head_img: 'http://example.com/l.png',\n        password: '1234567'\n      });\n      const u = await spt.login('test2', '1234567');\n      expect(u.nick_name).toBe('test2');\n      expect(u.head_img).toBe('http://example.com/l.png');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "参数验证",
            "suites": [
                "test/controllers/user.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 84,
                "column": 14
            },
            "line": 84,
            "code": "    test('参数验证', async () => {\n      const res = await request('/api/u').query({\n        page_size: -1\n      });\n      expect(res.body.message).toBe('params error');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "分页查询",
            "suites": [
                "test/controllers/user.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 90,
                "column": 14
            },
            "line": 90,
            "code": "    test('分页查询', async () => {\n      const res = await request('/api/u');\n      expect(res.body.data).toHaveLength(1); // ['test1']\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "关键词查询",
            "suites": [
                "test/controllers/user.test.js",
                "list"
            ],
            "updatePoint": {
                "line": 94,
                "column": 15
            },
            "line": 94,
            "code": "    test('关键词查询', async () => {\n      const res = await request('/api/u').query({\n        keywords: 'te'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].name).toBe('test1');\n    });",
            "file": "controllers/user.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "从缓存获取",
            "suites": [
                "test/controllers/util.test.js",
                "wallpaper"
            ],
            "updatePoint": {
                "line": 53,
                "column": 15
            },
            "line": 53,
            "code": "    test('从缓存获取', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: 'http://cache.com/l.png',\n        copyrightlink: 'http://cache.com/l.png'\n      });\n      expect(data.type).toBe('bing');\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "获取 Bing 的壁纸",
            "suites": [
                "test/controllers/util.test.js",
                "wallpaper"
            ],
            "updatePoint": {
                "line": 63,
                "column": 21
            },
            "line": 63,
            "code": "    test('获取 Bing 的壁纸', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: 'http://bing.com/l.png',\n        copyrightlink: 'http://bing.com/l.png'\n      });\n      expect(data.type).toBe('bing');\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "异常处理",
            "suites": [
                "test/controllers/util.test.js",
                "wallpaper"
            ],
            "updatePoint": {
                "line": 73,
                "column": 14
            },
            "line": 73,
            "code": "    test('异常处理', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n        copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n      });\n      expect(data.type).toBe('bing');\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "文件类型错误",
            "suites": [
                "test/controllers/util.test.js",
                "upload"
            ],
            "updatePoint": {
                "line": 86,
                "column": 16
            },
            "line": 86,
            "code": "    test('文件类型错误', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.from('upload'), 'upload.js');\n      expect(res.body.message).toBe(`上传失败，仅支持 ${uploadConf.types.join('/').replace(/\\./g, '')} 文件类型`);\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "大小限制",
            "suites": [
                "test/controllers/util.test.js",
                "upload"
            ],
            "updatePoint": {
                "line": 90,
                "column": 14
            },
            "line": 90,
            "code": "    test('大小限制', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.alloc(uploadConf.size + 1), 'upload.jpg');\n      expect(res.body.message).toBe('上传失败，超过限定大小');\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "图片上传",
            "suites": [
                "test/controllers/util.test.js",
                "upload"
            ],
            "updatePoint": {
                "line": 94,
                "column": 14
            },
            "line": 94,
            "code": "    test('图片上传', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.from('upload'), 'upload.jpg');\n      const data = res.body.data;\n      const filePath = path.resolve(__dirname, '../../config', uploadConf.dir, data.path.match(/\\/upload\\/(.*)/)[1]);\n      expect(data.expire).toBe(moment().add(uploadConf.expire.day, 'days').format('YYYY-MM-DD 00:00:00'));\n      expect(res.body.message).toBe('success');\n      expect(fs.existsSync(filePath)).toBe(true);\n    });",
            "file": "controllers/util.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ipFilter",
            "suites": [
                "test/middlewares/index.test.js"
            ],
            "updatePoint": {
                "line": 10,
                "column": 16
            },
            "line": 10,
            "code": "  test('ipFilter', async () => {\n    const app = new Koa();\n    app.use((ctx, next) => {\n      ctx.request.ip = '127.0.0.1';\n      return next();\n    }).use(middleware.util).use(middleware.ipFilter);\n    const res = await request(app.callback()).get('/');\n    expect(res.body.message).toBe('请求频率太快，已被限制访问');\n  });",
            "file": "middlewares/index.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "params",
            "suites": [
                "test/util/index.test.js"
            ],
            "updatePoint": {
                "line": 10,
                "column": 14
            },
            "line": 10,
            "code": "  test('params', () => {\n    let params = util.params('/api/:user/:id', '/api/souche/123');\n    expect(params).toEqual({\n      user: 'souche',\n      id: '123'\n    });\n    params = util.params('/api/:user/:id', '/api/a%AFc/123');\n    expect(params).toEqual({\n      user: 'a%AFc',\n      id: '123'\n    });\n    params = util.params('/api/:user/:id', '/api/123');\n    expect(params).toEqual({});\n  });",
            "file": "util/index.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dropFileSchedule",
            "suites": [
                "test/util/index.test.js"
            ],
            "updatePoint": {
                "line": 24,
                "column": 24
            },
            "line": 24,
            "code": "  test('dropFileSchedule', () => {\n    util.dropFileSchedule();\n    jest.runOnlyPendingTimers();\n    expect(rimraf.mock.calls.length).toBe(2);\n  });",
            "file": "util/index.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "connection",
            "suites": [
                "test/util/ldap.test.js"
            ],
            "updatePoint": {
                "line": 50,
                "column": 18
            },
            "line": 50,
            "code": "  test('connection', async () => {\n    let ldapClient = await ldapUtil.createClient();\n\n    try {\n      await ldapUtil.authenticate('demo@example.com', '123456', ldapClient);\n    } catch (error) {\n      expect(error.message).toEqual('LDAP connection is not yet bound');\n    } finally {\n      ldapUtil.closeClient(ldapClient);\n    }\n  });",
            "file": "util/ldap.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "authenticate",
            "suites": [
                "test/util/ldap.test.js"
            ],
            "updatePoint": {
                "line": 61,
                "column": 20
            },
            "line": 61,
            "code": "  test('authenticate', done => {\n    setTimeout(async () => {\n      let ldapClient = await ldapUtil.createClient();\n      const user = await ldapUtil.authenticate('demo@example.com', '123456', ldapClient);\n      expect(user).toBeTruthy();\n\n      try {\n        await ldapUtil.authenticate('demo@example.com', '1234567', ldapClient);\n      } catch (error) {\n        expect(error.message).toEqual('用户名或密码错误');\n      }\n\n      try {\n        await ldapUtil.authenticate('demo2@example.com', '123456', ldapClient);\n      } catch (error) {\n        expect(error.message).toEqual('用户名或密码错误');\n      }\n\n      try {\n        await ldapUtil.authenticate('demo2@example.com', '123456');\n      } catch (error) {\n        expect(error.message).toEqual('LDAP connection is not yet bound');\n      }\n\n      ldapUtil.closeClient(ldapClient);\n      done();\n    }, 1000);\n  });",
            "file": "util/ldap.test.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "easy-mock__easy-mock.svg"
}