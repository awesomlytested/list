{"repo":"jaredpalmer/razzle","url":"https://github.com/jaredpalmer/razzle","branch":"master","configs":[{"lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-bundle-analyzer","lang":"js","dir":"packages/razzle-plugin-bundle-analyzer/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-graphql","lang":"js","dir":"packages/razzle-plugin-graphql/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-less","lang":"js","dir":"packages/razzle-plugin-less/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-mdx","lang":"js","dir":"packages/razzle-plugin-mdx/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-scss","lang":"js","dir":"packages/razzle-plugin-scss/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-svelte","lang":"js","dir":"packages/razzle-plugin-svelte/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-plugin-typescript","lang":"js","dir":"packages/razzle-plugin-typescript/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"razzle-start-server-webpack-plugin","lang":"js","dir":"packages/razzle-start-server-webpack-plugin/tests","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should create app from default template","suites":["create-razzle-app"],"updatePoint":{"line":23,"column":45,"index":796},"line":23,"code":"  it('should create app from default template', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --no-install`);\n    expect(directoryExists('cra/node_modules')).toBeFalsy();\n    expect(fileExists('cra/yarn.lock')).toBeFalsy();\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from official example","suites":["create-razzle-app"],"updatePoint":{"line":51,"column":45,"index":1839},"line":51,"code":"  it('should create app from official example', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example basic --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from npm example","suites":["create-razzle-app"],"updatePoint":{"line":59,"column":40,"index":2216},"line":59,"code":"  it('should create app from npm example', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testPackage} --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from npm example at tag","suites":["create-razzle-app"],"updatePoint":{"line":67,"column":47,"index":2609},"line":67,"code":"  it('should create app from npm example at tag', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testPackage}@latest --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from npm example in subdir","suites":["create-razzle-app"],"updatePoint":{"line":75,"column":50,"index":3012},"line":75,"code":"  it('should create app from npm example in subdir', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testPackage}:subexample --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from github example","suites":["create-razzle-app"],"updatePoint":{"line":83,"column":43,"index":3412},"line":83,"code":"  it('should create app from github example', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testRepo} --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from github example at branch","suites":["create-razzle-app"],"updatePoint":{"line":91,"column":53,"index":3808},"line":91,"code":"  it('should create app from github example at branch', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testRepo}@master --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from github example in subdir","suites":["create-razzle-app"],"updatePoint":{"line":99,"column":53,"index":4211},"line":99,"code":"  it('should create app from github example in subdir', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example ${testRepo}:subexample --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from git example","suites":["create-razzle-app"],"updatePoint":{"line":107,"column":40,"index":4605},"line":107,"code":"  it('should create app from git example', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example git+${testRepo}.git --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from git example at branch","suites":["create-razzle-app"],"updatePoint":{"line":115,"column":50,"index":5006},"line":115,"code":"  it('should create app from git example at branch', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example git+${testRepo}.git@master --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from git example in subdir","suites":["create-razzle-app"],"updatePoint":{"line":123,"column":50,"index":5414},"line":123,"code":"  it('should create app from git example in subdir', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example git+${testRepo}.git:subexample --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should create app from file example","suites":["create-razzle-app"],"updatePoint":{"line":131,"column":41,"index":5817},"line":131,"code":"  it('should create app from file example', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${craPath} cra --verbose --example file:../examples/basic --no-install`);\n    expect(fileExists('cra/package.json')).toBeTruthy();\n    expect(directoryExists('cra/src')).toBeTruthy();\n    expect(fileExists('cra/src/index.js')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should exit with an error code when no project name is supplied","suites":["create-razzle-app"],"updatePoint":{"line":139,"column":69,"index":6240},"line":139,"code":"  it('should exit with an error code when no project name is supplied', () => {\n    util.setupStage(stageName);\n    const output = shell.exec(`${path.join(craPath)}`, {\n      silent: true\n    });\n    expect(output.code).toBe(1);\n  });","file":"e2e/create-razzle-app.test.js","skipped":false,"dir":"test"},{"name":"should compile files into a build directory","suites":["razzle build"],"updatePoint":{"line":21,"column":49,"index":663},"line":21,"code":"  it('should compile files into a build directory', () => {\n    util.setupStageWithFixture(stageName, 'build-default');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // Create server.js\n    expect(fileExists('build/server.js')).toBeTruthy();\n    expect(fileExists('build/server.js.map')).toBeTruthy();\n\n    // Should copy static assets from src/public directory\n    expect(fileExists('build/public/nothing.txt')).toBeTruthy();\n\n    // Should compile client bundle to js directory\n    expect(directoryExists('build/public/static/js')).toBeTruthy();\n    expect(shell.ls('build/public/static/js/client.*.js').code).toBe(0);\n    expect(shell.ls('build/public/static/js/client.*.js.map').code).toBe(0);\n\n    // should compile client image assets to media directory\n    expect(directoryExists('build/public/static/media')).toBeTruthy();\n    expect(shell.ls('build/public/static/media/logo.*.png').code).toBe(0);\n\n    // should compile client css to css directory\n    expect(directoryExists('build/public/static/css')).toBeTruthy();\n    expect(shell.ls('build/public/static/css/client.*.css').code).toBe(0);\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile files with a custom .babelrc","suites":["razzle build"],"updatePoint":{"line":48,"column":49,"index":1911},"line":48,"code":"  it('should compile files with a custom .babelrc', () => {\n    util.setupStageWithFixture(stageName, 'build-with-babelrc');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // Create server.js\n    expect(fileExists('build/server.js')).toBeTruthy();\n    expect(fileExists('build/server.js.map')).toBeTruthy();\n\n    // Should copy static assets from src/public directory\n    expect(fileExists('build/public/nothing.txt')).toBeTruthy();\n\n    // Should compile client bundle to js directory\n    expect(directoryExists('build/public/static/js')).toBeTruthy();\n    expect(shell.ls('build/public/static/js/client.*.js').code).toBe(0);\n    expect(shell.ls('build/public/static/js/client.*.js.map').code).toBe(0);\n\n    // should compile client image assets to media directory\n    expect(directoryExists('build/public/static/media')).toBeTruthy();\n    expect(shell.ls('build/public/static/media/logo.*.png').code).toBe(0);\n\n    // should compile client css to css directory\n    expect(directoryExists('build/public/static/css')).toBeTruthy();\n    expect(shell.ls('build/public/static/css/client.*.css').code).toBe(0);\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile files with a custom razzle.config.js","suites":["razzle build"],"updatePoint":{"line":75,"column":57,"index":3172},"line":75,"code":"  it('should compile files with a custom razzle.config.js', () => {\n    util.setupStageWithFixture(stageName, 'build-with-custom-config');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // We modify the default server output filename -> custom.js\n    expect(fileExists('build/custom.js')).toBeTruthy();\n    expect(fileExists('build/custom.js.map')).toBeTruthy();\n\n    // Should compile client bundle to js directory\n    expect(directoryExists('build/public/static/js')).toBeTruthy();\n    expect(shell.ls('build/public/static/js/client.*.js').code).toBe(0);\n    expect(shell.ls('build/public/static/js/client.*.js.map').code).toBe(0);\n\n    // should compile client image assets to media directory\n    expect(directoryExists('build/public/static/media')).toBeTruthy();\n    expect(shell.ls('build/public/static/media/logo.*.png').code).toBe(0);\n\n    // should compile client css to css directory\n    expect(directoryExists('build/public/static/css')).toBeTruthy();\n    expect(shell.ls('build/public/static/css/client.*.css').code).toBe(0);\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile files with a plugin in razzle.config.js","suites":["razzle build"],"updatePoint":{"line":99,"column":60,"index":4358},"line":99,"code":"  it('should compile files with a plugin in razzle.config.js', () => {\n    util.setupStageWithExample(stageName, 'with-scss');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // Should compile client bundle to js directory\n    expect(directoryExists('build/public/static/js')).toBeTruthy();\n    expect(shell.ls('build/public/static/js/client.*.js').code).toBe(0);\n    expect(shell.ls('build/public/static/js/client.*.js.map').code).toBe(0);\n\n    // should compile client css to css directory\n    expect(directoryExists('build/public/static/css')).toBeTruthy();\n    expect(shell.ls('build/public/static/css/client.*.css').code).toBe(0);\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile files in spa mode","suites":["razzle build"],"updatePoint":{"line":115,"column":38,"index":5117},"line":115,"code":"  it('should compile files in spa mode', () => {\n    util.setupStageWithFixture(stageName, 'build-default-spa');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // Create index.html\n    expect(fileExists('build/public/index.html')).toBeTruthy();\n\n    // SHOULD NOT Create server.js\n    expect(fileExists('build/server.js')).toBeFalsy();\n    expect(fileExists('build/server.js.map')).toBeFalsy();\n\n    // Should copy static assets from src/public directory\n    expect(fileExists('build/public/nothing.txt')).toBeTruthy();\n\n    // Should compile client bundle to js directory\n    expect(directoryExists('build/public/static/js')).toBeTruthy();\n    expect(shell.ls('build/public/static/js/client.*.js').code).toBe(0);\n    expect(shell.ls('build/public/static/js/client.*.js.map').code).toBe(0);\n\n    // should compile client image assets to media directory\n    expect(directoryExists('build/public/static/media')).toBeTruthy();\n    expect(shell.ls('build/public/static/media/logo.*.png').code).toBe(0);\n\n    // should compile client css to css directory\n    expect(directoryExists('build/public/static/css')).toBeTruthy();\n    expect(shell.ls('build/public/static/css/client.*.css').code).toBe(0);\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile with plugin options","suites":["razzle build"],"updatePoint":{"line":145,"column":40,"index":6459},"line":145,"code":"  it('should compile with plugin options', () => {\n    const stagePath = util.setupStageWithExample(stageName, 'with-scss-options');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n    const assets = JSON.parse(fs.readFileSync(path.join(stagePath, 'build/assets.json')));\n    const css = fs.readFileSync(path.join(stagePath, 'build', 'public', assets.client.css[0]));\n    expect(css.toString().includes(\"razzle-scss-prepend\")).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile with promise config","suites":["razzle build"],"updatePoint":{"line":155,"column":40,"index":7040},"line":155,"code":"  it('should compile with promise config', () => {\n    const stagePath = util.setupStageWithExample(stageName, 'with-promise-config');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n\n    // We modify the default server output filename -> custom.js\n    expect(fileExists('build/custom.js')).toBeTruthy();\n    expect(fileExists('build/custom.js.map')).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile with jsconfig paths","suites":["razzle build"],"updatePoint":{"line":166,"column":40,"index":7545},"line":166,"code":"  it('should compile with jsconfig paths', () => {\n    const stagePath = util.setupStageWithExample(stageName, 'with-jsconfig-paths');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n    const assets = JSON.parse(fs.readFileSync(path.join(stagePath, 'build/assets.json')));\n    const js = fs.readFileSync(path.join(stagePath, 'build', 'public', assets.client.js[0]));\n    expect(js.toString().includes(\"Something Extra\")).toBeTruthy();\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should exit with an error code when the custom config is invalid","suites":["razzle build"],"updatePoint":{"line":176,"column":70,"index":8151},"line":176,"code":"  it('should exit with an error code when the custom config is invalid', () => {\n    util.setupStageWithFixture(stageName, 'build-with-custom-config-invalid');\n    const output = shell.exec('yarn build', {\n      silent: true\n    });\n    expect(output.code).toBe(1);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should compile with development build","suites":["razzle build"],"updatePoint":{"line":183,"column":43,"index":8396},"line":183,"code":"  it('should compile with development build', () => {\n    const stagePath = util.setupStageWithExample(stageName, 'with-development-build');\n    const output = shell.exec('yarn build --noninteractive');\n    // Create asset manifest\n    expect(fileExists('build/assets.json')).toBeTruthy();\n    const assets = JSON.parse(fs.readFileSync(path.join(stagePath, 'build/assets.json')));\n    const js = fs.readFileSync(path.join(stagePath, 'build', 'public', assets.client.js[0]));\n    expect(output.code).toBe(0);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should exit with an error code when the custom config is invalid","suites":["razzle build"],"updatePoint":{"line":192,"column":70,"index":8937},"line":192,"code":"  it('should exit with an error code when the custom config is invalid', () => {\n    util.setupStageWithFixture(stageName, 'build-with-custom-config-invalid');\n    const output = shell.exec('yarn build', {\n      silent: true\n    });\n    expect(output.code).toBe(1);\n  });","file":"e2e/razzle-build.test.js","skipped":false,"dir":"test"},{"name":"should start a dev server for spa mode","suites":["razzle start","razzle basic example"],"updatePoint":{"line":24,"column":46,"index":697},"line":24,"code":"    it('should start a dev server for spa mode', () => {\n      util.setupStageWithExample(stageName, 'basic-spa');\n      let outputTest;\n      const run = new Promise(resolve => {\n        const child = shell.exec(`${path.join('../node_modules/.bin/razzle')} start`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (!silent) console.log(data);\n          if (data.includes('> SPA Started on port 3000') && typeof outputTest == 'undefined') {\n            shell.exec('sleep 5');\n            const devServerOutput = shell.exec('curl -sb -o \"\" localhost:3000/static/js/bundle.js');\n            if (spew) console.log('devServerOutput:' + devServerOutput.stdout);\n            outputTest = devServerOutput.stdout.includes(\"React\");\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          if (!silent) console.log('stderr:' + data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start-spa.test.js","skipped":false,"dir":"test"},{"name":"should build and run in spa mode","suites":["razzle start","razzle basic example"],"updatePoint":{"line":49,"column":40,"index":1799},"line":49,"code":"    it('should build and run in spa mode', () => {\n      util.setupStageWithExample(stageName, 'basic-spa');\n      let outputTest;\n      shell.exec(`${path.join('../node_modules/.bin/razzle')} build --noninteractive`);\n      const run = new Promise(resolve => {\n        const child = shell.exec(`${path.join('../node_modules/.bin/serve')} -s ${path.join('build/public')}`, () => {\n          shell.exec('sleep 5');\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (!silent) console.log(data);\n          if (data.includes('http://localhost:5000') && typeof outputTest == 'undefined') {\n            shell.exec('sleep 5');\n            // we use serve package and it will run in prot 5000\n            const output = shell.exec(\"curl -I localhost:5000\");\n            if (spew) console.log('serverOutput:' + output.stdout);\n            outputTest = output.stdout.includes(\"200\");\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          if (!silent) console.log('stderr:' + data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start-spa.test.js","skipped":false,"dir":"test"},{"name":"should start a dev server","suites":["razzle start","razzle basic example"],"updatePoint":{"line":24,"column":33,"index":680},"line":24,"code":"    it('should start a dev server', () => {\n      util.setupStageWithExample(stageName, 'basic');\n      let outputTest;\n      const run = new Promise(resolve => {\n        const child = shell.exec(`${path.join('../node_modules/.bin/razzle')} start --verbose`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (!silent) console.log(data);\n          if (data.includes('Server-side HMR Enabled!') && typeof outputTest == 'undefined') {\n            shell.exec('sleep 5');\n            const devServerOutput = shell.exec('curl -sb -o \"\" localhost:3001/static/js/client.js');\n            if (spew) console.log('devServerOutput:' + devServerOutput.stdout);\n            outputTest = devServerOutput.stdout.includes('React');\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          if (!silent) console.log('stderr:' + data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should start a dev server on different port","suites":["razzle start","razzle basic example"],"updatePoint":{"line":49,"column":51,"index":1798},"line":49,"code":"    it('should start a dev server on different port', () => {\n      util.setupStageWithExample(stageName, 'with-custom-devserver-options');\n      let outputTest;\n      const run = new Promise(resolve => {\n        const child = shell.exec(`${path.join('../node_modules/.bin/razzle')} start --verbose`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (!silent) console.log(data);\n          if (data.includes('Server-side HMR Enabled!') && typeof outputTest == 'undefined') {\n            shell.exec('sleep 5');\n            const devServerOutput = shell.exec('curl -sb -o \"\" localhost:3002/static/js/client.js');\n            if (spew) console.log('devServerOutput:' + devServerOutput.stdout);\n            outputTest = devServerOutput.stdout.includes('index.js?http://localhost:3002');\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          if (!silent) console.log('stderr:' + data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should start a dev server with custom environment variables on different port","suites":["razzle start","razzle basic example"],"updatePoint":{"line":74,"column":85,"index":2999},"line":74,"code":"    it('should start a dev server with custom environment variables on different port', () => {\n      util.setupStageWithExample(stageName, 'with-custom-environment-variables');\n      let outputTest;\n      const run = new Promise(resolve => {\n        const child = shell.exec(`node ${path.join('./node_modules/razzle/bin/razzle.js')} start --verbose`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (data.includes('Server-side HMR Enabled!')) {\n            shell.exec('sleep 5');\n            const devServerOutput = shell.exec('curl -sb -o \"\" localhost:4001/static/js/client.js');\n            outputTest = devServerOutput.stdout.includes('index.js?http://localhost:4001');\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          console.log(data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should start a dev server with react refresh","suites":["razzle start","razzle basic example"],"updatePoint":{"line":97,"column":52,"index":4000},"line":97,"code":"    it('should start a dev server with react refresh', () => {\n      util.setupStageWithExample(stageName, 'with-experimental-refresh');\n      let outputTest;\n      const run = new Promise(resolve => {\n        const child = shell.exec(`node ${path.join('./node_modules/razzle/bin/razzle.js')} start --verbose`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (data.includes('Server-side HMR Enabled!')) {\n            shell.exec('sleep 5');\n            const devServerOutput = shell.exec('curl -sb -o \"\" localhost:3001/static/js/client.js');\n            outputTest = devServerOutput.stdout.includes('index.js?http://localhost:3001');\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          console.log(data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should build and run","suites":["razzle start","razzle basic example"],"updatePoint":{"line":120,"column":28,"index":4969},"line":120,"code":"    it('should build and run', () => {\n      util.setupStageWithExample(stageName, 'basic');\n      let outputTest;\n      shell.exec(`${path.join('../node_modules/.bin/razzle')} build --noninteractive`);\n      const run = new Promise(resolve => {\n        const child = shell.exec(`node ${path.join('build/server.js')}`, () => {\n          resolve(outputTest);\n        });\n        child.stdout.on('data', data => {\n          if (!silent) console.log(data);\n          if (data.includes('> Started on port 3000') && typeof outputTest == 'undefined') {\n            shell.exec('sleep 5');\n            const output = shell.exec('curl -I localhost:3000');\n            if (spew) console.log('serverOutput:' + output.stdout);\n            outputTest = output.stdout.includes('200');\n            kill(child.pid, 'SIGINT');\n          }\n        });\n        child.stderr.on('data', data => {\n          if (!silent) console.log('stderr:' + data);\n        });\n      });\n      return run.then(test => expect(test).toBeTruthy());\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should exit with an error code and display the error when the custom config throws an error","suites":["razzle start","razzle basic example"],"updatePoint":{"line":144,"column":99,"index":6058},"line":144,"code":"    it('should exit with an error code and display the error when the custom config throws an error', () => {\n      const stagePath = util.setupStageWithExample(stageName, 'basic');\n      fs.writeFileSync(path.join(stagePath, 'razzle.config.js'), `\n        module.exports = {\n          modifyWebpackConfig() {\n            throw new Error(\"Oops\");\n          }\n        }\n      `);\n      return new Promise((resolve, reject) => {\n        shell.exec(`node ${path.join('../node_modules/razzle/bin/razzle.js')} start --verbose`, {\n          timeout: 5000\n        }, (returnCode, stdout) => {\n          if (returnCode === 1 && stdout.includes('Error: Oops')) {\n            resolve();\n          } else {\n            reject('Unexpected successful return code.');\n          }\n        });\n      });\n    });","file":"e2e/razzle-start.test.js","skipped":false,"dir":"test"},{"name":"should install packages","suites":["tests for  isomorphic examples","tests for the  example"],"updatePoint":{"line":286,"column":35,"index":9272},"line":286,"code":"        it(`should install packages`, async function (done) {\n          if (!useCra) {\n            const subprocess = execa(package_manager, install_deps_args, {\n              stdio: stdio,\n              cwd: tempDir,\n              all: writeLogs\n            });\n            if (writeLogs) {\n              const write = rfs.createWriteStream(path.join(testArtifactsDir, `${example}-${package_manager}-install.txt`));\n              subprocess.all.pipe(write);\n            }\n            subprocess.then(({\n              exitCode\n            }) => {\n              assert.equal(exitCode, 0);\n              done();\n            });\n            await subprocess;\n          } else {\n            console.log(\"Skipped install packages\");\n            done();\n          }\n        }, 300000);","file":"examples/isomorphic-examples.test.js","skipped":false,"dir":"test"},{"name":"should run create-razzle-app successfully","suites":["tests for  isomorphic examples","tests for the  example"],"updatePoint":{"line":310,"column":53,"index":10103},"line":310,"code":"        it(`should run create-razzle-app successfully`, async function (done) {\n          if (useCra) {\n            const subprocess = execa(\"npx\", [`create-razzle-app${use_npm_tag}`,, cra_package_manager && `--${cra_package_manager}`, \"--verbose\", \"--example\", example, \"example\"].filter(x => x), {\n              stdio: stdio,\n              cwd: tempDir,\n              all: writeLogs\n            });\n            if (writeLogs) {\n              const write = rfs.createWriteStream(path.join(testArtifactsDir, `${example}-create-razzle-app.txt`));\n              subprocess.all.pipe(write);\n            }\n            subprocess.then(async ({\n              exitCode\n            }) => {\n              assert.equal(exitCode, 0);\n              done();\n            });\n            await subprocess;\n          } else {\n            console.log(\"Skipped run create-razzle-app successfully\");\n            done();\n          }\n        }, 300000);","file":"examples/isomorphic-examples.test.js","skipped":false,"dir":"test"},{"name":"should use specific webpack and html-webpack-plugin","suites":["tests for  isomorphic examples","tests for the  example"],"updatePoint":{"line":334,"column":63,"index":11079},"line":334,"code":"        it(`should use specific webpack and html-webpack-plugin`, async function (done) {\n          if (webpack_deps && !razzleMeta.forceWebpack) {\n            console.log(`Installing ${webpack_deps.join(' ')} using ${package_manager}`);\n            const subprocess = execa(package_manager, add_webpack_deps_args, {\n              stdio: stdio,\n              cwd: useCra ? craDir : tempDir,\n              all: writeLogs\n            });\n            if (writeLogs) {\n              const write = rfs.createWriteStream(path.join(testArtifactsDir, `${example}-add-deps.txt`));\n              subprocess.all.pipe(write);\n            }\n            subprocess.then(({\n              exitCode\n            }) => {\n              assert.equal(exitCode, 0);\n              done();\n            });\n            await subprocess;\n          } else {\n            console.log(\"Skipped use specific webpack and html-webpack-plugin\");\n            done();\n          }\n        }, 300000);","file":"examples/isomorphic-examples.test.js","skipped":false,"dir":"test"},{"name":"should build successfully","suites":["tests for  isomorphic examples","tests for the  example"],"updatePoint":{"line":359,"column":37,"index":12049},"line":359,"code":"        it(`should build successfully`, async function (done) {\n          const subprocess = execa(package_manager, [\"build\", \"--noninteractive\"], {\n            stdio: stdio,\n            cwd: useCra ? craDir : tempDir,\n            all: writeLogs\n          });\n          if (writeLogs) {\n            const write = rfs.createWriteStream(path.join(testArtifactsDir, `${example}-${package_manager}-build.txt`));\n            subprocess.all.pipe(write);\n          }\n          subprocess.then(({\n            exitCode\n          }) => {\n            assert.equal(exitCode, 0);\n            done();\n          });\n          await subprocess;\n        }, 300000);","file":"examples/isomorphic-examples.test.js","skipped":false,"dir":"test"},{"name":"should start devserver and exit","suites":["tests for  isomorphic examples","tests for the  example"],"updatePoint":{"line":378,"column":43,"index":12737},"line":378,"code":"        it(`should start devserver and exit`, async function (done) {\n          const subprocess = execa(package_manager, [\"start\"], {\n            stdio: stdio,\n            cwd: useCra ? craDir : tempDir,\n            all: writeLogs\n          });\n          if (writeLogs) {\n            const write = rfs.createWriteStream(path.join(testArtifactsDir, `${example}-${package_manager}-start.txt`));\n            subprocess.all.pipe(write);\n          }\n          let resolved = false;\n          let timer;\n          try {\n            await new Promise(async (resolve, reject) => {\n              console.info(`${package_manager} start for ${example} `);\n              const waitForData = data => {\n                if (data.toString().includes('Server-side HMR Enabled!') || data.toString().includes('> SPA Started on port')) {\n                  resolved = true;\n                  subprocess.off('data', waitForData);\n                  clearTimeout(timer);\n                  resolve();\n                }\n              };\n              timer = setTimeout(function () {\n                subprocess.off('data', waitForData);\n                reject();\n              }, 30000);\n              subprocess.stdout.on('data', waitForData);\n            });\n          } catch {}\n          if (razzleMeta.yarnStartDelay) {\n            await new Promise(r => setTimeout(r, razzleMeta.yarnStartDelay));\n          }\n          if (resolved) {\n            try {\n              await page.goto(`${razzleMeta.protocol || 'http'}://localhost:${razzleMeta.port || '3000'}/`);\n              await page.screenshot({\n                path: path.join(testArtifactsDir, `${example}.png`)\n              });\n            } catch {}\n          }\n          await new Promise(r => setTimeout(r, 2000));\n          terminate(subprocess.pid, 'SIGINT', {\n            timeout: 3000\n          }, async () => {\n            terminate(subprocess.pid);\n            assert.ok(resolved, `yarn start for ${example} failed`);\n            done();\n          });\n        }, 300000);","file":"examples/isomorphic-examples.test.js","skipped":false,"dir":"test"},{"name":"should not add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with default options in web development "],"updatePoint":{"line":17,"column":53,"index":578},"line":17,"code":"    it('should not add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with default options in web production "],"updatePoint":{"line":32,"column":49,"index":1043},"line":32,"code":"    it('should add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should not add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with default options in node development "],"updatePoint":{"line":47,"column":53,"index":1518},"line":47,"code":"    it('should not add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should not add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with default options in node production "],"updatePoint":{"line":62,"column":53,"index":1989},"line":62,"code":"    it('should not add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should not add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with options in node development "],"updatePoint":{"line":80,"column":53,"index":2513},"line":80,"code":"    it('should not add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with options in node production "],"updatePoint":{"line":98,"column":49,"index":3033},"line":98,"code":"    it('should add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with options in web development "],"updatePoint":{"line":116,"column":49,"index":3559},"line":116,"code":"    it('should add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should not add webpack-bundle-analyzer-plugin","suites":["razzle-bundle-analyzer-plugin","with options in web production "],"updatePoint":{"line":134,"column":53,"index":4089},"line":134,"code":"    it('should not add webpack-bundle-analyzer-plugin', () => {\n      const BAPlugin = config.plugins.find(plugin => plugin instanceof BundleAnalyzerPlugin);\n      expect(BAPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-bundle-analyzer/tests"},{"name":"should add .md and .mdx to extensions","suites":["razzle-mdx-plugin"],"updatePoint":{"line":18,"column":43,"index":448},"line":18,"code":"  it('should add .md and .mdx to extensions', () => {\n    expect(config.resolve.extensions).toContain('.md');\n    expect(config.resolve.extensions).toContain('.mdx');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-mdx/tests"},{"name":"should add mdx-loader","suites":["razzle-mdx-plugin"],"updatePoint":{"line":22,"column":27,"index":605},"line":22,"code":"  it('should add mdx-loader', () => {\n    const rule = config.module.rules.find(mdxLoaderFinder);\n    expect(rule).not.toBeUndefined();\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-mdx/tests"},{"name":"should add mdx format to exclude","suites":["razzle-mdx-plugin"],"updatePoint":{"line":26,"column":38,"index":758},"line":26,"code":"  it('should add mdx format to exclude', () => {\n    const fileRule = config.module.rules.find(fileLoaderFinder);\n    expect(fileRule.exclude).toContainEqual(/\\.mdx?$/);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-mdx/tests"},{"name":"should add .svelte","suites":["razzle-svelte-plugin"],"updatePoint":{"line":19,"column":24,"index":460},"line":19,"code":"  it('should add .svelte', () => {\n    expect(config.resolve.extensions).toContain('.svelte');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-svelte/tests"},{"name":"should add svelte-loader","suites":["razzle-svelte-plugin"],"updatePoint":{"line":22,"column":30,"index":567},"line":22,"code":"  it('should add svelte-loader', () => {\n    const rule = config.module.rules.find(svelteLoaderFinder);\n    expect(rule).not.toBeUndefined();\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-svelte/tests"},{"name":"should add svelte format to exclude","suites":["razzle-svelte-plugin"],"updatePoint":{"line":26,"column":41,"index":726},"line":26,"code":"  it('should add svelte format to exclude', () => {\n    const fileRule = config.module.rules.find(fileLoaderFinder);\n    expect(fileRule.exclude).toContainEqual(/\\.svelte?$/);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-svelte/tests"},{"name":"should add .ts and .tsx to extensions","suites":["razzle-typescript-plugin","with useBabel=false"],"updatePoint":{"line":24,"column":45,"index":671},"line":24,"code":"    it('should add .ts and .tsx to extensions', () => {\n      expect(config.resolve.extensions).toContain('.ts');\n      expect(config.resolve.extensions).toContain('.tsx');\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should add ts-loader","suites":["razzle-typescript-plugin","with useBabel=false"],"updatePoint":{"line":28,"column":28,"index":835},"line":28,"code":"    it('should add ts-loader', () => {\n      const rule = config.module.rules.find(tsLoaderFinder);\n      expect(rule).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should add fork-ts-checker-webpack-plugin","suites":["razzle-typescript-plugin","with useBabel=false"],"updatePoint":{"line":32,"column":49,"index":1004},"line":32,"code":"    it('should add fork-ts-checker-webpack-plugin', () => {\n      const tsCheckerPlugin = config.plugins.find(plugin => plugin instanceof ForkTsCheckerWebpackPlugin);\n      expect(tsCheckerPlugin).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should remove babel-loader","suites":["razzle-typescript-plugin","with useBabel=false"],"updatePoint":{"line":36,"column":34,"index":1215},"line":36,"code":"    it('should remove babel-loader', () => {\n      const rule = config.module.rules.find(babelLoaderFinder);\n      expect(rule).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should keep babel-loader","suites":["razzle-typescript-plugin","with useBabel=true"],"updatePoint":{"line":54,"column":32,"index":1668},"line":54,"code":"    it('should keep babel-loader', () => {\n      const rule = config.module.rules.find(babelLoaderFinder);\n      expect(rule).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should add babel-loader to .ts and .tsx files too","suites":["razzle-typescript-plugin","with useBabel=true"],"updatePoint":{"line":58,"column":57,"index":1848},"line":58,"code":"    it('should add babel-loader to .ts and .tsx files too', () => {\n      const tsLoader = config.module.rules.find(tsLoaderFinder);\n      const babelLoader = tsLoader.use.find(babelLoaderFinder);\n      expect(babelLoader).not.toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":"should not add fork-ts-checker-webpack-plugin","suites":["razzle-typescript-plugin","when creating a server config"],"updatePoint":{"line":76,"column":53,"index":2406},"line":76,"code":"    it('should not add fork-ts-checker-webpack-plugin', () => {\n      const tsCheckerPlugin = config.plugins.find(plugin => plugin instanceof ForkTsCheckerWebpackPlugin);\n      expect(tsCheckerPlugin).toBeUndefined();\n    });","file":"index.test.js","skipped":false,"dir":"packages/razzle-plugin-typescript/tests"},{"name":" should compile and start the server","suites":["StartServerPluginWebpackCases"],"updatePoint":{"line":14,"column":58,"index":664},"line":14,"code":"      it(`${directory} should compile and start the server`, done => {\n        const directoryForCase = path.resolve(casesDirectory, directory);\n        const outputDirectoryForCase = path.resolve(outputDirectory, directory);\n        // eslint-disable-next-line import/no-dynamic-require, global-require\n        const webpackConfig = require(path.resolve(directoryForCase, 'webpack.config.js'));\n        for (const config of [].concat(webpackConfig)) {\n          Object.assign(config, {\n            context: directoryForCase,\n            output: Object.assign({\n              path: outputDirectoryForCase\n            }, config.output)\n          }, config);\n        }\n        webpack(webpackConfig, (err, stats) => {\n          if (err) {\n            done(err);\n            return;\n          }\n\n          /*\n          // eslint-disable-next-line no-console\n          console.log(\n            stats.toString({\n              context: path.resolve(__dirname, '..'),\n              chunks: true,\n              chunkModules: true,\n              modules: false,\n            })\n          );\n          */\n\n          if (stats.hasErrors()) {\n            done(new Error(stats.toString({\n              context: path.resolve(__dirname, '..'),\n              errorDetails: true\n            })));\n            return;\n          }\n          const expectedDirectory = path.resolve(directoryForCase, 'expected');\n          const expectedDirectoryByVersion = path.join(expectedDirectory, `webpack-${webpackMajorVersion}`);\n          if (fs.existsSync(expectedDirectoryByVersion)) {\n            compareDirectory(outputDirectoryForCase, expectedDirectoryByVersion);\n          } else if (fs.existsSync(expectedDirectory)) {\n            compareDirectory(outputDirectoryForCase, expectedDirectory);\n          }\n          const expectedWarning = path.resolve(directoryForCase, 'warnings.js');\n          if (fs.existsSync(expectedWarning)) {\n            const actualWarning = stats.toString({\n              all: false,\n              warnings: true\n            });\n            compareWarning(actualWarning, expectedWarning);\n          }\n          done();\n        });\n      }, 10000);","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should be `import`-able","suites":["StartServerPlugin"],"updatePoint":{"line":74,"column":29,"index":2846},"line":74,"code":"  it('should be `import`-able', function () {\n    expect(Plugin).toBeInstanceOf(Function);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should be `require`-able","suites":["StartServerPlugin"],"updatePoint":{"line":77,"column":30,"index":2944},"line":77,"code":"  it('should be `require`-able', function () {\n    expect(require('..')).toBe(Plugin);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept a string entryName","suites":["StartServerPlugin"],"updatePoint":{"line":80,"column":38,"index":3045},"line":80,"code":"  it('should accept a string entryName', function () {\n    const p = new Plugin('test');\n    expect(p.options.entryName).toBe('test');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept an options object","suites":["StartServerPlugin"],"updatePoint":{"line":84,"column":37,"index":3185},"line":84,"code":"  it('should accept an options object', function () {\n    const p = new Plugin({\n      whee: true\n    });\n    expect(p.options.whee).toBe(true);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should calculate nodeArgs","suites":["StartServerPlugin"],"updatePoint":{"line":90,"column":31,"index":3330},"line":90,"code":"  it('should calculate nodeArgs', function () {\n    const p = new Plugin({\n      nodeArgs: ['meep'],\n      scriptArgs: ['moop']\n    });\n    const nodeArgs = p._getExecArgv();\n    expect(nodeArgs.filter(a => a === 'meep').length).toBe(1);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should calculate args","suites":["StartServerPlugin"],"updatePoint":{"line":98,"column":27,"index":3570},"line":98,"code":"  it('should calculate args', function () {\n    const p = new Plugin({\n      nodeArgs: ['meep'],\n      scriptArgs: ['moop', 'bleep', 'third']\n    });\n    const args = p.options.scriptArgs;\n    expect(args).toEqual(['moop', 'bleep', 'third']);\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept string entry","suites":["StartServerPlugin"],"updatePoint":{"line":106,"column":32,"index":3824},"line":106,"code":"  it('should accept string entry', function () {\n    const p = new Plugin();\n    const entry = p._amendEntry('meep');\n    expect(entry).toBeInstanceOf(Array);\n    expect(entry[0]).toEqual('meep');\n    expect(entry[1]).toContain('monitor');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept array entry","suites":["StartServerPlugin"],"updatePoint":{"line":113,"column":31,"index":4069},"line":113,"code":"  it('should accept array entry', function () {\n    const p = new Plugin();\n    const entry = p._amendEntry(['meep', 'moop']);\n    expect(entry).toBeInstanceOf(Array);\n    expect(entry.slice(0, 2)).toEqual(['meep', 'moop']);\n    expect(entry[2]).toContain('monitor');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept object entry","suites":["StartServerPlugin"],"updatePoint":{"line":120,"column":32,"index":4344},"line":120,"code":"  it('should accept object entry', function () {\n    const p = new Plugin({\n      entryName: 'boom'\n    });\n    const entry = p._amendEntry({\n      boom: 'meep',\n      beep: 'foom'\n    });\n    expect(entry.beep).toEqual('foom');\n    expect(entry.boom).toBeInstanceOf(Array);\n    expect(entry.boom[0]).toEqual('meep');\n    expect(entry.boom[1]).toContain('monitor');\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"},{"name":"should accept function entry","suites":["StartServerPlugin"],"updatePoint":{"line":133,"column":34,"index":4718},"line":133,"code":"  it('should accept function entry', function (cb) {\n    const p = new Plugin();\n    const entryFn = p._amendEntry(arg => arg);\n    expect(entryFn).toBeInstanceOf(Function);\n    const entry = entryFn('meep');\n    expect(entry).toBeInstanceOf(Promise);\n    entry.then(entry => {\n      expect(entry[0]).toEqual('meep');\n      expect(entry[1]).toContain('monitor');\n      cb();\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/razzle-start-server-webpack-plugin/tests"}]}