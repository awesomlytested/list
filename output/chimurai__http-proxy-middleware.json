{"repo":"chimurai/http-proxy-middleware","url":"https://github.com/chimurai/http-proxy-middleware","branch":"master","configs":[{"package":"http-proxy-middleware","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should still return a response when route does not match proxyConfig","suites":["Usage in Express","Express Sub Route"],"updatePoint":{"line":45,"column":76},"line":45,"code":"    it('should still return a response when route does not match proxyConfig', async () => {\n      const response = await agent.get('/sub/hello');\n      expect(response.body).toEqual({ content: 'foobar' });\n    });","file":"e2e/express-router.spec.ts","skipped":false,"dir":"test"},{"name":"should create a middleware","suites":["E2E http-proxy-middleware","http-proxy-middleware creation"],"updatePoint":{"line":10,"column":34},"line":10,"code":"    it('should create a middleware', () => {\n      const middleware = createProxyMiddleware('/api', {\n        target: `http://localhost:8000`,\n      });\n      expect(typeof middleware).toBe('function');\n    });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should not proxy requests when request url does not match context","suites":["E2E http-proxy-middleware","context matching","do not proxy"],"updatePoint":{"line":32,"column":75},"line":32,"code":"      it('should not proxy requests when request url does not match context', () => {\n        expect(mockNext).toBeCalled();\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have response body: \"HELLO WEB\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","basic setup, requests to target"],"updatePoint":{"line":62,"column":48},"line":62,"code":"      it('should have response body: \"HELLO WEB\"', async () => {\n        await mockTargetServer.get('/api').thenReply(200, 'HELLO WEB');\n        const response = await agent.get(`/api`).expect(200);\n        expect(response.text).toBe('HELLO WEB');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have proxied the uri-path and uri-query, but not the uri-hash","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","basic setup, requests to target"],"updatePoint":{"line":68,"column":78},"line":68,"code":"      it('should have proxied the uri-path and uri-query, but not the uri-hash', async () => {\n        await mockTargetServer\n          .get('/api/b/c/dp')\n          .withExactQuery('?q=1&r=[2,3]')\n          .thenReply(200, 'OK');\n\n        const response = await request(`http://localhost:${mockTargetServer.port}`)\n          .get(`/api/b/c/dp?q=1&r=[2,3]#s`)\n          .expect(200);\n\n        expect(response.text).toBe('OK');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy request body from form","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","basic setup with configured body-parser"],"updatePoint":{"line":83,"column":45},"line":83,"code":"      it('should proxy request body from form', async () => {\n        agent = request(\n          createApp(\n            bodyParser.urlencoded({ extended: false }),\n            createProxyMiddleware('/api', {\n              target: `http://localhost:${mockTargetServer.port}`,\n              onProxyReq: fixRequestBody,\n            })\n          )\n        );\n\n        await mockTargetServer.post('/api').thenCallback((req) => {\n          expect(req.body.text).toBe('foo=bar&bar=baz');\n          return { status: 200 };\n        });\n        await agent.post('/api').send('foo=bar').send('bar=baz').expect(200);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy request body from json","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","basic setup with configured body-parser"],"updatePoint":{"line":101,"column":45},"line":101,"code":"      it('should proxy request body from json', async () => {\n        agent = request(\n          createApp(\n            bodyParser.json(),\n            createProxyMiddleware('/api', {\n              target: `http://localhost:${mockTargetServer.port}`,\n              onProxyReq: fixRequestBody,\n            })\n          )\n        );\n\n        await mockTargetServer.post('/api').thenCallback((req) => {\n          expect(req.body.json).toEqual({ foo: 'bar', bar: 'baz', doubleByte: '文' });\n          return { status: 200 };\n        });\n        await agent.post('/api').send({ foo: 'bar', bar: 'baz', doubleByte: '文' }).expect(200);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have response body: \"HELLO WEB\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","custom context matcher/filter"],"updatePoint":{"line":121,"column":48},"line":121,"code":"      it('should have response body: \"HELLO WEB\"', async () => {\n        const filter = (path, req) => {\n          return true;\n        };\n\n        agent = request(\n          createApp(\n            createProxyMiddleware(filter, {\n              target: `http://localhost:${mockTargetServer.port}`,\n            })\n          )\n        );\n\n        await mockTargetServer.get('/api/b/c/d').thenReply(200, 'HELLO WEB');\n        const response = await agent.get(`/api/b/c/d`).expect(200);\n        expect(response.text).toBe('HELLO WEB');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should not proxy when filter returns false","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","custom context matcher/filter"],"updatePoint":{"line":139,"column":52},"line":139,"code":"      it('should not proxy when filter returns false', async () => {\n        const filter = (path, req) => {\n          return false;\n        };\n\n        agent = request(\n          createApp(\n            createProxyMiddleware(filter, {\n              target: `http://localhost:${mockTargetServer.port}`,\n            })\n          )\n        );\n\n        await mockTargetServer.get('/api/b/c/d').thenReply(200, 'HELLO WEB');\n        const response = await agent.get(`/api/b/c/d`).expect(404);\n        expect(response.status).toBe(404);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path /api","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","multi path"],"updatePoint":{"line":169,"column":35},"line":169,"code":"      it('should proxy to path /api', async () => {\n        await mockTargetServer.get(/\\/api\\/.+/).thenReply(200, 'HELLO /API');\n        const response = await agent.get(`/api/b/c/d`).expect(200);\n        expect(response.text).toBe('HELLO /API');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path /ajax","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","multi path"],"updatePoint":{"line":175,"column":36},"line":175,"code":"      it('should proxy to path /ajax', async () => {\n        await mockTargetServer.get(/\\/ajax\\/.+/).thenReply(200, 'HELLO /AJAX');\n        const response = await agent.get(`/ajax/b/c/d`).expect(200);\n        expect(response.text).toBe('HELLO /AJAX');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should not proxy with no matching path","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","multi path"],"updatePoint":{"line":181,"column":48},"line":181,"code":"      it('should not proxy with no matching path', async () => {\n        const response = await agent.get(`/lorum/ipsum`).expect(404);\n        expect(response.status).toBe(404);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","wildcard path matching"],"updatePoint":{"line":198,"column":30},"line":198,"code":"      it('should proxy to path', async () => {\n        await mockTargetServer.get(/\\/api\\/.+/).thenReply(200, 'HELLO /api');\n        const response = await agent.get(`/api/b/c/d`).expect(200);\n        expect(response.text).toBe('HELLO /api');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to paths ending with *.html","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","multi glob wildcard path matching"],"updatePoint":{"line":216,"column":50},"line":216,"code":"      it('should proxy to paths ending with *.html', async () => {\n        await mockTargetServer.get(/.+html$/).thenReply(200, 'HELLO .html');\n        const response = await agent.get(`/api/some/endpoint/index.html`).expect(200);\n        expect(response.text).toBe('HELLO .html');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should not proxy to paths ending with *.json","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","multi glob wildcard path matching"],"updatePoint":{"line":222,"column":54},"line":222,"code":"      it('should not proxy to paths ending with *.json', async () => {\n        await mockTargetServer.get(/.+json$/).thenReply(200, 'HELLO .html');\n        const response = await agent.get(`/api/some/endpoint/data.json`).expect(404);\n        expect(response.status).toBe(404);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should send request header \"host\" to target server","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.headers - additional request headers"],"updatePoint":{"line":241,"column":60},"line":241,"code":"      it('should send request header \"host\" to target server', async () => {\n        let completedRequest: CompletedRequest;\n\n        await mockTargetServer.get().thenCallback((req) => {\n          completedRequest = req;\n          return { statusCode: 200, body: 'OK' };\n        });\n\n        const response = await agent.get(`/api/some/endpoint/index.html`).expect(200);\n        expect(response.text).toBe('OK');\n        expect(completedRequest.headers.host).toBe('foobar.dev');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should handle errors when host is not reachable","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onError - with default error handling"],"updatePoint":{"line":266,"column":57},"line":266,"code":"      it('should handle errors when host is not reachable', async () => {\n        const response = await agent.get(`/api/some/endpoint`).expect(504);\n        expect(response.status).toBe(504);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should respond with custom http status code","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onError - custom error handling"],"updatePoint":{"line":289,"column":53},"line":289,"code":"      it('should respond with custom http status code', async () => {\n        const response = await agent.get(`/api/some/endpoint`).expect(418);\n        expect(response.status).toBe(418);\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should respond with custom status message","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onError - custom error handling"],"updatePoint":{"line":294,"column":51},"line":294,"code":"      it('should respond with custom status message', async () => {\n        const response = await agent.get(`/api/some/endpoint`).expect(418);\n        expect(response.text).toBe(\"I'm a teapot\");\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should add `x-added` as custom header to response\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onProxyRes"],"updatePoint":{"line":317,"column":60},"line":317,"code":"      it('should add `x-added` as custom header to response\"', async () => {\n        await mockTargetServer.get().thenReply(200, 'HELLO .html');\n        const response = await agent.get(`/api/some/endpoint/index.html`).expect(200);\n        expect(response.header['x-added']).toBe('foobar');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should remove `x-removed` field from response header\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onProxyRes"],"updatePoint":{"line":323,"column":63},"line":323,"code":"      it('should remove `x-removed` field from response header\"', async () => {\n        await mockTargetServer.get().thenCallback((req) => {\n          return {\n            statusCode: 200,\n            headers: {\n              'x-removed': 'this should be removed',\n            },\n          };\n        });\n        const response = await agent.get(`/api/some/endpoint/index.html`).expect(200);\n        expect(response.header['x-removed']).toBeUndefined();\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should add `x-added` as custom header to request\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.onProxyReq"],"updatePoint":{"line":351,"column":59},"line":351,"code":"      it('should add `x-added` as custom header to request\"', async () => {\n        let completedRequest: CompletedRequest;\n        await mockTargetServer.get().thenCallback((req) => {\n          completedRequest = req;\n          return { statusCode: 200 };\n        });\n\n        await agent.get(`/api/foo/bar`).expect(200);\n\n        expect(completedRequest.headers['x-added']).toBe('added-from-hpm');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have rewritten path from \"/api/foo/bar\" to \"/rest/foo/bar\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.pathRewrite"],"updatePoint":{"line":379,"column":75},"line":379,"code":"      it('should have rewritten path from \"/api/foo/bar\" to \"/rest/foo/bar\"', async () => {\n        await mockTargetServer.get('/rest/foo/bar').thenReply(200, 'HELLO /rest/foo/bar');\n        const response = await agent.get(`/api/foo/bar`).expect(200);\n        expect(response.text).toBe('HELLO /rest/foo/bar');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have removed path from \"/remove/api/lipsum\" to \"/api/lipsum\"","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.pathRewrite"],"updatePoint":{"line":385,"column":77},"line":385,"code":"      it('should have removed path from \"/remove/api/lipsum\" to \"/api/lipsum\"', async () => {\n        await mockTargetServer.get('/api/lipsum').thenReply(200, 'HELLO /api/lipsum');\n        const response = await agent.get(`/remove/api/lipsum`).expect(200);\n        expect(response.text).toBe('HELLO /api/lipsum');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have proxy with shorthand configuration","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","shorthand usage"],"updatePoint":{"line":399,"column":56},"line":399,"code":"      it('should have proxy with shorthand configuration', async () => {\n        await mockTargetServer.get('/api/foo/bar').thenReply(200, 'HELLO /api/foo/bar');\n        const response = await agent.get(`/api/foo/bar`).expect(200);\n        expect(response.text).toBe('HELLO /api/foo/bar');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to target with the baseUrl","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","express with path + proxy"],"updatePoint":{"line":416,"column":49},"line":416,"code":"      it('should proxy to target with the baseUrl', async () => {\n        await mockTargetServer.get('/api/foo/bar').thenReply(200, 'HELLO /api/foo/bar');\n        const response = await agent.get(`/api/foo/bar`).expect(200);\n        expect(response.text).toBe('HELLO /api/foo/bar');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should have logged messages","suites":["E2E http-proxy-middleware","http-proxy-middleware in actual server","option.logLevel & option.logProvider"],"updatePoint":{"line":445,"column":37},"line":445,"code":"      it('should have logged messages', async () => {\n        await mockTargetServer.get('/api/foo/bar').thenReply(200);\n        await agent.get(`/api/foo/bar`).expect(200);\n\n        expect(logMessages).not.toBeUndefined();\n        expect(logMessages.length).toBe(2);\n        expect(logMessages[0]).toContain('[HPM] Proxy created:');\n        expect(logMessages[1]).toBe('[HPM] server close signal received: closing proxy server');\n      });","file":"e2e/http-proxy-middleware.spec.ts","skipped":false,"dir":"test"},{"name":"should remove \"/foobar\" from path","suites":["E2E pathRewrite","Rewrite paths with rules table"],"updatePoint":{"line":18,"column":41},"line":18,"code":"    it('should remove \"/foobar\" from path', async () => {\n      mockTargetServer.get('/api/lorum/ipsum').thenReply(200, '/API RESPONSE AFTER PATH REWRITE');\n\n      const agent = request(\n        createApp(\n          createProxyMiddleware({\n            target: `http://localhost:${mockTargetServer.port}`,\n            pathRewrite: {\n              '^/foobar/api/': '/api/',\n            },\n          })\n        )\n      );\n\n      const response = await agent.get('/foobar/api/lorum/ipsum').expect(200);\n\n      expect(response.text).toBe('/API RESPONSE AFTER PATH REWRITE');\n    });","file":"e2e/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should remove \"/foobar\" from path","suites":["E2E pathRewrite","Rewrite paths with function"],"updatePoint":{"line":39,"column":41},"line":39,"code":"    it('should remove \"/foobar\" from path', async () => {\n      mockTargetServer\n        .get('/api/lorum/ipsum')\n        .thenReply(200, '/API RESPONSE AFTER PATH REWRITE FUNCTION');\n\n      const agent = request(\n        createApp(\n          createProxyMiddleware({\n            target: `http://localhost:${mockTargetServer.port}`,\n            pathRewrite(path, req) {\n              return path.replace('/foobar', '');\n            },\n          })\n        )\n      );\n\n      const response = await agent.get('/foobar/api/lorum/ipsum').expect(200);\n      expect(response.text).toBe('/API RESPONSE AFTER PATH REWRITE FUNCTION');\n    });","file":"e2e/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return totally different response from http://httpbin.org/json","suites":["responseInterceptor()","intercept responses"],"updatePoint":{"line":25,"column":77},"line":25,"code":"    it('should return totally different response from http://httpbin.org/json', async () => {\n      const response = await agent.get(`/json`).expect(200);\n      expect(response.body.foo).toEqual('bar');\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should return totally different response from http://httpbin.org/image","suites":["responseInterceptor()","intercept responses"],"updatePoint":{"line":30,"column":78},"line":30,"code":"    it('should return totally different response from http://httpbin.org/image', async () => {\n      const response = await agent\n        .get(`/image`)\n        .expect('Content-Type', 'application/json; charset=utf-8')\n        .expect(200);\n      expect(response.body.foo).toEqual('bar');\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should support double bytes characters http://httpbin.org/json","suites":["responseInterceptor()","intercept responses"],"updatePoint":{"line":38,"column":70},"line":38,"code":"    it('should support double bytes characters http://httpbin.org/json', async () => {\n      const response = await agent.get(`/json`).expect(200);\n      expect(response.body.favorite).toEqual('叉燒包');\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy and return original headers from http://httpbin.org/cookies/set/cookie/monster","suites":["responseInterceptor()","intercept responses with original headers"],"updatePoint":{"line":60,"column":99},"line":60,"code":"    it('should proxy and return original headers from http://httpbin.org/cookies/set/cookie/monster', async () => {\n      return agent\n        .get(`/cookies/set/cookie/monster`)\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect('Date', /.+/)\n        .expect('set-cookie', /.*cookie=monster.*/)\n        .expect(302);\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should return decompressed brotli response http://httpbin.org/brotli","suites":["responseInterceptor()","intercept compressed responses"],"updatePoint":{"line":84,"column":76},"line":84,"code":"    it('should return decompressed brotli response http://httpbin.org/brotli', async () => {\n      const response = await agent.get(`/brotli`).expect(200);\n      expect(response.body.brotli).toBe(true);\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should return decompressed gzipped response from http://httpbin.org/gzip","suites":["responseInterceptor()","intercept compressed responses"],"updatePoint":{"line":89,"column":80},"line":89,"code":"    it('should return decompressed gzipped response from http://httpbin.org/gzip', async () => {\n      const response = await agent.get(`/gzip`).expect(200);\n      expect(response.body.gzipped).toBe(true);\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should return decompressed deflated response from http://httpbin.org/deflate","suites":["responseInterceptor()","intercept compressed responses"],"updatePoint":{"line":94,"column":84},"line":94,"code":"    it('should return decompressed deflated response from http://httpbin.org/deflate', async () => {\n      const response = await agent.get(`/deflate`).expect(200);\n      expect(response.body.deflated).toBe(true);\n    });","file":"e2e/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should work with a string","suites":["E2E router","router with req"],"updatePoint":{"line":61,"column":33},"line":61,"code":"    it('should work with a string', async () => {\n      const app = createApp(\n        createProxyMiddleware({\n          target: `https://localhost:${targetPortA}`,\n          secure: false,\n          changeOrigin: true,\n          router(req) {\n            return `https://localhost:${targetPortC}`;\n          },\n        })\n      );\n\n      const agent = request(app);\n      const response = await agent.get('/api').expect(200);\n      expect(response.text).toBe('C');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should work with an object","suites":["E2E router","router with req"],"updatePoint":{"line":78,"column":34},"line":78,"code":"    it('should work with an object', async () => {\n      const app = createApp(\n        createProxyMiddleware({\n          target: `https://localhost:${targetPortA}`,\n          secure: false,\n          changeOrigin: true,\n          router(req) {\n            return { host: 'localhost', port: targetPortC, protocol: 'https:' };\n          },\n        })\n      );\n      const agent = request(app);\n      const response = await agent.get('/api').expect(200);\n      expect(response.text).toBe('C');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should work with an async callback","suites":["E2E router","router with req"],"updatePoint":{"line":94,"column":42},"line":94,"code":"    it('should work with an async callback', async () => {\n      const app = createApp(\n        createProxyMiddleware({\n          target: `https://localhost:${targetPortA}`,\n          secure: false,\n          changeOrigin: true,\n          router: async (req) => {\n            return new Promise((resolve) =>\n              resolve({ host: 'localhost', port: targetPortC, protocol: 'https:' })\n            );\n          },\n        })\n      );\n\n      const agent = request(app);\n      const response = await agent.get('/api').expect(200);\n      expect(response.text).toBe('C');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should handle promise rejection in router","suites":["E2E router","router with req"],"updatePoint":{"line":113,"column":49},"line":113,"code":"    it('should handle promise rejection in router', async () => {\n      const app = createApp(\n        createProxyMiddleware({\n          target: `https://localhost:${targetPortA}`,\n          secure: false,\n          changeOrigin: true,\n          router: async (req) => {\n            throw new Error('An error thrown in the router');\n          },\n        })\n      );\n      const errorHandler: ErrorRequestHandler = (err: Error, req, res, next) => {\n        res.status(502).send(err.message);\n      };\n      app.use(errorHandler);\n\n      const agent = request(app);\n      const response = await agent.get('/api').expect(502);\n      expect(response.text).toBe('An error thrown in the router');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"missing a : will cause it to use http","suites":["E2E router","router with req"],"updatePoint":{"line":134,"column":45},"line":134,"code":"    it('missing a : will cause it to use http', async () => {\n      const app = createApp(\n        createProxyMiddleware({\n          target: `https://localhost:${targetPortA}`,\n          secure: false,\n          changeOrigin: true,\n          router: async (req) => {\n            return new Promise((resolve) =>\n              resolve({ host: 'localhost', port: targetPortC, protocol: 'https' })\n            );\n          },\n        })\n      );\n\n      const agent = request(app);\n      const response = await agent.get('/api').expect(200);\n      expect(response.text).toBe('NOT HTTPS C');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to option.target","suites":["E2E router","router with proxyTable"],"updatePoint":{"line":175,"column":37},"line":175,"code":"    it('should proxy to option.target', async () => {\n      const response = await agent.get('/api').expect(200);\n\n      expect(response.text).toBe('A');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy when host is \"alpha.localhost\"","suites":["E2E router","router with proxyTable"],"updatePoint":{"line":181,"column":51},"line":181,"code":"    it('should proxy when host is \"alpha.localhost\"', async () => {\n      const response = await agent.get('/api').set('host', 'alpha.localhost:6000').expect(200);\n\n      expect(response.text).toBe('A');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy when host is \"beta.localhost\"","suites":["E2E router","router with proxyTable"],"updatePoint":{"line":187,"column":50},"line":187,"code":"    it('should proxy when host is \"beta.localhost\"', async () => {\n      const response = await agent.get('/api').set('host', 'beta.localhost:6000').expect(200);\n\n      expect(response.text).toBe('B');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy with host & path config: \"localhost:6000/api\"","suites":["E2E router","router with proxyTable"],"updatePoint":{"line":193,"column":66},"line":193,"code":"    it('should proxy with host & path config: \"localhost:6000/api\"', async () => {\n      const response = await agent.get('/api').set('host', 'localhost:6000').expect(200);\n\n      expect(response.text).toBe('C');\n    });","file":"e2e/router.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path","suites":["E2E WebSocket proxy","option.ws"],"updatePoint":{"line":69,"column":28},"line":69,"code":"    it('should proxy to path', (done) => {\n      ws.on('message', (data, isBinary) => {\n        const message = isBinary ? data : data.toString();\n        expect(message).toBe('foobar');\n        done();\n      });\n      ws.send('foobar');\n    });","file":"e2e/websocket.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path","suites":["E2E WebSocket proxy","option.ws with external server \"upgrade\""],"updatePoint":{"line":88,"column":28},"line":88,"code":"    it('should proxy to path', (done) => {\n      ws.on('message', (data, isBinary) => {\n        const message = isBinary ? data : data.toString();\n        expect(message).toBe('foobar');\n        done();\n      });\n      ws.send('foobar');\n    });","file":"e2e/websocket.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path","suites":["E2E WebSocket proxy","option.ws with external server \"upgrade\" and shorthand usage"],"updatePoint":{"line":114,"column":28},"line":114,"code":"    it('should proxy to path', (done) => {\n      ws.on('message', (data, isBinary) => {\n        const message = isBinary ? data : data.toString();\n        expect(message).toBe('foobar');\n        done();\n      });\n      ws.send('foobar');\n    });","file":"e2e/websocket.spec.ts","skipped":false,"dir":"test"},{"name":"should proxy to path","suites":["E2E WebSocket proxy","with router and pathRewrite"],"updatePoint":{"line":143,"column":28},"line":143,"code":"    it('should proxy to path', (done) => {\n      ws.on('message', (data, isBinary) => {\n        const message = isBinary ? data : data.toString();\n        expect(message).toBe('foobar');\n        done();\n      });\n      ws.send('foobar');\n    });","file":"e2e/websocket.spec.ts","skipped":false,"dir":"test"},{"name":"should create proxy with just options","suites":["http-proxy-middleware TypeScript Types"],"updatePoint":{"line":13,"column":43},"line":13,"code":"  it('should create proxy with just options', () => {\n    const proxy = middleware(options);\n    expect(proxy).toBeDefined();\n  });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should create proxy with path filter","suites":["http-proxy-middleware TypeScript Types","HPM Filters"],"updatePoint":{"line":19,"column":44},"line":19,"code":"    it('should create proxy with path filter', () => {\n      const proxy = middleware('/path', options);\n      expect(proxy).toBeDefined();\n    });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should create proxy with glob filter","suites":["http-proxy-middleware TypeScript Types","HPM Filters"],"updatePoint":{"line":24,"column":44},"line":24,"code":"    it('should create proxy with glob filter', () => {\n      const proxy = middleware(['/path/**'], options);\n      expect(proxy).toBeDefined();\n    });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should create proxy with custom filter","suites":["http-proxy-middleware TypeScript Types","HPM Filters"],"updatePoint":{"line":29,"column":46},"line":29,"code":"    it('should create proxy with custom filter', () => {\n      const proxy = middleware((path, req) => true, options);\n      expect(proxy).toBeDefined();\n    });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should create proxy with manual websocket upgrade function","suites":["http-proxy-middleware TypeScript Types","HPM Filters"],"updatePoint":{"line":34,"column":66},"line":34,"code":"    it('should create proxy with manual websocket upgrade function', () => {\n      const proxy = middleware((path, req) => true, options);\n      expect(proxy.upgrade).toBeDefined();\n    });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should extend from http-proxy options","suites":["http-proxy-middleware TypeScript Types","http-proxy options"],"updatePoint":{"line":41,"column":45},"line":41,"code":"    it('should extend from http-proxy options', () => {\n      options = {\n        target: 'http://example',\n        ws: true,\n      };\n      expect(options).toBeDefined();\n    });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have pathRewrite Type with table","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","pathRewrite"],"updatePoint":{"line":52,"column":49},"line":52,"code":"      it('should have pathRewrite Type with table', () => {\n        options = { pathRewrite: { '^/from': '/to' } };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have pathRewrite Type with function","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","pathRewrite"],"updatePoint":{"line":57,"column":52},"line":57,"code":"      it('should have pathRewrite Type with function', () => {\n        options = { pathRewrite: (path, req) => '/path' };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have pathRewrite Type with async function","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","pathRewrite"],"updatePoint":{"line":62,"column":58},"line":62,"code":"      it('should have pathRewrite Type with async function', () => {\n        options = { pathRewrite: async (path, req) => '/path' };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have router Type with table","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","router"],"updatePoint":{"line":69,"column":44},"line":69,"code":"      it('should have router Type with table', () => {\n        options = { router: { '^/from': '/to' } };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have router Type with function","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","router"],"updatePoint":{"line":74,"column":47},"line":74,"code":"      it('should have router Type with function', () => {\n        options = { router: (path) => '/path' };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have router Type with async function","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","router"],"updatePoint":{"line":79,"column":53},"line":79,"code":"      it('should have router Type with async function', () => {\n        options = { router: async (path) => '/path' };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have logLevel Type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","logLevel"],"updatePoint":{"line":86,"column":35},"line":86,"code":"      it('should have logLevel Type', () => {\n        options = { logLevel: 'info' };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have logProvider Type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","logProvider"],"updatePoint":{"line":93,"column":38},"line":93,"code":"      it('should have logProvider Type', () => {\n        options = {\n          logProvider: (currentProvider) => {\n            return {\n              log: () => {\n                return;\n              },\n              debug: () => {\n                return;\n              },\n              info: () => {\n                return;\n              },\n              warn: () => {\n                return;\n              },\n              error: () => {\n                return;\n              },\n            };\n          },\n        };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onError type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":120,"column":34},"line":120,"code":"      it('should have onError type', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        options = { onError: (err, req, res) => {} };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onProxyReq type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":126,"column":37},"line":126,"code":"      it('should have onProxyReq type', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        options = { onProxyReq: (proxyReq, req, res) => {} };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onProxyRes type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":132,"column":37},"line":132,"code":"      it('should have onProxyRes type', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        options = { onProxyRes: (proxyRes, req, res) => {} };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onProxyReqWs type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":138,"column":39},"line":138,"code":"      it('should have onProxyReqWs type', () => {\n        options = {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          onProxyReqWs: (proxyReq, req, socket, opts, head) => {},\n        };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onOpen type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":146,"column":33},"line":146,"code":"      it('should have onOpen type', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        options = { onOpen: (proxySocket) => {} };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should have onClose type","suites":["http-proxy-middleware TypeScript Types","http-proxy-middleware options","HPM http-proxy events"],"updatePoint":{"line":152,"column":34},"line":152,"code":"      it('should have onClose type', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        options = { onClose: (res, socket, head) => {} };\n        expect(options).toBeDefined();\n      });","file":"types.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object","suites":["configFactory","createConfig()","classic config"],"updatePoint":{"line":16,"column":37},"line":16,"code":"      it('should return config object', () => {\n        expect(Object.keys(result)).toEqual(['context', 'options']);\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","classic config"],"updatePoint":{"line":20,"column":50},"line":20,"code":"      it('should return config object with context', () => {\n        expect(result.context).toBe(context);\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with options","suites":["configFactory","createConfig()","classic config"],"updatePoint":{"line":24,"column":50},"line":24,"code":"      it('should return config object with options', () => {\n        expect(result.options).toEqual(options);\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object","suites":["configFactory","createConfig()","shorthand String","shorthand String config"],"updatePoint":{"line":35,"column":39},"line":35,"code":"        it('should return config object', () => {\n          expect(Object.keys(result)).toEqual(['context', 'options']);\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","shorthand String","shorthand String config"],"updatePoint":{"line":39,"column":52},"line":39,"code":"        it('should return config object with context', () => {\n          expect(result.context).toBe('/api');\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with options","suites":["configFactory","createConfig()","shorthand String","shorthand String config"],"updatePoint":{"line":43,"column":52},"line":43,"code":"        it('should return config object with options', () => {\n          expect(result.options).toEqual({\n            target: 'http://www.example.org:8000',\n          });\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","shorthand String","shorthand String config for whole domain"],"updatePoint":{"line":55,"column":52},"line":55,"code":"        it('should return config object with context', () => {\n          expect(result.context).toBe('/');\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","shorthand String","shorthand String config for websocket url"],"updatePoint":{"line":65,"column":52},"line":65,"code":"        it('should return config object with context', () => {\n          expect(result.context).toBe('/');\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return options with ws = true","suites":["configFactory","createConfig()","shorthand String","shorthand String config for websocket url"],"updatePoint":{"line":69,"column":48},"line":69,"code":"        it('should return options with ws = true', () => {\n          expect(result.options.ws).toBe(true);\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","shorthand String","shorthand String config for secure websocket url"],"updatePoint":{"line":79,"column":52},"line":79,"code":"        it('should return config object with context', () => {\n          expect(result.context).toBe('/');\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return options with ws = true","suites":["configFactory","createConfig()","shorthand String","shorthand String config for secure websocket url"],"updatePoint":{"line":83,"column":48},"line":83,"code":"        it('should return options with ws = true', () => {\n          expect(result.options.ws).toBe(true);\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with context","suites":["configFactory","createConfig()","shorthand String","shorthand String config with globbing"],"updatePoint":{"line":93,"column":52},"line":93,"code":"        it('should return config object with context', () => {\n          expect(result.context).toBe('/api/*.json');\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object with additional options","suites":["configFactory","createConfig()","shorthand String","shorthand String config with options"],"updatePoint":{"line":105,"column":63},"line":105,"code":"        it('should return config object with additional options', () => {\n          expect(result.options).toEqual({\n            changeOrigin: true,\n            target: 'http://www.example.org:8000',\n          });\n        });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should set the proxy path to everything","suites":["configFactory","createConfig()","shorthand Object config"],"updatePoint":{"line":119,"column":49},"line":119,"code":"      it('should set the proxy path to everything', () => {\n        expect(result.context).toBe('/');\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should return config object","suites":["configFactory","createConfig()","shorthand Object config"],"updatePoint":{"line":123,"column":37},"line":123,"code":"      it('should return config object', () => {\n        expect(result.options).toEqual({\n          target: 'http://www.example.org:8000',\n        });\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should throw an error when target and router option are missing","suites":["configFactory","createConfig()","missing option.target"],"updatePoint":{"line":139,"column":73},"line":139,"code":"      it('should throw an error when target and router option are missing', () => {\n        expect(fn).toThrowError(Error);\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw an error when target option is missing when router is used","suites":["configFactory","createConfig()","optional option.target when option.router is used"],"updatePoint":{"line":155,"column":85},"line":155,"code":"      it('should not throw an error when target option is missing when router is used', () => {\n        expect(fn).not.toThrowError(Error);\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should use the target in the configuration as target","suites":["configFactory","createConfig()","faulty config. mixing classic with shorthand"],"updatePoint":{"line":167,"column":62},"line":167,"code":"      it('should use the target in the configuration as target', () => {\n        expect(result.options.target).toBe('http://localhost:8000');\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should not use the host from the shorthand as target","suites":["configFactory","createConfig()","faulty config. mixing classic with shorthand"],"updatePoint":{"line":171,"column":62},"line":171,"code":"      it('should not use the host from the shorthand as target', () => {\n        expect(result.options.target).not.toBe('http://localhost:3000');\n      });","file":"unit/config-factory.spec.ts","skipped":false,"dir":"test"},{"name":"should match all paths","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":11,"column":32},"line":11,"code":"      it('should match all paths', () => {\n        result = contextMatcher.match('', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(true);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should match all paths starting with forward-slash","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":16,"column":60},"line":16,"code":"      it('should match all paths starting with forward-slash', () => {\n        result = contextMatcher.match('/', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(true);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return true when the context is present in url","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":21,"column":63},"line":21,"code":"      it('should return true when the context is present in url', () => {\n        result = contextMatcher.match('/api', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(true);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return false when the context is not present in url","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":26,"column":68},"line":26,"code":"      it('should return false when the context is not present in url', () => {\n        result = contextMatcher.match('/abc', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(false);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return false when the context is present half way in url","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":31,"column":73},"line":31,"code":"      it('should return false when the context is present half way in url', () => {\n        result = contextMatcher.match('/foo', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(false);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return false when the context does not start with /","suites":["Context Matching","String path matching","Single path matching"],"updatePoint":{"line":36,"column":68},"line":36,"code":"      it('should return false when the context does not start with /', () => {\n        result = contextMatcher.match('api', 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(false);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return true when the context is present in url","suites":["Context Matching","String path matching","Multi path matching"],"updatePoint":{"line":43,"column":63},"line":43,"code":"      it('should return true when the context is present in url', () => {\n        result = contextMatcher.match(['/api'], 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(true);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return true when the context is present in url","suites":["Context Matching","String path matching","Multi path matching"],"updatePoint":{"line":48,"column":63},"line":48,"code":"      it('should return true when the context is present in url', () => {\n        result = contextMatcher.match(['/api', '/ajax'], 'http://localhost/ajax/foo/bar', fakeReq);\n        expect(result).toBe(true);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return false when the context does not match url","suites":["Context Matching","String path matching","Multi path matching"],"updatePoint":{"line":53,"column":65},"line":53,"code":"      it('should return false when the context does not match url', () => {\n        result = contextMatcher.match(['/api', '/ajax'], 'http://localhost/foo/bar', fakeReq);\n        expect(result).toBe(false);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return false when empty array provided","suites":["Context Matching","String path matching","Multi path matching"],"updatePoint":{"line":58,"column":55},"line":58,"code":"      it('should return false when empty array provided', () => {\n        result = contextMatcher.match([], 'http://localhost/api/foo/bar', fakeReq);\n        expect(result).toBe(false);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should match any path","suites":["Context Matching","Wildcard path matching","Single glob","url-path matching"],"updatePoint":{"line":74,"column":33},"line":74,"code":"        it('should match any path', () => {\n          expect(contextMatcher.match('**', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/**', url, fakeReq)).toBe(true);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match paths starting with \"/api\" ","suites":["Context Matching","Wildcard path matching","Single glob","url-path matching"],"updatePoint":{"line":79,"column":57},"line":79,"code":"        it('should only match paths starting with \"/api\" ', () => {\n          expect(contextMatcher.match('/api/**', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/ajax/**', url, fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match paths starting with \"foo\" folder in it ","suites":["Context Matching","Wildcard path matching","Single glob","url-path matching"],"updatePoint":{"line":84,"column":69},"line":84,"code":"        it('should only match paths starting with \"foo\" folder in it ', () => {\n          expect(contextMatcher.match('**/foo/**', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('**/invalid/**', url, fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should match any path, file and extension","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":91,"column":53},"line":91,"code":"        it('should match any path, file and extension', () => {\n          expect(contextMatcher.match('**', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('**/*', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('**/*.*', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/**', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/**/*', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/**/*.*', url, fakeReq)).toBe(true);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match .html files","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":100,"column":41},"line":100,"code":"        it('should only match .html files', () => {\n          expect(contextMatcher.match('**/*.html', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/**/*.html', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('/*.htm', url, fakeReq)).toBe(false);\n          expect(contextMatcher.match('/*.jpg', url, fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match .html under root path","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":107,"column":51},"line":107,"code":"        it('should only match .html under root path', () => {\n          const pattern = '/*.html';\n          expect(contextMatcher.match(pattern, 'http://localhost/index.html', fakeReq)).toBe(true);\n          expect(\n            contextMatcher.match(pattern, 'http://localhost/some/path/index.html', fakeReq)\n          ).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should ignore query params","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":115,"column":38},"line":115,"code":"        it('should ignore query params', () => {\n          expect(\n            contextMatcher.match('/**/*.php', 'http://localhost/a/b/c.php?d=e&e=f', fakeReq)\n          ).toBe(true);\n          expect(\n            contextMatcher.match('/**/*.php?*', 'http://localhost/a/b/c.php?d=e&e=f', fakeReq)\n          ).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match any file in root path","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":124,"column":51},"line":124,"code":"        it('should only match any file in root path', () => {\n          expect(contextMatcher.match('/*', 'http://localhost/bar.html', fakeReq)).toBe(true);\n          expect(contextMatcher.match('/*.*', 'http://localhost/bar.html', fakeReq)).toBe(true);\n          expect(contextMatcher.match('/*', 'http://localhost/foo/bar.html', fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match .html file is in root path","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":130,"column":56},"line":130,"code":"        it('should only match .html file is in root path', () => {\n          expect(contextMatcher.match('/*.html', 'http://localhost/bar.html', fakeReq)).toBe(true);\n          expect(\n            contextMatcher.match('/*.html', 'http://localhost/api/foo/bar.html', fakeReq)\n          ).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should only match .html files in \"foo\" folder","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":137,"column":57},"line":137,"code":"        it('should only match .html files in \"foo\" folder', () => {\n          expect(contextMatcher.match('**/foo/*.html', url, fakeReq)).toBe(true);\n          expect(contextMatcher.match('**/bar/*.html', url, fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not match .html files","suites":["Context Matching","Wildcard path matching","Single glob","file matching"],"updatePoint":{"line":142,"column":40},"line":142,"code":"        it('should not match .html files', () => {\n          expect(contextMatcher.match('!**/*.html', url, fakeReq)).toBe(false);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return true when both path patterns match","suites":["Context Matching","Wildcard path matching","Multi glob matching","Multiple patterns"],"updatePoint":{"line":150,"column":60},"line":150,"code":"        it('should return true when both path patterns match', () => {\n          const pattern = ['/api/**', '/ajax/**'];\n          expect(contextMatcher.match(pattern, 'http://localhost/api/foo/bar.json', fakeReq)).toBe(\n            true\n          );\n          expect(contextMatcher.match(pattern, 'http://localhost/ajax/foo/bar.json', fakeReq)).toBe(\n            true\n          );\n          expect(contextMatcher.match(pattern, 'http://localhost/rest/foo/bar.json', fakeReq)).toBe(\n            false\n          );\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should return true when both file extensions pattern match","suites":["Context Matching","Wildcard path matching","Multi glob matching","Multiple patterns"],"updatePoint":{"line":162,"column":70},"line":162,"code":"        it('should return true when both file extensions pattern match', () => {\n          const pattern = ['/**/*.html', '/**/*.jpeg'];\n          expect(contextMatcher.match(pattern, 'http://localhost/api/foo/bar.html', fakeReq)).toBe(\n            true\n          );\n          expect(contextMatcher.match(pattern, 'http://localhost/api/foo/bar.jpeg', fakeReq)).toBe(\n            true\n          );\n          expect(contextMatcher.match(pattern, 'http://localhost/api/foo/bar.gif', fakeReq)).toBe(\n            false\n          );\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not match file extension","suites":["Context Matching","Wildcard path matching","Multi glob matching","Negation patterns"],"updatePoint":{"line":177,"column":43},"line":177,"code":"        it('should not match file extension', () => {\n          const url = 'http://localhost/api/foo/bar.html';\n          expect(contextMatcher.match(['**', '!**/*.html'], url, fakeReq)).toBe(false);\n          expect(contextMatcher.match(['**', '!**/*.json'], url, fakeReq)).toBe(true);\n        });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should match when function returns true","suites":["Context Matching","Use function for matching","truthy"],"updatePoint":{"line":196,"column":49},"line":196,"code":"      it('should match when function returns true', () => {\n        expect(testFunctionAsContext(true)).toBeTruthy();\n        expect(testFunctionAsContext('true')).toBeTruthy();\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not match when function returns falsy value","suites":["Context Matching","Use function for matching","falsy"],"updatePoint":{"line":203,"column":60},"line":203,"code":"      it('should not match when function returns falsy value', () => {\n        expect(testFunctionAsContext(undefined)).toBeFalsy();\n        expect(testFunctionAsContext(false)).toBeFalsy();\n        expect(testFunctionAsContext('')).toBeFalsy();\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should throw error with undefined","suites":["Context Matching","Test invalid contexts","Throw error"],"updatePoint":{"line":223,"column":43},"line":223,"code":"      it('should throw error with undefined', () => {\n        expect(testContext(undefined)).toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should throw error with null","suites":["Context Matching","Test invalid contexts","Throw error"],"updatePoint":{"line":227,"column":38},"line":227,"code":"      it('should throw error with null', () => {\n        expect(testContext(null)).toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should throw error with object literal","suites":["Context Matching","Test invalid contexts","Throw error"],"updatePoint":{"line":231,"column":48},"line":231,"code":"      it('should throw error with object literal', () => {\n        expect(testContext(fakeReq)).toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should throw error with integers","suites":["Context Matching","Test invalid contexts","Throw error"],"updatePoint":{"line":235,"column":42},"line":235,"code":"      it('should throw error with integers', () => {\n        expect(testContext(123)).toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should throw error with mixed string and glob pattern","suites":["Context Matching","Test invalid contexts","Throw error"],"updatePoint":{"line":239,"column":63},"line":239,"code":"      it('should throw error with mixed string and glob pattern', () => {\n        expect(testContext(['/api', '!*.html'])).toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw error with string","suites":["Context Matching","Test invalid contexts","Do not throw error"],"updatePoint":{"line":245,"column":44},"line":245,"code":"      it('should not throw error with string', () => {\n        expect(testContext('/123')).not.toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw error with Array","suites":["Context Matching","Test invalid contexts","Do not throw error"],"updatePoint":{"line":249,"column":43},"line":249,"code":"      it('should not throw error with Array', () => {\n        expect(testContext(['/123'])).not.toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw error with glob","suites":["Context Matching","Test invalid contexts","Do not throw error"],"updatePoint":{"line":252,"column":42},"line":252,"code":"      it('should not throw error with glob', () => {\n        expect(testContext('/**')).not.toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw error with Array of globs","suites":["Context Matching","Test invalid contexts","Do not throw error"],"updatePoint":{"line":256,"column":52},"line":256,"code":"      it('should not throw error with Array of globs', () => {\n        expect(testContext(['/**', '!*.html'])).not.toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw error with Function","suites":["Context Matching","Test invalid contexts","Do not throw error"],"updatePoint":{"line":260,"column":46},"line":260,"code":"      it('should not throw error with Function', () => {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        expect(testContext(() => {})).not.toThrowError(Error);\n      });","file":"unit/context-matcher.spec.ts","skipped":false,"dir":"test"},{"name":"should not write when body is undefined","suites":["fixRequestBody"],"updatePoint":{"line":15,"column":45},"line":15,"code":"  it('should not write when body is undefined', () => {\n    const proxyRequest = fakeProxyRequest();\n\n    jest.spyOn(proxyRequest, 'setHeader');\n    jest.spyOn(proxyRequest, 'write');\n\n    fixRequestBody(proxyRequest, { body: undefined } as Request);\n\n    expect(proxyRequest.setHeader).not.toHaveBeenCalled();\n    expect(proxyRequest.write).not.toHaveBeenCalled();\n  });","file":"unit/fix-request-body.spec.ts","skipped":false,"dir":"test"},{"name":"should write when body is an empty JSON object","suites":["fixRequestBody"],"updatePoint":{"line":27,"column":52},"line":27,"code":"  it('should write when body is an empty JSON object', () => {\n    const proxyRequest = fakeProxyRequest();\n    proxyRequest.setHeader('content-type', 'application/json; charset=utf-8');\n\n    jest.spyOn(proxyRequest, 'setHeader');\n    jest.spyOn(proxyRequest, 'write');\n\n    fixRequestBody(proxyRequest, { body: {} } as Request);\n\n    expect(proxyRequest.setHeader).toHaveBeenCalled();\n    expect(proxyRequest.write).toHaveBeenCalled();\n  });","file":"unit/fix-request-body.spec.ts","skipped":false,"dir":"test"},{"name":"should write when body is not empty and Content-Type is application/json","suites":["fixRequestBody"],"updatePoint":{"line":40,"column":78},"line":40,"code":"  it('should write when body is not empty and Content-Type is application/json', () => {\n    const proxyRequest = fakeProxyRequest();\n    proxyRequest.setHeader('content-type', 'application/json; charset=utf-8');\n\n    jest.spyOn(proxyRequest, 'setHeader');\n    jest.spyOn(proxyRequest, 'write');\n\n    fixRequestBody(proxyRequest, { body: { someField: 'some value' } } as Request);\n\n    const expectedBody = JSON.stringify({ someField: 'some value' });\n    expect(proxyRequest.setHeader).toHaveBeenCalledWith('Content-Length', expectedBody.length);\n    expect(proxyRequest.write).toHaveBeenCalledWith(expectedBody);\n  });","file":"unit/fix-request-body.spec.ts","skipped":false,"dir":"test"},{"name":"should write when body is not empty and Content-Type is application/x-www-form-urlencoded","suites":["fixRequestBody"],"updatePoint":{"line":54,"column":95},"line":54,"code":"  it('should write when body is not empty and Content-Type is application/x-www-form-urlencoded', () => {\n    const proxyRequest = fakeProxyRequest();\n    proxyRequest.setHeader('content-type', 'application/x-www-form-urlencoded');\n\n    jest.spyOn(proxyRequest, 'setHeader');\n    jest.spyOn(proxyRequest, 'write');\n\n    fixRequestBody(proxyRequest, { body: { someField: 'some value' } } as Request);\n\n    const expectedBody = querystring.stringify({ someField: 'some value' });\n    expect(proxyRequest.setHeader).toHaveBeenCalledWith('Content-Length', expectedBody.length);\n    expect(proxyRequest.write).toHaveBeenCalledWith(expectedBody);\n  });","file":"unit/fix-request-body.spec.ts","skipped":false,"dir":"test"},{"name":"should return default handlers when no handlers are provided","suites":["handlers factory"],"updatePoint":{"line":6,"column":66},"line":6,"code":"  it('should return default handlers when no handlers are provided', () => {\n    handlersMap = getHandlers(undefined);\n    expect(typeof handlersMap.error).toBe('function');\n    expect(typeof handlersMap.close).toBe('function');\n  });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should only return http-proxy handlers","suites":["handlers factory","custom handlers"],"updatePoint":{"line":33,"column":46},"line":33,"code":"    it('should only return http-proxy handlers', () => {\n      expect(typeof handlersMap.error).toBe('function');\n      expect(typeof handlersMap.open).toBe('function');\n      expect(typeof handlersMap.close).toBe('function');\n      expect(typeof handlersMap.proxyReq).toBe('function');\n      expect(typeof handlersMap.proxyReqWs).toBe('function');\n      expect(typeof handlersMap.proxyRes).toBe('function');\n      expect(handlersMap.dummy).toBeUndefined();\n      expect(handlersMap.foobar).toBeUndefined();\n      expect(handlersMap.target).toBeUndefined();\n    });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should use the provided custom handlers","suites":["handlers factory","custom handlers"],"updatePoint":{"line":45,"column":47},"line":45,"code":"    it('should use the provided custom handlers', () => {\n      expect(handlersMap.error()).toBe(42);\n      expect(handlersMap.open()).toBe(42);\n      expect(handlersMap.close()).toBe(42);\n      expect(handlersMap.proxyReq()).toBe(42);\n      expect(handlersMap.proxyReqWs()).toBe(42);\n      expect(handlersMap.proxyRes()).toBe(42);\n    });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should end the response and return error message","suites":["default proxy error handler"],"updatePoint":{"line":120,"column":54},"line":120,"code":"  it('should end the response and return error message', () => {\n    proxyError(mockError, mockReq, mockRes, proxyOptions);\n    expect(errorMessage).toBe('Error occurred while trying to proxy: localhost:3000/api');\n  });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should not set the http status code to: 500 if headers have already been sent","suites":["default proxy error handler"],"updatePoint":{"line":125,"column":83},"line":125,"code":"  it('should not set the http status code to: 500 if headers have already been sent', () => {\n    mockRes.headersSent = true;\n    proxyError(mockError, mockReq, mockRes, proxyOptions);\n    expect(httpErrorCode).toBeUndefined();\n  });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should end the response and return error message","suites":["default proxy error handler"],"updatePoint":{"line":131,"column":54},"line":131,"code":"  it('should end the response and return error message', () => {\n    mockRes.headersSent = true;\n    proxyError(mockError, mockReq, mockRes, proxyOptions);\n    expect(errorMessage).toBe('Error occurred while trying to proxy: localhost:3000/api');\n  });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should re-throw error from http-proxy when target is missing","suites":["default proxy error handler"],"updatePoint":{"line":137,"column":66},"line":137,"code":"  it('should re-throw error from http-proxy when target is missing', () => {\n    mockRes.headersSent = true;\n    const error = new Error('Must provide a proper URL as target');\n    const fn = () => proxyError(error, undefined, undefined, proxyOptions);\n    expect(fn).toThrowError(error);\n  });","file":"unit/handlers.spec.ts","skipped":false,"dir":"test"},{"name":"should log .log() messages","suites":["Logger","logging with different levels","level: debug"],"updatePoint":{"line":59,"column":36},"line":59,"code":"      it('should log .log() messages', () => {\n        expect(logMessage).toBe('log');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .debug() messages","suites":["Logger","logging with different levels","level: debug"],"updatePoint":{"line":62,"column":38},"line":62,"code":"      it('should log .debug() messages', () => {\n        expect(debugMessage).toBe('debug');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .info() messages","suites":["Logger","logging with different levels","level: debug"],"updatePoint":{"line":65,"column":37},"line":65,"code":"      it('should log .info() messages', () => {\n        expect(infoMessage).toBe('info');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .warn() messages","suites":["Logger","logging with different levels","level: debug"],"updatePoint":{"line":68,"column":37},"line":68,"code":"      it('should log .warn() messages', () => {\n        expect(warnMessage).toBe('warn');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .error() messages","suites":["Logger","logging with different levels","level: debug"],"updatePoint":{"line":71,"column":38},"line":71,"code":"      it('should log .error() messages', () => {\n        expect(errorMessage).toBe('error');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .log() messages","suites":["Logger","logging with different levels","level: info"],"updatePoint":{"line":81,"column":36},"line":81,"code":"      it('should log .log() messages', () => {\n        expect(logMessage).toBe('log');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .debug() messages","suites":["Logger","logging with different levels","level: info"],"updatePoint":{"line":84,"column":42},"line":84,"code":"      it('should not log .debug() messages', () => {\n        expect(debugMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .info() messages","suites":["Logger","logging with different levels","level: info"],"updatePoint":{"line":87,"column":37},"line":87,"code":"      it('should log .info() messages', () => {\n        expect(infoMessage).toBe('info');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .warn() messages","suites":["Logger","logging with different levels","level: info"],"updatePoint":{"line":90,"column":37},"line":90,"code":"      it('should log .warn() messages', () => {\n        expect(warnMessage).toBe('warn');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .error() messages","suites":["Logger","logging with different levels","level: info"],"updatePoint":{"line":93,"column":38},"line":93,"code":"      it('should log .error() messages', () => {\n        expect(errorMessage).toBe('error');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .log() messages","suites":["Logger","logging with different levels","level: warn"],"updatePoint":{"line":103,"column":36},"line":103,"code":"      it('should log .log() messages', () => {\n        expect(logMessage).toBe('log');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .debug() messages","suites":["Logger","logging with different levels","level: warn"],"updatePoint":{"line":106,"column":42},"line":106,"code":"      it('should not log .debug() messages', () => {\n        expect(debugMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .info() messages","suites":["Logger","logging with different levels","level: warn"],"updatePoint":{"line":109,"column":41},"line":109,"code":"      it('should not log .info() messages', () => {\n        expect(infoMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .warn() messages","suites":["Logger","logging with different levels","level: warn"],"updatePoint":{"line":112,"column":37},"line":112,"code":"      it('should log .warn() messages', () => {\n        expect(warnMessage).toBe('warn');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .error() messages","suites":["Logger","logging with different levels","level: warn"],"updatePoint":{"line":115,"column":38},"line":115,"code":"      it('should log .error() messages', () => {\n        expect(errorMessage).toBe('error');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .log() messages","suites":["Logger","logging with different levels","level: error"],"updatePoint":{"line":125,"column":36},"line":125,"code":"      it('should log .log() messages', () => {\n        expect(logMessage).toBe('log');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .debug() messages","suites":["Logger","logging with different levels","level: error"],"updatePoint":{"line":128,"column":42},"line":128,"code":"      it('should not log .debug() messages', () => {\n        expect(debugMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .info() messages","suites":["Logger","logging with different levels","level: error"],"updatePoint":{"line":131,"column":41},"line":131,"code":"      it('should not log .info() messages', () => {\n        expect(infoMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .warn() messages","suites":["Logger","logging with different levels","level: error"],"updatePoint":{"line":134,"column":37},"line":134,"code":"      it('should log .warn() messages', () => {\n        expect(warnMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .error() messages","suites":["Logger","logging with different levels","level: error"],"updatePoint":{"line":137,"column":38},"line":137,"code":"      it('should log .error() messages', () => {\n        expect(errorMessage).toBe('error');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should log .log() messages","suites":["Logger","logging with different levels","level: silent"],"updatePoint":{"line":147,"column":36},"line":147,"code":"      it('should log .log() messages', () => {\n        expect(logMessage).toBe('log');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .debug() messages","suites":["Logger","logging with different levels","level: silent"],"updatePoint":{"line":150,"column":42},"line":150,"code":"      it('should not log .debug() messages', () => {\n        expect(debugMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .info() messages","suites":["Logger","logging with different levels","level: silent"],"updatePoint":{"line":153,"column":41},"line":153,"code":"      it('should not log .info() messages', () => {\n        expect(infoMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .warn() messages","suites":["Logger","logging with different levels","level: silent"],"updatePoint":{"line":156,"column":41},"line":156,"code":"      it('should not log .warn() messages', () => {\n        expect(warnMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should not log .error() messages","suites":["Logger","logging with different levels","level: silent"],"updatePoint":{"line":159,"column":42},"line":159,"code":"      it('should not log .error() messages', () => {\n        expect(errorMessage).toBeUndefined();\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should interpolate .log() messages","suites":["Logger","logging with different levels","Interpolation"],"updatePoint":{"line":178,"column":44},"line":178,"code":"      it('should interpolate .log() messages', () => {\n        expect(logMessage).toBe('log 123 456');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should interpolate .debug() messages","suites":["Logger","logging with different levels","Interpolation"],"updatePoint":{"line":181,"column":46},"line":181,"code":"      it('should interpolate .debug() messages', () => {\n        expect(debugMessage).toBe('debug 123 456');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should interpolate .info() messages","suites":["Logger","logging with different levels","Interpolation"],"updatePoint":{"line":184,"column":45},"line":184,"code":"      it('should interpolate .info() messages', () => {\n        expect(infoMessage).toBe('info 123 456');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should interpolate .warn() messages","suites":["Logger","logging with different levels","Interpolation"],"updatePoint":{"line":187,"column":45},"line":187,"code":"      it('should interpolate .warn() messages', () => {\n        expect(warnMessage).toBe('warn 123 456');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should interpolate .error() messages","suites":["Logger","logging with different levels","Interpolation"],"updatePoint":{"line":190,"column":46},"line":190,"code":"      it('should interpolate .error() messages', () => {\n        expect(errorMessage).toBe('error 123 456');\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Logger","Erroneous usage.","Log provider is not a function"],"updatePoint":{"line":206,"column":31},"line":206,"code":"      it('should throw an error', () => {\n        expect(fn).toThrowError(Error);\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should throw an error","suites":["Logger","Erroneous usage.","Invalid logLevel"],"updatePoint":{"line":218,"column":31},"line":218,"code":"      it('should throw an error', () => {\n        expect(fn).toThrowError(Error);\n      });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should return arrow:  \"->\"","suites":["getArrow","default arrow"],"updatePoint":{"line":234,"column":34},"line":234,"code":"    it('should return arrow:  \"->\"', () => {\n      expect(arrow).toBe('->');\n    });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should return arrow:  \"~>\"","suites":["getArrow","\"pathRewrite\" arrow"],"updatePoint":{"line":244,"column":34},"line":244,"code":"    it('should return arrow:  \"~>\"', () => {\n      expect(arrow).toBe('~>');\n    });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should return arrow:  \"=>\"","suites":["getArrow","\"router\" arrow"],"updatePoint":{"line":254,"column":34},"line":254,"code":"    it('should return arrow:  \"=>\"', () => {\n      expect(arrow).toBe('=>');\n    });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should return arrow:  \"≈>\"","suites":["getArrow","\"pathRewrite\" + \"router\" arrow"],"updatePoint":{"line":264,"column":34},"line":264,"code":"    it('should return arrow:  \"≈>\"', () => {\n      expect(arrow).toBe('≈>');\n    });","file":"unit/logger.spec.ts","skipped":false,"dir":"test"},{"name":"should rewrite path","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":24,"column":27},"line":24,"code":"    it('should rewrite path', () => {\n      result = rewriter('/api/old/index.json');\n      expect(result).toBe('/api/new/index.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should remove path","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":29,"column":26},"line":29,"code":"    it('should remove path', () => {\n      result = rewriter('/remove/old/index.json');\n      expect(result).toBe('/old/index.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should leave path intact","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":34,"column":32},"line":34,"code":"    it('should leave path intact', () => {\n      result = rewriter('/foo/bar/index.json');\n      expect(result).toBe('/foo/bar/index.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should not rewrite path when config-key does not match url with test(regex)","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":39,"column":83},"line":39,"code":"    it('should not rewrite path when config-key does not match url with test(regex)', () => {\n      result = rewriter('/invalid/bar/foo.json');\n      expect(result).toBe('/path/new/bar/foo.json');\n      expect(result).not.toBe('/invalid/new/bar/foo.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should rewrite path when config-key does match url with test(regex)","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":45,"column":75},"line":45,"code":"    it('should rewrite path when config-key does match url with test(regex)', () => {\n      result = rewriter('/valid/foo/bar.json');\n      expect(result).toBe('/path/new/foo/bar.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return first match when similar paths are configured","suites":["Path rewriting","Rewrite rules configuration and usage"],"updatePoint":{"line":50,"column":67},"line":50,"code":"    it('should return first match when similar paths are configured', () => {\n      result = rewriter('/some/specific/path/bar.json');\n      expect(result).toBe('/awe/some/specific/path/bar.json');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should add base path to requests","suites":["Path rewriting","Rewrite rule: add base path to requests"],"updatePoint":{"line":67,"column":40},"line":67,"code":"    it('should add base path to requests', () => {\n      result = rewriter('/api/books/123');\n      expect(result).toBe('/extra/base/path/api/books/123');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return unmodified path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":82,"column":37},"line":82,"code":"    it('should return unmodified path', () => {\n      const rewriteFn = (path) => {\n        return path;\n      };\n\n      expect(rewriter(rewriteFn)).toBe('/123/456');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return alternative path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":90,"column":38},"line":90,"code":"    it('should return alternative path', () => {\n      const rewriteFn = (path) => {\n        return '/foo/bar';\n      };\n\n      expect(rewriter(rewriteFn)).toBe('/foo/bar');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return replaced path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":98,"column":35},"line":98,"code":"    it('should return replaced path', () => {\n      const rewriteFn = (path) => {\n        return path.replace('/456', '/789');\n      };\n\n      expect(rewriter(rewriteFn)).toBe('/123/789');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"is async and should return unmodified path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":108,"column":50},"line":108,"code":"    it('is async and should return unmodified path', () => {\n      const rewriteFn = async (path) => {\n        const promise = new Promise((resolve, reject) => {\n          resolve(path);\n        });\n        const changed = await promise;\n        return changed;\n      };\n\n      return expect(rewriter(rewriteFn)).resolves.toBe('/123/456');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"is async and should return alternative path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":120,"column":51},"line":120,"code":"    it('is async and should return alternative path', () => {\n      const rewriteFn = async (path) => {\n        const promise = new Promise((resolve, reject) => {\n          resolve('/foo/bar');\n        });\n        const changed = await promise;\n        return changed;\n      };\n\n      return expect(rewriter(rewriteFn)).resolves.toBe('/foo/bar');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"is async and should return replaced path","suites":["Path rewriting","Rewrite function"],"updatePoint":{"line":132,"column":48},"line":132,"code":"    it('is async and should return replaced path', () => {\n      const rewriteFn = async (path) => {\n        const promise = new Promise((resolve, reject) => {\n          resolve(path.replace('/456', '/789'));\n        });\n        const changed = await promise;\n        return changed;\n      };\n\n      return expect(rewriter(rewriteFn)).resolves.toBe('/123/789');\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should return undefined when no config is provided","suites":["Path rewriting","Invalid configuration"],"updatePoint":{"line":156,"column":58},"line":156,"code":"    it('should return undefined when no config is provided', () => {\n      expect(badFn()()).toBeUndefined();\n      expect(badFn(null)()).toBeUndefined();\n      expect(badFn(undefined)()).toBeUndefined();\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should throw when bad config is provided","suites":["Path rewriting","Invalid configuration"],"updatePoint":{"line":162,"column":48},"line":162,"code":"    it('should throw when bad config is provided', () => {\n      expect(badFn(123)).toThrowError(Error);\n      expect(badFn('abc')).toThrowError(Error);\n      expect(badFn([])).toThrowError(Error);\n      expect(badFn([1, 2, 3])).toThrowError(Error);\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw when empty Object config is provided","suites":["Path rewriting","Invalid configuration"],"updatePoint":{"line":169,"column":61},"line":169,"code":"    it('should not throw when empty Object config is provided', () => {\n      expect(badFn({})).not.toThrowError(Error);\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw when function config is provided","suites":["Path rewriting","Invalid configuration"],"updatePoint":{"line":173,"column":57},"line":173,"code":"    it('should not throw when function config is provided', () => {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      expect(badFn(() => {})).not.toThrowError(Error);\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should not throw when async function config is provided","suites":["Path rewriting","Invalid configuration"],"updatePoint":{"line":178,"column":63},"line":178,"code":"    it('should not throw when async function config is provided', () => {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      expect(badFn(async () => {})).not.toThrowError(Error);\n    });","file":"unit/path-rewriter.spec.ts","skipped":false,"dir":"test"},{"name":"should write body on end proxy event","suites":["responseInterceptor"],"updatePoint":{"line":26,"column":42},"line":26,"code":"  it('should write body on end proxy event', async () => {\n    const httpIncomingMessage = fakeProxyResponse();\n    const response = fakeResponse();\n\n    responseInterceptor(async () => JSON.stringify({ someField: '' }))(\n      httpIncomingMessage,\n      null,\n      response\n    );\n\n    httpIncomingMessage.emit('end');\n    await waitInterceptorHandler();\n\n    const expectedBody = JSON.stringify({ someField: '' });\n    expect(response.setHeader).toHaveBeenCalledWith('content-length', expectedBody.length);\n    expect(response.write).toHaveBeenCalledWith(Buffer.from(expectedBody));\n    expect(response.end).toHaveBeenCalledWith();\n  });","file":"unit/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should end with error when receive a proxy error event","suites":["responseInterceptor"],"updatePoint":{"line":45,"column":60},"line":45,"code":"  it('should end with error when receive a proxy error event', async () => {\n    const httpIncomingMessage = fakeProxyResponse();\n    const response = fakeResponse();\n\n    responseInterceptor(async () => JSON.stringify({ someField: '' }))(\n      httpIncomingMessage,\n      null,\n      response\n    );\n\n    httpIncomingMessage.emit('error', new Error('some error message'));\n\n    expect(response.setHeader).not.toHaveBeenCalled();\n    expect(response.write).not.toHaveBeenCalled();\n    expect(response.end).toHaveBeenCalledWith('Error fetching proxied request: some error message');\n  });","file":"unit/response-interceptor.spec.ts","skipped":false,"dir":"test"},{"name":"should provide the request object for dynamic routing","suites":["router unit test","router.getTarget from function","custom dynamic router function"],"updatePoint":{"line":38,"column":63},"line":38,"code":"      it('should provide the request object for dynamic routing', () => {\n        expect(request.headers.host).toBe('localhost');\n        expect(request.url).toBe('/');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should return new target","suites":["router unit test","router.getTarget from function","custom dynamic router function"],"updatePoint":{"line":42,"column":34},"line":42,"code":"      it('should return new target', () => {\n        return expect(result).resolves.toBe('http://foobar.com:666');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should provide the request object for dynamic routing","suites":["router unit test","router.getTarget from async function","custom dynamic router async function"],"updatePoint":{"line":64,"column":63},"line":64,"code":"      it('should provide the request object for dynamic routing', () => {\n        expect(request.headers.host).toBe('localhost');\n        expect(request.url).toBe('/');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should return new target","suites":["router unit test","router.getTarget from async function","custom dynamic router async function"],"updatePoint":{"line":68,"column":34},"line":68,"code":"      it('should return new target', () => {\n        return expect(result).resolves.toBe('http://foobar.com:666');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should return the normal target when router not present in config","suites":["router unit test","router.getTarget from table","without router config"],"updatePoint":{"line":91,"column":75},"line":91,"code":"      it('should return the normal target when router not present in config', () => {\n        result = getTarget(fakeReq, config);\n        return expect(result).resolves.toBeUndefined();\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6001 when for router:\"alpha.localhost\"","suites":["router unit test","router.getTarget from table","with just the host in router config"],"updatePoint":{"line":98,"column":79},"line":98,"code":"      it('should target http://localhost:6001 when for router:\"alpha.localhost\"', () => {\n        fakeReq.headers.host = 'alpha.localhost';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6001');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6002 when for router:\"beta.localhost\"","suites":["router unit test","router.getTarget from table","with just the host in router config"],"updatePoint":{"line":104,"column":78},"line":104,"code":"      it('should target http://localhost:6002 when for router:\"beta.localhost\"', () => {\n        fakeReq.headers.host = 'beta.localhost';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6002');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6004 without path","suites":["router unit test","router.getTarget from table","with host and host + path config"],"updatePoint":{"line":112,"column":58},"line":112,"code":"      it('should target http://localhost:6004 without path', () => {\n        fakeReq.headers.host = 'gamma.localhost';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6004');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6003 exact path match","suites":["router unit test","router.getTarget from table","with host and host + path config"],"updatePoint":{"line":118,"column":62},"line":118,"code":"      it('should target http://localhost:6003 exact path match', () => {\n        fakeReq.headers.host = 'gamma.localhost';\n        fakeReq.url = '/api';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6003');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6004 when contains path","suites":["router unit test","router.getTarget from table","with host and host + path config"],"updatePoint":{"line":125,"column":64},"line":125,"code":"      it('should target http://localhost:6004 when contains path', () => {\n        fakeReq.headers.host = 'gamma.localhost';\n        fakeReq.url = '/api/books/123';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6003');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6005 with just a path as router config","suites":["router unit test","router.getTarget from table","with just the path"],"updatePoint":{"line":134,"column":79},"line":134,"code":"      it('should target http://localhost:6005 with just a path as router config', () => {\n        fakeReq.url = '/rest';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6005');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6005 with just a path as router config","suites":["router unit test","router.getTarget from table","with just the path"],"updatePoint":{"line":140,"column":79},"line":140,"code":"      it('should target http://localhost:6005 with just a path as router config', () => {\n        fakeReq.url = '/rest/deep/path';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6005');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should target http://localhost:6000 path in not present in router config","suites":["router unit test","router.getTarget from table","with just the path"],"updatePoint":{"line":146,"column":82},"line":146,"code":"      it('should target http://localhost:6000 path in not present in router config', () => {\n        fakeReq.url = '/unknown-path';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBeUndefined();\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"},{"name":"should return first matching target when similar paths are configured","suites":["router unit test","router.getTarget from table","matching order of router config"],"updatePoint":{"line":154,"column":79},"line":154,"code":"      it('should return first matching target when similar paths are configured', () => {\n        fakeReq.url = '/some/specific/path';\n        result = getTarget(fakeReq, proxyOptionWithRouter);\n        return expect(result).resolves.toBe('http://localhost:6006');\n      });","file":"unit/router.spec.ts","skipped":false,"dir":"test"}]}