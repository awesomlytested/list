{"repo":"expressjs/multer","url":"https://github.com/expressjs/multer","branch":"master","configs":[{"package":"multer","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should process parser/form-data POST request","suites":["Disk Storage"],"updatePoint":{"line":35,"column":50,"index":702},"line":35,"code":"  it('should process parser/form-data POST request', function (done) {\n    var form = new FormData();\n    var parser = upload.single('small0');\n    form.append('name', 'Multer');\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.body.name, 'Multer');\n      assert.strictEqual(req.file.fieldname, 'small0');\n      assert.strictEqual(req.file.originalname, 'small0.dat');\n      assert.strictEqual(req.file.size, 1778);\n      assert.strictEqual(util.fileSize(req.file.path), 1778);\n      done();\n    });\n  });","file":"disk-storage.js","skipped":false,"dir":"test"},{"name":"should process empty fields and an empty file","suites":["Disk Storage"],"updatePoint":{"line":50,"column":51,"index":1324},"line":50,"code":"  it('should process empty fields and an empty file', function (done) {\n    var form = new FormData();\n    var parser = upload.single('empty');\n    form.append('empty', util.file('empty.dat'));\n    form.append('name', 'Multer');\n    form.append('version', '');\n    form.append('year', '');\n    form.append('checkboxfull', 'cb1');\n    form.append('checkboxfull', 'cb2');\n    form.append('checkboxhalfempty', 'cb1');\n    form.append('checkboxhalfempty', '');\n    form.append('checkboxempty', '');\n    form.append('checkboxempty', '');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.body.name, 'Multer');\n      assert.strictEqual(req.body.version, '');\n      assert.strictEqual(req.body.year, '');\n      assert(deepEqual(req.body.checkboxfull, ['cb1', 'cb2']));\n      assert(deepEqual(req.body.checkboxhalfempty, ['cb1', '']));\n      assert(deepEqual(req.body.checkboxempty, ['', '']));\n      assert.strictEqual(req.file.fieldname, 'empty');\n      assert.strictEqual(req.file.originalname, 'empty.dat');\n      assert.strictEqual(req.file.size, 0);\n      assert.strictEqual(util.fileSize(req.file.path), 0);\n      done();\n    });\n  });","file":"disk-storage.js","skipped":false,"dir":"test"},{"name":"should process multiple files","suites":["Disk Storage"],"updatePoint":{"line":78,"column":35,"index":2505},"line":78,"code":"  it('should process multiple files', function (done) {\n    var form = new FormData();\n    var parser = upload.fields([{\n      name: 'empty',\n      maxCount: 1\n    }, {\n      name: 'tiny0',\n      maxCount: 1\n    }, {\n      name: 'tiny1',\n      maxCount: 1\n    }, {\n      name: 'small0',\n      maxCount: 1\n    }, {\n      name: 'small1',\n      maxCount: 1\n    }, {\n      name: 'medium',\n      maxCount: 1\n    }, {\n      name: 'large',\n      maxCount: 1\n    }]);\n    form.append('empty', util.file('empty.dat'));\n    form.append('tiny0', util.file('tiny0.dat'));\n    form.append('tiny1', util.file('tiny1.dat'));\n    form.append('small0', util.file('small0.dat'));\n    form.append('small1', util.file('small1.dat'));\n    form.append('medium', util.file('medium.dat'));\n    form.append('large', util.file('large.jpg'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert(deepEqual(req.body, {}));\n      assert.strictEqual(req.files.empty[0].fieldname, 'empty');\n      assert.strictEqual(req.files.empty[0].originalname, 'empty.dat');\n      assert.strictEqual(req.files.empty[0].size, 0);\n      assert.strictEqual(util.fileSize(req.files.empty[0].path), 0);\n      assert.strictEqual(req.files.tiny0[0].fieldname, 'tiny0');\n      assert.strictEqual(req.files.tiny0[0].originalname, 'tiny0.dat');\n      assert.strictEqual(req.files.tiny0[0].size, 122);\n      assert.strictEqual(util.fileSize(req.files.tiny0[0].path), 122);\n      assert.strictEqual(req.files.tiny1[0].fieldname, 'tiny1');\n      assert.strictEqual(req.files.tiny1[0].originalname, 'tiny1.dat');\n      assert.strictEqual(req.files.tiny1[0].size, 7);\n      assert.strictEqual(util.fileSize(req.files.tiny1[0].path), 7);\n      assert.strictEqual(req.files.small0[0].fieldname, 'small0');\n      assert.strictEqual(req.files.small0[0].originalname, 'small0.dat');\n      assert.strictEqual(req.files.small0[0].size, 1778);\n      assert.strictEqual(util.fileSize(req.files.small0[0].path), 1778);\n      assert.strictEqual(req.files.small1[0].fieldname, 'small1');\n      assert.strictEqual(req.files.small1[0].originalname, 'small1.dat');\n      assert.strictEqual(req.files.small1[0].size, 315);\n      assert.strictEqual(util.fileSize(req.files.small1[0].path), 315);\n      assert.strictEqual(req.files.medium[0].fieldname, 'medium');\n      assert.strictEqual(req.files.medium[0].originalname, 'medium.dat');\n      assert.strictEqual(req.files.medium[0].size, 13196);\n      assert.strictEqual(util.fileSize(req.files.medium[0].path), 13196);\n      assert.strictEqual(req.files.large[0].fieldname, 'large');\n      assert.strictEqual(req.files.large[0].originalname, 'large.jpg');\n      assert.strictEqual(req.files.large[0].size, 2413677);\n      assert.strictEqual(util.fileSize(req.files.large[0].path), 2413677);\n      done();\n    });\n  });","file":"disk-storage.js","skipped":false,"dir":"test"},{"name":"should remove uploaded files on error","suites":["Disk Storage"],"updatePoint":{"line":143,"column":43,"index":5351},"line":143,"code":"  it('should remove uploaded files on error', function (done) {\n    var form = new FormData();\n    var parser = upload.single('tiny0');\n    form.append('tiny0', util.file('tiny0.dat'));\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'small0');\n      assert(deepEqual(err.storageErrors, []));\n      var files = fs.readdirSync(uploadDir);\n      assert(deepEqual(files, []));\n      done();\n    });\n  });","file":"disk-storage.js","skipped":false,"dir":"test"},{"name":"should report error when directory doesn't exist","suites":["Disk Storage"],"updatePoint":{"line":157,"column":55,"index":5922},"line":157,"code":"  it('should report error when directory doesn\\'t exist', function (done) {\n    var directory = path.join(temp.mkdirSync(), 'ghost');\n\n    function dest($0, $1, cb) {\n      cb(null, directory);\n    }\n\n    var storage = multer.diskStorage({\n      destination: dest\n    });\n    var upload = multer({\n      storage: storage\n    });\n    var parser = upload.single('tiny0');\n    var form = new FormData();\n    form.append('tiny0', util.file('tiny0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'ENOENT');\n      assert.strictEqual(path.dirname(err.path), directory);\n      done();\n    });\n  });","file":"disk-storage.js","skipped":false,"dir":"test"},{"name":"should be an instance of both `Error` and `MulterError` classes in case of the Multer's error","suites":["Error Handling"],"updatePoint":{"line":23,"column":100,"index":517},"line":23,"code":"  it('should be an instance of both `Error` and `MulterError` classes in case of the Multer\\'s error', function (done) {\n    var form = new FormData();\n    var storage = multer.diskStorage({\n      destination: os.tmpdir()\n    });\n    var upload = multer({\n      storage: storage\n    }).fields([{\n      name: 'small0',\n      maxCount: 1\n    }]);\n    form.append('small0', util.file('small0.dat'));\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(upload, form, function (err, req) {\n      assert.strictEqual(err instanceof Error, true);\n      assert.strictEqual(err instanceof multer.MulterError, true);\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect parts limit","suites":["Error Handling"],"updatePoint":{"line":42,"column":32,"index":1103},"line":42,"code":"  it('should respect parts limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      parts: 1\n    }, [{\n      name: 'small0',\n      maxCount: 1\n    }]);\n    form.append('field0', 'BOOM!');\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_PART_COUNT');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect file size limit","suites":["Error Handling"],"updatePoint":{"line":57,"column":36,"index":1523},"line":57,"code":"  it('should respect file size limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      fileSize: 1500\n    }, [{\n      name: 'tiny0',\n      maxCount: 1\n    }, {\n      name: 'small0',\n      maxCount: 1\n    }]);\n    form.append('tiny0', util.file('tiny0.dat'));\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FILE_SIZE');\n      assert.strictEqual(err.field, 'small0');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect file count limit","suites":["Error Handling"],"updatePoint":{"line":76,"column":37,"index":2058},"line":76,"code":"  it('should respect file count limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      files: 1\n    }, [{\n      name: 'small0',\n      maxCount: 1\n    }, {\n      name: 'small1',\n      maxCount: 1\n    }]);\n    form.append('small0', util.file('small0.dat'));\n    form.append('small1', util.file('small1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FILE_COUNT');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect file key limit","suites":["Error Handling"],"updatePoint":{"line":94,"column":35,"index":2542},"line":94,"code":"  it('should respect file key limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      fieldNameSize: 4\n    }, [{\n      name: 'small0',\n      maxCount: 1\n    }]);\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FIELD_KEY');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect field key limit","suites":["Error Handling"],"updatePoint":{"line":108,"column":36,"index":2933},"line":108,"code":"  it('should respect field key limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      fieldNameSize: 4\n    }, []);\n    form.append('ok', 'SMILE');\n    form.append('blowup', 'BOOM!');\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FIELD_KEY');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect field value limit","suites":["Error Handling"],"updatePoint":{"line":120,"column":38,"index":3295},"line":120,"code":"  it('should respect field value limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      fieldSize: 16\n    }, []);\n    form.append('field0', 'This is okay');\n    form.append('field1', 'This will make the parser explode');\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FIELD_VALUE');\n      assert.strictEqual(err.field, 'field1');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect field count limit","suites":["Error Handling"],"updatePoint":{"line":133,"column":38,"index":3742},"line":133,"code":"  it('should respect field count limit', function (done) {\n    var form = new FormData();\n    var parser = withLimits({\n      fields: 1\n    }, []);\n    form.append('field0', 'BOOM!');\n    form.append('field1', 'BOOM!');\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FIELD_COUNT');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should respect fields given","suites":["Error Handling"],"updatePoint":{"line":145,"column":33,"index":4098},"line":145,"code":"  it('should respect fields given', function (done) {\n    var form = new FormData();\n    var parser = withLimits(undefined, [{\n      name: 'wrongname',\n      maxCount: 1\n    }]);\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'small0');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should notify of missing field name","suites":["Error Handling"],"updatePoint":{"line":158,"column":41,"index":4529},"line":158,"code":"  it('should notify of missing field name', function (done) {\n    var req = new stream.PassThrough();\n    var storage = multer.memoryStorage();\n    var upload = multer({\n      storage: storage\n    }).single('tiny0');\n    var boundary = 'AaB03x';\n    var body = ['--' + boundary, 'Content-Disposition: form-data', '', 'test content', '--' + boundary, ''].join('\\r\\n');\n    req.headers = {\n      'content-type': 'multipart/form-data; boundary=' + boundary,\n      'content-length': body.length\n    };\n    req.end(body);\n    upload(req, null, function (err) {\n      assert.strictEqual(err.code, 'MISSING_FIELD_NAME');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should report errors from storage engines","suites":["Error Handling"],"updatePoint":{"line":176,"column":47,"index":5177},"line":176,"code":"  it('should report errors from storage engines', function (done) {\n    var storage = multer.memoryStorage();\n\n    storage._removeFile = function _removeFile(req, file, cb) {\n      var err = new Error('Test error');\n      err.code = 'TEST';\n      cb(err);\n    };\n\n    var form = new FormData();\n    var upload = multer({\n      storage: storage\n    });\n    var parser = upload.single('tiny0');\n    form.append('tiny0', util.file('tiny0.dat'));\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'small0');\n      assert.strictEqual(err.storageErrors.length, 1);\n      assert.strictEqual(err.storageErrors[0].code, 'TEST');\n      assert.strictEqual(err.storageErrors[0].field, 'tiny0');\n      assert.strictEqual(err.storageErrors[0].file, req.file);\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should report errors from busboy constructor","suites":["Error Handling"],"updatePoint":{"line":202,"column":50,"index":6109},"line":202,"code":"  it('should report errors from busboy constructor', function (done) {\n    var req = new stream.PassThrough();\n    var storage = multer.memoryStorage();\n    var upload = multer({\n      storage: storage\n    }).single('tiny0');\n    var body = 'test';\n    req.headers = {\n      'content-type': 'multipart/form-data',\n      'content-length': body.length\n    };\n    req.end(body);\n    upload(req, null, function (err) {\n      assert.strictEqual(err.message, 'Multipart: Boundary not found');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should report errors from busboy parsing","suites":["Error Handling"],"updatePoint":{"line":219,"column":46,"index":6620},"line":219,"code":"  it('should report errors from busboy parsing', function (done) {\n    var req = new stream.PassThrough();\n    var storage = multer.memoryStorage();\n    var upload = multer({\n      storage: storage\n    }).single('tiny0');\n    var boundary = 'AaB03x';\n    var body = ['--' + boundary, 'Content-Disposition: form-data; name=\"tiny0\"; filename=\"test.txt\"', 'Content-Type: text/plain', '', 'test without end boundary'].join('\\r\\n');\n    req.headers = {\n      'content-type': 'multipart/form-data; boundary=' + boundary,\n      'content-length': body.length\n    };\n    req.end(body);\n    upload(req, null, function (err) {\n      assert.strictEqual(err.message, 'Unexpected end of multipart data');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should gracefully handle more than one error at a time","suites":["Error Handling"],"updatePoint":{"line":237,"column":60,"index":7353},"line":237,"code":"  it('should gracefully handle more than one error at a time', function (done) {\n    var form = new FormData();\n    var storage = multer.diskStorage({\n      destination: os.tmpdir()\n    });\n    var upload = multer({\n      storage: storage,\n      limits: {\n        fileSize: 1,\n        files: 1\n      }\n    }).fields([{\n      name: 'small0',\n      maxCount: 1\n    }]);\n    form.append('small0', util.file('small0.dat'));\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(upload, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_FILE_SIZE');\n      done();\n    });\n  });","file":"error-handling.js","skipped":false,"dir":"test"},{"name":"should reject single unexpected file","suites":["Expected files"],"updatePoint":{"line":16,"column":42,"index":322},"line":16,"code":"  it('should reject single unexpected file', function (done) {\n    var form = new FormData();\n    var parser = upload.single('butme');\n    form.append('notme', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'notme');\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should reject array of multiple files","suites":["Expected files"],"updatePoint":{"line":26,"column":43,"index":700},"line":26,"code":"  it('should reject array of multiple files', function (done) {\n    var form = new FormData();\n    var parser = upload.array('butme', 4);\n    form.append('notme', util.file('small0.dat'));\n    form.append('notme', util.file('small1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'notme');\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should reject overflowing arrays","suites":["Expected files"],"updatePoint":{"line":37,"column":38,"index":1126},"line":37,"code":"  it('should reject overflowing arrays', function (done) {\n    var form = new FormData();\n    var parser = upload.array('butme', 1);\n    form.append('butme', util.file('small0.dat'));\n    form.append('butme', util.file('small1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'butme');\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should accept files with expected fieldname","suites":["Expected files"],"updatePoint":{"line":48,"column":49,"index":1563},"line":48,"code":"  it('should accept files with expected fieldname', function (done) {\n    var form = new FormData();\n    var parser = upload.fields([{\n      name: 'butme',\n      maxCount: 2\n    }, {\n      name: 'andme',\n      maxCount: 2\n    }]);\n    form.append('butme', util.file('small0.dat'));\n    form.append('butme', util.file('small1.dat'));\n    form.append('andme', util.file('empty.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files.butme.length, 2);\n      assert.strictEqual(req.files.andme.length, 1);\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should reject files with unexpected fieldname","suites":["Expected files"],"updatePoint":{"line":67,"column":51,"index":2165},"line":67,"code":"  it('should reject files with unexpected fieldname', function (done) {\n    var form = new FormData();\n    var parser = upload.fields([{\n      name: 'butme',\n      maxCount: 2\n    }, {\n      name: 'andme',\n      maxCount: 2\n    }]);\n    form.append('butme', util.file('small0.dat'));\n    form.append('butme', util.file('small1.dat'));\n    form.append('andme', util.file('empty.dat'));\n    form.append('notme', util.file('empty.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(err.field, 'notme');\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should allow any file to come thru","suites":["Expected files"],"updatePoint":{"line":86,"column":40,"index":2780},"line":86,"code":"  it('should allow any file to come thru', function (done) {\n    var form = new FormData();\n    var parser = upload.any();\n    form.append('butme', util.file('small0.dat'));\n    form.append('butme', util.file('small1.dat'));\n    form.append('andme', util.file('empty.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files.length, 3);\n      assert.strictEqual(req.files[0].fieldname, 'butme');\n      assert.strictEqual(req.files[1].fieldname, 'butme');\n      assert.strictEqual(req.files[2].fieldname, 'andme');\n      done();\n    });\n  });","file":"expected-files.js","skipped":false,"dir":"test"},{"name":"should work with express error handling","suites":["Express Integration"],"updatePoint":{"line":39,"column":45,"index":854},"line":39,"code":"  it('should work with express error handling', function (done) {\n    var limits = {\n      fileSize: 200\n    };\n    var upload = multer({\n      limits: limits\n    });\n    var router = new express.Router();\n    var form = new FormData();\n    var routeCalled = 0;\n    var errorCalled = 0;\n    form.append('avatar', util.file('large.jpg'));\n    router.post('/profile', upload.single('avatar'), function (req, res, next) {\n      routeCalled++;\n      res.status(200).end('SUCCESS');\n    });\n    router.use(function (err, req, res, next) {\n      assert.strictEqual(err.code, 'LIMIT_FILE_SIZE');\n      errorCalled++;\n      res.status(500).end('ERROR');\n    });\n    app.use('/t1', router);\n    submitForm(form, '/t1/profile', function (err, res, body) {\n      assert.ifError(err);\n      assert.strictEqual(routeCalled, 0);\n      assert.strictEqual(errorCalled, 1);\n      assert.strictEqual(body.toString(), 'ERROR');\n      assert.strictEqual(res.statusCode, 500);\n      done();\n    });\n  });","file":"express-integration.js","skipped":false,"dir":"test"},{"name":"should work when receiving error from fileFilter","suites":["Express Integration"],"updatePoint":{"line":70,"column":54,"index":1847},"line":70,"code":"  it('should work when receiving error from fileFilter', function (done) {\n    function fileFilter(req, file, cb) {\n      cb(new Error('TEST'));\n    }\n\n    var upload = multer({\n      fileFilter: fileFilter\n    });\n    var router = new express.Router();\n    var form = new FormData();\n    var routeCalled = 0;\n    var errorCalled = 0;\n    form.append('avatar', util.file('large.jpg'));\n    router.post('/profile', upload.single('avatar'), function (req, res, next) {\n      routeCalled++;\n      res.status(200).end('SUCCESS');\n    });\n    router.use(function (err, req, res, next) {\n      assert.strictEqual(err.message, 'TEST');\n      errorCalled++;\n      res.status(500).end('ERROR');\n    });\n    app.use('/t2', router);\n    submitForm(form, '/t2/profile', function (err, res, body) {\n      assert.ifError(err);\n      assert.strictEqual(routeCalled, 0);\n      assert.strictEqual(errorCalled, 1);\n      assert.strictEqual(body.toString(), 'ERROR');\n      assert.strictEqual(res.statusCode, 500);\n      done();\n    });\n  });","file":"express-integration.js","skipped":false,"dir":"test"},{"name":"should process multiple fields","suites":["Fields"],"updatePoint":{"line":21,"column":36,"index":427},"line":21,"code":"  it('should process multiple fields', function (done) {\n    var form = new FormData();\n    form.append('name', 'Multer');\n    form.append('key', 'value');\n    form.append('abc', 'xyz');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert(deepEqual(req.body, {\n        name: 'Multer',\n        key: 'value',\n        abc: 'xyz'\n      }));\n      done();\n    });\n  });","file":"fields.js","skipped":false,"dir":"test"},{"name":"should process empty fields","suites":["Fields"],"updatePoint":{"line":36,"column":33,"index":833},"line":36,"code":"  it('should process empty fields', function (done) {\n    var form = new FormData();\n    form.append('name', 'Multer');\n    form.append('key', '');\n    form.append('abc', '');\n    form.append('checkboxfull', 'cb1');\n    form.append('checkboxfull', 'cb2');\n    form.append('checkboxhalfempty', 'cb1');\n    form.append('checkboxhalfempty', '');\n    form.append('checkboxempty', '');\n    form.append('checkboxempty', '');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert(deepEqual(req.body, {\n        name: 'Multer',\n        key: '',\n        abc: '',\n        checkboxfull: ['cb1', 'cb2'],\n        checkboxhalfempty: ['cb1', ''],\n        checkboxempty: ['', '']\n      }));\n      done();\n    });\n  });","file":"fields.js","skipped":false,"dir":"test"},{"name":"should not process non-multipart POST request","suites":["Fields"],"updatePoint":{"line":60,"column":51,"index":1595},"line":60,"code":"  it('should not process non-multipart POST request', function (done) {\n    var req = new stream.PassThrough();\n    req.end('name=Multer');\n    req.method = 'POST';\n    req.headers = {\n      'content-type': 'application/x-www-form-urlencoded',\n      'content-length': 11\n    };\n    parser(req, null, function (err) {\n      assert.ifError(err);\n      assert.strictEqual(Object.prototype.hasOwnProperty.call(req, 'body'), false);\n      assert.strictEqual(Object.prototype.hasOwnProperty.call(req, 'files'), false);\n      done();\n    });\n  });","file":"fields.js","skipped":false,"dir":"test"},{"name":"should not process non-multipart GET request","suites":["Fields"],"updatePoint":{"line":75,"column":50,"index":2135},"line":75,"code":"  it('should not process non-multipart GET request', function (done) {\n    var req = new stream.PassThrough();\n    req.end('name=Multer');\n    req.method = 'GET';\n    req.headers = {\n      'content-type': 'application/x-www-form-urlencoded',\n      'content-length': 11\n    };\n    parser(req, null, function (err) {\n      assert.ifError(err);\n      assert.strictEqual(Object.prototype.hasOwnProperty.call(req, 'body'), false);\n      assert.strictEqual(Object.prototype.hasOwnProperty.call(req, 'files'), false);\n      done();\n    });\n  });","file":"fields.js","skipped":false,"dir":"test"},{"name":"should convert arrays into objects","suites":["Fields"],"updatePoint":{"line":103,"column":40,"index":3068},"line":103,"code":"  it('should convert arrays into objects', function (done) {\n    var form = new FormData();\n    form.append('obj[0]', 'a');\n    form.append('obj[2]', 'c');\n    form.append('obj[x]', 'yz');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert(deepEqual(req.body, {\n        obj: {\n          0: 'a',\n          2: 'c',\n          x: 'yz'\n        }\n      }));\n      done();\n    });\n  });","file":"fields.js","skipped":false,"dir":"test"},{"name":"should skip some files","suites":["File Filter"],"updatePoint":{"line":25,"column":28,"index":473},"line":25,"code":"  it('should skip some files', function (done) {\n    var form = new FormData();\n    var upload = withFilter(skipSpecificFile);\n    var parser = upload.fields([{\n      name: 'notme',\n      maxCount: 1\n    }, {\n      name: 'butme',\n      maxCount: 1\n    }]);\n    form.append('notme', util.file('tiny0.dat'));\n    form.append('butme', util.file('tiny1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files.notme, undefined);\n      assert.strictEqual(req.files.butme[0].fieldname, 'butme');\n      assert.strictEqual(req.files.butme[0].originalname, 'tiny1.dat');\n      assert.strictEqual(req.files.butme[0].size, 7);\n      assert.strictEqual(req.files.butme[0].buffer.length, 7);\n      done();\n    });\n  });","file":"file-filter.js","skipped":false,"dir":"test"},{"name":"should report errors from fileFilter","suites":["File Filter"],"updatePoint":{"line":47,"column":42,"index":1263},"line":47,"code":"  it('should report errors from fileFilter', function (done) {\n    var form = new FormData();\n    var upload = withFilter(reportFakeError);\n    var parser = upload.single('test');\n    form.append('test', util.file('tiny0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.strictEqual(err.message, 'Fake error');\n      done();\n    });\n  });","file":"file-filter.js","skipped":false,"dir":"test"},{"name":"should present files in same order as they came","suites":["File ordering"],"updatePoint":{"line":11,"column":53,"index":250},"line":11,"code":"  it('should present files in same order as they came', function (done) {\n    var storage = multer.memoryStorage();\n    var upload = multer({\n      storage: storage\n    });\n    var parser = upload.array('themFiles', 2);\n    var i = 0;\n    var calls = [{}, {}];\n    var pending = 2;\n    var _handleFile = storage._handleFile;\n\n    storage._handleFile = function (req, file, cb) {\n      var id = i++;\n\n      _handleFile.call(this, req, file, function (err, info) {\n        if (err) return cb(err);\n        calls[id].cb = cb;\n        calls[id].info = info;\n\n        if (--pending === 0) {\n          calls[1].cb(null, calls[1].info);\n          calls[0].cb(null, calls[0].info);\n        }\n      });\n    };\n\n    var form = new FormData();\n    form.append('themFiles', util.file('small0.dat'));\n    form.append('themFiles', util.file('small1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files.length, 2);\n      assert.strictEqual(req.files[0].originalname, 'small0.dat');\n      assert.strictEqual(req.files[1].originalname, 'small1.dat');\n      done();\n    });\n  });","file":"file-ordering.js","skipped":false,"dir":"test"},{"name":"should upload the file to the `dest` dir","suites":["Functionality"],"updatePoint":{"line":46,"column":46,"index":1013},"line":46,"code":"  it('should upload the file to the `dest` dir', function (done) {\n    makeStandardEnv(function (err, env) {\n      if (err) return done(err);\n      var parser = env.upload.single('small0');\n      env.form.append('small0', util.file('small0.dat'));\n      util.submitForm(parser, env.form, function (err, req) {\n        assert.ifError(err);\n        assert.ok(startsWith(req.file.path, env.uploadDir));\n        assert.strictEqual(util.fileSize(req.file.path), 1778);\n        done();\n      });\n    });\n  });","file":"functionality.js","skipped":false,"dir":"test"},{"name":"should rename the uploaded file","suites":["Functionality"],"updatePoint":{"line":59,"column":37,"index":1508},"line":59,"code":"  it('should rename the uploaded file', function (done) {\n    makeStandardEnv(function (err, env) {\n      if (err) return done(err);\n      var parser = env.upload.single('small0');\n      env.form.append('small0', util.file('small0.dat'));\n      util.submitForm(parser, env.form, function (err, req) {\n        assert.ifError(err);\n        assert.strictEqual(req.file.filename, 'small0small0.dat');\n        done();\n      });\n    });\n  });","file":"functionality.js","skipped":false,"dir":"test"},{"name":"should ensure all req.files values (single-file per field) point to an array","suites":["Functionality"],"updatePoint":{"line":71,"column":82,"index":1990},"line":71,"code":"  it('should ensure all req.files values (single-file per field) point to an array', function (done) {\n    makeStandardEnv(function (err, env) {\n      if (err) return done(err);\n      var parser = env.upload.single('tiny0');\n      env.form.append('tiny0', util.file('tiny0.dat'));\n      util.submitForm(parser, env.form, function (err, req) {\n        assert.ifError(err);\n        assert.strictEqual(req.file.filename, 'tiny0tiny0.dat');\n        done();\n      });\n    });\n  });","file":"functionality.js","skipped":false,"dir":"test"},{"name":"should ensure all req.files values (multi-files per field) point to an array","suites":["Functionality"],"updatePoint":{"line":83,"column":82,"index":2467},"line":83,"code":"  it('should ensure all req.files values (multi-files per field) point to an array', function (done) {\n    makeStandardEnv(function (err, env) {\n      if (err) return done(err);\n      var parser = env.upload.array('themFiles', 2);\n      env.form.append('themFiles', util.file('small0.dat'));\n      env.form.append('themFiles', util.file('small1.dat'));\n      util.submitForm(parser, env.form, function (err, req) {\n        assert.ifError(err);\n        assert.strictEqual(req.files.length, 2);\n        assert.strictEqual(req.files[0].filename, 'themFilessmall0.dat');\n        assert.strictEqual(req.files[1].filename, 'themFilessmall1.dat');\n        done();\n      });\n    });\n  });","file":"functionality.js","skipped":false,"dir":"test"},{"name":"should rename the destination directory to a different directory","suites":["Functionality"],"updatePoint":{"line":98,"column":70,"index":3136},"line":98,"code":"  it('should rename the destination directory to a different directory', function (done) {\n    var storage = multer.diskStorage({\n      destination: function (req, file, cb) {\n        temp.template('testforme-%s').mkdir(function (err, uploadDir) {\n          if (err) return cb(err);\n          cleanup.push(uploadDir);\n          cb(null, uploadDir);\n        });\n      },\n      filename: generateFilename\n    });\n    var form = new FormData();\n    var upload = multer({\n      storage: storage\n    });\n    var parser = upload.array('themFiles', 2);\n    form.append('themFiles', util.file('small0.dat'));\n    form.append('themFiles', util.file('small1.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files.length, 2);\n      assert.ok(req.files[0].path.indexOf('/testforme-') >= 0);\n      assert.ok(req.files[1].path.indexOf('/testforme-') >= 0);\n      done();\n    });\n  });","file":"functionality.js","skipped":false,"dir":"test"},{"name":"should report limit errors","suites":["Issue #232"],"updatePoint":{"line":32,"column":32,"index":633},"line":32,"code":"  it('should report limit errors', function (done) {\n    var form = new FormData();\n    var parser = upload.single('file');\n    form.append('file', util.file('large.jpg'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ok(err, 'an error was given');\n      assert.strictEqual(err.code, 'LIMIT_FILE_SIZE');\n      assert.strictEqual(err.field, 'file');\n      done();\n    });\n  });","file":"issue-232.js","skipped":false,"dir":"test"},{"name":"should process multipart/form-data POST request","suites":["Memory Storage"],"updatePoint":{"line":18,"column":53,"index":373},"line":18,"code":"  it('should process multipart/form-data POST request', function (done) {\n    var form = new FormData();\n    var parser = upload.single('small0');\n    form.append('name', 'Multer');\n    form.append('small0', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.body.name, 'Multer');\n      assert.strictEqual(req.file.fieldname, 'small0');\n      assert.strictEqual(req.file.originalname, 'small0.dat');\n      assert.strictEqual(req.file.size, 1778);\n      assert.strictEqual(req.file.buffer.length, 1778);\n      done();\n    });\n  });","file":"memory-storage.js","skipped":false,"dir":"test"},{"name":"should process empty fields and an empty file","suites":["Memory Storage"],"updatePoint":{"line":33,"column":51,"index":989},"line":33,"code":"  it('should process empty fields and an empty file', function (done) {\n    var form = new FormData();\n    var parser = upload.single('empty');\n    form.append('empty', util.file('empty.dat'));\n    form.append('name', 'Multer');\n    form.append('version', '');\n    form.append('year', '');\n    form.append('checkboxfull', 'cb1');\n    form.append('checkboxfull', 'cb2');\n    form.append('checkboxhalfempty', 'cb1');\n    form.append('checkboxhalfempty', '');\n    form.append('checkboxempty', '');\n    form.append('checkboxempty', '');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.body.name, 'Multer');\n      assert.strictEqual(req.body.version, '');\n      assert.strictEqual(req.body.year, '');\n      assert(deepEqual(req.body.checkboxfull, ['cb1', 'cb2']));\n      assert(deepEqual(req.body.checkboxhalfempty, ['cb1', '']));\n      assert(deepEqual(req.body.checkboxempty, ['', '']));\n      assert.strictEqual(req.file.fieldname, 'empty');\n      assert.strictEqual(req.file.originalname, 'empty.dat');\n      assert.strictEqual(req.file.size, 0);\n      assert.strictEqual(req.file.buffer.length, 0);\n      assert.strictEqual(Buffer.isBuffer(req.file.buffer), true);\n      done();\n    });\n  });","file":"memory-storage.js","skipped":false,"dir":"test"},{"name":"should process multiple files","suites":["Memory Storage"],"updatePoint":{"line":62,"column":35,"index":2230},"line":62,"code":"  it('should process multiple files', function (done) {\n    var form = new FormData();\n    var parser = upload.fields([{\n      name: 'empty',\n      maxCount: 1\n    }, {\n      name: 'tiny0',\n      maxCount: 1\n    }, {\n      name: 'tiny1',\n      maxCount: 1\n    }, {\n      name: 'small0',\n      maxCount: 1\n    }, {\n      name: 'small1',\n      maxCount: 1\n    }, {\n      name: 'medium',\n      maxCount: 1\n    }, {\n      name: 'large',\n      maxCount: 1\n    }]);\n    form.append('empty', util.file('empty.dat'));\n    form.append('tiny0', util.file('tiny0.dat'));\n    form.append('tiny1', util.file('tiny1.dat'));\n    form.append('small0', util.file('small0.dat'));\n    form.append('small1', util.file('small1.dat'));\n    form.append('medium', util.file('medium.dat'));\n    form.append('large', util.file('large.jpg'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert(deepEqual(req.body, {}));\n      assert.strictEqual(req.files.empty[0].fieldname, 'empty');\n      assert.strictEqual(req.files.empty[0].originalname, 'empty.dat');\n      assert.strictEqual(req.files.empty[0].size, 0);\n      assert.strictEqual(req.files.empty[0].buffer.length, 0);\n      assert.strictEqual(req.files.tiny0[0].fieldname, 'tiny0');\n      assert.strictEqual(req.files.tiny0[0].originalname, 'tiny0.dat');\n      assert.strictEqual(req.files.tiny0[0].size, 122);\n      assert.strictEqual(req.files.tiny0[0].buffer.length, 122);\n      assert.strictEqual(req.files.tiny1[0].fieldname, 'tiny1');\n      assert.strictEqual(req.files.tiny1[0].originalname, 'tiny1.dat');\n      assert.strictEqual(req.files.tiny1[0].size, 7);\n      assert.strictEqual(req.files.tiny1[0].buffer.length, 7);\n      assert.strictEqual(req.files.small0[0].fieldname, 'small0');\n      assert.strictEqual(req.files.small0[0].originalname, 'small0.dat');\n      assert.strictEqual(req.files.small0[0].size, 1778);\n      assert.strictEqual(req.files.small0[0].buffer.length, 1778);\n      assert.strictEqual(req.files.small1[0].fieldname, 'small1');\n      assert.strictEqual(req.files.small1[0].originalname, 'small1.dat');\n      assert.strictEqual(req.files.small1[0].size, 315);\n      assert.strictEqual(req.files.small1[0].buffer.length, 315);\n      assert.strictEqual(req.files.medium[0].fieldname, 'medium');\n      assert.strictEqual(req.files.medium[0].originalname, 'medium.dat');\n      assert.strictEqual(req.files.medium[0].size, 13196);\n      assert.strictEqual(req.files.medium[0].buffer.length, 13196);\n      assert.strictEqual(req.files.large[0].fieldname, 'large');\n      assert.strictEqual(req.files.large[0].originalname, 'large.jpg');\n      assert.strictEqual(req.files.large[0].size, 2413677);\n      assert.strictEqual(req.files.large[0].buffer.length, 2413677);\n      done();\n    });\n  });","file":"memory-storage.js","skipped":false,"dir":"test"},{"name":"should not allow file uploads","suites":["None"],"updatePoint":{"line":15,"column":35,"index":296},"line":15,"code":"  it('should not allow file uploads', function (done) {\n    var form = new FormData();\n    form.append('key1', 'val1');\n    form.append('key2', 'val2');\n    form.append('file', util.file('small0.dat'));\n    util.submitForm(parser, form, function (err, req) {\n      assert.ok(err);\n      assert.strictEqual(err.code, 'LIMIT_UNEXPECTED_FILE');\n      assert.strictEqual(req.files, undefined);\n      assert.strictEqual(req.body.key1, 'val1');\n      assert.strictEqual(req.body.key2, 'val2');\n      done();\n    });\n  });","file":"none.js","skipped":false,"dir":"test"},{"name":"should handle text fields","suites":["None"],"updatePoint":{"line":29,"column":31,"index":808},"line":29,"code":"  it('should handle text fields', function (done) {\n    var form = new FormData();\n    form.append('key1', 'val1');\n    form.append('key2', 'val2');\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(req.files, undefined);\n      assert.strictEqual(req.body.key1, 'val1');\n      assert.strictEqual(req.body.key2, 'val2');\n      done();\n    });\n  });","file":"none.js","skipped":false,"dir":"test"},{"name":"should accept multiple requests","suites":["Reuse Middleware"],"updatePoint":{"line":16,"column":37,"index":339},"line":16,"code":"  it('should accept multiple requests', function (done) {\n    var pending = 8;\n\n    function submitData(fileCount) {\n      var form = new FormData();\n      form.append('name', 'Multer');\n      form.append('files', '' + fileCount);\n\n      for (var i = 0; i < fileCount; i++) {\n        form.append('them-files', util.file('small0.dat'));\n      }\n\n      util.submitForm(parser, form, function (err, req) {\n        assert.ifError(err);\n        assert.strictEqual(req.body.name, 'Multer');\n        assert.strictEqual(req.body.files, '' + fileCount);\n        assert.strictEqual(req.files.length, fileCount);\n        req.files.forEach(function (file) {\n          assert.strictEqual(file.fieldname, 'them-files');\n          assert.strictEqual(file.originalname, 'small0.dat');\n          assert.strictEqual(file.size, 1778);\n          assert.strictEqual(file.buffer.length, 1778);\n        });\n        if (--pending === 0) done();\n      });\n    }\n\n    submitData(9);\n    submitData(1);\n    submitData(5);\n    submitData(7);\n    submitData(2);\n    submitData(8);\n    submitData(3);\n    submitData(4);\n  });","file":"reuse-middleware.js","skipped":false,"dir":"test"},{"name":"should select the first file with fieldname","suites":["Select Field"],"updatePoint":{"line":46,"column":49,"index":1150},"line":46,"code":"  it('should select the first file with fieldname', function (done) {\n    util.submitForm(parser, generateForm(), function (err, req) {\n      assert.ifError(err);\n      var file;\n      file = req.files['CA$|-|'][0];\n      assert.strictEqual(file.fieldname, 'CA$|-|');\n      assert.strictEqual(file.originalname, 'empty.dat');\n      file = req.files['set-1'][0];\n      assert.strictEqual(file.fieldname, 'set-1');\n      assert.strictEqual(file.originalname, 'tiny0.dat');\n      file = req.files['set-2'][0];\n      assert.strictEqual(file.fieldname, 'set-2');\n      assert.strictEqual(file.originalname, 'tiny1.dat');\n      done();\n    });\n  });","file":"select-field.js","skipped":false,"dir":"test"},{"name":"should select all files with fieldname","suites":["Select Field"],"updatePoint":{"line":62,"column":44,"index":1789},"line":62,"code":"  it('should select all files with fieldname', function (done) {\n    util.submitForm(parser, generateForm(), function (err, req) {\n      assert.ifError(err);\n      assertSet(req.files['CA$|-|'], 'CA$|-|', ['empty.dat']);\n      assertSet(req.files['set-1'], 'set-1', ['tiny0.dat', 'empty.dat', 'tiny1.dat']);\n      assertSet(req.files['set-2'], 'set-2', ['tiny1.dat', 'tiny0.dat', 'empty.dat']);\n      done();\n    });\n  });","file":"select-field.js","skipped":false,"dir":"test"},{"name":"should handle unicode filenames","suites":["Unicode"],"updatePoint":{"line":37,"column":37,"index":797},"line":37,"code":"  it('should handle unicode filenames', function (done) {\n    var form = new FormData();\n    var parser = upload.single('small0');\n    var filename = '\\ud83d\\udca9.dat';\n    form.append('small0', util.file('small0.dat'), {\n      filename: filename\n    });\n    util.submitForm(parser, form, function (err, req) {\n      assert.ifError(err);\n      assert.strictEqual(path.basename(req.file.path), filename);\n      assert.strictEqual(req.file.originalname, filename);\n      assert.strictEqual(req.file.fieldname, 'small0');\n      assert.strictEqual(req.file.size, 1778);\n      assert.strictEqual(util.fileSize(req.file.path), 1778);\n      done();\n    });\n  });","file":"unicode.js","skipped":false,"dir":"test"}]}