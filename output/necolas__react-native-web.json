{"repo":"necolas/react-native-web","url":"https://github.com/necolas/react-native-web","branch":"master","configs":[{"package":"babel-plugin-react-native-web","lang":"js","dir":"packages/babel-plugin-react-native-web/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"dom-event-testing-library","lang":"js","dir":"packages/dom-event-testing-library/src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"provides boolean to tests","suites":[],"updatePoint":{"line":17,"column":33,"index":489},"line":17,"code":"  test('provides boolean to tests', () => {\n    expect(pointerEvent).toMatchSnapshot();\n  });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"returns expected API","suites":["createEventTarget"],"updatePoint":{"line":37,"column":28,"index":906},"line":37,"code":"  test('returns expected API', () => {\n    const target = createEventTarget(node);\n    expect(target.node).toEqual(node);\n    expect(Object.keys(target)).toMatchInlineSnapshot(`\n      [\n        \"node\",\n        \"blur\",\n        \"click\",\n        \"contextmenu\",\n        \"error\",\n        \"focus\",\n        \"keydown\",\n        \"keyup\",\n        \"load\",\n        \"pointercancel\",\n        \"pointerdown\",\n        \"pointerhover\",\n        \"pointermove\",\n        \"pointerover\",\n        \"pointerout\",\n        \"pointerup\",\n        \"scroll\",\n        \"select\",\n        \"selectionchange\",\n        \"tap\",\n        \"virtualclick\",\n        \"setBoundingClientRect\",\n      ]\n    `);\n  });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".blur()"],"updatePoint":{"line":73,"column":17,"index":1620},"line":73,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('blur', e => {\n        expect(e.relatedTarget).toBeNull();\n      });\n      target.blur();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".blur()"],"updatePoint":{"line":80,"column":24,"index":1827},"line":80,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      const relatedTarget = document.createElement('div');\n      node.addEventListener('blur', e => {\n        expect(e.relatedTarget).toBe(relatedTarget);\n      });\n      target.blur({\n        relatedTarget\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".click()"],"updatePoint":{"line":92,"column":17,"index":2163},"line":92,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.button).toEqual(0);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(false);\n        expect(e.detail).toEqual(1);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.metaKey).toEqual(false);\n        expect(e.movementX).toEqual(0);\n        expect(e.movementY).toEqual(0);\n        expect(e.offsetX).toEqual(0);\n        expect(e.offsetY).toEqual(0);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(defaultBrowserChromeSize);\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.click();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".click()"],"updatePoint":{"line":118,"column":24,"index":3189},"line":118,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.button).toEqual(1);\n        expect(e.buttons).toEqual(4);\n        expect(e.clientX).toEqual(10);\n        expect(e.clientY).toEqual(20);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.metaKey).toEqual(true);\n        expect(e.movementX).toEqual(1);\n        expect(e.movementY).toEqual(2);\n        expect(e.offsetX).toEqual(5);\n        expect(e.offsetY).toEqual(5);\n        expect(e.pageX).toEqual(50);\n        expect(e.pageY).toEqual(50);\n        expect(e.screenX).toEqual(10);\n        expect(e.screenY).toEqual(20 + defaultBrowserChromeSize);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.click({\n        altKey: true,\n        button: 1,\n        buttons: 4,\n        x: 10,\n        y: 20,\n        ctrlKey: true,\n        metaKey: true,\n        movementX: 1,\n        movementY: 2,\n        offsetX: 5,\n        offsetY: 5,\n        pageX: 50,\n        pageY: 50,\n        shiftKey: true\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".focus()"],"updatePoint":{"line":157,"column":17,"index":4327},"line":157,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('focus', e => {\n        expect(e.relatedTarget).toBeNull();\n      });\n      target.focus();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".focus()"],"updatePoint":{"line":164,"column":24,"index":4536},"line":164,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      const relatedTarget = document.createElement('div');\n      node.addEventListener('focus', e => {\n        expect(e.relatedTarget).toBe(relatedTarget);\n      });\n      target.focus({\n        relatedTarget\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".keydown()"],"updatePoint":{"line":176,"column":17,"index":4876},"line":176,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keydown', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.ctrlKey).toEqual(false);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.key).toEqual('');\n        expect(e.metaKey).toEqual(false);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.keydown();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".keydown()"],"updatePoint":{"line":190,"column":24,"index":5426},"line":190,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keydown', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.isComposing).toEqual(true);\n        expect(e.key).toEqual('Enter');\n        expect(e.metaKey).toEqual(true);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.keydown({\n        altKey: true,\n        ctrlKey: true,\n        isComposing: true,\n        key: 'Enter',\n        metaKey: true,\n        shiftKey: true\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".keyup()"],"updatePoint":{"line":211,"column":17,"index":6023},"line":211,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keyup', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.ctrlKey).toEqual(false);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.key).toEqual('');\n        expect(e.metaKey).toEqual(false);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.keydown();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".keyup()"],"updatePoint":{"line":225,"column":24,"index":6571},"line":225,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('keyup', e => {\n        expect(e.altKey).toEqual(true);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.isComposing).toEqual(true);\n        expect(e.key).toEqual('Enter');\n        expect(e.metaKey).toEqual(true);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.keyup({\n        altKey: true,\n        ctrlKey: true,\n        isComposing: true,\n        key: 'Enter',\n        metaKey: true,\n        shiftKey: true\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".scroll()"],"updatePoint":{"line":246,"column":17,"index":7165},"line":246,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('scroll', e => {\n        expect(e.type).toEqual('scroll');\n      });\n      target.scroll();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"default","suites":["createEventTarget",".virtualclick()"],"updatePoint":{"line":255,"column":17,"index":7411},"line":255,"code":"    test('default', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        expect(e.altKey).toEqual(false);\n        expect(e.button).toEqual(0);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(false);\n        expect(e.detail).toEqual(0);\n        expect(typeof e.getModifierState).toEqual('function');\n        expect(e.metaKey).toEqual(false);\n        expect(e.movementX).toEqual(0);\n        expect(e.movementY).toEqual(0);\n        expect(e.offsetX).toEqual(0);\n        expect(e.offsetY).toEqual(0);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(typeof e.preventDefault).toEqual('function');\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(0);\n        expect(e.shiftKey).toEqual(false);\n        expect(typeof e.timeStamp).toEqual('number');\n      });\n      target.virtualclick();\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":"custom payload","suites":["createEventTarget",".virtualclick()"],"updatePoint":{"line":281,"column":24,"index":8421},"line":281,"code":"    test('custom payload', () => {\n      const target = createEventTarget(node);\n      node.addEventListener('click', e => {\n        // expect most of the custom payload to be ignored\n        expect(e.altKey).toEqual(true);\n        expect(e.button).toEqual(1);\n        expect(e.buttons).toEqual(0);\n        expect(e.clientX).toEqual(0);\n        expect(e.clientY).toEqual(0);\n        expect(e.ctrlKey).toEqual(true);\n        expect(e.detail).toEqual(0);\n        expect(e.metaKey).toEqual(true);\n        expect(e.pageX).toEqual(0);\n        expect(e.pageY).toEqual(0);\n        expect(e.screenX).toEqual(0);\n        expect(e.screenY).toEqual(0);\n        expect(e.shiftKey).toEqual(true);\n      });\n      target.virtualclick({\n        altKey: true,\n        button: 1,\n        buttons: 4,\n        x: 10,\n        y: 20,\n        ctrlKey: true,\n        metaKey: true,\n        pageX: 50,\n        pageY: 50,\n        shiftKey: true\n      });\n    });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"},{"name":".setBoundingClientRect()","suites":["createEventTarget",".virtualclick()"],"updatePoint":{"line":322,"column":32,"index":9451},"line":322,"code":"  test('.setBoundingClientRect()', () => {\n    const target = createEventTarget(node);\n    expect(node.getBoundingClientRect()).toMatchInlineSnapshot(`\n      {\n        \"bottom\": 0,\n        \"height\": 0,\n        \"left\": 0,\n        \"right\": 0,\n        \"top\": 0,\n        \"width\": 0,\n        \"x\": 0,\n        \"y\": 0,\n      }\n    `);\n    target.setBoundingClientRect({\n      x: 10,\n      y: 20,\n      width: 100,\n      height: 200\n    });\n    expect(node.getBoundingClientRect()).toMatchInlineSnapshot(`\n      {\n        \"bottom\": 220,\n        \"height\": 200,\n        \"left\": 10,\n        \"right\": 110,\n        \"top\": 20,\n        \"width\": 100,\n        \"x\": 10,\n        \"y\": 20,\n      }\n    `);\n  });","file":"index-test.js","skipped":false,"dir":"packages/dom-event-testing-library/src/__tests__"}]}