{"repo":"floating-ui/floating-ui","url":"https://github.com/floating-ui/floating-ui","branch":"master","configs":[{"package":"@floating-ui/core","lang":"ts","dir":"packages/core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@floating-ui/dom","lang":"js","dir":"packages/dom/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@floating-ui/react-dom","lang":"js","dir":"packages/react-dom/test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"bottom","suites":[],"updatePoint":{"line":6,"column":12},"line":6,"code":"test('bottom', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'bottom')).toEqual({\n    x: 25,\n    y: 100,\n  });\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"bottom-start","suites":[],"updatePoint":{"line":13,"column":18},"line":13,"code":"test('bottom-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'bottom-start')\n  ).toEqual({x: 0, y: 100});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"bottom-end","suites":[],"updatePoint":{"line":19,"column":16},"line":19,"code":"test('bottom-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'bottom-end')\n  ).toEqual({x: 50, y: 100});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top","suites":[],"updatePoint":{"line":25,"column":9},"line":25,"code":"test('top', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'top')).toEqual({\n    x: 25,\n    y: -50,\n  });\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-start","suites":[],"updatePoint":{"line":32,"column":15},"line":32,"code":"test('top-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'top-start')\n  ).toEqual({x: 0, y: -50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-end","suites":[],"updatePoint":{"line":38,"column":13},"line":38,"code":"test('top-end', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'top-end')).toEqual({\n    x: 50,\n    y: -50,\n  });\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right","suites":[],"updatePoint":{"line":45,"column":11},"line":45,"code":"test('right', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'right')).toEqual({\n    x: 100,\n    y: 25,\n  });\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right-start","suites":[],"updatePoint":{"line":52,"column":17},"line":52,"code":"test('right-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'right-start')\n  ).toEqual({x: 100, y: 0});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"right-end","suites":[],"updatePoint":{"line":58,"column":15},"line":58,"code":"test('right-end', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'right-end')\n  ).toEqual({x: 100, y: 50});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left","suites":[],"updatePoint":{"line":64,"column":10},"line":64,"code":"test('left', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'left')).toEqual({\n    x: -50,\n    y: 25,\n  });\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left-start","suites":[],"updatePoint":{"line":71,"column":16},"line":71,"code":"test('left-start', () => {\n  expect(\n    computeCoordsFromPlacement({reference, floating}, 'left-start')\n  ).toEqual({x: -50, y: 0});\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"left-end","suites":[],"updatePoint":{"line":77,"column":14},"line":77,"code":"test('left-end', () => {\n  expect(computeCoordsFromPlacement({reference, floating}, 'left-end')).toEqual(\n    {x: -50, y: 50}\n  );\n});","file":"computeCoordsFromPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"returned data","suites":[],"updatePoint":{"line":15,"column":19},"line":15,"code":"test('returned data', async () => {\n  const {x, y, placement, strategy, middlewareData} = await computePosition(\n    reference,\n    floating,\n    {\n      placement: 'top',\n      middleware: [{name: 'custom', fn: () => ({data: {property: true}})}],\n      // @ts-ignore - computePosition() only uses this property\n      platform,\n    }\n  );\n\n  expect(placement).toBe('top');\n  expect(strategy).toBe('absolute');\n  expect(x).toBe(25);\n  expect(y).toBe(-50);\n  expect(middlewareData).toEqual({\n    custom: {\n      property: true,\n    },\n  });\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"middleware","suites":[],"updatePoint":{"line":38,"column":16},"line":38,"code":"test('middleware', async () => {\n  const {x, y} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n  });\n\n  const {x: x2, y: y2} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n    middleware: [\n      {\n        name: 'test',\n        fn: ({x, y}) => ({x: x + 1, y: y + 1}),\n      },\n    ],\n  });\n\n  expect([x2, y2]).toEqual([x + 1, y + 1]);\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"middlewareData","suites":[],"updatePoint":{"line":58,"column":20},"line":58,"code":"test('middlewareData', async () => {\n  const {middlewareData} = await computePosition(reference, floating, {\n    // @ts-ignore - computePosition() only uses this property\n    platform,\n    middleware: [\n      {\n        name: 'test',\n        fn: () => ({\n          data: {\n            hello: true,\n          },\n        }),\n      },\n    ],\n  });\n\n  expect(middlewareData.test).toEqual({hello: true});\n});","file":"computePosition.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"base placement","suites":[],"updatePoint":{"line":3,"column":20},"line":3,"code":"test('base placement', () => {\n  expect(\n    getPlacementList(null, false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n    ])\n  ).toEqual(['top', 'bottom', 'left', 'right']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"start alignment without auto alignment","suites":[],"updatePoint":{"line":16,"column":44},"line":16,"code":"test('start alignment without auto alignment', () => {\n  expect(\n    getPlacementList('start', false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['top-start', 'left-start']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"start alignment with auto alignment","suites":[],"updatePoint":{"line":30,"column":41},"line":30,"code":"test('start alignment with auto alignment', () => {\n  expect(\n    getPlacementList('start', true, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['top-start', 'left-start', 'right-end']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"end alignment without auto alignment","suites":[],"updatePoint":{"line":44,"column":42},"line":44,"code":"test('end alignment without auto alignment', () => {\n  expect(\n    getPlacementList('end', false, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['right-end']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"end alignment with auto alignment","suites":[],"updatePoint":{"line":58,"column":39},"line":58,"code":"test('end alignment with auto alignment', () => {\n  expect(\n    getPlacementList('end', true, [\n      'top',\n      'bottom',\n      'left',\n      'right',\n      'top-start',\n      'right-end',\n      'left-start',\n    ])\n  ).toEqual(['right-end', 'top-start', 'left-start']);\n});","file":"middleware/autoPlacement.test.ts","skipped":false,"dir":"packages/core/test"},{"name":"top-start","suites":[],"updatePoint":{"line":3,"column":15,"index":104},"line":3,"code":"test('top-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom-start","suites":[],"updatePoint":{"line":10,"column":18,"index":357},"line":10,"code":"test('bottom-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 610;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right-start","suites":[],"updatePoint":{"line":23,"column":17,"index":756},"line":23,"code":"test('right-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left-start","suites":[],"updatePoint":{"line":36,"column":16,"index":1154},"line":36,"code":"test('left-start', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-start\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left-start.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"top","suites":[],"updatePoint":{"line":49,"column":9,"index":1544},"line":49,"code":"test('top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom","suites":[],"updatePoint":{"line":56,"column":12,"index":1784},"line":56,"code":"test('bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 650;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right","suites":[],"updatePoint":{"line":69,"column":11,"index":2170},"line":69,"code":"test('right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 600;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left","suites":[],"updatePoint":{"line":82,"column":10,"index":2555},"line":82,"code":"test('left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 400;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"top-end","suites":[],"updatePoint":{"line":95,"column":13,"index":2942},"line":95,"code":"test('top-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`top-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"bottom-end","suites":[],"updatePoint":{"line":102,"column":16,"index":3189},"line":102,"code":"test('bottom-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 610;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`bottom-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"right-end","suites":[],"updatePoint":{"line":115,"column":15,"index":3582},"line":115,"code":"test('right-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`right-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"left-end","suites":[],"updatePoint":{"line":128,"column":14,"index":3974},"line":128,"code":"test('left-end', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-end\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 550;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`left-end.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"only top, bottom allowed","suites":[],"updatePoint":{"line":141,"column":30,"index":4381},"line":141,"code":"test('only top, bottom allowed', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await click(page, `[data-testid=\"allowedPlacements-top,bottom\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 700;\n      scroll.scrollTop = 650;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-bottom.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 700;\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-top.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"only left, right allowed","suites":[],"updatePoint":{"line":164,"column":30,"index":5181},"line":164,"code":"test('only left, right allowed', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoPlacement');\n  await click(page, `[data-testid=\"alignment-null\"]`);\n  await click(page, `[data-testid=\"allowedPlacements-left,right\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 550;\n      scroll.scrollTop = 750;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-right.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 500;\n      scroll.scrollTop = 750;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`allowedPlacements-left.png`);\n});","file":"functional/autoPlacement.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":": ","suites":[],"updatePoint":{"line":5,"column":28,"index":210},"line":5,"code":"    test(`${option}: ${bool}`, async ({\n      page\n    }) => {\n      await page.goto('http://localhost:1234/autoUpdate');\n      await click(page, `[data-testid=\"${option}-${bool}\"]`);\n      await page.evaluate(() => window.scrollTo(0, 50));\n      expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${option}-${bool}.png`);\n    });","file":"functional/autoUpdate.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"ancestorResize: false","suites":[],"updatePoint":{"line":15,"column":27,"index":570},"line":15,"code":"test('ancestorResize: false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoUpdate');\n  await click(page, `[data-testid=\"ancestorResize-false\"]`);\n  await page.setViewportSize({\n    width: 700,\n    height: 720\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`ancestorResize-false.png`);\n});","file":"functional/autoUpdate.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"ancestorResize: true","suites":[],"updatePoint":{"line":26,"column":26,"index":913},"line":26,"code":"test('ancestorResize: true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/autoUpdate');\n  await click(page, `[data-testid=\"ancestorResize-true\"]`);\n  await page.setViewportSize({\n    width: 700,\n    height: 720\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`ancestorResize-true.png`);\n});","file":"functional/autoUpdate.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  has a border","suites":[],"updatePoint":{"line":4,"column":64,"index":235},"line":4,"code":"  test(`correctly positioned on bottom when ${node} has a border`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/border');\n    await click(page, `[data-testid=\"border-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/border.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"arrow keep padding at the container edges with  reference on ","suites":[],"updatePoint":{"line":7,"column":92,"index":354},"line":7,"code":"    test(`arrow keep padding at the container edges with ${boxSize} reference on ${position}`, async ({\n      page\n    }) => {\n      await page.goto('http://localhost:1234/complex');\n      await click(page, `[data-testid=\"position-${position}\"]`);\n      await click(page, `[data-testid=\"reference-size-${boxSize}\"]`);\n      expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${boxSize}-${position}-padding.png`);\n    });","file":"functional/complex.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"should be positioned on bottom ","suites":[],"updatePoint":{"line":4,"column":52,"index":231},"line":4,"code":"  test(`should be positioned on bottom ${willChange}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/containing-block');\n\n    // Ensure `contain` does not affect `will-change`\n    await click(page, `[data-testid=\"contain-size\"]`);\n    await click(page, `[data-testid=\"willchange-${willChange}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`will-change-${willChange}.png`);\n  });","file":"functional/containing-block.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"should be positioned on bottom ","suites":[],"updatePoint":{"line":16,"column":49,"index":756},"line":16,"code":"  test(`should be positioned on bottom ${contain}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/containing-block');\n\n    // Ensure `will-change` does not affect `contain`\n    await click(page, `[data-testid=\"willchange-opacity\"]`);\n    await click(page, `[data-testid=\"contain-${contain}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`contain-${contain}.png`);\n  });","file":"functional/containing-block.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"arrow should be centered to the reference ","suites":[],"updatePoint":{"line":4,"column":64,"index":205},"line":4,"code":"  test(`arrow should be centered to the reference ${decimalSize}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/decimal-size');\n    await click(page, `[data-testid=\"decimal-size-${decimalSize}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`decimal-size-${decimalSize}.png`);\n  });","file":"functional/decimal-size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `mainAxis` is false","suites":[],"updatePoint":{"line":3,"column":44,"index":133},"line":3,"code":"test('does not flip when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-false.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does flip when `mainAxis` is true","suites":[],"updatePoint":{"line":16,"column":39,"index":546},"line":16,"code":"test('does flip when `mainAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"mainAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-true.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `crossAxis` is false","suites":[],"updatePoint":{"line":29,"column":45,"index":963},"line":29,"code":"test('does not flip when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"crossAxis-false\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-false.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does flip when `crossAxis` is true","suites":[],"updatePoint":{"line":43,"column":40,"index":1443},"line":43,"code":"test('does flip when `crossAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-true.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not flip when `fallbackPlacements` is an empty array","suites":[],"updatePoint":{"line":57,"column":63,"index":1944},"line":57,"code":"test('does not flip when `fallbackPlacements` is an empty array', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackPlacements-[]\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackPlacements-empty-array.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackPlacements: all","suites":[],"updatePoint":{"line":70,"column":29,"index":2370},"line":70,"code":"test('fallbackPlacements: all', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"placement-top-start\"]`);\n  await click(page, `[data-testid=\"fallbackPlacements-all\"]`);\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-all-top-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 675;\n      scroll.scrollTop = 585;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-top.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 585;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-top-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 700;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 775;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 825;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-right-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 735;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 375;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 325;\n      scroll.scrollTop = 850;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bottom-start.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left-end.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 450;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left.png`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 250;\n      scroll.scrollTop = 400;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-left-start.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackStrategy: \"bestFit\"","suites":[],"updatePoint":{"line":166,"column":33,"index":5805},"line":166,"code":"test('fallbackStrategy: \"bestFit\"', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackStrategy-bestFit\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 300;\n      scroll.scrollTop = 315;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-bestFit.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"fallbackStrategy: \"initialPlacement\"","suites":[],"updatePoint":{"line":180,"column":42,"index":6272},"line":180,"code":"test('fallbackStrategy: \"initialPlacement\"', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/flip');\n  await click(page, `[data-testid=\"fallbackStrategy-initialPlacement\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 300;\n      scroll.scrollTop = 315;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`fallbackStrategy-initialPlacement.png`);\n});","file":"functional/flip.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"yellow once it has escaped","suites":[],"updatePoint":{"line":3,"column":32,"index":121},"line":3,"code":"test('yellow once it has escaped', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 450;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-escaped.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"black once reference is hidden","suites":[],"updatePoint":{"line":15,"column":36,"index":474},"line":15,"code":"test('black once reference is hidden', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 300;\n    }\n  });\n  expect(await page.locator('main').screenshot()).toMatchSnapshot(`hide-reference-hidden.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"not black or yellow while still within bounds","suites":[],"updatePoint":{"line":27,"column":51,"index":845},"line":27,"code":"test('not black or yellow while still within bounds', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 908;\n      scroll.scrollLeft = 264;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-within-bounds.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"black while reference is hidden, without escaping","suites":[],"updatePoint":{"line":40,"column":55,"index":1254},"line":40,"code":"test('black while reference is hidden, without escaping', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/hide');\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 920;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`hide-reference-hidden-no-escape.png`);\n});","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"floating element is not black ","suites":[],"updatePoint":{"line":53,"column":50,"index":1689},"line":53,"code":"  test(`floating element is not black ${hierarchy}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/hide');\n    await click(page, `[data-testid=\"hierarchy-${hierarchy}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`not-black-${hierarchy}.png`);\n  });","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"floating element is black ","suites":[],"updatePoint":{"line":62,"column":46,"index":2031},"line":62,"code":"  test(`floating element is black ${hierarchy}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/hide');\n    await click(page, `[data-testid=\"hierarchy-${hierarchy}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`black-${hierarchy}.png`);\n  });","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"floating element is yellow ","suites":[],"updatePoint":{"line":71,"column":47,"index":2365},"line":71,"code":"  test(`floating element is yellow ${hierarchy}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/hide');\n    await click(page, `[data-testid=\"hierarchy-${hierarchy}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`yellow-${hierarchy}.png`);\n  });","file":"functional/hide.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on bottom","suites":[],"updatePoint":{"line":11,"column":48,"index":232},"line":11,"code":"test('chooses right client rect placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on top","suites":[],"updatePoint":{"line":20,"column":45,"index":544},"line":20,"code":"test('chooses right client rect placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on bottom","suites":[],"updatePoint":{"line":30,"column":47,"index":909},"line":30,"code":"test('chooses left client rect placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on top","suites":[],"updatePoint":{"line":39,"column":44,"index":1218},"line":39,"code":"test('chooses left client rect placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on the right","suites":[],"line":51,"code":"test.skip('chooses right client rect placed on the right', async ({","file":"functional/inline.test.ts","skipped":true,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on the right","suites":[],"updatePoint":{"line":61,"column":50,"index":2004},"line":61,"code":"test('chooses left client rect placed on the right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-right\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-right.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses right client rect placed on the left","suites":[],"updatePoint":{"line":71,"column":50,"index":2375},"line":71,"code":"test('chooses right client rect placed on the left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-client-rect-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses left client rect placed on the left","suites":[],"updatePoint":{"line":81,"column":49,"index":2744},"line":81,"code":"test('chooses left client rect placed on the left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-client-rect-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on top","suites":[],"updatePoint":{"line":91,"column":29,"index":3091},"line":91,"code":"test('connected placed on top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-top\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-top.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on bottom","suites":[],"updatePoint":{"line":102,"column":32,"index":3491},"line":102,"code":"test('connected placed on bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-bottom.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on left","suites":[],"updatePoint":{"line":112,"column":30,"index":3839},"line":112,"code":"test('connected placed on left', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-left.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"connected placed on right","suites":[],"updatePoint":{"line":123,"column":31,"index":4241},"line":123,"code":"test('connected placed on right', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-right\"]');\n  await click(page, '[data-testid=\"connected-2-joined\"]');\n  await page.hover('.container strong', {\n    position: LEFT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('connected-right.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords","suites":[],"updatePoint":{"line":134,"column":62,"index":4675},"line":134,"code":"test('chooses rect based on placement without any mouse coords', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await page.hover('.container strong', {\n    position: RIGHT_CLIENT_RECT\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('first-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords bottom","suites":[],"updatePoint":{"line":143,"column":69,"index":5007},"line":143,"code":"test('chooses rect based on placement without any mouse coords bottom', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"open-true\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"chooses rect based on placement without any mouse coords top","suites":[],"updatePoint":{"line":150,"column":66,"index":5305},"line":150,"code":"test('chooses rect based on placement without any mouse coords top', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"open-true\"]');\n  await click(page, '[data-testid=\"placement-top\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('right-rect-no-coords.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly centers over two rects","suites":[],"updatePoint":{"line":158,"column":38,"index":5630},"line":158,"code":"test('correctly centers over two rects', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/inline');\n  await click(page, '[data-testid=\"placement-left\"]');\n  await click(page, '[data-testid=\"connected-3\"]');\n  await click(page, '[data-testid=\"open-true\"]');\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot('left-connected-3.png');\n});","file":"functional/inline.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly offset  for placement  ()","suites":[],"updatePoint":{"line":8,"column":75,"index":451},"line":8,"code":"      test(`correctly offset ${name} for placement ${placement} (${rtlStr})`, async ({\n        page\n      }) => {\n        await page.goto('http://localhost:1234/offset');\n        await click(page, `[data-testid=\"offset-${name}\"]`);\n        await click(page, `[data-testid=\"placement-${placement}\"]`);\n        await click(page, `[data-testid=\"rtl-${rtl}\"]`);\n        expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${name}-${placement}-${rtlStr}.png`);\n      });","file":"functional/offset.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  is an offsetParent","suites":[],"updatePoint":{"line":4,"column":70,"index":216},"line":4,"code":"  test(`correctly positioned on bottom when ${node} is an offsetParent`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/relative');\n    await click(page, `[data-testid=\"relative-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/relative.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  is scrolled","suites":[],"updatePoint":{"line":4,"column":63,"index":248},"line":4,"code":"  test(`correctly positioned on bottom when ${node} is scrolled`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/scroll');\n    await click(page, `[data-testid=\"scroll-${node}\"]`);\n    if (node === 'body') {\n      await page.evaluate(() => window.scrollTo(0, 200));\n    }\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n    await click(page, `[data-testid=\"strategy-fixed\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}--fixed.png`);\n  });","file":"functional/scroll.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly avoids scrollbar at ","suites":[],"updatePoint":{"line":4,"column":50,"index":190},"line":4,"code":"  test(`correctly avoids scrollbar at ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/scrollbars');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}.png`);\n    await click(page, '[data-testid=\"rtl-true\"]');\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}--rtl.png`);\n  });","file":"functional/scrollbars.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"shadow DOM (): correctly positioned on  + host-position- +  + ","suites":[],"updatePoint":{"line":10,"column":162,"index":600},"line":10,"code":"          test(`shadow DOM (${useCase}): correctly positioned on ${strategy} + host-position-${cssPosition} + ${placement} + ${withTransform ? \"with\" : \"without\"}`, async ({\n            page\n          }) => {\n            await page.goto('http://localhost:1234/shadow-DOM');\n            await click(page, `[data-testid=\"use-case-${useCase}\"]`);\n            await click(page, `[data-testid=\"css-position-${cssPosition}\"]`);\n            await click(page, `[data-testid=\"placement-${placement}\"]`);\n            await click(page, `[data-testid=\"strategy-${strategy}\"]`);\n            await click(page, `[data-testid=\"with-transform-${withTransform}\"]`);\n            expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${useCase}-host-position-${cssPosition}-${placement}-${strategy}-${withTransform ? \"with\" : \"without\"}-transform.png`);\n          });","file":"functional/shadow-dom.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not shift when `mainAxis` is false","suites":[],"updatePoint":{"line":3,"column":45,"index":134},"line":3,"code":"test('does not shift when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does shift when `mainAxis` is true","suites":[],"updatePoint":{"line":16,"column":40,"index":550},"line":16,"code":"test('does shift when `mainAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"mainAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 800;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`mainAxis-true.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not shift when `crossAxis` is false","suites":[],"updatePoint":{"line":29,"column":46,"index":970},"line":29,"code":"test('does not shift when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does shift when `crossAxis` is true","suites":[],"updatePoint":{"line":42,"column":41,"index":1388},"line":42,"code":"test('does shift when `crossAxis` is true', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 500;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`crossAxis-true.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (origin)","suites":[],"updatePoint":{"line":55,"column":100,"index":1863},"line":55,"code":"test('stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (origin)', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 150;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift-origin.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (non-origin)","suites":[],"updatePoint":{"line":68,"column":104,"index":2347},"line":68,"code":"test('stops shifting once opposite edges are aligned when `limitShift` is used as `limiter` (non-origin)', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 900;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift-non-origin.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"stops shifting on the crossAxis once opposite edges are aligned when `limitShift` is used as `limiter`","suites":[],"updatePoint":{"line":81,"column":108,"index":2839},"line":81,"code":"test('stops shifting on the crossAxis once opposite edges are aligned when `limitShift` is used as `limiter`', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 250;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.crossAxis.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift does not limit shift when `crossAxis` is false","suites":[],"updatePoint":{"line":95,"column":63,"index":3339},"line":95,"code":"test('limitShift does not limit shift when `crossAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await click(page, `[data-testid=\"crossAxis-true\"]`);\n  await click(page, `[data-testid=\"limitShift.crossAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollTop = 250;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.crossAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift does not limit shift when `mainAxis` is false","suites":[],"updatePoint":{"line":110,"column":62,"index":3911},"line":110,"code":"test('limitShift does not limit shift when `mainAxis` is false', async ({\n  page\n}) => {\n  await page.goto('http://localhost:1234/shift');\n  await click(page, `[data-testid=\"limitShift-true\"]`);\n  await click(page, `[data-testid=\"limitShift.mainAxis-false\"]`);\n  await page.evaluate(() => {\n    const scroll = document.querySelector('.scroll');\n    if (scroll) {\n      scroll.scrollLeft = 900;\n    }\n  });\n  expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.mainAxis-false.png`);\n});","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"limitShift.offset works for value  ","suites":[],"updatePoint":{"line":150,"column":64,"index":4814},"line":150,"code":"    test(`limitShift.offset works for value ${name} ${placement}`, async ({\n      page\n    }) => {\n      await page.goto('http://localhost:1234/shift');\n      await click(page, `[data-testid=\"placement-${placement}\"]`);\n      await click(page, `[data-testid=\"crossAxis-true\"]`);\n      await click(page, `[data-testid=\"limitShift-true\"]`);\n      await click(page, `[data-testid=\"limitShift.offset-${name}\"]`);\n      await page.evaluate(scrollOffsets => {\n        const scroll = document.querySelector('.scroll');\n        if (scroll) {\n          Object.assign(scroll, scrollOffsets);\n        }\n      }, scrollOffsets);\n      expect(await page.locator('.container').screenshot()).toMatchSnapshot(`limitShift.offset-${name === '-50' ? 'neg50' : name}-${placement}.png`);\n    });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"offset is correctly added when limitShift is enabled ","suites":[],"updatePoint":{"line":169,"column":73,"index":5649},"line":169,"code":"  test(`offset is correctly added when limitShift is enabled ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/shift');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await click(page, `[data-testid=\"offset-10\"]`);\n    await click(page, `[data-testid=\"limitShift-true\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`offset-and-limitShift-${placement}.png`);\n  });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"offset is correctly added when limitShift is enabled  crossAxis stop check","suites":[],"updatePoint":{"line":178,"column":94,"index":6124},"line":178,"code":"  test(`offset is correctly added when limitShift is enabled ${placement} crossAxis stop check`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/shift');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await click(page, `[data-testid=\"offset-10\"]`);\n    await click(page, `[data-testid=\"crossAxis-true\"]`);\n    await click(page, `[data-testid=\"limitShift-true\"]`);\n    await page.evaluate(scrollTop => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollTop = scrollTop;\n      }\n    }, placement === 'bottom' ? 260 : 950);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`offset-and-limitShift-stop-check-${placement}.png`);\n  });","file":"functional/shift.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly sized for placement ","suites":[],"updatePoint":{"line":5,"column":50,"index":239},"line":5,"code":"  test(`correctly sized for placement ${placement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 525;\n        scroll.scrollTop = 605;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"placement  correctly sized with rtl enabled","suites":[],"updatePoint":{"line":19,"column":63,"index":739},"line":19,"code":"  test(`placement ${placement} correctly sized with rtl enabled`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${placement}\"]`);\n    await click(page, `[data-testid=\"rtl-true\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${placement}-rtl.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not overflow due to size ","suites":[],"updatePoint":{"line":29,"column":58,"index":1153},"line":29,"code":"  test(`does not overflow due to size ${verticalPlacement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${verticalPlacement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 650;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-left-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 575;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-left-end.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 400;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-right-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 500;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${verticalPlacement}-right-end.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not overflow due to size ","suites":[],"updatePoint":{"line":65,"column":60,"index":2511},"line":65,"code":"  test(`does not overflow due to size ${horizontalPlacement}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/size');\n    await click(page, `[data-testid=\"placement-${horizontalPlacement}\"]`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollTop = 725;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-top-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollTop = 650;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-top-end.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollTop = 475;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-bottom-start.png`);\n    await page.evaluate(() => {\n      const scroll = document.querySelector('.scroll');\n      if (scroll) {\n        scroll.scrollLeft = 575;\n      }\n    });\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${horizontalPlacement}-bottom-end.png`);\n  });","file":"functional/size.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom for ","suites":[],"updatePoint":{"line":4,"column":50,"index":179},"line":4,"code":"  test(`correctly positioned on bottom for ${node}`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/table');\n    await click(page, `[data-testid=\"reference-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n    await click(page, `[data-testid=\"inside-true\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}-inside.png`);\n  });","file":"functional/table.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"correctly positioned on bottom when  has a border","suites":[],"updatePoint":{"line":4,"column":64,"index":235},"line":4,"code":"  test(`correctly positioned on bottom when ${node} has a border`, async ({\n    page\n  }) => {\n    await page.goto('http://localhost:1234/transform');\n    await click(page, `[data-testid=\"transform-${node}\"]`);\n    expect(await page.locator('.container').screenshot()).toMatchSnapshot(`${node}.png`);\n  });","file":"functional/transform.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"returns all overflow ancestors","suites":[],"updatePoint":{"line":2,"column":36,"index":114},"line":2,"code":"test('returns all overflow ancestors', () => {\n  const overflowScroll = document.createElement('div');\n  overflowScroll.style.overflow = 'scroll';\n  const overflowHidden = document.createElement('div');\n  overflowHidden.style.overflow = 'hidden';\n  const test = document.createElement('div');\n  overflowScroll.append(overflowHidden);\n  overflowHidden.append(test);\n  expect(getOverflowAncestors(test)).toEqual([overflowHidden, overflowScroll, window]);\n});","file":"unit/getOverflowAncestors.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not treat display: inline elements as overflow ancestors","suites":[],"updatePoint":{"line":12,"column":67,"index":602},"line":12,"code":"test('does not treat display: inline elements as overflow ancestors', () => {\n  const overflowScroll = document.createElement('div');\n  overflowScroll.style.overflow = 'scroll';\n  overflowScroll.style.display = 'inline';\n  const overflowHidden = document.createElement('div');\n  overflowHidden.style.overflow = 'hidden';\n  overflowHidden.style.display = 'inline';\n  const test = document.createElement('div');\n  overflowScroll.append(overflowHidden);\n  overflowHidden.append(test);\n  expect(getOverflowAncestors(test)).toEqual([window]);\n});","file":"unit/getOverflowAncestors.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does not treat display: contents elements as overflow ancestors","suites":[],"updatePoint":{"line":24,"column":69,"index":1146},"line":24,"code":"test('does not treat display: contents elements as overflow ancestors', () => {\n  const overflowScroll = document.createElement('div');\n  overflowScroll.style.overflow = 'scroll';\n  overflowScroll.style.display = 'contents';\n  const overflowHidden = document.createElement('div');\n  overflowHidden.style.overflow = 'hidden';\n  overflowHidden.style.display = 'contents';\n  const test = document.createElement('div');\n  overflowScroll.append(overflowHidden);\n  overflowHidden.append(test);\n  expect(getOverflowAncestors(test)).toEqual([window]);\n});","file":"unit/getOverflowAncestors.test.ts","skipped":false,"dir":"packages/dom/test"},{"name":"does treat display: inline-block elements as overflow ancestors","suites":[],"updatePoint":{"line":36,"column":69,"index":1694},"line":36,"code":"test('does treat display: inline-block elements as overflow ancestors', () => {\n  const overflowScroll = document.createElement('div');\n  overflowScroll.style.overflow = 'scroll';\n  overflowScroll.style.display = 'inline-block';\n  const overflowHidden = document.createElement('div');\n  overflowHidden.style.overflow = 'hidden';\n  overflowHidden.style.display = 'inline-block';\n  const test = document.createElement('div');\n  overflowScroll.append(overflowHidden);\n  overflowHidden.append(test);\n  expect(getOverflowAncestors(test)).toEqual([overflowHidden, overflowScroll, window]);\n});","file":"unit/getOverflowAncestors.test.ts","skipped":false,"dir":"packages/dom/test"}]}