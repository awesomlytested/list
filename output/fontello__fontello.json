{
    "repo": "fontello/fontello",
    "url": "https://github.com/fontello/fontello",
    "branch": "master",
    "configs": [
        {
            "package": "fontello",
            "lang": "js",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "with custom icon",
            "suites": [
                "API.download"
            ],
            "updatePoint": {
                "line": 25,
                "column": 22
            },
            "line": 25,
            "code": "  it('with custom icon', async function () {\n    let res = await request.post('/').field('url', 'http://example.com').attach('config', path.join(__dirname, 'fixtures', 'config_custom.json')).set('Accept', 'application/json').expect(200);\n    res = await request.get(`/${res.text}/get`).expect(200).parse(binaryParser);\n    let fixture = fs.readFileSync(path.join(__dirname, 'fixtures', 'result_custom.zip'));\n    let actual = await JSZip.loadAsync(res.body).then(zip => zip.file(/fontello-[0-9a-f]+\\/font\\/fontello\\.svg/)[0].async('string'));\n    let expected = await JSZip.loadAsync(fixture).then(zip => zip.file(/fontello-[0-9a-f]+\\/font\\/fontello\\.svg/)[0].async('string')); // copyright year can change, strip it\n\n    assert.strictEqual(actual.replace(/<metadata>.+<\\/metadata>/, '').trim(), expected.replace(/<metadata>.+<\\/metadata>/, '').trim());\n  });",
            "file": "server/api/download.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with fontelico icon",
            "suites": [
                "API.download"
            ],
            "updatePoint": {
                "line": 34,
                "column": 25
            },
            "line": 34,
            "code": "  it('with fontelico icon', async function () {\n    let res = await request.post('/').attach('config', path.join(__dirname, 'fixtures', 'config_fontelico.json')).set('Accept', 'application/json').expect(200);\n    res = await request.get(`/${res.text}/get`).expect(200).parse(binaryParser);\n    let fixture = fs.readFileSync(path.join(__dirname, 'fixtures', 'result_fontelico.zip'));\n    let actual = await JSZip.loadAsync(res.body).then(zip => zip.file(/fontello-[0-9a-f]+\\/font\\/fontello\\.svg/)[0].async('string'));\n    let expected = await JSZip.loadAsync(fixture).then(zip => zip.file(/fontello-[0-9a-f]+\\/font\\/fontello\\.svg/)[0].async('string')); // copyright year can change, strip it\n\n    assert.strictEqual(actual.replace(/<metadata>.+<\\/metadata>/, '').trim(), expected.replace(/<metadata>.+<\\/metadata>/, '').trim());\n  });",
            "file": "server/api/download.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "non-existent url",
            "suites": [
                "API.download"
            ],
            "updatePoint": {
                "line": 43,
                "column": 22
            },
            "line": 43,
            "code": "  it('non-existent url', async function () {\n    await request.get('/00000000/get').expect(404);\n  });",
            "file": "server/api/download.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/ GET",
            "suites": [
                "HTTP alive"
            ],
            "updatePoint": {
                "line": 6,
                "column": 11
            },
            "line": 6,
            "code": "  it('/ GET', async function () {\n    await request.get('/').expect(/<!DOCTYPE html>/).expect(200);\n  });",
            "file": "server/ping.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "/ HEAD",
            "suites": [
                "HTTP alive"
            ],
            "updatePoint": {
                "line": 9,
                "column": 12
            },
            "line": 9,
            "code": "  it('/ HEAD', async function () {\n    await request.head('/').expect(200, {}).expect(res => {\n      if (res.text) throw new Error(`Body should be empty, got ${res.text}`);\n    });\n  });",
            "file": "server/ping.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should redirect to default",
            "suites": [
                "Invalid host"
            ],
            "updatePoint": {
                "line": 8,
                "column": 32
            },
            "line": 8,
            "code": "  it('should redirect to default', async function () {\n    let port = url.parse(TEST.N.config.bind.default.mount).port;\n    await supertest(`http://127.0.0.1:${port}`).get('/').expect('Location', `http://localhost:${port}/`).expect(302);\n  });",
            "file": "server/redirect_invalid_host.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "fontello__fontello.svg"
}