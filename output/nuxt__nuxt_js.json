{"repo":"nuxt/nuxt.js","url":"https://github.com/nuxt/nuxt.js","branch":"dev","configs":[{"package":"example-jest-puppeteer","lang":"js","dir":"examples/jest-puppeteer/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-ava","lang":"js","dir":"examples/with-ava/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-feathers","lang":"js","dir":"examples/with-feathers/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"example-with-tape","lang":"js","dir":"examples/with-tape/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"nuxt","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/builder","lang":"js","dir":"packages/builder/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/cli","lang":"js","dir":"packages/cli/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/config","lang":"js","dir":"packages/config/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/core","lang":"js","dir":"packages/core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/generator","lang":"js","dir":"packages/generator/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/server","lang":"js","dir":"packages/server/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/types","lang":"ts","dir":"packages/types/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@nuxt/utils","lang":"js","dir":"packages/utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/vue-app","lang":"js","dir":"packages/vue-app/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@nuxt/webpack","lang":"js","dir":"packages/webpack/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"test index title","suites":["Index page"],"updatePoint":{"line":16,"column":22,"index":428},"line":16,"code":"  it('test index title', async () => {\n    expect.assertions(1);\n    const title = await page.evaluate(() => document.title);\n    expect(title).toMatchSnapshot('index.title');\n  });","file":"index.spec.js","skipped":false,"dir":"examples/jest-puppeteer/test"},{"name":"test navigation to about page","suites":["Index page"],"updatePoint":{"line":21,"column":35,"index":623},"line":21,"code":"  it('test navigation to about page', async () => {\n    expect.assertions(1);\n    await page.click('a#about-link');\n    await page.waitForSelector('p#hello-msg');\n    const msg = await page.$eval('p#hello-msg', e => e.textContent);\n    expect(msg).toMatchSnapshot('about.msg');\n  });","file":"index.spec.js","skipped":false,"dir":"examples/jest-puppeteer/test"},{"name":"Route / exits and render HTML","suites":[],"updatePoint":{"line":19,"column":35,"index":595},"line":19,"code":"test('Route / exits and render HTML', async t => {\n  const context = {};\n  const {\n    html\n  } = await nuxt.server.renderRoute('/', context);\n  t.true(html.includes('<h1 class=\"red\">Hello world!</h1>'));\n}); // Example of testing via dom checking","file":"index.test.js","skipped":false,"dir":"examples/with-ava/test"},{"name":"Route / exits and render HTML with CSS applied","suites":[],"updatePoint":{"line":27,"column":52,"index":861},"line":27,"code":"test('Route / exits and render HTML with CSS applied', async t => {\n  const context = {};\n  const {\n    html\n  } = await nuxt.server.renderRoute('/', context);\n  const {\n    window\n  } = new JSDOM(html).window;\n  const element = window.document.querySelector('.red');\n  t.not(element, null);\n  t.is(element.textContent, 'Hello world!');\n  t.is(element.className, 'red');\n  t.is(window.getComputedStyle(element).color, 'red');\n}); // Close server and ask nuxt to stop listening to file changes","file":"index.test.js","skipped":false,"dir":"examples/with-ava/test"},{"name":"starts and shows the index page","suites":["Feathers application tests"],"updatePoint":{"line":12,"column":37,"index":352},"line":12,"code":"  it('starts and shows the index page', function (done) {\n    request('http://localhost:3030', function (err, res, body) {\n      assert.ok(body.indexOf('<h1>Welcome!</h1>') !== -1);\n      done(err);\n    });\n  });","file":"app.test.js","skipped":false,"dir":"examples/with-feathers/test"},{"name":"shows a 404 HTML page","suites":["Feathers application tests","404"],"updatePoint":{"line":19,"column":29,"index":589},"line":19,"code":"    it('shows a 404 HTML page', function (done) {\n      request({\n        url: 'http://localhost:3030/path/to/nowhere',\n        headers: {\n          Accept: 'text/html'\n        }\n      }, function (err, res, body) {\n        assert.strictEqual(res.statusCode, 404);\n        assert.ok(body.indexOf('This page could not be found.') !== -1);\n        done(err);\n      });\n    });","file":"app.test.js","skipped":false,"dir":"examples/with-feathers/test"},{"name":"registered the users service","suites":["user service"],"updatePoint":{"line":4,"column":34,"index":139},"line":4,"code":"  it('registered the users service', () => {\n    assert.ok(app.service('users'));\n  });","file":"services/user/index.test.js","skipped":false,"dir":"examples/with-feathers/test"},{"name":"renders Index.vue correctly","suites":[],"updatePoint":{"line":4,"column":33,"index":142},"line":4,"code":"test('renders Index.vue correctly', t => {\n  t.plan(4);\n  const wrapper = shallow(Index, {\n    data: {\n      name: 'nuxt'\n    }\n  });\n  const button = wrapper.find('button');\n  t.equal(wrapper.find('h1').text(), 'Hello nuxt!', 'renders \"Hello nuxt!\" text');\n  t.equal(wrapper.find('h1').hasClass('red'), true, 'h1 has a red class [default]');\n  button.trigger('click');\n  t.equal(wrapper.find('h1').hasClass('blue'), true, 'h1 class changes to blue [after 1st click]');\n  button.trigger('click');\n  t.equal(wrapper.find('h1').hasClass('green'), true, 'h1 class changes to green [after 2nd click]');\n});","file":"index.test.js","skipped":false,"dir":"examples/with-tape/test"},{"name":"should stay within the size limit range in legacy mode","suites":["nuxt basic resources size limit"],"updatePoint":{"line":17,"column":60,"index":593},"line":17,"code":"  it('should stay within the size limit range in legacy mode', async () => {\n    const legacyResourcesSize = await getResourcesSize(distDir, 'client', {\n      gzip: true,\n      brotli: true\n    });\n    const LEGACY_JS_RESOURCES_KB_SIZE = 240;\n    expect(legacyResourcesSize.uncompressed).toBeWithinSize(LEGACY_JS_RESOURCES_KB_SIZE);\n    const LEGACY_JS_RESOURCES_GZIP_KB_SIZE = 83;\n    expect(legacyResourcesSize.gzip).toBeWithinSize(LEGACY_JS_RESOURCES_GZIP_KB_SIZE);\n    const LEGACY_JS_RESOURCES_BROTLI_KB_SIZE = 72;\n    expect(legacyResourcesSize.brotli).toBeWithinSize(LEGACY_JS_RESOURCES_BROTLI_KB_SIZE);\n  });","file":"dev/async-config.size-limit.test.js","skipped":false,"dir":"test"},{"name":"should stay within the size limit range in modern mode","suites":["nuxt basic resources size limit"],"updatePoint":{"line":29,"column":60,"index":1210},"line":29,"code":"  it('should stay within the size limit range in modern mode', async () => {\n    const modernResourcesSize = await getResourcesSize(distDir, 'modern', {\n      gzip: true,\n      brotli: true\n    });\n    const MODERN_JS_RESOURCES_KB_SIZE = 210;\n    expect(modernResourcesSize.uncompressed).toBeWithinSize(MODERN_JS_RESOURCES_KB_SIZE);\n    const MODERN_JS_RESOURCES_GZIP_KB_SIZE = 73;\n    expect(modernResourcesSize.gzip).toBeWithinSize(MODERN_JS_RESOURCES_GZIP_KB_SIZE);\n    const MODERN_JS_RESOURCES_BROTLI_KB_SIZE = 64;\n    expect(modernResourcesSize.brotli).toBeWithinSize(MODERN_JS_RESOURCES_BROTLI_KB_SIZE);\n  });","file":"dev/async-config.size-limit.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["basic ssr"],"updatePoint":{"line":12,"column":9,"index":338},"line":12,"code":"  test('/', async () => {\n    expect(nuxt.options.head.title).toBe('Async Config!');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>I am ALIVE!</h1>');\n  });","file":"dev/async-config.test.js","skipped":false,"dir":"test"},{"name":"Nuxt.version is same as package","suites":["basic config defaults"],"updatePoint":{"line":8,"column":39,"index":277},"line":8,"code":"  test('Nuxt.version is same as package', () => {\n    expect(Nuxt.version).toBe(version);\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"modulesDir uses /node_modules as default if not set","suites":["basic config defaults"],"updatePoint":{"line":11,"column":59,"index":393},"line":11,"code":"  test('modulesDir uses /node_modules as default if not set', () => {\n    const options = getNuxtConfig({});\n    const currentNodeModulesDir = resolve(__dirname, '..', '..', 'node_modules');\n    expect(options.modulesDir).toContain(currentNodeModulesDir);\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"client source map not generated","suites":["basic config defaults"],"updatePoint":{"line":16,"column":39,"index":635},"line":16,"code":"  test('client source map not generated', async () => {\n    const mapFiles = await glob(resolve(__dirname, '..', 'fixtures/basic/.nuxt/dist/client/*.js.map'));\n    expect(mapFiles.length).toEqual(0);\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"vendor has been deprecated","suites":["basic config defaults"],"updatePoint":{"line":20,"column":34,"index":836},"line":20,"code":"  test('vendor has been deprecated', () => {\n    const options = getNuxtConfig({\n      build: {\n        vendor: 'vue'\n      }\n    });\n    expect(options.build.vendor).toBeUndefined();\n    expect(consola.warn).toHaveBeenCalledWith('vendor has been deprecated due to webpack4 optimization');\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"globalName uses nuxt as default if not set","suites":["basic config defaults"],"updatePoint":{"line":29,"column":50,"index":1148},"line":29,"code":"  test('globalName uses nuxt as default if not set', () => {\n    const options = getNuxtConfig({});\n    expect(options.globalName).toEqual('nuxt');\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"globalName uses nuxt as default if set to something other than only letters","suites":["basic config defaults"],"updatePoint":{"line":33,"column":83,"index":1335},"line":33,"code":"  test('globalName uses nuxt as default if set to something other than only letters', () => {\n    let options = getNuxtConfig({\n      globalName: '12foo4'\n    });\n    expect(options.globalName).toEqual('nuxt');\n    options = getNuxtConfig({\n      globalName: 'foo bar'\n    });\n    expect(options.globalName).toEqual('nuxt');\n    options = getNuxtConfig({\n      globalName: 'foo?'\n    });\n    expect(options.globalName).toEqual('nuxt');\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"@nuxtjs/babel-preset-app has been deprecated","suites":["basic config defaults"],"updatePoint":{"line":47,"column":52,"index":1746},"line":47,"code":"  test('@nuxtjs/babel-preset-app has been deprecated', () => {\n    let options = getNuxtConfig({\n      build: {\n        babel: {\n          presets: ['@nuxtjs/babel-preset-app']\n        }\n      }\n    });\n    expect(options.build.babel.presets).toEqual(['@nuxt/babel-preset-app']);\n    expect(consola.warn).toHaveBeenCalledWith('@nuxtjs/babel-preset-app has been deprecated, please use @nuxt/babel-preset-app.');\n    consola.warn.mockClear();\n    options = getNuxtConfig({\n      build: {\n        babel: {\n          presets: [['@nuxtjs/babel-preset-app']]\n        }\n      }\n    });\n    expect(options.build.babel.presets).toEqual([['@nuxt/babel-preset-app']]);\n    expect(consola.warn).toHaveBeenCalledWith('@nuxtjs/babel-preset-app has been deprecated, please use @nuxt/babel-preset-app.');\n  });","file":"dev/basic.config.defaults.test.js","skipped":false,"dir":"test"},{"name":"Check build:done hook called","suites":["basic dev"],"updatePoint":{"line":88,"column":36,"index":2327},"line":88,"code":"  test('Check build:done hook called', () => {\n    expect(builder.__hook_built_called__).toBe(true);\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"Config: build.transpile","suites":["basic dev"],"updatePoint":{"line":91,"column":31,"index":2429},"line":91,"code":"  test('Config: build.transpile', () => {\n    expect(transpile('vue-test')).toBe(true);\n    expect(transpile(path.normalize('node_modules/test.js'))).toBe(false);\n    expect(transpile(path.normalize('node_modules/vue-test'))).toBe(true);\n    expect(transpile(path.normalize('node_modules/vue.test.js'))).toBe(true);\n    expect(transpile(path.normalize('node_modules/test.vue.js'))).toBe(true);\n    expect(transpile(path.normalize('node_modules/@scoped/packageA/src/index.js'))).toBe(true);\n    expect(transpile(path.normalize('node_modules/@scoped/packageB/src/index.js'))).toBe(true);\n    expect(transpile(path.normalize('node_modules/normal-test'))).toBe(true);\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"Config: build.filenames","suites":["basic dev"],"updatePoint":{"line":101,"column":31,"index":3099},"line":101,"code":"  test('Config: build.filenames', () => {\n    expect(output.filename).toBe('test-app.js');\n    expect(output.chunkFilename).toBe('test-[name].[contenthash].js');\n    expect(consola.warn).toBeCalledWith('Notice: Please do not use contenthash in dev mode to prevent memory leak');\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"Config: build.loaders","suites":["basic dev"],"updatePoint":{"line":106,"column":29,"index":3382},"line":106,"code":"  test('Config: build.loaders', () => {\n    expect(Object.keys(loadersOptions)).toHaveLength(12);\n    expect(loadersOptions).toHaveProperty('file', 'fontUrl', 'imgUrl', 'pugPlain', 'vue', 'css', 'cssModules', 'less', 'sass', 'scss', 'stylus', 'vueStyle');\n    const {\n      cssModules,\n      vue\n    } = loadersOptions;\n    expect(cssModules.modules.localIdentName).toBe('[hash:base64:6]');\n    expect(vueLoader.options).toBe(vue);\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"Config: preset-env and cssnano are at then end of postcss plugins","suites":["basic dev"],"updatePoint":{"line":116,"column":73,"index":3864},"line":116,"code":"  test('Config: preset-env and cssnano are at then end of postcss plugins', () => {\n    const plugins = postcssLoader.options.plugins.map(plugin => {\n      return plugin.postcssPlugin;\n    });\n    expect(plugins).toEqual(['postcss-import', 'postcss-url', 'nuxt-test', 'postcss-preset-env', 'cssnano']);\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/stateless","suites":["basic dev"],"updatePoint":{"line":122,"column":18,"index":4118},"line":122,"code":"  test('/stateless', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/stateless'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>My component!</h1>'); // Check render:routeDone hook called\n\n    expect(nuxt.__hook_render_routeDone__).toBe('/stateless');\n    window.close();\n  }); // test('/_nuxt/test.hot-update.json should returns empty html', async t => {","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/__open-in-editor (open-in-editor)","suites":["basic dev"],"updatePoint":{"line":138,"column":42,"index":4742},"line":138,"code":"  test('/__open-in-editor (open-in-editor)', async () => {\n    const {\n      body\n    } = await rp(url('/__open-in-editor?file=pages/index.vue'));\n    expect(body).toBe('');\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/__open-in-editor should return error (open-in-editor)","suites":["basic dev"],"updatePoint":{"line":144,"column":62,"index":4942},"line":144,"code":"  test('/__open-in-editor should return error (open-in-editor)', async () => {\n    await expect(rp(url('/__open-in-editor?file='))).rejects.toMatchObject({\n      response: {\n        statusCode: 500,\n        body: 'launch-editor-middleware: required query param \"file\" is missing.'\n      }\n    });\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/error should return error stack trace (Youch)","suites":["basic dev"],"updatePoint":{"line":152,"column":54,"index":5237},"line":152,"code":"  test('/error should return error stack trace (Youch)', async () => {\n    await expect(nuxt.server.renderAndGetWindow(url('/error'))).rejects.toThrow('Resource was not loaded. Status: 500');\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/error should return json format error (Youch)","suites":["basic dev"],"updatePoint":{"line":155,"column":54,"index":5435},"line":155,"code":"  test('/error should return json format error (Youch)', async () => {\n    const opts = {\n      headers: {\n        accept: 'application/json'\n      }\n    };\n    await expect(rp(url('/error'), opts)).rejects.toMatchObject({\n      response: {\n        statusCode: 500,\n        headers: {\n          'content-type': 'text/json; charset=utf-8'\n        }\n      }\n    });\n  });","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"/ should display ssr log in collapsed group","suites":["basic dev"],"updatePoint":{"line":170,"column":51,"index":5802},"line":170,"code":"  test('/ should display ssr log in collapsed group', async () => {\n    const virtualConsole = new jsdom.VirtualConsole();\n    const groupCollapsed = jest.fn();\n    const groupEnd = jest.fn();\n    const log = jest.fn();\n    virtualConsole.on('groupCollapsed', groupCollapsed);\n    virtualConsole.on('groupEnd', groupEnd);\n    virtualConsole.on('log', log);\n    await nuxt.server.renderAndGetWindow(url('/'), {\n      virtualConsole\n    });\n    expect(groupCollapsed).toHaveBeenCalledWith('%cNuxt SSR', 'background: #2E495E;border-radius: 0.5em;color: white;font-weight: bold;padding: 2px 0.5em;');\n    expect(groupEnd).toHaveBeenCalled();\n    expect(log).toHaveBeenCalledWith('This is a test ssr log');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/basic.dev.test.js","skipped":false,"dir":"test"},{"name":"dynamic config is injected","suites":["basic ssr"],"updatePoint":{"line":48,"column":34,"index":1353},"line":48,"code":"  test('dynamic config is injected', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/path/'), {\n      resources: resourceLoader\n    });\n    expect(window.document.body.innerHTML).toContain('<h1>Index page</h1>');\n    expect(window.__NUXT__.config._app.basePath).toBe('/path/');\n    expect(window.__NUXT__.config._app.cdnURL).toBe('https://cdn.nuxtjs.org/');\n    expect(window.__NUXT__.config._app.assetsPath).toBe('/');\n    expect(fetchCount).toBeGreaterThan(0);\n  });","file":"dev/basic.dynamic.test.js","skipped":false,"dir":"test"},{"name":"dynamic publicPath is used in ssr html","suites":["basic ssr"],"updatePoint":{"line":58,"column":46,"index":1862},"line":58,"code":"  test('dynamic publicPath is used in ssr html', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/', {\n      resources: resourceLoader\n    });\n    expect(html).toContain('<img src=\"https://cdn.nuxtjs.org/img');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/basic.dynamic.test.js","skipped":false,"dir":"test"},{"name":"Fail with routes() which throw an error","suites":["basic fail generate"],"updatePoint":{"line":3,"column":47,"index":154},"line":3,"code":"  test('Fail with routes() which throw an error', async () => {\n    const options = await loadFixture('basic', {\n      generate: {\n        routes() {\n          throw new Error('Not today!');\n        }\n\n      }\n    });\n    const nuxt = new Nuxt(options);\n    await nuxt.ready();\n    const builder = new Builder(nuxt);\n    builder.build = jest.fn();\n    const generator = new Generator(nuxt, builder);\n    await generator.generate().catch(e => {\n      expect(e.message).toBe('Not today!');\n    });\n  });","file":"dev/basic.fail.generate.test.js","skipped":false,"dir":"test"},{"name":"Fail when generate.dir equals rootDir","suites":["basic fail generate"],"updatePoint":{"line":21,"column":45,"index":654},"line":21,"code":"  test('Fail when generate.dir equals rootDir', async () => {\n    const options = await loadFixture('basic', {\n      generate: {\n        dir: '../basic'\n      }\n    });\n    expect(() => {\n      new Nuxt(options);\n      /* eslint-disable-line no-new */\n    }).toThrow(/options.generate.dir cannot be/);\n  });","file":"dev/basic.fail.generate.test.js","skipped":false,"dir":"test"},{"name":"Check builder","suites":["basic generate"],"updatePoint":{"line":58,"column":21,"index":1813},"line":58,"code":"  test('Check builder', () => {\n    expect(builder.bundleBuilder.buildContext.target).toBe(TARGETS.static);\n    expect(builder.build).toHaveBeenCalledTimes(1);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"Check ready hook called","suites":["basic generate"],"updatePoint":{"line":62,"column":31,"index":1989},"line":62,"code":"  test('Check ready hook called', () => {\n    expect(generator.nuxt.__hook_ready_called__).toBe(true);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"Check changed files","suites":["basic generate"],"updatePoint":{"line":65,"column":27,"index":2094},"line":65,"code":"  test('Check changed files', () => {\n    // When generating Nuxt we only expect files to change\n    // within nuxt.options.generate.dir, but also allow other\n    // .nuxt dirs for when tests are runInBand\n    const allowChangesDir = resolve(generator.nuxt.options.generate.dir, '..', '.nuxt');\n    let changedFileFound = false;\n    const paths = listPaths(generator.nuxt.options.rootDir, pathsBefore);\n    paths.forEach(item => {\n      if (item.path === changedFileName) {\n        changedFileFound = true;\n      } else {\n        expect(equalOrStartsWith(allowChangesDir, item.path)).toBe(true);\n      }\n    });\n    expect(changedFileFound).toBe(true);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"Format errors","suites":["basic generate"],"updatePoint":{"line":81,"column":21,"index":2747},"line":81,"code":"  test('Format errors', () => {\n    const error = generator._formatErrors([{\n      type: 'handled',\n      route: '/h1',\n      error: 'page not found'\n    }, {\n      type: 'unhandled',\n      route: '/h2',\n      error: {\n        stack: 'unhandled error stack'\n      }\n    }]);\n\n    expect(error).toMatch(' /h1');\n    expect(error).toMatch(' /h2');\n    expect(error).toMatch('\"page not found\"');\n    expect(error).toMatch('unhandled error stack');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/stateless","suites":["basic generate"],"updatePoint":{"line":99,"column":18,"index":3195},"line":99,"code":"  test('/stateless', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/stateless'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>My component!</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/store-module","suites":["basic generate"],"updatePoint":{"line":104,"column":21,"index":3428},"line":104,"code":"  test('/store-module', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/store-module'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>mutated</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/css","suites":["basic generate"],"updatePoint":{"line":109,"column":12,"index":3649},"line":109,"code":"  test('/css', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/css'));\n    const headHtml = window.document.head.innerHTML;\n    expect(headHtml).toContain('.red{color:red');\n    const element = window.document.querySelector('.red');\n    expect(element).not.toBe(null);\n    expect(element.textContent).toContain('This is red');\n    expect(element.className).toBe('red'); // t.is(window.getComputedStyle(element), 'red')\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/stateful","suites":["basic generate"],"updatePoint":{"line":118,"column":17,"index":4117},"line":118,"code":"  test('/stateful', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/stateful'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<div><p>The answer is 42</p></div>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/head","suites":["basic generate"],"updatePoint":{"line":123,"column":13,"index":4353},"line":123,"code":"  test('/head', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/head'));\n    const html = window.document.body.innerHTML;\n    const metas = window.document.getElementsByTagName('meta');\n    expect(window.document.title).toBe('My title - Nuxt');\n    expect(metas[0].getAttribute('data-n-head')).toBe('ssr');\n    expect(metas[1].getAttribute('content')).toBe('my meta');\n    expect(html).toContain('<div><h1>I can haz meta tags</h1></div>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/async-data","suites":["basic generate"],"updatePoint":{"line":132,"column":19,"index":4843},"line":132,"code":"  test('/async-data', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/async-data'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>Nuxt</p>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/fetch","suites":["basic generate"],"updatePoint":{"line":137,"column":14,"index":5059},"line":137,"code":"  test('/fetch', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/fetch'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<code>true</code>');\n    expect(window.__NUXT__.fetch.custom100.fetched).toBe(true);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/тест雨 (test non ascii route)","suites":["basic generate"],"updatePoint":{"line":143,"column":37,"index":5363},"line":143,"code":"  test('/тест雨 (test non ascii route)', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/тест雨'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('Hello unicode');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/1/index.html","suites":["basic generate"],"updatePoint":{"line":148,"column":27,"index":5589},"line":148,"code":"  test('/users/1/index.html', async () => {\n    const {\n      body: html\n    } = await rp(url('/users/1/index.html'));\n    expect(html).toContain('<h1>User: 1</h1>');\n    expect(existsSync(resolve(distDir, 'users/1/index.html'))).toBe(true);\n    expect(existsSync(resolve(distDir, 'users/1.html'))).toBe(false);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/2","suites":["basic generate"],"updatePoint":{"line":156,"column":16,"index":5896},"line":156,"code":"  test('/users/2', async () => {\n    const {\n      body: html\n    } = await rp(url('/users/2'));\n    expect(html).toContain('<h1>User: 2</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/3 (payload given)","suites":["basic generate"],"updatePoint":{"line":162,"column":32,"index":6063},"line":162,"code":"  test('/users/3 (payload given)', async () => {\n    const {\n      body: html\n    } = await rp(url('/users/3'));\n    expect(html).toContain('<h1>User: 3000</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/4 -> Not found","suites":["basic generate"],"updatePoint":{"line":168,"column":29,"index":6230},"line":168,"code":"  test('/users/4 -> Not found', async () => {\n    await expect(rp(url('/users/4'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404,\n        body: expect.stringContaining('Cannot GET /users/4')\n      }\n    });\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/validate should not be server-rendered","suites":["basic generate"],"updatePoint":{"line":176,"column":47,"index":6482},"line":176,"code":"  test('/validate should not be server-rendered', async () => {\n    const {\n      body: html\n    } = await rp(url('/validate'));\n    expect(html).toContain('<div id=\"__nuxt\"></div>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/validate?valid=true","suites":["basic generate"],"updatePoint":{"line":187,"column":28,"index":6917},"line":187,"code":"  test('/validate?valid=true', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/validate?valid=true'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('I am valid</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/redirect should not be server-rendered","suites":["basic generate"],"updatePoint":{"line":192,"column":47,"index":7179},"line":192,"code":"  test('/redirect should not be server-rendered', async () => {\n    const {\n      body: html\n    } = await rp(url('/redirect'));\n    expect(html).toContain('<div id=\"__nuxt\"></div>'); // vue-meta should also not indicate ssr\n\n    expect(html).toContain('<html>');\n    expect(html).toContain('<meta data-n-head=\"1\" charset=\"utf-8\">');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/redirect -> check redirected source","suites":["basic generate"],"updatePoint":{"line":201,"column":44,"index":7516},"line":201,"code":"  test('/redirect -> check redirected source', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/redirect'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>Index page</h1>');\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/1 not found","suites":["basic generate"],"updatePoint":{"line":206,"column":26,"index":7750},"line":206,"code":"  test('/users/1 not found', async () => {\n    await remove(resolve(distDir, 'users'));\n    await expect(rp(url('/users/1'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404,\n        body: expect.stringContaining('Cannot GET /users/1')\n      }\n    });\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"nuxt re-generating with no subfolders","suites":["basic generate"],"updatePoint":{"line":215,"column":45,"index":8045},"line":215,"code":"  test('nuxt re-generating with no subfolders', async () => {\n    generator.nuxt.options.generate.subFolders = false;\n    generator.getAppRoutes = jest.fn(() => []);\n    await expect(generator.generate()).resolves.toBeTruthy();\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/users/1.html","suites":["basic generate"],"updatePoint":{"line":220,"column":21,"index":8255},"line":220,"code":"  test('/users/1.html', async () => {\n    const {\n      body\n    } = await rp(url('/users/1.html'));\n    expect(body).toContain('<h1>User: 1</h1>');\n    expect(existsSync(resolve(distDir, 'users/1.html'))).toBe(true);\n    expect(existsSync(resolve(distDir, 'users/1/index.html'))).toBe(false);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/-ignored","suites":["basic generate"],"updatePoint":{"line":228,"column":17,"index":8551},"line":228,"code":"  test('/-ignored', async () => {\n    await expect(rp(url('/-ignored'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404,\n        body: expect.stringContaining('Cannot GET /-ignored')\n      }\n    });\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/ignored.test","suites":["basic generate"],"updatePoint":{"line":236,"column":21,"index":8779},"line":236,"code":"  test('/ignored.test', async () => {\n    await expect(rp(url('/ignored.test'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404,\n        body: expect.stringContaining('Cannot GET /ignored.test')\n      }\n    });\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"creates /200.html as fallback","suites":["basic generate"],"updatePoint":{"line":244,"column":37,"index":9031},"line":244,"code":"  test('creates /200.html as fallback', async () => {\n    const {\n      body: html\n    } = await rp(url('/200.html'));\n    expect(html.includes('<h1>Index page</h1>')).toBe(false);\n    expect(html.includes('data-server-rendered')).toBe(false);\n    expect(existsSync(resolve(distDir, '200.html'))).toBe(true);\n    expect(existsSync(resolve(distDir, '404.html'))).toBe(false);\n  });","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"Checke skipped files","suites":["basic generate"],"updatePoint":{"line":253,"column":28,"index":9403},"line":253,"code":"  test('Checke skipped files', () => {\n    expect(existsSync(resolve(distDir, 'skip-on-fail/fail.html'))).toBe(false);\n    expect(existsSync(resolve(distDir, 'skip-on-fail/success.html'))).toBe(true);\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/basic.generate.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["plugins"],"updatePoint":{"line":15,"column":9,"index":388},"line":15,"code":"  test('/', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/'));\n    expect(window.__test_plugin).toBe(true);\n  });","file":"dev/basic.plugins.test.js","skipped":false,"dir":"test"},{"name":"inject fails if value is undefined","suites":["plugins"],"updatePoint":{"line":19,"column":42,"index":565},"line":19,"code":"  test('inject fails if value is undefined', async () => {\n    // inject('injectedProperty', undefined)\n    await expect(nuxt.renderRoute('/?injectValue=undefined')).rejects.toThrowError('inject(\\'injectedProperty\\', value) has no value provided');\n  });","file":"dev/basic.plugins.test.js","skipped":false,"dir":"test"},{"name":"inject succeeds if value is defined but evaluates to false","suites":["plugins"],"updatePoint":{"line":23,"column":66,"index":844},"line":23,"code":"  test('inject succeeds if value is defined but evaluates to false', async () => {\n    // inject('injectedProperty', null)\n    await expect(nuxt.renderRoute('/?injectValue=null')).resolves.not.toThrowError(); // inject('injectedProperty', false)\n\n    await expect(nuxt.renderRoute('/?injectValue=false')).resolves.not.toThrowError(); // inject('injectedProperty', 0)\n\n    await expect(nuxt.renderRoute('/?injectValue=0')).resolves.not.toThrowError(); // inject('injectedProperty', '')\n\n    await expect(nuxt.renderRoute('/?injectValue=empty')).resolves.not.toThrowError();\n  });","file":"dev/basic.plugins.test.js","skipped":false,"dir":"test"},{"name":"inject should add to context and prototypes","suites":["plugins"],"updatePoint":{"line":33,"column":51,"index":1408},"line":33,"code":"  test('inject should add to context and prototypes', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/?injectValue=foo')); // inject('injectedProperty', 'bar')\n\n    await expect(window.$nuxt.$injectedProperty).toBe('bar');\n    await expect(window.$nuxt.context.$injectedProperty).toBe('bar');\n    await expect(window.$nuxt.context.app.$injectedProperty).toBe('bar');\n    await expect(window.$nuxt.$store.$injectedProperty).toBe('bar');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/basic.plugins.test.js","skipped":false,"dir":"test"},{"name":"Not contain Content-Security-Policy header, when csp is false","suites":["basic ssr csp","production mode"],"updatePoint":{"line":33,"column":71,"index":900},"line":33,"code":"    test('Not contain Content-Security-Policy header, when csp is false', async () => {\n      nuxt = await startCspServer(false);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toBe(undefined);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when csp is set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":40,"column":65,"index":1151},"line":40,"code":"    test('Contain Content-Security-Policy header, when csp is set', async () => {\n      nuxt = await startCspServer(true);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toMatch(/^script-src 'self' 'sha256-.*'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy-Report-Only header, when explicitly asked for","suites":["basic ssr csp","production mode"],"updatePoint":{"line":47,"column":87,"index":1450},"line":47,"code":"    test('Contain Content-Security-Policy-Report-Only header, when explicitly asked for', async () => {\n      nuxt = await startCspDevServer({\n        reportOnly: true\n      });\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/^script-src 'self' 'sha256-.*'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain only unique hashes in header when csp is set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":56,"column":62,"index":1764},"line":56,"code":"    test('Contain only unique hashes in header when csp is set', async () => {\n      nuxt = await startCspServer(true);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      const hashes = headers[cspHeader].split(' ').filter(s => s.startsWith('\\'sha256-'));\n      const uniqueHashes = [...new Set(hashes)];\n      expect(uniqueHashes.length).toBe(hashes.length);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when csp.allowedSources set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":65,"column":77,"index":2171},"line":65,"code":"    test('Contain Content-Security-Policy header, when csp.allowedSources set', async () => {\n      const cspOption = {\n        allowedSources: ['https://example.com', 'https://example.io']\n      };\n      nuxt = await startCspServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toMatch(/^script-src 'self' 'sha256-.*'/);\n      expect(headers[cspHeader]).toContain('https://example.com');\n      expect(headers[cspHeader]).toContain('https://example.io');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when csp.policies set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":77,"column":71,"index":2696},"line":77,"code":"    test('Contain Content-Security-Policy header, when csp.policies set', async () => {\n      const cspOption = {\n        enabled: true,\n        policies: {\n          'default-src': ['\\'none\\''],\n          'script-src': ['https://example.com', 'https://example.io']\n        }\n      };\n      nuxt = await startCspServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toMatch(/default-src 'none'/);\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-(.*)?' 'self'/);\n      expect(headers[cspHeader]).toContain('https://example.com');\n      expect(headers[cspHeader]).toContain('https://example.io');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when csp.policies.script-src is not set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":94,"column":89,"index":3397},"line":94,"code":"    test('Contain Content-Security-Policy header, when csp.policies.script-src is not set', async () => {\n      const cspOption = {\n        enabled: true,\n        policies: {\n          'default-src': ['\\'none\\'']\n        }\n      };\n      nuxt = await startCspServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toMatch(/default-src 'none'/);\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-.*' 'self'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain report-uri in Content-Security-Policy-Report-Only header, when explicitly asked for CSRP, allowedSources, csp.report-url","suites":["basic ssr csp","production mode"],"updatePoint":{"line":108,"column":138,"index":3941},"line":108,"code":"    test('Contain report-uri in Content-Security-Policy-Report-Only header, when explicitly asked for CSRP, allowedSources, csp.report-url', async () => {\n      const cspOption = {\n        allowedSources: ['https://example.com', 'https://example.io'],\n        reportOnly: true,\n        policies: {\n          'report-uri': '/csp_report_uri'\n        }\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/^script-src 'self' 'sha256-.*'/);\n      expect(headers[reportOnlyHeader]).toContain('https://example.com');\n      expect(headers[reportOnlyHeader]).toContain('https://example.io');\n      expect(headers[reportOnlyHeader]).toContain('report-uri /csp_report_uri');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain only unique hashes in header when csp.policies is set","suites":["basic ssr csp","production mode"],"updatePoint":{"line":125,"column":71,"index":4670},"line":125,"code":"    test('Contain only unique hashes in header when csp.policies is set', async () => {\n      const policies = {\n        'default-src': ['\\'self\\''],\n        'script-src': ['\\'self\\''],\n        'style-src': ['\\'self\\'']\n      };\n      nuxt = await startCspServer({\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      const hashes = headers[cspHeader].split(' ').filter(s => s.startsWith('\\'sha256-'));\n      const uniqueHashes = [...new Set(hashes)];\n      expect(uniqueHashes.length).toBe(hashes.length);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Not contain hash when 'unsafe-inline' option is present in script-src policy","suites":["basic ssr csp","production mode"],"updatePoint":{"line":146,"column":88,"index":5333},"line":146,"code":"    test('Not contain hash when \\'unsafe-inline\\' option is present in script-src policy', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspServer({\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[cspHeader]).toMatch(/script-src 'self' 'unsafe-inline'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain hash and 'unsafe-inline' when unsafeInlineCompatibility is enabled","suites":["basic ssr csp","production mode"],"updatePoint":{"line":163,"column":86,"index":5816},"line":163,"code":"    test('Contain hash and \\'unsafe-inline\\' when unsafeInlineCompatibility is enabled', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspServer({\n        unsafeInlineCompatibility: true,\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-.*' 'self' 'unsafe-inline'$/);\n    }); // TODO: Remove this test in Nuxt 3, we will stop supporting this typo (more on: https://github.com/nuxt/nuxt.js/pull/6583)","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain hash and 'unsafe-inline' when the typo property unsafeInlineCompatiblity is enabled","suites":["basic ssr csp","production mode"],"updatePoint":{"line":182,"column":103,"index":6494},"line":182,"code":"    test('Contain hash and \\'unsafe-inline\\' when the typo property unsafeInlineCompatiblity is enabled', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspServer({\n        unsafeInlineCompatiblity: true,\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-.*' 'self' 'unsafe-inline'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Not contain Content-Security-Policy-Report-Only header, when csp is false","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":202,"column":83,"index":7065},"line":202,"code":"    test('Not contain Content-Security-Policy-Report-Only header, when csp is false', async () => {\n      nuxt = await startCspDevServer(false);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toBe(undefined);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when explicitly asked for","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":209,"column":75,"index":7336},"line":209,"code":"    test('Contain Content-Security-Policy header, when explicitly asked for', async () => {\n      nuxt = await startCspDevServer({\n        reportOnly: false\n      });\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[cspHeader]).toMatch(/^script-src 'self' 'sha256-.*'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy header, when csp is set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":218,"column":65,"index":7647},"line":218,"code":"    test('Contain Content-Security-Policy header, when csp is set', async () => {\n      nuxt = await startCspDevServer(true);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/^script-src 'self' 'sha256-.*'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain only unique hashes in header when csp is set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":225,"column":62,"index":7931},"line":225,"code":"    test('Contain only unique hashes in header when csp is set', async () => {\n      nuxt = await startCspDevServer(true);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      const hashes = headers[reportOnlyHeader].split(' ').filter(s => s.startsWith('\\'sha256-'));\n      const uniqueHashes = [...new Set(hashes)];\n      expect(uniqueHashes.length).toBe(hashes.length);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy-Report-Only header, when csp.allowedSources set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":234,"column":89,"index":8360},"line":234,"code":"    test('Contain Content-Security-Policy-Report-Only header, when csp.allowedSources set', async () => {\n      const cspOption = {\n        allowedSources: ['https://example.com', 'https://example.io']\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/^script-src 'self' 'sha256-.*'/);\n      expect(headers[reportOnlyHeader]).toContain('https://example.com');\n      expect(headers[reportOnlyHeader]).toContain('https://example.io');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy-Report-Only header, when csp.policies set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":246,"column":83,"index":8921},"line":246,"code":"    test('Contain Content-Security-Policy-Report-Only header, when csp.policies set', async () => {\n      const cspOption = {\n        enabled: true,\n        policies: {\n          'default-src': ['\\'none\\''],\n          'script-src': ['https://example.com', 'https://example.io']\n        }\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/default-src 'none'/);\n      expect(headers[reportOnlyHeader]).toMatch(/script-src 'sha256-(.*)?' 'self'/);\n      expect(headers[reportOnlyHeader]).toContain('https://example.com');\n      expect(headers[reportOnlyHeader]).toContain('https://example.io');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain report-uri in Content-Security-Policy-Report-Only header, when explicitly asked for CSRP, allowedSources, csp.report-url","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":263,"column":138,"index":9702},"line":263,"code":"    test('Contain report-uri in Content-Security-Policy-Report-Only header, when explicitly asked for CSRP, allowedSources, csp.report-url', async () => {\n      const cspOption = {\n        allowedSources: ['https://example.com', 'https://example.io'],\n        reportOnly: true,\n        policies: {\n          'report-uri': '/csp_report_uri'\n        }\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/^script-src 'self' 'sha256-.*'/);\n      expect(headers[reportOnlyHeader]).toContain('https://example.com');\n      expect(headers[reportOnlyHeader]).toContain('https://example.io');\n      expect(headers[reportOnlyHeader]).toContain('report-uri /csp_report_uri');\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain Content-Security-Policy-Report-Only header, when csp.policies.script-src is not set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":280,"column":101,"index":10461},"line":280,"code":"    test('Contain Content-Security-Policy-Report-Only header, when csp.policies.script-src is not set', async () => {\n      const cspOption = {\n        enabled: true,\n        policies: {\n          'default-src': ['\\'none\\'']\n        }\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers\n      } = await rp(url('/stateless'));\n      expect(headers[reportOnlyHeader]).toMatch(/default-src 'none'/);\n      expect(headers[reportOnlyHeader]).toMatch(/script-src 'sha256-.*' 'self'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain only unique hashes in header when csp.policies is set","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":294,"column":71,"index":10955},"line":294,"code":"    test('Contain only unique hashes in header when csp.policies is set', async () => {\n      const policies = {\n        'default-src': ['\\'self\\''],\n        'script-src': ['\\'self\\''],\n        'style-src': ['\\'self\\'']\n      };\n      nuxt = await startCspDevServer({\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      const hashes = headers[reportOnlyHeader].split(' ').filter(s => s.startsWith('\\'sha256-'));\n      const uniqueHashes = [...new Set(hashes)];\n      expect(uniqueHashes.length).toBe(hashes.length);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Not contain old hashes when loading new page","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":315,"column":54,"index":11594},"line":315,"code":"    test('Not contain old hashes when loading new page', async () => {\n      const cspOption = {\n        enabled: true,\n        policies: {\n          'default-src': ['\\'self\\''],\n          'script-src': ['https://example.com', 'https://example.io']\n        }\n      };\n      nuxt = await startCspDevServer(cspOption);\n      const {\n        headers: user1Header\n      } = await rp(url('/users/1'));\n      const user1Hashes = user1Header[reportOnlyHeader].split(' ').filter(s => s.startsWith('\\'sha256-'));\n      const {\n        headers: user2Header\n      } = await rp(url('/users/2'));\n      const user2Hashes = new Set(user2Header[reportOnlyHeader].split(' ').filter(s => s.startsWith('\\'sha256-')));\n      const intersection = new Set(user1Hashes.filter(x => user2Hashes.has(x)));\n      expect(intersection.size).toBe(0);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Not contain hash when 'unsafe-inline' option is present in script-src policy","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":335,"column":88,"index":12458},"line":335,"code":"    test('Not contain hash when \\'unsafe-inline\\' option is present in script-src policy', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspDevServer({\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[reportOnlyHeader]).toMatch(/script-src 'self' 'unsafe-inline'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain hash and 'unsafe-inline' when unsafeInlineCompatibility is enabled","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":352,"column":86,"index":12951},"line":352,"code":"    test('Contain hash and \\'unsafe-inline\\' when unsafeInlineCompatibility is enabled', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspServer({\n        unsafeInlineCompatibility: true,\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-.*' 'self' 'unsafe-inline'$/);\n    }); // TODO: Remove this test in Nuxt 3, we will stop supporting this typo (more on: https://github.com/nuxt/nuxt.js/pull/6583)","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"Contain hash and 'unsafe-inline' when the typo property unsafeInlineCompatiblity is enabled","suites":["basic ssr csp","debug mode"],"updatePoint":{"line":371,"column":103,"index":13629},"line":371,"code":"    test('Contain hash and \\'unsafe-inline\\' when the typo property unsafeInlineCompatiblity is enabled', async () => {\n      const policies = {\n        'script-src': ['\\'unsafe-inline\\'']\n      };\n      nuxt = await startCspServer({\n        unsafeInlineCompatiblity: true,\n        policies\n      });\n\n      for (let i = 0; i < 5; i++) {\n        await rp(url('/stateless'));\n      }\n\n      const {\n        headers\n      } = await rp(url('/stateful'));\n      expect(headers[cspHeader]).toMatch(/script-src 'sha256-.*' 'self' 'unsafe-inline'$/);\n    });","file":"dev/basic.ssr.csp.test.js","skipped":false,"dir":"test"},{"name":"/stateless","suites":["basic ssr"],"updatePoint":{"line":16,"column":18,"index":434},"line":16,"code":"  test('/stateless', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/stateless');\n    expect(html).toContain('<h1>My component!</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/store-module","suites":["basic ssr"],"updatePoint":{"line":22,"column":21,"index":608},"line":22,"code":"  test('/store-module', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/store-module');\n    expect(html).toContain('<h1>mutated</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/css","suites":["basic ssr"],"updatePoint":{"line":32,"column":12,"index":822},"line":32,"code":"  test('/css', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/css'));\n    const headHtml = window.document.head.innerHTML;\n    expect(headHtml).toContain('color:red');\n    const element = window.document.querySelector('.red');\n    expect(element).not.toBe(null);\n    expect(element.textContent).toContain('This is red');\n    expect(element.className).toBe('red'); // t.is(window.getComputedStyle(element).color, 'red')\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/postcss","suites":["basic ssr"],"updatePoint":{"line":41,"column":16,"index":1280},"line":41,"code":"  test('/postcss', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/css'));\n    const headHtml = window.document.head.innerHTML;\n    expect(headHtml).toContain('color:red');\n    const element = window.document.querySelector('.red');\n    expect(element).not.toBe(null);\n    expect(element.textContent).toContain('This is red');\n    expect(element.className).toBe('red'); // t.is(window.getComputedStyle(element).color, 'red')\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/postcss","suites":["basic ssr"],"updatePoint":{"line":50,"column":16,"index":1738},"line":50,"code":"  test('/postcss', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/css'));\n    const headHtml = window.document.head.innerHTML;\n    expect(headHtml).toContain('background-color:#00f'); // const element = window.document.querySelector('div.red')\n    // t.is(window.getComputedStyle(element)['background-color'], 'blue')\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/stateful","suites":["basic ssr"],"updatePoint":{"line":56,"column":17,"index":2092},"line":56,"code":"  test('/stateful', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/stateful');\n    expect(html).toContain('<div><p>The answer is 42</p></div>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/store","suites":["basic ssr"],"updatePoint":{"line":62,"column":14,"index":2270},"line":62,"code":"  test('/store', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/store');\n    expect(html).toContain('<h1>foo/bar/baz: Vuex Nested Modules</h1>');\n    expect(html).toContain('<h2>index/counter: 1</h2>');\n    expect(html).toContain('<h3>foo/blarg/getVal: 4</h3>');\n    expect(html).toContain('<h4>foo/bab/getBabVal: 10</h4>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/head","suites":["basic ssr"],"updatePoint":{"line":71,"column":13,"index":2630},"line":71,"code":"  test('/head', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/head'));\n    expect(window.document.title).toBe('My title - Nuxt');\n    const html = window.document.querySelector('html').outerHTML;\n    expect(html).toContain('<div><h1>I can haz meta tags</h1></div>');\n    expect(html).toContain('<script data-n-head=\"ssr\" src=\"/body.js\" data-body=\"true\">');\n    const metas = window.document.getElementsByTagName('meta');\n    expect(metas[1].getAttribute('content')).toBe('my meta');\n    expect(consola.log).toHaveBeenCalledWith('Body script!');\n    expect(html).toContain('<html foo=\"baz\" data-n-head=\"%7B%22foo%22:%7B%22ssr%22:%22baz%22%7D%7D\">');\n    expect(html).toContain('<head bar=\"foo\" data-n-head=\"%7B%22bar%22:%7B%22ssr%22:%22foo%22%7D%7D\">');\n    expect(html).toContain('<body baz=\"bar\" data-n-head=\"%7B%22baz%22:%7B%22ssr%22:%22bar%22%7D%7D\">');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/async-data","suites":["basic ssr"],"updatePoint":{"line":84,"column":19,"index":3529},"line":84,"code":"  test('/async-data', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/async-data');\n    expect(html).toContain('<p>Nuxt</p>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/await-async-data","suites":["basic ssr"],"updatePoint":{"line":90,"column":25,"index":3697},"line":90,"code":"  test('/await-async-data', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/await-async-data');\n    expect(html).toContain('<p>Await Nuxt</p>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/callback-async-data","suites":["basic ssr"],"updatePoint":{"line":96,"column":28,"index":3880},"line":96,"code":"  test('/callback-async-data', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/callback-async-data');\n    expect(html).toContain('<p>Callback Nuxt</p>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/users/1","suites":["basic ssr"],"updatePoint":{"line":102,"column":16,"index":4057},"line":102,"code":"  test('/users/1', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/users/1');\n    expect(html).toContain('<h1>User: 1</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate should display a 404","suites":["basic ssr"],"updatePoint":{"line":108,"column":38,"index":4240},"line":108,"code":"  test('/validate should display a 404', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/validate');\n    expect(html).toContain('This page could not be found');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate-async should display a 404","suites":["basic ssr"],"updatePoint":{"line":114,"column":44,"index":4442},"line":114,"code":"  test('/validate-async should display a 404', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/validate-async');\n    expect(html).toContain('This page could not be found');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate?valid=true","suites":["basic ssr"],"updatePoint":{"line":120,"column":28,"index":4634},"line":120,"code":"  test('/validate?valid=true', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/validate?valid=true');\n    expect(html).toContain('<h1>I am valid</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate-async?valid=true","suites":["basic ssr"],"updatePoint":{"line":126,"column":34,"index":4828},"line":126,"code":"  test('/validate-async?valid=true', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/validate-async?valid=true');\n    expect(html).toContain('<h1>I am valid</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate?error=403","suites":["basic ssr"],"updatePoint":{"line":132,"column":27,"index":5021},"line":132,"code":"  test('/validate?error=403', async () => {\n    const {\n      html,\n      error\n    } = await nuxt.server.renderRoute('/validate?error=403');\n    expect(error).toMatchObject({\n      statusCode: 403,\n      message: 'Custom Error'\n    });\n    expect(html).toContain('Custom Error');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/validate-async?error=503","suites":["basic ssr"],"updatePoint":{"line":143,"column":33,"index":5314},"line":143,"code":"  test('/validate-async?error=503', async () => {\n    const {\n      html,\n      error\n    } = await nuxt.server.renderRoute('/validate-async?error=503');\n    expect(error).toMatchObject({\n      statusCode: 503,\n      message: 'Custom Error'\n    });\n    expect(html).toContain('Custom Error');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/before-enter","suites":["basic ssr"],"updatePoint":{"line":154,"column":21,"index":5601},"line":154,"code":"  test('/before-enter', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/before-enter');\n    expect(html).toContain('<h1>Index page</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect","suites":["basic ssr","/redirect"],"updatePoint":{"line":174,"column":19,"index":6014},"line":174,"code":"    test('/redirect', async () => {\n      const {\n        html,\n        redirected\n      } = await nuxt.server.renderRoute('/redirect');\n      expect(html).toContain('<div id=\"__nuxt\"></div>');\n      expect(html).not.toContain('window.__NUXT__');\n      expect(redirected.path === '/').toBe(true);\n      expect(redirected.status === 302).toBe(true);\n    });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect -> check redirected source","suites":["basic ssr","/redirect"],"updatePoint":{"line":184,"column":46,"index":6398},"line":184,"code":"    test('/redirect -> check redirected source', async () => {\n      // there are no transition properties in jsdom, ignore the error log\n      const window = await nuxt.server.renderAndGetWindow(url('/redirect'));\n      const html = window.document.body.innerHTML;\n      expect(html).toContain('<h1>Index page</h1>');\n    });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect -> external link","suites":["basic ssr","/redirect"],"updatePoint":{"line":190,"column":36,"index":6715},"line":190,"code":"    test('/redirect -> external link', async () => {\n      const {\n        html\n      } = await nuxt.server.renderRoute('/redirect-external', renderContext);\n      expect(_status).toBe(302);\n      expect(_headers.Location).toBe('https://example.com/test/');\n      expect(html).toContain('<div data-server-rendered=\"true\" id=\"__nuxt\"></div>');\n    });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect -> external link without trailing slash","suites":["basic ssr","/redirect"],"updatePoint":{"line":198,"column":59,"index":7089},"line":198,"code":"    test('/redirect -> external link without trailing slash', async () => {\n      const {\n        html\n      } = await nuxt.server.renderRoute('/redirect-external-no-slash', renderContext);\n      expect(_status).toBe(302);\n      expect(_headers.Location).toBe('https://example.com/test');\n      expect(html).toContain('<div data-server-rendered=\"true\" id=\"__nuxt\"></div>');\n    });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect -> external link with root domain url","suites":["basic ssr","/redirect"],"updatePoint":{"line":206,"column":57,"index":7469},"line":206,"code":"    test('/redirect -> external link with root domain url', async () => {\n      const {\n        html\n      } = await nuxt.server.renderRoute('/redirect-external-root', renderContext);\n      expect(_status).toBe(302);\n      expect(_headers.Location).toBe('https://nuxtjs.org/');\n      expect(html).toContain('<div data-server-rendered=\"true\" id=\"__nuxt\"></div>');\n    });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/before-nuxt-render -> check window.__NUXT__.beforeNuxtRender = true","suites":["basic ssr","/redirect"],"updatePoint":{"line":215,"column":76,"index":7865},"line":215,"code":"  test('/before-nuxt-render -> check window.__NUXT__.beforeNuxtRender = true', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/before-nuxt-render'));\n    expect(window.document.title).toBe('Nuxt');\n    expect(window.__NUXT__.beforeNuxtRender).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/before-serialize -> check window.__NUXT__.beforeSerialize = true","suites":["basic ssr","/redirect"],"updatePoint":{"line":220,"column":73,"index":8151},"line":220,"code":"  test('/before-serialize -> check window.__NUXT__.beforeSerialize = true', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/before-serialize'));\n    expect(window.document.title).toBe('Nuxt');\n    expect(window.__NUXT__.beforeSerialize).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error","suites":["basic ssr","/redirect"],"updatePoint":{"line":225,"column":14,"index":8375},"line":225,"code":"  test('/error', async () => {\n    await expect(nuxt.server.renderRoute('/error', {\n      req: {},\n      res: {}\n    })).rejects.toThrow('Error mouahahah');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error-string","suites":["basic ssr","/redirect"],"updatePoint":{"line":231,"column":21,"index":8545},"line":231,"code":"  test('/error-string', async () => {\n    let error;\n\n    try {\n      await nuxt.server.renderRoute('/error-string', {\n        req: {},\n        res: {}\n      });\n    } catch (e) {\n      error = e;\n    }\n\n    await expect(error).toEqual('fetch error!');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error-object","suites":["basic ssr","/redirect"],"updatePoint":{"line":245,"column":21,"index":8804},"line":245,"code":"  test('/error-object', async () => {\n    let error;\n\n    try {\n      await nuxt.server.renderRoute('/error-object', {\n        req: {},\n        res: {}\n      });\n    } catch (e) {\n      error = e;\n    }\n\n    await expect(error).toEqual({\n      error: 'fetch error!'\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error status code","suites":["basic ssr","/redirect"],"updatePoint":{"line":261,"column":26,"index":9089},"line":261,"code":"  test('/error status code', async () => {\n    await expect(rp(url('/error'))).rejects.toMatchObject({\n      response: {\n        statusCode: 500\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error json format error","suites":["basic ssr","/redirect"],"updatePoint":{"line":268,"column":32,"index":9262},"line":268,"code":"  test('/error json format error', async () => {\n    const opts = {\n      headers: {\n        accept: 'application/json'\n      }\n    };\n    await expect(rp(url('/error'), opts)).rejects.toMatchObject({\n      response: {\n        statusCode: 500,\n        headers: {\n          'content-type': 'text/json; charset=utf-8'\n        }\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error2","suites":["basic ssr","/redirect"],"updatePoint":{"line":283,"column":15,"index":9593},"line":283,"code":"  test('/error2', async () => {\n    const {\n      html,\n      error\n    } = await nuxt.server.renderRoute('/error2');\n    expect(html).toContain('Custom error');\n    expect(error.message).toContain('Custom error');\n    expect(error.statusCode).toBe(500);\n    expect(error.customProp).toBe('ezpz');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error2 status code","suites":["basic ssr","/redirect"],"updatePoint":{"line":293,"column":27,"index":9909},"line":293,"code":"  test('/error2 status code', async () => {\n    await expect(rp(url('/error2'))).rejects.toMatchObject({\n      response: {\n        statusCode: 500,\n        body: expect.stringContaining('Custom error')\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/error-midd","suites":["basic ssr","/redirect"],"updatePoint":{"line":301,"column":19,"index":10125},"line":301,"code":"  test('/error-midd', async () => {\n    await expect(rp(url('/error-midd'))).rejects.toMatchObject({\n      response: {\n        statusCode: 505\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect-middleware","suites":["basic ssr","/redirect"],"updatePoint":{"line":308,"column":28,"index":10299},"line":308,"code":"  test('/redirect-middleware', async () => {\n    await expect(rp(url('/redirect-middleware'))).resolves.toBeTruthy();\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/redirect-name","suites":["basic ssr","/redirect"],"updatePoint":{"line":311,"column":22,"index":10417},"line":311,"code":"  test('/redirect-name', async () => {\n    const {\n      html,\n      redirected\n    } = await nuxt.server.renderRoute('/redirect-name');\n    expect(html).toContain('<div id=\"__nuxt\"></div>');\n    expect(redirected.path === '/stateless').toBe(true);\n    expect(redirected.status === 302).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/client-only","suites":["basic ssr","/redirect"],"updatePoint":{"line":320,"column":20,"index":10720},"line":320,"code":"  test('/client-only', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/client-only');\n    expect(html.includes('<p class=\"client-only-placeholder\">Loading...</p>')).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/client-only (client-side)","suites":["basic ssr","/redirect"],"updatePoint":{"line":326,"column":34,"index":10946},"line":326,"code":"  test('/client-only (client-side)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/client-only'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('Displayed only on client-side</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/no-ssr","suites":["basic ssr","/redirect"],"updatePoint":{"line":331,"column":15,"index":11177},"line":331,"code":"  test('/no-ssr', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/no-ssr');\n    expect(html.includes('<p class=\"no-ssr-placeholder\">Loading...</p>')).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/no-ssr (client-side)","suites":["basic ssr","/redirect"],"updatePoint":{"line":337,"column":29,"index":11388},"line":337,"code":"  test('/no-ssr (client-side)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/no-ssr'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('Displayed only on client-side</h1>');\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledWith(expect.stringContaining('<no-ssr> has been deprecated'));\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"ETag Header","suites":["basic ssr","/redirect"],"updatePoint":{"line":344,"column":19,"index":11773},"line":344,"code":"  test('ETag Header', async () => {\n    const {\n      headers: {\n        etag\n      }\n    } = await rp(url('/stateless')); // Verify functionality\n\n    const response = await rp(url('/stateless'), {\n      headers: {\n        'If-None-Match': etag\n      }\n    });\n    await expect(response).toMatchObject({\n      statusCode: 304\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/_nuxt/ should return 404","suites":["basic ssr","/redirect"],"updatePoint":{"line":360,"column":33,"index":12128},"line":360,"code":"  test('/_nuxt/ should return 404', async () => {\n    await expect(rp(url('/_nuxt/'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/meta","suites":["basic ssr","/redirect"],"updatePoint":{"line":367,"column":13,"index":12283},"line":367,"code":"  test('/meta', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/meta');\n    expect(/<pre>.*&quot;works&quot;: true.*<\\/pre>/s.test(html)).toBe(true);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/fn-midd","suites":["basic ssr","/redirect"],"updatePoint":{"line":373,"column":16,"index":12471},"line":373,"code":"  test('/fn-midd', async () => {\n    await expect(rp(url('/fn-midd'))).rejects.toMatchObject({\n      response: {\n        statusCode: 403\n      }\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/fn-midd?please=true","suites":["basic ssr","/redirect"],"updatePoint":{"line":380,"column":28,"index":12642},"line":380,"code":"  test('/fn-midd?please=true', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/fn-midd?please=true');\n    expect(html).toContain('<h1>Date:');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/router-guard","suites":["basic ssr","/redirect"],"updatePoint":{"line":386,"column":21,"index":12813},"line":386,"code":"  test('/router-guard', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/router-guard');\n    expect(html).toContain('<p>Nuxt</p>');\n    expect(html.includes('Router Guard')).toBe(false);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/router-guard-error","suites":["basic ssr","/redirect"],"updatePoint":{"line":393,"column":27,"index":13040},"line":393,"code":"  test('/router-guard-error', async () => {\n    const {\n      html,\n      error\n    } = await nuxt.server.renderRoute('/router-guard-error');\n    expect(error).toBe(null);\n    expect(html.includes('Page content')).toBe(false);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/router-guard-error?error=zepe","suites":["basic ssr","/redirect"],"updatePoint":{"line":401,"column":38,"index":13284},"line":401,"code":"  test('/router-guard-error?error=zepe', async () => {\n    const {\n      html,\n      error\n    } = await nuxt.server.renderRoute('/router-guard-error?error=zepe');\n    expect(html.includes('Page content')).toBe(false);\n    expect(html).toContain('zepe');\n    expect(error.message).toContain('zepe');\n    expect(error.statusCode).toBe(500);\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/router-guard-error?throw=ezae","suites":["basic ssr","/redirect"],"updatePoint":{"line":411,"column":38,"index":13630},"line":411,"code":"  test('/router-guard-error?throw=ezae', async () => {\n    await expect(nuxt.server.renderRoute('/router-guard-error?throw=ezae')).rejects.toMatchObject({\n      message: 'ezae'\n    });\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/jsx","suites":["basic ssr","/redirect"],"updatePoint":{"line":416,"column":12,"index":13795},"line":416,"code":"  test('/jsx', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/jsx');\n    expect(html).toContain('<h1>JSX Page</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/jsx-link","suites":["basic ssr","/redirect"],"updatePoint":{"line":422,"column":17,"index":13954},"line":422,"code":"  test('/jsx-link', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/jsx-link');\n    expect(html).toContain('<h1>JSX Link Page</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/js-link","suites":["basic ssr","/redirect"],"updatePoint":{"line":428,"column":16,"index":14122},"line":428,"code":"  test('/js-link', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/js-link');\n    expect(html).toContain('<h1>vue file is first-class</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/тест雨 (test non ascii route)","suites":["basic ssr","/redirect"],"updatePoint":{"line":434,"column":37,"index":14320},"line":434,"code":"  test('/тест雨 (test non ascii route)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/тест雨'));\n    const html = window.document.body.innerHTML;\n    expect(html).toMatch('Hello unicode');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/custom (js layout)","suites":["basic ssr","/redirect"],"updatePoint":{"line":439,"column":27,"index":14534},"line":439,"code":"  test('/custom (js layout)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/custom'));\n    const html = window.document.body.innerHTML;\n    expect(html).toMatch('<h1>JS Layout</h1>');\n    expect(html).toMatch('<h2>custom page</h2>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/symlink/symlinked","suites":["basic ssr","/redirect"],"updatePoint":{"line":447,"column":26,"index":14843},"line":447,"code":"  test('/symlink/symlinked', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/symlink/symlinked');\n    expect(html).toContain('<h1>Symlinked page</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/symlink/deep/nested-symlinked","suites":["basic ssr","/redirect"],"updatePoint":{"line":453,"column":38,"index":15043},"line":453,"code":"  test('/symlink/deep/nested-symlinked', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/symlink/deep/nested-symlinked');\n    expect(html).toContain('<h1>Nested symlink page</h1>');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/components","suites":["basic ssr","/redirect"],"updatePoint":{"line":459,"column":19,"index":15241},"line":459,"code":"  test('/components', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/components');\n    expect(html).toContain('Auto discovered component!');\n  });","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/ (normal <script>)","suites":["basic ssr","/redirect"],"updatePoint":{"line":465,"column":27,"index":15426},"line":465,"code":"  test('/ (normal <script>)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('\" defer>');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/basic.ssr.test.js","skipped":false,"dir":"test"},{"name":"/parent","suites":["children"],"updatePoint":{"line":13,"column":15,"index":403},"line":13,"code":"  test('/parent', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent');\n    expect(html).toContain('<h1>I am the parent</h1>');\n  });","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"/parent/child","suites":["children"],"updatePoint":{"line":19,"column":21,"index":576},"line":19,"code":"  test('/parent/child', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent/child');\n    expect(html).toContain('<h1>I am the parent</h1>');\n    expect(html).toContain('<h2>I am the child</h2>');\n  });","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"/parent should call _id.vue","suites":["children"],"updatePoint":{"line":26,"column":35,"index":824},"line":26,"code":"  test('/parent should call _id.vue', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent');\n    expect(html).toContain('<h1>I am the parent</h1>');\n    expect(html).toContain('<h2>Id=</h2>');\n  });","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"/parent/1","suites":["children"],"updatePoint":{"line":33,"column":17,"index":1037},"line":33,"code":"  test('/parent/1', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent/1');\n    expect(html).toContain('<h1>I am the parent</h1>');\n    expect(html).toContain('<h2>Id=1</h2>');\n  });","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"/parent/validate-child should display 404","suites":["children"],"updatePoint":{"line":40,"column":49,"index":1285},"line":40,"code":"  test('/parent/validate-child should display 404', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent/validate-child');\n    expect(html).toContain('This page could not be found');\n  });","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"/parent/validate-child?key=12345","suites":["children"],"updatePoint":{"line":46,"column":40,"index":1496},"line":46,"code":"  test('/parent/validate-child?key=12345', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/parent/validate-child?key=12345');\n    expect(html).toContain('<h1>I am the parent</h1>');\n    expect(html).toContain('<h2>Child valid</h2>');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/children.test.js","skipped":false,"dir":"test"},{"name":"nuxt dev","suites":[],"line":44,"code":"  test.skip('nuxt dev', async () => {","file":"dev/cli.test.js","skipped":true,"dir":"test"},{"name":"nuxt start","suites":[],"line":61,"code":"  test.skip('nuxt start', async () => {","file":"dev/cli.test.js","skipped":true,"dir":"test"},{"name":"Home page with google analytics","suites":["custom-app-template"],"updatePoint":{"line":7,"column":39,"index":236},"line":7,"code":"  test('Home page with google analytics', async () => {\n    const nuxt = new Nuxt(options);\n    await nuxt.ready();\n    const port = await getPort();\n    await nuxt.server.listen(port, '0.0.0.0');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<p>My Template</p>');\n    expect(html).toContain('<h1>Custom!</h1>');\n    expect(html).toContain('Google Analytics');\n    await nuxt.close();\n  });","file":"dev/custom-app-template.test.js","skipped":false,"dir":"test"},{"name":"Home page with heap analytics","suites":["custom-app-template"],"updatePoint":{"line":20,"column":37,"index":674},"line":20,"code":"  test('Home page with heap analytics', async () => {\n    const nuxt = new Nuxt(options);\n    options.env.tracker = 'heap';\n    await nuxt.ready();\n    const port = await getPort();\n    await nuxt.server.listen(port, '0.0.0.0');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<p>My Template</p>');\n    expect(html).toContain('<h1>Custom!</h1>');\n    expect(html).toContain('Heap Analytics');\n    await nuxt.close();\n  });","file":"dev/custom-app-template.test.js","skipped":false,"dir":"test"},{"name":"Home page with no analytics","suites":["custom-app-template"],"updatePoint":{"line":34,"column":35,"index":1142},"line":34,"code":"  test('Home page with no analytics', async () => {\n    const nuxt = new Nuxt(options);\n    options.env.tracker = '-';\n    await nuxt.ready();\n    const port = await getPort();\n    await nuxt.server.listen(port, '0.0.0.0');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<p>My Template</p>');\n    expect(html).toContain('<h1>Custom!</h1>');\n    expect(html).not.toContain('google Analytics');\n    expect(html).not.toContain('Heap Analytics');\n    await nuxt.close();\n  });","file":"dev/custom-app-template.test.js","skipped":false,"dir":"test"},{"name":"custom assets directory","suites":["custom-dirs"],"updatePoint":{"line":18,"column":31,"index":511},"line":18,"code":"  test('custom assets directory', async () => {\n    const readFile = promisify(fs.readFile);\n    const extractedIndexCss = resolve(__dirname, '..', 'fixtures/custom-dirs/.nuxt/dist/client/app.css');\n    const content = await readFile(extractedIndexCss, 'utf-8');\n    expect(content).toContain('.global-css-selector{color:red}');\n  });","file":"dev/custom-dirs.test.js","skipped":false,"dir":"test"},{"name":"custom layouts directory","suites":["custom-dirs"],"updatePoint":{"line":24,"column":32,"index":847},"line":24,"code":"  test('custom layouts directory', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<p>I have custom layouts directory</p>');\n  });","file":"dev/custom-dirs.test.js","skipped":false,"dir":"test"},{"name":"custom middleware directory","suites":["custom-dirs"],"updatePoint":{"line":30,"column":35,"index":1042},"line":30,"code":"  test('custom middleware directory', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/user-agent'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<pre>Mozilla');\n  });","file":"dev/custom-dirs.test.js","skipped":false,"dir":"test"},{"name":"custom pages directory","suites":["custom-dirs"],"updatePoint":{"line":35,"column":30,"index":1265},"line":35,"code":"  test('custom pages directory', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>I have custom pages directory</h1>');\n  });","file":"dev/custom-dirs.test.js","skipped":false,"dir":"test"},{"name":"custom static directory","suites":["custom-dirs"],"updatePoint":{"line":41,"column":31,"index":1456},"line":41,"code":"  test('custom static directory', async () => {\n    const {\n      headers\n    } = await rp(url('/test.txt'));\n    expect(headers['cache-control']).toBe('public, max-age=0');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/custom-dirs.test.js","skipped":false,"dir":"test"},{"name":"Specify maxAge/index in render.dist options","suites":["dist options"],"updatePoint":{"line":17,"column":51,"index":480},"line":17,"code":"  test('Specify maxAge/index in render.dist options', async () => {\n    const {\n      body\n    } = await rp(url('/'));\n\n    try {\n      await rp(url('/_nuxt/'));\n    } catch (err) {\n      expect(err.toString().includes('StatusCodeError'));\n    }\n\n    const distFile = body.match(/\\/_nuxt\\/.+?\\.js/)[0];\n    const {\n      headers\n    } = await rp(url(distFile));\n    const twoYears = (60 * 60 * 24 * 365 * 2 / 1000).toString();\n    expect(headers['cache-control']).toContain(twoYears);\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/dist-options.test.js","skipped":false,"dir":"test"},{"name":"Check .nuxt/routes.json","suites":["dynamic routes"],"updatePoint":{"line":6,"column":31,"index":195},"line":6,"code":"  test('Check .nuxt/routes.json', async () => {\n    const routesFile = await readFile(resolve(__dirname, '..', 'fixtures/dynamic-routes/.nuxt/routes.json'), 'utf-8');\n    const routes = JSON.parse(routesFile); // pages/test/index.vue\n\n    expect(routes[0].path).toBe('/parent');\n    expect(routes[0].name).toBeFalsy(); // parent route has no name\n    // pages/parent/*.vue\n\n    expect(routes[0].children.length).toBe(3); // parent has 3 children\n\n    expect(routes[0].children.map(r => r.path)).toEqual(['', 'child', 'teub']);\n    expect(routes[0].children.map(r => r.name)).toEqual(['parent', 'parent-child', 'parent-teub']); // pages/posts.vue\n\n    expect(routes[1].path).toBe('/posts');\n    expect(routes[1].name).toBe('posts');\n    expect(routes[1].children.length).toBe(1); // pages/posts/_id.vue\n\n    expect(routes[1].children[0].path).toBe(':id?');\n    expect(routes[1].children[0].name).toBe('posts-id'); // pages/parent.vue\n\n    expect(routes[2].path).toBe('/test');\n    expect(routes[2].name).toBe('test'); // pages/test/projects/index.vue\n\n    expect(routes[3].path).toBe('/test/projects');\n    expect(routes[3].name).toBe('test-projects'); // pages/test/users.vue\n\n    expect(routes[4].path).toBe('/test/users');\n    expect(routes[4].name).toBeFalsy(); // parent route has no name\n    // pages/test/users/*.vue\n\n    expect(routes[4].children.length).toBe(5); // parent has 5 children\n\n    expect(routes[4].children.map(r => r.path)).toEqual(['', 'projects', 'projects/:category', ':id', ':index/teub']);\n    expect(routes[4].children.map(r => r.name)).toEqual(['test-users', 'test-users-projects', 'test-users-projects-category', 'test-users-id', 'test-users-index-teub']); // pages/test/songs/toto.vue\n\n    expect(routes[5].path).toBe('/test/songs/toto');\n    expect(routes[5].name).toBe('test-songs-toto'); // pages/test/projects/_category.vue\n\n    expect(routes[6].path).toBe('/test/projects/:category');\n    expect(routes[6].name).toBe('test-projects-category'); // pages/test/songs/_id.vue\n\n    expect(routes[7].path).toBe('/test/songs/:id?');\n    expect(routes[7].name).toBe('test-songs-id'); // pages/users/_id.vue\n\n    expect(routes[8].path).toBe('/users/:id?');\n    expect(routes[8].name).toBe('users-id'); // pages/test/_.vue\n\n    expect(routes[9].path).toBe('/test/*');\n    expect(routes[9].name).toBe('test-all'); // pages/index.vue\n\n    expect(routes[10].path).toBe('/');\n    expect(routes[10].name).toBe('index'); // pages/_slug.vue\n\n    expect(routes[11].path).toBe('/:slug');\n    expect(routes[11].name).toBe('slug'); // pages/_key/_id.vue\n\n    expect(routes[12].path).toBe('/:key/:id?');\n    expect(routes[12].name).toBe('key-id'); // pages/_.vue\n\n    expect(routes[13].path).toBe('/*/p/*');\n    expect(routes[13].name).toBe('all-p-all'); // pages/_/_.vue\n\n    expect(routes[14].path).toBe('/*/*');\n    expect(routes[14].name).toBe('all-all'); // pages/_.vue\n\n    expect(routes[15].path).toBe('/*');\n    expect(routes[15].name).toBe('all');\n  });","file":"dev/dynamic-routes.test.js","skipped":false,"dir":"test"},{"name":"/ö/ (router base)","suites":["encoding"],"updatePoint":{"line":16,"column":25,"index":462},"line":16,"code":"  test('/ö/ (router base)', async () => {\n    const {\n      body: response\n    } = await rp(url('/ö/'));\n    expect(response).toContain('Unicode base works!');\n  });","file":"dev/encoding.test.js","skipped":false,"dir":"test"},{"name":"/ö/dynamic?q=food,coffee (encodeURIComponent)","suites":["encoding"],"updatePoint":{"line":22,"column":53,"index":656},"line":22,"code":"  test('/ö/dynamic?q=food,coffee (encodeURIComponent)', async () => {\n    const {\n      body: response\n    } = await rp(url('/ö/dynamic?q=food,coffee'));\n    expect(response).toContain('food,coffee');\n  });","file":"dev/encoding.test.js","skipped":false,"dir":"test"},{"name":"/ö/@about","suites":["encoding"],"updatePoint":{"line":28,"column":17,"index":827},"line":28,"code":"  test('/ö/@about', async () => {\n    const {\n      body: response\n    } = await rp(url('/ö/@about'));\n    expect(response).toContain('About');\n  });","file":"dev/encoding.test.js","skipped":false,"dir":"test"},{"name":"query params","suites":["encoding"],"updatePoint":{"line":34,"column":20,"index":980},"line":34,"code":"  test('query params', async () => {\n    const queryStrings = {\n      '?email=some%20email.com': {\n        email: 'some email.com'\n      },\n      '?str=%26&str2=%2526': {\n        str: '&',\n        str2: '%26'\n      },\n      '?t=coffee%2Cfood%2C': {\n        t: 'coffee,food,'\n      },\n      '?redirect=%2Fhomologation%2Flist': {\n        redirect: '/homologation/list'\n      },\n      '?email=some@email.com&token=DvtiwbIzry319e6KWimopA%3D%3D': {\n        email: 'some@email.com',\n        token: 'DvtiwbIzry319e6KWimopA=='\n      }\n    };\n\n    for (const [param, result] of Object.entries(queryStrings)) {\n      const {\n        body: response\n      } = await rp(url('/ö/dynamic/test') + param);\n      expect(response).toContain(JSON.stringify(result).replace(/&/g, '&amp;').replace(/\"/g, '&quot;'));\n    }\n  });","file":"dev/encoding.test.js","skipped":false,"dir":"test"},{"name":"invalidly encoded route params are handled","suites":["encoding"],"updatePoint":{"line":62,"column":50,"index":1817},"line":62,"code":"  test('invalidly encoded route params are handled', async () => {\n    const paths = ['%c1%81', '%c1', '%'];\n\n    for (const path of paths) {\n      // We use node-fetch because got uses decodeURI on url and throws its own error\n      const response = await fetch(url('/ö/dynamic/') + path);\n      expect(response.ok).toBeTruthy();\n      expect(await response.text()).toContain(JSON.stringify({\n        id: path\n      }).replace(/&/g, '&amp;').replace(/\"/g, '&quot;'));\n    }\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/encoding.test.js","skipped":false,"dir":"test"},{"name":"/ should display an error","suites":["error"],"updatePoint":{"line":19,"column":33,"index":526},"line":19,"code":"  test('/ should display an error', async () => {\n    await expect(nuxt.server.renderRoute('/error')).rejects.toMatchObject({\n      message: expect.stringContaining('notDefined is not defined')\n    });\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/404 should display an error too","suites":["error"],"updatePoint":{"line":24,"column":40,"index":741},"line":24,"code":"  test('/404 should display an error too', async () => {\n    const {\n      error\n    } = await nuxt.server.renderRoute('/404');\n    expect(error.message).toContain('This page could not be found');\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/ with renderAndGetWindow()","suites":["error"],"updatePoint":{"line":30,"column":35,"index":939},"line":30,"code":"  test('/ with renderAndGetWindow()', async () => {\n    await expect(nuxt.server.renderAndGetWindow(url('/error'))).rejects.toThrow('Resource was not loaded. Status: 500');\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"Error: resolvePath()","suites":["error"],"updatePoint":{"line":33,"column":28,"index":1111},"line":33,"code":"  test('Error: resolvePath()', () => {\n    expect(() => nuxt.resolver.resolvePath()).toThrowError();\n    expect(() => nuxt.resolver.resolvePath('@/pages/not-found.vue')).toThrowError('Cannot resolve \"@/pages/not-found.vue\"');\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"Error: callHook()","suites":["error"],"updatePoint":{"line":37,"column":25,"index":1340},"line":37,"code":"  test('Error: callHook()', async () => {\n    consola.fatal.mockClear();\n    const errorHook = jest.fn();\n    const error = new Error('test hook error');\n    nuxt.hook('error', errorHook);\n    nuxt.hook('test:error', () => {\n      throw error;\n    });\n    await nuxt.callHook('test:error');\n    expect(errorHook).toHaveBeenCalledTimes(1);\n    expect(errorHook).toHaveBeenCalledWith(error);\n    expect(consola.fatal).toHaveBeenCalledTimes(1);\n    expect(consola.fatal).toHaveBeenCalledWith(error);\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/info should display an error","suites":["error"],"updatePoint":{"line":51,"column":37,"index":1855},"line":51,"code":"  test('/info should display an error', async () => {\n    const promise = nuxt.server.renderRoute('/info');\n    await expect(promise).rejects;\n    const message = await promise.catch(e => e.message);\n    expect(message).toContain('Cannot read proper');\n    expect(message).toContain('title');\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/about should work","suites":["error"],"updatePoint":{"line":58,"column":26,"index":2143},"line":58,"code":"  test('/about should work', async () => {\n    await expect(nuxt.server.renderRoute('/about')).resolves.toMatchObject({\n      html: expect.stringContaining('About')\n    });\n  });","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/error-square should display an error","suites":["error"],"updatePoint":{"line":63,"column":45,"index":2341},"line":63,"code":"  test('/error-square should display an error', async () => {\n    const promise = nuxt.server.renderRoute('/squared');\n    await expect(promise).rejects;\n    const message = await promise.catch(e => e.message);\n    expect(message).toContain('Cannot read proper');\n    expect(message).toContain('data');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/error.test.js","skipped":false,"dir":"test"},{"name":"/stateless with express","suites":["express"],"updatePoint":{"line":24,"column":31,"index":608},"line":24,"code":"  test('/stateless with express', async () => {\n    const {\n      body: html\n    } = await rp(url('/stateless'));\n    expect(html).toContain('<h1>My component!</h1>');\n  });","file":"dev/express.test.js","skipped":false,"dir":"test"},{"name":"Verify global.css has been extracted and minified","suites":["extract css"],"updatePoint":{"line":14,"column":57,"index":488},"line":14,"code":"  test('Verify global.css has been extracted and minified', async () => {\n    const fileName = 'pages/index.css';\n    const extractedIndexCss = resolve(__dirname, '..', 'fixtures/extract-css/.nuxt/dist/client', fileName);\n    const content = await readFile(extractedIndexCss, 'utf-8');\n    const scopeCss = /^h1\\[data-v-[a-zA-Z0-9]{8}\\]\\{color:red\\}\\.container\\[data-v-[a-zA-Z0-9]{8}\\]/;\n    expect(content).toMatch(scopeCss);\n    const containerStyle = '{display:grid;grid-template-columns:60px 60px 60px 60px 60px;grid-template-rows:30px 30px;grid-auto-flow:row}';\n    expect(content).toContain(containerStyle);\n  });","file":"dev/extract-css.test.js","skipped":false,"dir":"test"},{"name":"/about should contain module style","suites":["extract css"],"updatePoint":{"line":23,"column":42,"index":1093},"line":23,"code":"  test('/about should contain module style', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/about');\n    expect(html).toMatch(/<h1 class=\"test_[a-zA-Z0-9]{5}\">\\s*I'm BLUE\\s*<\\/h1>/); // no duplicate inlined style\n\n    expect(html).not.toContain('{color:#00f}');\n  });","file":"dev/extract-css.test.js","skipped":false,"dir":"test"},{"name":"robots.txt handled","suites":["fallback"],"updatePoint":{"line":15,"column":26,"index":416},"line":15,"code":"  test('robots.txt handled', async () => {\n    await expect(rp(url('/test/robots.txt'))).rejects.toMatchObject({\n      response: {\n        body: '',\n        statusCode: 404\n      }\n    });\n  });","file":"dev/fallback.test.js","skipped":false,"dir":"test"},{"name":"normal html routes should be rendered using SSR","suites":["fallback"],"updatePoint":{"line":23,"column":55,"index":640},"line":23,"code":"  test('normal html routes should be rendered using SSR', async () => {\n    await expect(rp(url('/test/index.html'))).rejects.toMatchObject({\n      response: {\n        body: expect.stringContaining('data-n-head-ssr'),\n        statusCode: 404\n      }\n    });\n  });","file":"dev/fallback.test.js","skipped":false,"dir":"test"},{"name":"uknown assets handled in dist","suites":["fallback"],"updatePoint":{"line":31,"column":37,"index":886},"line":31,"code":"  test('uknown assets handled in dist', async () => {\n    await expect(rp(url('/test/orion/foo.xyz'))).rejects.toMatchObject({\n      response: {\n        body: '',\n        statusCode: 404\n      }\n    });\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/fallback.test.js","skipped":false,"dir":"test"},{"name":"server manifest files exist","suites":["build filenames with query part"],"updatePoint":{"line":30,"column":35,"index":760},"line":30,"code":"  test('server manifest files exist', () => {\n    const manifest = JSON.parse(readFileSync(resolve(__dirname, '..', 'fixtures/filenames-query-part/.nuxt/dist/server/server.manifest.json'), 'utf8'));\n    expect(manifest).toMatchObject({\n      files: expect.any(Object)\n    });\n\n    for (const file in manifest.files) {\n      expect(resolve(__dirname, '..', `fixtures/filenames-query-part/.nuxt/dist/server/${manifest.files[file]}`)).toFileExist();\n    }\n  });","file":"dev/filenames-query-part.test.js","skipped":false,"dir":"test"},{"name":"render / without error 'Cannot find module'","suites":["build filenames with query part"],"updatePoint":{"line":40,"column":51,"index":1235},"line":40,"code":"  test(\"render / without error 'Cannot find module'\", async () => {\n    await expect(nuxt.server.renderRoute('/')).resolves.toMatchObject({\n      html: expect.stringContaining('<h1>Chunks with version in query part</h1>')\n    });\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/filenames-query-part.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["full-static-with-preview"],"updatePoint":{"line":36,"column":9,"index":1113},"line":36,"code":"  test('/', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"preview: /","suites":["full-static-with-preview"],"updatePoint":{"line":41,"column":18,"index":1336},"line":41,"code":"  test('preview: /', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/?preview=true'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called-in-preview</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"/with-component","suites":["full-static-with-preview"],"updatePoint":{"line":46,"column":23,"index":1588},"line":46,"code":"  test('/with-component', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/with-component'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called</p>');\n    expect(html).toContain('<p>component-fetch-called</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"preview: /with-component","suites":["full-static-with-preview"],"updatePoint":{"line":52,"column":32,"index":1900},"line":52,"code":"  test('preview: /with-component', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/with-component?preview=true'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>component-fetch-called-in-preview</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"/with-nested-components","suites":["full-static-with-preview"],"updatePoint":{"line":58,"column":31,"index":2246},"line":58,"code":"  test('/with-nested-components', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/with-nested-components'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called</p>');\n    expect(html).toContain('<p>component-fetch-called</p>');\n    expect(html).toContain('<p>sub-component-fetch-called</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"preview: /with-nested-components","suites":["full-static-with-preview"],"updatePoint":{"line":65,"column":40,"index":2639},"line":65,"code":"  test('preview: /with-nested-components', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/with-nested-components?preview=true'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>component-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>sub-component-fetch-called-in-preview</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"/async-data-dependent-fetch","suites":["full-static-with-preview"],"updatePoint":{"line":72,"column":35,"index":3073},"line":72,"code":"  test('/async-data-dependent-fetch', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/async-data-dependent-fetch'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called</p>');\n    expect(html).toContain('<p>component-1-fetch-called</p>');\n    expect(html).toContain('<p>component-2-fetch-called</p>');\n    expect(html).toContain('<p>component-3-fetch-called</p>');\n  });","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"preview: /async-data-dependent-fetch","suites":["full-static-with-preview"],"updatePoint":{"line":80,"column":44,"index":3537},"line":80,"code":"  test('preview: /async-data-dependent-fetch', async () => {\n    const window = await generator.nuxt.server.renderAndGetWindow(url('/async-data-dependent-fetch?preview=true'));\n    await waitFor(100);\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<p>page-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>component-1-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>component-2-fetch-called-in-preview</p>');\n    expect(html).toContain('<p>component-3-fetch-called-in-preview</p>');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/full-static-with-preview.test.js","skipped":false,"dir":"test"},{"name":"/payload (custom build.publicPath)","suites":["full-static","with scripts"],"updatePoint":{"line":42,"column":44,"index":1244},"line":42,"code":"    test('/payload (custom build.publicPath)', async () => {\n      const {\n        body: html\n      } = await rp(url('/payload'));\n      expect(html).toContain('<script src=\"https://cdn.nuxtjs.org/test/');\n      expect(html).toContain('<link rel=\"preload\" href=\"https://cdn.nuxtjs.org/test/_nuxt/static/');\n    });","file":"dev/full-static.test.js","skipped":false,"dir":"test"},{"name":"/encoding/中文","suites":["full-static","with scripts"],"updatePoint":{"line":49,"column":22,"index":1537},"line":49,"code":"    test('/encoding/中文', async () => {\n      const {\n        body: html\n      } = await rp(url('/encoding/中文'));\n      const paths = ['encoding/中文/state.js', 'encoding/中文/payload.js'];\n      paths.forEach(path => {\n        const files = glob.sync(join(distDir, '**', path));\n        expect(html).toContain(encodeURI(path));\n        expect(files).toContainEqual(expect.stringContaining(path));\n      });\n    }); // Close server and ask nuxt to stop listening to file changes","file":"dev/full-static.test.js","skipped":false,"dir":"test"},{"name":"should not inject scripts","suites":["full-static","without scripts"],"updatePoint":{"line":71,"column":35,"index":2251},"line":71,"code":"    test('should not inject scripts', async () => {\n      const {\n        body: html\n      } = await rp(url('/payload'));\n      expect(html).not.toContain('<script');\n      expect(html).not.toContain('<link');\n    }); // Close server and ask nuxt to stop listening to file changes","file":"dev/full-static.test.js","skipped":false,"dir":"test"},{"name":"initRoutes with routes (fn => array)","suites":["generator"],"updatePoint":{"line":3,"column":44,"index":119},"line":3,"code":"  test('initRoutes with routes (fn => array)', async () => {\n    const array = ['/1', '/2', '/3', '/4'];\n    const config = {\n      generate: {\n        routes: array\n      }\n    };\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const generator = new Generator(nuxt);\n    generator.getAppRoutes = jest.fn(() => []);\n    const routes = await generator.initRoutes();\n    expect(routes.length).toBe(array.length);\n    routes.forEach((route, index) => {\n      expect(route.route).toBe(array[index]);\n    });\n  });","file":"dev/generator.test.js","skipped":false,"dir":"test"},{"name":"initRoutes with routes (fn())","suites":["generator"],"updatePoint":{"line":20,"column":37,"index":637},"line":20,"code":"  test('initRoutes with routes (fn())', async () => {\n    const array = ['/1', '/2', '/3', '/4'];\n    const config = {\n      generate: {\n        routes() {\n          return array;\n        }\n\n      }\n    };\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const generator = new Generator(nuxt);\n    generator.getAppRoutes = jest.fn(() => []);\n    const routes = await generator.initRoutes();\n    expect(routes.length).toBe(array.length);\n    routes.forEach((route, index) => {\n      expect(route.route).toBe(array[index]);\n    });\n  });","file":"dev/generator.test.js","skipped":false,"dir":"test"},{"name":"initRoutes with routes (fn(args))","suites":["generator"],"updatePoint":{"line":40,"column":41,"index":1191},"line":40,"code":"  test('initRoutes with routes (fn(args))', async () => {\n    const config = {\n      generate: {\n        routes(array) {\n          return array;\n        }\n\n      }\n    };\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const generator = new Generator(nuxt);\n    generator.getAppRoutes = jest.fn(() => []);\n    const array = ['/1', '/2', '/3', '/4'];\n    const routes = await generator.initRoutes(array);\n    expect(routes.length).toBe(array.length);\n    routes.forEach((route, index) => {\n      expect(route.route).toBe(array[index]);\n    });\n  });","file":"dev/generator.test.js","skipped":false,"dir":"test"},{"name":"initRoutes with routes (fn(cb, args))","suites":["generator"],"updatePoint":{"line":60,"column":45,"index":1759},"line":60,"code":"  test('initRoutes with routes (fn(cb, args))', async () => {\n    const config = {\n      generate: {\n        routes(cb, arg1, arg2, arg3, arg4) {\n          cb(null, [arg1, arg2, arg3, arg4]);\n        }\n\n      }\n    };\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const generator = new Generator(nuxt);\n    generator.getAppRoutes = jest.fn(() => []);\n    const array = ['/1', '/2', '/3', '/4'];\n    const routes = await generator.initRoutes(...array);\n    expect(routes.length).toBe(array.length);\n    routes.forEach((route, index) => {\n      expect(route.route).toBe(array[index]);\n    });\n  });","file":"dev/generator.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["basic https"],"updatePoint":{"line":11,"column":9,"index":329},"line":11,"code":"  test('/', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>Served over HTTPS!</h1>');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/https.test.js","skipped":false,"dir":"test"},{"name":"should contain nomodule legacy resources","suites":["modern client mode (SSR)"],"updatePoint":{"line":16,"column":48,"index":472},"line":16,"code":"  test('should contain nomodule legacy resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('script nomodule crossorigin=\"use-credentials\" src=\"/_nuxt/app.js');\n    expect(response).toContain('script nomodule crossorigin=\"use-credentials\" src=\"/_nuxt/commons/app.js');\n  });","file":"dev/modern.client.test.js","skipped":false,"dir":"test"},{"name":"should contain module modern resources","suites":["modern client mode (SSR)"],"updatePoint":{"line":23,"column":46,"index":810},"line":23,"code":"  test('should contain module modern resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('<script type=\"module\" crossorigin=\"use-credentials\" src=\"/_nuxt/app.modern.js\"');\n    expect(response).toContain('<script type=\"module\" crossorigin=\"use-credentials\" src=\"/_nuxt/commons/app.modern.js\"');\n  });","file":"dev/modern.client.test.js","skipped":false,"dir":"test"},{"name":"should contain module preload resources","suites":["modern client mode (SSR)"],"updatePoint":{"line":30,"column":47,"index":1177},"line":30,"code":"  test('should contain module preload resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('<link rel=\"modulepreload\" crossorigin=\"use-credentials\" href=\"/_nuxt/app.modern.js\" as=\"script\">');\n    expect(response).toContain('<link rel=\"modulepreload\" crossorigin=\"use-credentials\" href=\"/_nuxt/commons/app.modern.js\" as=\"script\">');\n  });","file":"dev/modern.client.test.js","skipped":false,"dir":"test"},{"name":"should contain module http2 pushed resources","suites":["modern client mode (SSR)"],"updatePoint":{"line":37,"column":52,"index":1585},"line":37,"code":"  test('should contain module http2 pushed resources', async () => {\n    const {\n      headers: {\n        link\n      }\n    } = await rp(url('/'));\n    expect(link).toEqual(['</_nuxt/runtime.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script', '</_nuxt/commons/app.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script', '</_nuxt/app.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script', `</_nuxt/pages/index.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script`].join(', '));\n  });","file":"dev/modern.client.test.js","skipped":false,"dir":"test"},{"name":"should contain safari fix script","suites":["modern client mode (SSR)"],"updatePoint":{"line":45,"column":40,"index":2125},"line":45,"code":"  test('should contain safari fix script', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('\"noModule\"');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/modern.client.test.js","skipped":false,"dir":"test"},{"name":"should detect server modern mode","suites":["modern server mode"],"updatePoint":{"line":19,"column":40,"index":703},"line":19,"code":"  test('should detect server modern mode', async () => {\n    await nuxt.server.renderAndGetWindow(url('/'));\n    expect(consola.info).toHaveBeenCalledWith(modernInfo('server'));\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should use legacy resources by default","suites":["modern server mode"],"updatePoint":{"line":23,"column":46,"index":893},"line":23,"code":"  test('should use legacy resources by default', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('/_nuxt/app.js');\n    expect(response).toContain('/_nuxt/commons/app.js');\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should use modern resources for modern resources","suites":["modern server mode"],"updatePoint":{"line":30,"column":56,"index":1139},"line":30,"code":"  test('should use modern resources for modern resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(response).toContain('/_nuxt/app.modern.js');\n    expect(response).toContain('/_nuxt/commons/app.modern.js');\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should include es6 syntax in modern resources","suites":["modern server mode"],"updatePoint":{"line":41,"column":53,"index":1461},"line":41,"code":"  test('should include es6 syntax in modern resources', async () => {\n    const {\n      body: response\n    } = await rp(url(`/_nuxt/pages/index.modern.js`));\n    expect(response).toContain('=>');\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should not include es6 syntax in normal resources","suites":["modern server mode"],"updatePoint":{"line":47,"column":57,"index":1667},"line":47,"code":"  test('should not include es6 syntax in normal resources', async () => {\n    const {\n      body: response\n    } = await rp(url(`/_nuxt/pages/index.js`));\n    expect(response).not.toContain('=>');\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should contain legacy http2 pushed resources","suites":["modern server mode"],"updatePoint":{"line":53,"column":52,"index":1865},"line":53,"code":"  test('should contain legacy http2 pushed resources', async () => {\n    const {\n      headers: {\n        link\n      }\n    } = await rp(url('/'));\n    expect(link).toEqual(['</_nuxt/runtime.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/commons/app.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/app.js>; rel=preload; crossorigin=use-credentials; as=script', `</_nuxt/${wChunk('pages/index.js')}>; rel=preload; crossorigin=use-credentials; as=script`].join(', '));\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should contain module http2 pushed resources","suites":["modern server mode"],"updatePoint":{"line":61,"column":52,"index":2378},"line":61,"code":"  test('should contain module http2 pushed resources', async () => {\n    const {\n      headers: {\n        link\n      }\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(link).toEqual(['</_nuxt/runtime.modern.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/commons/app.modern.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/app.modern.js>; rel=preload; crossorigin=use-credentials; as=script', `</_nuxt/pages/index.modern.js>; rel=preload; crossorigin=use-credentials; as=script`].join(', '));\n  });","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"Vary header should contain User-Agent","suites":["modern server mode"],"updatePoint":{"line":73,"column":45,"index":2964},"line":73,"code":"  test('Vary header should contain User-Agent', async () => {\n    const {\n      headers: {\n        vary\n      }\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(vary).toContain('User-Agent');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/modern.server.test.js","skipped":false,"dir":"test"},{"name":"should detect client modern mode","suites":["modern client mode (SPA)"],"updatePoint":{"line":23,"column":40,"index":756},"line":23,"code":"  test('should detect client modern mode', async () => {\n    await nuxt.server.renderAndGetWindow(url('/'));\n    expect(consola.info).toHaveBeenCalledWith(modernInfo('client'));\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain nomodule legacy resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":27,"column":48,"index":948},"line":27,"code":"  test('should contain nomodule legacy resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('src=\"/_nuxt/app.js\" crossorigin=\"use-credentials\" nomodule');\n    expect(response).toContain('src=\"/_nuxt/commons/app.js\" crossorigin=\"use-credentials\" nomodule');\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain module modern resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":34,"column":46,"index":1274},"line":34,"code":"  test('should contain module modern resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('<script src=\"/_nuxt/app.modern.js\" type=\"module\" crossorigin=\"use-credentials\"');\n    expect(response).toContain('<script src=\"/_nuxt/commons/app.modern.js\" type=\"module\" crossorigin=\"use-credentials\"');\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain legacy preload resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":41,"column":47,"index":1641},"line":41,"code":"  test('should contain legacy preload resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'));\n    expect(response).toContain('<link rel=\"preload\" crossorigin=\"use-credentials\" href=\"/_nuxt/app.js\" as=\"script\">');\n    expect(response).toContain('<link rel=\"preload\" crossorigin=\"use-credentials\" href=\"/_nuxt/commons/app.js\" as=\"script\">');\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain legacy http2 pushed resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":48,"column":52,"index":2023},"line":48,"code":"  test('should contain legacy http2 pushed resources', async () => {\n    const {\n      headers: {\n        link\n      }\n    } = await rp(url('/'));\n    expect(link).toEqual(['</_nuxt/runtime.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/commons/app.js>; rel=preload; crossorigin=use-credentials; as=script', '</_nuxt/app.js>; rel=preload; crossorigin=use-credentials; as=script'].join(', '));\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain modern preload resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":56,"column":47,"index":2438},"line":56,"code":"  test('should contain modern preload resources', async () => {\n    const {\n      body: response\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(response).toContain('<link rel=\"modulepreload\" crossorigin=\"use-credentials\" href=\"/_nuxt/app.modern.js\" as=\"script\">');\n    expect(response).toContain('<link rel=\"modulepreload\" crossorigin=\"use-credentials\" href=\"/_nuxt/commons/app.modern.js\" as=\"script\">');\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain safari nomodule fix","suites":["modern client mode (SPA)"],"updatePoint":{"line":67,"column":42,"index":2901},"line":67,"code":"  test('should contain safari nomodule fix', async () => {\n    const {\n      body: response\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(response).toContain('src=\"/_nuxt/safari-nomodule-fix.js\" crossorigin=\"use-credentials\"');\n  });","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"should contain modern http2 pushed resources","suites":["modern client mode (SPA)"],"updatePoint":{"line":77,"column":52,"index":3203},"line":77,"code":"  test('should contain modern http2 pushed resources', async () => {\n    const {\n      headers: {\n        link\n      }\n    } = await rp(url('/'), {\n      headers: {\n        'user-agent': modernUA\n      }\n    });\n    expect(link).toEqual(['</_nuxt/runtime.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script', '</_nuxt/commons/app.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script', '</_nuxt/app.modern.js>; rel=modulepreload; crossorigin=use-credentials; as=script'].join(', '));\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/modern.spa.test.js","skipped":false,"dir":"test"},{"name":"Plugin","suites":["module"],"updatePoint":{"line":19,"column":14,"index":567},"line":19,"code":"  test('Plugin', async () => {\n    expect(normalize(nuxt.options.plugins[0].src).includes(normalize('fixtures/module/.nuxt/basic.reverse.'))).toBe(true);\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>TXUN</h1>');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Layout - layouts from Module.addLayout take precedence","suites":["module"],"updatePoint":{"line":26,"column":62,"index":887},"line":26,"code":"  test('Layout - layouts from Module.addLayout take precedence', async () => {\n    expect(nuxt.options.layouts.layout).toContain('layout');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/layout');\n    expect(html).toContain('<h1>Module Layouts</h1>');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"/404 should display the module error layout","suites":["module"],"updatePoint":{"line":33,"column":51,"index":1150},"line":33,"code":"  test('/404 should display the module error layout', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/404');\n    expect(html).toContain('You should see the error in a different Vue!');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Hooks","suites":["module"],"updatePoint":{"line":39,"column":13,"index":1332},"line":39,"code":"  test('Hooks', () => {\n    expect(nuxt.__module_hook).toBe(1);\n    expect(nuxt.__renderer_hook).toBe(2);\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Hooks - Functional","suites":["module"],"updatePoint":{"line":43,"column":26,"index":1457},"line":43,"code":"  test('Hooks - Functional', () => {\n    expect(nuxt.__ready_called__).toBe(true);\n  }); // test('Hooks - Error', async () => {","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Middleware","suites":["module"],"updatePoint":{"line":49,"column":18,"index":1667},"line":49,"code":"  test('Middleware', async () => {\n    const {\n      body: response\n    } = await rp(url('/api'));\n    expect(response).toBe('It works!');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"serverMiddleware with path","suites":["module"],"updatePoint":{"line":55,"column":34,"index":1828},"line":55,"code":"  test('serverMiddleware with path', async () => {\n    const {\n      body: response\n    } = await rp(url('/midd3'));\n    expect(response).toBe('Be creative when writing test strings! Hey Mama :wave:');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Hooks - Use external middleware before render","suites":["module"],"updatePoint":{"line":61,"column":53,"index":2055},"line":61,"code":"  test('Hooks - Use external middleware before render', async () => {\n    const {\n      body: response\n    } = await rp(url('/use-middleware'));\n    expect(response).toBe('Use external middleware');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Hooks - render context","suites":["module"],"updatePoint":{"line":67,"column":30,"index":2237},"line":67,"code":"  test('Hooks - render context', async () => {\n    await nuxt.server.renderRoute('/render-context');\n    expect(nuxt.__render_context).toBeTruthy();\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"AddVendor - deprecated","suites":["module"],"updatePoint":{"line":71,"column":30,"index":2392},"line":71,"code":"  test('AddVendor - deprecated', () => {\n    nuxt.moduleContainer.addVendor('nuxt-test');\n    expect(consola.warn).toHaveBeenCalledWith('addVendor has been deprecated due to webpack4 optimization');\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"AddLayout - duplicate layout","suites":["module"],"updatePoint":{"line":75,"column":36,"index":2603},"line":75,"code":"  test('AddLayout - duplicate layout', () => {\n    nuxt.moduleContainer.addLayout(resolve(rootDir, 'modules', 'basic', 'layout.vue'));\n    expect(consola.warn).toHaveBeenCalledWith(expect.stringContaining('Duplicate layout registration, \"layout\" has been registered as \"./basic.layout.'));\n  });","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"Lodash - deprecated","suites":["module"],"updatePoint":{"line":79,"column":27,"index":2890},"line":79,"code":"  test('Lodash - deprecated', async () => {\n    const builder = new Builder(nuxt);\n    await builder.generateRoutesAndFiles();\n    expect(consola.warn).toHaveBeenCalledWith('Avoid using _ inside templates');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/module.test.js","skipped":false,"dir":"test"},{"name":"/ - no child, no named","suites":["named views"],"updatePoint":{"line":12,"column":30,"index":360},"line":12,"code":"  test('/ - no child, no named', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('LEFT:<!---->:LEFT');\n    expect(html).toContain('CHILD:<!---->:CHILD');\n    expect(html).toContain('TOP:<!---->:TOP');\n  });","file":"dev/named-views.test.js","skipped":false,"dir":"test"},{"name":"/section - have child, no named","suites":["named views"],"updatePoint":{"line":20,"column":39,"index":636},"line":20,"code":"  test('/section - have child, no named', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/section');\n    expect(html).toContain('LEFT:<!---->:LEFT');\n    expect(html).toMatch(/CHILD:<div( data-v-.+)*>This page does not have left panel.<\\/div>:CHILD/);\n    expect(html).toContain('TOP:<!---->:TOP');\n  });","file":"dev/named-views.test.js","skipped":false,"dir":"test"},{"name":"/child/123 - have child, have named","suites":["named views"],"updatePoint":{"line":28,"column":43,"index":974},"line":28,"code":"  test('/child/123 - have child, have named', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/child/123');\n    expect(html).toMatch(/LEFT:<div( data-v-.+)*>Child Left content!<\\/div>:LEFT/);\n    expect(html).toMatch(/CHILD:<div( data-v-.+)*>Child content ID:123!<\\/div>:CHILD/);\n    expect(html).toContain('TOP:<!---->:TOP');\n  });","file":"dev/named-views.test.js","skipped":false,"dir":"test"},{"name":"/main - no child, no named left, have named top","suites":["named views"],"updatePoint":{"line":36,"column":55,"index":1347},"line":36,"code":"  test('/main - no child, no named left, have named top', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/main');\n    expect(html).toMatch(/TOP:<div( data-v-.+)*>Main Top content!<\\/div>:TOP/);\n    expect(html).toContain('LEFT:<!---->:LEFT');\n    expect(html).toContain('CHILD:<!---->:CHILD');\n  });","file":"dev/named-views.test.js","skipped":false,"dir":"test"},{"name":"Nuxt Class","suites":["nuxt"],"updatePoint":{"line":4,"column":18,"index":140},"line":4,"code":"  test('Nuxt Class', () => {\n    expect(typeof Nuxt).toBe('function');\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"Nuxt Instance","suites":["nuxt"],"updatePoint":{"line":7,"column":21,"index":220},"line":7,"code":"  test('Nuxt Instance', async () => {\n    const config = await loadFixture('empty');\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    expect(typeof nuxt).toBe('object');\n    expect(nuxt.options.dev).toBe(false);\n    expect(typeof nuxt._ready.then).toBe('function');\n    expect(nuxt._initCalled).toBe(true);\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"Fail to build when no pages/ directory but is in the parent","suites":["nuxt"],"updatePoint":{"line":16,"column":67,"index":593},"line":16,"code":"  test('Fail to build when no pages/ directory but is in the parent', async () => {\n    const config = await loadFixture('empty');\n    const nuxt = new Nuxt({ ...config,\n      rootDir: resolve(__dirname, '..', 'fixtures', 'empty', 'pages')\n    });\n\n    try {\n      await new Builder(nuxt).build();\n    } catch (err) {\n      expect(err.message).toContain('No `pages` directory found');\n      expect(err.message).toContain('Did you mean to run `nuxt` in the parent (`../`) directory?');\n    }\n\n    expect.hasAssertions();\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"Build with default page when no pages/ directory","suites":["nuxt"],"updatePoint":{"line":31,"column":56,"index":1108},"line":31,"code":"  test('Build with default page when no pages/ directory', async () => {\n    const config = await loadFixture('missing-pages-dir');\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const port = await getPort();\n    await nuxt.server.listen(port, 'localhost');\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h2 class=\"Landscape__Title\">');\n    expect(/Landscape__Page__Explanation/.test(html)).toBe(true);\n    await nuxt.close();\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"Fail to build when specified plugin isn't found","suites":["nuxt"],"updatePoint":{"line":44,"column":56,"index":1606},"line":44,"code":"  test('Fail to build when specified plugin isn\\'t found', async () => {\n    const config = await loadFixture('missing-plugin');\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    await expect(new Builder(nuxt).build()).rejects.toThrow('Plugin not found');\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"Warn when styleResource isn't found","suites":["nuxt"],"updatePoint":{"line":50,"column":44,"index":1869},"line":50,"code":"  test('Warn when styleResource isn\\'t found', async () => {\n    const config = await loadFixture('missing-style-resource');\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    await expect(new Builder(nuxt).build()).rejects.toThrow('Style Resource not found');\n  });","file":"dev/nuxt.test.js","skipped":false,"dir":"test"},{"name":"detect no-build (Universal)","suites":["renderer"],"updatePoint":{"line":10,"column":35,"index":434},"line":10,"code":"  test('detect no-build (Universal)', async () => {\n    const nuxt = new Nuxt({\n      _start: true,\n      mode: MODES.universal,\n      dev: false,\n      buildDir: '/path/to/404'\n    });\n    await expect(nuxt.ready()).rejects.toThrow(expect.objectContaining({\n      message: expect.stringMatching(NO_BUILD_MSG)\n    }));\n  });","file":"dev/renderer.test.js","skipped":false,"dir":"test"},{"name":"detect no-build (SPA)","suites":["renderer"],"updatePoint":{"line":21,"column":29,"index":753},"line":21,"code":"  test('detect no-build (SPA)', async () => {\n    const nuxt = new Nuxt({\n      _start: true,\n      mode: MODES.spa,\n      dev: false,\n      buildDir: '/path/to/404'\n    });\n    await expect(nuxt.ready()).rejects.toThrow(expect.objectContaining({\n      message: expect.stringMatching(NO_BUILD_MSG)\n    }));\n  });","file":"dev/renderer.test.js","skipped":false,"dir":"test"},{"name":"detect no-modern-build","suites":["renderer"],"updatePoint":{"line":32,"column":30,"index":1067},"line":32,"code":"  test('detect no-modern-build', async () => {\n    const nuxt = new Nuxt({\n      _start: true,\n      mode: MODES.universal,\n      modern: 'client',\n      dev: false,\n      buildDir: '/path/to/404'\n    });\n    await expect(nuxt.ready()).rejects.toThrow(expect.objectContaining({\n      message: expect.stringMatching(NO_MODERN_BUILD_MSG)\n    }));\n  });","file":"dev/renderer.test.js","skipped":false,"dir":"test"},{"name":"Check routes names","suites":["route-name-splitter"],"updatePoint":{"line":6,"column":26,"index":195},"line":6,"code":"  test('Check routes names', async () => {\n    const routesFile = await readFile(resolve(__dirname, '..', 'fixtures/route-name-splitter/.nuxt/routes.json'), 'utf-8');\n    const routes = JSON.parse(routesFile);\n    expect(routes[0].name).toBe('parent');\n    expect(routes[1].name).toBe('posts');\n    expect(routes[1].children[0].name).toBe('posts/id');\n    expect(routes[2].name).toBe('parent/child');\n    expect(routes[3].name).toBe('index');\n    expect(routes[4].name).toBe('all/p/all');\n    expect(routes[5].name).toBe('all/all');\n    expect(routes[6].name).toBe('all');\n  });","file":"dev/route-name-splitter.test.js","skipped":false,"dir":"test"},{"name":"SSR payload","suites":["basic ssr"],"updatePoint":{"line":15,"column":19,"index":409},"line":15,"code":"  test('SSR payload', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/'));\n    const payload = window.__NUXT__;\n    expect(payload.config).toMatchObject({\n      baseURL: '/api'\n    });\n    expect(payload.data[0].serverConfig).toMatchObject({\n      baseURL: 'https://google.com/api',\n      API_SECRET: 1234\n    });\n  });","file":"dev/runtime-config.test.js","skipped":false,"dir":"test"},{"name":"SPA payload ","suites":["basic ssr"],"updatePoint":{"line":26,"column":20,"index":758},"line":26,"code":"  test('SPA payload ', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/?spa'));\n    const payload = window.__NUXT__;\n    expect(payload.config).toMatchObject({\n      baseURL: '/api'\n    });\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/runtime-config.test.js","skipped":false,"dir":"test"},{"name":"should throw error when listening on same port (prod)","suites":["server listen"],"updatePoint":{"line":8,"column":61,"index":267},"line":8,"code":"  test('should throw error when listening on same port (prod)', async () => {\n    const nuxt = new Nuxt(config);\n    await nuxt.ready();\n    const port = await getPort();\n\n    const listen = () => nuxt.server.listen(port, 'localhost'); // Listen for first time\n\n\n    await listen();\n    expect(nuxt.server.listeners[0].port).toBe(port); // Listen for second time\n\n    await expect(listen()).rejects.toThrow(`Address \\`localhost:${port}\\` is already in use.`);\n    await nuxt.close();\n  });","file":"dev/server.listen.test.js","skipped":false,"dir":"test"},{"name":"should assign a random port when listening on same port (dev)","suites":["server listen"],"updatePoint":{"line":22,"column":69,"index":765},"line":22,"code":"  test('should assign a random port when listening on same port (dev)', async () => {\n    const nuxt = new Nuxt({ ...config,\n      dev: true\n    });\n    await nuxt.ready();\n    const port = await getPort();\n\n    const listen = () => nuxt.server.listen(port, 'localhost'); // Listen for first time\n\n\n    await listen();\n    expect(nuxt.server.listeners[0].port).toBe(port); // Listen for second time\n\n    await listen();\n    expect(nuxt.server.listeners[1].port).not.toBe(nuxt.server.listeners[0].port);\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledWith(`Address \\`localhost:${port}\\` is already in use.`);\n    await nuxt.close();\n  });","file":"dev/server.listen.test.js","skipped":false,"dir":"test"},{"name":"should skip the use of default port when listening on port 0","suites":["server listen"],"updatePoint":{"line":41,"column":68,"index":1447},"line":41,"code":"  test('should skip the use of default port when listening on port 0', async () => {\n    // Stub process.env.PORT\n    const stubDetails = {\n      originalValue: process.env.PORT,\n      hasProperty: 'PORT' in process.env\n    };\n    const DEFAULT_PORT = '2999';\n    process.env.PORT = DEFAULT_PORT; // Setup test\n\n    const nuxt = new Nuxt({ ...config,\n      dev: true\n    });\n    await nuxt.ready();\n\n    const listen = () => nuxt.server.listen(0, 'localhost'); // Use port 0 to let allow host to randomly assign a free PORT\n\n\n    const toString = (x = '') => `${x}`; // Nuxt server should not be listening on the DEFAULT_PORT\n\n\n    await listen();\n    expect(toString(nuxt.server.listeners[0].port)).not.toBe(DEFAULT_PORT); // Reset stub for process.env.PORT\n\n    if (stubDetails.hasProperty) {\n      process.env.PORT = stubDetails.originalValue;\n    } else {\n      delete process.env.PORT;\n    } // Finalize test\n\n\n    await nuxt.close();\n  });","file":"dev/server.listen.test.js","skipped":false,"dir":"test"},{"name":"/","suites":[],"updatePoint":{"line":3,"column":9,"index":96},"line":3,"code":"  test('/', async () => {\n    const options = await loadFixture('sockets');\n    const nuxt = new Nuxt(options);\n    await nuxt.ready();\n    await nuxt.server.listen();\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>Served over sockets!</h1>');\n    await nuxt.close();\n  });","file":"dev/sockets.test.js","skipped":false,"dir":"test"},{"name":"/ (basic spa)","suites":["spa"],"updatePoint":{"line":31,"column":23,"index":931},"line":31,"code":"    test('/ (basic spa)', async () => {\n      const {\n        html\n      } = await renderRoute('/');\n      expect(html).toMatch('Hello SPA!');\n      expect(consola.log).not.toHaveBeenCalledWith('created');\n      expect(consola.log).toHaveBeenCalledWith('mounted');\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/ (include preload and prefetch resources)","suites":["spa"],"updatePoint":{"line":40,"column":52,"index":1264},"line":40,"code":"    test('/ (include preload and prefetch resources)', async () => {\n      const {\n        head\n      } = await renderRoute('/');\n      expect(head).toMatch('<link rel=\"preload\" href=\"/_nuxt/runtime.js\" as=\"script\">');\n      expect(head).toMatch('<link rel=\"preload\" href=\"/_nuxt/commons/app.js\" as=\"script\">');\n      expect(head).toMatch('<link rel=\"preload\" href=\"/_nuxt/app.js\" as=\"script\">');\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/custom.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/error-handler-async.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/error-handler-object.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/error-handler-string.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/error-handler.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/index.js')}\">`);\n      expect(head).toMatch(`<link rel=\"prefetch\" href=\"/_nuxt/${wChunk('pages/mounted.js')}\">`);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/custom (custom layout)","suites":["spa"],"updatePoint":{"line":56,"column":33,"index":2401},"line":56,"code":"    test('/custom (custom layout)', async () => {\n      const {\n        html\n      } = await renderRoute('/custom');\n      expect(html).toMatch('Custom layout');\n      expect(consola.log).toHaveBeenCalledWith('created');\n      expect(consola.log).toHaveBeenCalledWith('mounted');\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/mounted","suites":["spa"],"updatePoint":{"line":65,"column":18,"index":2705},"line":65,"code":"    test('/mounted', async () => {\n      const {\n        html\n      } = await renderRoute('/mounted');\n      expect(html).toMatch('<h1>Test: updated</h1>');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"Initial route has correct fullPath","suites":["spa"],"updatePoint":{"line":71,"column":44,"index":2896},"line":71,"code":"    test('Initial route has correct fullPath', async () => {\n      const {\n        html\n      } = await renderRoute('/route-path');\n      expect(html).toContain('<div>Route path: /route-path</div>');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/error-handler","suites":["spa"],"updatePoint":{"line":77,"column":24,"index":3084},"line":77,"code":"    test('/error-handler', async () => {\n      const {\n        html\n      } = await renderRoute('/error-handler');\n      expect(html).toMatch('error handler triggered: fetch error!');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/error-handler-object","suites":["spa"],"updatePoint":{"line":83,"column":31,"index":3283},"line":83,"code":"    test('/error-handler-object', async () => {\n      const {\n        html\n      } = await renderRoute('/error-handler-object');\n      expect(html).toMatch('error handler triggered: fetch error!');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/error-handler-string","suites":["spa"],"updatePoint":{"line":89,"column":31,"index":3489},"line":89,"code":"    test('/error-handler-string', async () => {\n      const {\n        html\n      } = await renderRoute('/error-handler-string');\n      expect(html).toMatch('error handler triggered: fetch error!');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/error-handler-async","suites":["spa"],"updatePoint":{"line":95,"column":30,"index":3694},"line":95,"code":"    test('/error-handler-async', async () => {\n      const {\n        html\n      } = await renderRoute('/error-handler-async');\n      expect(html).toMatch('error handler triggered: asyncData error!');\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/async no asyncData leak","suites":["spa"],"updatePoint":{"line":111,"column":34,"index":4299},"line":111,"code":"    test('/async no asyncData leak', async () => {\n      const window = await nuxt.server.renderAndGetWindow(url('/async'));\n\n      const navigate = url => new Promise((resolve, reject) => {\n        window.$nuxt.$router.push(url, resolve, reject);\n      });\n\n      for (let i = 0; i < 3; i++) {\n        await navigate('/');\n        await navigate('/async');\n      }\n\n      const {\n        $data\n      } = window.$nuxt.$route.matched[0].instances.default;\n      expect(Object.keys($data).length).toBe(1);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/redirect-done (no redirect)","suites":["spa"],"updatePoint":{"line":129,"column":38,"index":4846},"line":129,"code":"    test('/redirect-done (no redirect)', async () => {\n      const {\n        html\n      } = await renderRoute('/redirect-done');\n      expect(html).toContain('<div>Redirect Done Page</div>');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done created');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done mounted');\n      expect(consola.log).toHaveBeenCalledTimes(2);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/redirect1 (redirect 1 time)","suites":["spa"],"updatePoint":{"line":139,"column":38,"index":5275},"line":139,"code":"    test('/redirect1 (redirect 1 time)', async () => {\n      const {\n        html\n      } = await renderRoute('/redirect1');\n      expect(html).toContain('<div>Redirect Done Page</div>');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done created');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done mounted');\n      expect(consola.log).toHaveBeenCalledTimes(2);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/redirect2 (redirect 2 times)","suites":["spa"],"updatePoint":{"line":149,"column":39,"index":5701},"line":149,"code":"    test('/redirect2 (redirect 2 times)', async () => {\n      const {\n        html\n      } = await renderRoute('/redirect2');\n      expect(html).toContain('<div>Redirect Done Page</div>');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done created');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done mounted');\n      expect(consola.log).toHaveBeenCalledTimes(2);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"/redirect10 (redirect 10 times)","suites":["spa"],"updatePoint":{"line":159,"column":41,"index":6129},"line":159,"code":"    test('/redirect10 (redirect 10 times)', async () => {\n      const {\n        html\n      } = await renderRoute('/redirect10');\n      expect(html).toContain('<div>Redirect Done Page</div>');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done created');\n      expect(consola.log).toHaveBeenCalledWith('redirect-done mounted');\n      expect(consola.log).toHaveBeenCalledTimes(2);\n      consola.log.mockClear();\n    });","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"render:route hook does not corrupt the cache","suites":["spa"],"updatePoint":{"line":169,"column":54,"index":6571},"line":169,"code":"    test('render:route hook does not corrupt the cache', async () => {\n      const window1 = await nuxt.server.renderAndGetWindow(url('/'));\n      const html1 = window1.document.body.innerHTML;\n      expect(html1).toContain('extra html from render:route hook');\n      expect(html1.match(/render:route/g).length).toBe(1);\n      window1.close();\n      const window2 = await nuxt.server.renderAndGetWindow(url('/'));\n      const html2 = window2.document.body.innerHTML;\n      expect(html2).toContain('extra html from render:route hook');\n      expect(html2.match(/render:route/g).length).toBe(1);\n      window2.close();\n    }); // Close server and ask nuxt to stop listening to file changes","file":"dev/spa.test.js","skipped":false,"dir":"test"},{"name":"unique responses with data()","suites":["ssr"],"updatePoint":{"line":70,"column":36,"index":2217},"line":70,"code":"  test('unique responses with data()', async () => {\n    await uniqueTest('/data');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with component","suites":["ssr"],"updatePoint":{"line":73,"column":39,"index":2310},"line":73,"code":"  test('unique responses with component', async () => {\n    await uniqueTest('/component');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with async components","suites":["ssr"],"updatePoint":{"line":76,"column":46,"index":2415},"line":76,"code":"  test('unique responses with async components', async () => {\n    await uniqueTest('/asyncComponent');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with asyncData()","suites":["ssr"],"updatePoint":{"line":79,"column":41,"index":2520},"line":79,"code":"  test('unique responses with asyncData()', async () => {\n    await uniqueTest('/asyncData');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with store initial state","suites":["ssr"],"updatePoint":{"line":82,"column":49,"index":2628},"line":82,"code":"  test('unique responses with store initial state', async () => {\n    await uniqueTest('/store');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with nuxtServerInit","suites":["ssr"],"updatePoint":{"line":85,"column":44,"index":2727},"line":85,"code":"  test('unique responses with nuxtServerInit', async () => {\n    await uniqueTest('/store?onServerInit=1');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"unique responses with fetch","suites":["ssr"],"updatePoint":{"line":88,"column":35,"index":2832},"line":88,"code":"  test('unique responses with fetch', async () => {\n    await uniqueTest('/fetch');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"store undefined variable response","suites":["ssr"],"updatePoint":{"line":91,"column":41,"index":2928},"line":91,"code":"  test('store undefined variable response', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/store'));\n    expect('idUndefined' in window.__NUXT__.state).toBe(true);\n    expect(window.__NUXT__.state.idUndefined).toEqual(undefined);\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"stress test with asyncData","suites":["ssr"],"updatePoint":{"line":96,"column":34,"index":3186},"line":96,"code":"  test('stress test with asyncData', async () => {\n    await stressTest('/asyncData');\n  });","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"does not share state","suites":["ssr"],"updatePoint":{"line":99,"column":28,"index":3273},"line":99,"code":"  test('does not share state', async () => {\n    const [page1, page2] = await Promise.all([nuxt.server.renderRoute('/context'), nuxt.server.renderRoute('/context/child')]);\n    expect(page1.html).toContain('vm: /context');\n    expect(page1.html).toContain('context: /context');\n    expect(page2.html).toContain('vm: /context/child');\n    expect(page2.html).toContain('context: /context/child');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/ssr.test.js","skipped":false,"dir":"test"},{"name":"payload hydration ","suites":["trailing-slash payloads ()"],"updatePoint":{"line":41,"column":35,"index":1529},"line":41,"code":"    test(`payload hydration ${path}`, async () => {\n      const window = await renderAndGetWindow(url(path), {}, {\n        loadedCallback: '_onNuxtLoaded',\n        globals: {\n          id: '__nuxt'\n        }\n      });\n      expect(window.__NUXT__.fetch).toEqual({\n        0: {\n          result: 'fetched'\n        }\n      });\n    }); // Close server and ask nuxt to stop listening to file changes","file":"dev/trailing-slash-payload.test.js","skipped":false,"dir":"test"},{"name":"client source map generated","suites":["with-config"],"updatePoint":{"line":21,"column":35,"index":595},"line":21,"code":"  test('client source map generated', async () => {\n    const jsFiles = await glob(resolve(__dirname, '..', 'fixtures/with-config/.nuxt/dist/client/*.js'));\n\n    for (const file of jsFiles) {\n      expect(existsSync(`${file}.map`)).toBe(true);\n    }\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["with-config"],"updatePoint":{"line":28,"column":9,"index":825},"line":28,"code":"  test('/', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<h1>I have custom configurations</h1>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (global styles inlined)","suites":["with-config"],"updatePoint":{"line":34,"column":33,"index":1017},"line":34,"code":"  test('/ (global styles inlined)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/'));\n    const html = window.document.head.innerHTML;\n    expect(html).toContain('.global-css-selector');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (preload fonts)","suites":["with-config"],"updatePoint":{"line":39,"column":25,"index":1238},"line":39,"code":"  test('/ (preload fonts)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toMatch(/<link rel=\"preload\" href=\"\\/test\\/orion\\/fonts\\/roboto.[\\w]{7}.woff2\" as=\"font\" type=\"font\\/woff2\" crossorigin/);\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (styleResources styles inlined)","suites":["with-config"],"updatePoint":{"line":45,"column":41,"index":1509},"line":45,"code":"  test('/ (styleResources styles inlined)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('.pre-process-selector');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (custom app.html)","suites":["with-config"],"updatePoint":{"line":51,"column":27,"index":1679},"line":51,"code":"  test('/ (custom app.html)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<p>Made by Nuxt team</p>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (custom build.publicPath)","suites":["with-config"],"updatePoint":{"line":57,"column":35,"index":1860},"line":57,"code":"  test('/ (custom build.publicPath)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('<script src=\"/test/orion/');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (async <script>)","suites":["with-config"],"updatePoint":{"line":63,"column":26,"index":2033},"line":63,"code":"  test('/ (async <script>)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('\" defer async>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ (custom postcss.config.js)","suites":["with-config"],"updatePoint":{"line":69,"column":36,"index":2205},"line":69,"code":"  test('/ (custom postcss.config.js)', async () => {\n    const {\n      html\n    } = await nuxt.server.renderRoute('/');\n    expect(html).toContain('::-moz-placeholder');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/ (custom globalName)","suites":["with-config"],"updatePoint":{"line":75,"column":34,"index":2379},"line":75,"code":"  test('/test/ (custom globalName)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('id=\"custom-nuxt-id\">');\n    expect(html.includes('id=\"__nuxt\">')).toBe(false);\n    expect(window.__NOXXT__).toBeDefined();\n    expect(window.__NUXT__).toBeUndefined();\n    expect(window.$noxxt).toBeDefined();\n    expect(window.$nuxt).toBeDefined(); // for Vue Dev Tools detection\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/ (router base)","suites":["with-config"],"updatePoint":{"line":85,"column":28,"index":2859},"line":85,"code":"  test('/test/ (router base)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/'));\n    const html = window.document.body.innerHTML;\n    expect(window.__NOXXT__.layout).toBe('default');\n    expect(html).toContain('<h1>Default layout</h1>');\n    expect(html).toContain('<h1>I have custom configurations</h1>');\n    expect(window.__test_plugin).toBe(true);\n    expect(window.__test_plugin_ext).toBe(true);\n    expect(window.__test_plugin_client).toBe('test_plugin_client');\n    expect(window.__test_plugin_server).toBeUndefined();\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/about (custom layout)","suites":["with-config"],"updatePoint":{"line":96,"column":35,"index":3434},"line":96,"code":"  test('/test/about (custom layout)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/about'));\n    const html = window.document.body.innerHTML;\n    expect(window.__NOXXT__.layout).toBe('custom');\n    expect(html).toContain('<h1>Custom layout</h1>');\n    expect(html).toContain('<h1>About page</h1>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/desktop (custom layout in desktop folder)","suites":["with-config"],"updatePoint":{"line":103,"column":55,"index":3795},"line":103,"code":"  test('/test/desktop (custom layout in desktop folder)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/desktop'));\n    const html = window.document.body.innerHTML;\n    expect(window.__NOXXT__.layout).toBe('desktop/default');\n    expect(html).toContain('<h1>Default desktop layout</h1>');\n    expect(html).toContain('<h1>Desktop page</h1>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/mobile (custom layout in mobile folder)","suites":["with-config"],"updatePoint":{"line":110,"column":53,"index":4176},"line":110,"code":"  test('/test/mobile (custom layout in mobile folder)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/mobile'));\n    const html = window.document.body.innerHTML;\n    expect(window.__NOXXT__.layout).toBe('mobile/default');\n    expect(html).toContain('<h1>Default mobile layout</h1>');\n    expect(html).toContain('<h1>Mobile page</h1>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/env","suites":["with-config"],"updatePoint":{"line":117,"column":17,"index":4517},"line":117,"code":"  test('/test/env', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/env'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>Custom env layout</h1>');\n    expect(html).toContain('\"bool\": true');\n    expect(html).toContain('\"num\": 23');\n    expect(html).toContain('\"string\": \"Nuxt\"');\n    expect(html).toContain('\"bool\": false');\n    expect(html).toContain('\"string\": \"ok\"');\n    expect(html).toContain('\"num2\": 8.23');\n    expect(html).toContain('\"obj\": {');\n    expect(html).toContain('\"NUXT_ENV_FOO\": \"manniL\"');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/error","suites":["with-config"],"updatePoint":{"line":130,"column":19,"index":5105},"line":130,"code":"  test('/test/error', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/error'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('Error page');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/user-agent","suites":["with-config"],"updatePoint":{"line":135,"column":24,"index":5320},"line":135,"code":"  test('/test/user-agent', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/user-agent'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<pre>Mozilla');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/about-bis (added with extendRoutes)","suites":["with-config"],"updatePoint":{"line":140,"column":49,"index":5567},"line":140,"code":"  test('/test/about-bis (added with extendRoutes)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/about-bis'));\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>Custom layout</h1>');\n    expect(html).toContain('<h1>About page</h1>');\n    expect(html).toContain('<h2>test-meta</h2>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/not-existed should return 404","suites":["with-config"],"updatePoint":{"line":147,"column":43,"index":5918},"line":147,"code":"  test('/test/not-existed should return 404', async () => {\n    await expect(rp(url('/test/not-existed'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404\n      }\n    });\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/redirect/about-bis (redirect with extendRoutes)","suites":["with-config"],"updatePoint":{"line":154,"column":61,"index":6131},"line":154,"code":"  test('/test/redirect/about-bis (redirect with extendRoutes)', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/redirect/about-bis'));\n    const windowHref = window.location.href;\n    expect(windowHref).toContain('/test/about-bis');\n    const html = window.document.body.innerHTML;\n    expect(html).toContain('<h1>Custom layout</h1>');\n    expect(html).toContain('<h1>About page</h1>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"Check /test/test.txt with custom serve-static options","suites":["with-config"],"updatePoint":{"line":162,"column":61,"index":6557},"line":162,"code":"  test('Check /test/test.txt with custom serve-static options', async () => {\n    const {\n      headers\n    } = await rp(url('/test/test.txt'));\n    expect(headers['cache-control']).toBe('public, max-age=31536000');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"Check /test.txt should return 404","suites":["with-config"],"updatePoint":{"line":168,"column":41,"index":6759},"line":168,"code":"  test('Check /test.txt should return 404', async () => {\n    await expect(rp(url('/test.txt'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404\n      }\n    });\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/test/head","suites":["with-config"],"updatePoint":{"line":175,"column":18,"index":6921},"line":175,"code":"  test('/test/head', async () => {\n    const window = await nuxt.server.renderAndGetWindow(url('/test/head'));\n    const html = window.document.querySelector('head').innerHTML;\n    expect(html).toContain('<noscript data-n-head=\"test-ssr-app-id\">noscript</noscript>');\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"should ignore files in .nuxtignore","suites":["with-config"],"updatePoint":{"line":180,"column":42,"index":7219},"line":180,"code":"  test('should ignore files in .nuxtignore', async () => {\n    await expect(rp(url('/test-ignore'))).rejects.toMatchObject({\n      response: {\n        statusCode: 404\n      }\n    });\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"renderAndGetWindow options","suites":["with-config"],"updatePoint":{"line":187,"column":34,"index":7400},"line":187,"code":"  test('renderAndGetWindow options', async () => {\n    const fakeErrorLog = jest.fn();\n    const mockOptions = {\n      beforeParse: jest.fn(window => {\n        // Mock window.scrollTo\n        window.scrollTo = () => {};\n\n        window._virtualConsole.emit('jsdomError', new Error('test'));\n      }),\n      virtualConsole: new jsdom.VirtualConsole().sendTo({\n        error: fakeErrorLog\n      })\n    };\n\n    try {\n      await nuxt.server.renderAndGetWindow(url('/test/error'), mockOptions);\n    } catch (e) {}\n\n    expect(mockOptions.beforeParse).toHaveBeenCalled();\n    expect(fakeErrorLog).toHaveBeenCalled();\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"/ with Server-Timing header","suites":["with-config"],"updatePoint":{"line":208,"column":35,"index":8019},"line":208,"code":"  test('/ with Server-Timing header', async () => {\n    const {\n      headers\n    } = await rp(url('/test'));\n    expect(headers['server-timing']).toMatch(/total;dur=\\d+(\\.\\d+)?;desc=\"Nuxt Server Time\"/);\n  }); // Close server and ask nuxt to stop listening to file changes","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"opens on port defined in server.port","suites":["server config"],"updatePoint":{"line":220,"column":44,"index":8396},"line":220,"code":"  test('opens on port defined in server.port', async () => {\n    const config = await loadFixture('with-config');\n    config.server.port = port = await getPort();\n    nuxt = new Nuxt(config);\n    await nuxt.ready();\n    await nuxt.server.listen();\n    await nuxt.server.renderAndGetWindow(url('/test/'));\n  });","file":"dev/with-config.test.js","skipped":false,"dir":"test"},{"name":"performance loader","suites":["webpack configuration"],"updatePoint":{"line":4,"column":26,"index":165},"line":4,"code":"  test('performance loader', () => {\n    const js = {\n      name: 'js',\n      poolTimeout: Infinity\n    };\n    const css = {\n      name: 'css',\n      poolTimeout: Infinity\n    };\n    const resolveModule = jest.fn(id => id);\n    PerfLoader.warmup = jest.fn();\n    PerfLoader.warmupAll({\n      dev: true,\n      resolveModule\n    });\n    expect(PerfLoader.warmup).toHaveBeenCalledTimes(2);\n    expect(PerfLoader.warmup).toHaveBeenCalledWith(js, ['babel-loader', '@babel/preset-env']);\n    expect(PerfLoader.warmup).toHaveBeenCalledWith(css, ['css-loader']);\n    const perfLoader = new PerfLoader('test-perf', {\n      options: {\n        dev: true\n      },\n      buildOptions: {\n        parallel: true,\n        cache: true\n      }\n    }, {\n      resolveModule\n    });\n    expect(perfLoader.workerPools).toMatchObject({\n      js,\n      css\n    });\n    const loaders = perfLoader.use('js');\n    const cacheDirectory = path.resolve('node_modules/.cache/cache-loader/test-perf');\n    expect(loaders).toMatchObject([{\n      loader: 'cache-loader',\n      options: {\n        cacheDirectory\n      }\n    }, {\n      loader: 'thread-loader',\n      options: js\n    }]);\n  });","file":"dev/wp.config.test.js","skipped":false,"dir":"test"},{"name":"Open /","suites":["basic browser"],"updatePoint":{"line":21,"column":14,"index":569},"line":21,"code":"  test('Open /', async () => {\n    page = await browser.page(url('/'));\n    expect(await page.$text('h1')).toBe('Index page');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/noloading","suites":["basic browser"],"updatePoint":{"line":25,"column":18,"index":706},"line":25,"code":"  test('/noloading', async () => {\n    const {\n      hook\n    } = await page.nuxt.navigate('/noloading', false);\n    await waitFor(nuxt.options.loading.throttle + 100);\n    let loading = await page.nuxt.loadingData();\n    expect(loading.show).toBe(true);\n    await hook;\n    loading = await page.nuxt.loadingData();\n    expect(loading.show).toBe(true);\n    await page.waitForFunction('$nuxt.$loading.$data.show === false');\n    await page.waitForFunction('document.querySelector(\\'p\\').innerText === \\'true\\'');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/stateless","suites":["basic browser"],"updatePoint":{"line":38,"column":18,"index":1224},"line":38,"code":"  test('/stateless', async () => {\n    const {\n      hook\n    } = await page.nuxt.navigate('/stateless', false);\n    await hook;\n    expect(await page.$text('h1')).toBe('My component!');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/store-module","suites":["basic browser"],"updatePoint":{"line":45,"column":21,"index":1420},"line":45,"code":"  test('/store-module', async () => {\n    await page.nuxt.navigate('/store-module');\n    expect(await page.$text('h1')).toBe('mutated');\n    expect(await page.evaluate(() => window.__NUXT__.state.clientsideModule.initialised)).toBeTruthy();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/css","suites":["basic browser"],"updatePoint":{"line":50,"column":12,"index":1658},"line":50,"code":"  test('/css', async () => {\n    await page.nuxt.navigate('/css');\n    expect(await page.$text('.red', true)).toEqual('This is red');\n    expect(await page.$eval('.red', red => {\n      const {\n        color,\n        backgroundColor\n      } = window.getComputedStyle(red);\n      return {\n        color,\n        backgroundColor\n      };\n    })).toEqual({\n      color: 'rgb(255, 0, 0)',\n      backgroundColor: 'rgb(0, 0, 255)'\n    });\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/stateful","suites":["basic browser"],"line":67,"code":"  test.skip('/stateful', async () => {","file":"e2e/basic.browser.test.js","skipped":true,"dir":"test"},{"name":"/store","suites":["basic browser"],"updatePoint":{"line":74,"column":14,"index":2289},"line":74,"code":"  test('/store', async () => {\n    await page.nuxt.navigate('/store');\n    expect(await page.$text('h1')).toBe('foo/bar/baz: Vuex Nested Modules');\n    expect(await page.$text('h2')).toBe('index/counter: 1');\n    expect(await page.$text('h3')).toBe('foo/blarg/getVal: 4');\n    expect(await page.$text('h4')).toBe('foo/bab/getBabVal: 10');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/head","suites":["basic browser"],"updatePoint":{"line":81,"column":13,"index":2633},"line":81,"code":"  test('/head', async () => {\n    const msg = new Promise(resolve => page.on('console', msg => resolve(msg.text())));\n    await page.nuxt.navigate('/head');\n    const metas = await page.$$attr('meta', 'content');\n    expect(await msg).toBe('Body script!');\n    expect(await page.title()).toBe('My title - Nuxt');\n    expect(await page.$text('h1')).toBe('I can haz meta tags');\n    expect(metas[1]).toBe('my meta');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/async-data","suites":["basic browser"],"updatePoint":{"line":90,"column":19,"index":3060},"line":90,"code":"  test('/async-data', async () => {\n    await page.nuxt.navigate('/async-data');\n    expect(await page.$text('p')).toBe('Nuxt');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/await-async-data","suites":["basic browser"],"updatePoint":{"line":94,"column":25,"index":3201},"line":94,"code":"  test('/await-async-data', async () => {\n    await page.nuxt.navigate('/await-async-data');\n    expect(await page.$text('p')).toBe('Await Nuxt');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/callback-async-data","suites":["basic browser"],"updatePoint":{"line":98,"column":28,"index":3357},"line":98,"code":"  test('/callback-async-data', async () => {\n    await page.nuxt.navigate('/callback-async-data');\n    expect(await page.$text('p')).toBe('Callback Nuxt');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/users/1","suites":["basic browser"],"updatePoint":{"line":102,"column":16,"index":3507},"line":102,"code":"  test('/users/1', async () => {\n    await page.nuxt.navigate('/users/1');\n    expect(await page.$text('h1')).toBe('User: 1');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top with scrollToTop set to true","suites":["basic browser"],"updatePoint":{"line":106,"column":51,"index":3675},"line":106,"code":"  test('/scroll-to-top with scrollToTop set to true', async () => {\n    const page = await browser.page(url('/scroll-to-top'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top/scroll-to-top-true');\n    const pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBe(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top with scrollToTop set to false","suites":["basic browser"],"updatePoint":{"line":114,"column":52,"index":4070},"line":114,"code":"  test('/scroll-to-top with scrollToTop set to false', async () => {\n    const page = await browser.page(url('/scroll-to-top'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top/scroll-to-top-false');\n    const pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top in the same page","suites":["basic browser"],"updatePoint":{"line":122,"column":39,"index":4464},"line":122,"code":"  test('/scroll-to-top in the same page', async () => {\n    const page = await browser.page(url('/scroll-to-top'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top?test=1');\n    const pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top in the same page with watchQuery: true","suites":["basic browser"],"updatePoint":{"line":130,"column":61,"index":4867},"line":130,"code":"  test('/scroll-to-top in the same page with watchQuery: true', async () => {\n    const page = await browser.page(url('/scroll-to-top/watch-query-true'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top/watch-query-true?test=1');\n    let pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBe(0);\n    await page.nuxt.go(-1);\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top in the same page with watchQuery array","suites":["basic browser"],"updatePoint":{"line":141,"column":61,"index":5428},"line":141,"code":"  test('/scroll-to-top in the same page with watchQuery array', async () => {\n    const page = await browser.page(url('/scroll-to-top/watch-query-array'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top/watch-query-array?other=1');\n    let pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    await page.nuxt.go(-1);\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    await page.nuxt.navigate('/scroll-to-top/watch-query-array?test=1');\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBe(0);\n    await page.nuxt.go(-1);\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/scroll-to-top in the same page with watchQuery function","suites":["basic browser"],"updatePoint":{"line":158,"column":64,"index":6314},"line":158,"code":"  test('/scroll-to-top in the same page with watchQuery function', async () => {\n    const page = await browser.page(url('/scroll-to-top/watch-query-fn'));\n    await page.evaluate(() => window.scrollBy(0, window.innerHeight));\n    await page.nuxt.navigate('/scroll-to-top/watch-query-fn?other=1');\n    let pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    await page.nuxt.go(-1);\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBeGreaterThan(0);\n    await page.nuxt.navigate('/scroll-to-top/watch-query-fn?test=1');\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBe(0);\n    await page.nuxt.go(-1);\n    pageYOffset = await page.evaluate(() => window.pageYOffset);\n    expect(pageYOffset).toBe(0);\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/validate should display a 404","suites":["basic browser"],"updatePoint":{"line":175,"column":38,"index":7154},"line":175,"code":"  test('/validate should display a 404', async () => {\n    await page.nuxt.navigate('/validate');\n    const error = await page.nuxt.errorData();\n    expect(error.statusCode).toBe(404);\n    expect(error.message).toBe('This page could not be found');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/validate-async should display a 404","suites":["basic browser"],"updatePoint":{"line":181,"column":44,"index":7415},"line":181,"code":"  test('/validate-async should display a 404', async () => {\n    await page.nuxt.navigate('/validate-async');\n    const error = await page.nuxt.errorData();\n    expect(error.statusCode).toBe(404);\n    expect(error.message).toBe('This page could not be found');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/validate?valid=true","suites":["basic browser"],"updatePoint":{"line":187,"column":28,"index":7666},"line":187,"code":"  test('/validate?valid=true', async () => {\n    await page.nuxt.navigate('/validate?valid=true');\n    expect(await page.$text('h1')).toBe('I am valid');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/validate-async?valid=true","suites":["basic browser"],"updatePoint":{"line":191,"column":34,"index":7832},"line":191,"code":"  test('/validate-async?valid=true', async () => {\n    await page.nuxt.navigate('/validate-async?valid=true');\n    expect(await page.$text('h1')).toBe('I am valid');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/redirect","suites":["basic browser"],"updatePoint":{"line":195,"column":17,"index":7987},"line":195,"code":"  test('/redirect', async () => {\n    await page.nuxt.navigate('/redirect');\n    expect(await page.$text('h1')).toBe('Index page');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/error","suites":["basic browser"],"updatePoint":{"line":199,"column":14,"index":8122},"line":199,"code":"  test('/error', async () => {\n    await page.nuxt.navigate('/error');\n    expect(await page.nuxt.errorData()).toEqual({\n      message: 'Error mouahahah',\n      statusCode: 500\n    });\n    expect(await page.$text('.title')).toBe('Error mouahahah');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/error2","suites":["basic browser"],"updatePoint":{"line":207,"column":15,"index":8378},"line":207,"code":"  test('/error2', async () => {\n    await page.nuxt.navigate('/error2');\n    expect(await page.$text('.title')).toBe('Custom error');\n    expect(await page.nuxt.errorData()).toEqual({\n      message: 'Custom error',\n      statusCode: 500,\n      customProp: 'ezpz'\n    });\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/redirect-middleware","suites":["basic browser"],"updatePoint":{"line":216,"column":28,"index":8668},"line":216,"code":"  test('/redirect-middleware', async () => {\n    await page.nuxt.navigate('/redirect-middleware');\n    expect(await page.$text('h1')).toBe('Index page');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/redirect-external","suites":["basic browser"],"updatePoint":{"line":220,"column":26,"index":8826},"line":220,"code":"  test('/redirect-external', async () => {\n    // New page for redirecting to external link.\n    const page = await browser.page(url('/'));\n    await page.nuxt.navigate('/redirect-external', false);\n    await page.waitForFunction(() => window.location.href === 'https://example.com/test/');\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/redirect-name","suites":["basic browser"],"updatePoint":{"line":227,"column":22,"index":9137},"line":227,"code":"  test('/redirect-name', async () => {\n    await page.nuxt.navigate('/redirect-name');\n    expect(await page.$text('h1')).toBe('My component!');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/no-ssr","suites":["basic browser"],"updatePoint":{"line":231,"column":15,"index":9281},"line":231,"code":"  test('/no-ssr', async () => {\n    await page.nuxt.navigate('/no-ssr');\n    expect(await page.$text('h1')).toBe('Displayed only on client-side');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/meta","suites":["basic browser"],"updatePoint":{"line":235,"column":13,"index":9432},"line":235,"code":"  test('/meta', async () => {\n    await page.nuxt.navigate('/meta');\n    const state = await page.nuxt.storeState();\n    expect(state.meta).toEqual([{\n      works: true\n    }]);\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/fn-midd","suites":["basic browser"],"updatePoint":{"line":242,"column":16,"index":9619},"line":242,"code":"  test('/fn-midd', async () => {\n    await page.nuxt.navigate('/fn-midd');\n    expect(await page.$text('.title')).toBe('You need to ask the permission');\n    expect(await page.nuxt.errorData()).toEqual({\n      message: 'You need to ask the permission',\n      statusCode: 403\n    });\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/fn-midd?please=true","suites":["basic browser"],"updatePoint":{"line":250,"column":28,"index":9920},"line":250,"code":"  test('/fn-midd?please=true', async () => {\n    await page.nuxt.navigate('/fn-midd?please=true');\n    const h1 = await page.$text('h1');\n    expect(h1.includes('Date:')).toBe(true);\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/router-guard","suites":["basic browser"],"updatePoint":{"line":255,"column":21,"index":10102},"line":255,"code":"  test('/router-guard', async () => {\n    await page.nuxt.navigate('/router-guard');\n    const p = await page.$text('p');\n    expect(p).toBe('Nuxt');\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/refresh-page-data","suites":["basic browser"],"updatePoint":{"line":260,"column":26,"index":10263},"line":260,"code":"  test('/refresh-page-data', async () => {\n    const page = await browser.page(url('/refresh-page-data'));\n    let h1 = await page.$text('h1');\n    expect(h1).toContain('Hello from server');\n    await page.evaluate($nuxt => $nuxt.refresh(), page.$nuxt);\n    h1 = await page.$text('h1');\n    expect(h1).toContain('Hello from client');\n    page.close();\n  });","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"/redirection/no loop","suites":["basic browser"],"updatePoint":{"line":269,"column":28,"index":10623},"line":269,"code":"  test('/redirection/no loop', async () => {\n    const page = await browser.page(url('/redirection/no loop'));\n    expect(await page.$text('h1')).toContain('Redirected page');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"e2e/basic.browser.test.js","skipped":false,"dir":"test"},{"name":"default","suites":["basic vue-config"],"updatePoint":{"line":26,"column":15,"index":619},"line":26,"code":"  test('default', async () => {\n    nuxt = await startServer();\n    expect(nuxt.options.vue.config).toEqual({\n      silent: true,\n      performance: false\n    });\n    page = await browser.page(url('/config'));\n    expect(await page.$text('#silent', true)).toBe('true');\n    expect(await page.$text('#performance', true)).toBe('false');\n  });","file":"e2e/basic.vue-config.test.js","skipped":false,"dir":"test"},{"name":"explicit","suites":["basic vue-config"],"updatePoint":{"line":36,"column":16,"index":962},"line":36,"code":"  test('explicit', async () => {\n    nuxt = await startServer('config-explicit');\n    page = await browser.page(url('/config'));\n    expect(nuxt.options.vue.config).toEqual({\n      silent: false,\n      performance: true,\n      devtools: true\n    });\n    expect(await page.$text('#silent', true)).toBe('false');\n    expect(await page.$text('#performance', true)).toBe('true');\n    expect(await page.$text('#devtools', true)).toBe('true');\n  });","file":"e2e/basic.vue-config.test.js","skipped":false,"dir":"test"},{"name":"Start browser","suites":["children patch (browser)"],"updatePoint":{"line":19,"column":21,"index":530},"line":19,"code":"  test('Start browser', async () => {\n    expect.assertions(0); // suppress 'no assertions' warning\n\n    await browser.start({// slowMo: 50,\n      // headless: false\n    });\n  });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Loading /patch and keep","suites":["children patch (browser)"],"updatePoint":{"line":26,"column":31,"index":720},"line":26,"code":"  test('Loading /patch and keep', async () => {\n    page = await browser.page(url('/patch'));\n    const h1 = await page.$text('h1');\n    expect(h1.includes('patch:')).toBe(true);\n    const h2 = await page.$text('h2');\n    expect(h2).toBe('Index');\n    dates.patch = await page.$text('[data-date-patch]');\n  });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/1","suites":["children patch (browser)","refresh child component if param changed"],"updatePoint":{"line":35,"column":30,"index":1093},"line":35,"code":"    test('Navigate to /patch/1', async () => {\n      const {\n        hook\n      } = await page.nuxt.navigate('/patch/1', false);\n      await hook;\n      const h2 = await page.$text('h2');\n      expect(h2.includes('_id:')).toBe(true);\n      dates.id = await page.$text('[data-date-id]');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2","suites":["children patch (browser)","refresh child component if param changed"],"updatePoint":{"line":45,"column":30,"index":1459},"line":45,"code":"    test('Navigate to /patch/2', async () => {\n      await page.nuxt.navigate('/patch/2');\n      const date = await page.$text('[data-date-id]');\n      expect(await page.$text('h3')).toBe('Index');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(+dates.id < +date).toBe(true);\n      dates.id = date;\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2?test=true","suites":["children patch (browser)","resue component if only query is changed"],"updatePoint":{"line":55,"column":40,"index":1882},"line":55,"code":"    test('Navigate to /patch/2?test=true', async () => {\n      await page.nuxt.navigate('/patch/2?test=true');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2#test","suites":["children patch (browser)","resue component if only query is changed"],"updatePoint":{"line":60,"column":35,"index":2132},"line":60,"code":"    test('Navigate to /patch/2#test', async () => {\n      await page.nuxt.navigate('/patch/2#test');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/child","suites":["children patch (browser)","refresh child component if param is changed"],"updatePoint":{"line":67,"column":36,"index":2450},"line":67,"code":"    test('Navigate to /patch/2/child', async () => {\n      await page.nuxt.navigate('/patch/2/child');\n      dates.child = await page.$text('[data-date-child]');\n      dates.slug = await page.$text('[data-date-child-slug]');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(+dates.child > +dates.id).toBe(true);\n      expect(+dates.slug > +dates.child).toBe(true);\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/child/1","suites":["children patch (browser)","refresh child component if param is changed"],"updatePoint":{"line":76,"column":38,"index":2925},"line":76,"code":"    test('Navigate to /patch/2/child/1', async () => {\n      await page.nuxt.navigate('/patch/2/child/1');\n      const date = await page.$text('[data-date-child-slug]');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(dates.child).toBe(await page.$text('[data-date-child]'));\n      expect(+date > +dates.slug).toBe(true);\n      dates.slug = date;\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/child/1?foo=bar","suites":["children patch (browser)","refresh child component if param is changed"],"updatePoint":{"line":85,"column":46,"index":3389},"line":85,"code":"    test('Navigate to /patch/2/child/1?foo=bar', async () => {\n      await page.nuxt.navigate('/patch/2/child/1?foo=bar');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(dates.child).toBe(await page.$text('[data-date-child]'));\n      expect(dates.slug).toBe(await page.$text('[data-date-child-slug]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Search a country","suites":["children patch (browser)","refresh child component if param is changed"],"updatePoint":{"line":92,"column":26,"index":3782},"line":92,"code":"    test('Search a country', async () => {\n      const countries = await page.$$text('[data-test-search-result]');\n      expect(countries.length).toBe(5);\n      await page.type('[data-test-search-input]', 'gu');\n      await waitFor(250);\n      const newCountries = await page.$$text('[data-test-search-result]', true);\n      expect(newCountries.length).toBe(1);\n      expect(newCountries).toEqual(['Guinea']);\n      expect(await page.nuxt.routeData()).toEqual({\n        path: '/patch/2/child/1',\n        query: {\n          foo: 'bar',\n          q: 'gu'\n        }\n      });\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/reuse","suites":["children patch (browser)","reuse child component if param is changed but watchParam is false"],"updatePoint":{"line":110,"column":36,"index":4467},"line":110,"code":"    test('Navigate to /patch/2/reuse', async () => {\n      await page.nuxt.navigate('/patch/2/reuse');\n      dates.slug = await page.$text('[data-date-slug]');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(+dates.child > +dates.id).toBe(true);\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/reuse/1","suites":["children patch (browser)","reuse child component if param is changed but watchParam is false"],"updatePoint":{"line":117,"column":38,"index":4824},"line":117,"code":"    test('Navigate to /patch/2/reuse/1', async () => {\n      await page.nuxt.navigate('/patch/2/reuse/1');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(dates.slug).toBe(await page.$text('[data-date-slug]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Navigate to /patch/2/reuse/2","suites":["children patch (browser)","reuse child component if param is changed but watchParam is false"],"updatePoint":{"line":123,"column":38,"index":5144},"line":123,"code":"    test('Navigate to /patch/2/reuse/2', async () => {\n      await page.nuxt.navigate('/patch/2/reuse/2');\n      expect(dates.patch).toBe(await page.$text('[data-date-patch]'));\n      expect(dates.id).toBe(await page.$text('[data-date-id]'));\n      expect(dates.slug).toBe(await page.$text('[data-date-slug]'));\n    });","file":"e2e/children.patch.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /","suites":["basic browser"],"updatePoint":{"line":21,"column":14,"index":560},"line":21,"code":"  test('Open /', async () => {\n    page = await browser.page(url('/'));\n    expect(await page.$text('h1')).toBe('Error Loop incoming page');\n  });","file":"e2e/error.test.js","skipped":false,"dir":"test"},{"name":"/squared doesnt loop due to error on error page","suites":["basic browser"],"updatePoint":{"line":25,"column":55,"index":748},"line":25,"code":"  test('/squared doesnt loop due to error on error page', async () => {\n    await page.nuxt.navigate('/squared');\n    expect(await page.$text('header')).toBe('Error layout');\n    expect(await page.$text('h2')).toBe('An error occurred while showing the error page');\n  });","file":"e2e/error.test.js","skipped":false,"dir":"test"},{"name":"/about loads normally","suites":["basic browser"],"updatePoint":{"line":30,"column":29,"index":994},"line":30,"code":"  test('/about loads normally', async () => {\n    await page.nuxt.navigate('/about');\n    expect(await page.$text('h1')).toBe('About');\n  });","file":"e2e/error.test.js","skipped":false,"dir":"test"},{"name":"/about error layout after click","suites":["basic browser"],"updatePoint":{"line":34,"column":39,"index":1146},"line":34,"code":"  test('/about error layout after click', async () => {\n    const transitionPromise = page.evaluate(async $nuxt => {\n      await new Promise(resolve => $nuxt.$once('triggerScroll', resolve));\n    }, page.$nuxt);\n    await page.click('button');\n    await transitionPromise;\n    expect(await page.$text('header')).toBe('Error layout');\n  });","file":"e2e/error.test.js","skipped":false,"dir":"test"},{"name":"/info prints empty page","suites":["basic browser"],"updatePoint":{"line":42,"column":31,"index":1478},"line":42,"code":"  test('/info prints empty page', async () => {\n    await page.nuxt.navigate('/info');\n    expect(await page.$text('#__layout')).toBe('');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"e2e/error.test.js","skipped":false,"dir":"test"},{"name":"Open /","suites":["basic browser"],"updatePoint":{"line":21,"column":14,"index":560},"line":21,"code":"  test('Open /', async () => {\n    page = await browser.page(url('/'));\n    expect(await page.$text('pre')).toContain('Atinux');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/fetch-client","suites":["basic browser"],"updatePoint":{"line":25,"column":21,"index":702},"line":25,"code":"  test('/fetch-client', async () => {\n    await page.nuxt.navigate('/fetch-client');\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('pi0');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/old-fetch","suites":["basic browser"],"updatePoint":{"line":31,"column":18,"index":943},"line":31,"code":"  test('/old-fetch', async () => {\n    await page.nuxt.navigate('/old-fetch');\n    const storeState = await page.nuxt.storeState();\n    expect(storeState).toMatchObject({\n      oldFetchData: 'old-fetch'\n    });\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/fetch-error","suites":["basic browser"],"updatePoint":{"line":38,"column":20,"index":1162},"line":38,"code":"  test('/fetch-error', async () => {\n    await page.nuxt.navigate('/fetch-error');\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('#error');\n    expect(await page.$text('#error')).toContain('fetch-error');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/fetch-component","suites":["basic browser"],"updatePoint":{"line":44,"column":24,"index":1422},"line":44,"code":"  test('/fetch-component', async () => {\n    await page.nuxt.navigate('/fetch-component');\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('clarkdo');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/fetch-delay","suites":["basic browser"],"updatePoint":{"line":50,"column":20,"index":1672},"line":50,"code":"  test('/fetch-delay', async () => {\n    const now = Date.now();\n    await page.nuxt.navigate('/fetch-delay');\n    expect(await page.$text('p')).toContain('Fetching for 1 second');\n    await page.waitForSelector('pre');\n    const delay = Date.now() - now;\n    expect(await page.$text('pre')).toContain('alexchopin');\n    expect(delay).toBeGreaterThanOrEqual(1000);\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/fetch-button","suites":["basic browser"],"updatePoint":{"line":59,"column":21,"index":2044},"line":59,"code":"  test('/fetch-button', async () => {\n    await page.nuxt.navigate('/fetch-button');\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('kevinmarrec');\n    await page.click('button');\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('kevinmarrec');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/nested","suites":["basic browser"],"updatePoint":{"line":69,"column":15,"index":2483},"line":69,"code":"  test('/nested', async () => {\n    await page.nuxt.navigate('/nested');\n    const fetchKeys = await page.evaluate(() => Object.keys(window.__NUXT__.fetch));\n    expect(fetchKeys).toEqual(['0', 'DefaultLayout:0']);\n    expect(await page.$text('div')).toContain('foo-bar-baz');\n    expect(await page.$text('div')).toContain('fizz-buzz');\n    expect(await page.$text('button')).toContain('fetch');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"/nested/child","suites":["basic browser"],"updatePoint":{"line":77,"column":21,"index":2891},"line":77,"code":"  test('/nested/child', async () => {\n    await page.nuxt.navigate('/nested/child');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('Atinux');\n    const fetchKeys = await page.evaluate(() => Object.keys(window.__NUXT__.fetch));\n    expect(fetchKeys).toEqual(['0', 'DefaultLayout:0']);\n    expect(await page.$text('div')).toContain('foo-bar-baz');\n    expect(await page.$text('div')).toContain('fizz-buzz');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /nested","suites":["basic browser"],"updatePoint":{"line":86,"column":20,"index":3341},"line":86,"code":"  test('ssr: /nested', async () => {\n    page = await browser.page(url('/nested'));\n    expect(await page.$text('div')).toContain('foo-bar-baz');\n    expect(await page.$text('div')).toContain('fizz-buzz');\n    const fetchKeys = await page.evaluate(() => Object.keys(window.__NUXT__.fetch));\n    expect(fetchKeys).toEqual(['0', 'DefaultLayout:0', 'ie0']);\n    expect(await page.$text('button')).toContain('has fetch');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /nested/child","suites":["basic browser"],"updatePoint":{"line":94,"column":26,"index":3771},"line":94,"code":"  test('ssr: /nested/child', async () => {\n    page = await browser.page(url('/nested/child'));\n    expect(await page.$text('pre')).toContain('Atinux');\n    const fetchKeys = await page.evaluate(() => Object.keys(window.__NUXT__.fetch));\n    expect(fetchKeys).toEqual(['0', 'DefaultLayout:0', 'team:0']);\n    const team = await page.evaluate(() => window.__NUXT__.fetch['team:0'].team);\n    expect(team.includes('Atinux'));\n    expect(await page.$text('div')).toContain('foo-bar-baz');\n    expect(await page.$text('div')).toContain('fizz-buzz');\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-root","suites":["basic browser"],"updatePoint":{"line":104,"column":24,"index":4321},"line":104,"code":"  test('ssr: /fetch-root', async () => {\n    const page = await browser.page(url('/fetch-root'));\n    expect(await page.$text('button')).toContain('has fetch');\n    page.close();\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-client","suites":["basic browser"],"updatePoint":{"line":109,"column":26,"index":4508},"line":109,"code":"  test('ssr: /fetch-client', async () => {\n    const page = await browser.page(url('/fetch-client'));\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('pi0');\n    page.close();\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-conditional","suites":["basic browser"],"updatePoint":{"line":116,"column":31,"index":4792},"line":116,"code":"  test('ssr: /fetch-conditional', async () => {\n    const page = await browser.page(url('/fetch-conditional'));\n    expect(await page.$text('pre')).toContain('galvez');\n    page.close();\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-conditional?fetch_client=true","suites":["basic browser"],"updatePoint":{"line":121,"column":49,"index":5003},"line":121,"code":"  test('ssr: /fetch-conditional?fetch_client=true', async () => {\n    const page = await browser.page(url('/fetch-conditional?fetch_client=true'));\n    expect(await page.$text('p')).toContain('Fetching...');\n    await page.waitForSelector('pre');\n    expect(await page.$text('pre')).toContain('pimlie');\n    page.close();\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-error","suites":["basic browser"],"updatePoint":{"line":128,"column":25,"index":5307},"line":128,"code":"  test('ssr: /fetch-error', async () => {\n    const page = await browser.page(url('/fetch-error'));\n    expect(await page.$text('#error')).toContain('fetch-error');\n    page.close();\n  });","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"ssr: /fetch-deep","suites":["basic browser"],"updatePoint":{"line":133,"column":24,"index":5495},"line":133,"code":"  test('ssr: /fetch-deep', async () => {\n    const page = await browser.page(url('/fetch-deep'));\n    const expectedState = {\n      foo: 'barbar',\n      user: {\n        name: 'Potato',\n        inventory: {\n          type: 'green',\n          items: ['A', 'B']\n        }\n      },\n      async: 'data',\n      async2: 'data2fetch'\n    }; // Hydrated HTML\n\n    const renderedData = await page.$text('#data').then(t => JSON.parse(t));\n    expect(renderedData).toMatchObject(expectedState); // Fragments\n\n    const {\n      data,\n      fetch\n    } = await page.evaluate(() => window.__NUXT__);\n    expect(data.length).toBe(1);\n    expect(Object.keys(fetch).length).toBe(2); // asyncData mutations\n\n    expect(data[0]).toMatchObject({\n      async: 'data',\n      async2: 'data2'\n    }); // fetch mutations\n\n    expect(fetch[0]).toMatchObject({\n      user: {\n        inventory: {\n          items: ['A', 'B']\n        },\n        name: 'Potato'\n      },\n      foo: 'barbar',\n      async2: 'data2fetch'\n    });\n    page.close();\n  }); // Close server and ask nuxt to stop listening to file changes","file":"e2e/fetch.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /","suites":["page transitions (browser)"],"updatePoint":{"line":27,"column":14,"index":800},"line":27,"code":"  test('Open /', async () => {\n    page = await browser.page(url('/'));\n    expect(await page.$text('h1')).toBe('Index page');\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Root page callbacks","suites":["page transitions (browser)"],"updatePoint":{"line":31,"column":27,"index":946},"line":31,"code":"  test('Root page callbacks', async () => {\n    await page.nuxt.navigate('/callbacks');\n    const events = await parseEvents(page);\n    expect(events).toEqual([['index', 'beforeLeave'], ['index', 'leave'], ['index', 'afterLeave'], ['callbacks', 'beforeEnter'], ['callbacks', 'enter'], ['callbacks', 'afterEnter']]);\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Parent -> Child page callbacks","suites":["page transitions (browser)"],"updatePoint":{"line":36,"column":38,"index":1279},"line":36,"code":"  test('Parent -> Child page callbacks', async () => {\n    await page.nuxt.navigate('/callbacks/child');\n    const events = await parseEvents(page);\n    expect(events).toEqual([['callbacks-child', 'beforeEnter'], ['callbacks-child', 'enter'], ['callbacks-child', 'afterEnter']]);\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Child -> Parent page callbacks","suites":["page transitions (browser)"],"updatePoint":{"line":41,"column":38,"index":1565},"line":41,"code":"  test('Child -> Parent page callbacks', async () => {\n    await page.nuxt.navigate('/callbacks');\n    const events = await parseEvents(page);\n    expect(events).toEqual([['callbacks-child', 'beforeLeave'], ['callbacks-child', 'leave'], ['callbacks-child', 'afterLeave']]);\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Root page transition properties","suites":["page transitions (browser)"],"updatePoint":{"line":46,"column":39,"index":1846},"line":46,"code":"  test('Root page transition properties', async () => {\n    await page.nuxt.navigate('/transition-properties');\n    const transitionsData = await page.nuxt.transitionsData();\n    expect(transitionsData.length).toBe(1);\n    expect(transitionsData[0].name).toBe('custom');\n    expect(transitionsData[0].appear).toBe(true);\n    expect(transitionsData[0].css).toBe(false);\n    expect(transitionsData[0].mode).toBe('in-out');\n    expect(transitionsData[0].duration).toBe(3000);\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Parent -> child transition properties","suites":["page transitions (browser)"],"updatePoint":{"line":56,"column":45,"index":2331},"line":56,"code":"  test('Parent -> child transition properties', async () => {\n    await page.nuxt.navigate('/transition-properties/child');\n    const transitionsData = await page.nuxt.transitionsData();\n    expect(transitionsData.length).toBe(2);\n    expect(transitionsData[0].name).toBe('custom');\n    expect(transitionsData[1].name).toBe('custom-child');\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Child -> parent transition properties","suites":["page transitions (browser)"],"updatePoint":{"line":63,"column":45,"index":2678},"line":63,"code":"  test('Child -> parent transition properties', async () => {\n    await page.nuxt.navigate('/transition-properties');\n    const transitionsData = await page.nuxt.transitionsData();\n    expect(transitionsData.length).toBe(2);\n    expect(transitionsData[0].name).toBe('custom');\n    expect(transitionsData[1].name).toBe('custom-child');\n  });","file":"e2e/page-transitions.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /app (router base)","suites":["spa router base browser"],"updatePoint":{"line":21,"column":31,"index":590},"line":21,"code":"  test('Open /app (router base)', async () => {\n    page = await browser.page(url('/app'));\n    expect(await page.evaluate(() => location.href)).toBe(url('/app/'));\n    expect(await page.html()).not.toContain('This page could not be found');\n    expect(await page.evaluate(() => {\n      const headings = document.evaluate(\"//div[text()='Hello SPA!']\", document, null, XPathResult.ANY_TYPE, null);\n      return headings.iterateNext();\n    })).not.toBe(null);\n  });","file":"e2e/spa-base.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /app/ (router base with trailing slash)","suites":["spa router base browser"],"updatePoint":{"line":30,"column":52,"index":1075},"line":30,"code":"  test('Open /app/ (router base with trailing slash)', async () => {\n    page = await browser.page(url('/app/'));\n    expect(await page.evaluate(() => location.href)).toBe(url('/app/'));\n    expect(await page.html()).not.toContain('This page could not be found');\n  });","file":"e2e/spa-base.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /app/mounted","suites":["spa router base browser"],"updatePoint":{"line":35,"column":25,"index":1318},"line":35,"code":"  test('Open /app/mounted', async () => {\n    page = await browser.page(url('/app/mounted'));\n    expect(await page.$text('h1')).toMatch('Test: updated');\n  });","file":"e2e/spa-base.browser.test.js","skipped":false,"dir":"test"},{"name":"/app/unknown","suites":["spa router base browser"],"updatePoint":{"line":39,"column":20,"index":1474},"line":39,"code":"  test('/app/unknown', async () => {\n    page = await browser.page(url('/app/unknown'));\n    expect(await page.evaluate(() => location.href)).toBe(url('/app/unknown'));\n    expect(await page.html()).toContain('This page could not be found');\n  }); // Close server and ask nuxt to stop listening to file changes","file":"e2e/spa-base.browser.test.js","skipped":false,"dir":"test"},{"name":"Open /","suites":["split layouts error layout"],"updatePoint":{"line":20,"column":14,"index":582},"line":20,"code":"  test('Open /', async () => {\n    expect(await page.$text('h1')).toBe('Error Loop incoming page');\n  });","file":"e2e/split-layouts-error.test.js","skipped":false,"dir":"test"},{"name":"/info has error layout","suites":["split layouts error layout"],"updatePoint":{"line":23,"column":30,"index":704},"line":23,"code":"  test('/info has error layout', async () => {\n    await page.nuxt.navigate('/info');\n    const transitionPromise = page.evaluate(async $nuxt => {\n      await new Promise(resolve => $nuxt.$once('triggerScroll', resolve));\n    }, page.$nuxt);\n    await page.click('button');\n    await transitionPromise;\n    expect(await page.$text('header')).toBe('Error layout');\n  });","file":"e2e/split-layouts-error.test.js","skipped":false,"dir":"test"},{"name":"/error has error layout after router push","suites":["split layouts error layout"],"updatePoint":{"line":32,"column":49,"index":1093},"line":32,"code":"  test('/error has error layout after router push', async () => {\n    await page.nuxt.navigate('/error');\n    expect(await page.$text('header')).toBe('Error layout');\n  });","file":"e2e/split-layouts-error.test.js","skipped":false,"dir":"test"},{"name":"/error has error layout after page load","suites":["split layouts error layout"],"updatePoint":{"line":36,"column":47,"index":1264},"line":36,"code":"  test('/error has error layout after page load', async () => {\n    const localPage = await browser.page(url('/error'));\n    expect(await localPage.$text('header')).toBe('Error layout');\n  });","file":"e2e/split-layouts-error.test.js","skipped":false,"dir":"test"},{"name":"nuxt build","suites":["cli build"],"updatePoint":{"line":4,"column":18,"index":131},"line":4,"code":"  test('nuxt build', async () => {\n    const buildCommand = await commands.default('build');\n    const argv = [__dirname, '--no-force-exit', '-c', 'cli.build.config.js'];\n    const cmd = new NuxtCommand(buildCommand, argv);\n    await expect(cmd.run()).resolves.toBeUndefined();\n    expect(consola.log).toBeCalledWith('Compiled successfully');\n  });","file":"fixtures/cli/cli.build.test.js","skipped":false,"dir":"test"},{"name":"nuxt generate","suites":["cli generate"],"updatePoint":{"line":4,"column":21,"index":137},"line":4,"code":"  test('nuxt generate', async () => {\n    const generateCommand = await commands.default('generate');\n    const argv = [__dirname, '--no-force-exit', '-c', 'cli.gen.config.js'];\n    const cmd = new NuxtCommand(generateCommand, argv);\n    await expect(cmd.run()).resolves.toBeUndefined();\n    expect(consola.log).toBeCalledWith('Generated successfully');\n  });","file":"fixtures/cli/cli.gen.test.js","skipped":false,"dir":"test"},{"name":"should build all resources","suites":["builder: builder build"],"updatePoint":{"line":28,"column":34,"index":969},"line":28,"code":"  test('should build all resources', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.buildDir = '/var/nuxt/build';\n    nuxt.options.dir = {\n      pages: '/var/nuxt/src/pages'\n    };\n    nuxt.options.build.template = {\n      dir: '/var/nuxt/src/template'\n    };\n    nuxt.options.build.createRoutes = jest.fn();\n    nuxt.options.render = {\n      ssr: true\n    };\n    const bundleBuilder = {\n      build: jest.fn()\n    };\n    const builder = new Builder(nuxt, bundleBuilder);\n    builder.validatePages = jest.fn();\n    builder.generateRoutesAndFiles = jest.fn();\n    builder.resolvePlugins = jest.fn();\n    const buildReturn = await builder.build();\n    expect(consola.info).toBeCalledTimes(3);\n    expect(consola.info).toBeCalledWith('Production build');\n    expect(nuxt.ready).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledTimes(3);\n    expect(nuxt.callHook).nthCalledWith(1, 'build:before', builder, nuxt.options.build);\n    expect(nuxt.callHook).nthCalledWith(2, 'builder:prepared', builder, nuxt.options.build);\n    expect(builder.validatePages).toBeCalledTimes(1);\n    expect(consola.success).toBeCalledTimes(1);\n    expect(consola.success).toBeCalledWith('Builder initialized');\n    expect(consola.debug).toBeCalledTimes(1);\n    expect(consola.debug).toBeCalledWith('App root: /var/nuxt/src');\n    expect(fsExtra.emptyDir).toBeCalledTimes(4);\n    expect(fsExtra.emptyDir).nthCalledWith(1, 'r(/var/nuxt/build)');\n    expect(fsExtra.emptyDir).nthCalledWith(2, 'r(/var/nuxt/build, components)');\n    expect(fsExtra.emptyDir).nthCalledWith(3, 'r(/var/nuxt/build, dist, client)');\n    expect(fsExtra.emptyDir).nthCalledWith(4, 'r(/var/nuxt/build, dist, server)');\n    expect(r).toBeCalledTimes(4);\n    expect(r).nthCalledWith(1, '/var/nuxt/build');\n    expect(r).nthCalledWith(2, '/var/nuxt/build', 'components');\n    expect(r).nthCalledWith(3, '/var/nuxt/build', 'dist', 'client');\n    expect(r).nthCalledWith(4, '/var/nuxt/build', 'dist', 'server');\n    expect(builder.generateRoutesAndFiles).toBeCalledTimes(1);\n    expect(nuxt.options.build.watch).toEqual(['/var/nuxt/src/template/**/*.{vue,js}']);\n    expect(builder.resolvePlugins).toBeCalledTimes(1);\n    expect(bundleBuilder.build).toBeCalledTimes(1);\n    expect(builder._buildStatus).toEqual(2);\n    expect(nuxt.callHook).nthCalledWith(3, 'build:done', builder);\n    expect(buildReturn).toBe(builder);\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should prevent duplicate build in dev mode","suites":["builder: builder build"],"updatePoint":{"line":79,"column":50,"index":3418},"line":79,"code":"  test('should prevent duplicate build in dev mode', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder._buildStatus = 3;\n    waitFor.mockImplementationOnce(() => {\n      builder.build = jest.fn(() => 'calling build');\n    });\n    const buildReturn = await builder.build();\n    expect(nuxt.ready).not.toBeCalled();\n    expect(waitFor).toBeCalledTimes(1);\n    expect(waitFor).toBeCalledWith(1000);\n    expect(builder.build).toBeCalledTimes(1);\n    expect(buildReturn).toBe('calling build');\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should wait 1000ms and retry if building is in progress","suites":["builder: builder build"],"updatePoint":{"line":94,"column":63,"index":4016},"line":94,"code":"  test('should wait 1000ms and retry if building is in progress', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder._buildStatus = 2;\n    const buildReturn = await builder.build();\n    expect(nuxt.ready).not.toBeCalled();\n    expect(buildReturn).toBe(builder);\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should build in dev mode and print dev mode building messages","suites":["builder: builder build"],"updatePoint":{"line":103,"column":69,"index":4379},"line":103,"code":"  test('should build in dev mode and print dev mode building messages', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.buildDir = '/var/nuxt/build';\n    nuxt.options.dir = {\n      pages: '/var/nuxt/src/pages'\n    };\n    nuxt.options.build.createRoutes = jest.fn();\n    nuxt.options.render = {\n      ssr: true\n    };\n    const bundleBuilder = {\n      build: jest.fn()\n    };\n    const builder = new Builder(nuxt, bundleBuilder);\n    builder.validatePages = jest.fn();\n    builder.generateRoutesAndFiles = jest.fn();\n    builder.resolvePlugins = jest.fn();\n    await builder.build();\n    expect(consola.info).toBeCalledTimes(2);\n    expect(consola.info).nthCalledWith(1, 'Preparing project for development');\n    expect(consola.info).nthCalledWith(2, 'Initial build may take a while');\n    expect(fsExtra.emptyDir).toBeCalledTimes(2);\n    expect(fsExtra.emptyDir).nthCalledWith(1, 'r(/var/nuxt/build)');\n    expect(fsExtra.emptyDir).nthCalledWith(2, 'r(/var/nuxt/build, components)');\n    expect(r).toBeCalledTimes(2);\n    expect(r).nthCalledWith(1, '/var/nuxt/build');\n    expect(r).nthCalledWith(2, '/var/nuxt/build', 'components');\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should warn built-in page will be used if no pages dir found","suites":["builder: builder build"],"updatePoint":{"line":133,"column":68,"index":5604},"line":133,"code":"  test('should warn built-in page will be used if no pages dir found', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      pages: '/var/nuxt/src/pages'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fsExtra.exists.mockReturnValue(false);\n    await builder.validatePages();\n    expect(builder._nuxtPages).toEqual(true);\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).nthCalledWith(1, '/var/nuxt/src', '/var/nuxt/src/pages');\n    expect(path.join).toBeCalledTimes(1);\n    expect(path.join).nthCalledWith(1, '/var/nuxt/src', '..', '/var/nuxt/src/pages');\n    expect(fsExtra.exists).toBeCalledTimes(2);\n    expect(fsExtra.exists).nthCalledWith(1, 'resolve(/var/nuxt/src, /var/nuxt/src/pages)');\n    expect(fsExtra.exists).nthCalledWith(2, 'join(/var/nuxt/src, .., /var/nuxt/src/pages)');\n    expect(builder._defaultPage).toEqual(true);\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('No `/var/nuxt/src/pages` directory found in /var/nuxt/src. Using the default built-in page.');\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should throw error if pages is found in parent dir","suites":["builder: builder build"],"updatePoint":{"line":154,"column":58,"index":6721},"line":154,"code":"  test('should throw error if pages is found in parent dir', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      pages: '/var/nuxt/src/pages'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fsExtra.exists.mockReturnValueOnce(false).mockReturnValueOnce(true);\n    await expect(builder.validatePages()).rejects.toThrow('No `/var/nuxt/src/pages` directory found in /var/nuxt/src. Did you mean to run `nuxt` in the parent (`../`) directory?');\n    expect(builder._nuxtPages).toEqual(true);\n    expect(path.resolve).nthCalledWith(1, '/var/nuxt/src', '/var/nuxt/src/pages');\n    expect(path.join).nthCalledWith(1, '/var/nuxt/src', '..', '/var/nuxt/src/pages');\n    expect(fsExtra.exists).toBeCalledTimes(2);\n    expect(fsExtra.exists).nthCalledWith(1, 'resolve(/var/nuxt/src, /var/nuxt/src/pages)');\n    expect(fsExtra.exists).nthCalledWith(2, 'join(/var/nuxt/src, .., /var/nuxt/src/pages)');\n    expect(builder._defaultPage).toBeUndefined();\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should pass validation if createRoutes is function","suites":["builder: builder build"],"updatePoint":{"line":171,"column":58,"index":7748},"line":171,"code":"  test('should pass validation if createRoutes is function', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.createRoutes = jest.fn();\n    const builder = new Builder(nuxt, BundleBuilder);\n    await builder.validatePages();\n    expect(builder._nuxtPages).toEqual(false);\n    expect(fsExtra.exists).not.toBeCalled();\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should pass validation if pages exists","suites":["builder: builder build"],"updatePoint":{"line":179,"column":46,"index":8078},"line":179,"code":"  test('should pass validation if pages exists', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      pages: '/var/nuxt/src/pages'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fsExtra.exists.mockReturnValueOnce(true);\n    await builder.validatePages();\n    expect(builder._nuxtPages).toEqual(true);\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt/src', '/var/nuxt/src/pages');\n    expect(fsExtra.exists).toBeCalledTimes(1);\n    expect(fsExtra.exists).toBeCalledWith('resolve(/var/nuxt/src, /var/nuxt/src/pages)');\n    expect(builder._defaultPage).toBeUndefined();\n  });","file":"builder.build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should get webpack builder by default","suites":["builder: builder common"],"updatePoint":{"line":18,"column":45,"index":565},"line":18,"code":"  test('should get webpack builder by default', () => {\n    const builder = new Builder(createNuxt(), {});\n    const bundleBuilder = builder.getBundleBuilder();\n    expect(BuildContext).toBeCalledTimes(1);\n    expect(BuildContext).toBeCalledWith(builder);\n    expect(BundleBuilder).toBeCalledTimes(1);\n    expect(BundleBuilder).toBeCalledWith({\n      name: 'build_context'\n    });\n    expect(bundleBuilder).toEqual({\n      name: 'webpack_builder'\n    });\n  });","file":"builder.common.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should get custom builder from given constructor","suites":["builder: builder common"],"updatePoint":{"line":31,"column":56,"index":1037},"line":31,"code":"  test('should get custom builder from given constructor', () => {\n    const builder = new Builder(createNuxt(), {});\n    const CustomBundleBuilder = jest.fn(function () {\n      this.name = 'custom_builder';\n    });\n    const bundleBuilder = builder.getBundleBuilder(CustomBundleBuilder);\n    expect(BuildContext).toBeCalledTimes(1);\n    expect(BuildContext).toBeCalledWith(builder);\n    expect(CustomBundleBuilder).toBeCalledTimes(1);\n    expect(CustomBundleBuilder).toBeCalledWith({\n      name: 'build_context'\n    });\n    expect(bundleBuilder).toEqual({\n      name: 'custom_builder'\n    });\n  });","file":"builder.common.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should call bundleBuilder forGenerate","suites":["builder: builder common"],"updatePoint":{"line":47,"column":45,"index":1626},"line":47,"code":"  test('should call bundleBuilder forGenerate', () => {\n    const bundleBuilder = {\n      forGenerate: jest.fn()\n    };\n    const builder = new Builder(createNuxt(), bundleBuilder);\n    builder.forGenerate();\n    expect(bundleBuilder.forGenerate).toBeCalledTimes(1);\n  });","file":"builder.common.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should construct builder","suites":["builder: builder constructor"],"updatePoint":{"line":13,"column":32,"index":448},"line":13,"code":"  test('should construct builder', () => {\n    const nuxt = createNuxt();\n    const bundleBuilder = {};\n    determineGlobals.mockReturnValueOnce('__global');\n    const builder = new Builder(nuxt, bundleBuilder);\n    expect(builder.nuxt).toEqual(nuxt);\n    expect(builder.plugins).toEqual([]);\n    expect(builder.options).toEqual(nuxt.options);\n    expect(determineGlobals).toBeCalledTimes(1);\n    expect(determineGlobals).toBeCalledWith(nuxt.options.globalName, nuxt.options.globals);\n    expect(builder.watchers).toEqual({\n      files: null,\n      custom: null,\n      restart: null\n    });\n    expect(builder.supportedExtensions).toEqual(['vue', 'js']);\n    expect(builder.relativeToBuild).toBeInstanceOf(Function);\n    expect(builder._buildStatus).toEqual(1);\n    expect(builder.template).toBe(VueAppTemplate);\n    expect(builder.bundleBuilder).toBe(bundleBuilder);\n  });","file":"builder.ctor.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should call relativeTo in relativeToBuild","suites":["builder: builder constructor"],"updatePoint":{"line":34,"column":49,"index":1339},"line":34,"code":"  test('should call relativeTo in relativeToBuild', () => {\n    const nuxt = createNuxt();\n    nuxt.options.buildDir = '/var/nuxt/build';\n    const bundleBuilder = {};\n    const builder = new Builder(nuxt, bundleBuilder);\n    const args = [{}, {}];\n    builder.relativeToBuild(...args);\n    expect(relativeTo).toBeCalledTimes(1);\n    expect(relativeTo).toBeCalledWith('/var/nuxt/build', ...args);\n  });","file":"builder.ctor.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should add hooks in dev mode","suites":["builder: builder constructor"],"updatePoint":{"line":44,"column":36,"index":1729},"line":44,"code":"  test('should add hooks in dev mode', () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    const bundleBuilder = {};\n    determineGlobals.mockReturnValueOnce('__global');\n    const builder = new Builder(nuxt, bundleBuilder);\n    expect(builder.options.dev).toEqual(true);\n    expect(nuxt.hook).toBeCalledTimes(2);\n    expect(nuxt.hook).toBeCalledWith('build:done', expect.any(Function));\n    expect(nuxt.hook).toBeCalledWith('close', expect.any(Function));\n    const doneHook = nuxt.hook.mock.calls[0][1];\n    builder.watchClient = jest.fn();\n    builder.watchRestart = jest.fn();\n    doneHook();\n    expect(consola.info).toBeCalledTimes(1);\n    expect(consola.info).toBeCalledWith('Waiting for file changes');\n    expect(builder.watchClient).toBeCalledTimes(1);\n    expect(builder.watchRestart).toBeCalledTimes(1);\n    const closeHook = nuxt.hook.mock.calls[1][1];\n    builder.close = jest.fn();\n    closeHook();\n    expect(builder.close).toBeCalledTimes(1);\n  });","file":"builder.ctor.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should add hooks in analyze mode","suites":["builder: builder constructor"],"updatePoint":{"line":67,"column":40,"index":2719},"line":67,"code":"  test('should add hooks in analyze mode', () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.analyze = true;\n    const bundleBuilder = {};\n    const builder = new Builder(nuxt, bundleBuilder);\n    expect(builder.options.build.analyze).toEqual(true);\n    expect(nuxt.hook).toBeCalledTimes(1);\n    expect(nuxt.hook).toBeCalledWith('build:done', expect.any(Function));\n    const doneHook = nuxt.hook.mock.calls[0][1];\n    doneHook();\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('Notice: Please do not deploy bundles built with \"analyze\" mode, they\\'re for analysis purposes only.');\n  });","file":"builder.ctor.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should support function template","suites":["builder: builder constructor"],"updatePoint":{"line":80,"column":40,"index":3358},"line":80,"code":"  test('should support function template', () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.template = jest.fn();\n    const bundleBuilder = {};\n    const builder = new Builder(nuxt, bundleBuilder);\n    expect(builder.template).toBe(nuxt.options.build.template);\n  });","file":"builder.ctor.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should generate routes and files","suites":["builder: builder generate"],"updatePoint":{"line":44,"column":40,"index":1512},"line":44,"code":"  test('should generate routes and files', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build = {\n      template: {\n        dir: '/var/nuxt/src/template',\n        files: ['App.js', 'index.js']\n      },\n      watch: []\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.normalizePlugins = jest.fn(() => [{\n      name: 'test_plugin',\n      src: '/var/somesrc'\n    }]);\n    builder.resolveLayouts = jest.fn(() => 'resolveLayouts');\n    builder.resolveRoutes = jest.fn(() => 'resolveRoutes');\n    builder.resolveStore = jest.fn(() => 'resolveStore');\n    builder.resolveMiddleware = jest.fn(() => 'resolveMiddleware');\n    builder.addOptionalTemplates = jest.fn();\n    builder.resolveCustomTemplates = jest.fn();\n    builder.resolveLoadingIndicator = jest.fn();\n    builder.compileTemplates = jest.fn();\n    jest.spyOn(Promise, 'all').mockImplementation(() => {});\n    await builder.generateRoutesAndFiles();\n    expect(consola.debug).toBeCalledTimes(1);\n    expect(consola.debug).toBeCalledWith('Generating nuxt files');\n    expect(TemplateContext).toBeCalledTimes(1);\n    expect(TemplateContext).toBeCalledWith(builder, builder.options);\n    expect(builder.normalizePlugins).toBeCalledTimes(1);\n    expect(builder.resolveLayouts).toBeCalledTimes(1);\n    expect(builder.resolveRoutes).toBeCalledTimes(1);\n    expect(builder.resolveStore).toBeCalledTimes(1);\n    expect(builder.resolveMiddleware).toBeCalledTimes(1);\n    expect(Promise.all).toBeCalledTimes(1);\n    expect(Promise.all).toBeCalledWith(['resolveLayouts', 'resolveRoutes', 'resolveStore', 'resolveMiddleware']);\n    expect(builder.addOptionalTemplates).toBeCalledTimes(1);\n    expect(builder.resolveCustomTemplates).toBeCalledTimes(1);\n    expect(builder.resolveLoadingIndicator).toBeCalledTimes(1);\n    expect(builder.options.build.watch).toEqual([]);\n    expect(builder.compileTemplates).toBeCalledTimes(1);\n    expect(consola.success).toBeCalledTimes(1);\n    expect(consola.success).toBeCalledWith('Nuxt files generated');\n    Promise.all.mockRestore();\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve files","suites":["builder: builder generate"],"updatePoint":{"line":88,"column":28,"index":3561},"line":88,"code":"  test('should resolve files', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.ignore = '/var/nuxt/ignore';\n    const builder = new Builder(nuxt, BundleBuilder);\n    Glob.mockReturnValue('matched files');\n    const files = await builder.resolveFiles('/var/nuxt/dir');\n    expect(Glob).toBeCalledTimes(1);\n    expect(Glob).toBeCalledWith('/var/nuxt/dir/**/*.{vue,js}', {\n      cwd: '/var/nuxt/src'\n    });\n    expect(builder.ignore.filter).toBeCalledTimes(1);\n    expect(builder.ignore.filter).toBeCalledWith('matched files');\n    expect(files).toEqual('matched files');\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve relative files","suites":["builder: builder generate"],"updatePoint":{"line":103,"column":37,"index":4203},"line":103,"code":"  test('should resolve relative files', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.resolveFiles = jest.fn(dir => [`${dir}/foo.vue`, `${dir}/bar.vue`, `${dir}/baz.vue`]);\n    const files = await builder.resolveRelative('/var/nuxt/dir');\n    expect(builder.resolveFiles).toBeCalledTimes(1);\n    expect(builder.resolveFiles).toBeCalledWith('/var/nuxt/dir');\n    expect(files).toEqual([{\n      src: 'foo.vue'\n    }, {\n      src: 'bar.vue'\n    }, {\n      src: 'baz.vue'\n    }]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve store modules","suites":["builder: builder generate"],"updatePoint":{"line":118,"column":36,"index":4750},"line":118,"code":"  test('should resolve store modules', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.features = {\n      store: true\n    };\n    nuxt.options.store = true;\n    nuxt.options.dir = {\n      store: '/var/nuxt/src/store'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.resolveRelative = jest.fn(dir => [{\n      src: `${dir}/index.js`\n    }, {\n      src: `${dir}/bar.js`\n    }, {\n      src: `${dir}/baz.js`\n    }, {\n      src: `${dir}/foo/bar.js`\n    }, {\n      src: `${dir}/foo/baz.js`\n    }, {\n      src: `${dir}/foo/index.js`\n    }]);\n    const templateVars = {};\n    const templateFiles = [];\n    await builder.resolveStore({\n      templateVars,\n      templateFiles\n    });\n    expect(templateVars.storeModules).toEqual([{\n      src: '/var/nuxt/src/store/index.js'\n    }, {\n      src: '/var/nuxt/src/store/bar.js'\n    }, {\n      src: '/var/nuxt/src/store/baz.js'\n    }, {\n      src: '/var/nuxt/src/store/foo/index.js'\n    }, {\n      src: '/var/nuxt/src/store/foo/bar.js'\n    }, {\n      src: '/var/nuxt/src/store/foo/baz.js'\n    }]);\n    expect(templateFiles).toEqual(['store.js']);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should disable store resolving when not set","suites":["builder: builder generate"],"updatePoint":{"line":162,"column":51,"index":5890},"line":162,"code":"  test('should disable store resolving when not set', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.features = {\n      store: false\n    };\n    nuxt.options.dir = {\n      store: '/var/nuxt/src/store'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    const templateVars = {};\n    const templateFiles = [];\n    await builder.resolveStore({\n      templateVars,\n      templateFiles\n    });\n    expect(templateVars.storeModules).toBeUndefined();\n    expect(templateFiles).toEqual([]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should disable store resolving when feature disabled","suites":["builder: builder generate"],"updatePoint":{"line":180,"column":60,"index":6415},"line":180,"code":"  test('should disable store resolving when feature disabled', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.features = {\n      store: false\n    };\n    nuxt.options.store = true;\n    nuxt.options.dir = {\n      store: '/var/nuxt/src/store'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    const templateVars = {};\n    const templateFiles = [];\n    await builder.resolveStore({\n      templateVars,\n      templateFiles\n    });\n    expect(templateVars.storeModules).toBeUndefined();\n    expect(templateFiles).toEqual([]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve middleware","suites":["builder: builder generate"],"updatePoint":{"line":199,"column":33,"index":6944},"line":199,"code":"  test('should resolve middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.features = {\n      middleware: true\n    };\n    nuxt.options.store = false;\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      middleware: 'middleware'\n    };\n    const middlewarePath = 'subfolder/midd.js';\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.resolveRelative = jest.fn(dir => [{\n      src: middlewarePath\n    }]);\n    builder.relativeToBuild = jest.fn().mockReturnValue(middlewarePath);\n    const templateVars = {};\n    const templateFiles = [];\n    await builder.resolveMiddleware({\n      templateVars,\n      templateFiles\n    });\n    expect(templateVars.middleware).toEqual([{\n      name: 'subfolder/midd',\n      src: 'subfolder/midd.js',\n      dst: 'subfolder/midd.js'\n    }]);\n    expect(templateFiles).toEqual(['middleware.js']);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should disable middleware when feature disabled","suites":["builder: builder generate"],"updatePoint":{"line":228,"column":55,"index":7857},"line":228,"code":"  test('should disable middleware when feature disabled', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.features = {\n      middleware: false\n    };\n    nuxt.options.store = false;\n    nuxt.options.dir = {\n      middleware: '/var/nuxt/src/middleware'\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    const templateVars = {};\n    const templateFiles = [];\n    await builder.resolveMiddleware({\n      templateVars,\n      templateFiles\n    });\n    expect(templateFiles).toEqual([]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should custom templates","suites":["builder: builder generate"],"updatePoint":{"line":246,"column":31,"index":8350},"line":246,"code":"  test('should custom templates', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.build = {\n      watch: [],\n      template: {\n        dir: '/var/nuxt/templates'\n      },\n      templates: ['/var/nuxt/templates/foo.js', {\n        src: '/var/nuxt/templates/bar.js'\n      }, {\n        src: '/var/nuxt/templates/baz.js',\n        dst: 'baz.js'\n      }]\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fs.exists.mockReturnValueOnce(true);\n    const templateContext = {\n      templateFiles: ['foo.js', 'bar.js', 'baz.js', 'router.js', 'store.js', 'middleware.js']\n    };\n    await builder.resolveCustomTemplates(templateContext);\n    expect(templateContext.templateFiles).toEqual([{\n      custom: true,\n      dst: 'foo.js',\n      src: '/var/nuxt/src/app/foo.js',\n      options: {}\n    }, {\n      custom: true,\n      dst: 'bar.js',\n      src: '/var/nuxt/templates/bar.js',\n      options: {}\n    }, {\n      custom: true,\n      dst: 'baz.js',\n      src: '/var/nuxt/templates/baz.js',\n      options: {}\n    }, {\n      custom: false,\n      dst: 'router.js',\n      src: 'r(/var/nuxt/templates, router.js)',\n      options: {}\n    }, {\n      custom: false,\n      dst: 'store.js',\n      src: 'r(/var/nuxt/templates, store.js)',\n      options: {}\n    }, {\n      custom: false,\n      dst: 'middleware.js',\n      src: 'r(/var/nuxt/templates, middleware.js)',\n      options: {}\n    }]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve loading indicator","suites":["builder: builder generate"],"updatePoint":{"line":299,"column":40,"index":9806},"line":299,"code":"  test('should resolve loading indicator', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.loadingIndicator = {\n      name: 'test_loading_indicator'\n    };\n    nuxt.options.build = {\n      watch: [],\n      template: {\n        dir: '/var/nuxt/templates'\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fs.exists.mockReturnValueOnce(true);\n    const templateFiles = [];\n    await builder.resolveLoadingIndicator({\n      templateFiles\n    });\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt/templates', 'views/loading', 'test_loading_indicator.html');\n    expect(fs.exists).toBeCalledTimes(1);\n    expect(fs.exists).toBeCalledWith('/var/nuxt/templates/views/loading/test_loading_indicator.html');\n    expect(templateFiles).toEqual([{\n      custom: false,\n      dst: 'loading.html',\n      options: {\n        name: 'test_loading_indicator'\n      },\n      src: '/var/nuxt/templates/views/loading/test_loading_indicator.html'\n    }]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve alias loading indicator","suites":["builder: builder generate"],"updatePoint":{"line":329,"column":46,"index":10833},"line":329,"code":"  test('should resolve alias loading indicator', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.loadingIndicator = {\n      name: '@/app/template.vue'\n    };\n    nuxt.options.build = {\n      watch: [],\n      template: {\n        dir: '/var/nuxt/templates'\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fs.exists.mockReturnValueOnce(false).mockReturnValueOnce(true);\n    const templateFiles = [];\n    await builder.resolveLoadingIndicator({\n      templateFiles\n    });\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt/templates', 'views/loading', '@/app/template.vue.html');\n    expect(fs.exists).toBeCalledTimes(2);\n    expect(fs.exists).nthCalledWith(1, '/var/nuxt/templates/views/loading/@/app/template.vue.html');\n    expect(fs.exists).nthCalledWith(2, 'resolveAlias(@/app/template.vue)');\n    expect(templateFiles).toEqual([{\n      custom: true,\n      dst: 'loading.html',\n      options: {\n        name: '@/app/template.vue'\n      },\n      src: 'resolveAlias(@/app/template.vue)'\n    }]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should display error if three is not loading indicator","suites":["builder: builder generate"],"updatePoint":{"line":360,"column":62,"index":11935},"line":360,"code":"  test('should display error if three is not loading indicator', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.loadingIndicator = {\n      name: '@/app/empty.vue'\n    };\n    nuxt.options.build = {\n      watch: [],\n      template: {\n        dir: '/var/nuxt/templates'\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    fs.exists.mockReturnValueOnce(false).mockReturnValueOnce(false);\n    const templateFiles = [];\n    await builder.resolveLoadingIndicator({\n      templateFiles\n    });\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt/templates', 'views/loading', '@/app/empty.vue.html');\n    expect(fs.exists).toBeCalledTimes(2);\n    expect(fs.exists).nthCalledWith(1, '/var/nuxt/templates/views/loading/@/app/empty.vue.html');\n    expect(fs.exists).nthCalledWith(2, 'resolveAlias(@/app/empty.vue)');\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('Could not fetch loading indicator: @/app/empty.vue');\n    expect(templateFiles).toEqual([]);\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should disable loading indicator","suites":["builder: builder generate"],"updatePoint":{"line":386,"column":40,"index":12985},"line":386,"code":"  test('should disable loading indicator', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.loadingIndicator = {\n      name: false\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    await builder.resolveLoadingIndicator({\n      templateFiles: []\n    });\n    expect(path.resolve).not.toBeCalled();\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should compile templates","suites":["builder: builder generate"],"updatePoint":{"line":397,"column":32,"index":13307},"line":397,"code":"  test('should compile templates', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.watch = [];\n    nuxt.options.buildDir = '/var/nuxt/build';\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.relativeToBuild = jest.fn();\n    const templateFn = jest.fn(() => 'compiled content');\n    lodash.template.mockImplementation(() => templateFn);\n    stripWhitespace.mockImplementation(content => `trim(${content})`);\n    const templateContext = {\n      templateVars: {\n        test: 'template_vars'\n      },\n      templateFiles: [{\n        src: '/var/nuxt/src/foo.js',\n        dst: 'foo.js',\n        options: {\n          foo: true\n        }\n      }, {\n        src: '/var/nuxt/src/bar.js',\n        dst: 'bar.js',\n        options: {\n          bar: true\n        }\n      }, {\n        src: '/var/nuxt/src/baz.js',\n        dst: 'baz.js',\n        custom: true\n      }],\n      templateOptions: {}\n    };\n    await builder.compileTemplates(templateContext);\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('build:templates', {\n      templateVars: templateContext.templateVars,\n      templatesFiles: templateContext.templateFiles,\n      resolve: r\n    });\n    expect(templateContext.templateOptions.imports).toEqual({\n      resolvePath: nuxt.resolver.resolvePath,\n      resolveAlias: nuxt.resolver.resolveAlias,\n      relativeToBuild: builder.relativeToBuild\n    });\n    expect(nuxt.options.build.watch).toEqual(['/var/nuxt/src/baz.js']);\n    expect(fs.readFile).toBeCalledTimes(3);\n    expect(fs.readFile).nthCalledWith(1, '/var/nuxt/src/foo.js', 'utf8');\n    expect(fs.readFile).nthCalledWith(2, '/var/nuxt/src/bar.js', 'utf8');\n    expect(fs.readFile).nthCalledWith(3, '/var/nuxt/src/baz.js', 'utf8');\n    expect(lodash.template).toBeCalledTimes(3);\n    expect(lodash.template).nthCalledWith(1, 'readFile(/var/nuxt/src/foo.js, utf8)', templateContext.templateOptions);\n    expect(lodash.template).nthCalledWith(2, 'readFile(/var/nuxt/src/bar.js, utf8)', templateContext.templateOptions);\n    expect(lodash.template).nthCalledWith(3, 'readFile(/var/nuxt/src/baz.js, utf8)', templateContext.templateOptions);\n    expect(templateFn).toBeCalledTimes(3);\n    expect(templateFn).nthCalledWith(1, { ...templateContext.templateVars,\n      custom: undefined,\n      dst: 'foo.js',\n      src: '/var/nuxt/src/foo.js',\n      options: {\n        foo: true\n      }\n    });\n    expect(templateFn).nthCalledWith(2, { ...templateContext.templateVars,\n      custom: undefined,\n      dst: 'bar.js',\n      src: '/var/nuxt/src/bar.js',\n      options: {\n        bar: true\n      }\n    });\n    expect(templateFn).nthCalledWith(3, { ...templateContext.templateVars,\n      custom: true,\n      dst: 'baz.js',\n      src: '/var/nuxt/src/baz.js'\n    });\n    expect(stripWhitespace).toBeCalledTimes(3);\n    expect(stripWhitespace).nthCalledWith(1, 'compiled content');\n    expect(stripWhitespace).nthCalledWith(2, 'compiled content');\n    expect(stripWhitespace).nthCalledWith(3, 'compiled content');\n    expect(fs.outputFile).toBeCalledTimes(3);\n    expect(fs.outputFile).nthCalledWith(1, 'r(/var/nuxt/build, foo.js)', 'trim(compiled content)', 'utf8');\n    expect(fs.outputFile).nthCalledWith(2, 'r(/var/nuxt/build, bar.js)', 'trim(compiled content)', 'utf8');\n    expect(fs.outputFile).nthCalledWith(3, 'r(/var/nuxt/build, baz.js)', 'trim(compiled content)', 'utf8');\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should throw error if compile failed","suites":["builder: builder generate"],"updatePoint":{"line":481,"column":44,"index":16722},"line":481,"code":"  test('should throw error if compile failed', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.relativeToBuild = jest.fn();\n    lodash.template.mockImplementation(() => {\n      throw new Error('compile failed');\n    });\n    const templateContext = {\n      templateVars: {\n        test: 'template_vars'\n      },\n      templateFiles: [{\n        src: '/var/nuxt/src/foo.js'\n      }],\n      templateOptions: {}\n    };\n    await expect(builder.compileTemplates(templateContext)).rejects.toThrow('Could not compile template /var/nuxt/src/foo.js: compile failed');\n  });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve layouts","suites":["builder: builder generate","builder: builder resolveLayouts"],"updatePoint":{"line":500,"column":32,"index":17391},"line":500,"code":"    test('should resolve layouts', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.features = {\n        layouts: true\n      };\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.buildDir = '/var/nuxt/build';\n      nuxt.options.dir = {\n        layouts: '/var/nuxt/src/layouts'\n      };\n      nuxt.options.layouts = {\n        foo: '/var/nuxt/layouts/foo/index.vue'\n      };\n      const builder = new Builder(nuxt, BundleBuilder);\n      builder.resolveFiles = jest.fn(layouts => [`${layouts}/foo.vue`, `${layouts}/bar.js`, `${layouts}/baz.vue`, `${layouts}/error.vue`]);\n      builder.relativeToBuild = jest.fn((...args) => `relativeBuild(${args.join(', ')})`);\n      fs.exists.mockReturnValueOnce(true);\n      const templateVars = {\n        components: {},\n        layouts: {\n          bar: '/var/nuxt/layouts/bar/index.vue'\n        }\n      };\n      const templateFiles = [];\n      await builder.resolveLayouts({\n        templateVars,\n        templateFiles\n      });\n      expect(path.resolve).toBeCalledTimes(1);\n      expect(path.resolve).toBeCalledWith('/var/nuxt/src', '/var/nuxt/src/layouts');\n      expect(fs.exists).toBeCalledTimes(1);\n      expect(fs.exists).toBeCalledWith('/var/nuxt/src/layouts');\n      expect(builder.resolveFiles).toBeCalledTimes(1);\n      expect(builder.resolveFiles).toBeCalledWith('/var/nuxt/src/layouts');\n      expect(builder.relativeToBuild).toBeCalledTimes(2);\n      expect(builder.relativeToBuild).nthCalledWith(1, '/var/nuxt/src', '/var/nuxt/src/layouts/baz.vue');\n      expect(builder.relativeToBuild).nthCalledWith(2, '/var/nuxt/src', '/var/nuxt/src/layouts/error.vue');\n      expect(templateVars.components.ErrorPage).toEqual('relativeBuild(/var/nuxt/src, /var/nuxt/src/layouts/error.vue)');\n      expect(consola.warn).toBeCalledTimes(1);\n      expect(consola.warn).toBeCalledWith('Duplicate layout registration, \"foo\" has been registered as \"/var/nuxt/layouts/foo/index.vue\"');\n      expect(templateVars.layouts).toEqual({\n        bar: '/var/nuxt/layouts/bar/index.vue',\n        baz: 'relativeBuild(/var/nuxt/src, /var/nuxt/src/layouts/baz.vue)',\n        default: './layouts/default.vue'\n      });\n      expect(fs.mkdirp).toBeCalledTimes(1);\n      expect(fs.mkdirp).toBeCalledWith('r(/var/nuxt/build, layouts)');\n      expect(templateFiles).toEqual(['layouts/default.vue']);\n      expect(templateVars.layouts.default).toEqual('./layouts/default.vue');\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve error layouts","suites":["builder: builder generate","builder: builder resolveLayouts"],"updatePoint":{"line":550,"column":38,"index":19828},"line":550,"code":"    test('should resolve error layouts', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.features = {\n        layouts: true\n      };\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.dir = {\n        layouts: '/var/nuxt/src/layouts'\n      };\n      const builder = new Builder(nuxt, BundleBuilder);\n      builder.resolveFiles = jest.fn(layouts => [`${layouts}/error.vue`]);\n      builder.relativeToBuild = jest.fn((...args) => `relativeBuild(${args.join(', ')})`);\n      fs.exists.mockReturnValueOnce(true);\n      const templateVars = {\n        components: {\n          ErrorPage: '/var/nuxt/components/error.vue'\n        },\n        layouts: {\n          default: '/var/nuxt/layouts/default.vue'\n        }\n      };\n      await builder.resolveLayouts({\n        templateVars\n      });\n      expect(builder.relativeToBuild).not.toBeCalled();\n      expect(templateVars.components.ErrorPage).toEqual('/var/nuxt/components/error.vue');\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should not resolve layouts if layouts dir does not exist","suites":["builder: builder generate","builder: builder resolveLayouts"],"updatePoint":{"line":577,"column":66,"index":20822},"line":577,"code":"    test('should not resolve layouts if layouts dir does not exist', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.features = {\n        layouts: true\n      };\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.dir = {\n        layouts: '/var/nuxt/src/layouts'\n      };\n      const builder = new Builder(nuxt, BundleBuilder);\n      builder.resolveFiles = jest.fn();\n      fs.exists.mockReturnValueOnce(false);\n      const templateVars = {\n        layouts: {\n          default: '/var/nuxt/layouts/default.vue'\n        }\n      };\n      await builder.resolveLayouts({\n        templateVars\n      });\n      expect(path.resolve).toBeCalledTimes(1);\n      expect(path.resolve).toBeCalledWith('/var/nuxt/src', '/var/nuxt/src/layouts');\n      expect(fs.exists).toBeCalledTimes(1);\n      expect(fs.exists).toBeCalledWith('/var/nuxt/src/layouts');\n      expect(builder.resolveFiles).not.toBeCalled();\n      expect(fs.mkdirp).not.toBeCalled();\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve routes via build.createRoutes","suites":["builder: builder generate","builder: builder resolveRoutes"],"updatePoint":{"line":606,"column":54,"index":21840},"line":606,"code":"    test('should resolve routes via build.createRoutes', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.build.createRoutes = jest.fn(() => [{\n        name: 'default_route'\n      }]);\n      nuxt.options.router.extendRoutes = jest.fn(routes => [...routes, {\n        name: 'extend_route'\n      }]);\n      const builder = new Builder(nuxt, BundleBuilder);\n      const templateVars = {\n        router: {\n          routes: []\n        }\n      };\n      await builder.resolveRoutes({\n        templateVars\n      });\n      expect(consola.debug).toBeCalledTimes(1);\n      expect(consola.debug).toBeCalledWith('Generating routes...');\n      expect(nuxt.options.build.createRoutes).toBeCalledTimes(1);\n      expect(nuxt.options.build.createRoutes).toBeCalledWith('/var/nuxt/src');\n      expect(nuxt.callHook).toBeCalledTimes(1);\n      expect(nuxt.callHook).toBeCalledWith('build:extendRoutes', [{\n        name: 'default_route'\n      }], r);\n      expect(nuxt.options.router.extendRoutes).toBeCalledTimes(1);\n      expect(nuxt.options.router.extendRoutes).toBeCalledWith([{\n        name: 'default_route'\n      }], r);\n      expect(templateVars.router.routes).toEqual([{\n        name: 'default_route'\n      }, {\n        name: 'extend_route'\n      }]);\n      expect(builder.routes).toEqual(templateVars.router.routes);\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve routes from default pages dir","suites":["builder: builder generate","builder: builder resolveRoutes"],"updatePoint":{"line":643,"column":54,"index":23214},"line":643,"code":"    test('should resolve routes from default pages dir', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.build = {\n        watch: [],\n        createRoutes: jest.fn(),\n        template: {\n          dir: '/var/nuxt/templates'\n        }\n      };\n      nuxt.options.router.routeNameSplitter = '[splitter]';\n      createRoutes.mockReturnValueOnce([{\n        name: 'default_route'\n      }]);\n      const builder = new Builder(nuxt, BundleBuilder);\n      builder._defaultPage = true;\n      const templateVars = {\n        router: {\n          routes: []\n        }\n      };\n      await builder.resolveRoutes({\n        templateVars\n      });\n      expect(consola.debug).toBeCalledTimes(1);\n      expect(consola.debug).toBeCalledWith('Generating routes...');\n      expect(nuxt.options.build.createRoutes).not.toBeCalled();\n      expect(createRoutes).toBeCalledTimes(1);\n      expect(createRoutes).toBeCalledWith({\n        files: ['index.vue'],\n        srcDir: '/var/nuxt/templates/pages',\n        routeNameSplitter: '[splitter]'\n      });\n      expect(nuxt.callHook).toBeCalledTimes(1);\n      expect(nuxt.callHook).toBeCalledWith('build:extendRoutes', [{\n        name: 'default_route'\n      }], r);\n      expect(templateVars.router.routes).toEqual([{\n        name: 'default_route'\n      }]);\n      expect(builder.routes).toEqual(templateVars.router.routes);\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve routes from dir.pages","suites":["builder: builder generate","builder: builder resolveRoutes"],"updatePoint":{"line":685,"column":46,"index":24623},"line":685,"code":"    test('should resolve routes from dir.pages', async () => {\n      const nuxt = createNuxt();\n      nuxt.options.srcDir = '/var/nuxt/src';\n      nuxt.options.dir = {\n        pages: '/var/nuxt/pages'\n      };\n      nuxt.options.build = {\n        watch: [],\n        createRoutes: jest.fn()\n      };\n      nuxt.options.router = {\n        routeNameSplitter: '[splitter]',\n        extendRoutes: jest.fn()\n      };\n      createRoutes.mockImplementationOnce(({\n        files\n      }) => files.map(file => ({\n        path: file\n      })));\n      const builder = new Builder(nuxt, BundleBuilder);\n      builder._nuxtPages = true;\n      builder.resolveFiles = jest.fn(dir => [`${dir}/foo.js`, `${dir}/bar.vue`, `${dir}/baz.vue`, `${dir}/foo.vue`, `${dir}/bar.js`]);\n      const templateVars = {\n        router: {\n          routes: []\n        }\n      };\n      await builder.resolveRoutes({\n        templateVars\n      });\n      expect(consola.debug).toBeCalledTimes(1);\n      expect(consola.debug).toBeCalledWith('Generating routes...');\n      expect(nuxt.options.build.createRoutes).not.toBeCalled();\n      expect(builder.resolveFiles).toBeCalledTimes(1);\n      expect(builder.resolveFiles).toBeCalledWith('/var/nuxt/pages');\n      expect(createRoutes).toBeCalledTimes(1);\n      expect(createRoutes).toBeCalledWith({\n        files: ['/var/nuxt/pages/foo.vue', '/var/nuxt/pages/bar.vue', '/var/nuxt/pages/baz.vue'],\n        srcDir: '/var/nuxt/src',\n        pagesDir: '/var/nuxt/pages',\n        routeNameSplitter: '[splitter]',\n        supportedExtensions: ['vue', 'js']\n      });\n      expect(nuxt.callHook).toBeCalledTimes(1);\n      expect(nuxt.callHook).toBeCalledWith('build:extendRoutes', [{\n        path: '/var/nuxt/pages/foo.vue'\n      }, {\n        path: '/var/nuxt/pages/bar.vue'\n      }, {\n        path: '/var/nuxt/pages/baz.vue'\n      }], r);\n      expect(templateVars.router.routes).toEqual([{\n        path: '/var/nuxt/pages/foo.vue'\n      }, {\n        path: '/var/nuxt/pages/bar.vue'\n      }, {\n        path: '/var/nuxt/pages/baz.vue'\n      }]);\n      expect(builder.routes).toEqual(templateVars.router.routes);\n    });","file":"builder.generate.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should normalize plugins","suites":["builder: builder plugins"],"updatePoint":{"line":17,"column":32,"index":554},"line":17,"code":"  test('should normalize plugins', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.plugins = ['/var/nuxt/plugins/test.js', '/var/nuxt/.nuxt/foo-bar.plugin.client.530b6c6a.js', {\n      src: '/var/nuxt/plugins/test.server',\n      mode: 'server'\n    }, {\n      src: '/var/nuxt/plugins/test.client',\n      ssr: false\n    }];\n    const builder = new Builder(nuxt, BundleBuilder);\n    const plugins = await builder.normalizePlugins();\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('builder:extendPlugins', nuxt.options.plugins);\n    expect(plugins).toEqual([{\n      mode: 'all',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.js)',\n      src: 'resolveAlias(/var/nuxt/plugins/test.js)'\n    }, {\n      mode: 'client',\n      name: 'nuxt_plugin_foobarpluginclient530b6c6a_hash(/var/nuxt/.nuxt/foo-bar.plugin.client.530b6c6a.js)',\n      src: 'resolveAlias(/var/nuxt/.nuxt/foo-bar.plugin.client.530b6c6a.js)'\n    }, {\n      mode: 'server',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.server)',\n      src: 'resolveAlias(/var/nuxt/plugins/test.server)'\n    }, {\n      mode: 'client',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.client)',\n      src: 'resolveAlias(/var/nuxt/plugins/test.client)'\n    }]);\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should overwrite plugins from options","suites":["builder: builder plugins"],"updatePoint":{"line":48,"column":45,"index":1857},"line":48,"code":"  test('should overwrite plugins from options', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.plugins = ['/var/nuxt/plugins/foo-bar.js'];\n    nuxt.options.extendPlugins = jest.fn().mockReturnValue(['/var/nuxt/plugins/fizz-fuzz.js']);\n    const builder = new Builder(nuxt, BundleBuilder);\n    const plugins = await builder.normalizePlugins();\n    expect(nuxt.options.extendPlugins).toHaveBeenCalledTimes(1);\n    expect(nuxt.options.extendPlugins).toHaveBeenCalledWith(['/var/nuxt/plugins/foo-bar.js']);\n    expect(plugins).toEqual([{\n      mode: 'all',\n      name: 'nuxt_plugin_fizzfuzz_hash(/var/nuxt/plugins/fizz-fuzz.js)',\n      src: 'resolveAlias(/var/nuxt/plugins/fizz-fuzz.js)'\n    }]);\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should warning and fallback invalid mode when normalize plugins","suites":["builder: builder plugins"],"updatePoint":{"line":62,"column":71,"index":2597},"line":62,"code":"  test('should warning and fallback invalid mode when normalize plugins', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.plugins = [{\n      src: '/var/nuxt/plugins/test',\n      mode: 'abc'\n    }];\n    const builder = new Builder(nuxt, BundleBuilder);\n    const plugins = await builder.normalizePlugins();\n    expect(plugins).toEqual([{\n      mode: 'all',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test)',\n      src: 'resolveAlias(/var/nuxt/plugins/test)'\n    }]);\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('Invalid plugin mode (server/client/all): \\'abc\\'. Falling back to \\'all\\'');\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should resolve plugins","suites":["builder: builder plugins"],"updatePoint":{"line":78,"column":30,"index":3215},"line":78,"code":"  test('should resolve plugins', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.plugins = [{\n      src: '/var/nuxt/plugins/test.js',\n      mode: 'all'\n    }, {\n      src: '/var/nuxt/plugins/test.client',\n      mode: 'client'\n    }, {\n      src: '/var/nuxt/plugins/test.server',\n      mode: 'server'\n    }];\n    builder.relativeToBuild = jest.fn(src => `relative(${src})`);\n\n    for (let step = 0; step < builder.plugins.length; step++) {\n      Glob.mockImplementationOnce(src => [`${src.replace(/\\{.*\\}/, '')}.js`]);\n    }\n\n    await builder.resolvePlugins();\n    expect(Glob).toBeCalledTimes(3);\n    expect(Glob).nthCalledWith(1, '/var/nuxt/plugins/test.js{?(.+([^.])),/index.+([^.])}');\n    expect(Glob).nthCalledWith(2, '/var/nuxt/plugins/test.client{?(.+([^.])),/index.+([^.])}');\n    expect(Glob).nthCalledWith(3, '/var/nuxt/plugins/test.server{?(.+([^.])),/index.+([^.])}');\n    expect(builder.plugins).toEqual([{\n      mode: 'all',\n      src: 'relative(/var/nuxt/plugins/test.js)'\n    }, {\n      mode: 'client',\n      src: 'relative(/var/nuxt/plugins/test.client)'\n    }, {\n      mode: 'server',\n      src: 'relative(/var/nuxt/plugins/test.server)'\n    }]);\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should throw error if plugin no existed","suites":["builder: builder plugins"],"updatePoint":{"line":113,"column":47,"index":4467},"line":113,"code":"  test('should throw error if plugin no existed', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.plugins = [{\n      src: '/var/nuxt/plugins/test.js',\n      mode: 'all'\n    }];\n    Glob.mockImplementationOnce(() => []);\n    await expect(builder.resolvePlugins()).rejects.toThrow('Plugin not found: /var/nuxt/plugins/test.js');\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should warn if there are multiple files and not index","suites":["builder: builder plugins"],"updatePoint":{"line":123,"column":61,"index":4877},"line":123,"code":"  test('should warn if there are multiple files and not index', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.plugins = [{\n      src: '/var/nuxt/plugins/test',\n      mode: 'all'\n    }];\n    builder.relativeToBuild = jest.fn(src => `relative(${src})`);\n    Glob.mockImplementationOnce(src => [`${src}.js`]);\n    isIndexFileAndFolder.mockReturnValueOnce(false);\n    await builder.resolvePlugins();\n    expect(builder.plugins).toEqual([{\n      mode: 'all',\n      src: 'relative(/var/nuxt/plugins/test)'\n    }]);\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should detect plugin mode for client/server plugins","suites":["builder: builder plugins"],"updatePoint":{"line":139,"column":59,"index":5455},"line":139,"code":"  test('should detect plugin mode for client/server plugins', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.options.plugins = [{\n      src: '/var/nuxt/plugins/test.js',\n      mode: 'all'\n    }, {\n      src: '/var/nuxt/plugins/test.client'\n    }, {\n      src: '/var/nuxt/plugins/test.server'\n    }];\n    const plugins = await builder.normalizePlugins();\n    expect(plugins).toEqual([{\n      mode: 'all',\n      src: 'resolveAlias(/var/nuxt/plugins/test.js)',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.js)'\n    }, {\n      mode: 'client',\n      src: 'resolveAlias(/var/nuxt/plugins/test.client)',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.client)'\n    }, {\n      mode: 'server',\n      src: 'resolveAlias(/var/nuxt/plugins/test.server)',\n      name: 'nuxt_plugin_test_hash(/var/nuxt/plugins/test.server)'\n    }]);\n  });","file":"builder.plugin.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should watch client files","suites":["builder: builder watch"],"updatePoint":{"line":27,"column":33,"index":826},"line":27,"code":"  test('should watch client files', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = [];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.createFileWatcher = jest.fn();\n    builder.assignWatcher = jest.fn(() => () => {});\n    r.mockImplementation((dir, src) => src);\n    builder.watchClient();\n    const patterns = ['/var/nuxt/src/layouts', '/var/nuxt/src/middleware'];\n    const globbedPatterns = ['/var/nuxt/src/layouts/**/*.{vue,js}', '/var/nuxt/src/middleware/**/*.{vue,js}'];\n    expect(r).toBeCalledTimes(2);\n    expect(r).nthCalledWith(1, '/var/nuxt/src', patterns[0]);\n    expect(r).nthCalledWith(2, '/var/nuxt/src', patterns[1]);\n    expect(upath.normalizeSafe).toBeCalledTimes(2);\n    expect(upath.normalizeSafe).nthCalledWith(1, globbedPatterns[0], 0, patterns);\n    expect(upath.normalizeSafe).nthCalledWith(2, globbedPatterns[1], 1, patterns);\n    expect(builder.createFileWatcher).toBeCalledTimes(1);\n    expect(builder.createFileWatcher).toBeCalledWith(globbedPatterns, ['add', 'unlink'], expect.any(Function), expect.any(Function));\n    expect(builder.assignWatcher).toBeCalledTimes(1);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should watch store files","suites":["builder: builder watch"],"updatePoint":{"line":54,"column":32,"index":2204},"line":54,"code":"  test('should watch store files', () => {\n    const nuxt = createNuxt();\n    nuxt.options.store = true;\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = [];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.createFileWatcher = jest.fn();\n    builder.assignWatcher = jest.fn(() => () => {});\n    r.mockImplementation((dir, src) => src);\n    builder.watchClient();\n    expect(r).toBeCalledTimes(3);\n    expect(r).nthCalledWith(3, '/var/nuxt/src', '/var/nuxt/src/store');\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should NOT watch pages files on client if _defaultPage=true","suites":["builder: builder watch"],"updatePoint":{"line":73,"column":67,"index":2945},"line":73,"code":"  test('should NOT watch pages files on client if _defaultPage=true', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = [];\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder._nuxtPages = true;\n    builder._defaultPage = true;\n    r.mockImplementation((dir, src) => src);\n    builder.watchClient();\n    expect(r).toBeCalledTimes(2);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should watch pages files","suites":["builder: builder watch"],"updatePoint":{"line":95,"column":32,"index":3598},"line":95,"code":"  test('should watch pages files', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = [];\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder._nuxtPages = true;\n    r.mockImplementation((dir, src) => src);\n    builder.watchClient();\n    expect(r).toBeCalledTimes(3);\n    expect(r).nthCalledWith(3, '/var/nuxt/src', '/var/nuxt/src/pages');\n    expect(upath.normalizeSafe).toBeCalledTimes(3);\n    expect(upath.normalizeSafe).nthCalledWith(3, '/var/nuxt/src/pages/**/*.{vue,js}', 2, expect.any(Array));\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should invoke generateRoutesAndFiles on file refresh","suites":["builder: builder watch"],"updatePoint":{"line":119,"column":60,"index":4479},"line":119,"code":"  test('should invoke generateRoutesAndFiles on file refresh', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = [];\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.watchCustom = jest.fn();\n    r.mockImplementation((dir, src) => src);\n    builder.watchClient();\n    expect(debounce).toBeCalledTimes(1);\n    expect(debounce).toBeCalledWith(expect.any(Function), 200);\n    const refreshFiles = chokidar.on.mock.calls[0][1];\n    builder.generateRoutesAndFiles = jest.fn();\n    refreshFiles();\n    expect(builder.generateRoutesAndFiles).toBeCalled();\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should watch custom patterns","suites":["builder: builder watch"],"updatePoint":{"line":145,"column":36,"index":5360},"line":145,"code":"  test('should watch custom patterns', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.build.watch = ['~/custom'];\n    nuxt.options.build.styleResources = ['~/style'];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.createFileWatcher = jest.fn();\n    builder.assignWatcher = jest.fn(() => () => {});\n    builder.watchClient();\n    const patterns = ['resolveAlias(~/custom)', 'resolveAlias(~/style)'];\n    expect(builder.createFileWatcher).toBeCalledTimes(3);\n    expect(builder.createFileWatcher).toBeCalledWith(patterns, ['change'], expect.any(Function), expect.any(Function));\n    expect(builder.assignWatcher).toBeCalledTimes(3);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should invoke chokidar to create watcher","suites":["builder: builder watch"],"updatePoint":{"line":165,"column":48,"index":6269},"line":165,"code":"  test('should invoke chokidar to create watcher', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    const patterns = ['/patterns'];\n    const events = ['event', 'another event'];\n    const listener = jest.fn();\n    const watcherCreatedCallback = jest.fn();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.createFileWatcher(patterns, events, listener, watcherCreatedCallback);\n    expect(chokidar.watch).toBeCalledTimes(1);\n    expect(chokidar.watch).toBeCalledWith(patterns, {\n      test: true\n    });\n    expect(chokidar.on).toBeCalledTimes(2);\n    expect(chokidar.on).nthCalledWith(1, 'event', listener);\n    expect(chokidar.on).nthCalledWith(2, 'another event', listener);\n    expect(watcherCreatedCallback).toBeCalledTimes(1);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should restart watcher when event is included in rewatchOnRawEvents","suites":["builder: builder watch"],"updatePoint":{"line":194,"column":75,"index":7359},"line":194,"code":"  test('should restart watcher when event is included in rewatchOnRawEvents', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      },\n      rewatchOnRawEvents: ['rename']\n    };\n    const patterns = ['/pattern'];\n    const events = ['event'];\n    const listener = jest.fn();\n    const watcherCreatedCallback = jest.fn();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.createFileWatcher(patterns, events, listener, watcherCreatedCallback);\n    expect(chokidar.on).toBeCalledTimes(2);\n    expect(chokidar.on).nthCalledWith(2, 'raw', expect.any(Function));\n    const rewatchHandler = chokidar.on.mock.calls[1][1];\n    rewatchHandler('rename');\n    rewatchHandler('change');\n    expect(chokidar.close).toBeCalledTimes(1);\n    expect(builder.watchers.custom).toBeNull();\n    expect(watcherCreatedCallback).toBeCalledTimes(2);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should watch files for restarting server","suites":["builder: builder watch"],"updatePoint":{"line":224,"column":48,"index":8469},"line":224,"code":"  test('should watch files for restarting server', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    nuxt.options.watch = ['/var/nuxt/src/watch/test'];\n    nuxt.options.serverMiddleware = ['/var/nuxt/src/serverMiddleware/test', {\n      path: '/test',\n      handler: '/var/nuxt/src/serverMiddleware/test-handler'\n    }, {\n      obj: 'test'\n    }];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.ignore.ignoreFile = '/var/nuxt/src/.nuxtignore';\n    isString.mockImplementation(src => typeof src === 'string');\n    isPureObject.mockImplementation(obj => typeof obj === 'object');\n    builder.watchRestart();\n    expect(chokidar.watch).toBeCalledTimes(1);\n    expect(chokidar.watch).toBeCalledWith(['resolveAlias(/var/nuxt/src/watch/test)', '/var/nuxt/src/.nuxtignore', path.join('/var/nuxt/src/var/nuxt/src/store') // because store == false + using path.join()\n    ], {\n      test: true\n    });\n    expect(chokidar.on).toBeCalledTimes(1);\n    expect(chokidar.on).toBeCalledWith('all', expect.any(Function));\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should trigger restarting when files changed","suites":["builder: builder watch"],"updatePoint":{"line":258,"column":52,"index":9810},"line":258,"code":"  test('should trigger restarting when files changed', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    nuxt.options.watch = ['/var/nuxt/src/watch/test'];\n    nuxt.options.serverMiddleware = [];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.watchRestart();\n    const restartHandler = chokidar.on.mock.calls[0][1];\n    const watchingFile = '/var/nuxt/src/watch/test/index.js';\n    await restartHandler('add', watchingFile);\n    await restartHandler('change', watchingFile);\n    await restartHandler('unlink', watchingFile);\n    expect(nuxt.callHook).toBeCalledTimes(6);\n    expect(nuxt.callHook).nthCalledWith(1, 'watch:fileChanged', builder, watchingFile);\n    expect(nuxt.callHook).nthCalledWith(2, 'watch:restart', {\n      event: 'add',\n      path: watchingFile\n    });\n    expect(nuxt.callHook).nthCalledWith(3, 'watch:fileChanged', builder, watchingFile);\n    expect(nuxt.callHook).nthCalledWith(4, 'watch:restart', {\n      event: 'change',\n      path: watchingFile\n    });\n    expect(nuxt.callHook).nthCalledWith(5, 'watch:fileChanged', builder, watchingFile);\n    expect(nuxt.callHook).nthCalledWith(6, 'watch:restart', {\n      event: 'unlink',\n      path: watchingFile\n    });\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should ignore other events in watchRestart","suites":["builder: builder watch"],"updatePoint":{"line":298,"column":50,"index":11332},"line":298,"code":"  test('should ignore other events in watchRestart', () => {\n    const nuxt = createNuxt();\n    nuxt.options.srcDir = '/var/nuxt/src';\n    nuxt.options.dir = {\n      layouts: '/var/nuxt/src/layouts',\n      pages: '/var/nuxt/src/pages',\n      store: '/var/nuxt/src/store',\n      middleware: '/var/nuxt/src/middleware'\n    };\n    nuxt.options.watchers = {\n      chokidar: {\n        test: true\n      }\n    };\n    nuxt.options.watch = ['/var/nuxt/src/watch/test'];\n    nuxt.options.serverMiddleware = [];\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.watchRestart();\n    const restartHandler = chokidar.on.mock.calls[0][1];\n    const watchingFile = '/var/nuxt/src/watch/test/index.js';\n    restartHandler('rename', watchingFile);\n    expect(nuxt.callHook).not.toBeCalled();\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should unwatch every watcher","suites":["builder: builder watch"],"updatePoint":{"line":321,"column":36,"index":12114},"line":321,"code":"  test('should unwatch every watcher', () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.watchers = {\n      files: {\n        close: jest.fn()\n      },\n      custom: {\n        close: jest.fn()\n      },\n      restart: {\n        close: jest.fn()\n      }\n    };\n    builder.unwatch();\n    expect(builder.watchers.files.close).toBeCalledTimes(1);\n    expect(builder.watchers.custom.close).toBeCalledTimes(1);\n    expect(builder.watchers.restart.close).toBeCalledTimes(1);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should close watch and bundle builder","suites":["builder: builder watch"],"updatePoint":{"line":340,"column":45,"index":12651},"line":340,"code":"  test('should close watch and bundle builder', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    builder.unwatch = jest.fn();\n    expect(builder.__closed).toBeUndefined();\n    await builder.close();\n    expect(builder.__closed).toEqual(true);\n    expect(builder.unwatch).toBeCalledTimes(1);\n    expect(builder.bundleBuilder.close).toBeCalledTimes(1);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should close bundleBuilder only if close api exists","suites":["builder: builder watch"],"updatePoint":{"line":350,"column":59,"index":13076},"line":350,"code":"  test('should close bundleBuilder only if close api exists', async () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, {});\n    builder.unwatch = jest.fn();\n    expect(builder.__closed).toBeUndefined();\n    await builder.close();\n    expect(builder.__closed).toEqual(true);\n    expect(builder.unwatch).toBeCalledTimes(1);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should prevent duplicate close","suites":["builder: builder watch"],"updatePoint":{"line":359,"column":38,"index":13409},"line":359,"code":"  test('should prevent duplicate close', async () => {\n    const nuxt = createNuxt();\n    const bundleBuilderClose = jest.fn();\n    const builder = new Builder(nuxt, {\n      close: bundleBuilderClose\n    });\n    builder.unwatch = jest.fn();\n    builder.__closed = true;\n    await builder.close();\n    expect(builder.unwatch).not.toBeCalled();\n    expect(bundleBuilderClose).not.toBeCalled();\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should assign watcher with key","suites":["builder: builder watch"],"updatePoint":{"line":371,"column":38,"index":13807},"line":371,"code":"  test('should assign watcher with key', () => {\n    const nuxt = createNuxt();\n    const builder = new Builder(nuxt, BundleBuilder);\n    const key = 'key';\n    const watcher = 'watcher';\n    const fn = builder.assignWatcher(key);\n    fn(watcher);\n    expect(Boolean(builder.watchers[key])).toBe(true);\n    expect(builder.watchers[key]).toBe(watcher);\n  });","file":"builder.watch.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should construct context","suites":["builder: buildContext"],"updatePoint":{"line":4,"column":32,"index":166},"line":4,"code":"  test('should construct context', () => {\n    const builder = {\n      nuxt: {\n        options: {\n          target: TARGETS.server\n        }\n      }\n    };\n    const context = new BuildContext(builder);\n    expect(context._builder).toEqual(builder);\n    expect(context.nuxt).toEqual(builder.nuxt);\n    expect(context.options).toEqual(builder.nuxt.options);\n    expect(context.target).toEqual('server');\n  });","file":"context/build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should return builder plugins context","suites":["builder: buildContext"],"updatePoint":{"line":18,"column":45,"index":588},"line":18,"code":"  test('should return builder plugins context', () => {\n    const builder = {\n      plugins: [],\n      nuxt: {\n        options: {}\n      }\n    };\n    const context = new BuildContext(builder);\n    expect(context.plugins).toEqual(builder.plugins);\n  });","file":"context/build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should return builder build options","suites":["builder: buildContext"],"updatePoint":{"line":28,"column":43,"index":839},"line":28,"code":"  test('should return builder build options', () => {\n    const buildOptions = {\n      id: 'test-build-options'\n    };\n    const builder = {\n      plugins: [],\n      nuxt: {\n        options: {\n          build: buildOptions\n        }\n      }\n    };\n    const context = new BuildContext(builder);\n    expect(context.buildOptions).toEqual(buildOptions);\n  });","file":"context/build.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should construct context","suites":["builder: buildContext"],"updatePoint":{"line":63,"column":32,"index":1498},"line":63,"code":"  test('should construct context', () => {\n    const context = new TemplateContext(builder, options);\n    expect(context).toMatchSnapshot();\n  });","file":"context/template.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should return object loading template options","suites":["builder: buildContext"],"updatePoint":{"line":67,"column":53,"index":1666},"line":67,"code":"  test('should return object loading template options', () => {\n    const context = new TemplateContext(builder, { ...options,\n      loading: {\n        name: 'test_loading'\n      }\n    });\n    expect(context.templateVars.loading).toEqual({\n      name: 'test_loading'\n    });\n  });","file":"context/template.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should return object loading template options","suites":["builder: buildContext"],"updatePoint":{"line":77,"column":53,"index":1947},"line":77,"code":"  test('should return object loading template options', () => {\n    const context = new TemplateContext(builder, options);\n    const templateOptions = context.templateOptions;\n    expect(templateOptions).toEqual({\n      imports: {\n        serialize,\n        serializeFunction,\n        devalue,\n        hash,\n        r,\n        wp,\n        wChunk,\n        _: {}\n      },\n      interpolate: /<%=([\\s\\S]+?)%>/g\n    });\n    expect(templateOptions.imports._.test).toEqual('test lodash');\n    expect(templateOptions.imports._.warn).toEqual('only once');\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('Avoid using _ inside templates');\n  });","file":"context/template.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should construct Ignore","suites":["builder: Ignore"],"updatePoint":{"line":17,"column":31,"index":450},"line":17,"code":"  test('should construct Ignore', () => {\n    jest.spyOn(Ignore.prototype, 'addIgnoresRules').mockImplementation(() => {});\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    expect(Ignore.IGNORE_FILENAME).toEqual('.nuxtignore');\n    expect(ignore.rootDir).toEqual('/var/nuxt');\n    expect(ignore.addIgnoresRules).toBeCalledTimes(1);\n    Ignore.prototype.addIgnoresRules.mockRestore();\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should add ignore file","suites":["builder: Ignore"],"updatePoint":{"line":27,"column":30,"index":861},"line":27,"code":"  test('should add ignore file', () => {\n    jest.spyOn(Ignore.prototype, 'addIgnoresRules');\n    jest.spyOn(Ignore.prototype, 'readIgnoreFile').mockReturnValue('');\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    expect(Ignore.IGNORE_FILENAME).toEqual('.nuxtignore');\n    expect(ignore.rootDir).toEqual('/var/nuxt');\n    expect(ignore.addIgnoresRules).toBeCalledTimes(1);\n    expect(ignore.readIgnoreFile).toBeCalledTimes(1);\n    Ignore.prototype.addIgnoresRules.mockRestore();\n    Ignore.prototype.readIgnoreFile.mockRestore();\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should find ignore file","suites":["builder: Ignore"],"updatePoint":{"line":40,"column":31,"index":1421},"line":40,"code":"  test('should find ignore file', () => {\n    fs.existsSync.mockReturnValueOnce(true);\n    fs.statSync.mockReturnValueOnce({\n      isFile: () => true\n    });\n    fs.readFileSync.mockReturnValueOnce('pages/ignore.vue');\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt', '.nuxtignore');\n    expect(fs.existsSync).toBeCalledTimes(1);\n    expect(fs.existsSync).toBeCalledWith('resolve(/var/nuxt, .nuxtignore)');\n    expect(fs.statSync).toBeCalledTimes(1);\n    expect(fs.statSync).toBeCalledWith('resolve(/var/nuxt, .nuxtignore)');\n    expect(ignore.ignoreFile).toEqual('resolve(/var/nuxt, .nuxtignore)');\n    expect(fs.readFileSync).toBeCalledTimes(1);\n    expect(fs.readFileSync).toBeCalledWith('resolve(/var/nuxt, .nuxtignore)', 'utf8');\n    expect(ignore.ignore.add).toBeCalledTimes(1);\n    expect(ignore.ignore.add).toBeCalledWith('pages/ignore.vue');\n    fs.existsSync.mockClear();\n    ignore.findIgnoreFile();\n    expect(fs.existsSync).not.toBeCalled();\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should only find existed ignore file","suites":["builder: Ignore"],"updatePoint":{"line":64,"column":44,"index":2511},"line":64,"code":"  test('should only find existed ignore file', () => {\n    fs.existsSync.mockReturnValueOnce(false);\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt', '.nuxtignore');\n    expect(fs.existsSync).toBeCalledTimes(1);\n    expect(fs.existsSync).toBeCalledWith('resolve(/var/nuxt, .nuxtignore)');\n    expect(fs.statSync).not.toBeCalled();\n    expect(ignore.ignoreFile).toBeUndefined();\n    expect(ignore.ignore).toBeUndefined();\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should filter ignore files","suites":["builder: Ignore"],"updatePoint":{"line":77,"column":34,"index":3044},"line":77,"code":"  test('should filter ignore files', () => {\n    fs.existsSync.mockReturnValueOnce(true);\n    fs.statSync.mockReturnValueOnce({\n      isFile: () => true\n    });\n    fs.readFileSync.mockReturnValueOnce('pages/ignore.vue');\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    ignore.filter();\n    ignore.filter('pages/ignore.vue');\n    const paths = ignore.filter(['pages/ignore.vue', 'layouts/ignore.vue']);\n    expect(ignore.ignore.filter).toBeCalledTimes(3);\n    expect(ignore.ignore.filter).nthCalledWith(1, []);\n    expect(ignore.ignore.filter).nthCalledWith(2, ['pages/ignore.vue']);\n    expect(ignore.ignore.filter).nthCalledWith(3, ['pages/ignore.vue', 'layouts/ignore.vue']);\n    expect(paths).toEqual(['pages/ignore.vue', 'layouts/ignore.vue']);\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should return origin paths if there is no ignorefile","suites":["builder: Ignore"],"updatePoint":{"line":95,"column":60,"index":3849},"line":95,"code":"  test('should return origin paths if there is no ignorefile', () => {\n    fs.existsSync.mockReturnValueOnce(false);\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    const paths = ignore.filter(['pages/ignore.vue', 'layouts/ignore.vue']);\n    expect(paths).toEqual(['pages/ignore.vue', 'layouts/ignore.vue']);\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should reload ignore","suites":["builder: Ignore"],"updatePoint":{"line":103,"column":28,"index":4155},"line":103,"code":"  test('should reload ignore', () => {\n    fs.existsSync.mockReturnValueOnce(true);\n    fs.statSync.mockReturnValueOnce({\n      isFile: () => true\n    });\n    fs.readFileSync.mockReturnValueOnce('pages/ignore.vue');\n    const ignore = new Ignore({\n      rootDir: '/var/nuxt'\n    });\n    expect(ignore.ignore).toBeDefined();\n    expect(ignore.ignoreFile).toEqual('resolve(/var/nuxt, .nuxtignore)');\n    ignore.addIgnoresRules = jest.fn();\n    ignore.reload();\n    expect(ignore.ignore).toBeUndefined();\n    expect(ignore.ignoreFile).toBeUndefined();\n    expect(ignore.addIgnoresRules).toBeCalledTimes(1);\n  });","file":"ignore.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"should export Builder","suites":["builder: entry"],"updatePoint":{"line":4,"column":29,"index":165},"line":4,"code":"  test('should export Builder', () => {\n    expect(Builder()).toEqual('nuxt builder');\n  });","file":"index.test.js","skipped":false,"dir":"packages/builder/test"},{"name":"has run function","suites":["build"],"updatePoint":{"line":16,"column":24,"index":647},"line":16,"code":"  test('has run function', () => {\n    expect(typeof build.run).toBe('function');\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"builds on universal mode","suites":["build"],"updatePoint":{"line":19,"column":32,"index":743},"line":19,"code":"  test('builds on universal mode', async () => {\n    mockGetNuxt({\n      mode: MODES.universal,\n      build: {\n        analyze: true\n      }\n    });\n    const builder = mockGetBuilder(Promise.resolve());\n    await NuxtCommand.from(build).run();\n    expect(builder).toHaveBeenCalled();\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generates on spa mode","suites":["build"],"updatePoint":{"line":30,"column":29,"index":1031},"line":30,"code":"  test('generates on spa mode', async () => {\n    mockGetNuxt({\n      mode: MODES.spa,\n      target: TARGETS.server,\n      build: {\n        analyze: false\n      }\n    });\n    const generate = mockGetGenerator();\n    await NuxtCommand.from(build).run();\n    expect(generate).toHaveBeenCalled();\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build with devtools","suites":["build"],"updatePoint":{"line":42,"column":27,"index":1329},"line":42,"code":"  test('build with devtools', async () => {\n    mockGetNuxt({\n      mode: MODES.universal\n    });\n    const builder = mockGetBuilder(Promise.resolve());\n    const cmd = NuxtCommand.from(build, ['build', '.', '--devtools']);\n    const options = await cmd.getNuxtConfig(cmd.argv);\n    await cmd.run();\n    expect(options.vue.config.devtools).toBe(true);\n    expect(builder).toHaveBeenCalled();\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build with modern mode","suites":["build"],"updatePoint":{"line":53,"column":30,"index":1730},"line":53,"code":"  test('build with modern mode', async () => {\n    mockGetNuxt({\n      mode: MODES.universal\n    });\n    mockGetBuilder(Promise.resolve());\n    const cmd = NuxtCommand.from(build, ['build', '.', '--m']);\n    const options = await cmd.getNuxtConfig();\n    await cmd.run();\n    expect(options.modern).toBe(true);\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build force-exits by default","suites":["build"],"updatePoint":{"line":63,"column":36,"index":2053},"line":63,"code":"  test('build force-exits by default', async () => {\n    mockGetNuxt();\n    mockGetBuilder(Promise.resolve());\n    const cmd = NuxtCommand.from(build, ['build', '.']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('build', 5);\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build can set force exit explicitly","suites":["build"],"updatePoint":{"line":71,"column":43,"index":2371},"line":71,"code":"  test('build can set force exit explicitly', async () => {\n    mockGetNuxt();\n    mockGetBuilder(Promise.resolve());\n    const cmd = NuxtCommand.from(build, ['build', '.', '--force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('build', false);\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build can disable force exit explicitly","suites":["build"],"updatePoint":{"line":79,"column":47,"index":2713},"line":79,"code":"  test('build can disable force exit explicitly', async () => {\n    mockGetNuxt();\n    mockGetBuilder(Promise.resolve());\n    const cmd = NuxtCommand.from(build, ['build', '.', '--no-force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build locks project by default","suites":["build"],"updatePoint":{"line":86,"column":38,"index":2981},"line":86,"code":"  test('build locks project by default', async () => {\n    mockGetNuxt({\n      mode: MODES.universal\n    });\n    mockGetBuilder(Promise.resolve());\n    const releaseLock = jest.fn(() => Promise.resolve());\n    const createLock = jest.fn(() => releaseLock);\n    jest.spyOn(utils, 'createLock').mockImplementation(createLock);\n    const cmd = NuxtCommand.from(build, ['build', '.']);\n    await cmd.run();\n    expect(createLock).toHaveBeenCalledTimes(1);\n    expect(releaseLock).toHaveBeenCalledTimes(1);\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build can disable locking","suites":["build"],"updatePoint":{"line":99,"column":33,"index":3484},"line":99,"code":"  test('build can disable locking', async () => {\n    mockGetNuxt({\n      mode: MODES.universal\n    });\n    mockGetBuilder(Promise.resolve());\n    const createLock = jest.fn(() => Promise.resolve());\n    jest.spyOn(utils, 'createLock').mockImplementationOnce(() => createLock);\n    const cmd = NuxtCommand.from(build, ['build', '.', '--no-lock']);\n    await cmd.run();\n    expect(createLock).not.toHaveBeenCalled();\n  });","file":"unit/build.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"calls expected method","suites":["cli"],"updatePoint":{"line":10,"column":29,"index":340},"line":10,"code":"  test('calls expected method', async () => {\n    const mockedCommand = {\n      run: jest.fn(() => Promise.resolve({}))\n    };\n    getCommand.mockImplementationOnce(() => Promise.resolve(mockedCommand));\n    await run();\n    expect(mockedCommand.run).toHaveBeenCalled();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/cli.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"sets NODE_ENV=development for dev","suites":["cli"],"updatePoint":{"line":19,"column":41,"index":681},"line":19,"code":"  test('sets NODE_ENV=development for dev', async () => {\n    const nodeEnv = process.env.NODE_ENV;\n    process.env.NODE_ENV = '';\n    getCommand.mockImplementationOnce(() => Promise.resolve({\n      run() {}\n\n    }));\n    await run(['dev']);\n    expect(process.env.NODE_ENV).toBe('development');\n    process.env.NODE_ENV = nodeEnv;\n  });","file":"unit/cli.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"sets NODE_ENV=production for build","suites":["cli"],"updatePoint":{"line":30,"column":42,"index":1020},"line":30,"code":"  test('sets NODE_ENV=production for build', async () => {\n    const nodeEnv = process.env.NODE_ENV;\n    process.env.NODE_ENV = '';\n    getCommand.mockImplementationOnce(() => Promise.resolve({\n      run() {}\n\n    }));\n    await run(['', '', 'build']);\n    expect(process.env.NODE_ENV).toBe('production');\n    process.env.NODE_ENV = nodeEnv;\n  });","file":"unit/cli.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"builds minimist options","suites":["cli/command"],"updatePoint":{"line":18,"column":31,"index":643},"line":18,"code":"  test('builds minimist options', () => {\n    const cmd = new Command({\n      options: allOptions\n    });\n\n    const minimistOptions = cmd._getMinimistOptions();\n\n    expect(minimistOptions.string.length).toBe(7);\n    expect(minimistOptions.boolean.length).toBe(6);\n    expect(minimistOptions.alias.c).toBe('config-file');\n    expect(minimistOptions.default.c).toBe(common['config-file'].default);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"parses args","suites":["cli/command"],"updatePoint":{"line":30,"column":19,"index":1035},"line":30,"code":"  test('parses args', () => {\n    const argv = ['-c', 'test-file', '-s', '-p', '3001'];\n    const cmd = new Command({\n      options: { ...common,\n        ...server\n      }\n    }, argv);\n    expect(cmd.argv['config-file']).toBe(argv[1]);\n    expect(cmd.argv.spa).toBe(true);\n    expect(cmd.argv.universal).toBe(false);\n    expect(cmd.argv.port).toBe('3001');\n    const cmd2 = new Command({\n      options: { ...common,\n        ...server\n      }\n    }, ['--no-build']);\n    expect(cmd2.argv.build).toBe(false);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"prints version automatically","suites":["cli/command"],"updatePoint":{"line":48,"column":36,"index":1566},"line":48,"code":"  test('prints version automatically', async () => {\n    jest.spyOn(utils, 'forceExit').mockImplementation(() => {});\n    const cmd = new Command({}, ['--version']);\n    cmd.showVersion = jest.fn();\n    await cmd.run();\n    expect(cmd.showVersion).toHaveBeenCalledTimes(1);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"prints help automatically","suites":["cli/command"],"updatePoint":{"line":55,"column":33,"index":1843},"line":55,"code":"  test('prints help automatically', async () => {\n    jest.spyOn(utils, 'forceExit').mockImplementation(() => {});\n    const cmd = new Command({\n      options: allOptions\n    }, ['-h']);\n    cmd.showHelp = jest.fn();\n    await cmd.run();\n    expect(cmd.showHelp).toHaveBeenCalledTimes(1);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"returns nuxt config","suites":["cli/command"],"updatePoint":{"line":64,"column":27,"index":2132},"line":64,"code":"  test('returns nuxt config', async () => {\n    const loadConfigSpy = jest.spyOn(config, 'loadNuxtConfig');\n    const cmd = new Command({\n      name: 'test',\n      options: allOptions\n    }, ['-c', 'test-file', '-a', '-p', '3001', '-q', '-H']);\n    const options = await cmd.getNuxtConfig({\n      testOption: true\n    });\n    expect(options.testOption).toBe(true);\n    expect(options.server.port).toBe(3001);\n    expect(consola.fatal).toHaveBeenCalledWith('Provided hostname argument has no value'); // hostname check\n\n    expect(loadConfigSpy).toHaveBeenCalledTimes(1);\n    expect(loadConfigSpy).toHaveBeenCalledWith(expect.any(Object), {\n      command: 'test',\n      dev: false,\n      env: expect.objectContaining({\n        NODE_ENV: 'test'\n      })\n    });\n    loadConfigSpy.mockRestore();\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"returns Nuxt instance","suites":["cli/command"],"updatePoint":{"line":87,"column":29,"index":2933},"line":87,"code":"  test('returns Nuxt instance', async () => {\n    const cmd = new Command();\n    const nuxt = await cmd.getNuxt();\n    expect(nuxt.constructor.name).toBe('Nuxt');\n    expect(typeof nuxt.ready).toBe('function');\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"returns Builder instance","suites":["cli/command"],"updatePoint":{"line":93,"column":32,"index":3153},"line":93,"code":"  test('returns Builder instance', async () => {\n    const cmd = new Command();\n    const builder = await cmd.getBuilder();\n    expect(builder.constructor.name).toBe('Builder');\n    expect(typeof builder.build).toBe('function');\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"returns Generator instance","suites":["cli/command"],"updatePoint":{"line":99,"column":34,"index":3390},"line":99,"code":"  test('returns Generator instance', async () => {\n    const cmd = new Command();\n    const generator = await cmd.getGenerator();\n    expect(generator.constructor.name).toBe('Generator');\n    expect(typeof generator.generate).toBe('function');\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"builds help text","suites":["cli/command"],"updatePoint":{"line":105,"column":24,"index":3630},"line":105,"code":"  test('builds help text', () => {\n    jest.spyOn(constants, 'maxCharsPerLine').mockReturnValue(40);\n    const cmd = new Command({\n      description: 'a very long description that should wrap to the next line because is not longer ' + 'than the terminal width',\n      usage: 'this is how you do it',\n      options: { ...allOptions,\n        foo: {\n          type: 'boolean',\n          description: 'very long option that is longer than the terminal width and ' + 'should wrap to the next line'\n        }\n      }\n    });\n    expect(cmd._getHelp()).toMatchSnapshot();\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"show version prints to stdout and exits","suites":["cli/command"],"updatePoint":{"line":119,"column":47,"index":4224},"line":119,"code":"  test('show version prints to stdout and exits', () => {\n    jest.spyOn(process.stdout, 'write').mockImplementation(() => {});\n    const cmd = new Command();\n    cmd.showVersion();\n    expect(process.stdout.write).toHaveBeenCalled();\n    process.stdout.write.mockRestore();\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"show help prints to stdout and exits","suites":["cli/command"],"updatePoint":{"line":126,"column":44,"index":4502},"line":126,"code":"  test('show help prints to stdout and exits', () => {\n    jest.spyOn(process.stdout, 'write').mockImplementation(() => {});\n    const cmd = new Command();\n    cmd.showHelp();\n    expect(process.stdout.write).toHaveBeenCalled();\n    process.stdout.write.mockRestore();\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"can set and release lock","suites":["cli/command"],"updatePoint":{"line":133,"column":32,"index":4765},"line":133,"code":"  test('can set and release lock', () => {\n    const release = jest.fn(() => Promise.resolve());\n    const cmd = new Command();\n    cmd.setLock(release);\n    cmd.releaseLock();\n    expect(release).toHaveBeenCalledTimes(1);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"logs warning when lock already exists and removes old lock","suites":["cli/command"],"updatePoint":{"line":140,"column":66,"index":5028},"line":140,"code":"  test('logs warning when lock already exists and removes old lock', () => {\n    const release = jest.fn(() => Promise.resolve());\n    const cmd = new Command();\n    cmd.setLock(release);\n    cmd.setLock(release);\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledWith(expect.stringMatching('A previous unreleased lock was found'));\n    expect(release).toHaveBeenCalledTimes(1);\n    cmd.releaseLock();\n    expect(release).toHaveBeenCalledTimes(2);\n  });","file":"unit/command.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"checkDependencies","suites":["cli/utils"],"updatePoint":{"line":8,"column":25,"index":266},"line":8,"code":"  test('checkDependencies', () => {\n    checkDependencies();\n    expect(consola.warn).toHaveBeenCalledWith(expect.stringMatching(/webpack@.+ is installed but .+ is expected/));\n\n    if (process.version.startsWith('v10')) {\n      expect(consola.warn).toHaveBeenCalledTimes(2);\n    } else {\n      expect(consola.warn).toHaveBeenCalledTimes(1);\n    }\n  });","file":"unit/dependencies.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"has run function","suites":["dev"],"updatePoint":{"line":10,"column":24,"index":403},"line":10,"code":"  test('has run function', () => {\n    expect(typeof dev.run).toBe('function');\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"reloads on fileRestartHook","suites":["dev"],"updatePoint":{"line":13,"column":34,"index":499},"line":13,"code":"  test('reloads on fileRestartHook', async () => {\n    const Nuxt = mockNuxt();\n    const Builder = mockBuilder();\n    await NuxtCommand.from(dev).run();\n    expect(consola.error).not.toHaveBeenCalled();\n    expect(Builder.prototype.build).toHaveBeenCalled();\n    expect(Nuxt.prototype.server.listen).toHaveBeenCalled(); // expect(Builder.prototype.watchRestart).toHaveBeenCalled()\n\n    jest.clearAllMocks();\n    const builder = new Builder();\n    builder.nuxt = new Nuxt();\n    await Nuxt.fileRestartHook(builder);\n    expect(consola.log).toHaveBeenCalled();\n    expect(Builder.prototype.build).toHaveBeenCalled();\n    expect(Nuxt.prototype.close).toHaveBeenCalled();\n    expect(Nuxt.prototype.server.listen).toHaveBeenCalled();\n    expect(consola.error).not.toHaveBeenCalled();\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"catches build error and calls hook","suites":["dev"],"updatePoint":{"line":31,"column":42,"index":1293},"line":31,"code":"  test('catches build error and calls hook', async () => {\n    const Nuxt = mockNuxt();\n    const Builder = mockBuilder();\n    await NuxtCommand.from(dev).run();\n    jest.clearAllMocks(); // Test error on second build so we cover oldInstance stuff\n\n    const builder = new Builder();\n    builder.nuxt = new Nuxt();\n\n    Builder.prototype.build = () => {\n      throw new Error('Build Error');\n    };\n\n    await Nuxt.fileRestartHook(builder);\n    expect(Nuxt.prototype.close).toHaveBeenCalled();\n    expect(Nuxt.prototype.callHook).toHaveBeenCalledWith('cli:buildError', expect.any(Error));\n    expect(consola.error).toHaveBeenCalledWith(new Error('Build Error'));\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"catches watchRestart error","suites":["dev"],"line":49,"code":"  test.skip('catches watchRestart error', async () => {","file":"unit/dev.test.js","skipped":true,"dir":"packages/cli/test"},{"name":"catches error on hook error","suites":["dev"],"updatePoint":{"line":61,"column":35,"index":2529},"line":61,"code":"  test('catches error on hook error', async () => {\n    const Nuxt = mockNuxt();\n    const Builder = mockBuilder();\n    await NuxtCommand.from(dev).run();\n    jest.clearAllMocks();\n    mockGetNuxtConfig().mockImplementationOnce(() => {\n      throw new Error('Config Error');\n    });\n    const builder = new Builder();\n    builder.nuxt = new Nuxt();\n    await Nuxt.fileRestartHook(builder);\n    expect(consola.fatal).toHaveBeenCalledWith(new Error('Config Error')); // expect(Builder.prototype.watchRestart).toHaveBeenCalledTimes(1)\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"catches error on startDev","suites":["dev"],"updatePoint":{"line":74,"column":33,"index":3065},"line":74,"code":"  test('catches error on startDev', async () => {\n    mockNuxt({\n      server: {\n        listen: jest.fn().mockImplementation(() => {\n          throw new Error('Listen Error');\n        })\n      }\n    });\n    mockBuilder();\n    await NuxtCommand.from(dev).run();\n    expect(consola.fatal).toHaveBeenCalledWith(new Error('Listen Error'));\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"dev doesnt force-exit by default","suites":["dev"],"updatePoint":{"line":86,"column":40,"index":3415},"line":86,"code":"  test('dev doesnt force-exit by default', async () => {\n    mockNuxt();\n    mockBuilder();\n    const cmd = NuxtCommand.from(dev, ['dev', '.']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"dev can set force exit explicitly","suites":["dev"],"updatePoint":{"line":93,"column":41,"index":3640},"line":93,"code":"  test('dev can set force exit explicitly', async () => {\n    mockNuxt();\n    mockBuilder();\n    const cmd = NuxtCommand.from(dev, ['dev', '.', '--force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('dev', false);\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"dev can disable force exit explicitly","suites":["dev"],"updatePoint":{"line":101,"column":45,"index":3951},"line":101,"code":"  test('dev can disable force exit explicitly', async () => {\n    mockNuxt();\n    mockBuilder();\n    const cmd = NuxtCommand.from(dev, ['dev', '.', '--no-force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/dev.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"has run function","suites":["export"],"updatePoint":{"line":15,"column":24,"index":603},"line":15,"code":"  test('has run function', () => {\n    expect(typeof exportCommand.run).toBe('function');\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"init by default, build false","suites":["export"],"updatePoint":{"line":18,"column":36,"index":711},"line":18,"code":"  test('init by default, build false', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    const generator = mockGetGenerator();\n    await NuxtCommand.from(exportCommand).run();\n    expect(generator).toHaveBeenCalled();\n    expect(generator.mock.calls[0][0].init).toBe(true); // expect(generator.mock.calls[0][0].build).toBe(false)\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"force-exits by default","suites":["export"],"updatePoint":{"line":29,"column":30,"index":1081},"line":29,"code":"  test('force-exits by default', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(exportCommand, ['generate', '.']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('generate', 5);\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"can set force exit explicitly","suites":["export"],"updatePoint":{"line":41,"column":37,"index":1445},"line":41,"code":"  test('can set force exit explicitly', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(exportCommand, ['generate', '.', '--force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('generate', false);\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"can disable force exit explicitly","suites":["export"],"updatePoint":{"line":53,"column":41,"index":1833},"line":53,"code":"  test('can disable force exit explicitly', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(exportCommand, ['generate', '.', '--no-force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"locks project by default","suites":["export"],"updatePoint":{"line":64,"column":32,"index":2144},"line":64,"code":"  test('locks project by default', async () => {\n    const releaseLock = jest.fn(() => Promise.resolve());\n    const createLock = jest.fn(() => releaseLock);\n    jest.spyOn(utils, 'createLock').mockImplementation(createLock);\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(exportCommand, ['export', '.']);\n    await cmd.run();\n    expect(createLock).toHaveBeenCalledTimes(1);\n    expect(releaseLock).toHaveBeenCalledTimes(1);\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"can disable locking","suites":["export"],"updatePoint":{"line":79,"column":27,"index":2653},"line":79,"code":"  test('can disable locking', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const createLock = jest.fn(() => Promise.resolve());\n    jest.spyOn(utils, 'createLock').mockImplementationOnce(() => createLock);\n    const cmd = NuxtCommand.from(exportCommand, ['export', '.', '--no-lock']);\n    await cmd.run();\n    expect(createLock).not.toHaveBeenCalled();\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"throw an error when fail-on-error enabled and page errors","suites":["export"],"updatePoint":{"line":92,"column":65,"index":3119},"line":92,"code":"  test('throw an error when fail-on-error enabled and page errors', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator(() => ({\n      errors: [{\n        type: 'dummy'\n      }]\n    }));\n    const cmd = NuxtCommand.from(exportCommand, ['export', '.', '--fail-on-error']);\n    await expect(cmd.run()).rejects.toThrow('Error generating pages, exiting with non-zero code');\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"do not throw an error when fail-on-error disabled and page errors","suites":["export"],"updatePoint":{"line":106,"column":73,"index":3558},"line":106,"code":"  test('do not throw an error when fail-on-error disabled and page errors', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator(() => ({\n      errors: [{\n        type: 'dummy'\n      }]\n    }));\n    const cmd = NuxtCommand.from(exportCommand, ['export', '.']);\n    await cmd.run();\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"do not throw an error when fail-on-error enabled and no page errors","suites":["export"],"updatePoint":{"line":120,"column":75,"index":3902},"line":120,"code":"  test('do not throw an error when fail-on-error enabled and no page errors', async () => {\n    mockGetNuxt({\n      generate: {\n        dir: 'dist'\n      }\n    });\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(exportCommand, ['export', '.', '--fail-on-error']);\n    await cmd.run();\n  });","file":"unit/export.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"has run function","suites":["generate"],"updatePoint":{"line":15,"column":24,"index":597},"line":15,"code":"  test('has run function', () => {\n    expect(typeof generate.run).toBe('function');\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"builds by default","suites":["generate"],"updatePoint":{"line":18,"column":25,"index":689},"line":18,"code":"  test('builds by default', async () => {\n    mockGetNuxt();\n    const generator = mockGetGenerator();\n    await NuxtCommand.from(generate).run();\n    expect(generator).toHaveBeenCalled();\n    expect(generator.mock.calls[0][0].build).toBe(true);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"doesnt build with no-build","suites":["generate"],"updatePoint":{"line":25,"column":34,"index":950},"line":25,"code":"  test('doesnt build with no-build', async () => {\n    mockGetNuxt();\n    const generator = mockGetGenerator();\n    await NuxtCommand.run(generate, ['generate', '.', '--no-build']);\n    expect(generator).toHaveBeenCalled();\n    expect(generator.mock.calls[0][0].build).toBe(false);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"build with devtools","suites":["generate"],"updatePoint":{"line":32,"column":27,"index":1231},"line":32,"code":"  test('build with devtools', async () => {\n    mockGetNuxt();\n    const generator = mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--devtools']);\n    const options = await cmd.getNuxtConfig();\n    await cmd.run();\n    expect(options.vue.config.devtools).toBe(true);\n    expect(generator).toHaveBeenCalled();\n    expect(generator.mock.calls[0][0].build).toBe(true);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate with modern mode","suites":["generate"],"updatePoint":{"line":42,"column":33,"index":1644},"line":42,"code":"  test('generate with modern mode', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--m']);\n    const options = await cmd.getNuxtConfig();\n    await cmd.run();\n    expect(options.modern).toBe('client');\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate force-exits by default","suites":["generate"],"updatePoint":{"line":50,"column":39,"index":1930},"line":50,"code":"  test('generate force-exits by default', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('generate', 5);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate can set force exit explicitly","suites":["generate"],"updatePoint":{"line":58,"column":46,"index":2245},"line":58,"code":"  test('generate can set force exit explicitly', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('generate', false);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate can disable force exit explicitly","suites":["generate"],"updatePoint":{"line":66,"column":50,"index":2584},"line":66,"code":"  test('generate can disable force exit explicitly', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--no-force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate locks project by default twice","suites":["generate"],"updatePoint":{"line":73,"column":47,"index":2852},"line":73,"code":"  test('generate locks project by default twice', async () => {\n    const releaseLock = jest.fn(() => Promise.resolve());\n    const createLock = jest.fn(() => releaseLock);\n    jest.spyOn(utils, 'createLock').mockImplementation(createLock);\n    let buildDone;\n    mockGetNuxt({\n      generate: {}\n    }, {\n      hook: (hookName, fn) => buildDone = fn\n    });\n    mockGetGenerator(async () => {\n      await buildDone();\n      return {\n        errors: []\n      };\n    });\n    const cmd = NuxtCommand.from(generate, ['generate', '.']);\n    await cmd.run();\n    expect(createLock).toHaveBeenCalledTimes(2);\n    expect(releaseLock).toHaveBeenCalledTimes(2);\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"generate can disable locking","suites":["generate"],"updatePoint":{"line":94,"column":36,"index":3500},"line":94,"code":"  test('generate can disable locking', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const createLock = jest.fn(() => Promise.resolve());\n    jest.spyOn(utils, 'createLock').mockImplementationOnce(() => createLock);\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--no-lock']);\n    await cmd.run();\n    expect(createLock).not.toHaveBeenCalled();\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"throw an error when fail-on-error enabled and page errors","suites":["generate"],"updatePoint":{"line":103,"column":65,"index":3910},"line":103,"code":"  test('throw an error when fail-on-error enabled and page errors', async () => {\n    mockGetNuxt();\n    mockGetGenerator(() => ({\n      errors: [{\n        type: 'dummy'\n      }]\n    }));\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--fail-on-error']);\n    await expect(cmd.run()).rejects.toThrow('Error generating pages, exiting with non-zero code');\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"do not throw an error when fail-on-error disabled and page errors","suites":["generate"],"updatePoint":{"line":113,"column":73,"index":4293},"line":113,"code":"  test('do not throw an error when fail-on-error disabled and page errors', async () => {\n    mockGetNuxt();\n    mockGetGenerator(() => ({\n      errors: [{\n        type: 'dummy'\n      }]\n    }));\n    const cmd = NuxtCommand.from(generate, ['generate', '.']);\n    await cmd.run();\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"do not throw an error when fail-on-error enabled and no page errors","suites":["generate"],"updatePoint":{"line":123,"column":75,"index":4581},"line":123,"code":"  test('do not throw an error when fail-on-error enabled and no page errors', async () => {\n    mockGetNuxt();\n    mockGetGenerator();\n    const cmd = NuxtCommand.from(generate, ['generate', '.', '--fail-on-error']);\n    await cmd.run();\n  });","file":"unit/generate.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"run:before hook","suites":["dev"],"updatePoint":{"line":9,"column":23,"index":268},"line":9,"code":"  test('run:before hook', async () => {\n    const hooks = {\n      'run:before': jest.fn()\n    };\n    await NuxtCommand.run(dev, [], hooks);\n    expect(hooks['run:before']).toHaveBeenCalledWith({\n      argv: [],\n      cmd: dev,\n      rootDir: path.resolve('.')\n    });\n  });","file":"unit/hooks.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"run:before hook (custom CLI options & rootDir)","suites":["dev"],"updatePoint":{"line":20,"column":54,"index":573},"line":20,"code":"  test('run:before hook (custom CLI options & rootDir)', async () => {\n    const hooks = {\n      'run:before': jest.fn()\n    };\n    await NuxtCommand.run(dev, ['-p', '3001', 'path/to/project'], hooks);\n    expect(hooks['run:before']).toHaveBeenCalledWith({\n      argv: ['-p', '3001', 'path/to/project'],\n      cmd: dev,\n      rootDir: path.resolve('path/to/project')\n    });\n  });","file":"unit/hooks.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"config hook","suites":["dev"],"updatePoint":{"line":31,"column":19,"index":919},"line":31,"code":"  test('config hook', async () => {\n    const hooks = {\n      config: jest.fn()\n    };\n    await NuxtCommand.run(dev, [], hooks);\n    expect(hooks.config).toHaveBeenCalledWith(expect.objectContaining({\n      _cli: true\n    }));\n  });","file":"unit/hooks.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should import relative module","suites":["imports"],"updatePoint":{"line":3,"column":37,"index":116},"line":3,"code":"  test('should import relative module', async () => {\n    await expect(importModule('jest')).resolves.toBeDefined();\n  });","file":"unit/imports.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should import core module","suites":["imports"],"updatePoint":{"line":6,"column":33,"index":235},"line":6,"code":"  test('should import core module', async () => {\n    await expect(importModule('path')).resolves.toBeDefined();\n  });","file":"unit/imports.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should throw error with proper code when module not found","suites":["imports"],"updatePoint":{"line":9,"column":65,"index":386},"line":9,"code":"  test('should throw error with proper code when module not found', async () => {\n    await expect(importModule('not-found-module')).rejects.toMatchObject({\n      message: 'Cannot import module \\'not-found-module\\'',\n      code: 'MODULE_NOT_FOUND'\n    });\n  });","file":"unit/imports.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should throw error when error is not module not found","suites":["imports"],"updatePoint":{"line":15,"column":61,"index":644},"line":15,"code":"  test('should throw error when error is not module not found', async () => {\n    await expect(importModule('jest/README.md')).rejects.toThrow();\n  });","file":"unit/imports.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should list all commands","suites":["list"],"updatePoint":{"line":39,"column":32,"index":1025},"line":39,"code":"  test('should list all commands', async () => {\n    await listCommands();\n    expect(indent).toBeCalledTimes(5);\n    expect(indent).nthCalledWith(1, 7);\n    expect(indent).nthCalledWith(2, 5);\n    expect(indent).nthCalledWith(3, 2);\n    expect(indent).nthCalledWith(4, 5);\n    expect(indent).nthCalledWith(5, 6);\n    expect(chalk.green).toBeCalledTimes(5);\n    expect(chalk.green).nthCalledWith(1, 'dev');\n    expect(chalk.green).nthCalledWith(2, 'build');\n    expect(chalk.green).nthCalledWith(3, 'generate');\n    expect(chalk.green).nthCalledWith(4, 'start');\n    expect(chalk.green).nthCalledWith(5, 'help');\n    const spaces = [14, 4];\n    expect(foldLines).toBeCalledTimes(7);\n    expect(foldLines).nthCalledWith(1, 'dev dev desc', ...spaces);\n    expect(foldLines).nthCalledWith(2, 'build build desc', ...spaces);\n    expect(foldLines).nthCalledWith(3, 'generate generate desc', ...spaces);\n    expect(foldLines).nthCalledWith(4, 'start start desc', ...spaces);\n    expect(foldLines).nthCalledWith(5, 'help help desc', ...spaces);\n    expect(foldLines).nthCalledWith(6, 'Usage: nuxt <command> [--help|-h]', 2);\n    expect(foldLines).nthCalledWith(7, 'Commands:', 2);\n    expect(colorize).toBeCalledTimes(1);\n    expect(process.stderr.write).toBeCalledTimes(1);\n  });","file":"unit/list.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"throws error if nuxt and nuxt-edge are installed","suites":["run in edge"],"updatePoint":{"line":9,"column":56,"index":302},"line":9,"code":"  test('throws error if nuxt and nuxt-edge are installed', async () => {\n    const mockedCommand = {\n      run: jest.fn(() => Promise.resolve({}))\n    };\n    getCommand.mockImplementationOnce(() => Promise.resolve(mockedCommand));\n    await run();\n    expect(consola.warn).toHaveBeenCalledWith('Both `nuxt` and `nuxt-edge` dependencies are installed! Please choose one and remove the other one from dependencies.');\n  });","file":"unit/run-edge.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"nuxt aliases to nuxt dev","suites":["run"],"updatePoint":{"line":20,"column":32,"index":540},"line":20,"code":"  test('nuxt aliases to nuxt dev', async () => {\n    await run([]);\n    expect(getCommand).toHaveBeenCalledWith('dev');\n    expect(NuxtCommand.run).toHaveBeenCalledWith(expect.anything(), [], {});\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"nuxt --foo aliases to nuxt dev --foo","suites":["run"],"updatePoint":{"line":25,"column":44,"index":755},"line":25,"code":"  test('nuxt --foo aliases to nuxt dev --foo', async () => {\n    await run(['--foo']);\n    expect(getCommand).toHaveBeenCalledWith('dev');\n    expect(NuxtCommand.run).toHaveBeenCalledWith(expect.anything(), ['--foo'], {});\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"all hooks passed to NuxtCommand","suites":["run"],"updatePoint":{"line":30,"column":39,"index":979},"line":30,"code":"  test('all hooks passed to NuxtCommand', async () => {\n    const hooks = {\n      foo: jest.fn()\n    };\n    await run([], hooks);\n    expect(NuxtCommand.run).toHaveBeenCalledWith(expect.anything(), [], hooks);\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"nuxt <dir> aliases to nuxt dev <dir>","suites":["run"],"updatePoint":{"line":37,"column":44,"index":1200},"line":37,"code":"  test('nuxt <dir> aliases to nuxt dev <dir>', async () => {\n    const rootDir = path.resolve(__dirname, '../fixtures');\n    await run([rootDir]);\n    expect(getCommand).toHaveBeenCalledWith('dev');\n    expect(NuxtCommand.run).toHaveBeenCalledWith(expect.anything(), [rootDir], {});\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"external commands","suites":["run"],"updatePoint":{"line":43,"column":25,"index":1470},"line":43,"code":"  test('external commands', async () => {\n    await run(['custom', 'command', '--args']);\n    expect(execa).toHaveBeenCalledWith('nuxt-custom', ['command', '--args'], {\n      stdout: process.stdout,\n      stderr: process.stderr,\n      stdin: process.stdin\n    });\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"throws error if external command not found","suites":["run"],"updatePoint":{"line":51,"column":50,"index":1765},"line":51,"code":"  test('throws error if external command not found', async () => {\n    execa.mockImplementationOnce(() => {\n      const e = new Error('ENOENT');\n      e.exitCode = 2;\n      e.exitName = 'ENOENT';\n      throw e;\n    });\n    await expect(run(['custom', 'command', '--args'])).rejects.toBe('Command not found: nuxt-custom');\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"throws error if external command failed","suites":["run"],"updatePoint":{"line":60,"column":47,"index":2090},"line":60,"code":"  test('throws error if external command failed', async () => {\n    execa.mockImplementationOnce(() => {\n      throw new Error('boo');\n    });\n    await expect(run(['custom', 'command', '--args'])).rejects.toBe('Failed to run command `nuxt-custom`:\\nError: boo');\n  });","file":"unit/run.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"has run function","suites":["serve"],"updatePoint":{"line":14,"column":24,"index":485},"line":14,"code":"  test('has run function', () => {\n    expect(typeof serve.run).toBe('function');\n  });","file":"unit/serve.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"error if dist/ does not exists","suites":["serve"],"line":17,"code":"  test.todo('error if dist/ does not exists'); // test('error if dist/ does not exists', () => {","file":"unit/serve.test.js","skipped":true,"dir":"packages/cli/test"},{"name":"no error if dist/ dir exists","suites":["serve"],"updatePoint":{"line":23,"column":36,"index":949},"line":23,"code":"  test('no error if dist/ dir exists', async () => {\n    mockGetNuxtConfig({\n      target: TARGETS.static\n    });\n    mockNuxt();\n    fs.stat = jest.fn().mockImplementationOnce(() => Promise.resolve({\n      isDirectory: () => true\n    }));\n    fs.readFile = jest.fn().mockImplementationOnce(() => Promise.resolve('HTML here'));\n    await NuxtCommand.from(serve).run();\n    expect(consola.fatal).not.toHaveBeenCalled();\n  });","file":"unit/serve.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"has run function","suites":["start"],"updatePoint":{"line":17,"column":24,"index":523},"line":17,"code":"  test('has run function', () => {\n    expect(typeof start.run).toBe('function');\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"no error if dist dir exists","suites":["start"],"updatePoint":{"line":20,"column":35,"index":622},"line":20,"code":"  test('no error if dist dir exists', async () => {\n    mockGetNuxtStart();\n    mockGetNuxtConfig();\n    await NuxtCommand.from(start).run();\n    expect(consola.fatal).not.toHaveBeenCalled();\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"no error on ssr and server bundle exists","suites":["start"],"updatePoint":{"line":26,"column":48,"index":833},"line":26,"code":"  test('no error on ssr and server bundle exists', async () => {\n    mockGetNuxtStart(true);\n    mockGetNuxtConfig();\n    await NuxtCommand.from(start).run();\n    expect(consola.fatal).not.toHaveBeenCalled();\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"start doesnt force-exit by default","suites":["start"],"updatePoint":{"line":32,"column":42,"index":1042},"line":32,"code":"  test('start doesnt force-exit by default', async () => {\n    mockGetNuxtStart();\n    mockGetNuxtConfig();\n    const cmd = NuxtCommand.from(start, ['start', '.']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"start can set force exit explicitly","suites":["start"],"updatePoint":{"line":39,"column":43,"index":1287},"line":39,"code":"  test('start can set force exit explicitly', async () => {\n    mockGetNuxtStart();\n    mockGetNuxtConfig();\n    const cmd = NuxtCommand.from(start, ['start', '.', '--force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).toHaveBeenCalledTimes(1);\n    expect(utils.forceExit).toHaveBeenCalledWith('start', false);\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"start can disable force exit explicitly","suites":["start"],"updatePoint":{"line":47,"column":47,"index":1620},"line":47,"code":"  test('start can disable force exit explicitly', async () => {\n    mockGetNuxtStart();\n    mockGetNuxtConfig();\n    const cmd = NuxtCommand.from(start, ['start', '.', '--no-force-exit']);\n    await cmd.run();\n    expect(utils.forceExit).not.toHaveBeenCalled();\n  });","file":"unit/start.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"showBanner prints only listeners","suites":["cli/utils"],"updatePoint":{"line":9,"column":40,"index":271},"line":9,"code":"  test('showBanner prints only listeners', () => {\n    const listeners = [{\n      url: 'first'\n    }, {\n      url: 'second'\n    }];\n    showBanner({\n      options: {\n        cli: {\n          bannerColor: 'green'\n        }\n      },\n      server: {\n        listeners\n      }\n    });\n    expect(consola.info).toHaveBeenCalledTimes(2);\n    expect(consola.info).toHaveBeenCalledWith(`Listening on: ${listeners[0].url}`);\n    expect(consola.info).toHaveBeenCalledWith(`Listening on: ${listeners[1].url}`);\n  });","file":"unit/utils-minimalcli.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: defaults","suites":["cli/utils"],"updatePoint":{"line":16,"column":32,"index":617},"line":16,"code":"  test('loadNuxtConfig: defaults', async () => {\n    const argv = {\n      _: ['.'],\n      'config-file': 'nuxt.config.js',\n      universal: true\n    };\n    const options = await loadNuxtConfig(argv);\n    expect(options.rootDir).toBe(process.cwd());\n    expect(options.mode).toBeUndefined();\n    expect(options.ssr).toBe(true);\n    expect(options.server.host).toBe('localhost');\n    expect(options.server.port).toBe(3000);\n    expect(options.server.socket).not.toBeDefined();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: config-file","suites":["cli/utils"],"updatePoint":{"line":30,"column":35,"index":1101},"line":30,"code":"  test('loadNuxtConfig: config-file', async () => {\n    const argv = {\n      _: [__dirname],\n      'config-file': '../fixtures/nuxt.config.js',\n      spa: true\n    };\n    const options = await loadNuxtConfig(argv);\n    expect(options.testOption).toBe(true);\n    expect(options.rootDir).toBe('/some/path');\n    expect(options.mode).toBe('supercharged');\n    expect(options.ssr).toBe(false);\n    expect(options.server.host).toBe('nuxt-host');\n    expect(options.server.port).toBe(3001);\n    expect(options.server.socket).toBe('/var/run/nuxt.sock');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: not-existing config-file","suites":["cli/utils"],"updatePoint":{"line":45,"column":48,"index":1667},"line":45,"code":"  test('loadNuxtConfig: not-existing config-file', async () => {\n    const argv = {\n      _: [__dirname],\n      'config-file': '../fixtures/nuxt.doesnt-exist.js'\n    };\n    const options = await loadNuxtConfig(argv);\n    expect(options.testOption).not.toBeDefined();\n    expect(consola.fatal).toHaveBeenCalledTimes(1);\n    expect(consola.fatal).toHaveBeenCalledWith(expect.stringMatching(/Config file not found/));\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: async config-file","suites":["cli/utils"],"updatePoint":{"line":55,"column":41,"index":2081},"line":55,"code":"  test('loadNuxtConfig: async config-file', async () => {\n    const argv = {\n      _: [__dirname],\n      'config-file': '../fixtures/nuxt.async-config.js',\n      hostname: 'async-host',\n      port: 3002,\n      'unix-socket': '/var/run/async.sock'\n    };\n    const options = await loadNuxtConfig(argv);\n    expect(options.testOption).toBe(true);\n    expect(options.mode).toBe('supercharged');\n    expect(options.server.host).toBe('async-host');\n    expect(options.server.port).toBe(3002);\n    expect(options.server.socket).toBe('/var/run/async.sock');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: passes context to config fn","suites":["cli/utils"],"updatePoint":{"line":70,"column":51,"index":2648},"line":70,"code":"  test('loadNuxtConfig: passes context to config fn', async () => {\n    const argv = {\n      _: [__dirname],\n      'config-file': '../fixtures/nuxt.fn-config.js'\n    };\n    const context = {\n      command: 'test',\n      dev: true\n    };\n    const options = await loadNuxtConfig(argv, context);\n    expect(options.context.command).toBe('test');\n    expect(options.context.dev).toBe(true);\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"loadNuxtConfig: async config-file with error","suites":["cli/utils"],"updatePoint":{"line":83,"column":52,"index":3043},"line":83,"code":"  test('loadNuxtConfig: async config-file with error', async () => {\n    const argv = {\n      _: [__dirname],\n      'config-file': '../fixtures/nuxt.async-error.js'\n    };\n    const options = await loadNuxtConfig(argv);\n    expect(options.testOption).not.toBeDefined();\n    expect(consola.error).toHaveBeenCalledTimes(1);\n    expect(consola.error).toHaveBeenCalledWith(new Error('Async Config Error'));\n    expect(consola.fatal).toHaveBeenCalledWith('Error while fetching async configuration');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"normalizeArg: normalize string argument in command","suites":["cli/utils"],"updatePoint":{"line":94,"column":58,"index":3550},"line":94,"code":"  test('normalizeArg: normalize string argument in command', () => {\n    expect(utils.normalizeArg('true')).toBe(true);\n    expect(utils.normalizeArg('false')).toBe(false);\n    expect(utils.normalizeArg(true)).toBe(true);\n    expect(utils.normalizeArg(false)).toBe(false);\n    expect(utils.normalizeArg('')).toBe(true);\n    expect(utils.normalizeArg(undefined, 'default')).toBe('default');\n    expect(utils.normalizeArg('text')).toBe('text');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"nuxtServerConfig: server env","suites":["cli/utils"],"updatePoint":{"line":103,"column":36,"index":3977},"line":103,"code":"  test('nuxtServerConfig: server env', () => {\n    const options = getDefaultNuxtConfig({\n      env: { ...process.env,\n        HOST: 'env-host',\n        PORT: 3003,\n        UNIX_SOCKET: '/var/run/env.sock'\n      }\n    });\n    expect(options.server.host).toBe('env-host');\n    expect(options.server.port).toBe(3003);\n    expect(options.server.socket).toBe('/var/run/env.sock');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"indent","suites":["cli/utils"],"updatePoint":{"line":115,"column":14,"index":4338},"line":115,"code":"  test('indent', () => {\n    expect(fmt.indent(4)).toBe('    ');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"indent custom char","suites":["cli/utils"],"updatePoint":{"line":118,"column":26,"index":4421},"line":118,"code":"  test('indent custom char', () => {\n    expect(fmt.indent(4, '-')).toBe('----');\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"showBanner prints full-info box with memory usage","suites":["cli/utils"],"updatePoint":{"line":121,"column":57,"index":4540},"line":121,"code":"  test('showBanner prints full-info box with memory usage', () => {\n    const stdout = jest.spyOn(process.stdout, 'write').mockImplementation(() => {});\n    const successBox = jest.fn().mockImplementation((m, t) => t + m);\n    jest.spyOn(fmt, 'successBox').mockImplementation(successBox);\n    const badgeMessages = ['badgeMessage'];\n    const bannerColor = 'green';\n    const listeners = [{\n      url: 'first'\n    }, {\n      url: 'second'\n    }];\n    showBanner({\n      options: {\n        render: {\n          ssr: true\n        },\n        cli: {\n          badgeMessages,\n          bannerColor\n        }\n      },\n      server: {\n        listeners\n      }\n    });\n    expect(successBox).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('Nuxt'));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching(`Listening: ${listeners[0].url}`));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching(`Listening: ${listeners[1].url}`));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('Memory usage'));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('badgeMessage'));\n    stdout.mockRestore();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"showBanner doesnt print memory usage","suites":["cli/utils"],"updatePoint":{"line":155,"column":44,"index":5742},"line":155,"code":"  test('showBanner doesnt print memory usage', () => {\n    const stdout = jest.spyOn(process.stdout, 'write').mockImplementation(() => {});\n    const successBox = jest.fn().mockImplementation((m, t) => t + m);\n    jest.spyOn(fmt, 'successBox').mockImplementation(successBox);\n    showBanner({\n      options: {\n        cli: {\n          badgeMessages: [],\n          bannerColor: 'green'\n        },\n        render: {\n          ssr: false\n        }\n      },\n      server: {\n        listeners: []\n      }\n    }, false);\n    expect(successBox).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('Nuxt'));\n    expect(stdout).not.toHaveBeenCalledWith(expect.stringMatching('Memory usage'));\n    stdout.mockRestore();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"showBanner does print env, rendering mode and target","suites":["cli/utils"],"updatePoint":{"line":179,"column":60,"index":6555},"line":179,"code":"  test('showBanner does print env, rendering mode and target', () => {\n    const stdout = jest.spyOn(process.stdout, 'write').mockImplementation(() => {});\n    const successBox = jest.fn().mockImplementation((m, t) => t + m);\n    jest.spyOn(fmt, 'successBox').mockImplementation(successBox);\n    showBanner({\n      options: {\n        dev: false,\n        target: TARGETS.static,\n        render: {\n          ssr: false\n        },\n        cli: {\n          bannerColor: 'green',\n          badgeMessages: []\n        }\n      },\n      server: {\n        listeners: []\n      }\n    }, false);\n    expect(successBox).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledTimes(1);\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('Nuxt'));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('▸ Environment:'));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('▸ Rendering:'));\n    expect(stdout).toHaveBeenCalledWith(expect.stringMatching('▸ Target:'));\n    stdout.mockRestore();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"showMemoryUsage prints memory usage","suites":["cli/utils"],"updatePoint":{"line":207,"column":43,"index":7558},"line":207,"code":"  test('showMemoryUsage prints memory usage', () => {\n    showMemoryUsage();\n    expect(consola.info).toHaveBeenCalledTimes(1);\n    expect(consola.info).toHaveBeenCalledWith(expect.stringMatching('Memory usage'));\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"forceExit exits after timeout","suites":["cli/utils"],"updatePoint":{"line":212,"column":37,"index":7772},"line":212,"code":"  test('forceExit exits after timeout', () => {\n    jest.useFakeTimers();\n    const exit = jest.spyOn(process, 'exit').mockImplementation(() => {});\n    const stderr = jest.spyOn(process.stderr, 'write').mockImplementation(() => {});\n    utils.forceExit('test', 1);\n    expect(exit).not.toHaveBeenCalled();\n    jest.runAllTimers();\n    expect(stderr).toHaveBeenCalledWith(expect.stringMatching('Nuxt will now force exit'));\n    expect(exit).toHaveBeenCalledTimes(1);\n    stderr.mockRestore();\n    exit.mockRestore();\n    jest.useRealTimers();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"forceExit exits immediately without timeout","suites":["cli/utils"],"updatePoint":{"line":225,"column":51,"index":8335},"line":225,"code":"  test('forceExit exits immediately without timeout', () => {\n    jest.useFakeTimers();\n    const exit = jest.spyOn(process, 'exit').mockImplementation(() => {});\n    const stderr = jest.spyOn(process.stderr, 'write').mockImplementation(() => {});\n    utils.forceExit('test', false);\n    expect(stderr).not.toHaveBeenCalledWith();\n    expect(exit).toHaveBeenCalledTimes(1);\n    stderr.mockRestore();\n    exit.mockRestore();\n    jest.useRealTimers();\n  });","file":"unit/utils.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should return globals with given globalName","suites":["config: common"],"updatePoint":{"line":3,"column":51,"index":140},"line":3,"code":"  test('should return globals with given globalName', () => {\n    const globalName = 'nuxt_global';\n    const {\n      globals\n    } = commonConfig();\n    expect(globals.id(globalName)).toEqual('__nuxt_global');\n    expect(globals.nuxt(globalName)).toEqual('$nuxt_global');\n    expect(globals.context(globalName)).toEqual('__NUXT_GLOBAL__');\n    expect(globals.pluginPrefix(globalName)).toEqual('nuxt_global');\n    expect(globals.readyCallback(globalName)).toEqual('onNuxt_globalReady');\n    expect(globals.loadedCallback(globalName)).toEqual('_onNuxt_globalLoaded');\n  });","file":"config/_common.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return dev filenames","suites":["config: build"],"updatePoint":{"line":3,"column":35,"index":120},"line":3,"code":"  test('should return dev filenames', () => {\n    const {\n      filenames\n    } = buildConfig();\n    const env = {\n      isDev: true\n    };\n    expect(filenames.app(env)).toEqual('[name].js');\n    expect(filenames.chunk(env)).toEqual('[name].js');\n    expect(filenames.css(env)).toEqual('[name].css');\n    expect(filenames.img(env)).toEqual('[path][name].[ext]');\n    expect(filenames.font(env)).toEqual('[path][name].[ext]');\n    expect(filenames.video(env)).toEqual('[path][name].[ext]');\n  });","file":"config/build.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return prod filenames","suites":["config: build"],"updatePoint":{"line":17,"column":36,"index":618},"line":17,"code":"  test('should return prod filenames', () => {\n    const {\n      filenames\n    } = buildConfig();\n    const env = {\n      isDev: false\n    };\n    expect(filenames.app(env)).toEqual('[contenthash:7].js');\n    expect(filenames.chunk(env)).toEqual('[contenthash:7].js');\n    expect(filenames.css(env)).toEqual('css/[contenthash:7].css');\n    expect(filenames.img(env)).toEqual('img/[name].[contenthash:7].[ext]');\n    expect(filenames.font(env)).toEqual('fonts/[name].[contenthash:7].[ext]');\n    expect(filenames.video(env)).toEqual('videos/[name].[contenthash:7].[ext]');\n  });","file":"config/build.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return modern filenames","suites":["config: build"],"updatePoint":{"line":31,"column":38,"index":1197},"line":31,"code":"  test('should return modern filenames', () => {\n    const {\n      filenames\n    } = buildConfig();\n    const env = {\n      isDev: true,\n      isModern: true\n    };\n    expect(filenames.app(env)).toEqual('[name].modern.js');\n    expect(filenames.chunk(env)).toEqual('[name].modern.js');\n  });","file":"config/build.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return default nuxt configurations","suites":["config"],"updatePoint":{"line":14,"column":49,"index":337},"line":14,"code":"  test('should return default nuxt configurations', () => {\n    expect(getDefaultNuxtConfig()).toMatchSnapshot();\n  });","file":"config/index.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return nuxt configurations with custom env","suites":["config"],"updatePoint":{"line":17,"column":57,"index":465},"line":17,"code":"  test('should return nuxt configurations with custom env', () => {\n    const env = {\n      NUXT_PORT: '3001',\n      NUXT_HOST: 'localhost',\n      UNIX_SOCKET: '/var/run/nuxt.sock'\n    };\n    expect(getDefaultNuxtConfig({\n      env\n    })).toMatchSnapshot();\n  });","file":"config/index.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return false in default shouldPrefetch","suites":["config: render"],"updatePoint":{"line":3,"column":53,"index":141},"line":3,"code":"  test('should return false in default shouldPrefetch', () => {\n    const {\n      bundleRenderer: {\n        shouldPrefetch\n      }\n    } = renderConfig();\n    expect(shouldPrefetch()).toEqual(false);\n  });","file":"config/render.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return true in script/style shouldPreload","suites":["config: render"],"updatePoint":{"line":11,"column":56,"index":350},"line":11,"code":"  test('should return true in script/style shouldPreload', () => {\n    const {\n      bundleRenderer: {\n        shouldPreload\n      }\n    } = renderConfig();\n    expect(shouldPreload(undefined, 'script')).toEqual(true);\n    expect(shouldPreload(undefined, 'style')).toEqual(true);\n  });","file":"config/render.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return false in other shouldPreload","suites":["config: render"],"updatePoint":{"line":20,"column":50,"index":630},"line":20,"code":"  test('should return false in other shouldPreload', () => {\n    const {\n      bundleRenderer: {\n        shouldPreload\n      }\n    } = renderConfig();\n    expect(shouldPreload(undefined, 'font')).toEqual(false);\n  });","file":"config/render.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return server configurations with NUXT_* env","suites":["config: server"],"updatePoint":{"line":4,"column":59,"index":186},"line":4,"code":"  test('should return server configurations with NUXT_* env', () => {\n    const env = {\n      NUXT_PORT: 3001,\n      NUXT_HOST: '127.0.0.1'\n    };\n    expect(serverConfig({\n      env\n    })).toEqual({ ...serverDefaults,\n      port: env.NUXT_PORT,\n      host: env.NUXT_HOST\n    });\n  });","file":"config/server.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return server configurations with env","suites":["config: server"],"updatePoint":{"line":16,"column":52,"index":466},"line":16,"code":"  test('should return server configurations with env', () => {\n    const env = {\n      PORT: 3002,\n      HOST: 'local.env',\n      UNIX_SOCKET: '/var/run/env.sock'\n    };\n    expect(serverConfig({\n      env\n    })).toEqual({ ...serverDefaults,\n      port: env.PORT,\n      host: env.HOST,\n      socket: env.UNIX_SOCKET\n    });\n  });","file":"config/server.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return server configurations with npm_* env","suites":["config: server"],"updatePoint":{"line":30,"column":58,"index":803},"line":30,"code":"  test('should return server configurations with npm_* env', () => {\n    const env = {\n      npm_package_config_nuxt_port: 3003,\n      npm_package_config_nuxt_host: 'local.npm',\n      npm_package_config_unix_socket: '/var/run/env.npm.sock'\n    };\n    expect(serverConfig({\n      env\n    })).toEqual({ ...serverDefaults,\n      port: env.npm_package_config_nuxt_port,\n      host: env.npm_package_config_nuxt_host,\n      socket: env.npm_package_config_unix_socket\n    });\n  });","file":"config/server.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should export getDefaultNuxtConfig and getNuxtConfig","suites":["config: entry"],"updatePoint":{"line":9,"column":60,"index":347},"line":9,"code":"  test('should export getDefaultNuxtConfig and getNuxtConfig', () => {\n    expect(getNuxtConfig()).toEqual('nuxt config');\n    expect(getDefaultNuxtConfig()).toEqual('default nuxt config');\n  });","file":"index.test.js","skipped":false,"dir":"packages/config/test"},{"name":"load local nuxtrc","suites":["config: load"],"updatePoint":{"line":4,"column":25,"index":137},"line":4,"code":"  test('load local nuxtrc', async () => {\n    const config = await loadNuxtConfig({\n      rootDir: resolve(__dirname, 'fixtures/nuxtrc')\n    });\n    expect(config.rc.works).toBe(true);\n  });","file":"load.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return default nuxt config","suites":["config: options"],"updatePoint":{"line":24,"column":41,"index":573},"line":24,"code":"  test('should return default nuxt config', () => {\n    jest.spyOn(process, 'cwd').mockReturnValue('/var/nuxt/test');\n    jest.spyOn(path, 'resolve').mockImplementation((...args) => args.join('/').replace(/\\\\+/, '/'));\n    jest.spyOn(path, 'join').mockImplementation((...args) => args.join('/').replace(/\\\\+/, '/'));\n    expect(getNuxtConfig({\n      createRequire: jest.fn(),\n      generate: {\n        staticAssets: {\n          version: 'x'\n        }\n      }\n    })).toMatchSnapshot();\n    process.cwd.mockRestore();\n    path.resolve.mockRestore();\n    path.join.mockRestore();\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should prevent duplicate calls with same options","suites":["config: options"],"updatePoint":{"line":40,"column":56,"index":1172},"line":40,"code":"  test('should prevent duplicate calls with same options', () => {\n    const options = {};\n    const firstConfig = getNuxtConfig(options);\n    const secondConfig = getNuxtConfig(firstConfig);\n    expect(firstConfig).toBe(secondConfig);\n    expect(firstConfig.__normalized__).toBe(true);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return default loading when loading is true","suites":["config: options"],"updatePoint":{"line":47,"column":58,"index":1467},"line":47,"code":"  test('should return default loading when loading is true', () => {\n    const {\n      loading\n    } = getNuxtConfig({\n      loading: true\n    });\n    expect(loading).toEqual({\n      color: 'black',\n      failedColor: 'red',\n      height: '2px',\n      throttle: 200,\n      duration: 5000,\n      continuous: false,\n      rtl: false,\n      css: true\n    });\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"[Compatibility] should transform transition to pageTransition","suites":["config: options"],"updatePoint":{"line":64,"column":69,"index":1840},"line":64,"code":"  test('[Compatibility] should transform transition to pageTransition', () => {\n    const {\n      pageTransition,\n      transition\n    } = getNuxtConfig({\n      transition: 'test-tran'\n    });\n    expect(pageTransition).toMatchObject({\n      name: 'test-tran'\n    });\n    expect(transition).toBeUndefined();\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should transform pageTransition/layoutTransition to name","suites":["config: options"],"updatePoint":{"line":76,"column":64,"index":2149},"line":76,"code":"  test('should transform pageTransition/layoutTransition to name', () => {\n    const {\n      pageTransition,\n      layoutTransition\n    } = getNuxtConfig({\n      pageTransition: 'test-tran',\n      layoutTransition: 'test-layout-tran'\n    });\n    expect(pageTransition).toMatchObject({\n      name: 'test-tran'\n    });\n    expect(layoutTransition).toMatchObject({\n      name: 'test-layout-tran'\n    });\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should transform extensions to array","suites":["config: options"],"updatePoint":{"line":91,"column":44,"index":2536},"line":91,"code":"  test('should transform extensions to array', () => {\n    const {\n      extensions\n    } = getNuxtConfig({\n      extensions: 'ext'\n    });\n    expect(extensions).toEqual(['js', 'mjs', 'ext']);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should support custom global name","suites":["config: options"],"updatePoint":{"line":99,"column":41,"index":2733},"line":99,"code":"  test('should support custom global name', () => {\n    const {\n      globalName\n    } = getNuxtConfig({\n      globalName: 'globalNuxt'\n    });\n    expect(globalName).toEqual('globalnuxt');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should detect store dir","suites":["config: options"],"updatePoint":{"line":107,"column":31,"index":2919},"line":107,"code":"  test('should detect store dir', () => {\n    const {\n      store\n    } = getNuxtConfig({\n      rootDir: path.resolve(__dirname, 'fixtures')\n    });\n    expect(store).toEqual(true);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should unset and warn when etag.hash not a function","suites":["config: options"],"updatePoint":{"line":115,"column":59,"index":3135},"line":115,"code":"  test('should unset and warn when etag.hash not a function', () => {\n    const {\n      render: {\n        etag\n      }\n    } = getNuxtConfig({\n      render: {\n        etag: {\n          hash: true\n        }\n      }\n    });\n    expect(etag).toMatchObject({\n      hash: undefined\n    });\n    expect(consola.warn).not.toHaveBeenCalledWith('render.etag.hash should be a function, received boolean instead');\n    const {\n      render: {\n        etag: etagDev\n      }\n    } = getNuxtConfig({\n      dev: true,\n      render: {\n        etag: {\n          hash: true\n        }\n      }\n    });\n    expect(etagDev).toMatchObject({\n      hash: undefined\n    });\n    expect(consola.warn).toHaveBeenCalledWith('render.etag.hash should be a function, received boolean instead');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should enable csp","suites":["config: options"],"updatePoint":{"line":148,"column":25,"index":3868},"line":148,"code":"  test('should enable csp', () => {\n    const {\n      render: {\n        csp\n      }\n    } = getNuxtConfig({\n      render: {\n        csp: {\n          allowedSources: ['/nuxt/*'],\n          test: true\n        }\n      }\n    });\n    expect(csp).toEqual({\n      hashAlgorithm: 'sha256',\n      addMeta: false,\n      unsafeInlineCompatibility: false,\n      allowedSources: ['/nuxt/*'],\n      policies: undefined,\n      reportOnly: false,\n      test: true\n    });\n  }); // TODO: Remove this test in Nuxt 3, we will stop supporting this typo (more on: https://github.com/nuxt/nuxt.js/pull/6583)","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should enable csp with old typo property name, avoiding breaking changes","suites":["config: options"],"updatePoint":{"line":172,"column":80,"index":4510},"line":172,"code":"  test('should enable csp with old typo property name, avoiding breaking changes', () => {\n    const {\n      render: {\n        csp\n      }\n    } = getNuxtConfig({\n      render: {\n        csp: {\n          allowedSources: ['/nuxt/*'],\n          test: true,\n          unsafeInlineCompatiblity: true\n        }\n      }\n    });\n    expect(csp).toEqual({\n      hashAlgorithm: 'sha256',\n      addMeta: false,\n      unsafeInlineCompatibility: true,\n      allowedSources: ['/nuxt/*'],\n      policies: undefined,\n      reportOnly: false,\n      test: true\n    });\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should fallback to server target","suites":["config: options"],"updatePoint":{"line":196,"column":40,"index":5028},"line":196,"code":"  test('should fallback to server target', () => {\n    const {\n      target\n    } = getNuxtConfig({\n      target: 0\n    });\n    expect(target).toEqual('server');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should check unknown target","suites":["config: options"],"updatePoint":{"line":204,"column":35,"index":5191},"line":204,"code":"  test('should check unknown target', () => {\n    const {\n      target\n    } = getNuxtConfig({\n      target: 'test'\n    });\n    expect(consola.warn).toHaveBeenCalledWith('Unknown target: test. Falling back to server');\n    expect(target).toEqual('server');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should check unknown mode","suites":["config: options"],"updatePoint":{"line":213,"column":33,"index":5452},"line":213,"code":"  test('should check unknown mode', () => {\n    const {\n      build,\n      render\n    } = getNuxtConfig({\n      mode: 'test'\n    });\n    expect(consola.warn).toHaveBeenCalledWith('Unknown mode: test. Falling back to universal');\n    expect(build.ssr).toEqual(true);\n    expect(render.ssr).toEqual(true);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should add appear true in pageTransition when no ssr","suites":["config: options"],"updatePoint":{"line":224,"column":60,"index":5789},"line":224,"code":"  test('should add appear true in pageTransition when no ssr', () => {\n    const {\n      pageTransition\n    } = getNuxtConfig({\n      render: {\n        ssr: false\n      }\n    });\n    expect(pageTransition.appear).toEqual(true);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return 200.html as default generate.fallback","suites":["config: options"],"updatePoint":{"line":234,"column":59,"index":6022},"line":234,"code":"  test('should return 200.html as default generate.fallback', () => {\n    const {\n      generate: {\n        fallback\n      }\n    } = getNuxtConfig({});\n    expect(fallback).toEqual('200.html');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return 404.html when generate.fallback is true","suites":["config: options"],"updatePoint":{"line":242,"column":61,"index":6224},"line":242,"code":"  test('should return 404.html when generate.fallback is true', () => {\n    const {\n      generate: {\n        fallback\n      }\n    } = getNuxtConfig({\n      generate: {\n        fallback: true\n      }\n    });\n    expect(fallback).toEqual('404.html');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should return fallback html when generate.fallback is string","suites":["config: options"],"updatePoint":{"line":254,"column":68,"index":6487},"line":254,"code":"  test('should return fallback html when generate.fallback is string', () => {\n    const {\n      generate: {\n        fallback\n      }\n    } = getNuxtConfig({\n      generate: {\n        fallback: 'fallback.html'\n      }\n    });\n    expect(fallback).toEqual('fallback.html');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"export should alias to generate","suites":["config: options"],"updatePoint":{"line":266,"column":39,"index":6737},"line":266,"code":"  test('export should alias to generate', () => {\n    const {\n      generate: {\n        fallback\n      }\n    } = getNuxtConfig({\n      export: {\n        fallback: 'fallback.html'\n      }\n    });\n    expect(fallback).toEqual('fallback.html');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should disable parallel if extractCSS is enabled","suites":["config: options"],"updatePoint":{"line":278,"column":56,"index":7002},"line":278,"code":"  test('should disable parallel if extractCSS is enabled', () => {\n    const {\n      build: {\n        parallel\n      }\n    } = getNuxtConfig({\n      build: {\n        extractCSS: true,\n        parallel: true\n      }\n    });\n    expect(parallel).toEqual(false);\n    expect(consola.warn).toHaveBeenCalledWith('extractCSS cannot work with parallel build due to limited work pool in thread-loader');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should transform middleware to array","suites":["config: options","config: router dir"],"updatePoint":{"line":293,"column":46,"index":7434},"line":293,"code":"    test('should transform middleware to array', () => {\n      const {\n        router: {\n          middleware\n        }\n      } = getNuxtConfig({\n        router: {\n          middleware: 'midd'\n        }\n      });\n      expect(middleware).toEqual(['midd']);\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should set _routerBaseSpecified when base is specified","suites":["config: options","config: router dir"],"updatePoint":{"line":305,"column":64,"index":7717},"line":305,"code":"    test('should set _routerBaseSpecified when base is specified', () => {\n      const {\n        _routerBaseSpecified\n      } = getNuxtConfig({\n        router: {\n          base: '/test'\n        }\n      });\n      expect(_routerBaseSpecified).toEqual(true);\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should support custom root dir","suites":["config: options","config: options dir"],"updatePoint":{"line":317,"column":40,"index":8005},"line":317,"code":"    test('should support custom root dir', () => {\n      const {\n        rootDir\n      } = getNuxtConfig({\n        rootDir: 'root'\n      });\n      expect(rootDir).toEqual(path.resolve('root'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should support custom src dir","suites":["config: options","config: options dir"],"updatePoint":{"line":325,"column":39,"index":8206},"line":325,"code":"    test('should support custom src dir', () => {\n      const {\n        srcDir\n      } = getNuxtConfig({\n        rootDir: 'root',\n        srcDir: 'src'\n      });\n      expect(srcDir).toEqual(path.resolve('root', 'src'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should support custom generate dir","suites":["config: options","config: options dir"],"updatePoint":{"line":334,"column":44,"index":8440},"line":334,"code":"    test('should support custom generate dir', () => {\n      const {\n        generate: {\n          dir\n        }\n      } = getNuxtConfig({\n        rootDir: 'root',\n        generate: {\n          dir: 'generate'\n        }\n      });\n      expect(dir).toEqual(path.resolve('root', 'generate'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should use default appTemplatePath","suites":["config: options","config: options template"],"updatePoint":{"line":349,"column":44,"index":8792},"line":349,"code":"    test('should use default appTemplatePath', () => {\n      const {\n        appTemplatePath\n      } = getNuxtConfig({});\n      expect(appTemplatePath).toEqual(path.resolve('.nuxt', 'views', 'app.template.html'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should use custom appTemplatePath","suites":["config: options","config: options template"],"updatePoint":{"line":355,"column":43,"index":9013},"line":355,"code":"    test('should use custom appTemplatePath', () => {\n      const {\n        appTemplatePath\n      } = getNuxtConfig({\n        appTemplatePath: 'templates'\n      });\n      expect(appTemplatePath).toEqual(path.resolve('templates'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should use custom app.html","suites":["config: options","config: options template"],"updatePoint":{"line":363,"column":36,"index":9245},"line":363,"code":"    test('should use custom app.html', () => {\n      const {\n        appTemplatePath\n      } = getNuxtConfig({\n        rootDir: path.resolve(__dirname, 'fixtures')\n      });\n      expect(appTemplatePath).toEqual(path.resolve(__dirname, 'fixtures', 'app.html'));\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should fallback to default when publicPath is falsy","suites":["config: options","config: options publicPath"],"updatePoint":{"line":373,"column":61,"index":9595},"line":373,"code":"    test('should fallback to default when publicPath is falsy', () => {\n      const {\n        build: {\n          publicPath\n        }\n      } = getNuxtConfig({\n        build: {\n          publicPath: false\n        }\n      });\n      expect(publicPath).toEqual('/_nuxt/');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should append slash in publicPath","suites":["config: options","config: options publicPath"],"updatePoint":{"line":385,"column":43,"index":9855},"line":385,"code":"    test('should append slash in publicPath', () => {\n      const {\n        build: {\n          publicPath\n        }\n      } = getNuxtConfig({\n        build: {\n          publicPath: '/nuxt_public'\n        }\n      });\n      expect(publicPath).toEqual('/nuxt_public/');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should ignore url publicPath in dev","suites":["config: options","config: options publicPath"],"updatePoint":{"line":397,"column":45,"index":10132},"line":397,"code":"    test('should ignore url publicPath in dev', () => {\n      const {\n        build: {\n          publicPath\n        }\n      } = getNuxtConfig({\n        dev: true,\n        build: {\n          publicPath: 'http://nuxt_public'\n        }\n      });\n      expect(publicPath).toEqual('/_nuxt/');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should replace and deprecate @nuxtjs/babel-preset-app","suites":["config: options","config: options babel"],"updatePoint":{"line":412,"column":63,"index":10496},"line":412,"code":"    test('should replace and deprecate @nuxtjs/babel-preset-app', () => {\n      const {\n        build: {\n          babel\n        }\n      } = getNuxtConfig({\n        build: {\n          babel: {\n            presets: ['@nuxtjs/babel-preset-app']\n          }\n        }\n      });\n      expect(consola.warn).toHaveBeenCalledWith('@nuxtjs/babel-preset-app has been deprecated, please use @nuxt/babel-preset-app.');\n      expect(babel).toEqual({\n        configFile: false,\n        babelrc: false,\n        cacheDirectory: false,\n        presets: ['@nuxt/babel-preset-app']\n      });\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should support options in babel presets","suites":["config: options","config: options babel"],"updatePoint":{"line":432,"column":49,"index":11064},"line":432,"code":"    test('should support options in babel presets', () => {\n      const {\n        build: {\n          babel\n        }\n      } = getNuxtConfig({\n        build: {\n          babel: {\n            presets: [['@nuxt/babel-preset-app', {\n              test: true\n            }]]\n          }\n        }\n      });\n      expect(babel).toEqual({\n        configFile: false,\n        babelrc: false,\n        cacheDirectory: false,\n        presets: [['@nuxt/babel-preset-app', {\n          test: true\n        }]]\n      });\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should deprecate render.gzip","suites":["config: options","config: options deprecated"],"updatePoint":{"line":457,"column":38,"index":11621},"line":457,"code":"    test('should deprecate render.gzip', () => {\n      getNuxtConfig({\n        render: {\n          gzip: true\n        }\n      });\n      expect(consola.warn).toHaveBeenCalledWith('render.gzip is deprecated and will be removed in a future version! Please switch to render.compressor');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should deprecate build.vendor","suites":["config: options","config: options deprecated"],"updatePoint":{"line":465,"column":39,"index":11914},"line":465,"code":"    test('should deprecate build.vendor', () => {\n      getNuxtConfig({\n        build: {\n          vendor: ['lodash']\n        }\n      });\n      expect(consola.warn).toHaveBeenCalledWith('vendor has been deprecated due to webpack4 optimization');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should deprecate devModules","suites":["config: options","config: options deprecated"],"updatePoint":{"line":473,"column":37,"index":12166},"line":473,"code":"    test('should deprecate devModules', () => {\n      const config = getNuxtConfig({\n        devModules: ['foo'],\n        buildModules: ['bar']\n      });\n      expect(consola.warn).toHaveBeenCalledWith('`devModules` has been renamed to `buildModules` and will be removed in Nuxt 3.');\n      expect(config.devModules).toBe(undefined);\n      expect(config.buildModules).toEqual(['bar', 'foo']);\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should deprecate build.extractCSS.allChunks","suites":["config: options","config: options deprecated"],"updatePoint":{"line":482,"column":53,"index":12583},"line":482,"code":"    test('should deprecate build.extractCSS.allChunks', () => {\n      getNuxtConfig({\n        build: {\n          extractCSS: {\n            allChunks: true\n          }\n        }\n      });\n      expect(consola.warn).toHaveBeenCalledWith('build.extractCSS.allChunks has no effect from v2.0.0. Please use build.optimization.splitChunks settings instead.');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should deprecate build.crossorigin","suites":["config: options","config: options deprecated"],"updatePoint":{"line":492,"column":44,"index":12935},"line":492,"code":"    test('should deprecate build.crossorigin', () => {\n      getNuxtConfig({\n        build: {\n          crossorigin: 'use-credentials'\n        }\n      });\n      expect(consola.warn).toHaveBeenCalledWith('Using `build.crossorigin` is deprecated and will be removed in Nuxt 3. Please use `render.crossorigin` instead.');\n    });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should transform serverMiddleware hash","suites":["config: serverMiddleware"],"updatePoint":{"line":503,"column":46,"index":13319},"line":503,"code":"  test('should transform serverMiddleware hash', () => {\n    const serverMiddleware = {\n      '/resource': (req, res, next) => {}\n    };\n    const config = getNuxtConfig({\n      serverMiddleware\n    });\n    expect(config.serverMiddleware[0].path).toBe('/resource');\n    expect(config.serverMiddleware[0].handler).toBe(serverMiddleware['/resource']);\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should sanitize router.base","suites":["config: router"],"updatePoint":{"line":515,"column":35,"index":13703},"line":515,"code":"  test('should sanitize router.base', () => {\n    const config = getNuxtConfig({\n      router: {\n        base: '/foo'\n      }\n    });\n    expect(config.router.base).toBe('/foo/');\n  });","file":"options.test.js","skipped":false,"dir":"packages/config/test"},{"name":"should export Module, Nuxt and Resolver","suites":["core: entry"],"updatePoint":{"line":10,"column":47,"index":285},"line":10,"code":"  test('should export Module, Nuxt and Resolver', () => {\n    expect(Module.module).toEqual(true);\n    expect(Nuxt.nuxt).toEqual(true);\n    expect(Resolver.resolver).toEqual(true);\n  });","file":"index.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should construct module container","suites":["core: module"],"updatePoint":{"line":34,"column":41,"index":990},"line":34,"code":"  test('should construct module container', () => {\n    const nuxt = jest.fn();\n    nuxt.options = jest.fn();\n    const module = new ModuleContainer(nuxt);\n    expect(module.nuxt).toBe(nuxt);\n    expect(module.options).toBe(nuxt.options);\n    expect(module.requiredModules).toEqual({});\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should call hooks and addModule when ready","suites":["core: module"],"updatePoint":{"line":42,"column":50,"index":1292},"line":42,"code":"  test('should call hooks and addModule when ready', async () => {\n    const nuxt = {\n      options: { ...defaultOptions,\n        modules: [jest.fn(), jest.fn()]\n      },\n      callHook: jest.fn()\n    };\n    const module = new ModuleContainer(nuxt);\n    module.addModule = jest.fn();\n    await module.ready();\n    expect(nuxt.callHook).toBeCalledTimes(2);\n    expect(nuxt.callHook).nthCalledWith(1, 'modules:before', module, module.options.modules);\n    expect(nuxt.callHook).nthCalledWith(2, 'modules:done', module);\n    expect(module.addModule).toBeCalledTimes(2);\n    expect(module.addModule).nthCalledWith(1, module.options.modules[0]);\n    expect(module.addModule).nthCalledWith(2, module.options.modules[1]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated message for addVendor","suites":["core: module"],"updatePoint":{"line":59,"column":55,"index":2018},"line":59,"code":"  test('should display deprecated message for addVendor', () => {\n    new ModuleContainer({ ...defaultOptions\n    }).addVendor();\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('addVendor has been deprecated due to webpack4 optimization');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add string template","suites":["core: module"],"updatePoint":{"line":65,"column":34,"index":2281},"line":65,"code":"  test('should add string template', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        build: {\n          templates: []\n        }\n      }\n    });\n    const template = module.addTemplate('/var/nuxt/test');\n    const expected = {\n      dst: 'nuxt.test.hash(/var/nuxt/test)',\n      options: undefined,\n      src: '/var/nuxt/test'\n    };\n    expect(template).toEqual(expected);\n    expect(module.options.build.templates).toEqual([expected]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add object template","suites":["core: module"],"updatePoint":{"line":82,"column":34,"index":2768},"line":82,"code":"  test('should add object template', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        build: {\n          templates: []\n        }\n      }\n    });\n    const template = module.addTemplate({\n      src: '/var/nuxt/test',\n      options: {\n        test: true\n      }\n    });\n    const expected = {\n      dst: 'nuxt.test.hash(/var/nuxt/test)',\n      options: {\n        test: true\n      },\n      src: '/var/nuxt/test'\n    };\n    expect(template).toEqual(expected);\n    expect(module.options.build.templates).toEqual([expected]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should use filename in preference to calculation","suites":["core: module"],"updatePoint":{"line":106,"column":56,"index":3360},"line":106,"code":"  test('should use filename in preference to calculation', () => {\n    const module = new ModuleContainer({ ...defaultOptions,\n      options: {\n        build: {\n          templates: []\n        }\n      }\n    });\n    const template = module.addTemplate({\n      src: '/var/nuxt/test',\n      fileName: '/var/nuxt/dist/test'\n    });\n    const expected = {\n      dst: '/var/nuxt/dist/test',\n      options: undefined,\n      src: '/var/nuxt/test'\n    };\n    expect(template).toEqual(expected);\n    expect(module.options.build.templates).toEqual([expected]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw error when template invalid","suites":["core: module"],"updatePoint":{"line":126,"column":48,"index":3908},"line":126,"code":"  test('should throw error when template invalid', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions\n      }\n    });\n    expect(() => module.addTemplate()).toThrow('Invalid template: undefined');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw error when template not found","suites":["core: module"],"updatePoint":{"line":133,"column":50,"index":4146},"line":133,"code":"  test('should throw error when template not found', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions\n      }\n    });\n    fs.existsSync = jest.fn(() => false);\n    expect(() => module.addTemplate('/var/nuxt/test')).toThrow('Template src not found: /var/nuxt/test');\n    fs.existsSync = jest.fn(Boolean);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add plugin into module","suites":["core: module"],"updatePoint":{"line":142,"column":37,"index":4478},"line":142,"code":"  test('should add plugin into module', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        buildDir: '/var/nuxt/build',\n        plugins: []\n      }\n    });\n    module.addTemplate = jest.fn(() => ({\n      dst: 'nuxt.test.template'\n    }));\n    module.addPlugin({\n      ssr: false,\n      mode: 'client'\n    });\n    expect(module.options.plugins).toEqual([{\n      src: path.join('/var/nuxt/build', 'nuxt.test.template'),\n      ssr: false,\n      mode: 'client'\n    }]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add layout into module","suites":["core: module"],"updatePoint":{"line":162,"column":37,"index":4992},"line":162,"code":"  test('should add layout into module', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        layouts: {}\n      }\n    });\n    module.addTemplate = jest.fn(() => ({\n      dst: 'nuxt.test.template',\n      src: '/var/nuxt/src'\n    }));\n    module.addLayout({}, 'test-layout');\n    expect(module.options.layouts).toEqual({\n      'test-layout': './nuxt.test.template'\n    });\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated message when registration is duplicate","suites":["core: module"],"updatePoint":{"line":177,"column":72,"index":5443},"line":177,"code":"  test('should display deprecated message when registration is duplicate', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        layouts: {\n          'test-layout': 'test.template'\n        }\n      }\n    });\n    module.addTemplate = jest.fn(() => ({\n      dst: 'nuxt.test.template',\n      src: '/var/nuxt/src'\n    }));\n    module.addLayout({}, 'test-layout');\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('Duplicate layout registration, \"test-layout\" has been registered as \"test.template\"');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should register error layout at same time","suites":["core: module"],"updatePoint":{"line":193,"column":49,"index":5997},"line":193,"code":"  test('should register error layout at same time', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        layouts: {}\n      }\n    });\n    module.addErrorLayout = jest.fn();\n    module.addTemplate = jest.fn(() => ({\n      dst: 'nuxt.test.template',\n      src: '/var/nuxt/src'\n    }));\n    module.addLayout({}, 'error');\n    expect(module.options.layouts).toEqual({\n      error: './nuxt.test.template'\n    });\n    expect(module.addErrorLayout).toBeCalledTimes(1);\n    expect(module.addErrorLayout).toBeCalledWith('nuxt.test.template');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add error layout","suites":["core: module"],"updatePoint":{"line":211,"column":31,"index":6558},"line":211,"code":"  test('should add error layout', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        rootDir: '/var/nuxt',\n        buildDir: '/var/nuxt/build',\n        layouts: {}\n      }\n    });\n    module.addErrorLayout('error.template');\n    expect(module.options.ErrorPage).toEqual('~/build/error.template');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add server middleware","suites":["core: module"],"updatePoint":{"line":222,"column":36,"index":6908},"line":222,"code":"  test('should add server middleware', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        serverMiddleware: []\n      }\n    });\n    module.addServerMiddleware(() => {});\n    module.addServerMiddleware(() => {});\n    expect(module.options.serverMiddleware).toHaveLength(2);\n    expect(module.options.serverMiddleware).toEqual([expect.any(Function), expect.any(Function)]);\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should chain build.extend","suites":["core: module"],"updatePoint":{"line":233,"column":33,"index":7324},"line":233,"code":"  test('should chain build.extend', () => {\n    const extend = () => {};\n\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        build: {\n          extend\n        }\n      }\n    });\n\n    const newExtend = () => {};\n\n    module.extendBuild(newExtend);\n    expect(chainFn).toBeCalledTimes(1);\n    expect(chainFn).toBeCalledWith(extend, newExtend);\n    expect(module.options.build.extend).toEqual('chainedFn');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should chain router.extendRoutes","suites":["core: module"],"updatePoint":{"line":251,"column":40,"index":7774},"line":251,"code":"  test('should chain router.extendRoutes', () => {\n    const extendRoutes = () => {};\n\n    const module = new ModuleContainer({\n      options: { ...defaultOptions,\n        router: {\n          extendRoutes\n        }\n      }\n    });\n\n    const newExtendRoutes = () => {};\n\n    module.extendRoutes(newExtendRoutes);\n    expect(chainFn).toBeCalledTimes(1);\n    expect(chainFn).toBeCalledWith(extendRoutes, newExtendRoutes);\n    expect(module.options.router.extendRoutes).toEqual('chainedFn');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should call addModule when require module","suites":["core: module"],"updatePoint":{"line":269,"column":49,"index":8278},"line":269,"code":"  test('should call addModule when require module', () => {\n    const module = new ModuleContainer({\n      options: { ...defaultOptions\n      }\n    });\n    module.addModule = jest.fn();\n    const moduleOpts = {};\n    module.requireModule(moduleOpts);\n    expect(module.addModule).toBeCalledTimes(1);\n    expect(module.addModule).toBeCalledWith(moduleOpts, undefined, {\n      paths: undefined\n    });\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add string module","suites":["core: module"],"updatePoint":{"line":282,"column":32,"index":8667},"line":282,"code":"  test('should add string module', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions\n      }\n    });\n    const result = await module.addModule('moduleTest');\n    expect(requireModule).toBeCalledTimes(1);\n    expect(requireModule).toBeCalledWith('moduleTest', {\n      paths: undefined\n    });\n    expect(module.requiredModules).toEqual({\n      moduleTest: {\n        handler: expect.any(Function),\n        options: undefined,\n        src: 'moduleTest'\n      }\n    });\n    expect(result).toEqual({\n      src: 'moduleTest',\n      options: {}\n    });\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add function module","suites":["core: module"],"updatePoint":{"line":307,"column":34,"index":9310},"line":307,"code":"  test('should add function module', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions\n      }\n    });\n\n    const functionModule = function (options) {\n      return Promise.resolve(options);\n    };\n\n    functionModule.meta = {\n      name: 'moduleTest'\n    };\n    const result = await module.addModule(functionModule);\n    expect(requireModule).not.toBeCalled();\n    expect(module.requiredModules).toEqual({\n      moduleTest: {\n        handler: expect.any(Function),\n        options: undefined,\n        src: functionModule\n      }\n    });\n    expect(result).toEqual({});\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add array module","suites":["core: module"],"updatePoint":{"line":334,"column":31,"index":9972},"line":334,"code":"  test('should add array module', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions\n      }\n    });\n    const result = await module.addModule(['moduleTest', {\n      test: true\n    }]);\n    expect(requireModule).toBeCalledTimes(1);\n    expect(requireModule).toBeCalledWith('moduleTest', {\n      paths: undefined\n    });\n    expect(module.requiredModules).toEqual({\n      moduleTest: {\n        handler: expect.any(Function),\n        options: {\n          test: true\n        },\n        src: 'moduleTest'\n      }\n    });\n    expect(result).toEqual({\n      src: 'moduleTest',\n      options: {\n        test: true\n      }\n    });\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add object module","suites":["core: module"],"updatePoint":{"line":365,"column":32,"index":10690},"line":365,"code":"  test('should add object module', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions\n      }\n    });\n    const result = await module.addModule({\n      src: 'pathToModule',\n      options: {\n        test: true\n      },\n      handler: opts => opts\n    });\n    expect(requireModule).not.toBeCalled();\n    expect(module.requiredModules).toEqual({\n      pathToModule: {\n        src: 'pathToModule',\n        options: {\n          test: true\n        },\n        handler: expect.any(Function)\n      }\n    });\n    expect(result).toEqual({\n      test: true\n    });\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw error when handler is not function","suites":["core: module"],"updatePoint":{"line":394,"column":55,"index":11360},"line":394,"code":"  test('should throw error when handler is not function', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule: () => false\n      },\n      options: { ...defaultOptions\n      }\n    });\n    await expect(module.addModule('moduleTest')).rejects.toThrow('Module should export a function: moduleTest');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should prevent multiple adding when requireOnce is enabled","suites":["core: module"],"updatePoint":{"line":404,"column":66,"index":11716},"line":404,"code":"  test('should prevent multiple adding when requireOnce is enabled', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions\n      }\n    });\n    const handler = jest.fn(() => true);\n    handler.meta = {\n      name: 'moduleTest'\n    };\n    const first = await module.addModule({\n      handler\n    }, true);\n    const second = await module.addModule({\n      handler\n    }, true);\n    expect(first).toEqual(true);\n    expect(second).toBeUndefined();\n    expect(handler).toBeCalledTimes(1);\n    expect(module.requiredModules.moduleTest).toBeDefined();\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should prevent adding not installed buildModules","suites":["core: module"],"updatePoint":{"line":427,"column":56,"index":12343},"line":427,"code":"  test('should prevent adding not installed buildModules', async () => {\n    const module = new ModuleContainer({\n      resolver: {\n        requireModule\n      },\n      options: { ...defaultOptions,\n        buildModules: ['test-build-module']\n      }\n    });\n    requireModule.mockImplementationOnce(() => {\n      const moduleNotFound = new Error(`Cannot find module 'test-build-module'`);\n      moduleNotFound.code = 'MODULE_NOT_FOUND';\n      throw moduleNotFound;\n    });\n    const result = await module.addModule('test-build-module', true);\n    expect(result).toBeUndefined();\n    expect(consola.warn).toBeCalledWith('Module `test-build-module` not found. Please ensure `test-build-module` is in `devDependencies` and installed. HINT: During build step, for npm/yarn, `NODE_ENV=production` or `--production` should NOT be used.');\n    expect(consola.warn).toBeCalledWith('Silently ignoring module as programatic usage detected.');\n  });","file":"module.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should construct nuxt with options","suites":["core: nuxt"],"updatePoint":{"line":20,"column":42,"index":596},"line":20,"code":"  test('should construct nuxt with options', async () => {\n    const options = {};\n    const nuxt = new Nuxt(options);\n    await nuxt.ready();\n    expect(nuxt).toBeInstanceOf(Hookable);\n    expect(getNuxtConfig).toBeCalledTimes(1);\n    expect(getNuxtConfig).toBeCalledWith(options);\n    expect(nuxt.resolver).toBeInstanceOf(Resolver);\n    expect(nuxt.moduleContainer).toBeInstanceOf(ModuleContainer);\n    expect(nuxt.server).toBeInstanceOf(Server);\n    expect(defineAlias).toBeCalledTimes(2);\n    expect(defineAlias).nthCalledWith(1, nuxt, nuxt.resolver, ['resolveAlias', 'resolvePath']);\n    expect(defineAlias).nthCalledWith(2, nuxt, nuxt.server, ['renderRoute', 'renderAndGetWindow', 'listen']);\n    expect(nuxt.renderer).toBe(nuxt.server);\n    expect(nuxt.render).toBe(nuxt.server.app);\n    expect(nuxt.showReady).toBeInstanceOf(Function);\n    expect(nuxt._ready).toBeInstanceOf(Promise);\n  }); // TODO: Remove in next major release","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should call hook webpack:done in showReady","suites":["core: nuxt"],"updatePoint":{"line":39,"column":50,"index":1542},"line":39,"code":"  test('should call hook webpack:done in showReady', () => {\n    const nuxt = new Nuxt();\n    nuxt.callHook = jest.fn();\n    nuxt.showReady();\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('webpack:done');\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display fatal message if ready failed","suites":["core: nuxt"],"updatePoint":{"line":58,"column":52,"index":2132},"line":58,"code":"  test('should display fatal message if ready failed', async () => {\n    const err = new Error('nuxt ready failed');\n    const nuxt = new Nuxt();\n\n    nuxt._init = () => Promise.reject(err);\n\n    await expect(nuxt.ready()).rejects.toThrow(err);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should return nuxt version from package.json","suites":["core: nuxt"],"updatePoint":{"line":66,"column":52,"index":2383},"line":66,"code":"  test('should return nuxt version from package.json', () => {\n    expect(Nuxt.version).toEqual(`v${version}`);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should call module/server ready in nuxt.ready","suites":["core: nuxt"],"updatePoint":{"line":69,"column":53,"index":2502},"line":69,"code":"  test('should call module/server ready in nuxt.ready', async () => {\n    const nuxt = new Nuxt();\n    nuxt.callHook = jest.fn();\n    nuxt.server = {\n      ready: jest.fn()\n    };\n    nuxt.moduleContainer = {\n      ready: jest.fn()\n    };\n    const result = await nuxt.ready();\n    expect(result).toBe(nuxt);\n    expect(nuxt.moduleContainer.ready).toBeCalledTimes(1);\n    expect(nuxt.server.ready).toBeCalledTimes(1);\n    expect(nuxt._initCalled).toEqual(true);\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('ready', nuxt);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should ignore ready when _ready exists","suites":["core: nuxt"],"updatePoint":{"line":86,"column":46,"index":3066},"line":86,"code":"  test('should ignore ready when _ready exists', async () => {\n    const nuxt = new Nuxt();\n\n    const _ready = nuxt._ready = jest.fn();\n\n    const result = await nuxt.ready();\n    expect(result).toBe(_ready);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add object hooks","suites":["core: nuxt"],"updatePoint":{"line":94,"column":31,"index":3267},"line":94,"code":"  test('should add object hooks', async () => {\n    const hooks = {};\n    getNuxtConfig.mockReturnValueOnce({\n      hooks,\n      _ready: false\n    });\n    const nuxt = new Nuxt();\n    nuxt.addHooks = jest.fn();\n    nuxt.server = {\n      ready: jest.fn()\n    };\n    nuxt.moduleContainer = {\n      ready: jest.fn()\n    };\n    await nuxt.ready();\n    expect(nuxt.addHooks).toBeCalledTimes(1);\n    expect(nuxt.addHooks).toBeCalledWith(hooks);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should add function hooks","suites":["core: nuxt"],"updatePoint":{"line":112,"column":33,"index":3714},"line":112,"code":"  test('should add function hooks', async () => {\n    const hooks = jest.fn();\n    getNuxtConfig.mockReturnValueOnce({\n      hooks\n    });\n    const nuxt = new Nuxt();\n    nuxt.addHooks = jest.fn();\n    nuxt.server = {\n      ready: jest.fn()\n    };\n    nuxt.moduleContainer = {\n      ready: jest.fn()\n    };\n    await nuxt.ready();\n    expect(nuxt.addHooks).not.toBeCalled();\n    expect(hooks).toBeCalledTimes(1);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should close nuxt with hook triggered","suites":["core: nuxt"],"updatePoint":{"line":129,"column":45,"index":4146},"line":129,"code":"  test('should close nuxt with hook triggered', async () => {\n    const nuxt = new Nuxt();\n    nuxt.callHook = jest.fn();\n    nuxt.clearHooks = jest.fn();\n    const cb = jest.fn();\n    await nuxt.close(cb);\n    expect(cb).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('close', nuxt);\n    expect(nuxt.clearHooks).toBeCalledTimes(1);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should ignore non-function callback in close","suites":["core: nuxt"],"updatePoint":{"line":140,"column":52,"index":4552},"line":140,"code":"  test('should ignore non-function callback in close', async () => {\n    const nuxt = new Nuxt();\n    nuxt.callHook = jest.fn();\n    nuxt.server = {\n      ready: jest.fn()\n    };\n    nuxt.moduleContainer = {\n      ready: jest.fn()\n    };\n    const result = await nuxt.ready();\n    expect(result).toBe(nuxt);\n    expect(nuxt.moduleContainer.ready).toBeCalledTimes(1);\n    expect(nuxt.server.ready).toBeCalledTimes(1);\n    expect(nuxt._initCalled).toEqual(true);\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('ready', nuxt);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should ignore non-function callback in close","suites":["core: nuxt"],"updatePoint":{"line":157,"column":52,"index":5122},"line":157,"code":"  test('should ignore non-function callback in close', async () => {\n    const nuxt = new Nuxt();\n    nuxt.callHook = jest.fn();\n    nuxt.clearHooks = jest.fn();\n    const cb = {};\n    await nuxt.close(cb);\n    expect(nuxt.callHook).toBeCalledTimes(1);\n    expect(nuxt.clearHooks).toBeCalledTimes(1);\n  });","file":"nuxt.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should construct resolver","suites":[],"updatePoint":{"line":18,"column":33,"index":604},"line":18,"code":"  test('should construct resolver', () => {\n    const nuxt = jest.fn();\n    nuxt.options = jest.fn();\n    const resolver = new Resolver(nuxt);\n    expect(resolver.nuxt).toBe(nuxt);\n    expect(resolver.options).toBe(nuxt.options);\n    expect(resolver.resolvePath).toBeInstanceOf(Function);\n    expect(resolver.resolveAlias).toBeInstanceOf(Function);\n    expect(resolver.resolveModule).toBeInstanceOf(Function);\n    expect(resolver.requireModule).toBeInstanceOf(Function);\n    expect(resolver._require).toEqual(expect.any(Function));\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should call require.resolve in resolveModule","suites":[],"updatePoint":{"line":30,"column":52,"index":1161},"line":30,"code":"  test('should call require.resolve in resolveModule', () => {\n    const resolver = new Resolver({\n      options: {\n        modulesDir\n      }\n    });\n    const modulePath = resolver.resolveModule('__resolver__');\n    expect(modulePath).toEqual(path.resolve(modulesDir, './__resolver__.js'));\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should return undefined when module is not found","suites":[],"updatePoint":{"line":39,"column":56,"index":1464},"line":39,"code":"  test('should return undefined when module is not found', () => {\n    const resolver = new Resolver({\n      options: {\n        modulesDir\n      }\n    });\n    const modulePath = resolver.resolveModule('non-exist-module');\n    expect(modulePath).toBeUndefined();\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve root alias","suites":[],"updatePoint":{"line":48,"column":33,"index":1709},"line":48,"code":"  test('should resolve root alias', () => {\n    const resolver = new Resolver({\n      options: {\n        rootDir: '/var/nuxt'\n      }\n    });\n    startsWithRootAlias.mockReturnValue(true);\n    const aliasPath = {\n      substr: jest.fn(p => String(p))\n    };\n    resolver.resolveAlias(aliasPath);\n    expect(path.join).toBeCalledTimes(1);\n    expect(path.join).toBeCalledWith('/var/nuxt', '2');\n    expect(aliasPath.substr).toBeCalledTimes(1);\n    expect(aliasPath.substr).toBeCalledWith(2);\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve src alias","suites":[],"updatePoint":{"line":64,"column":32,"index":2205},"line":64,"code":"  test('should resolve src alias', () => {\n    const resolver = new Resolver({\n      options: {\n        srcDir: '/var/nuxt/src'\n      }\n    });\n    startsWithRootAlias.mockReturnValue(false);\n    startsWithSrcAlias.mockReturnValue(true);\n    const aliasPath = {\n      substr: jest.fn(p => String(p))\n    };\n    resolver.resolveAlias(aliasPath);\n    expect(path.join).toBeCalledTimes(1);\n    expect(path.join).toBeCalledWith('/var/nuxt/src', '1');\n    expect(aliasPath.substr).toBeCalledTimes(1);\n    expect(aliasPath.substr).toBeCalledWith(1);\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve other alias","suites":[],"updatePoint":{"line":81,"column":34,"index":2757},"line":81,"code":"  test('should resolve other alias', () => {\n    const resolver = new Resolver({\n      options: {\n        srcDir: '/var/nuxt/src'\n      }\n    });\n    startsWithRootAlias.mockReturnValue(false);\n    startsWithSrcAlias.mockReturnValue(false);\n    const aliasPath = 'x';\n    resolver.resolveAlias(aliasPath);\n    expect(path.resolve).toBeCalledTimes(1);\n    expect(path.resolve).toBeCalledWith('/var/nuxt/src', aliasPath);\n  });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve existed path","suites":["core: resolver resolvePath"],"updatePoint":{"line":95,"column":37,"index":3235},"line":95,"code":"    test('should resolve existed path', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(() => true);\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver/file');\n      expect(fs.existsSync).toBeCalledTimes(1);\n      expect(fs.existsSync).toBeCalledWith('/var/nuxt/resolver/file');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/file');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve a module path","suites":["core: resolver resolvePath"],"updatePoint":{"line":105,"column":38,"index":3661},"line":105,"code":"    test('should resolve a module path', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/module');\n      fs.lstatSync = jest.fn(() => ({\n        isDirectory: () => false\n      }));\n      resolver.resolveModule = jest.fn(() => '/var/nuxt/resolver/module');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver');\n      expect(fs.existsSync).toBeCalledTimes(2);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/module');\n      expect(fs.lstatSync).toBeCalledTimes(1);\n      expect(fs.lstatSync).nthCalledWith(1, '/var/nuxt/resolver/module');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/module');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve a alias path","suites":["core: resolver resolvePath"],"updatePoint":{"line":122,"column":37,"index":4467},"line":122,"code":"    test('should resolve a alias path', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/alias');\n      fs.lstatSync = jest.fn(() => ({\n        isDirectory: () => false\n      }));\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver');\n      expect(fs.existsSync).toBeCalledTimes(2);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(fs.lstatSync).toBeCalledTimes(1);\n      expect(fs.lstatSync).nthCalledWith(1, '/var/nuxt/resolver/alias');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve path with extension","suites":["core: resolver resolvePath"],"updatePoint":{"line":140,"column":44,"index":5327},"line":140,"code":"    test('should resolve path with extension', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js']\n        }\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/file.js');\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => false);\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver/file');\n      expect(fs.existsSync).toBeCalledTimes(3);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver/file');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/file');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/file.js');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/file.js');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve module path with extension","suites":["core: resolver resolvePath"],"updatePoint":{"line":156,"column":51,"index":6098},"line":156,"code":"    test('should resolve module path with extension', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js']\n        }\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/module.js');\n      resolver.resolveModule = jest.fn(() => '/var/nuxt/resolver/module');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver/file');\n      expect(fs.existsSync).toBeCalledTimes(3);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver/file');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/module');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/module.js');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/module.js');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve alias path with extension","suites":["core: resolver resolvePath"],"updatePoint":{"line":171,"column":50,"index":6846},"line":171,"code":"    test('should resolve alias path with extension', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js']\n        }\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/alias.js');\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver/file');\n      expect(fs.existsSync).toBeCalledTimes(3);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver/file');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/alias.js');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias.js');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve index.[ext] when path is directory","suites":["core: resolver resolvePath"],"updatePoint":{"line":187,"column":59,"index":7650},"line":187,"code":"    test('should resolve index.[ext] when path is directory', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js']\n        }\n      });\n      fs.existsSync = jest.fn(path => ['/var/nuxt/resolver/alias', '/var/nuxt/resolver/alias/index.js'].includes(path));\n      fs.lstatSync = jest.fn(() => ({\n        isDirectory: () => true\n      }));\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver');\n      expect(fs.existsSync).toBeCalledTimes(3);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/alias/index.js');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias/index.js');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve style path","suites":["core: resolver resolvePath"],"updatePoint":{"line":206,"column":35,"index":8555},"line":206,"code":"    test('should resolve style path', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js'],\n          styleExtensions: ['css', 'scss']\n        }\n      });\n      fs.existsSync = jest.fn(path => ['/var/nuxt/resolver/alias', '/var/nuxt/resolver/alias/index.scss'].includes(path));\n      fs.lstatSync = jest.fn(path => ({\n        isDirectory: () => path === '/var/nuxt/resolver/alias'\n      }));\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver', {\n        isStyle: true\n      });\n      expect(fs.existsSync).toBeCalledTimes(4);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/alias/index.css');\n      expect(fs.existsSync).nthCalledWith(4, '/var/nuxt/resolver/alias/index.scss');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias/index.scss');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should resolve the directory path if no file","suites":["core: resolver resolvePath"],"updatePoint":{"line":229,"column":54,"index":9679},"line":229,"code":"    test('should resolve the directory path if no file', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js', 'vue']\n        }\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/alias');\n      fs.lstatSync = jest.fn(() => ({\n        isDirectory: () => true\n      }));\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver');\n      expect(fs.existsSync).toBeCalledTimes(4);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(fs.existsSync).nthCalledWith(3, '/var/nuxt/resolver/alias/index.js');\n      expect(fs.existsSync).nthCalledWith(4, '/var/nuxt/resolver/alias/index.vue');\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw error if no dir and file","suites":["core: resolver resolvePath"],"updatePoint":{"line":249,"column":47,"index":10633},"line":249,"code":"    test('should throw error if no dir and file', () => {\n      const resolver = new Resolver({\n        options: {\n          extensions: ['js', 'vue']\n        }\n      });\n      fs.existsSync = jest.fn(() => false);\n      fs.lstatSync = jest.fn(() => ({\n        isDirectory: () => false\n      }));\n      resolver.resolveModule = jest.fn(() => false);\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const errMsg = 'Cannot resolve \"/var/nuxt/resolver/file\" from \"/var/nuxt/resolver/alias\"';\n      expect(() => resolver.resolvePath('/var/nuxt/resolver/file')).toThrow(errMsg);\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should ignore module resolve if isModule is false","suites":["core: resolver resolvePath"],"updatePoint":{"line":264,"column":59,"index":11258},"line":264,"code":"    test('should ignore module resolve if isModule is false', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(path => path === '/var/nuxt/resolver/alias');\n      resolver.resolveModule = jest.fn(() => '/var/nuxt/resolver/module');\n      resolver.resolveAlias = jest.fn(() => '/var/nuxt/resolver/alias');\n      const resolvedPath = resolver.resolvePath('/var/nuxt/resolver/file', {\n        isModule: false\n      });\n      expect(fs.existsSync).toBeCalledTimes(2);\n      expect(fs.existsSync).nthCalledWith(1, '/var/nuxt/resolver/file');\n      expect(fs.existsSync).nthCalledWith(2, '/var/nuxt/resolver/alias');\n      expect(resolver.resolveModule).not.toBeCalled();\n      expect(resolvedPath).toEqual('/var/nuxt/resolver/alias');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated alias options","suites":["core: resolver resolvePath"],"updatePoint":{"line":280,"column":49,"index":12043},"line":280,"code":"    test('should display deprecated alias options', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(() => true);\n      resolver.resolvePath('/var/nuxt/resolver/file', {\n        alias: true\n      });\n      const warnMsg = 'Using alias is deprecated and will be removed in Nuxt 3. Use `isAlias` instead.';\n      expect(consola.warn).toBeCalledTimes(1);\n      expect(consola.warn).toBeCalledWith(warnMsg);\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated module options","suites":["core: resolver resolvePath"],"updatePoint":{"line":292,"column":50,"index":12513},"line":292,"code":"    test('should display deprecated module options', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      fs.existsSync = jest.fn(() => true);\n      resolver.resolvePath('/var/nuxt/resolver/file.js', {\n        module: true\n      });\n      const warnMsg = 'Using module is deprecated and will be removed in Nuxt 3. Use `isModule` instead.';\n      expect(consola.warn).toBeCalledTimes(1);\n      expect(consola.warn).toBeCalledWith(warnMsg);\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should require es modules with default export","suites":["core: resolver resolveModule"],"updatePoint":{"line":306,"column":55,"index":13051},"line":306,"code":"    test('should require es modules with default export', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n\n      resolver.resolvePath = x => x;\n\n      resolver._require = jest.fn(() => ({\n        default: 'resolved module'\n      }));\n      const resolvedModule = resolver.requireModule('/var/nuxt/resolver/module.js');\n      expect(resolvedModule).toEqual('resolved module');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should require es modules without default export","suites":["core: resolver resolveModule"],"updatePoint":{"line":319,"column":58,"index":13466},"line":319,"code":"    test('should require es modules without default export', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n\n      resolver.resolvePath = x => x;\n\n      resolver._require = jest.fn(() => 'resolved module');\n      const resolvedModule = resolver.requireModule('/var/nuxt/resolver/module.js');\n      expect(resolvedModule).toEqual('resolved module');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should require es modules without default export when interopDefault is disabled","suites":["core: resolver resolveModule"],"updatePoint":{"line":330,"column":90,"index":13884},"line":330,"code":"    test('should require es modules without default export when interopDefault is disabled', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n\n      resolver.resolvePath = x => x;\n\n      resolver._require = jest.fn(() => ({\n        default: 'resolved module'\n      }));\n      const resolvedModule = resolver.requireModule('/var/nuxt/resolver/module.js', {\n        interopDefault: false\n      });\n      expect(resolvedModule).toEqual({\n        default: 'resolved module'\n      });\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw error if resolvePath failed","suites":["core: resolver resolveModule"],"updatePoint":{"line":347,"column":50,"index":14359},"line":347,"code":"    test('should throw error if resolvePath failed', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      resolver.resolvePath = jest.fn(() => {\n        throw new Error('resolve failed');\n      });\n      resolver._require = jest.fn(() => undefined);\n      expect(() => resolver.requireModule('/var/nuxt/resolver/module.js')).toThrow('resolve failed');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should throw last error","suites":["core: resolver resolveModule"],"updatePoint":{"line":357,"column":33,"index":14731},"line":357,"code":"    test('should throw last error', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      resolver.resolvePath = jest.fn(() => {\n        throw new Error('resolve failed');\n      });\n      resolver._require = jest.fn(() => {\n        throw new Error('resolve esm failed');\n      });\n      expect(() => resolver.requireModule('/var/nuxt/resolver/module.js')).toThrow('resolve esm failed');\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated intropDefault options","suites":["core: resolver resolveModule"],"updatePoint":{"line":369,"column":57,"index":15178},"line":369,"code":"    test('should display deprecated intropDefault options', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n\n      resolver.resolvePath = x => x;\n\n      resolver._require = jest.fn();\n      resolver.requireModule('/var/nuxt/resolver/file.js', {\n        intropDefault: true\n      });\n      const warnMsg = 'Using intropDefault is deprecated and will be removed in Nuxt 3. Use `interopDefault` instead.';\n      expect(consola.warn).toBeCalledTimes(1);\n      expect(consola.warn).toBeCalledWith(warnMsg);\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated alias options","suites":["core: resolver resolveModule"],"updatePoint":{"line":384,"column":49,"index":15708},"line":384,"code":"    test('should display deprecated alias options', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n\n      resolver.resolvePath = x => x;\n\n      resolver._require = jest.fn();\n      resolver.requireModule('/var/nuxt/resolver/file.js', {\n        alias: true\n      });\n      const warnMsg = 'Using alias is deprecated and will be removed in Nuxt 3. Use `isAlias` instead.';\n      expect(consola.warn).toBeCalledTimes(1);\n      expect(consola.warn).toBeCalledWith(warnMsg);\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should display deprecated esm options","suites":["core: resolver resolveModule"],"updatePoint":{"line":399,"column":47,"index":16213},"line":399,"code":"    test('should display deprecated esm options', () => {\n      const resolver = new Resolver({\n        options: {}\n      });\n      resolver.resolvePath = jest.fn().mockReturnValue('/var/nuxt/resolver/file.js');\n      resolver._require = jest.fn();\n    });","file":"resolver.test.js","skipped":false,"dir":"packages/core/test"},{"name":"should generate with build and init by default","suites":["generator: generate routes"],"updatePoint":{"line":18,"column":54,"index":568},"line":18,"code":"  test('should generate with build and init by default', async () => {\n    const nuxt = createNuxt();\n    const builder = jest.fn();\n    const generator = new Generator(nuxt, builder);\n    const routes = ['routes'];\n    const errors = ['errors'];\n    generator.initiate = jest.fn();\n    generator.initRoutes = jest.fn(() => routes);\n    generator.generateRoutes = jest.fn(() => errors);\n    generator.afterGenerate = jest.fn();\n    await generator.generate();\n    expect(consola.debug).toBeCalledTimes(2);\n    expect(consola.debug).nthCalledWith(1, 'Initializing generator...');\n    expect(consola.debug).nthCalledWith(2, 'Preparing routes for generate...');\n    expect(generator.initiate).toBeCalledTimes(1);\n    expect(generator.initiate).toBeCalledWith({\n      build: true,\n      init: true\n    });\n    expect(generator.initRoutes).toBeCalledTimes(1);\n    expect(consola.info).toBeCalledTimes(1);\n    expect(consola.info).toBeCalledWith('Generating pages');\n    expect(generator.generateRoutes).toBeCalledTimes(1);\n    expect(generator.generateRoutes).toBeCalledWith(routes);\n    expect(generator.afterGenerate).toBeCalledTimes(1);\n    expect(nuxt.callHook).toBeCalledWith('generate:done', generator, errors);\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate without build and init when disabled","suites":["generator: generate routes"],"updatePoint":{"line":45,"column":60,"index":1793},"line":45,"code":"  test('should generate without build and init when disabled', async () => {\n    const nuxt = createNuxt();\n    const builder = jest.fn();\n    const generator = new Generator(nuxt, builder);\n    const routes = ['routes'];\n    const errors = ['errors'];\n    generator.initiate = jest.fn();\n    generator.initRoutes = jest.fn(() => routes);\n    generator.generateRoutes = jest.fn(() => errors);\n    generator.afterGenerate = jest.fn();\n    await generator.generate({\n      build: false,\n      init: false\n    });\n    expect(generator.initiate).toBeCalledTimes(1);\n    expect(generator.initiate).toBeCalledWith({\n      build: false,\n      init: false\n    });\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate routes","suites":["generator: generate routes"],"updatePoint":{"line":65,"column":30,"index":2425},"line":65,"code":"  test('should generate routes', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.generate = { ...nuxt.options.generate,\n      concurrency: 2,\n      interval: 100\n    };\n    const routes = [{\n      route: '/index',\n      payload: {\n        param: 'test-index'\n      }\n    }, {\n      route: '/about',\n      payload: {\n        param: 'test-about'\n      }\n    }, {\n      route: '/foo',\n      payload: {\n        param: 'test-foo'\n      }\n    }, {\n      route: '/bar',\n      payload: {\n        param: 'test-bar'\n      }\n    }, {\n      route: '/baz',\n      payload: {\n        param: 'test-baz'\n      }\n    }];\n    const generator = new Generator(nuxt);\n    generator.generateRoute = jest.fn();\n    const errors = await generator.generateRoutes(routes);\n    expect(waitFor).toBeCalledTimes(5);\n    expect(waitFor).nthCalledWith(1, 0);\n    expect(waitFor).nthCalledWith(2, 100);\n    expect(waitFor).nthCalledWith(3, 0);\n    expect(waitFor).nthCalledWith(4, 100);\n    expect(waitFor).nthCalledWith(5, 0);\n    expect(generator.generateRoute).toBeCalledTimes(5);\n    expect(generator.generateRoute).nthCalledWith(1, {\n      route: '/index',\n      payload: {\n        param: 'test-index'\n      },\n      errors\n    });\n    expect(generator.generateRoute).nthCalledWith(2, {\n      route: '/about',\n      payload: {\n        param: 'test-about'\n      },\n      errors\n    });\n    expect(generator.generateRoute).nthCalledWith(3, {\n      route: '/foo',\n      payload: {\n        param: 'test-foo'\n      },\n      errors\n    });\n    expect(generator.generateRoute).nthCalledWith(4, {\n      route: '/bar',\n      payload: {\n        param: 'test-bar'\n      },\n      errors\n    });\n    expect(generator.generateRoute).nthCalledWith(5, {\n      route: '/baz',\n      payload: {\n        param: 'test-baz'\n      },\n      errors\n    });\n    generator._formatErrors = jest.fn();\n    errors.toString();\n    expect(generator._formatErrors).toBeCalledTimes(1);\n    expect(generator._formatErrors).toBeCalledWith(errors);\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should format errors","suites":["generator: generate routes"],"updatePoint":{"line":147,"column":28,"index":4427},"line":147,"code":"  test('should format errors', () => {\n    const nuxt = createNuxt();\n    const generator = new Generator(nuxt);\n\n    const errors = generator._formatErrors([{\n      type: 'handled',\n      route: '/foo',\n      error: 'foo failed'\n    }, {\n      type: 'unhandled',\n      route: '/bar',\n      error: {\n        stack: 'bar failed'\n      }\n    }]);\n\n    expect(chalk.yellow).toBeCalledTimes(1);\n    expect(chalk.yellow).toBeCalledWith(' /foo\\n\\n');\n    expect(chalk.red).toBeCalledTimes(1);\n    expect(chalk.red).toBeCalledWith(' /bar\\n\\n');\n    expect(chalk.grey).toBeCalledTimes(2);\n    expect(chalk.grey).nthCalledWith(1, '\"foo failed\"\\n');\n    expect(chalk.grey).nthCalledWith(2, 'bar failed');\n    expect(errors).toEqual(`yellow: /foo\n\ngrey:\"foo failed\"\n\nred: /bar\n\ngrey:bar failed`);\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should write fallback html after generate","suites":["generator: generate routes"],"updatePoint":{"line":178,"column":49,"index":5240},"line":178,"code":"  test('should write fallback html after generate', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.generate.fallback = 'fallback.html';\n    const generator = new Generator(nuxt);\n    fsExtra.exists.mockReturnValueOnce(false);\n    await generator.afterGenerate();\n    expect(fsExtra.exists).toBeCalledTimes(1);\n    expect(fsExtra.exists.mock.calls[0][0]).toBePath('/var/nuxt/generate/fallback.html', 'C:\\\\nuxt\\\\generate\\\\fallback.html');\n    expect(nuxt.server.renderRoute).toBeCalledTimes(1);\n    expect(nuxt.server.renderRoute).toBeCalledWith('/', {\n      spa: true\n    });\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/fallback.html', 'C:\\\\nuxt\\\\generate\\\\fallback.html');\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should disable writing fallback if fallback is empty or not string","suites":["generator: generate routes"],"updatePoint":{"line":194,"column":74,"index":6132},"line":194,"code":"  test('should disable writing fallback if fallback is empty or not string', async () => {\n    const nuxt = createNuxt();\n    const generator = new Generator(nuxt);\n    nuxt.options.generate.fallback = '';\n    await generator.afterGenerate();\n    nuxt.options.generate.fallback = jest.fn();\n    await generator.afterGenerate();\n    expect(fsExtra.exists).not.toBeCalled();\n    expect(nuxt.server.renderRoute).not.toBeCalled();\n    expect(fsExtra.writeFile).not.toBeCalled();\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should disable writing fallback if fallback path is not existed","suites":["generator: generate routes"],"updatePoint":{"line":205,"column":71,"index":6610},"line":205,"code":"  test('should disable writing fallback if fallback path is not existed', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.generate.fallback = 'fallback.html';\n    const generator = new Generator(nuxt);\n    fsExtra.exists.mockReturnValueOnce(true);\n    await generator.afterGenerate();\n    expect(fsExtra.exists).toBeCalledTimes(1);\n    expect(fsExtra.exists.mock.calls[0][0]).toBePath('/var/nuxt/generate/fallback.html', 'C:\\\\nuxt\\\\generate\\\\fallback.html');\n    expect(nuxt.server.renderRoute).not.toBeCalled();\n    expect(fsExtra.writeFile).not.toBeCalled();\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should disable writing fallback if fallback is empty or not string","suites":["generator: generate routes"],"updatePoint":{"line":216,"column":74,"index":7194},"line":216,"code":"  test('should disable writing fallback if fallback is empty or not string', async () => {\n    const nuxt = createNuxt();\n    const generator = new Generator(nuxt);\n    nuxt.options.generate.fallback = '';\n    await generator.afterGenerate();\n    nuxt.options.generate.fallback = jest.fn();\n    await generator.afterGenerate();\n    expect(fsExtra.exists).not.toBeCalled();\n    expect(fsExtra.writeFile).not.toBeCalled();\n  });","file":"generator.gen.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should construct Generator","suites":["generator: initialize"],"updatePoint":{"line":15,"column":34,"index":503},"line":15,"code":"  test('should construct Generator', () => {\n    isUrl.mockReturnValueOnce(true);\n    const nuxt = createNuxt();\n    nuxt.options = { ...nuxt.options,\n      build: {\n        publicPath: 'http://localhost:3000'\n      }\n    };\n    const builder = jest.fn();\n    const generator = new Generator(nuxt, builder);\n    expect(generator.nuxt).toBe(nuxt);\n    expect(generator.options).toBe(nuxt.options);\n    expect(generator.builder).toBe(builder);\n    expect(generator.staticRoutes).toBePath('/var/nuxt/static', 'C:\\\\nuxt\\\\static');\n    expect(generator.srcBuiltPath).toBePath('/var/nuxt/build/dist/client', 'C:\\\\nuxt\\\\build\\\\dist\\\\client');\n    expect(generator.distPath).toBePath('/var/nuxt/generate', 'C:\\\\nuxt\\\\generate');\n    expect(generator.distNuxtPath).toBePath('/var/nuxt/generate', 'C:\\\\nuxt\\\\generate');\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should append publicPath to distPath if publicPath is not url","suites":["generator: initialize"],"updatePoint":{"line":33,"column":69,"index":1354},"line":33,"code":"  test('should append publicPath to distPath if publicPath is not url', () => {\n    isUrl.mockReturnValueOnce(false);\n    const nuxt = createNuxt();\n    nuxt.options = { ...nuxt.options,\n      build: {\n        publicPath: '__public'\n      }\n    };\n    const builder = jest.fn();\n    const generator = new Generator(nuxt, builder);\n    expect(generator.distNuxtPath).toBePath('/var/nuxt/generate/__public', 'C:\\\\nuxt\\\\generate\\\\__public');\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should initiate with build and init by default","suites":["generator: initialize"],"updatePoint":{"line":45,"column":54,"index":1784},"line":45,"code":"  test('should initiate with build and init by default', async () => {\n    const nuxt = createNuxt();\n    const builder = {\n      forGenerate: jest.fn(),\n      build: jest.fn()\n    };\n    const generator = new Generator(nuxt, builder);\n    generator.initDist = jest.fn();\n    await generator.initiate();\n    expect(nuxt.ready).toBeCalledTimes(1);\n    expect(hookCalls(nuxt, 'generate:before')[0]).toMatchObject([generator, {\n      dir: generator.distPath\n    }]);\n    expect(builder.forGenerate).toBeCalledTimes(1);\n    expect(builder.build).toBeCalledTimes(1);\n    expect(generator.initDist).toBeCalledTimes(1);\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should initiate without build and init if disabled","suites":["generator: initialize"],"updatePoint":{"line":62,"column":58,"index":2407},"line":62,"code":"  test('should initiate without build and init if disabled', async () => {\n    const nuxt = createNuxt();\n    const builder = {\n      forGenerate: jest.fn(),\n      build: jest.fn()\n    };\n    const generator = new Generator(nuxt, builder);\n    generator.initDist = jest.fn();\n    fsExtra.exists.mockReturnValueOnce(true);\n    generator.getBuildConfig = jest.fn(() => ({\n      ssr: true,\n      target: 'static'\n    }));\n    await generator.initiate({\n      build: false,\n      init: false\n    });\n    expect(nuxt.ready).toBeCalledTimes(1);\n    expect(hookCalls(nuxt, 'generate:before')[0]).toMatchObject([generator, {\n      dir: generator.distPath\n    }]);\n    expect(builder.forGenerate).not.toBeCalled();\n    expect(builder.build).not.toBeCalled();\n    expect(generator.initDist).not.toBeCalled();\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should throw error when build is not disabled, but Builder instance is omitted","suites":["generator: initialize"],"updatePoint":{"line":87,"column":86,"index":3240},"line":87,"code":"  test('should throw error when build is not disabled, but Builder instance is omitted', async () => {\n    const nuxt = createNuxt();\n    const generator = new Generator(nuxt);\n    await expect(generator.initiate()).rejects.toThrow('Could not generate');\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should init routes with generate.routes and routes.json","suites":["generator: initialize"],"updatePoint":{"line":92,"column":63,"index":3478},"line":92,"code":"  test('should init routes with generate.routes and routes.json', async () => {\n    const nuxt = createNuxt();\n    nuxt.options = { ...nuxt.options,\n      generate: { ...nuxt.options.generate,\n        exclude: [/test/],\n        routes: ['/foo', '/foo/bar']\n      },\n      router: {\n        mode: 'history'\n      }\n    };\n    const generator = new Generator(nuxt);\n    flatRoutes.mockImplementationOnce(routes => routes);\n    promisifyRoute.mockImplementationOnce(routes => routes);\n    generator.getAppRoutes = jest.fn(() => ['/index', '/about', '/test']);\n    generator.decorateWithPayloads = jest.fn(() => 'decoratedRoutes');\n    const routes = await generator.initRoutes();\n    expect(promisifyRoute).toBeCalledTimes(1);\n    expect(promisifyRoute).toBeCalledWith(['/foo', '/foo/bar']);\n    expect(flatRoutes).toBeCalledTimes(1);\n    expect(flatRoutes).toBeCalledWith(['/index', '/about', '/test']);\n    expect(generator.decorateWithPayloads).toBeCalledTimes(1);\n    expect(generator.decorateWithPayloads).toBeCalledWith(['/index', '/about'], ['/foo', '/foo/bar']);\n    expect(hookCalls(nuxt, 'generate:extendRoutes')[0][0]).toBe('decoratedRoutes');\n    expect(routes).toEqual('decoratedRoutes');\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should init routes with hash mode","suites":["generator: initialize"],"updatePoint":{"line":118,"column":41,"index":4661},"line":118,"code":"  test('should init routes with hash mode', async () => {\n    const nuxt = createNuxt();\n    nuxt.options = { ...nuxt.options,\n      generate: { ...nuxt.options.generate,\n        exclude: [/test/],\n        routes: ['/foo', '/foo/bar']\n      },\n      router: {\n        mode: 'hash'\n      }\n    };\n    const generator = new Generator(nuxt);\n    flatRoutes.mockImplementationOnce(routes => routes);\n    promisifyRoute.mockImplementationOnce(routes => routes);\n    generator.decorateWithPayloads = jest.fn(() => 'decoratedRoutes');\n    const routes = await generator.initRoutes();\n    expect(promisifyRoute).not.toBeCalled();\n    expect(flatRoutes).not.toBeCalled();\n    expect(generator.decorateWithPayloads).toBeCalledTimes(1);\n    expect(generator.decorateWithPayloads).toBeCalledWith(['/'], []);\n    expect(hookCalls(nuxt, 'generate:extendRoutes')[0][0]).toBe('decoratedRoutes');\n    expect(routes).toEqual('decoratedRoutes');\n    promisifyRoute.mockReset();\n    flatRoutes.mockReset();\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should throw error when route can not be resolved","suites":["generator: initialize"],"updatePoint":{"line":143,"column":57,"index":5670},"line":143,"code":"  test('should throw error when route can not be resolved', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.router = {\n      mode: 'history'\n    };\n    const generator = new Generator(nuxt);\n    promisifyRoute.mockImplementationOnce(() => {\n      throw new Error('promisifyRoute failed');\n    });\n    await expect(generator.initRoutes()).rejects.toThrow('promisifyRoute failed');\n    expect(promisifyRoute).toBeCalledTimes(1);\n    expect(promisifyRoute).toBeCalledWith([]);\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('Could not resolve routes');\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should initialize destination folder","suites":["generator: initialize"],"updatePoint":{"line":158,"column":44,"index":6267},"line":158,"code":"  test('should initialize destination folder', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.generate.fallback = 'fallback.html';\n    nuxt.options.generate.nojekyll = true;\n    const generator = new Generator(nuxt);\n    fsExtra.exists.mockReturnValueOnce(false);\n    await generator.initDist();\n    expect(fsExtra.emptyDir).toBeCalledTimes(1);\n    expect(fsExtra.emptyDir).toBeCalledWith(generator.distPath);\n    expect(hookCalls(nuxt, 'generate:distRemoved')[0][0]).toMatchObject(generator);\n    expect(fsExtra.exists).toBeCalledTimes(1);\n    expect(fsExtra.exists).toBeCalledWith(generator.staticRoutes);\n    expect(fsExtra.copy).toBeCalledTimes(1);\n    expect(fsExtra.copy).toBeCalledWith(generator.srcBuiltPath, generator.distNuxtPath);\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/.nojekyll', 'C:\\\\nuxt\\\\generate\\\\.nojekyll');\n    expect(hookCalls(nuxt, 'generate:distCopied')[0][0]).toMatchObject(generator);\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should copy static routes if path exists","suites":["generator: initialize"],"updatePoint":{"line":176,"column":48,"index":7289},"line":176,"code":"  test('should copy static routes if path exists', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.generate.fallback = 'fallback.html';\n    const generator = new Generator(nuxt);\n    fsExtra.exists.mockReturnValueOnce(true);\n    await generator.initDist();\n    expect(fsExtra.copy).toBeCalledTimes(2);\n    expect(fsExtra.copy).nthCalledWith(1, generator.staticRoutes, generator.distPath);\n    expect(fsExtra.copy).nthCalledWith(2, generator.srcBuiltPath, generator.distNuxtPath);\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should decorate routes with payloads","suites":["generator: initialize"],"updatePoint":{"line":186,"column":44,"index":7785},"line":186,"code":"  test('should decorate routes with payloads', () => {\n    const nuxt = createNuxt();\n    const generator = new Generator(nuxt);\n    const routes = ['/index', '/about', '/test'];\n    const generateRoutes = ['/foo', {\n      route: '/foo/bar',\n      payload: {\n        param: 'foo bar'\n      }\n    }];\n    const routeMap = generator.decorateWithPayloads(routes, generateRoutes);\n    expect(routeMap).toEqual([{\n      payload: null,\n      route: '/index'\n    }, {\n      payload: null,\n      route: '/about'\n    }, {\n      payload: null,\n      route: '/test'\n    }, {\n      payload: null,\n      route: '/foo'\n    }, {\n      payload: {\n        param: 'foo bar'\n      },\n      route: '/foo/bar'\n    }]);\n  });","file":"generator.init.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate route","suites":["generator: generate route"],"updatePoint":{"line":13,"column":29,"index":406},"line":13,"code":"  test('should generate route', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    nuxt.options.generate.minify = undefined;\n    nuxt.options.generate.subFolders = false;\n    const generator = new Generator(nuxt);\n    const route = '/foo/';\n    const payload = {};\n    const errors = [];\n    const returned = await generator.generateRoute({\n      route,\n      payload,\n      errors\n    });\n    expect(nuxt.server.renderRoute).toBeCalledTimes(1);\n    expect(nuxt.server.renderRoute).toBeCalledWith('/foo', {\n      payload\n    });\n    const genernatePageHookCall = hookCalls(nuxt, 'generate:page')[0][0];\n    expect(genernatePageHookCall).toMatchObject({\n      route: '/foo',\n      html: 'rendered html'\n    });\n    expect(genernatePageHookCall.path).toBePath('/var/nuxt/generate/foo.html', 'C:\\\\nuxt\\\\generate\\\\foo.html');\n    const genernateRouteCreatedHookCall = hookCalls(nuxt, 'generate:routeCreated')[0][0];\n    expect(genernateRouteCreatedHookCall).toMatchObject({\n      route: '/foo',\n      errors: []\n    });\n    expect(genernateRouteCreatedHookCall.path).toBePath('/var/nuxt/generate/foo.html', 'C:\\\\nuxt\\\\generate\\\\foo.html');\n    expect(fsExtra.mkdirp).toBeCalledTimes(1);\n    expect(fsExtra.mkdirp.mock.calls[0][0]).toBePath('/var/nuxt/generate', 'C:\\\\nuxt\\\\generate');\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/foo.html', 'C:\\\\nuxt\\\\generate\\\\foo.html');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should create unhandled error if render route has any exception","suites":["generator: generate route"],"updatePoint":{"line":52,"column":71,"index":2089},"line":52,"code":"  test('should create unhandled error if render route has any exception', async () => {\n    const nuxt = createNuxt();\n    const error = new Error('render route failed');\n    nuxt.server.renderRoute.mockImplementationOnce(() => {\n      throw error;\n    });\n    const generator = new Generator(nuxt);\n    generator._formatErrors = jest.fn(() => 'formatted errors');\n    const route = '/foo';\n    const payload = {};\n    const errors = [];\n    const returned = await generator.generateRoute({\n      route,\n      payload,\n      errors\n    });\n    expect(nuxt.server.renderRoute).toBeCalledTimes(1);\n    expect(nuxt.server.renderRoute).toBeCalledWith('/foo', {\n      payload\n    });\n    expect(nuxt.callHook).toBeCalledWith('generate:routeFailed', {\n      route,\n      errors: [{\n        type: 'unhandled',\n        route,\n        error\n      }]\n    });\n    expect(generator._formatErrors).toBeCalledTimes(1);\n    expect(generator._formatErrors).toBeCalledWith([{\n      type: 'unhandled',\n      route,\n      error\n    }]);\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('formatted errors');\n    expect(errors).toEqual([{\n      error,\n      route,\n      type: 'unhandled'\n    }]);\n    expect(returned).toEqual(false);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should create handled error if render route failed","suites":["generator: generate route"],"updatePoint":{"line":95,"column":58,"index":3334},"line":95,"code":"  test('should create handled error if render route failed', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    nuxt.options.generate.minify = undefined;\n    const error = new Error('render route failed');\n    nuxt.server.renderRoute.mockReturnValueOnce({\n      html: 'renderer html',\n      error\n    });\n    const generator = new Generator(nuxt);\n    const route = '/foo';\n    const payload = {};\n    const errors = [];\n    const returned = await generator.generateRoute({\n      route,\n      payload,\n      errors\n    });\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('Error generating route \"/foo\": render route failed');\n    expect(errors).toEqual([{\n      error,\n      route,\n      type: 'handled'\n    }]);\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should warn generate.minify deprecation message","suites":["generator: generate route"],"updatePoint":{"line":124,"column":55,"index":4182},"line":124,"code":"  test('should warn generate.minify deprecation message', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    nuxt.options.generate.minify = false;\n    const generator = new Generator(nuxt);\n    const route = '/foo';\n    const returned = await generator.generateRoute({\n      route\n    });\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('generate.minify has been deprecated and will be removed in the next major version. Use build.html.minify instead!');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should minify generated html","suites":["generator: generate route"],"updatePoint":{"line":139,"column":36,"index":4754},"line":139,"code":"  test('should minify generated html', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: {\n        value: 'test-minify'\n      }\n    };\n    nuxt.options.generate.minify = undefined;\n    const generator = new Generator(nuxt);\n    htmlMinifier.minify.mockReturnValueOnce('minified rendered html');\n    const route = '/foo';\n    const returned = await generator.generateRoute({\n      route\n    });\n    expect(htmlMinifier.minify).toBeCalledTimes(1);\n    expect(htmlMinifier.minify).toBeCalledWith('rendered html', {\n      value: 'test-minify'\n    });\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'minified rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/foo.html', 'C:\\\\nuxt\\\\generate\\\\foo.html');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should create unhandled error if minify failed","suites":["generator: generate route"],"updatePoint":{"line":162,"column":54,"index":5672},"line":162,"code":"  test('should create unhandled error if minify failed', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: {\n        value: 'test-minify'\n      }\n    };\n    nuxt.options.generate.minify = undefined;\n    const generator = new Generator(nuxt);\n    htmlMinifier.minify.mockImplementationOnce(() => {\n      throw new Error('minify html failed');\n    });\n    const route = '/foo';\n    const errors = [];\n    const returned = await generator.generateRoute({\n      route,\n      errors\n    });\n    expect(htmlMinifier.minify).toBeCalledTimes(1);\n    expect(htmlMinifier.minify).toBeCalledWith('rendered html', {\n      value: 'test-minify'\n    });\n    expect(errors).toEqual([{\n      route,\n      type: 'unhandled',\n      error: new Error('HTML minification failed. Make sure the route generates valid HTML. Failed HTML:\\n rendered html')\n    }]);\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate file in sub folder","suites":["generator: generate route"],"updatePoint":{"line":191,"column":42,"index":6582},"line":191,"code":"  test('should generate file in sub folder', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    nuxt.options.generate.subFolders = true;\n    const generator = new Generator(nuxt);\n    const route = '/foo';\n    const returned = await generator.generateRoute({\n      route\n    });\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/foo/index.html', 'C:\\\\nuxt\\\\generate\\\\foo\\\\index.html');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate 404 file in flat folder","suites":["generator: generate route"],"updatePoint":{"line":207,"column":47,"index":7239},"line":207,"code":"  test('should generate 404 file in flat folder', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    nuxt.options.generate.subFolders = true;\n    const generator = new Generator(nuxt);\n    const route = '/404';\n    const returned = await generator.generateRoute({\n      route\n    });\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/404.html', 'C:\\\\nuxt\\\\generate\\\\404.html');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should generate file in flat folder if route is empty","suites":["generator: generate route"],"updatePoint":{"line":223,"column":61,"index":7897},"line":223,"code":"  test('should generate file in flat folder if route is empty', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.build.html = {\n      minify: false\n    };\n    const generator = new Generator(nuxt);\n    const route = '';\n    const returned = await generator.generateRoute({\n      route\n    });\n    expect(fsExtra.writeFile).toBeCalledTimes(1);\n    expect(fsExtra.writeFile).toBeCalledWith(expect.any(String), 'rendered html', 'utf8');\n    expect(fsExtra.writeFile.mock.calls[0][0]).toBePath('/var/nuxt/generate/index.html', 'C:\\\\nuxt\\\\generate\\\\index.html');\n    expect(returned).toEqual(true);\n  });","file":"generator.route.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should export Generator","suites":["generator: entry"],"updatePoint":{"line":6,"column":31,"index":167},"line":6,"code":"  test('should export Generator', () => {\n    expect(Generator.generator).toEqual(true);\n  });","file":"index.test.js","skipped":false,"dir":"packages/generator/test"},{"name":"should construct context","suites":["server: ServerContext"],"updatePoint":{"line":3,"column":32,"index":119},"line":3,"code":"  test('should construct context', () => {\n    const server = {\n      nuxt: {\n        id: 'test-contest-nuxt'\n      },\n      globals: {\n        id: 'test-contest-globals'\n      },\n      options: {\n        id: 'test-contest-options'\n      },\n      resources: {\n        id: 'test-contest-resources'\n      }\n    };\n    const context = new ServerContext(server);\n    expect(context.nuxt).toBe(server.nuxt);\n    expect(context.globals).toEqual(server.globals);\n    expect(context.options).toEqual(server.options);\n    expect(context.resources).toEqual(server.resources);\n  });","file":"contest.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should export Server and Listener","suites":["server: entry"],"updatePoint":{"line":8,"column":41,"index":229},"line":8,"code":"  test('should export Server and Listener', () => {\n    expect(Server.server).toEqual(true);\n    expect(Listener.listener).toEqual(true);\n  });","file":"index.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should construct listener","suites":["server: listener"],"updatePoint":{"line":31,"column":33,"index":744},"line":31,"code":"  test('should construct listener', () => {\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      socket: jest.fn(),\n      https: {\n        id: 'test-listener-https'\n      },\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    expect(listener.port).toEqual(options.port);\n    expect(listener.host).toEqual(options.host);\n    expect(listener.socket).toEqual(options.socket);\n    expect(listener.https).toEqual(options.https);\n    expect(listener.app).toEqual(options.app);\n    expect(listener.dev).toEqual(options.dev);\n    expect(listener.listening).toEqual(false);\n    expect(listener._server).toBe(null);\n    expect(listener.server).toBe(null);\n    expect(listener.address).toBe(null);\n    expect(listener.url).toBe(null);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should listen http host and port","suites":["server: listener"],"updatePoint":{"line":55,"column":40,"index":1541},"line":55,"code":"  test('should listen http host and port', async () => {\n    const server = mockServer();\n    http.createServer.mockReturnValueOnce(server);\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: false,\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    listener.computeURL = jest.fn();\n    await listener.listen();\n    expect(http.createServer).toBeCalledTimes(1);\n    expect(http.createServer).toBeCalledWith(options.app);\n    expect(server.once).toBeCalledTimes(1);\n    expect(server.once).toBeCalledWith('error', expect.any(Function));\n    expect(server.listen).toBeCalledTimes(1);\n    expect(server.listen).toBeCalledWith({\n      host: options.host,\n      port: options.port,\n      exclusive: false\n    }, expect.any(Function));\n    expect(listener.server).toBe(server);\n    expect(enableDestroy).toBeCalledTimes(1);\n    expect(enableDestroy).toBeCalledWith(listener.server);\n    expect(pify).toBeCalledTimes(1);\n    expect(pify).toBeCalledWith(listener.server.destroy);\n    expect(listener.computeURL).toBeCalledTimes(1);\n    expect(listener.listening).toEqual(true);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should listen https host and port","suites":["server: listener"],"updatePoint":{"line":86,"column":41,"index":2688},"line":86,"code":"  test('should listen https host and port', async () => {\n    const server = mockServer();\n    https.createServer.mockReturnValueOnce(server);\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: {\n        key: 'test-listener'\n      },\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    listener.computeURL = jest.fn();\n    await listener.listen();\n    expect(https.createServer).toBeCalledTimes(1);\n    expect(https.createServer).toBeCalledWith(options.https, options.app);\n    expect(server.once).toBeCalledTimes(1);\n    expect(server.once).toBeCalledWith('error', expect.any(Function));\n    expect(server.listen).toBeCalledTimes(1);\n    expect(server.listen).toBeCalledWith({\n      host: options.host,\n      port: options.port,\n      exclusive: false\n    }, expect.any(Function));\n    expect(listener.server).toBe(server);\n    expect(enableDestroy).toBeCalledTimes(1);\n    expect(enableDestroy).toBeCalledWith(listener.server);\n    expect(pify).toBeCalledTimes(1);\n    expect(pify).toBeCalledWith(listener.server.destroy);\n    expect(listener.computeURL).toBeCalledTimes(1);\n    expect(listener.listening).toEqual(true);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should listen unix socket host and port","suites":["server: listener"],"updatePoint":{"line":119,"column":47,"index":3892},"line":119,"code":"  test('should listen unix socket host and port', async () => {\n    const server = mockServer();\n    http.createServer.mockReturnValueOnce(server);\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: false,\n      socket: '/var/nuxt/unix.socket',\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    listener.computeURL = jest.fn();\n    await listener.listen();\n    expect(http.createServer).toBeCalledTimes(1);\n    expect(http.createServer).toBeCalledWith(options.app);\n    expect(server.once).toBeCalledTimes(1);\n    expect(server.once).toBeCalledWith('error', expect.any(Function));\n    expect(server.listen).toBeCalledTimes(1);\n    expect(server.listen).toBeCalledWith({\n      path: options.socket,\n      exclusive: false\n    }, expect.any(Function));\n    expect(listener.server).toBe(server);\n    expect(enableDestroy).toBeCalledTimes(1);\n    expect(enableDestroy).toBeCalledWith(listener.server);\n    expect(pify).toBeCalledTimes(1);\n    expect(pify).toBeCalledWith(listener.server.destroy);\n    expect(listener.computeURL).toBeCalledTimes(1);\n    expect(listener.listening).toEqual(true);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should prevent listening multiple times","suites":["server: listener"],"updatePoint":{"line":150,"column":47,"index":5060},"line":150,"code":"  test('should prevent listening multiple times', async () => {\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: false,\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    listener.computeURL = jest.fn();\n    listener.listening = true;\n    await listener.listen();\n    expect(http.createServer).not.toBeCalled();\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should throw error if error occurred or listen failed","suites":["server: listener"],"updatePoint":{"line":164,"column":61,"index":5464},"line":164,"code":"  test('should throw error if error occurred or listen failed', async () => {\n    const server = mockServer();\n    http.createServer.mockReturnValueOnce(server);\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: false,\n      app: jest.fn(),\n      dev: false\n    };\n    const listener = new Listener(options);\n    listener.computeURL = jest.fn();\n    listener.serverErrorHandler = jest.fn();\n    const serverError = new Error('error occurred');\n    server.listen.mockImplementationOnce((listenArgs, callback) => {\n      Promise.resolve().then(callback);\n      const errorListener = server.once.mock.calls[0][1];\n      errorListener(serverError);\n      return server;\n    });\n    await listener.listen();\n    expect(listener.serverErrorHandler).toBeCalledTimes(1);\n    expect(listener.serverErrorHandler).toBeCalledWith(serverError);\n    http.createServer.mockReturnValueOnce(server);\n    listener.serverErrorHandler.mockClear();\n    const listenError = new Error('listen failed');\n    server.listen.mockImplementationOnce((listenArgs, callback) => {\n      Promise.resolve().then(() => callback(listenError));\n      return server;\n    });\n    await listener.listen();\n    expect(listener.serverErrorHandler).toBeCalledTimes(1);\n    expect(listener.serverErrorHandler).toBeCalledWith(listenError);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should compute http url","suites":["server: listener"],"updatePoint":{"line":198,"column":31,"index":6763},"line":198,"code":"  test('should compute http url', () => {\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      baseURL: '/'\n    };\n    const listener = new Listener(options);\n    listener.server = mockServer();\n    listener.server.address.mockReturnValueOnce({\n      address: 'localhost',\n      port: 3000\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('localhost');\n    expect(listener.port).toEqual(3000);\n    expect(listener.url).toEqual('http://localhost:3000/');\n    listener.server.address.mockReturnValueOnce({\n      address: '127.0.0.1',\n      port: 3001\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('localhost');\n    expect(listener.port).toEqual(3001);\n    expect(listener.url).toEqual('http://localhost:3001/');\n    ip.address.mockReturnValueOnce('192.168.0.1');\n    listener.server.address.mockReturnValueOnce({\n      address: '0.0.0.0',\n      port: 3002\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('192.168.0.1');\n    expect(listener.port).toEqual(3002);\n    expect(listener.url).toEqual('http://192.168.0.1:3002/');\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should compute https url","suites":["server: listener"],"updatePoint":{"line":232,"column":32,"index":7873},"line":232,"code":"  test('should compute https url', () => {\n    const options = {\n      port: 3000,\n      host: 'localhost',\n      https: true,\n      baseURL: '/'\n    };\n    const listener = new Listener(options);\n    listener.server = mockServer();\n    listener.server.address.mockReturnValueOnce({\n      address: 'localhost',\n      port: 3000\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('localhost');\n    expect(listener.port).toEqual(3000);\n    expect(listener.url).toEqual('https://localhost:3000/');\n    listener.server.address.mockReturnValueOnce({\n      address: '127.0.0.1',\n      port: 3001\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('localhost');\n    expect(listener.port).toEqual(3001);\n    expect(listener.url).toEqual('https://localhost:3001/');\n    ip.address.mockReturnValueOnce('192.168.0.1');\n    listener.server.address.mockReturnValueOnce({\n      address: '0.0.0.0',\n      port: 3002\n    });\n    listener.computeURL();\n    expect(listener.host).toEqual('192.168.0.1');\n    expect(listener.port).toEqual(3002);\n    expect(listener.url).toEqual('https://192.168.0.1:3002/');\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should compute unix socket url","suites":["server: listener"],"updatePoint":{"line":267,"column":38,"index":9011},"line":267,"code":"  test('should compute unix socket url', () => {\n    const options = {\n      socket: true\n    };\n    const listener = new Listener(options);\n    listener.server = mockServer();\n    listener.server.address.mockReturnValueOnce('/var/nuxt/unix.socket');\n    listener.computeURL();\n    expect(listener.url).toEqual('unix+http:///var/nuxt/unix.socket');\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should throw error in serverErrorHandler","suites":["server: listener"],"updatePoint":{"line":277,"column":48,"index":9376},"line":277,"code":"  test('should throw error in serverErrorHandler', () => {\n    const listener = new Listener({});\n    const error = new Error('server error');\n    expect(listener.serverErrorHandler(error)).rejects.toThrow(error);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should throw address in use error","suites":["server: listener"],"updatePoint":{"line":282,"column":41,"index":9589},"line":282,"code":"  test('should throw address in use error', () => {\n    const listener = new Listener({});\n    listener.host = 'localhost';\n    listener.port = 3000;\n    const addressInUse = new Error('server error');\n    addressInUse.code = 'EADDRINUSE';\n    expect(listener.serverErrorHandler(addressInUse)).rejects.toThrow('Address `localhost:3000` is already in use.');\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should throw address in use error for socket","suites":["server: listener"],"updatePoint":{"line":290,"column":52,"index":9964},"line":290,"code":"  test('should throw address in use error for socket', () => {\n    const listener = new Listener({});\n    listener.socket = 'nuxt.socket';\n    const addressInUse = new Error('server error');\n    addressInUse.code = 'EADDRINUSE';\n    expect(listener.serverErrorHandler(addressInUse)).rejects.toThrow('Address `nuxt.socket` is already in use.');\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should fallback to a random port in address in use error","suites":["server: listener"],"updatePoint":{"line":297,"column":64,"index":10326},"line":297,"code":"  test('should fallback to a random port in address in use error', async () => {\n    const listener = new Listener({\n      dev: true\n    });\n    listener.host = 'localhost';\n    listener.port = 3000;\n    listener.close = jest.fn(() => Promise.resolve());\n    listener.listen = jest.fn();\n    const addressInUse = new Error('server error');\n    addressInUse.code = 'EADDRINUSE';\n    await listener.serverErrorHandler(addressInUse);\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith('Address `localhost:3000` is already in use.');\n    expect(consola.info).toBeCalledTimes(1);\n    expect(consola.info).toBeCalledWith('Trying a random port...');\n    expect(listener.port).toEqual('0');\n    expect(listener.close).toBeCalledTimes(1);\n    expect(listener.listen).toBeCalledTimes(1);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should reuse last random port","suites":["server: listener"],"updatePoint":{"line":316,"column":37,"index":11117},"line":316,"code":"  test('should reuse last random port', async () => {\n    const listener = new Listener({\n      dev: true,\n      host: 'localhost',\n      port: 3000\n    });\n    listener.host = 'localhost';\n    listener.close = jest.fn();\n\n    listener.listen = function () {\n      if (this.port === '0') {\n        this.port = Math.random();\n      }\n    };\n\n    const addressInUse = new Error('server error');\n    addressInUse.code = 'EADDRINUSE';\n    await listener.serverErrorHandler(addressInUse).catch(() => {});\n    const port1 = listener.port;\n    await listener.serverErrorHandler(addressInUse).catch(() => {});\n    const port2 = listener.port;\n    expect(port1).not.toBe(3000);\n    expect(port2).toBe(port1);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should close server","suites":["server: listener"],"updatePoint":{"line":340,"column":27,"index":11813},"line":340,"code":"  test('should close server', async () => {\n    const listener = new Listener({});\n    const server = mockServer();\n    listener.listening = true;\n    listener._server = server;\n    listener.server = server;\n    listener.server.listening = true;\n    listener.address = 'localhost';\n    listener.url = 'http://localhost:3000';\n    await listener.close();\n    expect(server.destroy).toBeCalledTimes(1);\n    expect(consola.debug).toBeCalledTimes(1);\n    expect(consola.debug).toBeCalledWith('server closed');\n    expect(listener.listening).toEqual(false);\n    expect(listener._server).toBe(null);\n    expect(listener.server).toBe(null);\n    expect(listener.address).toBe(null);\n    expect(listener.url).toBe(null);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should prevent destroying server if server is not listening","suites":["server: listener"],"updatePoint":{"line":359,"column":67,"index":12571},"line":359,"code":"  test('should prevent destroying server if server is not listening', async () => {\n    const listener = new Listener({});\n    const server = mockServer();\n    listener.listening = true;\n    listener._server = server;\n    listener.server = server;\n    listener.address = 'localhost';\n    listener.url = 'http://localhost:3000';\n    await listener.close();\n    expect(server.destroy).not.toBeCalled();\n    expect(consola.debug).not.toBeCalled();\n    expect(listener.listening).toEqual(false);\n    expect(listener._server).toBe(null);\n    expect(listener.server).toBe(null);\n    expect(listener.address).toBe(null);\n    expect(listener.url).toBe(null);\n  });","file":"listener.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return error middleware","suites":["server: errorMiddleware"],"updatePoint":{"line":55,"column":38,"index":1323},"line":55,"code":"  test('should return error middleware', () => {\n    const errorMiddleware = createErrorMiddleware({});\n    expect(errorMiddleware).toBeInstanceOf(Function);\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should send html error response","suites":["server: errorMiddleware"],"updatePoint":{"line":59,"column":39,"index":1488},"line":59,"code":"  test('should send html error response', async () => {\n    const params = createParams();\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {};\n    error.headers = {\n      'Custom-Header': 'test'\n    };\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    expect(ctx.res.statusCode).toEqual(500);\n    expect(ctx.res.statusMessage).toEqual('RuntimeError');\n    expect(ctx.res.setHeader).toBeCalledTimes(4);\n    expect(ctx.res.setHeader).nthCalledWith(1, 'Content-Type', 'text/html; charset=utf-8');\n    expect(ctx.res.setHeader).nthCalledWith(2, 'Content-Length', Buffer.byteLength('error template'));\n    expect(ctx.res.setHeader).nthCalledWith(3, 'Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');\n    expect(ctx.res.setHeader).nthCalledWith(4, 'Custom-Header', 'test');\n    expect(params.resources.errorTemplate).toBeCalledTimes(1);\n    expect(params.resources.errorTemplate).toBeCalledWith({\n      message: '',\n      status: 500\n    });\n    expect(ctx.res.end).toBeCalledTimes(1);\n    expect(ctx.res.end).toBeCalledWith('error template', 'utf-8');\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should send json error response","suites":["server: errorMiddleware"],"updatePoint":{"line":83,"column":39,"index":2642},"line":83,"code":"  test('should send json error response', async () => {\n    const params = createParams();\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {\n      statusCode: 404,\n      message: 'test error'\n    };\n    const ctx = createServerContext();\n    ctx.req.headers.accept = 'application/json';\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const errJson = JSON.stringify({\n      status: error.statusCode,\n      message: error.message,\n      name: error.name\n    }, undefined, 2);\n    expect(consola.error).not.toBeCalled();\n    expect(ctx.res.statusCode).toEqual(404);\n    expect(ctx.res.setHeader).toBeCalledTimes(3);\n    expect(ctx.res.setHeader).nthCalledWith(1, 'Content-Type', 'text/json; charset=utf-8');\n    expect(ctx.res.setHeader).nthCalledWith(2, 'Content-Length', Buffer.byteLength(errJson));\n    expect(ctx.res.setHeader).nthCalledWith(3, 'Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');\n    expect(params.resources.errorTemplate).not.toBeCalled();\n    expect(ctx.res.end).toBeCalledTimes(1);\n    expect(ctx.res.end).toBeCalledWith(errJson, 'utf-8');\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should send html error response by youch in debug mode","suites":["server: errorMiddleware"],"updatePoint":{"line":108,"column":62,"index":3796},"line":108,"code":"  test('should send html error response by youch in debug mode', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = new Error('test error');\n    error.statusCode = 503;\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const errHtml = 'youch html';\n    expect(ctx.res.statusCode).toEqual(503);\n    expect(ctx.res.setHeader).toBeCalledTimes(3);\n    expect(ctx.res.setHeader).nthCalledWith(1, 'Content-Type', 'text/html; charset=utf-8');\n    expect(ctx.res.setHeader).nthCalledWith(2, 'Content-Length', Buffer.byteLength(errHtml));\n    expect(ctx.res.setHeader).nthCalledWith(3, 'Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');\n    expect(params.resources.errorTemplate).not.toBeCalled();\n    expect(ctx.res.end).toBeCalledTimes(1);\n    expect(ctx.res.end).toBeCalledWith(errHtml, 'utf-8');\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should send json error response by youch in debug mode","suites":["server: errorMiddleware"],"updatePoint":{"line":126,"column":62,"index":4773},"line":126,"code":"  test('should send json error response by youch in debug mode', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {\n      statusCode: 404,\n      message: 'test error'\n    };\n    const ctx = createServerContext();\n    ctx.req.headers.accept = 'application/json';\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const errJson = JSON.stringify('youch json', undefined, 2);\n    expect(ctx.res.statusCode).toEqual(404);\n    expect(ctx.res.setHeader).toBeCalledTimes(3);\n    expect(ctx.res.setHeader).nthCalledWith(1, 'Content-Type', 'text/json; charset=utf-8');\n    expect(ctx.res.setHeader).nthCalledWith(2, 'Content-Length', Buffer.byteLength(errJson));\n    expect(ctx.res.setHeader).nthCalledWith(3, 'Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');\n    expect(params.resources.errorTemplate).not.toBeCalled();\n    expect(ctx.res.end).toBeCalledTimes(1);\n    expect(ctx.res.end).toBeCalledWith(errJson, 'utf-8');\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should search all possible paths when read source","suites":["server: errorMiddleware"],"updatePoint":{"line":147,"column":57,"index":5831},"line":147,"code":"  test('should search all possible paths when read source', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = createError();\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    expect(fs.existsSync).nthCalledWith(1, `resolve(${params.options.srcDir}, ${errorFileName})`);\n    expect(fs.existsSync).nthCalledWith(2, `resolve(${params.options.rootDir}, ${errorFileName})`);\n    expect(fs.existsSync).nthCalledWith(3, `resolve(join(${params.options.buildDir}, dist, server), ${errorFileName})`);\n    expect(fs.existsSync).nthCalledWith(4, `resolve(${params.options.buildDir}, ${errorFileName})`);\n    expect(fs.existsSync).nthCalledWith(5, `resolve(${process.cwd()}, ${errorFileName})`);\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return source content after read source","suites":["server: errorMiddleware"],"updatePoint":{"line":160,"column":54,"index":6681},"line":160,"code":"  test('should return source content after read source', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {};\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const frame = {\n      fileName: errorFileName\n    };\n    const readSource = Youch.mock.calls[0][2];\n    fs.existsSync.mockImplementationOnce(() => true);\n    fs.readFile.mockImplementationOnce(() => Promise.resolve('source content'));\n    await readSource(frame);\n    expect(frame).toEqual({\n      fileName: errorFileName,\n      contents: 'source content',\n      fullPath: errorFileName\n    });\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should ignore if source file not exists","suites":["server: errorMiddleware"],"updatePoint":{"line":180,"column":47,"index":7400},"line":180,"code":"  test('should ignore if source file not exists', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {};\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const frame = {\n      fileName: errorFileName\n    };\n    const readSource = Youch.mock.calls[0][2];\n    fs.exists.mockReturnValueOnce(false);\n    await readSource(frame);\n    expect(frame).toEqual({\n      fileName: errorFileName\n    });\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return if fileName is unknown when read source","suites":["server: errorMiddleware"],"updatePoint":{"line":197,"column":61,"index":7975},"line":197,"code":"  test('should return if fileName is unknown when read source', async () => {\n    const params = createParams();\n    params.options.debug = true;\n    const errorMiddleware = createErrorMiddleware(params);\n    const error = {};\n    const ctx = createServerContext();\n    await errorMiddleware(error, ctx.req, ctx.res, ctx.next);\n    const frame = {};\n    const readSource = Youch.mock.calls[0][2];\n    await readSource(frame);\n    expect(frame.fileName).toBeUndefined();\n  });","file":"middleware/error.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return nuxt middleware","suites":["server: nuxtMiddleware"],"updatePoint":{"line":39,"column":37,"index":757},"line":39,"code":"  test('should return nuxt middleware', () => {\n    const nuxtMiddleware = createNuxtMiddleware({});\n    expect(nuxtMiddleware).toBeInstanceOf(Function);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should render route in nuxt middleware","suites":["server: nuxtMiddleware"],"updatePoint":{"line":43,"column":46,"index":926},"line":43,"code":"  test('should render route in nuxt middleware', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html'\n    };\n    context.renderRoute.mockReturnValue(result);\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    const html = await nuxtMiddleware(req, res, next);\n    expect(context.renderRoute).toBeCalledTimes(1);\n    expect(context.renderRoute).toBeCalledWith(req.url, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).toBeCalledTimes(3);\n    expect(context.nuxt.callHook).nthCalledWith(1, 'render:route', req.url, result, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).nthCalledWith(2, 'render:beforeResponse', req.url, result, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).nthCalledWith(3, 'render:routeDone', req.url, result, {\n      req,\n      res\n    });\n    expect(res.setHeader).toBeCalledTimes(3);\n    expect(res.setHeader).nthCalledWith(1, 'Content-Type', 'text/html; charset=utf-8');\n    expect(res.setHeader).nthCalledWith(2, 'Accept-Ranges', 'none');\n    expect(res.setHeader).nthCalledWith(3, 'Content-Length', Buffer.byteLength(result.html));\n    expect(res.end).toBeCalledTimes(1);\n    expect(res.end).toBeCalledWith(result.html, 'utf8');\n    expect(res.statusCode).toEqual(200);\n    expect(html).toEqual(result.html);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should early return if route is redirected","suites":["server: nuxtMiddleware"],"updatePoint":{"line":83,"column":50,"index":2355},"line":83,"code":"  test('should early return if route is redirected', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      redirected: true\n    };\n    context.renderRoute.mockReturnValue(result);\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    const html = await nuxtMiddleware(req, res, next);\n    expect(context.nuxt.callHook).toBeCalledTimes(2);\n    expect(context.nuxt.callHook).nthCalledWith(1, 'render:route', req.url, result, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).nthCalledWith(2, 'render:routeDone', req.url, result, {\n      req,\n      res\n    });\n    expect(res.setHeader).not.toBeCalled();\n    expect(res.end).not.toBeCalled();\n    expect(res.statusCode).toEqual(200);\n    expect(html).toEqual(result.html);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should set error status code when error occurred","suites":["server: nuxtMiddleware"],"updatePoint":{"line":111,"column":56,"index":3239},"line":111,"code":"  test('should set error status code when error occurred', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      error: new Error('render error')\n    };\n    const nuxt = {\n      error: {\n        statusCode: 404\n      }\n    };\n    context.renderRoute.mockImplementation((url, ctx) => {\n      ctx.nuxt = nuxt;\n      return result;\n    });\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    const html = await nuxtMiddleware(req, res, next);\n    expect(context.nuxt.callHook).toBeCalledTimes(3);\n    expect(context.nuxt.callHook).nthCalledWith(1, 'render:route', req.url, result, {\n      req,\n      res,\n      nuxt\n    });\n    expect(context.nuxt.callHook).nthCalledWith(2, 'render:beforeResponse', req.url, result, {\n      req,\n      res,\n      nuxt\n    });\n    expect(context.nuxt.callHook).nthCalledWith(3, 'render:routeDone', req.url, result, {\n      req,\n      res,\n      nuxt\n    });\n    expect(res.statusCode).toEqual(404);\n    expect(html).toEqual(result.html);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should add etag after rendering","suites":["server: nuxtMiddleware"],"updatePoint":{"line":152,"column":39,"index":4335},"line":152,"code":"  test('should add etag after rendering', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html'\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.render.etag = true;\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    await nuxtMiddleware(req, res, next);\n    expect(generateETag).toBeCalledTimes(1);\n    expect(generateETag).toBeCalledWith('rendered html', true);\n    expect(res.setHeader).nthCalledWith(1, 'ETag', 'etag-hash');\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should set etag after rendering through hook","suites":["server: nuxtMiddleware"],"updatePoint":{"line":170,"column":52,"index":4942},"line":170,"code":"  test('should set etag after rendering through hook', async () => {\n    const context = createContext();\n    const hash = jest.fn(() => 'etag-hook');\n    context.options.render.etag = {\n      hash\n    };\n    const result = {\n      html: 'rendered html'\n    };\n    context.renderRoute.mockReturnValue(result);\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    await nuxtMiddleware(req, res, next);\n    expect(hash).toBeCalledWith('rendered html', expect.any(Object));\n    expect(res.setHeader).nthCalledWith(1, 'ETag', 'etag-hook');\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return 304 if request is fresh","suites":["server: nuxtMiddleware"],"updatePoint":{"line":190,"column":45,"index":5562},"line":190,"code":"  test('should return 304 if request is fresh', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html'\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.render.etag = true;\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(res.statusCode).toEqual(304);\n    expect(context.nuxt.callHook).toBeCalledTimes(3);\n    expect(context.nuxt.callHook).nthCalledWith(1, 'render:route', req.url, result, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).nthCalledWith(2, 'render:beforeResponse', req.url, result, {\n      req,\n      res\n    });\n    expect(context.nuxt.callHook).nthCalledWith(3, 'render:routeDone', req.url, result, {\n      req,\n      res\n    });\n    expect(res.end).toBeCalledTimes(1);\n    expect(res.end).toBeCalledWith();\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should add http2 links header if http2 push is enabled","suites":["server: nuxtMiddleware"],"updatePoint":{"line":222,"column":62,"index":6569},"line":222,"code":"  test('should add http2 links header if http2 push is enabled', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      preloadFiles: ['/nuxt/preload1.js', '/nuxt/preload2.js']\n    };\n    context.renderRoute.mockReturnValue(result);\n    const pushAssets = jest.fn((req, res, publicPath, preloadFiles) => preloadFiles);\n    context.options.render.http2 = {\n      push: true,\n      pushAssets\n    };\n    context.resources = {\n      clientManifest: {\n        publicPath: '/nuxt'\n      }\n    };\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(pushAssets).toBeCalledWith(req, res, '/nuxt', ['/nuxt/preload1.js', '/nuxt/preload2.js']);\n    expect(res.setHeader).nthCalledWith(1, 'Link', '/nuxt/preload1.js, /nuxt/preload2.js');\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should only include script and style in http2 push by default","suites":["server: nuxtMiddleware"],"updatePoint":{"line":250,"column":69,"index":7528},"line":250,"code":"  test('should only include script and style in http2 push by default', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      preloadFiles: [{\n        file: '/nuxt/preload1.js',\n        asType: 'script'\n      }, {\n        file: '/nuxt/preload2.js',\n        asType: 'script'\n      }, {\n        file: '/nuxt/style.css',\n        asType: 'style'\n      }, {\n        file: '/nuxt/font.woff',\n        asType: 'font'\n      }]\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.render.http2 = {\n      push: true\n    };\n    context.resources = {\n      clientManifest: {\n        publicPath: '/nuxt'\n      }\n    };\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(res.setHeader).nthCalledWith(1, 'Link', '</nuxt/nuxt/preload1.js>; rel=preload; as=script, </nuxt/nuxt/preload2.js>; rel=preload; as=script, </nuxt/nuxt/style.css>; rel=preload; as=style');\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should ignore preload files which are excluded by shouldPush","suites":["server: nuxtMiddleware"],"updatePoint":{"line":287,"column":68,"index":8624},"line":287,"code":"  test('should ignore preload files which are excluded by shouldPush', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      preloadFiles: [{\n        file: '/nuxt/preload1.js',\n        asType: 'script'\n      }, {\n        file: '/nuxt/preload2.js',\n        asType: 'script',\n        modern: true\n      }, {\n        file: '/nuxt/style.css',\n        asType: 'style'\n      }, {\n        file: '/nuxt/font.woff',\n        asType: 'font'\n      }]\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.dev = true;\n    context.options.render.crossorigin = 'use-credentials';\n    context.options.render.http2 = {\n      push: true,\n      shouldPush: jest.fn((fileWithoutQuery, asType) => asType === 'script')\n    };\n    context.resources = {\n      clientManifest: {\n        publicPath: '/nuxt'\n      }\n    };\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(consola.warn).toBeCalledWith('http2.shouldPush is deprecated. Use http2.pushAssets function');\n    expect(context.options.render.http2.shouldPush).toBeCalledTimes(4);\n    expect(res.setHeader).nthCalledWith(1, 'Link', '</nuxt/nuxt/preload1.js>; rel=preload; crossorigin=use-credentials; as=script, </nuxt/nuxt/preload2.js>; rel=modulepreload; crossorigin=use-credentials; as=script');\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should add csp header if csp is enabled","suites":["server: nuxtMiddleware"],"updatePoint":{"line":330,"column":47,"index":10086},"line":330,"code":"  test('should add csp header if csp is enabled', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      cspScriptSrcHashes: ['sha256-hashes']\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.render.csp = true;\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(res.setHeader).nthCalledWith(1, 'Content-Security-Policy', \"script-src 'self' sha256-hashes\");\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should support allowedSources for setting csp header","suites":["server: nuxtMiddleware"],"updatePoint":{"line":348,"column":60,"index":10710},"line":348,"code":"  test('should support allowedSources for setting csp header', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      cspScriptSrcHashes: ['sha256-hashes']\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.dev = true;\n    context.options.render.csp = {\n      reportOnly: true,\n      allowedSources: ['/nuxt/*.js', '/nuxt/images/*']\n    };\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(res.setHeader).nthCalledWith(1, 'Content-Security-Policy-Report-Only', \"script-src 'self' sha256-hashes /nuxt/*.js /nuxt/images/*\");\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should support policies for setting csp header","suites":["server: nuxtMiddleware"],"updatePoint":{"line":370,"column":54,"index":11480},"line":370,"code":"  test('should support policies for setting csp header', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html',\n      cspScriptSrcHashes: ['sha256-hashes']\n    };\n    context.renderRoute.mockReturnValue(result);\n    context.options.dev = true;\n    context.options.render.csp = {\n      policies: {\n        'script-src': ['/nuxt', '/test.js'],\n        'report-uri': ['/report']\n      }\n    };\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(res.setHeader).nthCalledWith(1, 'Content-Security-Policy', \"script-src sha256-hashes 'self' /nuxt /test.js; report-uri /report\");\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should catch error during running nuxt middleware","suites":["server: nuxtMiddleware"],"updatePoint":{"line":394,"column":57,"index":12276},"line":394,"code":"  test('should catch error during running nuxt middleware', async () => {\n    const context = createContext();\n    const err = Error('render error');\n    context.renderRoute.mockImplementation(() => {\n      throw err;\n    });\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    await nuxtMiddleware(req, res, next);\n    expect(next).toBeCalledWith(err);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should log and return error during redirecting in nuxt middleware","suites":["server: nuxtMiddleware"],"updatePoint":{"line":410,"column":73,"index":12771},"line":410,"code":"  test('should log and return error during redirecting in nuxt middleware', async () => {\n    const context = createContext();\n    const err = Error('render error');\n    context.renderRoute.mockImplementation((url, ctx) => {\n      ctx.redirected = true;\n      throw err;\n    });\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    fresh.mockReturnValue(true);\n    expect(await nuxtMiddleware(req, res, next)).toBe(err);\n    expect(consola.error).toBeCalledWith(err);\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return handle uri errors by normalizing","suites":["server: nuxtMiddleware"],"updatePoint":{"line":427,"column":54,"index":13311},"line":427,"code":"  test('should return handle uri errors by normalizing', async () => {\n    const context = createContext();\n    const result = {\n      html: 'rendered html'\n    };\n    context.renderRoute.mockReturnValue(result);\n    const nuxtMiddleware = createNuxtMiddleware(context);\n    const {\n      req,\n      res,\n      next\n    } = createServerContext();\n    const paths = ['%c1%81', '%c1', '%'];\n\n    for (const path of paths) {\n      await nuxtMiddleware({ ...req,\n        url: 'http://localhost/test/server/' + path\n      }, res, next);\n      expect(next).toBeCalledTimes(0);\n      expect(res.statusCode).toBe(200);\n      next.mockReset();\n    }\n  });","file":"middleware/nuxt.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should return timing middleware","suites":["server: timingMiddleware"],"updatePoint":{"line":21,"column":39,"index":496},"line":21,"code":"  test('should return timing middleware', () => {\n    const timingMiddleware = createTimingMiddleware({});\n    expect(timingMiddleware).toBeInstanceOf(Function);\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should warn duplicate registration","suites":["server: timingMiddleware"],"updatePoint":{"line":25,"column":42,"index":667},"line":25,"code":"  test('should warn duplicate registration', () => {\n    const timingMiddleware = createTimingMiddleware({});\n    const ctx = createServerContext();\n    ctx.res.timing = true;\n    timingMiddleware(ctx.req, ctx.res, ctx.next);\n    expect(consola.warn).toBeCalledWith('server-timing is already registered.');\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should register timer for recording timing","suites":["server: timingMiddleware"],"updatePoint":{"line":32,"column":50,"index":988},"line":32,"code":"  test('should register timer for recording timing', () => {\n    const timingMiddleware = createTimingMiddleware({\n      total: true\n    });\n    const ctx = createServerContext();\n    timingMiddleware(ctx.req, ctx.res, ctx.next);\n    expect(ctx.res.timing).toBeDefined();\n    expect(Timer.prototype.start).toBeCalledTimes(1);\n    expect(Timer.prototype.start).toBeCalledWith('total', 'Nuxt Server Time');\n    expect(onHeaders).toBeCalledTimes(1);\n    expect(onHeaders).toBeCalledWith(ctx.res, expect.any(Function));\n    expect(ctx.next).toBeCalledTimes(1);\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should add Server-Timing header before sending header","suites":["server: timingMiddleware"],"updatePoint":{"line":45,"column":61,"index":1562},"line":45,"code":"  test('should add Server-Timing header before sending header', () => {\n    const timingMiddleware = createTimingMiddleware({\n      total: true\n    });\n    const ctx = createServerContext();\n    timingMiddleware(ctx.req, ctx.res, ctx.next);\n    const headerCallback = onHeaders.mock.calls[0][1];\n    Timer.prototype.end.mockReturnValueOnce({\n      name: 'total',\n      duration: 300,\n      description: 'Nuxt Server Time'\n    });\n    headerCallback();\n    expect(ctx.res.timing.end).toBeCalledTimes(1);\n    expect(ctx.res.timing.end).toBeCalledWith('total');\n    expect(ctx.res.getHeader).toBeCalledTimes(1);\n    expect(ctx.res.getHeader).toBeCalledWith('Server-Timing');\n    expect(ctx.res.setHeader).toBeCalledTimes(1);\n    expect(ctx.res.setHeader).toBeCalledWith('Server-Timing', 'total;dur=300;desc=\"Nuxt Server Time\"');\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should ignore desc if empty","suites":["server: timingMiddleware"],"updatePoint":{"line":65,"column":35,"index":2368},"line":65,"code":"  test('should ignore desc if empty', () => {\n    const timingMiddleware = createTimingMiddleware({});\n    const ctx = createServerContext();\n    timingMiddleware(ctx.req, ctx.res, ctx.next);\n    expect(ctx.res.timing.formatHeader({\n      name: 'timing-test',\n      duration: 300\n    })).toEqual('timing-test;dur=300');\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should not send Server-Timing header if empty","suites":["server: timingMiddleware"],"updatePoint":{"line":74,"column":53,"index":2712},"line":74,"code":"  test('should not send Server-Timing header if empty', () => {\n    const timingMiddleware = createTimingMiddleware({\n      total: true\n    });\n    const ctx = createServerContext();\n    timingMiddleware(ctx.req, ctx.res, ctx.next);\n    const headerCallback = onHeaders.mock.calls[0][1];\n    headerCallback();\n    expect(ctx.res.timing.end).toBeCalledTimes(1);\n    expect(ctx.res.timing.end).toBeCalledWith('total');\n    expect(ctx.res.getHeader).not.toBeCalled();\n    expect(ctx.res.setHeader).not.toBeCalled();\n  });","file":"middleware/timing.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should construct server","suites":["server: server"],"updatePoint":{"line":110,"column":31,"index":3166},"line":110,"code":"  test('should construct server', () => {\n    const nuxt = createNuxt();\n    determineGlobals.mockReturnValueOnce({ ...nuxt.options.globals,\n      name: nuxt.options.globalName\n    });\n    let server = new Server(nuxt);\n    expect(server.nuxt).toBe(nuxt);\n    expect(server.options).toBe(nuxt.options);\n    expect(server.publicPath).toBe('__nuxt_test');\n    expect(server.resources).toEqual({});\n    expect(server.listeners).toEqual([]);\n    expect(connect).toBeCalledTimes(1);\n    expect(server.nuxt.hook).toBeCalledTimes(1);\n    expect(server.nuxt.hook).toBeCalledWith('close', expect.any(Function));\n    const closeHook = server.nuxt.hook.mock.calls[0][1];\n    server.close = jest.fn();\n    expect(server.close).not.toBeCalled();\n    closeHook();\n    expect(server.close).toBeCalledTimes(1);\n    nuxt.options.build._publicPath = 'http://localhost:3000/test';\n    isUrl.mockReturnValueOnce(true);\n    server = new Server(nuxt);\n    expect(server.publicPath).toBe(nuxt.options.build._publicPath);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should be ready for listening","suites":["server: server"],"updatePoint":{"line":134,"column":37,"index":4176},"line":134,"code":"  test('should be ready for listening', async () => {\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    const renderer = {\n      ready: jest.fn()\n    };\n    const context = jest.fn();\n    VueRenderer.mockImplementationOnce(() => renderer);\n    ServerContext.mockImplementationOnce(() => context);\n    server.setupMiddleware = jest.fn();\n    path.join.mockRestore();\n    path.resolve.mockRestore();\n    await server.ready();\n    expect(server.nuxt.callHook).toBeCalledTimes(2);\n    expect(server.nuxt.callHook).nthCalledWith(1, 'render:before', server, server.options.render);\n    expect(server.nuxt.callHook).nthCalledWith(2, 'render:done', server);\n    expect(ServerContext).toBeCalledTimes(1);\n    expect(ServerContext).toBeCalledWith(server);\n    expect(VueRenderer).toBeCalledTimes(1);\n    expect(VueRenderer).toBeCalledWith(context);\n    expect(server.renderer).toBe(renderer);\n    expect(renderer.ready).toBeCalledTimes(1);\n    expect(server.setupMiddleware).toBeCalledTimes(1);\n    jest.spyOn(path, 'join').mockImplementation((...args) => `join(${args.join(', ')})`);\n    jest.spyOn(path, 'resolve').mockImplementation((...args) => `resolve(${args.join(', ')})`);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup middleware","suites":["server: server"],"updatePoint":{"line":160,"column":31,"index":5369},"line":160,"code":"  test('should setup middleware', async () => {\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.serverContext = {\n      id: 'test-server-context'\n    };\n    await server.setupMiddleware();\n    expect(server.nuxt.callHook).toBeCalledTimes(2);\n    expect(server.nuxt.callHook).nthCalledWith(1, 'render:setupMiddleware', server.app);\n    expect(server.nuxt.callHook).nthCalledWith(2, 'render:errorMiddleware', server.app);\n    expect(server.useMiddleware).toBeCalledTimes(4);\n    expect(serveStatic).toBeCalledTimes(2);\n    expect(serveStatic).nthCalledWith(1, 'resolve(/var/nuxt/src, var/nuxt/static)', server.options.render.static);\n    expect(server.useMiddleware).nthCalledWith(1, {\n      dir: 'resolve(/var/nuxt/src, var/nuxt/static)',\n      id: 'test-serve-static',\n      prefix: 'test-render-static-prefix'\n    });\n    expect(serveStatic).nthCalledWith(2, 'resolve(/var/nuxt/build, dist, client)', server.options.render.dist);\n    expect(server.useMiddleware).nthCalledWith(2, {\n      handler: {\n        dir: 'resolve(/var/nuxt/build, dist, client)',\n        id: 'test-serve-static'\n      },\n      path: '__nuxt_test'\n    });\n    const nuxtMiddlewareOpts = {\n      options: server.options,\n      nuxt: server.nuxt,\n      renderRoute: expect.any(Function),\n      resources: server.resources\n    };\n    expect(nuxtMiddleware).toBeCalledTimes(1);\n    expect(nuxtMiddleware).toBeCalledWith(nuxtMiddlewareOpts);\n    expect(server.useMiddleware).nthCalledWith(3, {\n      id: 'test-nuxt-middleware',\n      ...nuxtMiddlewareOpts\n    });\n    const errorMiddlewareOpts = {\n      resources: server.resources,\n      options: server.options\n    };\n    expect(errorMiddleware).toBeCalledTimes(1);\n    expect(errorMiddleware).toBeCalledWith(errorMiddlewareOpts);\n    expect(server.useMiddleware).nthCalledWith(4, {\n      id: 'test-error-middleware',\n      ...errorMiddlewareOpts\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup compressor middleware","suites":["server: server"],"updatePoint":{"line":210,"column":42,"index":7331},"line":210,"code":"  test('should setup compressor middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.render.compressor = jest.fn();\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.renderer = {\n      context: {\n        id: 'test-server-context'\n      }\n    };\n    await server.setupMiddleware();\n    expect(server.useMiddleware).nthCalledWith(1, nuxt.options.render.compressor);\n    server.useMiddleware.mockClear();\n    nuxt.options.render.compressor = {\n      id: 'test-render-compressor'\n    };\n    compression.mockImplementationOnce(options => ({\n      name: 'compression',\n      ...options\n    }));\n    await server.setupMiddleware();\n    expect(server.useMiddleware).nthCalledWith(1, {\n      id: 'test-render-compressor',\n      name: 'compression'\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup timing middleware","suites":["server: server"],"updatePoint":{"line":236,"column":38,"index":8138},"line":236,"code":"  test('should setup timing middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.server.timing = {\n      id: 'test-server-timing'\n    };\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.renderer = {\n      context: {\n        id: 'test-server-context'\n      }\n    };\n    await server.setupMiddleware();\n    expect(createTimingMiddleware).nthCalledWith(1, {\n      id: 'test-server-timing'\n    });\n    expect(server.useMiddleware).nthCalledWith(1, {\n      id: 'test-server-timing'\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup open-in-editor middleware","suites":["server: server"],"updatePoint":{"line":256,"column":46,"index":8696},"line":256,"code":"  test('should setup open-in-editor middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    nuxt.options.debug = true;\n    nuxt.options.editor = {\n      id: 'test-editor'\n    };\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.renderer = {\n      context: {\n        id: 'test-server-context'\n      }\n    };\n    await server.setupMiddleware();\n    expect(launchMiddleware).toBeCalledTimes(1);\n    expect(launchMiddleware).toBeCalledWith({\n      id: 'test-editor'\n    });\n    expect(server.useMiddleware).nthCalledWith(3, {\n      handler: {\n        id: 'test-editor'\n      },\n      path: '__open-in-editor'\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup server middleware","suites":["server: server"],"updatePoint":{"line":282,"column":38,"index":9378},"line":282,"code":"  test('should setup server middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.serverMiddleware = [{\n      id: 'test-server-middleware-1'\n    }, {\n      id: 'test-server-middleware-2'\n    }];\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.renderer = {\n      context: {\n        id: 'test-server-context'\n      }\n    };\n    await server.setupMiddleware();\n    expect(server.useMiddleware).nthCalledWith(3, {\n      id: 'test-server-middleware-1'\n    });\n    expect(server.useMiddleware).nthCalledWith(4, {\n      id: 'test-server-middleware-2'\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should setup fallback middleware","suites":["server: server"],"updatePoint":{"line":304,"column":40,"index":9997},"line":304,"code":"  test('should setup fallback middleware', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.render.fallback = {\n      dist: {\n        id: 'test-render-fallback-dist'\n      },\n      static: {\n        id: 'test-render-fallback-static'\n      }\n    };\n    const server = new Server(nuxt);\n    server.useMiddleware = jest.fn();\n    server.renderer = {\n      context: {\n        id: 'test-server-context'\n      }\n    };\n    await server.setupMiddleware();\n    expect(servePlaceholder).toBeCalledTimes(2);\n    expect(server.useMiddleware).nthCalledWith(3, {\n      handler: {\n        id: 'test-render-fallback-dist',\n        key: 'test-serve-placeholder'\n      },\n      path: '__nuxt_test'\n    });\n    expect(server.useMiddleware).nthCalledWith(4, {\n      handler: {\n        id: 'test-render-fallback-static',\n        key: 'test-serve-placeholder'\n      },\n      path: '/'\n    });\n    servePlaceholder.mockClear();\n    nuxt.options.render.fallback = {};\n    await server.setupMiddleware();\n    expect(servePlaceholder).not.toBeCalled();\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should use object middleware","suites":["server: server"],"updatePoint":{"line":342,"column":36,"index":11040},"line":342,"code":"  test('should use object middleware', () => {\n    const nuxt = createNuxt();\n    nuxt.options.router = {\n      base: ''\n    };\n    const server = new Server(nuxt);\n    const handler = jest.fn();\n    server.useMiddleware({\n      handler\n    });\n    expect(nuxt.resolver.requireModule).not.toBeCalled();\n    expect(server.app.use).toBeCalledTimes(1);\n    expect(server.app.use).toBeCalledWith(nuxt.options.router.base, handler);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should use function module middleware","suites":["server: server"],"updatePoint":{"line":356,"column":45,"index":11483},"line":356,"code":"  test('should use function module middleware', () => {\n    const nuxt = createNuxt();\n    nuxt.options.router = {\n      base: ''\n    };\n    const server = new Server(nuxt);\n    const handler = jest.fn();\n    nuxt.resolver.requireModule.mockReturnValueOnce(handler);\n    server.useMiddleware('test-middleware');\n    expect(nuxt.resolver.requireModule).toBeCalledTimes(1);\n    expect(nuxt.resolver.requireModule).toBeCalledWith('test-middleware');\n    expect(server.app.use).toBeCalledTimes(1);\n    expect(server.app.use).toBeCalledWith(nuxt.options.router.base, handler);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should use object module middleware","suites":["server: server"],"updatePoint":{"line":370,"column":43,"index":12059},"line":370,"code":"  test('should use object module middleware', () => {\n    const nuxt = createNuxt();\n    nuxt.options.router = {\n      base: '/'\n    };\n    const server = new Server(nuxt);\n    const handler = jest.fn();\n    nuxt.resolver.requireModule.mockReturnValueOnce({\n      handler,\n      prefix: false,\n      path: '//middleware'\n    });\n    server.useMiddleware('test-middleware');\n    expect(nuxt.resolver.requireModule).toBeCalledTimes(1);\n    expect(nuxt.resolver.requireModule).toBeCalledWith('test-middleware');\n    expect(server.app.use).toBeCalledTimes(1);\n    expect(server.app.use).toBeCalledWith('/middleware', handler);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should show error when module require failed","suites":["server: server"],"updatePoint":{"line":388,"column":52,"index":12697},"line":388,"code":"  test('should show error when module require failed', () => {\n    const nuxt = createNuxt();\n    nuxt.options.router = {\n      base: '/'\n    };\n    const server = new Server(nuxt);\n    const error = Error('middleware resolves failed');\n    nuxt.resolver.requireModule.mockImplementationOnce(() => {\n      throw error;\n    });\n    server.useMiddleware('test-middleware');\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('ServerMiddleware Error:', error);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should only log error when module resolves failed in dev mode","suites":["server: server"],"updatePoint":{"line":402,"column":69,"index":13214},"line":402,"code":"  test('should only log error when module resolves failed in dev mode', () => {\n    const nuxt = createNuxt();\n    nuxt.options.dev = true;\n    nuxt.options.router = {\n      base: '/'\n    };\n    const server = new Server(nuxt);\n    const error = Error('middleware resolves failed');\n    nuxt.resolver.requireModule.mockImplementationOnce(() => {\n      throw error;\n    });\n    server.useMiddleware('test-middleware');\n    expect(consola.error).toBeCalledTimes(1);\n    expect(consola.error).toBeCalledWith('ServerMiddleware Error:', error);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should render route via renderer","suites":["server: server"],"updatePoint":{"line":417,"column":40,"index":13731},"line":417,"code":"  test('should render route via renderer', () => {\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    server.renderer = {\n      renderRoute: jest.fn()\n    };\n    server.renderRoute('test-render-route');\n    expect(server.renderer.renderRoute).toBeCalledTimes(1);\n    expect(server.renderer.renderRoute).toBeCalledWith('test-render-route');\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should load resources via renderer","suites":["server: server"],"updatePoint":{"line":427,"column":42,"index":14100},"line":427,"code":"  test('should load resources via renderer', () => {\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    server.renderer = {\n      loadResources: jest.fn()\n    };\n    server.loadResources('test-load-resources');\n    expect(server.renderer.loadResources).toBeCalledTimes(1);\n    expect(server.renderer.loadResources).toBeCalledWith('test-load-resources');\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should render and get window","suites":["server: server"],"updatePoint":{"line":437,"column":36,"index":14475},"line":437,"code":"  test('should render and get window', () => {\n    const nuxt = createNuxt();\n    const globals = { ...nuxt.options.globals,\n      name: nuxt.options.globalName,\n      loadedCallback: jest.fn()\n    };\n    determineGlobals.mockReturnValueOnce(globals);\n    const server = new Server(nuxt);\n    server.renderAndGetWindow('/render/window');\n    expect(renderAndGetWindow).toBeCalledTimes(1);\n    expect(renderAndGetWindow).toBeCalledWith('/render/window', {}, {\n      loadingTimeout: 2000,\n      loadedCallback: globals.loadedCallback,\n      ssr: nuxt.options.render.ssr,\n      globals\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should listen server","suites":["server: server"],"updatePoint":{"line":454,"column":28,"index":15064},"line":454,"code":"  test('should listen server', async () => {\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    const listener = {\n      listen: jest.fn(),\n      server: jest.fn()\n    };\n    Listener.mockImplementationOnce(() => {\n      return listener;\n    });\n    await server.listen(3000, 'localhost', '/var/nuxt/unix.socket');\n    expect(Listener).toBeCalledWith({\n      port: 3000,\n      host: 'localhost',\n      socket: '/var/nuxt/unix.socket',\n      https: undefined,\n      app: server.app,\n      dev: server.options.dev,\n      baseURL: '/foo/'\n    });\n    expect(listener.listen).toBeCalledTimes(1);\n    expect(server.listeners).toEqual([listener]);\n    expect(server.nuxt.callHook).toBeCalledTimes(1);\n    expect(server.nuxt.callHook).toBeCalledWith('listen', listener.server, listener);\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should listen server via options.server","suites":["server: server"],"updatePoint":{"line":479,"column":47,"index":15891},"line":479,"code":"  test('should listen server via options.server', async () => {\n    const nuxt = createNuxt();\n    nuxt.options.server = {\n      host: 'localhost',\n      port: '3000',\n      socket: '/var/nuxt/unix.socket',\n      https: true\n    };\n    const server = new Server(nuxt);\n    await server.listen();\n    expect(Listener).toBeCalledWith({ ...nuxt.options.server,\n      app: server.app,\n      dev: server.options.dev,\n      baseURL: '/foo/'\n    });\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should close server","suites":["server: server"],"updatePoint":{"line":495,"column":27,"index":16320},"line":495,"code":"  test('should close server', async () => {\n    const removeAllListeners = jest.fn();\n    connect.mockReturnValueOnce({\n      use: jest.fn(),\n      stack: [],\n      removeAllListeners\n    });\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    const listener = {\n      close: jest.fn()\n    };\n    server.listeners = [listener];\n    server.renderer = {\n      close: jest.fn()\n    };\n    server.resources = {\n      id: 'test-resources'\n    };\n    await server.close();\n    expect(server.__closed).toEqual(true);\n    expect(listener.close).toBeCalledTimes(1);\n    expect(server.listeners).toEqual([]);\n    expect(server.renderer.close).toBeCalledTimes(1);\n    expect(removeAllListeners).toBeCalledTimes(1);\n    expect(server.app).toBeNull();\n    expect(server.resources).toEqual({});\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"should prevent closing server multiple times","suites":["server: server"],"updatePoint":{"line":523,"column":52,"index":17152},"line":523,"code":"  test('should prevent closing server multiple times', async () => {\n    const removeAllListeners = jest.fn();\n    connect.mockReturnValueOnce({\n      use: jest.fn(),\n      stack: [],\n      removeAllListeners\n    });\n    const nuxt = createNuxt();\n    const server = new Server(nuxt);\n    server.renderer = {};\n    await server.close();\n    expect(server.__closed).toEqual(true);\n    expect(removeAllListeners).toBeCalledTimes(1);\n    removeAllListeners.mockClear();\n    await server.close();\n    expect(server.__closed).toEqual(true);\n    expect(removeAllListeners).not.toBeCalled();\n  });","file":"server.test.js","skipped":false,"dir":"packages/server/test"},{"name":"isExternalDependency works","suites":["util: cjs"],"updatePoint":{"line":3,"column":34,"index":124},"line":3,"code":"  test('isExternalDependency works', () => {\n    expect(isExternalDependency('/var/nuxt/node_modules/dependency.js')).toBe(true);\n    expect(isExternalDependency('/var/nuxt/dependency.js')).toBe(false);\n    expect(isExternalDependency('C:\\\\nuxt\\\\node_modules\\\\dependency.js')).toBe(true);\n    expect(isExternalDependency('C:\\\\nuxt\\\\dependency.js')).toBe(false);\n  });","file":"cjs.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"getPKG should not throw error on non existing package","suites":["util: cjs"],"updatePoint":{"line":9,"column":61,"index":519},"line":9,"code":"  test('getPKG should not throw error on non existing package', () => {\n    expect(() => getPKG('this-doesnt-existsw')).not.toThrow();\n  });","file":"cjs.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should get context with req and res","suites":["util: context"],"updatePoint":{"line":3,"column":43,"index":141},"line":3,"code":"  test('should get context with req and res', () => {\n    const ctx = getContext({\n      a: 1\n    }, {\n      b: 2\n    });\n    expect(getContext.length).toBe(2);\n    expect(typeof ctx.req).toBe('object');\n    expect(typeof ctx.res).toBe('object');\n    expect(ctx.req.a).toBe(1);\n    expect(ctx.res.b).toBe(2);\n  });","file":"context.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should get correct globals","suites":["util: context"],"updatePoint":{"line":15,"column":34,"index":447},"line":15,"code":"  test('should get correct globals', () => {\n    const globals = {\n      foo: name => `${name}: foo`,\n      bar: name => `${name}: bar`,\n      baz: 'baz'\n    };\n    const result = determineGlobals('global', globals);\n    expect(result).toEqual({\n      bar: 'global: bar',\n      foo: 'global: foo',\n      baz: 'baz'\n    });\n  });","file":"context.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should export all methods from utils folder","suites":["util: entry"],"updatePoint":{"line":14,"column":51,"index":567},"line":14,"code":"  test('should export all methods from utils folder', () => {\n    expect(Util).toEqual({ ...context,\n      ...lang,\n      ...locking,\n      ...resolve,\n      ...route,\n      ...serialize,\n      ...task,\n      ...timer,\n      ...cjs,\n      ...modern,\n      ...constants\n    });\n  });","file":"index.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is string","suites":["util: lang"],"updatePoint":{"line":3,"column":48,"index":208},"line":3,"code":"  test('should check if given argument is string', () => {\n    expect(isString('str')).toEqual(true);\n    expect(isString(String(100))).toEqual(true);\n    expect(isString(100)).toEqual(false);\n    expect(isString([])).toEqual(false);\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is empty string","suites":["util: lang"],"updatePoint":{"line":9,"column":54,"index":454},"line":9,"code":"  test('should check if given argument is empty string', () => {\n    expect(isNonEmptyString('str')).toEqual(true);\n    expect(isNonEmptyString([])).toEqual(false);\n    expect(isNonEmptyString('')).toEqual(false);\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is pure object","suites":["util: lang"],"updatePoint":{"line":14,"column":53,"index":673},"line":14,"code":"  test('should check if given argument is pure object', () => {\n    expect(isPureObject({})).toEqual(true);\n    expect(isPureObject([])).toEqual(false);\n    expect(isPureObject(Number('1'))).toEqual(false);\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is url","suites":["util: lang"],"updatePoint":{"line":19,"column":45,"index":878},"line":19,"code":"  test('should check if given argument is url', () => {\n    expect(isUrl('http://localhost')).toEqual(true);\n    expect(isUrl('https://localhost')).toEqual(true);\n    expect(isUrl('//localhost')).toEqual(true);\n    expect(isUrl('localhost')).toEqual(false);\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should wrap given argument with array","suites":["util: lang"],"updatePoint":{"line":25,"column":45,"index":1142},"line":25,"code":"  test('should wrap given argument with array', () => {\n    expect(wrapArray(['array'])).toEqual(['array']);\n    expect(wrapArray('str')).toEqual(['str']);\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should strip white spaces in given argument","suites":["util: lang"],"updatePoint":{"line":29,"column":51,"index":1310},"line":29,"code":"  test('should strip white spaces in given argument', () => {\n    expect(stripWhitespace('foo\\t\\r \\f\\nbar')).toEqual('foo\\nbar');\n    expect(stripWhitespace('foo{\\n\\n\\nbar')).toEqual('foo{\\nbar');\n    expect(stripWhitespace('foo\\n\\n\\n\\t \\r\\f}')).toEqual('foo\\n\\t \\r\\f}');\n    expect(stripWhitespace('foo\\n\\n\\nbar')).toEqual('foo\\n\\nbar');\n    expect(stripWhitespace('\\n\\nfoo\\n')).toEqual('foo\\n');\n    expect(stripWhitespace('foo\\n\\n')).toEqual('foo\\n');\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should encode html","suites":["util: lang"],"updatePoint":{"line":37,"column":26,"index":1746},"line":37,"code":"  test('should encode html', () => {\n    const html = '<h1>Hello</h1>';\n    expect(encodeHtml(html)).toEqual('&lt;h1&gt;Hello&lt;/h1&gt;');\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should join url","suites":["util: lang"],"updatePoint":{"line":41,"column":23,"index":1889},"line":41,"code":"  test('should join url', () => {\n    expect(urlJoin('test', '/about')).toEqual('test/about');\n  });","file":"lang.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"onCompromised lock warns on compromise by default","suites":["util: locking"],"updatePoint":{"line":17,"column":57,"index":586},"line":17,"code":"  test('onCompromised lock warns on compromise by default', () => {\n    defaultLockOptions.onCompromised();\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"can override default options","suites":["util: locking"],"updatePoint":{"line":21,"column":36,"index":730},"line":21,"code":"  test('can override default options', () => {\n    const options = getLockOptions({\n      onCompromised: err => consola.fatal(err)\n    });\n    options.onCompromised();\n    expect(consola.fatal).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"createLockPath creates the same lockPath for identical locks","suites":["util: locking"],"updatePoint":{"line":28,"column":68,"index":988},"line":28,"code":"  test('createLockPath creates the same lockPath for identical locks', () => {\n    const path1 = createLockPath(lockConfig);\n    const path2 = createLockPath(Object.assign({}, lockConfig));\n    expect(path1).toBe(path2);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"createLockPath creates unique lockPaths for different ids","suites":["util: locking"],"updatePoint":{"line":33,"column":65,"index":1212},"line":33,"code":"  test('createLockPath creates unique lockPaths for different ids', () => {\n    const path1 = createLockPath(lockConfig);\n    const path2 = createLockPath(Object.assign({}, lockConfig, {\n      id: 'id2'\n    }));\n    expect(path1).not.toBe(path2);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"createLockPath creates unique lockPaths for different dirs","suites":["util: locking"],"updatePoint":{"line":40,"column":66,"index":1466},"line":40,"code":"  test('createLockPath creates unique lockPaths for different dirs', () => {\n    const path1 = createLockPath(lockConfig);\n    const path2 = createLockPath(Object.assign({}, lockConfig, {\n      dir: 'dir2'\n    }));\n    expect(path1).not.toBe(path2);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"createLockPath creates unique lockPaths for different roots","suites":["util: locking"],"updatePoint":{"line":47,"column":67,"index":1723},"line":47,"code":"  test('createLockPath creates unique lockPaths for different roots', () => {\n    const path1 = createLockPath(lockConfig);\n    const path2 = createLockPath(Object.assign({}, lockConfig, {\n      root: '/project-root2'\n    }));\n    expect(path1).not.toBe(path2);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"getLockPath creates lockPath when it doesnt exists","suites":["util: locking"],"updatePoint":{"line":54,"column":58,"index":1982},"line":54,"code":"  test('getLockPath creates lockPath when it doesnt exists', () => {\n    getLockPath(lockConfig);\n    expect(fs.ensureDir).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock creates a lock and returns a release fn","suites":["util: locking"],"updatePoint":{"line":58,"column":52,"index":2131},"line":58,"code":"  test('lock creates a lock and returns a release fn', async () => {\n    properlock.lock.mockReturnValue(true);\n    const fn = await lock(lockConfig);\n    expect(properlock.check).toHaveBeenCalledTimes(1);\n    expect(properlock.lock).toHaveBeenCalledTimes(1);\n    expect(fs.ensureDir).toHaveBeenCalledTimes(1);\n    expect(fn).toEqual(expect.any(Function));\n    expect(consola.error).not.toHaveBeenCalled();\n    expect(consola.fatal).not.toHaveBeenCalled();\n    expect(consola.warn).not.toHaveBeenCalled();\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock throws error when lock already exists","suites":["util: locking"],"updatePoint":{"line":69,"column":50,"index":2641},"line":69,"code":"  test('lock throws error when lock already exists', async () => {\n    properlock.check.mockReturnValue(true);\n    await lock(lockConfig);\n    expect(properlock.check).toHaveBeenCalledTimes(1);\n    expect(consola.fatal).toHaveBeenCalledTimes(1);\n    expect(consola.fatal).toHaveBeenCalledWith(`A lock with id '${lockConfig.id}' already exists on ${lockConfig.dir}`);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock logs warning when it couldnt get a lock","suites":["util: locking"],"updatePoint":{"line":76,"column":52,"index":3016},"line":76,"code":"  test('lock logs warning when it couldnt get a lock', async () => {\n    properlock.lock.mockReturnValue(false);\n    const fn = await lock(lockConfig);\n    expect(fn).toBe(false);\n    expect(properlock.lock).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledWith(`Unable to get a lock with id '${lockConfig.id}' on ${lockConfig.dir} (but will continue)`);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock logs warning when proper.lock threw error","suites":["util: locking"],"updatePoint":{"line":84,"column":54,"index":3448},"line":84,"code":"  test('lock logs warning when proper.lock threw error', async () => {\n    properlock.lock.mockImplementation(() => {\n      throw new Error('test error');\n    });\n    await lock(lockConfig);\n    expect(properlock.lock).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledTimes(1);\n    expect(consola.warn).toHaveBeenCalledWith(`Unable to get a lock with id '${lockConfig.id}' on ${lockConfig.dir} (but will continue)`);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock returns a release method for unlocking both lockfile as lockPath","suites":["util: locking"],"updatePoint":{"line":93,"column":77,"index":3912},"line":93,"code":"  test('lock returns a release method for unlocking both lockfile as lockPath', async () => {\n    const release = jest.fn();\n    properlock.lock.mockImplementation(() => release);\n    const fn = await lock(lockConfig);\n    await fn();\n    expect(release).toHaveBeenCalledTimes(1);\n    expect(fs.remove).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock release also cleanup onExit set","suites":["util: locking"],"updatePoint":{"line":101,"column":44,"index":4214},"line":101,"code":"  test('lock release also cleanup onExit set', async () => {\n    const release = jest.fn();\n    properlock.lock.mockImplementation(() => release);\n    const fn = await lock(lockConfig);\n    expect(lockPaths.size).toBe(1);\n    await fn();\n    expect(lockPaths.size).toBe(0);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock release only logs error when error thrown","suites":["util: locking"],"updatePoint":{"line":109,"column":54,"index":4504},"line":109,"code":"  test('lock release only logs error when error thrown', async () => {\n    const release = jest.fn(() => {\n      throw new Error('test error');\n    });\n    properlock.lock.mockImplementation(() => release);\n    const fn = await lock(lockConfig);\n    await expect(fn()).resolves.not.toThrow();\n    expect(consola.debug).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock check only logs error when error thrown","suites":["util: locking"],"updatePoint":{"line":118,"column":52,"index":4853},"line":118,"code":"  test('lock check only logs error when error thrown', async () => {\n    const testError = new Error('check error');\n    properlock.lock.mockImplementation(() => () => {});\n    properlock.check.mockImplementation(() => {\n      throw testError;\n    });\n    const fn = await lock(lockConfig);\n    expect(fn).toEqual(expect.any(Function));\n    expect(consola.debug).toHaveBeenCalledTimes(1);\n    expect(consola.debug).toHaveBeenCalledWith(`Check for an existing lock with id '${lockConfig.id}' on ${lockConfig.dir} failed`, testError);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock release doesnt log error when error thrown because lock compromised","suites":["util: locking"],"updatePoint":{"line":129,"column":80,"index":5420},"line":129,"code":"  test('lock release doesnt log error when error thrown because lock compromised', async () => {\n    fs.exists.mockReturnValue(true);\n    const testError = new Error('Lock is already released');\n    const release = jest.fn(() => {\n      throw testError;\n    });\n    properlock.lock.mockImplementation((path, options) => {\n      options.onCompromised();\n      return release;\n    });\n    const fn = await lock({ ...lockConfig,\n      options: {\n        // overwrite default compromised which calls consola.warn\n        onCompromised() {}\n\n      }\n    });\n    await expect(fn()).resolves.not.toThrow();\n    expect(consola.warn).not.toHaveBeenCalled();\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock sets exit listener once to remove lockPaths","suites":["util: locking"],"updatePoint":{"line":149,"column":56,"index":6051},"line":149,"code":"  test('lock sets exit listener once to remove lockPaths', async () => {\n    properlock.lock.mockReturnValue(true);\n    await lock(lockConfig);\n    await lock(lockConfig);\n    expect(onExit).toHaveBeenCalledTimes(1);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"exit listener removes all lockPaths when called","suites":["util: locking"],"updatePoint":{"line":155,"column":55,"index":6273},"line":155,"code":"  test('exit listener removes all lockPaths when called', async () => {\n    properlock.lock.mockReturnValue(true);\n    let callback;\n    onExit.mockImplementation(cb => callback = cb);\n    const lockConfig2 = Object.assign({}, lockConfig, {\n      id: 'id2'\n    });\n    const path1 = createLockPath(lockConfig);\n    const path2 = createLockPath(lockConfig2);\n    await lock(lockConfig);\n    await lock(lockConfig2);\n    expect(onExit).toHaveBeenCalledTimes(1);\n    expect(lockPaths.size).toBe(2);\n    expect(callback).toBeDefined();\n    callback();\n    expect(fs.removeSync).toHaveBeenCalledWith(path1);\n    expect(fs.removeSync).toHaveBeenCalledWith(path2);\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"lock uses setLockOptions to set defaults","suites":["util: locking"],"updatePoint":{"line":173,"column":48,"index":6930},"line":173,"code":"  test('lock uses setLockOptions to set defaults', async () => {\n    const spy = properlock.lock.mockReturnValue(true);\n    await lock(lockConfig);\n    expect(spy).toHaveBeenCalledWith(expect.any(String), expect.any(Object));\n    const options = spy.mock.calls[0][1];\n    expect(options.stale).toBeDefined();\n    expect(options.onCompromised).toBeDefined();\n    expect(() => options.onCompromised()).not.toThrow();\n    expect(consola.fatal).not.toHaveBeenCalled();\n  });","file":"locking.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not detect modern build if modern mode is specified","suites":["utils: modern"],"updatePoint":{"line":9,"column":66,"index":215},"line":9,"code":"  test('should not detect modern build if modern mode is specified', () => {\n    const req = createRequest();\n    isModernRequest(req);\n    isModernRequest(req, 'client');\n    isModernRequest(req, 'server');\n    expect(req.socket._modern).toEqual(false);\n  });","file":"modern.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not detect modern browser if connect has been detected","suites":["utils: modern"],"updatePoint":{"line":16,"column":69,"index":479},"line":16,"code":"  test('should not detect modern browser if connect has been detected', () => {\n    const req = createRequest();\n    req.socket = {\n      _modern: true\n    };\n    isModernRequest(req, 'server');\n    expect(req.socket._modern).toEqual(true);\n  });","file":"modern.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should detect modern browser based on user-agent","suites":["utils: modern"],"updatePoint":{"line":24,"column":56,"index":713},"line":24,"code":"  test('should detect modern browser based on user-agent', () => {\n    const req = createRequest();\n    const ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36';\n    req.headers['user-agent'] = ua;\n    req.socket = {};\n    isModernRequest(req, 'server');\n    expect(req.socket._modern).toEqual(true);\n    expect(req.socket._modern).toEqual(true);\n  });","file":"modern.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should detect legacy browser based on user-agent","suites":["utils: modern"],"updatePoint":{"line":33,"column":56,"index":1137},"line":33,"code":"  test('should detect legacy browser based on user-agent', () => {\n    const req = createRequest();\n    const ua = 'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))';\n    req.headers['user-agent'] = ua;\n    req.socket = {};\n    isModernRequest(req, 'client');\n    expect(req.socket._modern).toEqual(false);\n  });","file":"modern.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should ignore illegal user-agent","suites":["utils: modern"],"updatePoint":{"line":41,"column":40,"index":1444},"line":41,"code":"  test('should ignore illegal user-agent', () => {\n    const req = createRequest();\n    const ua = 'illegal user agent';\n    req.headers['user-agent'] = ua;\n    req.socket = {};\n    isModernRequest(req, 'client');\n    expect(req.socket._modern).toEqual(false);\n  });","file":"modern.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with alias","suites":[],"updatePoint":{"line":4,"column":46,"index":262},"line":4,"code":"  test('should check if path starts with alias', () => {\n    expect(startsWithAlias(['/var'])('/var/nuxt/src')).toEqual(true);\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with root alias","suites":[],"updatePoint":{"line":7,"column":51,"index":400},"line":7,"code":"  test('should check if path starts with root alias', () => {\n    expect(startsWithSrcAlias('@/assets')).toEqual(true);\n    expect(startsWithSrcAlias('~/pages')).toEqual(true);\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with src alias","suites":[],"updatePoint":{"line":11,"column":50,"index":582},"line":11,"code":"  test('should check if path starts with src alias', () => {\n    expect(startsWithSrcAlias('@@/src/assets')).toEqual(true);\n    expect(startsWithSrcAlias('~~/src/pages')).toEqual(true);\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should return same path in linux","suites":[],"updatePoint":{"line":15,"column":40,"index":764},"line":15,"code":"  test('should return same path in linux', () => {\n    expect(wp('/var/nuxt\\\\ src/')).toEqual('/var/nuxt\\\\ src/');\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should return same path in linux","suites":[],"updatePoint":{"line":18,"column":40,"index":885},"line":18,"code":"  test('should return same path in linux', () => {\n    expect(wChunk('nuxt/layout/test')).toEqual('nuxt/layout/test');\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should define alias","suites":[],"updatePoint":{"line":21,"column":27,"index":997},"line":21,"code":"  test('should define alias', () => {\n    const nuxt = {};\n    const server = {\n      name: 'nuxt',\n      bound: () => 'bound fn',\n      test: () => 'test defineAlias'\n    };\n    defineAlias(nuxt, server, ['name', 'bound']);\n    defineAlias(nuxt, server, ['test'], {\n      bind: false,\n      warn: true\n    });\n    expect(nuxt.name).toEqual(server.name);\n    expect(nuxt.bound).not.toBe(server.bound);\n    expect(nuxt.bound()).toEqual('bound fn');\n    expect(nuxt.test).toBe(server.test);\n    expect(nuxt.test()).toEqual('test defineAlias');\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith({\n      message: '\\'test\\' is deprecated\\'',\n      additional: expect.any(String)\n    });\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is index file or folder","suites":[],"updatePoint":{"line":44,"column":62,"index":1755},"line":44,"code":"  test('should check if given argument is index file or folder', () => {\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test'])).toEqual(false);\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test/index.js'])).toEqual(false);\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test', '/var/nuxt/plugins/test/index.js'])).toEqual(true);\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should return main module","suites":[],"updatePoint":{"line":49,"column":33,"index":2079},"line":49,"code":"  test('should return main module', () => {\n    expect(getMainModule()).toHaveProperty('children', 'exports', 'filename', 'path');\n  });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should resolve alias path","suites":["relativeTo"],"updatePoint":{"line":55,"column":35,"index":2305},"line":55,"code":"    test('should resolve alias path', () => {\n      expect(relativeTo(path1, path2)).toBe('@/bar');\n    });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should keep webpack inline loaders prepended","suites":["relativeTo"],"updatePoint":{"line":58,"column":54,"index":2432},"line":58,"code":"    test('should keep webpack inline loaders prepended', () => {\n      expect(relativeTo(path1, `loader1!loader2!${path2}`)).toEqual('loader1!loader2!@/bar');\n    });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check path which is not started with alias","suites":["relativeTo"],"updatePoint":{"line":61,"column":59,"index":2604},"line":61,"code":"    test('should check path which is not started with alias', () => {\n      expect(relativeTo('/var/nuxt/foo/bar', '/var/nuxt/foo/baz')).toBe('../baz');\n    });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check path which is not started with alias ","suites":["relativeTo"],"updatePoint":{"line":64,"column":60,"index":2766},"line":64,"code":"    test('should check path which is not started with alias ', () => {\n      expect(relativeTo('/var/nuxt/foo', '/var/nuxt/foo/bar')).toBe('./bar');\n    });","file":"resolve.posix.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should format windows separator","suites":[],"updatePoint":{"line":4,"column":39,"index":264},"line":4,"code":"  test('should format windows separator', () => {\n    expect(wp('c:\\\\nuxt\\\\src')).toEqual('c:\\\\\\\\nuxt\\\\\\\\src');\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should format windows path","suites":[],"updatePoint":{"line":7,"column":34,"index":377},"line":7,"code":"  test('should format windows path', () => {\n    expect(wChunk('nuxt/layout/test')).toEqual('nuxt/layout/test');\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should resolve alias path","suites":[],"updatePoint":{"line":10,"column":33,"index":495},"line":10,"code":"  test('should resolve alias path', () => {\n    expect(r('@\\\\layout\\\\test')).toEqual('@\\\\\\\\layout\\\\\\\\test');\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with alias","suites":[],"updatePoint":{"line":13,"column":46,"index":623},"line":13,"code":"  test('should check if path starts with alias', () => {\n    expect(startsWithAlias(['#'])('#layout/test')).toEqual(true);\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with root alias","suites":[],"updatePoint":{"line":16,"column":51,"index":757},"line":16,"code":"  test('should check if path starts with root alias', () => {\n    expect(startsWithSrcAlias('@/assets')).toEqual(true);\n    expect(startsWithSrcAlias('~/pages')).toEqual(true);\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if path starts with src alias","suites":[],"updatePoint":{"line":20,"column":50,"index":939},"line":20,"code":"  test('should check if path starts with src alias', () => {\n    expect(startsWithSrcAlias('@@/src/assets')).toEqual(true);\n    expect(startsWithSrcAlias('~~/src/pages')).toEqual(true);\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should define alias","suites":[],"updatePoint":{"line":24,"column":27,"index":1108},"line":24,"code":"  test('should define alias', () => {\n    const nuxt = {};\n    const server = {\n      name: 'nuxt',\n      bound: () => 'bound fn',\n      test: () => 'test defineAlias'\n    };\n    defineAlias(nuxt, server, ['name', 'bound']);\n    defineAlias(nuxt, server, ['test'], {\n      bind: false,\n      warn: true\n    });\n    expect(nuxt.name).toEqual(server.name);\n    expect(nuxt.bound).not.toBe(server.bound);\n    expect(nuxt.bound()).toEqual('bound fn');\n    expect(nuxt.test).toBe(server.test);\n    expect(nuxt.test()).toEqual('test defineAlias');\n    expect(consola.warn).toBeCalledTimes(1);\n    expect(consola.warn).toBeCalledWith({\n      message: '\\'test\\' is deprecated\\'',\n      additional: expect.any(String)\n    });\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check if given argument is index file or folder","suites":[],"updatePoint":{"line":47,"column":62,"index":1866},"line":47,"code":"  test('should check if given argument is index file or folder', () => {\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test'])).toEqual(false);\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test/index.js'])).toEqual(false);\n    expect(isIndexFileAndFolder(['/var/nuxt/plugins/test', '/var/nuxt/plugins/test/index.js'])).toEqual(true);\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should return main module","suites":[],"updatePoint":{"line":52,"column":33,"index":2190},"line":52,"code":"  test('should return main module', () => {\n    expect(getMainModule()).toHaveProperty('children', 'exports', 'filename', 'path');\n  });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should resolve alias path","suites":["relativeTo"],"updatePoint":{"line":58,"column":35,"index":2418},"line":58,"code":"    test('should resolve alias path', () => {\n      expect(relativeTo(path1, path2)).toBe('@\\\\\\\\bar');\n    });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should keep webpack inline loaders prepended","suites":["relativeTo"],"updatePoint":{"line":61,"column":54,"index":2548},"line":61,"code":"    test('should keep webpack inline loaders prepended', () => {\n      expect(relativeTo(path1, `loader1!loader2!${path2}`)).toBe('loader1!loader2!@\\\\\\\\bar');\n    });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check path which is not started with alias","suites":["relativeTo"],"updatePoint":{"line":64,"column":59,"index":2720},"line":64,"code":"    test('should check path which is not started with alias', () => {\n      expect(relativeTo('c:\\\\foo\\\\bar', 'c:\\\\foo\\\\baz')).toBe('..\\\\\\\\baz');\n    });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should check path which is not started with alias ","suites":["relativeTo"],"updatePoint":{"line":67,"column":60,"index":2875},"line":67,"code":"    test('should check path which is not started with alias ', () => {\n      expect(relativeTo('c:\\\\foo', 'c:\\\\foo\\\\baz')).toBe('.\\\\\\\\baz');\n    });","file":"resolve.win.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should flat route with path","suites":["util: route"],"updatePoint":{"line":3,"column":35,"index":151},"line":3,"code":"  test('should flat route with path', () => {\n    const routes = flatRoutes([{\n      name: 'login',\n      path: '/login'\n    }, {\n      name: 'about',\n      path: '/about'\n    }, {\n      name: 'posts',\n      path: '',\n      children: [{\n        name: 'posts-list',\n        path: ''\n      }, {\n        name: 'posts-create',\n        path: 'post'\n      }]\n    }]);\n    expect(routes).toEqual(['/login', '/about', '/', '/post']);\n  });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should ignore route with * and :","suites":["util: route"],"updatePoint":{"line":23,"column":40,"index":588},"line":23,"code":"  test('should ignore route with * and :', () => {\n    const routes = flatRoutes([{\n      name: 'login',\n      path: '/login'\n    }, {\n      name: 'foo',\n      path: '/foo/:id'\n    }, {\n      name: 'bar',\n      path: '/bar/*'\n    }]);\n    expect(routes).toEqual(['/login']);\n  });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should resolve route with /","suites":["util: route"],"updatePoint":{"line":36,"column":35,"index":864},"line":36,"code":"  test('should resolve route with /', () => {\n    const routes = flatRoutes([{\n      name: 'foo',\n      path: '/',\n      children: [{\n        name: 'foo-bar',\n        path: 'foo/bar'\n      }, {\n        name: 'foo-baz',\n        path: 'foo/baz'\n      }]\n    }]);\n    expect(routes).toEqual(['/', '/foo/bar', '/foo/baz']);\n  });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should flat absolute routes","suites":["util: route"],"updatePoint":{"line":50,"column":35,"index":1190},"line":50,"code":"  test('should flat absolute routes', () => {\n    const routes = flatRoutes([{\n      name: 'foo',\n      path: '/foo',\n      children: [{\n        name: 'foo-bar',\n        path: '/foo/bar'\n      }, {\n        name: 'foo-baz',\n        path: '/foo/baz'\n      }]\n    }]);\n    expect(routes).toEqual(['/foo', '/foo/bar', '/foo/baz']);\n  });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should flat absolute routes with empty path","suites":["util: route"],"updatePoint":{"line":64,"column":51,"index":1540},"line":64,"code":"  test('should flat absolute routes with empty path', () => {\n    const routes = flatRoutes([{\n      name: 'foo',\n      path: '/foo',\n      children: [{\n        name: 'foo-root',\n        path: ''\n      }, {\n        name: 'foo-bar',\n        path: '/foo/bar'\n      }, {\n        name: 'foo-baz',\n        path: '/foo/baz'\n      }]\n    }]);\n    expect(routes).toEqual(['/foo', '/foo/bar', '/foo/baz']);\n  });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should guard parent dir","suites":["util: route","util: route guard"],"updatePoint":{"line":82,"column":33,"index":1966},"line":82,"code":"    test('should guard parent dir', () => {\n      expect(() => {\n        guardDir({\n          dir1: '/root/parent',\n          dir2: '/root'\n        }, 'dir1', 'dir2');\n      }).toThrow();\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should guard same dir","suites":["util: route","util: route guard"],"updatePoint":{"line":90,"column":31,"index":2160},"line":90,"code":"    test('should guard same dir', () => {\n      expect(() => {\n        guardDir({\n          dir1: '/root/parent',\n          dir2: '/root/parent'\n        }, 'dir1', 'dir2');\n      }).toThrow();\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not guard same level dir","suites":["util: route","util: route guard"],"updatePoint":{"line":98,"column":41,"index":2371},"line":98,"code":"    test('should not guard same level dir', () => {\n      expect(() => {\n        guardDir({\n          dir1: '/root/parent-next',\n          dir2: '/root/parent'\n        }, 'dir1', 'dir2');\n      }).not.toThrow();\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not guard same level dir - 2","suites":["util: route","util: route guard"],"updatePoint":{"line":106,"column":45,"index":2595},"line":106,"code":"    test('should not guard same level dir - 2', () => {\n      expect(() => {\n        guardDir({\n          dir1: '/root/parent',\n          dir2: '/root/parent-next'\n        }, 'dir1', 'dir2');\n      }).not.toThrow();\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not guard child dir","suites":["util: route","util: route guard"],"updatePoint":{"line":114,"column":36,"index":2810},"line":114,"code":"    test('should not guard child dir', () => {\n      expect(() => {\n        guardDir({\n          dir1: '/root/parent',\n          dir2: '/root/parent/child'\n        }, 'dir1', 'dir2');\n      }).not.toThrow();\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify array routes","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":124,"column":39,"index":3084},"line":124,"code":"    test('should promisify array routes', () => {\n      const array = [1];\n      const promise = promisifyRoute(array);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res).toBe(array);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify functional routes","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":132,"column":44,"index":3340},"line":132,"code":"    test('should promisify functional routes', () => {\n      const array = [1, 2];\n\n      const fn = function () {\n        return array;\n      };\n\n      const promise = promisifyRoute(fn);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res).toBe(array);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify promisable functional routes","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":145,"column":55,"index":3671},"line":145,"code":"    test('should promisify promisable functional routes', () => {\n      const array = [1, 2, 3];\n\n      const fn = function () {\n        return new Promise(resolve => {\n          resolve(array);\n        });\n      };\n\n      const promise = promisifyRoute(fn);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res).toBe(array);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify promisable functional routes with arguments","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":160,"column":70,"index":4076},"line":160,"code":"    test('should promisify promisable functional routes with arguments', () => {\n      const fn = function (array) {\n        return new Promise(resolve => {\n          resolve(array);\n        });\n      };\n\n      const array = [1, 2, 3];\n      const promise = promisifyRoute(fn, array);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res).toBe(array);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify functional routes with error","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":174,"column":55,"index":4477},"line":174,"code":"    test('should promisify functional routes with error', () => {\n      const fn = function (cb) {\n        cb(new Error('Error here'));\n      };\n\n      const promise = promisifyRoute(fn);\n      expect(typeof promise).toBe('object');\n      return promise.catch(e => {\n        expect(e.message).toBe('Error here');\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify functional routes with arguments and error","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":185,"column":69,"index":4822},"line":185,"code":"    test('should promisify functional routes with arguments and error', () => {\n      const fn = function (cb, array) {\n        cb(new Error('Error here: ' + array.join()));\n      };\n\n      const array = [1, 2, 3, 4];\n      const promise = promisifyRoute(fn, array);\n      expect(typeof promise).toBe('object');\n      return promise.catch(e => {\n        expect(e.message).toBe('Error here: ' + array.join());\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify functional routes with result","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":197,"column":56,"index":5236},"line":197,"code":"    test('should promisify functional routes with result', () => {\n      const array = [1, 2, 3, 4];\n\n      const fn = function (cb) {\n        cb(null, array);\n      };\n\n      const promise = promisifyRoute(fn);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res).toBe(array);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should promisify functional routes with arguments and result","suites":["util: route","util: route promisifyRoute"],"updatePoint":{"line":210,"column":70,"index":5593},"line":210,"code":"    test('should promisify functional routes with arguments and result', () => {\n      const fn = function (cb, array, object) {\n        cb(null, {\n          array,\n          object\n        });\n      };\n\n      const array = [1, 2, 3, 4];\n      const object = {\n        a: 1\n      };\n      const promise = promisifyRoute(fn, array, object);\n      expect(typeof promise).toBe('object');\n      return promise.then(res => {\n        expect(res.array).toBe(array);\n        expect(res.object).toBe(object);\n      });\n    });","file":"route.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should normalize arrow functions","suites":["util: serialize"],"updatePoint":{"line":5,"column":40,"index":229},"line":5,"code":"  test('should normalize arrow functions', () => {\n    const normalized = normalizeFunctions(Object.assign({}, data.arrow));\n    expect(normalized.fn1.toString()).toEqual('function anonymous(foobar\\n) {\\n\\n}');\n    expect(normalized.fn2.toString()).toEqual('function anonymous(foobar\\n) {\\nreturn 1\\n}');\n    expect(normalized.fn3.toString()).toEqual('function anonymous(foobar\\n) {\\nreturn 3\\n}');\n    expect(normalized.fn4.toString()).toEqual('function anonymous(arg1\\n) {\\nreturn 2 * arg1\\n}');\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize normal function","suites":["util: serialize"],"updatePoint":{"line":12,"column":40,"index":733},"line":12,"code":"  test('should serialize normal function', () => {\n    const obj = Object.assign({}, data.normal);\n    expect(serializeFunction(obj.fn)).toEqual('function () {}');\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize shorthand function","suites":["util: serialize"],"updatePoint":{"line":16,"column":43,"index":906},"line":16,"code":"  test('should serialize shorthand function', () => {\n    const obj = Object.assign({}, data.shorthand);\n    expect(serializeFunction(obj.fn)).toEqual('function() {}');\n    expect(serializeFunction(obj.$fn)).toEqual('function() {}');\n    expect(serializeFunction(obj.fn_arrow)).toEqual('function() { const _ = rule => rule }');\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize arrow function","suites":["util: serialize"],"updatePoint":{"line":22,"column":39,"index":1236},"line":22,"code":"  test('should serialize arrow function', () => {\n    const obj = Object.assign({}, data.arrow);\n    expect(serializeFunction(obj.fn5)).toEqual('() => {}');\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize arrow function with ternary in parens","suites":["util: serialize"],"updatePoint":{"line":26,"column":62,"index":1422},"line":26,"code":"  test('should serialize arrow function with ternary in parens', () => {\n    const obj = Object.assign({}, data.arrow);\n    expect(serializeFunction(obj.fn6)).toEqual('foobar => (foobar ? 1 : 0)');\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize arrow function with single parameter","suites":["util: serialize"],"updatePoint":{"line":30,"column":61,"index":1625},"line":30,"code":"  test('should serialize arrow function with single parameter', () => {\n    const obj = Object.assign({}, data.arrow);\n    expect(serializeFunction(obj.fn1)).toEqual('foobar => {}');\n    expect(serializeFunction(obj.fn2)).toEqual('foobar => 1');\n    expect(serializeFunction(obj.fn3).replace(RE_LINE_BREAKS, '\\n')).toEqual(`foobar => {\n      return 3\n    }`);\n    expect(serializeFunction(obj.fn4).replace(RE_LINE_BREAKS, '\\n')).toEqual(`arg1 =>\n      2 * arg1`);\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should not replace custom scripts","suites":["util: serialize"],"updatePoint":{"line":40,"column":41,"index":2075},"line":40,"code":"  test('should not replace custom scripts', () => {\n    const obj = Object.assign({}, data.shorthand);\n    expect(serializeFunction(obj.fn_script).replace(RE_LINE_BREAKS, '\\n')).toEqual(`function() {\n      return 'function xyz(){};a=false?true:xyz();'\n    }`);\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should serialize internal function","suites":["util: serialize"],"updatePoint":{"line":46,"column":42,"index":2343},"line":46,"code":"  test('should serialize internal function', () => {\n    const obj = Object.assign({}, data.shorthand);\n    expect(serializeFunction(obj.fn_internal).replace(RE_LINE_BREAKS, '\\n')).toEqual(`function(arg) {\n      if (arg) {\n        return {\n          title: function () {\n            return 'test'\n          }\n        }\n      }\n    }`);\n  });","file":"serialize.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should call fn in sequence","suites":["util: task"],"updatePoint":{"line":7,"column":34,"index":209},"line":7,"code":"  test('should call fn in sequence', async () => {\n    const fn = jest.fn(consola.log);\n    await sequence([1, 2, 3, 4], fn);\n    expect(fn).toBeCalledTimes(4);\n    expect(consola.log).toBeCalledTimes(4);\n    expect(consola.log).nthCalledWith(1, 1);\n    expect(consola.log).nthCalledWith(2, 2);\n    expect(consola.log).nthCalledWith(3, 3);\n    expect(consola.log).nthCalledWith(4, 4);\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should call fn in parallel","suites":["util: task"],"updatePoint":{"line":17,"column":34,"index":600},"line":17,"code":"  test('should call fn in parallel', async () => {\n    jest.spyOn(Promise, 'all');\n    jest.spyOn(Promise, 'resolve');\n    await parallel([1, 2, 3, 4], (num, index) => [num, index]);\n    expect(Promise.all).toBeCalledTimes(1);\n    expect(Promise.resolve).toBeCalledTimes(4);\n    expect(Promise.resolve).nthCalledWith(1, [1, 0]);\n    expect(Promise.resolve).nthCalledWith(2, [2, 1]);\n    expect(Promise.resolve).nthCalledWith(3, [3, 2]);\n    expect(Promise.resolve).nthCalledWith(4, [4, 3]);\n    Promise.all.mockRestore();\n    Promise.resolve.mockRestore();\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (mutate, mutate)","suites":["util: task"],"updatePoint":{"line":30,"column":32,"index":1161},"line":30,"code":"  test('chainFn (mutate, mutate)', () => {\n    // Pass more than one argument to test that they're actually taken into account\n    const firstFn = function (obj, count) {\n      obj.foo = count + 1;\n    };\n\n    const secondFn = function (obj, count) {\n      obj.bar = count + 2;\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn({}, 10)).toEqual({\n      foo: 11,\n      bar: 12\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (mutate, return)","suites":["util: task"],"updatePoint":{"line":46,"column":32,"index":1580},"line":46,"code":"  test('chainFn (mutate, return)', () => {\n    const firstFn = function (obj, count) {\n      obj.foo = count + 1;\n    };\n\n    const secondFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        bar: count + 2\n      });\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn({}, 10)).toEqual({\n      foo: 11,\n      bar: 12\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (return, mutate)","suites":["util: task"],"updatePoint":{"line":63,"column":32,"index":1959},"line":63,"code":"  test('chainFn (return, mutate)', () => {\n    const firstFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        foo: count + 1\n      });\n    };\n\n    const secondFn = function (obj, count) {\n      obj.bar = count + 2;\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn({}, 10)).toEqual({\n      foo: 11,\n      bar: 12\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (return, return)","suites":["util: task"],"updatePoint":{"line":80,"column":32,"index":2338},"line":80,"code":"  test('chainFn (return, return)', () => {\n    const firstFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        foo: count + 1\n      });\n    };\n\n    const secondFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        bar: count + 2\n      });\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn({}, 10)).toEqual({\n      foo: 11,\n      bar: 12\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (return, non-function)","suites":["util: task"],"updatePoint":{"line":99,"column":38,"index":2767},"line":99,"code":"  test('chainFn (return, non-function)', () => {\n    const firstFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        foo: count + 1\n      });\n    };\n\n    const secondFn = '';\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn).toBe(firstFn);\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (non-function, return)","suites":["util: task"],"updatePoint":{"line":110,"column":38,"index":3057},"line":110,"code":"  test('chainFn (non-function, return)', () => {\n    const firstFn = '';\n\n    const secondFn = function (obj, count) {\n      return Object.assign({}, obj, {\n        bar: count + 2\n      });\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(chainedFn({}, 10)).toEqual({\n      bar: 12\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"chainFn (promise)","suites":["util: task"],"updatePoint":{"line":124,"column":25,"index":3360},"line":124,"code":"  test('chainFn (promise)', async () => {\n    const firstFn = () => Promise.resolve({\n      foo: 1\n    });\n\n    const secondFn = function (obj) {\n      obj.foo++;\n      return Promise.resolve();\n    };\n\n    const chainedFn = chainFn(firstFn, secondFn);\n    expect(await chainedFn()).toEqual({\n      foo: 2\n    });\n  });","file":"task.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"timeout (promise)","suites":["util: timer"],"updatePoint":{"line":3,"column":25,"index":114},"line":3,"code":"  test('timeout (promise)', async () => {\n    const result = await timeout(Promise.resolve('time not run out'), 100);\n    expect(result).toEqual('time not run out');\n  });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"timeout (async function)","suites":["util: timer"],"updatePoint":{"line":7,"column":32,"index":293},"line":7,"code":"  test('timeout (async function)', async () => {\n    const result = await timeout(async () => {\n      await waitFor(10);\n      return 'time not run out';\n    }, 100);\n    expect(result).toEqual('time not run out');\n  });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"timeout (timeout in 100ms)","suites":["util: timer"],"updatePoint":{"line":14,"column":34,"index":516},"line":14,"code":"  test('timeout (timeout in 100ms)', async () => {\n    const call = timeout(waitFor(200), 100, 'timeout test 100ms');\n    await expect(call).rejects.toThrow('timeout test 100ms');\n  });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"timeout (async timeout in 100ms)","suites":["util: timer"],"updatePoint":{"line":18,"column":40,"index":708},"line":18,"code":"  test('timeout (async timeout in 100ms)', async () => {\n    const call = timeout(async () => {\n      await waitFor(500);\n    }, 100, 'timeout test 100ms');\n    await expect(call).rejects.toThrow('timeout test 100ms');\n  });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"waitFor","suites":["util: timer"],"updatePoint":{"line":24,"column":15,"index":908},"line":24,"code":"  test('waitFor', async () => {\n    const delay = 100;\n    const s = process.hrtime();\n    await waitFor(delay);\n    const t = process.hrtime(s); // Node.js makes no guarantees about the exact timing of when callbacks will fire\n    // HTML5 specifies a minimum delay of 4ms for timeouts\n    // although arbitrary, use this value to determine our lower limit\n\n    expect((t[0] * 1e9 + t[1]) / 1e6).not.toBeLessThan(delay - 4);\n    await waitFor();\n  });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should construct Timer","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":38,"column":32,"index":1463},"line":38,"code":"    test('should construct Timer', () => {\n      const timer = new Timer();\n      expect(timer._times).toBeInstanceOf(Map);\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should create new time record","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":42,"column":39,"index":1602},"line":42,"code":"    test('should create new time record', () => {\n      const timer = new Timer();\n      timer.hrtime = jest.fn(() => 'hrtime');\n      const time = timer.start('test', 'test Timer');\n      expect(timer.hrtime).toBeCalledTimes(1);\n      expect(time).toEqual({\n        description: 'test Timer',\n        name: 'test',\n        start: 'hrtime'\n      });\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should stop and remove time record","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":53,"column":44,"index":1965},"line":53,"code":"    test('should stop and remove time record', () => {\n      const timer = new Timer();\n      timer.hrtime = jest.fn(() => 'hrtime');\n      timer.start('test', 'test Timer');\n      const time = timer.end('test');\n      expect(timer._times.size).toEqual(0);\n      expect(timer.hrtime).toBeCalledTimes(2);\n      expect(timer.hrtime).nthCalledWith(2, 'hrtime');\n      expect(time).toEqual({\n        description: 'test Timer',\n        name: 'test',\n        duration: 'hrtime',\n        start: 'hrtime'\n      });\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should be quiet if end with nonexistent time","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":68,"column":54,"index":2490},"line":68,"code":"    test('should be quiet if end with nonexistent time', () => {\n      const timer = new Timer();\n      const time = timer.end('test');\n      expect(time).toBeUndefined();\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should use bigint hrtime if supports","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":73,"column":46,"index":2662},"line":73,"code":"    test('should use bigint hrtime if supports', () => {\n      const timer = new Timer();\n      const hrtime = process.hrtime;\n      process.hrtime = {\n        bigint: jest.fn(() => 'bigint hrtime')\n      };\n      const time = timer.hrtime();\n      expect(time).toEqual('bigint hrtime');\n      expect(process.hrtime.bigint).toBeCalledTimes(1);\n      process.hrtime = hrtime;\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should calculate duration with bigint hrtime","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":86,"column":56,"index":3097},"line":86,"code":"      test('should calculate duration with bigint hrtime', () => {\n        const timer = new Timer();\n        const hrtime = process.hrtime;\n        process.hrtime = {\n          bigint: jest.fn().mockReturnValueOnce(BigInt(100000000)).mockReturnValueOnce(BigInt(213000000))\n        };\n        let time = timer.hrtime();\n        time = timer.hrtime(time);\n        expect(time).toEqual(BigInt(113));\n        expect(process.hrtime.bigint).toBeCalledTimes(2);\n        process.hrtime = hrtime;\n      });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should use hrtime if bigint it not supported","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":100,"column":54,"index":3601},"line":100,"code":"    test('should use hrtime if bigint it not supported', () => {\n      const timer = new Timer();\n      const hrtime = process.hrtime;\n      process.hrtime = jest.fn(() => 'hrtime');\n      process.hrtime.bigint = undefined;\n      const time = timer.hrtime();\n      expect(time).toEqual('hrtime');\n      expect(process.hrtime).toBeCalledTimes(1);\n      process.hrtime = hrtime;\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should calculate duration with hrtime","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":110,"column":47,"index":3979},"line":110,"code":"    test('should calculate duration with hrtime', () => {\n      const timer = new Timer();\n      const hrtime = process.hrtime;\n      process.hrtime = jest.fn().mockReturnValueOnce([1, 500000]).mockReturnValueOnce([2, 600000]);\n      process.hrtime.bigint = undefined;\n      let time = timer.hrtime();\n      time = timer.hrtime(time);\n      expect(time).toEqual(2000.6);\n      expect(process.hrtime).toBeCalledTimes(2);\n      expect(process.hrtime).nthCalledWith(1);\n      expect(process.hrtime).nthCalledWith(2, [1, 500000]);\n      process.hrtime = hrtime;\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"should clear all times","suites":["util: timer","util: timer Timer"],"updatePoint":{"line":123,"column":32,"index":4530},"line":123,"code":"    test('should clear all times', () => {\n      const timer = new Timer();\n      timer.hrtime = jest.fn(() => 'hrtime');\n      timer.start('time-1', 'test time-1');\n      timer.start('time-2', 'test time-2');\n      timer.start('time-3', 'test time-3');\n      expect(timer._times.size).toEqual(3);\n      timer.clear();\n      expect(timer._times.size).toEqual(0);\n    });","file":"timer.test.js","skipped":false,"dir":"packages/utils/test"},{"name":"when router.prefetchLinks is set to false, link with no prop should not be prefetched","suites":["nuxt-link prefetch"],"updatePoint":{"line":15,"column":93,"index":491},"line":15,"code":"  test('when router.prefetchLinks is set to false, link with no prop should not be prefetched', async () => {\n    const compiledTemplatePath = await compileTemplate('components/nuxt-link.client.js', 'nuxt-link.client.prefetch.0.js', {\n      router: {\n        prefetchLinks: false\n      }\n    });\n    const Component = await importComponent(compiledTemplatePath);\n    const observe = jest.spyOn(Component.methods, 'observe');\n    Component.extends = RouterLinkStub;\n    const wrapper = mount(Component, {\n      propsData: {\n        to: '/link'\n      }\n    });\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    expect(wrapper.props('prefetch')).toBe(false);\n    expect(wrapper.props('noPrefetch')).toBe(false);\n    expect(observe).not.toHaveBeenCalled();\n  });","file":"nuxt-link.client.prefetch.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"when router.prefetchLinks is set to false, link with prefetch prop set to true should be prefetched","suites":["nuxt-link prefetch"],"updatePoint":{"line":37,"column":107,"index":1372},"line":37,"code":"  test('when router.prefetchLinks is set to false, link with prefetch prop set to true should be prefetched', async () => {\n    const compiledTemplatePath = await compileTemplate('components/nuxt-link.client.js', 'nuxt-link.client.prefetch.1.js', {\n      router: {\n        prefetchLinks: false\n      }\n    });\n    const Component = await importComponent(compiledTemplatePath);\n    const observe = jest.spyOn(Component.methods, 'observe');\n    Component.extends = RouterLinkStub;\n    const wrapper = mount(Component, {\n      propsData: {\n        to: '/link',\n        prefetch: true\n      }\n    });\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    expect(wrapper.props('prefetch')).toBe(true);\n    expect(wrapper.props('noPrefetch')).toBe(false);\n    expect(observe).toHaveBeenCalled();\n  });","file":"nuxt-link.client.prefetch.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"when router.prefetchLinks is set to true (default), link with no prop should be prefetched","suites":["nuxt-link prefetch"],"updatePoint":{"line":60,"column":98,"index":2263},"line":60,"code":"  test('when router.prefetchLinks is set to true (default), link with no prop should be prefetched', async () => {\n    const compiledTemplatePath = await compileTemplate('components/nuxt-link.client.js', 'nuxt-link.client.prefetch.2.js', {});\n    const Component = await importComponent(compiledTemplatePath);\n    const observe = jest.spyOn(Component.methods, 'observe');\n    Component.extends = RouterLinkStub;\n    const wrapper = mount(Component, {\n      propsData: {\n        to: '/link'\n      }\n    });\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    expect(wrapper.props('prefetch')).toBe(true);\n    expect(wrapper.props('noPrefetch')).toBe(false);\n    expect(observe).toHaveBeenCalled();\n  });","file":"nuxt-link.client.prefetch.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"when router.prefetchLinks is set to true (default), link with prefetch prop set to false should not be prefetched","suites":["nuxt-link prefetch"],"updatePoint":{"line":78,"column":121,"index":3095},"line":78,"code":"  test('when router.prefetchLinks is set to true (default), link with prefetch prop set to false should not be prefetched', async () => {\n    const compiledTemplatePath = await compileTemplate('components/nuxt-link.client.js', 'nuxt-link.client.prefetch.3.js', {});\n    const Component = await importComponent(compiledTemplatePath);\n    const observe = jest.spyOn(Component.methods, 'observe');\n    Component.extends = RouterLinkStub;\n    const wrapper = mount(Component, {\n      propsData: {\n        to: '/link',\n        prefetch: false\n      }\n    });\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    expect(wrapper.props('prefetch')).toBe(false);\n    expect(wrapper.props('noPrefetch')).toBe(false);\n    expect(observe).not.toHaveBeenCalled();\n  });","file":"nuxt-link.client.prefetch.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"when router.prefetchLinks is set to true (default), link with noPrefetch prop should not be prefetched","suites":["nuxt-link prefetch"],"updatePoint":{"line":97,"column":110,"index":3946},"line":97,"code":"  test('when router.prefetchLinks is set to true (default), link with noPrefetch prop should not be prefetched', async () => {\n    const compiledTemplatePath = await compileTemplate('components/nuxt-link.client.js', 'nuxt-link.client.prefetch.4.js', {});\n    const Component = await importComponent(compiledTemplatePath);\n    const observe = jest.spyOn(Component.methods, 'observe');\n    Component.extends = RouterLinkStub;\n    const wrapper = mount(Component, {\n      propsData: {\n        to: '/link',\n        noPrefetch: true\n      }\n    });\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    expect(console.warn).not.toHaveBeenCalled();\n    expect(console.error).not.toHaveBeenCalled();\n    expect(wrapper.props('prefetch')).toBe(true);\n    expect(wrapper.props('noPrefetch')).toBe(true);\n    expect(observe).not.toHaveBeenCalled();\n  });","file":"nuxt-link.client.prefetch.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"removed when not loading","suites":["nuxt-loading"],"updatePoint":{"line":17,"column":32,"index":589},"line":17,"code":"  test('removed when not loading', async () => {\n    const str = await renderToString(Component);\n    expect(str).toBe('<!---->');\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"added when loading","suites":["nuxt-loading"],"updatePoint":{"line":21,"column":26,"index":720},"line":21,"code":"  test('added when loading', async () => {\n    const wrapper = mount(Component);\n    wrapper.setData({\n      throttle: 0\n    });\n    wrapper.vm.start();\n    await vmTick(wrapper.vm);\n    expect(wrapper.html()).toBe('<div class=\"nuxt-progress\" style=\"width: 0%;\"></div>');\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"percentage changed after 1s","suites":["nuxt-loading"],"updatePoint":{"line":30,"column":35,"index":1007},"line":30,"code":"  test('percentage changed after 1s', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.setData({\n      duration: 1000,\n      throttle: 0\n    });\n    wrapper.vm.start();\n    jest.advanceTimersByTime(250);\n    await vmTick(wrapper.vm);\n    const html = wrapper.html();\n    expect(html).not.toBe('<div class=\"nuxt-progress\" style=\"width:0%;\"></div>');\n    expect(wrapper.vm.get()).not.toBe(0);\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"can be finished","suites":["nuxt-loading"],"updatePoint":{"line":45,"column":23,"index":1431},"line":45,"code":"  test('can be finished', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.setData({\n      duration: 1000,\n      throttle: 0\n    });\n    wrapper.vm.start();\n    wrapper.vm.finish();\n    await vmTick(wrapper.vm);\n    let html = wrapper.html();\n    expect(html).toBe('<div class=\"nuxt-progress\" style=\"width: 100%;\"></div>');\n    expect(wrapper.vm.get()).toBe(100);\n    jest.runAllTimers();\n    await vmTick(wrapper.vm);\n    html = wrapper.html();\n    expect(html).toBe('');\n    expect(wrapper.vm.get()).toBe(0);\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"can fail","suites":["nuxt-loading"],"updatePoint":{"line":65,"column":16,"index":1980},"line":65,"code":"  test('can fail', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.vm.set(50);\n    wrapper.vm.fail();\n    await vmTick(wrapper.vm);\n    const html = wrapper.html();\n    expect(html).toBe('<div class=\"nuxt-progress nuxt-progress-failed\" style=\"width: 50%;\"></div>');\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"not shown until throttle","suites":["nuxt-loading"],"updatePoint":{"line":75,"column":32,"index":2308},"line":75,"code":"  test('not shown until throttle', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.setData({\n      duration: 2000,\n      throttle: 1000\n    });\n    wrapper.vm.start();\n    await vmTick(wrapper.vm);\n    jest.advanceTimersByTime(250);\n    await vmTick(wrapper.vm);\n    let html = wrapper.html();\n    expect(html).toBe('');\n    jest.advanceTimersByTime(1000);\n    await vmTick(wrapper.vm);\n    html = wrapper.html();\n    expect(html).not.toBe('<div class=\"nuxt-progress\" style=\"width: 0%;\"></div>');\n    expect(html).toContain('<div class=\"nuxt-progress\"');\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"can pause and resume","suites":["nuxt-loading"],"updatePoint":{"line":95,"column":28,"index":2905},"line":95,"code":"  test('can pause and resume', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.setData({\n      duration: 2000,\n      throttle: 0\n    });\n    wrapper.vm.start();\n    jest.advanceTimersByTime(250);\n    await vmTick(wrapper.vm);\n    let html = wrapper.html();\n    expect(html).toContain('<div class=\"nuxt-progress\"');\n    wrapper.vm.pause();\n    jest.advanceTimersByTime(500);\n    await vmTick(wrapper.vm);\n    const html2 = wrapper.html();\n    expect(html2).toBe(html);\n    wrapper.vm.resume();\n    jest.advanceTimersByTime(500);\n    await vmTick(wrapper.vm);\n    html = wrapper.html();\n    expect(html).toContain('<div class=\"nuxt-progress\"');\n    expect(html).not.toBe(html2);\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"continues after duration","suites":["nuxt-loading"],"updatePoint":{"line":120,"column":32,"index":3632},"line":120,"code":"  test('continues after duration', async () => {\n    const wrapper = mount(Component, {\n      localVue\n    });\n    wrapper.setData({\n      continuous: true,\n      duration: 500,\n      rtl: false,\n      throttle: 0\n    });\n    wrapper.vm.start();\n    await vmTick(wrapper.vm);\n    jest.advanceTimersByTime(500);\n    await vmTick(wrapper.vm);\n    let html = wrapper.html();\n    expect(html).toBe('<div class=\"nuxt-progress nuxt-progress-notransition\" style=\"width: 100%; left: 0px;\"></div>');\n    jest.advanceTimersByTime(250);\n    await vmTick(wrapper.vm);\n    html = wrapper.html();\n    expect(wrapper.vm.reversed).toBe(true);\n    expect(html).toContain('<div class=\"nuxt-progress\"');\n    expect(html).not.toContain('width: 0%');\n    expect(html).not.toContain('width: 100%');\n    expect(wrapper.vm.left).toBe('auto'); // TODO: check why the rendered html still has left: 0px (probably test-utils issue)\n    // expect(html).toContain('left: auto')\n  });","file":"nuxt-loading.test.js","skipped":false,"dir":"packages/vue-app/test"},{"name":"should allow defining plugins with an array","suites":["webpack: babel"],"updatePoint":{"line":16,"column":51,"index":358},"line":16,"code":"  test('should allow defining plugins with an array', () => {\n    expect(getConfigWithPlugins(['myPlugin']).getBabelOptions().plugins).toEqual(['myPlugin']);\n  });","file":"index.test.js","skipped":false,"dir":"packages/webpack/test"},{"name":"should allow defining plugins with a function","suites":["webpack: babel"],"updatePoint":{"line":19,"column":53,"index":524},"line":19,"code":"  test('should allow defining plugins with a function', () => {\n    expect(getConfigWithPlugins(({\n      isDev\n    }) => [`myPlugin-${isDev}`]).getBabelOptions().plugins).toEqual(['myPlugin-false']);\n  });","file":"index.test.js","skipped":false,"dir":"packages/webpack/test"}]}