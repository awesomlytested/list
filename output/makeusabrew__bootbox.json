{
    "repo": "makeusabrew/bootbox",
    "url": "https://github.com/makeusabrew/bootbox",
    "branch": "master",
    "configs": [
        {
            "package": "bootbox",
            "lang": "js",
            "dir": "tests",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "throws an error regarding argument length",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with no arguments"
            ],
            "updatePoint": {
                "line": 23,
                "column": 51
            },
            "line": 23,
            "code": "      it('throws an error regarding argument length', function () {\n        expect(this.create).to.throw(/argument length/);\n      });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the bootbox-alert class to the dialog",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 32,
                "column": 57
            },
            "line": 32,
            "code": "        it('applies the bootbox-alert class to the dialog', function () {\n          expect(this.dialog.hasClass('bootbox-alert')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the expected body copy",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 35,
                "column": 40
            },
            "line": 35,
            "code": "        it('shows the expected body copy', function () {\n          expect(this.text('.bootbox-body')).to.equal('Hello world!');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows an OK button",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 38,
                "column": 30
            },
            "line": 38,
            "code": "        it('shows an OK button', function () {\n          expect(this.text('.modal-footer button:first')).to.equal('OK');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the primary class to the button",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 41,
                "column": 51
            },
            "line": 41,
            "code": "        it('applies the primary class to the button', function () {\n          expect(this.find('.modal-footer button:first').hasClass('btn-primary')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the bootbox-accept class to the button",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 44,
                "column": 58
            },
            "line": 44,
            "code": "        it('applies the bootbox-accept class to the button', function () {\n          expect(this.find('.modal-footer button:first').hasClass('bootbox-accept')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows a close button inside the body",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 47,
                "column": 48
            },
            "line": 47,
            "code": "        it('shows a close button inside the body', function () {\n          expect(this.text('.modal-body button')).to.equal('×');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the close class to the close button",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 50,
                "column": 55
            },
            "line": 50,
            "code": "        it('applies the close class to the close button', function () {\n          expect(this.find('.modal-body button').hasClass('close')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the correct aria-hidden attribute to the close button",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 53,
                "column": 73
            },
            "line": 53,
            "code": "        it('applies the correct aria-hidden attribute to the close button', function () {\n          expect(this.find('button.close').attr('aria-hidden')).to.equal('true');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the correct class to the body",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with one argument",
                "where the argument is a string"
            ],
            "updatePoint": {
                "line": 56,
                "column": 49
            },
            "line": 56,
            "code": "        it('applies the correct class to the body', function () {\n          expect($('body').hasClass('modal-open')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with two arguments",
                "where the second argument is not a function"
            ],
            "updatePoint": {
                "line": 68,
                "column": 48
            },
            "line": 68,
            "code": "        it('throws an error requiring a callback', function () {\n          expect(this.create).to.throw(/alert requires the \"callback\" property to be a function when provided/);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not throw an error",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 78,
                "column": 35
            },
            "line": 78,
            "code": "        it('does not throw an error', function () {\n          expect(this.create).not.to.throw(Error);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error regarding argument length",
            "suites": [
                "bootbox.alert",
                "basic usage tests",
                "with three arguments"
            ],
            "updatePoint": {
                "line": 89,
                "column": 51
            },
            "line": 89,
            "code": "      it('throws an error regarding argument length', function () {\n        expect(this.create).to.throw(/argument length/);\n      });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct ok button",
            "suites": [
                "bootbox.alert",
                "configuration options tests",
                "with a custom ok button"
            ],
            "updatePoint": {
                "line": 116,
                "column": 38
            },
            "line": 116,
            "code": "        it('adds the correct ok button', function () {\n          expect(this.button.text()).to.equal('Custom OK');\n          expect(this.button.hasClass('btn-danger')).to.be.true;\n          expect(this.button.hasClass('bootbox-accept')).to.be.true;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.alert",
                "configuration options tests",
                "with an unrecognised button key"
            ],
            "updatePoint": {
                "line": 131,
                "column": 27
            },
            "line": 131,
            "code": "        it('throws an error', function () {\n          expect(this.create).to.throw('button key \"Another key\" is not allowed (options are ok)');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct title",
            "suites": [
                "bootbox.alert",
                "configuration options tests",
                "with a custom title"
            ],
            "updatePoint": {
                "line": 140,
                "column": 35
            },
            "line": 140,
            "code": "        it('shows the correct title', function () {\n          expect(this.text('.modal-title')).to.equal('Hello?');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with no callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 158,
                "column": 33
            },
            "line": 158,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with no callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 166,
                "column": 33
            },
            "line": 166,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with no callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 174,
                "column": 33
            },
            "line": 174,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 192,
                "column": 38
            },
            "line": 192,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 195,
                "column": 44
            },
            "line": 195,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 198,
                "column": 33
            },
            "line": 198,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 206,
                "column": 38
            },
            "line": 206,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 209,
                "column": 44
            },
            "line": 209,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 212,
                "column": 33
            },
            "line": 212,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 220,
                "column": 38
            },
            "line": 220,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 223,
                "column": 44
            },
            "line": 223,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 226,
                "column": 33
            },
            "line": 226,
            "code": "        it('should hide the modal', function () {\n          expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 245,
                "column": 38
            },
            "line": 245,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 248,
                "column": 44
            },
            "line": 248,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 251,
                "column": 37
            },
            "line": 251,
            "code": "        it('should not hide the modal', function () {\n          expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 259,
                "column": 38
            },
            "line": 259,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 262,
                "column": 44
            },
            "line": 262,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 265,
                "column": 37
            },
            "line": 265,
            "code": "        it('should not hide the modal', function () {\n          expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 273,
                "column": 38
            },
            "line": 273,
            "code": "        it('should invoke the callback', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 276,
                "column": 44
            },
            "line": 276,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.alert",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 279,
                "column": 37
            },
            "line": 279,
            "code": "        it('should not hide the modal', function () {\n          expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "alert.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "is attached to the window object",
            "suites": [
                "Bootbox"
            ],
            "updatePoint": {
                "line": 4,
                "column": 38
            },
            "line": 4,
            "code": "  it('is attached to the window object', function () {\n    expect(window.bootbox).to.be.an('object');\n  });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "exposes the correct public API",
            "suites": [
                "Bootbox"
            ],
            "updatePoint": {
                "line": 7,
                "column": 36
            },
            "line": 7,
            "code": "  it('exposes the correct public API', function () {\n    expect(bootbox.alert).to.be.a('function');\n    expect(bootbox.confirm).to.be.a('function');\n    expect(bootbox.dialog).to.be.a('function');\n    expect(bootbox.setDefaults).to.be.a('function');\n    expect(bootbox.setLocale).to.be.a('function');\n    expect(bootbox.removeLocale).to.be.a('function');\n    expect(bootbox.locales).to.be.a('function');\n    expect(bootbox.hideAll).to.be.a('function');\n  });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide all .bootbox modals",
            "suites": [
                "Bootbox",
                "hideAll"
            ],
            "updatePoint": {
                "line": 25,
                "column": 39
            },
            "line": 25,
            "code": "    it('should hide all .bootbox modals', function () {\n      expect(this.hidden).to.have.been.calledWithExactly('hide');\n    });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not remove the dialog",
            "suites": [
                "Bootbox",
                "event listeners",
                "hidden.bs.modal",
                "when triggered with the wrong target"
            ],
            "updatePoint": {
                "line": 50,
                "column": 38
            },
            "line": 50,
            "code": "        it('does not remove the dialog', function () {\n          expect(this.removed).not.to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "removes the dialog",
            "suites": [
                "Bootbox",
                "event listeners",
                "hidden.bs.modal",
                "when triggered with the correct target"
            ],
            "updatePoint": {
                "line": 58,
                "column": 30
            },
            "line": 58,
            "code": "        it('removes the dialog', function () {\n          expect(this.removed).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has triggered onHide function",
            "suites": [
                "Bootbox",
                "onHide option",
                "hide.bs.modal",
                "when triggered with the correct target"
            ],
            "updatePoint": {
                "line": 83,
                "column": 41
            },
            "line": 83,
            "code": "        it('has triggered onHide function', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has triggered onHidden function",
            "suites": [
                "Bootbox",
                "onHidden option",
                "hidden.bs.modal",
                "when triggered with the correct target"
            ],
            "updatePoint": {
                "line": 108,
                "column": 43
            },
            "line": 108,
            "code": "        it('has triggered onHidden function', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has triggered onShow function",
            "suites": [
                "Bootbox",
                "onShow option",
                "show.bs.modal",
                "when triggered with the correct target"
            ],
            "updatePoint": {
                "line": 124,
                "column": 41
            },
            "line": 124,
            "code": "        it('has triggered onShow function', function () {\n          expect(this.callback).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws the correct error",
            "suites": [
                "Bootbox",
                "If $.fn.modal is undefined",
                "When invoking a dialog"
            ],
            "updatePoint": {
                "line": 146,
                "column": 34
            },
            "line": 146,
            "code": "      it('throws the correct error', function () {\n        expect(this.e.message).to.contain('\"$.fn.modal\" is not defined');\n      });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws the expected error",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.addLocale",
                "with invalid values"
            ],
            "updatePoint": {
                "line": 163,
                "column": 37
            },
            "line": 163,
            "code": "        it('throws the expected error', function () {\n          expect(this.e.message).to.equal('Please supply a translation for \"CANCEL\"');\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the expected OK translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.addLocale",
                "with valid values"
            ],
            "updatePoint": {
                "line": 184,
                "column": 45
            },
            "line": 184,
            "code": "        it('shows the expected OK translation', function () {\n          expect(this.labels.ok).to.equal('BTN1');\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the expected CANCEL translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.addLocale",
                "with valid values"
            ],
            "updatePoint": {
                "line": 187,
                "column": 49
            },
            "line": 187,
            "code": "        it('shows the expected CANCEL translation', function () {\n          expect(this.labels.cancel).to.equal('BTN2');\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the expected PROMPT translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.addLocale",
                "with valid values"
            ],
            "updatePoint": {
                "line": 190,
                "column": 49
            },
            "line": 190,
            "code": "        it('shows the expected PROMPT translation', function () {\n          expect(this.labels.confirm).to.equal('BTN3');\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "falls back to the default OK translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.removeLocale"
            ],
            "updatePoint": {
                "line": 208,
                "column": 50
            },
            "line": 208,
            "code": "      it('falls back to the default OK translation', function () {\n        expect(this.labels.ok).to.equal('OK');\n      });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "falls back to the default CANCEL translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.removeLocale"
            ],
            "updatePoint": {
                "line": 211,
                "column": 54
            },
            "line": 211,
            "code": "      it('falls back to the default CANCEL translation', function () {\n        expect(this.labels.cancel).to.equal('Cancel');\n      });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "falls back to the default PROMPT translation",
            "suites": [
                "Bootbox",
                "adding and removing locales",
                "bootbox.removeLocale"
            ],
            "updatePoint": {
                "line": 214,
                "column": 54
            },
            "line": 214,
            "code": "      it('falls back to the default PROMPT translation', function () {\n        expect(this.labels.confirm).to.equal('OK');\n      });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not invoke the callback",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "with the default value",
                "When triggering the backdrop click dismiss event"
            ],
            "updatePoint": {
                "line": 238,
                "column": 40
            },
            "line": 238,
            "code": "        it('does not invoke the callback', function () {\n          expect(this.callback).not.to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not invoke the callback",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "when set to false",
                "When triggering the backdrop click dismiss event",
                "With the wrong target"
            ],
            "updatePoint": {
                "line": 259,
                "column": 42
            },
            "line": 259,
            "code": "          it('does not invoke the callback', function () {\n            expect(this.callback).not.to.have.been.called;\n          });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "when set to false",
                "When triggering the backdrop click dismiss event",
                "With the correct target"
            ],
            "updatePoint": {
                "line": 267,
                "column": 34
            },
            "line": 267,
            "code": "          it('invokes the callback', function () {\n            expect(this.callback).not.to.have.been.called;\n          });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not invoke the callback",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "when set to true",
                "When triggering the backdrop click dismiss event",
                "With the wrong target"
            ],
            "updatePoint": {
                "line": 289,
                "column": 42
            },
            "line": 289,
            "code": "          it('does not invoke the callback', function () {\n            expect(this.callback).not.to.have.been.called;\n          });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "when set to true",
                "When triggering the backdrop click dismiss event",
                "With the correct target"
            ],
            "updatePoint": {
                "line": 297,
                "column": 34
            },
            "line": 297,
            "code": "          it('invokes the callback', function () {\n            expect(this.callback).to.have.been.called;\n          });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "Bootbox",
                "backdrop variations",
                "when set to true",
                "When triggering the backdrop click dismiss event",
                "With the correct target"
            ],
            "updatePoint": {
                "line": 300,
                "column": 46
            },
            "line": 300,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not remove the dialog",
            "suites": [
                "Bootbox",
                "resuable: true dialog",
                "hidden.bs.modal",
                "when triggered with `reusable: true`"
            ],
            "updatePoint": {
                "line": 331,
                "column": 38
            },
            "line": 331,
            "code": "        it('does not remove the dialog', function () {\n          expect(this.removed).not.to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "removes the dialog",
            "suites": [
                "Bootbox",
                "resuable: false dialog",
                "hidden.bs.modal",
                "when triggered with `reusable: false`"
            ],
            "updatePoint": {
                "line": 359,
                "column": 30
            },
            "line": 359,
            "code": "        it('removes the dialog', function () {\n          expect(this.removed).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "removes the dialog",
            "suites": [
                "Bootbox",
                "resuable not set dialog",
                "hidden.bs.modal",
                "when triggered with `reusable` not set"
            ],
            "updatePoint": {
                "line": 386,
                "column": 30
            },
            "line": 386,
            "code": "        it('removes the dialog', function () {\n          expect(this.removed).to.have.been.called;\n        });",
            "file": "bootbox.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is not an object"
            ],
            "updatePoint": {
                "line": 13,
                "column": 34
            },
            "line": 13,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).throw('confirm requires a callback');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a message property"
            ],
            "updatePoint": {
                "line": 30,
                "column": 57
            },
            "line": 30,
            "code": "          return it('throws an error requiring a callback', function () {\n            return expect(this.create).throw(/confirm requires a callback/);\n          });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a callback property",
                "where the callback is not a function"
            ],
            "updatePoint": {
                "line": 39,
                "column": 59
            },
            "line": 39,
            "code": "            return it('throws an error requiring a callback', function () {\n              return expect(this.create).throw(/confirm requires a callback/);\n            });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a message",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a callback property",
                "where the callback is a function"
            ],
            "updatePoint": {
                "line": 49,
                "column": 58
            },
            "line": 49,
            "code": "            return it('throws an error requiring a message', function () {\n              return expect(this.create).to.throw(/\"message\" option must not be null or an empty string./);\n            });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not throw an error",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a message and a callback"
            ],
            "updatePoint": {
                "line": 68,
                "column": 37
            },
            "line": 68,
            "code": "          it('does not throw an error', function () {\n            return expect(this.create).not.throw(Error);\n          });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "creates a dialog object",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a message and a callback"
            ],
            "updatePoint": {
                "line": 71,
                "column": 37
            },
            "line": 71,
            "code": "          it('creates a dialog object', function () {\n            return expect(this.dialog).to.be.an('object');\n          });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button labels",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a message and a callback"
            ],
            "updatePoint": {
                "line": 74,
                "column": 44
            },
            "line": 74,
            "code": "          it('adds the correct button labels', function () {\n            expect(this.dialog.find('.btn:first').text()).to.equal('Cancel');\n            return expect(this.dialog.find('.btn:last').text()).to.equal('OK');\n          });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button classes",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a message and a callback"
            ],
            "updatePoint": {
                "line": 78,
                "column": 52
            },
            "line": 78,
            "code": "          return it('adds the correct button classes', function () {\n            expect(this.dialog.find('.btn:first').hasClass('btn-default')).to.be.true;\n            expect(this.dialog.find('.btn:first').hasClass('btn-secondary')).to.true;\n            expect(this.dialog.find('.btn:first').hasClass('bootbox-cancel')).to.true;\n            expect(this.dialog.find('.btn:last').hasClass('btn-primary')).to.true;\n            return expect(this.dialog.find('.btn:last').hasClass('bootbox-accept')).to.true;\n          });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is not a function"
            ],
            "updatePoint": {
                "line": 97,
                "column": 55
            },
            "line": 97,
            "code": "        return it('throws an error requiring a callback', function () {\n          return expect(this.create).throw(/confirm requires a callback/);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not throw an error",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 111,
                "column": 35
            },
            "line": 111,
            "code": "        it('does not throw an error', function () {\n          return expect(this.create).not.throw(Error);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "creates a dialog object",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 114,
                "column": 35
            },
            "line": 114,
            "code": "        it('creates a dialog object', function () {\n          return expect(this.dialog).to.be.an('object');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the bootbox-confirm class to the dialog",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 117,
                "column": 59
            },
            "line": 117,
            "code": "        it('applies the bootbox-confirm class to the dialog', function () {\n          return expect(this.dialog.hasClass('bootbox-confirm')).to.true;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button labels",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 120,
                "column": 42
            },
            "line": 120,
            "code": "        it('adds the correct button labels', function () {\n          expect(this.dialog.find('.btn:first').text()).to.equal('Cancel');\n          return expect(this.dialog.find('.btn:last').text()).to.equal('OK');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button classes",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 124,
                "column": 43
            },
            "line": 124,
            "code": "        it('adds the correct button classes', function () {\n          expect(this.dialog.find('.btn:first').hasClass('btn-default')).to.true;\n          expect(this.dialog.find('.btn:first').hasClass('btn-secondary')).to.true;\n          expect(this.dialog.find('.btn:first').hasClass('bootbox-cancel')).to.true;\n          expect(this.dialog.find('.btn:last').hasClass('btn-primary')).to.true;\n          return expect(this.dialog.find('.btn:last').hasClass('bootbox-accept')).to.true;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the dialog",
            "suites": [
                "bootbox.confirm",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 131,
                "column": 35
            },
            "line": 131,
            "code": "        return it('shows the dialog', function () {\n          return expect(this.dialog.is(':visible')).to.true;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct cancel button",
            "suites": [
                "bootbox.confirm",
                "configuration options tests",
                "with a custom cancel button"
            ],
            "updatePoint": {
                "line": 162,
                "column": 47
            },
            "line": 162,
            "code": "      return it('adds the correct cancel button', function () {\n        expect(this.button.text()).to.equal('Custom cancel');\n        return expect(this.button.hasClass('btn-danger')).to.true;\n      });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct confirm button",
            "suites": [
                "bootbox.confirm",
                "configuration options tests",
                "with a custom confirm button"
            ],
            "updatePoint": {
                "line": 178,
                "column": 48
            },
            "line": 178,
            "code": "      return it('adds the correct confirm button', function () {\n        expect(this.button.text()).to.equal('Custom confirm');\n        return expect(this.button.hasClass('btn-warning')).to.true;\n      });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.confirm",
                "configuration options tests",
                "with an unrecognised button key"
            ],
            "updatePoint": {
                "line": 192,
                "column": 32
            },
            "line": 192,
            "code": "      return it('throws an error', function () {\n        return expect(this.create).throw('button key \"Bad key\" is not allowed (options are cancel confirm)');\n      });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 211,
                "column": 38
            },
            "line": 211,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 214,
                "column": 44
            },
            "line": 214,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 217,
                "column": 34
            },
            "line": 217,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(true);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 220,
                "column": 40
            },
            "line": 220,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 228,
                "column": 38
            },
            "line": 228,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 231,
                "column": 44
            },
            "line": 231,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 234,
                "column": 34
            },
            "line": 234,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(false);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 237,
                "column": 40
            },
            "line": 237,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 245,
                "column": 38
            },
            "line": 245,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 248,
                "column": 44
            },
            "line": 248,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 251,
                "column": 34
            },
            "line": 251,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(false);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 254,
                "column": 40
            },
            "line": 254,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 273,
                "column": 38
            },
            "line": 273,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 276,
                "column": 44
            },
            "line": 276,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 279,
                "column": 34
            },
            "line": 279,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(true);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 282,
                "column": 44
            },
            "line": 282,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 290,
                "column": 38
            },
            "line": 290,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 293,
                "column": 44
            },
            "line": 293,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 296,
                "column": 34
            },
            "line": 296,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(false);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 299,
                "column": 44
            },
            "line": 299,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 307,
                "column": 38
            },
            "line": 307,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 310,
                "column": 44
            },
            "line": 310,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 313,
                "column": 34
            },
            "line": 313,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(false);\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.confirm",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 316,
                "column": 44
            },
            "line": 316,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "confirm.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not add the fade class to the dialog",
            "suites": [
                "bootbox.setDefaults",
                "animate",
                "when set to false"
            ],
            "updatePoint": {
                "line": 19,
                "column": 51
            },
            "line": 19,
            "code": "      it('does not add the fade class to the dialog', function () {\n        expect(this.dialog.hasClass('fade')).to.be.false;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the correct class to the body",
            "suites": [
                "bootbox.setDefaults",
                "animate",
                "when set to false"
            ],
            "updatePoint": {
                "line": 22,
                "column": 47
            },
            "line": 22,
            "code": "      it('applies the correct class to the body', function () {\n        expect($('body').hasClass('modal-open')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "removes the modal-open class from the body",
            "suites": [
                "bootbox.setDefaults",
                "animate",
                "when set to false",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 29,
                "column": 54
            },
            "line": 29,
            "code": "        it('removes the modal-open class from the body', function () {\n          expect($('body').hasClass('modal-open')).to.be.false;\n        });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the fade class to the dialog",
            "suites": [
                "bootbox.setDefaults",
                "animate",
                "when set to true"
            ],
            "updatePoint": {
                "line": 43,
                "column": 43
            },
            "line": 43,
            "code": "      it('adds the fade class to the dialog', function () {\n        expect(this.dialog.hasClass('fade')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the extra class to the outer dialog",
            "suites": [
                "bootbox.setDefaults",
                "className",
                "when passed as a string"
            ],
            "updatePoint": {
                "line": 58,
                "column": 50
            },
            "line": 58,
            "code": "      it('adds the extra class to the outer dialog', function () {\n        expect(this.dialog.hasClass('bootbox')).to.be.true;\n        expect(this.dialog.hasClass('my-class')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the extra-large class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to extra-large"
            ],
            "updatePoint": {
                "line": 74,
                "column": 55
            },
            "line": 74,
            "code": "      it('adds the extra-large class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-xl')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the extra-large class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to xl"
            ],
            "updatePoint": {
                "line": 87,
                "column": 55
            },
            "line": 87,
            "code": "      it('adds the extra-large class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-xl')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the large class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to large"
            ],
            "updatePoint": {
                "line": 100,
                "column": 49
            },
            "line": 100,
            "code": "      it('adds the large class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-lg')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the large class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to lg"
            ],
            "updatePoint": {
                "line": 113,
                "column": 49
            },
            "line": 113,
            "code": "      it('adds the large class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-lg')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the small class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to small"
            ],
            "updatePoint": {
                "line": 126,
                "column": 49
            },
            "line": 126,
            "code": "      it('adds the small class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-sm')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the small class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "size",
                "when set to sm"
            ],
            "updatePoint": {
                "line": 139,
                "column": 49
            },
            "line": 139,
            "code": "      it('adds the small class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-sm')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not show a backdrop",
            "suites": [
                "bootbox.setDefaults",
                "backdrop",
                "when set to false"
            ],
            "updatePoint": {
                "line": 154,
                "column": 34
            },
            "line": 154,
            "code": "      it('does not show a backdrop', function () {\n        expect(this.dialog.next('.modal-backdrop').length).to.equal(0);\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the modal-dialog-centered class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "centerVertical",
                "when set to true"
            ],
            "updatePoint": {
                "line": 169,
                "column": 65
            },
            "line": 169,
            "code": "      it('adds the modal-dialog-centered class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-dialog-centered')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the modal-dialog-scrollable class to the innerDialog",
            "suites": [
                "bootbox.setDefaults",
                "scrollable",
                "when set to true"
            ],
            "updatePoint": {
                "line": 184,
                "column": 67
            },
            "line": 184,
            "code": "      it('adds the modal-dialog-scrollable class to the innerDialog', function () {\n        expect(this.dialog.children('.modal-dialog').hasClass('modal-dialog-scrollable')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the arguments as a key/value pair",
            "suites": [
                "bootbox.setDefaults",
                "when passed two arguments"
            ],
            "updatePoint": {
                "line": 196,
                "column": 49
            },
            "line": 196,
            "code": "    it('applies the arguments as a key/value pair', function () {\n      expect(this.dialog.hasClass('bootbox')).to.be.true;\n      expect(this.dialog.hasClass('my-class')).to.be.true;\n    });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "defaults to the body element",
            "suites": [
                "bootbox.setDefaults",
                "container",
                "when not explicitly set"
            ],
            "updatePoint": {
                "line": 208,
                "column": 38
            },
            "line": 208,
            "code": "      it('defaults to the body element', function () {\n        expect(this.dialog.parent().is('body')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "sets the correct parent element",
            "suites": [
                "bootbox.setDefaults",
                "container",
                "when explicitly set to body"
            ],
            "updatePoint": {
                "line": 221,
                "column": 41
            },
            "line": 221,
            "code": "      it('sets the correct parent element', function () {\n        expect(this.dialog.parent().is('body')).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "sets the correct parent element",
            "suites": [
                "bootbox.setDefaults",
                "container",
                "when set to another dom element"
            ],
            "updatePoint": {
                "line": 235,
                "column": 41
            },
            "line": 235,
            "code": "      it('sets the correct parent element', function () {\n        expect(this.dialog.parent().is(this.container)).to.be.true;\n      });",
            "file": "defaults.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.dialog",
                "invalid usage tests",
                "with no arguments"
            ],
            "updatePoint": {
                "line": 37,
                "column": 32
            },
            "line": 37,
            "code": "      return it('throws an error', function () {\n        return expect(this.create).to.throw(/supply an object/);\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.dialog",
                "invalid usage tests",
                "with one argument",
                "where the argument is not an object"
            ],
            "updatePoint": {
                "line": 48,
                "column": 34
            },
            "line": 48,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw(/supply an object/);\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.dialog",
                "invalid usage tests",
                "with one argument",
                "where the argument has no message property"
            ],
            "updatePoint": {
                "line": 60,
                "column": 34
            },
            "line": 60,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"message\" option must not be null or an empty string.');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.dialog",
                "invalid usage tests",
                "with one argument",
                "where the argument has a button with an invalid value"
            ],
            "updatePoint": {
                "line": 75,
                "column": 34
            },
            "line": 75,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('button with key \"ok\" must be an object');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the bootbox class to the dialog",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 87,
                "column": 44
            },
            "line": 87,
            "code": "    it('adds the bootbox class to the dialog', function () {\n      return expect(this.dialog.hasClass('bootbox')).to.be.true;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the bootstrap modal class to the dialog",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 90,
                "column": 52
            },
            "line": 90,
            "code": "    it('adds the bootstrap modal class to the dialog', function () {\n      return expect(this.dialog.hasClass('modal')).to.be.true;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the fade class to the dialog",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 93,
                "column": 41
            },
            "line": 93,
            "code": "    it('adds the fade class to the dialog', function () {\n      return expect(this.dialog.hasClass('fade')).to.be.true;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the expected message",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 96,
                "column": 34
            },
            "line": 96,
            "code": "    it('shows the expected message', function () {\n      return expect(this.text('.bootbox-body')).to.equal('test');\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not have a header",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 99,
                "column": 30
            },
            "line": 99,
            "code": "    it('does not have a header', function () {\n      return expect(this.exists('.modal-header')).not.to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has a close button inside the body",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 102,
                "column": 42
            },
            "line": 102,
            "code": "    it('has a close button inside the body', function () {\n      return expect(this.exists('.modal-body .close')).to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not have a footer",
            "suites": [
                "bootbox.dialog",
                "when creating a minimal dialog"
            ],
            "updatePoint": {
                "line": 105,
                "column": 30
            },
            "line": 105,
            "code": "    it('does not have a footer', function () {\n      return expect(this.exists('.modal-footer')).not.to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows a footer",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback"
            ],
            "updatePoint": {
                "line": 133,
                "column": 24
            },
            "line": 133,
            "code": "      it('shows a footer', function () {\n        return expect(this.exists('.modal-footer')).to.be.ok;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows one button",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback"
            ],
            "updatePoint": {
                "line": 136,
                "column": 26
            },
            "line": 136,
            "code": "      it('shows one button', function () {\n        return expect(this.find('.btn').length).to.equal(1);\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct button text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback"
            ],
            "updatePoint": {
                "line": 139,
                "column": 39
            },
            "line": 139,
            "code": "      it('shows the correct button text', function () {\n        return expect(this.text('.btn')).to.equal('My Label');\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the correct button class",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback"
            ],
            "updatePoint": {
                "line": 142,
                "column": 42
            },
            "line": 142,
            "code": "      it('applies the correct button class', function () {\n        return expect(this['class']('.btn', 'btn-primary')).to.be.true;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 149,
                "column": 44
            },
            "line": 149,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 157,
                "column": 40
            },
            "line": 157,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows a footer",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback"
            ],
            "updatePoint": {
                "line": 171,
                "column": 24
            },
            "line": 171,
            "code": "      it('shows a footer', function () {\n        return expect(this.exists('.modal-footer')).to.be.ok;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct button text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback"
            ],
            "updatePoint": {
                "line": 174,
                "column": 39
            },
            "line": 174,
            "code": "      it('shows the correct button text', function () {\n        return expect(this.text('.btn')).to.equal('Another Label');\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 181,
                "column": 38
            },
            "line": 181,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 184,
                "column": 44
            },
            "line": 184,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 187,
                "column": 40
            },
            "line": 187,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 195,
                "column": 42
            },
            "line": 195,
            "code": "        it('should not invoke the callback', function () {\n          return expect(this.callback).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 198,
                "column": 44
            },
            "line": 198,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 206,
                "column": 42
            },
            "line": 206,
            "code": "        it('should not invoke the callback', function () {\n          return expect(this.callback).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a label and callback",
                "when clicking the close button"
            ],
            "updatePoint": {
                "line": 209,
                "column": 40
            },
            "line": 209,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct button text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a custom class"
            ],
            "updatePoint": {
                "line": 221,
                "column": 39
            },
            "line": 221,
            "code": "      it('shows the correct button text', function () {\n        return expect(this.text('.btn')).to.equal('Test Label');\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the custom class to the button",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has a custom class"
            ],
            "updatePoint": {
                "line": 224,
                "column": 52
            },
            "line": 224,
            "code": "      return it('adds the custom class to the button', function () {\n        return expect(this['class']('.btn', 'btn-custom')).to.be.true;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "uses the key name as the button text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is an object"
            ],
            "updatePoint": {
                "line": 248,
                "column": 48
            },
            "line": 248,
            "code": "        it('uses the key name as the button text', function () {\n          return expect(this.text('.btn')).to.equal('Short form');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the custom class to the button",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is an object"
            ],
            "updatePoint": {
                "line": 251,
                "column": 54
            },
            "line": 251,
            "code": "        return it('adds the custom class to the button', function () {\n          return expect(this['class']('.btn', 'btn-custom')).to.be.true;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "uses the key name as the button text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is a function"
            ],
            "updatePoint": {
                "line": 262,
                "column": 48
            },
            "line": 262,
            "code": "        it('uses the key name as the button text', function () {\n          return expect(this.text('.btn')).to.equal('my_label');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is a function",
                "when dismissing the dialog by clicking the button"
            ],
            "updatePoint": {
                "line": 269,
                "column": 40
            },
            "line": 269,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is a function",
                "when dismissing the dialog by clicking the button"
            ],
            "updatePoint": {
                "line": 272,
                "column": 53
            },
            "line": 272,
            "code": "          return it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a button",
                "when the button has no explicit label",
                "when its value is not an object or function"
            ],
            "updatePoint": {
                "line": 287,
                "column": 34
            },
            "line": 287,
            "code": "        return it('throws an error', function () {\n          return expect(this.badCreate).to.throw('button with key \"Short form\" must be an object');\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has a header",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a title"
            ],
            "updatePoint": {
                "line": 300,
                "column": 20
            },
            "line": 300,
            "code": "    it('has a header', function () {\n      return expect(this.exists('.modal-header')).to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct title text",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a title"
            ],
            "updatePoint": {
                "line": 303,
                "column": 36
            },
            "line": 303,
            "code": "    it('shows the correct title text', function () {\n      return expect(this.text('.modal-title')).to.equal('My Title');\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has a close button inside the header",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with a title"
            ],
            "updatePoint": {
                "line": 306,
                "column": 51
            },
            "line": 306,
            "code": "    return it('has a close button inside the header', function () {\n      return expect(this.exists('.modal-header .close')).to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not have a backdrop",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with no backdrop"
            ],
            "updatePoint": {
                "line": 317,
                "column": 39
            },
            "line": 317,
            "code": "    return it('does not have a backdrop', function () {\n      return expect(this.dialog.next('.modal-backdrop').length).to.equal(0);\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not have a close button inside the body",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with no close button"
            ],
            "updatePoint": {
                "line": 328,
                "column": 59
            },
            "line": 328,
            "code": "    return it('does not have a close button inside the body', function () {\n      return expect(this.exists('.modal-body .close')).not.to.be.ok;\n    });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not trigger the escape event",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is not the escape key"
            ],
            "updatePoint": {
                "line": 355,
                "column": 47
            },
            "line": 355,
            "code": "          it('does not trigger the escape event', function () {\n            return expect(this.trigger).not.to.have.been.called;\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is not the escape key"
            ],
            "updatePoint": {
                "line": 358,
                "column": 46
            },
            "line": 358,
            "code": "          return it('should not hide the modal', function () {\n            return expect(this.hidden).not.to.have.been.called;\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "triggers the escape event",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is the escape key"
            ],
            "updatePoint": {
                "line": 366,
                "column": 39
            },
            "line": 366,
            "code": "          it('triggers the escape event', function () {\n            return expect(this.trigger).to.have.been.calledWithExactly('escape.close.bb');\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is the escape key"
            ],
            "updatePoint": {
                "line": 369,
                "column": 40
            },
            "line": 369,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is the escape key"
            ],
            "updatePoint": {
                "line": 372,
                "column": 46
            },
            "line": 372,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a simple callback",
                "when triggering the keyup event",
                "when the key is the escape key"
            ],
            "updatePoint": {
                "line": 375,
                "column": 42
            },
            "line": 375,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when triggering the escape keyup event"
            ],
            "updatePoint": {
                "line": 394,
                "column": 38
            },
            "line": 394,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when triggering the escape keyup event"
            ],
            "updatePoint": {
                "line": 397,
                "column": 44
            },
            "line": 397,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when triggering the escape keyup event"
            ],
            "updatePoint": {
                "line": 400,
                "column": 44
            },
            "line": 400,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when clicking the escape button"
            ],
            "updatePoint": {
                "line": 408,
                "column": 38
            },
            "line": 408,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when clicking the escape button"
            ],
            "updatePoint": {
                "line": 411,
                "column": 44
            },
            "line": 411,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.dialog",
                "when creating a dialog with an onEscape handler",
                "with a callback which returns false",
                "when clicking the escape button"
            ],
            "updatePoint": {
                "line": 414,
                "column": 44
            },
            "line": 414,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the large class to the innerDialog",
            "suites": [
                "bootbox.dialog",
                "with size option",
                "when the size option is set to large"
            ],
            "updatePoint": {
                "line": 428,
                "column": 56
            },
            "line": 428,
            "code": "      return it('adds the large class to the innerDialog', function () {\n        return expect(this.dialog.children('.modal-dialog').hasClass('modal-lg')).to.be.true;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the large class to the innerDialog",
            "suites": [
                "bootbox.dialog",
                "with size option",
                "when the size option is set to small"
            ],
            "updatePoint": {
                "line": 439,
                "column": 56
            },
            "line": 439,
            "code": "      return it('adds the large class to the innerDialog', function () {\n        return expect(this.dialog.children('.modal-dialog').hasClass('modal-sm')).to.be.true;\n      });",
            "file": "dialog.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the default OK translation",
            "suites": [
                "bootbox locales",
                "Invalid locale"
            ],
            "updatePoint": {
                "line": 24,
                "column": 40
            },
            "line": 24,
            "code": "    it('shows the default OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the default CANCEL translation",
            "suites": [
                "bootbox locales",
                "Invalid locale"
            ],
            "updatePoint": {
                "line": 27,
                "column": 44
            },
            "line": 27,
            "code": "    it('shows the default CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Cancel');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the default CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Invalid locale"
            ],
            "updatePoint": {
                "line": 30,
                "column": 52
            },
            "line": 30,
            "code": "    return it('shows the default CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Arabic"
            ],
            "updatePoint": {
                "line": 38,
                "column": 40
            },
            "line": 38,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('موافق');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Arabic"
            ],
            "updatePoint": {
                "line": 41,
                "column": 44
            },
            "line": 41,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('الغاء');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Arabic"
            ],
            "updatePoint": {
                "line": 44,
                "column": 52
            },
            "line": 44,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('تأكيد');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Azerbaijani"
            ],
            "updatePoint": {
                "line": 52,
                "column": 40
            },
            "line": 52,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Azerbaijani"
            ],
            "updatePoint": {
                "line": 55,
                "column": 44
            },
            "line": 55,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('İmtina et');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Azerbaijani"
            ],
            "updatePoint": {
                "line": 58,
                "column": 52
            },
            "line": 58,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Təsdiq et');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "English"
            ],
            "updatePoint": {
                "line": 66,
                "column": 40
            },
            "line": 66,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "English"
            ],
            "updatePoint": {
                "line": 69,
                "column": 44
            },
            "line": 69,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Cancel');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "English"
            ],
            "updatePoint": {
                "line": 72,
                "column": 52
            },
            "line": 72,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "French"
            ],
            "updatePoint": {
                "line": 80,
                "column": 40
            },
            "line": 80,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "French"
            ],
            "updatePoint": {
                "line": 83,
                "column": 44
            },
            "line": 83,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Annuler');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "French"
            ],
            "updatePoint": {
                "line": 86,
                "column": 52
            },
            "line": 86,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Confirmer');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "German"
            ],
            "updatePoint": {
                "line": 94,
                "column": 40
            },
            "line": 94,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "German"
            ],
            "updatePoint": {
                "line": 97,
                "column": 44
            },
            "line": 97,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Abbrechen');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "German"
            ],
            "updatePoint": {
                "line": 100,
                "column": 52
            },
            "line": 100,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Akzeptieren');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Spanish"
            ],
            "updatePoint": {
                "line": 108,
                "column": 40
            },
            "line": 108,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Spanish"
            ],
            "updatePoint": {
                "line": 111,
                "column": 44
            },
            "line": 111,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Cancelar');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Spanish"
            ],
            "updatePoint": {
                "line": 114,
                "column": 52
            },
            "line": 114,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Aceptar');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Basque"
            ],
            "updatePoint": {
                "line": 122,
                "column": 40
            },
            "line": 122,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Basque"
            ],
            "updatePoint": {
                "line": 125,
                "column": 44
            },
            "line": 125,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Ezeztatu');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Basque"
            ],
            "updatePoint": {
                "line": 128,
                "column": 52
            },
            "line": 128,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Onartu');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Portuguese"
            ],
            "updatePoint": {
                "line": 136,
                "column": 40
            },
            "line": 136,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Portuguese"
            ],
            "updatePoint": {
                "line": 139,
                "column": 44
            },
            "line": 139,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Cancelar');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Portuguese"
            ],
            "updatePoint": {
                "line": 142,
                "column": 52
            },
            "line": 142,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Sim');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Dutch"
            ],
            "updatePoint": {
                "line": 150,
                "column": 40
            },
            "line": 150,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Dutch"
            ],
            "updatePoint": {
                "line": 153,
                "column": 44
            },
            "line": 153,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Annuleren');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Dutch"
            ],
            "updatePoint": {
                "line": 156,
                "column": 52
            },
            "line": 156,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Accepteren');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Russian"
            ],
            "updatePoint": {
                "line": 164,
                "column": 40
            },
            "line": 164,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Russian"
            ],
            "updatePoint": {
                "line": 167,
                "column": 44
            },
            "line": 167,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Отмена');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Russian"
            ],
            "updatePoint": {
                "line": 170,
                "column": 52
            },
            "line": 170,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Подтвердить');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Indonesian"
            ],
            "updatePoint": {
                "line": 178,
                "column": 40
            },
            "line": 178,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Indonesian"
            ],
            "updatePoint": {
                "line": 181,
                "column": 44
            },
            "line": 181,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Batal');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Indonesian"
            ],
            "updatePoint": {
                "line": 184,
                "column": 52
            },
            "line": 184,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Italian"
            ],
            "updatePoint": {
                "line": 192,
                "column": 40
            },
            "line": 192,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Italian"
            ],
            "updatePoint": {
                "line": 195,
                "column": 44
            },
            "line": 195,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Annulla');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Italian"
            ],
            "updatePoint": {
                "line": 198,
                "column": 52
            },
            "line": 198,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Conferma');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Polish"
            ],
            "updatePoint": {
                "line": 206,
                "column": 40
            },
            "line": 206,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Polish"
            ],
            "updatePoint": {
                "line": 209,
                "column": 44
            },
            "line": 209,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Anuluj');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Polish"
            ],
            "updatePoint": {
                "line": 212,
                "column": 52
            },
            "line": 212,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Potwierdź');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Danish"
            ],
            "updatePoint": {
                "line": 220,
                "column": 40
            },
            "line": 220,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Danish"
            ],
            "updatePoint": {
                "line": 223,
                "column": 44
            },
            "line": 223,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Annuller');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Danish"
            ],
            "updatePoint": {
                "line": 226,
                "column": 52
            },
            "line": 226,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Accepter');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "Taiwan"
            ],
            "updatePoint": {
                "line": 235,
                "column": 42
            },
            "line": 235,
            "code": "      it('shows the correct OK translation', function () {\n        return expect(this.labels.ok).to.equal('OK');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "Taiwan"
            ],
            "updatePoint": {
                "line": 238,
                "column": 46
            },
            "line": 238,
            "code": "      it('shows the correct CANCEL translation', function () {\n        return expect(this.labels.cancel).to.equal('取消');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "Taiwan"
            ],
            "updatePoint": {
                "line": 241,
                "column": 54
            },
            "line": 241,
            "code": "      return it('shows the correct CONFIRM translation', function () {\n        return expect(this.labels.confirm).to.equal('確認');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "China"
            ],
            "updatePoint": {
                "line": 249,
                "column": 42
            },
            "line": 249,
            "code": "      it('shows the correct OK translation', function () {\n        return expect(this.labels.ok).to.equal('OK');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "China"
            ],
            "updatePoint": {
                "line": 252,
                "column": 46
            },
            "line": 252,
            "code": "      it('shows the correct CANCEL translation', function () {\n        return expect(this.labels.cancel).to.equal('取消');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Chinese",
                "China"
            ],
            "updatePoint": {
                "line": 255,
                "column": 54
            },
            "line": 255,
            "code": "      return it('shows the correct CONFIRM translation', function () {\n        return expect(this.labels.confirm).to.equal('确认');\n      });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Norwegian"
            ],
            "updatePoint": {
                "line": 264,
                "column": 40
            },
            "line": 264,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Norwegian"
            ],
            "updatePoint": {
                "line": 267,
                "column": 44
            },
            "line": 267,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Avbryt');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Norwegian"
            ],
            "updatePoint": {
                "line": 270,
                "column": 52
            },
            "line": 270,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Swedish"
            ],
            "updatePoint": {
                "line": 278,
                "column": 40
            },
            "line": 278,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Swedish"
            ],
            "updatePoint": {
                "line": 281,
                "column": 44
            },
            "line": 281,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Avbryt');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Swedish"
            ],
            "updatePoint": {
                "line": 284,
                "column": 52
            },
            "line": 284,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Latvian"
            ],
            "updatePoint": {
                "line": 292,
                "column": 40
            },
            "line": 292,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Labi');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Latvian"
            ],
            "updatePoint": {
                "line": 295,
                "column": 44
            },
            "line": 295,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Atcelt');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Latvian"
            ],
            "updatePoint": {
                "line": 298,
                "column": 52
            },
            "line": 298,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Apstiprināt');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Lithuanian"
            ],
            "updatePoint": {
                "line": 306,
                "column": 40
            },
            "line": 306,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Gerai');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Lithuanian"
            ],
            "updatePoint": {
                "line": 309,
                "column": 44
            },
            "line": 309,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Atšaukti');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Lithuanian"
            ],
            "updatePoint": {
                "line": 312,
                "column": 52
            },
            "line": 312,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Patvirtinti');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Turkish"
            ],
            "updatePoint": {
                "line": 320,
                "column": 40
            },
            "line": 320,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Tamam');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Turkish"
            ],
            "updatePoint": {
                "line": 323,
                "column": 44
            },
            "line": 323,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('İptal');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Turkish"
            ],
            "updatePoint": {
                "line": 326,
                "column": 52
            },
            "line": 326,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Onayla');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Hebrew"
            ],
            "updatePoint": {
                "line": 334,
                "column": 40
            },
            "line": 334,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('אישור');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Hebrew"
            ],
            "updatePoint": {
                "line": 337,
                "column": 44
            },
            "line": 337,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('ביטול');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Hebrew"
            ],
            "updatePoint": {
                "line": 340,
                "column": 52
            },
            "line": 340,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('אישור');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Greek"
            ],
            "updatePoint": {
                "line": 348,
                "column": 40
            },
            "line": 348,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Εντάξει');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Greek"
            ],
            "updatePoint": {
                "line": 351,
                "column": 44
            },
            "line": 351,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Ακύρωση');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Greek"
            ],
            "updatePoint": {
                "line": 354,
                "column": 52
            },
            "line": 354,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Επιβεβαίωση');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Japanese"
            ],
            "updatePoint": {
                "line": 362,
                "column": 40
            },
            "line": 362,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Japanese"
            ],
            "updatePoint": {
                "line": 365,
                "column": 44
            },
            "line": 365,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('キャンセル');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Japanese"
            ],
            "updatePoint": {
                "line": 368,
                "column": 52
            },
            "line": 368,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('確認');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Hungarian"
            ],
            "updatePoint": {
                "line": 376,
                "column": 40
            },
            "line": 376,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Hungarian"
            ],
            "updatePoint": {
                "line": 379,
                "column": 44
            },
            "line": 379,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Mégsem');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Hungarian"
            ],
            "updatePoint": {
                "line": 382,
                "column": 52
            },
            "line": 382,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Megerősít');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Croatian"
            ],
            "updatePoint": {
                "line": 390,
                "column": 40
            },
            "line": 390,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Croatian"
            ],
            "updatePoint": {
                "line": 393,
                "column": 44
            },
            "line": 393,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Odustani');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Croatian"
            ],
            "updatePoint": {
                "line": 396,
                "column": 52
            },
            "line": 396,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Potvrdi');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Bulgarian"
            ],
            "updatePoint": {
                "line": 404,
                "column": 40
            },
            "line": 404,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Ок');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Bulgarian"
            ],
            "updatePoint": {
                "line": 407,
                "column": 44
            },
            "line": 407,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Отказ');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Bulgarian"
            ],
            "updatePoint": {
                "line": 410,
                "column": 52
            },
            "line": 410,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Потвърждавам');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Thai"
            ],
            "updatePoint": {
                "line": 418,
                "column": 40
            },
            "line": 418,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('ตกลง');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Thai"
            ],
            "updatePoint": {
                "line": 421,
                "column": 44
            },
            "line": 421,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('ยกเลิก');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Thai"
            ],
            "updatePoint": {
                "line": 424,
                "column": 52
            },
            "line": 424,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('ยืนยัน');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Persian"
            ],
            "updatePoint": {
                "line": 432,
                "column": 40
            },
            "line": 432,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('قبول');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Persian"
            ],
            "updatePoint": {
                "line": 435,
                "column": 44
            },
            "line": 435,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('لغو');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Persian"
            ],
            "updatePoint": {
                "line": 438,
                "column": 52
            },
            "line": 438,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('تایید');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Ukrainian"
            ],
            "updatePoint": {
                "line": 446,
                "column": 40
            },
            "line": 446,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Ukrainian"
            ],
            "updatePoint": {
                "line": 449,
                "column": 44
            },
            "line": 449,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Відміна');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Ukrainian"
            ],
            "updatePoint": {
                "line": 452,
                "column": 52
            },
            "line": 452,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Прийняти');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Albanian"
            ],
            "updatePoint": {
                "line": 460,
                "column": 40
            },
            "line": 460,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Albanian"
            ],
            "updatePoint": {
                "line": 463,
                "column": 44
            },
            "line": 463,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Anulo');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Albanian"
            ],
            "updatePoint": {
                "line": 466,
                "column": 52
            },
            "line": 466,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Prano');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Slovenian"
            ],
            "updatePoint": {
                "line": 474,
                "column": 40
            },
            "line": 474,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Slovenian"
            ],
            "updatePoint": {
                "line": 477,
                "column": 44
            },
            "line": 477,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Prekliči');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Slovenian"
            ],
            "updatePoint": {
                "line": 480,
                "column": 52
            },
            "line": 480,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Potrdi');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Slovak"
            ],
            "updatePoint": {
                "line": 488,
                "column": 40
            },
            "line": 488,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Slovak"
            ],
            "updatePoint": {
                "line": 491,
                "column": 44
            },
            "line": 491,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Zrušiť');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Slovak"
            ],
            "updatePoint": {
                "line": 494,
                "column": 52
            },
            "line": 494,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Potvrdiť');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Tamil"
            ],
            "updatePoint": {
                "line": 502,
                "column": 40
            },
            "line": 502,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('சரி');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Tamil"
            ],
            "updatePoint": {
                "line": 505,
                "column": 44
            },
            "line": 505,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('ரத்து செய்');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Tamil"
            ],
            "updatePoint": {
                "line": 508,
                "column": 52
            },
            "line": 508,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('உறுதி செய்');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Swahili"
            ],
            "updatePoint": {
                "line": 516,
                "column": 40
            },
            "line": 516,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('Sawa');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Swahili"
            ],
            "updatePoint": {
                "line": 519,
                "column": 44
            },
            "line": 519,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Ghairi');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Swahili"
            ],
            "updatePoint": {
                "line": 522,
                "column": 52
            },
            "line": 522,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Thibitisha');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Georgian"
            ],
            "updatePoint": {
                "line": 530,
                "column": 40
            },
            "line": 530,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Georgian"
            ],
            "updatePoint": {
                "line": 533,
                "column": 44
            },
            "line": 533,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('გაუქმება');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Georgian"
            ],
            "updatePoint": {
                "line": 536,
                "column": 52
            },
            "line": 536,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('დადასტურება');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct OK translation",
            "suites": [
                "bootbox locales",
                "Vietnamese"
            ],
            "updatePoint": {
                "line": 544,
                "column": 40
            },
            "line": 544,
            "code": "    it('shows the correct OK translation', function () {\n      return expect(this.labels.ok).to.equal('OK');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CANCEL translation",
            "suites": [
                "bootbox locales",
                "Vietnamese"
            ],
            "updatePoint": {
                "line": 547,
                "column": 44
            },
            "line": 547,
            "code": "    it('shows the correct CANCEL translation', function () {\n      return expect(this.labels.cancel).to.equal('Hủy bỏ');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the correct CONFIRM translation",
            "suites": [
                "bootbox locales",
                "Vietnamese"
            ],
            "updatePoint": {
                "line": 550,
                "column": 52
            },
            "line": 550,
            "code": "    return it('shows the correct CONFIRM translation', function () {\n      return expect(this.labels.confirm).to.equal('Xác nhận');\n    });",
            "file": "locales.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is not an object"
            ],
            "updatePoint": {
                "line": 29,
                "column": 34
            },
            "line": 29,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt requires a callback');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title property"
            ],
            "updatePoint": {
                "line": 46,
                "column": 50
            },
            "line": 46,
            "code": "          it('throws an error requiring a callback', function () {\n            return expect(this.create).to.throw('prompt requires a callback');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title property",
                "and a callback property",
                "where the callback is not a function"
            ],
            "updatePoint": {
                "line": 54,
                "column": 61
            },
            "line": 54,
            "code": "              return it('throws an error requiring a callback', function () {\n                return expect(this.create).to.throw('prompt requires a callback');\n              });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a title",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a callback function"
            ],
            "updatePoint": {
                "line": 66,
                "column": 54
            },
            "line": 66,
            "code": "          return it('throws an error requiring a title', function () {\n            return expect(this.create).to.throw('prompt requires a title');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not throw an error",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title and a callback"
            ],
            "updatePoint": {
                "line": 84,
                "column": 37
            },
            "line": 84,
            "code": "          it('does not throw an error', function () {\n            return expect(this.create).not.to.throw(Error);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "creates a dialog object",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title and a callback"
            ],
            "updatePoint": {
                "line": 87,
                "column": 37
            },
            "line": 87,
            "code": "          it('creates a dialog object', function () {\n            return expect(this.dialog).to.be.an('object');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "applies the bootbox-prompt class to the dialog",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title and a callback"
            ],
            "updatePoint": {
                "line": 90,
                "column": 60
            },
            "line": 90,
            "code": "          it('applies the bootbox-prompt class to the dialog', function () {\n            return expect(this.dialog.hasClass('bootbox-prompt')).to.be.true;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button labels",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title and a callback"
            ],
            "updatePoint": {
                "line": 93,
                "column": 44
            },
            "line": 93,
            "code": "          it('adds the correct button labels', function () {\n            expect(this.dialog.find('.btn:first').text()).to.equal('Cancel');\n            return expect(this.dialog.find('.btn:last').text()).to.equal('OK');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button classes",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with one argument",
                "where the argument is an object",
                "with a title and a callback"
            ],
            "updatePoint": {
                "line": 97,
                "column": 52
            },
            "line": 97,
            "code": "          return it('adds the correct button classes', function () {\n            expect(this.dialog.find('.btn:first').hasClass('btn-default')).to.be.true;\n            expect(this.dialog.find('.btn:first').hasClass('btn-secondary')).to.be.true;\n            expect(this.dialog.find('.btn:first').hasClass('bootbox-cancel')).to.be.true;\n            expect(this.dialog.find('.btn:last').hasClass('btn-primary')).to.be.true;\n            return expect(this.dialog.find('.btn:last').hasClass('bootbox-accept')).to.be.true;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error requiring a callback",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is not a function"
            ],
            "updatePoint": {
                "line": 116,
                "column": 55
            },
            "line": 116,
            "code": "        return it('throws an error requiring a callback', function () {\n          return expect(this.create).to.throw('prompt requires a callback');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not throw an error",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 130,
                "column": 35
            },
            "line": 130,
            "code": "        it('does not throw an error', function () {\n          return expect(this.create).not.to.throw(Error);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "creates a dialog object",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 133,
                "column": 35
            },
            "line": 133,
            "code": "        it('creates a dialog object', function () {\n          return expect(this.dialog).to.be.an('object');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button labels",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 136,
                "column": 42
            },
            "line": 136,
            "code": "        it('adds the correct button labels', function () {\n          expect(this.text('.btn:first')).to.equal('Cancel');\n          return expect(this.text('.btn:last')).to.equal('OK');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct button classes",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 140,
                "column": 43
            },
            "line": 140,
            "code": "        it('adds the correct button classes', function () {\n          expect(this.dialog.find('.btn:first').hasClass('btn-default')).to.be.true;\n          expect(this.dialog.find('.btn:first').hasClass('btn-secondary')).to.be.true;\n          expect(this.dialog.find('.btn:first').hasClass('bootbox-cancel')).to.be.true;\n          expect(this.dialog.find('.btn:last').hasClass('btn-primary')).to.be.true;\n          return expect(this.dialog.find('.btn:last').hasClass('bootbox-accept')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the expected dialog title",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 147,
                "column": 42
            },
            "line": 147,
            "code": "        it('adds the expected dialog title', function () {\n          return expect(this.text('.modal-title')).to.equal('What is your name?');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds a close button",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 150,
                "column": 31
            },
            "line": 150,
            "code": "        it('adds a close button', function () {\n          return expect(this.dialog.find('.modal-header .close')).to.be.ok;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "creates a form with a text input",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 153,
                "column": 44
            },
            "line": 153,
            "code": "        it('creates a form with a text input', function () {\n          return expect(this.dialog.find('form input[type=text]')).to.be.ok;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with no default value",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 156,
                "column": 33
            },
            "line": 156,
            "code": "        it('with no default value', function () {\n          return expect(this.dialog.find('form input[type=\"text\"]').val()).to.equal('');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the dialog",
            "suites": [
                "bootbox.prompt",
                "basic usage tests",
                "with two arguments",
                "where the second argument is a function"
            ],
            "updatePoint": {
                "line": 159,
                "column": 35
            },
            "line": 159,
            "code": "        return it('shows the dialog', function () {\n          return expect(this.dialog.is(':visible')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the modal-dialog-centered class to the innerDialog of the prompt",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "with `centerVertical` set to `true`"
            ],
            "updatePoint": {
                "line": 186,
                "column": 86
            },
            "line": 186,
            "code": "      return it('adds the modal-dialog-centered class to the innerDialog of the prompt', function () {\n        return expect(this.dialog.children('.modal-dialog').hasClass('modal-dialog-centered')).to.be.true;\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not add the modal-dialog-centered class to the innerDialog of the prompt",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "with `centerVertical` set to `false`"
            ],
            "updatePoint": {
                "line": 196,
                "column": 94
            },
            "line": 196,
            "code": "      return it('does not add the modal-dialog-centered class to the innerDialog of the prompt', function () {\n        return expect(this.dialog.children('.modal-dialog').hasClass('modal-dialog-centered')).to.be.false;\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct cancel button",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "with a custom cancel button"
            ],
            "updatePoint": {
                "line": 212,
                "column": 47
            },
            "line": 212,
            "code": "      return it('adds the correct cancel button', function () {\n        expect(this.button.text()).to.equal('Custom cancel');\n        return expect(this.button.hasClass('btn-danger')).to.be.true;\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "adds the correct confirm button",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "with a custom confirm button"
            ],
            "updatePoint": {
                "line": 229,
                "column": 48
            },
            "line": 229,
            "code": "      return it('adds the correct confirm button', function () {\n        expect(this.button.text()).to.equal('Custom confirm');\n        return expect(this.button.hasClass('btn-warning')).to.be.true;\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "with an unrecognised button key"
            ],
            "updatePoint": {
                "line": 244,
                "column": 32
            },
            "line": 244,
            "code": "      return it('throws an error', function () {\n        return expect(this.create).to.throw('button key \"prompt\" is not allowed (options are cancel confirm)');\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "does not show the dialog",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting show to false"
            ],
            "updatePoint": {
                "line": 256,
                "column": 41
            },
            "line": 256,
            "code": "      return it('does not show the dialog', function () {\n        return expect(this.shown).not.to.have.been.called;\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "invalid prompt type"
            ],
            "updatePoint": {
                "line": 265,
                "column": 32
            },
            "line": 265,
            "code": "      return it('throws an error', function () {\n        return expect(this.create).to.throw('Invalid prompt type');\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows text input ",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "without default value"
            ],
            "updatePoint": {
                "line": 278,
                "column": 29
            },
            "line": 278,
            "code": "        it('shows text input ', function () {\n          return expect(this.exists('input[type=\"text\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "without default value"
            ],
            "updatePoint": {
                "line": 281,
                "column": 35
            },
            "line": 281,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"text\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"text\"]').hasClass('bootbox-input-text')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "with default value"
            ],
            "updatePoint": {
                "line": 291,
                "column": 44
            },
            "line": 291,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"text\"]').val()).to.equal('John Smith');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 300,
                "column": 48
            },
            "line": 300,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"text\"]').attr('placeholder')).to.equal('enter your name');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct pattern value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "with pattern"
            ],
            "updatePoint": {
                "line": 309,
                "column": 44
            },
            "line": 309,
            "code": "        return it('has correct pattern value', function () {\n          return expect(this.find('input[type=\"text\"]').attr('pattern')).to.equal('\\d{1,2}/\\d{1,2}/\\d{4}');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct maxlength value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType text",
                "with maxlength"
            ],
            "updatePoint": {
                "line": 318,
                "column": 46
            },
            "line": 318,
            "code": "        return it('has correct maxlength value', function () {\n          return expect(this.find('input[type=\"text\"]').attr('maxlength')).to.equal('5');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows text input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType textarea",
                "without default value"
            ],
            "updatePoint": {
                "line": 332,
                "column": 28
            },
            "line": 332,
            "code": "        it('shows text input', function () {\n          return expect(this.exists('textarea')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType textarea",
                "without default value"
            ],
            "updatePoint": {
                "line": 335,
                "column": 35
            },
            "line": 335,
            "code": "        return it('has proper class', function () {\n          expect(this.find('textarea').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('textarea').hasClass('bootbox-input-textarea')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType textarea",
                "with default value"
            ],
            "updatePoint": {
                "line": 345,
                "column": 44
            },
            "line": 345,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('textarea').val()).to.equal('Once upon a time...');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType textarea",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 354,
                "column": 48
            },
            "line": 354,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('textarea').attr('placeholder')).to.equal('enter your favorite fairy tale');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct rows value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType textarea",
                "with rows"
            ],
            "updatePoint": {
                "line": 363,
                "column": 41
            },
            "line": 363,
            "code": "        return it('has correct rows value', function () {\n          return expect(this.find('textarea').attr('rows')).to.equal('6');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows email input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType email",
                "without default value"
            ],
            "updatePoint": {
                "line": 377,
                "column": 29
            },
            "line": 377,
            "code": "        it('shows email input', function () {\n          return expect(this.exists('input[type=\"email\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType email",
                "without default value"
            ],
            "updatePoint": {
                "line": 380,
                "column": 35
            },
            "line": 380,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"email\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"email\"]').hasClass('bootbox-input-email')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType email",
                "with default value"
            ],
            "updatePoint": {
                "line": 390,
                "column": 44
            },
            "line": 390,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"email\"]').val()).to.equal('john@smith.com');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType email",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 399,
                "column": 48
            },
            "line": 399,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"email\"]').attr('placeholder')).to.equal('enter your email');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct pattern value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType email",
                "with pattern"
            ],
            "updatePoint": {
                "line": 408,
                "column": 44
            },
            "line": 408,
            "code": "        return it('has correct pattern value', function () {\n          return expect(this.find('input[type=\"email\"]').attr('pattern')).to.equal('\\d{1,2}/\\d{1,2}/\\d{4}');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows password input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType password",
                "without default value"
            ],
            "updatePoint": {
                "line": 422,
                "column": 32
            },
            "line": 422,
            "code": "        it('shows password input', function () {\n          return expect(this.exists('input[type=\"password\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType password",
                "without default value"
            ],
            "updatePoint": {
                "line": 425,
                "column": 35
            },
            "line": 425,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"password\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"password\"]').hasClass('bootbox-input-password')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType password",
                "with default value"
            ],
            "updatePoint": {
                "line": 435,
                "column": 44
            },
            "line": 435,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"password\"]').val()).to.equal('qwerty');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType password",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 444,
                "column": 48
            },
            "line": 444,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"password\"]').attr('placeholder')).to.equal('enter your password');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "without options"
            ],
            "updatePoint": {
                "line": 455,
                "column": 34
            },
            "line": 455,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt with \"inputType\" set to \"select\" requires at least one option');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with invalid options"
            ],
            "updatePoint": {
                "line": 464,
                "column": 34
            },
            "line": 464,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('Please pass an array of input options');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with empty options"
            ],
            "updatePoint": {
                "line": 473,
                "column": 34
            },
            "line": 473,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt with \"inputType\" set to \"select\" requires at least one option');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with options in the wrong format"
            ],
            "updatePoint": {
                "line": 484,
                "column": 34
            },
            "line": 484,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('each option needs a \"value\" property and a \"text\" property');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with a value but no text"
            ],
            "updatePoint": {
                "line": 495,
                "column": 34
            },
            "line": 495,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('each option needs a \"value\" property and a \"text\" property');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with an invalid second options"
            ],
            "updatePoint": {
                "line": 509,
                "column": 34
            },
            "line": 509,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('each option needs a \"value\" property and a \"text\" property');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows select input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with valid options"
            ],
            "updatePoint": {
                "line": 528,
                "column": 30
            },
            "line": 528,
            "code": "        it('shows select input', function () {\n          return expect(this.exists('select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with valid options"
            ],
            "updatePoint": {
                "line": 531,
                "column": 28
            },
            "line": 531,
            "code": "        it('has proper class', function () {\n          expect(this.find('select').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('select').hasClass('bootbox-input-select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with three options",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with valid options"
            ],
            "updatePoint": {
                "line": 535,
                "column": 37
            },
            "line": 535,
            "code": "        return it('with three options', function () {\n          return expect(this.find('option').length).to.equal(3);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the select input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with zero as the first option"
            ],
            "updatePoint": {
                "line": 548,
                "column": 41
            },
            "line": 548,
            "code": "        return it('shows the select input', function () {\n          return expect(this.exists('select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows the select input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with false as the first option"
            ],
            "updatePoint": {
                "line": 561,
                "column": 41
            },
            "line": 561,
            "code": "        return it('shows the select input', function () {\n          return expect(this.exists('select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows select input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with option groups"
            ],
            "updatePoint": {
                "line": 587,
                "column": 30
            },
            "line": 587,
            "code": "        it('shows select input', function () {\n          return expect(this.exists('select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with option groups"
            ],
            "updatePoint": {
                "line": 590,
                "column": 28
            },
            "line": 590,
            "code": "        it('has proper class', function () {\n          expect(this.find('select').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('select').hasClass('bootbox-input-select')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with two option group",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with option groups"
            ],
            "updatePoint": {
                "line": 594,
                "column": 33
            },
            "line": 594,
            "code": "        it('with two option group', function () {\n          return expect(this.find('optgroup').length).to.equal(2);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with four options",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType select",
                "with option groups"
            ],
            "updatePoint": {
                "line": 597,
                "column": 36
            },
            "line": 597,
            "code": "        return it('with four options', function () {\n          return expect(this.find('option').length).to.equal(4);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType checkbox",
                "without options"
            ],
            "updatePoint": {
                "line": 608,
                "column": 34
            },
            "line": 608,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt with \"inputType\" set to \"checkbox\" requires at least one option');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType checkbox",
                "with options in the wrong format"
            ],
            "updatePoint": {
                "line": 619,
                "column": 34
            },
            "line": 619,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('each option needs a \"value\" property and a \"text\" property');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows checkbox input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType checkbox",
                "with options"
            ],
            "updatePoint": {
                "line": 638,
                "column": 32
            },
            "line": 638,
            "code": "        it('shows checkbox input', function () {\n          return expect(this.exists('input[type=\"checkbox\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType checkbox",
                "with options"
            ],
            "updatePoint": {
                "line": 641,
                "column": 28
            },
            "line": 641,
            "code": "        it('has proper class', function () {\n          expect(this.find('input[type=\"checkbox\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"checkbox\"]').hasClass('bootbox-input-checkbox')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with three checkboxes",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType checkbox",
                "with options"
            ],
            "updatePoint": {
                "line": 645,
                "column": 40
            },
            "line": 645,
            "code": "        return it('with three checkboxes', function () {\n          return expect(this.find('input[type=\"checkbox\"]').length).to.equal(3);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "without options"
            ],
            "updatePoint": {
                "line": 656,
                "column": 34
            },
            "line": 656,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt with \"inputType\" set to \"radio\" requires at least one option');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "with options in the wrong format"
            ],
            "updatePoint": {
                "line": 667,
                "column": 34
            },
            "line": 667,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('each option needs a \"value\" property and a \"text\" property');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows radio input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "with options"
            ],
            "updatePoint": {
                "line": 686,
                "column": 29
            },
            "line": 686,
            "code": "        it('shows radio input', function () {\n          return expect(this.exists('input[type=\"radio\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "with options"
            ],
            "updatePoint": {
                "line": 689,
                "column": 28
            },
            "line": 689,
            "code": "        it('has proper class', function () {\n          expect(this.find('input[type=\"radio\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"radio\"]').hasClass('bootbox-input-radio')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with three radios",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "with options"
            ],
            "updatePoint": {
                "line": 693,
                "column": 36
            },
            "line": 693,
            "code": "        return it('with three radios', function () {\n          return expect(this.find('input[type=\"radio\"]').length).to.equal(3);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType radio",
                "with an invalid value"
            ],
            "updatePoint": {
                "line": 712,
                "column": 34
            },
            "line": 712,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('prompt with \"inputType\" set to \"radio\" requires a single, non-array value for \"value\"');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows date input ",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType date",
                "without default value"
            ],
            "updatePoint": {
                "line": 726,
                "column": 29
            },
            "line": 726,
            "code": "        it('shows date input ', function () {\n          return expect(this.exists('input[type=\"date\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType date",
                "without default value"
            ],
            "updatePoint": {
                "line": 729,
                "column": 35
            },
            "line": 729,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"date\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"date\"]').hasClass('bootbox-input-date')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType date",
                "with default value"
            ],
            "updatePoint": {
                "line": 739,
                "column": 44
            },
            "line": 739,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"date\"]').val()).to.equal('17/08/2005');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType date",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 748,
                "column": 48
            },
            "line": 748,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"date\"]').attr('placeholder')).to.equal('enter the date');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct pattern value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType date",
                "with pattern"
            ],
            "updatePoint": {
                "line": 757,
                "column": 44
            },
            "line": 757,
            "code": "        return it('has correct pattern value', function () {\n          return expect(this.find('input[type=\"date\"]').attr('pattern')).to.equal('\\d{1,2}/\\d{1,2}/\\d{4}');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows time input",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "without default value"
            ],
            "updatePoint": {
                "line": 771,
                "column": 28
            },
            "line": 771,
            "code": "        it('shows time input', function () {\n          return expect(this.exists('input[type=\"time\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "without default value"
            ],
            "updatePoint": {
                "line": 774,
                "column": 35
            },
            "line": 774,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"time\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"time\"]').hasClass('bootbox-input-time')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with default value"
            ],
            "updatePoint": {
                "line": 784,
                "column": 44
            },
            "line": 784,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"time\"]').val()).to.equal('19:02');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 793,
                "column": 48
            },
            "line": 793,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"time\"]').attr('placeholder')).to.equal('enter the time');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct pattern value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with pattern"
            ],
            "updatePoint": {
                "line": 802,
                "column": 44
            },
            "line": 802,
            "code": "        return it('has correct pattern value', function () {\n          return expect(this.find('input[type=\"time\"]').attr('pattern')).to.equal('\\d{1,2}/\\d{1,2}/\\d{4}');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct min value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with min value"
            ],
            "updatePoint": {
                "line": 811,
                "column": 40
            },
            "line": 811,
            "code": "        return it('has correct min value', function () {\n          return expect(this.find('input[type=\"time\"]').attr('min')).to.equal('00:00:00');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct max value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with max value"
            ],
            "updatePoint": {
                "line": 820,
                "column": 40
            },
            "line": 820,
            "code": "        return it('has correct max value', function () {\n          return expect(this.find('input[type=\"time\"]').attr('max')).to.equal('23:59:59');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct step value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with step value"
            ],
            "updatePoint": {
                "line": 829,
                "column": 41
            },
            "line": 829,
            "code": "        return it('has correct step value', function () {\n          return expect(this.find('input[type=\"time\"]').attr('step')).to.equal('10');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with an invalid min value"
            ],
            "updatePoint": {
                "line": 838,
                "column": 34
            },
            "line": 838,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"min\" is not a valid time. See https://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html#form.data.time for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with an invalid max value"
            ],
            "updatePoint": {
                "line": 847,
                "column": 34
            },
            "line": 847,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" is not a valid time. See https://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html#form.data.time for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with min value greater than max value"
            ],
            "updatePoint": {
                "line": 856,
                "column": 34
            },
            "line": 856,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" must be greater than \"min\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType time",
                "with an invalid step value"
            ],
            "updatePoint": {
                "line": 864,
                "column": 34
            },
            "line": 864,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"step\" must be a valid positive number or the value \"any\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows number input ",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "without default value"
            ],
            "updatePoint": {
                "line": 878,
                "column": 31
            },
            "line": 878,
            "code": "        it('shows number input ', function () {\n          return expect(this.exists('input[type=\"number\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "without default value"
            ],
            "updatePoint": {
                "line": 881,
                "column": 35
            },
            "line": 881,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"number\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"number\"]').hasClass('bootbox-input-number')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with default value"
            ],
            "updatePoint": {
                "line": 891,
                "column": 44
            },
            "line": 891,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"number\"]').val()).to.equal('300');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct placeholder value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with placeholder"
            ],
            "updatePoint": {
                "line": 900,
                "column": 48
            },
            "line": 900,
            "code": "        return it('has correct placeholder value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('placeholder')).to.equal('enter the number');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct min value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with min int value"
            ],
            "updatePoint": {
                "line": 909,
                "column": 40
            },
            "line": 909,
            "code": "        return it('has correct min value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('min')).to.equal('0');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct min value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with min decimal value"
            ],
            "updatePoint": {
                "line": 918,
                "column": 40
            },
            "line": 918,
            "code": "        return it('has correct min value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('min')).to.equal('-99.99');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct max value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with max int value"
            ],
            "updatePoint": {
                "line": 927,
                "column": 40
            },
            "line": 927,
            "code": "        return it('has correct max value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('max')).to.equal('100');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct max value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with max decimal value"
            ],
            "updatePoint": {
                "line": 936,
                "column": 40
            },
            "line": 936,
            "code": "        return it('has correct max value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('max')).to.equal('99.99');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct step value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with step int value"
            ],
            "updatePoint": {
                "line": 945,
                "column": 41
            },
            "line": 945,
            "code": "        return it('has correct step value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('step')).to.equal('10');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct step value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with step decimal value"
            ],
            "updatePoint": {
                "line": 954,
                "column": 41
            },
            "line": 954,
            "code": "        return it('has correct step value', function () {\n          return expect(this.find('input[type=\"number\"]').attr('step')).to.equal('0.01');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with an invalid min value"
            ],
            "updatePoint": {
                "line": 963,
                "column": 34
            },
            "line": 963,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"min\" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with an invalid max value"
            ],
            "updatePoint": {
                "line": 972,
                "column": 34
            },
            "line": 972,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with min value greater than max value"
            ],
            "updatePoint": {
                "line": 981,
                "column": 34
            },
            "line": 981,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" must be greater than \"min\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with an invalid step value"
            ],
            "updatePoint": {
                "line": 989,
                "column": 34
            },
            "line": 989,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"step\" must be a valid positive number or the value \"any\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType number",
                "with an invalid negative step value"
            ],
            "updatePoint": {
                "line": 997,
                "column": 34
            },
            "line": 997,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"step\" must be a valid positive number or the value \"any\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "shows range input ",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "without default value"
            ],
            "updatePoint": {
                "line": 1011,
                "column": 30
            },
            "line": 1011,
            "code": "        it('shows range input ', function () {\n          return expect(this.exists('input[type=\"range\"]')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has proper class",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "without default value"
            ],
            "updatePoint": {
                "line": 1014,
                "column": 35
            },
            "line": 1014,
            "code": "        return it('has proper class', function () {\n          expect(this.find('input[type=\"range\"]').hasClass('bootbox-input')).to.be.true;\n          return expect(this.find('input[type=\"range\"]').hasClass('bootbox-input-range')).to.be.true;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct default value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with default value"
            ],
            "updatePoint": {
                "line": 1026,
                "column": 44
            },
            "line": 1026,
            "code": "        return it('has correct default value', function () {\n          return expect(this.find('input[type=\"range\"]').val()).to.equal('50');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct min value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with min value"
            ],
            "updatePoint": {
                "line": 1035,
                "column": 40
            },
            "line": 1035,
            "code": "        return it('has correct min value', function () {\n          return expect(this.find('input[type=\"range\"]').attr('min')).to.equal('0');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct max value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with max value"
            ],
            "updatePoint": {
                "line": 1044,
                "column": 40
            },
            "line": 1044,
            "code": "        return it('has correct max value', function () {\n          return expect(this.find('input[type=\"range\"]').attr('max')).to.equal('100');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct step value",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with step value"
            ],
            "updatePoint": {
                "line": 1053,
                "column": 41
            },
            "line": 1053,
            "code": "        return it('has correct step value', function () {\n          return expect(this.find('input[type=\"range\"]').attr('step')).to.equal('10');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with an invalid min value"
            ],
            "updatePoint": {
                "line": 1062,
                "column": 34
            },
            "line": 1062,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"min\" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-min for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with an invalid max value"
            ],
            "updatePoint": {
                "line": 1071,
                "column": 34
            },
            "line": 1071,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" must be a valid number. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with min value greater than max value"
            ],
            "updatePoint": {
                "line": 1080,
                "column": 34
            },
            "line": 1080,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"max\" must be greater than \"min\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-max for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "throws an error",
            "suites": [
                "bootbox.prompt",
                "configuration options tests",
                "setting inputType range",
                "with an invalid step value"
            ],
            "updatePoint": {
                "line": 1088,
                "column": 34
            },
            "line": 1088,
            "code": "        return it('throws an error', function () {\n          return expect(this.create).to.throw('\"step\" must be a valid positive number or the value \"any\". See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step for more information.');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1111,
                "column": 40
            },
            "line": 1111,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1114,
                "column": 46
            },
            "line": 1114,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1117,
                "column": 36
            },
            "line": 1117,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1120,
                "column": 42
            },
            "line": 1120,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1128,
                "column": 57
            },
            "line": 1128,
            "code": "          it('invokes the callback with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1131,
                "column": 46
            },
            "line": 1131,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering no value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1134,
                "column": 42
            },
            "line": 1134,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1147,
                "column": 40
            },
            "line": 1147,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1150,
                "column": 46
            },
            "line": 1150,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1153,
                "column": 36
            },
            "line": 1153,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('Test input');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1156,
                "column": 42
            },
            "line": 1156,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1164,
                "column": 57
            },
            "line": 1164,
            "code": "          it('invokes the callback with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('Test input');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1167,
                "column": 46
            },
            "line": 1167,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when entering a value in the text input",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1170,
                "column": 42
            },
            "line": 1170,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1179,
                "column": 38
            },
            "line": 1179,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1182,
                "column": 44
            },
            "line": 1182,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1185,
                "column": 34
            },
            "line": 1185,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1188,
                "column": 40
            },
            "line": 1188,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1196,
                "column": 38
            },
            "line": 1196,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1199,
                "column": 44
            },
            "line": 1199,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1202,
                "column": 34
            },
            "line": 1202,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1205,
                "column": 40
            },
            "line": 1205,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1213,
                "column": 38
            },
            "line": 1213,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1216,
                "column": 44
            },
            "line": 1216,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1219,
                "column": 34
            },
            "line": 1219,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a simple callback",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1222,
                "column": 40
            },
            "line": 1222,
            "code": "        return it('should hide the modal', function () {\n          return expect(this.hidden).to.have.been.calledWithExactly('hide');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1243,
                "column": 40
            },
            "line": 1243,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1246,
                "column": 46
            },
            "line": 1246,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1249,
                "column": 36
            },
            "line": 1249,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1252,
                "column": 46
            },
            "line": 1252,
            "code": "          return it('should not hide the modal', function () {\n            return expect(this.hidden).not.to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1265,
                "column": 40
            },
            "line": 1265,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1268,
                "column": 46
            },
            "line": 1268,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1271,
                "column": 36
            },
            "line": 1271,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('Test input');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1274,
                "column": 46
            },
            "line": 1274,
            "code": "          return it('should not hide the modal', function () {\n            return expect(this.hidden).not.to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1283,
                "column": 38
            },
            "line": 1283,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1286,
                "column": 44
            },
            "line": 1286,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1289,
                "column": 34
            },
            "line": 1289,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1292,
                "column": 44
            },
            "line": 1292,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1300,
                "column": 38
            },
            "line": 1300,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1303,
                "column": 44
            },
            "line": 1303,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1306,
                "column": 34
            },
            "line": 1306,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when triggering the escape event"
            ],
            "updatePoint": {
                "line": 1309,
                "column": 44
            },
            "line": 1309,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1317,
                "column": 38
            },
            "line": 1317,
            "code": "        it('should invoke the callback', function () {\n          return expect(this.callback).to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1320,
                "column": 44
            },
            "line": 1320,
            "code": "        it('should pass the dialog as \"this\"', function () {\n          return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1323,
                "column": 34
            },
            "line": 1323,
            "code": "        it('with the correct value', function () {\n          return expect(this.callback).to.have.been.calledWithExactly(null);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should not hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a callback which returns false",
                "when dismissing the dialog by clicking the close button"
            ],
            "updatePoint": {
                "line": 1326,
                "column": 44
            },
            "line": 1326,
            "code": "        return it('should not hide the modal', function () {\n          return expect(this.hidden).not.to.have.been.called;\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "populates the input with the default value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value"
            ],
            "updatePoint": {
                "line": 1342,
                "column": 52
            },
            "line": 1342,
            "code": "      it('populates the input with the default value', function () {\n        return expect(this.dialog.find('.bootbox-input').val()).to.equal('Bob');\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1350,
                "column": 40
            },
            "line": 1350,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1353,
                "column": 46
            },
            "line": 1353,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1356,
                "column": 43
            },
            "line": 1356,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('Bob');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1364,
                "column": 40
            },
            "line": 1364,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1367,
                "column": 46
            },
            "line": 1367,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering no value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1370,
                "column": 43
            },
            "line": 1370,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1383,
                "column": 40
            },
            "line": 1383,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1386,
                "column": 46
            },
            "line": 1386,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1389,
                "column": 43
            },
            "line": 1389,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('Alice');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1397,
                "column": 40
            },
            "line": 1397,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1400,
                "column": 46
            },
            "line": 1400,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a default value",
                "when entering a value in the text input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1403,
                "column": 43
            },
            "line": 1403,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "populates the input with the placeholder attribute",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with a placeholder"
            ],
            "updatePoint": {
                "line": 1421,
                "column": 67
            },
            "line": 1421,
            "code": "      return it('populates the input with the placeholder attribute', function () {\n        return expect(this.dialog.find('.bootbox-input').attr('placeholder')).to.equal('e.g. Bob Smith');\n      });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "has correct number values in list",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value"
            ],
            "updatePoint": {
                "line": 1453,
                "column": 45
            },
            "line": 1453,
            "code": "        it('has correct number values in list', function () {\n          return expect(this.find('.bootbox-input-select option').length).to.equal(5);\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1460,
                "column": 40
            },
            "line": 1460,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1463,
                "column": 46
            },
            "line": 1463,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1466,
                "column": 43
            },
            "line": 1466,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('#');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1474,
                "column": 40
            },
            "line": 1474,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1477,
                "column": 46
            },
            "line": 1477,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1480,
                "column": 43
            },
            "line": 1480,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "specified option is selected",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value"
            ],
            "updatePoint": {
                "line": 1512,
                "column": 40
            },
            "line": 1512,
            "code": "        it('specified option is selected', function () {\n          return expect(this.dialog.find('.bootbox-input-select').val()).to.equal('1');\n        });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1519,
                "column": 40
            },
            "line": 1519,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1522,
                "column": 46
            },
            "line": 1522,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1525,
                "column": 43
            },
            "line": 1525,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('1');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1533,
                "column": 40
            },
            "line": 1533,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1536,
                "column": 46
            },
            "line": 1536,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1539,
                "column": 43
            },
            "line": 1539,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1548,
                "column": 40
            },
            "line": 1548,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType select",
                "with a default value",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1551,
                "column": 43
            },
            "line": 1551,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('3');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1573,
                "column": 40
            },
            "line": 1573,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1576,
                "column": 46
            },
            "line": 1576,
            "code": "          it('should pass the dialog as \"this\"', function () {\n            return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1579,
                "column": 36
            },
            "line": 1579,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1582,
                "column": 42
            },
            "line": 1582,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1590,
                "column": 57
            },
            "line": 1590,
            "code": "          it('invokes the callback with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1593,
                "column": 42
            },
            "line": 1593,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when entering a value in the email input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1605,
                "column": 42
            },
            "line": 1605,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should pass the dialog as \"this\"",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when entering a value in the email input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1608,
                "column": 48
            },
            "line": 1608,
            "code": "            it('should pass the dialog as \"this\"', function () {\n              return expect(this.callback.thisValues[0]).to.equal(this.dialog);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when entering a value in the email input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1611,
                "column": 45
            },
            "line": 1611,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly('john@smith.com');\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when entering a value in the email input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1619,
                "column": 42
            },
            "line": 1619,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "without a default value",
                "when entering a value in the email input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1622,
                "column": 45
            },
            "line": 1622,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1643,
                "column": 40
            },
            "line": 1643,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1646,
                "column": 36
            },
            "line": 1646,
            "code": "          it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('john@smith.com');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1649,
                "column": 42
            },
            "line": 1649,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "invokes the callback with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1657,
                "column": 57
            },
            "line": 1657,
            "code": "          it('invokes the callback with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('john@smith.com');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when submitting the form"
            ],
            "updatePoint": {
                "line": 1660,
                "column": 42
            },
            "line": 1660,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when changing a value in the email input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1672,
                "column": 42
            },
            "line": 1672,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when changing a value in the email input",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1675,
                "column": 45
            },
            "line": 1675,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly('smith@john.com');\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when changing a value in the email input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1683,
                "column": 42
            },
            "line": 1683,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with inputType email",
                "with a default value",
                "when changing a value in the email input",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1686,
                "column": 45
            },
            "line": 1686,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1722,
                "column": 40
            },
            "line": 1722,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with an undefined value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1725,
                "column": 37
            },
            "line": 1725,
            "code": "          it('with an undefined value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly([]);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1728,
                "column": 42
            },
            "line": 1728,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1736,
                "column": 40
            },
            "line": 1736,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1739,
                "column": 43
            },
            "line": 1739,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "specified checkbox is checked",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked"
            ],
            "updatePoint": {
                "line": 1769,
                "column": 43
            },
            "line": 1769,
            "code": "          it('specified checkbox is checked', function () {\n            return expect(this.dialog.find('input:checkbox:checked').val()).to.equal('2');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1776,
                "column": 42
            },
            "line": 1776,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1779,
                "column": 45
            },
            "line": 1779,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(['2']);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1787,
                "column": 42
            },
            "line": 1787,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1790,
                "column": 45
            },
            "line": 1790,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when changing the checked option and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1800,
                "column": 42
            },
            "line": 1800,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when changing the checked option and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1803,
                "column": 45
            },
            "line": 1803,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1813,
                "column": 42
            },
            "line": 1813,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "one value checked",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1816,
                "column": 45
            },
            "line": 1816,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(['3']);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "specified checkboxes are checked",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked"
            ],
            "updatePoint": {
                "line": 1845,
                "column": 46
            },
            "line": 1845,
            "code": "          it('specified checkboxes are checked', function () {\n            var checked;\n            checked = [];\n            this.dialog.find('input:checkbox:checked').each(function () {\n              return function (foo, bar) {\n                return checked.push($(bar).val());\n              };\n            }(this));\n            return expect(checked).to.deep.equal(['2', '3']);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1859,
                "column": 42
            },
            "line": 1859,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1862,
                "column": 45
            },
            "line": 1862,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(['2', '3']);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1870,
                "column": 42
            },
            "line": 1870,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1873,
                "column": 45
            },
            "line": 1873,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when changing the checked options and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1884,
                "column": 42
            },
            "line": 1884,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when changing the checked options and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1887,
                "column": 45
            },
            "line": 1887,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when changing the checked options and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1898,
                "column": 42
            },
            "line": 1898,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type checkbox",
                "with default value",
                "multiple value checked",
                "when changing the checked options and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1901,
                "column": 45
            },
            "line": 1901,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(['1', '4']);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1937,
                "column": 40
            },
            "line": 1937,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the first option value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1940,
                "column": 41
            },
            "line": 1940,
            "code": "          it('with the first option value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly('1');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should hide the modal",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "without a default value",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1943,
                "column": 42
            },
            "line": 1943,
            "code": "          return it('should hide the modal', function () {\n            return expect(this.hidden).to.have.been.calledWithExactly('hide');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1951,
                "column": 40
            },
            "line": 1951,
            "code": "          it('should invoke the callback', function () {\n            return expect(this.callback).to.have.been.called;\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "without a default value",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 1954,
                "column": 43
            },
            "line": 1954,
            "code": "          return it('with the correct value', function () {\n            return expect(this.callback).to.have.been.calledWithExactly(null);\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "specified radio is checked",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked"
            ],
            "updatePoint": {
                "line": 1984,
                "column": 40
            },
            "line": 1984,
            "code": "          it('specified radio is checked', function () {\n            return expect(this.dialog.find('input:checked').val()).to.equal('2');\n          });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1991,
                "column": 42
            },
            "line": 1991,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 1994,
                "column": 45
            },
            "line": 1994,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly('2');\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 2002,
                "column": 42
            },
            "line": 2002,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 2005,
                "column": 45
            },
            "line": 2005,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when changing the checked option and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 2014,
                "column": 42
            },
            "line": 2014,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when changing the checked option and dismissing the dialog by clicking Cancel"
            ],
            "updatePoint": {
                "line": 2017,
                "column": 45
            },
            "line": 2017,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly(null);\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "should invoke the callback",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 2026,
                "column": 42
            },
            "line": 2026,
            "code": "            it('should invoke the callback', function () {\n              return expect(this.callback).to.have.been.called;\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "with the correct value",
            "suites": [
                "bootbox.prompt",
                "callback tests",
                "with input type radio",
                "with default value",
                "one value checked",
                "when changing the selected option and dismissing the dialog by clicking OK"
            ],
            "updatePoint": {
                "line": 2029,
                "column": 45
            },
            "line": 2029,
            "code": "            return it('with the correct value', function () {\n              return expect(this.callback).to.have.been.calledWithExactly('3');\n            });",
            "file": "prompt.test.js",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "makeusabrew__bootbox.svg"
}