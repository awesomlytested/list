{"repo":"oldj/SwitchHosts","url":"https://github.com/oldj/SwitchHosts","branch":"master","configs":[{"lang":"ts","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"updateOneItem top level test","suites":["hostsFn test"],"updatePoint":{"line":58,"column":34},"line":58,"code":"  it('updateOneItem top level test', () => {\n    let list: IHostsListObject[] = [\n      { id: '1' },\n    ]\n    list = setOnStateOfItem(list, '1', true, 0)\n    assert(list[0].on)\n\n    list = [\n      { id: '1' },\n      { id: '2' },\n    ]\n    list = setOnStateOfItem(list, '1', true, 0)\n    assert(list[0].on)\n    assert(!list[1].on)\n\n    list = setOnStateOfItem(list, '2', true, 0)\n    assert(list[0].on)\n    assert(list[1].on)\n\n    // 单选\n    list = [\n      { id: '1' },\n      { id: '2', on: true },\n      { id: '3', on: true },\n    ]\n    list = setOnStateOfItem(list, '1', true, 1)\n    assert(list[0].on)\n    assert(!list[1].on)\n    assert(!list[2].on)\n\n    // 多选\n    list = [\n      { id: '1' },\n      { id: '2', on: true },\n      { id: '3', on: true },\n    ]\n    list = setOnStateOfItem(list, '1', true, 2)\n    assert(list[0].on)\n    assert(list[1].on)\n    assert(list[2].on)\n  })","file":"common/hostsFn.test.ts","skipped":false,"dir":"test"},{"name":"updateOneItem folder test","suites":["hostsFn test"],"updatePoint":{"line":100,"column":31},"line":100,"code":"  it('updateOneItem folder test', () => {\n    // default\n    let list = makeAList()\n    list = setOnStateOfItem(list, '1', true, 1)\n    assert(list[0].on)\n    assert(!list[1].on)\n    assert(!list[2].on)\n    assert(!list[3].on)\n\n    list = setOnStateOfItem(list, '2', true, 1)\n    assert(!list[0].on)\n    assert(list[1].on)\n    assert(!list[2].on)\n    assert(!list[3].on)\n\n    list = setOnStateOfItem(list, '2.1', true, 0)\n    assert(getItem(list, '2.1').on)\n    assert(!getItem(list, '2.2').on)\n    assert(!getItem(list, '2.3').on)\n\n    list = setOnStateOfItem(list, '2.2', true, 0)\n    assert(getItem(list, '2.1').on)\n    assert(getItem(list, '2.2').on)\n    assert(!getItem(list, '2.3').on)\n\n    list = setOnStateOfItem(list, '2.3', true, 1)\n    assert(!getItem(list, '2.1').on)\n    assert(!getItem(list, '2.2').on)\n    assert(getItem(list, '2.3').on)\n\n    list = setOnStateOfItem(list, '2.1', true, 1)\n    assert(getItem(list, '2.1').on)\n    assert(!getItem(list, '2.2').on)\n    assert(!getItem(list, '2.3').on)\n\n    list = setOnStateOfItem(list, '2.2', true, 2)\n    assert(getItem(list, '2.1').on)\n    assert(getItem(list, '2.2').on)\n    assert(!getItem(list, '2.3').on)\n\n    list = setOnStateOfItem(list, '3.1', true, 0)\n    assert(getItem(list, '3.1').on)\n    assert(!getItem(list, '3.2').on)\n    assert(!getItem(list, '3.3').on)\n\n    list = setOnStateOfItem(list, '3.2', true, 0)\n    assert(!getItem(list, '3.1').on)\n    assert(getItem(list, '3.2').on)\n    assert(!getItem(list, '3.3').on)\n\n    list = setOnStateOfItem(list, '3.3', true, 1)\n    assert(!getItem(list, '3.1').on)\n    assert(!getItem(list, '3.2').on)\n    assert(getItem(list, '3.3').on)\n\n    list = setOnStateOfItem(list, '3.1', true, 2)\n    assert(getItem(list, '3.1').on)\n    assert(!getItem(list, '3.2').on)\n    assert(!getItem(list, '3.3').on)\n    assert(!getItem(list, '3.4').on)\n\n    list = setOnStateOfItem(list, '3.4.1', true, 0)\n    assert(getItem(list, '3.4.1').on)\n    assert(!getItem(list, '3.4.2').on)\n    assert(!getItem(list, '3.4.3').on)\n\n    list = setOnStateOfItem(list, '3.4.2', true, 0)\n    assert(getItem(list, '3.4.1').on)\n    assert(getItem(list, '3.4.2').on)\n    assert(!getItem(list, '3.4.3').on)\n\n    list = setOnStateOfItem(list, '3.4.3', true, 1)\n    assert(getItem(list, '3.4.1').on)\n    assert(getItem(list, '3.4.2').on)\n    assert(getItem(list, '3.4.3').on)\n\n    list = setOnStateOfItem(list, '3.4.3', false, 2)\n    assert(getItem(list, '3.4.1').on)\n    assert(getItem(list, '3.4.2').on)\n    assert(!getItem(list, '3.4.3').on)\n\n    list = setOnStateOfItem(list, '4.1', true, 0)\n    assert(getItem(list, '4.1').on)\n    assert(!getItem(list, '4.2').on)\n    assert(!getItem(list, '4.3').on)\n\n    list = setOnStateOfItem(list, '4.2', true, 1)\n    assert(getItem(list, '4.1').on)\n    assert(getItem(list, '4.2').on)\n    assert(!getItem(list, '4.3').on)\n\n    list = setOnStateOfItem(list, '4.3', true, 2)\n    assert(getItem(list, '4.1').on)\n    assert(getItem(list, '4.2').on)\n    assert(getItem(list, '4.3').on)\n\n    list = setOnStateOfItem(list, '4.4.1', true, 0)\n    assert(getItem(list, '4.4.1').on)\n    assert(!getItem(list, '4.4.2').on)\n    assert(!getItem(list, '4.4.3').on)\n\n    list = setOnStateOfItem(list, '4.4.2', true, 1)\n    assert(!getItem(list, '4.4.1').on)\n    assert(getItem(list, '4.4.2').on)\n    assert(!getItem(list, '4.4.3').on)\n\n    list = setOnStateOfItem(list, '4.4.3', true, 2)\n    assert(!getItem(list, '4.4.1').on)\n    assert(!getItem(list, '4.4.2').on)\n    assert(getItem(list, '4.4.3').on)\n\n    list = setOnStateOfItem(list, '4.4.3', false, 2)\n    assert(!getItem(list, '4.4.1').on)\n    assert(!getItem(list, '4.4.2').on)\n    assert(!getItem(list, '4.4.3').on)\n  })","file":"common/hostsFn.test.ts","skipped":false,"dir":"test"},{"name":"basic test","suites":["normalize test"],"updatePoint":{"line":19,"column":16},"line":19,"code":"  it('basic test', () => {\n    assert(normalize('aaa') === 'aaa')\n  })","file":"common/normalize.test.ts","skipped":false,"dir":"test"},{"name":"paresLine test","suites":["normalize test"],"updatePoint":{"line":23,"column":20},"line":23,"code":"  it('paresLine test', () => {\n    let d = parseLine('1.2.3.4 abc.com')\n    assert(d.ip === '1.2.3.4')\n    assert(d.domains.length === 1 && d.domains[0] === 'abc.com')\n    assert(d.comment === '')\n\n    d = parseLine('1.2.3.4  \\t abc.com abc2.com  abc3.com\\ttest.com  ')\n    assert(d.ip === '1.2.3.4')\n    assert(d.domains.length === 4)\n    assert(d.domains.join(',') === 'abc.com,abc2.com,abc3.com,test.com')\n    assert(d.comment === '')\n\n    d = parseLine('1.2.3.4  \\t abc.com abc2.com  abc3.com\\ttest.com  # this is comment ')\n    assert(d.ip === '1.2.3.4')\n    assert(d.domains.length === 4)\n    assert(d.domains.join(',') === 'abc.com,abc2.com,abc3.com,test.com')\n    assert(d.comment === 'this is comment')\n\n    d = parseLine('1.2.3.4  \\t  # this is comment ')\n    assert(d.ip === '1.2.3.4')\n    assert(d.domains.length === 0)\n    assert(d.comment === 'this is comment')\n\n    d = parseLine('  \\t  # this is comment ')\n    assert(d.ip === '')\n    assert(d.domains.length === 0)\n    assert(d.comment === 'this is comment')\n\n    d = parseLine('# this is comment ')\n    assert(d.ip === '')\n    assert(d.domains.length === 0)\n    assert(d.comment === 'this is comment')\n  })","file":"common/normalize.test.ts","skipped":false,"dir":"test"},{"name":"duplicate test","suites":["normalize test"],"updatePoint":{"line":57,"column":20},"line":57,"code":"  it('duplicate test', async () => {\n    const eq = async (number: string) => {\n      let input = await loadData(`normalize.${number}.input.hosts`)\n      let output = await loadData(`normalize.${number}.output.hosts`)\n\n      // console.log(normalize(input, { remove_duplicate_records: true }))\n      assert(normalize(input, { remove_duplicate_records: true }) === output)\n    }\n\n    await eq('001')\n  })","file":"common/normalize.test.ts","skipped":false,"dir":"test"},{"name":"add hosts","suites":["basic test"],"updatePoint":{"line":23,"column":15},"line":23,"code":"  it('add hosts', async () => {\n    let basic_data = await getBasicData()\n    assert(basic_data.list.length === 0)\n    assert(basic_data.trashcan.length === 0)\n    assert(basic_data.version.length === 4)\n\n    await swhdb.collection.hosts.insert({ id: '1' })\n    let items = await swhdb.collection.hosts.all()\n    assert(items.length === 1)\n\n    await setHostsContent('1', '# 111')\n    assert(await getHostsContent('1') === '# 111')\n\n    let list = await getList()\n    assert(list.length === 0)\n    await setList([ { id: '1' } ])\n    list = await getList()\n    assert(list.length === 1)\n    assert(list[0].id === '1')\n  })","file":"main/basic.test.ts","skipped":false,"dir":"test"},{"name":"group hosts","suites":["basic test"],"updatePoint":{"line":44,"column":17},"line":44,"code":"  it('group hosts', async () => {\n    await setList([\n      { id: '1' },\n      { id: '2' },\n      { id: '3', type: 'group', include: [ '1', '2' ] },\n    ])\n    let c1 = '# 425748244153'\n    let c2 = '# 642156457548'\n    await setHostsContent('1', c1)\n    await setHostsContent('2', c2)\n\n    assert(await getHostsContent('1') === c1)\n    assert(await getHostsContent('2') === c2)\n\n    let c3 = await getHostsContent('3')\n    assert(c3.indexOf(c1) > -1)\n    assert(c3.indexOf(c2) > c3.indexOf(c1))\n\n    await setList([\n      { id: '1' },\n      { id: '2' },\n      {\n        id: '4', type: 'folder', children: [\n          { id: '5', type: 'group', include: [ '1', '2' ] },\n        ],\n      },\n    ])\n\n    let c5 = await getHostsContent('5')\n    assert(c3 === c5)\n  })","file":"main/basic.test.ts","skipped":false,"dir":"test"},{"name":"basic test 1","suites":["find in content test"],"updatePoint":{"line":10,"column":18},"line":10,"code":"  it('basic test 1', () => {\n    let content = `abc12 abc123 abc`\n    let m = findInContent(content, /bc/ig)\n    assert(m.length === 3)\n    assert(m[0].line === 1)\n    assert(m[0].start === 1)\n    assert(m[0].end === 3)\n    assert(m[0].before === 'a')\n    assert(m[0].match === 'bc')\n    assert(typeof m[0].after === 'string')\n\n    assert(m[1].line === 1)\n    assert(m[1].start === 7)\n    assert(m[1].end === 9)\n    assert(m[1].before === 'abc12 a')\n    assert(m[1].match === 'bc')\n    assert(m[1].after === '123 abc')\n\n    assert(m[2].line === 1)\n    assert(m[2].start === 14)\n    assert(m[2].end === 16)\n    assert(m[2].before === 'abc12 abc123 a')\n    assert(m[2].match === 'bc')\n    assert(m[2].after === '')\n  })","file":"main/findInContent.test.ts","skipped":false,"dir":"test"},{"name":"basic test 2","suites":["find in content test"],"updatePoint":{"line":36,"column":18},"line":36,"code":"  it('basic test 2', () => {\n    let content = `abc12 abc123 abc\\nxyza3b`\n    let m = findInContent(content, /a\\w*3/ig)\n    // console.log(m)\n    assert(m.length === 2)\n    assert(m[0].line === 1)\n    assert(m[0].start === 6)\n    assert(m[0].end === 12)\n    assert(m[0].before === 'abc12 ')\n    assert(m[0].match === 'abc123')\n    assert(m[0].after === ' abc')\n\n    assert(m[1].line === 2)\n    assert(m[1].start === 20)\n    assert(m[1].end === 22)\n    assert(m[1].before === 'xyz')\n    assert(m[1].match === 'a3')\n    assert(m[1].after === 'b')\n  })","file":"main/findInContent.test.ts","skipped":false,"dir":"test"},{"name":"basic test 1","suites":["split content test"],"updatePoint":{"line":11,"column":18},"line":11,"code":"  it('basic test 1', () => {\n    let content = `abc12 abc123 abc44`\n    let m = findInContent(content, /bc/ig)\n    let sp = splitContent(content, m)\n    assert(sp[0].before === 'a')\n    assert(sp[0].after === '')\n    assert(sp[1].before === '12 a')\n    assert(sp[1].after === '')\n    assert(sp[2].before === '123 a')\n    assert(sp[2].after === '44')\n\n    let r = sp.map(i => `${i.before}${i.match}${i.after}`).join('')\n    assert(r === content)\n  })","file":"main/splitContent.test.ts","skipped":false,"dir":"test"},{"name":"basic add and delete hosts","suites":["trashcan test"],"updatePoint":{"line":29,"column":32},"line":29,"code":"  it('basic add and delete hosts', async () => {\n    let { list, trashcan } = await getBasicData()\n    assert(list.length === 0)\n    assert(trashcan.length === 0)\n\n    await setList([ { id: '111' } ])\n    list = await getList()\n    assert(list.length === 1)\n    assert((await getBasicData()).list.length === 1)\n    assert((await getTrashcanList()).length === 0)\n\n    await moveToTrashcan('111')\n    assert((await getList()).length === 0)\n\n    let tlist = await getTrashcanList()\n    assert(tlist.length === 1)\n    assert(tlist[0].data.id === '111')\n    let ts = (new Date()).getTime()\n    assert(tlist[0].add_time_ms > ts - 1000 && tlist[0].add_time_ms <= ts)\n\n    await restoreItemFromTrashcan(tlist[0].data.id)\n    list = await getList()\n    assert(list.length === 1)\n    assert(list[0].id === '111')\n    assert((await getTrashcanList()).length === 0)\n\n    await setHostsContent('111', 'hosts_111')\n    assert((await getHostsContent('111')) === 'hosts_111')\n\n    await moveToTrashcan('111')\n    assert((await getList()).length === 0)\n    assert((await getTrashcanList()).length === 1)\n    assert((await getHostsContent('111')) === 'hosts_111')\n\n    await deleteItemFromTrashcan('111')\n    assert((await getList()).length === 0)\n    assert((await getTrashcanList()).length === 0)\n    assert((await getHostsContent('111')) === '')\n  })","file":"main/trashcan.test.ts","skipped":false,"dir":"test"},{"name":"folder test","suites":["trashcan test"],"updatePoint":{"line":69,"column":17},"line":69,"code":"  it('folder test', async () => {\n    await setList([\n      { id: '1' },\n      { id: '2' },\n      {\n        id: '3', type: 'folder', children: [\n          { id: '3.1' },\n          { id: '3.2' },\n          {\n            id: '3.3', type: 'folder', children: [\n              { id: '3.3.1' },\n              { id: '3.3.2' },\n              { id: '3.3.3' },\n            ],\n          },\n          { id: '3.4' },\n        ],\n      },\n      { id: '4' },\n    ])\n\n    let list = await getList()\n    assert(list.length === 4)\n    let tlist = await getTrashcanList()\n    assert(tlist.length === 0)\n\n    await moveToTrashcan('2')\n    list = await getList()\n    assert(list.length === 3)\n    tlist = await getTrashcanList()\n    assert(tlist.length === 1)\n    assert(tlist[0].data.id === '2')\n    assert(tlist[0].parent_id === null)\n\n    await restoreItemFromTrashcan('2')\n    list = await getList()\n    assert(list.length === 4)\n    assert(list[3].id === '2')\n\n    await moveToTrashcan('3.3.1')\n    list = await getList()\n    assert(list.length === 4)\n    assert(list[1].id === '3')\n    assert(list[1].children && list[1].children[2].id === '3.3')\n    assert(list[1].children[2].children && list[1].children[2].children.length === 2)\n    assert(list[1].children[2].children[0].id === '3.3.2')\n    tlist = await getTrashcanList()\n    assert(tlist.length === 1)\n    assert(tlist[0].data.id === '3.3.1')\n    assert(tlist[0].parent_id === '3.3')\n\n    await restoreItemFromTrashcan('3.3.1')\n    list = await getList()\n    // assert(list.length === 4)\n    // assert(list[4].id === '3.3.1')\n    assert(list[1].children && list[1].children[2].id === '3.3')\n    assert(list[1].children[2].children && list[1].children[2].children.length === 3)\n    assert(list[1].children[2].children[0].id === '3.3.2')\n    assert(list[1].children[2].children[1].id === '3.3.3')\n    assert(list[1].children[2].children[2].id === '3.3.1')\n  })","file":"main/trashcan.test.ts","skipped":false,"dir":"test"},{"name":"folder delete test","suites":["trashcan test"],"updatePoint":{"line":131,"column":24},"line":131,"code":"  it('folder delete test', async () => {\n    await setList([\n      { id: '1' },\n      { id: '2' },\n      {\n        id: '3', type: 'folder', children: [\n          { id: '3.1' },\n          { id: '3.2' },\n          {\n            id: '3.3', type: 'folder', children: [\n              { id: '3.3.1' },\n              { id: '3.3.2' },\n              { id: '3.3.3' },\n            ],\n          },\n          { id: '3.4' },\n        ],\n      },\n      { id: '4' },\n    ])\n\n    let hs: IHostsContentObject[] = await swhdb.collection.hosts.all()\n    assert(hs.length === 0)\n\n    await setHostsContent('1', '# 1')\n    await setHostsContent('2', '# 2')\n    await setHostsContent('3', '# 3')\n    await setHostsContent('3.1', '# 3.1')\n    await setHostsContent('3.2', '# 3.2')\n    await setHostsContent('3.3', '# 3.3')\n    await setHostsContent('3.3.1', '# 3.3.1')\n    await setHostsContent('3.3.2', '# 3.3.2')\n    await setHostsContent('3.3.3', '# 3.3.3')\n    await setHostsContent('3.4', '# 3.4')\n    await setHostsContent('4', '# 4')\n\n    let list = await getList()\n    assert(list.length === 4)\n    let tlist = await getTrashcanList()\n    assert(tlist.length === 0)\n\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 11)\n    assert(hs[0].content === '# 1')\n\n    await moveToTrashcan('3.2')\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 11)\n    await deleteItemFromTrashcan('3.2')\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 10)\n\n    await moveToTrashcan('3')\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 10)\n    await deleteItemFromTrashcan('3')\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 3)\n  })","file":"main/trashcan.test.ts","skipped":false,"dir":"test"},{"name":"clear test","suites":["trashcan test"],"updatePoint":{"line":191,"column":16},"line":191,"code":"  it('clear test', async () => {\n    await setList([\n      { id: '1' },\n      { id: '2' },\n      {\n        id: '3', type: 'folder', children: [\n          { id: '3.1' },\n          { id: '3.2' },\n          {\n            id: '3.3', type: 'folder', children: [\n              { id: '3.3.1' },\n              { id: '3.3.2' },\n              { id: '3.3.3' },\n            ],\n          },\n          { id: '3.4' },\n        ],\n      },\n      { id: '4' },\n    ])\n\n    let hs: IHostsContentObject[] = await swhdb.collection.hosts.all()\n    assert(hs.length === 0)\n\n    await setHostsContent('1', '# 1')\n    await setHostsContent('2', '# 2')\n    await setHostsContent('3', '# 3')\n    await setHostsContent('3.1', '# 3.1')\n    await setHostsContent('3.2', '# 3.2')\n    await setHostsContent('3.3', '# 3.3')\n    await setHostsContent('3.3.1', '# 3.3.1')\n    await setHostsContent('3.3.2', '# 3.3.2')\n    await setHostsContent('3.3.3', '# 3.3.3')\n    await setHostsContent('3.4', '# 3.4')\n    await setHostsContent('4', '# 4')\n\n    let list = await getList()\n    assert(list.length === 4)\n    let tlist = await getTrashcanList()\n    assert(tlist.length === 0)\n\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 11)\n\n    await moveToTrashcan('1')\n    await moveToTrashcan('2')\n    await moveToTrashcan('3')\n    await moveToTrashcan('4')\n\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 11)\n\n    await clearTrashcan()\n    hs = await swhdb.collection.hosts.all()\n    assert(hs.length === 0)\n    assert((await getList()).length === 0)\n    assert((await getTrashcanList()).length === 0)\n  })","file":"main/trashcan.test.ts","skipped":false,"dir":"test"}]}