{
    "repo": "nexe/nexe",
    "url": "https://github.com/nexe/nexe",
    "branch": "master",
    "configs": [
        {
            "package": "nexe",
            "lang": "ts",
            "dir": "test",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "should use process.cwd() if nothing is provided",
            "suites": [
                "options",
                "cwd"
            ],
            "updatePoint": {
                "line": 9,
                "column": 55
            },
            "line": 9,
            "code": "    it('should use process.cwd() if nothing is provided', () => {\n      const options = normalizeOptions()\n      expect(options.cwd).to.equal(process.cwd())\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use the main module in a package directory (if not in a TTY)",
            "suites": [
                "options",
                "cwd"
            ],
            "updatePoint": {
                "line": 13,
                "column": 75
            },
            "line": 13,
            "code": "    it('should use the main module in a package directory (if not in a TTY)', () => {\n      const options = normalizeOptions()\n      if (!process.stdin.isTTY) {\n        expect(options.input).to.equal('[stdin]')\n      } else {\n        expect(options.input).to.equal(path.resolve('./index.js'))\n      }\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve relative paths for input",
            "suites": [
                "options",
                "cwd"
            ],
            "updatePoint": {
                "line": 21,
                "column": 47
            },
            "line": 21,
            "code": "    it('should resolve relative paths for input', () => {\n      const options = normalizeOptions({ input: 'test/fixture/entry.js' })\n      expect(options.input).to.equal(path.resolve('./test/fixture/entry.js'))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept a module entry as input",
            "suites": [
                "options",
                "cwd"
            ],
            "updatePoint": {
                "line": 25,
                "column": 45
            },
            "line": 25,
            "code": "    it('should accept a module entry as input', () => {\n      const options = normalizeOptions({ input: 'test/fixture' })\n      expect(options.input).to.equal(path.resolve('./test/fixture/entry.js'))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve pathed options against cwd",
            "suites": [
                "options",
                "cwd"
            ],
            "updatePoint": {
                "line": 29,
                "column": 49
            },
            "line": 29,
            "code": "    it('should resolve pathed options against cwd', () => {\n      const cwd = path.join(process.cwd(), 'test/fixture')\n      const options = normalizeOptions({\n        cwd,\n        input: 'entry',\n        output: 'abc',\n        temp: './d'\n      })\n      expect(options.temp).to.equal(path.resolve(cwd, './d'))\n      expect(options.input).to.equal(path.resolve(cwd, 'entry.js'))\n      expect(options.output).to.equal(path.resolve(cwd, `abc${ext}`))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should use default remote",
            "suites": [
                "options",
                "remote"
            ],
            "updatePoint": {
                "line": 44,
                "column": 33
            },
            "line": 44,
            "code": "    it('should use default remote', () => {\n      const options = normalizeOptions({})\n      expect(options.remote).to.equal('https://github.com/nexe/nexe/releases/download/v3.3.3/')\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should append trailing slash to third-party remote if necessary",
            "suites": [
                "options",
                "remote"
            ],
            "updatePoint": {
                "line": 48,
                "column": 71
            },
            "line": 48,
            "code": "    it('should append trailing slash to third-party remote if necessary', () => {\n      const options = normalizeOptions({\n        remote: 'https://sitejs.org/nexe'\n      })\n      expect(options.remote).to.equal('https://sitejs.org/nexe/')\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not append trailing slash to third-party remote that already has one",
            "suites": [
                "options",
                "remote"
            ],
            "updatePoint": {
                "line": 54,
                "column": 83
            },
            "line": 54,
            "code": "    it('should not append trailing slash to third-party remote that already has one', () => {\n      const options = normalizeOptions({\n        remote: 'https://sitejs.org/nexe/'\n      })\n      expect(options.remote).to.equal('https://sitejs.org/nexe/')\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should work",
            "suites": [
                "options",
                "output"
            ],
            "updatePoint": {
                "line": 63,
                "column": 19
            },
            "line": 63,
            "code": "    it('should work', () => {\n      const options = normalizeOptions({\n        output: './some-output'\n      })\n      expect(options.output).to.equal(path.resolve(`./some-output${ext}`))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should default to the input file name if not index",
            "suites": [
                "options",
                "output"
            ],
            "updatePoint": {
                "line": 69,
                "column": 58
            },
            "line": 69,
            "code": "    it('should default to the input file name if not index', () => {\n      const options = normalizeOptions({\n        input: './test/fixture'\n      })\n      expect(options.output).to.equal(path.resolve(`./entry${ext}`))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should default to the folder/project name if filename is index",
            "suites": [
                "options",
                "output"
            ],
            "updatePoint": {
                "line": 75,
                "column": 70
            },
            "line": 75,
            "code": "    it('should default to the folder/project name if filename is index', () => {\n      const options = normalizeOptions({ cwd: './test/fixture2' })\n      expect(options.output).to.equal(path.resolve(`./test/fixture2/fixture2${ext}`))\n    })",
            "file": "options.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should accept:     ",
            "suites": [
                "Targets"
            ],
            "updatePoint": {
                "line": 21,
                "column": 86
            },
            "line": 21,
            "code": "    it(`should accept: ${padRight(JSON.stringify(input), 53)} ${b('->')}   ${expected}`, () => {\n      expect(getTarget(input).toString()).to.equal(expected)\n    })",
            "file": "target.spec.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should stringify and toString",
            "suites": [
                "Targets"
            ],
            "updatePoint": {
                "line": 26,
                "column": 35
            },
            "line": 26,
            "code": "  it('should stringify and toString', () => {\n    expect(JSON.stringify(getTarget(process))).to.equal(`\"${getTarget(process)}\"`)\n  })",
            "file": "target.spec.ts",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "nexe__nexe.svg"
}