{"repo":"signalapp/Signal-Desktop","url":"https://github.com/signalapp/Signal-Desktop","branch":"development","configs":[{"package":"signal-desktop","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"handles null, still calls reject","suites":["Database","handleDOMException"],"updatePoint":{"line":9,"column":40,"index":235},"line":9,"code":"    it('handles null, still calls reject', () => {\n      let called = 0;\n\n      const reject = () => {\n        called += 1;\n      };\n\n      const error = null;\n      const prefix = 'something';\n      Whisper.Database.handleDOMException(prefix, error, reject);\n      assert.strictEqual(called, 1);\n    });","file":"database_test.js","skipped":false,"dir":"test"},{"name":"handles object code and message","suites":["Database","handleDOMException"],"updatePoint":{"line":21,"column":39,"index":539},"line":21,"code":"    it('handles object code and message', () => {\n      let called = 0;\n\n      const reject = () => {\n        called += 1;\n      };\n\n      const error = {\n        code: 4,\n        message: 'some cryptic error'\n      };\n      const prefix = 'something';\n      Whisper.Database.handleDOMException(prefix, error, reject);\n      assert.strictEqual(called, 1);\n    });","file":"database_test.js","skipped":false,"dir":"test"},{"name":"returns empty string for unknown string","suites":["i18n","i18n"],"updatePoint":{"line":7,"column":47,"index":206},"line":7,"code":"    it('returns empty string for unknown string', () => {\n      assert.strictEqual(i18n('random'), '');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message for given string","suites":["i18n","i18n"],"updatePoint":{"line":10,"column":40,"index":311},"line":10,"code":"    it('returns message for given string', () => {\n      assert.equal(i18n('reportIssue'), ['Contact Support']);\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message with single substitution","suites":["i18n","i18n"],"updatePoint":{"line":13,"column":48,"index":440},"line":13,"code":"    it('returns message with single substitution', () => {\n      const actual = i18n('migratingToSQLCipher', ['45/200']);\n      assert.equal(actual, 'Optimizing messages... 45/200 complete.');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message with multiple substitutions","suites":["i18n","i18n"],"updatePoint":{"line":17,"column":51,"index":644},"line":17,"code":"    it('returns message with multiple substitutions', () => {\n      const actual = i18n('theyChangedTheTimer', {\n        name: 'Someone',\n        time: '5 minutes'\n      });\n      assert.equal(actual, 'Someone set the disappearing message time to 5 minutes.');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns a string with length two or greater","suites":["i18n","getLocale"],"updatePoint":{"line":26,"column":51,"index":951},"line":26,"code":"    it('returns a string with length two or greater', () => {\n      const locale = i18n.getLocale();\n      assert.isAtLeast(locale.trim().length, 2);\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"numbers with + are valid without providing regionCode","suites":["libphonenumber util","parseNumber"],"updatePoint":{"line":9,"column":61,"index":267},"line":9,"code":"    it('numbers with + are valid without providing regionCode', () => {\n      const result = libphonenumber.util.parseNumber('+14155555555');\n      assert.isTrue(result.isValidNumber);\n      assert.strictEqual(result.nationalNumber, '4155555555');\n      assert.strictEqual(result.e164, '+14155555555');\n      assert.strictEqual(result.regionCode, 'US');\n      assert.strictEqual(result.countryCode, '1');\n    });","file":"libphonenumber_util_test.js","skipped":false,"dir":"test"},{"name":"variant numbers with the right regionCode are valid","suites":["libphonenumber util","parseNumber"],"updatePoint":{"line":17,"column":59,"index":678},"line":17,"code":"    it('variant numbers with the right regionCode are valid', () => {\n      ['4155555555', '14155555555', '+14155555555'].forEach(number => {\n        const result = libphonenumber.util.parseNumber(number, 'US');\n        assert.isTrue(result.isValidNumber);\n        assert.strictEqual(result.nationalNumber, '4155555555');\n        assert.strictEqual(result.e164, '+14155555555');\n        assert.strictEqual(result.regionCode, 'US');\n        assert.strictEqual(result.countryCode, '1');\n      });\n    });","file":"libphonenumber_util_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages that didn’t go through attachment migration","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":23,"column":74,"index":549},"line":23,"code":"    it('should ignore messages that didn’t go through attachment migration', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n\n      const writeExistingAttachmentData = () => {};\n\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages without attachments","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":41,"column":50,"index":1058},"line":41,"code":"    it('should ignore messages without attachments', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: []\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: []\n      };\n\n      const writeExistingAttachmentData = () => {};\n\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should write attachments to file system on original path","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":61,"column":64,"index":1631},"line":61,"code":"    it('should write attachments to file system on original path', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [{\n          path: 'ab/abcdefghi',\n          data: Bytes.fromString('It’s easy if you try')\n        }]\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [{\n          path: 'ab/abcdefghi'\n        }],\n        contact: [],\n        preview: []\n      };\n\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should process quote attachment thumbnails","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":91,"column":50,"index":2529},"line":91,"code":"    it('should process quote attachment thumbnails', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        quote: {\n          attachments: [{\n            thumbnail: {\n              path: 'ab/abcdefghi',\n              data: Bytes.fromString('It’s easy if you try')\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        quote: {\n          attachments: [{\n            thumbnail: {\n              path: 'ab/abcdefghi'\n            }\n          }]\n        },\n        contact: [],\n        preview: []\n      };\n\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should process contact avatars","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":131,"column":38,"index":3617},"line":131,"code":"    it('should process contact avatars', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        contact: [{\n          name: 'john',\n          avatar: {\n            isProfile: false,\n            avatar: {\n              path: 'ab/abcdefghi',\n              data: Bytes.fromString('It’s easy if you try')\n            }\n          }\n        }]\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        contact: [{\n          name: 'john',\n          avatar: {\n            isProfile: false,\n            avatar: {\n              path: 'ab/abcdefghi'\n            }\n          }\n        }],\n        preview: []\n      };\n\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages with previously inherited schema","suites":["Message","initializeSchemaVersion"],"updatePoint":{"line":176,"column":63,"index":4857},"line":176,"code":"    it('should ignore messages with previously inherited schema', () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const actual = Message.initializeSchemaVersion({\n        message: input,\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should initialize schema version to zero","suites":["Message","initializeSchemaVersion","for message without attachments"],"updatePoint":{"line":192,"column":50,"index":5332},"line":192,"code":"      it('should initialize schema version to zero', () => {\n        const input = {\n          body: 'Imagine there is no heaven…',\n          attachments: []\n        };\n        const expected = {\n          body: 'Imagine there is no heaven…',\n          attachments: [],\n          schemaVersion: 0\n        };\n        const actual = Message.initializeSchemaVersion({\n          message: input,\n          logger\n        });\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should inherit existing attachment schema version","suites":["Message","initializeSchemaVersion","for message with attachments"],"updatePoint":{"line":210,"column":59,"index":5875},"line":210,"code":"      it('should inherit existing attachment schema version', () => {\n        const input = {\n          body: 'Imagine there is no heaven…',\n          attachments: [{\n            contentType: 'image/jpeg',\n            fileName: 'lennon.jpg',\n            schemaVersion: 7\n          }]\n        };\n        const expected = {\n          body: 'Imagine there is no heaven…',\n          attachments: [{\n            contentType: 'image/jpeg',\n            fileName: 'lennon.jpg'\n          }],\n          schemaVersion: 7\n        };\n        const actual = Message.initializeSchemaVersion({\n          message: input,\n          logger\n        });\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should upgrade an unversioned message to the latest version","suites":["Message","upgradeSchema"],"updatePoint":{"line":236,"column":67,"index":6620},"line":236,"code":"    it('should upgrade an unversioned message to the latest version', async () => {\n      const input = {\n        attachments: [{\n          contentType: 'audio/aac',\n          flags: SignalService.AttachmentPointer.Flags.VOICE_MESSAGE,\n          data: Bytes.fromString('It’s easy if you try'),\n          fileName: 'test\\u202Dfig.exe',\n          size: 1111\n        }],\n        schemaVersion: 0\n      };\n      const expected = {\n        attachments: [{\n          contentType: 'audio/aac',\n          flags: 1,\n          path: 'abc/abcdefg',\n          fileName: 'test\\uFFFDfig.exe',\n          size: 1111\n        }],\n        hasAttachments: 1,\n        hasVisualMediaAttachments: undefined,\n        hasFileAttachments: undefined,\n        schemaVersion: Message.CURRENT_SCHEMA_VERSION,\n        contact: []\n      };\n      const expectedAttachmentData = 'It’s easy if you try';\n      const context = {\n        writeNewAttachmentData: async attachmentData => {\n          assert.strictEqual(Bytes.toString(attachmentData), expectedAttachmentData);\n          return 'abc/abcdefg';\n        },\n        getRegionCode: () => 'US',\n        getAbsoluteAttachmentPath: () => 'some/path/on/disk',\n        makeObjectUrl: () => 'blob://FAKE',\n        revokeObjectUrl: () => null,\n        getImageDimensions: () => ({\n          height: 10,\n          width: 15\n        }),\n        makeImageThumbnail: () => new Blob(),\n        makeVideoScreenshot: () => new Blob(),\n        logger: {\n          warn: () => null,\n          error: () => null\n        }\n      };\n      const actual = await Message.upgradeSchema(input, context);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return last valid message when any upgrade step fails","suites":["Message","upgradeSchema","with multiple upgrade steps"],"updatePoint":{"line":286,"column":70,"index":8325},"line":286,"code":"      it('should return last valid message when any upgrade step fails', async () => {\n        const input = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 0\n        };\n        const expected = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          hasUpgradedToVersion1: true,\n          schemaVersion: 1\n        };\n\n        const v1 = async message => ({ ...message,\n          hasUpgradedToVersion1: true\n        });\n\n        const v2 = async () => {\n          throw new Error('boom');\n        };\n\n        const v3 = async message => ({ ...message,\n          hasUpgradedToVersion3: true\n        });\n\n        const toVersion1 = Message._withSchemaVersion({\n          schemaVersion: 1,\n          upgrade: v1\n        });\n\n        const toVersion2 = Message._withSchemaVersion({\n          schemaVersion: 2,\n          upgrade: v2\n        });\n\n        const toVersion3 = Message._withSchemaVersion({\n          schemaVersion: 3,\n          upgrade: v3\n        });\n\n        const context = {\n          logger\n        };\n\n        const upgradeSchema = async message => toVersion3(await toVersion2(await toVersion1(message, context), context), context);\n\n        const actual = await upgradeSchema(input);\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should skip out-of-order upgrade steps","suites":["Message","upgradeSchema","with multiple upgrade steps"],"updatePoint":{"line":343,"column":48,"index":9840},"line":343,"code":"      it('should skip out-of-order upgrade steps', async () => {\n        const input = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 0\n        };\n        const expected = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 2,\n          hasUpgradedToVersion1: true,\n          hasUpgradedToVersion2: true\n        };\n\n        const v1 = async attachment => ({ ...attachment,\n          hasUpgradedToVersion1: true\n        });\n\n        const v2 = async attachment => ({ ...attachment,\n          hasUpgradedToVersion2: true\n        });\n\n        const v3 = async attachment => ({ ...attachment,\n          hasUpgradedToVersion3: true\n        });\n\n        const toVersion1 = Message._withSchemaVersion({\n          schemaVersion: 1,\n          upgrade: v1\n        });\n\n        const toVersion2 = Message._withSchemaVersion({\n          schemaVersion: 2,\n          upgrade: v2\n        });\n\n        const toVersion3 = Message._withSchemaVersion({\n          schemaVersion: 3,\n          upgrade: v3\n        });\n\n        const context = {\n          logger\n        }; // NOTE: We upgrade to 3 before 2, i.e. the pipeline should abort:\n\n        const upgradeSchema = async attachment => toVersion2(await toVersion3(await toVersion1(attachment, context), context), context);\n\n        const actual = await upgradeSchema(input);\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should require a version number","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":404,"column":39,"index":11553},"line":404,"code":"    it('should require a version number', () => {\n      const toVersionX = () => {};\n\n      assert.throws(() => Message._withSchemaVersion({\n        schemaVersion: toVersionX,\n        upgrade: 2\n      }), '_withSchemaVersion: schemaVersion is invalid');\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should require an upgrade function","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":412,"column":42,"index":11818},"line":412,"code":"    it('should require an upgrade function', () => {\n      assert.throws(() => Message._withSchemaVersion({\n        schemaVersion: 2,\n        upgrade: 3\n      }), '_withSchemaVersion: upgrade must be a function');\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should skip upgrading if message has already been upgraded","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":418,"column":66,"index":12064},"line":418,"code":"    it('should skip upgrading if message has already been upgraded', async () => {\n      const upgrade = async message => ({ ...message,\n        foo: true\n      });\n\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 4\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 4\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return original message if upgrade function throws","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":441,"column":65,"index":12659},"line":441,"code":"    it('should return original message if upgrade function throws', async () => {\n      const upgrade = async () => {\n        throw new Error('boom!');\n      };\n\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return original message if upgrade function returns null","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":464,"column":71,"index":13257},"line":464,"code":"    it('should return original message if upgrade function returns null', async () => {\n      const upgrade = async () => null;\n\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles message with no quote","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":487,"column":37,"index":13832},"line":487,"code":"    it('handles message with no quote', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!'\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles quote with no attachments","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":498,"column":41,"index":14219},"line":498,"code":"    it('handles quote with no attachments', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!'\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: []\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles zero attachments","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":521,"column":32,"index":14814},"line":521,"code":"    it('handles zero attachments', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: []\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles attachments with no thumbnail","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":538,"column":45,"index":15309},"line":538,"code":"    it('handles attachments with no thumbnail', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            fileName: 'manifesto.txt',\n            contentType: 'text/plain'\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"does not eliminate thumbnails with missing data field","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":558,"column":61,"index":15910},"line":558,"code":"    it('does not eliminate thumbnails with missing data field', async () => {\n      const upgradeAttachment = sinon.stub().returns({\n        fileName: 'processed!'\n      });\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            fileName: 'cat.gif',\n            contentType: 'image/gif',\n            thumbnail: {\n              fileName: 'not yet downloaded!'\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            contentType: 'image/gif',\n            fileName: 'cat.gif',\n            thumbnail: {\n              fileName: 'processed!'\n            }\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"calls provided async function for each quoted attachment","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":596,"column":64,"index":16902},"line":596,"code":"    it('calls provided async function for each quoted attachment', async () => {\n      const upgradeAttachment = sinon.stub().resolves({\n        path: '/new/path/on/disk'\n      });\n\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            thumbnail: {\n              data: 'data is here'\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            thumbnail: {\n              path: '/new/path/on/disk'\n            }\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles message with no contact field","suites":["Message","_mapContact"],"updatePoint":{"line":632,"column":45,"index":17769},"line":632,"code":"    it('handles message with no contact field', async () => {\n      const upgradeContact = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n\n      const upgradeVersion = Message._mapContact(upgradeContact);\n\n      const message = {\n        body: 'hey there!'\n      };\n      const expected = {\n        body: 'hey there!',\n        contact: []\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles one contact","suites":["Message","_mapContact"],"updatePoint":{"line":647,"column":27,"index":18209},"line":647,"code":"    it('handles one contact', async () => {\n      const upgradeContact = contact => Promise.resolve(contact);\n\n      const upgradeVersion = Message._mapContact(upgradeContact);\n\n      const message = {\n        body: 'hey there!',\n        contact: [{\n          name: {\n            displayName: 'Someone somewhere'\n          }\n        }]\n      };\n      const expected = {\n        body: 'hey there!',\n        contact: [{\n          name: {\n            displayName: 'Someone somewhere'\n          }\n        }]\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"returns successfully if this._events is falsey","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":19,"column":54,"index":405},"line":19,"code":"    it('returns successfully if this._events is falsey', () => {\n      model._events = null;\n      model.trigger('click');\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"handles map of events to trigger","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":23,"column":40,"index":522},"line":23,"code":"    it('handles map of events to trigger', () => {\n      let a = 0;\n      let b = 0;\n      model.on('a', arg => {\n        a = arg;\n      });\n      model.on('b', arg => {\n        b = arg;\n      });\n      model.trigger({\n        a: 1,\n        b: 2\n      });\n      assert.strictEqual(a, 1);\n      assert.strictEqual(b, 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"handles space-separated list of events to trigger","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":39,"column":57,"index":867},"line":39,"code":"    it('handles space-separated list of events to trigger', () => {\n      let a = false;\n      let b = false;\n      model.on('a', () => {\n        a = true;\n      });\n      model.on('b', () => {\n        b = true;\n      });\n      model.trigger('a b');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls all clients registered for \"all\" event","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":52,"column":52,"index":1190},"line":52,"code":"    it('calls all clients registered for \"all\" event', () => {\n      let count = 0;\n      model.on('all', () => {\n        count += 1;\n      });\n      model.trigger('left');\n      model.trigger('right');\n      assert.strictEqual(count, 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls all clients registered for target event","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":61,"column":53,"index":1438},"line":61,"code":"    it('calls all clients registered for target event', () => {\n      let a = false;\n      let b = false;\n      model.on('event', () => {\n        a = true;\n      });\n      model.on('event', () => {\n        b = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"successfully returns and calls all clients even if first failed","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":74,"column":71,"index":1790},"line":74,"code":"    it('successfully returns and calls all clients even if first failed', () => {\n      let a = false;\n      let b = false;\n      model.on('event', () => {\n        a = true;\n        throw new Error('a is set, but exception is thrown');\n      });\n      model.on('event', () => {\n        b = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with no args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":88,"column":34,"index":2167},"line":88,"code":"    it('calls clients with no args', () => {\n      let called = false;\n      model.on('event', () => {\n        called = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(called, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 1 arg","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":96,"column":32,"index":2379},"line":96,"code":"    it('calls clients with 1 arg', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1);\n      assert.strictEqual(args[0], 1);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 2 args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":104,"column":33,"index":2598},"line":104,"code":"    it('calls clients with 2 args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 3 args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":113,"column":33,"index":2858},"line":113,"code":"    it('calls clients with 3 args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2, 3);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n      assert.strictEqual(args[2], 3);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 4+ args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":123,"column":34,"index":3160},"line":123,"code":"    it('calls clients with 4+ args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2, 3, 4);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n      assert.strictEqual(args[2], 3);\n      assert.strictEqual(args[3], 4);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"returns undefined for invalid URLs","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":10,"column":42,"index":244},"line":10,"code":"    it('returns undefined for invalid URLs', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://'));\n      assert.isUndefined(Stickers.getDataFromLink('signal.art/addstickers/'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined for URLs that don't have a hash","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":14,"column":57,"index":463},"line":14,"code":"    it(\"returns undefined for URLs that don't have a hash\", () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined when no key or pack ID is found","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":18,"column":57,"index":714},"line":18,"code":"    it('returns undefined when no key or pack ID is found', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key='));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id='));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined when the pack ID is invalid","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":24,"column":53,"index":1383},"line":24,"code":"    it('returns undefined when the pack ID is invalid', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=garbage&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined if the ID or key are passed as arrays","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":27,"column":63,"index":1642},"line":27,"code":"    it('returns undefined if the ID or key are passed as arrays', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id[]=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key[]=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"parses the ID and key from the hash","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":31,"column":43,"index":2112},"line":31,"code":"    it('parses the ID and key from the hash', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"ignores additional hash parameters","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":37,"column":42,"index":2512},"line":37,"code":"    it('ignores additional hash parameters', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_foo=bar'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"only parses the first ID and key from the hash if more than one is supplied","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":43,"column":83,"index":2966},"line":43,"code":"    it('only parses the first ID and key from the hash if more than one is supplied', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id=extra&pack_key=extra'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns false for non-strings","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":51,"column":37,"index":3432},"line":51,"code":"    it('returns false for non-strings', () => {\n      assert.isFalse(Stickers.isPackIdValid(undefined));\n      assert.isFalse(Stickers.isPackIdValid(null));\n      assert.isFalse(Stickers.isPackIdValid(123));\n      assert.isFalse(Stickers.isPackIdValid(123));\n      assert.isFalse(Stickers.isPackIdValid(['b9439fa5fdc8b9873fe64f01b88b8ccf']));\n      assert.isFalse( // eslint-disable-next-line no-new-wrappers\n      Stickers.isPackIdValid(new String('b9439fa5fdc8b9873fe64f01b88b8ccf')));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns false for invalid pack IDs","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":60,"column":42,"index":3933},"line":60,"code":"    it('returns false for invalid pack IDs', () => {\n      assert.isFalse(Stickers.isPackIdValid(''));\n      assert.isFalse(Stickers.isPackIdValid('x9439fa5fdc8b9873fe64f01b88b8ccf'));\n      assert.isFalse( // This is one character too short.\n      Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8cc'));\n      assert.isFalse( // This is one character too long.\n      Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8ccfa'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns true for valid pack IDs","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":68,"column":39,"index":4372},"line":68,"code":"    it('returns true for valid pack IDs', () => {\n      assert.isTrue(Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8ccf'));\n      assert.isTrue(Stickers.isPackIdValid('3eff225a1036a58a7530b312dd92f8d8'));\n      assert.isTrue(Stickers.isPackIdValid('DDFD48B8097DA7A4E928192B10963F6A'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"redacts pack IDs","suites":["Stickers","redactPackId"],"updatePoint":{"line":75,"column":24,"index":4699},"line":75,"code":"    it('redacts pack IDs', () => {\n      assert.strictEqual(Stickers.redactPackId('b9439fa5fdc8b9873fe64f01b88b8ccf'), '[REDACTED]ccf');\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"renders a template with render_attributes","suites":["Whisper.View"],"updatePoint":{"line":6,"column":47,"index":190},"line":6,"code":"  it('renders a template with render_attributes', () => {\n    const ViewClass = Whisper.View.extend({\n      template: '<div>{{ variable }}</div>',\n      render_attributes: {\n        variable: 'value'\n      }\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>value</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"},{"name":"renders a template with no render_attributes","suites":["Whisper.View"],"updatePoint":{"line":17,"column":50,"index":529},"line":17,"code":"  it('renders a template with no render_attributes', () => {\n    const ViewClass = Whisper.View.extend({\n      template: '<div>static text</div>'\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>static text</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"},{"name":"renders a template function with render_attributes function","suites":["Whisper.View"],"updatePoint":{"line":25,"column":65,"index":824},"line":25,"code":"  it('renders a template function with render_attributes function', () => {\n    const ViewClass = Whisper.View.extend({\n      template() {\n        return '<div>{{ variable }}</div>';\n      },\n\n      render_attributes() {\n        return {\n          variable: 'value'\n        };\n      }\n\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>value</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"}]}