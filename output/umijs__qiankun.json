{"repo":"umijs/qiankun","url":"https://github.com/umijs/qiankun","branch":"master","configs":[{"package":"qiankun","lang":"ts","dir":"src/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"test master to master actions","suites":[],"updatePoint":{"line":10,"column":35},"line":10,"code":"test('test master to master actions', () => {\n  const callback1 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'matser', user: 'master' });\n    expect(prevState).toEqual({ user: 'qiankun' });\n  };\n  master.onGlobalStateChange(callback1);\n  master.setGlobalState({\n    ignore: 'matser',\n    user: 'master',\n  });\n\n  const callback2 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'matser', user: 'master' });\n    expect(prevState).toEqual({ ignore: 'matser', user: 'master' });\n  };\n  master.onGlobalStateChange(callback2, true);\n\n  // 注销监听保证下一个 case 测试\n  master.offGlobalStateChange();\n});","file":"globalState.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"test master to slave actions","suites":[],"updatePoint":{"line":35,"column":34},"line":35,"code":"test('test master to slave actions', () => {\n  const slaveCallback1 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'matser', user: 'master2' });\n    expect(prevState).toEqual({ ignore: 'matser', user: 'master' });\n  };\n  slaveA.onGlobalStateChange(slaveCallback1);\n\n  master.setGlobalState({\n    user: 'master2',\n  });\n\n  const slaveCallback2 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'matser', user: 'master2' });\n    expect(prevState).toEqual({ ignore: 'matser', user: 'master2' });\n  };\n  slaveA.onGlobalStateChange(slaveCallback2, true);\n\n  // 注销监听保证下一个 case 测试\n  slaveA.offGlobalStateChange();\n});","file":"globalState.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"test slave to master actions","suites":[],"updatePoint":{"line":58,"column":34},"line":58,"code":"test('test slave to master actions', () => {\n  const callback1 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'slaveA', user: 'slaveA' });\n    expect(prevState).toEqual({ ignore: 'matser', user: 'master2' });\n  };\n  master.onGlobalStateChange(callback1);\n\n  slaveA.setGlobalState({\n    ignore: 'slaveA',\n    user: 'slaveA',\n  });\n\n  const callback2 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'slaveA', user: 'slaveA' });\n    expect(prevState).toEqual({ ignore: 'slaveA', user: 'slaveA' });\n  };\n  master.onGlobalStateChange(callback2, true);\n\n  // 注销监听保证下一个 case 测试\n  master.offGlobalStateChange();\n});","file":"globalState.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"test slave to slave actions","suites":[],"updatePoint":{"line":83,"column":33},"line":83,"code":"test('test slave to slave actions', () => {\n  const callback1 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'slaveA', user: 'slaveB' });\n    expect(prevState).toEqual({ ignore: 'slaveA', user: 'slaveA' });\n  };\n  slaveA.onGlobalStateChange(callback1);\n\n  slaveB.setGlobalState({\n    ignore2: 'slaveB',\n    user: 'slaveB',\n  });\n\n  const callback2 = (state: Record<string, any>, prevState: Record<string, any>) => {\n    expect(state).toEqual({ ignore: 'slaveA', user: 'slaveB' });\n    expect(prevState).toEqual({ ignore: 'slaveA', user: 'slaveB' });\n  };\n  slaveA.onGlobalStateChange(callback2, true);\n});","file":"globalState.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should wrap the id [1]","suites":[],"updatePoint":{"line":13,"column":28},"line":13,"code":"test('should wrap the id [1]', () => {\n  const id = 'REACT16';\n\n  expect(getWrapperId(id)).toBe(`__qiankun_microapp_wrapper_for_${'react_16'}__`);\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should wrap the id [2]","suites":[],"updatePoint":{"line":19,"column":28},"line":19,"code":"test('should wrap the id [2]', () => {\n  const id = 'react16';\n\n  expect(getWrapperId(id)).toBe('__qiankun_microapp_wrapper_for_react_16__');\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should wrap string with div","suites":[],"updatePoint":{"line":25,"column":33},"line":25,"code":"test('should wrap string with div', () => {\n  const tpl = '<span>qiankun</span>';\n  const factory = getDefaultTplWrapper('react16');\n\n  const ret = factory(tpl);\n\n  expect(ret).toBe(\n    `<div id=\"__qiankun_microapp_wrapper_for_react_16__\" data-name=\"react16\" data-version=\"${version}\">${tpl}</div>`,\n  );\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should be able to validate lifecycle","suites":[],"updatePoint":{"line":36,"column":42},"line":36,"code":"test('should be able to validate lifecycle', () => {\n  const noop = () => undefined;\n\n  const export1 = {\n    bootstrap: noop,\n    mount: noop,\n    unmount: noop,\n  };\n  expect(validateExportLifecycle(export1)).toBeTruthy();\n\n  const export2 = {\n    bootstrap: noop,\n  };\n  expect(validateExportLifecycle(export2)).toBeFalsy();\n\n  const export3 = {};\n  expect(validateExportLifecycle(export3)).toBeFalsy();\n\n  const export4 = {\n    bootstrap: true,\n    mount: 1,\n    unmount: 'noop',\n  };\n  expect(validateExportLifecycle(export4)).toBeFalsy();\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should be able to suspend","suites":[],"line":63,"code":"test.skip('should be able to suspend', async () => {","file":"utils.test.ts","skipped":true,"dir":"src/__tests__"},{"name":"Deferred should worked [1]","suites":[],"updatePoint":{"line":73,"column":32},"line":73,"code":"test('Deferred should worked [1]', async () => {\n  const inst = new Deferred();\n\n  setTimeout(() => {\n    inst.resolve(1);\n  });\n  const ret = await inst.promise;\n\n  expect(ret).toBe(1);\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"Deferred should worked [2]","suites":[],"updatePoint":{"line":84,"column":32},"line":84,"code":"test('Deferred should worked [2]', async () => {\n  const inst = new Deferred();\n\n  setTimeout(() => {\n    inst.reject(new Error());\n  });\n\n  let err = null;\n\n  try {\n    await inst.promise;\n  } catch (e) {\n    err = e;\n  }\n\n  expect(err).toBeInstanceOf(Error);\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should getXPathForElement work well","suites":[],"updatePoint":{"line":102,"column":41},"line":102,"code":"test('should getXPathForElement work well', () => {\n  const article = document.createElement('article');\n  article.innerHTML = `\n    <div>\n      <div></div>\n      <div id=\"testNode\"></div>\n      <div></div>\n    </div>\n  `;\n\n  document.body.appendChild(article);\n  const testNode = document.querySelector('#testNode');\n  const xpath = getXPathForElement(testNode!, document);\n  expect(xpath).toEqual(\n    // eslint-disable-next-line max-len\n    `/*[name()='HTML']/*[name()='BODY'][1]/*[name()='ARTICLE'][1]/*[name()='DIV'][1]/*[name()='DIV'][2]`,\n  );\n\n  const virtualDOM = document.createElement('div');\n  const xpath1 = getXPathForElement(virtualDOM, document);\n  expect(xpath1).toBeUndefined();\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should nextTick just executed once in one task context","suites":[],"updatePoint":{"line":125,"column":58},"line":125,"code":"it('should nextTick just executed once in one task context', async () => {\n  let counter = 0;\n  nextTask(() => ++counter);\n  nextTask(() => ++counter);\n  nextTask(() => ++counter);\n  nextTask(() => ++counter);\n  await sleep(0);\n  expect(counter).toBe(1);\n\n  await sleep(0);\n  nextTask(() => ++counter);\n  await sleep(0);\n  nextTask(() => ++counter);\n  await sleep(0);\n  expect(counter).toBe(3);\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"},{"name":"should genAppInstanceIdByName works well","suites":[],"updatePoint":{"line":142,"column":44},"line":142,"code":"it('should genAppInstanceIdByName works well', () => {\n  const instanceId1 = genAppInstanceIdByName('hello');\n  expect(instanceId1).toBe('hello');\n\n  const instanceId2 = genAppInstanceIdByName('hello');\n  expect(instanceId2).toBe('hello_1');\n\n  const instanceId3 = genAppInstanceIdByName('hello');\n  expect(instanceId3).toBe('hello_2');\n});","file":"utils.test.ts","skipped":false,"dir":"src/__tests__"}]}